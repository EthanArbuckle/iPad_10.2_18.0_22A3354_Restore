uint64_t sub_10007B618(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *v2 = v5;
  v7 = 0;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    if (a1 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1)
      return result;
    v7 = 1;
  }
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v10 = v5;
    else
      v10 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v8 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 <= a1)
    v9 = a1;
  else
    v9 = v8;
  result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v9, a2 & 1, v5);
  *v2 = result;
  return result;
}

uint64_t sub_10007B6D8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (_QWORD *)swift_task_alloc(dword_1000FD7A4);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = (uint64_t *)sub_10007E880(v1, (uint64_t)sub_10001D668);
  return sub_10006671C(v2, v3, v4);
}

uint64_t sub_10007B728(uint64_t result, int a2, char a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  char v21;
  char v22;
  _QWORD v23[9];
  uint64_t v24;

  v5 = result;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_10;
    if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == a2)
        goto LABEL_17;
      __break(1u);
LABEL_10:
      v11 = sub_10007E4F0();
      if (__CocoaSet.Index.age.getter(v11, v12) == *(_DWORD *)(a4 + 36))
      {
        v13 = sub_10007E4F0();
        v24 = __CocoaSet.Index.element.getter(v13, v14);
        v15 = sub_10001E1D8();
        sub_10007E5C4();
        sub_10002B4BC((uint64_t)v23, (uint64_t)&v24, (uint64_t)&type metadata for Swift.AnyObject + 8, v15);
        sub_10007E5CC();
        Hasher.init(_seed:)(v23, *(_QWORD *)(a4 + 40));
        sub_10008B000();
        v16 = Hasher._finalize()();
        v17 = -1 << *(_BYTE *)(a4 + 32);
        v5 = v16 & ~v17;
        sub_10007FC38();
        if ((v18 & 1) != 0)
        {
          sub_10007D280();
          v19 = sub_10008002C();
          sub_10002B88C();
          if ((v19 & 1) == 0)
          {
            v20 = ~v17;
            do
            {
              v5 = (v5 + 1) & v20;
              sub_10007FC38();
              if ((v21 & 1) == 0)
                goto LABEL_22;
              sub_10007D280();
              v22 = sub_10008002C();
              sub_10002B88C();
            }
            while ((v22 & 1) == 0);
          }
          sub_100044820();
LABEL_17:
          v10 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v5);
          sub_10002B400();
          return v10;
        }
LABEL_22:
        result = sub_100044820();
        __break(1u);
        goto LABEL_23;
      }
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    __break(1u);
    goto LABEL_21;
  }
  if ((a3 & 1) != 0)
  {
    v6 = sub_10007E4F0();
    v24 = __CocoaSet.element(at:)(v6, v7, v8);
    v9 = sub_10001E1D8();
    sub_10007E5C4();
    sub_10002B4BC((uint64_t)v23, (uint64_t)&v24, (uint64_t)&type metadata for Swift.AnyObject + 8, v9);
    v10 = v23[0];
    sub_10007E5CC();
    return v10;
  }
LABEL_23:
  __break(1u);
  return result;
}

void sub_10007B914()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  char v3;
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[9];
  _BYTE v46[8];

  sub_10007FCDC();
  if (v4)
  {
    if ((v3 & 1) == 0)
    {
      if (v1 < 0 || (sub_100080004(), v6 ^ v7 | v4))
      {
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
      sub_10007F5E0();
      if ((v8 & 1) == 0)
      {
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
      if (*(_DWORD *)(v0 + 36) == v2)
      {
LABEL_14:
        sub_10002B400();
        goto LABEL_15;
      }
      __break(1u);
    }
    if (sub_1000801A0() != *(_DWORD *)(v0 + 36))
    {
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    sub_100080194();
    v9 = sub_10007FA74();
    sub_10007E5C4();
    sub_10002B4BC((uint64_t)v45, (uint64_t)v46, (uint64_t)&type metadata for Swift.AnyObject + 8, v9);
    v10 = v45[0];
    v11 = sub_10007E5CC();
    sub_10007FC8C(v11, v12);
    v44 = v10;
    sub_100002F78(&qword_1000FB2D8);
    sub_100006744(&qword_1000FB2E0, &qword_1000FB2D8);
    sub_10007F40C(v13, v14, v15);
    v16 = Hasher._finalize()();
    v17 = -1 << *(_BYTE *)(v0 + 32);
    v18 = v16 & ~v17;
    sub_10007DB0C();
    if ((v27 & 1) != 0)
    {
      v28 = sub_10007F63C();
      type metadata accessor for Session(v28);
      sub_10007D280();
      v29 = sub_10007F900();
      v30 = sub_10002B88C();
      if ((v29 & 1) != 0)
      {
LABEL_13:
        sub_10007F4B0(v30, v31, v32, v33, v34, v35, v36, v37, v43, v44);
        goto LABEL_14;
      }
      v38 = ~v17;
      v39 = (v18 + 1) & v38;
      sub_10007DB0C();
      if ((v40 & 1) != 0)
      {
        do
        {
          sub_10001DAE8();
          v41 = sub_10007F398();
          v30 = sub_10001DBEC();
          if ((v41 & 1) != 0)
            goto LABEL_13;
          v39 = (v39 + 1) & v38;
          sub_10007DB0C();
        }
        while ((v42 & 1) != 0);
      }
    }
    sub_10007F4B0(v19, v20, v21, v22, v23, v24, v25, v26, v43, v44);
    __break(1u);
    goto LABEL_20;
  }
  if ((v3 & 1) != 0)
  {
    sub_10007EF24();
    v5 = sub_10007FA74();
    sub_10007E5C4();
    sub_10002B4BC((uint64_t)v45, (uint64_t)v46, (uint64_t)&type metadata for Swift.AnyObject + 8, v5);
    sub_10007E5CC();
LABEL_15:
    sub_10001D8F8();
    return;
  }
LABEL_23:
  __break(1u);
}

void sub_10007BAFC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  char v3;
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[9];
  _BYTE v46[8];

  sub_10007FCDC();
  if (v4)
  {
    if ((v3 & 1) == 0)
    {
      if (v1 < 0 || (sub_100080004(), v6 ^ v7 | v4))
      {
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
      sub_10007F5E0();
      if ((v8 & 1) == 0)
      {
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
      if (*(_DWORD *)(v0 + 36) == v2)
      {
LABEL_14:
        sub_10002B400();
        goto LABEL_15;
      }
      __break(1u);
    }
    if (sub_1000801A0() != *(_DWORD *)(v0 + 36))
    {
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    sub_100080194();
    v9 = sub_10007FA84();
    sub_10007E5C4();
    sub_10002B4BC((uint64_t)v45, (uint64_t)v46, (uint64_t)&type metadata for Swift.AnyObject + 8, v9);
    v10 = v45[0];
    v11 = sub_10007E5CC();
    sub_10007FC8C(v11, v12);
    v44 = v10;
    sub_100002F78(&qword_1000FB2A0);
    sub_100006744(&qword_1000FB2A8, &qword_1000FB2A0);
    sub_10007F40C(v13, v14, v15);
    v16 = Hasher._finalize()();
    v17 = -1 << *(_BYTE *)(v0 + 32);
    v18 = v16 & ~v17;
    sub_10007DB0C();
    if ((v27 & 1) != 0)
    {
      v28 = sub_10007F63C();
      type metadata accessor for OneShotRequest(v28);
      sub_10007D280();
      v29 = sub_10007F900();
      v30 = sub_10002B88C();
      if ((v29 & 1) != 0)
      {
LABEL_13:
        sub_10007F4B0(v30, v31, v32, v33, v34, v35, v36, v37, v43, v44);
        goto LABEL_14;
      }
      v38 = ~v17;
      v39 = (v18 + 1) & v38;
      sub_10007DB0C();
      if ((v40 & 1) != 0)
      {
        do
        {
          sub_10001DAE8();
          v41 = sub_10007F398();
          v30 = sub_10001DBEC();
          if ((v41 & 1) != 0)
            goto LABEL_13;
          v39 = (v39 + 1) & v38;
          sub_10007DB0C();
        }
        while ((v42 & 1) != 0);
      }
    }
    sub_10007F4B0(v19, v20, v21, v22, v23, v24, v25, v26, v43, v44);
    __break(1u);
    goto LABEL_20;
  }
  if ((v3 & 1) != 0)
  {
    sub_10007EF24();
    v5 = sub_10007FA84();
    sub_10007E5C4();
    sub_10002B4BC((uint64_t)v45, (uint64_t)v46, (uint64_t)&type metadata for Swift.AnyObject + 8, v5);
    sub_10007E5CC();
LABEL_15:
    sub_10001D8F8();
    return;
  }
LABEL_23:
  __break(1u);
}

uint64_t sub_10007BCE4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  _QWORD *v11;

  v10 = *a3;
  v11 = (_QWORD *)swift_task_alloc(dword_1000FD7F4);
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_10001CA84;
  return sub_10004CC48(a1, a2, v10, a4, a5);
}

uint64_t sub_10007BD64()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  sub_100037EFC();
  sub_10007DB68();
  v0 = sub_10007ED38();
  v1 = (_QWORD *)sub_100006AF4(v0);
  v2 = sub_10007D188(v1);
  return sub_10007D238(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_10007BDA8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (_QWORD *)swift_task_alloc(dword_1000FD7C4);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = (uint64_t *)sub_10007E880(v1, (uint64_t)sub_10001D668);
  return sub_100066A20(v2, v3, v4);
}

uint64_t sub_10007BDF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_10007BE3C()
{
  unint64_t result;

  result = qword_1000FD7D8;
  if (!qword_1000FD7D8)
  {
    result = swift_getWitnessTable(&unk_1000CC484, &type metadata for InferenceProviderAssetManagerInternalError);
    atomic_store(result, (unint64_t *)&qword_1000FD7D8);
  }
  return result;
}

uint64_t sub_10007BE78(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v12;
  _QWORD *v13;

  v12 = *a6;
  v13 = (_QWORD *)swift_task_alloc(dword_1000FD814);
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = sub_10001D668;
  return sub_10004D148(a1, a2, a3, a4, a5, v12);
}

uint64_t sub_10007BF00()
{
  uint64_t v0;

  sub_10002BBD8();
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10007BF30()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  sub_10001DB50();
  v1 = swift_task_alloc(dword_1000FD804);
  v2 = (_QWORD *)sub_100006AF4(v1);
  *v2 = v0;
  v2[1] = sub_10001D668;
  v3 = sub_10007EEE4();
  return v4(v3);
}

uint64_t sub_10007BFA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(sub_10007D89C() - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = v2 | 7;
  sub_10007F858();
  sub_10007FBE8();
  sub_10007E7EC(v0 + v3, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  v5 = sub_100037FBC();
  return sub_10001E060(v5, v6, v4);
}

uint64_t sub_10007BFFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_10007D89C() - 8) + 80);
  v3 = v0 + ((v2 + 32) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_1000FD82C);
  *(_QWORD *)(v1 + 16) = v4;
  v5 = (uint64_t *)sub_10007F9EC(v4, (uint64_t)sub_10001D668);
  return sub_1000633C4(v5, v6, v7, v3);
}

uint64_t sub_10007C06C()
{
  uint64_t v0;

  sub_10007F858();
  sub_10007FBE8();
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10007C090()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (_QWORD *)swift_task_alloc(dword_1000FD844);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = (uint64_t *)sub_10007E880(v1, (uint64_t)sub_10001D668);
  return sub_100063878(v2, v3, v4);
}

uint64_t sub_10007C0E0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10007C108()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10001FAD0();
  v0 = swift_task_alloc(dword_1000FD864);
  v1 = (_QWORD *)sub_100006AF4(v0);
  v2 = sub_100006AD8(v1);
  return sub_10006C828(v2, v3, v4, v5);
}

uint64_t sub_10007C154(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  _QWORD *v11;

  v10 = *a3;
  v11 = (_QWORD *)swift_task_alloc(dword_1000FF80C);
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_10001D668;
  return sub_1000B2480(a1, a2, v10, a4, a5);
}

uint64_t sub_10007C1D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  char v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  _QWORD v13[2];

  v13[0] = 91;
  v13[1] = 0xE100000000000000;
  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    swift_retain();
    swift_retain();
    v5 = 0;
    v6 = 1;
    do
    {
      v7 = *(_QWORD *)(a2 + 8 * v5 + 32);
      swift_retain();
      if ((v6 & 1) == 0)
      {
        v8._countAndFlagsBits = 8236;
        v8._object = (void *)0xE200000000000000;
        String.append(_:)(v8);
      }
      ++v5;
      v9 = sub_100002F78(&qword_1000FB238);
      v10 = swift_allocObject(v9, 64, 7);
      *(_OWORD *)(v10 + 16) = xmmword_1000CB140;
      *(_QWORD *)(v10 + 56) = type metadata accessor for InferenceProviderAsset(0);
      *(_QWORD *)(v10 + 32) = v7;
      swift_retain();
      print<A>(_:separator:terminator:to:)(v10, 32, 0xE100000000000000, 0, 0xE000000000000000, v13, &type metadata for String, &protocol witness table for String);
      swift_release(v7);
      swift_bridgeObjectRelease(v10);
      v6 = 0;
    }
    while (v2 != v5);
    swift_release(a2);
    swift_release(a1);
  }
  v11._countAndFlagsBits = 93;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  return v13[0];
}

uint64_t sub_10007C32C()
{
  uint64_t v0;
  _QWORD *v1;

  v0 = swift_task_alloc(dword_1000FD894);
  v1 = (_QWORD *)sub_100006AF4(v0);
  sub_10007E388(v1);
  return sub_10006BC5C();
}

uint64_t sub_10007C370@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v8;

  result = sub_10007A194(a1, a2, a3, *a4);
  if (!v5)
  {
    *a5 = result;
    a5[1] = v8;
  }
  return result;
}

uint64_t sub_10007C39C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_10007C370(a1, *(_QWORD *)(v2 + 16), *(_QWORD **)(v2 + 24), *(uint64_t **)(v2 + 32), a2);
}

_QWORD *sub_10007C3B8(uint64_t a1)
{
  uint64_t v1;

  return sub_10007A718(a1, *(uint64_t **)(v1 + 16), *(_QWORD *(**)(_QWORD *__return_ptr))(v1 + 24));
}

uint64_t sub_10007C3D4(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (a2)
  {
    v2 = result;
    swift_release(a2);
    return swift_release(v2);
  }
  return result;
}

uint64_t sub_10007C404(_QWORD *a1)
{
  uint64_t v1;

  return sub_10006C608(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24)) & 1;
}

uint64_t sub_10007C424()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10001FAD0();
  v0 = swift_task_alloc(dword_1000FD8A4);
  v1 = (_QWORD *)sub_100006AF4(v0);
  v2 = sub_100006AD8(v1);
  return sub_10006F524(v2, v3, v4, v5);
}

uint64_t sub_10007C470()
{
  uint64_t v0;
  _QWORD *v1;

  v0 = swift_task_alloc(dword_1000FD8C4);
  v1 = (_QWORD *)sub_100006AF4(v0);
  sub_10007E388(v1);
  return sub_10006BC5C();
}

uint64_t sub_10007C4B4(_QWORD *a1)
{
  uint64_t v1;

  return sub_10006F334(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24)) & 1;
}

uint64_t sub_10007C4D4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10001FAD0();
  v0 = swift_task_alloc(dword_1000FD8DC);
  v1 = (_QWORD *)sub_100006AF4(v0);
  v2 = sub_100006AD8(v1);
  return sub_1000676BC(v2, v3, v4, v5);
}

uint64_t sub_10007C520(uint64_t a1)
{
  uint64_t v1;

  return sub_10006BB04(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10007C528()
{
  uint64_t v0;
  _QWORD *v1;

  v0 = swift_task_alloc(dword_1000FD8F4);
  v1 = (_QWORD *)sub_100006AF4(v0);
  sub_10007E388(v1);
  return sub_10006BC5C();
}

uint64_t sub_10007C56C(_QWORD *a1)
{
  uint64_t v1;

  return sub_10006736C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24)) & 1;
}

uint64_t sub_10007C588()
{
  _QWORD *v0;

  sub_10007F858();
  swift_bridgeObjectRelease(v0[3]);
  sub_10000650C(v0 + 4);
  swift_bridgeObjectRelease(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10007C5C0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  sub_10001DD0C();
  v3 = v2;
  v4 = v0[2];
  v5 = v0[3];
  v6 = (uint64_t)(v0 + 4);
  v7 = v0[9];
  v8 = swift_task_alloc(dword_1000FD90C);
  v9 = (_QWORD *)sub_100006AF4(v8);
  *v9 = v1;
  v9[1] = sub_10001D668;
  return sub_10005A640(v3, v4, v5, v6, v7);
}

uint64_t sub_10007C634()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  sub_10001DB50();
  v3 = v2;
  v5 = v4;
  v6 = v0[2];
  v7 = v0[3];
  v8 = v0[4];
  v9 = v0[5];
  v10 = v0[6];
  v11 = swift_task_alloc(dword_1000FD91C);
  v12 = (_QWORD *)sub_100006AF4(v11);
  *v12 = v1;
  v12[1] = sub_10001D668;
  return sub_10005A890(v5, v3, v6, v7, v8, v9, v10);
}

uint64_t sub_10007C6B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = *(_QWORD *)(sub_10007F430() - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 40) & ~v2;
  v4 = v2 | 7;
  v5 = (*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10002BBD8();
  swift_release(*(_QWORD *)(v0 + 32));
  v6 = (_QWORD *)(v0 + v3);
  swift_bridgeObjectRelease(v6[1]);
  swift_bridgeObjectRelease(v6[2]);
  swift_bridgeObjectRelease(v6[3]);
  v7 = sub_10004A92C();
  sub_10001DD50(v7);
  sub_10000650C((_QWORD *)(v0 + v5));
  return sub_10001E060(v0, v5 + 40, v4);
}

uint64_t sub_10007C750()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_100037EFC();
  sub_10007F430();
  v1 = swift_task_alloc(dword_1000FD934);
  v2 = (_QWORD *)sub_100006AF4(v1);
  *v2 = v0;
  v2[1] = sub_10001D668;
  v3 = sub_10007EEE4();
  return sub_10005AFF4(v3, v4, v5, v6, v7, v8);
}

uint64_t sub_10007C7D8(uint64_t *a1)
{
  uint64_t v1;

  return sub_10005A31C(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24)) & 1;
}

uint64_t sub_10007C7F4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v0 = swift_task_alloc(dword_1000FD944);
  v1 = (_QWORD *)sub_100006AF4(v0);
  v2 = sub_10007E388(v1);
  return sub_1000598EC(v2, v3);
}

uint64_t sub_10007C838(uint64_t a1)
{
  uint64_t v1;

  return sub_100058E50(a1, *(_QWORD **)(v1 + 16)) & 1;
}

uint64_t sub_10007C854(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for InferenceProviderAssetManagerPolicy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007C898()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t *v3;

  v2 = (_QWORD *)swift_task_alloc(dword_1000FD964);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10001D668;
  v3 = (uint64_t *)sub_10001E2B4();
  return sub_100058B70(v3, v0);
}

uint64_t sub_10007C8E4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  sub_100037EFC();
  sub_10007DB68();
  v0 = sub_10007ED38();
  v1 = (_QWORD *)sub_100006AF4(v0);
  v2 = sub_10007D188(v1);
  return sub_10007D238(v2, v3, v4, v5, v6, v7);
}

void sub_10007C924()
{
  sub_1000581BC();
}

#error "10007C958: call analysis failed (funcsize=10)"

void sub_10007C964()
{
  sub_100057BD4();
}

void sub_10007C96C(uint64_t *a1)
{
  uint64_t v1;

  sub_100057200(a1, *(_QWORD *)(v1 + 16), *(void (**)(char *, uint64_t))(v1 + 24));
}

void sub_10007C984()
{
  sub_100053D4C();
}

#error "10007C9C8: call analysis failed (funcsize=10)"

uint64_t sub_10007C9D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(sub_10007D89C() - 8);
  v21 = *(unsigned __int8 *)(v1 + 80);
  v2 = (v21 + 32) & ~v21;
  v3 = v2 + *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(sub_100002F78(&qword_1000FB920) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v3 + v5) & ~v5;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = *(_QWORD *)(sub_100002F78(&qword_1000FD820) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v6 + v7 + v9) & ~v9;
  v11 = *(_QWORD *)(v8 + 64);
  v12 = *(_QWORD *)(sub_100002F78(&qword_1000FD7E0) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v10 + v11 + v13;
  v20 = *(_QWORD *)(v12 + 64);
  sub_10007F858();
  sub_10007FBE8();
  sub_10007E7EC(v0 + v2, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  v15 = sub_100002F78(&qword_1000FB2A0);
  if (!sub_10007E424(v15))
    sub_10007D04C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8));
  v16 = v14 & ~v13;
  v17 = sub_100002F78(&qword_1000FB2D8);
  if (!sub_10007E424(v17))
    sub_10007D04C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8));
  v18 = sub_10002BCD4();
  if (!sub_10007E424(v18))
    sub_10007D04C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8));
  return swift_deallocObject(v0, v20 + v16 + 1, v21 | v5 | v9 | v13 | 7);
}

uint64_t sub_10007CB40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  sub_10001DB68();
  v2 = sub_10007D89C();
  v3 = (*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  sub_100002F78(&qword_1000FB920);
  sub_10007F700();
  v6 = v5 & ~v4;
  sub_100002F78(&qword_1000FD820);
  sub_10007F700();
  v9 = (v6 + v7) & ~v8;
  sub_100002F78(&qword_1000FD7E0);
  sub_10007F700();
  v12 = (v9 + v10) & ~v11;
  v14 = v0 + v3;
  v15 = v0 + v6;
  v16 = v0 + v9;
  v17 = v0 + v12;
  v18 = *(_BYTE *)(v0 + v12 + *(_QWORD *)(v13 + 64));
  v19 = (_QWORD *)swift_task_alloc(dword_1000FD99C);
  *(_QWORD *)(v1 + 16) = v19;
  v20 = (_QWORD *)sub_10007F9EC(v19, (uint64_t)sub_10001D668);
  return sub_100052364(v20, v21, v22, v14, v15, v16, v17, v18);
}

uint64_t sub_10007CC30()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  sub_100037EFC();
  sub_10007DB68();
  v0 = sub_10007ED38();
  v1 = (_QWORD *)sub_100006AF4(v0);
  v2 = sub_10007D188(v1);
  return sub_10007D238(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_10007CC70(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_10007CC98(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

_QWORD *initializeBufferWithCopyOfBuffer for InferenceProviderAssetManagerInternalError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for InferenceProviderAssetManagerInternalError(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for InferenceProviderAssetManagerInternalError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

__n128 initializeWithTake for InferenceProviderAssetManagerInternalError(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *assignWithTake for InferenceProviderAssetManagerInternalError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for InferenceProviderAssetManagerInternalError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for InferenceProviderAssetManagerInternalError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_10007CE14(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_10007CE2C(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for InferenceProviderAssetManagerInternalError()
{
  return &type metadata for InferenceProviderAssetManagerInternalError;
}

uint64_t sub_10007CE78()
{
  return sub_10007C92C();
}

uint64_t sub_10007CE8C()
{
  return sub_10007C99C();
}

void sub_10007CEA0()
{
  sub_10007C984();
}

void sub_10007CECC(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  os_log_type_t v4;
  uint8_t *v5;

  _os_log_impl(a1, a2, v4, a4, v5, 2u);
}

void sub_10007CEDC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_10007CF10(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10007CF2C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10007CF44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_10007CF60()
{
  return Task.value.getter();
}

void sub_10007CFEC()
{
  void *v0;

}

uint64_t sub_10007D004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100064078(a1, a2, a3);
}

uint64_t sub_10007D020()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_10007D030(uint64_t a1, uint64_t a2)
{
  return sub_10005E464(a1, a2);
}

uint64_t sub_10007D04C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_10007D058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v11 = v8[29];
  v12 = v8[26];
  v13 = v8[27];
  v18 = v8[28];
  v19 = v8[24];
  v15 = v8[23];
  v16 = v8[20];
  v17 = v8[17];
  *(_DWORD *)(v10 - 96) = *v9;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 16))(v11, v8[12], v12, a4, a5, a6, a7, a8, v8[11], v15, v16, v17, v18, v19);
}

uint64_t sub_10007D0B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  return sub_100050B60(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_10007D0D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  return sub_100050B60(a1, a2, a3, a4, a5, a6);
}

void sub_10007D0F0(uint64_t a1@<X8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 + ((v1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v1;
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v1) = v3;
  ++*(_QWORD *)(v2 + 16);
}

uint64_t sub_10007D124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1000BF908(v3, (a3 & 0xC000000000000001) == 0);
}

uint64_t sub_10007D134()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 336));
}

uint64_t sub_10007D188(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10007D1C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(a1, a2, v2);
}

uint64_t sub_10007D1D8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = v2;
  a1[1] = a2;
  return *(_QWORD *)(v2 + 240);
}

uint64_t sub_10007D200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_10007D21C()
{
  return Task.value.getter();
}

uint64_t sub_10007D238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  return a6();
}

uint64_t sub_10007D24C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_10007D260()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 392);
  *(_QWORD *)(v1 - 96) = *(_QWORD *)(v0 + 272);
  return swift_task_dealloc(v2);
}

uint64_t sub_10007D280()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_10007D288()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
    v2 = 1;
  else
    v2 = 0;
  return sub_1000BF908(v1, v2);
}

uint64_t sub_10007D294@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v3, v2);
}

uint64_t sub_10007D2A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_10007D2B8(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

uint64_t sub_10007D2C4(uint64_t a1)
{
  return swift_allocObject(a1, 32, 7);
}

uint64_t sub_10007D2D0()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 368) + 104))(*(_QWORD *)(v0 + 384), *(unsigned int *)(v0 + 572), *(_QWORD *)(v0 + 360));
}

uint64_t sub_10007D2EC(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_10007D30C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10007D32C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100064078(a1, a2, a3);
}

void sub_10007D34C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  sub_10002AC98(v1, v0, v2);
}

uint64_t sub_10007D35C()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v1, v0);
}

void sub_10007D368()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  sub_10002AC98(v1, v0, v2);
}

void sub_10007D378(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10002AC98(a1, a2, v2);
}

uint64_t sub_10007D380()
{
  uint64_t v0;

  sub_100005630(*(_QWORD *)(v0 + 152), 1, 1, *(_QWORD *)(v0 + 160));
  return *(_QWORD *)(v0 + 152);
}

uint64_t sub_10007D3A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 392);
  *(_QWORD *)(v1 - 96) = *(_QWORD *)(v0 + 272);
  return swift_task_dealloc(v2);
}

BOOL sub_10007D3C0(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10007D3D0(uint64_t a1)
{
  uint64_t v1;

  return sub_100005700(a1, 1, v1);
}

uint64_t sub_10007D408(uint64_t a1)
{
  return swift_release_n(a1, 3);
}

void sub_10007D410(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;

  sub_100048DB4(a1, v1, v2);
}

uint64_t sub_10007D41C()
{
  uint64_t v0;

  sub_100005630(*(_QWORD *)(v0 + 384), 1, 1, *(_QWORD *)(v0 + 504));
  return swift_retain();
}

uint64_t sub_10007D460@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  *a2 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a2, a12, v12);
}

uint64_t sub_10007D478()
{
  return type metadata accessor for InferenceProviderAssetDescriptor(0);
}

uint64_t sub_10007D480(uint64_t (*a1)(void))
{
  return a1();
}

BOOL sub_10007D4C8(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10007D4D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, uint64_t a10)
{
  uint64_t v10;

  *a9 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a9, a10, v10);
}

uint64_t sub_10007D4F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  _QWORD *v11;

  *v11 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v11, a10, v10);
}

void sub_10007D510()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000102C0(v1, v0, (uint64_t *)(v2 - 88));
}

uint64_t sub_10007D520()
{
  return ((uint64_t (*)(void))withThrowingTaskGroup<A, B>(of:returning:isolation:body:))();
}

uint64_t sub_10007D530()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t sub_10007D53C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_10007D54C(uint64_t a1)
{
  uint64_t v1;

  return sub_100005630(a1, 0, 1, v1);
}

uint64_t sub_10007D55C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)(v23 + 288) = a1;
  *(_QWORD *)(a1 + 16) = v25;
  *(_QWORD *)(a1 + 24) = a22;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(a1 + v22, a21, a20);
}

uint64_t sub_10007D580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  _QWORD *v14;

  *v14 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v14, a13, v13);
}

uint64_t sub_10007D59C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 184) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3, v2 + 192, v1);
}

uint64_t sub_10007D5D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(v18 + 176) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a18, a13, v19);
}

uint64_t sub_10007D5F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_10007D5FC()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 232));
}

uint64_t sub_10007D610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;

  return swift_dynamicCast(a16, v16, a3, a4, 0);
}

uint64_t sub_10007D624()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 424));
}

void sub_10007D650(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  sub_1000102C0(a1, v3, a3);
}

uint64_t sub_10007D658@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  *a2 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a2, a13, *(_QWORD *)(v13 - 96));
}

uint64_t sub_10007D670()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0[40] + 16))(v0[44], v0[30] + v0[51], v0[39]);
}

uint64_t sub_10007D69C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  *v3 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3, v1, v2);
}

uint64_t sub_10007D6B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v25, a25, v26);
}

uint64_t sub_10007D6C8(uint64_t a1, uint64_t a2)
{
  return sub_10005E464(a1, a2);
}

uint64_t sub_10007D6E8()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 336));
}

void sub_10007D73C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  sub_1000102C0(a1, v3, a3);
}

uint64_t sub_10007D744()
{
  uint64_t v0;

  return swift_endAccess(v0);
}

uint64_t sub_10007D74C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10007BDF8(v0, v1);
}

uint64_t sub_10007D758()
{
  return ((uint64_t (*)(void))static Task<>.sleep<A>(until:tolerance:clock:))();
}

void sub_10007D778()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  sub_10002ACC4(v0, v1);
}

uint64_t sub_10007D784(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

void sub_10007D78C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_10002AD5C(v2, a2);
}

uint64_t sub_10007D794@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v3, v2);
}

uint64_t sub_10007D7A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t (*a20)(_QWORD, _QWORD, _QWORD))
{
  _QWORD *v20;

  return a20(v20[42], v20[30] + v20[51], v20[39]);
}

uint64_t sub_10007D7C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  return v3(v5, v4, v2, v0, v1);
}

uint64_t sub_10007D7E4@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v2, v1, v3);
}

uint64_t sub_10007D7F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100064078(a1, a2, a3);
}

uint64_t sub_10007D810@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

void sub_10007D81C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  sub_1000102C0(a1, v3, a3);
}

uint64_t sub_10007D824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3);
}

void sub_10007D82C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10002AC98(a1, a2, v2);
}

uint64_t sub_10007D88C()
{
  return swift_willThrow();
}

uint64_t sub_10007D894(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_10007D89C()
{
  return type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason(0);
}

uint64_t sub_10007D8A4()
{
  uint64_t v0;

  return v0;
}

void sub_10007D8B8(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_10002ACC4(a1, v1);
}

uint64_t sub_10007D8C0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10007D8D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized _ArrayBuffer._getElementSlowPath(_:)(v2, a2);
}

uint64_t sub_10007D8DC()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 232));
}

uint64_t sub_10007D8F0()
{
  uint64_t v0;

  return swift_errorRelease(*(_QWORD *)(v0 + 168));
}

uint64_t sub_10007D904()
{
  uint64_t v0;
  uint64_t v1;

  *(_WORD *)(v0 + 12) = 2112;
  return swift_errorRetain(v1);
}

uint64_t sub_10007D918()
{
  uint64_t v0;

  return swift_weakLoadStrong(*(_QWORD *)(v0 + 88) + 16);
}

uint64_t sub_10007D924()
{
  uint64_t (*v0)(_QWORD, _QWORD);
  uint64_t v1;

  return v0(*(_QWORD *)(v1 + 544), *(_QWORD *)(v1 + 504));
}

uint64_t sub_10007D938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  return sub_100011704(0, v9, (uint64_t *)((char *)&a9 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0)));
}

void sub_10007D95C()
{
  void *v0;

}

uint64_t sub_10007D970()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10007D978()
{
  return sub_100072A4C();
}

uint64_t sub_10007D990(uint64_t a1)
{
  return sub_10006CF44(a1);
}

uint64_t sub_10007D9A8(uint64_t a1)
{
  return sub_100067DD8(a1);
}

uint64_t sub_10007D9C0(uint64_t a1)
{
  return sub_10006FC70(a1);
}

uint64_t sub_10007D9D8()
{
  return type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
}

uint64_t sub_10007D9E0()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 192));
}

uint64_t sub_10007D9F4()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 192));
}

uint64_t sub_10007DA08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a21 + 16))(v22, v21 + *(int *)(a20 + 32), v23);
}

uint64_t sub_10007DA2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

void sub_10007DA38()
{
  uint64_t v0;
  uint64_t *v1;

  sub_10002AD5C(v0, v1);
}

uint64_t sub_10007DA44(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 152);
}

uint64_t sub_10007DA6C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  *a2 = v14;
  a2[1] = 0;
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

BOOL sub_10007DA7C(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void sub_10007DA98(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10002AC98(a1, a2, v2);
}

uint64_t sub_10007DAA0()
{
  uint64_t v0;
  _QWORD *v1;

  return sub_100011704(0, v0, v1);
}

uint64_t sub_10007DAB0(uint64_t a1, uint64_t a2)
{
  return sub_10004711C(a1, a2);
}

uint64_t sub_10007DABC(uint64_t a1)
{
  uint64_t v1;

  return sub_100005630(a1, 0, 1, v1);
}

uint64_t sub_10007DACC()
{
  return static Task<>.isCancelled.getter();
}

uint64_t sub_10007DADC()
{
  return __CocoaSet.Iterator.next()();
}

uint64_t sub_10007DAE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t (*a26)(uint64_t, uint64_t))
{
  uint64_t v26;
  uint64_t v27;

  return a26(v26, v27);
}

uint64_t sub_10007DAF4()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10007DB04()
{
  return swift_task_alloc(32);
}

uint64_t sub_10007DB20()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 392));
}

uint64_t sub_10007DB40()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 - 96));
}

uint64_t sub_10007DB54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

BOOL sub_10007DB5C(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10007DB7C(uint64_t result, float a2)
{
  float *v2;
  uint64_t v3;

  *v2 = a2;
  *(_QWORD *)(v3 - 88) = result;
  return result;
}

uint64_t sub_10007DB90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return swift_dynamicCast(a1, v4, a3, a4, 0);
}

void sub_10007DB9C()
{
  _OSActivity.close()();
}

uint64_t sub_10007DBA4()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v0, v1);
}

uint64_t sub_10007DBB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 0);
}

uint64_t sub_10007DBB8(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

uint64_t sub_10007DBC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100005630(a1, a2, 1, v2);
}

uint64_t sub_10007DBD0()
{
  uint64_t v0;

  return swift_endAccess(v0);
}

uint64_t sub_10007DBD8()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 2);
}

void sub_10007DBE4(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_10002ACC4(a1, v1);
}

uint64_t sub_10007DBEC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10007DBF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return swift_release(a15);
}

uint64_t sub_10007DC00()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = v0[33];
  *(_QWORD *)(v1 - 104) = v0[34];
  *(_QWORD *)(v1 - 96) = v2;
  return swift_bridgeObjectRelease(v0[29]);
}

void sub_10007DC38(uint64_t a1@<X8>)
{
  unint64_t v1;

  *(_QWORD *)(a1 + ((v1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v1;
}

void sub_10007DC5C(uint64_t a1@<X8>)
{
  _QWORD *v1;

  v1[30] = a1;
  v1[31] = *(_QWORD *)(v1[22] + v1[29] + *(int *)(v1[26] + 28));
}

BOOL sub_10007DC80(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

void sub_10007DC88()
{
  uint64_t v0;

  ++*(_QWORD *)(v0 + 16);
}

uint64_t sub_10007DC98()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 520);
}

void sub_10007DCC8(uint64_t a1)
{
  uint64_t *v1;

  sub_10002AD5C(a1, v1);
}

void sub_10007DCD0(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_10002ACC4(a1, v1);
}

uint64_t sub_10007DCD8()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10007DCE0(uint64_t a1)
{
  uint64_t v1;

  return sub_10007BDF8(a1, v1);
}

uint64_t sub_10007DCE8()
{
  return type metadata accessor for LoadState(0);
}

void sub_10007DCF0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_10002AD5C(v2, a2);
}

_QWORD *sub_10007DCF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10001C830((_QWORD *)(a1 + v1), *(_QWORD *)(a1 + v1 + 24));
}

uint64_t sub_10007DD04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104))(v3, v1, v0);
}

uint64_t sub_10007DD18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_10007DD20(float *a1, float a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = a2;
  *(_QWORD *)(v3 + 56) = v2;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v4, v3 + 64, a1 + 1);
}

uint64_t sub_10007DD3C()
{
  return ((uint64_t (*)(void))swift_taskGroup_wait_next_throwing)();
}

uint64_t sub_10007DD4C()
{
  return ((uint64_t (*)(void))ThrowingTaskGroup.next(isolation:))();
}

uint64_t sub_10007DD5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v2 + 8))(v0, *(_QWORD *)(v1 + 560));
}

void sub_10007DD78(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10002AC98(a1, a2, v2);
}

uint64_t sub_10007DD80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;

  *a15 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a15, v21, a21);
}

void sub_10007DD9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  sub_100005700(v1, 1, v0);
  sub_10002AD5C(v1, v2);
}

uint64_t sub_10007DDC4(float a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  float *v19;

  *v19 = a1;
  return swift_retain(a19);
}

uint64_t sub_10007DDE0@<X0>(uint64_t (*a1)(_QWORD, _QWORD, _QWORD)@<X8>)
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 128), *(unsigned int *)(v1 + 252), *(_QWORD *)(v1 + 104));
}

uint64_t sub_10007DDF0@<X0>(uint64_t (*a1)(_QWORD, _QWORD, _QWORD)@<X8>)
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 120), *(unsigned int *)(v1 + 252), *(_QWORD *)(v1 + 104));
}

void sub_10007DE00()
{
  sub_1000540A4();
}

uint64_t sub_10007DE1C()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10007DE2C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_10007DE4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  return swift_task_dealloc(a21);
}

uint64_t sub_10007DE54(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(a1, v1);
}

uint64_t sub_10007DE5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return swift_task_dealloc(a20);
}

uint64_t sub_10007DE64()
{
  _QWORD *v0;

  return swift_errorRelease(*v0);
}

uint64_t sub_10007DE6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return swift_task_dealloc(a19);
}

uint64_t sub_10007DE74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return swift_release(a18);
}

uint64_t sub_10007DE7C()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_10007DE9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_10007DEA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  return swift_task_dealloc(a22);
}

void sub_10007DEAC(uint64_t a1@<X8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 + ((v1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v1;
  *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v1) = v2;
  ++*(_QWORD *)(v3 + 16);
}

void sub_10007DEE0(uint64_t a1@<X8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 + ((v1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v1;
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v1) = v3;
  ++*(_QWORD *)(v2 + 16);
}

void sub_10007DF14(uint64_t a1@<X8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 + ((v1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v1;
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v1) = v3;
  ++*(_QWORD *)(v2 + 16);
}

void sub_10007DF48()
{
  sub_100014280();
}

uint64_t sub_10007DF54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3);
}

uint64_t sub_10007DF5C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3;

  return sub_100075108(a1, v3, a3);
}

uint64_t sub_10007DF68()
{
  uint64_t v0;

  return Date.timeIntervalSince(_:)(*(_QWORD *)(v0 + 520));
}

uint64_t sub_10007DF80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  *a23 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a23, a17, a22);
}

uint64_t sub_10007DF98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  *(_QWORD *)(v1 + 216) = v4;
  return v4(v2, v0);
}

uint64_t sub_10007DFB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return dispatch thunk of static Equatable.== infix(_:_:)(v1, v2, v3, a1);
}

uint64_t sub_10007DFC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_10007DFD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  return swift_release(a24);
}

void sub_10007DFD8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_10002AD5C(v2, a2);
}

uint64_t sub_10007DFE0()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v0, v1);
}

void sub_10007DFEC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  sub_100048DB4(v3, v4, a3);
}

uint64_t sub_10007DFF8(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_10007E018(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10007E038(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10007E058(uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  return sub_100077ABC(a1, a2, 0);
}

uint64_t sub_10007E060()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v2 + 128);
  v6 = *(_QWORD *)(v2 + 112);
  *(_QWORD *)(v3 + 16) = v4;
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v1 + 32))(v3+ ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(_QWORD *)(v1 + 72) * v0, v5, v6);
}

uint64_t sub_10007E08C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100064078(a1, a2, a3);
}

uint64_t sub_10007E098()
{
  return Task<>.value.getter();
}

uint64_t sub_10007E0A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_10007E0C4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10007E0D0()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[13] + 8))(v0[14], v0[12]);
}

uint64_t sub_10007E0E8(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

void sub_10007E0F4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1000102C0(a1, a2, (uint64_t *)va);
}

uint64_t sub_10007E100()
{
  return static os_log_type_t.fault.getter();
}

uint64_t sub_10007E108()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

uint64_t sub_10007E114(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_10007E134(uint64_t (*a1)(void))
{
  return a1();
}

BOOL sub_10007E154(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10007E164()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_10007E174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  return sub_100050B60(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_10007E190(uint64_t a1, uint64_t a2)
{
  return sub_100066CF0(a1, a2);
}

uint64_t sub_10007E1AC(uint64_t a1, uint64_t a2)
{
  return sub_10005A4C8(a1, a2);
}

uint64_t sub_10007E200()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 264);
}

Class sub_10007E21C()
{
  uint64_t *v0;

  return sub_1000804CC(v0[16], v0[12], v0[13], v0[14], v0[15]);
}

uint64_t sub_10007E22C(char a1)
{
  return sub_10005D018(a1);
}

uint64_t sub_10007E248(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

void sub_10007E270()
{
  sub_100073A0C();
}

uint64_t sub_10007E280()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

uint64_t sub_10007E288()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  v5 = *(_QWORD *)(v3 + 88);
  *v4 = *v1;
  *(_QWORD *)(v3 + 96) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_10007E2BC(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = result;
  return result;
}

uint64_t sub_10007E2C8(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10007E2E4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[28] = v2;
  v1[29] = 1;
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(v1[19] + 104))(v1[20], v0, v1[18]);
}

uint64_t sub_10007E30C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_10007E328(uint64_t a1, uint64_t a2)
{
  return sub_10005E464(a1, a2);
}

uint64_t sub_10007E364(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = result;
  return result;
}

Class sub_10007E370()
{
  uint64_t *v0;

  return sub_100080CE0(v0[25], v0[23], v0[24]);
}

uint64_t sub_10007E37C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, a4);
}

uint64_t sub_10007E388(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

BOOL sub_10007E39C(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_10007E3A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  *(_QWORD *)(v0 + 224) = v4;
  return v4(v1, v2);
}

uint64_t sub_10007E3B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_10007E3C0(__n128 a1)
{
  __n128 *v1;

  v1[4] = a1;
  v1[5].n128_u8[0] = 0;
  return ContinuousClock.init()();
}

uint64_t sub_10007E3D4(uint64_t a1, uint64_t a2, char a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  result = sub_10001C7E4(v5, v4, v3);
  *(_QWORD *)(v6 - 104) = a1;
  *(_QWORD *)(v6 - 96) = a2;
  *(_BYTE *)(v6 - 88) = a3 & 1;
  return result;
}

uint64_t sub_10007E424(uint64_t a1)
{
  uint64_t v1;

  return sub_100005700(v1, 1, a1);
}

void sub_10007E438(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t sub_10007E44C()
{
  return swift_slowAlloc(22, -1);
}

uint64_t sub_10007E470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return swift_task_dealloc(a18);
}

uint64_t sub_10007E478()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v1, v3, v0);
}

void sub_10007E48C(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_10002ACC4(a1, v1);
}

void sub_10007E494(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_10002ACC4(a1, v1);
}

uint64_t sub_10007E49C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t (*a19)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  return a19(v21, v19, v20);
}

uint64_t sub_10007E4B0(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_10007E4BC()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 160));
}

uint64_t sub_10007E4D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3);
}

void sub_10007E4D8()
{
  uint64_t v0;
  uint64_t *v1;

  sub_10002AD5C(v0, v1);
}

void sub_10007E4E4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  sub_100048DB4(v3, v4, a3);
}

uint64_t sub_10007E4F0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10007E4FC()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 272));
}

uint64_t sub_10007E510(uint64_t a1, uint64_t a2)
{
  return sub_100066CF0(a1, a2);
}

uint64_t sub_10007E528(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return Set.Iterator.init(_cocoa:)(v1, v2, a1);
}

uint64_t sub_10007E568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100064078(a1, a2, a3);
}

void sub_10007E570()
{
  void *v0;

}

uint64_t sub_10007E594()
{
  return type metadata accessor for _OSActivity(0);
}

uint64_t sub_10007E5A8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  return sub_100075108(a1, a2, a3);
}

uint64_t sub_10007E5B0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  return sub_100075108(a1, a2, a3);
}

uint64_t sub_10007E5BC()
{
  uint64_t v0;

  return swift_weakLoadStrong(v0);
}

uint64_t sub_10007E5C4()
{
  uint64_t v0;

  return swift_unknownObjectRetain(v0);
}

uint64_t sub_10007E5CC()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

void sub_10007E5D4()
{
  uint64_t *v0;
  uint64_t v1;

  sub_10002AD5C(v1, v0);
}

uint64_t sub_10007E5E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  return swift_errorRelease(*a13);
}

uint64_t sub_10007E5EC()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[11];
  sub_10001C830(v0 + 7, v0[10]);
  return swift_task_alloc(*(unsigned int *)(*(_QWORD *)(v1 + 16) + 4));
}

uint64_t sub_10007E620()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 224));
}

uint64_t sub_10007E628(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 176) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 176, v1 + 184, v2 + 4);
}

uint64_t sub_10007E648(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 208) = result;
  return result;
}

void sub_10007E654(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1000102C0(a1, a2, (uint64_t *)va);
}

uint64_t sub_10007E65C(uint64_t a1)
{
  return sub_100054CAC(a1);
}

uint64_t sub_10007E670()
{
  uint64_t v0;

  return swift_endAccess(v0 - 240);
}

void sub_10007E678()
{
  sub_1000540A4();
}

uint64_t sub_10007E698()
{
  return Logger.logObject.getter();
}

uint64_t sub_10007E6A0(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(a1, v1);
}

uint64_t sub_10007E6A8(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_10007E6B0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 112);
}

void sub_10007E6D8(uint64_t a1@<X8>)
{
  _QWORD *v1;

  v1[52] = a1;
  v1[53] = *(_QWORD *)(v1[30] + v1[51] + *(int *)(v1[33] + 28));
}

uint64_t sub_10007E700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  return swift_task_dealloc(a23);
}

uint64_t sub_10007E720()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  v5 = *(_QWORD *)(v3 + 192);
  *v4 = *v1;
  *(_QWORD *)(v3 + 200) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_10007E740()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  v5 = *(_QWORD *)(v3 + 432);
  *v4 = *v1;
  *(_QWORD *)(v3 + 440) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_10007E760()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  v5 = *(_QWORD *)(v3 + 360);
  *v4 = *v1;
  *(_QWORD *)(v3 + 368) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_10007E780()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  v5 = *(_QWORD *)(v3 + 216);
  *v4 = *v1;
  *(_QWORD *)(v3 + 224) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_10007E7A0@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  v1[1] = a1;
  return v2;
}

uint64_t sub_10007E7B8()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10007B728(*(_QWORD *)(v1 - 104), *(_QWORD *)(v1 - 96), *(_BYTE *)(v1 - 88), v0);
}

uint64_t sub_10007E7D8()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

uint64_t sub_10007E7EC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

void sub_10007E7F4()
{
  sub_100075FD0();
}

uint64_t sub_10007E814()
{
  uint64_t v0;

  return __CocoaSet.makeIterator()(v0);
}

uint64_t sub_10007E81C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 232);
}

uint64_t sub_10007E860()
{
  return type metadata accessor for InferenceProviderAssetManagerPolicy(0);
}

uint64_t sub_10007E880@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

void sub_10007E898(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  sub_1000102C0(a1, v3, a3);
}

uint64_t sub_10007E8A0()
{
  uint64_t v0;

  return sub_100005700(*(_QWORD *)(v0 + 152), 1, *(_QWORD *)(v0 + 160));
}

uint64_t sub_10007E8C4(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 488) = result;
  return result;
}

uint64_t sub_10007E8D4(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 448) = result;
  return result;
}

uint64_t sub_10007E8E4(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 272) = result;
  return result;
}

uint64_t sub_10007E8F4(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 312) = result;
  return result;
}

uint64_t sub_10007E904()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_10007E90C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 104))(a1, v2);
}

uint64_t sub_10007E918()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 224));
}

BOOL sub_10007E920(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_10007E928()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10007E930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t (*a26)(_QWORD, _QWORD))
{
  uint64_t v26;

  return a26(*(_QWORD *)(v26 + 544), *(_QWORD *)(v26 + 504));
}

uint64_t sub_10007E940@<X0>(uint64_t (*a1)(_QWORD)@<X8>)
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 488));
}

void sub_10007E94C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10002AC98(a1, a2, v2);
}

uint64_t sub_10007E954@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

void sub_10007E95C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  sub_100048DB4(a1, v2, v1);
}

BOOL sub_10007E968(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10007E978(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

Class sub_10007E980(uint64_t a1)
{
  return sub_100080A44(a1);
}

void sub_10007E98C(uint64_t a1@<X8>)
{
  unint64_t v1;

  *(_QWORD *)(a1 + ((v1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v1;
}

void sub_10007E9B0(uint64_t a1@<X8>)
{
  _QWORD *v1;

  v1[30] = a1;
  v1[31] = *(_QWORD *)(v1[22] + v1[29] + *(int *)(v1[26] + 28));
}

void sub_10007E9D4()
{
  sub_100014280();
}

void sub_10007E9E0(uint64_t a1@<X8>)
{
  _QWORD *v1;

  v1[52] = a1;
  v1[53] = *(_QWORD *)(v1[30] + v1[51] + *(int *)(v1[33] + 28));
}

uint64_t sub_10007EA04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return sub_10007A058(a1, v2, v1);
}

uint64_t sub_10007EA10@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

_QWORD *sub_10007EA1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;

  return Hasher.init(_seed:)(&a28, *(_QWORD *)(v28 + 40));
}

void sub_10007EA28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  unint64_t v28;
  uint64_t v29;

  sub_1000102C0(v29, v28, &a28);
}

uint64_t sub_10007EA44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_10007EA54(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1, v3, v2);
}

uint64_t sub_10007EA70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v2 + 16))(*(_QWORD *)(v3 - 280), v0, v1);
}

uint64_t sub_10007EA8C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((a1 & 1) != 0)
    v6 = v3;
  else
    v6 = v4;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v6, v2);
}

uint64_t sub_10007EAA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  return a26;
}

uint64_t sub_10007EAB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return swift_release(a19);
}

uint64_t sub_10007EABC()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 160));
}

uint64_t sub_10007EAC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return swift_release(a17);
}

uint64_t sub_10007EAD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return swift_task_dealloc(a17);
}

uint64_t sub_10007EAD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  return sub_100012818(&a28, a2);
}

uint64_t sub_10007EAE4(float *a1, float a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  *a1 = a2;
  *v4 = v3;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v4, v2, a1 + 1);
}

uint64_t sub_10007EB00(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100005630(v3, 1, 1, a1);
  return v2(v4, v5, v1);
}

uint64_t sub_10007EB2C(uint64_t a1, uint64_t a2)
{
  return sub_10005E464(a1, a2);
}

uint64_t sub_10007EB3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100064078(a1, a2, a3);
}

void sub_10007EB4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;

  sub_100048DB4(a1, v1, v2);
}

void sub_10007EB58(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  sub_100048DB4(v4, v3, a3);
}

void sub_10007EB64()
{
  sub_100073A0C();
}

void sub_10007EB74()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = v0;
  sub_1000117DC();
}

uint64_t sub_10007EB90()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, _QWORD);
  uint64_t v2;

  return v1(v2, *(_QWORD *)(v0 + 504));
}

void sub_10007EBA0()
{
  int64_t v0;

  sub_10006C19C(v0);
}

uint64_t sub_10007EBB0()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1000B2390(v0, v1);
}

void sub_10007EBBC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  sub_100048DB4(v3, v4, a3);
}

uint64_t sub_10007EBC8()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v0, v1);
}

uint64_t sub_10007EBD4()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v1, v0);
}

uint64_t sub_10007EBE0()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v1, v0);
}

uint64_t sub_10007EBEC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_10007A058(*v2, a1, a2);
}

uint64_t sub_10007EC08()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 600));
}

void sub_10007EC14(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_10002AD5C(v2, a2);
}

uint64_t sub_10007EC1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  return v3(v2, a2, v4);
}

void sub_10007EC28(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  sub_100048DB4(v3, v4, a3);
}

uint64_t sub_10007EC34()
{
  uint64_t v0;

  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t sub_10007EC3C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v2;
  a1[1] = a2;
  return v3;
}

uint64_t sub_10007EC60@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

void sub_10007EC84()
{
  sub_1000540A4();
}

uint64_t sub_10007ECA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_10007ECA8()
{
  uint64_t v0;
  double v1;

  return static Date.+ infix(_:_:)(v0, v1);
}

uint64_t sub_10007ECB8()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v0, v1);
}

uint64_t sub_10007ECC4@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_10007ECD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_10007ECDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t (*a26)(uint64_t, uint64_t))
{
  uint64_t v26;
  uint64_t v27;

  return a26(v26, v27);
}

uint64_t sub_10007ECEC()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v1, v0);
}

uint64_t sub_10007ECF8()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1000B2390(v1, v0);
}

_QWORD *sub_10007ED04()
{
  return sub_10004D710();
}

uint64_t sub_10007ED0C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 576) = v0;
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1 + 456))(*(_QWORD *)(v1 + 400), *(_QWORD *)(v1 + 232), *(_QWORD *)(v1 + 384));
}

uint64_t sub_10007ED24(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10007ED38()
{
  uint64_t v0;

  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

uint64_t sub_10007ED40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return swift_task_dealloc(a15);
}

void sub_10007ED48()
{
  sub_1000117DC();
}

uint64_t sub_10007ED60()
{
  uint64_t v0;

  return Date.timeIntervalSince(_:)(*(_QWORD *)(v0 + 480));
}

uint64_t sub_10007ED78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return Set.description.getter(a1, a2, v2);
}

uint64_t sub_10007ED80()
{
  return sub_10008B000();
}

void sub_10007ED88(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_10002ACC4(a1, v1);
}

uint64_t sub_10007ED90()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 152);
}

void sub_10007EDA0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  sub_1000102C0(a1, v3, a3);
}

uint64_t sub_10007EDA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return swift_task_dealloc(a16);
}

uint64_t sub_10007EDC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3);
}

uint64_t sub_10007EDCC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10007EDF0()
{
  uint64_t v0;

  return v0 + 133;
}

void sub_10007EE04(float a1)
{
  float *v1;

  *v1 = a1;
}

void sub_10007EE20()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;
  uint64_t v2;

  sub_10002AC98(v1, *(_QWORD *)(v2 - 264), v0);
}

uint64_t sub_10007EE38()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10007EE44()
{
  uint64_t v0;

  return _swift_stdlib_bridgeErrorToNSError(v0);
}

uint64_t sub_10007EE4C()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_10007EE54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  return swift_task_dealloc(a24);
}

uint64_t sub_10007EE5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;

  return v2(v4, v3, v1, v0);
}

void sub_10007EEBC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = (v0 - 1) & v0;
}

uint64_t sub_10007EEDC()
{
  uint64_t v0;

  return __CocoaSet.makeIterator()(v0);
}

uint64_t sub_10007EEE4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10007EF04()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  return *(_QWORD *)(v1 + 8 * v0 + 32) + *v2;
}

uint64_t sub_10007EF24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v0 < 0)
    v3 = v0;
  else
    v3 = v0 & 0xFFFFFFFFFFFFFF8;
  return __CocoaSet.element(at:)(v1, v2, v3);
}

void sub_10007EF3C()
{
  sub_1000540A4();
}

void sub_10007EFB4()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_10007EFC4()
{
  return sub_1000A3CA8();
}

uint64_t sub_10007EFD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100064078(a1, a2, a3);
}

uint64_t sub_10007EFDC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_10007EFE8()
{
  return Logger.logObject.getter();
}

uint64_t sub_10007EFF0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v2;
  a1[1] = a2;
  return v3;
}

uint64_t sub_10007F010@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = v2;
  a1[1] = a2;
  return *(_QWORD *)(v2 + 224);
}

_QWORD *sub_10007F030@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_10007F040()
{
  return swift_task_alloc(48);
}

uint64_t sub_10007F068(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 280) = result;
  return result;
}

uint64_t sub_10007F078()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_10001CD34(v0);
  return Logger.logObject.getter(v1);
}

void sub_10007F0A0()
{
  sub_1000117DC();
}

BOOL sub_10007F0A8(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

void sub_10007F0B0()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_10007F0C4()
{
  uint64_t v0;

  return swift_endAccess(v0);
}

uint64_t sub_10007F0CC()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10007F0D4()
{
  uint64_t v0;

  return v0;
}

void sub_10007F0E0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  sub_100005700(v2, 1, v1);
  sub_10002AD5C(v2, v0);
}

_WORD *sub_10007F108(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_10007F114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  return a26;
}

uint64_t sub_10007F124@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_10007F12C()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 424));
}

uint64_t sub_10007F144()
{
  return sub_10008B1B0();
}

void sub_10007F14C(float a1)
{
  float *v1;

  *v1 = a1;
}

void sub_10007F158(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1000102C0(a1, a2, (uint64_t *)va);
}

uint64_t sub_10007F160@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 232) = a1;
  *a1 = v2;
  a1[1] = a2;
  return v3;
}

uint64_t sub_10007F17C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return swift_task_dealloc(a12);
}

uint64_t sub_10007F1A0(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_10007F1C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  return swift_release(a22);
}

uint64_t sub_10007F1CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return dispatch thunk of static Comparable.>= infix(_:_:)(a1, a2, v2, v3);
}

uint64_t sub_10007F1D8(void (*a1)(uint64_t *), uint64_t a2)
{
  uint64_t v2;

  return sub_10004F3D8(a1, a2, v2);
}

uint64_t sub_10007F1E4@<X0>(uint64_t a1@<X0>, int *a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 96) = (char *)a2 + *a2;
  return swift_retain(a1);
}

_QWORD *sub_10007F1F8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = a1;
  return a2;
}

uint64_t sub_10007F204@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  *a3 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a3, v3, a2);
}

void sub_10007F218(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10002AC98(a1, a2, v2);
}

uint64_t sub_10007F22C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return swift_release(a20);
}

uint64_t sub_10007F234()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 392);
}

BOOL sub_10007F250(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

BOOL sub_10007F25C(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10007F268(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return sub_10007A058(a1, v1, v2);
}

uint64_t sub_10007F274()
{
  return static os_log_type_t.default.getter();
}

void sub_10007F27C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10002AC98(a1, a2, v2);
}

uint64_t sub_10007F2A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t (*a26)(uint64_t, uint64_t))
{
  return a26(a25, a23);
}

void sub_10007F2AC()
{
  void *v0;

}

uint64_t sub_10007F2C0()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 176))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 136));
}

uint64_t sub_10007F2D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return swift_release(a16);
}

uint64_t sub_10007F2DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8))(a26, a25);
}

uint64_t sub_10007F2E8()
{
  uint64_t v0;
  uint64_t v1;

  return Array.description.getter(v1, *(_QWORD *)(v0 + 112));
}

uint64_t sub_10007F2FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  return swift_release(*a14);
}

void sub_10007F324()
{
  void *v0;

}

uint64_t sub_10007F330(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_10007F338()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return sub_10001C6FC(v3, v2, v0, v1);
}

uint64_t sub_10007F34C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return dispatch thunk of static Comparable.>= infix(_:_:)(v3, v2, v0, v1);
}

uint64_t sub_10007F360()
{
  return __CocoaSet.Iterator.next()();
}

uint64_t sub_10007F374@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_10007F38C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10007C1D4(v1, v0);
}

uint64_t sub_10007F398()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return static UUIDIdentifier.== infix(_:_:)(v2, v0, v1);
}

uint64_t sub_10007F3AC()
{
  uint64_t v0;

  return swift_stdlib_isStackAllocationSafe(v0, 8);
}

uint64_t sub_10007F3C4()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100005630(v0, 0, 1, v1);
}

uint64_t sub_10007F3D8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10007F3E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;

  return static Date.> infix(_:_:)(v26, a26);
}

__n128 sub_10007F3F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __n128 a19)
{
  _DWORD *v19;
  uint64_t v20;
  __n128 result;

  *(_QWORD *)(v20 - 88) = a1;
  result = a19;
  *v19 = a19.n128_u32[0];
  return result;
}

uint64_t sub_10007F40C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  return dispatch thunk of Hashable.hash(into:)(va, v3, a1);
}

uint64_t sub_10007F420(uint64_t a1, uint64_t a2)
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
}

uint64_t sub_10007F428()
{
  return type metadata accessor for Date(0);
}

uint64_t sub_10007F430()
{
  return type metadata accessor for ModelCatalogAsset(0);
}

uint64_t sub_10007F438()
{
  uint64_t v0;

  return Date.timeIntervalSince(_:)(v0);
}

uint64_t sub_10007F444()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100005630(v0, 0, 1, v1);
}

uint64_t sub_10007F458()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100005630(v0, 0, 1, v1);
}

uint64_t sub_10007F46C()
{
  uint64_t v0;

  return Date.timeIntervalSince(_:)(v0);
}

uint64_t sub_10007F474()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

uint64_t sub_10007F480()
{
  uint64_t v0;

  return sub_10000650C((_QWORD *)(v0 + 56));
}

uint64_t sub_10007F48C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_10007F498(uint64_t a1, uint64_t (*a2)(char *))
{
  return sub_10004C52C(a1, a2, 0);
}

void sub_10007F4A4(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1 + 8;
}

uint64_t sub_10007F4B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_release(a10);
}

uint64_t sub_10007F4B8()
{
  uint64_t v0;

  return sub_1000548F8(*(_QWORD *)(v0 + 80));
}

void sub_10007F4C4(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = (a1 - 1) & a1;
}

uint64_t sub_10007F4E0(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 432) = result;
  return result;
}

uint64_t sub_10007F4EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return __CocoaSet.formIndex(after:isUnique:)(a2, v3, v2);
}

uint64_t sub_10007F500(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 328) = result;
  return result;
}

void sub_10007F50C()
{
  void *v0;

}

uint64_t sub_10007F520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return Set.Index._asCocoa.modify(a20, a1);
}

uint64_t sub_10007F534()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 336));
}

uint64_t sub_10007F540(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 552) = result;
  return result;
}

uint64_t sub_10007F54C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10007F558()
{
  uint64_t v0;

  return swift_endAccess(v0);
}

uint64_t sub_10007F560()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_10007F56C(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_10007F574()
{
  return ContinuousClock.Instant.advanced(by:)();
}

uint64_t sub_10007F580()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 72, v1, v0);
}

uint64_t sub_10007F5B8()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 464))(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 384));
}

uint64_t sub_10007F5C8()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 184))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 136));
}

uint64_t sub_10007F5D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return swift_release(a14);
}

uint64_t sub_10007F5F8(uint64_t a1)
{
  return swift_task_dealloc(a1);
}

uint64_t sub_10007F634(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_10007F63C()
{
  return 0;
}

Swift::Int sub_10007F654()
{
  return Hasher._finalize()();
}

_QWORD *sub_10007F65C(uint64_t a1)
{
  uint64_t v1;

  return Hasher.init(_seed:)((_QWORD *)(v1 - 240), a1);
}

uint64_t sub_10007F664()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 - 136));
}

uint64_t sub_10007F66C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  return swift_release(a21);
}

Swift::Int sub_10007F674(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  return sub_100072DE0(a1, a2, v2);
}

uint64_t sub_10007F67C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_10007F68C()
{
  uint64_t v0;

  return v0;
}

void sub_10007F6A4(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_10002ACC4(a1, v1);
}

uint64_t sub_10007F6AC(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 208) = result;
  return result;
}

void sub_10007F6B8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = v0;
}

uint64_t sub_10007F6D0()
{
  return AssetCost.onDeviceMemory.getter();
}

void sub_10007F6D8()
{
  void *v0;

}

_QWORD *sub_10007F6E0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = a1;
  return a2;
}

uint64_t sub_10007F710(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

void sub_10007F718(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_10002ACC4(a1, v1);
}

uint64_t sub_10007F720()
{
  uint64_t v0;

  if (v0 < 0)
    return _CocoaArrayWrapper.endIndex.getter(v0);
  else
    return _CocoaArrayWrapper.endIndex.getter(v0 & 0xFFFFFFFFFFFFFF8);
}

uint64_t sub_10007F730()
{
  return AssetCost.onDeviceMemory.getter();
}

_QWORD *sub_10007F738()
{
  return sub_10004D710();
}

uint64_t sub_10007F740()
{
  uint64_t v0;

  return swift_endAccess(v0 - 232);
}

uint64_t sub_10007F748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(a14, a15);
}

uint64_t sub_10007F758(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_10007F760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, a3, v4, 0);
}

Swift::Int sub_10007F770(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3;

  return sub_100072B50(a1, v3, a3);
}

uint64_t sub_10007F7BC()
{
  return static os_log_type_t.fault.getter();
}

_QWORD *sub_10007F7C4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  result[2] = v2;
  result[3] = a2;
  result[4] = v3;
  return result;
}

uint64_t sub_10007F7D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, _QWORD);

  return v2(v0, *(_QWORD *)(v1 + 464));
}

uint64_t sub_10007F7E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  return swift_release(a23);
}

uint64_t sub_10007F7E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

Swift::Int sub_10007F7F8()
{
  return Hasher._finalize()();
}

uint64_t sub_10007F800()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_10007F810(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_10007F818()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

void sub_10007F828()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  sub_1000102C0(v0, v1, (uint64_t *)(v2 - 88));
}

uint64_t sub_10007F838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  return swift_task_dealloc(a26);
}

uint64_t sub_10007F840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return swift_retain(a9);
}

uint64_t sub_10007F858()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10007F860(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_10007F878@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v1, v2);
}

uint64_t sub_10007F894()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 1);
}

uint64_t sub_10007F8A4@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v2, v1, v3);
}

uint64_t sub_10007F8E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

void sub_10007F8F8()
{
  int64_t v0;

  sub_10006C19C(v0);
}

uint64_t sub_10007F900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return static UUIDIdentifier.== infix(_:_:)(v2, v0, v1);
}

void sub_10007F91C(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t sub_10007F92C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 392) = v0;
  return swift_release(*(_QWORD *)(v1 + 344));
}

uint64_t sub_10007F96C()
{
  uint64_t v0;

  return swift_errorRelease(*(_QWORD *)(v0 + 64));
}

_QWORD *sub_10007F974(_QWORD *result)
{
  uint64_t v1;

  result[2] = 0;
  result[3] = 0;
  result[4] = v1;
  return result;
}

uint64_t sub_10007F984()
{
  uint64_t v0;
  _QWORD *v1;

  return sub_100011704(0, v0, v1);
}

uint64_t sub_10007F994()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10007F9A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v1, v0, v2);
}

uint64_t sub_10007F9B0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10007F9BC()
{
  uint64_t v0;

  return v0;
}

void sub_10007F9C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  sub_10002AC98(v0, v1, v2);
}

uint64_t sub_10007F9D8@<X0>(uint64_t (*a1)(_QWORD)@<X8>)
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 496));
}

uint64_t sub_10007F9EC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_10007FA04@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v2;
  a1[1] = a2;
  return v3;
}

uint64_t sub_10007FA1C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = v2;
  a1[1] = a2;
  return *(_QWORD *)(v2 + 168);
}

void sub_10007FA5C()
{
  sub_100073A0C();
}

uint64_t sub_10007FA6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_10007FA74()
{
  return type metadata accessor for DaemonSession(0);
}

uint64_t sub_10007FA84()
{
  return type metadata accessor for DaemonRequest(0);
}

uint64_t sub_10007FA94(uint64_t a1)
{
  uint64_t v1;

  return swift_weakInit(a1 + 16, v1);
}

uint64_t sub_10007FAA4(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 256) = result;
  return result;
}

uint64_t sub_10007FAC8()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

unint64_t sub_10007FAD0()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100010994(v0, v1);
}

uint64_t sub_10007FAE0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10007FAF0()
{
  uint64_t v0;

  return v0;
}

_WORD *sub_10007FAFC(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_10007FB08(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 360) = result;
  return result;
}

uint64_t sub_10007FB14()
{
  uint64_t v0;
  uint64_t v1;

  *(_WORD *)(v0 + 12) = 2080;
  return sub_10000DB44(v1);
}

uint64_t sub_10007FB24()
{
  uint64_t v0;

  return __CocoaSet.count.getter(v0);
}

uint64_t sub_10007FB2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;

  return a9(v9, v10);
}

uint64_t sub_10007FB3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;

  return a10(v10, v11);
}

uint64_t sub_10007FB4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t (*a22)(uint64_t, uint64_t))
{
  uint64_t v22;
  uint64_t v23;

  return a22(v22, v23);
}

uint64_t sub_10007FB5C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10007FB68()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10007FB84()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10007FB94()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_10007FB9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  return swift_task_dealloc(a25);
}

uint64_t sub_10007FBA4()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_10007FBAC()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 232));
}

uint64_t sub_10007FBB8()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 232));
}

uint64_t sub_10007FBC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

void sub_10007FBCC(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t sub_10007FBE0()
{
  return sub_10008B000();
}

uint64_t sub_10007FBE8()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 24));
}

uint64_t sub_10007FBF0@<X0>(uint64_t a1@<X8>)
{
  return swift_release(a1);
}

void sub_10007FBF8()
{
  void *v0;

}

uint64_t sub_10007FC04()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 80));
}

uint64_t sub_10007FC24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return swift_task_dealloc(a14);
}

uint64_t sub_10007FC2C()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD, _QWORD);

  return v1(*(_QWORD *)(v0 + 512), *(_QWORD *)(v0 + 464));
}

uint64_t sub_10007FC4C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return *(_QWORD *)(v2 + 96);
}

uint64_t sub_10007FC60()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 184));
}

uint64_t sub_10007FC6C()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 - 240));
}

void sub_10007FC74()
{
  void *v0;

}

_QWORD *sub_10007FC8C(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  return Hasher.init(_seed:)((uint64_t *)va, *(_QWORD *)(v2 + 40));
}

uint64_t sub_10007FCA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return dispatch thunk of static Comparable.>= infix(_:_:)(a1, a2, v2, v3);
}

uint64_t sub_10007FCB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_10007FCBC(void (*a1)(uint64_t *), uint64_t a2)
{
  uint64_t v2;

  return sub_10004F3D8(a1, a2, v2);
}

uint64_t sub_10007FCC4()
{
  return sub_10008B000();
}

uint64_t sub_10007FCD0(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 320) = result;
  return result;
}

char *sub_10007FCF0@<X0>(int *a1@<X8>)
{
  return (char *)a1 + *a1;
}

uint64_t sub_10007FD04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t (*a16)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v16;

  return a16(a1, a2, v16);
}

void sub_10007FD1C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 120) = v0;
}

uint64_t sub_10007FD30()
{
  return __CocoaSet.Iterator.next()();
}

uint64_t sub_10007FD50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t (*a22)(void))
{
  return a22();
}

_QWORD *sub_10007FD58()
{
  uint64_t v0;
  uint64_t v1;

  return Hasher.init(_seed:)((_QWORD *)(v1 - 232), *(_QWORD *)(v0 + 40));
}

BOOL sub_10007FD64(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void sub_10007FD70()
{
  sub_100014280();
}

void sub_10007FD7C()
{
  sub_100014280();
}

uint64_t sub_10007FD88()
{
  return sub_10008B000();
}

Swift::Int sub_10007FDA0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  return sub_10007341C(a1, v1, v2);
}

void sub_10007FDAC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  sub_100048DB4(a1, v3, a3);
}

uint64_t sub_10007FDB4()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 - 232));
}

uint64_t sub_10007FDBC(double a1)
{
  uint64_t v1;

  return static Date.+ infix(_:_:)(v1, a1);
}

_QWORD *sub_10007FDC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;

  return Hasher.init(_seed:)(&a26, *(_QWORD *)(v26 + 40));
}

uint64_t sub_10007FDE8()
{
  uint64_t v0;

  return sub_10001C7E4(*(_QWORD *)(v0 - 104), *(_QWORD *)(v0 - 96), *(_BYTE *)(v0 - 88));
}

uint64_t sub_10007FDF4(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_10007FDFC(uint64_t a1)
{
  uint64_t v1;

  return static Date.> infix(_:_:)(a1, *(_QWORD *)(v1 - 96));
}

uint64_t sub_10007FE24()
{
  uint64_t v0;

  return swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 - 112));
}

BOOL sub_10007FE50@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void sub_10007FE64(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_1000102C0(a1, a2, (uint64_t *)va);
}

void sub_10007FE70()
{
  void *v0;

}

uint64_t sub_10007FE78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return a19;
}

uint64_t sub_10007FE84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return a18;
}

uint64_t sub_10007FE90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return a17;
}

uint64_t sub_10007FE9C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 552));
}

_QWORD *sub_10007FED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  *a14 = a1;
  return a14;
}

uint64_t sub_10007FEE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return dispatch thunk of static Equatable.== infix(_:_:)(a1, v5, v4, a4);
}

uint64_t sub_10007FEF0()
{
  uint64_t v0;
  uint64_t v1;

  return __CocoaSet.Index.handleBitPattern.getter(v1, v0);
}

uint64_t sub_10007FEFC()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_10007FF04()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1000B2390(v1, v0);
}

uint64_t sub_10007FF10()
{
  uint64_t (*v0)(uint64_t, _QWORD);
  uint64_t v1;

  return v0(v1, 0);
}

uint64_t sub_10007FF1C(uint64_t a1)
{
  uint64_t v1;

  return sub_10007C1D4(a1, v1);
}

uint64_t sub_10007FF24(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_10007FF2C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 384);
}

uint64_t sub_10007FF38(uint64_t a1)
{
  uint64_t v1;

  return sub_10007C1D4(a1, v1);
}

uint64_t sub_10007FF40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_10007FF48()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10007FF54()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_10007FF7C(double a1)
{
  uint64_t v1;

  *(double *)(v1 - 112) = a1;
  return v1 - 112;
}

uint64_t sub_10007FF90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  return swift_retain(a24);
}

void sub_10007FF98(uint64_t (*a1)(uint64_t), uint64_t (*a2)(uint64_t *))
{
  sub_10006F280(a1, a2);
}

uint64_t sub_10007FFA0()
{
  return sub_10008B1B0();
}

uint64_t sub_10007FFA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_10007FFB4()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v0, v1);
}

uint64_t sub_10007FFC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_100002CAC(v3, a2, a3);
}

void sub_10007FFC8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_10002AD5C(v2, a2);
}

_QWORD *sub_10007FFD0()
{
  uint64_t v0;

  return sub_10005CE8C(*(_QWORD *)(v0 + 176));
}

uint64_t sub_10007FFDC(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 184) = result;
  return result;
}

uint64_t sub_100080018()
{
  return static Date.now.getter();
}

uint64_t sub_10008002C()
{
  return sub_10008AE98();
}

uint64_t sub_100080038(void (*a1)(uint64_t *))
{
  uint64_t v1;
  uint64_t v2;

  return sub_10004F6D0(a1, v2, v1);
}

uint64_t sub_100080044@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

uint64_t sub_100080068()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100080074()
{
  uint64_t v0;

  return swift_endAccess(v0);
}

uint64_t sub_10008007C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100080088()
{
  uint64_t v0;

  return swift_task_alloc(v0);
}

uint64_t sub_100080090()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v0, v1);
}

uint64_t sub_10008009C()
{
  uint64_t v0;

  return swift_weakLoadStrong(v0);
}

uint64_t sub_1000800A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized _ArrayBuffer._getElementSlowPath(_:)(v2, a2);
}

_QWORD *sub_1000800AC()
{
  uint64_t v0;

  return sub_10005CE8C(v0);
}

_QWORD *sub_1000800B4()
{
  uint64_t v0;

  return sub_10001B1A0(v0);
}

uint64_t sub_1000800BC()
{
  uint64_t v0;

  return __CocoaSet.makeIterator()(v0);
}

uint64_t sub_1000800D8()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 208));
}

uint64_t sub_1000800E0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return *(_QWORD *)(v2 + 96);
}

uint64_t sub_1000800F4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return *(_QWORD *)(v2 + 136);
}

_QWORD *sub_100080108@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_100080114@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = v2;
  a1[1] = a2;
  return 0;
}

uint64_t sub_100080140(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 264) = result;
  return result;
}

uint64_t sub_10008014C(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

void sub_100080158(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  sub_1000102C0(a1, a2, (uint64_t *)(v2 - 128));
}

uint64_t sub_100080164()
{
  double v0;

  return static Duration.seconds(_:)(v0);
}

uint64_t sub_10008016C()
{
  return Logger.logObject.getter();
}

uint64_t sub_100080174()
{
  return static ContinuousClock.Instant.now.getter();
}

uint64_t sub_10008017C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10007BDF8(v0, v1);
}

uint64_t sub_100080188()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_100080194()
{
  uint64_t v0;
  uint64_t v1;

  return __CocoaSet.Index.element.getter(v0, v1);
}

uint64_t sub_1000801A0()
{
  uint64_t v0;
  uint64_t v1;

  return __CocoaSet.Index.age.getter(v0, v1);
}

uint64_t sub_1000801AC()
{
  uint64_t v0;

  return sub_1000BFD38(v0);
}

uint64_t sub_1000801B8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000801C4()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t sub_1000801D0()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v0, v1);
}

uint64_t sub_1000801DC()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v1, v0);
}

uint64_t sub_1000801E8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000801FC()
{
  uint64_t v0;

  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t sub_100080204()
{
  return InferenceProviderDescriptor.description.getter();
}

uint64_t sub_100080210(double a1)
{
  uint64_t v1;

  return static Date.+ infix(_:_:)(v1, a1);
}

uint64_t sub_10008021C()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 72));
}

uint64_t sub_100080228(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

void sub_100080244()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  sub_10001E9F8();
  v3 = v0;
  v5 = v4;
  v6 = sub_10007DCE8();
  sub_10008C260();
  __chkstk_darwin(v7);
  sub_10001E168();
  v10 = v9 - v8;
  v11 = sub_10007D9D8();
  sub_10002BCBC();
  __chkstk_darwin(v12);
  sub_10007F78C();
  v13 = sub_1000B2390(v3, v5);
  sub_10008B340(v3, v1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v10, v5, v6);
  if ((v13 & 1) == 0)
    sub_1000B2390(v1 + *(int *)(v11 + 20), v10);
  sub_10007E7EC(v10, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_10002ACC4(v1, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  sub_10001D950();
}

void sub_10008031C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;

  sub_10001E9F8();
  a17 = v20;
  a18 = v21;
  v22 = sub_10007D9D8();
  sub_10002BCBC();
  __chkstk_darwin(v23);
  sub_10001E684();
  __chkstk_darwin(v24);
  v26 = (char *)&a9 - v25;
  v27 = sub_10007DCE8();
  sub_10008C260();
  __chkstk_darwin(v28);
  sub_10001E168();
  v31 = v30 - v29;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v19 + 104))(v30 - v29, enum case for LoadState.loaded(_:), v27);
  v32 = sub_1000B2390(v18, v31);
  sub_10002B7F8(v31, *(uint64_t (**)(uint64_t, uint64_t))(v19 + 8));
  sub_10008B340(v18, (uint64_t)v26);
  if ((v32 & 1) != 0)
  {
    v33 = *(_QWORD *)(*(_QWORD *)&v26[*(int *)(v22 + 44)] + 16);
    sub_10002ACC4((uint64_t)v26, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    v34 = sub_10008C218(v18);
    if (!v33)
      sub_10008C31C();
  }
  else
  {
    sub_10002ACC4((uint64_t)v26, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    v34 = sub_10008C218(v18);
  }
  sub_10008C2FC(v34, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  sub_10001D950();
}

uint64_t sub_100080448(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  _BYTE v9[24];

  v1 = a1 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  sub_10002B308(a1 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, (uint64_t)v9, 0);
  v2 = *(_QWORD *)(v1 + *(int *)(sub_10007D9D8() + 40));
  v3 = swift_bridgeObjectRetain(v2);
  v4 = InferenceProviderAssetDescriptor.identifier.getter(v3);
  sub_10002C3B4(v4, v5, v2);
  v7 = v6;
  sub_10001E034();
  sub_10001D8B4();
  return v7 & 1;
}

Class sub_1000804CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  Class result;
  _BYTE v15[24];
  NSObject v16;

  v12 = v5 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  sub_10001E26C(v5 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, (uint64_t)v15);
  v13 = sub_100084510(v12, v5, a1, a2, a3, a4, a5, &v16);
  result = (Class)sub_10008C2B0(v13);
  if (!v6)
    return v16.isa;
  return result;
}

void sub_100080574()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  sub_10001D810();
  sub_10007F428();
  sub_10008C178();
  __chkstk_darwin(v1);
  sub_10007F7A4();
  sub_100002F78(&qword_1000FD820);
  sub_10002BCBC();
  __chkstk_darwin(v2);
  v3 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  v4 = v0 + *(_DWORD *)(v3 + 44);
  sub_1000C01D0();
  v5 = sub_100002F78(&qword_1000FB2D8);
  sub_10008BEDC(v5);
  if (v4 != 1)
  {
    sub_10008C280();
    sub_10008C04C(*(int *)(v3 + 36));
  }
  sub_100006A68();
}

void sub_100080630()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  sub_10001D810();
  sub_10007F428();
  sub_10008C178();
  __chkstk_darwin(v1);
  sub_10007F7A4();
  sub_100002F78(&qword_1000FB920);
  sub_10002BCBC();
  __chkstk_darwin(v2);
  v3 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  v4 = v0 + *(_DWORD *)(v3 + 48);
  sub_1000C01F4();
  v5 = sub_100002F78(&qword_1000FB2A0);
  sub_10008BEDC(v5);
  if (v4 != 1)
  {
    sub_10008C280();
    sub_10008C04C(*(int *)(v3 + 32));
  }
  sub_100006A68();
}

uint64_t sub_1000806EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, char *, uint64_t);
  int *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD v75[5];
  _QWORD v76[16];
  uint64_t v77;
  uint64_t v78;

  sub_10001D810();
  v77 = v11;
  v78 = v12;
  v72 = (_QWORD *)v14;
  v73 = (_QWORD *)v13;
  v69 = v16;
  v70 = v15;
  v71 = v17;
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v68 = a10;
  v66 = v10;
  v67 = a9;
  sub_10007F428();
  sub_10002BCBC();
  __chkstk_darwin(v24);
  sub_10001EB18();
  v65 = v25;
  __chkstk_darwin(v26);
  v64 = (char *)&v55 - v27;
  v61 = sub_10007DCE8();
  v60 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  sub_10002BD70();
  v63 = v28;
  v29 = sub_10004A92C();
  v30 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  sub_10002BD70();
  v62 = v31;
  v32 = sub_10007D478();
  v74 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  sub_10001EB18();
  v34 = v33;
  __chkstk_darwin(v35);
  v37 = (char *)&v55 - v36;
  v38 = *(_QWORD *)v23;
  v39 = *((_QWORD *)v23 + 1);
  if (!v21 && v19 == 0xE000000000000000
    || (sub_10001E10C(), (_stringCompareWithSmolCheck(_:_:expecting:)(v40, v41, v42, 0xE000000000000000, 0) & 1) != 0))
  {
    swift_bridgeObjectRetain(v39);
    sub_10001D8B4();
    v21 = 0;
    v19 = 0;
  }
  else
  {
    swift_bridgeObjectRetain(v39);
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))InferenceProviderAssetDescriptor.init(identifier:version:))(v38, v39, v21, v19);
  v43 = *(void (**)(uint64_t, char *, uint64_t))(v74 + 16);
  v59 = v34;
  v43(v34, v37, v32);
  v44 = (int *)type metadata accessor for ModelCatalogAsset(0);
  v45 = v62;
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 16))(v62, &v23[v44[7]], v29);
  v46 = v44[9];
  v57 = v23[v44[8]];
  v56 = v23[v46];
  LOBYTE(v44) = v23[v44[10]];
  v47 = v73;
  sub_100006694((uint64_t)v73, (uint64_t)v76);
  v58 = v32;
  v48 = v72;
  sub_100006694((uint64_t)v72, (uint64_t)v75);
  v49 = v63;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v60 + 104))(v63, enum case for LoadState.unloaded(_:), v61);
  v50 = (uint64_t)v64;
  v51 = sub_10008C280();
  v52 = v65;
  ((void (*)(uint64_t))static Date.now.getter)(v51);
  v53 = swift_allocObject(v66, *(unsigned int *)(v66 + 48), *(unsigned __int16 *)(v66 + 52));
  sub_10008108C(v59, v70, v71, v45, v57, v56, (char)v44, v76, v49, v50, v52, (uint64_t)_swiftEmptySetSingleton, (uint64_t)_swiftEmptySetSingleton, (uint64_t)_swiftEmptySetSingleton, v69, v75, v67, v68, 0);
  sub_10000650C(v48);
  sub_10000650C(v47);
  sub_10002ACC4((uint64_t)v23, type metadata accessor for ModelCatalogAsset);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v37, v58);
  return v53;
}

Class sub_100080A44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  Class result;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  objc_class *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[3];
  NSObject v35;
  uint64_t v36;

  v3 = v1;
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_dynamicModeAllowed) == 1)
  {
    v5 = v3 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    sub_10001E26C(v3 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, (uint64_t)v34);
    v6 = sub_100088978(v5, v3, a1, &v35);
    result = (Class)sub_10008C2B0(v6);
    if (!v2)
      return v35.isa;
  }
  else
  {
    if (qword_1000FB110 != -1)
      swift_once(&qword_1000FB110, sub_100080FE0);
    v8 = type metadata accessor for Logger(0);
    sub_100002FF8(v8, (uint64_t)qword_1000FD9C8);
    v9 = sub_10001D834(v1);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v34[0] = v13;
      *(_DWORD *)v12 = 136315138;
      v14 = type metadata accessor for InferenceProviderAssetDescriptor(0);
      sub_10008B304(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
      v16 = dispatch thunk of CustomStringConvertible.description.getter(v14, v15);
      v18 = v17;
      sub_1000102C0(v16, v17, v34);
      v35.isa = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v12 + 4);
      sub_10008C304();
      swift_bridgeObjectRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Tried to move asset %s to dynamic mode that does not support it", v12, 0xCu);
      swift_arrayDestroy(v13, 1);
      sub_10001D790(v13);
      sub_10001D790((uint64_t)v12);

    }
    else
    {

      sub_10008C304();
    }
    v20 = type metadata accessor for ModelManagerError(0);
    sub_10008B304((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError, (uint64_t)&protocol conformance descriptor for ModelManagerError);
    v22 = swift_allocError(v20, v21, 0, 0);
    v24 = v23;
    *v23 = InferenceProviderAssetDescriptor.identifier.getter(v22);
    v24[1] = v25;
    v26 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v24, enum case for ModelManagerError.assetDoesNotSupportDynamicMode(_:), v20);
    return (Class)swift_willThrow(v26, v27, v28, v29, v30, v31, v32, v33);
  }
  return result;
}

Class sub_100080CE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  Class result;
  _BYTE v11[24];
  NSObject v12;

  v8 = v3 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  sub_10001E26C(v3 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, (uint64_t)v11);
  v9 = sub_10008610C(v8, v3, a2, a3, a1, &v12);
  result = (Class)sub_10008C2B0(v9);
  if (!v4)
    return v12.isa;
  return result;
}

void sub_100080D70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_10001E9F8();
  sub_10007D9D8();
  sub_10002BCBC();
  __chkstk_darwin(v1);
  sub_10001E168();
  v2 = sub_10007DCE8();
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_10001E168();
  v6 = v5 - v4;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v5 - v4, enum case for LoadState.loaded(_:), v2);
  v7 = sub_1000B2390(v0, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
  v8 = sub_100044984();
  v10 = sub_10008B340(v8, v9);
  if ((v7 & 1) != 0)
    sub_10008C31C();
  sub_10008C2FC(v10, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  sub_10001D950();
}

void sub_100080E4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  sub_10001D810();
  v34 = v1;
  v2 = sub_10004A92C();
  v32 = *(_QWORD *)(v2 - 8);
  v33 = v2;
  __chkstk_darwin(v2);
  sub_10002BD70();
  v31 = v3;
  v4 = sub_10007F428();
  v30 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10001E684();
  v7 = v5 - v6;
  __chkstk_darwin(v8);
  v10 = (char *)&v28 - v9;
  v11 = v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  sub_10002B308(v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, (uint64_t)&v35, 1);
  v12 = sub_10007D9D8();
  v13 = sub_10008C160((uint64_t)v10, v11 + *(int *)(v12 + 32));
  v29 = InferenceProviderAssetDescriptor.identifier.getter(v13);
  v15 = v14;
  v16 = v31;
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v31, v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_cost, v33);
  v23 = InferenceProviderAssetDescriptor.version.getter(v17, v18, v19, v20, v21, v22);
  if (v24)
    v25 = v23;
  else
    v25 = 0x6E776F6E6B6E753CLL;
  if (v24)
    v26 = v24;
  else
    v26 = 0xE90000000000003ELL;
  v27 = *(_QWORD *)(*(_QWORD *)(v11 + *(int *)(v12 + 44)) + 16) != 0;
  sub_10008C160(v7, (uint64_t)v10);
  AssetInfo.init(identifier:cost:version:hasForegroundSession:timeLastRequestEnded:)(v29, v15, v16, v25, v26, v27, v7);
  sub_10001EB58((uint64_t)v10, *(uint64_t (**)(uint64_t, uint64_t))(v30 + 8));
  sub_100006A68();
}

uint64_t sub_100080FE0()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_100002FB8(v0, qword_1000FD9C8);
  sub_100002FF8(v0, (uint64_t)qword_1000FD9C8);
  v1 = subsystemName.getter();
  return Logger.init(subsystem:category:)(v1);
}

uint64_t sub_100081040()
{
  uint64_t v0;
  uint64_t Strong;
  _BYTE v3[8];

  sub_10008B384(v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_weakManagerWrapper, (uint64_t)v3);
  Strong = swift_weakLoadStrong(v3);
  sub_10008B394((uint64_t)v3);
  return Strong;
}

uint64_t sub_10008108C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, char a7, _QWORD *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  void (*v38)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  _BYTE v47[16];

  v28 = v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_descriptor;
  v44 = sub_10007D478();
  v46 = *(_QWORD *)(v44 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v28, a1, v44);
  v29 = (_QWORD *)(v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_path);
  *v29 = a2;
  v29[1] = a3;
  v30 = v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_cost;
  v41 = sub_10004A92C();
  v43 = *(_QWORD *)(v41 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v30, a4, v41);
  *(_BYTE *)(v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_isCacheable) = a5;
  *(_BYTE *)(v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_dynamicModeAllowed) = a6;
  *(_BYTE *)(v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_useEnergyEfficientMode) = a7;
  sub_100006694((uint64_t)a8, v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
  v31 = v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  v32 = *(_QWORD *)(sub_10007DCE8() - 8);
  sub_10008C160(v31, a9);
  v33 = (int *)sub_10007D9D8();
  sub_10008C160(v31 + v33[5], a9);
  v34 = v31 + v33[8];
  v35 = sub_10007F428();
  v36 = *(_QWORD *)(v35 - 8);
  v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16);
  v37(v34, a10, v35);
  v37(v31 + v33[9], a11, v35);
  *(_BYTE *)(v31 + v33[6]) = a19;
  *(_QWORD *)(v31 + v33[7]) = 0;
  *(_QWORD *)(v31 + v33[10]) = a12;
  *(_QWORD *)(v31 + v33[11]) = a13;
  *(_QWORD *)(v31 + v33[12]) = a14;
  *(_BYTE *)(v31 + v33[13]) = 0;
  sub_100006694((uint64_t)a16, v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_telemetryManager);
  *(_QWORD *)(v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_neuralEngine) = a17;
  swift_weakInit(v47, a18);
  swift_release(a15);
  swift_release(a18);
  sub_10000650C(a16);
  v38 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
  v38(a11, v35);
  v38(a10, v35);
  sub_10001EB58(a9, *(uint64_t (**)(uint64_t, uint64_t))(v32 + 8));
  sub_10000650C(a8);
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(a4, v41);
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(a1, v44);
  sub_10008B6A4((uint64_t)v47, v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_weakManagerWrapper);
  return v19;
}

uint64_t sub_100081370(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2[15] = a1;
  v2[16] = v1;
  v3 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result(0);
  v2[17] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[18] = v4;
  v2[19] = sub_10001D800(v4);
  v5 = sub_10007D9D8();
  v2[20] = v5;
  v2[21] = sub_100037A68(*(_QWORD *)(v5 - 8));
  v2[22] = sub_10001EBC0();
  v6 = sub_100002F78(&qword_1000FD7E0);
  v2[23] = sub_10001D800(*(_QWORD *)(v6 - 8));
  v7 = sub_100002F78(&qword_1000FD820);
  v2[24] = sub_10001D800(*(_QWORD *)(v7 - 8));
  v8 = sub_100002F78(&qword_1000FB920);
  v2[25] = sub_10001D800(*(_QWORD *)(v8 - 8));
  v9 = sub_10002BA0C();
  v2[26] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[27] = v10;
  v2[28] = sub_10001D800(v10);
  v11 = sub_10007D89C();
  v2[29] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v2[30] = v12;
  v2[31] = sub_10001D800(v12);
  v13 = sub_100002F78(&qword_1000FB2A0);
  v2[32] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v2[33] = v14;
  v2[34] = sub_10001D800(v14);
  v15 = sub_10007DCE8();
  v2[35] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v2[36] = v16;
  v2[37] = sub_100037A68(v16);
  v2[38] = sub_10001EBC0();
  sub_10001E10C();
  return sub_10001D6DC();
}

uint64_t sub_100081494()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint64_t v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t (*v237)(uint64_t, uint64_t);
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  void (*v288)(uint64_t, uint64_t);

  v4 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 128);
  v6 = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  *(_QWORD *)(v0 + 312) = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  v7 = v5 + v6;
  sub_10002B308(v5 + v6, v0 + 16, 0);
  v8 = *(_QWORD *)(v7 + *(int *)(v4 + 28));
  if (v8)
  {
    *(_QWORD *)(v0 + 320) = v8;
    v9 = async function pointer to Task.value.getter[1];
    sub_10001E194();
    v10 = (_QWORD *)swift_task_alloc(v9);
    *(_QWORD *)(v0 + 328) = v10;
    sub_100002F78(&qword_1000FB5F8);
    *v10 = v0;
    v10[1] = sub_100081ABC;
    return sub_10008BD0C();
  }
  else
  {
    sub_10008BCC8();
    sub_10008C088();
    sub_10008B304(&qword_1000FCD38, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState, (uint64_t)&protocol conformance descriptor for LoadState);
    sub_10008BF3C(v12);
    sub_10008C060();
    sub_10008BA08();
    sub_10008C120();
    sub_10008C238(OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_telemetryManager);
    v13 = sub_10008C128();
    sub_10008C37C(v13, v14, v15, v16, v17, v18);
    v19 = sub_10008BEA8();
    sub_10008C10C(v19, enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.connectionTermination(_:), v20, v21, v22, v23, v24, v25, v128, v138, v148, v158, v168, v178, v188, v198, v208, v217);
    sub_10008BD54(OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
    v26 = sub_10008C360();
    v34 = sub_10008BDEC(v26, v27, v28, v29, v30, v31, v32, v33, v129, v139, v149, v159, v169, v179, v189, v199, v209, v218, v225,
            v232);
    sub_10008BFCC(v34, v35, v36, v37, v38, v39, v40, v41, v130, v140, v150, v160, v170, v180, v190, v200, v210, v219, v226,
      v233,
      v239);
    v42 = sub_100002F78(&qword_1000FB2D8);
    v45 = sub_10008BDD0(v268, v43, v44, v42);
    sub_10008BAE8(v45, v46, v47, v48, v49, v50, v51, v52, v131, v141, v151, v161, v171, v181, v191, v201, v211, v220, v227,
      v234,
      v240,
      v244,
      v248,
      v252,
      v256,
      v260,
      v264,
      v268,
      v273,
      v277,
      v280,
      v282);
    sub_10002B684();
    sub_10001E8A8();
    v53 = sub_10001E420();
    sub_10007D78C(v53, &qword_1000FD7E0);
    sub_10007EC14(v54, &qword_1000FD820);
    sub_10007FFC8(v55, &qword_1000FB920);
    sub_10008C0E4(v56, v57, v58, v59, v60, v61, v62, v63, v132, v142, v152, v162, v172, v182, v192, v202, v212, v221, v228,
      v235,
      v241,
      v245,
      v249,
      v253,
      v257,
      v261,
      v265,
      v269,
      v274);
    sub_10008C1C0();
    if (qword_1000FB110 != -1)
      swift_once(&qword_1000FB110, sub_100080FE0);
    v64 = *(_QWORD *)(v0 + 128);
    v65 = sub_10001DD64();
    sub_100002FF8(v65, (uint64_t)qword_1000FD9C8);
    sub_10008BC60(v64);
    v66 = sub_10002B3CC();
    v67 = static os_log_type_t.default.getter();
    if (sub_10008C1B0(v67))
    {
      v2 = v0 + 96;
      v68 = *(_QWORD *)(v0 + 128);
      v69 = (uint8_t *)sub_10001D8D4(22);
      v287 = sub_10001D8D4(64);
      *(_DWORD *)v69 = 136315394;
      v3 = sub_10007D478();
      sub_10008B304(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
      v71 = sub_10008BDC8(v70, v70);
      sub_10002B7E0(v71, v72);
      sub_10008BF94(v73, v74, v75, v76, v77, v78, v79, v80, v133, v143, v153, v163, v173, v183, v193, v203, v213, v222, v229,
        v236,
        v242,
        v246,
        v250,
        v254,
        v258,
        v262,
        v266,
        v270,
        v275,
        v278,
        v68,
        v0 + 88);
      sub_10001E034();
      v81 = sub_10001EBB0(v68);
      sub_10008BC24(v81, v82, v83, v84, v85, v86, v87, v88, v134, v144, v154, v164, v174, v184, v194, v204);
      sub_10008B304(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
      v90 = sub_10008BF74(v89, v89);
      sub_10008BFAC(v90, v91, v92, v93, v94, v95, v96, v97, v135, v145, v155, v165, v175, v185, v195, v205, v214, v223, v230,
        v237);
      sub_10008BC74();
      sub_10008BF7C(v98, v99, v100, v101, v102, v103, v104, v105, v136, v146, v156, v166, v176, v186, v196, v206, v215);
      sub_10001E420();
      sub_10001EBB0(v281);
      sub_10002B4A0((void *)&_mh_execute_header, v66, (os_log_type_t)v1, "Marking asset %s unloaded from %s by termination", v69);
      v64 = v287;
      sub_10007DBD8();
      sub_10001D790(v287);
      sub_10001D790((uint64_t)v69);
    }
    else
    {
      sub_100044904(*(_QWORD *)(v0 + 128));
    }

    sub_10008BA80();
    sub_10008BE24();
    v106 = *(_QWORD *)(v3 + 40);
    sub_10008BE30(v64);
    sub_10008BE9C();
    sub_10001E26C(v1, v284);
    sub_10008BE78();
    swift_endAccess();
    sub_10008BE84();
    sub_10008C074();
    sub_10008BE24();
    sub_10008BE30(v64 + *(int *)(v258 + 20));
    sub_10008BE9C();
    sub_10001E26C(v1, v285);
    sub_10008BE78();
    swift_endAccess();
    sub_10008BE84();
    v286 = sub_10008C09C();
    sub_10008C278(v286, v107, v108, v109, v110, v111);
    v112 = sub_10008C2A4();
    v119 = sub_10008BF24(v112, enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result.success(_:), v113, v114, v115, v116, v117, v118, v133, v143, v153, v163, v173, v183, v193, v203, v213, v222, v229,
             v236,
             v242,
             v246,
             v250,
             v254,
             v258,
             v262,
             v266,
             v270,
             v275,
             v278);
    sub_10008BB50(v119, v120, v121, v122, v123, v124, v125, v126, v137, v147, v157, v167, v177, v187, v197, v207, v216, v224, v231,
      v238,
      v243,
      v247,
      v251,
      v255,
      v259,
      v263,
      v267,
      v271,
      v276,
      v279,
      v281,
      v283);
    sub_10001E420();
    sub_10001D9C8();
    v127 = sub_10001D8B4();
    sub_10007EC14(v127, &qword_1000FD7E0);
    sub_10001E808(v2, *(uint64_t (**)(uint64_t, uint64_t))(v106 + 8));
    sub_10008C14C();
    v288(v287, v272);
    sub_10008BCA0();
    sub_10001E330();
    sub_10001D938();
    sub_10001EAC8();
    sub_10001E490();
    sub_10002B504();
    sub_10002B528();
    sub_10002B4C4();
    sub_10002B70C();
    sub_10002BDF0();
    sub_10007DB40();
    return sub_10008BCF0(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_100081ABC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_10008C030();
  swift_task_dealloc(v1);
  if (v0)
    swift_errorRelease(v0);
  sub_10001E10C();
  return sub_10001D6DC();
}

uint64_t sub_100081B0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint64_t v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t (*v236)(uint64_t, uint64_t);
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  void (*v287)(uint64_t, uint64_t);

  v4 = *(_QWORD *)(v0 + 312);
  v5 = *(_QWORD *)(v0 + 160);
  v6 = *(_QWORD *)(v0 + 128);
  swift_release(*(_QWORD *)(v0 + 320));
  v7 = *(_QWORD *)(v6 + v4 + *(int *)(v5 + 28));
  if (v7)
  {
    *(_QWORD *)(v0 + 320) = v7;
    v8 = async function pointer to Task.value.getter[1];
    sub_10001E194();
    v9 = (_QWORD *)swift_task_alloc(v8);
    *(_QWORD *)(v0 + 328) = v9;
    sub_100002F78(&qword_1000FB5F8);
    *v9 = v0;
    v9[1] = sub_100081ABC;
    return sub_10008BD0C();
  }
  else
  {
    sub_10008BCC8();
    sub_10008C088();
    sub_10008B304(&qword_1000FCD38, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState, (uint64_t)&protocol conformance descriptor for LoadState);
    sub_10008BF3C(v11);
    sub_10008C060();
    sub_10008BA08();
    sub_10008C120();
    sub_10008C238(OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_telemetryManager);
    v12 = sub_10008C128();
    sub_10008C37C(v12, v13, v14, v15, v16, v17);
    v18 = sub_10008BEA8();
    sub_10008C10C(v18, enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.connectionTermination(_:), v19, v20, v21, v22, v23, v24, v127, v137, v147, v157, v167, v177, v187, v197, v207, v216);
    sub_10008BD54(OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
    v25 = sub_10008C360();
    v33 = sub_10008BDEC(v25, v26, v27, v28, v29, v30, v31, v32, v128, v138, v148, v158, v168, v178, v188, v198, v208, v217, v224,
            v231);
    sub_10008BFCC(v33, v34, v35, v36, v37, v38, v39, v40, v129, v139, v149, v159, v169, v179, v189, v199, v209, v218, v225,
      v232,
      v238);
    v41 = sub_100002F78(&qword_1000FB2D8);
    v44 = sub_10008BDD0(v267, v42, v43, v41);
    sub_10008BAE8(v44, v45, v46, v47, v48, v49, v50, v51, v130, v140, v150, v160, v170, v180, v190, v200, v210, v219, v226,
      v233,
      v239,
      v243,
      v247,
      v251,
      v255,
      v259,
      v263,
      v267,
      v272,
      v276,
      v279,
      v281);
    sub_10002B684();
    sub_10001E8A8();
    v52 = sub_10001E420();
    sub_10007D78C(v52, &qword_1000FD7E0);
    sub_10007EC14(v53, &qword_1000FD820);
    sub_10007FFC8(v54, &qword_1000FB920);
    sub_10008C0E4(v55, v56, v57, v58, v59, v60, v61, v62, v131, v141, v151, v161, v171, v181, v191, v201, v211, v220, v227,
      v234,
      v240,
      v244,
      v248,
      v252,
      v256,
      v260,
      v264,
      v268,
      v273);
    sub_10008C1C0();
    if (qword_1000FB110 != -1)
      swift_once(&qword_1000FB110, sub_100080FE0);
    v63 = *(_QWORD *)(v0 + 128);
    v64 = sub_10001DD64();
    sub_100002FF8(v64, (uint64_t)qword_1000FD9C8);
    sub_10008BC60(v63);
    v65 = sub_10002B3CC();
    v66 = static os_log_type_t.default.getter();
    if (sub_10008C1B0(v66))
    {
      v2 = v0 + 96;
      v67 = *(_QWORD *)(v0 + 128);
      v68 = (uint8_t *)sub_10001D8D4(22);
      v286 = sub_10001D8D4(64);
      *(_DWORD *)v68 = 136315394;
      v3 = sub_10007D478();
      sub_10008B304(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
      v70 = sub_10008BDC8(v69, v69);
      sub_10002B7E0(v70, v71);
      sub_10008BF94(v72, v73, v74, v75, v76, v77, v78, v79, v132, v142, v152, v162, v172, v182, v192, v202, v212, v221, v228,
        v235,
        v241,
        v245,
        v249,
        v253,
        v257,
        v261,
        v265,
        v269,
        v274,
        v277,
        v67,
        v0 + 88);
      sub_10001E034();
      v80 = sub_10001EBB0(v67);
      sub_10008BC24(v80, v81, v82, v83, v84, v85, v86, v87, v133, v143, v153, v163, v173, v183, v193, v203);
      sub_10008B304(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
      v89 = sub_10008BF74(v88, v88);
      sub_10008BFAC(v89, v90, v91, v92, v93, v94, v95, v96, v134, v144, v154, v164, v174, v184, v194, v204, v213, v222, v229,
        v236);
      sub_10008BC74();
      sub_10008BF7C(v97, v98, v99, v100, v101, v102, v103, v104, v135, v145, v155, v165, v175, v185, v195, v205, v214);
      sub_10001E420();
      sub_10001EBB0(v280);
      sub_10002B4A0((void *)&_mh_execute_header, v65, (os_log_type_t)v1, "Marking asset %s unloaded from %s by termination", v68);
      v63 = v286;
      sub_10007DBD8();
      sub_10001D790(v286);
      sub_10001D790((uint64_t)v68);
    }
    else
    {
      sub_100044904(*(_QWORD *)(v0 + 128));
    }

    sub_10008BA80();
    sub_10008BE24();
    v105 = *(_QWORD *)(v3 + 40);
    sub_10008BE30(v63);
    sub_10008BE9C();
    sub_10001E26C(v1, v283);
    sub_10008BE78();
    swift_endAccess();
    sub_10008BE84();
    sub_10008C074();
    sub_10008BE24();
    sub_10008BE30(v63 + *(int *)(v257 + 20));
    sub_10008BE9C();
    sub_10001E26C(v1, v284);
    sub_10008BE78();
    swift_endAccess();
    sub_10008BE84();
    v285 = sub_10008C09C();
    sub_10008C278(v285, v106, v107, v108, v109, v110);
    v111 = sub_10008C2A4();
    v118 = sub_10008BF24(v111, enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result.success(_:), v112, v113, v114, v115, v116, v117, v132, v142, v152, v162, v172, v182, v192, v202, v212, v221, v228,
             v235,
             v241,
             v245,
             v249,
             v253,
             v257,
             v261,
             v265,
             v269,
             v274,
             v277);
    sub_10008BB50(v118, v119, v120, v121, v122, v123, v124, v125, v136, v146, v156, v166, v176, v186, v196, v206, v215, v223, v230,
      v237,
      v242,
      v246,
      v250,
      v254,
      v258,
      v262,
      v266,
      v270,
      v275,
      v278,
      v280,
      v282);
    sub_10001E420();
    sub_10001D9C8();
    v126 = sub_10001D8B4();
    sub_10007EC14(v126, &qword_1000FD7E0);
    sub_10001E808(v2, *(uint64_t (**)(uint64_t, uint64_t))(v105 + 8));
    sub_10008C14C();
    v287(v286, v271);
    sub_10008BCA0();
    sub_10001E330();
    sub_10001D938();
    sub_10001EAC8();
    sub_10001E490();
    sub_10002B504();
    sub_10002B528();
    sub_10002B4C4();
    sub_10002B70C();
    sub_10002BDF0();
    sub_10007DB40();
    return sub_10008BCF0(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_100082120()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  return sub_10001D948((uint64_t)sub_100082134, 0);
}

uint64_t sub_100082134()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v18;

  if (qword_1000FB110 != -1)
    swift_once(&qword_1000FB110, sub_100080FE0);
  v1 = v0[3];
  v2 = sub_10001DD64();
  v3 = sub_100002FF8(v2, (uint64_t)qword_1000FD9C8);
  sub_10001D834(v1);
  sub_10002B3CC();
  v4 = sub_10002B470();
  v5 = os_log_type_enabled(v3, v4);
  v6 = v0[3];
  if (v5)
  {
    v7 = (uint8_t *)sub_10001D8D4(12);
    v8 = sub_10001D8D4(32);
    *(_DWORD *)v7 = 136315138;
    v18 = v8;
    sub_10007D478();
    sub_10008B304(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
    v10 = sub_10008BF74(v9, v9);
    sub_1000102C0(v10, v11, &v18);
    v0[2] = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3);
    sub_10001E034();
    sub_10001EBB0(v6);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Asset %s received handleConnectionTermination", v7, 0xCu);
    sub_10001DBB8(v8);
    sub_10001D790(v8);
    sub_10001D790((uint64_t)v7);
  }
  else
  {
    sub_10001EBB0(v0[3]);
  }

  v13 = sub_100081040();
  v0[4] = v13;
  if (!v13)
  {
    sub_10002BC1C();
    __asm { BR              X0 }
  }
  v14 = (_QWORD *)swift_task_alloc(dword_1000FDBE4);
  v0[5] = v14;
  *v14 = v0;
  v14[1] = sub_10008232C;
  sub_10002BC1C();
  return sub_100081370(v15);
}

uint64_t sub_10008232C()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 40));
  return sub_10001D674();
}

uint64_t sub_100082364()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

void sub_10008238C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = sub_10007D478();
  sub_10001DD50(v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_path + 8));
  v2 = sub_10004A92C();
  sub_10001DD50(v2);
  sub_10000650C((_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection));
  sub_10002ACC4(v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  sub_10000650C((_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_telemetryManager));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_neuralEngine));
  sub_10008B394(v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_weakManagerWrapper);
  sub_100006C14();
}

uint64_t sub_100082438()
{
  uint64_t v0;

  sub_10008238C();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for InferenceProviderAsset(uint64_t a1)
{
  return sub_100042760(a1, qword_1000FDA08, (uint64_t)&nominal type descriptor for InferenceProviderAsset);
}

uint64_t sub_100082470(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[11];

  result = type metadata accessor for InferenceProviderAssetDescriptor(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(result - 8) + 64;
    v6[1] = &unk_1000CC4E8;
    result = type metadata accessor for AssetCost(319);
    if (v4 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(result - 8) + 64;
      v6[3] = &unk_1000CC500;
      v6[4] = &unk_1000CC500;
      v6[5] = &unk_1000CC500;
      v6[6] = &unk_1000CC518;
      result = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(319);
      if (v5 <= 0x3F)
      {
        v6[7] = *(_QWORD *)(result - 8) + 64;
        v6[8] = &unk_1000CC518;
        v6[9] = (char *)&value witness table for Builtin.NativeObject + 64;
        v6[10] = &unk_1000CC530;
        return swift_updateClassMetadata2(a1, 256, 11, v6, a1 + 80);
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for InferenceProviderAsset.ManagerOwnedState(uint64_t a1)
{
  return sub_100042760(a1, qword_1000FDB38, (uint64_t)&nominal type descriptor for InferenceProviderAsset.ManagerOwnedState);
}

uint64_t getEnumTagSinglePayload for InferenceProviderAsset.WeakManagerWrapper(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for InferenceProviderAsset.WeakManagerWrapper(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for InferenceProviderAsset.WeakManagerWrapper()
{
  return &type metadata for InferenceProviderAsset.WeakManagerWrapper;
}

_QWORD *sub_1000825C8(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t State;
  void (*v8)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v23);
  }
  else
  {
    State = type metadata accessor for LoadState(0);
    v8 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(State - 8) + 16);
    v8(a1, a2, State);
    v8((_QWORD *)((char *)a1 + a3[5]), (_QWORD *)((char *)a2 + a3[5]), State);
    v9 = a3[7];
    *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    v10 = *(_QWORD *)((char *)a2 + v9);
    *(_QWORD *)((char *)a1 + v9) = v10;
    v11 = a3[8];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for Date(0);
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_retain(v10);
    v15(v12, v13, v14);
    v15((char *)a1 + a3[9], (char *)a2 + a3[9], v14);
    v16 = a3[10];
    v17 = a3[11];
    v18 = *(_QWORD *)((char *)a2 + v16);
    *(_QWORD *)((char *)a1 + v16) = v18;
    v19 = *(_QWORD *)((char *)a2 + v17);
    *(_QWORD *)((char *)a1 + v17) = v19;
    v20 = a3[12];
    v21 = a3[13];
    v22 = *(_QWORD *)((char *)a2 + v20);
    *(_QWORD *)((char *)a1 + v20) = v22;
    *((_BYTE *)a1 + v21) = *((_BYTE *)a2 + v21);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v22);
  }
  return a1;
}

uint64_t sub_100082708(uint64_t a1, int *a2)
{
  uint64_t State;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);

  State = type metadata accessor for LoadState(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 8);
  v5(a1, State);
  v5(a1 + a2[5], State);
  swift_release(*(_QWORD *)(a1 + a2[7]));
  v6 = a1 + a2[8];
  v7 = type metadata accessor for Date(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(a1 + a2[9], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[10]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11]));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12]));
}

uint64_t sub_1000827CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t State;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  State = type metadata accessor for LoadState(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 16);
  v7(a1, a2, State);
  v7(a1 + a3[5], a2 + a3[5], State);
  v8 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v9 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  v10 = a3[8];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for Date(0);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_retain(v9);
  v14(v11, v12, v13);
  v14(a1 + a3[9], a2 + a3[9], v13);
  v15 = a3[10];
  v16 = a3[11];
  v17 = *(_QWORD *)(a2 + v15);
  *(_QWORD *)(a1 + v15) = v17;
  v18 = *(_QWORD *)(a2 + v16);
  *(_QWORD *)(a1 + v16) = v18;
  v19 = a3[12];
  v20 = a3[13];
  v21 = *(_QWORD *)(a2 + v19);
  *(_QWORD *)(a1 + v19) = v21;
  *(_BYTE *)(a1 + v20) = *(_BYTE *)(a2 + v20);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v21);
  return a1;
}

uint64_t sub_1000828E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t State;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  State = type metadata accessor for LoadState(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 24);
  v7(a1, a2, State);
  v7(a1 + a3[5], a2 + a3[5], State);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v8 = a3[7];
  v9 = *(_QWORD *)(a1 + v8);
  v10 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v10;
  swift_retain(v10);
  swift_release(v9);
  v11 = a3[8];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for Date(0);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24);
  v15(v12, v13, v14);
  v15(a1 + a3[9], a2 + a3[9], v14);
  v16 = a3[10];
  v17 = *(_QWORD *)(a2 + v16);
  v18 = *(_QWORD *)(a1 + v16);
  *(_QWORD *)(a1 + v16) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  v19 = a3[11];
  v20 = *(_QWORD *)(a2 + v19);
  v21 = *(_QWORD *)(a1 + v19);
  *(_QWORD *)(a1 + v19) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = a3[12];
  v23 = *(_QWORD *)(a2 + v22);
  v24 = *(_QWORD *)(a1 + v22);
  *(_QWORD *)(a1 + v22) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  return a1;
}

uint64_t sub_100082A24(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t State;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;

  State = type metadata accessor for LoadState(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 32);
  v7(a1, a2, State);
  v7(a1 + a3[5], a2 + a3[5], State);
  v8 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v9 = a3[8];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Date(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
  v13(v10, v11, v12);
  v13(a1 + a3[9], a2 + a3[9], v12);
  v14 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  v15 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  return a1;
}

uint64_t sub_100082B1C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t State;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  State = type metadata accessor for LoadState(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 40);
  v7(a1, a2, State);
  v7(a1 + a3[5], a2 + a3[5], State);
  v8 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v9 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  swift_release(v9);
  v10 = a3[8];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for Date(0);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40);
  v14(v11, v12, v13);
  v14(a1 + a3[9], a2 + a3[9], v13);
  v15 = a3[10];
  v16 = *(_QWORD *)(a1 + v15);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  swift_bridgeObjectRelease(v16);
  v17 = a3[11];
  v18 = *(_QWORD *)(a1 + v17);
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);
  swift_bridgeObjectRelease(v18);
  v19 = a3[12];
  v20 = *(_QWORD *)(a1 + v19);
  *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);
  swift_bridgeObjectRelease(v20);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  return a1;
}

uint64_t sub_100082C3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100082C48);
}

uint64_t sub_100082C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;

  v6 = sub_10007DCE8();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
    return sub_100005700(v8, a2, v7);
  }
  v9 = sub_10007F428();
  if (*(_DWORD *)(*(_QWORD *)(v9 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v9;
    v8 = a1 + *(int *)(a3 + 32);
    return sub_100005700(v8, a2, v7);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 40));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_100082CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100082CEC);
}

uint64_t sub_100082CEC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = sub_10007DCE8();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a1;
    return sub_100005630(v10, a2, a2, v9);
  }
  result = sub_10007F428();
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
  {
    v9 = result;
    v10 = a1 + *(int *)(a4 + 32);
    return sub_100005630(v10, a2, a2, v9);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 40)) = (a2 - 1);
  return result;
}

uint64_t sub_100082D80(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[4];
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  void *v11;

  result = type metadata accessor for LoadState(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = v5[0];
    v5[2] = &unk_1000CC500;
    v5[3] = "\b";
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v6 = *(_QWORD *)(result - 8) + 64;
      v7 = v6;
      v8 = (char *)&value witness table for Builtin.BridgeObject + 64;
      v9 = (char *)&value witness table for Builtin.BridgeObject + 64;
      v10 = (char *)&value witness table for Builtin.BridgeObject + 64;
      v11 = &unk_1000CC500;
      swift_initStructMetadata(a1, 256, 10, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

void sub_100082E2C()
{
  sub_10008B304(&qword_1000FB728, type metadata accessor for InferenceProviderAssetManager, (uint64_t)&unk_1000CC408);
}

uint64_t sub_100082E58()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1000FDBDC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10001CA84;
  return sub_100082120();
}

uint64_t sub_100082E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v7[24] = a6;
  v7[25] = v6;
  v7[22] = a4;
  v7[23] = a5;
  v7[20] = a2;
  v7[21] = a3;
  v7[19] = a1;
  v8 = type metadata accessor for ModelManagerError(0);
  v7[26] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[27] = v9;
  v7[28] = sub_10001D800(v9);
  v10 = sub_10004A92C();
  v7[29] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v7[30] = v11;
  v7[31] = sub_10001D800(v11);
  v12 = type metadata accessor for InferenceError(0);
  v7[32] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v7[33] = v13;
  v7[34] = sub_100037A68(v13);
  v7[35] = sub_10001EBC0();
  v14 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result(0);
  v7[36] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v7[37] = v15;
  v7[38] = sub_10001D800(v15);
  v16 = sub_10007DCE8();
  v7[39] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v7[40] = v17;
  v7[41] = sub_100037A68(v17);
  v7[42] = sub_10001EBC0();
  v18 = sub_100002F78(&qword_1000FB920);
  v7[43] = sub_10001D800(*(_QWORD *)(v18 - 8));
  v19 = sub_100002F78(&qword_1000FB2A0);
  v7[44] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v7[45] = v20;
  v7[46] = sub_10001D800(v20);
  v21 = sub_10002BA0C();
  v7[47] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v7[48] = v22;
  v7[49] = sub_10001D800(v22);
  sub_10001E10C();
  return sub_10001D6DC();
}

uint64_t sub_100082FC0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33[9];
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;

  sub_10001E6D4();
  v35 = v1;
  v36 = v2;
  v34 = v0;
  if (qword_1000FB110 != -1)
    swift_once(&qword_1000FB110, sub_100080FE0);
  v3 = v0[25];
  v4 = sub_10001DD64();
  v5 = sub_100002FF8(v4, (uint64_t)qword_1000FD9C8);
  v0[50] = v5;
  sub_10008BC60(v3);
  sub_10002B3CC();
  v6 = sub_10002B470();
  v7 = v6;
  v8 = &qword_1000FF000;
  if (os_log_type_enabled(v5, v6))
  {
    v9 = v0[49];
    v29 = v0[47];
    v30 = v0[48];
    v10 = v0[25];
    v11 = (uint8_t *)sub_10001D8D4(22);
    v31 = sub_10001D8D4(64);
    v33[0] = v31;
    *(_DWORD *)v11 = 136315394;
    sub_10007D478();
    sub_10008B304(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
    v13 = sub_10008BDC8(v12, v12);
    sub_1000102C0(v13, v14, v33);
    v0[17] = v15;
    sub_10007FF40((uint64_t)(v0 + 17), (uint64_t)(v0 + 18));
    sub_10001E034();
    sub_10001EBB0(v10);
    sub_10008BDB8();
    v16 = *(_QWORD *)(v10 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
    sub_10001C830((_QWORD *)(v10 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection), *(_QWORD *)(v10 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24));
    sub_10008BFE4();
    sub_10008B304(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
    sub_10008C2E4();
    dispatch thunk of CustomStringConvertible.description.getter(v29, v17);
    sub_10008C310();
    v18 = sub_10008C388(v9, *(uint64_t (**)(uint64_t, uint64_t))(v30 + 8));
    sub_10008BE90(v18, v19, v33);
    v0[18] = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 18, v0 + 19);
    v21 = v16;
    v8 = &qword_1000FF000;
    swift_bridgeObjectRelease(v21);
    sub_10001EBB0(v10);
    sub_10002B4A0((void *)&_mh_execute_header, v5, (os_log_type_t)v7, "Loading asset %s into %s", v11);
    sub_10007DBD8();
    sub_10001D790(v31);
    sub_10001D790((uint64_t)v11);
  }
  else
  {
    sub_100044904(v0[25]);
  }

  v22 = v0[25];
  v23 = v8[446];
  v0[51] = v23;
  sub_10008C2F0((_QWORD *)(v22 + v23));
  v24 = sub_10008C188(*(_QWORD *)(v7 + 64));
  v32 = v25;
  v26 = (_QWORD *)swift_task_alloc(v24);
  v0[52] = v26;
  *v26 = v0;
  v26[1] = sub_100083248;
  v27 = sub_10002BD0C(v0[25]);
  return v32(v27);
}

uint64_t sub_100083248()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 416));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_100083280()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t);
  _QWORD *v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t (*v59)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;

  v2 = v1[43];
  v3 = v1[44];
  sub_10008B6B4(v1[21], v2, &qword_1000FB920);
  v4 = sub_100005700(v2, 1, v3);
  v5 = v1[46];
  if (v4 == 1)
  {
    v2 = v1[43];
    sub_10008C144();
    sub_10008C120();
    sub_10002AD5C(v2, &qword_1000FB920);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v1[45] + 32))(v1[46], v1[43], v1[44]);
  }
  v6 = v1[49];
  v51 = v1[48];
  v52 = v1[47];
  v57 = v1[46];
  v7 = v1[42];
  v8 = v1[40];
  v49 = v1[39];
  v50 = v8;
  v9 = v1[25];
  v54 = v1[24];
  v56 = v1[23];
  v53 = *(_OWORD *)(v1 + 21);
  v55 = v1[20];
  v10 = v9 + v1[51];
  v11 = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_telemetryManager;
  v1[53] = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_telemetryManager;
  sub_10008C2F0((_QWORD *)(v9 + v11));
  v1[54] = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_descriptor;
  v12 = sub_10008C128();
  v47 = v13;
  v48 = v12;
  v60 = v5;
  v18 = InferenceProviderAssetDescriptor.version.getter(v12, v13, v14, v15, v16, v17);
  v45 = v19;
  v46 = v18;
  v58 = enum case for LoadState.loaded(_:);
  (*(void (**)(uint64_t))(v8 + 104))(v7);
  v20 = *(_QWORD *)(v10 + 24);
  sub_10008C2B8();
  sub_10008C0F8(v20);
  v21 = sub_10008C360();
  v23 = v22;
  v24 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
  v1[55] = v24;
  v24(v6, v52);
  v1[56] = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(v0 + 24))(v57, v48, v47, v46, v45, v56, v7, v55, v21, v23, v53, *((_QWORD *)&v53 + 1), v54, v2, v0);
  swift_bridgeObjectRelease(v23);
  sub_10001EADC();
  sub_10001DA38();
  v25 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
  v1[57] = v25;
  v25(v7, v49);
  v26 = sub_10001D834(v9);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.info.getter();
  v29 = os_log_type_enabled(v27, v28);
  v30 = v1[25];
  if (v29)
  {
    v31 = (uint8_t *)sub_10001D8D4(12);
    v61 = sub_10001D8D4(32);
    *(_DWORD *)v31 = 136315138;
    v32 = sub_10007D478();
    sub_10008B304(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
    v34 = dispatch thunk of CustomStringConvertible.description.getter(v32, v33);
    sub_10002B7E0(v34, v35);
    v1[16] = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 17);
    sub_10001E034();
    sub_10001EBB0(v30);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "loadIn executing on %s", v31, 0xCu);
    sub_10001DBB8(v61);
    sub_10001D790(v61);
    sub_10001D790((uint64_t)v31);
  }
  else
  {
    sub_10001EBB0(v1[25]);
  }

  v37 = v1[41];
  v38 = (_QWORD *)(v1[25] + v1[51]);
  v39 = v38[3];
  v40 = v38[4];
  sub_10001C830(v38, v39);
  sub_10008C368(v37, v58);
  v41 = sub_10008C188(*(_QWORD *)(v40 + 24));
  v59 = v42;
  v43 = (_QWORD *)swift_task_alloc(v41);
  v1[58] = v43;
  *v43 = v1;
  v43[1] = sub_100083618;
  return v59(v60, v1[41], v1[23], v1[46], v39, v40);
}

uint64_t sub_100083618()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  sub_10001E0D8();
  *v3 = *v2;
  *(_QWORD *)(v0 + 472) = v1;
  swift_task_dealloc();
  (*(void (**)(_QWORD, _QWORD))(v0 + 456))(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 312));
  sub_10001E10C();
  return sub_10001D6DC();
}

uint64_t sub_100083680(uint64_t a1)
{
  os_log_type_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;

  v5 = Logger.logObject.getter(a1);
  v6 = static os_log_type_t.info.getter();
  if (sub_100039E20(v6))
  {
    v2 = sub_10001D8D4(2);
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v1, "loadIn finished", (uint8_t *)v2, 2u);
    sub_10001D790(v2);
  }
  v7 = v3[25];

  sub_1000AF660(*(uint64_t *)((char *)&v7->isa + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_path), *(unint64_t *)((char *)&v7[1].isa + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_path), *((_BYTE *)&v7->isa + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_useEnergyEfficientMode));
  v8 = v3[50];
  v9 = sub_10008BC60(v3[25]);
  Logger.logObject.getter(v9);
  v10 = sub_10002B470();
  if (sub_100037E74(v10))
  {
    v2 = (uint64_t)(v3 + 13);
    v62 = (uint64_t (*)(uint64_t, uint64_t))v3[55];
    v11 = v3[49];
    v61 = v3[47];
    v4 = v3[25];
    v12 = (_QWORD *)(v4 + v3[51]);
    v13 = (uint8_t *)sub_10001D8D4(22);
    v63 = sub_10001D8D4(64);
    v64 = v63;
    *(_DWORD *)v13 = 136315394;
    sub_10007D478();
    sub_10008B304(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
    v15 = sub_10008BFC4(v14, v14);
    sub_10008BD3C(v15, v16);
    v3[12] = v17;
    sub_10007FF40((uint64_t)(v3 + 12), (uint64_t)(v3 + 13));
    sub_10001E034();
    sub_10001EBB0(v4);
    sub_10008BDB8();
    sub_10001C830(v12, v12[3]);
    sub_10008BFE4();
    sub_10008B304(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
    sub_10008C2E4();
    sub_10008BDC8(v18, v19);
    sub_10008C310();
    v20 = v62(v11, v61);
    sub_10008BE90(v20, v21, &v64);
    v3[13] = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 + 13, v3 + 14);
    sub_10001E4C0();
    sub_10001EBB0(v4);
    sub_10002B4A0((void *)&_mh_execute_header, v7, (os_log_type_t)v8, "Finished loading asset %s into %s", v13);
    sub_10007DBD8();
    sub_10001D790(v63);
    sub_10001D790((uint64_t)v13);
  }
  else
  {
    sub_100044904(v3[25]);
  }

  sub_10008BBEC();
  sub_10008C1F8();
  v23 = sub_10008BE4C();
  sub_10008C0CC(v23, v24, v25, v26, v27, v28);
  sub_10008C34C();
  v29 = sub_10008C100(v4, enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result.success(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104), v39, v41, v43, v45, v47, v49, v51, v54);
  sub_10008BBA8(v29, v30, v31, v32, v33, v34, v35, v36, v40, v42, v44, v46, v48, v50, v52, v55, v56, v57, v58, v59);
  sub_10001DA38();
  sub_10001D9C8();
  sub_10001E8A8();
  sub_10008BE3C(v53);
  sub_10008BC68(v60);
  swift_task_dealloc();
  sub_10001D938();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10002B528();
  swift_task_dealloc();
  sub_10008C330();
  sub_10007DB40();
  swift_task_dealloc();
  v37 = (uint64_t (*)(void))sub_10001E5D0();
  return v37();
}

uint64_t sub_1000839A4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(os_log_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __n128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t (*v100)(void);
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t (*v161)(uint64_t, uint64_t);
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  os_log_t log;
  uint64_t (*v168)(uint64_t);
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  os_log_type_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177[3];

  v2 = v0[59];
  v0[8] = v2;
  v3 = (uint64_t)(v0 + 8);
  v4 = v0[35];
  v5 = v0[32];
  swift_errorRetain(v2);
  v6 = sub_100002F78(&qword_1000FB5F8);
  if ((swift_dynamicCast(v4, v0 + 8, v6, v5, 0) & 1) == 0)
    goto LABEL_6;
  if ((*(unsigned int (**)(_QWORD, _QWORD))(v0[33] + 88))(v0[35], v0[32]) != enum case for InferenceError.alreadyLoaded(_:))
  {
    sub_10002BC38(v0[33]);
LABEL_6:
    v29 = v0[59];
    v30 = v0[50];
    v31 = v0[25];
    swift_errorRelease(v0[8]);
    swift_retain_n(v31, 3);
    sub_10001FAE0();
    swift_retain();
    v32 = sub_10001FAE0();
    Logger.logObject.getter(v32);
    v33 = sub_10001E9D0();
    v34 = sub_10001E6C4(v33);
    v35 = v0[59];
    v176 = v6;
    if (v34)
    {
      v161 = (uint64_t (*)(uint64_t, uint64_t))v0[55];
      v172 = v29;
      v36 = v0[49];
      v159 = v0[47];
      v37 = v0[25];
      v38 = (_QWORD *)(v37 + v0[51]);
      v39 = sub_10001D8D4(32);
      v165 = (_QWORD *)sub_10001D8D4(8);
      v169 = sub_10001D8D4(64);
      v177[0] = v169;
      *(_DWORD *)v39 = 136315650;
      sub_10007D478();
      sub_10008B304(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
      v41 = sub_10007E0E8(v40);
      sub_10008C0D8(v41, v42);
      v0[9] = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 9, v0 + 10);
      sub_10001E034();
      sub_10001EBB0(v37);
      *(_WORD *)(v39 + 12) = 2080;
      v44 = v38[3];
      sub_10001C830(v38, v44);
      sub_10008C0F8(v44);
      sub_10008B304(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
      dispatch thunk of CustomStringConvertible.description.getter(v159, v45);
      v46 = v161(v36, v159);
      sub_10008BE90(v46, v47, v177);
      v0[10] = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 10, v0 + 11);
      sub_10001E4C0();
      sub_10001EBB0(v37);
      *(_WORD *)(v39 + 22) = 2112;
      swift_errorRetain(v35);
      v49 = _swift_stdlib_bridgeErrorToNSError(v35);
      v0[11] = v49;
      sub_10002B3F0((uint64_t)(v0 + 11), (uint64_t)(v0 + 12));
      *v165 = v49;
      sub_10007DE7C();
      sub_10007DE7C();
      _os_log_impl((void *)&_mh_execute_header, v30, v172, "Failed to load asset %s into %s: %@", (uint8_t *)v39, 0x20u);
      sub_100002F78(&qword_1000FB8E0);
      sub_10001DBB8((uint64_t)v165);
      sub_10001D790((uint64_t)v165);
      sub_10002BA20(v169);
      sub_10001D790(v169);
      sub_10001D790(v39);
    }
    else
    {
      sub_100044904(v0[25]);
      sub_10007DE7C();
      sub_10007DE7C();
    }

    v50 = v0[59];
    log = (os_log_t)v0[46];
    v170 = v0[56];
    v52 = v0[37];
    v51 = v0[38];
    v162 = v0[36];
    v53 = v0[31];
    v173 = v0[34];
    v175 = v0[32];
    v152 = v0[30];
    v154 = v0[29];
    v166 = v0[24];
    v54 = (_QWORD *)(v0[25] + v0[53]);
    v55 = v54[3];
    v56 = v54[4];
    v163 = sub_10001C830(v54, v55);
    v160 = InferenceProviderAssetDescriptor.identifier.getter(v163);
    v58 = v57;
    v156 = InferenceProviderAssetDescriptor.version.getter(v160, v57, v59, v60, v61, v62);
    v64 = v63;
    v65 = static AssetCost.zero.getter();
    v66 = AssetCost.onDeviceMemory.getter(v65);
    (*(void (**)(uint64_t, uint64_t))(v152 + 8))(v53, v154);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v52 + 104))(v51, enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result.failure(_:), v162);
    v67 = *(void (**)(os_log_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v56 + 32);
    sub_10001FAE0();
    v67(log, v160, v58, v156, v64, v66, v51, v170, v50, v166, v55, v56);
    swift_errorRelease(v50);
    sub_10002B684();
    sub_10001E8A8();
    sub_10008BE3C(v52);
    v0[5] = v50;
    sub_10001FAE0();
    if ((swift_dynamicCast(v173, v0 + 5, v176, v175, 6) & 1) != 0)
    {
      v68 = 33;
    }
    else
    {
      v69 = v0[28];
      v70 = v0[59];
      v71 = v0[26];
      v0[6] = v70;
      swift_errorRetain(v70);
      if (!swift_dynamicCast(v69, v0 + 6, v176, v71, 6))
      {
        v82 = v0[59];
        v84 = v0[32];
        v83 = v0[33];
        sub_10008B304((unint64_t *)&qword_1000FC620, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceError, (uint64_t)&protocol conformance descriptor for InferenceError);
        swift_allocError(v84, v85, 0, 0);
        v87 = v86;
        swift_getErrorValue(v82, v0 + 7, v0 + 2);
        v88 = Error.localizedDescription.getter(v0[3], v0[4]);
        v90 = v89;
        v91 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, &type metadata for String, &protocol witness table for String);
        InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)(v88, v90, 0, 0xE000000000000000, 0, v91, 0);
        v92 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v83 + 104))(v87, enum case for InferenceError.loadFailed(_:), v84);
        swift_willThrow(v92, v93, v94, v95, v96, v97, v98, v99);
        sub_10002B88C();
        swift_errorRelease(v82);
        goto LABEL_15;
      }
      v68 = 27;
    }
    v72 = sub_10002BC38(v0[v68]);
    v73 = v0[56];
    swift_willThrow(v72, v74, v75, v76, v77, v78, v79, v80);
    v81 = swift_release(v73);
LABEL_15:
    (*(void (**)(_QWORD, _QWORD, __n128))(v0[45] + 8))(v0[46], v0[44], v81);
    sub_10001E330();
    sub_10001EAC8();
    sub_10001E490();
    sub_10002B504();
    sub_10002B528();
    sub_10002B4C4();
    sub_10002B70C();
    sub_10002BDF0();
    sub_10001D938();
    sub_10008C330();
    v100 = (uint64_t (*)(void))v0[1];
    return v100();
  }
  v7 = v0[25];
  swift_errorRelease(v0[59]);
  v8 = sub_10008BC60(v7);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  v11 = &loc_1000CB000;
  if (sub_1000447E0(v9))
  {
    sub_10008BFFC();
    v12 = v0[25];
    v14 = (_QWORD *)(v12 + v13);
    v149 = (uint64_t)(v0 + 8);
    v15 = sub_10001D8D4(22);
    v171 = sub_10001D8D4(64);
    v177[0] = v171;
    *(_DWORD *)v15 = 136315394;
    v16 = sub_10007D478();
    sub_10008B304(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v16, v17);
    sub_10008C0D8(v18, v19);
    v0[14] = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 14, v164);
    sub_10001E034();
    sub_10001EBB0(v12);
    *(_WORD *)(v15 + 12) = 2080;
    sub_10001C830(v14, v14[3]);
    sub_10008C1D0();
    sub_10008B304(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
    sub_10008BDC8(v21, v21);
    v23 = v22;
    v24 = v168(v1);
    sub_10008BD48(v24, v25, v177);
    v0[15] = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v164, v0 + 16);
    v27 = v23;
    v11 = &loc_1000CB000;
    swift_bridgeObjectRelease(v27);
    sub_10001EBB0(v12);
    sub_10002B4A0((void *)&_mh_execute_header, v9, v10, "Asset %s already loaded into %s", (uint8_t *)v15);
    sub_10007DBD8();
    sub_10001D790(v171);
    v28 = v15;
    v3 = (uint64_t)(v0 + 8);
    sub_10001D790(v28);
  }
  else
  {
    sub_100044904(v0[25]);
  }

  sub_10002BC38(v0[33]);
  swift_errorRelease(v0[8]);
  v101 = sub_10008BC60(v0[25]);
  v102 = Logger.logObject.getter(v101);
  v103 = static os_log_type_t.default.getter();
  if (sub_1000447E0(v102))
  {
    sub_10008BFFC();
    v104 = v0[25];
    v106 = (_QWORD *)(v104 + v105);
    v107 = sub_10001D8D4(22);
    v174 = sub_10001D8D4(64);
    v177[0] = v174;
    *(_DWORD *)v107 = *((_QWORD *)v11 + 54);
    sub_10007D478();
    sub_10008B304(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
    v109 = sub_10007E0E8(v108);
    sub_10008C0D8(v109, v110);
    v0[12] = v111;
    v3 = v164;
    sub_10007FF40((uint64_t)(v0 + 12), v164);
    sub_10001E034();
    sub_10001EBB0(v104);
    *(_WORD *)(v107 + 12) = 2080;
    v113 = v106[3];
    v112 = v106[4];
    sub_10008C270(v106);
    (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v113, v112);
    sub_10008B304(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
    sub_10008BF74(v114, v114);
    v11 = v115;
    v116 = v168(v1);
    sub_10008BD48(v116, v117, v177);
    v0[13] = v118;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v164, v0 + 14);
    sub_10001EADC();
    sub_10001EBB0(v104);
    sub_10002B4A0((void *)&_mh_execute_header, v102, v103, "Finished loading asset %s into %s", (uint8_t *)v107);
    sub_10007DBD8();
    sub_10001D790(v174);
    sub_10001D790(v107);
  }
  else
  {
    sub_100044904(v0[25]);
  }

  sub_10008BBEC();
  sub_10008C1F8();
  v119 = sub_10008BE4C();
  sub_10008C0CC(v119, v120, v121, v122, v123, v124);
  sub_10008C34C();
  v125 = sub_10008C100(v3, enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result.success(_:), *((uint64_t (**)(uint64_t, uint64_t, uint64_t))v11 + 13), v134, v136, v138, v140, v142, v144, v146, v149);
  sub_10008BBA8(v125, v126, v127, v128, v129, v130, v131, v132, v135, v137, v139, v141, v143, v145, v147, v150, v151, v153, v155,
    v157);
  sub_10001DA38();
  sub_10001D9C8();
  sub_10001E8A8();
  sub_10008BE3C(v148);
  sub_10008BC68(v158);
  swift_task_dealloc();
  sub_10001D938();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10002B528();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10008C330();
  v100 = (uint64_t (*)(void))sub_10001E5D0();
  return v100();
}

uint64_t sub_100084450(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 40) = a2;
  *(_QWORD *)(v3 + 48) = v2;
  return sub_10001D948((uint64_t)sub_100084468, a1);
}

uint64_t sub_100084468()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48) + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  sub_10001E26C(v2, v0 + 16);
  v3 = sub_10007DCE8();
  v4 = *(void (**)(uint64_t))(*(_QWORD *)(v3 - 8) + 24);
  v5 = sub_100044984();
  v4(v5);
  v6 = sub_10007D9D8();
  ((void (*)(uint64_t, uint64_t, uint64_t))v4)(v2 + *(int *)(v6 + 20), v1, v3);
  v7 = *(int *)(v6 + 28);
  v8 = *(_QWORD *)(v2 + v7);
  *(_QWORD *)(v2 + v7) = 0;
  sub_10007F558();
  v9 = swift_release(v8);
  return (*(uint64_t (**)(__n128))(v0 + 8))(v9);
}

uint64_t sub_100084510@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, NSObject *a8@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t State;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  os_log_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t result;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(char *, char *, uint64_t);
  uint64_t v125;
  uint64_t v126;
  NSObject *v127;
  os_log_type_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  void (*v138)(char *, uint64_t);
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  os_log_t v158;
  uint64_t v159;
  void (*v160)(char *, uint64_t);
  uint64_t v161;
  void (*v162)(char *, uint64_t);
  uint64_t v163;
  void (*v164)(char *, uint64_t, uint64_t);
  char *v165;
  uint64_t v166;
  char v167;
  void (*v168)(char *, uint64_t);
  uint64_t v169;
  uint64_t v170;
  NSObject *v171;
  os_log_type_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t (*v192)(char *, uint64_t);
  uint64_t v193;
  void (*v194)(uint64_t, char *, uint64_t);
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  void (*v208)(char *, char *, uint64_t);
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void (*v223)(uint64_t, uint64_t);
  char *v224;
  uint64_t v225;
  uint64_t v226;
  objc_class *v227;
  objc_class *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  os_log_t v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  void (*v240)(char *, uint64_t, uint64_t);
  char *v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  os_log_t v261;
  uint64_t v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  char *v266;
  void (*v267)(char *, uint64_t);
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char v271[8];
  uint64_t v272;

  v249 = a7;
  v247 = a6;
  v246 = a5;
  v245 = a4;
  v252 = a3;
  v269 = a2;
  v261 = a8;
  v9 = sub_100002F78(&qword_1000FD7E0);
  v250 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v251 = v10;
  v260 = (uint64_t)&v232 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100002F78(&qword_1000FD820);
  v248 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v243 = v12;
  v259 = (uint64_t)&v232 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100002F78(&qword_1000FB920);
  v244 = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(v244 + 64);
  __chkstk_darwin(v13);
  v257 = (uint64_t)&v232 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason(0);
  v255 = *(_QWORD *)(v15 - 8);
  v256 = v15;
  v16 = *(_QWORD *)(v255 + 64);
  __chkstk_darwin(v15);
  v254 = (char *)&v232 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100002F78(&qword_1000FB230);
  __chkstk_darwin(v17);
  v258 = (uint64_t)&v232 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for InferenceProviderDescriptor(0);
  v264 = *(_QWORD *)(v19 - 8);
  v265 = v19;
  __chkstk_darwin(v19);
  v263 = (char *)&v232 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for LoadState(0);
  v267 = *(void (**)(char *, uint64_t))(State - 8);
  v268 = State;
  v22 = *((_QWORD *)v267 + 8);
  v23 = __chkstk_darwin(State);
  v24 = (char *)&v232 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v232 - v26;
  v28 = __chkstk_darwin(v25);
  v253 = (char *)&v232 - v29;
  v30 = __chkstk_darwin(v28);
  v32 = (char *)&v232 - v31;
  v33 = __chkstk_darwin(v30);
  v266 = (char *)&v232 - v34;
  __chkstk_darwin(v33);
  v36 = (char *)&v232 - v35;
  v37 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  if ((*(_BYTE *)(a1 + *(int *)(v37 + 52)) & 1) != 0)
  {
    if (qword_1000FB110 != -1)
      swift_once(&qword_1000FB110, sub_100080FE0);
    v38 = type metadata accessor for Logger(0);
    sub_100002FF8(v38, (uint64_t)qword_1000FD9C8);
    v39 = v269;
    v40 = swift_retain_n(v269, 2);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = swift_slowAlloc(12, -1);
      v44 = swift_slowAlloc(32, -1);
      *(_DWORD *)v43 = 136315138;
      v272 = v44;
      v45 = type metadata accessor for InferenceProviderAssetDescriptor(0);
      sub_10008B304(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
      v47 = dispatch thunk of CustomStringConvertible.description.getter(v45, v46);
      v49 = v48;
      sub_1000102C0(v47, v48, &v272);
      v270 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v270, v271, v43 + 4);
      swift_release_n(v39, 2);
      swift_bridgeObjectRelease(v49);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Tried to load invalidated asset: %s", (uint8_t *)v43, 0xCu);
      swift_arrayDestroy(v44, 1);
      v51 = v44;
LABEL_11:
      swift_slowDealloc(v51, -1, -1);
      swift_slowDealloc(v43, -1, -1);

LABEL_20:
      v109 = type metadata accessor for ModelManagerError(0);
      sub_10008B304((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError, (uint64_t)&protocol conformance descriptor for ModelManagerError);
      swift_allocError(v109, v110, 0, 0);
      v112 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v109 - 8) + 104))(v111, enum case for ModelManagerError.internalError(_:), v109);
      return swift_willThrow(v112, v113, v114, v115, v116, v117, v118, v119, v232, v233, v234, v235, v236, v237);
    }

    v75 = v39;
    v76 = 2;
    goto LABEL_19;
  }
  v52 = v37;
  v53 = *(int *)(v37 + 28);
  if (*(_QWORD *)(a1 + v53))
  {
    if (qword_1000FB110 != -1)
      swift_once(&qword_1000FB110, sub_100080FE0);
    v54 = type metadata accessor for Logger(0);
    sub_100002FF8(v54, (uint64_t)qword_1000FD9C8);
    v55 = v269;
    v56 = swift_retain_n(v269, 4);
    v41 = Logger.logObject.getter(v56);
    v57 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v41, v57))
    {
      v43 = swift_slowAlloc(22, -1);
      v268 = swift_slowAlloc(64, -1);
      v272 = v268;
      *(_DWORD *)v43 = 136315394;
      v58 = type metadata accessor for InferenceProviderAssetDescriptor(0);
      sub_10008B304(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
      v60 = dispatch thunk of CustomStringConvertible.description.getter(v58, v59);
      v62 = v61;
      sub_1000102C0(v60, v61, &v272);
      v270 = v63;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v270, v271, v43 + 4);
      swift_release_n(v55, 2);
      swift_bridgeObjectRelease(v62);
      *(_WORD *)(v43 + 12) = 2080;
      v64 = (_QWORD *)(v55 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
      v65 = *(_QWORD *)(v55 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
      v66 = *(_QWORD *)(v55 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
      sub_10001C830(v64, v65);
      v67 = v263;
      (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v65, v66);
      sub_10008B304(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
      v68 = v265;
      v70 = dispatch thunk of CustomStringConvertible.description.getter(v265, v69);
      v72 = v71;
      (*(void (**)(char *, uint64_t))(v264 + 8))(v67, v68);
      sub_1000102C0(v70, v72, &v272);
      v270 = v73;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v270, v271, v43 + 14);
      swift_release_n(v269, 2);
      swift_bridgeObjectRelease(v72);
      _os_log_impl((void *)&_mh_execute_header, v41, v57, "loadIfNeccesary called with pending transition task for %s with %s", (uint8_t *)v43, 0x16u);
      v74 = v268;
      swift_arrayDestroy(v268, 2);
      v51 = v74;
      goto LABEL_11;
    }

    v75 = v55;
    v76 = 4;
LABEL_19:
    swift_release_n(v75, v76);
    goto LABEL_20;
  }
  v237 = v14;
  v238 = v53;
  v77 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v267 + 2);
  v242 = v36;
  v77(v36, a1, v268);
  v78 = *(int *)(v52 + 20);
  v239 = a1;
  v79 = (uint64_t)v266;
  v241 = (char *)(a1 + v78);
  v80 = (uint64_t)v242;
  v240 = v77;
  ((void (*)(char *))v77)(v266);
  if ((sub_1000B2390(v80, v79) & 1) != 0)
  {
    if (qword_1000FB110 != -1)
      swift_once(&qword_1000FB110, sub_100080FE0);
    v81 = type metadata accessor for Logger(0);
    v82 = sub_100002FF8(v81, (uint64_t)qword_1000FD9C8);
    v83 = v269;
    v84 = swift_retain_n(v269, 4);
    v236 = v82;
    v85 = Logger.logObject.getter(v84);
    v86 = static os_log_type_t.default.getter();
    v87 = v32;
    if (os_log_type_enabled(v85, v86))
    {
      v88 = swift_slowAlloc(22, -1);
      v235 = swift_slowAlloc(64, -1);
      v272 = v235;
      *(_DWORD *)v88 = 136315394;
      v233 = v88 + 4;
      v232 = v85;
      v89 = type metadata accessor for InferenceProviderAssetDescriptor(0);
      sub_10008B304(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
      v91 = dispatch thunk of CustomStringConvertible.description.getter(v89, v90);
      v93 = v92;
      sub_1000102C0(v91, v92, &v272);
      v270 = v94;
      v234 = v271;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v270, v271, v233);
      swift_release_n(v83, 2);
      swift_bridgeObjectRelease(v93);
      *(_WORD *)(v88 + 12) = 2080;
      v233 = v88 + 14;
      v95 = (_QWORD *)(v83 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
      v96 = *(_QWORD *)(v83 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
      v97 = *(_QWORD *)(v83 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
      sub_10001C830(v95, v96);
      v98 = v87;
      v99 = v263;
      (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v96, v97);
      sub_10008B304(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
      LOBYTE(v97) = v86;
      v100 = v265;
      v102 = dispatch thunk of CustomStringConvertible.description.getter(v265, v101);
      v104 = v103;
      v105 = v99;
      v87 = v98;
      (*(void (**)(char *, uint64_t))(v264 + 8))(v105, v100);
      sub_1000102C0(v102, v104, &v272);
      v270 = v106;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v270, v234, v233);
      swift_release_n(v269, 2);
      swift_bridgeObjectRelease(v104);
      v107 = v232;
      _os_log_impl((void *)&_mh_execute_header, v232, (os_log_type_t)v97, "loadIfNecessary entering for asset %s with %s", (uint8_t *)v88, 0x16u);
      v108 = v235;
      swift_arrayDestroy(v235, 2);
      swift_slowDealloc(v108, -1, -1);
      swift_slowDealloc(v88, -1, -1);

    }
    else
    {

      swift_release_n(v83, 4);
    }
    v161 = enum case for LoadState.loaded(_:);
    v162 = v267;
    v163 = v268;
    v164 = (void (*)(char *, _QWORD, uint64_t))*((_QWORD *)v267 + 13);
    v164(v87, enum case for LoadState.loaded(_:), v268);
    sub_10008B304(&qword_1000FCD38, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState, (uint64_t)&protocol conformance descriptor for LoadState);
    v165 = v242;
    v167 = dispatch thunk of static Equatable.== infix(_:_:)(v242, v87, v163, v166);
    v168 = (void (*)(char *, uint64_t))*((_QWORD *)v162 + 1);
    v168(v87, v163);
    if ((v167 & 1) != 0)
    {
      v169 = v269;
      v170 = swift_retain_n(v269, 4);
      v171 = Logger.logObject.getter(v170);
      v172 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v171, v172))
      {
        v173 = swift_slowAlloc(22, -1);
        v267 = v168;
        v174 = v173;
        v260 = swift_slowAlloc(64, -1);
        v272 = v260;
        *(_DWORD *)v174 = 136315394;
        v175 = type metadata accessor for InferenceProviderAssetDescriptor(0);
        sub_10008B304(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
        v177 = dispatch thunk of CustomStringConvertible.description.getter(v175, v176);
        v179 = v178;
        sub_1000102C0(v177, v178, &v272);
        v270 = v180;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v270, v271, v174 + 4);
        swift_release_n(v169, 2);
        swift_bridgeObjectRelease(v179);
        *(_WORD *)(v174 + 12) = 2080;
        v181 = (_QWORD *)(v169 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
        v182 = *(_QWORD *)(v169
                         + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection
                         + 24);
        v183 = *(_QWORD *)(v169
                         + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection
                         + 32);
        sub_10001C830(v181, v182);
        v184 = v263;
        (*(void (**)(uint64_t, uint64_t))(v183 + 8))(v182, v183);
        sub_10008B304(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
        v185 = v265;
        v187 = dispatch thunk of CustomStringConvertible.description.getter(v265, v186);
        v189 = v188;
        (*(void (**)(char *, uint64_t))(v264 + 8))(v184, v185);
        sub_1000102C0(v187, v189, &v272);
        v270 = v190;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v270, v271, v174 + 14);
        swift_release_n(v269, 2);
        swift_bridgeObjectRelease(v189);
        _os_log_impl((void *)&_mh_execute_header, v171, v172, "Not loading asset %s into %s: already loaded", (uint8_t *)v174, 0x16u);
        v191 = v260;
        swift_arrayDestroy(v260, 2);
        swift_slowDealloc(v191, -1, -1);
        swift_slowDealloc(v174, -1, -1);

        v192 = (uint64_t (*)(char *, uint64_t))v267;
        v193 = v268;
        v267(v266, v268);
        result = v192(v242, v193);
      }
      else
      {
        swift_release_n(v169, 4);

        v231 = v268;
        v168(v266, v268);
        result = ((uint64_t (*)(char *, uint64_t))v168)(v242, v231);
      }
      v261->isa = 0;
    }
    else
    {
      v207 = v165;
      v208 = (void (*)(char *, char *, uint64_t))v240;
      v240(v87, (uint64_t)v207, v163);
      v209 = v241;
      v168(v241, v163);
      v164(v209, v161, v163);
      v210 = type metadata accessor for TaskPriority(0);
      sub_100005630(v258, 1, 1, v210);
      v211 = v255;
      (*(void (**)(char *, uint64_t, uint64_t))(v255 + 16))(v254, v245, v256);
      sub_10008B6B4(v246, v257, &qword_1000FB920);
      sub_10008B6B4(v247, v259, &qword_1000FD820);
      v208(v253, v87, v163);
      sub_10008B6B4(v249, v260, &qword_1000FD7E0);
      sub_10008B304(&qword_1000FB728, type metadata accessor for InferenceProviderAssetManager, (uint64_t)&unk_1000CC408);
      v213 = v212;
      v214 = *(unsigned __int8 *)(v211 + 80);
      v215 = (v214 + 48) & ~v214;
      v216 = *(unsigned __int8 *)(v244 + 80);
      v217 = (v16 + v216 + v215) & ~v216;
      v218 = *(unsigned __int8 *)(v248 + 80);
      v219 = (v237 + v218 + v217) & ~v218;
      v220 = *((unsigned __int8 *)v267 + 80);
      v221 = (v243 + v220 + v219) & ~v220;
      v222 = *(unsigned __int8 *)(v250 + 80);
      v264 = (v22 + v222 + v221) & ~v222;
      v223 = (void (*)(uint64_t, uint64_t))v168;
      v224 = (char *)swift_allocObject(&unk_1000F4118, v264 + v251, v214 | v216 | v218 | v220 | v222 | 7);
      v265 = (uint64_t)v87;
      v225 = v252;
      *((_QWORD *)v224 + 2) = v252;
      *((_QWORD *)v224 + 3) = v213;
      v226 = v269;
      *((_QWORD *)v224 + 4) = v269;
      *((_QWORD *)v224 + 5) = v225;
      (*(void (**)(char *, char *, uint64_t))(v255 + 32))(&v224[v215], v254, v256);
      sub_10008B88C(v257, (uint64_t)&v224[v217], &qword_1000FB920);
      sub_10008B88C(v259, (uint64_t)&v224[v219], &qword_1000FD820);
      (*((void (**)(char *, char *, uint64_t))v267 + 4))(&v224[v221], v253, v163);
      sub_10008B88C(v260, (uint64_t)&v224[v264], &qword_1000FD7E0);
      swift_retain_n(v225, 2);
      swift_retain(v226);
      sub_10000DB68(v258, (uint64_t)&unk_1000FDC18, (uint64_t)v224);
      v228 = v227;
      v223(v265, v163);
      v223((uint64_t)v266, v163);
      v223((uint64_t)v242, v163);
      v229 = v239;
      v230 = v238;
      swift_release(*(_QWORD *)(v239 + v238));
      *(_QWORD *)(v229 + v230) = v228;
      v261->isa = v228;
      return swift_retain(v228);
    }
  }
  else
  {
    if (qword_1000FB110 != -1)
      swift_once(&qword_1000FB110, sub_100080FE0);
    v121 = type metadata accessor for Logger(0);
    sub_100002FF8(v121, (uint64_t)qword_1000FD9C8);
    v122 = v80;
    v123 = v268;
    v124 = (void (*)(char *, char *, uint64_t))v240;
    v240(v27, v122, v268);
    v124(v24, v266, v123);
    v125 = v269;
    v126 = swift_retain_n(v269, 4);
    v127 = Logger.logObject.getter(v126);
    v128 = static os_log_type_t.fault.getter();
    v129 = v128;
    if (os_log_type_enabled(v127, v128))
    {
      v130 = swift_slowAlloc(42, -1);
      v261 = v127;
      v131 = v130;
      v262 = swift_slowAlloc(128, -1);
      v272 = v262;
      *(_DWORD *)v131 = 136315906;
      sub_10008B304(&qword_1000FCD48, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState, (uint64_t)&protocol conformance descriptor for LoadState);
      v133 = v132;
      LODWORD(v260) = v129;
      v134 = dispatch thunk of CustomStringConvertible.description.getter(v123, v132);
      v136 = v135;
      sub_1000102C0(v134, v135, &v272);
      v270 = v137;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v270, v271, v131 + 4);
      swift_bridgeObjectRelease(v136);
      v138 = (void (*)(char *, uint64_t))*((_QWORD *)v267 + 1);
      v138(v27, v268);
      *(_WORD *)(v131 + 12) = 2080;
      v139 = dispatch thunk of CustomStringConvertible.description.getter(v268, v133);
      v141 = v140;
      sub_1000102C0(v139, v140, &v272);
      v270 = v142;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v270, v271, v131 + 14);
      swift_bridgeObjectRelease(v141);
      v138(v24, v268);
      *(_WORD *)(v131 + 22) = 2080;
      v143 = type metadata accessor for InferenceProviderAssetDescriptor(0);
      sub_10008B304(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
      v145 = dispatch thunk of CustomStringConvertible.description.getter(v143, v144);
      v147 = v146;
      sub_1000102C0(v145, v146, &v272);
      v270 = v148;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v270, v271, v131 + 24);
      swift_release_n(v125, 2);
      swift_bridgeObjectRelease(v147);
      *(_WORD *)(v131 + 32) = 2080;
      v149 = *(_QWORD *)(v125 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
      v150 = *(_QWORD *)(v125 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
      sub_10001C830((_QWORD *)(v125 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection), v149);
      v151 = v263;
      (*(void (**)(uint64_t, uint64_t))(v150 + 8))(v149, v150);
      sub_10008B304(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
      v152 = v265;
      v154 = dispatch thunk of CustomStringConvertible.description.getter(v265, v153);
      v156 = v155;
      (*(void (**)(char *, uint64_t))(v264 + 8))(v151, v152);
      sub_1000102C0(v154, v156, &v272);
      v270 = v157;
      v123 = v268;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v270, v271, v131 + 34);
      swift_release_n(v125, 2);
      swift_bridgeObjectRelease(v156);
      v158 = v261;
      _os_log_impl((void *)&_mh_execute_header, v261, (os_log_type_t)v260, "loadIfNecessary called with unmatching states (%s != %s) for %s with %s", (uint8_t *)v131, 0x2Au);
      v159 = v262;
      swift_arrayDestroy(v262, 4);
      swift_slowDealloc(v159, -1, -1);
      v160 = v267;
      swift_slowDealloc(v131, -1, -1);

    }
    else
    {
      v160 = v267;
      v138 = (void (*)(char *, uint64_t))*((_QWORD *)v267 + 1);
      v138(v27, v123);
      v138(v24, v123);

      swift_release_n(v125, 4);
    }
    v194 = (void (*)(uint64_t, char *, uint64_t))*((_QWORD *)v160 + 3);
    v195 = v242;
    v194((uint64_t)v241, v242, v123);
    v196 = type metadata accessor for ModelManagerError(0);
    sub_10008B304((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError, (uint64_t)&protocol conformance descriptor for ModelManagerError);
    swift_allocError(v196, v197, 0, 0);
    v199 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v196 - 8) + 104))(v198, enum case for ModelManagerError.internalError(_:), v196);
    swift_willThrow(v199, v200, v201, v202, v203, v204, v205, v206, v232, v233, v234, v235, v236, v237);
    v138(v266, v123);
    return ((uint64_t (*)(char *, uint64_t))v138)(v195, v123);
  }
  return result;
}

uint64_t sub_10008592C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t State;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v8[19] = v20;
  v8[20] = v21;
  v8[17] = a7;
  v8[18] = a8;
  v8[15] = a5;
  v8[16] = a6;
  v8[14] = a4;
  v10 = type metadata accessor for InferenceProviderDescriptor(0);
  v8[21] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v8[22] = v11;
  v8[23] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for LoadState(0);
  v8[24] = State;
  v13 = *(_QWORD *)(State - 8);
  v8[25] = v13;
  v8[26] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  v8[27] = v14;
  v15 = (*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[28] = swift_task_alloc(v15);
  v8[29] = swift_task_alloc(v15);
  v16 = type metadata accessor for Date(0);
  v8[30] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v8[31] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[32] = swift_task_alloc(v18);
  v8[33] = swift_task_alloc(v18);
  return swift_task_switch(sub_100085A38, a5, 0);
}

uint64_t sub_100085A38()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = v0[32];
  v1 = v0[33];
  v3 = v0[30];
  v4 = v0[31];
  v6 = v0[28];
  v5 = v0[29];
  v7 = v0[27];
  v8 = v0[14];
  v9 = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  v0[34] = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  v10 = v8 + v9;
  sub_10002B308(v8 + v9, (uint64_t)(v0 + 2), 0);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v10 + *(int *)(v7 + 32), v3);
  static Date.now.getter(v11);
  sub_10008C218(v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 40))(v5 + *(int *)(v7 + 32), v2, v3);
  sub_10008B340(v5, v6);
  sub_10001E26C(v10, (uint64_t)(v0 + 5));
  sub_10008C288();
  v12 = sub_10007F558();
  sub_10008C2FC(v12, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  v13 = (_QWORD *)swift_task_alloc(dword_1000FDC24);
  v0[35] = v13;
  *v13 = v0;
  v13[1] = sub_100085B44;
  sub_10002BD0C(v0[15]);
  sub_10002B574();
  return sub_100082E9C(v14, v15, v16, v17, v18, v19);
}

uint64_t sub_100085B44()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  sub_10001E0D8();
  *v3 = *v2;
  *(_QWORD *)(v0 + 288) = v1;
  swift_task_dealloc();
  return sub_10001D6DC();
}

uint64_t sub_100085B9C()
{
  uint64_t *v0;
  uint64_t **v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0[25] + 104))(v0[26], enum case for LoadState.loaded(_:), v0[24]);
  v1 = (uint64_t **)swift_task_alloc(dword_1000FDBFC);
  v0[37] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_100085C04;
  v2 = sub_10002BD0C(v0[15]);
  return sub_100084450(v2, v3);
}

uint64_t sub_100085C04()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  sub_10001DB38();
  v2 = v0[25];
  v1 = v0[26];
  sub_10001D680(v0[37]);
  sub_10007E7EC(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  return sub_10001D6DC();
}

uint64_t sub_100085C60()
{
  _QWORD *v0;
  uint64_t (*v1)(void);

  (*(void (**)(_QWORD, _QWORD))(v0[31] + 8))(v0[33], v0[30]);
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  v1 = (uint64_t (*)(void))sub_10001E5D0();
  return v1();
}

uint64_t sub_100085CD0()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 304));
  sub_10001D7B8();
  return sub_10001D674();
}

void sub_100085D08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(v8 + 264);
  v10 = *(_QWORD *)(v8 + 248);
  swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_10002B7F8(v9, *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
  sub_10001E330();
  sub_10001D938();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  sub_10002B70C();
  sub_10002B574();
  __asm { BR              X0 }
}

uint64_t sub_100085D88()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;

  v1 = v0[33];
  v2 = v0[30];
  v3 = v0[31];
  v5 = v0[28];
  v4 = v0[29];
  v6 = v0[27];
  v7 = v0[14] + v0[34];
  sub_10008B340(v7, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 24))(v4 + *(int *)(v6 + 32), v1, v2);
  sub_10008B340(v4, v5);
  sub_10001E26C(v7, (uint64_t)(v0 + 8));
  sub_10008C288();
  sub_10007F558();
  sub_10002ACC4(v4, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  if (qword_1000FB110 != -1)
    swift_once(&qword_1000FB110, sub_100080FE0);
  v8 = v0[36];
  v9 = v0[14];
  v10 = sub_10001DD64();
  v11 = sub_100002FF8(v10, (uint64_t)qword_1000FD9C8);
  sub_10001D834(v9);
  swift_errorRetain(v8);
  sub_10001D7EC();
  swift_errorRetain(v8);
  v12 = sub_10001D7EC();
  v13 = v11;
  Logger.logObject.getter(v12);
  v14 = sub_10001E9D0();
  if (sub_10001E6C4(v14))
  {
    v15 = v0[23];
    v35 = v0[22];
    v34 = v0[21];
    v16 = v0[14];
    v17 = (_DWORD *)sub_10001D8D4(32);
    v36 = (_QWORD *)sub_10001D8D4(8);
    v37 = sub_10001D8D4(64);
    v38 = v37;
    *v17 = 136315650;
    sub_10007D478();
    sub_10008B304(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
    v19 = sub_10008BFC4(v18, v18);
    sub_1000102C0(v19, v20, &v38);
    v0[11] = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 11, v0 + 12);
    sub_10001EBB0(v16);
    sub_10001E034();
    sub_10008BDB8();
    v33 = v9;
    v23 = *(_QWORD *)(v16 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
    v22 = *(_QWORD *)(v16 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
    sub_10001C830((_QWORD *)(v16 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection), v23);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v22);
    sub_10008B304(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
    sub_10008BF74(v24, v24);
    v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8))(v15, v34);
    sub_10008BD48(v25, v26, &v38);
    v0[12] = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 12, v0 + 13);
    sub_10001EBB0(v16);
    sub_10001EADC();
    sub_10008BD28();
    v28 = sub_10008C294();
    v0[13] = v28;
    sub_10002B3F0((uint64_t)(v0 + 13), (uint64_t)(v0 + 14));
    *v36 = v28;
    sub_10008BBE4();
    sub_10008BBE4();
    sub_10008C0C0((void *)&_mh_execute_header, v13, v33, "Failed to load asset %s into %s: %@");
    sub_100002F78(&qword_1000FB8E0);
    sub_10001DBB8((uint64_t)v36);
    sub_10001D790((uint64_t)v36);
    sub_10002BA20(v37);
    sub_10001D790(v37);
    sub_10001D790((uint64_t)v17);
  }
  else
  {
    sub_100044904(v0[14]);
    sub_10008BBE4();
    sub_10008BBE4();
  }

  v29 = (_QWORD *)swift_task_alloc(dword_1000FDBFC);
  v0[38] = v29;
  *v29 = v0;
  v29[1] = sub_100085CD0;
  v30 = sub_10002BD0C(v0[15]);
  return sub_100084450(v30, v31);
}

uint64_t sub_10008610C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, NSObject *a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t result;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(char *, char *, uint64_t);
  uint64_t v113;
  uint64_t v114;
  NSObject *v115;
  os_log_type_t v116;
  int v117;
  _BOOL4 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  void (*v128)(char *, uint64_t);
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  char *v147;
  uint64_t v148;
  os_log_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  NSObject *v167;
  os_log_type_t v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  os_log_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void (*v198)(char *, uint64_t);
  uint64_t v199;
  uint64_t v200;
  void (*v201)(char *, uint64_t, uint64_t);
  char *v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  char v206;
  void (*v207)(char *, uint64_t);
  uint64_t v208;
  uint64_t v209;
  NSObject *v210;
  os_log_type_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  void (*v231)(char *, char *, uint64_t);
  char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  char *v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  objc_class *v249;
  objc_class *v250;
  void (*v251)(char *, uint64_t);
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t (*v255)(char *, uint64_t);
  uint64_t v256;
  char *v257;
  os_log_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  void (*v262)(char *, uint64_t);
  uint64_t v263;
  uint64_t v264;
  void (*v265)(char *, uint64_t, uint64_t);
  char *v266;
  char *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  os_log_t v279;
  uint64_t v280;
  char *v281;
  char *v282;
  uint64_t v283;
  uint64_t v284;
  char *v285;
  uint64_t State;
  uint64_t v287;
  uint64_t v288;
  char v289[8];
  char *v290;

  v279 = a6;
  v272 = a5;
  v269 = a3;
  v270 = a4;
  v287 = a2;
  v7 = sub_100002F78(&qword_1000FD7E0);
  v271 = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(v271 + 64);
  __chkstk_darwin(v7);
  v278 = (uint64_t)&v256 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v277 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason(0);
  v275 = *(_QWORD *)(v277 - 8);
  v9 = *(_QWORD *)(v275 + 64);
  __chkstk_darwin(v277);
  v274 = (char *)&v256 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100002F78(&qword_1000FB230);
  __chkstk_darwin(v10);
  v276 = (uint64_t)&v256 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for InferenceProviderDescriptor(0);
  v283 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v282 = (char *)&v256 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for LoadState(0);
  v284 = *(_QWORD *)(State - 8);
  v14 = *(_QWORD *)(v284 + 64);
  v15 = __chkstk_darwin(State);
  v16 = (char *)&v256 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v256 - v18;
  v20 = __chkstk_darwin(v17);
  v273 = (char *)&v256 - v21;
  v22 = __chkstk_darwin(v20);
  v281 = (char *)&v256 - v23;
  v24 = __chkstk_darwin(v22);
  v285 = (char *)&v256 - v25;
  __chkstk_darwin(v24);
  v27 = (char *)&v256 - v26;
  v28 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  if ((*(_BYTE *)(a1 + *(int *)(v28 + 52)) & 1) != 0)
  {
    if (qword_1000FB110 != -1)
      swift_once(&qword_1000FB110, sub_100080FE0);
    v29 = type metadata accessor for Logger(0);
    sub_100002FF8(v29, (uint64_t)qword_1000FD9C8);
    v30 = v287;
    v31 = swift_retain_n(v287, 2);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = swift_slowAlloc(12, -1);
      v35 = swift_slowAlloc(32, -1);
      *(_DWORD *)v34 = 136315138;
      v290 = (char *)v35;
      v36 = type metadata accessor for InferenceProviderAssetDescriptor(0);
      sub_10008B304(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
      v38 = dispatch thunk of CustomStringConvertible.description.getter(v36, v37);
      v40 = v39;
      sub_1000102C0(v38, v39, (uint64_t *)&v290);
      v288 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v288, v289, v34 + 4);
      swift_release_n(v30, 2);
      swift_bridgeObjectRelease(v40);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Tried to unload invalidated asset: %s", (uint8_t *)v34, 0xCu);
      swift_arrayDestroy(v35, 1);
      v42 = v35;
LABEL_11:
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v34, -1, -1);

LABEL_21:
      v98 = type metadata accessor for ModelManagerError(0);
      sub_10008B304((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError, (uint64_t)&protocol conformance descriptor for ModelManagerError);
      swift_allocError(v98, v99, 0, 0);
      v101 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v98 - 8) + 104))(v100, enum case for ModelManagerError.internalError(_:), v98);
      return swift_willThrow(v101, v102, v103, v104, v105, v106, v107, v108, v256, v257, v258, v259, v260, v261);
    }

    v67 = v30;
    v68 = 2;
    goto LABEL_20;
  }
  v43 = v28;
  v44 = *(int *)(v28 + 28);
  v45 = *(_QWORD *)(a1 + v44);
  v268 = v12;
  if (v45)
  {
    if (qword_1000FB110 != -1)
      swift_once(&qword_1000FB110, sub_100080FE0);
    v46 = type metadata accessor for Logger(0);
    sub_100002FF8(v46, (uint64_t)qword_1000FD9C8);
    v47 = v287;
    v48 = swift_retain_n(v287, 4);
    v32 = Logger.logObject.getter(v48);
    v49 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v32, v49))
    {
      v34 = swift_slowAlloc(22, -1);
      State = swift_slowAlloc(64, -1);
      v290 = (char *)State;
      *(_DWORD *)v34 = 136315394;
      v50 = type metadata accessor for InferenceProviderAssetDescriptor(0);
      sub_10008B304(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
      v52 = dispatch thunk of CustomStringConvertible.description.getter(v50, v51);
      v54 = v53;
      sub_1000102C0(v52, v53, (uint64_t *)&v290);
      v288 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v288, v289, v34 + 4);
      swift_release_n(v47, 2);
      swift_bridgeObjectRelease(v54);
      *(_WORD *)(v34 + 12) = 2080;
      v56 = (_QWORD *)(v47 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
      v57 = *(_QWORD *)(v47 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
      v58 = *(_QWORD *)(v47 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
      sub_10001C830(v56, v57);
      v59 = v282;
      (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v57, v58);
      sub_10008B304(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
      v60 = v268;
      v62 = dispatch thunk of CustomStringConvertible.description.getter(v268, v61);
      v64 = v63;
      (*(void (**)(char *, uint64_t))(v283 + 8))(v59, v60);
      sub_1000102C0(v62, v64, (uint64_t *)&v290);
      v288 = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v288, v289, v34 + 14);
      swift_release_n(v287, 2);
      swift_bridgeObjectRelease(v64);
      _os_log_impl((void *)&_mh_execute_header, v32, v49, "unloadIfNecessary called with pending transition task for %s with %s", (uint8_t *)v34, 0x16u);
      v66 = State;
      swift_arrayDestroy(State, 2);
      v42 = v66;
      goto LABEL_11;
    }

    v67 = v47;
    v68 = 4;
LABEL_20:
    swift_release_n(v67, v68);
    goto LABEL_21;
  }
  v263 = v8;
  v264 = v44;
  v69 = a1;
  v70 = *(void (**)(char *, uint64_t, uint64_t))(v284 + 16);
  v267 = v27;
  v70(v27, v69, State);
  v71 = (uint64_t)v285;
  v266 = (char *)(v69 + *(int *)(v43 + 20));
  v72 = (uint64_t)v267;
  v265 = v70;
  ((void (*)(char *))v70)(v285);
  if ((sub_1000B2390(v72, v71) & 1) != 0)
  {
    v73 = *(_QWORD *)(*(_QWORD *)(v69 + *(int *)(v43 + 48)) + 16);
    if (v73)
    {
      if (qword_1000FB110 != -1)
        swift_once(&qword_1000FB110, sub_100080FE0);
      v74 = type metadata accessor for Logger(0);
      sub_100002FF8(v74, (uint64_t)qword_1000FD9C8);
      v75 = v287;
      v76 = swift_retain_n(v287, 4);
      v77 = Logger.logObject.getter(v76);
      v78 = static os_log_type_t.default.getter();
      v79 = v78;
      if (os_log_type_enabled(v77, v78))
      {
        v80 = swift_slowAlloc(32, -1);
        v281 = (char *)swift_slowAlloc(64, -1);
        v290 = v281;
        *(_DWORD *)v80 = 136315650;
        LODWORD(v280) = v79;
        v81 = type metadata accessor for InferenceProviderAssetDescriptor(0);
        sub_10008B304(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
        v83 = dispatch thunk of CustomStringConvertible.description.getter(v81, v82);
        v85 = v84;
        sub_1000102C0(v83, v84, (uint64_t *)&v290);
        v288 = v86;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v288, v289, v80 + 4);
        swift_release_n(v75, 2);
        swift_bridgeObjectRelease(v85);
        *(_WORD *)(v80 + 12) = 2080;
        v87 = (_QWORD *)(v75 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
        v88 = *(_QWORD *)(v75 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
        v89 = *(_QWORD *)(v75 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
        sub_10001C830(v87, v88);
        v90 = v282;
        (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v88, v89);
        sub_10008B304(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
        v91 = v268;
        v93 = dispatch thunk of CustomStringConvertible.description.getter(v268, v92);
        v95 = v94;
        (*(void (**)(char *, uint64_t))(v283 + 8))(v90, v91);
        sub_1000102C0(v93, v95, (uint64_t *)&v290);
        v288 = v96;
        v72 = (uint64_t)v267;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v288, v289, v80 + 14);
        swift_release_n(v287, 2);
        swift_bridgeObjectRelease(v95);
        *(_WORD *)(v80 + 22) = 2048;
        v288 = v73;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v288, v289, v80 + 24);
        _os_log_impl((void *)&_mh_execute_header, v77, (os_log_type_t)v280, "Not unloading asset %s from %s: in use by %ld requests", (uint8_t *)v80, 0x20u);
        v97 = v281;
        swift_arrayDestroy(v281, 2);
        swift_slowDealloc(v97, -1, -1);
        swift_slowDealloc(v80, -1, -1);

      }
      else
      {

        swift_release_n(v75, 4);
      }
      v188 = State;
      v189 = sub_10007BE3C();
      v190 = swift_allocError(&type metadata for InferenceProviderAssetManagerInternalError, v189, 0, 0);
      *v191 = 0;
      v191[1] = 0;
      swift_willThrow(v190, v191, v192, v193, v194, v195, v196, v197, v256, v257, v258, v259, v260, v261);
      v198 = *(void (**)(char *, uint64_t))(v284 + 8);
      v198(v285, v188);
      return ((uint64_t (*)(uint64_t, uint64_t))v198)(v72, v188);
    }
    else
    {
      v260 = v69;
      v162 = v268;
      if (qword_1000FB110 != -1)
        swift_once(&qword_1000FB110, sub_100080FE0);
      v163 = type metadata accessor for Logger(0);
      v164 = sub_100002FF8(v163, (uint64_t)qword_1000FD9C8);
      v165 = v287;
      v166 = swift_retain_n(v287, 4);
      v261 = v164;
      v167 = Logger.logObject.getter(v166);
      v168 = static os_log_type_t.default.getter();
      v169 = v168;
      if (os_log_type_enabled(v167, v168))
      {
        v170 = swift_slowAlloc(22, -1);
        LODWORD(v262) = v169;
        v171 = v170;
        v259 = swift_slowAlloc(64, -1);
        v290 = (char *)v259;
        *(_DWORD *)v171 = 136315394;
        v258 = v167;
        v172 = type metadata accessor for InferenceProviderAssetDescriptor(0);
        sub_10008B304(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
        v174 = dispatch thunk of CustomStringConvertible.description.getter(v172, v173);
        v176 = v175;
        sub_1000102C0(v174, v175, (uint64_t *)&v290);
        v288 = v177;
        v257 = v289;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v288, v289, v171 + 4);
        swift_release_n(v165, 2);
        swift_bridgeObjectRelease(v176);
        *(_WORD *)(v171 + 12) = 2080;
        v256 = v171 + 14;
        v178 = *(_QWORD *)(v165
                         + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection
                         + 24);
        v179 = *(_QWORD *)(v165
                         + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection
                         + 32);
        sub_10001C830((_QWORD *)(v165 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection), v178);
        v180 = v282;
        (*(void (**)(uint64_t, uint64_t))(v179 + 8))(v178, v179);
        sub_10008B304(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
        v182 = dispatch thunk of CustomStringConvertible.description.getter(v162, v181);
        v184 = v183;
        (*(void (**)(char *, uint64_t))(v283 + 8))(v180, v162);
        sub_1000102C0(v182, v184, (uint64_t *)&v290);
        v288 = v185;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v288, v257, v256);
        swift_release_n(v165, 2);
        swift_bridgeObjectRelease(v184);
        v186 = v258;
        _os_log_impl((void *)&_mh_execute_header, v258, (os_log_type_t)v262, "unloadIfNecessary entering for asset %s with %s", (uint8_t *)v171, 0x16u);
        v187 = v259;
        swift_arrayDestroy(v259, 2);
        swift_slowDealloc(v187, -1, -1);
        swift_slowDealloc(v171, -1, -1);

      }
      else
      {

        swift_release_n(v165, 4);
      }
      v199 = enum case for LoadState.unloaded(_:);
      v200 = v284;
      v201 = *(void (**)(char *, uint64_t, uint64_t))(v284 + 104);
      v202 = v281;
      v203 = State;
      v201(v281, enum case for LoadState.unloaded(_:), State);
      sub_10008B304(&qword_1000FCD38, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState, (uint64_t)&protocol conformance descriptor for LoadState);
      v204 = v267;
      v206 = dispatch thunk of static Equatable.== infix(_:_:)(v267, v202, v203, v205);
      v207 = *(void (**)(char *, uint64_t))(v200 + 8);
      v207(v202, v203);
      v262 = v207;
      if ((v206 & 1) != 0)
      {
        v208 = v287;
        v209 = swift_retain_n(v287, 4);
        v210 = Logger.logObject.getter(v209);
        v211 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v210, v211))
        {
          v212 = swift_slowAlloc(22, -1);
          v284 = swift_slowAlloc(64, -1);
          v290 = (char *)v284;
          *(_DWORD *)v212 = 136315394;
          v213 = type metadata accessor for InferenceProviderAssetDescriptor(0);
          sub_10008B304(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
          v215 = dispatch thunk of CustomStringConvertible.description.getter(v213, v214);
          v217 = v216;
          sub_1000102C0(v215, v216, (uint64_t *)&v290);
          v288 = v218;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v288, v289, v212 + 4);
          swift_release_n(v208, 2);
          swift_bridgeObjectRelease(v217);
          *(_WORD *)(v212 + 12) = 2080;
          v219 = (_QWORD *)(v208 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
          v220 = *(_QWORD *)(v208
                           + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection
                           + 24);
          v221 = *(_QWORD *)(v208
                           + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection
                           + 32);
          sub_10001C830(v219, v220);
          v222 = v282;
          (*(void (**)(uint64_t, uint64_t))(v221 + 8))(v220, v221);
          sub_10008B304(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
          v223 = v268;
          v225 = dispatch thunk of CustomStringConvertible.description.getter(v268, v224);
          v227 = v226;
          (*(void (**)(char *, uint64_t))(v283 + 8))(v222, v223);
          sub_1000102C0(v225, v227, (uint64_t *)&v290);
          v288 = v228;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v288, v289, v212 + 14);
          swift_release_n(v287, 2);
          swift_bridgeObjectRelease(v227);
          _os_log_impl((void *)&_mh_execute_header, v210, v211, "Not unloading asset %s from %s: already unloaded", (uint8_t *)v212, 0x16u);
          v229 = v284;
          swift_arrayDestroy(v284, 2);
          swift_slowDealloc(v229, -1, -1);
          swift_slowDealloc(v212, -1, -1);
        }
        else
        {
          swift_release_n(v208, 4);
        }

        v254 = State;
        v255 = (uint64_t (*)(char *, uint64_t))v262;
        v262(v285, State);
        result = v255(v267, v254);
        v279->isa = 0;
      }
      else
      {
        v230 = v204;
        v231 = (void (*)(char *, char *, uint64_t))v265;
        v265(v202, (uint64_t)v230, v203);
        v232 = v266;
        v207(v266, v203);
        v201(v232, v199, v203);
        v233 = type metadata accessor for TaskPriority(0);
        sub_100005630(v276, 1, 1, v233);
        v231(v273, v202, v203);
        v234 = v275;
        (*(void (**)(char *, uint64_t, uint64_t))(v275 + 16))(v274, v269, v277);
        sub_10008B6B4(v270, v278, &qword_1000FD7E0);
        sub_10008B304(&qword_1000FB728, type metadata accessor for InferenceProviderAssetManager, (uint64_t)&unk_1000CC408);
        v236 = v235;
        v237 = v284;
        v238 = *(unsigned __int8 *)(v284 + 80);
        v239 = (v238 + 40) & ~v238;
        v240 = *(unsigned __int8 *)(v234 + 80);
        v241 = (v14 + v240 + v239) & ~v240;
        v242 = *(unsigned __int8 *)(v271 + 80);
        v243 = (v9 + v242 + v241) & ~v242;
        v244 = (v263 + v243 + 7) & 0xFFFFFFFFFFFFFFF8;
        v245 = (char *)swift_allocObject(&unk_1000F40C8, v244 + 8, v238 | v240 | v242 | 7);
        v247 = v272;
        v246 = v273;
        *((_QWORD *)v245 + 2) = v272;
        *((_QWORD *)v245 + 3) = v236;
        v248 = v287;
        *((_QWORD *)v245 + 4) = v287;
        (*(void (**)(char *, char *, uint64_t))(v237 + 32))(&v245[v239], v246, v203);
        (*(void (**)(char *, char *, uint64_t))(v275 + 32))(&v245[v241], v274, v277);
        sub_10008B88C(v278, (uint64_t)&v245[v243], &qword_1000FD7E0);
        *(_QWORD *)&v245[v244] = v247;
        swift_retain_n(v247, 2);
        swift_retain(v248);
        sub_10000DB68(v276, (uint64_t)&unk_1000FDBF0, (uint64_t)v245);
        v250 = v249;
        v251 = v262;
        v262(v281, v203);
        v251(v285, v203);
        v251(v267, v203);
        v252 = v264;
        v253 = v260;
        swift_release(*(_QWORD *)(v260 + v264));
        *(_QWORD *)(v253 + v252) = v250;
        v279->isa = v250;
        return swift_retain(v250);
      }
    }
  }
  else
  {
    if (qword_1000FB110 != -1)
      swift_once(&qword_1000FB110, sub_100080FE0);
    v110 = type metadata accessor for Logger(0);
    sub_100002FF8(v110, (uint64_t)qword_1000FD9C8);
    v111 = State;
    v112 = (void (*)(char *, char *, uint64_t))v265;
    v265(v19, v72, State);
    v112(v16, v285, v111);
    v113 = v287;
    v114 = swift_retain_n(v287, 4);
    v115 = Logger.logObject.getter(v114);
    v116 = static os_log_type_t.fault.getter();
    v117 = v116;
    v118 = os_log_type_enabled(v115, v116);
    v119 = v284;
    if (v118)
    {
      v120 = swift_slowAlloc(42, -1);
      LODWORD(v280) = v117;
      v121 = v120;
      v281 = (char *)swift_slowAlloc(128, -1);
      v290 = v281;
      *(_DWORD *)v121 = 136315906;
      sub_10008B304(&qword_1000FCD48, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState, (uint64_t)&protocol conformance descriptor for LoadState);
      v123 = v122;
      v279 = v115;
      v124 = dispatch thunk of CustomStringConvertible.description.getter(v111, v122);
      v126 = v125;
      sub_1000102C0(v124, v125, (uint64_t *)&v290);
      v288 = v127;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v288, v289, v121 + 4);
      swift_bridgeObjectRelease(v126);
      v128 = *(void (**)(char *, uint64_t))(v119 + 8);
      v128(v19, State);
      *(_WORD *)(v121 + 12) = 2080;
      v129 = dispatch thunk of CustomStringConvertible.description.getter(State, v123);
      v131 = v130;
      sub_1000102C0(v129, v130, (uint64_t *)&v290);
      v288 = v132;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v288, v289, v121 + 14);
      swift_bridgeObjectRelease(v131);
      v128(v16, State);
      *(_WORD *)(v121 + 22) = 2080;
      v133 = type metadata accessor for InferenceProviderAssetDescriptor(0);
      sub_10008B304(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
      v135 = dispatch thunk of CustomStringConvertible.description.getter(v133, v134);
      v137 = v136;
      sub_1000102C0(v135, v136, (uint64_t *)&v290);
      v288 = v138;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v288, v289, v121 + 24);
      swift_release_n(v113, 2);
      swift_bridgeObjectRelease(v137);
      *(_WORD *)(v121 + 32) = 2080;
      v139 = *(_QWORD *)(v113 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
      v140 = *(_QWORD *)(v113 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
      sub_10001C830((_QWORD *)(v113 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection), v139);
      v141 = v282;
      (*(void (**)(uint64_t, uint64_t))(v140 + 8))(v139, v140);
      sub_10008B304(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
      v142 = v268;
      v144 = dispatch thunk of CustomStringConvertible.description.getter(v268, v143);
      v146 = v145;
      v147 = v141;
      v119 = v284;
      (*(void (**)(char *, uint64_t))(v283 + 8))(v147, v142);
      sub_1000102C0(v144, v146, (uint64_t *)&v290);
      v288 = v148;
      v111 = State;
      v72 = (uint64_t)v267;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v288, v289, v121 + 34);
      swift_release_n(v113, 2);
      swift_bridgeObjectRelease(v146);
      v149 = v279;
      _os_log_impl((void *)&_mh_execute_header, v279, (os_log_type_t)v280, "unloadIfNecessary called with unmatching states (%s != %s) for %s with %s", (uint8_t *)v121, 0x2Au);
      v150 = v281;
      swift_arrayDestroy(v281, 4);
      swift_slowDealloc(v150, -1, -1);
      swift_slowDealloc(v121, -1, -1);

    }
    else
    {
      v128 = *(void (**)(char *, uint64_t))(v284 + 8);
      v128(v19, v111);
      v128(v16, v111);

      swift_release_n(v113, 4);
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v119 + 24))(v266, v72, v111);
    v151 = type metadata accessor for ModelManagerError(0);
    sub_10008B304((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError, (uint64_t)&protocol conformance descriptor for ModelManagerError);
    swift_allocError(v151, v152, 0, 0);
    v154 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v151 - 8) + 104))(v153, enum case for ModelManagerError.internalError(_:), v151);
    swift_willThrow(v154, v155, v156, v157, v158, v159, v160, v161, v256, v257, v258, v259, v260, v261);
    v128(v285, v111);
    return ((uint64_t (*)(uint64_t, uint64_t))v128)(v72, v111);
  }
  return result;
}

uint64_t sub_1000876B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t State;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v8[15] = a7;
  v8[16] = a8;
  v8[13] = a5;
  v8[14] = a6;
  v8[12] = a4;
  v10 = type metadata accessor for InferenceError(0);
  v8[17] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v8[18] = v11;
  v8[19] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AssetCost(0);
  v8[20] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v8[21] = v13;
  v8[22] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result(0);
  v8[23] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v8[24] = v15;
  v8[25] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100002F78(&qword_1000FD820);
  v8[26] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100002F78(&qword_1000FB920);
  v8[27] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for InferenceProviderDescriptor(0);
  v8[28] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v8[29] = v19;
  v8[30] = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for LoadState(0);
  v8[31] = State;
  v21 = *(_QWORD *)(State - 8);
  v8[32] = v21;
  v22 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[33] = swift_task_alloc(v22);
  v8[34] = swift_task_alloc(v22);
  v23 = sub_100002F78(&qword_1000FB2A0);
  v8[35] = v23;
  v24 = *(_QWORD *)(v23 - 8);
  v8[36] = v24;
  v8[37] = swift_task_alloc((*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100087844, a8, 0);
}

uint64_t sub_100087844()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t);
  _QWORD *v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v80;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 296);
  v3 = *(_QWORD *)(v0 + 272);
  v66 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 256);
  v5 = *(_QWORD *)(v0 + 240);
  v62 = *(_QWORD *)(v0 + 232);
  v63 = *(_QWORD *)(v0 + 224);
  v64 = *(_QWORD *)(v0 + 216);
  v65 = *(_QWORD *)(v0 + 248);
  v68 = *(_QWORD *)(v0 + 208);
  v74 = *(_QWORD *)(v0 + 112);
  v70 = *(_QWORD *)(v0 + 120);
  v72 = *(_QWORD *)(v0 + 104);
  sub_10008C144();
  sub_10008C120();
  v6 = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_telemetryManager;
  *(_QWORD *)(v0 + 304) = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_telemetryManager;
  v7 = *(_QWORD *)(v1 + v6 + 24);
  v8 = *(_QWORD *)(v1 + v6 + 32);
  sub_10008C374((_QWORD *)(v1 + v6));
  *(_QWORD *)(v0 + 312) = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_descriptor;
  v9 = sub_10008C128();
  v60 = v10;
  v61 = v9;
  v78 = v2;
  v15 = InferenceProviderAssetDescriptor.version.getter(v9, v10, v11, v12, v13, v14);
  v58 = v16;
  v59 = v15;
  LODWORD(v16) = enum case for LoadState.unloaded(_:);
  *(_DWORD *)(v0 + 400) = enum case for LoadState.unloaded(_:);
  v17 = *(void (**)(uint64_t))(v4 + 104);
  *(_QWORD *)(v0 + 320) = v17;
  v77 = v16;
  v17(v3);
  v18 = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection;
  *(_QWORD *)(v0 + 328) = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection;
  v19 = (_QWORD *)(v1 + v18);
  v20 = *(_QWORD *)(v1 + v18 + 24);
  v21 = v19[4];
  v76 = v19;
  sub_10008C220(v19);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v20, v21);
  InferenceProviderDescriptor.id.getter(v22);
  sub_10008C310();
  v23 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
  *(_QWORD *)(v0 + 336) = v23;
  v23(v5, v63);
  sub_100005630(v64, 1, 1, v66);
  v24 = sub_100002F78(&qword_1000FB2D8);
  sub_10002B26C(v68, v25, v26, v24);
  *(_QWORD *)(v0 + 344) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 24))(v2, v61, v60, v59, v58, v72, v3, v74, v5, v20, v64, v68, v70, v7, v8);
  sub_10001E4C0();
  sub_10001E8A8();
  v27 = sub_10001E420();
  sub_10007FFC8(v27, &qword_1000FD820);
  sub_10002AD5C(v64, &qword_1000FB920);
  v28 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  *(_QWORD *)(v0 + 352) = v28;
  v28(v3, v65);
  v29 = qword_1000FB110;
  sub_10001E194();
  if (v29 != -1)
    swift_once(&qword_1000FB110, sub_100080FE0);
  v30 = *(_QWORD *)(v0 + 96);
  v31 = sub_10001DD64();
  v32 = sub_100002FF8(v31, (uint64_t)qword_1000FD9C8);
  *(_QWORD *)(v0 + 360) = v32;
  sub_10008BC60(v30);
  sub_10002B3CC();
  v33 = sub_10002B470();
  if (sub_100037E74(v33))
  {
    v69 = *(_QWORD *)(v0 + 240);
    v73 = *(_QWORD *)(v0 + 224);
    v34 = *(_QWORD *)(v0 + 96);
    v67 = v34;
    v71 = (uint64_t (*)(uint64_t, uint64_t))v23;
    v35 = sub_10001D8D4(22);
    v75 = sub_10001D8D4(64);
    v80 = v75;
    *(_DWORD *)v35 = 136315394;
    v36 = sub_10007D478();
    sub_10008B304(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
    v38 = dispatch thunk of CustomStringConvertible.description.getter(v36, v37);
    sub_10002B7E0(v38, v39);
    *(_QWORD *)(v0 + 80) = v40;
    sub_10008C29C(v0 + 80, v0 + 88);
    sub_10001E034();
    sub_10001EBB0(v34);
    *(_WORD *)(v35 + 12) = 2080;
    v41 = v76;
    v42 = v76[3];
    v43 = v76[4];
    sub_10008C220(v76);
    v44 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
    v45 = v43;
    v46 = v78;
    v44(v42, v45);
    sub_10008B304(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
    sub_10008BDC8(v47, v47);
    v48 = v71(v69, v73);
    sub_10008BE90(v48, v49, &v80);
    *(_QWORD *)(v0 + 88) = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96);
    sub_10001E4C0();
    sub_10001EBB0(v67);
    sub_10002B4A0((void *)&_mh_execute_header, v32, (os_log_type_t)v30, "Unloading asset %s from %s", (uint8_t *)v35);
    sub_10007DBD8();
    sub_10001D790(v75);
    sub_10001D790(v35);

  }
  else
  {
    sub_100044904(*(_QWORD *)(v0 + 96));

    v46 = v78;
    v41 = v76;
  }
  v51 = *(_QWORD *)(v0 + 264);
  v52 = v41[3];
  v53 = v41[4];
  sub_10001C830(v41, v52);
  sub_10008C368(v51, v77);
  v54 = sub_10008C188(*(_QWORD *)(v53 + 24));
  v79 = v55;
  v56 = (_QWORD *)swift_task_alloc(v54);
  *(_QWORD *)(v0 + 368) = v56;
  *v56 = v0;
  v56[1] = sub_100087CF4;
  return v79(v46, *(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 296), v52, v53);
}

uint64_t sub_100087CF4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;

  sub_10001E0D8();
  v3 = *(_QWORD *)(v0 + 368);
  *v4 = *v2;
  *(_QWORD *)(v0 + 376) = v1;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v0 + 352))(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 248));
  sub_10001E10C();
  return sub_10001D6DC();
}

uint64_t sub_100087D5C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  void (*v56)(uint64_t, _QWORD, uint64_t);
  uint64_t v57;

  v2 = *(_QWORD *)(v1 + 360);
  v3 = sub_10008BC60(*(_QWORD *)(v1 + 96));
  Logger.logObject.getter(v3);
  v4 = sub_10002B470();
  if (sub_100037E74(v4))
  {
    v5 = *(_QWORD *)(v1 + 328);
    v49 = *(_QWORD *)(v1 + 240);
    v50 = *(_QWORD *)(v1 + 224);
    v52 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 336);
    v6 = *(_QWORD *)(v1 + 96);
    LODWORD(v56) = v2;
    v7 = (uint8_t *)sub_10001D8D4(22);
    v54 = sub_10001D8D4(64);
    v57 = v54;
    *(_DWORD *)v7 = 136315394;
    sub_10007D478();
    sub_10008B304(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
    v9 = sub_10008BF74(v8, v8);
    sub_10008BD3C(v9, v10);
    *(_QWORD *)(v1 + 64) = v11;
    v12 = (_QWORD *)(v6 + v5);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 64, v1 + 72);
    sub_10001E034();
    sub_10001EBB0(v6);
    sub_10008BDB8();
    v13 = *(_QWORD *)(v6 + v5 + 24);
    v14 = v12[4];
    sub_10008C374(v12);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v14);
    sub_10008B304(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
    sub_10008BDC8(v15, v15);
    v16 = v52(v49, v50);
    sub_10008BD48(v16, v17, &v57);
    *(_QWORD *)(v1 + 72) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 72, v1 + 80);
    sub_10001EADC();
    sub_10001EBB0(v6);
    sub_10002B4A0((void *)&_mh_execute_header, v0, (os_log_type_t)v2, "Finished unloading asset %s from %s", v7);
    sub_10007DBD8();
    sub_10001D790(v54);
    sub_10001D790((uint64_t)v7);
  }
  else
  {
    sub_100044904(*(_QWORD *)(v1 + 96));
  }

  v55 = *(_DWORD *)(v1 + 400);
  sub_10008C198();
  v51 = v19;
  v53 = *(_QWORD *)(v1 + 248);
  v20 = *(_QWORD *)(v1 + 192);
  v21 = *(_QWORD *)(v1 + 200);
  v47 = *(_QWORD *)(v1 + 184);
  v22 = *(_QWORD *)(v1 + 96);
  v48 = sub_10008C270((_QWORD *)(v22 + v23));
  v24 = InferenceProviderAssetDescriptor.identifier.getter(v48);
  sub_10008C0CC(v24, v25, v26, v27, v28, v29);
  sub_10008C34C();
  sub_10008C100(v21, enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result.success(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 104), v40, v41, v42, v43, v44, v45, v20, v47);
  sub_10008C1E0();
  v34(v30, v31, v32, v33);
  sub_10001DA38();
  sub_10001D9C8();
  sub_10001D8B4();
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v21, v22);
  v56(v51, v55, v53);
  v35 = (_QWORD *)swift_task_alloc(dword_1000FDBFC);
  sub_10008C2C4(v35, (uint64_t)sub_100088058);
  v37 = sub_10002BD0C(v36);
  return sub_100084450(v37, v38);
}

uint64_t sub_100088058()
{
  uint64_t v0;
  uint64_t v1;

  sub_10001DB38();
  v1 = *(_QWORD *)(v0 + 272);
  sub_10001D680(*(_QWORD *)(v0 + 384));
  sub_10008C210(v1);
  return sub_10001D6DC();
}

void sub_1000880B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = v0[36];
  v1 = v0[37];
  v22 = v0[22];
  v24 = v0[19];
  swift_release(v0[43]);
  sub_10007E7EC(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_10001E330();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  v3 = sub_10002B70C();
  v11 = sub_1000446EC(v3, v4, v5, v6, v7, v8, v9, v10, v20, v22);
  sub_1000449D4(v11, v12, v13, v14, v15, v16, v17, v18, v21, v23, v24);
  sub_10001E5D0();
  sub_10002BC1C();
  __asm { BR              X0 }
}

uint64_t sub_10008814C()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 392));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_100088184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v9 = *(_QWORD *)(v8 + 344);
  v11 = *(_QWORD *)(v8 + 288);
  v10 = *(_QWORD *)(v8 + 296);
  v37 = *(_QWORD *)(v8 + 208);
  v40 = *(_QWORD *)(v8 + 200);
  v43 = *(_QWORD *)(v8 + 176);
  v45 = *(_QWORD *)(v8 + 152);
  swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8);
  swift_release(v9);
  sub_10002B7F8(v10, *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
  sub_10001D938();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  sub_10002B70C();
  v12 = swift_task_dealloc(v37);
  v20 = sub_1000446EC(v12, v13, v14, v15, v16, v17, v18, v19, v37, v40);
  v28 = sub_1000449D4(v20, v21, v22, v23, v24, v25, v26, v27, v38, v41, v43);
  sub_10007F17C(v28, v29, v30, v31, v32, v33, v34, v35, v39, v42, v44, v45);
  return (*(uint64_t (**)(void))(v8 + 8))();
}

uint64_t sub_100088240()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t (*v85)(uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  void (*v94)(uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  void (*v101)(uint64_t, _QWORD, uint64_t);
  os_log_type_t v102;
  uint64_t v103;
  uint64_t v104;

  v1 = *(_QWORD *)(v0 + 376);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = v0 + 16;
  v3 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 136);
  swift_errorRetain(v1);
  v5 = sub_100002F78(&qword_1000FB5F8);
  if (swift_dynamicCast(v3, v0 + 16, v5, v4, 0))
  {
    if ((*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 88))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 136)) == enum case for InferenceError.notLoaded(_:))
    {
      v6 = *(_QWORD *)(v0 + 96);
      swift_errorRelease(*(_QWORD *)(v0 + 376));
      v7 = sub_10008BC60(v6);
      v8 = Logger.logObject.getter(v7);
      v9 = static os_log_type_t.default.getter();
      if (sub_1000447E0(v8))
      {
        v94 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
        v10 = *(_QWORD *)(v0 + 240);
        v91 = *(_QWORD *)(v0 + 224);
        v11 = *(_QWORD *)(v0 + 96);
        v12 = (_QWORD *)(v11 + *(_QWORD *)(v0 + 328));
        LODWORD(v101) = v9;
        v13 = sub_10001D8D4(22);
        v97 = sub_10001D8D4(64);
        v104 = v97;
        *(_DWORD *)v13 = 136315394;
        sub_10007D478();
        sub_10008B304(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
        v15 = sub_10007E0E8(v14);
        sub_10008BD3C(v15, v16);
        *(_QWORD *)(v0 + 48) = v17;
        sub_10007FF40(v0 + 48, v0 + 56);
        sub_10001EBB0(v11);
        sub_10001E034();
        *(_WORD *)(v13 + 12) = 2080;
        v19 = v12[3];
        v18 = v12[4];
        sub_10008C270(v12);
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v18);
        sub_10008B304(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
        sub_10008C2E4();
        dispatch thunk of CustomStringConvertible.description.getter(v91, v20);
        v94(v10, v91);
        sub_10008C228();
        *(_QWORD *)(v0 + 56) = v21;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64);
        sub_10001EBB0(v11);
        sub_10001D8B4();
        sub_10002B4A0((void *)&_mh_execute_header, v8, (os_log_type_t)v9, "Asset %s already unloaded from %s", (uint8_t *)v13);
        sub_10007DBD8();
        sub_10001D790(v97);
        sub_10001D790(v13);

      }
      else
      {
        v58 = *(_QWORD *)(v0 + 96);

        sub_100044904(v58);
      }
      sub_10002BC38(*(_QWORD *)(v0 + 144));
      swift_errorRelease(*(_QWORD *)(v0 + 16));
      v90 = *(_QWORD *)(v0 + 344);
      v100 = *(_DWORD *)(v0 + 400);
      sub_10008C198();
      v93 = v59;
      v96 = *(_QWORD *)(v0 + 248);
      v60 = *(_QWORD *)(v0 + 192);
      v61 = *(_QWORD *)(v0 + 200);
      v81 = *(_QWORD *)(v0 + 184);
      v84 = sub_10008C270((_QWORD *)(*(_QWORD *)(v0 + 96) + v62));
      v79 = InferenceProviderAssetDescriptor.identifier.getter(v84);
      v68 = InferenceProviderAssetDescriptor.version.getter(v79, v63, v64, v65, v66, v67);
      AssetCost.onDeviceMemory.getter(v68);
      sub_10001EB74(v61, enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result.success(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 104));
      sub_10008C1E0();
      v73(v69, v70, v71, v72);
      swift_release(v90);
      sub_10001DA38();
      sub_10001D8B4();
      (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v61, v81);
      v101(v93, v100, v96);
      v74 = (_QWORD *)swift_task_alloc(dword_1000FDBFC);
      sub_10008C2C4(v74, (uint64_t)sub_100088058);
      goto LABEL_12;
    }
    sub_10002BC38(*(_QWORD *)(v0 + 144));
  }
  v22 = *(_QWORD *)(v0 + 376);
  v23 = *(NSObject **)(v0 + 360);
  v24 = *(_QWORD *)(v0 + 96);
  swift_errorRelease(*(_QWORD *)(v0 + 16));
  swift_retain_n(v24, 3);
  sub_10002B5D4();
  sub_10001D7EC();
  v25 = sub_10002B5D4();
  Logger.logObject.getter(v25);
  v26 = sub_10001E9D0();
  if (sub_100039E20(v26))
  {
    v85 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 336);
    v102 = v22;
    v27 = *(_QWORD *)(v0 + 240);
    v82 = *(_QWORD *)(v0 + 224);
    v28 = *(_QWORD *)(v0 + 96);
    v29 = sub_10001D8D4(32);
    v88 = (_QWORD *)sub_10001D8D4(8);
    v98 = sub_10001D8D4(64);
    v104 = v98;
    *(_DWORD *)v29 = 136315650;
    sub_10007D478();
    sub_10008B304(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
    v31 = sub_10008BFC4(v30, v30);
    sub_10008BD3C(v31, v32);
    *(_QWORD *)(v0 + 24) = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
    sub_10001EBB0(v28);
    sub_10001E034();
    *(_WORD *)(v29 + 12) = 2080;
    sub_10008C2B8();
    sub_10008C1D0();
    sub_10008B304(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
    sub_10008BDC8(v34, v34);
    v35 = v85(v27, v82);
    sub_10008BD48(v35, v36, &v104);
    *(_QWORD *)(v0 + 32) = v37;
    v2 = v0 + 40;
    sub_10008C29C(v0 + 32, v0 + 40);
    sub_10001EBB0(v28);
    sub_10001EADC();
    sub_10008BD28();
    v38 = sub_10008C294();
    *(_QWORD *)(v0 + 40) = v38;
    sub_10002B3F0(v0 + 40, v0 + 48);
    *v88 = v38;
    sub_10008BBE4();
    sub_10008BBE4();
    sub_10008C0C0((void *)&_mh_execute_header, v23, v102, "Failed to unload asset %s from %s: %@");
    sub_100002F78(&qword_1000FB8E0);
    sub_10001DBB8((uint64_t)v88);
    sub_10001D790((uint64_t)v88);
    sub_10002BA20(v98);
    sub_10001D790(v98);
    sub_10001D790(v29);
  }
  else
  {
    sub_100044904(*(_QWORD *)(v0 + 96));
    sub_10008BBE4();
    sub_10008BBE4();
  }

  v39 = *(_QWORD *)(v0 + 376);
  v103 = *(_QWORD *)(v0 + 344);
  v41 = *(_QWORD *)(v0 + 192);
  v40 = *(_QWORD *)(v0 + 200);
  v42 = *(_QWORD *)(v0 + 176);
  v87 = v41;
  v89 = *(_QWORD *)(v0 + 184);
  v78 = *(_QWORD *)(v0 + 168);
  v80 = *(_QWORD *)(v0 + 160);
  v95 = *(_QWORD *)(v0 + 120);
  v99 = *(_QWORD *)(v0 + 296);
  v43 = (_QWORD *)(*(_QWORD *)(v0 + 96) + *(_QWORD *)(v0 + 304));
  v44 = v43[3];
  v45 = v43[4];
  v92 = sub_10008C374(v43);
  v86 = InferenceProviderAssetDescriptor.identifier.getter(v92);
  v83 = sub_10008C278(v86, v46, v47, v48, v49, v50);
  v52 = v51;
  v53 = static AssetCost.zero.getter();
  v54 = AssetCost.onDeviceMemory.getter(v53);
  (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v42, v80);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v41 + 104))(v40, enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result.failure(_:), v89);
  v55 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 32);
  swift_errorRetain(v39);
  v55(v99, v86, v2, v83, v52, v54, v40, v103, v39, v95, v44, v45);
  swift_errorRelease(v39);
  sub_10001D9C8();
  sub_10001E420();
  sub_10002B684();
  sub_10008C388(v40, *(uint64_t (**)(uint64_t, uint64_t))(v87 + 8));
  v56 = (_QWORD *)swift_task_alloc(dword_1000FDBFC);
  *(_QWORD *)(v0 + 392) = v56;
  *v56 = v0;
  v56[1] = sub_10008814C;
  v57 = *(_QWORD *)(v0 + 128);
LABEL_12:
  v75 = sub_10002BD0C(v57);
  return sub_100084450(v75, v76);
}

uint64_t sub_100088978@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, NSObject *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  void (*v63)(char *, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t result;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  void (*v107)(char *, uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  NSObject *v110;
  os_log_type_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  void (*v120)(char *, uint64_t);
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void (*v133)(uint64_t, uint64_t);
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  os_log_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  NSObject *v160;
  os_log_type_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  os_log_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  unint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void (*v194)(uint64_t, uint64_t);
  uint64_t v195;
  uint64_t v196;
  void (*v197)(char *);
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char v201;
  void (*v202)(char *, uint64_t);
  uint64_t v203;
  uint64_t v204;
  NSObject *v205;
  os_log_type_t v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char v225;
  uint64_t v226;
  uint64_t v227;
  NSObject *v228;
  os_log_type_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  uint64_t (*v250)(char *, uint64_t);
  void (*v251)(char *, char *, uint64_t);
  char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  objc_class *v263;
  objc_class *v264;
  void (*v265)(char *, uint64_t);
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t (*v279)(char *, uint64_t);
  uint64_t v280;
  uint64_t *v281;
  uint64_t v282;
  os_log_t v283;
  uint64_t v284;
  uint64_t (*v285)(char *, uint64_t);
  uint64_t v286;
  char *v287;
  void (*v288)(char *, uint64_t, uint64_t);
  char *v289;
  uint64_t v290;
  char *v291;
  uint64_t v292;
  uint64_t v293;
  os_log_t v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  uint64_t v298;
  uint64_t v299;
  char *v300;
  uint64_t State;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;

  v294 = a4;
  v292 = a3;
  v6 = sub_100002F78(&qword_1000FB230);
  __chkstk_darwin(v6);
  v293 = (uint64_t)&v280 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v298 = type metadata accessor for InferenceProviderDescriptor(0);
  v296 = *(_QWORD *)(v298 - 8);
  __chkstk_darwin(v298);
  v297 = (char *)&v280 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for LoadState(0);
  v299 = *(_QWORD *)(State - 8);
  v9 = *(_QWORD *)(v299 + 64);
  v10 = __chkstk_darwin(State);
  v11 = (char *)&v280 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v280 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v280 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v280 - v19;
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v280 - v22;
  __chkstk_darwin(v21);
  v300 = (char *)&v280 - v24;
  v25 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  if ((*(_BYTE *)(a1 + *(int *)(v25 + 52)) & 1) != 0)
  {
    if (qword_1000FB110 != -1)
      swift_once(&qword_1000FB110, sub_100080FE0);
    v26 = type metadata accessor for Logger(0);
    sub_100002FF8(v26, (uint64_t)qword_1000FD9C8);
    v27 = swift_retain_n(a2, 2);
    v28 = Logger.logObject.getter(v27);
    v29 = a2;
    v30 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v28, v30))
    {
      v31 = swift_slowAlloc(12, -1);
      v32 = swift_slowAlloc(32, -1);
      *(_DWORD *)v31 = 136315138;
      v304 = v32;
      v33 = type metadata accessor for InferenceProviderAssetDescriptor(0);
      sub_10008B304(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
      v35 = dispatch thunk of CustomStringConvertible.description.getter(v33, v34);
      v37 = v36;
      sub_1000102C0(v35, v36, &v304);
      v302 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, &v303, v31 + 4);
      swift_release_n(v29, 2);
      swift_bridgeObjectRelease(v37);
      _os_log_impl((void *)&_mh_execute_header, v28, v30, "Tried to move invalidated asset to dynamic mode: %s", (uint8_t *)v31, 0xCu);
      swift_arrayDestroy(v32, 1);
      v39 = v32;
LABEL_11:
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v31, -1, -1);

LABEL_21:
      v92 = type metadata accessor for ModelManagerError(0);
      sub_10008B304((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError, (uint64_t)&protocol conformance descriptor for ModelManagerError);
      swift_allocError(v92, v93, 0, 0);
      v95 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v92 - 8) + 104))(v94, enum case for ModelManagerError.internalError(_:), v92);
      return swift_willThrow(v95, v96, v97, v98, v99, v100, v101, v102, v280, v281, v282, v283, v284, v285);
    }

    v60 = v29;
    v61 = 2;
    goto LABEL_20;
  }
  v40 = v25;
  if (*(_QWORD *)(a1 + *(int *)(v25 + 28)))
  {
    if (qword_1000FB110 != -1)
      swift_once(&qword_1000FB110, sub_100080FE0);
    v41 = type metadata accessor for Logger(0);
    sub_100002FF8(v41, (uint64_t)qword_1000FD9C8);
    v42 = swift_retain_n(a2, 4);
    v28 = Logger.logObject.getter(v42);
    v43 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v28, v43))
    {
      v31 = swift_slowAlloc(22, -1);
      State = swift_slowAlloc(64, -1);
      v304 = State;
      *(_DWORD *)v31 = 136315394;
      v44 = type metadata accessor for InferenceProviderAssetDescriptor(0);
      sub_10008B304(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
      v46 = dispatch thunk of CustomStringConvertible.description.getter(v44, v45);
      v48 = v47;
      sub_1000102C0(v46, v47, &v304);
      v302 = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, &v303, v31 + 4);
      swift_release_n(a2, 2);
      swift_bridgeObjectRelease(v48);
      *(_WORD *)(v31 + 12) = 2080;
      v300 = (char *)(v31 + 14);
      v50 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
      v51 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
      sub_10001C830((_QWORD *)(a2 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection), v50);
      v52 = v297;
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v51);
      sub_10008B304(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
      v53 = v298;
      v55 = dispatch thunk of CustomStringConvertible.description.getter(v298, v54);
      v57 = v56;
      (*(void (**)(char *, uint64_t))(v296 + 8))(v52, v53);
      sub_1000102C0(v55, v57, &v304);
      v302 = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, &v303, v300);
      swift_release_n(a2, 2);
      swift_bridgeObjectRelease(v57);
      _os_log_impl((void *)&_mh_execute_header, v28, v43, "unloadIfNecessary called with pending transition task for %s with %s", (uint8_t *)v31, 0x16u);
      v59 = State;
      swift_arrayDestroy(State, 2);
      v39 = v59;
      goto LABEL_11;
    }

    v60 = a2;
    v61 = 4;
LABEL_20:
    swift_release_n(v60, v61);
    goto LABEL_21;
  }
  v286 = *(int *)(v25 + 28);
  v287 = v17;
  v290 = a2;
  v291 = v23;
  v62 = v300;
  v63 = *(void (**)(char *, uint64_t, uint64_t))(v299 + 16);
  v63(v300, a1, State);
  v64 = *(int *)(v40 + 20);
  v288 = v63;
  v289 = (char *)(a1 + v64);
  ((void (*)(char *))v63)(v291);
  v65 = (uint64_t)v62;
  v66 = (uint64_t)v291;
  if ((sub_1000B2390(v65, (uint64_t)v291) & 1) != 0)
  {
    v67 = *(_QWORD *)(*(_QWORD *)(a1 + *(int *)(v40 + 48)) + 16);
    v68 = v290;
    if (v67)
    {
      if (qword_1000FB110 != -1)
        swift_once(&qword_1000FB110, sub_100080FE0);
      v69 = type metadata accessor for Logger(0);
      sub_100002FF8(v69, (uint64_t)qword_1000FD9C8);
      v70 = swift_retain_n(v68, 4);
      v71 = Logger.logObject.getter(v70);
      v72 = static os_log_type_t.default.getter();
      v73 = v72;
      if (os_log_type_enabled(v71, v72))
      {
        v74 = swift_slowAlloc(32, -1);
        v295 = swift_slowAlloc(64, -1);
        v304 = v295;
        *(_DWORD *)v74 = 136315650;
        LODWORD(v294) = v73;
        v75 = type metadata accessor for InferenceProviderAssetDescriptor(0);
        sub_10008B304(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
        v77 = dispatch thunk of CustomStringConvertible.description.getter(v75, v76);
        v79 = v78;
        sub_1000102C0(v77, v78, &v304);
        v302 = v80;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, &v303, v74 + 4);
        swift_release_n(v68, 2);
        swift_bridgeObjectRelease(v79);
        *(_WORD *)(v74 + 12) = 2080;
        v293 = v74 + 14;
        v81 = *(_QWORD *)(v68 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
        v82 = *(_QWORD *)(v68 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
        sub_10001C830((_QWORD *)(v68 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection), v81);
        v83 = v297;
        (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v81, v82);
        sub_10008B304(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
        v84 = v298;
        v86 = dispatch thunk of CustomStringConvertible.description.getter(v298, v85);
        v88 = v87;
        (*(void (**)(char *, uint64_t))(v296 + 8))(v83, v84);
        sub_1000102C0(v86, v88, &v304);
        v302 = v89;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, &v303, v293);
        swift_release_n(v68, 2);
        v90 = v88;
        v66 = (uint64_t)v291;
        swift_bridgeObjectRelease(v90);
        *(_WORD *)(v74 + 22) = 2048;
        v302 = v67;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, &v303, v74 + 24);
        _os_log_impl((void *)&_mh_execute_header, v71, (os_log_type_t)v294, "Not moving asset %s to dynamic mode in %s: in use by %ld requests", (uint8_t *)v74, 0x20u);
        v91 = v295;
        swift_arrayDestroy(v295, 2);
        swift_slowDealloc(v91, -1, -1);
        swift_slowDealloc(v74, -1, -1);

      }
      else
      {

        swift_release_n(v68, 4);
      }
      v183 = v299;
      v184 = v300;
      v185 = sub_10007BE3C();
      v186 = swift_allocError(&type metadata for InferenceProviderAssetManagerInternalError, v185, 0, 0);
      *v187 = 0;
      v187[1] = 0;
      swift_willThrow(v186, v187, v188, v189, v190, v191, v192, v193, v280, v281, v282, v283, v284, v285);
      v194 = *(void (**)(uint64_t, uint64_t))(v183 + 8);
      v195 = State;
      v194(v66, State);
      return ((uint64_t (*)(char *, uint64_t))v194)(v184, v195);
    }
    else
    {
      if (qword_1000FB110 != -1)
        swift_once(&qword_1000FB110, sub_100080FE0);
      v157 = type metadata accessor for Logger(0);
      v158 = sub_100002FF8(v157, (uint64_t)qword_1000FD9C8);
      v159 = swift_retain_n(v68, 4);
      v160 = Logger.logObject.getter(v159);
      v161 = static os_log_type_t.default.getter();
      v162 = v161;
      if (os_log_type_enabled(v160, v161))
      {
        v163 = swift_slowAlloc(22, -1);
        v285 = (uint64_t (*)(char *, uint64_t))v158;
        v164 = v163;
        v284 = swift_slowAlloc(64, -1);
        v304 = v284;
        *(_DWORD *)v164 = 136315394;
        v283 = v160;
        v165 = type metadata accessor for InferenceProviderAssetDescriptor(0);
        HIDWORD(v282) = v162;
        v166 = v165;
        sub_10008B304(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
        v168 = dispatch thunk of CustomStringConvertible.description.getter(v166, v167);
        v170 = v169;
        sub_1000102C0(v168, v169, &v304);
        v302 = v171;
        v281 = &v303;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, &v303, v164 + 4);
        swift_release_n(v68, 2);
        swift_bridgeObjectRelease(v170);
        *(_WORD *)(v164 + 12) = 2080;
        v280 = v164 + 14;
        v172 = *(_QWORD *)(v68 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
        v173 = *(_QWORD *)(v68 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
        sub_10001C830((_QWORD *)(v68 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection), v172);
        v174 = v297;
        (*(void (**)(uint64_t, uint64_t))(v173 + 8))(v172, v173);
        sub_10008B304(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
        v175 = v298;
        v177 = dispatch thunk of CustomStringConvertible.description.getter(v298, v176);
        v179 = v178;
        (*(void (**)(char *, uint64_t))(v296 + 8))(v174, v175);
        sub_1000102C0(v177, v179, &v304);
        v302 = v180;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, v281, v280);
        swift_release_n(v68, 2);
        swift_bridgeObjectRelease(v179);
        v181 = v283;
        _os_log_impl((void *)&_mh_execute_header, v283, BYTE4(v282), "moveToDynamicModeIfNecessary entering for asset %s with %s", (uint8_t *)v164, 0x16u);
        v182 = v284;
        swift_arrayDestroy(v284, 2);
        swift_slowDealloc(v182, -1, -1);
        swift_slowDealloc(v164, -1, -1);

      }
      else
      {

        swift_release_n(v68, 4);
      }
      v196 = v299;
      v197 = *(void (**)(char *))(v299 + 104);
      LODWORD(v284) = enum case for LoadState.dynamicMode(_:);
      v198 = State;
      v197(v20);
      sub_10008B304(&qword_1000FCD38, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState, (uint64_t)&protocol conformance descriptor for LoadState);
      v200 = v199;
      v201 = dispatch thunk of static Equatable.== infix(_:_:)(v300, v20, v198, v199);
      v202 = *(void (**)(char *, uint64_t))(v196 + 8);
      v202(v20, v198);
      v285 = (uint64_t (*)(char *, uint64_t))v202;
      if ((v201 & 1) != 0)
      {
        v203 = v290;
        v204 = swift_retain_n(v290, 4);
        v205 = Logger.logObject.getter(v204);
        v206 = static os_log_type_t.default.getter();
        v207 = v206;
        if (os_log_type_enabled(v205, v206))
        {
          v208 = swift_slowAlloc(22, -1);
          v299 = swift_slowAlloc(64, -1);
          v304 = v299;
          *(_DWORD *)v208 = 136315394;
          LODWORD(v293) = v207;
          v209 = type metadata accessor for InferenceProviderAssetDescriptor(0);
          sub_10008B304(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
          v211 = dispatch thunk of CustomStringConvertible.description.getter(v209, v210);
          v213 = v212;
          sub_1000102C0(v211, v212, &v304);
          v302 = v214;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, &v303, v208 + 4);
          swift_release_n(v203, 2);
          swift_bridgeObjectRelease(v213);
          *(_WORD *)(v208 + 12) = 2080;
          v216 = *(_QWORD *)(v203
                           + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection
                           + 24);
          v215 = *(_QWORD *)(v203
                           + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection
                           + 32);
          sub_10001C830((_QWORD *)(v203 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection), v216);
          v217 = v297;
          (*(void (**)(uint64_t, uint64_t))(v215 + 8))(v216, v215);
          sub_10008B304(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
          v218 = v298;
          v220 = dispatch thunk of CustomStringConvertible.description.getter(v298, v219);
          v222 = v221;
          (*(void (**)(char *, uint64_t))(v296 + 8))(v217, v218);
          sub_1000102C0(v220, v222, &v304);
          v302 = v223;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, &v303, v208 + 14);
          swift_release_n(v203, 2);
          swift_bridgeObjectRelease(v222);
          _os_log_impl((void *)&_mh_execute_header, v205, (os_log_type_t)v293, "Not moving asset %s to dynamic mode in %s: already in dynamic mode", (uint8_t *)v208, 0x16u);
          v224 = v299;
          swift_arrayDestroy(v299, 2);
          swift_slowDealloc(v224, -1, -1);
          swift_slowDealloc(v208, -1, -1);
        }
        else
        {
          swift_release_n(v203, 4);
        }

        v249 = State;
        v250 = v285;
        v285(v291, State);
        result = v250(v300, v249);
        v294->isa = 0;
      }
      else
      {
        ((void (*)(char *, _QWORD, uint64_t))v197)(v20, enum case for LoadState.unloaded(_:), v198);
        v225 = dispatch thunk of static Equatable.== infix(_:_:)(v300, v20, v198, v200);
        v202(v20, v198);
        if ((v225 & 1) != 0)
        {
          v226 = v290;
          v227 = swift_retain_n(v290, 4);
          v228 = Logger.logObject.getter(v227);
          v229 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v228, v229))
          {
            v230 = swift_slowAlloc(22, -1);
            v299 = swift_slowAlloc(64, -1);
            v304 = v299;
            *(_DWORD *)v230 = 136315394;
            v231 = type metadata accessor for InferenceProviderAssetDescriptor(0);
            sub_10008B304(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
            v233 = dispatch thunk of CustomStringConvertible.description.getter(v231, v232);
            v235 = v234;
            sub_1000102C0(v233, v234, &v304);
            v302 = v236;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, &v303, v230 + 4);
            swift_release_n(v226, 2);
            swift_bridgeObjectRelease(v235);
            *(_WORD *)(v230 + 12) = 2080;
            v295 = v230 + 14;
            v237 = *(_QWORD *)(v226
                             + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection
                             + 24);
            v238 = *(_QWORD *)(v226
                             + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection
                             + 32);
            sub_10001C830((_QWORD *)(v226 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection), v237);
            v239 = v297;
            (*(void (**)(uint64_t, uint64_t))(v238 + 8))(v237, v238);
            sub_10008B304(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
            v240 = v298;
            v242 = dispatch thunk of CustomStringConvertible.description.getter(v298, v241);
            v244 = v243;
            (*(void (**)(char *, uint64_t))(v296 + 8))(v239, v240);
            sub_1000102C0(v242, v244, &v304);
            v302 = v245;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, &v303, v295);
            swift_release_n(v226, 2);
            v246 = (uint64_t)v291;
            swift_bridgeObjectRelease(v244);
            _os_log_impl((void *)&_mh_execute_header, v228, v229, "Attempting to move an unloaded asset %s to dynamic mode in %s", (uint8_t *)v230, 0x16u);
            v247 = v299;
            swift_arrayDestroy(v299, 2);
            swift_slowDealloc(v247, -1, -1);
            swift_slowDealloc(v230, -1, -1);

            v248 = v300;
          }
          else
          {

            swift_release_n(v226, 4);
            v248 = v300;
            v246 = (uint64_t)v291;
          }
          v267 = type metadata accessor for ModelManagerError(0);
          sub_10008B304((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError, (uint64_t)&protocol conformance descriptor for ModelManagerError);
          swift_allocError(v267, v268, 0, 0);
          v270 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v267 - 8) + 104))(v269, enum case for ModelManagerError.internalError(_:), v267);
          swift_willThrow(v270, v271, v272, v273, v274, v275, v276, v277, v280, v281, v282, v283, v284, v285);
          v278 = State;
          v279 = v285;
          v285((char *)v246, State);
          return v279(v248, v278);
        }
        else
        {
          v251 = (void (*)(char *, char *, uint64_t))v288;
          v288(v20, (uint64_t)v300, v198);
          v252 = v289;
          v202(v289, v198);
          ((void (*)(char *, _QWORD, uint64_t))v197)(v252, v284, v198);
          v253 = type metadata accessor for TaskPriority(0);
          sub_100005630(v293, 1, 1, v253);
          v251(v287, v20, v198);
          sub_10008B304(&qword_1000FB728, type metadata accessor for InferenceProviderAssetManager, (uint64_t)&unk_1000CC408);
          v255 = v254;
          v256 = v299;
          v257 = *(unsigned __int8 *)(v299 + 80);
          v258 = (v257 + 40) & ~v257;
          v259 = (v9 + v258 + 7) & 0xFFFFFFFFFFFFFFF8;
          v260 = (char *)swift_allocObject(&unk_1000F40F0, v259 + 8, v257 | 7);
          v261 = v292;
          *((_QWORD *)v260 + 2) = v292;
          *((_QWORD *)v260 + 3) = v255;
          v262 = v290;
          *((_QWORD *)v260 + 4) = v290;
          (*(void (**)(char *, char *, uint64_t))(v256 + 32))(&v260[v258], v287, v198);
          *(_QWORD *)&v260[v259] = v261;
          swift_retain_n(v261, 2);
          swift_retain(v262);
          sub_10000DB68(v293, (uint64_t)&unk_1000FDC08, (uint64_t)v260);
          v264 = v263;
          v265 = (void (*)(char *, uint64_t))v285;
          v285(v20, v198);
          v265(v291, v198);
          v265(v300, v198);
          v266 = v286;
          swift_release(*(_QWORD *)(a1 + v286));
          *(_QWORD *)(a1 + v266) = v264;
          v294->isa = v264;
          return swift_retain(v264);
        }
      }
    }
  }
  else
  {
    if (qword_1000FB110 != -1)
      swift_once(&qword_1000FB110, sub_100080FE0);
    v104 = type metadata accessor for Logger(0);
    sub_100002FF8(v104, (uint64_t)qword_1000FD9C8);
    v106 = v300;
    v105 = State;
    v107 = v288;
    v288(v14, (uint64_t)v300, State);
    v107(v11, v66, v105);
    v108 = v290;
    v109 = swift_retain_n(v290, 4);
    v110 = Logger.logObject.getter(v109);
    v111 = static os_log_type_t.fault.getter();
    v112 = v111;
    if (os_log_type_enabled(v110, v111))
    {
      v113 = swift_slowAlloc(42, -1);
      v295 = swift_slowAlloc(128, -1);
      v304 = v295;
      *(_DWORD *)v113 = 136315906;
      sub_10008B304(&qword_1000FCD48, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState, (uint64_t)&protocol conformance descriptor for LoadState);
      v115 = v114;
      v294 = v110;
      v116 = dispatch thunk of CustomStringConvertible.description.getter(State, v114);
      v118 = v117;
      sub_1000102C0(v116, v117, &v304);
      v302 = v119;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, &v303, v113 + 4);
      swift_bridgeObjectRelease(v118);
      v120 = *(void (**)(char *, uint64_t))(v299 + 8);
      v120(v14, State);
      *(_WORD *)(v113 + 12) = 2080;
      v121 = dispatch thunk of CustomStringConvertible.description.getter(State, v115);
      v123 = v122;
      sub_1000102C0(v121, v122, &v304);
      v302 = v124;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, &v303, v113 + 14);
      swift_bridgeObjectRelease(v123);
      v120(v11, State);
      *(_WORD *)(v113 + 22) = 2080;
      v125 = type metadata accessor for InferenceProviderAssetDescriptor(0);
      sub_10008B304(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
      v127 = dispatch thunk of CustomStringConvertible.description.getter(v125, v126);
      v129 = v128;
      sub_1000102C0(v127, v128, &v304);
      v302 = v130;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, &v303, v113 + 24);
      swift_release_n(v108, 2);
      swift_bridgeObjectRelease(v129);
      *(_WORD *)(v113 + 32) = 2080;
      v131 = *(_QWORD *)(v108 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
      v132 = *(_QWORD *)(v108 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
      sub_10001C830((_QWORD *)(v108 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection), v131);
      v133 = *(void (**)(uint64_t, uint64_t))(v132 + 8);
      LODWORD(v293) = v112;
      v134 = v297;
      v133(v131, v132);
      sub_10008B304(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
      v135 = v298;
      v137 = dispatch thunk of CustomStringConvertible.description.getter(v298, v136);
      v139 = v138;
      (*(void (**)(char *, uint64_t))(v296 + 8))(v134, v135);
      sub_1000102C0(v137, v139, &v304);
      v302 = v140;
      v141 = v299;
      v66 = (uint64_t)v291;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, &v303, v113 + 34);
      swift_release_n(v108, 2);
      v142 = v139;
      v106 = v300;
      swift_bridgeObjectRelease(v142);
      v143 = v294;
      _os_log_impl((void *)&_mh_execute_header, v294, (os_log_type_t)v293, "moveToDynamicModeIfNecessary called with unmatching states (%s != %s) for %s with %s", (uint8_t *)v113, 0x2Au);
      v144 = v295;
      swift_arrayDestroy(v295, 4);
      swift_slowDealloc(v144, -1, -1);
      v145 = v113;
      v105 = State;
      swift_slowDealloc(v145, -1, -1);

    }
    else
    {
      v141 = v299;
      v120 = *(void (**)(char *, uint64_t))(v299 + 8);
      v120(v14, v105);
      v120(v11, v105);

      swift_release_n(v108, 4);
    }
    (*(void (**)(char *, char *, uint64_t))(v141 + 24))(v289, v106, v105);
    v146 = type metadata accessor for ModelManagerError(0);
    sub_10008B304((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError, (uint64_t)&protocol conformance descriptor for ModelManagerError);
    swift_allocError(v146, v147, 0, 0);
    v149 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v146 - 8) + 104))(v148, enum case for ModelManagerError.internalError(_:), v146);
    swift_willThrow(v149, v150, v151, v152, v153, v154, v155, v156, v280, v281, v282, v283, v284, v285);
    v120((char *)v66, v105);
    return ((uint64_t (*)(char *, uint64_t))v120)(v106, v105);
  }
  return result;
}

uint64_t sub_10008A0A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t State;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  v8 = type metadata accessor for AssetCost(0);
  v6[8] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[9] = v9;
  v6[10] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result(0);
  v6[11] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[12] = v11;
  v6[13] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100002F78(&qword_1000FD7E0);
  v6[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100002F78(&qword_1000FD820);
  v6[15] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for InferenceProviderDescriptor(0);
  v6[16] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v6[17] = v15;
  v6[18] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason(0);
  v6[19] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v6[20] = v17;
  v6[21] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for LoadState(0);
  v6[22] = State;
  v19 = *(_QWORD *)(State - 8);
  v6[23] = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[24] = swift_task_alloc(v20);
  v6[25] = swift_task_alloc(v20);
  v21 = sub_100002F78(&qword_1000FB2A0);
  v6[26] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v6[27] = v22;
  v23 = (*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[28] = swift_task_alloc(v23);
  v6[29] = swift_task_alloc(v23);
  v24 = (*(_QWORD *)(*(_QWORD *)(sub_100002F78(&qword_1000FB920) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[30] = swift_task_alloc(v24);
  v6[31] = swift_task_alloc(v24);
  v6[32] = swift_task_alloc(v24);
  return swift_task_switch(sub_10008A280, a6, 0);
}

uint64_t sub_10008A280()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t, uint64_t);
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;

  v57 = *(_QWORD *)(v0 + 256);
  v62 = *(_QWORD *)(v0 + 248);
  v50 = *(_QWORD *)(v0 + 232);
  v59 = *(_QWORD *)(v0 + 216);
  v63 = *(_QWORD *)(v0 + 208);
  v1 = *(_QWORD *)(v0 + 200);
  v60 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 184);
  v53 = v2;
  v52 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 152);
  v43 = *(_QWORD *)(v0 + 136);
  v44 = *(_QWORD *)(v0 + 128);
  v61 = *(_QWORD *)(v0 + 120);
  v51 = *(_QWORD *)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 40);
  v54 = *(_QWORD *)(v0 + 48);
  sub_100005630(v57, 1, 1, v63);
  sub_10008C144();
  sub_10008C120();
  v8 = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_telemetryManager;
  *(_QWORD *)(v0 + 264) = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_telemetryManager;
  v47 = *(_QWORD *)(v7 + v8 + 32);
  v48 = *(_QWORD *)(v7 + v8 + 24);
  v49 = sub_10001C830((_QWORD *)(v7 + v8), v48);
  v9 = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_descriptor;
  *(_QWORD *)(v0 + 272) = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_descriptor;
  v58 = v7 + v9;
  v10 = InferenceProviderAssetDescriptor.identifier.getter(v49);
  v45 = v11;
  v46 = v10;
  v16 = InferenceProviderAssetDescriptor.version.getter(v10, v11, v12, v13, v14, v15);
  v41 = v17;
  v42 = v16;
  v18 = enum case for LoadState.dynamicMode(_:);
  v56 = enum case for LoadState.dynamicMode(_:);
  *(_DWORD *)(v0 + 360) = enum case for LoadState.dynamicMode(_:);
  v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104);
  *(_QWORD *)(v0 + 280) = v55;
  sub_10001EB74(v1, v18, v55);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v4, enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.policyChange(_:), v6);
  v19 = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection;
  *(_QWORD *)(v0 + 288) = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection;
  v20 = (_QWORD *)(v7 + v19);
  v21 = *(_QWORD *)(v7 + v19 + 24);
  sub_10001C830(v20, v21);
  v22 = sub_10008C0F8(v21);
  InferenceProviderDescriptor.id.getter(v22);
  sub_10008C310();
  v23 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
  *(_QWORD *)(v0 + 296) = v23;
  v23(v5, v44);
  sub_10002B26C(v62, v24, v25, v63);
  v26 = sub_100002F78(&qword_1000FB2D8);
  v29 = sub_10008BDD0(v61, v27, v28, v26);
  *(_QWORD *)(v0 + 304) = v29;
  sub_10002B26C(v51, v30, v31, v29);
  *(_QWORD *)(v0 + 312) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 24))(v50, v46, v45, v42, v41, v54, v1, v4, v5, v21, v62, v61, v51, v48, v47);
  sub_10001E4C0();
  sub_10001DA38();
  sub_10001D8B4();
  sub_10002AD5C(v51, &qword_1000FD7E0);
  sub_10002AD5C(v61, &qword_1000FD820);
  sub_10002AD5C(v62, &qword_1000FB920);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v6);
  v32 = *(uint64_t (**)(uint64_t, uint64_t))(v53 + 8);
  *(_QWORD *)(v0 + 320) = v32;
  sub_10001E808(v1, v32);
  v33 = sub_100044984();
  sub_10002AD5C(v33, v34);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 16))(v57, v50, v63);
  sub_100005630(v57, 0, 1, v63);
  v35 = v20[3];
  v36 = v20[4];
  sub_10001C830(v20, v35);
  v55(v60, v56, v52);
  v37 = *(int **)(v36 + 24);
  v38 = v37[1];
  v64 = (int *)((char *)v37 + *v37);
  sub_10001E194();
  v39 = (_QWORD *)swift_task_alloc(v38);
  *(_QWORD *)(v0 + 328) = v39;
  *v39 = v0;
  v39[1] = sub_10008A5D4;
  return ((uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))v64)(v58, *(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 232), v35, v36);
}

uint64_t sub_10008A5D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_10008C030();
  *(_QWORD *)(v0 + 336) = v1;
  swift_task_dealloc(v2);
  (*(void (**)(_QWORD, _QWORD))(v0 + 320))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176));
  sub_10001E10C();
  return sub_10001D6DC();
}

uint64_t sub_10008A630()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  void (*v43)(uint64_t, _QWORD, uint64_t);

  v37 = *(_QWORD *)(v0 + 312);
  v35 = *(_QWORD *)(v0 + 304);
  v42 = *(_DWORD *)(v0 + 360);
  v43 = *(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 280);
  v36 = *(_QWORD *)(v0 + 232);
  v38 = *(_QWORD *)(v0 + 256);
  v39 = *(_QWORD *)(v0 + 208);
  v40 = *(_QWORD *)(v0 + 200);
  v41 = *(_QWORD *)(v0 + 176);
  v34 = *(_QWORD *)(v0 + 112);
  v1 = *(_QWORD *)(v0 + 96);
  v31 = *(_QWORD *)(v0 + 88);
  v32 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = (_QWORD *)(v2 + *(_QWORD *)(v0 + 264));
  sub_1000AF8B8(*(_QWORD *)(v2 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_path), *(_QWORD *)(v2 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_path + 8));
  v4 = v3[3];
  v5 = v3[4];
  v33 = sub_10008C338(v3);
  v30 = InferenceProviderAssetDescriptor.identifier.getter(v33);
  v7 = v6;
  v29 = InferenceProviderAssetDescriptor.version.getter(v30, v6, v8, v9, v10, v11);
  v13 = v12;
  v14 = AssetCost.onDeviceMemory.getter(v29);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 104))(v32, enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result.success(_:), v31);
  sub_10002B26C(v34, v15, v16, v35);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 32))(v36, v30, v7, v29, v13, v14, v32, v37);
  swift_release(v37);
  sub_10002B684();
  v17 = sub_10001D8B4();
  sub_10007D78C(v17, &qword_1000FD7E0);
  sub_10001EB58(v32, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_10002AD5C(v38, &qword_1000FB920);
  sub_10008C168(v38, v18, v19, v20, v21, v22, v23, v24, 0, v34, v4, v5, v29, v30, v31, v32, (uint64_t)v33, v34, v35,
    v36,
    v37,
    v38,
    v39);
  v43(v40, v42, v41);
  v25 = (_QWORD *)swift_task_alloc(dword_1000FDBFC);
  *(_QWORD *)(v0 + 344) = v25;
  *v25 = v0;
  v25[1] = sub_10008A7FC;
  v26 = sub_10002BD0C(*(_QWORD *)(v0 + 56));
  return sub_10008BC84(v26, v27);
}

uint64_t sub_10008A7FC()
{
  uint64_t v0;
  uint64_t v1;

  sub_10001DB38();
  v1 = *(_QWORD *)(v0 + 200);
  sub_10001D680(*(_QWORD *)(v0 + 344));
  sub_10008C210(v1);
  return sub_10001D6DC();
}

#error "10008A8E4: call analysis failed (funcsize=46)"

uint64_t sub_10008A914()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 352));
  sub_10001D7B8();
  return sub_10001D674();
}

#error "10008A9D8: call analysis failed (funcsize=45)"

uint64_t sub_10008AA04()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  os_log_type_t v7;
  uint64_t v8;
  _QWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  _QWORD *v72;
  os_log_type_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  NSObject *v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t);
  uint64_t v82;

  v81 = *(void (**)(uint64_t, uint64_t))(v0[27] + 8);
  v81(v0[29], v0[26]);
  if (qword_1000FB110 != -1)
    swift_once(&qword_1000FB110, sub_100080FE0);
  v1 = v0[5];
  v2 = v0[42];
  v3 = sub_10001DD64();
  v4 = sub_100002FF8(v3, (uint64_t)qword_1000FD9C8);
  sub_10001D834(v1);
  sub_10002B5D4();
  sub_10001E194();
  sub_10002B5D4();
  v5 = sub_10001E194();
  v6 = (void *)v4;
  Logger.logObject.getter(v5);
  v7 = sub_10001E9D0();
  if (sub_100039E20(v7))
  {
    v70 = (void (*)(uint64_t, uint64_t))v0[37];
    v66 = v0[18];
    v68 = v0[16];
    v8 = v0[5];
    v9 = (_QWORD *)(v8 + v0[36]);
    v78 = v4;
    v10 = (_DWORD *)sub_10001D8D4(32);
    v76 = (_QWORD *)sub_10001D8D4(8);
    v82 = sub_10001D8D4(64);
    *v10 = 136315650;
    v73 = v2;
    v11 = sub_10007D478();
    sub_10008B304(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v11, v12);
    sub_10008BD3C(v13, v14);
    v0[2] = v15;
    sub_10008C29C((uint64_t)(v0 + 2), (uint64_t)(v0 + 3));
    sub_10001EBB0(v8);
    sub_10001E034();
    sub_10008BDB8();
    v17 = v9[3];
    v16 = v9[4];
    sub_10008C220(v9);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v16);
    sub_10008B304(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
    sub_10008C2E4();
    sub_10008BFC4(v18, v19);
    v70(v66, v68);
    sub_10008C228();
    v0[3] = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4);
    sub_10001EBB0(v8);
    sub_10001D8B4();
    sub_10008BD28();
    v21 = sub_10008C294();
    v0[4] = v21;
    sub_10002B3F0((uint64_t)(v0 + 4), (uint64_t)(v0 + 5));
    *v76 = v21;
    sub_10008BBE4();
    sub_10008BBE4();
    v6 = v78;
    sub_10008C0C0((void *)&_mh_execute_header, v78, v73, "Failed to move asset %s to dynamic mode in %s: %@");
    sub_100002F78(&qword_1000FB8E0);
    sub_10001DBB8((uint64_t)v76);
    sub_10001D790((uint64_t)v76);
    sub_10002BA20(v82);
    sub_10001D790(v82);
    sub_10001D790((uint64_t)v10);
  }
  else
  {
    sub_100044904(v0[5]);
    sub_10008BBE4();
    sub_10008BBE4();
  }

  v22 = v0[30];
  v23 = v0[26];
  sub_10008B6B4(v0[32], v22, &qword_1000FB920);
  if (sub_100005700(v22, 1, v23) == 1)
  {
    v24 = v0[30];
    swift_release(v0[39]);
    sub_10002AD5C(v24, &qword_1000FB920);
  }
  else
  {
    v25 = v0[42];
    v79 = v0[39];
    v74 = v0[28];
    v77 = v0[38];
    v80 = v0[26];
    v71 = v0[14];
    v26 = v0[12];
    v65 = v0[13];
    v67 = v0[11];
    v59 = v0[9];
    v60 = v0[8];
    v27 = (_QWORD *)(v0[5] + v0[33]);
    (*(void (**)(void))(v0[27] + 32))();
    v29 = v27[3];
    v28 = v27[4];
    v72 = sub_10008C220(v27);
    v63 = InferenceProviderAssetDescriptor.identifier.getter(v72);
    v31 = v30;
    v61 = InferenceProviderAssetDescriptor.version.getter(v63, v30, v32, v33, v34, v35);
    v37 = v36;
    v38 = static AssetCost.zero.getter();
    v39 = AssetCost.onDeviceMemory.getter(v38);
    sub_10008C340(v59);
    v40 = v65;
    sub_10001EB74(v65, enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result.failure(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 104));
    v41 = v71;
    sub_10008C168(v71, v42, v43, v44, v45, v46, v47, v48, v55, v56, v57, v58, v59, v60, v61, v63, v65, v67, v26,
      v71,
      (uint64_t)v72,
      v74,
      v77);
    v49 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 32);
    swift_errorRetain(v25);
    v49(v75, v64, v31, v62, v37, v39, v40, v79, v25, v41, v29, v28);
    sub_10002B88C();
    swift_errorRelease(v25);
    sub_10001EADC();
    v50 = sub_10001E8A8();
    sub_10007FFC8(v50, &qword_1000FD7E0);
    sub_10008C340(v69);
    v81(v75, v80);
  }
  v51 = (_QWORD *)swift_task_alloc(dword_1000FDBFC);
  v0[44] = v51;
  *v51 = v0;
  v51[1] = sub_10008A914;
  v52 = sub_10002BD0C(v0[7]);
  return sub_10008BC84(v52, v53);
}

uint64_t sub_10008AE98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  sub_10001D810();
  v31 = v1;
  v32 = v2;
  v4 = v3;
  v6 = v5;
  sub_10002BA0C();
  sub_10008C178();
  __chkstk_darwin(v7);
  sub_10001E684();
  v10 = v8 - v9;
  __chkstk_darwin(v11);
  v13 = (char *)&v30 - v12;
  v14 = sub_10008C128();
  v16 = v15;
  v17 = InferenceProviderAssetDescriptor.identifier.getter();
  if (v14 == v17 && v16 == v18)
  {
    swift_bridgeObjectRelease_n(v16, 2);
  }
  else
  {
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v17, v18, 0);
    swift_bridgeObjectRelease(v16);
    sub_10001E034();
    v21 = 0;
    if ((v20 & 1) == 0)
      return v21 & 1;
  }
  v22 = (_QWORD *)(v6 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
  v23 = *(_QWORD *)(v6 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
  sub_10001C830(v22, v23);
  sub_10008C0F8(v23);
  v24 = (_QWORD *)(v4 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
  v25 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
  v26 = v24[4];
  sub_10008C338(v24);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v26);
  v21 = ((uint64_t (*)(char *, uint64_t))static InferenceProviderDescriptor.== infix(_:_:))(v13, v10);
  v27 = *(void (**)(uint64_t))(v0 + 8);
  v28 = sub_100044984();
  v27(v28);
  sub_10008C210((uint64_t)v13);
  return v21 & 1;
}

uint64_t sub_10008B000()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_10001E9F8();
  v4 = v3;
  v5 = sub_10002BA0C();
  sub_10008C260();
  __chkstk_darwin(v6);
  sub_10007F7A4();
  v7 = InferenceProviderAssetDescriptor.identifier.getter();
  String.hash(into:)(v4, v7, v8);
  sub_10001E034();
  v9 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
  sub_10008C338((_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection));
  sub_10008C0F8(v9);
  sub_10008B304(&qword_1000FD9B8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderDescriptor);
  dispatch thunk of Hashable.hash(into:)(v4, v5, v10);
  return sub_10007E7EC(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
}

void sub_10008B0E8()
{
  _QWORD v0[9];

  Hasher.init(_seed:)(v0, 0);
  sub_10008B000();
  Hasher._finalize()();
  sub_1000449BC();
}

void sub_10008B11C()
{
  sub_10008B0E8();
}

uint64_t sub_10008B13C()
{
  return sub_10008B000();
}

void sub_10008B15C(uint64_t a1)
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, a1);
  sub_10008B000();
  Hasher._finalize()();
  sub_1000449BC();
}

uint64_t sub_10008B190()
{
  return sub_10008AE98() & 1;
}

uint64_t sub_10008B1B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  uint64_t v14;
  uint64_t v15;

  sub_10001E9F8();
  v2 = sub_10002BA0C();
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_10007F78C();
  v14 = ((uint64_t (*)(void))InferenceProviderAssetDescriptor.description.getter)();
  v15 = v4;
  swift_bridgeObjectRetain(v4);
  v5._countAndFlagsBits = 8250;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  sub_10001DA38();
  v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
  v7 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
  sub_10001C830((_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection), v6);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  v9 = ((uint64_t (*)(uint64_t))InferenceProviderDescriptor.description.getter)(v8);
  v11 = v10;
  sub_10007E7EC(v1, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  swift_bridgeObjectRetain(v15);
  v12._countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);
  sub_10001E4C0();
  sub_10001DA38();
  return v14;
}

uint64_t sub_10008B2B8()
{
  return sub_10008B1B0();
}

void sub_10008B2D8()
{
  sub_10008B304(&qword_1000FDBC8, type metadata accessor for InferenceProviderAsset, (uint64_t)&unk_1000CC5E4);
}

void sub_10008B304(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5;

  if (!*a1)
  {
    v5 = a2(255);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }
  sub_100006C14();
}

uint64_t sub_10008B340(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008B384(uint64_t a1, uint64_t a2)
{
  return swift_weakCopyInit(a2, a1);
}

uint64_t sub_10008B394(uint64_t a1)
{
  swift_weakDestroy(a1);
  return a1;
}

uint64_t sub_10008B3B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v1 = sub_10007DCE8();
  v2 = *(_QWORD *)(v1 - 8);
  v18 = *(unsigned __int8 *)(v2 + 80);
  v3 = (v18 + 40) & ~v18;
  v4 = *(_QWORD *)(v2 + 64);
  v5 = sub_10007D89C();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v3 + v4 + v7) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  v10 = *(_QWORD *)(sub_100002F78(&qword_1000FD7E0) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v8 + v9 + v11) & ~v11;
  v17 = *(_QWORD *)(v10 + 64);
  sub_10002BBD8();
  sub_10001E390();
  sub_10007E7EC(v0 + v3, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_10001EB58(v0 + v8, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  v13 = sub_10008C2D8();
  if (!sub_10007E424(v13))
    sub_10001EB58(v1, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8));
  v14 = (v17 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = v14 + 8;
  swift_release(*(_QWORD *)(v0 + v14));
  return swift_deallocObject(v0, v15, v18 | v7 | v11 | 7);
}

uint64_t sub_10008B4D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_10007DCE8();
  sub_10007D89C();
  sub_10007F700();
  sub_100002F78(&qword_1000FD7E0);
  sub_10007F700();
  sub_10008BF54();
  v3 = *(_QWORD *)(v0 + v2);
  v4 = (_QWORD *)swift_task_alloc(dword_1000FDBEC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10008BA00;
  sub_10008BF04();
  return sub_1000876B4(v5, v6, v7, v8, v9, v10, v11, v3);
}

uint64_t sub_10008B590()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  sub_10001E9F8();
  v1 = *(_QWORD *)(sub_10007DCE8() - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 40) & ~v2;
  v4 = v2 | 7;
  v5 = (*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10002BBD8();
  sub_10001E390();
  sub_10007E7EC(v0 + v3, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  swift_release(*(_QWORD *)(v0 + v5));
  return swift_deallocObject(v0, v5 + 8, v4);
}

uint64_t sub_10008B614(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  sub_10007DCE8();
  sub_10008BF54();
  v8 = v1 + v7;
  v10 = *(_QWORD *)(v1 + v9);
  v11 = (_QWORD *)swift_task_alloc(dword_1000FDC04);
  *(_QWORD *)(v3 + 16) = v11;
  *v11 = v3;
  v11[1] = sub_10008BA00;
  return sub_10008A0A4(a1, v2, v4, v5, v8, v10);
}

uint64_t sub_10008B6A4(uint64_t a1, uint64_t a2)
{
  return swift_weakTakeInit(a2, a1);
}

void sub_10008B6B4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_100049070(a1, a2, a3);
  sub_10001EBE8(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  sub_100006C14();
}

uint64_t sub_10008B6E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(sub_10007D89C() - 8);
  v25 = *(unsigned __int8 *)(v1 + 80);
  v2 = (v25 + 48) & ~v25;
  v3 = v2 + *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(sub_100002F78(&qword_1000FB920) - 8);
  v24 = *(unsigned __int8 *)(v4 + 80);
  v5 = (v3 + v24) & ~v24;
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(sub_100002F78(&qword_1000FD820) - 8);
  v23 = *(unsigned __int8 *)(v7 + 80);
  v8 = (v5 + v6 + v23) & ~v23;
  v9 = *(_QWORD *)(v7 + 64);
  v21 = sub_10007DCE8();
  v10 = *(_QWORD *)(v21 - 8);
  v20 = *(unsigned __int8 *)(v10 + 80);
  v11 = (v8 + v9 + v20) & ~v20;
  v12 = *(_QWORD *)(v10 + 64);
  v13 = *(_QWORD *)(sub_100002F78(&qword_1000FD7E0) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v11 + v12 + v14;
  v22 = *(_QWORD *)(v13 + 64);
  sub_10002BBD8();
  sub_10001E390();
  swift_release(*(_QWORD *)(v0 + 40));
  sub_10001EB58(v0 + v2, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  v16 = sub_100002F78(&qword_1000FB2A0);
  if (!sub_10008C130(v16))
    sub_10008C01C();
  v17 = sub_100002F78(&qword_1000FB2D8);
  if (!sub_10008C130(v17))
    sub_10008C01C();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0 + v11, v21);
  v18 = sub_10008C2D8();
  if (!sub_10007E424(v18))
    sub_10001EB58(v5, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + v8 - 8) + 8));
  return swift_deallocObject(v0, (v15 & ~v14) + v22, v25 | v24 | v23 | v20 | v14 | 7);
}

void sub_10008B88C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_100049070(a1, a2, a3);
  sub_10001EBE8(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  sub_100006C14();
}

uint64_t sub_10008B8B8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_10007D89C();
  sub_100002F78(&qword_1000FB920);
  sub_10007F700();
  sub_100002F78(&qword_1000FD820);
  sub_10007F700();
  sub_10007DCE8();
  sub_10007F700();
  sub_100002F78(&qword_1000FD7E0);
  v1 = (_QWORD *)swift_task_alloc(dword_1000FDC14);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10008B9C4;
  sub_10008BF04();
  sub_10002B574();
  return sub_10008592C(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10008B9C4()
{
  uint64_t (**v0)(void);

  sub_10001D680(*((_QWORD *)*v0 + 2));
  return v0[1]();
}

uint64_t sub_10008BA08()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 152) = v0 + 5;
  *(_QWORD *)(v2 - 136) = v0 + 8;
  *(_QWORD *)(v2 - 168) = v0[38];
  *(_QWORD *)(v2 - 176) = v0[35];
  *(_QWORD *)(v2 - 160) = v0[32];
  *(_QWORD *)(v2 - 104) = v0[29];
  *(_QWORD *)(v2 - 96) = v1;
  return type metadata accessor for OneShotRequest(0);
}

uint64_t sub_10008BA80()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, _QWORD, uint64_t);
  uint64_t v3;
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v1 - 120);
  *(_QWORD *)(v1 - 104) = v0[38];
  v3 = v0[37];
  v4 = v0[35];
  *(_QWORD *)(v1 - 176) = v0[33];
  *(_QWORD *)(v1 - 120) = v0[32];
  return v2(v3, *(unsigned int *)(v1 - 128), v4);
}

uint64_t sub_10008BAE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  *(_QWORD *)(v38 - 160) = a1;
  sub_100005630(a31, 1, 1, a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a27 + 24))(a32, a26, a25, a24, a23, *(_QWORD *)(v38 - 168), a22, v34, v33, v37, v32, v35, a31, v36, a27);
}

uint64_t sub_10008BB50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  sub_100005630(a31, 1, 1, *(_QWORD *)(v38 - 160));
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(v37 + 32))(a32, *(_QWORD *)(v38 - 136), v36, *(_QWORD *)(v38 - 112), v32, v33, v35, *(_QWORD *)(v38 - 168), 0, a31, v34, v37);
}

uint64_t sub_10008BBA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(v20 + 32))(a19, a14, v22, v23, v26, v21, v24, a20, 0, a17, v25, v20);
}

uint64_t sub_10008BBE4()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_10008BC24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_WORD *)(v16 + 12) = 2080;
  v17 = a16[3];
  v18 = a16[4];
  sub_10001C830(a16, v17);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
}

uint64_t sub_10008BC60(uint64_t a1)
{
  return swift_retain_n(a1, 4);
}

uint64_t sub_10008BC68@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

void sub_10008BC74()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  sub_1000102C0(v0, v1, (uint64_t *)(v2 - 88));
}

uint64_t sub_10008BC84(uint64_t a1, uint64_t a2)
{
  return sub_100084450(a1, a2);
}

uint64_t sub_10008BCA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 304);
  *(_QWORD *)(v1 - 96) = *(_QWORD *)(v0 + 152);
  return swift_task_dealloc(v2);
}

uint64_t sub_10008BCC8()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0[36] + 16))(v0[38], v0[16] + v0[39], v0[35]);
}

uint64_t sub_10008BCF0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10008BD0C()
{
  return Task.value.getter();
}

uint64_t sub_10008BD28()
{
  uint64_t v0;
  uint64_t v1;

  *(_WORD *)(v0 + 22) = 2112;
  return swift_errorRetain(v1);
}

void sub_10008BD3C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  sub_1000102C0(a1, a2, (uint64_t *)(v2 - 80));
}

void sub_10008BD48(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;

  sub_1000102C0(v3, v4, a3);
}

uint64_t sub_10008BD54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)(v1 + a1);
  v4 = *(_QWORD *)(v1 + a1 + 24);
  v3 = *(_QWORD *)(v1 + a1 + 32);
  sub_10001C830(v2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v4, v3);
}

uint64_t sub_10008BD88@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + a1 + 24);
  v2 = *(_QWORD *)(v1 + a1 + 32);
  sub_10001C830((_QWORD *)(v1 + a1), v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v3, v2);
}

void sub_10008BDB8()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 2080;
}

uint64_t sub_10008BDC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return dispatch thunk of CustomStringConvertible.description.getter(v2, a2);
}

uint64_t sub_10008BDD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100005630(a1, 1, 1, a4);
  return type metadata accessor for AuditToken(0);
}

uint64_t sub_10008BDEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a19 + 8))(v20, a20);
}

uint64_t sub_10008BE08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 136) + 8))(v0, v1);
}

uint64_t sub_10008BE24()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10008B340(v1, v0);
}

uint64_t sub_10008BE30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v1, v2);
}

uint64_t sub_10008BE3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v1, v2);
}

uint64_t sub_10008BE4C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v3;

  v3 = sub_10001C830((_QWORD *)(*(_QWORD *)(v1 + 200) + v0), *(_QWORD *)(*(_QWORD *)(v1 + 200) + v0 + 24));
  return InferenceProviderAssetDescriptor.identifier.getter(v3);
}

uint64_t sub_10008BE78()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10007BDF8(v0, v1);
}

void sub_10008BE84()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  sub_10002ACC4(v0, v1);
}

void sub_10008BE90(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;

  sub_1000102C0(v3, v4, a3);
}

uint64_t sub_10008BE9C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10008B340(v0, v1);
}

uint64_t sub_10008BEA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)(v4 - 128) = v3;
  *(_QWORD *)(v4 - 120) = v2;
  return v2(v0, v3, v1);
}

uint64_t sub_10008BEC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 112) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(*(_QWORD *)(v3 - 152), v1 + 120, v2);
}

void sub_10008BEDC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  sub_100005700(v2, 1, a1);
  sub_10002AD5C(v2, v1);
}

uint64_t sub_10008BF24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a27 + 104))(a29, a2, a30);
}

uint64_t sub_10008BF3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return dispatch thunk of static Equatable.== infix(_:_:)(v2, v1, v3, a1);
}

uint64_t sub_10008BF74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return dispatch thunk of CustomStringConvertible.description.getter(v2, a2);
}

uint64_t sub_10008BF7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(v18 + 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v19, a17, v17);
}

uint64_t sub_10008BF94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  *(_QWORD *)(v32 + 88) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a32, v33, v34);
}

uint64_t sub_10008BFAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t (*a20)(uint64_t, uint64_t))
{
  uint64_t v20;
  uint64_t v21;

  return a20(v21, v20);
}

uint64_t sub_10008BFC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return dispatch thunk of CustomStringConvertible.description.getter(v2, a2);
}

uint64_t sub_10008BFCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;

  return sub_100005630(a21, 1, 1, *(_QWORD *)(v21 - 160));
}

uint64_t sub_10008BFE4()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v0);
}

uint64_t sub_10008C01C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t sub_10008C030()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t result;

  v2 = *v0;
  v3 = (uint64_t *)(v1 - 8);
  *v3 = *v0;
  result = *(_QWORD *)(v2 + 328);
  *v3 = *v0;
  return result;
}

uint64_t sub_10008C04C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 40))(v1 + a1, v3, v2);
}

uint64_t sub_10008C060()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_10008C074()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(v2, v0, v3);
}

uint64_t sub_10008C088()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104))(v0, v3, v1);
}

uint64_t sub_10008C09C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = sub_10001C830(*(_QWORD **)(v0 - 144), *(_QWORD *)(*(_QWORD *)(v0 - 144) + 24));
  *(_QWORD *)(v0 - 128) = v1;
  return InferenceProviderAssetDescriptor.identifier.getter(v1);
}

void sub_10008C0C0(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0x20u);
}

uint64_t sub_10008C0CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return InferenceProviderAssetDescriptor.version.getter(a1, a2, a3, a4, a5, a6);
}

void sub_10008C0D8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  sub_1000102C0(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t sub_10008C0E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  uint64_t v30;

  return (*(uint64_t (**)(uint64_t, _QWORD))(a29 + 8))(v29, *(_QWORD *)(v30 - 104));
}

uint64_t sub_10008C0F8(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_10008C100@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return a3(a1, a2, a11);
}

uint64_t sub_10008C10C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v18 + 104))(a18, a2, *(_QWORD *)(v19 - 104));
}

uint64_t sub_10008C120()
{
  return UUIDIdentifier.init()();
}

uint64_t sub_10008C128()
{
  return InferenceProviderAssetDescriptor.identifier.getter();
}

uint64_t sub_10008C130(uint64_t a1)
{
  uint64_t v1;

  return sub_100005700(v1, 1, a1);
}

uint64_t sub_10008C144()
{
  return type metadata accessor for OneShotRequest(0);
}

uint64_t sub_10008C14C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 176) + 8))(v0, *(_QWORD *)(v1 - 120));
}

uint64_t sub_10008C160(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_10008C168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  return sub_100005630(a1, 1, 1, a23);
}

uint64_t sub_10008C188@<X0>(uint64_t a1@<X8>)
{
  return *(unsigned int *)(a1 + 4);
}

void sub_10008C198()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = *(_QWORD *)(v0 + 320);
}

BOOL sub_10008C1B0(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10008C1C0()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 - 96))(v0, *(_QWORD *)(v1 - 176));
}

uint64_t sub_10008C1D0()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t sub_10008C210(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_10008C218(uint64_t a1)
{
  uint64_t v1;

  return sub_10008B340(a1, v1);
}

_QWORD *sub_10008C220(_QWORD *a1)
{
  uint64_t v1;

  return sub_10001C830(a1, v1);
}

void sub_10008C228()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000102C0(v1, v0, (uint64_t *)(v2 - 80));
}

_QWORD *sub_10008C238@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + a1 + 24);
  *(_QWORD *)(v2 - 144) = v1 + a1;
  return sub_10001C830((_QWORD *)(v1 + a1), v3);
}

_QWORD *sub_10008C270(_QWORD *a1)
{
  uint64_t v1;

  return sub_10001C830(a1, v1);
}

uint64_t sub_10008C278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return InferenceProviderAssetDescriptor.version.getter(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_10008C280()
{
  return static Date.now.getter();
}

uint64_t sub_10008C288()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10007BDF8(v0, v1);
}

uint64_t sub_10008C294()
{
  uint64_t v0;

  return _swift_stdlib_bridgeErrorToNSError(v0);
}

uint64_t sub_10008C29C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_10008C2A4()
{
  return AssetCost.onDeviceMemory.getter();
}

uint64_t sub_10008C2B0(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return swift_endAccess(va);
}

_QWORD *sub_10008C2B8()
{
  uint64_t v0;
  _QWORD *v1;

  return sub_10001C830(v1, v0);
}

_QWORD *sub_10008C2C4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 384) = result;
  *result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_10008C2D8()
{
  return type metadata accessor for AuditToken(0);
}

_QWORD *sub_10008C2F0(_QWORD *a1)
{
  return sub_10001C830(a1, a1[3]);
}

void sub_10008C2FC(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_10002ACC4(v2, a2);
}

uint64_t sub_10008C304()
{
  uint64_t v0;

  return swift_release_n(v0, 2);
}

uint64_t sub_10008C330()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 - 104));
}

_QWORD *sub_10008C338(_QWORD *a1)
{
  uint64_t v1;

  return sub_10001C830(a1, v1);
}

uint64_t sub_10008C340@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_10008C34C()
{
  return AssetCost.onDeviceMemory.getter();
}

uint64_t sub_10008C354()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

uint64_t sub_10008C360()
{
  return InferenceProviderDescriptor.id.getter();
}

uint64_t sub_10008C368(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 112))(a1, a2, v2);
}

_QWORD *sub_10008C374(_QWORD *a1)
{
  uint64_t v1;

  return sub_10001C830(a1, v1);
}

uint64_t sub_10008C37C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 - 112) = v6;
  return InferenceProviderAssetDescriptor.version.getter(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_10008C388@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

ValueMetadata *type metadata accessor for OSVariantProvider()
{
  return &type metadata for OSVariantProvider;
}

uint64_t sub_10008C3A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_execRequestPostString;
  *(_QWORD *)v3 = "Execute Request";
  *(_QWORD *)(v3 + 8) = 15;
  *(_BYTE *)(v3 + 16) = 2;
  v4 = v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_assetTransitionPostString;
  *(_QWORD *)v4 = "Asset Transition Request";
  *(_QWORD *)(v4 + 8) = 24;
  *(_BYTE *)(v4 + 16) = 2;
  v5 = v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_addSessionPostString;
  *(_QWORD *)v5 = "Add Session Request";
  *(_QWORD *)(v5 + 8) = 19;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_removeSessionPostString;
  *(_QWORD *)v6 = "Remove Session Request";
  *(_QWORD *)(v6 + 8) = 22;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_preWarmPostString;
  *(_QWORD *)v7 = "Prewarm Request";
  *(_QWORD *)(v7 + 8) = 15;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_logger;
  v9 = subsystemName.getter();
  Logger.init(subsystem:category:)(v9);
  v10 = type metadata accessor for OSSignposter(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_10007F7A4();
  v12 = type metadata accessor for Logger(0);
  __chkstk_darwin(v12);
  sub_10001E654();
  (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v2, v8);
  OSSignposter.init(logger:)(v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_signPoster, v1, v10);
  return v0;
}

void sub_10008C52C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,unsigned __int8 a26,unsigned __int8 a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, char *, uint64_t);
  char *v56;
  uint64_t (*v57)(uint64_t, uint64_t, uint64_t);
  os_log_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  int v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  os_signpost_id_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129[3];
  int v130;
  os_log_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t *v143;
  const char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;

  sub_10001D810();
  a19 = v33;
  a20 = v34;
  v36 = v35;
  v134 = v37;
  v135 = v38;
  v148 = v40;
  v149 = v39;
  v133 = v41;
  v141 = v42;
  v142 = v43;
  v44 = a23;
  v150 = a21;
  sub_100002F78(&qword_1000FB2D8);
  sub_10008F634();
  __chkstk_darwin(v45);
  sub_10008F254();
  v46 = sub_100002F78(&qword_1000FB2A0);
  sub_10001E518();
  __chkstk_darwin(v47);
  sub_10001DEA0();
  v139 = v28 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_signPoster;
  v144 = *(const char **)(v28 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_execRequestPostString);
  v136 = *(unsigned __int8 *)(v28 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_execRequestPostString + 16);
  v48 = sub_10008F388();
  v145 = *(_QWORD *)(v48 - 8);
  v146 = v48;
  __chkstk_darwin(v48);
  v143 = v49;
  sub_10008F6D8();
  v52 = v50 - v51;
  v53 = ((uint64_t (*)(void))OSSignposter.logHandle.getter)();
  v147 = v52;
  v54 = v44;
  OSSignpostID.init(log:)(v53);
  v55 = *(void (**)(uint64_t, char *, uint64_t))(v32 + 16);
  v56 = v141;
  v140 = v32;
  v141 = (char *)v46;
  v55(v30, v56, v46);
  v138 = v27;
  v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 16);
  v58 = (os_log_t)v31;
  v59 = v142;
  v142 = v29;
  sub_10001EA84(v31, v59, v57);
  sub_10008F134();
  sub_10001EBA8(v149);
  sub_10001EBA8(v148);
  v137 = v36;
  sub_10001EBA8(v36);
  sub_10001EBA8(v150);
  sub_10001EBA8(v44);
  v60 = sub_10008F6B8();
  sub_10008F390(v60, v61, v62, v63);
  v64 = sub_10008F6B8();
  v68 = sub_10008F390(v64, v65, v66, v67);
  v69 = OSSignposter.logHandle.getter(v68);
  v70 = static os_signpost_type_t.begin.getter();
  v71 = OS_os_log.signpostsEnabled.getter();
  if ((v71 & 1) == 0)
  {

    (*(void (**)(uint64_t, char *))(v140 + 8))(v30, v141);
    sub_10008F5C4(v31, *(uint64_t (**)(uint64_t, _QWORD))(v138 + 8));
    sub_10002BA68(v54);
    sub_10002BA68(v150);
    sub_10002BA68(v137);
    sub_10002BA68(v148);
    v74 = sub_10002BA68(v149);
    v75 = v145;
    v76 = v147;
LABEL_17:
    __chkstk_darwin(v74);
    sub_10008F278();
    sub_10007DB54((uint64_t)v58, v76, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v75 + 16));
    v126 = sub_10008F5BC();
    sub_100006ACC(v126);
    sub_10008F308();
    sub_10001E808(v76, *(uint64_t (**)(uint64_t, uint64_t))(v75 + 8));
    v127 = sub_10008F5AC();
    v128 = sub_10008F3C4(v127);
    sub_10008F604(v128);
    sub_100006A68();
    return;
  }
  v132 = v30;
  v72 = v141;
  v73 = v142;
  v139 = v54;
  v131 = v69;
  v130 = v70;
  if ((v136 & 1) != 0)
  {
    if ((unint64_t)v144 >> 32)
    {
      __break(1u);
    }
    else
    {
      sub_10008F3A8();
      if (v77)
      {
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
      sub_10008F39C();
      if (!(!v77 & v78))
      {
        v36 = v31;
        v144 = (const char *)&v153;
LABEL_10:
        v79 = v140;
        v143 = v129;
        LODWORD(v140) = a27;
        v136 = a26;
        v129[2] = a25;
        v129[1] = a24;
        v129[0] = a22;
        v80 = __chkstk_darwin(v71);
        v141 = sub_10008F41C(v80, v81, v82, v83, v84, v85, v86, v87, v129[0]);
        (*(void (**)(void))(v145 + 16))();
        v88 = sub_10001D8D4(112);
        v142 = sub_10001D8D4(288);
        v152 = v142;
        *(_DWORD *)v88 = 136448770;
        v89 = v132;
        v90 = UUIDIdentifier.uuidString.getter(v72);
        sub_10008F26C(v90, v91);
        v151 = v92;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152);
        sub_10001E034();
        sub_10001EB58(v89, *(uint64_t (**)(uint64_t, uint64_t))(v79 + 8));
        *(_WORD *)(v88 + 12) = 2082;
        v93 = UUIDIdentifier.uuidString.getter(v73);
        sub_10008F26C(v93, v94);
        v151 = v95;
        sub_10008F300((uint64_t)&v151, (uint64_t)&v152);
        sub_10001E034();
        sub_10007E7EC(v36, *(uint64_t (**)(uint64_t, uint64_t))(v138 + 8));
        *(_WORD *)(v88 + 22) = 2082;
        v96 = v149;
        sub_10001E338();
        sub_10008F524(v133, v97, &v152);
        sub_10008F240(v98);
        sub_10002BD84(v96);
        *(_WORD *)(v88 + 32) = 2082;
        v99 = v148;
        sub_10001E338();
        sub_10008F524(v134, v100, &v152);
        sub_10008F240(v101);
        sub_10002BD84(v99);
        *(_WORD *)(v88 + 42) = 2082;
        v102 = v137;
        sub_10001E338();
        sub_10008F524(v135, v103, &v152);
        sub_10008F240(v104);
        sub_10002BD84(v102);
        *(_WORD *)(v88 + 52) = 2082;
        v105 = type metadata accessor for InferenceProviderAssetDescriptor(0);
        sub_10008B304(&qword_1000FB7D8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor, (uint64_t)&protocol conformance descriptor for InferenceProviderAssetDescriptor);
        v107 = v106;
        v108 = v150;
        v109 = swift_bridgeObjectRetain(v150);
        v110 = Set.description.getter(v109, v105, v107);
        v112 = v111;
        swift_bridgeObjectRelease(v108);
        sub_10008F414(v110, v113, &v152);
        sub_10008F240(v114);
        sub_10002BA68(v108);
        swift_bridgeObjectRelease(v112);
        *(_WORD *)(v88 + 62) = 2082;
        v115 = v139;
        sub_10001E338();
        sub_10008F524(v129[0], v116, &v152);
        sub_10008F240(v117);
        sub_10002BD84(v115);
        *(_WORD *)(v88 + 72) = 2050;
        sub_10008F4E8(v88 + 74, (uint64_t)&a14);
        *(_WORD *)(v88 + 82) = 2050;
        sub_10008F4E8(v88 + 84, (uint64_t)&a15);
        *(_WORD *)(v88 + 92) = 2082;
        if ((v136 & 1) != 0)
          v118 = 1702195828;
        else
          v118 = 0x65736C6166;
        sub_10008F610(v118);
        v151 = v119;
        sub_10002B3F0((uint64_t)&v151, (uint64_t)&v152);
        sub_10001D8B4();
        *(_WORD *)(v88 + 102) = 2082;
        if ((v140 & 1) != 0)
          v120 = 1702195828;
        else
          v120 = 0x65736C6166;
        v75 = v145;
        v121 = v88 + 104;
        sub_10008F610(v120);
        v151 = v122;
        sub_10002B3F0((uint64_t)&v151, (uint64_t)&v152);
        sub_10001D8B4();
        v123 = sub_10008F650();
        v58 = v131;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v131, (os_signpost_type_t)v130, v123, v144, "requestIdentifier: %{public, signpost.description=attribute,public}s,\nsessionIdentifier: %{public, signpost.description=attribute,public}s,\nrequestLoggingIdentifier: %{public, signpost.description=attribute,public}s,\nuseCaseIdentifier: %{public, signpost.description=attribute,public}s,\nmodelBundleID: %{public, signpost.description=attribute,public}s,\nassetDescriptors: %{public, signpost.description=attribute,public}s,\ninferenceProviderIdentifier: %{public, signpost.description=attribute,public}s,\ncreatedByPID: %{public, signpost.description=attribute,public}ld,\nonBehalfOfPID: %{public, signpost.description=attribute,public}ld,\noneShot: %{public, signpost.description=attribute,public}s,\nisFallbackRequest: %{public, signpost.description=attribute,public}s", (uint8_t *)v88, 0x70u);
        v124 = v142;
        swift_arrayDestroy(v142, 9);
        sub_10001D790(v124);
        v125 = v88;
        v76 = v147;
        sub_10001D790(v125);

        v74 = sub_10001E808(v121, *(uint64_t (**)(uint64_t, uint64_t))(v75 + 8));
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_20;
  }
  v36 = v31;
  if (v144)
    goto LABEL_10;
LABEL_21:
  sub_10002BA68(v149);
  sub_10002BA68(v148);
  sub_10002BA68(v137);
  sub_10002BA68(v150);
  sub_10002BA68(v139);
  sub_10001EB58(v36, *(uint64_t (**)(uint64_t, uint64_t))(v138 + 8));
  (*(void (**)(uint64_t, char *))(v140 + 8))(v132, v141);
  __break(1u);
}

uint64_t sub_10008CBDC()
{
  return static OSLogIntegerFormatting.decimal.getter();
}

void sub_10008CC48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  os_signpost_id_t v68;
  NSObject *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  const char **v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;

  sub_10001D810();
  v2 = v1;
  v81 = v3;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = sub_100002F78(&qword_1000FB2A0);
  sub_10008F5CC();
  __chkstk_darwin(v11);
  sub_10001E168();
  v14 = v13 - v12;
  sub_10008F6C4(OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_execRequestPostString);
  LODWORD(v82) = v15;
  v16 = *(_QWORD *)(v7 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 16))(v14, v9, v10);
  swift_bridgeObjectRetain(v2);
  swift_errorRetain(v5);
  v83 = v2;
  swift_bridgeObjectRetain(v2);
  v17 = swift_errorRetain(v5);
  v18 = OSSignposter.logHandle.getter(v17);
  v19 = sub_10008F388();
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v78 = v21;
  v79 = v16;
  sub_10008F6D8();
  v24 = v22 - v23;
  v25 = OSSignpostIntervalState.signpostID.getter();
  v80 = static os_signpost_type_t.end.getter(v25);
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
    sub_10002B978(v14, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
    sub_10002BA68(v83);
    sub_100037E9C();
    sub_100037E9C();

    sub_10002BADC(v24, *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8));
LABEL_22:
    sub_100006A68();
    return;
  }
  v75 = v14;
  v76 = v0;
  v73 = v18;
  v74 = v10;
  v72 = v20;
  v77 = v19;
  if ((v82 & 1) != 0)
  {
    sub_10008F670();
    if (v27)
    {
      __break(1u);
    }
    else
    {
      sub_10008F3A8();
      if (v28)
      {
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
      sub_10008F39C();
      if (!(!v28 & v29))
      {
        v26 = v24;
        v84 = (const char *)&v86;
LABEL_10:
        v30 = sub_10008F5B4();
        sub_10007F624();
        __chkstk_darwin(v31);
        sub_10008F254();
        v32 = swift_retain();
        checkForErrorAndConsumeState(state:)(v32);
        v33 = swift_release(v79);
        (*(void (**)(uint64_t, uint64_t, __n128))(v16 + 88))(v10, v30, v33);
        v34 = v83;
        v71 = v5;
        if (&enum case for OSSignpostError.doubleEnd(_:) && (sub_10008F664(), v28))
        {
          v36 = 0;
          v37 = 0;
          v70 = "[Error] Interval already ended";
        }
        else
        {
          v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v10, v30);
          v70 = "requestIdentifier: %{public, signpost.description=attribute,public}s,\n"
                "inferenceProviderIdentifier: %{public, signpost.description=attribute,public}s, \n"
                "hasError: %{public, signpost.description=attribute,public}s";
          v37 = 2;
          v36 = 3;
        }
        v38 = v72;
        v39 = v74;
        v82 = &v70;
        v40 = __chkstk_darwin(v35);
        v78 = sub_10008F430(v40, v41, v42, v43, v44, v45, v46, v47, (uint64_t)v70);
        (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v78, v26, v77);
        v48 = sub_10001D8D4(32);
        v49 = sub_10001D8D4(96);
        v79 = v26;
        v50 = v49;
        v85 = v49;
        *(_BYTE *)v48 = v37;
        *(_BYTE *)(v48 + 1) = v36;
        *(_WORD *)(v48 + 2) = 2082;
        v51 = v75;
        v52 = UUIDIdentifier.uuidString.getter(v39);
        sub_10008F628(v52, v53);
        v55 = sub_10008F4AC(v54);
        sub_10008F300(v55, v56);
        swift_bridgeObjectRelease(v36);
        (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v51, v39);
        *(_WORD *)(v48 + 12) = 2082;
        swift_bridgeObjectRetain(v34);
        sub_1000102C0(v81, v34, &v85);
        v58 = sub_10008F554(v57);
        sub_10008F300(v58, v59);
        sub_10002BD84(v34);
        *(_WORD *)(v48 + 22) = 2082;
        if (v71)
          v61 = 1702195828;
        else
          v61 = 0x65736C6166;
        if (v71)
          v62 = 0xE400000000000000;
        else
          v62 = 0xE500000000000000;
        sub_10008F414(v61, v60, &v85);
        v64 = sub_10008F554(v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v64, v65);
        swift_bridgeObjectRelease(v62);
        sub_10002B498();
        v66 = sub_10002B498();
        v67 = (uint64_t)v78;
        v68 = OSSignpostID.rawValue.getter(v66);
        v69 = v73;
        sub_10008F6E4((void *)&_mh_execute_header, v73, (os_signpost_type_t)v80, v68, v84, v70);
        sub_10008F56C();
        sub_10001D790(v50);
        sub_10001D790(v48);

        sub_10008F474(v79);
        sub_10008F474(v67);
        goto LABEL_22;
      }
    }
    __break(1u);
    goto LABEL_25;
  }
  if (v84)
  {
    v26 = v24;
    goto LABEL_10;
  }
LABEL_26:
  sub_100037E9C();
  sub_100037E9C();
  sub_10002BA68(v83);
  (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v75, v74);
  __break(1u);
}

void sub_10008D068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t State;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, char *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  void (*v116)(uint64_t, uint64_t);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  os_signpost_id_t v137;
  os_log_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  const char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;

  sub_10001D810();
  a19 = v27;
  a20 = v28;
  v159 = v24;
  v154 = (char *)v29;
  v155 = v30;
  v153 = v31;
  v33 = v32;
  v148 = v34;
  v165 = (uint64_t *)v35;
  v147 = v36;
  v152 = v37;
  v38 = a23;
  v167 = a24;
  v171 = a22;
  v39 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason(0);
  v162 = *(_QWORD *)(v39 - 8);
  v163 = v39;
  sub_10001DD00();
  __chkstk_darwin(v40);
  sub_10002BD70();
  v170 = v41;
  State = type metadata accessor for LoadState(0);
  v168 = *(_QWORD *)(State - 8);
  sub_10001DD00();
  v44 = __chkstk_darwin(v43);
  v46 = (char *)&v144 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  v166 = (uint64_t)&v144 - v47;
  v48 = sub_100002F78(&qword_1000FB2A0);
  sub_10001E518();
  __chkstk_darwin(v49);
  sub_10002BD70();
  v164 = v50;
  sub_100002F78(&qword_1000FD820);
  sub_10001DD00();
  __chkstk_darwin(v51);
  sub_10001E654();
  sub_100002F78(&qword_1000FB920);
  sub_10001DD00();
  __chkstk_darwin(v52);
  sub_10001E168();
  v55 = v54 - v53;
  v56 = v48;
  sub_10008F200(v38, v54 - v53, &qword_1000FB920);
  if (sub_100005700(v55, 1, v48) == 1)
  {
    v57 = v26;
    sub_10002AD5C(v55, &qword_1000FB920);
    v146 = 0;
    v58 = 0xE000000000000000;
  }
  else
  {
    v146 = UUIDIdentifier.uuidString.getter(v48);
    v58 = v59;
    v57 = v26;
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v55, v56);
  }
  v160 = v33;
  v169 = v46;
  sub_10008F200(v167, v25, &qword_1000FD820);
  v60 = sub_100002F78(&qword_1000FB2D8);
  v61 = sub_100005700(v25, 1, v60);
  v62 = v163;
  v63 = v164;
  v161 = v58;
  if (v61 == 1)
  {
    sub_10002AD5C(v25, &qword_1000FD820);
    v145 = 0;
    v167 = 0xE000000000000000;
  }
  else
  {
    v145 = UUIDIdentifier.uuidString.getter(v60);
    v167 = v64;
    sub_10007E7EC(v25, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 8));
  }
  v65 = v168;
  v66 = v166;
  v67 = (v159 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_signPoster);
  v156 = *(const char **)(v159 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_assetTransitionPostString);
  v149 = *(unsigned __int8 *)(v159 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_assetTransitionPostString + 16);
  v68 = sub_10008F388();
  v151 = &v144;
  v150 = v68;
  v157 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v159 = v69;
  sub_10008F6D8();
  v72 = v70 - v71;
  v74 = OSSignposter.logHandle.getter(v73);
  v158 = v72;
  OSSignpostID.init(log:)(v74);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 16))(v63, v152, v56);
  v75 = *(void (**)(uint64_t, char *, uint64_t))(v65 + 16);
  v75(v66, v153, State);
  v75((uint64_t)v169, v154, State);
  v76 = v63;
  v77 = v162;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v162 + 16))(v170, v155, v62);
  v78 = v160;
  sub_10001EBA8(v160);
  sub_10001EBA8(v171);
  v79 = v56;
  v80 = (uint64_t)v165;
  sub_10001EBA8((uint64_t)v165);
  v81 = v161;
  swift_bridgeObjectRetain(v161);
  v82 = swift_bridgeObjectRetain(v167);
  OSSignposter.logHandle.getter(v82);
  LODWORD(v155) = sub_10008F6A4();
  v83 = OS_os_log.signpostsEnabled.getter();
  if ((v83 & 1) == 0)
  {

    sub_10002B7F8(v76, *(uint64_t (**)(uint64_t, uint64_t))(v57 + 8));
    sub_10002BA68(v78);
    sub_10002BA68(v80);
    sub_10008F564(v166);
    sub_10008F564((uint64_t)v169);
    sub_10001EB58(v170, *(uint64_t (**)(uint64_t, uint64_t))(v77 + 8));
    sub_10002BA68(v167);
    sub_10002BA68(v81);
    v86 = sub_10002BA68(v171);
    v87 = v150;
    v88 = v157;
    v89 = v158;
LABEL_23:
    __chkstk_darwin(v86);
    (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))((char *)&v144 - ((v140 + 15) & 0xFFFFFFFFFFFFFFF0), v89, v87);
    v141 = sub_10008F5BC();
    sub_100006ACC(v141);
    sub_10008F308();
    sub_10002BADC(v89, *(uint64_t (**)(uint64_t, uint64_t))(v88 + 8));
    v142 = sub_10008F5AC();
    v143 = sub_10008F3C4(v142);
    sub_10008F604(v143);
    sub_100006A68();
    return;
  }
  v154 = (char *)v67;
  if ((v149 & 1) != 0)
  {
    v85 = v164;
    v84 = (uint64_t)v165;
    if ((unint64_t)v156 >> 32)
    {
      __break(1u);
    }
    else
    {
      sub_10008F3A8();
      if (v90)
      {
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      sub_10008F39C();
      if (!(!v90 & v91))
      {
        v78 = v57;
        v156 = (const char *)&v174;
LABEL_16:
        v165 = &v144;
        v152 = a21;
        v92 = __chkstk_darwin(v83);
        v153 = sub_10008F430(v92, v93, v94, v95, v96, v97, v98, v99, v144);
        v87 = v150;
        (*(void (**)(void))(v157 + 16))();
        v100 = sub_10001D8D4(92);
        v164 = sub_10001D8D4(288);
        v173 = v164;
        *(_DWORD *)v100 = 136448258;
        v101 = sub_10008F1BC();
        v102 = dispatch thunk of CustomStringConvertible.description.getter(v79, v101);
        sub_10008F26C(v102, v103);
        v172 = v104;
        sub_10008F52C();
        sub_10001E034();
        (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v85, v79);
        *(_WORD *)(v100 + 12) = 2082;
        sub_10001E140();
        sub_10008F3EC(&v173, (uint64_t)&a12);
        sub_10008F374(v105);
        sub_10002BD84(v84);
        *(_WORD *)(v100 + 22) = 2082;
        v106 = v160;
        if (v160)
          v107 = v148;
        else
          v107 = 3157552;
        if (v160)
          v108 = v160;
        else
          v108 = 0xE300000000000000;
        sub_10001E140();
        sub_1000102C0(v107, v108, &v173);
        v172 = v109;
        sub_10008F52C();
        sub_10002BA68(v106);
        swift_bridgeObjectRelease(v108);
        *(_WORD *)(v100 + 32) = 2082;
        sub_10008B304(&qword_1000FCD48, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState, (uint64_t)&protocol conformance descriptor for LoadState);
        v111 = v110;
        v112 = v166;
        v113 = dispatch thunk of CustomStringConvertible.description.getter(State, v110);
        sub_10008F26C(v113, v114);
        v172 = v115;
        sub_10008F300((uint64_t)&v172, (uint64_t)&v173);
        sub_10001E034();
        v116 = *(void (**)(uint64_t, uint64_t))(v168 + 8);
        v116(v112, State);
        *(_WORD *)(v100 + 42) = 2082;
        v117 = State;
        v118 = (uint64_t)v169;
        v119 = dispatch thunk of CustomStringConvertible.description.getter(v117, v111);
        sub_10008F26C(v119, v120);
        v172 = v121;
        sub_10008F300((uint64_t)&v172, (uint64_t)&v173);
        sub_10001E034();
        v116(v118, v117);
        *(_WORD *)(v100 + 52) = 2082;
        sub_10008B304(&qword_1000FDD28, (uint64_t (*)(uint64_t))&type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason, (uint64_t)&protocol conformance descriptor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason);
        v122 = v170;
        v123 = v163;
        v125 = dispatch thunk of CustomStringConvertible.description.getter(v163, v124);
        sub_10008F26C(v125, v126);
        v172 = v127;
        sub_10008F300((uint64_t)&v172, (uint64_t)&v173);
        sub_10001E034();
        v128 = v123;
        v88 = v157;
        (*(void (**)(uint64_t, uint64_t))(v162 + 8))(v122, v128);
        *(_WORD *)(v100 + 62) = 2082;
        v129 = v171;
        sub_10001E140();
        sub_10008F3EC(&v173, (uint64_t)&a17);
        sub_10008F374(v130);
        sub_10002BD84(v129);
        *(_WORD *)(v100 + 72) = 2082;
        v131 = v161;
        sub_10001E140();
        sub_10008F3EC(&v173, (uint64_t)&a11);
        sub_10008F374(v132);
        sub_10002BD84(v131);
        *(_WORD *)(v100 + 82) = 2082;
        v133 = v167;
        sub_10001E140();
        sub_10008F3EC(&v173, (uint64_t)&a10);
        v172 = v134;
        v89 = v158;
        sub_10002B3F0((uint64_t)&v172, (uint64_t)&v173);
        v135 = sub_10002BD84(v133);
        v136 = (uint64_t)v153;
        v137 = OSSignpostID.rawValue.getter(v135);
        v138 = (os_log_t)v154;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, (os_log_t)v154, (os_signpost_type_t)v155, v137, v156, "assetTransitionIdentifier: %{public, signpost.description=attribute,public}s,\nassetIdentifier: %{public, signpost.description=attribute,public}s,\nassetVersion: %{public, signpost.description=attribute,public}s,\nfromState: %{public, signpost.description=attribute,public}s,\ntoState: %{public, signpost.description=attribute,public}s,\nreason: %{public, signpost.description=attribute,public}s,\ninferenceProviderIdentifier: %{public, signpost.description=attribute,public}s,\nRequestUUID: %{public, signpost.description=attribute,public}s,\nsessionIdentifier: %{public, signpost.description=attribute,public}s", (uint8_t *)v100, 0x5Cu);
        v139 = v164;
        swift_arrayDestroy(v164, 9);
        sub_10001D790(v139);
        sub_10001D790(v100);

        v86 = sub_10002BADC(v136, *(uint64_t (**)(uint64_t, uint64_t))(v88 + 8));
        goto LABEL_23;
      }
    }
    __break(1u);
    goto LABEL_26;
  }
  v85 = v164;
  v84 = (uint64_t)v165;
  v78 = v57;
  if (v156)
    goto LABEL_16;
LABEL_27:
  sub_10002BA68(v171);
  sub_10002BA68(v161);
  sub_10002BA68(v167);
  (*(void (**)(uint64_t, uint64_t))(v162 + 8))(v170, v163);
  sub_10008F564((uint64_t)v169);
  sub_10008F564(v166);
  sub_10002BA68(v84);
  sub_10002BA68(v160);
  sub_10002B7F8(v85, *(uint64_t (**)(uint64_t, uint64_t))(v78 + 8));
  __break(1u);
}

void sub_10008D94C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  os_signpost_id_t v103;
  os_log_t v104;
  uint64_t v105;
  uint64_t v106;
  const char *v107;
  os_log_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

  sub_10001D810();
  v26 = v25;
  v121 = v27;
  v114 = v28;
  v115 = v29;
  v31 = v30;
  v33 = v32;
  v113 = v34;
  v36 = v35;
  v125 = a21;
  v37 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result(0);
  sub_10001E518();
  __chkstk_darwin(v38);
  sub_10001DEA0();
  v39 = sub_100002F78(&qword_1000FB2A0);
  v40 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  sub_10007F7A4();
  v120 = v21 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_signPoster;
  v123 = *(const char **)(v21 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_assetTransitionPostString);
  LODWORD(v116) = *(unsigned __int8 *)(v21
                                     + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_assetTransitionPostString
                                     + 16);
  v41 = *(_QWORD *)(v26 + 16);
  v42 = *(void (**)(uint64_t, uint64_t))(v40 + 16);
  v117 = v43;
  v42(v22, v36);
  sub_10008F180();
  v122 = (uint64_t *)v33;
  sub_10001EBA8(v33);
  v118 = v31;
  sub_10001EBA8(v31);
  v44 = sub_10008CBDC();
  sub_10008F390(v44, v45, v46, v47);
  v119 = v24;
  v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 16);
  v124 = v23;
  v49 = v23;
  v50 = v37;
  sub_10001EA84(v49, v121, v48);
  swift_errorRetain(a21);
  v51 = swift_errorRetain(a21);
  v52 = OSSignposter.logHandle.getter(v51);
  v53 = sub_10008F388();
  v54 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v112 = v55;
  sub_10008F6D8();
  v58 = v56 - v57;
  v120 = v41;
  v59 = OSSignpostIntervalState.signpostID.getter();
  LODWORD(v121) = static os_signpost_type_t.end.getter(v59);
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
    sub_10008F5C4(v22, *(uint64_t (**)(uint64_t, _QWORD))(v40 + 8));
    sub_10002BA68(v118);
    sub_10002BA68((uint64_t)v122);
    (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v124, v50);
    sub_10002B498();
    sub_10002B498();

    sub_10001E808(v58, *(uint64_t (**)(uint64_t, uint64_t))(v54 + 8));
LABEL_25:
    sub_100006A68();
    return;
  }
  v60 = v50;
  v109 = v22;
  v110 = v40;
  v61 = (uint64_t)v122;
  v111 = v54;
  v108 = v52;
  if ((v116 & 1) != 0)
  {
    if ((unint64_t)v123 >> 32)
    {
      __break(1u);
    }
    else
    {
      sub_10008F3A8();
      if (v65)
      {
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      sub_10008F39C();
      if (!(!v65 & v66))
      {
        v62 = v53;
        v64 = v58;
        v63 = v60;
        v123 = (const char *)&v128;
LABEL_10:
        v67 = sub_10008F5B4();
        v68 = *(_QWORD *)(v67 - 8);
        __chkstk_darwin(v67);
        sub_10001E654();
        swift_retain();
        sub_10008F648();
        swift_release(v120);
        sub_10008F4DC(*(uint64_t (**)(uint64_t, uint64_t))(v68 + 88));
        if (&enum case for OSSignpostError.doubleEnd(_:) && (sub_10008F664(), v65))
        {
          v70 = 0;
          v71 = 0;
          v107 = "[Error] Interval already ended";
        }
        else
        {
          v69 = sub_10008F4DC(*(uint64_t (**)(uint64_t, uint64_t))(v68 + 8));
          v107 = "assetTransitionIdentifier: %{public, signpost.description=attribute,public}s,\n"
                 "assetIdentifier: %{public, signpost.description=attribute,public}s,\n"
                 "assetVersion: %{public, signpost.description=attribute,public}s,\n"
                 "memoryCostKB: %{public, signpost.description=attribute,public}llu,\n"
                 "result: %{public, signpost.description=attribute,public}s,\n"
                 "hasError: %{public, signpost.description=attribute,public}s";
          v71 = 2;
          v70 = 6;
        }
        v122 = &v106;
        v72 = __chkstk_darwin(v69);
        v116 = sub_10008F430(v72, v73, v74, v75, v76, v77, v78, v79, v106);
        (*(void (**)(char *, uint64_t, uint64_t))(v111 + 16))(v116, v64, v62);
        v80 = sub_10001D8D4(62);
        v120 = v62;
        v81 = v80;
        v112 = sub_10001D8D4(160);
        v127 = v112;
        *(_BYTE *)v81 = v71;
        *(_BYTE *)(v81 + 1) = v70;
        *(_WORD *)(v81 + 2) = 2082;
        v82 = sub_10008F1BC();
        v83 = v109;
        v84 = dispatch thunk of CustomStringConvertible.description.getter(v117, v82);
        sub_10008F26C(v84, v85);
        v126 = v86;
        sub_10008F3B4();
        sub_10001E034();
        sub_10002B978(v83, *(uint64_t (**)(uint64_t, uint64_t))(v110 + 8));
        *(_WORD *)(v81 + 12) = 2082;
        swift_bridgeObjectRetain(v61);
        sub_1000102C0(v113, v61, &v127);
        v126 = v87;
        sub_10002B3F0((uint64_t)&v126, (uint64_t)&v127);
        sub_10002BD84(v61);
        *(_WORD *)(v81 + 22) = 2082;
        v88 = v118;
        if (v118)
          v89 = v118;
        else
          v89 = 0xE300000000000000;
        v90 = v64;
        v91 = swift_bridgeObjectRetain(v118);
        sub_10008F658(v91, v92, &v127);
        v126 = v93;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127);
        sub_10002BA68(v88);
        swift_bridgeObjectRelease(v89);
        *(_WORD *)(v81 + 32) = 2050;
        v126 = v115;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127);
        *(_WORD *)(v81 + 42) = 2082;
        sub_10008B304(&qword_1000FDD20, (uint64_t (*)(uint64_t))&type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result, (uint64_t)&protocol conformance descriptor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result);
        v94 = v124;
        v96 = dispatch thunk of CustomStringConvertible.description.getter(v63, v95);
        sub_10008F26C(v96, v97);
        v126 = v98;
        sub_10008F3B4();
        sub_10001E034();
        sub_10007E7EC(v94, *(uint64_t (**)(uint64_t, uint64_t))(v119 + 8));
        *(_WORD *)(v81 + 52) = 2082;
        if (v125)
          v100 = 1702195828;
        else
          v100 = 0x65736C6166;
        if (v125)
          v101 = 0xE400000000000000;
        else
          v101 = 0xE500000000000000;
        sub_10008F524(v100, v99, &v127);
        v126 = v102;
        sub_10008F3B4();
        sub_10001E034();
        sub_10002B498();
        sub_10002B498();
        v103 = sub_10008F650();
        v104 = v108;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v108, (os_signpost_type_t)v121, v103, v123, v107, (uint8_t *)v81, 0x3Eu);
        v105 = v112;
        swift_arrayDestroy(v112, 5);
        sub_10001D790(v105);
        sub_10001D790(v81);

        sub_10008F474(v90);
        sub_10008F474(v101);
        goto LABEL_25;
      }
    }
    __break(1u);
    goto LABEL_28;
  }
  if (v123)
  {
    v62 = v53;
    v63 = v60;
    v64 = v58;
    goto LABEL_10;
  }
LABEL_29:
  sub_10002B498();
  sub_10002B498();
  sub_10001EB58(v124, *(uint64_t (**)(uint64_t, uint64_t))(v119 + 8));
  sub_10002BA68((uint64_t)v122);
  sub_10002BA68(v118);
  sub_10008F5C4(v109, *(uint64_t (**)(uint64_t, _QWORD))(v110 + 8));
  __break(1u);
}

void sub_10008DF40()
{
  char **v0;
  uint64_t v1;
  uint64_t v2;
  char **v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_log_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  os_signpost_id_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  int v75;
  os_log_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  char **v85;
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  sub_10001D810();
  v3 = v0;
  v5 = v4;
  v83 = v6;
  v81 = v7;
  v82 = v8;
  v10 = v9;
  v80 = v11;
  v13 = v12;
  v14 = sub_100002F78(&qword_1000FB2D8);
  sub_10007F624();
  __chkstk_darwin(v15);
  sub_10008F254();
  v16 = ((char *)v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_signPoster);
  v87 = *(char **)((char *)v3 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_addSessionPostString);
  LODWORD(v84) = *((unsigned __int8 *)v3 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_addSessionPostString
                                         + 16);
  v88 = sub_10008F388();
  v86 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  sub_10008F278();
  v18 = OSSignposter.logHandle.getter(v17);
  v85 = v3;
  OSSignpostID.init(log:)(v18);
  v19 = sub_10008F134();
  sub_10001EBA8(v13);
  sub_10001EBA8(v10);
  v20 = sub_10008CBDC();
  sub_10008F390(v20, v21, v22, v23);
  v24 = (os_log_t)v2;
  v25 = sub_10008CBDC();
  sub_10008F390(v25, v26, v27, v28);
  v29 = sub_10007DB54(v2, v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
  OSSignposter.logHandle.getter(v29);
  v30 = sub_10008F6A4();
  v31 = OS_os_log.signpostsEnabled.getter();
  if ((v31 & 1) == 0)
    goto LABEL_5;
  v78 = v1;
  v79 = v14;
  v76 = v16;
  v77 = v2;
  v75 = v30;
  if ((v84 & 1) == 0)
  {
    v32 = v10;
    if (!v87)
    {
      sub_10008F5C4(v77, *(uint64_t (**)(uint64_t, _QWORD))(v78 + 8));
      sub_10002BA68(v13);
      sub_10002BA68(v10);
      __break(1u);
LABEL_5:
      sub_10002BA68(v10);
      sub_10002BA68(v13);

      v33 = sub_10001E808((uint64_t)v24, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
      v34 = (uint64_t)v85;
      v35 = v86;
LABEL_17:
      __chkstk_darwin(v33);
      sub_10008F278();
      sub_10007DB54((uint64_t)v24, v34, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 16));
      v71 = sub_10008F5BC();
      sub_100006ACC(v71);
      sub_10008F308();
      sub_10001E808(v34, *(uint64_t (**)(uint64_t, uint64_t))(v35 + 8));
      v72 = sub_10008F5AC();
      v73 = sub_10008F3C4(v72);
      sub_10008F604(v73);
      sub_100006A68();
      return;
    }
LABEL_10:
    v34 = (uint64_t)v85;
    v85 = &v74;
    v38 = __chkstk_darwin(v31);
    v74 = sub_10008F41C(v38, v39, v40, v41, v42, v43, v44, v45, (uint64_t)v74);
    v46 = v86;
    (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v74, v34, v88);
    v47 = sub_10001D8D4(62);
    v84 = sub_10001D8D4(128);
    v90 = v84;
    *(_DWORD *)v47 = 136447490;
    v48 = swift_bridgeObjectRetain(v13);
    Array.description.getter(v48, &type metadata for String);
    v50 = v49;
    v51 = swift_bridgeObjectRelease(v13);
    sub_10008F658(v51, v52, &v90);
    v54 = sub_10008F4AC(v53);
    sub_10002B800(v54, v55);
    sub_10002BA68(v13);
    swift_bridgeObjectRelease(v50);
    *(_WORD *)(v47 + 12) = 2082;
    swift_bridgeObjectRetain(v32);
    sub_1000102C0(v80, v32, &v90);
    v89 = v56;
    sub_10002B800((uint64_t)&v89, v19);
    v57 = v32;
    v35 = v46;
    sub_10002BD84(v57);
    *(_WORD *)(v47 + 22) = 2050;
    sub_10008F58C(v47 + 24, v81);
    *(_WORD *)(v47 + 32) = 2050;
    sub_10008F58C(v47 + 34, v82);
    *(_WORD *)(v47 + 42) = 2082;
    if ((v83 & 1) != 0)
      v58 = 1702195828;
    else
      v58 = 0x65736C6166;
    if ((v83 & 1) != 0)
      v59 = 0xE400000000000000;
    else
      v59 = 0xE500000000000000;
    sub_1000102C0(v58, v59, &v90);
    v61 = sub_10008F554(v60);
    sub_10002B3F0(v61, v62);
    sub_10001D8B4();
    *(_WORD *)(v47 + 52) = 2082;
    v63 = v77;
    v64 = UUIDIdentifier.uuidString.getter(v79);
    sub_10008C0D8(v64, v65);
    v89 = v66;
    sub_10002B800((uint64_t)&v89, v19);
    sub_10001E034();
    v67 = sub_10002B7F8(v63, *(uint64_t (**)(uint64_t, uint64_t))(v78 + 8));
    v68 = v74;
    v69 = OSSignpostID.rawValue.getter(v67);
    v24 = v76;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v76, (os_signpost_type_t)v75, v69, v87, "bundeIdentifiers: %{public, signpost.description=attribute,public}s,\nuseCaseIdentifier: %{public, signpost.description=attribute,public}s,\nonBehalfOfPID: %{public, signpost.description=attribute,public}ld,\ncreatedByPID: %{public, signpost.description=attribute,public}ld,\ncontainsSensitiveData: %{public, signpost.description=attribute,public}s,\nuuid: %{public, signpost.description=attribute,public}s", (uint8_t *)v47, 0x3Eu);
    v70 = v84;
    swift_arrayDestroy(v84, 4);
    sub_10001D790(v70);
    sub_10001D790(v47);

    v33 = sub_10001E808((uint64_t)v68, *(uint64_t (**)(uint64_t, uint64_t))(v35 + 8));
    goto LABEL_17;
  }
  if ((unint64_t)v87 >> 32)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  sub_10008F3A8();
  if (!v36)
  {
    sub_10008F39C();
    if (!(!v36 & v37))
    {
      v32 = v10;
      v87 = (const char *)&v91;
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_20:
  __break(1u);
}

void sub_10008E394()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  os_signpost_id_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  os_signpost_type_t v49;
  uint64_t v50;
  uint64_t v51;

  sub_10001D810();
  sub_10008F498(v2, v3);
  sub_10008F690();
  __chkstk_darwin(v4);
  sub_10008F254();
  sub_100002F78(&qword_1000FB2D8);
  sub_10008F5CC();
  __chkstk_darwin(v5);
  sub_10001DEA0();
  sub_10008F318(v6, OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_addSessionPostString);
  v7 = sub_10008F45C();
  v8 = (void *)OSSignposter.logHandle.getter(v7);
  sub_10008F388();
  sub_10008F67C();
  __chkstk_darwin(v9);
  v10 = sub_10008F350();
  v11 = static os_signpost_type_t.end.getter(v10);
  if ((sub_10008F61C(v11) & 1) == 0)
  {
    sub_10008F59C();
    sub_10008F340();

    sub_10008F5F4();
LABEL_16:
    sub_100006A68();
    return;
  }
  sub_10008F47C();
  if ((v12 & 1) != 0)
  {
    sub_10008F670();
    if (v13)
    {
      __break(1u);
    }
    else
    {
      sub_10008F3A8();
      if (v14)
      {
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      sub_10008F39C();
      if (!(!v14 & v15))
      {
        sub_10008F53C();
        goto LABEL_10;
      }
    }
    __break(1u);
    goto LABEL_19;
  }
  if (v50)
  {
LABEL_10:
    sub_10008F5B4();
    sub_10007F624();
    __chkstk_darwin(v16);
    sub_10008F3F8();
    sub_10008F648();
    swift_release();
    sub_10008F4DC(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 88));
    if (!&enum case for OSSignpostError.doubleEnd(_:) || (sub_10008F664(), !v14))
      v17 = sub_10008F4DC(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
    sub_10008F5DC(v17, v18, v19, v20, v21, v22, v23, v24, v44);
    v26 = __chkstk_darwin(v25);
    sub_10008F290(v26, v27, v28, v29, v30, v31, v32, v33, v45);
    v34 = sub_10001D8D4(22);
    v35 = sub_10001D8D4(64);
    v36 = sub_10008F2C0(v35);
    sub_10008C0D8(v36, v37);
    sub_10008F2F0();
    sub_10001E034();
    sub_10008F4C8();
    *(_WORD *)(v34 + 12) = v48;
    sub_10008B304(&qword_1000FDD08, (uint64_t (*)(uint64_t))&type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventResult, (uint64_t)&protocol conformance descriptor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventResult);
    v39 = sub_10008F444(v38);
    sub_10008C0D8(v39, v40);
    sub_10008F2F0();
    sub_10001E034();
    v41 = sub_10008F510();
    v42 = OSSignpostID.rawValue.getter(v41);
    sub_10008F3D0((void *)&_mh_execute_header, v43, v49, v42);
    sub_10008F57C();
    sub_10001D790(v1);
    sub_10001D790(v34);

    sub_10008F4FC();
    sub_10008F6AC();
    goto LABEL_16;
  }
LABEL_20:
  sub_10008F340();
  sub_10002BADC(v46, *(uint64_t (**)(uint64_t, uint64_t))(v47 + 8));
  __break(1u);
}

void sub_10008E604()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void (*v32)(_QWORD, _QWORD, _QWORD);
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  os_signpost_id_t v39;
  os_log_t v40;
  void (*v41)(uint64_t, char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  void (*v47)(_QWORD, _QWORD, _QWORD);
  uint64_t *v48;
  int v49;
  os_log_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  sub_10001D810();
  v4 = v3;
  sub_100002F78(&qword_1000FB2D8);
  sub_10008F634();
  __chkstk_darwin(v5);
  sub_10001E168();
  v8 = v7 - v6;
  v9 = (v1 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_signPoster);
  sub_10008F6C4(OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_removeSessionPostString);
  LODWORD(v52) = v10;
  v11 = sub_10008F388();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = __chkstk_darwin(v11);
  v15 = OSSignposter.logHandle.getter(v14);
  OSSignpostID.init(log:)(v15);
  v16 = sub_10001EA84(v8, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 16));
  OSSignposter.logHandle.getter(v16);
  v17 = sub_10008F6A4();
  v18 = OS_os_log.signpostsEnabled.getter();
  if ((v18 & 1) == 0)
    goto LABEL_5;
  v50 = v9;
  v51 = v0;
  v49 = v17;
  if ((v52 & 1) == 0)
  {
    if (!v53)
    {
      sub_10002B7F8(v8, *(uint64_t (**)(uint64_t, uint64_t))(v51 + 8));
      __break(1u);
LABEL_5:

      v19 = sub_10002B7F8(v8, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
LABEL_11:
      __chkstk_darwin(v19);
      sub_10008F278();
      v41(v0, (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
      v42 = sub_10008F5BC();
      sub_100006ACC(v42);
      sub_10008F308();
      sub_10002B978((uint64_t)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
      v43 = sub_10008F5AC();
      v44 = sub_10008F3C4(v43);
      sub_10008F604(v44);
      sub_100006A68();
      return;
    }
LABEL_10:
    v48 = &v45;
    v23 = __chkstk_darwin(v18);
    v31 = sub_10008F41C(v23, v24, v25, v26, v27, v28, v29, v30, v45);
    v32 = *(void (**)(_QWORD, _QWORD, _QWORD))(v12 + 16);
    v46 = v31;
    v47 = v32;
    v32(v31, (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
    v0 = sub_10001D8D4(12);
    v33 = sub_10001D8D4(32);
    v55 = v33;
    v52 = v11;
    *(_DWORD *)v0 = 136446210;
    v34 = UUIDIdentifier.uuidString.getter(v2);
    sub_10008C0D8(v34, v35);
    v54 = v36;
    v11 = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);
    sub_10001E034();
    v37 = sub_10002B7F8(v8, *(uint64_t (**)(uint64_t, uint64_t))(v51 + 8));
    v38 = (uint64_t)v46;
    v39 = OSSignpostID.rawValue.getter(v37);
    v40 = v50;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v50, (os_signpost_type_t)v49, v39, v53, "sessionIdentifier: %{public, signpost.description=attribute,public}s", (uint8_t *)v0, 0xCu);
    swift_arrayDestroy(v33, 1);
    sub_10001D790(v33);
    sub_10001D790(v0);

    v19 = sub_10002B978(v38, *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
    goto LABEL_11;
  }
  sub_10008F670();
  if (v20)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  sub_10008F3A8();
  if (!v21)
  {
    sub_10008F39C();
    if (!(!v21 & v22))
    {
      v53 = (const char *)&v56;
      goto LABEL_10;
    }
    goto LABEL_13;
  }
LABEL_14:
  __break(1u);
}

void sub_10008E8D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  os_signpost_id_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  os_signpost_type_t v49;
  uint64_t v50;
  uint64_t v51;

  sub_10001D810();
  sub_10008F498(v2, v3);
  sub_10008F690();
  __chkstk_darwin(v4);
  sub_10008F254();
  sub_100002F78(&qword_1000FB2D8);
  sub_10008F5CC();
  __chkstk_darwin(v5);
  sub_10001DEA0();
  sub_10008F318(v6, OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_removeSessionPostString);
  v7 = sub_10008F45C();
  v8 = (void *)OSSignposter.logHandle.getter(v7);
  sub_10008F388();
  sub_10008F67C();
  __chkstk_darwin(v9);
  v10 = sub_10008F350();
  v11 = static os_signpost_type_t.end.getter(v10);
  if ((sub_10008F61C(v11) & 1) == 0)
  {
    sub_10008F59C();
    sub_10008F340();

    sub_10008F5F4();
LABEL_16:
    sub_100006A68();
    return;
  }
  sub_10008F47C();
  if ((v12 & 1) != 0)
  {
    sub_10008F670();
    if (v13)
    {
      __break(1u);
    }
    else
    {
      sub_10008F3A8();
      if (v14)
      {
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      sub_10008F39C();
      if (!(!v14 & v15))
      {
        sub_10008F53C();
        goto LABEL_10;
      }
    }
    __break(1u);
    goto LABEL_19;
  }
  if (v50)
  {
LABEL_10:
    sub_10008F5B4();
    sub_10007F624();
    __chkstk_darwin(v16);
    sub_10008F3F8();
    sub_10008F648();
    swift_release();
    sub_10008F4DC(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 88));
    if (!&enum case for OSSignpostError.doubleEnd(_:) || (sub_10008F664(), !v14))
      v17 = sub_10008F4DC(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
    sub_10008F5DC(v17, v18, v19, v20, v21, v22, v23, v24, v44);
    v26 = __chkstk_darwin(v25);
    sub_10008F290(v26, v27, v28, v29, v30, v31, v32, v33, v45);
    v34 = sub_10001D8D4(22);
    v35 = sub_10001D8D4(64);
    v36 = sub_10008F2C0(v35);
    sub_10008C0D8(v36, v37);
    sub_10008F2F0();
    sub_10001E034();
    sub_10008F4C8();
    *(_WORD *)(v34 + 12) = v48;
    sub_10008B304(&qword_1000FDD08, (uint64_t (*)(uint64_t))&type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventResult, (uint64_t)&protocol conformance descriptor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventResult);
    v39 = sub_10008F444(v38);
    sub_10008C0D8(v39, v40);
    sub_10008F2F0();
    sub_10001E034();
    v41 = sub_10008F510();
    v42 = OSSignpostID.rawValue.getter(v41);
    sub_10008F3D0((void *)&_mh_execute_header, v43, v49, v42);
    sub_10008F57C();
    sub_10001D790(v1);
    sub_10001D790(v34);

    sub_10008F4FC();
    sub_10008F6AC();
    goto LABEL_16;
  }
LABEL_20:
  sub_10008F340();
  sub_10002BADC(v46, *(uint64_t (**)(uint64_t, uint64_t))(v47 + 8));
  __break(1u);
}

void sub_10008EB40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  os_signpost_id_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char **v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  sub_10001D810();
  v49 = v2;
  v44 = v3;
  v45 = v4;
  v6 = v5;
  v8 = v7;
  v9 = sub_100002F78(&qword_1000FB2D8);
  sub_10001E518();
  __chkstk_darwin(v10);
  sub_10001E168();
  v13 = v12 - v11;
  v47 = *(const char **)(v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_preWarmPostString);
  LODWORD(v46) = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_preWarmPostString + 16);
  sub_10007DB54(v12 - v11, v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
  v48 = sub_10008F388();
  v14 = *(_QWORD *)(v48 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v48);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = v6;
  v18 = v6;
  v19 = v49;
  sub_10001EBA8(v18);
  v20 = sub_10001EBA8(v19);
  v21 = static OSSignpostID.exclusive.getter(v20);
  v22 = OSSignposter.logHandle.getter(v21);
  v43 = static os_signpost_type_t.event.getter();
  v23 = OS_os_log.signpostsEnabled.getter();
  if ((v23 & 1) == 0)
  {
    sub_10001E808(v13, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));

    sub_10002BA68(v19);
    sub_10002BA68(v17);
    (*(void (**)(char *, uint64_t))(v14 + 8))((char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v48);
LABEL_11:
    sub_100006A68();
    return;
  }
  v24 = v13;
  v42 = v17;
  if ((v46 & 1) != 0)
  {
    if ((unint64_t)v47 >> 32)
    {
      __break(1u);
    }
    else
    {
      sub_10008F3A8();
      if (v26)
      {
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }
      sub_10008F39C();
      if (!(!v26 & v27))
      {
        v13 = v1;
        v25 = v24;
        v47 = (const char *)&v52;
        goto LABEL_10;
      }
    }
    __break(1u);
    goto LABEL_14;
  }
  v13 = v1;
  if (v47)
  {
    v25 = v24;
LABEL_10:
    v41 = v14;
    v46 = &v39;
    __chkstk_darwin(v23);
    v39 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    v40 = v39;
    (*(void (**)(char *))(v14 + 16))(v39);
    v28 = sub_10001D8D4(32);
    v29 = sub_10001D8D4(96);
    v51 = v29;
    *(_DWORD *)v28 = 136446722;
    v30 = UUIDIdentifier.uuidString.getter(v9);
    sub_10008F628(v30, v31);
    v50 = v32;
    sub_10002B800((uint64_t)&v50, (uint64_t)&v51);
    swift_bridgeObjectRelease(v16);
    sub_10001E808(v25, *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
    *(_WORD *)(v28 + 12) = 2082;
    v33 = v42;
    swift_bridgeObjectRetain(v42);
    sub_1000102C0(v44, v33, &v51);
    v50 = v34;
    sub_10002B800((uint64_t)&v50, (uint64_t)&v51);
    sub_10002BD84(v33);
    *(_WORD *)(v28 + 22) = 2082;
    v35 = v49;
    sub_10001E140();
    sub_10008F414(v45, v36, &v51);
    v50 = v37;
    sub_10002B800((uint64_t)&v50, (uint64_t)&v51);
    sub_10002BD84(v35);
    v38 = sub_10008F650();
    sub_10008F6E4((void *)&_mh_execute_header, v22, (os_signpost_type_t)v43, v38, v47, "sessionIdentifier: %{public, signpost.description=attribute,public}s\ninferenceProviderIdentifier: %{public, signpost.description=attribute,public}s\nassetBundleIdentifier: %{public, signpost.description=attribute,public}s");
    sub_10008F56C();
    sub_10001D790(v29);
    sub_10001D790(v28);

    sub_10008F474((uint64_t)v40);
    sub_10008F474((uint64_t)&v51);
    goto LABEL_11;
  }
LABEL_15:
  sub_10002BA68(v42);
  sub_10002BA68(v49);
  sub_10001E808(v24, *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
  __break(1u);
}

uint64_t sub_10008EE94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for OSSignposter(0);
  sub_10001DD50(v1);
  v2 = type metadata accessor for Logger(0);
  sub_10001DD50(v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10008EEEC()
{
  return type metadata accessor for TelemetrySignposter(0);
}

uint64_t type metadata accessor for TelemetrySignposter(uint64_t a1)
{
  uint64_t result;

  result = qword_1000FDC50;
  if (!qword_1000FDC50)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TelemetrySignposter);
  return result;
}

uint64_t sub_10008EF2C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[7];

  result = type metadata accessor for OSSignposter(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = &unk_1000CC6C8;
    v5[2] = &unk_1000CC6C8;
    v5[3] = &unk_1000CC6C8;
    v5[4] = &unk_1000CC6C8;
    v5[5] = &unk_1000CC6C8;
    result = type metadata accessor for Logger(319);
    if (v4 <= 0x3F)
    {
      v5[6] = *(_QWORD *)(result - 8) + 64;
      result = swift_updateClassMetadata2(a1, 256, 7, v5, a1 + 80);
      if (!result)
        return 0;
    }
  }
  return result;
}

#error "10008EFF8: call analysis failed (funcsize=18)"

void sub_10008F00C()
{
  sub_10008CC48();
}

#error "10008F050: call analysis failed (funcsize=14)"

#error "10008F080: call analysis failed (funcsize=12)"

void sub_10008F094()
{
  sub_10008DF40();
}

void sub_10008F0B4()
{
  sub_10008E394();
}

void sub_10008F0D4()
{
  sub_10008E604();
}

void sub_10008F0F4()
{
  sub_10008E8D0();
}

void sub_10008F114()
{
  sub_10008EB40();
}

unint64_t sub_10008F134()
{
  unint64_t result;

  result = qword_1000FDD10;
  if (!qword_1000FDD10)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1000FDD10);
  }
  return result;
}

uint64_t sub_10008F170(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

unint64_t sub_10008F180()
{
  unint64_t result;

  result = qword_1000FDD18;
  if (!qword_1000FDD18)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt64, &type metadata for UInt64);
    atomic_store(result, (unint64_t *)&qword_1000FDD18);
  }
  return result;
}

unint64_t sub_10008F1BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000FBEA0;
  if (!qword_1000FBEA0)
  {
    v1 = sub_1000056BC(&qword_1000FB2A0);
    result = swift_getWitnessTable(&protocol conformance descriptor for UUIDIdentifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000FBEA0);
  }
  return result;
}

void sub_10008F200(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100002F78(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  sub_100006C14();
}

uint64_t sub_10008F240(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 112) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 112, v2, v1);
}

void sub_10008F26C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  sub_1000102C0(a1, a2, (uint64_t *)(v2 - 104));
}

uint64_t sub_10008F290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);

  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16);
  *(_QWORD *)(v13 - 144) = v12;
  return v14((char *)&a9 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v12, v10);
}

uint64_t sub_10008F2C0(uint64_t a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 96) = a1;
  *(_BYTE *)v2 = v1;
  *(_BYTE *)(v2 + 1) = v1;
  *(_WORD *)(v2 + 2) = 2082;
  return UUIDIdentifier.uuidString.getter(v3);
}

uint64_t sub_10008F2F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 104, v0, v1);
}

uint64_t sub_10008F300(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_10008F308()
{
  uint64_t v0;

  return OSSignpostIntervalState.init(id:isOpen:)(v0, 1);
}

uint64_t sub_10008F318@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v7 = (uint64_t *)(v2 + a2);
  v8 = *v7;
  *(_QWORD *)(v6 - 120) = a1;
  *(_QWORD *)(v6 - 112) = v8;
  *(_DWORD *)(v6 - 144) = *((unsigned __int8 *)v7 + 16);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v5, v4);
}

uint64_t sub_10008F340()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 8))(*(_QWORD *)(v2 - 136), v0);
}

uint64_t sub_10008F350()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 160) = v1;
  *(_QWORD *)(v2 - 152) = v0;
  return OSSignpostIntervalState.signpostID.getter();
}

uint64_t sub_10008F374(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 112) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 112, v2, v1);
}

uint64_t sub_10008F388()
{
  return type metadata accessor for OSSignpostID(0);
}

uint64_t sub_10008F390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10008F170(a3, a4);
}

uint64_t sub_10008F3B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 112, v0, v1);
}

uint64_t sub_10008F3C4(uint64_t a1)
{
  return swift_allocObject(a1, 24, 7);
}

void sub_10008F3D0(void *a1, uint64_t a2, os_signpost_type_t a3, os_signpost_id_t a4)
{
  uint8_t *v4;
  uint64_t v5;

  _os_signpost_emit_with_name_impl(a1, *(os_log_t *)(v5 - 208), a3, a4, *(const char **)(v5 - 112), *(const char **)(v5 - 152), v4, 0x16u);
}

void sub_10008F3EC(uint64_t *a1@<X2>, uint64_t a2@<X8>)
{
  unint64_t v2;

  sub_1000102C0(*(_QWORD *)(a2 - 256), v2, a1);
}

uint64_t sub_10008F3F8()
{
  uint64_t v0;

  return swift_retain(v0);
}

void sub_10008F414(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  sub_1000102C0(a1, v3, a3);
}

char *sub_10008F41C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  return (char *)&a9 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
}

char *sub_10008F430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  return (char *)&a9 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_10008F444(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of CustomStringConvertible.description.getter(*(_QWORD *)(v1 - 192), a1);
}

uint64_t sub_10008F45C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, _QWORD, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v1 + 16);
  *(_QWORD *)(v3 - 136) = v2;
  return v4(v2, *(_QWORD *)(v3 - 128), v0);
}

uint64_t sub_10008F474(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

void sub_10008F47C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 - 184) = v4;
  *(_QWORD *)(v6 - 176) = v1;
  *(_QWORD *)(v6 - 168) = v5;
  *(_QWORD *)(v6 - 208) = v3;
  *(_QWORD *)(v6 - 200) = v2;
  *(_QWORD *)(v6 - 192) = v0;
}

uint64_t sub_10008F498(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 128) = a2;
  return type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventResult(0);
}

uint64_t sub_10008F4AC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = a1;
  return v1 - 104;
}

uint64_t sub_10008F4C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 176) + 8))(v0, v1);
}

uint64_t sub_10008F4DC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_10008F4E8@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 112) = *(_QWORD *)(a2 - 256);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 112, v2, a1);
}

uint64_t sub_10008F4FC()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 168) + 8))(*(_QWORD *)(v1 - 144), v0);
}

uint64_t sub_10008F510()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 200) + 8))(v1, v0);
}

void sub_10008F524(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  sub_1000102C0(a1, v3, a3);
}

uint64_t sub_10008F52C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 112, v0, v1);
}

void sub_10008F53C()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 112) = v0 - 88;
}

uint64_t sub_10008F554(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = a1;
  return v1 - 104;
}

uint64_t sub_10008F564(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_10008F56C()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 3);
}

uint64_t sub_10008F57C()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 2);
}

uint64_t sub_10008F58C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 104) = a2;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 104, v2, a1);
}

uint64_t sub_10008F59C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 8))(v1, *(_QWORD *)(v2 - 120));
}

uint64_t sub_10008F5AC()
{
  return type metadata accessor for TelemetryIntervalState();
}

uint64_t sub_10008F5B4()
{
  return type metadata accessor for OSSignpostError(0);
}

uint64_t sub_10008F5BC()
{
  return type metadata accessor for OSSignpostIntervalState(0);
}

uint64_t sub_10008F5C4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 184));
}

void sub_10008F5DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  *(_QWORD *)(v9 - 120) = &a9;
}

uint64_t sub_10008F5F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_10008F604(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(result + 16) = v1;
  return result;
}

void sub_10008F610(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  sub_1000102C0(a1, v1, (uint64_t *)(v2 - 104));
}

uint64_t sub_10008F61C(int a1)
{
  uint64_t v1;

  *(_DWORD *)(v1 - 128) = a1;
  return OS_os_log.signpostsEnabled.getter();
}

void sub_10008F628(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  sub_1000102C0(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t sub_10008F648()
{
  return checkForErrorAndConsumeState(state:)();
}

uint64_t sub_10008F650()
{
  return OSSignpostID.rawValue.getter();
}

void sub_10008F658(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;

  sub_1000102C0(v3, v4, a3);
}

uint64_t sub_10008F6A4()
{
  return static os_signpost_type_t.begin.getter();
}

uint64_t sub_10008F6AC()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t sub_10008F6B8()
{
  return sub_10008CBDC();
}

void sub_10008F6C4(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 112) = *(_QWORD *)(v1 + a1);
}

void sub_10008F6E4(void *a1, NSObject *a2, os_signpost_type_t a3, os_signpost_id_t a4, const char *a5, const char *a6)
{
  uint8_t *v6;

  _os_signpost_emit_with_name_impl(a1, a2, a3, a4, a5, a6, v6, 0x20u);
}

uint64_t sub_10008F6F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  return sub_100037AF0((uint64_t)sub_10008F704);
}

uint64_t sub_10008F704()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 56);
  sub_100090934(v1 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  if (*(_QWORD *)(v2 + 16))
  {
    v4 = *(_QWORD *)(v0 + 40);
    v3 = *(_QWORD *)(v0 + 48);
    swift_bridgeObjectRetain(v3);
    v5 = sub_100010994(v4, v3);
    if ((v6 & 1) != 0)
      v7 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 56) + v5);
    else
      v7 = 0;
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  }
  else
  {
    v7 = 0;
  }
  sub_10002BB48();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
}

uint64_t sub_10008F794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[8] = a4;
  v5[9] = v4;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  return sub_100037AF0((uint64_t)sub_10008F7AC);
}

uint64_t sub_10008F7AC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v1 = *(void **)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  v10 = *(_QWORD *)(v0 + 40);
  v11 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain(v11);
  v4._countAndFlagsBits = 46;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = v3;
  v5._object = v1;
  String.append(_:)(v5);
  sub_100090934(v2 + 32);
  v6 = sub_100009F78(v10, v11, *(_QWORD *)(v2 + 32));
  v8 = v7 & 1;
  sub_10002BB48();
  swift_bridgeObjectRelease(v11);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v6, v8);
}

uint64_t sub_10008F854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[8] = a4;
  v5[9] = v4;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  return sub_100037AF0((uint64_t)sub_10008F86C);
}

uint64_t sub_10008F86C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = (uint64_t *)(*(_QWORD *)(v0 + 72) + 40);
  sub_100090934((uint64_t)v3);
  v4 = *v3;
  swift_bridgeObjectRetain(v1);
  v5 = sub_100009E1C(v2, v1, v4);
  v7 = v6;
  sub_10002BB48();
  swift_bridgeObjectRelease(v1);
  sub_10008F170(v5, v7);
  if (v5)
    return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000035, 0x80000001000CEB30, "modelmanagerd/TrialFrameworkMock.swift", 38, 2, 31, 0);
  v10 = *(_QWORD *)(v0 + 56);
  v9 = *(_QWORD *)(v0 + 64);
  v12 = *(_QWORD *)(v0 + 40);
  v11 = *(_QWORD *)(v0 + 48);
  v13 = swift_allocObject(&unk_1000F4258, 32, 7);
  *(_QWORD *)(v13 + 16) = v10;
  *(_QWORD *)(v13 + 24) = v9;
  swift_beginAccess(v3, v0 + 16, 33, 0);
  swift_bridgeObjectRetain(v11);
  swift_retain();
  sub_10008FD80((uint64_t)&unk_1000FDE10, v13, v12, v11);
  sub_10002BB48();
  swift_bridgeObjectRelease(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008F9D4(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v3;
  *v3 = v2;
  v3[1] = sub_1000068D0;
  return v5();
}

_QWORD *sub_10008FA28()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  return v0;
}

uint64_t sub_10008FA5C()
{
  uint64_t v0;

  sub_10008FA28();
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for TrialFrameworkMock()
{
  return objc_opt_self(_TtC13modelmanagerd18TrialFrameworkMock);
}

uint64_t sub_10008FA9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1000FDE2C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10008FAFC;
  return sub_10008F6F0(a1, a2);
}

uint64_t sub_10008FAFC(uint64_t a1)
{
  uint64_t v1;

  sub_100006974();
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(a1);
}

uint64_t sub_10008FB30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc(dword_1000FDE24);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_10008FBA8;
  return sub_10008F794(a1, a2, a3, a4);
}

uint64_t sub_10008FBA8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v6;

  v6 = *v2;
  v4 = a2 & 1;
  swift_task_dealloc(*(_QWORD *)(*v2 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v4);
}

uint64_t sub_10008FC00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc(dword_1000FDE04);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_100006454;
  return sub_10008F854(a1, a2, a3, a4);
}

uint64_t sub_10008FC78()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008FC9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1000FDE0C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000068D0;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1000FDE08 + dword_1000FDE08))(a1, v4);
}

uint64_t sub_10008FD0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10008FD24(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_10008FEAC);
}

uint64_t sub_10008FD18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10008FD24(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_10008FFCC);
}

uint64_t sub_10008FD24(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v11;

  swift_isUniquelyReferenced_nonNull_native(*v4);
  sub_10009098C();
  a4(a1, a2, a3);
  v9 = *v4;
  *v4 = v11;
  return sub_100090920(v9);
}

uint64_t sub_10008FD80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v12;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  v12 = *v4;
  *v4 = 0x8000000000000000;
  sub_1000900F4(a1, a2, a3, a4, isUniquelyReferenced_nonNull_native);
  v10 = *v4;
  *v4 = v12;
  return swift_bridgeObjectRelease(v10);
}

uint64_t sub_10008FE04(__int128 *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  swift_isUniquelyReferenced_nonNull_native(*v3);
  sub_10009098C();
  v8 = sub_100090220(a1, a2, a3, v7);
  v16 = sub_1000909A8(v8, v9, v10, v11, v12, v13, v14, v15, v18, v19);
  return sub_100090920(v16);
}

uint64_t sub_10008FE54()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  sub_100090978();
  v0 = sub_100090954();
  v3 = sub_100090340(v0, v1, v2);
  v11 = sub_1000909A8(v3, v4, v5, v6, v7, v8, v9, v10, v13, v14);
  return sub_100090944(v11);
}

uint64_t sub_10008FE80()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  sub_100090978();
  v0 = sub_100090954();
  sub_1000904B8(v0, v1, v2);
  v11 = sub_1000909A8(v3, v4, v5, v6, v7, v8, v9, v10, v13, v14);
  return sub_100090944(v11);
}

uint64_t sub_10008FEAC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  Swift::Int v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = sub_100010994(a2, a3);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }
  v16 = v11;
  v17 = v12;
  sub_100002F78(&qword_1000FD0F0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15))
    goto LABEL_5;
  v18 = sub_100010994(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }
  v16 = v18;
LABEL_5:
  v20 = *v5;
  if ((v17 & 1) != 0)
  {
    v21 = v20[7];
    v22 = v21
        + *(_QWORD *)(*(_QWORD *)(type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0) - 8)
                    + 72)
        * v16;
    return sub_100048F8C(a1, v22);
  }
  else
  {
    sub_1000905FC(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain(a3);
  }
}

uint64_t sub_10008FFCC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  Swift::Int v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = sub_100010994(a2, a3);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }
  v16 = v11;
  v17 = v12;
  sub_100002F78(&qword_1000FB690);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15))
    goto LABEL_5;
  v18 = sub_100010994(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }
  v16 = v18;
LABEL_5:
  v20 = *v5;
  if ((v17 & 1) != 0)
  {
    v21 = v20[7];
    v22 = type metadata accessor for Policy(0);
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v16, a1, v22);
  }
  else
  {
    sub_100090684(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain(a3);
  }
}

void sub_1000900F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  _BOOL8 v16;
  Swift::Int v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t *v23;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v13 = sub_100010994(a3, a4);
  v15 = v12[2];
  v16 = (v14 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_9;
  }
  v18 = v13;
  v19 = v14;
  sub_100002F78(&qword_1000FDE18);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a5 & 1, v17))
    goto LABEL_5;
  v20 = sub_100010994(a3, a4);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }
  v18 = v20;
LABEL_5:
  v22 = *v6;
  if ((v19 & 1) != 0)
  {
    v23 = (uint64_t *)(v22[7] + 16 * v18);
    swift_release();
    *v23 = a1;
    v23[1] = a2;
  }
  else
  {
    sub_100090714(v18, a3, a4, a1, a2, v22);
    swift_bridgeObjectRetain(a4);
  }
}

uint64_t sub_100090220(__int128 *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  Swift::Int v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t result;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = sub_100010994(a2, a3);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }
  v16 = v11;
  v17 = v12;
  sub_100002F78(&qword_1000FDE38);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15))
    goto LABEL_5;
  v18 = sub_100010994(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }
  v16 = v18;
LABEL_5:
  v20 = *v5;
  if ((v17 & 1) != 0)
  {
    v21 = (_QWORD *)(v20[7] + 40 * v16);
    sub_10000650C(v21);
    return sub_10000667C(a1, (uint64_t)v21);
  }
  else
  {
    sub_100090760(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain(a3);
  }
}

uint64_t sub_100090340(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  _BOOL8 v16;
  Swift::Int v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;

  v4 = (_QWORD **)v3;
  v8 = sub_100002F78(&qword_1000FB2A0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v13 = sub_1000109F0(a2);
  v15 = v12[2];
  v16 = (v14 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_9;
  }
  v18 = v13;
  v19 = v14;
  sub_100002F78(&qword_1000FDE40);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v17))
    goto LABEL_5;
  v20 = sub_1000109F0(a2);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v18 = v20;
LABEL_5:
  v22 = *v4;
  if ((v19 & 1) != 0)
  {
    v23 = v22[7];
    v24 = type metadata accessor for RequestPriority(0);
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 40))(v23 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * v18, a1, v24);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    return sub_1000907CC(v18, (uint64_t)v11, a1, v22);
  }
}

void sub_1000904B8(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  _BOOL8 v16;
  Swift::Int v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v13 = sub_100010A64(a2);
  v15 = v12[2];
  v16 = (v14 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_10;
  }
  v18 = v13;
  v19 = v14;
  sub_100002F78(&qword_1000FDE30);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v17))
    goto LABEL_5;
  v20 = sub_100010A64(a2);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return;
  }
  v18 = v20;
LABEL_5:
  v22 = *v4;
  if ((v19 & 1) != 0)
  {
    v23 = v22[7];
    swift_release(*(_QWORD *)(v23 + 8 * v18));
    *(_QWORD *)(v23 + 8 * v18) = a1;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    sub_100090888(v18, (uint64_t)v11, a1, v22);
  }
}

uint64_t sub_1000905FC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0);
  result = sub_100048D70(a4, v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

uint64_t sub_100090684(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = type metadata accessor for Policy(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, a4, v10);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

unint64_t sub_100090714(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = (_QWORD *)(a6[7] + 16 * result);
  *v7 = a4;
  v7[1] = a5;
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

uint64_t sub_100090760(unint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, _QWORD *a5)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_10000667C(a4, a5[7] + 40 * a1);
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t sub_1000907CC(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_100002F78(&qword_1000FB2A0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v10 = a4[7];
  v11 = type metadata accessor for RequestPriority(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a3, v11);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

uint64_t sub_100090888(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_100090920(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_100090934(uint64_t a1)
{
  uint64_t v1;

  return swift_beginAccess(a1, v1, 32, 0);
}

uint64_t sub_100090944(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_100090954()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = 0x8000000000000000;
  return v1;
}

uint64_t sub_100090978()
{
  _QWORD *v0;

  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

void sub_10009098C()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

uint64_t sub_1000909A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t result;

  result = *v10;
  *v10 = a10;
  return result;
}

uint64_t sub_1000909B8()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_100002FB8(v0, qword_1000FDE48);
  sub_100002FF8(v0, (uint64_t)qword_1000FDE48);
  v1 = subsystemName.getter();
  return Logger.init(subsystem:category:)(v1);
}

uint64_t sub_100090A20(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[4] = a1;
  v2 = sub_1000917E0();
  v1[5] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[6] = v3;
  v4 = *(_QWORD *)(v3 + 64);
  v1[7] = v4;
  v1[8] = sub_10001D828(v4);
  v5 = sub_100002F78(&qword_1000FB230);
  v1[9] = sub_10001D828(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  return sub_10001D674();
}

uint64_t sub_100090A8C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v2 = v0[8];
  v1 = v0[9];
  v4 = v0[6];
  v3 = v0[7];
  v6 = v0[4];
  v5 = v0[5];
  v7 = type metadata accessor for TaskPriority(0);
  sub_100005630(v1, 1, 1, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v6, v5);
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = swift_allocObject(&unk_1000F42A0, v9 + v3, v8 | 7);
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v10 + v9, v2, v5);
  sub_10000DB78(v1, (uint64_t)&unk_1000FDF08, v10);
  v12 = v11;
  v0[10] = v11;
  v13 = (_QWORD *)swift_task_alloc(async function pointer to Task.value.getter[1]);
  v0[11] = v13;
  v14 = sub_100002F78(&qword_1000FB5F8);
  *v13 = v0;
  v13[1] = sub_100090BB0;
  return Task.value.getter(v0 + 2, v12, &type metadata for Data, v14, &protocol self-conformance witness table for Error);
}

uint64_t sub_100090BB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc(v2);
  return sub_10001D674();
}

uint64_t sub_100090C0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000917D4();
  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  sub_10001E330();
  sub_10001D938();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_100090C58()
{
  uint64_t v0;

  sub_1000917D4();
  sub_10001E330();
  sub_10001D938();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100090C90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4[3] = a1;
  v4[4] = a4;
  v5 = type metadata accessor for POSIXError(0);
  v4[5] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[6] = v6;
  v4[7] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL.DirectoryHint(0);
  v4[8] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[9] = v8;
  v4[10] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for FilePath(0);
  v4[11] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[12] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[13] = swift_task_alloc(v11);
  v4[14] = swift_task_alloc(v11);
  v12 = sub_100002F78(&qword_1000FC830);
  v4[15] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL(0);
  v4[16] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v4[17] = v14;
  v4[18] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100090D9C, 0, 0);
}

uint64_t sub_100090D9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  BOOL v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t *v46;
  uint64_t (*v47)(void);
  uint64_t v48;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 64);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 96) + 16);
  v7(v3, *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 88));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v4, enum case for URL.DirectoryHint.notDirectory(_:), v6);
  sub_100091124(v3, v4, v1);
  if (sub_100005700(v1, 1, v2) == 1)
  {
    v8 = v0 + 152;
    sub_10009146C(*(_QWORD *)(v0 + 120));
    if (qword_1000FB118 != -1)
      swift_once(&qword_1000FB118, sub_1000909B8);
    v9 = *(_QWORD *)(v0 + 104);
    v10 = *(_QWORD *)(v0 + 88);
    v11 = *(_QWORD *)(v0 + 32);
    v12 = type metadata accessor for Logger(0);
    sub_100002FF8(v12, (uint64_t)qword_1000FDE48);
    v13 = v7(v9, v11, v10);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter();
    v16 = os_log_type_enabled(v14, v15);
    v17 = *(_QWORD *)(v0 + 88);
    if (v16)
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v48 = swift_slowAlloc(32, -1);
      v19 = v48;
      *(_DWORD *)v18 = 136315138;
      v20 = sub_100039A14(&qword_1000FB8D8, (uint64_t (*)(uint64_t))&type metadata accessor for FilePath, (uint64_t)&protocol conformance descriptor for FilePath);
      v21 = dispatch thunk of CustomStringConvertible.description.getter(v17, v20);
      v23 = v22;
      sub_1000102C0(v21, v22, &v48);
      *(_QWORD *)(v0 + 16) = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
      swift_bridgeObjectRelease(v23);
      sub_1000917C4();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to open %s: path contains illegal UTF-8 sequences", v18, 0xCu);
      swift_arrayDestroy(v19, 1);
      v25 = v19;
      v8 = v0 + 152;
      sub_10001D790(v25);
      sub_10001D790((uint64_t)v18);
    }
    else
    {
      sub_1000917C4();
    }

    v31 = *(_QWORD *)(v0 + 48);
    v30 = *(_QWORD *)(v0 + 56);
    v32 = *(_QWORD *)(v0 + 40);
    *(_DWORD *)(v0 + 152) = 22;
    v33 = sub_1000914AC((uint64_t)_swiftEmptyArrayStorage);
    v34 = sub_100039A14(&qword_1000FDF10, (uint64_t (*)(uint64_t))&type metadata accessor for POSIXError, (uint64_t)&protocol conformance descriptor for POSIXError);
    v35 = _BridgedStoredNSError.init(_:userInfo:)(v8, v33, v32, v34);
    POSIXError._nsError.getter(v35);
    v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    swift_willThrow(v36, v37, v38, v39, v40, v41, v42, v43);
    swift_task_dealloc();
    sub_10001D938();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v47 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    v26 = *(_QWORD *)(v0 + 144);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 32))(v26, *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
    v27 = Data.init(contentsOf:options:)(v26, 0);
    v29 = v28;
    v45 = v27;
    v46 = *(uint64_t **)(v0 + 24);
    sub_10008BC68(*(_QWORD *)(v0 + 136));
    *v46 = v45;
    v46[1] = v29;
    sub_10001D938();
    sub_10001E330();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v47 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v47();
}

uint64_t sub_100091124@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = a3;
  v5 = sub_100002F78(&qword_1000FC830);
  __chkstk_darwin(v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL.DirectoryHint(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for FilePath(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  v16 = String.init(validating:)(v15);
  if (v17)
  {
    v18 = v17;
    v19 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v28 = v16;
    v19(v11, a2, v8);
    v20 = type metadata accessor for URL(0);
    v21 = v30;
    v29 = a1;
    v22 = v20;
    sub_100005630((uint64_t)v7, 1, 1, v20);
    URL.init(filePath:directoryHint:relativeTo:)(v28, v18, v11, v7);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a2, v8);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v29, v12);
    v23 = v21;
    v24 = 0;
    v25 = v22;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a2, v8);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
    v25 = type metadata accessor for URL(0);
    v23 = v30;
    v24 = 1;
  }
  return sub_100005630(v23, v24, 1, v25);
}

uint64_t sub_100091304()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for FilesystemProvider()
{
  return objc_opt_self(_TtC13modelmanagerd18FilesystemProvider);
}

uint64_t sub_100091334()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_1000917E0();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000913A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000917E0() - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc(dword_1000FDF04);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100091424;
  return sub_100090C90(a1, v5, v6, v7);
}

uint64_t sub_100091424()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10009146C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100002F78(&qword_1000FC830);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000914AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100002F78(&qword_1000FDF18);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10009177C(v7, (uint64_t)&v16);
    v8 = v16;
    v9 = v17;
    result = sub_1000915D4(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_100048DD4(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000915D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_100091638(a1, a2, v5);
}

unint64_t sub_100091638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    v11 = v10[1];
    if ((*v10 != a1 || v11 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      i = (i + 1) & v13;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v14 = (_QWORD *)(v9 + 16 * i);
        v15 = v14[1];
        if ((*v14 != a1 || v15 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0)
        {
          for (i = (i + 1) & v13; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v13)
          {
            v17 = (_QWORD *)(v9 + 16 * i);
            v18 = v17[1];
            if (*v17 == a1 && v18 == a2)
              break;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

uint64_t sub_10009177C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100002F78(&qword_1000FDF20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000917C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_1000917D4()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 80));
}

uint64_t sub_1000917E0()
{
  return type metadata accessor for FilePath(0);
}

uint64_t sub_1000917E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_100091804, 0, 0);
}

uint64_t sub_100091804()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 48) = v2;
  v3 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v4;
  *v4 = v0;
  v4[1] = sub_1000918AC;
  return withCheckedContinuation<A>(isolation:function:_:)(*(_QWORD *)(v0 + 16), 0, 0, 0xD00000000000001FLL, 0x80000001000CEC30, sub_100094400, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_1000918AC()
{
  uint64_t v0;
  uint64_t v1;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v1 + 56));
  sub_10001E330();
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

double sub_1000918DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD aBlock[6];

  v31 = a2;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v28 = *(_QWORD *)(v10 - 8);
  v29 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100002F78(&qword_1000FB818);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
  v17 = *(unsigned __int8 *)(v14 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = swift_allocObject(&unk_1000F4380, v18 + v15, v17 | 7);
  *(_QWORD *)(v19 + 16) = a3;
  *(_QWORD *)(v19 + 24) = a4;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v19 + v18, v16, v13);
  aBlock[4] = sub_100094484;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A194C;
  aBlock[3] = &unk_1000F4398;
  v20 = _Block_copy(aBlock);
  v21 = swift_retain();
  static DispatchQoS.unspecified.getter(v21);
  v32 = _swiftEmptyArrayStorage;
  sub_100006710((unint64_t *)&unk_1000FEED0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  v23 = v22;
  v24 = sub_100002F78(&qword_1000FBF38);
  sub_100006744(&qword_1000FEEE0, &qword_1000FBF38);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v24, v25, v7, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v9, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v29);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_100091B44(void (*a1)(void))
{
  uint64_t v1;

  a1();
  v1 = sub_100002F78(&qword_1000FB818);
  return CheckedContinuation.resume(returning:)(v1, v1);
}

uint64_t sub_100091B80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  id v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v2 = sub_100002F78(&qword_1000FE0D8);
  __chkstk_darwin(v2);
  v33 = (unint64_t)_swiftEmptyArrayStorage;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  sub_100006744(&qword_1000FE150, &qword_1000FE0D8);
  v6 = dispatch thunk of Sequence.makeIterator()(v2, v5);
  v6.n128_u64[0] = 67109120;
  v27 = v6;
  while (1)
  {
    result = v28;
    v8 = v31;
    if (v32)
    {
      v9 = (v32 - 1) & v32;
      v10 = __clz(__rbit64(v32)) | (v31 << 6);
      goto LABEL_20;
    }
    v11 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    v12 = (unint64_t)(v30 + 64) >> 6;
    if (v11 >= v12)
      goto LABEL_29;
    v13 = *(_QWORD *)(v29 + 8 * v11);
    v14 = v31 + 1;
    if (!v13)
    {
      v14 = v31 + 2;
      if (v31 + 2 >= v12)
        goto LABEL_29;
      v13 = *(_QWORD *)(v29 + 8 * v14);
      if (!v13)
      {
        v14 = v31 + 3;
        if (v31 + 3 >= v12)
          goto LABEL_29;
        v13 = *(_QWORD *)(v29 + 8 * v14);
        if (!v13)
        {
          v14 = v31 + 4;
          if (v31 + 4 >= v12)
            goto LABEL_29;
          v13 = *(_QWORD *)(v29 + 8 * v14);
          if (!v13)
          {
            v14 = v31 + 5;
            if (v31 + 5 >= v12)
              goto LABEL_29;
            v13 = *(_QWORD *)(v29 + 8 * v14);
            if (!v13)
            {
              v15 = v31 + 6;
              while (v15 < v12)
              {
                v13 = *(_QWORD *)(v29 + 8 * v15++);
                if (v13)
                {
                  v14 = v15 - 1;
                  goto LABEL_19;
                }
              }
LABEL_29:
              sub_10001CD34(v28);
              return v33;
            }
          }
        }
      }
    }
LABEL_19:
    v9 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v14 << 6);
    v8 = v14;
LABEL_20:
    v16 = *(unsigned int *)(*(_QWORD *)(v28 + 48) + 4 * v10);
    v31 = v8;
    v32 = v9;
    v17 = objc_msgSend((id)objc_opt_self(RBSProcessIdentifier), "identifierWithPid:", v16);
    if (v17)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v17);
      v19 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v18 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v19 >= v18 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
      v20 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19);
      specialized Array._endMutation()(v20);
    }
    else
    {
      if (qword_1000FB120 != -1)
        swift_once(&qword_1000FB120, sub_100091F58);
      v21 = type metadata accessor for Logger(0);
      v22 = sub_100002FF8(v21, (uint64_t)qword_1000FDF28);
      v23 = Logger.logObject.getter(v22);
      v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v24))
      {
        v25 = swift_slowAlloc(8, -1);
        *(_DWORD *)v25 = v27.n128_u32[0];
        *(_DWORD *)(v25 + 4) = v16;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Could not get RBSProcessIdentifier for %d", (uint8_t *)v25, 8u);
        swift_slowDealloc(v25, -1, -1);
      }

    }
  }
  __break(1u);
  return result;
}

id sub_100091E84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v17[6];

  v2 = v1;
  v17[0] = 0;
  v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(v2), "handleForIdentifier:error:", a1, v17);
  v5 = v17[0];
  if (v4)
  {
    v6 = v17[0];
  }
  else
  {
    v7 = v17[0];
    _convertNSErrorToError(_:)(v5);

    swift_willThrow(v8, v9, v10, v11, v12, v13, v14, v15, v17[0], v17[1], v17[2], v17[3], v17[4], v17[5]);
  }
  swift_unknownObjectRelease(a1);
  return v4;
}

uint64_t sub_100091F58()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_100002FB8(v0, qword_1000FDF28);
  sub_100002FF8(v0, (uint64_t)qword_1000FDF28);
  v1 = subsystemName.getter();
  return Logger.init(subsystem:category:)(v1);
}

void sub_100091FC4()
{
  id v0;

  v0 = objc_msgSend(objc_allocWithZone((Class)RBSProcessStateDescriptor), "init");
  objc_msgSend(v0, "setValues:", 1);
  sub_100094320((uint64_t)&off_1000F2730, v0);
  qword_1000FFE50 = (uint64_t)v0;
}

uint64_t sub_100092020()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[5];
  uint64_t v27;

  v2 = v0;
  v25 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v3 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue_concurrent.Attributes(0);
  sub_10002BCBC();
  __chkstk_darwin(v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DispatchQoS(0);
  sub_10002BCBC();
  __chkstk_darwin(v10);
  sub_10001E66C();
  swift_defaultActor_initialize(v2);
  v11 = CountedSet.init(arrayLiteral:)(_swiftEmptyArrayStorage, &type metadata for Int32, &protocol witness table for Int32);
  v24 = OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider_queue;
  sub_100044B00(v11, &qword_1000FE198, OS_dispatch_queue_concurrent_ptr);
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100006710(&qword_1000FE1A0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue_concurrent.Attributes);
  v13 = v12;
  v14 = sub_100002F78(&qword_1000FE1A8);
  sub_100006744(&qword_1000FE1B0, &qword_1000FE1A8);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v14, v15, v6, v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v25);
  v16 = OS_dispatch_queue_concurrent.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000014, 0x80000001000CC760, v1, v9, v5, 0);
  *(_QWORD *)(v2 + v24) = v16;
  v17 = OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider_workQueueState;
  v18 = type metadata accessor for WorkQueueState();
  v19 = sub_100006A80(v18, 32);
  *(_QWORD *)(v19 + 16) = 0;
  *(_QWORD *)(v19 + 24) = 0;
  *(_QWORD *)(v2 + v17) = v19;
  v20 = sub_100002F78(&qword_1000FBED8);
  sub_100094800(v20);
  v21 = objc_msgSend(objc_allocWithZone((Class)RBSProcessMonitor), "init");
  *(_QWORD *)(v2 + 112) = v21;
  aBlock[4] = sub_100092368;
  v27 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10009236C;
  aBlock[3] = &unk_1000F4550;
  v22 = _Block_copy(aBlock);
  swift_release(v27);
  objc_msgSend(v21, "updateConfiguration:", v22);
  _Block_release(v22);
  result = swift_isEscapingClosureAtFileLocation(0, "", 102, 30, 50, 1);
  if ((result & 1) == 0)
    return v2;
  __break(1u);
  return result;
}

id sub_1000922FC(id a1)
{
  if (qword_1000FB128 != -1)
    swift_once(&qword_1000FB128, sub_100091FC4);
  objc_msgSend(a1, "setStateDescriptor:", qword_1000FFE50);
  return objc_msgSend(a1, "setServiceClass:", 33);
}

uint64_t sub_10009236C(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain(a2);
  v3(a2);
  return swift_unknownObjectRelease(a2);
}

uint64_t sub_1000923A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[24];
  _BYTE v16[24];

  v4 = sub_100002F78(&qword_1000FE178);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10001E66C();
  sub_100002F78(&qword_1000FE180);
  sub_10002BCBC();
  v7 = __chkstk_darwin(v6);
  v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v11 = &v15[-v10];
  v12 = v1 + OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider____lazy_storage___processEventStream;
  sub_10002B308(v1 + OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider____lazy_storage___processEventStream, (uint64_t)v16, 0);
  sub_100094604(v12, (uint64_t)v11);
  v13 = sub_100002F78(&qword_1000FBED8);
  if (sub_100005700((uint64_t)v11, 1, v13) != 1)
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, v11, v13);
  sub_10009464C((uint64_t)v11);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v2, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v4);
  AsyncStream.init(_:bufferingPolicy:_:)(&type metadata for ProcessEvent, v2, sub_10009468C, v1, &type metadata for ProcessEvent);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v9, a1, v13);
  sub_100005630((uint64_t)v9, 0, 1, v13);
  sub_10002B308(v12, (uint64_t)v15, 33);
  sub_100094694((uint64_t)v9, v12);
  return swift_endAccess(v15);
}

uint64_t sub_100092568(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t result;
  _QWORD aBlock[5];
  uint64_t v16;

  v4 = sub_100002F78(&qword_1000FE188);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = *(void **)(a2 + 112);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_1000F4498, v9 + v6, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  v11 = swift_allocObject(&unk_1000F44C0, 32, 7);
  *(_QWORD *)(v11 + 16) = sub_1000946E0;
  *(_QWORD *)(v11 + 24) = v10;
  aBlock[4] = sub_1000947F0;
  v16 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10009236C;
  aBlock[3] = &unk_1000F44D8;
  v12 = _Block_copy(aBlock);
  v13 = v16;
  swift_retain(v11);
  swift_release(v13);
  objc_msgSend(v7, "updateConfiguration:", v12);
  _Block_release(v12);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation(v11, "", 102, 38, 54, 1);
  swift_release(v10);
  result = swift_release(v11);
  if ((v7 & 1) != 0)
    __break(1u);
  return result;
}

void sub_100092708(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD aBlock[5];
  uint64_t v12;

  v4 = sub_100002F78(&qword_1000FE188);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v4);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = swift_allocObject(&unk_1000F4510, v8 + v6, v7 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_100094780;
  v12 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000929D0;
  aBlock[3] = &unk_1000F4528;
  v10 = _Block_copy(aBlock);
  swift_release(v12);
  objc_msgSend(a1, "setUpdateHandler:", v10);
  _Block_release(v10);
}

uint64_t sub_100092838(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  unsigned int v12;
  char v13;

  v5 = sub_100002F78(&qword_1000FE190);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(a3) = sub_100092914(objc_msgSend(a3, "state"));
  v12 = objc_msgSend(a2, "pid");
  v13 = (char)a3;
  v9 = sub_100002F78(&qword_1000FE188);
  AsyncStream.Continuation.yield(_:)(&v12, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100092914(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  unsigned int v7;

  if (!a1)
    return 3;
  v1 = a1;
  v2 = sub_1000942C4(v1);
  if (v2)
  {
    v3 = v2;
    sub_10002C3B4(0xD00000000000001FLL, 0x80000001000CD650, v2);
    v5 = v4;
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    v5 = 0;
  }
  v7 = objc_msgSend(v1, "taskState");

  if ((v5 & 1) != 0)
    return 0;
  if (v7 <= 4)
    return (0x102010304uLL >> (8 * v7));
  return 4;
}

void sub_1000929D0(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7;
  void (*v8)(id, id, id);
  id v9;
  id v10;
  id v11;

  v8 = *(void (**)(id, id, id))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  swift_retain(v7);
  v11 = a2;
  v9 = a3;
  v10 = a4;
  v8(v11, v9, v10);
  swift_release(v7);

}

uint64_t sub_100092A58(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v2 + 40) = v1;
  *(_DWORD *)(v2 + 88) = a1;
  v3 = sub_100002F78(&qword_1000FB230);
  *(_QWORD *)(v2 + 48) = sub_10001D800(*(_QWORD *)(v3 - 8));
  v4 = sub_100002F78(&qword_1000FE0D8);
  *(_QWORD *)(v2 + 56) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v2 + 64) = v5;
  *(_QWORD *)(v2 + 72) = sub_10001D800(v5);
  return sub_10001D674();
}

uint64_t sub_100092AC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_DWORD *)(v0 + 88);
  *(_DWORD *)(v0 + 80) = v5;
  v6 = v4 + OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider__monitoredPids;
  sub_10002B308(v4 + OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider__monitoredPids, v0 + 16, 33);
  CountedSet.add(_:)(v0 + 80, v3);
  swift_endAccess(v0 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v6, v3);
  *(_DWORD *)(v0 + 84) = v5;
  v7 = CountedSet.count(of:)(v0 + 84, v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (v7 == 1)
  {
    v8 = type metadata accessor for TaskPriority(0);
    sub_100094800(v8);
    sub_100006710(&qword_1000FB6E0, type metadata accessor for RunningBoardProvider);
    v9 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F4470, 40);
    v10 = sub_100094824(v9);
    v11 = sub_100044AA4(v10, (uint64_t)&unk_1000FE170);
    swift_release(v11);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  sub_10001E330();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100092BFC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1000FDF94);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10001FAA0;
  return sub_100092EE8();
}

uint64_t sub_100092C44(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v2 + 64) = v1;
  *(_DWORD *)(v2 + 120) = a1;
  v3 = sub_100002F78(&qword_1000FB230);
  *(_QWORD *)(v2 + 72) = sub_10001D800(*(_QWORD *)(v3 - 8));
  v4 = sub_100002F78(&qword_1000FE0D8);
  *(_QWORD *)(v2 + 80) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v2 + 88) = v5;
  *(_QWORD *)(v2 + 96) = sub_10001D800(v5);
  return sub_10001D674();
}

uint64_t sub_100092CB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  int v20;
  uint8_t *v21;

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_DWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 64) + OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider__monitoredPids;
  sub_10002B308(v5, v0 + 16, 0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v6(v1, v5, v3);
  *(_DWORD *)(v0 + 104) = v4;
  v7 = CountedSet.count(of:)(v0 + 104, v3);
  v8 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v8(v1, v3);
  if (v7)
  {
    v9 = *(_QWORD *)(v0 + 96);
    v10 = *(_QWORD *)(v0 + 80);
    v11 = *(_DWORD *)(v0 + 120);
    *(_DWORD *)(v0 + 112) = v11;
    sub_10002B308(v5, v0 + 40, 33);
    CountedSet.remove(_:)(v0 + 112, v10);
    swift_endAccess(v0 + 40);
    v6(v9, v5, v10);
    *(_DWORD *)(v0 + 116) = v11;
    v12 = CountedSet.count(of:)(v0 + 116, v10);
    v8(v9, v10);
    if (!v12)
    {
      v13 = type metadata accessor for TaskPriority(0);
      sub_100094800(v13);
      sub_100006710(&qword_1000FB6E0, type metadata accessor for RunningBoardProvider);
      v14 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F4448, 40);
      v15 = sub_100094824(v14);
      v16 = sub_100044AA4(v15, (uint64_t)&unk_1000FE160);
      swift_release(v16);
    }
  }
  else
  {
    if (qword_1000FB120 != -1)
      swift_once(&qword_1000FB120, sub_100091F58);
    v17 = sub_10001DD64();
    v18 = sub_100037AC4(v17, (uint64_t)qword_1000FDF28);
    v19 = static os_log_type_t.fault.getter();
    if (sub_10001E6C4(v19))
    {
      v20 = *(_DWORD *)(v0 + 120);
      v21 = (uint8_t *)sub_1000947F4();
      *(_DWORD *)v21 = 67109120;
      *(_DWORD *)(v0 + 108) = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 108, v0 + 112, v21 + 4);
      sub_10009483C((void *)&_mh_execute_header, v18, (os_log_type_t)v5, "Cannot stop monitoring pid that is not being monitored: %d", v21);
      sub_10001D790((uint64_t)v21);
    }

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  sub_10001E330();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100092EE8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_10001D948((uint64_t)sub_100092EFC, v0);
}

uint64_t sub_100092EFC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  v1 = unk_1000FB6DC;
  v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1000FB6D8 + dword_1000FB6D8);
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 24) = v2;
  *v2 = v0;
  v2[1] = sub_100092F70;
  return v4((uint64_t)v4, (uint64_t)&unk_1000FE0D0, *(_QWORD *)(v0 + 16));
}

uint64_t sub_100092F70()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 24));
  swift_release();
  return sub_10001D674();
}

uint64_t sub_100092FB0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;

  v2[5] = a2;
  v4 = sub_100002F78(&qword_1000FE0D8);
  v2[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[7] = v5;
  v2[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100093018, a2, 0);
}

uint64_t sub_100093018()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  _QWORD *v15;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);

  v2 = v0[7];
  v1 = v0[8];
  v4 = v0[5];
  v3 = v0[6];
  v5 = v4 + OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider__monitoredPids;
  sub_10002B308(v4 + OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider__monitoredPids, (uint64_t)(v0 + 2), 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v5, v3);
  v6 = sub_100091B80(v1);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100044B00(v7, &qword_1000FE0E0, RBSProcessPredicate_ptr);
  sub_10000C0C0(v6);
  v9 = sub_1000931C0(v8);
  v0[9] = v9;
  v10 = *(void **)(v4 + 112);
  v11 = sub_100006A80((uint64_t)&unk_1000F4358, 32);
  v0[10] = v11;
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  v12 = unk_1000FE0EC;
  v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1000FE0E8 + dword_1000FE0E8);
  v13 = v10;
  v14 = v9;
  v15 = (_QWORD *)swift_task_alloc(v12);
  v0[11] = v15;
  *v15 = v0;
  v15[1] = sub_100093150;
  return v17((uint64_t)v17, (uint64_t)sub_1000943F8, v11);
}

uint64_t sub_100093150()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 88));
  swift_release();
  return sub_10001D6D0();
}

uint64_t sub_100093194()
{
  uint64_t v0;

  sub_10001E330();
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

id sub_1000931C0(uint64_t a1)
{
  uint64_t v1;
  Class isa;
  id v4;

  sub_100043DFC(0, (unint64_t *)&qword_1000FB708, RBSProcessIdentifier_ptr);
  sub_1000944FC();
  isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(v1), "predicateMatchingIdentifiers:", isa);

  return v4;
}

void sub_10009324C(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD v8[6];

  v4 = swift_allocObject(&unk_1000F43D0, 24, 7);
  *(_QWORD *)(v4 + 16) = a2;
  v5 = swift_allocObject(&unk_1000F43F8, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_1000944D0;
  *(_QWORD *)(v5 + 24) = v4;
  v8[4] = sub_1000944DC;
  v8[5] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_10009236C;
  v8[3] = &unk_1000F4410;
  v6 = _Block_copy(v8);
  v7 = a2;
  swift_retain();
  objc_msgSend(a1, "updateConfiguration:", v6, swift_release().n128_f64[0]);
  _Block_release(v6);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation(v5, "", 102, 83, 57, 1);
  swift_release();
  swift_release();
  if ((a1 & 1) != 0)
    __break(1u);
}

void sub_100093378(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  Class isa;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _QWORD *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_100002F78(&qword_1000FB750);
  v5 = swift_allocObject(v4, 40, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1000CBCC0;
  *(_QWORD *)(v5 + 32) = a2;
  v15 = v5;
  specialized Array._endMutation()(v5);
  sub_100043DFC(0, &qword_1000FE0E0, RBSProcessPredicate_ptr);
  v6 = a2;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v15);
  objc_msgSend(a1, "setPredicates:", isa);

  if (qword_1000FB120 != -1)
    swift_once(&qword_1000FB120, sub_100091F58);
  v8 = type metadata accessor for Logger(0);
  sub_100002FF8(v8, (uint64_t)qword_1000FDF28);
  v14 = v6;
  v9 = Logger.logObject.getter(v14);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v11 = 138412290;
    v15 = (uint64_t)v14;
    v13 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16);
    *v12 = v14;

    _os_log_impl((void *)&_mh_execute_header, v9, v10, "New Predicate: %@", v11, 0xCu);
    sub_100002F78(&qword_1000FB8E0);
    swift_arrayDestroy(v12, 1);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_1000935B8(int a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = v1;
  *(_DWORD *)(v2 + 84) = a1;
  return sub_10001D948((uint64_t)sub_1000935D0, 0);
}

uint64_t sub_1000935D0()
{
  os_log_type_t v0;
  uint64_t v1;
  NSObject *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD *v8;
  uint64_t v10;
  os_log_type_t v11;
  int v12;
  uint8_t *v13;
  uint64_t (*v14)(void (*)(uint64_t *@<X8>), uint64_t);

  v2 = *(unsigned int *)(v1 + 84);
  v3 = objc_msgSend((id)objc_opt_self(RBSProcessIdentifier), "identifierWithPid:", v2);
  *(_QWORD *)(v1 + 32) = v3;
  if (v3)
  {
    v4 = v3;
    v5 = sub_100006A80((uint64_t)&unk_1000F4330, 24);
    *(_QWORD *)(v1 + 40) = v5;
    *(_QWORD *)(v5 + 16) = v4;
    v6 = unk_1000FEAE4;
    v14 = (uint64_t (*)(void (*)(uint64_t *@<X8>), uint64_t))((char *)&dword_1000FEAE0
                                                                               + dword_1000FEAE0);
    v7 = v4;
    v8 = (_QWORD *)swift_task_alloc(v6);
    *(_QWORD *)(v1 + 48) = v8;
    *v8 = v1;
    v8[1] = sub_100093780;
    return v14(sub_1000942AC, v5);
  }
  else
  {
    if (qword_1000FB120 != -1)
      swift_once(&qword_1000FB120, sub_100091F58);
    v10 = sub_10001DD64();
    sub_100037AC4(v10, (uint64_t)qword_1000FDF28);
    v11 = sub_10001E9D0();
    if (sub_100039E20(v11))
    {
      v12 = *(_DWORD *)(v1 + 84);
      v13 = (uint8_t *)sub_1000947F4();
      *(_DWORD *)v13 = 67109120;
      *(_DWORD *)(v1 + 72) = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 72, v1 + 76, v13 + 4);
      sub_10009483C((void *)&_mh_execute_header, v2, v0, "Failed to get RBSProcessIdentifier for %d. Interpreting as process terminated", v13);
      sub_10001D790((uint64_t)v13);
    }

    return (*(uint64_t (**)(uint64_t))(v1 + 8))(3);
  }
}

uint64_t sub_100093780(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 48);
  v3[7] = a1;
  v3[8] = v1;
  swift_task_dealloc(v4);
  if (!v1)
    swift_release(v3[5]);
  return sub_10001D6D0();
}

uint64_t sub_1000937EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  _BOOL4 v10;
  int v11;
  uint8_t *v12;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 56);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v14 = *(_QWORD *)(v0 + 56);
    else
      v14 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 56));
    v2 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(v1);
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v2)
  {
    v3 = v1 & 0xC000000000000001;
    sub_1000BF908(0, (v1 & 0xC000000000000001) == 0);
    v4 = *(_QWORD *)(v0 + 56);
    if (v3)
    {
      v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, *(_QWORD *)(v0 + 56));
      v4 = *(_QWORD *)(v0 + 56);
    }
    else
    {
      v5 = *(id *)(v4 + 32);
    }
    v6 = *(void **)(v0 + 32);
    swift_bridgeObjectRelease(v4);
    v7 = sub_100092914(v5);
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
    if (qword_1000FB120 != -1)
      swift_once(&qword_1000FB120, sub_100091F58);
    v8 = sub_10001DD64();
    sub_100037AC4(v8, (uint64_t)qword_1000FDF28);
    v9 = sub_10001E9D0();
    v10 = sub_100039E20(v9);
    v6 = *(void **)(v0 + 32);
    if (v10)
    {
      v11 = *(_DWORD *)(v0 + 84);
      v12 = (uint8_t *)sub_1000947F4();
      *(_DWORD *)v12 = 67109120;
      *(_DWORD *)(v0 + 80) = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 84, v12 + 4);
      sub_10009483C((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Failed to get RBSProcessHandle for %d. Interpreting as process terminated", v12);
      sub_10001D790((uint64_t)v12);

      v7 = 3;
    }
    else
    {

      v7 = 3;
      v6 = (void *)v1;
    }
  }

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
}

uint64_t sub_1000939A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  swift_release(*(_QWORD *)(v0 + 40));
  if (qword_1000FB120 != -1)
    swift_once(&qword_1000FB120, sub_100091F58);
  v1 = *(_QWORD *)(v0 + 64);
  v2 = sub_10001DD64();
  v3 = sub_100002FF8(v2, (uint64_t)qword_1000FDF28);
  swift_errorRetain(v1);
  v4 = swift_errorRetain(v1);
  v5 = v3;
  Logger.logObject.getter(v4);
  v6 = sub_10001E9D0();
  v7 = os_log_type_enabled(v3, v6);
  v8 = *(_QWORD *)(v0 + 64);
  v9 = *(NSObject **)(v0 + 32);
  if (v7)
  {
    v10 = *(_DWORD *)(v0 + 84);
    v11 = sub_100094858();
    v12 = (_QWORD *)sub_1000947F4();
    *(_DWORD *)v11 = 67109378;
    *(_DWORD *)(v0 + 76) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 76, v0 + 80, v11 + 4);
    *(_WORD *)(v11 + 8) = 2112;
    swift_errorRetain(v8);
    v13 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(_QWORD *)(v0 + 16) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v11 + 10);
    *v12 = v13;
    sub_10002B498();
    sub_10002B498();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to get RBSProcessHandle for %d: %@. Interpreting as process terminated", (uint8_t *)v11, 0x12u);
    sub_100002F78(&qword_1000FB8E0);
    swift_arrayDestroy(v12, 1);
    sub_10001D790((uint64_t)v12);
    sub_10001D790(v11);

  }
  else
  {

    sub_10002B498();
    sub_10002B498();
    v9 = v5;
  }
  sub_10002B498();

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(3);
}

void sub_100093B60(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;

  v4 = (void *)objc_opt_self(RBSProcessState);
  v5 = objc_msgSend((id)objc_opt_self(RBSProcessPredicate), "predicateMatchingIdentifier:", a1);
  if (qword_1000FB128 != -1)
    swift_once(&qword_1000FB128, sub_100091FC4);
  v20 = 0;
  v6 = objc_msgSend(v4, "statesForPredicate:withDescriptor:error:", v5, qword_1000FFE50, &v20);

  v7 = v20;
  if (v6)
  {
    v8 = sub_100043DFC(0, &qword_1000FE0C0, RBSProcessState_ptr);
    v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v8);
    v10 = v7;

    *a2 = v9;
  }
  else
  {
    v11 = v20;
    _convertNSErrorToError(_:)(v7);

    swift_willThrow(v12, v13, v14, v15, v16, v17, v18, v19);
  }
}

uint64_t sub_100093CC0(uint64_t a1)
{
  NSObject *v1;
  os_log_type_t v2;
  int v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  int v13;
  int v14;

  v3 = a1;
  v4 = objc_msgSend((id)objc_opt_self(RBSProcessIdentifier), "identifierWithPid:", a1);
  if (v4)
  {
    v5 = v4;
    sub_100044B00((uint64_t)v4, &qword_1000FCD90, RBSProcessHandle_ptr);
    v6 = v5;
    v7 = sub_100091E84((uint64_t)v6);
    v11 = sub_100093F8C(v7);

    return v11 & 1;
  }
  else
  {
    if (qword_1000FB120 != -1)
      swift_once(&qword_1000FB120, sub_100091F58);
    v8 = sub_10001DD64();
    sub_100037AC4(v8, (uint64_t)qword_1000FDF28);
    v9 = sub_10001E9D0();
    if (sub_10001E6C4(v9))
    {
      v10 = (uint8_t *)sub_1000947F4();
      *(_DWORD *)v10 = 67109120;
      v13 = v3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v10 + 4);
      sub_10009483C((void *)&_mh_execute_header, v1, v2, "Failed to get RBSProcessIdentifier for %d.", v10);
      sub_10001D790((uint64_t)v10);
    }

    return 0;
  }
}

id sub_100093F8C(void *a1)
{
  id v2;
  id v3;
  void *v4;

  v2 = objc_msgSend(a1, "isDaemon");
  v3 = objc_msgSend(a1, "daemonJobLabel");
  if (v3)
  {
    v4 = v3;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  return v2;
}

void sub_100094018()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider__monitoredPids;
  v2 = sub_100002F78(&qword_1000FE0D8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  swift_release();
  sub_10009464C(v0 + OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider____lazy_storage___processEventStream);
  swift_defaultActor_destroy(v0);
  sub_100006C14();
}

uint64_t sub_10009409C()
{
  uint64_t v0;

  sub_100094018();
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000940B4()
{
  return type metadata accessor for RunningBoardProvider(0);
}

uint64_t type metadata accessor for RunningBoardProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_1000FDF70;
  if (!qword_1000FDF70)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RunningBoardProvider);
  return result;
}

void sub_1000940F4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[6];

  v6[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_1000941A4();
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    v6[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v6[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    sub_1000941F4(319);
    if (v5 <= 0x3F)
    {
      v6[5] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 6, v6, a1 + 80);
    }
  }
}

void sub_1000941A4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1000FDFA0)
  {
    v0 = type metadata accessor for CountedSet(0, &type metadata for Int32, &protocol witness table for Int32);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1000FDFA0);
  }
}

void sub_1000941F4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000FDFA8)
  {
    v2 = sub_1000056BC(&qword_1000FBED8);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000FDFA8);
  }
}

void sub_10009424C(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FB6E0, type metadata accessor for RunningBoardProvider);
  *(_QWORD *)(a1 + 8) = v2;
}

uint64_t sub_100094288()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000942AC(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_100093B60(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000942C4(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, "endowmentNamespaces");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String, &protocol witness table for String);

  return v3;
}

void sub_100094320(uint64_t a1, void *a2)
{
  Class isa;

  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  objc_msgSend(a2, "setEndowmentNamespaces:", isa);

}

uint64_t sub_100094378(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_1000FE0CC);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10001FAA0;
  return sub_100092FB0(a1, v1);
}

uint64_t sub_1000943CC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000943F8()
{
  uint64_t v0;

  sub_10009324C(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

double sub_100094400(uint64_t a1)
{
  uint64_t *v1;

  return sub_1000918DC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10009440C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  v1 = sub_100002F78(&qword_1000FB818);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = swift_release();
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 8))(v0 + v4, v1, v7);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100094484()
{
  uint64_t v0;

  sub_100002F78(&qword_1000FB818);
  return sub_100091B44(*(void (**)(void))(v0 + 16));
}

uint64_t sub_1000944B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000944C8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000944D0(void *a1)
{
  uint64_t v1;

  sub_100093378(a1, *(void **)(v1 + 16));
}

uint64_t sub_1000944DC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

unint64_t sub_1000944FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000FB710;
  if (!qword_1000FB710)
  {
    v1 = sub_100043DFC(255, (unint64_t *)&qword_1000FB708, RBSProcessIdentifier_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1000FB710);
  }
  return result;
}

uint64_t sub_100094550()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1000FE15C);
  *(_QWORD *)(v0 + 16) = v1;
  sub_100006AD8(v1);
  return sub_100092BFC();
}

uint64_t sub_1000945AC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1000FE16C);
  *(_QWORD *)(v0 + 16) = v1;
  sub_100006AD8(v1);
  return sub_100092BFC();
}

uint64_t sub_100094604(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100002F78(&qword_1000FE180);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10009464C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100002F78(&qword_1000FE180);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10009468C(uint64_t a1)
{
  uint64_t v1;

  return sub_100092568(a1, v1);
}

uint64_t sub_100094694(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100002F78(&qword_1000FE180);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1000946E0(void *a1)
{
  uint64_t v1;
  uint64_t v3;

  sub_100002F78(&qword_1000FE188);
  sub_100094844();
  sub_100092708(a1, v1 + v3);
}

uint64_t sub_10009471C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100002F78(&qword_1000FE188);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100094780(uint64_t a1, void *a2, void *a3)
{
  sub_100002F78(&qword_1000FE188);
  sub_100094844();
  return sub_100092838(a1, a2, a3);
}

uint64_t sub_1000947F4()
{
  return swift_slowAlloc(8, -1);
}

uint64_t sub_100094800(uint64_t a1)
{
  uint64_t v1;

  return sub_100005630(v1, 1, 1, a1);
}

uint64_t sub_100094814()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100094824(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  a1[2] = v1;
  a1[3] = v2;
  a1[4] = v1;
  return swift_retain_n(v1, 2);
}

void sub_10009483C(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 8u);
}

uint64_t sub_100094858()
{
  return swift_slowAlloc(18, -1);
}

ValueMetadata *type metadata accessor for AssetTransitionDelayTrial()
{
  return &type metadata for AssetTransitionDelayTrial;
}

uint64_t sub_100094874()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100002F78(&qword_1000FB250);
  sub_100002FB8(v0, qword_1000FFE70);
  sub_100002FF8(v0, (uint64_t)qword_1000FFE70);
  v1 = type metadata accessor for Assertion(0);
  return UUIDIdentifier.init()(v1, &protocol witness table for Assertion);
}

uint64_t sub_1000948D4()
{
  uint64_t v0;

  if (qword_1000FB130 != -1)
    swift_once(&qword_1000FB130, sub_100094874);
  v0 = sub_100002F78(&qword_1000FB250);
  return sub_100002FF8(v0, (uint64_t)qword_1000FFE70);
}

uint64_t sub_100094920(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[3] = a1;
  v2[4] = a2;
  v3 = type metadata accessor for RequestPriority(0);
  v2[5] = sub_10001D828(*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  v4 = type metadata accessor for AssetPolicy(0);
  v2[6] = sub_10001D828(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  return sub_10001D674();
}

uint64_t sub_100094980()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(unint64_t, unint64_t, unint64_t, unint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 32);
  v2 = v1[3];
  v3 = v1[4];
  sub_10001C830(v1, v2);
  v4 = *(int **)(v3 + 24);
  v7 = (uint64_t (*)(unint64_t, unint64_t, unint64_t, unint64_t, uint64_t, uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v0 + 56) = v5;
  *v5 = v0;
  v5[1] = sub_100094A30;
  return v7(0xD00000000000001CLL, 0x80000001000CECE0, 0xD00000000000001BLL, 0x80000001000CED00, v2, v3);
}

uint64_t sub_100094A30(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 64) = a1;
  *(_BYTE *)(v3 + 72) = a2;
  swift_task_dealloc();
  return sub_10001D674();
}

uint64_t sub_100094A88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;

  if ((*(_BYTE *)(v0 + 72) & 1) != 0)
  {
    v12 = *(_QWORD *)(v0 + 24);
    v9 = sub_10001DED0();
    v10 = v12;
LABEL_8:
    v11 = 1;
    goto LABEL_9;
  }
  v1 = *(_QWORD *)(v0 + 64);
  if (v1 < 0)
  {
    v13 = type metadata accessor for Logger(0);
    v14 = *(_QWORD *)(v13 - 8);
    v15 = sub_10001D828(*(_QWORD *)(v14 + 64));
    v16 = generalLogger.getter(v15);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = *(_QWORD *)(v0 + 64);
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v20 = 134217984;
      *(_QWORD *)(v0 + 16) = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Illegal trial asset transition delay: %lld", v20, 0xCu);
      swift_slowDealloc(v20, -1, -1);
    }

    v21 = *(_QWORD *)(v0 + 24);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v13);
    swift_task_dealloc();
    v9 = sub_10001DED0();
    v10 = v21;
    goto LABEL_8;
  }
  v3 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = default argument 0 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
  v6 = default argument 1 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)(v5);
  v7 = default argument 2 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
  v8 = default argument 3 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)(v7);
  Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)(v2, v6, v3, v8, v1);
  v9 = sub_10001DED0();
  v10 = v4;
  v11 = 0;
LABEL_9:
  sub_100005630(v10, v11, 1, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100094C48()
{
  return 0xD000000000000019;
}

unint64_t sub_100094C64()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_100094C80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000948D4();
  v3 = sub_100002F78(&qword_1000FB250);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v2, v3);
}

uint64_t sub_100094CC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1000FE1C4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100091424;
  return sub_100094920(a1, a2);
}

uint64_t sub_100094D1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v0 = type metadata accessor for Logger(0);
  sub_100002FB8(v0, qword_1000FE1C8);
  v1 = sub_100002FF8(v0, (uint64_t)qword_1000FE1C8);
  v2 = *(_QWORD *)(v0 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  generalLogger.getter(v3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v2 + 32))(v1, v5, v0);
}

uint64_t sub_100094DB4(int a1)
{
  uint64_t v2;

  v2 = static Array._allocateBufferUninitialized(minimumCapacity:)(1024, &type metadata for Int8);
  *(_QWORD *)(v2 + 16) = 1024;
  bzero((void *)(v2 + 32), 0x400uLL);
  if (proc_pidpath(a1, (void *)(v2 + 32), 0x400u) >= 1)
    return sub_100094E38(v2);
  swift_bridgeObjectRelease(v2);
  return 0;
}

uint64_t sub_100094E38(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v2 = result;
  v3 = *(unsigned __int8 *)(result + 32);
  result += 32;
  if (v3)
  {
    v4 = 0;
    v5 = v1 - 1;
    while (v5 != v4)
    {
      if (!*(unsigned __int8 *)(v2 + 33 + v4++))
        goto LABEL_8;
    }
    __break(1u);
    goto LABEL_10;
  }
  v4 = 0;
LABEL_8:
  v7 = static String._fromUTF8Repairing(_:)(result, v4);
  swift_bridgeObjectRelease(v2);
  return v7;
}

uint64_t sub_100094EB8(int a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 96) = v1;
  *(_DWORD *)(v2 + 144) = a1;
  return sub_10001D948((uint64_t)sub_100094ED0, v1);
}

uint64_t sub_100094ED0()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  float *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  os_log_type_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v3 = *(unsigned int *)(v0 + 144);
  sub_10001C830((_QWORD *)(*(_QWORD *)(v0 + 96) + 112), *(_QWORD *)(*(_QWORD *)(v0 + 96) + 136));
  result = sub_100093CC0(v3);
  *(_QWORD *)(v0 + 104) = result;
  *(_QWORD *)(v0 + 112) = v5;
  *(_QWORD *)(v0 + 120) = v6;
  if (v6 == 1)
  {
    if (qword_1000FB138 != -1)
      swift_once(&qword_1000FB138, sub_100094D1C);
    v7 = sub_10001DD64();
    v8 = sub_100037AC4(v7, (uint64_t)qword_1000FE1C8);
    v9 = static os_log_type_t.error.getter();
    if (!sub_10001E6C4(v9))
      goto LABEL_37;
    v10 = (float *)sub_10001D8D4(8);
    sub_100096184(v10, 1.5047e-36);
    v11 = "Failed to check assertion allowed: failed to get process handle for %d";
    goto LABEL_35;
  }
  if ((result & 1) != 0)
  {
    if (v6)
    {
      v16 = *(_QWORD *)(*(_QWORD *)(v0 + 96) + 152);
      *(_QWORD *)(v0 + 128) = v16;
      return swift_task_switch(sub_100095534, v16, 0);
    }
  }
  else
  {
    v12 = sub_10009610C(result, v5, v6);
    result = (uint64_t)(id)MobileGestalt_get_current_device(v12);
    if (result)
    {
      v8 = result;
      v3 = (uint64_t)(id)MobileGestalt_copy_releaseType_obj();

      if (v3)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
        sub_1000962F8();
        if (v1 == 0x6C616E7265746E49 && v8 == 0xE800000000000000)
        {
          swift_bridgeObjectRelease(0xE800000000000000);
        }
        else
        {
          v3 = sub_100096238();
          sub_10001E034();
          if ((v3 & 1) == 0)
            goto LABEL_14;
        }
        sub_100094DB4(*(_DWORD *)(v0 + 144));
        if (v17)
        {
          if (sub_1000961A0())
            goto LABEL_27;
          if (sub_1000961D4())
            goto LABEL_27;
          sub_100096324();
          v18 = sub_10009625C();
          sub_10001E034();
          if (v18)
            goto LABEL_27;
          v2 = v0 + 80;
          *(_QWORD *)(v0 + 24) = v3;
          *(_QWORD *)(v0 + 16) = v1;
          *(_QWORD *)(v0 + 80) = 0xD000000000000010;
          *(_QWORD *)(v0 + 88) = 0x80000001000CED60;
          v19 = sub_100096120();
          v20 = sub_100096310();
          v8 = v0 + 16;
          if ((StringProtocol.contains<A>(_:)(v20, v21, v22, v23, v24) & 1) != 0
            || (*(_QWORD *)(v0 + 80) = v1,
                *(_QWORD *)(v0 + 88) = v3,
                *(_QWORD *)(v0 + 16) = 0xD000000000000013,
                *(_QWORD *)(v0 + 24) = 0x80000001000CED80,
                (sub_1000962C0(v0 + 16, (uint64_t)&type metadata for String) & 1) != 0))
          {
LABEL_27:
            if (qword_1000FB138 != -1)
              swift_once(&qword_1000FB138, sub_100094D1C);
            v25 = sub_10001DD64();
            v26 = sub_10009616C(v25, (uint64_t)qword_1000FE1C8);
            Logger.logObject.getter(v26);
            v27 = sub_100037FDC();
            if (sub_1000962E8(v27))
            {
              v28 = (uint8_t *)sub_10001D8D4(12);
              v54 = sub_10001D8D4(32);
              *(_DWORD *)v28 = 136315138;
              v29 = sub_10001E140();
              sub_10009615C(v29, v30);
              *(_QWORD *)(v0 + 16) = v31;
              sub_100096304(v0 + 16, v0 + 24);
              sub_100096200();
              sub_10001E18C((void *)&_mh_execute_header, v8, v2, "allowed executablePath %s", v28);
              v32 = 1;
              sub_10001DBB8(v54);
              sub_10001D790(v54);
              sub_10001D790((uint64_t)v28);

              return sub_10009620C(v32, *(uint64_t (**)(void))(v0 + 8));
            }
          }
          else
          {
            *(_QWORD *)(v0 + 40) = &type metadata for ModelManager;
            *(_QWORD *)(v0 + 48) = sub_100067330();
            *(_BYTE *)(v0 + 16) = 0;
            v8 = isFeatureEnabled(_:)(v0 + 16);
            sub_10000650C((_QWORD *)(v0 + 16));
            if ((v8 & 1) == 0)
            {
              if (qword_1000FB138 != -1)
                swift_once(&qword_1000FB138, sub_100094D1C);
              v44 = sub_10001DD64();
              v45 = sub_10009616C(v44, (uint64_t)qword_1000FE1C8);
              v8 = Logger.logObject.getter(v45);
              v46 = static os_log_type_t.fault.getter();
              if (!sub_100096228(v46))
              {
                sub_10001EAD0();
                goto LABEL_37;
              }
              v47 = *(_DWORD *)(v0 + 144);
              v48 = sub_10001D8D4(18);
              v55 = sub_10001D8D4(32);
              *(_DWORD *)v48 = 67109378;
              *(_DWORD *)(v0 + 16) = v47;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 20, v48 + 4);
              *(_WORD *)(v48 + 8) = 2080;
              v49 = sub_10001E140();
              sub_10009615C(v49, v50);
              *(_QWORD *)(v0 + 16) = v51;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v48 + 10);
              sub_100096200();
              sub_1000962D4((void *)&_mh_execute_header, v52, v53, "disallowed pid %d with executable path to hold assertions %s");
              sub_10001DBB8(v55);
              sub_10001D790(v55);
              v35 = v48;
LABEL_36:
              sub_10001D790(v35);
LABEL_37:

              v32 = 0;
              return sub_10009620C(v32, *(uint64_t (**)(void))(v0 + 8));
            }
            if (qword_1000FB138 != -1)
              swift_once(&qword_1000FB138, sub_100094D1C);
            v36 = sub_10001DD64();
            v37 = sub_10009616C(v36, (uint64_t)qword_1000FE1C8);
            Logger.logObject.getter(v37);
            v38 = sub_10001E9D0();
            if (sub_100096228(v38))
            {
              v39 = (uint8_t *)sub_10001D8D4(12);
              v40 = sub_10001D8D4(32);
              *(_DWORD *)v39 = 136315138;
              v41 = sub_10001E140();
              sub_10009615C(v41, v42);
              *(_QWORD *)(v0 + 16) = v43;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v39 + 4);
              sub_100096200();
              sub_10001E18C((void *)&_mh_execute_header, v8, v19, "Allowlist Blocked: Allowing typically blocked executablePath %s", v39);
              v32 = 1;
              sub_10001DBB8(v40);
              sub_10001D790(v40);
              sub_10001D790((uint64_t)v39);

              return sub_10009620C(v32, *(uint64_t (**)(void))(v0 + 8));
            }
          }
          sub_10001EAD0();

          v32 = 1;
          return sub_10009620C(v32, *(uint64_t (**)(void))(v0 + 8));
        }
        if (qword_1000FB138 != -1)
          swift_once(&qword_1000FB138, sub_100094D1C);
        v33 = sub_10001DD64();
        sub_100037AC4(v33, (uint64_t)qword_1000FE1C8);
        v34 = sub_100037FDC();
        if (!sub_10001E6C4(v34))
          goto LABEL_37;
        v10 = (float *)sub_10001D8D4(8);
        sub_100096184(v10, 1.5047e-36);
        v11 = "cannot get executable Path assertion from process %d denied";
LABEL_35:
        sub_10009483C((void *)&_mh_execute_header, v8, (os_log_type_t)v3, v11, (uint8_t *)v10);
        v35 = (uint64_t)v10;
        goto LABEL_36;
      }
LABEL_14:
      if (qword_1000FB138 != -1)
        swift_once(&qword_1000FB138, sub_100094D1C);
      v14 = sub_10001DD64();
      sub_100037AC4(v14, (uint64_t)qword_1000FE1C8);
      v15 = sub_10001E9D0();
      if (!sub_10001E6C4(v15))
        goto LABEL_37;
      v10 = (float *)sub_10001D8D4(8);
      sub_100096184(v10, 1.5047e-36);
      v11 = "Not an internal build, assertion from process %d denied";
      goto LABEL_35;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100095534()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 128);
  swift_beginAccess(v1 + 304, v0 + 56, 0, 0);
  v2 = *(_QWORD *)(v1 + 304);
  *(_QWORD *)(v0 + 136) = v2;
  swift_bridgeObjectRetain(v2);
  return sub_10001D6D0();
}

id sub_100095588()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  _BOOL4 v11;
  unint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id result;
  id v21;
  char v23;
  uint64_t v24;
  os_log_type_t v25;
  float *v26;
  const char *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  os_log_type_t v51;
  _QWORD *v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  os_log_type_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v3 = v0 + 16;
  v4 = sub_1000089DC(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD **)(v0 + 136));
  sub_10001E034();
  if ((v4 & 1) != 0)
  {
    if (qword_1000FB138 != -1)
      swift_once(&qword_1000FB138, sub_100094D1C);
    v5 = *(_QWORD *)(v0 + 120);
    v6 = sub_10001DD64();
    v7 = sub_100002FF8(v6, (uint64_t)qword_1000FE1C8);
    v8 = swift_bridgeObjectRetain(v5);
    v9 = (uint64_t)v7;
    Logger.logObject.getter(v8);
    v10 = sub_10001E9D0();
    v11 = sub_10001E6C4(v10);
    v13 = *(_QWORD *)(v0 + 112);
    v12 = *(_QWORD *)(v0 + 120);
    if (v11)
    {
      v14 = (uint8_t *)sub_10001D8D4(12);
      v70 = v0;
      v72 = sub_10001D8D4(32);
      v15 = v72;
      *(_DWORD *)v14 = 136315138;
      swift_bridgeObjectRetain(v12);
      sub_1000102C0(v13, v12, &v72);
      *(_QWORD *)(v70 + 16) = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v3, v70 + 24, v14 + 4);
      sub_100096298();
      swift_bridgeObjectRelease(v12);
      sub_10001E18C((void *)&_mh_execute_header, v7, (os_log_type_t)v7, "%s allowed to hold assertion", v14);
      v17 = 1;
      sub_10001DBB8(v15);
      v18 = v15;
      v0 = v70;
      sub_10001D790(v18);
      sub_10001D790((uint64_t)v14);

      return (id)sub_10009620C(v17, *(uint64_t (**)(void))(v0 + 8));
    }
    sub_100096298();
LABEL_43:

    v17 = 1;
    return (id)sub_10009620C(v17, *(uint64_t (**)(void))(v0 + 8));
  }
  v19 = sub_10009610C(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  result = (id)MobileGestalt_get_current_device(v19);
  if (result)
  {
    v9 = (uint64_t)result;
    v21 = (id)MobileGestalt_copy_releaseType_obj();

    if (!v21)
    {
LABEL_13:
      if (qword_1000FB138 != -1)
        swift_once(&qword_1000FB138, sub_100094D1C);
      v24 = sub_10001DD64();
      sub_100037AC4(v24, (uint64_t)qword_1000FE1C8);
      v25 = sub_10001E9D0();
      if (!sub_10001E6C4(v25))
        goto LABEL_36;
      v26 = (float *)sub_10001D8D4(8);
      sub_10009627C(v26, 1.5047e-36);
      v27 = "Not an internal build, assertion from process %d denied";
      goto LABEL_34;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    sub_1000962F8();
    if (v1 == 0x6C616E7265746E49 && v9 == 0xE800000000000000)
    {
      swift_bridgeObjectRelease(0xE800000000000000);
    }
    else
    {
      v23 = sub_100096238();
      sub_10001E034();
      if ((v23 & 1) == 0)
        goto LABEL_13;
    }
    sub_100094DB4(*(_DWORD *)(v0 + 144));
    if (!v28)
    {
      if (qword_1000FB138 != -1)
        swift_once(&qword_1000FB138, sub_100094D1C);
      v46 = sub_10001DD64();
      sub_100037AC4(v46, (uint64_t)qword_1000FE1C8);
      v47 = sub_100037FDC();
      if (!sub_10001E6C4(v47))
        goto LABEL_36;
      v26 = (float *)sub_10001D8D4(8);
      sub_10009627C(v26, 1.5047e-36);
      v27 = "cannot get executable Path assertion from process %d denied";
LABEL_34:
      sub_10009483C((void *)&_mh_execute_header, v9, (os_log_type_t)v21, v27, (uint8_t *)v26);
      v48 = (uint64_t)v26;
      goto LABEL_35;
    }
    if (sub_1000961A0())
      goto LABEL_25;
    if (sub_1000961D4())
      goto LABEL_25;
    sub_100096324();
    v29 = sub_10009625C();
    sub_10001E034();
    if (v29)
      goto LABEL_25;
    v2 = v0 + 80;
    *(_QWORD *)(v0 + 24) = v21;
    v30 = v0 + 24;
    *(_QWORD *)(v0 + 16) = v1;
    *(_QWORD *)(v0 + 80) = 0xD000000000000010;
    *(_QWORD *)(v0 + 88) = 0x80000001000CED60;
    v31 = sub_100096120();
    v32 = sub_100096310();
    v9 = v0 + 16;
    if ((StringProtocol.contains<A>(_:)(v32, v33, v34, v35, v36) & 1) != 0
      || (*(_QWORD *)(v0 + 80) = v1,
          *(_QWORD *)(v0 + 88) = v21,
          *(_QWORD *)(v0 + 16) = 0xD000000000000013,
          *(_QWORD *)(v0 + 24) = 0x80000001000CED80,
          (sub_1000962C0(v0 + 16, (uint64_t)&type metadata for String) & 1) != 0))
    {
LABEL_25:
      if (qword_1000FB138 != -1)
        swift_once(&qword_1000FB138, sub_100094D1C);
      v37 = sub_10001DD64();
      v38 = sub_10009616C(v37, (uint64_t)qword_1000FE1C8);
      Logger.logObject.getter(v38);
      v39 = sub_100037FDC();
      if (sub_1000962E8(v39))
      {
        v40 = (uint8_t *)sub_10001D8D4(12);
        v41 = sub_10001D8D4(32);
        v72 = v41;
        *(_DWORD *)v40 = 136315138;
        v42 = sub_10001E140();
        sub_10009615C(v42, v43);
        *(_QWORD *)(v0 + 16) = v44;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v40 + 4);
        sub_100096200();
        sub_10001E18C((void *)&_mh_execute_header, v9, v2, "allowed executablePath %s", v40);
        sub_10001DBB8(v41);
        sub_10001D790(v41);
        v45 = (uint64_t)v40;
LABEL_29:
        sub_10001D790(v45);

        v17 = 1;
        return (id)sub_10009620C(v17, *(uint64_t (**)(void))(v0 + 8));
      }
    }
    else
    {
      *(_QWORD *)(v0 + 40) = &type metadata for ModelManager;
      *(_QWORD *)(v0 + 48) = sub_100067330();
      *(_BYTE *)(v0 + 16) = 0;
      v9 = isFeatureEnabled(_:)(v0 + 16);
      sub_10000650C((_QWORD *)(v0 + 16));
      if ((v9 & 1) == 0)
      {
        if (qword_1000FB138 != -1)
          swift_once(&qword_1000FB138, sub_100094D1C);
        v59 = sub_10001DD64();
        v60 = sub_10009616C(v59, (uint64_t)qword_1000FE1C8);
        v9 = Logger.logObject.getter(v60);
        v61 = static os_log_type_t.fault.getter();
        if (!sub_100096228(v61))
        {
          sub_10001EAD0();
          goto LABEL_36;
        }
        v62 = *(_DWORD *)(v0 + 144);
        v63 = sub_10001D8D4(18);
        v64 = sub_10001D8D4(32);
        v72 = v64;
        *(_DWORD *)v63 = 67109378;
        *(_DWORD *)(v0 + 16) = v62;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 20, v63 + 4);
        *(_WORD *)(v63 + 8) = 2080;
        v65 = sub_10001E140();
        sub_10009615C(v65, v66);
        *(_QWORD *)(v0 + 16) = v67;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v63 + 10);
        sub_100096200();
        sub_1000962D4((void *)&_mh_execute_header, v68, v69, "disallowed pid %d with executable path to hold assertions %s");
        sub_10001DBB8(v64);
        sub_10001D790(v64);
        v48 = v63;
LABEL_35:
        sub_10001D790(v48);
LABEL_36:

        v17 = 0;
        return (id)sub_10009620C(v17, *(uint64_t (**)(void))(v0 + 8));
      }
      if (qword_1000FB138 != -1)
        swift_once(&qword_1000FB138, sub_100094D1C);
      v49 = sub_10001DD64();
      v50 = sub_10009616C(v49, (uint64_t)qword_1000FE1C8);
      Logger.logObject.getter(v50);
      v51 = sub_10001E9D0();
      if (sub_100096228(v51))
      {
        v71 = v0;
        v52 = (_QWORD *)(v0 + 16);
        v53 = (uint8_t *)sub_10001D8D4(12);
        v54 = sub_10001D8D4(32);
        v72 = v54;
        *(_DWORD *)v53 = 136315138;
        v55 = sub_10001E140();
        sub_10009615C(v55, v56);
        *v52 = v57;
        v58 = (uint64_t)v52;
        v0 = v71;
        sub_100096304(v58, v30);
        sub_100096200();
        sub_10001E18C((void *)&_mh_execute_header, v9, v31, "Allowlist Blocked: Allowing typically blocked executablePath %s", v53);
        sub_10001DBB8(v54);
        sub_10001D790(v54);
        v45 = (uint64_t)v53;
        goto LABEL_29;
      }
    }
    sub_10001EAD0();
    goto LABEL_43;
  }
  __break(1u);
  return result;
}

uint64_t sub_100095C64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = type metadata accessor for Assertion.DaemonRep(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return sub_10001D674();
}

uint64_t sub_100095CC0(uint64_t a1)
{
  uint64_t v1;
  int v2;
  _QWORD *v3;

  v2 = AuditToken.processIdentifier.getter(a1);
  *(_DWORD *)(v1 + 92) = v2;
  v3 = (_QWORD *)swift_task_alloc(dword_1000FE20C);
  *(_QWORD *)(v1 + 64) = v3;
  *v3 = v1;
  v3[1] = sub_100095D1C;
  return sub_100094EB8(v2);
}

uint64_t sub_100095D1C(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  *(_BYTE *)(*(_QWORD *)v1 + 96) = a1;
  swift_task_dealloc(v2);
  return sub_10001D674();
}

uint64_t sub_100095D74()
{
  NSObject *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  os_log_type_t v5;
  int v6;
  uint8_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (*(_BYTE *)(v1 + 96) == 1)
  {
    Assertion.DaemonRep.receivedFromPID(_:)(*(unsigned int *)(v1 + 92));
    v2 = (_QWORD *)swift_task_alloc(dword_1000FB5BC);
    *(_QWORD *)(v1 + 72) = v2;
    *v2 = v1;
    v2[1] = sub_100095F34;
    return sub_100007068(*(_QWORD *)(v1 + 56));
  }
  else
  {
    if (qword_1000FB138 != -1)
      swift_once(&qword_1000FB138, sub_100094D1C);
    v4 = sub_10001DD64();
    sub_100037AC4(v4, (uint64_t)qword_1000FE1C8);
    v5 = sub_10001E9D0();
    if (os_log_type_enabled(v0, v5))
    {
      v6 = *(_DWORD *)(v1 + 92);
      v7 = (uint8_t *)sub_10001D8D4(8);
      *(_DWORD *)v7 = 67109120;
      *(_DWORD *)(v1 + 88) = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 88, v1 + 92, v7 + 4);
      sub_10009483C((void *)&_mh_execute_header, v0, v5, "Process %d denied to hold assertion", v7);
      sub_10001D790((uint64_t)v7);
    }

    v8 = type metadata accessor for ModelManagerError(0);
    v9 = sub_1000960CC();
    swift_allocError(v8, v9, 0, 0);
    v11 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v10, enum case for ModelManagerError.deniedAssertionBySystem(_:), v8);
    swift_willThrow(v11, v12, v13, v14, v15, v16, v17, v18);
    swift_task_dealloc(*(_QWORD *)(v1 + 56));
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100095F34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc(v2);
  return sub_10001D6D0();
}

uint64_t sub_100095F90()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 48) + 8))(v1, *(_QWORD *)(v0 + 40));
  swift_task_dealloc(v1);
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100095FD0()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 8))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 40));
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10009600C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_10001D948((uint64_t)sub_100096020, v0);
}

uint64_t sub_100096020()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 152);
  *(_QWORD *)(v0 + 24) = v1;
  return sub_10001D948((uint64_t)sub_100096038, v1);
}

uint64_t sub_100096038()
{
  uint64_t v0;

  sub_10000AE0C();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100096068()
{
  uint64_t v0;

  sub_10000650C((_QWORD *)(v0 + 112));
  swift_release();
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_100096094()
{
  uint64_t v0;

  sub_100096068();
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for AssertionRequestDispatcher()
{
  return objc_opt_self(_TtC13modelmanagerd26AssertionRequestDispatcher);
}

unint64_t sub_1000960CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000FB600;
  if (!qword_1000FB600)
  {
    v1 = type metadata accessor for ModelManagerError(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for ModelManagerError, v1);
    atomic_store(result, (unint64_t *)&qword_1000FB600);
  }
  return result;
}

uint64_t sub_10009610C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3 != 1)
    return swift_bridgeObjectRelease(a3);
  return result;
}

unint64_t sub_100096120()
{
  unint64_t result;

  result = qword_1000FE2D8;
  if (!qword_1000FE2D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1000FE2D8);
  }
  return result;
}

void sub_10009615C(uint64_t a1, uint64_t a2, ...)
{
  unint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  sub_1000102C0(v3, v2, (uint64_t *)va);
}

uint64_t sub_10009616C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100002FF8(a1, a2);
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_100096184(float *a1, float a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  *a1 = a2;
  *(_DWORD *)(v3 + 16) = v4;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2, v3 + 20, a1 + 1);
}

BOOL sub_1000961A0()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x6E49656C7070412FLL;
  v0._object = (void *)0xEF2F6C616E726574;
  return String.hasPrefix(_:)(v0);
}

BOOL sub_1000961D4()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x636F6C2F7273752FLL;
  v0._object = (void *)0xEF2F6E69622F6C61;
  return String.hasPrefix(_:)(v0);
}

uint64_t sub_100096200()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 3);
}

uint64_t sub_10009620C(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

BOOL sub_100096228(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100096238()
{
  uint64_t v0;
  uint64_t v1;

  return _stringCompareWithSmolCheck(_:_:expecting:)(v1, v0, 0x6C616E7265746E49, 0xE800000000000000, 0);
}

BOOL sub_10009625C()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x747365746378;
  v0._object = (void *)0xE600000000000000;
  return String.hasSuffix(_:)(v0);
}

uint64_t sub_10009627C(float *a1, float a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *a1 = a2;
  *(_DWORD *)(v2 + 16) = v3;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v4, v2 + 20, a1 + 1);
}

uint64_t sub_100096298()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10009610C(v2, v1, v0);
  return sub_10009610C(v2, v1, v0);
}

uint64_t sub_1000962C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return StringProtocol.contains<A>(_:)(a1, a2, a2, v2, v2);
}

void sub_1000962D4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0x12u);
}

BOOL sub_1000962E8(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void sub_1000962F8()
{
  void *v0;

}

uint64_t sub_100096304(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_100096310()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100096324()
{
  return String.lowercased()()._countAndFlagsBits;
}

uint64_t sub_100096330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_100002F78(&qword_1000FD0E8);
  sub_10002BCBC();
  __chkstk_darwin(v8);
  v9 = sub_10009843C();
  type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(v9);
  sub_10002BCBC();
  __chkstk_darwin(v10);
  v11 = sub_1000983CC();
  if (sub_100005700(v11, v12, v13) == 1)
  {
    sub_100098388(a1);
    v14 = sub_100044984();
    sub_1000AA634(v14, v15, v16);
    sub_10001D8B4();
    return sub_100098388(v3);
  }
  else
  {
    sub_100048D70(a1, v4);
    sub_10008FD0C(v4, a2, a3);
    return sub_10001D8B4();
  }
}

void sub_1000963FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_100002F78(&qword_1000FB560);
  sub_10002BCBC();
  __chkstk_darwin(v7);
  v8 = sub_10009843C();
  v9 = type metadata accessor for Policy(v8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_100005700(a1, 1, v9) == 1)
  {
    sub_100098388(a1);
    v13 = sub_100044984();
    sub_1000AA6EC(v13, v14, v15);
    sub_10001D8B4();
    sub_100098388(v3);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    sub_10008FD18((uint64_t)v12, a2, a3);
    sub_10001D8B4();
  }
  sub_10001D950();
}

uint64_t sub_1000964EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_10000667C((__int128 *)a1, (uint64_t)v9);
    sub_10008FE04(v9, a2, a3);
    return sub_10001D8B4();
  }
  else
  {
    sub_100098358(a1, &qword_1000FBEB0);
    v6 = sub_100044984();
    sub_1000AA7A0(v6, v7, v8);
    sub_10001D8B4();
    return sub_100098358((uint64_t)v9, &qword_1000FBEB0);
  }
}

void sub_100096570(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_100002F78(&qword_1000FCD70);
  sub_10002BCBC();
  __chkstk_darwin(v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for RequestPriority(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = sub_1000983CC();
  if (sub_100005700(v10, v11, v8) == 1)
  {
    sub_100098358(a1, &qword_1000FCD70);
    sub_1000AA894(a2, (uint64_t)v7);
    v12 = sub_100002F78(&qword_1000FB2A0);
    sub_10001DD50(v12);
    sub_100098358((uint64_t)v7, &qword_1000FCD70);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v2, a1, v8);
    sub_10008FE54();
    v13 = sub_100002F78(&qword_1000FB2A0);
    sub_10001DD50(v13);
  }
  sub_10001D950();
}

uint64_t sub_100096674()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_100002FB8(v0, qword_1000FE2E0);
  sub_100002FF8(v0, (uint64_t)qword_1000FE2E0);
  v1 = subsystemName.getter();
  return Logger.init(subsystem:category:)(v1);
}

double sub_1000966E0()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = sub_100002F78(&qword_1000FE460);
  v1 = sub_100006A80(v0, 48);
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v1 + 16) = xmmword_1000CB140;
  *(_QWORD *)(v1 + 32) = &type metadata for AssetTransitionDelayTrial;
  *(_QWORD *)(v1 + 40) = &off_1000F45C0;
  qword_1000FFE88 = v1;
  return result;
}

uint64_t sub_10009672C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_10001D948((uint64_t)sub_100096740, v0);
}

uint64_t sub_100096740()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_QWORD **)(*(_QWORD *)(v0 + 16) + 200);
  *(_QWORD *)(v0 + 24) = v1;
  v2 = v1[2];
  *(_QWORD *)(v0 + 32) = v2;
  if (!v2)
    return (*(uint64_t (**)(void))(v0 + 8))();
  *(_QWORD *)(v0 + 40) = 0;
  v3 = v1[4];
  *(_QWORD *)(v0 + 48) = v3;
  v4 = v1[5];
  *(_QWORD *)(v0 + 56) = v4;
  v5 = dword_1000FE32C;
  swift_bridgeObjectRetain(v1);
  v6 = (_QWORD *)swift_task_alloc(v5);
  *(_QWORD *)(v0 + 64) = v6;
  *v6 = v0;
  v6[1] = sub_1000967E4;
  return sub_100096AE0(v3, v4);
}

uint64_t sub_1000967E4()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 64));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_10009681C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int *v10;
  uint64_t v11;
  _QWORD *v12;
  int *v14;

  v1 = v0[6];
  v2 = v0[7];
  v3 = (_QWORD *)v0[2];
  v4 = v3[17];
  v5 = v3[18];
  sub_10001C830(v3 + 14, v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  v8 = v7;
  v0[9] = v7;
  v9 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F4668, 40);
  v0[10] = v9;
  v9[2] = v3;
  v9[3] = v1;
  v9[4] = v2;
  v10 = *(int **)(v5 + 32);
  v11 = v10[1];
  v14 = (int *)((char *)v10 + *v10);
  swift_retain(v3);
  v12 = (_QWORD *)swift_task_alloc(v11);
  v0[11] = v12;
  *v12 = v0;
  v12[1] = sub_100096914;
  return ((uint64_t (*)(uint64_t, uint64_t, void *, _QWORD *, uint64_t, uint64_t))v14)(v6, v8, &unk_1000FE458, v9, v4, v5);
}

uint64_t sub_100096914()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 88));
  sub_10001D8B4();
  sub_10001D9C0();
  sub_10002BBCC();
  return sub_100037B58(v1, v2, v3);
}

uint64_t sub_10009695C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 40) + 1;
  if (v1 == *(_QWORD *)(v0 + 32))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
    return sub_10002B7C0(*(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    *(_QWORD *)(v0 + 40) = v1;
    v3 = *(_QWORD *)(v0 + 24) + 16 * v1;
    *(_QWORD *)(v0 + 48) = *(_QWORD *)(v3 + 32);
    *(_QWORD *)(v0 + 56) = *(_QWORD *)(v3 + 40);
    v4 = (_QWORD *)swift_task_alloc(dword_1000FE32C);
    *(_QWORD *)(v0 + 64) = v4;
    *v4 = v0;
    v4[1] = sub_1000967E4;
    v5 = sub_100044984();
    return sub_100096AE0(v5, v6);
  }
}

uint64_t sub_1000969F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_100096A0C, 0, 0);
}

uint64_t sub_100096A0C()
{
  uint64_t *v0;
  uint64_t **v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for _OSActivity(0);
  v0[5] = _OSActivity.__allocating_init(_:)("Trial Update", 12, 2);
  v1 = (uint64_t **)swift_task_alloc(dword_1000FE32C);
  v0[6] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_100096A7C;
  v2 = sub_10002BD0C(v0[3]);
  return sub_100096AE0(v2, v3);
}

uint64_t sub_100096A7C()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 48));
  return sub_10001D674();
}

uint64_t sub_100096AB4()
{
  uint64_t v0;

  _OSActivity.close()();
  sub_10001D9C0();
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100096AE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_10001D948((uint64_t)sub_100096AF8, v2);
}

uint64_t sub_100096AF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 32);
  v2 = sub_100006A80((uint64_t)&unk_1000F4640, 40);
  *(_QWORD *)(v0 + 40) = v2;
  *(_QWORD *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(v0 + 16);
  v3 = unk_1000FB6AC;
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1000FB6A8 + dword_1000FB6A8);
  swift_retain(v1);
  v4 = (_QWORD *)swift_task_alloc(v3);
  *(_QWORD *)(v0 + 48) = v4;
  *v4 = v0;
  v4[1] = sub_100096B9C;
  return v6((uint64_t)v6, (uint64_t)&unk_1000FE438, v2);
}

uint64_t sub_100096B9C()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 48));
  sub_10001D9C0();
  return sub_10001D6DC();
}

uint64_t sub_100096BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v4[6] = a3;
  v4[7] = a4;
  v4[5] = a2;
  v6 = sub_100002F78(&qword_1000FE440);
  v4[8] = v6;
  v4[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_100002F78(&qword_1000FB560) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[10] = swift_task_alloc(v7);
  v4[11] = swift_task_alloc(v7);
  v4[12] = swift_task_alloc(v7);
  v4[13] = swift_task_alloc(v7);
  v4[14] = swift_task_alloc(v7);
  v8 = type metadata accessor for Policy(0);
  v4[15] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[16] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[17] = swift_task_alloc(v10);
  v4[18] = swift_task_alloc(v10);
  v4[19] = swift_task_alloc(v10);
  return swift_task_switch(sub_100096CE4, a2, 0);
}

uint64_t sub_100096CE4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);

  v2 = v0[6];
  v1 = v0[7];
  v3 = (_QWORD *)v0[5];
  v4 = v3[17];
  v5 = v3[18];
  sub_10001C830(v3 + 14, v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(v2, v1);
  v8 = v7;
  v0[20] = v7;
  v9 = *(int **)(v5 + 8);
  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v9 + *v9);
  v10 = (_QWORD *)swift_task_alloc(v9[1]);
  v0[21] = v10;
  *v10 = v0;
  v10[1] = sub_100096D94;
  return v12(v6, v8, v4, v5);
}

uint64_t sub_100096D94(char a1)
{
  _QWORD *v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;

  v3 = (_QWORD *)*v1;
  v4 = (_QWORD *)*v1;
  swift_task_dealloc();
  sub_10001D8B4();
  if ((a1 & 1) != 0)
  {
    v5 = v3[5];
    v6 = *(int **)(v3[7] + 32);
    v12 = (int *)((char *)v6 + *v6);
    v7 = (_QWORD *)swift_task_alloc(v6[1]);
    v3[22] = v7;
    *v7 = v4;
    v7[1] = sub_100096E74;
    return ((uint64_t (*)(_QWORD, uint64_t))v12)(v3[14], v5 + 112);
  }
  else
  {
    v9 = (_QWORD *)swift_task_alloc(dword_1000FE33C);
    v3[28] = v9;
    *v9 = v4;
    v9[1] = sub_100097418;
    v10 = sub_10002BD0C(v3[6]);
    return sub_100097CEC(v10, v11);
  }
}

uint64_t sub_100096E74()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 176));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_100096EAC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v55)(void);
  uint64_t v56;
  uint64_t v57;

  v2 = v0[14];
  v1 = v0[15];
  if (sub_100098468() != 1)
  {
    v5 = v0[19];
    v56 = v0[18];
    v6 = v0[16];
    v7 = v0[13];
    v9 = v0[6];
    v8 = v0[7];
    v10 = v0[5];
    v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
    v54(v5, v2, v1);
    v55 = *(uint64_t (**)(void))(v8 + 8);
    v11 = ((uint64_t (*)(uint64_t, uint64_t))v55)(v9, v8);
    v13 = v12;
    v14 = (uint64_t *)(v10 + 208);
    sub_10002B308(v10 + 208, (uint64_t)(v0 + 2), 0);
    v15 = *(_QWORD *)(v10 + 208);
    swift_bridgeObjectRetain(v15);
    sub_100009DD0(v11, v13, v15);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v13);
    LODWORD(v11) = sub_100005700(v7, 1, v1);
    sub_100098358(v7, &qword_1000FB560);
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    v16(v56, v5, v1);
    v17 = v0[18];
    if ((_DWORD)v11 == 1)
    {
      v18 = *(void (**)(uint64_t, uint64_t))(v0[16] + 8);
      v18(v0[18], v0[15]);
LABEL_12:
      v0[26] = v18;
      v47 = (_QWORD *)swift_task_alloc(dword_1000FE334);
      v0[27] = v47;
      *v47 = v0;
      v47[1] = sub_10009736C;
      sub_1000983B8();
      sub_10002BC1C();
      return sub_100097480(v48, v49, v50);
    }
    v19 = v0[15];
    v20 = v0[11];
    v21 = v0[12];
    v22 = v0[9];
    v57 = v0[8];
    v23 = v55();
    v25 = v24;
    v26 = *v14;
    swift_bridgeObjectRetain(v26);
    sub_100009DD0(v23, v25, v26);
    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRelease(v25);
    v16(v20, v17, v19);
    sub_10007D54C(v20);
    v27 = v22 + *(int *)(v57 + 48);
    sub_10001CBC0(v21, v22);
    sub_10001CBC0(v20, v27);
    if (sub_100005700(v22, 1, v19) == 1)
    {
      v28 = v0[18];
      v29 = v0[15];
      v30 = v0[16];
      v31 = v0[12];
      sub_100098388(v0[11]);
      sub_100098388(v31);
      v18 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
      v18(v28, v29);
      if (sub_10001EB7C(v27) == 1)
      {
        sub_100098358(v0[9], &qword_1000FB560);
        goto LABEL_12;
      }
    }
    else
    {
      sub_10001CBC0(v0[9], v0[10]);
      v32 = sub_100098468();
      v33 = v0[18];
      if (v32 != 1)
      {
        v39 = v0[16];
        v38 = v0[17];
        v40 = v0[15];
        v42 = v0[11];
        v41 = v0[12];
        v44 = v0[9];
        v43 = v0[10];
        v54(v38, v27, v40);
        v45 = sub_1000982B8(&qword_1000FE448, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Policy, (uint64_t)&protocol conformance descriptor for Policy);
        v46 = dispatch thunk of static Equatable.== infix(_:_:)(v43, v38, v40, v45);
        v18 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
        sub_100098494(v38);
        sub_10009848C(v42);
        sub_10009848C(v41);
        sub_100098494(v33);
        sub_100098494(v43);
        sub_10009848C(v44);
        if ((v46 & 1) != 0)
          goto LABEL_12;
LABEL_13:
        v0[24] = v18;
        v3 = (_QWORD *)swift_task_alloc(dword_1000FE33C);
        v4 = sub_1000972E4;
        v0[25] = v3;
        goto LABEL_14;
      }
      v34 = v0[15];
      v35 = v0[16];
      v36 = v0[12];
      v37 = v0[10];
      sub_100098388(v0[11]);
      sub_100098388(v36);
      v18 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
      v18(v33, v34);
      v18(v37, v34);
    }
    sub_100098358(v0[9], &qword_1000FE440);
    goto LABEL_13;
  }
  sub_100098358(v2, &qword_1000FB560);
  v3 = (_QWORD *)swift_task_alloc(dword_1000FE33C);
  v4 = sub_10009727C;
  v0[23] = v3;
LABEL_14:
  *v3 = v0;
  v3[1] = v4;
  sub_1000983B8();
  sub_10002BC1C();
  return sub_100097CEC(v52, v53);
}

uint64_t sub_10009727C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v3 = *v0;
  v1 = *v0;
  sub_10001D788(*(_QWORD *)(v3 + 184), &v3);
  sub_1000983A0();
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  sub_10002B70C();
  return sub_10007CF2C(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1000972E4()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 200));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_10009731C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0[26] = v0[24];
  v1 = (_QWORD *)swift_task_alloc(dword_1000FE334);
  v0[27] = v1;
  *v1 = v0;
  v1[1] = sub_10009736C;
  v2 = sub_1000983B8();
  return sub_100097480(v2, v3, v4);
}

uint64_t sub_10009736C()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 216));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_1000973A4()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(v0 + 208))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 120));
  swift_task_dealloc();
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  sub_10002B70C();
  return sub_10007CF2C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100097418()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v3 = *v0;
  v1 = *v0;
  sub_10001D788(*(_QWORD *)(v3 + 224), &v3);
  sub_1000983A0();
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  sub_10002B70C();
  return sub_10007CF2C(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_100097480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[16] = a3;
  v5[17] = v4;
  v5[14] = a1;
  v5[15] = a2;
  v6 = sub_100002F78(&qword_1000FB250);
  v5[18] = sub_10001D800(*(_QWORD *)(v6 - 8));
  v7 = type metadata accessor for Assertion.DaemonRep(0);
  v5[19] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[20] = v8;
  v5[21] = sub_10001D800(v8);
  v9 = sub_100002F78(&qword_1000FB560);
  v5[22] = sub_1000983EC(v9);
  v5[23] = swift_task_alloc(v3);
  sub_10001D7B8();
  return sub_10001D6DC();
}

uint64_t sub_100097508()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(void);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 136);
  v6 = *(void (**)(void))(*(_QWORD *)(v0 + 120) + 8);
  *(_QWORD *)(v0 + 192) = v6;
  v7 = v3;
  v6();
  v8 = sub_100098478();
  sub_10002B308(v8, v0 + 16, 0);
  v9 = *(_QWORD *)(v5 + 208);
  swift_bridgeObjectRetain(v9);
  sub_100009DD0(v7, v1, v9);
  sub_10001D8B4();
  swift_bridgeObjectRelease(v1);
  v10 = type metadata accessor for Policy(0);
  *(_QWORD *)(v0 + 200) = v10;
  LODWORD(v7) = sub_100005700(v4, 1, v10);
  sub_100098358(v4, &qword_1000FB560);
  if ((_DWORD)v7 == 1)
  {
    if (qword_1000FB140 != -1)
      swift_once(&qword_1000FB140, sub_100096674);
    v41 = v2;
    v11 = type metadata accessor for Logger(0);
    v12 = sub_100002FF8(v11, (uint64_t)qword_1000FE2E0);
    *(_QWORD *)(v0 + 208) = v12;
    v13 = (void *)Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter();
    if (sub_10002BBA0(v14))
    {
      v15 = *(_QWORD *)(v0 + 112);
      v38 = *(_QWORD *)(v0 + 120);
      v16 = sub_10001D8D4(12);
      v17 = sub_10001D8D4(32);
      v42 = v17;
      sub_1000984C8(4.8149e-34);
      v18 = ((uint64_t (*)(uint64_t, uint64_t))v6)(v15, v38);
      sub_1000102C0(v18, v19, &v42);
      *(_QWORD *)(v0 + 104) = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112);
      sub_10001E034();
      sub_100098404((void *)&_mh_execute_header, v21, v22, "Enabling Trial %s");
      sub_10001DBB8(v17);
      sub_10001D790(v17);
      sub_10001D790(v16);
    }

    v23 = v6;
    v24 = *(_QWORD *)(v0 + 176);
    v26 = *(_QWORD *)(v0 + 128);
    v25 = *(_QWORD *)(v0 + 136);
    v27 = *(_QWORD *)(v0 + 112);
    v39 = v26;
    v40 = *(_QWORD *)(v0 + 120);
    v28 = ((uint64_t (*)(uint64_t))v23)(v27);
    v36 = v29;
    v37 = v28;
    v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v30(v24, v26, v10);
    sub_10007D54C(v24);
    sub_10002B308(v41, v0 + 40, 33);
    sub_1000963FC(v24, v37, v36);
    swift_endAccess();
    sub_10001C830((_QWORD *)(v25 + 152), *(_QWORD *)(v25 + 176));
    v31 = ((uint64_t (*)(uint64_t, uint64_t))v23)(v27, v40);
    v33 = v32;
    *(_QWORD *)(v0 + 216) = v32;
    v30(v24, v39, v10);
    sub_10007D54C(v24);
    v34 = (_QWORD *)swift_task_alloc(dword_1000FB664);
    *(_QWORD *)(v0 + 224) = v34;
    *v34 = v0;
    v34[1] = sub_100097808;
    return sub_100006EBC(v31, v33, *(_QWORD *)(v0 + 176));
  }
  else
  {
    sub_100098390();
    sub_10001E330();
    sub_10001D938();
    sub_10001EAC8();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100097808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 224));
  v1 = sub_10001E034();
  sub_10009849C(v1, &qword_1000FB560);
  sub_10002BBCC();
  return sub_100037B58(v2, v3, v4);
}

uint64_t sub_100097858()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v2 = v0[17];
  v1 = v0[18];
  v3 = v0[14];
  v4 = v0[15];
  v5 = sub_1000984DC();
  v7 = v6;
  v8 = sub_1000984DC();
  v10 = v9;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v3, v4);
  Assertion.DaemonRep.init(policy:description:id:)(v5, v7, v8, v10, v1);
  sub_10001C830((_QWORD *)(v2 + 152), *(_QWORD *)(v2 + 176));
  v11 = (_QWORD *)swift_task_alloc(dword_1000FB5BC);
  v0[29] = v11;
  *v11 = v0;
  v11[1] = sub_100097930;
  v12 = sub_10002BD0C(v0[21]);
  return sub_100007068(v12);
}

uint64_t sub_100097930()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 240) = v0;
  swift_task_dealloc();
  return sub_10001D6DC();
}

uint64_t sub_100097990()
{
  uint64_t v0;

  sub_100098458();
  sub_100098390();
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  return sub_10002B7C0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000979C8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v1 = v0[30];
  sub_100098458();
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = v0[30];
    v6 = (uint64_t (*)(uint64_t, uint64_t))v0[24];
    v7 = v0[14];
    v8 = v0[15];
    v9 = sub_10001D8D4(22);
    v10 = (_QWORD *)sub_10001D8D4(8);
    v22 = sub_10001D8D4(32);
    v23 = v22;
    *(_DWORD *)v9 = 136315394;
    v11 = v6(v7, v8);
    sub_1000102C0(v11, v12, &v23);
    v0[11] = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 11, v0 + 12);
    sub_10001E034();
    *(_WORD *)(v9 + 12) = 2112;
    swift_errorRetain(v5);
    v14 = _swift_stdlib_bridgeErrorToNSError(v5);
    v0[12] = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 12, v0 + 13);
    *v10 = v14;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to acquire %s assertion: %@", (uint8_t *)v9, 0x16u);
    sub_100002F78(&qword_1000FB8E0);
    sub_10001DBB8((uint64_t)v10);
    sub_10001D790((uint64_t)v10);
    sub_10001DBB8(v22);
    sub_10001D790(v22);
    sub_10001D790(v9);
  }
  else
  {
    v15 = v0[30];
    swift_errorRelease(v15);
    swift_errorRelease(v15);
  }

  sub_100098418(v0[17]);
  v0[31] = v16;
  sub_1000984A4();
  v17 = (_QWORD *)swift_task_alloc(dword_1000FB664);
  v0[32] = v17;
  *v17 = v0;
  v17[1] = sub_100097BD8;
  sub_10002BC1C();
  return sub_100006EBC(v18, v19, v20);
}

uint64_t sub_100097BD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 256));
  v1 = sub_10001E034();
  sub_10009849C(v1, &qword_1000FB560);
  sub_10002BBCC();
  return sub_100037B58(v2, v3, v4);
}

uint64_t sub_100097C28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 136) + 208;
  v5 = (*(uint64_t (**)(void))(v0 + 192))();
  v7 = v6;
  sub_100005630(v3, 1, 1, v2);
  sub_10002B308(v4, v0 + 64, 33);
  sub_1000963FC(v3, v5, v7);
  swift_endAccess();
  swift_errorRelease(v1);
  sub_100098390();
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100097CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[10] = a2;
  v4[11] = v3;
  v4[9] = a1;
  v5 = sub_100002F78(&qword_1000FB250);
  v4[12] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[13] = v6;
  v4[14] = sub_10001D800(v6);
  v7 = sub_100002F78(&qword_1000FB560);
  v4[15] = sub_1000983EC(v7);
  v4[16] = swift_task_alloc(v2);
  sub_10001D7B8();
  return sub_10001D6DC();
}

uint64_t sub_100097D60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 88);
  v6 = *(void (**)(void))(*(_QWORD *)(v0 + 80) + 8);
  *(_QWORD *)(v0 + 136) = v6;
  v7 = v3;
  v6();
  sub_100098478();
  sub_10002BBCC();
  sub_10002B308(v8, v9, v10);
  v11 = *(_QWORD *)(v5 + 208);
  swift_bridgeObjectRetain(v11);
  sub_100009DD0(v7, v1, v11);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v1);
  v12 = type metadata accessor for Policy(0);
  *(_QWORD *)(v0 + 144) = v12;
  LODWORD(v7) = sub_10001EB7C(v4);
  sub_100098358(v4, &qword_1000FB560);
  if ((_DWORD)v7 == 1)
  {
    swift_task_dealloc();
    sub_10001E330();
    sub_10001D938();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    if (qword_1000FB140 != -1)
      swift_once(&qword_1000FB140, sub_100096674);
    v36 = v2;
    v14 = type metadata accessor for Logger(0);
    v15 = sub_100002FF8(v14, (uint64_t)qword_1000FE2E0);
    v16 = (void *)Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter();
    if (sub_10002BBA0(v17))
    {
      v18 = *(_QWORD *)(v0 + 72);
      v35 = *(_QWORD *)(v0 + 80);
      v19 = sub_10001D8D4(12);
      v20 = sub_10001D8D4(32);
      v37 = v20;
      sub_1000984C8(4.8149e-34);
      v21 = ((uint64_t (*)(uint64_t, uint64_t))v6)(v18, v35);
      sub_1000102C0(v21, v22, &v37);
      *(_QWORD *)(v0 + 64) = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72);
      sub_10001E034();
      sub_100098404((void *)&_mh_execute_header, v24, v25, "Disabling Trial %s");
      sub_10001DBB8(v20);
      sub_10001D790(v20);
      sub_10001D790(v19);
    }

    v26 = *(_QWORD *)(v0 + 120);
    v28 = *(_QWORD *)(v0 + 80);
    v27 = *(_QWORD *)(v0 + 88);
    v29 = *(_QWORD *)(v0 + 72);
    v30 = ((uint64_t (*)(uint64_t, uint64_t))v6)(v29, v28);
    v32 = v31;
    sub_100005630(v26, 1, 1, v12);
    sub_10002B308(v36, v0 + 40, 33);
    sub_1000963FC(v26, v30, v32);
    swift_endAccess();
    sub_10001C830((_QWORD *)(v27 + 152), *(_QWORD *)(v27 + 176));
    (*(void (**)(uint64_t, uint64_t))(v28 + 24))(v29, v28);
    v33 = (_QWORD *)swift_task_alloc(dword_1000FB59C);
    *(_QWORD *)(v0 + 152) = v33;
    *v33 = v0;
    v33[1] = sub_100098030;
    v34 = sub_10002BD0C(*(_QWORD *)(v0 + 112));
    return sub_100007210(v34);
  }
}

uint64_t sub_100098030()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10001DB38();
  v2 = v0[13];
  v1 = v0[14];
  v3 = v0[12];
  sub_10001D680(v0[19]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_10002BBCC();
  return sub_10001D6DC();
}

uint64_t sub_100098088()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t **v4;

  v1 = sub_100098418(v0[11]);
  v3 = v2;
  v0[20] = v2;
  sub_1000984A4();
  v4 = (uint64_t **)swift_task_alloc(dword_1000FB664);
  v0[21] = (uint64_t)v4;
  *v4 = v0;
  v4[1] = (uint64_t *)sub_10009810C;
  return sub_100006EBC(v1, v3, v0[15]);
}

uint64_t sub_10009810C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v0;
  v1 = *v0;
  sub_10001D788(*(_QWORD *)(v4 + 168), &v4);
  v2 = sub_10001E034();
  sub_10009849C(v2, &qword_1000FB560);
  swift_task_dealloc();
  sub_10001E330();
  sub_10001D938();
  return sub_10002B7C0(*(uint64_t (**)(void))(v1 + 8));
}

_QWORD *sub_100098170()
{
  _QWORD *v0;

  sub_10000650C(v0 + 14);
  sub_10000650C(v0 + 19);
  swift_release();
  swift_bridgeObjectRelease(v0[25]);
  swift_bridgeObjectRelease(v0[26]);
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_1000981B4()
{
  uint64_t v0;

  sub_100098170();
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for TrialManager()
{
  return objc_opt_self(_TtC13modelmanagerd12TrialManager);
}

uint64_t sub_1000981EC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1000982B8(&qword_1000FB6B0, a2, (uint64_t (*)(uint64_t))type metadata accessor for TrialManager, (uint64_t)&unk_1000CC900);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100098228()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10009824C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1000FE434);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10001F980;
  return sub_100096BE0(a1, v4, v5, v6);
}

uint64_t sub_1000982B8(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000982F8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_1000FE454);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10001FAA0;
  return sub_1000969F0(v2, v3, v4);
}

uint64_t sub_100098358(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100002F78(a2);
  sub_10001DD50(v3);
  return a1;
}

uint64_t sub_100098388(uint64_t a1)
{
  uint64_t *v1;

  return sub_100098358(a1, v1);
}

uint64_t sub_100098390()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 184));
}

uint64_t sub_1000983A0()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 152));
}

uint64_t sub_1000983B8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t sub_1000983CC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000983EC(uint64_t a1)
{
  return swift_task_alloc((*(_QWORD *)(*(_QWORD *)(a1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_100098404(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 0xCu);
}

uint64_t sub_100098418@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);

  sub_10001C830((_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 176));
  return v3(v1, v2);
}

uint64_t sub_10009843C()
{
  return 0;
}

uint64_t sub_100098458()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[20] + 8))(v0[21], v0[19]);
}

uint64_t sub_100098468()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100005700(v1, 1, v0);
}

uint64_t sub_100098478()
{
  uint64_t v0;

  return v0 + 208;
}

uint64_t sub_10009848C(uint64_t a1)
{
  uint64_t *v1;

  return sub_100098358(a1, v1);
}

uint64_t sub_100098494(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_10009849C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_100098358(v2, a2);
}

uint64_t sub_1000984A4()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100005630(v1, 1, 1, v0);
}

void sub_1000984C8(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t sub_1000984DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t destroy for StateDumpManager(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  swift_release(a1[2]);
  swift_release(a1[3]);
  swift_release(a1[4]);
  swift_release(a1[5]);
  return swift_release(a1[6]);
}

uint64_t *initializeWithCopy for StateDumpManager(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  v7 = a2[4];
  v8 = a2[5];
  a1[4] = v7;
  a1[5] = v8;
  v9 = a2[6];
  a1[6] = v9;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  return a1;
}

uint64_t *assignWithCopy for StateDumpManager(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = a2[4];
  v13 = a1[4];
  a1[4] = v12;
  swift_retain(v12);
  swift_release(v13);
  v14 = a2[5];
  v15 = a1[5];
  a1[5] = v14;
  swift_retain(v14);
  swift_release(v15);
  v16 = a2[6];
  v17 = a1[6];
  a1[6] = v16;
  swift_retain(v16);
  swift_release(v17);
  return a1;
}

__n128 initializeWithTake for StateDumpManager(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for StateDumpManager(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  swift_release(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  swift_release(v5);
  swift_release(a1[4]);
  v6 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  swift_release(v6);
  v7 = a1[6];
  a1[6] = *(_QWORD *)(a2 + 48);
  swift_release(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for StateDumpManager(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StateDumpManager(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for StateDumpManager()
{
  return &type metadata for StateDumpManager;
}

_QWORD *sub_1000987CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  unsigned __int8 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;
  void (*v33)(_BYTE *, _QWORD);
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[32];
  _QWORD *v42;
  uint64_t v43;
  unsigned __int8 v44;
  _QWORD *v45;

  v40 = type metadata accessor for StateDump.AssetState(0);
  v4 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    v9 = __CocoaSet.count.getter(v8);
    if (v9)
      goto LABEL_6;
LABEL_12:
    swift_release(a2);
    return _swiftEmptyArrayStorage;
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_12;
LABEL_6:
  v45 = _swiftEmptyArrayStorage;
  sub_100011860();
  if (v7)
  {
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    result = (_QWORD *)__CocoaSet.startIndex.getter(v10);
    v13 = 1;
  }
  else
  {
    result = (_QWORD *)sub_10001C854(a1);
    v13 = v14 & 1;
  }
  v42 = result;
  v43 = v12;
  v44 = v13;
  if (v9 < 0)
  {
    __break(1u);
LABEL_32:
    __break(1u);
  }
  else
  {
    v15 = a1 & 0xFFFFFFFFFFFFFF8;
    if (a1 < 0)
      v15 = a1;
    v38 = a1;
    v39 = v15;
    v36 = a1 & 0xC000000000000001;
    v37 = v6;
    do
    {
      v16 = sub_10007B728((uint64_t)v42, v43, v44, a1);
      swift_retain();
      sub_10009A8B4(v16, a2, (uint64_t)v6);
      v17 = v45;
      if ((swift_isUniquelyReferenced_nonNull_native(v45) & 1) == 0)
      {
        sub_100011860();
        v17 = v45;
      }
      v18 = v17[2];
      if (v18 >= v17[3] >> 1)
      {
        sub_100011860();
        v17 = v45;
      }
      v17[2] = v18 + 1;
      result = (_QWORD *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v17+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v18, v6, v40);
      v45 = v17;
      if (v7)
      {
        if ((v44 & 1) == 0)
          goto LABEL_32;
        v19 = __CocoaSet.Index.handleBitPattern.getter(v42, v43);
        if (v19)
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
        else
          isUniquelyReferenced_nonNull_native = 1;
        v32 = sub_100002F78(&qword_1000FC510);
        v33 = (void (*)(_BYTE *, _QWORD))Set.Index._asCocoa.modify(v41, v32);
        __CocoaSet.formIndex(after:isUnique:)(v34, isUniquelyReferenced_nonNull_native, v39);
        v33(v41, 0);
      }
      else
      {
        v21 = (uint64_t)v42;
        v22 = v43;
        v23 = v44;
        v24 = v4;
        v25 = sub_10001C6FC(v42, v43, v44, a1);
        v26 = a2;
        v28 = v27;
        v30 = v29;
        v31 = v23;
        v7 = v36;
        sub_10001C7E4(v21, v22, v31);
        v42 = (_QWORD *)v25;
        v43 = v28;
        v4 = v24;
        a2 = v26;
        v6 = v37;
        a1 = v38;
        v44 = v30 & 1;
      }
      --v9;
    }
    while (v9);
    sub_10001C7E4((uint64_t)v42, v43, v44);
    swift_release(a2);
    return v45;
  }
  return result;
}

_QWORD *sub_100098AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  unsigned __int8 v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  void (*v34)(_BYTE *, _QWORD);
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[32];
  _QWORD *v43;
  uint64_t v44;
  unsigned __int8 v45;
  _QWORD *v46;

  v41 = type metadata accessor for StateDump.SessionState(0);
  v4 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    v9 = __CocoaSet.count.getter(v8);
    if (v9)
      goto LABEL_6;
LABEL_12:
    swift_release(a2);
    return _swiftEmptyArrayStorage;
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_12;
LABEL_6:
  v46 = _swiftEmptyArrayStorage;
  sub_10001188C();
  if (v7)
  {
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    result = (_QWORD *)__CocoaSet.startIndex.getter(v10);
    v13 = 1;
  }
  else
  {
    result = (_QWORD *)sub_10001C854(a1);
    v13 = v14 & 1;
  }
  v43 = result;
  v44 = v12;
  v45 = v13;
  if (v9 < 0)
  {
    __break(1u);
LABEL_32:
    __break(1u);
  }
  else
  {
    v15 = a1 & 0xFFFFFFFFFFFFFF8;
    if (a1 < 0)
      v15 = a1;
    v39 = a1;
    v40 = v15;
    v37 = a1 & 0xC000000000000001;
    v38 = v6;
    do
    {
      sub_10007B914();
      v17 = v16;
      swift_retain();
      sub_10009ABE8(v17, a2);
      v18 = v46;
      if ((swift_isUniquelyReferenced_nonNull_native(v46) & 1) == 0)
      {
        sub_10001188C();
        v18 = v46;
      }
      v19 = v18[2];
      if (v19 >= v18[3] >> 1)
      {
        sub_10001188C();
        v18 = v46;
      }
      v18[2] = v19 + 1;
      result = (_QWORD *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v18+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v19, v6, v41);
      v46 = v18;
      if (v7)
      {
        if ((v45 & 1) == 0)
          goto LABEL_32;
        v20 = __CocoaSet.Index.handleBitPattern.getter(v43, v44);
        if (v20)
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v20);
        else
          isUniquelyReferenced_nonNull_native = 1;
        v33 = sub_100002F78(&qword_1000FE490);
        v34 = (void (*)(_BYTE *, _QWORD))Set.Index._asCocoa.modify(v42, v33);
        __CocoaSet.formIndex(after:isUnique:)(v35, isUniquelyReferenced_nonNull_native, v40);
        v34(v42, 0);
      }
      else
      {
        v22 = (uint64_t)v43;
        v23 = v44;
        v24 = v45;
        v25 = v4;
        v26 = sub_10001C6FC(v43, v44, v45, a1);
        v27 = a2;
        v29 = v28;
        v31 = v30;
        v32 = v24;
        v7 = v37;
        sub_10001C7E4(v22, v23, v32);
        v43 = (_QWORD *)v26;
        v44 = v29;
        v4 = v25;
        a2 = v27;
        v6 = v38;
        a1 = v39;
        v45 = v31 & 1;
      }
      --v9;
    }
    while (v9);
    sub_10001C7E4((uint64_t)v43, v44, v45);
    swift_release(a2);
    return v46;
  }
  return result;
}

_QWORD *sub_100098D84(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned __int8 v28;
  uint64_t v29;
  void (*v30)(_BYTE *, _QWORD);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  _BYTE v38[32];
  _QWORD *v39;
  uint64_t v40;
  unsigned __int8 v41;
  _QWORD *v42;

  v2 = sub_100002F78(&qword_1000FB2A0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v37 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v5 = a1;
    else
      v5 = a1 & 0xFFFFFFFFFFFFFF8;
    v6 = __CocoaSet.count.getter(v5);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 16);
  }
  result = _swiftEmptyArrayStorage;
  if (v6)
  {
    v42 = _swiftEmptyArrayStorage;
    sub_100011910();
    if (v36)
    {
      if (a1 < 0)
        v8 = a1;
      else
        v8 = a1 & 0xFFFFFFFFFFFFFF8;
      result = (_QWORD *)__CocoaSet.startIndex.getter(v8);
      v10 = 1;
    }
    else
    {
      result = (_QWORD *)sub_10001C854(a1);
      v10 = v11 & 1;
    }
    v39 = result;
    v40 = v9;
    v41 = v10;
    if (v6 < 0)
    {
      __break(1u);
LABEL_33:
      __break(1u);
    }
    else
    {
      v12 = a1 & 0xFFFFFFFFFFFFFF8;
      if (a1 < 0)
        v12 = a1;
      v34 = v12;
      v35 = a1;
      v33 = v3;
      do
      {
        v13 = (uint64_t)v39;
        v14 = v40;
        v15 = v41;
        sub_10007BAFC();
        v17 = v16;
        (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v37, v16 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_id, v2);
        swift_release(v17);
        v18 = v42;
        if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0)
        {
          sub_100011910();
          v18 = v42;
        }
        v19 = v18[2];
        if (v19 >= v18[3] >> 1)
        {
          sub_100011910();
          v18 = v42;
        }
        v18[2] = v19 + 1;
        result = (_QWORD *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))((unint64_t)v18+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v19, v37, v2);
        if (v36)
        {
          if ((v15 & 1) == 0)
            goto LABEL_33;
          v20 = __CocoaSet.Index.handleBitPattern.getter(v13, v14);
          if (v20)
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v20);
          else
            isUniquelyReferenced_nonNull_native = 1;
          v29 = sub_100002F78(&qword_1000FE480);
          v30 = (void (*)(_BYTE *, _QWORD))Set.Index._asCocoa.modify(v38, v29);
          __CocoaSet.formIndex(after:isUnique:)(v31, isUniquelyReferenced_nonNull_native, v34);
          v30(v38, 0);
        }
        else
        {
          v22 = sub_10001C6FC(v13, v14, v15, v35);
          v24 = v23;
          v25 = v2;
          v27 = v26;
          sub_10001C7E4(v13, v14, v15);
          v39 = (_QWORD *)v22;
          v40 = v24;
          v28 = v27 & 1;
          v2 = v25;
          v3 = v33;
          v41 = v28;
        }
        --v6;
      }
      while (v6);
      sub_10001C7E4((uint64_t)v39, v40, v41);
      return v42;
    }
  }
  return result;
}

uint64_t sub_100099060(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[13] = a1;
  v2[14] = v1;
  v3 = type metadata accessor for StateDump.InferenceProviderState(0);
  v2[15] = v3;
  v2[16] = *(_QWORD *)(v3 - 8);
  v2[17] = sub_10001E784();
  v2[18] = sub_10001E784();
  v4 = type metadata accessor for Policy(0);
  v2[19] = v4;
  v2[20] = *(_QWORD *)(v4 - 8);
  v2[21] = sub_10001E784();
  v5 = sub_10001E784();
  v6 = *(_QWORD *)(v1 + 16);
  v2[22] = v5;
  v2[23] = v6;
  return sub_10001D6D0();
}

uint64_t sub_1000990F0()
{
  uint64_t v0;
  uint64_t v1;

  sub_10000AE0C();
  *(_QWORD *)(v0 + 192) = v1;
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_100099124()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  v1 = v0[20];
  v2 = (uint64_t *)v0[14];
  sub_10002B2E0(v0[23] + OBJC_IVAR____TtC13modelmanagerd13PolicyManager__currentPolicy, (uint64_t)(v0 + 2));
  v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
  v0[25] = v3;
  sub_10009B2D0(v3);
  v4 = *v2;
  v0[26] = *v2;
  return sub_100037B28((uint64_t)sub_100099198, v4, 0);
}

uint64_t sub_100099198()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[14];
  sub_100099710();
  v0[27] = v2;
  v0[28] = *(_QWORD *)(v1 + 24);
  return sub_10001D6D0();
}

uint64_t sub_1000991D8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[14];
  sub_100099768();
  v0[29] = v2;
  v0[30] = *(_QWORD *)(v1 + 32);
  return sub_10001D6D0();
}

uint64_t sub_100099218()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000997C0();
  *(_QWORD *)(v0 + 248) = v1;
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_10009924C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(*(_QWORD *)(v0 + 240) + OBJC_IVAR____TtC13modelmanagerd14RequestManager_extantRequests);
  sub_10002B2E0((uint64_t)v1, v0 + 40);
  v2 = *v1;
  *(_QWORD *)(v0 + 256) = *v1;
  swift_bridgeObjectRetain(v2);
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_1000992A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[14];
  sub_100098D84(v0[32]);
  sub_10009B2FC();
  sub_10000BAF0();
  v0[33] = v2;
  v0[12] = _swiftEmptySetSingleton;
  v3 = *(_QWORD *)(v1 + 8);
  v0[34] = v3;
  return sub_100037B28((uint64_t)sub_100099314, v3, 0);
}

uint64_t sub_100099314()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 280) = sub_10009A05C();
  sub_100037A7C();
  return sub_10001D674();
}

void sub_100099348()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0[35];
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v2 = v0[35];
    else
      v2 = v1 & 0xFFFFFFFFFFFFFF8;
    sub_10001E338();
    _CocoaArrayWrapper.endIndex.getter(v2);
    sub_10009B2FC();
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v0[36] = v2;
  if (v2)
  {
    if (v2 < 1)
    {
      __break(1u);
    }
    else
    {
      v3 = v0[35];
      v0[37] = 0;
      if ((v3 & 0xC000000000000001) != 0)
      {
        v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v3);
      }
      else
      {
        v4 = *(_QWORD *)(v3 + 32);
        sub_10001E194();
      }
      v0[38] = v4;
      sub_10001E194();
      v5 = (_QWORD *)sub_10001E784();
      v0[39] = v5;
      v6 = sub_10009B314(v5);
      sub_10009A174(v6, v7);
    }
  }
  else
  {
    sub_10009B328();
    v0[40] = *(_QWORD *)(v1 + 40);
    sub_10001D6D0();
  }
}

uint64_t sub_100099424()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 312));
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_10009946C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v1 = v0[38];
  v2 = v0[36];
  v3 = v0[18];
  v4 = v0[15];
  v5 = v0[16];
  v6 = v0[37] + 1;
  sub_1000135C4();
  v7 = swift_release(v1);
  (*(void (**)(uint64_t, uint64_t, __n128))(v5 + 8))(v3, v4, v7);
  if (v6 == v2)
  {
    sub_10009B328();
    v8 = v0[17];
    v0[40] = v8;
    return swift_task_switch(sub_100099574, v8, 0);
  }
  else
  {
    v10 = v0[37] + 1;
    v0[37] = v10;
    v11 = v0[35];
    if ((v11 & 0xC000000000000001) != 0)
    {
      v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v11);
    }
    else
    {
      v12 = *(_QWORD *)(v11 + 8 * v10 + 32);
      sub_10001E194();
    }
    v0[38] = v12;
    sub_10001E194();
    v13 = (_QWORD *)sub_10001E784();
    v0[39] = v13;
    v14 = sub_10009B314(v13);
    return sub_10009A174(v14, v15);
  }
}

uint64_t sub_100099574()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[14];
  v2 = *(_QWORD *)(v0[40] + 192);
  v0[41] = v2;
  v0[42] = *(_QWORD *)(v1 + 48);
  swift_bridgeObjectRetain(v2);
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_1000995B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 336);
  sub_10002B2E0(v1 + 208, v0 + 64);
  v2 = *(_QWORD *)(v1 + 208);
  *(_QWORD *)(v0 + 344) = v2;
  swift_bridgeObjectRetain(v2);
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_1000995FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 344);
  v13 = *(_QWORD *)(v0 + 264);
  v14 = *(_QWORD *)(v0 + 328);
  v11 = *(_QWORD *)(v0 + 232);
  v12 = *(_QWORD *)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 192);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 200);
  v6 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 152);
  v10 = *(_QWORD *)(v0 + 160);
  v15 = *(_QWORD *)(v0 + 144);
  v16 = *(_QWORD *)(v0 + 136);
  v8 = *(_QWORD *)(*sub_10001C830((_QWORD *)(*(_QWORD *)(v0 + 208)+ OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_modelCatalog), *(_QWORD *)(*(_QWORD *)(v0 + 208)+ OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_modelCatalog+ 24))+ 112);
  v3(v6, v5, v7);
  StateDump.init(assertions:currentPolicy:assets:sessions:requests:runningRequests:inferenceProviders:disabledUseCases:trials:budget:)(v4, v6, v2, v11, v12, v13, *(_QWORD *)(v0 + 96), v14, v1, v8);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v5, v7);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100099710()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v3[24];

  sub_10002B2E0(v0 + 120, (uint64_t)v3);
  v1 = *(_QWORD *)(v0 + 120);
  sub_10001E194();
  v2 = swift_bridgeObjectRetain(v1);
  sub_1000987CC(v2, v0);
  sub_10001D8B4();
  sub_10000B95C();
  sub_10009B2C0();
}

void sub_100099768()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v3[24];

  sub_10002B2E0(v0 + 112, (uint64_t)v3);
  v1 = *(_QWORD *)(v0 + 112);
  sub_10001E194();
  v2 = swift_bridgeObjectRetain(v1);
  sub_100098AA8(v2, v0);
  sub_10001D8B4();
  sub_10000BA84();
  sub_10009B2C0();
}

void sub_1000997C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t inited;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t i;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD v113[2];
  uint64_t v114;
  _QWORD *v115;
  char v116[24];
  char v117[16];
  char v118[8];
  char v119[8];

  type metadata accessor for RequestPriority(0);
  sub_10001DD00();
  __chkstk_darwin(v1);
  sub_10002BD70();
  v3 = sub_10009B2A4(v2);
  type metadata accessor for InferenceProviderDescriptor(v3);
  sub_10001DD00();
  __chkstk_darwin(v4);
  sub_10002BD70();
  v6 = sub_10009B2A4(v5);
  v110 = *(_QWORD *)(type metadata accessor for ModelCatalogAsset(v6) - 8);
  sub_10001DD00();
  __chkstk_darwin(v7);
  sub_10001EB18();
  sub_10009B294();
  __chkstk_darwin(v8);
  v108 = (uint64_t)&v90 - v9;
  v103 = sub_100002F78(&qword_1000FB2D8);
  v102 = *(_QWORD *)(v103 - 8);
  sub_10001DD00();
  __chkstk_darwin(v10);
  sub_10002BD70();
  v93 = v11;
  v101 = sub_100002F78(&qword_1000FB2A0);
  v105 = *(_QWORD *)(v101 - 8);
  sub_10001DD00();
  __chkstk_darwin(v12);
  sub_10002BD70();
  v14 = sub_10009B2A4(v13);
  v91 = type metadata accessor for StateDump.RequestState(v14);
  v107 = *(_QWORD *)(v91 - 8);
  sub_10001DD00();
  __chkstk_darwin(v15);
  sub_10001EB18();
  sub_10009B294();
  __chkstk_darwin(v16);
  sub_10009B294();
  __chkstk_darwin(v17);
  v106 = (uint64_t)&v90 - v18;
  v19 = sub_100002F78(&qword_1000FE488);
  inited = swift_initStackObject(v19, v119);
  *(_OWORD *)(inited + 16) = xmmword_1000CC930;
  v21 = (uint64_t *)(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups);
  sub_10002B2E0(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups, (uint64_t)v118);
  v22 = *v21;
  v23 = v21[1];
  v111 = v21[2];
  v24 = v111;
  *(_QWORD *)(inited + 32) = v22;
  v25 = inited + 32;
  *(_QWORD *)(inited + 40) = v23;
  *(_QWORD *)(inited + 48) = v24;
  v26 = (uint64_t *)(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups);
  sub_10002B2E0(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups, (uint64_t)v117);
  v28 = *v26;
  v27 = v26[1];
  v29 = v26[2];
  *(_QWORD *)(inited + 56) = v28;
  *(_QWORD *)(inited + 64) = v27;
  *(_QWORD *)(inited + 72) = v29;
  v30 = (uint64_t *)(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingBackgroundGroups);
  sub_10002B2E0((uint64_t)v30, (uint64_t)v116);
  v31 = *v30;
  v32 = v30[1];
  v33 = v30[2];
  *(_QWORD *)(inited + 80) = v31;
  *(_QWORD *)(inited + 88) = v32;
  v112 = inited;
  *(_QWORD *)(inited + 96) = v33;
  v34 = _swiftEmptyArrayStorage;
  v113[0] = _swiftEmptyArrayStorage;
  swift_retain();
  swift_retain();
  sub_10001E194();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10002B400();
  swift_retain();
  for (i = 0; i != 3; ++i)
  {
    v36 = (uint64_t *)(v25 + 24 * i);
    v37 = *v36;
    v38 = v36[1];
    v39 = v36[2];
    v115 = _swiftEmptyArrayStorage;
    v40 = *(_QWORD *)(v39 + 16);
    if (v40)
    {
      sub_10002B400();
      swift_retain();
      swift_retain();
      v41 = 0;
      do
      {
        v42 = *(_QWORD *)(v39 + 8 * v41++ + 32);
        sub_10001E194();
        v43 = sub_1000B3290();
        swift_release(v42);
        sub_1000BFAE0((uint64_t)v43);
      }
      while (v40 != v41);
      swift_release(v39);
      swift_release(v38);
      swift_release(v37);
      v44 = v115;
      v34 = _swiftEmptyArrayStorage;
    }
    else
    {
      v44 = _swiftEmptyArrayStorage;
    }
    sub_1000BFAE0((uint64_t)v44);
  }
  swift_setDeallocating(v112);
  sub_1000437AC();
  v45 = v113[0];
  if (v113[0] >> 62)
    goto LABEL_42;
  v46 = *(_QWORD *)((v113[0] & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    sub_10009B270();
    if (!v46)
      break;
    v115 = v34;
    sub_1000118B8();
    if (v46 < 0)
    {
      __break(1u);
      return;
    }
    v47 = 0;
    v90 = v45;
    v96 = v45 + 32;
    v95 = *(void (**)(uint64_t, uint64_t, uint64_t))(v105 + 16);
    v94 = v46;
    while (v47 != v46)
    {
      v105 = v47;
      v48 = *(_QWORD *)(v96 + 8 * v47);
      v95(v39, v48 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_id, v101);
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v102 + 16))(v38, v48 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_sessionID, v103);
      v49 = *(_QWORD *)(v48 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_modelAssets);
      v50 = *(_QWORD *)(v49 + 16);
      v104 = v48;
      if (v50)
      {
        v113[0] = v34;
        sub_10002B400();
        swift_bridgeObjectRetain(v49);
        sub_100011720(0, v50, 0);
        v45 = sub_10001C854(v49);
        v52 = v51;
        v54 = v53 & 1;
        v112 = v49 + 56;
        v111 = v49;
        while ((v45 & 0x8000000000000000) == 0 && v45 < 1 << *(_BYTE *)(v49 + 32))
        {
          if (((*(_QWORD *)(v112 + (((unint64_t)v45 >> 3) & 0xFFFFFFFFFFFFF8)) >> v45) & 1) == 0)
            goto LABEL_39;
          if (*(_DWORD *)(v49 + 36) != (_DWORD)v52)
            goto LABEL_40;
          v55 = v108;
          sub_10009B1CC(*(_QWORD *)(v49 + 48) + *(_QWORD *)(v110 + 72) * v45, v108, type metadata accessor for ModelCatalogAsset);
          v56 = v55;
          v57 = v109;
          sub_10001CB5C(v56, (uint64_t)v109);
          v58 = *v57;
          v39 = v57[1];
          swift_bridgeObjectRetain(v39);
          sub_10009B210((uint64_t)v57, type metadata accessor for ModelCatalogAsset);
          v34 = (_QWORD *)v113[0];
          if ((swift_isUniquelyReferenced_nonNull_native(v113[0]) & 1) == 0)
          {
            v59 = sub_10009B308();
            sub_100011720(v59, v60, v61);
            v34 = (_QWORD *)v113[0];
          }
          v38 = v34[2];
          v62 = v34[3];
          if (v38 >= v62 >> 1)
          {
            v67 = sub_10009B2B4(v62);
            sub_100011720(v67, v38 + 1, 1);
            v34 = (_QWORD *)v113[0];
          }
          v34[2] = v38 + 1;
          v63 = &v34[2 * v38];
          v63[4] = v58;
          v63[5] = v39;
          v49 = v111;
          v64 = sub_10001C6FC(v45, v52, v54 & 1, v111);
          v45 = v64;
          v52 = v65;
          v54 = v66 & 1;
          if (!--v50)
          {
            sub_10001C7E4(v64, v65, v66 & 1);
            swift_bridgeObjectRelease(v49);
            sub_10009B270();
            goto LABEL_27;
          }
        }
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        break;
      }
      sub_10002B400();
LABEL_27:
      v114 = Set.init(minimumCapacity:)(v34[2], &type metadata for String, &protocol witness table for String);
      v68 = v34[2];
      v69 = v105;
      if (v68)
      {
        v70 = v34 + 5;
        do
        {
          v71 = *(v70 - 1);
          v72 = *v70;
          swift_bridgeObjectRetain(*v70);
          sub_100012168((uint64_t)v113, v71, v72, v73, v74, v75, v76, v77, v90, v91, v92, v93, v94, (uint64_t)v95, v96, v97, v98, v99, v100,
            v101,
            v102,
            v103,
            v104,
            v105,
            v106,
            v107,
            v108,
            (uint64_t)v109,
            v110,
            v111);
          swift_bridgeObjectRelease(v113[1]);
          v70 += 2;
          --v68;
        }
        while (v68);
      }
      swift_bridgeObjectRelease(v34);
      v78 = v114;
      v79 = v104;
      v80 = *(_QWORD *)(v104 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_inferenceProviderConnection + 24);
      v81 = *(_QWORD *)(v104 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_inferenceProviderConnection + 32);
      sub_10001C830((_QWORD *)(v104 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_inferenceProviderConnection), v80);
      v82 = v99;
      (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v80, v81);
      v83 = v100;
      sub_1000C5C2C();
      v84 = v98;
      StateDump.RequestState.init(identifier:session:asset:inferenceProvider:priority:)(v39, v38, v78, v82, v83);
      swift_release(v79);
      v85 = v97;
      sub_10009B2E0(v97, v84);
      sub_10009B2E0(v106, v85);
      v45 = (uint64_t)v115;
      if ((swift_isUniquelyReferenced_nonNull_native(v115) & 1) == 0)
      {
        sub_10009B308();
        sub_1000118B8();
        v45 = (uint64_t)v115;
      }
      v34 = _swiftEmptyArrayStorage;
      v87 = *(_QWORD *)(v45 + 16);
      v86 = *(_QWORD *)(v45 + 24);
      if (v87 >= v86 >> 1)
      {
        sub_10009B2B4(v86);
        sub_1000118B8();
        v45 = (uint64_t)v115;
      }
      v47 = v69 + 1;
      *(_QWORD *)(v45 + 16) = v87 + 1;
      sub_10009B2E0(v45+ ((*(unsigned __int8 *)(v107 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80))+ *(_QWORD *)(v107 + 72) * v87, v106);
      v115 = (_QWORD *)v45;
      v46 = v94;
      if (v47 == v94)
      {
        swift_bridgeObjectRelease(v90);
        goto LABEL_37;
      }
    }
    __break(1u);
LABEL_42:
    v88 = v45;
    if (v45 >= 0)
      v45 &= 0xFFFFFFFFFFFFFF8uLL;
    sub_10001E338();
    v89 = v45;
    v45 = v88;
    v46 = _CocoaArrayWrapper.endIndex.getter(v89);
    swift_bridgeObjectRelease(v88);
  }
  sub_10001D8B4();
LABEL_37:
  sub_10000BAA8();
}

_QWORD *sub_10009A05C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  _BYTE v13[40];
  uint64_t v14;
  _QWORD v15[5];
  unint64_t v16;

  v0 = InferenceProviderManager.allConnections.getter();
  v1 = _swiftEmptyArrayStorage;
  v16 = (unint64_t)_swiftEmptyArrayStorage;
  v2 = *(_QWORD *)(v0 + 16);
  if (v2)
  {
    v3 = v0 + 32;
    do
    {
      sub_10001D29C(v3, (uint64_t)v15);
      sub_10001D29C((uint64_t)v15, (uint64_t)v13);
      v4 = sub_100002F78(&qword_1000FB9C8);
      v5 = type metadata accessor for InferenceProviderExtensionConnection(0);
      if ((swift_dynamicCast(&v14, v13, v4, v5, 6) & 1) == 0)
        v14 = 0;
      v6 = sub_10000650C(v15);
      if (v14)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v6);
        v8 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v7 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v8 >= v7 >> 1)
        {
          v10 = sub_10009B2B4(v7);
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10, v11, 1);
        }
        v9 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8);
        specialized Array._endMutation()(v9);
      }
      v3 += 40;
      --v2;
    }
    while (v2);
    v1 = (_QWORD *)v16;
  }
  sub_10001D8B4();
  return v1;
}

uint64_t sub_10009A174(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t active;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[8] = a1;
  v2[9] = a2;
  v2[10] = sub_100002F78(&qword_1000FE478);
  v2[11] = sub_10001E784();
  v2[12] = sub_10001E784();
  v2[13] = sub_10001E784();
  v2[14] = sub_10001E784();
  v2[15] = sub_10001E784();
  v2[16] = sub_10001E784();
  v2[17] = sub_10001E784();
  active = type metadata accessor for StateDump.InferenceProviderState.ActiveRequest(0);
  v2[18] = active;
  v2[19] = *(_QWORD *)(active - 8);
  v2[20] = sub_10001E784();
  v2[21] = sub_10001E784();
  v4 = type metadata accessor for RequestPriority(0);
  v2[22] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[23] = v5;
  v2[24] = sub_10001D800(v5);
  v6 = type metadata accessor for InferenceProviderDescriptor(0);
  v2[25] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[26] = v7;
  v2[27] = sub_10001D800(v7);
  sub_10001D7B8();
  return sub_10001D6D0();
}

uint64_t sub_10009A264()
{
  uint64_t v0;
  void *v1;
  unsigned int v2;

  v1 = *(void **)(*(_QWORD *)(v0 + 72) + 120);
  if (v1)
    v2 = objc_msgSend(v1, "pid");
  else
    v2 = -1;
  *(_DWORD *)(v0 + 248) = v2;
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_10009A2B0()
{
  _QWORD *v0;

  (*(void (**)(_QWORD, uint64_t, _QWORD))(v0[26] + 16))(v0[27], v0[9] + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_descriptor, v0[25]);
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_10009A2FC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(*(_QWORD *)(v0 + 72)
                 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_activeRequest);
  sub_10002B2E0((uint64_t)v1, v0 + 16);
  v2 = *v1;
  *(_QWORD *)(v0 + 224) = *v1;
  swift_bridgeObjectRetain(v2);
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_10009A350()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;

  v1 = v0[28];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v32 = v0[10];
    v47 = (char *)_swiftEmptyArrayStorage;
    sub_1000118E4();
    result = sub_10009B0C4(v1);
    if ((result & 0x8000000000000000) == 0 && result < 1 << *(_BYTE *)(v1 + 32))
    {
      v5 = v1 + 64;
      v44 = v0[23];
      v30 = v1;
      v31 = v0;
      v28 = v1 + 64;
      v29 = v0[19];
      while ((*(_QWORD *)(v5 + 8 * ((unint64_t)result >> 6)) & (1 << result)) != 0)
      {
        if (v4 != *(_DWORD *)(v1 + 36))
          goto LABEL_22;
        v35 = 1 << result;
        v36 = (unint64_t)result >> 6;
        v33 = v2;
        v34 = v4;
        v6 = v0[17];
        v7 = v6 + *(int *)(v32 + 48);
        v8 = v0[22];
        v41 = (char *)v0[21];
        v42 = v0[18];
        v40 = v0[20];
        v9 = v0[16];
        v45 = v0[15];
        v10 = v0[13];
        v37 = v0[14];
        v38 = v0[12];
        v39 = v0[11];
        v11 = *(_QWORD *)(v1 + 48);
        v12 = result;
        v13 = sub_100002F78(&qword_1000FB2A0);
        v46 = *(_QWORD *)(v13 - 8);
        sub_10009B28C(v6, v11 + *(_QWORD *)(v46 + 72) * v12);
        v43 = v12;
        sub_10009B24C(v7, *(_QWORD *)(v1 + 56) + *(_QWORD *)(v44 + 72) * v12);
        sub_10009B28C(v9, v6);
        sub_10009B24C(v9 + *(int *)(v32 + 48), v7);
        sub_10009B144(v9, v45);
        sub_10009B18C(v6);
        v14 = *(int *)(v32 + 48);
        v15 = v37 + v14;
        v16 = v45 + v14;
        sub_10009B28C(v37, v45);
        sub_10009B24C(v15, v16);
        v17 = v10 + *(int *)(v32 + 48);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 32))(v10, v37, v13);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 32))(v17, v15, v8);
        v18 = v38 + *(int *)(v32 + 48);
        sub_10009B28C(v38, v10);
        sub_10009B24C(v18, v17);
        v19 = v39 + *(int *)(v32 + 48);
        sub_10009B28C(v39, v10);
        sub_10009B24C(v19, v17);
        StateDump.InferenceProviderState.ActiveRequest.init(request:priority:)(v38, v19);
        sub_10009B18C(v10);
        (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v39, v13);
        (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v18, v8);
        v20 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 32);
        v20(v41, v40, v42);
        sub_10009B18C(v45);
        v21 = v47;
        if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
        {
          sub_10009B308();
          sub_1000118E4();
          v21 = v47;
        }
        v23 = *((_QWORD *)v21 + 2);
        v22 = *((_QWORD *)v21 + 3);
        v0 = v31;
        if (v23 >= v22 >> 1)
        {
          sub_10009B2B4(v22);
          sub_1000118E4();
          v21 = v47;
        }
        v24 = v31[21];
        v25 = v31[18];
        *((_QWORD *)v21 + 2) = v23 + 1;
        v20(&v21[((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))+ *(_QWORD *)(v29 + 72) * v23], v24, v25);
        v47 = v21;
        v1 = v30;
        result = v43;
        if (v43 >= -(-1 << *(_BYTE *)(v30 + 32)))
          goto LABEL_23;
        v5 = v28;
        if ((*(_QWORD *)(v28 + 8 * v36) & v35) == 0)
          goto LABEL_24;
        if (v34 != *(_DWORD *)(v30 + 36))
          goto LABEL_25;
        result = _HashTable.occupiedBucket(after:)();
        v2 = v33 - 1;
        if (v33 == 1)
        {
          swift_bridgeObjectRelease(v31[28]);
          goto LABEL_20;
        }
        if ((result & 0x8000000000000000) == 0)
        {
          v4 = *(_DWORD *)(v30 + 36);
          if (result < 1 << *(_BYTE *)(v30 + 32))
            continue;
        }
        goto LABEL_26;
      }
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
    }
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease(v0[28]);
LABEL_20:
    v26 = v0[9];
    sub_10000BACC();
    v0[29] = v27;
    return swift_task_switch(sub_10009A750, v26, 0);
  }
  return result;
}

uint64_t sub_10009A750()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[23];
  v2 = v0[9];
  sub_10002B2E0(v2 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_activePriority, (uint64_t)(v0 + 5));
  sub_10009B2D0(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
  v0[30] = *(_QWORD *)(v2 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_loadingCount);
  sub_100037A7C();
  return sub_100037B28(v3, v4, v5);
}

uint64_t sub_10009A7CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 136);
  v8 = *(_QWORD *)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 120);
  v11 = *(_QWORD *)(v0 + 104);
  v12 = *(_QWORD *)(v0 + 96);
  v13 = *(_QWORD *)(v0 + 88);
  v9 = *(_QWORD *)(v0 + 72);
  StateDump.InferenceProviderState.init(pid:descriptor:activeRequests:activePriority:loadingCount:)(*(unsigned int *)(v0 + 248), v1, *(_QWORD *)(v0 + 232), v2, *(_QWORD *)(v0 + 240));
  swift_release(v9);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10009A8B4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t State;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  char *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[24];

  v52 = a3;
  v53 = a2;
  v51 = type metadata accessor for Date(0);
  v49 = *(_QWORD *)(v51 - 8);
  sub_10001DD00();
  __chkstk_darwin(v5);
  sub_10001EB18();
  v50 = v6;
  __chkstk_darwin(v7);
  v48 = (char *)&v39 - v8;
  State = type metadata accessor for LoadState(0);
  v46 = *(_QWORD *)(State - 8);
  v47 = State;
  sub_10001DD00();
  __chkstk_darwin(v10);
  sub_10002BD70();
  v45 = v11;
  type metadata accessor for InferenceProviderDescriptor(0);
  sub_10001DD00();
  __chkstk_darwin(v12);
  sub_10002BD70();
  v54 = v13;
  v42 = type metadata accessor for AssetCost(0);
  v14 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  sub_10001E168();
  v17 = v16 - v15;
  v43 = v16 - v15;
  v18 = type metadata accessor for InferenceProviderAssetDescriptor(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v20 = sub_10009B254();
  v21 = (int *)type metadata accessor for InferenceProviderAsset.ManagerOwnedState(v20);
  sub_10001DD00();
  __chkstk_darwin(v22);
  sub_10001E168();
  v25 = v24 - v23;
  v26 = a1 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  swift_beginAccess(a1 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v55, 1, 0);
  sub_10009B1CC(v26, v25, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v3, a1 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_descriptor, v18);
  v27 = *(_QWORD *)(a1 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_path + 8);
  v44 = *(_QWORD *)(a1 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_path);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v17, a1 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_cost, v42);
  LODWORD(v42) = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_isCacheable);
  v41 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_dynamicModeAllowed);
  v40 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_useEnergyEfficientMode);
  v28 = *(_QWORD *)(a1 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
  v29 = *(_QWORD *)(a1 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
  sub_10001C830((_QWORD *)(a1 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection), v28);
  v30 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
  swift_bridgeObjectRetain(v27);
  v30(v28, v29);
  v31 = v45;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v45, v25, v47);
  v32 = v48;
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v49 + 16);
  v34 = v51;
  v33(v48, v25 + v21[8], v51);
  v35 = v50;
  v33(v50, v25 + v21[9], v34);
  v36 = *(_QWORD *)(v25 + v21[10]);
  v37 = *(_QWORD *)(v25 + v21[11]);
  v38 = *(_QWORD *)(v25 + v21[12]);
  sub_10001E338();
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v38);
  StateDump.AssetState.init(descriptor:path:cost:isCacheable:dynamicModeAllowed:useEnergyEfficientMode:inferenceProvider:loadState:timeLastRequestEnded:timeLastForegroundSessionEnded:requiredByOtherAssets:foregroundSessions:requests:)(v3, v44, v27, v43, v42, v41, v40, v54, v31, v32, v35, v36, v37, v38);
  swift_release(a1);
  swift_release(v53);
  sub_10009B210(v25, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  sub_100006A68();
}

void sub_10009ABE8(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  void (*v54)(_BYTE *, _QWORD);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE v75[32];
  uint64_t v76;
  uint64_t v77;
  char v78;
  _QWORD *v79;
  char v80[32];

  v74 = sub_100002F78(&qword_1000FB2A0);
  v5 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v6 = sub_10009B254();
  v7 = type metadata accessor for DaemonSessionState(v6);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_10001E168();
  v11 = v10 - v9;
  v12 = type metadata accessor for DaemonSession.ManagerOwnedState(0);
  sub_10001DD00();
  __chkstk_darwin(v13);
  sub_10002BD70();
  v72 = v14;
  v15 = sub_100002F78(&qword_1000FB2D8);
  __chkstk_darwin(v15);
  sub_10001E168();
  v71 = v18 - v17;
  (*(void (**)(void))(v16 + 16))();
  v19 = a1[5];
  if (v19 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v19 > 0x7FFFFFFF)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v20 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_createdByPID);
  if (v20 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v20 > 0x7FFFFFFF)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v63 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_createdByPID);
  v64 = a1[5];
  v65 = v12;
  v66 = v8;
  v67 = v11;
  v68 = v7;
  v70 = a2;
  v21 = a1[2];
  v60 = a1[3];
  v22 = a1[4];
  v59 = *((unsigned __int8 *)a1 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_containsSensitiveData);
  v69 = a1;
  v23 = (uint64_t)a1 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState;
  sub_10002B2E0((uint64_t)a1 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState, (uint64_t)v80);
  v58 = v23;
  sub_10009B1CC(v23, v72, type metadata accessor for DaemonSession.ManagerOwnedState);
  v24 = *(_QWORD *)(v72 + 8);
  v62 = v21;
  swift_bridgeObjectRetain(v21);
  v61 = v22;
  swift_bridgeObjectRetain(v22);
  v25 = swift_bridgeObjectRetain(v24);
  v26 = sub_10000DB44(v25);
  if (!v26)
  {
    swift_bridgeObjectRelease(v24);
LABEL_30:
    sub_10009B210(v72, type metadata accessor for DaemonSession.ManagerOwnedState);
    sub_10000BAF0();
    v57 = v56;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))(v67, v58 + *(int *)(v65 + 24), v68);
    StateDump.SessionState.init(identifier:supportedAssets:useCaseIdentifier:onBehalfOfPID:createdByPID:containsSensitiveData:requests:state:)(v71, v62, v60, v61, v64, v63, v59, v57, v67);
    swift_release(v69);
    swift_release(v70);
    sub_100006A68();
    return;
  }
  v27 = v26;
  v79 = _swiftEmptyArrayStorage;
  sub_100011910();
  if ((v24 & 0xC000000000000001) != 0)
  {
    if (v24 < 0)
      v28 = v24;
    else
      v28 = v24 & 0xFFFFFFFFFFFFFF8;
    v29 = __CocoaSet.startIndex.getter(v28);
    v31 = 1;
  }
  else
  {
    v29 = sub_10001C854(v24);
    v31 = v32 & 1;
  }
  v76 = v29;
  v77 = v30;
  v78 = v31;
  if ((v27 & 0x8000000000000000) == 0)
  {
    v33 = v24 & 0xFFFFFFFFFFFFFF8;
    if (v24 < 0)
      v33 = v24;
    v73 = v33;
    do
    {
      v35 = v76;
      v34 = v77;
      v36 = v78;
      sub_10009B2E8();
      sub_10007BAFC();
      v38 = v37;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, v37 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_id, v74);
      swift_release(v38);
      v39 = v79;
      if ((swift_isUniquelyReferenced_nonNull_native(v79) & 1) == 0)
      {
        sub_10009B308();
        sub_100011910();
        v39 = v79;
      }
      v41 = v39[2];
      v40 = v39[3];
      if (v41 >= v40 >> 1)
      {
        sub_10009B2B4(v40);
        sub_100011910();
        v39 = v79;
      }
      v39[2] = v41 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))((unint64_t)v39+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v41, v2, v74);
      if ((v24 & 0xC000000000000001) != 0)
      {
        if ((v36 & 1) == 0)
          goto LABEL_36;
        v42 = __CocoaSet.Index.handleBitPattern.getter(v35, v34);
        if (v42)
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v42);
        else
          isUniquelyReferenced_nonNull_native = 1;
        v53 = sub_100002F78(&qword_1000FE480);
        v54 = (void (*)(_BYTE *, _QWORD))Set.Index._asCocoa.modify(v75, v53);
        __CocoaSet.formIndex(after:isUnique:)(v55, isUniquelyReferenced_nonNull_native, v73);
        v54(v75, 0);
      }
      else
      {
        v44 = sub_10009B2E8();
        v48 = sub_10001C6FC(v44, v45, v46, v47);
        v50 = v49;
        v52 = v51;
        sub_10001C7E4(v35, v34, v36);
        v76 = v48;
        v77 = v50;
        v78 = v52 & 1;
      }
      --v27;
    }
    while (v27);
    sub_10001C7E4(v76, v77, v78);
    swift_bridgeObjectRelease(v24);
    goto LABEL_30;
  }
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

uint64_t sub_10009B0C4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v2 = 64;
  for (i = 10; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    v1 = *(_QWORD *)(a1 + 8 * i);
    v2 += 64;
    if (v1)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_10009B144(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100002F78(&qword_1000FE478);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10009B18C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100002F78(&qword_1000FE478);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10009B1CC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10009B210(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10009B24C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t sub_10009B254()
{
  return 0;
}

uint64_t sub_10009B28C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

void sub_10009B294()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = v0;
}

uint64_t sub_10009B2A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return 0;
}

BOOL sub_10009B2B4@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_10009B2D0@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v2, v3, v1);
}

uint64_t sub_10009B2E0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t sub_10009B2E8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10009B2FC()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10009B308()
{
  return 0;
}

uint64_t sub_10009B314(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 136);
}

uint64_t sub_10009B328()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 280));
}

_QWORD *sub_10009B334(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  void (*v31)(_QWORD *, uint64_t, uint64_t);
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;

  v38 = type metadata accessor for InferenceProviderDescriptor.Instance(0);
  v4 = *(_QWORD *)(v38 - 8);
  v5 = __chkstk_darwin(v38);
  v39 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v9 = (uint64_t *)((char *)&v28 - v8);
  __chkstk_darwin(v7);
  v37 = (char *)&v28 - v10;
  v11 = type metadata accessor for InferenceProviderDescriptor(0);
  v35 = *(_QWORD *)(v11 - 8);
  v36 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a2 + 16);
  v15 = _swiftEmptyArrayStorage;
  if (v14)
  {
    v28 = v2;
    v43 = _swiftEmptyArrayStorage;
    sub_100011768();
    v15 = v43;
    v30 = enum case for InferenceProviderDescriptor.Instance.specificInstance(_:);
    v29 = enum case for InferenceProviderDescriptor.Instance.defaultInstance(_:);
    v33 = v9;
    v34 = v4;
    v31 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v4 + 104);
    v32 = v13;
    v16 = (unsigned __int8 *)(a2 + 64);
    v17 = v34;
    v18 = v37;
    do
    {
      v19 = *((_QWORD *)v16 - 1);
      v41 = v15;
      v42 = v14;
      if (v19)
      {
        *v9 = *((_QWORD *)v16 - 2);
        v9[1] = v19;
        v20 = v30;
      }
      else
      {
        v20 = v29;
      }
      v21 = *((_QWORD *)v16 - 3);
      v40 = *((_QWORD *)v16 - 4);
      v22 = *v16;
      v23 = v38;
      v31(v9, v20, v38);
      (*(void (**)(char *, _QWORD *, uint64_t))(v17 + 32))(v18, v9, v23);
      v24 = v39;
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v39, v18, v23);
      swift_bridgeObjectRetain_n(v21, 2);
      swift_bridgeObjectRetain_n(v19, 2);
      v25 = v32;
      InferenceProviderDescriptor.init(id:instance:hostedOnServer:)(v40, v21, v24, v22);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v18, v23);
      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease(v21);
      v15 = v41;
      v43 = v41;
      v26 = v41[2];
      if (v26 >= v41[3] >> 1)
      {
        sub_100011768();
        v15 = v43;
      }
      v16 += 40;
      v15[2] = v26 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v35 + 32))((unint64_t)v15+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(_QWORD *)(v35 + 72) * v26, v25, v36);
      v14 = v42 - 1;
      v9 = v33;
    }
    while (v42 != 1);
  }
  return v15;
}

#error "10009B658: call analysis failed (funcsize=102)"

void sub_10009B774(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;

  sub_1000A0F1C();
  v5 = (os_unfair_lock_s *)(v3 + v4);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + v4));
  sub_10009EA14(v1, a1);
  os_unfair_lock_unlock(v5);
}

uint64_t sub_10009B7E0()
{
  uint64_t v0;
  uint64_t v1;
  uint8_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;

  v3 = v0;
  v4 = *(_QWORD *)(v0 + 16);
  if (!*(_QWORD *)(v4 + 16))
  {
    if (qword_1000FB150 != -1)
      swift_once(&qword_1000FB150, sub_10009C924);
    v19 = sub_10001DD64();
    sub_1000A11CC(v19, (uint64_t)qword_1000FE498);
    v20 = sub_1000A1160();
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v2 = (uint8_t *)sub_10001D8D4(12);
      v23 = sub_10001D8D4(32);
      v42 = (_QWORD *)v23;
      *(_DWORD *)v2 = 136315138;
      swift_retain(v3);
      sub_10009FEF4();
      v24 = sub_10001D930();
      sub_1000A1028(v24, v25, (uint64_t *)&v42);
      v40 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v2 + 4);
      sub_10001EBB0(v3);
      sub_10001E8A8();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Session %s doesn't have any asset bundle identifiers", v2, 0xCu);
      swift_arrayDestroy(v23, 1);
      sub_10001D790(v23);
      sub_10001D790((uint64_t)v2);

    }
    else
    {

      sub_10001EBB0(v3);
    }
    v27 = sub_10002B8A0();
    sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_10002B560(v27, v28);
    v30 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v29, enum case for ModelManagerError.unsupportedNumberOfAssetBundles(_:), v27);
    swift_willThrow(v30, v31, v32, v33, v34, v35, v36, v37);
    return (uint64_t)v2;
  }
  sub_10001EBA8(v4);
  sub_10001B53C(v4);
  v6 = v5;
  sub_10001E034();
  v42 = v6;
  sub_1000A00DC((uint64_t *)&v42);
  if (!v1)
  {
    sub_10001E034();
    v7 = v42;
    if (v42[2])
    {
      v2 = (uint8_t *)v42[4];
      v8 = v42[5];
      swift_bridgeObjectRetain(v8);
      swift_release(v7);
      if (qword_1000FB150 != -1)
        swift_once(&qword_1000FB150, sub_10009C924);
      v9 = sub_10001DD64();
      sub_1000A11CC(v9, (uint64_t)qword_1000FE498);
      sub_10001EBA8(v8);
      v10 = sub_1000A1160();
      v11 = Logger.logObject.getter(v10);
      v12 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v11, v12))
      {
        v13 = sub_10001D8D4(22);
        v39 = sub_10001D8D4(64);
        v42 = (_QWORD *)v39;
        *(_DWORD *)v13 = 136315394;
        swift_retain(v3);
        sub_10009FEF4();
        v14 = sub_10001D930();
        sub_1000A1028(v14, v15, (uint64_t *)&v42);
        v40 = v16;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v13 + 4);
        sub_10001EBB0(v3);
        sub_10001E8A8();
        *(_WORD *)(v13 + 12) = 2080;
        swift_bridgeObjectRetain(v8);
        sub_10007E898((uint64_t)v2, v17, (uint64_t *)&v42);
        v40 = v18;
        sub_10002B800((uint64_t)&v40, (uint64_t)&v41);
        swift_bridgeObjectRelease_n(v8, 3);
        sub_10002B4A0((void *)&_mh_execute_header, v11, v12, "Session %s selected asset bundle identifier %s", (uint8_t *)v13);
        sub_1000A1034();
        sub_10001D790(v39);
        sub_10001D790(v13);

      }
      else
      {

        sub_10002BA68(v8);
        sub_10001EBB0(v3);
      }
      return (uint64_t)v2;
    }
    swift_release(v42);
    __break(1u);
  }
  result = swift_release(v42);
  __break(1u);
  return result;
}

uint64_t sub_10009BBD8()
{
  uint64_t KeyPath;
  uint64_t v1;

  KeyPath = swift_getKeyPath(&unk_1000CCB40);
  v1 = sub_10009CA54(KeyPath);
  sub_10001DEEC();
  return v1;
}

uint64_t sub_10009BC28@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_1000CCB20);
  sub_10009CB0C(KeyPath, a1);
  return swift_release(KeyPath);
}

uint64_t sub_10009BC7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  return sub_10001D948((uint64_t)sub_10009BC98, a1);
}

uint64_t sub_10009BC98()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t **v2;

  v1 = v0[7] + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState;
  sub_10002B308(v1, (uint64_t)(v0 + 2), 33);
  v2 = (uint64_t **)swift_task_alloc(dword_1000FE75C);
  v0[8] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = (uint64_t *)sub_10009BD04;
  return sub_10009EAA8((uint64_t)v2, v1, v0[7], v0[6]);
}

uint64_t sub_10009BD04()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 64));
  if (v0)
  {
    v3 = *(_QWORD *)(v2 + 40);
    v4 = sub_10009BD74;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 40);
    swift_endAccess(v2 + 16);
    v4 = sub_10001DCF8;
    v3 = v5;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_10009BD74()
{
  uint64_t v0;

  return swift_endAccess(v0 + 16);
}

void sub_10009BD7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  sub_10007F5A0();
  v33 = v1;
  v3 = type metadata accessor for DaemonSessionState(0);
  __chkstk_darwin(v3);
  sub_1000A0F38();
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v33 - v6;
  __chkstk_darwin(v5);
  v9 = (char *)&v33 - v8;
  v10 = v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState;
  sub_10002B2E0(v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState, (uint64_t)&v34);
  v11 = type metadata accessor for DaemonSession.ManagerOwnedState(0);
  v12 = sub_1000A106C((uint64_t)v9, v10 + *(int *)(v11 + 24));
  sub_1000A11B4(v12, enum case for DaemonSessionState.cancelled(_:));
  LOBYTE(v10) = sub_1000B23AC((uint64_t)v9, (uint64_t)v7);
  sub_1000A0FB4((uint64_t)v7);
  v13 = sub_1000A106C(v2, (uint64_t)v9);
  if ((v10 & 1) != 0)
  {
    sub_1000A0FB4(v2);
  }
  else
  {
    sub_1000A11B4(v13, enum case for DaemonSessionState.cancellationInProgress(_:));
    v14 = sub_1000B23AC(v2, (uint64_t)v7);
    sub_1000A0FB4((uint64_t)v7);
    sub_1000A0FB4(v2);
    if ((v14 & 1) == 0)
    {
      sub_1000A0FB4((uint64_t)v9);
      goto LABEL_10;
    }
  }
  if (qword_1000FB150 != -1)
    swift_once(&qword_1000FB150, sub_10009C924);
  v15 = sub_10001DD64();
  v16 = sub_1000A11CC(v15, (uint64_t)qword_1000FE498);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)sub_10001D8D4(2);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "session cancelled, returning error", v19, 2u);
    sub_10001D790((uint64_t)v19);
  }

  v20 = sub_10002B8A0();
  sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
  sub_10002B560(v20, v21);
  v23 = v22;
  v24 = sub_100002F78(&qword_1000FB2D8);
  UUIDIdentifier.uuid.getter(v24);
  v25 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v23, enum case for ModelManagerError.sessionInCancelState(_:), v20);
  swift_willThrow(v25, v26, v27, v28, v29, v30, v31, v32);
  sub_1000A0FB4((uint64_t)v9);
LABEL_10:
  sub_10007EDD8();
}

uint64_t sub_10009BFF0()
{
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_1000CCB00);
  sub_10009CC80(KeyPath);
  sub_10001DEEC();
  return sub_10001EBDC();
}

void sub_10009C044()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE v12[24];
  uint64_t v13;

  sub_1000A104C();
  sub_10002BCBC();
  __chkstk_darwin(v4);
  sub_100006B28();
  __chkstk_darwin(v5);
  v7 = &v11[-v6 - 8];
  v8 = v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState;
  sub_10002B308(v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState, (uint64_t)v12, 0);
  sub_1000A1074(v8, (uint64_t)v7);
  swift_retain();
  swift_retain();
  sub_100011CD8(&v13, v3);
  v9 = v13;
  swift_release(v2);
  swift_release(v9);
  sub_1000A1074((uint64_t)v7, v1);
  sub_10002B308(v8, (uint64_t)v11, 33);
  sub_1000A1100();
  swift_endAccess(v11);
  sub_1000A11E0();
  sub_10001D950();
}

#error "10009C1A8: call analysis failed (funcsize=63)"

uint64_t sub_10009C228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  return sub_10001D948((uint64_t)sub_10009C23C, a2);
}

uint64_t sub_10009C23C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 64) + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState;
  sub_10002B308(v2, v0 + 16, 0);
  v3 = *(_QWORD *)(v2 + 8);
  v4 = swift_task_alloc(32);
  *(_QWORD *)(v4 + 16) = v1;
  swift_bridgeObjectRetain(v3);
  sub_100008368(sub_1000A0CD8, v4, v3);
  v6 = v5;
  *(_QWORD *)(v0 + 72) = v5;
  swift_bridgeObjectRelease(v3);
  swift_task_dealloc(v4);
  if (v6)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v0 + 64) + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_requestManager);
    v8 = (_QWORD *)swift_task_alloc(dword_1000FFA44);
    *(_QWORD *)(v0 + 80) = v8;
    *v8 = v0;
    v8[1] = sub_10009C3C0;
    return sub_1000C6594(v7, *(_QWORD *)(v0 + 56));
  }
  else
  {
    v10 = type metadata accessor for ModelManagerError(0);
    sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    swift_allocError(v10, v11, 0, 0);
    v13 = v12;
    v14 = sub_100002F78(&qword_1000FB2A0);
    UUIDIdentifier.uuid.getter(v14);
    v15 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v13, enum case for ModelManagerError.requestNotFound(_:), v10);
    swift_willThrow(v15, v16, v17, v18, v19, v20, v21, v22);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10009C3C0()
{
  uint64_t v0;

  sub_10001D680(*(_QWORD *)(*(_QWORD *)v0 + 80));
  return sub_10001D674();
}

uint64_t sub_10009C404()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10009C438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  uint64_t v49;
  int v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t);
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(_QWORD);
  unint64_t v73;
  unint64_t v74;
  char *v75;
  NSObject *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t (*v95)(uint64_t);

  sub_10007F5A0();
  a19 = v24;
  a20 = v25;
  v93 = (uint64_t *)v21;
  v27 = v26;
  v91 = v28;
  v29 = sub_10007F430();
  v94 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  sub_1000A0F38();
  __chkstk_darwin(v30);
  v32 = (char *)&v82 - v31;
  v33 = sub_10002BA0C();
  v34 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v36 = (char *)&v82 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100002F78(&qword_1000FBEA8);
  sub_10002BCBC();
  __chkstk_darwin(v37);
  sub_1000A10A4();
  v38 = v20;
  v39 = (uint64_t)v93;
  v40 = sub_10009DDEC();
  if (v39)
  {
LABEL_20:
    sub_10007EDD8();
    return;
  }
  v92 = v32;
  v93 = (uint64_t *)v22;
  v88 = v41;
  v89 = v40;
  sub_10009C8AC(v41, v23);
  if (sub_1000A107C() != 1)
  {
    v87 = 0;
    v42 = v34;
    v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 32);
    v44 = v91;
    sub_10001E0E8(v91, v23, v43);
    v45 = (uint64_t)v36;
    if (qword_1000FB150 != -1)
      goto LABEL_24;
    while (1)
    {
      v46 = sub_10001DD64();
      sub_1000A11CC(v46, (uint64_t)qword_1000FE498);
      sub_10001E0E8(v45, v44, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 16));
      v47 = sub_10001EBA8(v27);
      v48 = Logger.logObject.getter(v47);
      v49 = v33;
      v50 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v48, (os_log_type_t)v50))
      {
        sub_1000A1014();
        swift_release(v89);
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v45, v49);

        sub_10002BA68(v27);
        goto LABEL_20;
      }
      v51 = v38;
      v38 = v48;
      v86 = v50;
      v52 = sub_10001D8D4(32);
      v85 = sub_10001D8D4(96);
      a10 = v85;
      *(_DWORD *)v52 = 136315650;
      v53 = _typeName(_:qualified:)(v51, 0);
      sub_1000A0FFC(v53, v54);
      sub_1000A10E0(v55);
      v44 = v45;
      v57 = v56 + 8;
      sub_10002B800((uint64_t)&v95, v56 + 8);
      sub_10001E034();
      *(_WORD *)(v52 + 12) = 2080;
      v33 = v52 + 14;
      sub_100006710(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
      v59 = dispatch thunk of CustomStringConvertible.description.getter(v49, v58);
      sub_1000A0FFC(v59, v60);
      v62 = sub_1000A10D4(v61);
      v84 = v57;
      sub_10002B800(v62, v57);
      sub_10001E034();
      v63 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8))(v44, v49);
      *(_WORD *)(v52 + 22) = 2080;
      v45 = *(_QWORD *)(v27 + 16);
      if (!v45)
        break;
      v82 = v52;
      v83 = v38;
      v64 = sub_1000A10C4();
      sub_1000A10BC(v64, v45);
      v42 = sub_10001C854(v27);
      sub_1000A1040();
      v90 = v27;
      v91 = v27 + 56;
      while ((v42 & 0x8000000000000000) == 0)
      {
        sub_10001DC08();
        if (v42 >= v65)
          break;
        if (((*(_QWORD *)(v91 + (((unint64_t)v42 >> 3) & 0xFFFFFFFFFFFFF8)) >> v42) & 1) == 0)
          goto LABEL_22;
        if (*(_DWORD *)(v27 + 36) != (_DWORD)v38)
          goto LABEL_23;
        v66 = (uint64_t)v92;
        v67 = type metadata accessor for ModelCatalogAsset;
        sub_1000A0C4C(*(_QWORD *)(v27 + 48) + *(_QWORD *)(v94 + 72) * v42, (uint64_t)v92, (void (*)(_QWORD))type metadata accessor for ModelCatalogAsset);
        v68 = v66;
        v69 = v93;
        sub_10001CB5C(v68, (uint64_t)v93);
        v44 = *v69;
        v70 = v69[1];
        sub_10007DCD8();
        v71 = sub_10001EBDC();
        sub_10002ACC4(v71, v72);
        if ((sub_10002BF18() & 1) == 0)
        {
          sub_10002B960();
          v67 = v95;
        }
        v74 = *((_QWORD *)v67 + 2);
        v73 = *((_QWORD *)v67 + 3);
        v33 = v74 + 1;
        if (v74 >= v73 >> 1)
        {
          sub_1000A0FAC(v73 > 1, v74 + 1);
          v67 = v95;
        }
        *((_QWORD *)v67 + 2) = v33;
        v75 = (char *)v67 + 16 * v74;
        *((_QWORD *)v75 + 4) = v44;
        *((_QWORD *)v75 + 5) = v70;
        v27 = v90;
        v42 = sub_10001C6FC(v42, v38, v52 & 1, v90);
        sub_1000A1040();
        if (!--v45)
        {
          v63 = sub_1000A101C(v42);
          v52 = v82;
          v76 = v83;
          goto LABEL_19;
        }
      }
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      swift_once(&qword_1000FB150, sub_10009C924);
    }
    v76 = v38;
LABEL_19:
    v77 = sub_1000A1158(v63, (uint64_t)&type metadata for String);
    sub_10001E034();
    sub_10007E898(v77, v78, &a10);
    v80 = sub_1000A10D4(v79);
    sub_10002B800(v80, v84);
    sub_10002BA68(v27);
    sub_10001E4C0();
    sub_1000A1140((void *)&_mh_execute_header, v76, (os_log_type_t)v86, "Session %s selected inference provider %s for assets %s");
    v81 = v85;
    sub_1000A116C();
    sub_10001D790(v81);
    sub_10001D790(v52);
    sub_1000A1014();

    swift_release(v89);
    goto LABEL_20;
  }
  __break(1u);
}

uint64_t sub_10009C8AC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = type metadata accessor for InferenceProviderDescriptor(0);
  v6 = v5;
  if (v4)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1+ ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80)), v5);
    v7 = 0;
  }
  else
  {
    v7 = 1;
  }
  return sub_100005630(a2, v7, 1, v6);
}

uint64_t sub_10009C924()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_100002FB8(v0, qword_1000FE498);
  sub_100002FF8(v0, (uint64_t)qword_1000FE498);
  v1 = subsystemName.getter();
  return Logger.init(subsystem:category:)(v1);
}

void sub_10009C994(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

BOOL sub_10009C9B8(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_10009C9C8(uint64_t a1)
{
  char v1;

  v1 = a1;
  sub_10004A934(a1);
  Hasher._combine(_:)(v1 & 1);
  sub_10001DBF4();
  sub_1000449BC();
}

void sub_10009C9F8()
{
  unsigned __int8 *v0;

  sub_10009C9C8(*v0);
}

void sub_10009CA00(uint64_t a1)
{
  char *v1;

  sub_10009C994(a1, *v1);
}

Swift::Int sub_10009CA08(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL sub_10009CA48(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10009C9B8(*a1, *a2);
}

uint64_t sub_10009CA54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v3 = type metadata accessor for DaemonSession.LazyState(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_10009CD3C(a1);
  if (!result)
  {
    result = sub_10009CED0();
    if (!v1)
    {
      result = swift_getAtKeyPath(v5, a1);
      if (v8)
      {
        sub_10002ACC4((uint64_t)v5, type metadata accessor for DaemonSession.LazyState);
        return v8;
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t sub_10009CB0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  _QWORD v16[2];

  v5 = type metadata accessor for DaemonSession.LazyState(0);
  __chkstk_darwin(v5);
  v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100002F78(&qword_1000FBEA8);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)v16 - v12;
  sub_10009CDC8(a1);
  v14 = type metadata accessor for InferenceProviderDescriptor(0);
  if (sub_100005700((uint64_t)v13, 1, v14) == 1)
  {
    sub_1000A009C((uint64_t)v13);
    result = sub_10009CED0();
    if (v2)
      return result;
    swift_getAtKeyPath(v7, a1);
    result = sub_100005700((uint64_t)v11, 1, v14);
    if ((_DWORD)result == 1)
    {
      __break(1u);
      return result;
    }
    sub_10002ACC4((uint64_t)v7, type metadata accessor for DaemonSession.LazyState);
  }
  else
  {
    v11 = v13;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a2, v11, v14);
}

uint64_t sub_10009CC80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];

  v3 = type metadata accessor for DaemonSession.LazyState(0);
  __chkstk_darwin(v3);
  v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_10009CE44(a1);
  if (!v7)
  {
    result = sub_10009CED0();
    if (!v1)
    {
      result = swift_getAtKeyPath(v5, a1);
      if (v8[1])
      {
        sub_10002ACC4((uint64_t)v5, type metadata accessor for DaemonSession.LazyState);
        return v8[0];
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t sub_10009CD3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v7;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession__lazyState);
  v4 = v3 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v3 + 16);
  v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(_QWORD *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_1000A0C88(v4, a1, &v7);
  os_unfair_lock_unlock(v5);
  return v7;
}

void sub_10009CDC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession__lazyState);
  v4 = v3 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v3 + 16);
  v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(_QWORD *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  swift_getAtKeyPath(v4, a1);
  os_unfair_lock_unlock(v5);
}

uint64_t sub_10009CE44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v7;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession__lazyState);
  v4 = v3 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v3 + 16);
  v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(_QWORD *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_1000A0CB0(v4, a1, &v7);
  os_unfair_lock_unlock(v5);
  return v7;
}

uint64_t sub_10009CED0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = sub_10009B7E0();
  if (!v1)
  {
    v4 = result;
    v5 = v3;
    sub_10001C830((_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_modelCatalog), *(_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_modelCatalog + 24));
    v6 = sub_1000A1F80(v4, v5);
    sub_10009B5DC(v4, v5, v6);
    swift_bridgeObjectRelease(v5);
    return swift_bridgeObjectRelease(v6);
  }
  return result;
}

uint64_t sub_10009CF98(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  swift_getAtKeyPath(a1, a2);
  return v3;
}

uint64_t sub_10009CFC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  swift_getAtKeyPath(a1, a2);
  return v3;
}

void sub_10009CFF8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = sub_100002F78(&qword_1000FBEA8);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DaemonSession.LazyState(0);
  sub_1000A0054(a1 + *(int *)(v7 + 24), (uint64_t)v6);
  v8 = type metadata accessor for InferenceProviderDescriptor(0);
  v9 = sub_100005700((uint64_t)v6, 1, v8);
  sub_1000A009C((uint64_t)v6);
  if (v9 == 1)
  {
    if (qword_1000FB150 != -1)
      swift_once(&qword_1000FB150, sub_10009C924);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_100002FF8(v10, (uint64_t)qword_1000FE498);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v12, v13))
      goto LABEL_12;
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    v15 = "Fallback inference provider not allowed: main inference provider not yet selected";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v12, v13, v15, v14, 2u);
    swift_slowDealloc(v14, -1, -1);
LABEL_12:

    *a2 = 0;
    return;
  }
  if ((*(_BYTE *)(a1 + *(int *)(v7 + 28)) & 1) != 0)
  {
    if (qword_1000FB150 != -1)
      swift_once(&qword_1000FB150, sub_10009C924);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_100002FF8(v16, (uint64_t)qword_1000FE498);
    v12 = Logger.logObject.getter(v17);
    v13 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v12, v13))
      goto LABEL_12;
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    v15 = "Fallback inference provider not allowed: inference provider selection has been locked";
    goto LABEL_11;
  }
  v18 = *(_QWORD *)(a1 + 16);
  *a2 = v18;
  swift_bridgeObjectRetain(v18);
}

void sub_10009D208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t KeyPath;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  NSObject *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;

  sub_10007F5A0();
  a19 = v23;
  a20 = v24;
  v143 = (char *)v21;
  v26 = v25;
  v138 = v27;
  v139 = v20;
  v28 = sub_10007F430();
  v29 = *(_QWORD *)(v28 - 8);
  v30 = __chkstk_darwin(v28);
  v32 = (char *)&v131 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v34 = (char *)&v131 - v33;
  v35 = sub_10002BA0C();
  v36 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v38 = (char *)&v131 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100002F78(&qword_1000FBEA8);
  sub_10002BCBC();
  __chkstk_darwin(v39);
  sub_1000A10A4();
  v40 = (uint64_t)v143;
  v41 = sub_10009DDEC();
  if (!v40)
  {
    v135 = 0;
    v136 = v41;
    v142 = v34;
    v143 = v32;
    v137 = v42;
    KeyPath = swift_getKeyPath(&unk_1000CCB20);
    v44 = v139;
    sub_10009CDC8(KeyPath);
    swift_release(KeyPath);
    v45 = sub_1000A107C();
    sub_1000A009C(v22);
    if (v45 == 1)
    {
      if (qword_1000FB150 == -1)
      {
LABEL_4:
        v46 = sub_10001DD64();
        sub_100002FF8(v46, (uint64_t)qword_1000FE498);
        v47 = sub_1000A1008();
        v48 = Logger.logObject.getter(v47);
        v49 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v48, v49))
        {
          v50 = v44;
          v51 = (uint8_t *)sub_10001D8D4(12);
          v52 = sub_10001D8D4(32);
          a10 = v52;
          *(_DWORD *)v51 = 136315138;
          swift_retain();
          sub_10009FEF4();
          v53 = sub_10002BA40();
          sub_1000A1028(v53, v54, &a10);
          v144 = v55;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &a9, v51 + 4);
          sub_10001EBB0(v50);
          sub_10001E8A8();
          _os_log_impl((void *)&_mh_execute_header, v48, v49, "Session %s hasn't selected an inference provider, no fallback can be selected", v51, 0xCu);
          swift_arrayDestroy(v52, 1);
          sub_10001D790(v52);
          sub_10001D790((uint64_t)v51);

        }
        else
        {

          sub_10001EBB0(v44);
        }
        v86 = sub_1000A0CF4();
        v87 = sub_10002B560((uint64_t)&type metadata for DaemonSessionInternalError, v86);
        v95 = 1;
        goto LABEL_45;
      }
LABEL_53:
      swift_once(&qword_1000FB150, sub_10009C924);
      goto LABEL_4;
    }
    v56 = *(_QWORD *)(v137 + 16);
    v141 = v26;
    if (v56 < 2)
    {
      v96 = (uint64_t)v143;
      if (qword_1000FB150 != -1)
        swift_once(&qword_1000FB150, sub_10009C924);
      v97 = sub_10001DD64();
      sub_100002FF8(v97, (uint64_t)qword_1000FE498);
      sub_1000A1008();
      v98 = sub_10001EBA8(v26);
      v99 = Logger.logObject.getter(v98);
      v100 = static os_log_type_t.default.getter();
      if (sub_10007F25C((os_log_type_t)v100))
      {
        LODWORD(v138) = v100;
        v101 = sub_10001D8D4(22);
        v135 = sub_10001D8D4(64);
        a10 = v135;
        *(_DWORD *)v101 = 136315394;
        swift_retain();
        v102 = sub_10009FEF4();
        v103 = v44;
        v105 = v104;
        sub_10001E098();
        sub_1000102C0(v102, v105, &a10);
        sub_1000A10E0(v106);
        v134 = v107 + 8;
        sub_10002B800((uint64_t)&v144, v107 + 8);
        sub_10001EBB0(v103);
        v108 = swift_bridgeObjectRelease(v105);
        *(_WORD *)(v101 + 12) = 2080;
        v44 = *(_QWORD *)(v26 + 16);
        if (v44)
        {
          v132 = v101;
          v133 = v99;
          v109 = sub_1000A10C4();
          sub_1000A10BC(v109, v44);
          v110 = sub_10001C854(v26);
          v112 = v111;
          v139 = v26 + 56;
          v140 = v29;
          while ((v110 & 0x8000000000000000) == 0)
          {
            sub_10001DC08();
            if (v110 >= v113)
              break;
            if (((*(_QWORD *)(v139 + (((unint64_t)v110 >> 3) & 0xFFFFFFFFFFFFF8)) >> v110) & 1) == 0)
              goto LABEL_51;
            if (*(_DWORD *)(v26 + 36) != (_DWORD)v112)
              goto LABEL_52;
            v114 = (uint64_t)v142;
            sub_1000A0C4C(*(_QWORD *)(v26 + 48) + *(_QWORD *)(v29 + 72) * v110, (uint64_t)v142, (void (*)(_QWORD))type metadata accessor for ModelCatalogAsset);
            sub_10001CB5C(v114, v96);
            sub_10007DCD8();
            sub_10002ACC4(v96, type metadata accessor for ModelCatalogAsset);
            if ((sub_10002BF18() & 1) == 0)
            {
              sub_10002B960();
              v114 = v144;
            }
            v26 = *(_QWORD *)(v114 + 16);
            v115 = *(_QWORD *)(v114 + 24);
            if (v26 >= v115 >> 1)
              sub_1000A0FAC(v115 > 1, v26 + 1);
            sub_1000A1118();
            v117 = sub_1000A110C(v110, v112, v116);
            v110 = v117;
            v112 = v118;
            --v44;
            v29 = v140;
            v96 = (uint64_t)v143;
            if (!v44)
            {
              v108 = sub_10001C7E4(v117, v118, v119 & 1);
              v101 = v132;
              v99 = v133;
              goto LABEL_43;
            }
          }
          goto LABEL_50;
        }
LABEL_43:
        v125 = sub_1000A1158(v108, (uint64_t)&type metadata for String);
        sub_10001E034();
        sub_10007E898(v125, v126, &a10);
        v128 = sub_1000A10D4(v127);
        sub_10002B800(v128, v134);
        sub_10002BA68(v141);
        sub_10001E4C0();
        sub_10002B4A0((void *)&_mh_execute_header, v99, (os_log_type_t)v138, "Session %s assets %s don't have any alternate inference providers", (uint8_t *)v101);
        v129 = v135;
        sub_1000A1034();
        sub_10001D790(v129);
        sub_10001D790(v101);

      }
      else
      {

        sub_10002BA68(v26);
        sub_10001EBB0(v44);
      }
      v130 = sub_1000A0CF4();
      v87 = sub_10002B560((uint64_t)&type metadata for DaemonSessionInternalError, v130);
      v95 = 0;
LABEL_45:
      *v88 = v95;
      swift_willThrow(v87, v88, v89, v90, v91, v92, v93, v94);
      sub_1000A1014();
      swift_release(v136);
      goto LABEL_46;
    }
    v140 = v29;
    v57 = v36;
    v58 = v138;
    sub_1000A106C(v138, v137+ *(_QWORD *)(v36 + 72)+ ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80)));
    if (qword_1000FB150 != -1)
      swift_once(&qword_1000FB150, sub_10009C924);
    v59 = sub_10001DD64();
    sub_1000A11CC(v59, (uint64_t)qword_1000FE498);
    v60 = (uint64_t)v38;
    sub_1000A106C((uint64_t)v38, v58);
    sub_1000A1008();
    v61 = sub_10001EBA8(v26);
    v62 = Logger.logObject.getter(v61);
    v63 = static os_log_type_t.default.getter();
    if (sub_10007F25C((os_log_type_t)v63))
    {
      LODWORD(v133) = v63;
      v64 = sub_10001D8D4(32);
      v132 = sub_10001D8D4(96);
      a10 = v132;
      *(_DWORD *)v64 = 136315650;
      v138 = v57;
      swift_retain();
      v65 = sub_10009FEF4();
      v134 = v60;
      v67 = v66;
      sub_10001DEEC();
      sub_1000102C0(v65, v67, &a10);
      sub_1000A10E0(v68);
      v70 = v69 + 8;
      sub_1000A114C((uint64_t)&v144);
      sub_10001EBB0(v44);
      swift_bridgeObjectRelease(v67);
      *(_WORD *)(v64 + 12) = 2080;
      sub_100006710(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
      v71 = v134;
      v73 = dispatch thunk of CustomStringConvertible.description.getter(v35, v72);
      sub_1000A0FFC(v73, v74);
      v76 = sub_1000A10D4(v75);
      v131 = v70;
      sub_1000A114C(v76);
      sub_10001E034();
      v77 = sub_10007E7EC(v71, *(uint64_t (**)(uint64_t, uint64_t))(v138 + 8));
      *(_WORD *)(v64 + 22) = 2080;
      v78 = *(_QWORD *)(v26 + 16);
      if (v78)
      {
        v134 = v64;
        v138 = (uint64_t)v62;
        v79 = sub_1000A10C4();
        sub_1000A10BC(v79, v78);
        v44 = sub_10001C854(v26);
        sub_1000A1040();
        v139 = v26 + 56;
        while ((v44 & 0x8000000000000000) == 0)
        {
          sub_10001DC08();
          if (v44 >= v80)
            break;
          if (((*(_QWORD *)(v139 + (((unint64_t)v44 >> 3) & 0xFFFFFFFFFFFFF8)) >> v44) & 1) == 0)
            goto LABEL_48;
          if (*(_DWORD *)(v26 + 36) != (_DWORD)v62)
            goto LABEL_49;
          v81 = (uint64_t)v142;
          sub_1000A0C4C(*(_QWORD *)(v26 + 48) + *(_QWORD *)(v140 + 72) * v44, (uint64_t)v142, (void (*)(_QWORD))type metadata accessor for ModelCatalogAsset);
          v82 = v81;
          v83 = (uint64_t)v143;
          sub_10001CB5C(v82, (uint64_t)v143);
          sub_10007DCD8();
          sub_10002ACC4(v83, type metadata accessor for ModelCatalogAsset);
          if ((sub_10002BF18() & 1) == 0)
          {
            sub_10002B960();
            v83 = v144;
          }
          v26 = *(_QWORD *)(v83 + 16);
          v84 = *(_QWORD *)(v83 + 24);
          if (v26 >= v84 >> 1)
            sub_1000A0FAC(v84 > 1, v26 + 1);
          sub_1000A1118();
          v44 = sub_1000A110C(v44, (uint64_t)v62, v85);
          sub_1000A1040();
          if (!--v78)
          {
            v77 = sub_1000A101C(v44);
            v62 = v138;
            v64 = v134;
            goto LABEL_41;
          }
        }
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
LABEL_41:
      v120 = sub_1000A1158(v77, (uint64_t)&type metadata for String);
      sub_10001E034();
      sub_10007E898(v120, v121, &a10);
      v123 = sub_1000A10D4(v122);
      sub_10002B800(v123, v131);
      sub_10002BA68(v141);
      sub_10001E4C0();
      sub_1000A1140((void *)&_mh_execute_header, v62, (os_log_type_t)v133, "Session %s selected alternate inference provider %s for assets %s");
      v124 = v132;
      sub_1000A116C();
      sub_10001D790(v124);
      sub_10001D790(v64);

      sub_1000A1014();
    }
    else
    {
      sub_10001EBB0(v44);
      sub_10007E7EC(v60, *(uint64_t (**)(uint64_t, uint64_t))(v57 + 8));

      sub_1000A1014();
      sub_10002BA68(v26);
    }
    swift_release(v136);
  }
LABEL_46:
  sub_10007EDD8();
}

void sub_10009DB54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE v11[24];

  sub_1000A104C();
  sub_10002BCBC();
  __chkstk_darwin(v4);
  sub_100006B28();
  __chkstk_darwin(v5);
  v7 = &v10[-v6];
  v8 = v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState;
  sub_10002B308(v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState, (uint64_t)v11, 0);
  sub_1000A1074(v8, (uint64_t)v7);
  swift_retain();
  v9 = sub_1000C002C(v3);
  swift_release(v2);
  swift_release(v9);
  sub_1000A1074((uint64_t)v7, v1);
  sub_10002B308(v8, (uint64_t)v10, 33);
  sub_1000A1100();
  swift_endAccess(v10);
  sub_1000A11E0();
  sub_10001D950();
}

uint64_t sub_10009DC30(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(a1[1]);
  *a1 = 0;
  a1[1] = 0;
  swift_bridgeObjectRelease(a1[2]);
  a1[2] = 0;
  v2 = (uint64_t)a1 + *(int *)(type metadata accessor for DaemonSession.LazyState(0) + 24);
  sub_1000A009C(v2);
  v3 = type metadata accessor for InferenceProviderDescriptor(0);
  return sub_100005630(v2, 1, 1, v3);
}

void sub_10009DCA0(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v12 = sub_100002F78(&qword_1000FBEA8);
  __chkstk_darwin(v12);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1[1])
  {
    *a1 = a2;
    a1[1] = a3;
    v15 = a1[2];
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRelease(v15);
    a1[2] = a4;
    v16 = (uint64_t)a1 + *(int *)(type metadata accessor for DaemonSession.LazyState(0) + 24);
    sub_1000A0054(v16, (uint64_t)v14);
    v17 = type metadata accessor for InferenceProviderDescriptor(0);
    v18 = sub_100005700((uint64_t)v14, 1, v17);
    sub_1000A009C((uint64_t)v14);
    if (v18 == 1)
    {
      sub_1000A009C(v16);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v16, a5, v17);
      sub_100005630(v16, 0, 1, v17);
    }
  }
  sub_1000A0C4C((uint64_t)a1, a6, (void (*)(_QWORD))type metadata accessor for DaemonSession.LazyState);
}

uint64_t sub_10009DDEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t i;
  uint64_t v21;
  uint64_t v22;
  char v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  __int128 v60;
  unsigned __int8 *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  BOOL v67;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t result;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  int64_t v99;
  int64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t j;
  int64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  NSObject *v139;
  os_log_type_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  int64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  __int128 v186;
  __int128 v187;
  unsigned __int8 v188;
  __int128 v189;
  uint64_t v190[9];
  uint64_t v191;
  uint64_t v192;

  sub_10007F5A0();
  v191 = v2;
  v192 = v3;
  v164 = v1;
  v163 = v0;
  v5 = v4;
  v6 = sub_10007F430();
  v177 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_10009B294();
  __chkstk_darwin(v7);
  sub_10009B294();
  __chkstk_darwin(v8);
  sub_10009B294();
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v163 - v11;
  __chkstk_darwin(v10);
  v169 = (uint64_t)&v163 - v13;
  v190[0] = (uint64_t)_swiftEmptyArrayStorage;
  v14 = *(_QWORD *)(v5 + 56);
  v175 = v5 + 56;
  v15 = 1 << *(_BYTE *)(v5 + 32);
  if (v15 < 64)
    v16 = ~(-1 << v15);
  else
    v16 = -1;
  v17 = v16 & v14;
  v166 = (unint64_t)(v15 + 63) >> 6;
  sub_10007F0CC();
  v18 = 0;
  v19 = 0;
  v170 = v5;
  v167 = v12;
  if (!v17)
    goto LABEL_6;
LABEL_5:
  v176 = (v17 - 1) & v17;
  for (i = __clz(__rbit64(v17)) | (v19 << 6); ; i = v39 + (v19 << 6))
  {
    v40 = sub_1000A112C(i);
    v41 = v169;
    sub_1000A0C4C(v40, v169, (void (*)(_QWORD))type metadata accessor for ModelCatalogAsset);
    sub_10001CB5C(v41, (uint64_t)v12);
    v42 = swift_bridgeObjectRetain(*((_QWORD *)v12 + 3));
    sub_10006BF00(v42);
    v45 = v43;
    v181 = *(_QWORD *)(v44 + 16);
    if (v181)
      break;
    swift_release(v44);
LABEL_86:
    swift_release(v45);
    sub_10002ACC4((uint64_t)v12, type metadata accessor for ModelCatalogAsset);
    v17 = v176;
    if (v176)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v19, 1))
      goto LABEL_133;
    if (v19 + 1 >= v166)
    {
LABEL_88:
      sub_10002BA40();
      v95 = v190[0];
      sub_10001DC08();
      v97 = -1;
      if (v96 < 64)
        v97 = ~(-1 << v96);
      v98 = v97 & *(_QWORD *)(v5 + 56);
      v99 = (unint64_t)(v96 + 63) >> 6;
      sub_10007F0CC();
      swift_retain(v18);
      swift_retain(v95);
      v100 = 0;
      v181 = v95;
      v182 = v18;
      v183 = v95;
      v101 = v171;
      if (!v98)
        goto LABEL_92;
LABEL_91:
      v102 = __clz(__rbit64(v98));
      v98 &= v98 - 1;
      for (j = v102 | (v100 << 6); ; j = v120 + (v100 << 6))
      {
        v121 = sub_1000A112C(j);
        v122 = v168;
        sub_1000A0C4C(v121, v168, (void (*)(_QWORD))type metadata accessor for ModelCatalogAsset);
        sub_10001CB5C(v122, v101);
        v123 = swift_bridgeObjectRetain(*(_QWORD *)(v101 + 24));
        sub_10006BF00(v123);
        v19 = v124;
        v182 = sub_1000A0A10(v125, v124, v182, v183);
        v183 = v126;
        swift_release(v19);
        sub_10001DEEC();
        sub_10002ACC4(v101, type metadata accessor for ModelCatalogAsset);
        if (v98)
          goto LABEL_91;
LABEL_92:
        if (__OFADD__(v100, 1))
          goto LABEL_134;
        if (v100 + 1 >= v99)
          break;
        sub_1000A0FBC();
        v100 = v104;
        if (!v105)
        {
          v100 = v104 + 1;
          if (v104 + 1 >= v99)
            break;
          sub_1000A0F54();
          if (!v107)
          {
            v100 = v106 + 2;
            if (v106 + 2 >= v99)
              break;
            sub_1000A0F54();
            if (!v109)
            {
              v100 = v108 + 3;
              if (v108 + 3 >= v99)
                break;
              sub_1000A0F54();
              if (!v111)
              {
                v100 = v110 + 4;
                if (v110 + 4 >= v99)
                  break;
                sub_1000A0F54();
                if (!v113)
                {
                  if (v112 + 5 >= v99)
                    break;
                  sub_1000A0FBC();
                  if (!v115)
                  {
                    while (1)
                    {
                      v100 = v114 + 1;
                      if (__OFADD__(v114, 1))
                        goto LABEL_139;
                      if (v100 >= v99)
                        goto LABEL_112;
                      sub_1000A0F54();
                      v114 = v116 + 1;
                      if (v117)
                        goto LABEL_109;
                    }
                  }
                  v100 = v114;
                }
              }
            }
          }
        }
LABEL_109:
        sub_10001E70C();
        v98 = v119 & v118;
      }
LABEL_112:
      sub_10002BA40();
      if (*(_QWORD *)(v183 + 16))
      {
        sub_10009B334(v182, v183);
        v19 = sub_10006BCA4();
        sub_10001DEEC();
        swift_release(v181);
        sub_10001E098();
        sub_10001D930();
        return v19;
      }
      v127 = *(_QWORD *)(v5 + 16);
      v128 = _swiftEmptyArrayStorage;
      if (v127)
      {
        v178 = v18;
        v190[0] = (uint64_t)_swiftEmptyArrayStorage;
        sub_1000A10BC(0, v127);
        v19 = sub_10001C854(v5);
        sub_1000A1040();
        while ((v19 & 0x8000000000000000) == 0)
        {
          sub_10001DC08();
          if (v19 >= v129)
            break;
          if (((*(_QWORD *)(v175 + (((unint64_t)v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
            goto LABEL_136;
          if (*(_DWORD *)(v170 + 36) != (_DWORD)v5)
            goto LABEL_137;
          v130 = v171;
          sub_1000A0C4C(*(_QWORD *)(v170 + 48) + *(_QWORD *)(v177 + 72) * v19, v171, (void (*)(_QWORD))type metadata accessor for ModelCatalogAsset);
          v131 = v165;
          sub_10001CB5C(v130, (uint64_t)v165);
          v132 = *v131;
          v133 = v131[1];
          swift_bridgeObjectRetain(v133);
          sub_10002ACC4((uint64_t)v131, type metadata accessor for ModelCatalogAsset);
          v128 = (_QWORD *)v190[0];
          if ((swift_isUniquelyReferenced_nonNull_native(v190[0]) & 1) == 0)
          {
            sub_1000A0FAC(0, v128[2] + 1);
            v128 = (_QWORD *)v190[0];
          }
          v135 = v128[2];
          v134 = v128[3];
          if (v135 >= v134 >> 1)
          {
            sub_1000A0FAC(v134 > 1, v135 + 1);
            v128 = (_QWORD *)v190[0];
          }
          v128[2] = v135 + 1;
          v136 = &v128[2 * v135];
          v136[4] = v132;
          v136[5] = v133;
          v19 = sub_10001C6FC(v19, v5, v101 & 1, v170);
          sub_1000A1040();
          if (!--v127)
          {
            sub_1000A101C(v19);
            goto LABEL_126;
          }
        }
        goto LABEL_135;
      }
LABEL_126:
      v19 = ((uint64_t (*)(_QWORD *))sub_10000B690)(v128);
      if (qword_1000FB150 != -1)
        goto LABEL_140;
      goto LABEL_127;
    }
    sub_1000A0FBC();
    v19 = v21;
    if (!v22)
    {
      v19 = v21 + 1;
      sub_1000A0F9C();
      if (v23 == v24)
        goto LABEL_88;
      sub_1000A0F64();
      if (!v26)
      {
        v19 = v25 + 2;
        sub_1000A0F9C();
        if (v23 == v24)
          goto LABEL_88;
        sub_1000A0F64();
        if (!v28)
        {
          v19 = v27 + 3;
          sub_1000A0F9C();
          if (v23 == v24)
            goto LABEL_88;
          sub_1000A0F64();
          if (!v30)
          {
            v19 = v29 + 4;
            sub_1000A0F9C();
            if (v23 == v24)
              goto LABEL_88;
            sub_1000A0F64();
            if (!v32)
            {
              if (v31 + 5 >= v166)
                goto LABEL_88;
              sub_1000A0FBC();
              if (!v34)
              {
                while (1)
                {
                  v19 = v33 + 1;
                  if (__OFADD__(v33, 1))
                    goto LABEL_138;
                  sub_1000A0F9C();
                  if (v23 == v24)
                    goto LABEL_88;
                  sub_1000A0F64();
                  v33 = v35 + 1;
                  if (v36)
                    goto LABEL_28;
                }
              }
              v19 = v33;
            }
          }
        }
      }
    }
LABEL_28:
    sub_10001E70C();
    v176 = v38 & v37;
  }
  v174 = v19;
  v180 = v44 + 32;
  v173 = v43;
  v46 = v44;
  sub_10001E194();
  v172 = v46;
  swift_retain(v46);
  v47 = 0;
  while (1)
  {
    v48 = v180 + 40 * v47;
    v49 = *(_OWORD *)v48;
    v50 = *(_OWORD *)(v48 + 16);
    v188 = *(_BYTE *)(v48 + 32);
    v186 = v49;
    v187 = v50;
    v189 = *(_OWORD *)v48;
    v51 = *((_QWORD *)&v50 + 1);
    v52 = v190[0];
    v53 = *(_QWORD *)(v190[0] + 16);
    if (!v18)
    {
      v178 = 0;
      v179 = v47;
      if (!v53)
      {
LABEL_54:
        sub_1000A11AC();
        sub_10007F0CC();
        v19 = 0;
        v18 = v178;
        v47 = v179;
        goto LABEL_55;
      }
      v182 = v187;
      v60 = v189;
      v61 = (unsigned __int8 *)(v190[0] + 64);
      LODWORD(v183) = v188;
      while (1)
      {
        v62 = *((_QWORD *)v61 - 4);
        v63 = *((_QWORD *)v61 - 3);
        v65 = *((_QWORD *)v61 - 2);
        v64 = *((_QWORD *)v61 - 1);
        v66 = *v61;
        v67 = v62 == (_QWORD)v60 && v63 == *((_QWORD *)&v60 + 1);
        if (!v67 && (_stringCompareWithSmolCheck(_:_:expecting:)(v62, v63, v60, *((_QWORD *)&v60 + 1), 0) & 1) == 0)
          goto LABEL_53;
        if (!v64)
          break;
        if (!v51)
          goto LABEL_53;
        if (v65 != v182 || v64 != v51)
        {
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(v65, v64, v182, v51, 0) & 1) == 0)
            goto LABEL_53;
LABEL_50:
          if (((v66 ^ v183) & 1) == 0)
            goto LABEL_76;
          goto LABEL_53;
        }
        if (v66 == (v183 & 1))
        {
LABEL_76:
          v18 = 0;
          v47 = v179;
          goto LABEL_83;
        }
LABEL_53:
        v61 += 40;
        if (!--v53)
          goto LABEL_54;
      }
      if (v51)
        goto LABEL_53;
      goto LABEL_50;
    }
    sub_1000A11AC();
    sub_10007F0CC();
    swift_retain(v18);
    sub_1000C13C0((uint64_t)&v186, v52 + 32, v53, (_QWORD *)(v18 + 16), v18 + 32, v54, v55, v56);
    v58 = v57;
    v19 = v59;
    sub_10001E098();
    if ((v58 & 1) == 0)
      goto LABEL_82;
LABEL_55:
    sub_1000A11AC();
    sub_10007F0CC();
    v69 = v47;
    if ((swift_isUniquelyReferenced_nonNull_native(v52) & 1) == 0)
    {
      sub_100011794(0, *(_QWORD *)(v52 + 16) + 1, 1);
      v52 = v190[0];
    }
    v71 = *(_QWORD *)(v52 + 16);
    v70 = *(_QWORD *)(v52 + 24);
    v72 = v71 + 1;
    if (v71 >= v70 >> 1)
    {
      sub_100011794((char *)(v70 > 1), v71 + 1, 1);
      v52 = v190[0];
    }
    *(_QWORD *)(v52 + 16) = v72;
    v73 = v52 + 40 * v71;
    v74 = v186;
    v75 = v187;
    *(_BYTE *)(v73 + 64) = v188;
    *(_OWORD *)(v73 + 32) = v74;
    *(_OWORD *)(v73 + 48) = v75;
    if (!v18)
    {
      v76 = 0;
      v77 = v71 > 0xE;
      v47 = v69;
      if (!v77)
        goto LABEL_82;
      goto LABEL_78;
    }
    sub_10002B2E0(v18 + 16, (uint64_t)&v185);
    if (static _HashTable.maximumCapacity(forScale:)(*(_QWORD *)(v18 + 16) & 0x3FLL) <= (uint64_t)v71)
    {
      v76 = *(_QWORD *)(v18 + 24) & 0x3FLL;
      if (v71 > 0xE)
      {
        v47 = v69;
      }
      else
      {
        v47 = v69;
        if (!v76)
        {
          sub_10001E098();
          v18 = 0;
          goto LABEL_82;
        }
      }
LABEL_78:
      v91 = static _HashTable.scale(forCapacity:)(v72);
      if (v76 <= v91)
        v92 = v91;
      else
        v92 = v76;
      sub_1000C1844(v52, v92, 0, v76);
      v94 = v93;
      sub_10001E098();
      v18 = v94;
      goto LABEL_82;
    }
    if ((((uint64_t (*)(uint64_t))swift_isUniquelyReferenced_native)(v18) & 1) != 0)
    {
      v47 = v69;
    }
    else
    {
      v78 = ((uint64_t (*)(uint64_t))_HashTable.copy())(v18);
      result = sub_10001E098();
      if (!v78)
      {
        __break(1u);
        return result;
      }
      v47 = v69;
      v18 = v78;
    }
    v80 = -1 << *(_QWORD *)(v18 + 16);
    v81 = v80 + 1;
    v82 = *(_QWORD *)(v52 + 16) + ~(*(uint64_t *)(v18 + 24) >> 6);
    v83 = v80 ^ ~(((v82 >> 63) & ~v80) + v82);
    v84 = (*(_QWORD *)(v18 + 16) & 0x3FLL) * v19;
    v85 = v84 >> 6;
    *(_QWORD *)(v18 + 32 + 8 * (v84 >> 6)) = (v83 << v84) | ((v81 << v84) - 1) & *(_QWORD *)(v18 + 32 + 8 * (v84 >> 6));
    v86 = 64 - (v84 & 0x3F);
    v87 = *(_QWORD *)(v18 + 16);
    if (v86 < (v87 & 0x3Fu))
      break;
LABEL_82:
    sub_10007CC98((uint64_t)&v189);
    swift_bridgeObjectRelease(v51);
LABEL_83:
    if (++v47 == v181)
    {
      sub_10001EBB0(v172);
      v45 = v173;
      swift_release(v173);
      v5 = v170;
      v12 = v167;
      v19 = v174;
      goto LABEL_86;
    }
  }
  v88 = (v87 & 0x3F) << (v87 & 0x3F);
  v24 = __OFADD__(v88, 64);
  v89 = v88 + 64;
  if (!v24)
  {
    if (v85 + 1 == (v89 - 1) / 64)
      v90 = 0;
    else
      v90 = v85 + 1;
    *(_QWORD *)(v18 + 32 + 8 * v90) = *(_QWORD *)(v18 + 32 + 8 * v90) & (-1 << (v87
                                                                                - v86)) | (v83 >> v86);
    goto LABEL_82;
  }
  __break(1u);
LABEL_133:
  __break(1u);
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  swift_once(&qword_1000FB150, sub_10009C924);
LABEL_127:
  v137 = sub_10001DD64();
  sub_1000A11CC(v137, (uint64_t)qword_1000FE498);
  v138 = sub_10001EBA8(v19);
  v139 = Logger.logObject.getter(v138);
  v140 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v139, v140))
  {
    v141 = sub_10001D8D4(22);
    v180 = sub_10001D8D4(64);
    v190[0] = v180;
    *(_DWORD *)v141 = 136315394;
    v142 = ((uint64_t (*)(uint64_t, _QWORD))_typeName(_:qualified:))(v163, 0);
    sub_1000102C0(v142, v143, v190);
    v184 = v144;
    sub_1000A105C();
    sub_10001E8A8();
    *(_WORD *)(v141 + 12) = 2080;
    v145 = swift_bridgeObjectRetain(v19);
    v146 = Set.description.getter(v145, &type metadata for String, &protocol witness table for String);
    v148 = v147;
    swift_bridgeObjectRelease(v19);
    sub_1000102C0(v146, v148, v190);
    v184 = v149;
    sub_1000A105C();
    sub_10002BA68(v19);
    swift_bridgeObjectRelease(v148);
    sub_10002B4A0((void *)&_mh_execute_header, v139, v140, "Session %s assets %s don't have a common inference provider", (uint8_t *)v141);
    v150 = v180;
    sub_1000A1034();
    sub_10001D790(v150);
    sub_10001D790(v141);

  }
  else
  {

    sub_10002BA68(v19);
  }
  v151 = v182;
  v152 = sub_10002B8A0();
  sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
  sub_10002B560(v152, v153);
  *v154 = v19;
  v155 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v152 - 8) + 104))(v154, enum case for ModelManagerError.noCommonInferenceProviderForAssets(_:), v152);
  swift_willThrow(v155, v156, v157, v158, v159, v160, v161, v162);
  sub_10001D930();
  sub_10001E098();
  swift_release(v183);
  swift_release(v151);
  return v19;
}

uint64_t sub_10009EA14(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = type metadata accessor for DaemonSession.LazyState(0);
  v5 = *(int *)(result + 28);
  if ((*(_BYTE *)(a1 + v5) & 1) == 0)
  {
    *(_BYTE *)(a1 + v5) = 1;
    v6 = a1 + *(int *)(result + 24);
    sub_1000A009C(v6);
    v7 = type metadata accessor for InferenceProviderDescriptor(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v6, a2, v7);
    return sub_100005630(v6, 0, 1, v7);
  }
  return result;
}

uint64_t sub_10009EAA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[10] = a3;
  v4[11] = a4;
  v4[9] = a2;
  return swift_task_switch(sub_10009EAC4, 0, 0);
}

uint64_t sub_10009EAC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v38;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(int *)(type metadata accessor for DaemonSession.ManagerOwnedState(0) + 24);
  *(_DWORD *)(v0 + 176) = v2;
  v3 = v1 + v2;
  v4 = sub_1000A1198();
  *(_QWORD *)(v0 + 96) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  *(_QWORD *)(v0 + 104) = v6;
  v6(v3, v4);
  v7 = enum case for DaemonSessionState.cancellationInProgress(_:);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 104);
  *(_QWORD *)(v0 + 112) = v8;
  v8(v3, v7, v4);
  v9 = *(_QWORD *)(v1 + 8);
  if ((v9 & 0xC000000000000001) != 0)
  {
    if (v9 < 0)
      v10 = *(_QWORD *)(v1 + 8);
    else
      v10 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v9);
    v11 = __CocoaSet.makeIterator()(v10);
    v12 = type metadata accessor for DaemonRequest(0);
    sub_100006710(&qword_1000FB8C0, type metadata accessor for DaemonRequest);
    Set.Iterator.init(_cocoa:)(v11, v12, v13);
    result = *(_QWORD *)(v0 + 16);
    v15 = *(_QWORD *)(v0 + 24);
    v17 = *(_QWORD *)(v0 + 32);
    v16 = *(_QWORD *)(v0 + 40);
    v18 = *(_QWORD *)(v0 + 48);
  }
  else
  {
    v19 = -1 << *(_BYTE *)(v9 + 32);
    v15 = v9 + 56;
    v17 = ~v19;
    v20 = -v19;
    if (v20 < 64)
      v21 = ~(-1 << v20);
    else
      v21 = -1;
    v18 = v21 & *(_QWORD *)(v9 + 56);
    result = swift_bridgeObjectRetain(v9);
    v16 = 0;
  }
  *(_QWORD *)(v0 + 128) = v15;
  *(_QWORD *)(v0 + 136) = v17;
  *(_QWORD *)(v0 + 120) = result;
  if (result < 0)
  {
    v25 = result & 0x7FFFFFFFFFFFFFFFLL;
    v26 = __CocoaSet.Iterator.next()(result);
    if (v26)
    {
      sub_1000A0FE4(v26);
      sub_1000A11C0();
      sub_1000A0FCC((uint64_t)&type metadata for Swift.AnyObject);
      sub_1000A11A0();
      v24 = v16;
      v22 = v18;
LABEL_16:
      *(_QWORD *)(v0 + 152) = v24;
      *(_QWORD *)(v0 + 160) = v22;
      *(_QWORD *)(v0 + 144) = v25;
      if (v25)
      {
        v27 = (_QWORD *)swift_task_alloc(dword_1000FFA44);
        *(_QWORD *)(v0 + 168) = v27;
        v28 = sub_1000A1184(v27, (uint64_t)sub_10009ED48);
        return sub_1000A0F74(v28, v29);
      }
      goto LABEL_32;
    }
    goto LABEL_32;
  }
  if (v18)
  {
    v22 = (v18 - 1) & v18;
    v23 = __clz(__rbit64(v18)) | (v16 << 6);
    v24 = v16;
LABEL_13:
    v25 = *(_QWORD *)(*(_QWORD *)(result + 48) + 8 * v23);
    sub_10001E194();
    goto LABEL_16;
  }
  v30 = v16 + 1;
  if (!__OFADD__(v16, 1))
  {
    v31 = v17 + 64;
    if (v30 < (uint64_t)((unint64_t)(v17 + 64) >> 6))
    {
      v24 = v16 + 1;
      if (*(_QWORD *)(v15 + 8 * v30))
      {
LABEL_21:
        sub_10001E70C();
        v22 = v33 & v32;
        v23 = v34 + (v24 << 6);
        goto LABEL_13;
      }
      v35 = v31 >> 6;
      v24 = v16 + 2;
      if (v16 + 2 < v35)
      {
        if (*(_QWORD *)(v15 + 8 * v24))
          goto LABEL_21;
        v24 = v16 + 3;
        if (v16 + 3 < v35)
        {
          if (*(_QWORD *)(v15 + 8 * v24))
            goto LABEL_21;
          v24 = v16 + 4;
          if (v16 + 4 < v35)
          {
            if (*(_QWORD *)(v15 + 8 * v24))
              goto LABEL_21;
            v36 = v16 + 5;
            while (v36 < v35)
            {
              if (*(_QWORD *)(v15 + 8 * v36++))
              {
                v24 = v36 - 1;
                goto LABEL_21;
              }
            }
          }
        }
      }
    }
LABEL_32:
    v38 = sub_1000A0EE4();
    sub_1000A1178(v38, enum case for DaemonSessionState.cancelled(_:));
    return sub_1000A0F88(*(uint64_t (**)(void))(v0 + 8));
  }
  __break(1u);
  return result;
}

uint64_t sub_10009ED48()
{
  uint64_t v0;

  sub_10001D680(*(_QWORD *)(*(_QWORD *)v0 + 168));
  return sub_10001D674();
}

void sub_10009ED88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;

  swift_release(*(_QWORD *)(v0 + 144));
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 120);
  if (v4 < 0)
  {
    v8 = v4 & 0x7FFFFFFFFFFFFFFFLL;
    v9 = __CocoaSet.Iterator.next()(v1);
    if (v9)
    {
      sub_1000A0FE4(v9);
      sub_1000A11C0();
      sub_1000A0FCC((uint64_t)&type metadata for Swift.AnyObject);
      sub_1000A11A0();
      v7 = v2;
      v5 = v3;
LABEL_7:
      *(_QWORD *)(v0 + 152) = v7;
      *(_QWORD *)(v0 + 160) = v5;
      *(_QWORD *)(v0 + 144) = v8;
      if (v8)
      {
        v10 = (_QWORD *)swift_task_alloc(dword_1000FFA44);
        *(_QWORD *)(v0 + 168) = v10;
        v11 = sub_1000A1184(v10, (uint64_t)sub_10009ED48);
        sub_1000A0F74(v11, v12);
        return;
      }
      goto LABEL_23;
    }
    goto LABEL_23;
  }
  if (v3)
  {
    v5 = (v3 - 1) & v3;
    v6 = __clz(__rbit64(v3)) | (v2 << 6);
    v7 = *(_QWORD *)(v0 + 152);
LABEL_4:
    v8 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v6);
    sub_10001E194();
    goto LABEL_7;
  }
  v13 = v2 + 1;
  if (!__OFADD__(v2, 1))
  {
    v14 = *(_QWORD *)(v0 + 136) + 64;
    if (v13 < (uint64_t)(v14 >> 6))
    {
      v15 = *(_QWORD *)(v0 + 128);
      v16 = *(_QWORD *)(v15 + 8 * v13);
      v7 = v2 + 1;
      if (v16)
      {
LABEL_12:
        v5 = (v16 - 1) & v16;
        v6 = __clz(__rbit64(v16)) + (v7 << 6);
        goto LABEL_4;
      }
      v17 = v14 >> 6;
      v7 = v2 + 2;
      if (v2 + 2 < v17)
      {
        v16 = *(_QWORD *)(v15 + 8 * v7);
        if (v16)
          goto LABEL_12;
        v7 = v2 + 3;
        if (v2 + 3 < v17)
        {
          v16 = *(_QWORD *)(v15 + 8 * v7);
          if (v16)
            goto LABEL_12;
          v7 = v2 + 4;
          if (v2 + 4 < v17)
          {
            v16 = *(_QWORD *)(v15 + 8 * v7);
            if (v16)
              goto LABEL_12;
            v18 = v2 + 5;
            while (v18 < v17)
            {
              v16 = *(_QWORD *)(v15 + 8 * v18++);
              if (v16)
              {
                v7 = v18 - 1;
                goto LABEL_12;
              }
            }
          }
        }
      }
    }
LABEL_23:
    v19 = sub_1000A0EE4();
    sub_1000A1178(v19, enum case for DaemonSessionState.cancelled(_:));
    sub_1000A0F88(*(uint64_t (**)(void))(v0 + 8));
    return;
  }
  __break(1u);
}

uint64_t sub_10009EF1C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_id;
  v4 = type metadata accessor for OneShotRequest(0);
  return static UUIDIdentifier.== infix(_:_:)(v3, a2, v4) & 1;
}

void sub_10009EF80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  v1 = type metadata accessor for AuditToken(0);
  sub_10001DD50(v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_loggingIdentifier + 8));
  v2 = sub_100002F78(&qword_1000FB2D8);
  sub_10001DD50(v2);
  sub_10000650C((_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_modelCatalog));
  swift_release();
  sub_10002ACC4(v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState, type metadata accessor for DaemonSession.ManagerOwnedState);
  swift_release();
  sub_100006C14();
}

uint64_t sub_10009F038()
{
  uint64_t v0;

  sub_10009EF80();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for DaemonSession(uint64_t a1)
{
  return sub_100042760(a1, (uint64_t *)&unk_1000FE4D8, (uint64_t)&nominal type descriptor for DaemonSession);
}

void sub_10009F070(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[13];

  v8[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v8[1] = &unk_1000CC9B0;
  v8[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v8[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v2 = type metadata accessor for AuditToken(319);
  if (v3 <= 0x3F)
  {
    v8[4] = *(_QWORD *)(v2 - 8) + 64;
    v8[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v8[6] = &unk_1000CC9C8;
    v8[7] = &unk_1000CC9B0;
    sub_10009F164(319);
    if (v5 <= 0x3F)
    {
      v8[8] = *(_QWORD *)(v4 - 8) + 64;
      v8[9] = &unk_1000CC9E0;
      v8[10] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6 = type metadata accessor for DaemonSession.ManagerOwnedState(319);
      if (v7 <= 0x3F)
      {
        v8[11] = *(_QWORD *)(v6 - 8) + 64;
        v8[12] = (char *)&value witness table for Builtin.NativeObject + 64;
        swift_updateClassMetadata2(a1, 256, 13, v8, a1 + 80);
      }
    }
  }
}

void sub_10009F164(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000FE4E8)
  {
    v2 = type metadata accessor for Session(255);
    v3 = type metadata accessor for UUIDIdentifier(a1, v2, &protocol witness table for Session);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000FE4E8);
  }
}

uint64_t type metadata accessor for DaemonSession.ManagerOwnedState(uint64_t a1)
{
  return sub_100042760(a1, qword_1000FE6C0, (uint64_t)&nominal type descriptor for DaemonSession.ManagerOwnedState);
}

_QWORD *sub_10009F1D4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[2];
    a1[2] = v8;
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for InferenceProviderDescriptor(0);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    if (sub_100005700((uint64_t)v11, 1, v12))
    {
      v13 = sub_100002F78(&qword_1000FBEA8);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
      sub_100005630((uint64_t)v10, 0, 1, v12);
    }
    *((_BYTE *)v4 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  }
  return v4;
}

uint64_t sub_10009F2E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for InferenceProviderDescriptor(0);
  result = sub_100005700(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return result;
}

_QWORD *sub_10009F35C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[2];
  a1[2] = v7;
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for InferenceProviderDescriptor(0);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (sub_100005700((uint64_t)v10, 1, v11))
  {
    v12 = sub_100002F78(&qword_1000FBEA8);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    sub_100005630((uint64_t)v9, 0, 1, v11);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  return a1;
}

_QWORD *sub_10009F444(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a1[2];
  v9 = a2[2];
  a1[2] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for InferenceProviderDescriptor(0);
  v14 = sub_100005700((uint64_t)v11, 1, v13);
  v15 = sub_100005700((uint64_t)v12, 1, v13);
  if (!v14)
  {
    v16 = *(_QWORD *)(v13 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v17 = sub_100002F78(&qword_1000FBEA8);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  sub_100005630((uint64_t)v11, 0, 1, v13);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_10009F58C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 24);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for InferenceProviderDescriptor(0);
  if (sub_100005700((uint64_t)v8, 1, v9))
  {
    v10 = sub_100002F78(&qword_1000FBEA8);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    sub_100005630((uint64_t)v7, 0, 1, v9);
  }
  *(_BYTE *)(a1 + *(int *)(a3 + 28)) = *(_BYTE *)(a2 + *(int *)(a3 + 28));
  return a1;
}

_QWORD *sub_10009F65C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v8);
  v9 = *(int *)(a3 + 24);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for InferenceProviderDescriptor(0);
  v13 = sub_100005700((uint64_t)v10, 1, v12);
  v14 = sub_100005700((uint64_t)v11, 1, v12);
  if (!v13)
  {
    v15 = *(_QWORD *)(v12 - 8);
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v16 = sub_100002F78(&qword_1000FBEA8);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  sub_100005630((uint64_t)v10, 0, 1, v12);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_10009F78C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009F798);
}

void sub_10009F798(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2 == 2147483646)
  {
    sub_1000A1200();
    sub_100049140();
  }
  else
  {
    sub_100002F78(&qword_1000FBEA8);
    v2 = sub_1000A11EC();
    sub_10004A8BC(v2, v3, v4);
  }
}

uint64_t sub_10009F7F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009F800);
}

void sub_10009F800(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a3 == 2147483646)
  {
    *(_QWORD *)(a1 + 8) = a2;
    sub_100049140();
  }
  else
  {
    sub_100002F78(&qword_1000FBEA8);
    v3 = sub_1000A108C();
    sub_10001DBAC(v3, v4, v5, v6);
  }
}

uint64_t type metadata accessor for DaemonSession.LazyState(uint64_t a1)
{
  return sub_100042760(a1, (uint64_t *)&unk_1000FE620, (uint64_t)&nominal type descriptor for DaemonSession.LazyState);
}

void sub_10009F864(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1000CCA08;
  v4[1] = &unk_1000CCA20;
  sub_10009F8E8(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_1000CC9C8;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

void sub_10009F8E8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000FE630)
  {
    v2 = type metadata accessor for InferenceProviderDescriptor(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000FE630);
  }
}

uint64_t *sub_10009F93C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = a2[1];
    a1[1] = v5;
    v6 = *(int *)(a3 + 24);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for DaemonSessionState(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_10009F9E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for DaemonSessionState(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_10009FA28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for DaemonSessionState(0);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

uint64_t sub_10009FAA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for DaemonSessionState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

uint64_t sub_10009FB1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for DaemonSessionState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_10009FB80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v6);
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for DaemonSessionState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_10009FBF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009FC00);
}

void sub_10009FC00(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2 == 0x7FFFFFFF)
  {
    sub_1000A1200();
    sub_100049140();
  }
  else
  {
    sub_1000A1198();
    v2 = sub_1000A11EC();
    sub_10004A8BC(v2, v3, v4);
  }
}

uint64_t sub_10009FC48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009FC54);
}

void sub_10009FC54(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(a1 + 8) = (a2 - 1);
    sub_100049140();
  }
  else
  {
    sub_1000A1198();
    v3 = sub_1000A108C();
    sub_10001DBAC(v3, v4, v5, v6);
  }
}

uint64_t sub_10009FC9C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1000CC9C8;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for DaemonSessionState(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_10009FD1C()
{
  sub_100006710(&qword_1000FBEE8, (uint64_t (*)(uint64_t))type metadata accessor for SessionManager);
}

uint64_t sub_10009FD48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for Session(0);
  v0 = sub_10001EBDC();
  return static UUIDIdentifier.== infix(_:_:)(v0, v1, v2);
}

void sub_10009FD88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100002F78(&qword_1000FB2D8);
  sub_1000A001C(&qword_1000FB2E0);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  sub_100049140();
}

void sub_10009FDE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10004A934(a1);
  sub_100002F78(&qword_1000FB2D8);
  sub_1000A001C(&qword_1000FB2E0);
  sub_1000A10F0(v1, v2);
  sub_10001DBF4();
  sub_1000449BC();
}

void sub_10009FE38(uint64_t a1)
{
  sub_10009FDE4(a1);
}

void sub_10009FE58(uint64_t a1)
{
  sub_10009FD88(a1);
}

void sub_10009FE78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  sub_100002F78(&qword_1000FB2D8);
  sub_1000A001C(&qword_1000FB2E0);
  sub_1000A10F0(v1, v2);
  sub_10001DBF4();
  sub_1000449BC();
}

uint64_t sub_10009FED4()
{
  return sub_10009FD48() & 1;
}

uint64_t sub_10009FEF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  void *object;
  Swift::String v5;
  uint64_t v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;

  v1 = sub_100002F78(&qword_1000FB2D8);
  sub_1000A001C(&qword_1000FBE80);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v1, v2);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._countAndFlagsBits = 58;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_loggingIdentifier);
  v7 = *(void **)(v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_loggingIdentifier + 8);
  swift_bridgeObjectRetain(v7);
  v8._countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v7);
  v9._countAndFlagsBits = 41;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  return 40;
}

uint64_t sub_10009FFD0()
{
  return sub_10009FEF4();
}

void sub_10009FFF0()
{
  sub_100006710(&qword_1000FE738, type metadata accessor for DaemonSession);
}

void sub_1000A001C(unint64_t *a1)
{
  uint64_t v2;

  if (!*a1)
  {
    v2 = sub_1000056BC(&qword_1000FB2D8);
    atomic_store(sub_100006C50(v2), a1);
  }
  sub_100006C14();
}

uint64_t sub_1000A0054(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100002F78(&qword_1000FBEA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A009C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100002F78(&qword_1000FBEA8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1000A00DC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_1000C2370(v2);
    v2 = v3;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  sub_1000A0144(v5);
  *a1 = v2;
}

void sub_1000A0144(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  char *v7;
  Swift::Int v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v17;
  Swift::Int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  Swift::Int v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  char v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  Swift::Int v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  Swift::Int v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        sub_1000A07A8(0, v3, 1, a1);
      return;
    }
LABEL_145:
    __break(1u);
    goto LABEL_146;
  }
  v5 = v4;
  sub_100002E94(v3 / 2);
  v104 = v6;
  v105 = v3;
  v106 = v7;
  v102 = a1;
  if (v3 > 0)
  {
    v103 = v5;
    v8 = 0;
    v9 = *a1;
    v101 = *a1 + 8;
    v107 = (char *)_swiftEmptyArrayStorage;
    while (1)
    {
      v10 = v8++;
      if (v8 >= v3)
        goto LABEL_32;
      v11 = (uint64_t *)(v9 + 16 * v8);
      v12 = *v11;
      v13 = v11[1];
      v14 = (_QWORD *)(v9 + 16 * v10);
      v15 = v14[1];
      if (v12 == *v14 && v13 == v15)
        break;
      v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, *v14, v15, 1);
      v18 = v10 + 2;
      if (v10 + 2 < v3)
        goto LABEL_13;
LABEL_23:
      v8 = v18;
      if ((v17 & 1) == 0)
        goto LABEL_32;
LABEL_24:
      if (v18 < v10)
        goto LABEL_149;
      if (v10 < v18)
      {
        v26 = 16 * v18;
        v27 = 16 * v10;
        v28 = v18;
        v29 = v10;
        do
        {
          if (v29 != --v28)
          {
            if (!v9)
              goto LABEL_153;
            v30 = v9 + v26;
            v31 = *(_QWORD *)(v9 + v27);
            v32 = *(_QWORD *)(v9 + v27 + 8);
            *(_OWORD *)(v9 + v27) = *(_OWORD *)(v9 + v26 - 16);
            *(_QWORD *)(v30 - 16) = v31;
            *(_QWORD *)(v30 - 8) = v32;
          }
          ++v29;
          v26 -= 16;
          v27 += 16;
        }
        while (v29 < v28);
      }
LABEL_31:
      v8 = v18;
LABEL_32:
      if (v8 >= v3)
        goto LABEL_41;
      if (__OFSUB__(v8, v10))
        goto LABEL_144;
      if (v8 - v10 >= v103)
        goto LABEL_41;
      if (__OFADD__(v10, v103))
        goto LABEL_147;
      if (v10 + v103 >= v3)
        v33 = v3;
      else
        v33 = v10 + v103;
      if (v33 < v10)
      {
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
        return;
      }
      if (v8 == v33)
      {
LABEL_41:
        v34 = v107;
      }
      else
      {
        v85 = (_QWORD *)(v9 + 16 * v8);
        v34 = v107;
        do
        {
          v86 = (uint64_t *)(v9 + 16 * v8);
          v87 = *v86;
          v88 = v86[1];
          v89 = v10;
          v90 = v85;
          do
          {
            v91 = *(v90 - 2);
            v92 = *(v90 - 1);
            v93 = v87 == v91 && v88 == v92;
            if (v93 || (_stringCompareWithSmolCheck(_:_:expecting:)(v87, v88, v91, v92, 1) & 1) == 0)
              break;
            if (!v9)
              goto LABEL_151;
            v87 = *v90;
            v88 = v90[1];
            *(_OWORD *)v90 = *((_OWORD *)v90 - 1);
            *(v90 - 1) = v88;
            *(v90 - 2) = v87;
            v90 -= 2;
            ++v89;
          }
          while (v8 != v89);
          ++v8;
          v85 += 2;
        }
        while (v8 != v33);
        v8 = v33;
      }
      if (v8 < v10)
        goto LABEL_143;
      if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0)
        v34 = sub_100078F64(0, *((_QWORD *)v34 + 2) + 1, 1, v34);
      v36 = *((_QWORD *)v34 + 2);
      v35 = *((_QWORD *)v34 + 3);
      v37 = v36 + 1;
      if (v36 >= v35 >> 1)
        v34 = sub_100078F64((char *)(v35 > 1), v36 + 1, 1, v34);
      *((_QWORD *)v34 + 2) = v37;
      v38 = v34 + 32;
      v39 = &v34[16 * v36 + 32];
      *(_QWORD *)v39 = v10;
      *((_QWORD *)v39 + 1) = v8;
      v107 = v34;
      if (v36)
      {
        while (1)
        {
          v40 = v37 - 1;
          if (v37 >= 4)
          {
            v45 = &v38[16 * v37];
            v46 = *((_QWORD *)v45 - 8);
            v47 = *((_QWORD *)v45 - 7);
            v51 = __OFSUB__(v47, v46);
            v48 = v47 - v46;
            if (v51)
              goto LABEL_128;
            v50 = *((_QWORD *)v45 - 6);
            v49 = *((_QWORD *)v45 - 5);
            v51 = __OFSUB__(v49, v50);
            v43 = v49 - v50;
            v44 = v51;
            if (v51)
              goto LABEL_129;
            v52 = v37 - 2;
            v53 = &v38[16 * v37 - 32];
            v55 = *(_QWORD *)v53;
            v54 = *((_QWORD *)v53 + 1);
            v51 = __OFSUB__(v54, v55);
            v56 = v54 - v55;
            if (v51)
              goto LABEL_130;
            v51 = __OFADD__(v43, v56);
            v57 = v43 + v56;
            if (v51)
              goto LABEL_132;
            if (v57 >= v48)
            {
              v75 = &v38[16 * v40];
              v77 = *(_QWORD *)v75;
              v76 = *((_QWORD *)v75 + 1);
              v51 = __OFSUB__(v76, v77);
              v78 = v76 - v77;
              if (v51)
                goto LABEL_138;
              v68 = v43 < v78;
              goto LABEL_79;
            }
          }
          else
          {
            if (v37 != 3)
            {
              v69 = *((_QWORD *)v34 + 4);
              v70 = *((_QWORD *)v34 + 5);
              v51 = __OFSUB__(v70, v69);
              v62 = v70 - v69;
              v63 = v51;
              goto LABEL_73;
            }
            v42 = *((_QWORD *)v34 + 4);
            v41 = *((_QWORD *)v34 + 5);
            v51 = __OFSUB__(v41, v42);
            v43 = v41 - v42;
            v44 = v51;
          }
          if ((v44 & 1) != 0)
            goto LABEL_131;
          v52 = v37 - 2;
          v58 = &v38[16 * v37 - 32];
          v60 = *(_QWORD *)v58;
          v59 = *((_QWORD *)v58 + 1);
          v61 = __OFSUB__(v59, v60);
          v62 = v59 - v60;
          v63 = v61;
          if (v61)
            goto LABEL_133;
          v64 = &v38[16 * v40];
          v66 = *(_QWORD *)v64;
          v65 = *((_QWORD *)v64 + 1);
          v51 = __OFSUB__(v65, v66);
          v67 = v65 - v66;
          if (v51)
            goto LABEL_135;
          if (__OFADD__(v62, v67))
            goto LABEL_137;
          if (v62 + v67 >= v43)
          {
            v68 = v43 < v67;
LABEL_79:
            if (v68)
              v40 = v52;
            goto LABEL_81;
          }
LABEL_73:
          if ((v63 & 1) != 0)
            goto LABEL_134;
          v71 = &v38[16 * v40];
          v73 = *(_QWORD *)v71;
          v72 = *((_QWORD *)v71 + 1);
          v51 = __OFSUB__(v72, v73);
          v74 = v72 - v73;
          if (v51)
            goto LABEL_136;
          if (v74 < v62)
            goto LABEL_90;
LABEL_81:
          v79 = v40 - 1;
          if (v40 - 1 >= v37)
          {
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
            goto LABEL_139;
          }
          if (!v9)
            goto LABEL_152;
          v80 = &v38[16 * v79];
          v81 = *(_QWORD *)v80;
          v82 = &v38[16 * v40];
          v83 = *((_QWORD *)v82 + 1);
          sub_1000A086C((char *)(v9 + 16 * *(_QWORD *)v80), (char *)(v9 + 16 * *(_QWORD *)v82), v9 + 16 * v83, v106);
          if (v1)
          {
            v94 = v107;
LABEL_107:
            swift_bridgeObjectRelease(v94);
            if (v105 >= -1)
            {
              *(_QWORD *)(v104 + 16) = 0;
              swift_bridgeObjectRelease(v104);
              return;
            }
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
            goto LABEL_148;
          }
          if (v83 < v81)
            goto LABEL_125;
          if (v40 > *((_QWORD *)v107 + 2))
            goto LABEL_126;
          *(_QWORD *)v80 = v81;
          *(_QWORD *)&v38[16 * v79 + 8] = v83;
          v84 = *((_QWORD *)v107 + 2);
          if (v40 >= v84)
            goto LABEL_127;
          v34 = v107;
          v37 = v84 - 1;
          memmove(&v38[16 * v40], v82 + 16, 16 * (v84 - 1 - v40));
          *((_QWORD *)v107 + 2) = v84 - 1;
          if (v84 <= 2)
            goto LABEL_90;
        }
      }
      v37 = 1;
LABEL_90:
      v3 = v105;
      if (v8 >= v105)
        goto LABEL_111;
    }
    v18 = v10 + 2;
    if (v10 + 2 >= v3)
      goto LABEL_31;
    v17 = 0;
LABEL_13:
    v19 = (uint64_t *)(v101 + 16 * v18);
    do
    {
      v20 = *(v19 - 1);
      v21 = *v19;
      v22 = (_QWORD *)(v9 + 16 * v8);
      v23 = v22[1];
      if (v20 == *v22 && v21 == v23)
      {
        if ((v17 & 1) != 0)
          goto LABEL_24;
      }
      else if (((v17 ^ _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, *v22, v23, 1)) & 1) != 0)
      {
        goto LABEL_23;
      }
      v19 += 2;
      v25 = v18 + 1;
      v8 = v18;
      v18 = v25;
    }
    while (v25 < v3);
    v18 = v25;
    goto LABEL_23;
  }
  v107 = (char *)_swiftEmptyArrayStorage;
  v37 = _swiftEmptyArrayStorage[2];
LABEL_111:
  if (v37 >= 2)
  {
    v95 = *v102;
    while (1)
    {
      v96 = v37 - 2;
      if (v37 < 2)
        break;
      if (!v95)
        goto LABEL_154;
      v94 = v107;
      v97 = *(_QWORD *)&v107[16 * v96 + 32];
      v98 = *(_QWORD *)&v107[16 * v37 + 24];
      sub_1000A086C((char *)(v95 + 16 * v97), (char *)(v95 + 16 * *(_QWORD *)&v107[16 * v37 + 16]), v95 + 16 * v98, v106);
      if (v1)
        goto LABEL_107;
      if (v98 < v97)
        goto LABEL_140;
      if ((swift_isUniquelyReferenced_nonNull_native(v107) & 1) == 0)
        v94 = sub_100079050((uint64_t)v107);
      if (v96 >= *((_QWORD *)v94 + 2))
        goto LABEL_141;
      v99 = &v94[16 * v96 + 32];
      *(_QWORD *)v99 = v97;
      *((_QWORD *)v99 + 1) = v98;
      v100 = *((_QWORD *)v94 + 2);
      if (v37 > v100)
        goto LABEL_142;
      memmove(&v94[16 * v37 + 16], &v94[16 * v37 + 32], 16 * (v100 - v37));
      v107 = v94;
      *((_QWORD *)v94 + 2) = v100 - 1;
      v37 = v100 - 1;
      v3 = v105;
      if (v100 <= 2)
        goto LABEL_122;
    }
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
    goto LABEL_145;
  }
LABEL_122:
  swift_bridgeObjectRelease(v107);
  if (v3 < -1)
    goto LABEL_150;
  *(_QWORD *)(v104 + 16) = 0;
  swift_bridgeObjectRelease(v104);
}

uint64_t sub_1000A07A8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
    while (2)
    {
      v9 = (uint64_t *)(v7 + 16 * v4);
      result = *v9;
      v10 = v9[1];
      v11 = v6;
      v12 = (uint64_t *)v8;
      do
      {
        v13 = *(v12 - 2);
        v14 = *(v12 - 1);
        if (result == v13 && v10 == v14)
          break;
        result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v10, v13, v14, 1);
        if ((result & 1) == 0)
          break;
        if (!v7)
        {
          __break(1u);
          return result;
        }
        result = *v12;
        v10 = v12[1];
        *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
        *(v12 - 1) = v10;
        *(v12 - 2) = result;
        v12 -= 2;
        ++v11;
      }
      while (v4 != v11);
      ++v4;
      v8 += 16;
      if (v4 != a2)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_1000A086C(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char *v17;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 16;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 16;
  if (v9 >= v11)
  {
    sub_10000FB30(a2, (uint64_t)(a3 - (_QWORD)a2) / 16, a4);
    v12 = &v4[16 * v11];
    if (v7 >= v6 || v10 < 16)
      goto LABEL_47;
    v20 = (char *)(a3 - 16);
    while (1)
    {
      v21 = v20 + 16;
      v22 = *((_QWORD *)v12 - 2);
      v23 = *((_QWORD *)v12 - 1);
      v24 = v12 - 16;
      v25 = *((_QWORD *)v6 - 2);
      v26 = *((_QWORD *)v6 - 1);
      v27 = v22 == v25 && v23 == v26;
      if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v25, v26, 1) & 1) == 0)
      {
        v29 = v21 != v12 || v20 >= v12;
        v12 -= 16;
        if (!v29)
          goto LABEL_43;
      }
      else
      {
        v28 = v21 != v6 || v20 >= v6;
        v24 = v6 - 16;
        v6 -= 16;
        if (!v28)
          goto LABEL_43;
      }
      *(_OWORD *)v20 = *(_OWORD *)v24;
LABEL_43:
      v20 -= 16;
      if (v6 <= v7 || v12 <= v4)
        goto LABEL_47;
    }
  }
  sub_10000FB30(a1, (a2 - a1) / 16, a4);
  v12 = &v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      v14 = *((_QWORD *)v6 + 1);
      v15 = *((_QWORD *)v4 + 1);
      v16 = *(_QWORD *)v6 == *(_QWORD *)v4 && v14 == v15;
      if (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v6, v14, *(_QWORD *)v4, v15, 1) & 1) != 0)
        break;
      v17 = v4;
      v16 = v7 == v4;
      v4 += 16;
      if (!v16)
        goto LABEL_15;
LABEL_16:
      v7 += 16;
      if (v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_21;
    }
    v17 = v6;
    v16 = v7 == v6;
    v6 += 16;
    if (v16)
      goto LABEL_16;
LABEL_15:
    *(_OWORD *)v7 = *(_OWORD *)v17;
    goto LABEL_16;
  }
LABEL_21:
  v6 = v7;
LABEL_47:
  sub_10000FB30(v4, (v12 - v4) / 16, v6);
  return 1;
}

uint64_t sub_1000A0A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned __int8 *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  char v43;

  v4 = a4;
  v38 = *(_QWORD *)(a4 + 16);
  if (v38)
  {
    v6 = a2;
    v7 = a1;
    v33 = a2 + 32;
    v34 = a4 + 32;
    v31 = a1 + 32;
    v32 = (_QWORD *)(a1 + 16);
    swift_retain(a3);
    result = swift_retain(v4);
    v9 = 0;
    v30 = (unsigned __int8 *)(v6 + 64);
    v35 = v7;
    v36 = v6;
    v37 = v4;
    while (v9 < *(_QWORD *)(v4 + 16))
    {
      v10 = (uint64_t *)(v34 + 40 * v9);
      v11 = *v10;
      v12 = v10[1];
      v13 = v10[2];
      v14 = v10[3];
      v15 = *((unsigned __int8 *)v10 + 32);
      v16 = *(_QWORD *)(v6 + 16);
      *(_QWORD *)&v40 = v11;
      *((_QWORD *)&v40 + 1) = v12;
      v41 = v13;
      v42 = v14;
      v43 = v15;
      if (v7)
      {
        swift_bridgeObjectRetain(v14);
        swift_bridgeObjectRetain(v12);
        swift_retain(v7);
        sub_1000C13C0((uint64_t)&v40, v33, v16, v32, v31, v17, v18, v19);
        v21 = v20;
        swift_release(v7);
        if ((v21 & 1) == 0)
          goto LABEL_29;
        goto LABEL_30;
      }
      v39 = v15;
      if (v16)
      {
        v22 = v30;
        while (1)
        {
          result = *((_QWORD *)v22 - 4);
          v23 = *((_QWORD *)v22 - 3);
          v25 = *((_QWORD *)v22 - 2);
          v24 = *((_QWORD *)v22 - 1);
          v26 = *v22;
          if (result != v11 || v23 != v12)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v23, v11, v12, 0);
            if ((result & 1) == 0)
              goto LABEL_26;
          }
          if (!v24)
            break;
          if (!v14)
            goto LABEL_26;
          if (v25 != v13 || v24 != v14)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v24, v13, v14, 0);
            if ((result & 1) == 0)
              goto LABEL_26;
LABEL_23:
            if (((v39 ^ v26) & 1) == 0)
              goto LABEL_28;
            goto LABEL_26;
          }
          if (v39 == v26)
          {
LABEL_28:
            swift_bridgeObjectRetain(v12);
            swift_bridgeObjectRetain(v14);
LABEL_29:
            sub_10007A9B0(&v40);
LABEL_30:
            swift_bridgeObjectRelease(v14);
            result = swift_bridgeObjectRelease(v12);
            goto LABEL_31;
          }
LABEL_26:
          v22 += 40;
          if (!--v16)
            goto LABEL_31;
        }
        if (v14)
          goto LABEL_26;
        goto LABEL_23;
      }
LABEL_31:
      ++v9;
      v4 = v37;
      v7 = v35;
      v6 = v36;
      if (v9 == v38)
      {
        swift_release_n(v37, 2);
        swift_release_n(a3, 2);
        return 0;
      }
    }
    __break(1u);
  }
  else
  {
    swift_release(a4);
    swift_release(a3);
    return 0;
  }
  return result;
}

void sub_1000A0C4C(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  uint64_t v3;
  void (*v4)(uint64_t);

  a3(0);
  v3 = sub_10001EBDC();
  v4(v3);
  sub_100006C14();
}

uint64_t sub_1000A0C88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = sub_10009CF98(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t sub_1000A0CB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;

  result = sub_10009CFC4(a1, a2);
  if (!v3)
  {
    *a3 = result;
    a3[1] = v6;
  }
  return result;
}

uint64_t sub_1000A0CD8(_QWORD *a1)
{
  uint64_t v1;

  return sub_10009EF1C(a1, *(_QWORD *)(v1 + 16)) & 1;
}

unint64_t sub_1000A0CF4()
{
  unint64_t result;

  result = qword_1000FE748;
  if (!qword_1000FE748)
  {
    result = swift_getWitnessTable(&unk_1000CCBE4, &type metadata for DaemonSessionInternalError);
    atomic_store(result, &qword_1000FE748);
  }
  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for ProcessPriority(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for DaemonSessionInternalError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 1) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v5 = v6 - 2;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DaemonSessionInternalError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000A0E10 + 4 * byte_1000CC965[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000A0E44 + 4 * asc_1000CC960[v4]))();
}

uint64_t sub_1000A0E44(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A0E4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A0E54);
  return result;
}

uint64_t sub_1000A0E60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A0E68);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000A0E6C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A0E74(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A0E80(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1000A0E88(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for DaemonSessionInternalError()
{
  return &type metadata for DaemonSessionInternalError;
}

unint64_t sub_1000A0EA8()
{
  unint64_t result;

  result = qword_1000FE760;
  if (!qword_1000FE760)
  {
    result = swift_getWitnessTable(&unk_1000CCB7C, &type metadata for DaemonSessionInternalError);
    atomic_store(result, (unint64_t *)&qword_1000FE760);
  }
  return result;
}

uint64_t sub_1000A0EE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 104);
  v3 = *(_QWORD *)(v0 + 72) + *(int *)(v0 + 176);
  sub_10001CD34(*(_QWORD *)(v0 + 120));
  return v2(v3, v1);
}

uint64_t sub_1000A0F74(uint64_t a1, uint64_t a2)
{
  return sub_1000C6594(a1, a2);
}

uint64_t sub_1000A0F88(uint64_t (*a1)(void))
{
  return a1();
}

void sub_1000A0FAC(char a1, uint64_t a2)
{
  sub_100011720(a1, a2, 1);
}

uint64_t sub_1000A0FB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_1000A0FCC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return swift_dynamicCast(v1, v2, a1 + 8, v3, 7);
}

uint64_t sub_1000A0FE4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = a1;
  return type metadata accessor for DaemonRequest(0);
}

void sub_1000A0FFC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  sub_1000102C0(a1, a2, (uint64_t *)(v2 - 72));
}

uint64_t sub_1000A1008()
{
  uint64_t v0;

  return swift_retain_n(v0, 2);
}

uint64_t sub_1000A1014()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 - 144));
}

uint64_t sub_1000A101C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  return sub_10001C7E4(a1, v1, v2);
}

void sub_1000A1028(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;

  sub_1000102C0(v3, v4, a3);
}

uint64_t sub_1000A1034()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 2);
}

uint64_t sub_1000A104C()
{
  return type metadata accessor for DaemonSession.ManagerOwnedState(0);
}

uint64_t sub_1000A105C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 200, v1, v0);
}

uint64_t sub_1000A106C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

void sub_1000A1074(uint64_t a1, uint64_t a2)
{
  void (*v2)(_QWORD);

  sub_1000A0C4C(a1, a2, v2);
}

uint64_t sub_1000A107C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100005700(v1, 1, v0);
}

uint64_t sub_1000A108C()
{
  uint64_t v0;
  uint64_t v1;

  return v0 + *(int *)(v1 + 24);
}

void sub_1000A10BC(char a1, uint64_t a2)
{
  sub_100011720(a1, a2, 0);
}

uint64_t sub_1000A10C4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = v0;
  return 0;
}

uint64_t sub_1000A10D4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = a1;
  return v1 - 88;
}

uint64_t sub_1000A10E0(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = result;
  return result;
}

uint64_t sub_1000A10F0(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  return dispatch thunk of Hashable.hash(into:)(va, v2, a1);
}

uint64_t sub_1000A1100()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10002ABC0(v0, v1);
}

uint64_t sub_1000A110C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_10001C6FC(a1, a2, a3, *(_QWORD *)(v3 - 112));
}

void sub_1000A1118()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v0 + 16) = v3;
  v5 = v0 + 16 * v2;
  *(_QWORD *)(v5 + 32) = v1;
  *(_QWORD *)(v5 + 40) = v4;
}

uint64_t sub_1000A112C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return *(_QWORD *)(v1 + 48) + *(_QWORD *)(*(_QWORD *)(v2 - 256) + 72) * a1;
}

void sub_1000A1140(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0x20u);
}

uint64_t sub_1000A114C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, v1, v2);
}

uint64_t sub_1000A1158(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return Array.description.getter(v2, a2);
}

uint64_t sub_1000A1160()
{
  uint64_t v0;

  return swift_retain_n(v0, 2);
}

uint64_t sub_1000A116C()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 3);
}

uint64_t sub_1000A1178(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  return v4(v3, a2, v2);
}

uint64_t sub_1000A1184@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_1000A1198()
{
  return type metadata accessor for DaemonSessionState(0);
}

uint64_t sub_1000A11A0()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_1000A11AC()
{
  uint64_t v0;

  return sub_10007CC70(v0 - 112);
}

uint64_t sub_1000A11B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  return v4(v3, a2, v2);
}

uint64_t sub_1000A11C0()
{
  uint64_t v0;

  return swift_unknownObjectRetain(v0);
}

uint64_t sub_1000A11CC(uint64_t a1, uint64_t a2)
{
  return sub_100002FF8(a1, a2);
}

void sub_1000A11E0()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  sub_10002ACC4(v1, v0);
}

uint64_t sub_1000A11EC()
{
  uint64_t v0;
  uint64_t v1;

  return v0 + *(int *)(v1 + 24);
}

_QWORD *sub_1000A1214(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *i;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v3 = v2;
  v6 = type metadata accessor for ModelCatalogAsset(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    v17 = _swiftEmptyArrayStorage;
    sub_1000117B0();
    v11 = v17;
    for (i = (_QWORD *)(a1 + 32); ; i += 5)
    {
      sub_1000A2988(i, a2, &v16);
      if (v3)
        break;
      v3 = 0;
      v17 = v11;
      v13 = v11[2];
      if (v13 >= v11[3] >> 1)
      {
        sub_1000117B0();
        v11 = v17;
      }
      v11[2] = v13 + 1;
      sub_1000AAAF8((uint64_t)v9, (uint64_t)v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v13, type metadata accessor for ModelCatalogAsset);
      if (!--v10)
      {
        swift_release(a2);
        return v11;
      }
    }
    swift_release(a2);
    swift_release(v11);
  }
  else
  {
    swift_release(a2);
    return _swiftEmptyArrayStorage;
  }
  return v11;
}

uint64_t sub_1000A1390(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  sub_100037A7C();
  return swift_task_switch(v4, v5, v6);
}

uint64_t sub_1000A13B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 48) = v2;
  v3 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v4;
  sub_100002F78(&qword_1000FEAE8);
  *v4 = v0;
  v4[1] = sub_1000A145C;
  sub_1000AB414();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t sub_1000A145C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000446B4();
  if (v1)
  {
    sub_100037A7C();
    return sub_10001D6D0();
  }
  else
  {
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v2 + 8))(*(_QWORD *)(v0 + 16));
  }
}

uint64_t sub_1000A14AC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A14E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_1000A14FC, 0, 0);
}

uint64_t sub_1000A14FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 48) = v2;
  v3 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v4;
  sub_100002F78(&qword_1000FEA60);
  *v4 = v0;
  v4[1] = sub_1000A159C;
  sub_1000AB414();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t sub_1000A159C()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000446B4();
  if (v0)
  {
    sub_100037A7C();
    return sub_10001D6D0();
  }
  else
  {
    swift_task_dealloc();
    return sub_10001D940(*(uint64_t (**)(void))(v1 + 8));
  }
}

uint64_t sub_1000A15E4()
{
  uint64_t v0;

  swift_task_dealloc();
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1000A1610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD v40[6];

  sub_10001D810();
  v33 = v1;
  v34 = v2;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v32 = v9;
  v38 = v10;
  v12 = v11;
  v13 = type metadata accessor for DispatchWorkItemFlags(0);
  v37 = *(_QWORD *)(v13 - 8);
  sub_10001DD00();
  __chkstk_darwin(v14);
  sub_10001E168();
  v17 = v16 - v15;
  v18 = type metadata accessor for DispatchQoS(0);
  v35 = *(_QWORD *)(v18 - 8);
  v36 = v18;
  sub_10001DD00();
  __chkstk_darwin(v19);
  sub_10001E66C();
  v20 = sub_100002F78(v6);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(_QWORD *)(v21 + 64);
  __chkstk_darwin(v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))((char *)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), v12, v20);
  v23 = *(unsigned __int8 *)(v21 + 80);
  v24 = (v23 + 32) & ~v23;
  v25 = swift_allocObject(v4, v24 + v22, v23 | 7);
  *(_QWORD *)(v25 + 16) = v32;
  *(_QWORD *)(v25 + 24) = v8;
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v25 + v24, (char *)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), v20);
  v40[4] = v33;
  v40[5] = v25;
  v40[0] = _NSConcreteStackBlock;
  v40[1] = 1107296256;
  v40[2] = sub_1000A194C;
  v40[3] = v34;
  v26 = _Block_copy(v40);
  v27 = swift_retain();
  static DispatchQoS.unspecified.getter(v27);
  v39 = _swiftEmptyArrayStorage;
  sub_100006710((unint64_t *)&unk_1000FEED0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  v29 = v28;
  v30 = sub_100002F78(&qword_1000FBF38);
  sub_100006744(&qword_1000FEEE0, &qword_1000FBF38);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v39, v30, v31, v13, v29);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v0, v17, v26);
  _Block_release(v26);
  sub_10007E7EC(v17, *(uint64_t (**)(uint64_t, uint64_t))(v37 + 8));
  sub_100037D5C(v35);
  swift_release();
  sub_100006A68();
}

uint64_t sub_1000A1830(void (*a1)(uint64_t *__return_ptr))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1(&v4);
  v3 = v4;
  v1 = sub_100002F78(&qword_1000FEAF0);
  return CheckedContinuation.resume(returning:)(&v3, v1);
}

uint64_t sub_1000A18B8(void (*a1)(_QWORD *__return_ptr))
{
  uint64_t v1;
  _BYTE v3[48];
  _QWORD v4[5];

  a1(v4);
  sub_100006694((uint64_t)v4, (uint64_t)v3);
  v1 = sub_100002F78(&qword_1000FEA68);
  CheckedContinuation.resume(returning:)(v3, v1);
  return sub_10000650C(v4);
}

double sub_1000A194C(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  double result;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = sub_10001E194();
  v1(v3);
  *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  return result;
}

uint64_t sub_1000A1974()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_100002FB8(v0, qword_1000FE768);
  sub_100002FF8(v0, (uint64_t)qword_1000FE768);
  v1 = subsystemName.getter();
  return Logger.init(subsystem:category:)(v1);
}

uint64_t sub_1000A19E0()
{
  uint64_t result;

  result = static Catalog.modelManagerDefaultMemoryBudget.getter();
  qword_1000FFED8 = result;
  return result;
}

uint64_t sub_1000A19FC()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for CatalogClient(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = CatalogClient.init()();
  qword_1000FFEE0 = result;
  return result;
}

uint64_t sub_1000A1A38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  sub_10001D810();
  v66 = v4;
  v67 = v5;
  v6 = v1;
  v62 = sub_10007F430();
  v58 = *(char **)(v62 - 8);
  sub_10001DD00();
  __chkstk_darwin(v7);
  sub_10001EB18();
  v61 = v8;
  sub_10001E148();
  __chkstk_darwin(v9);
  v63 = (char *)&v55 - v10;
  sub_10001E148();
  __chkstk_darwin(v11);
  v13 = (char *)&v55 - v12;
  v60 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v14 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  sub_10004465C();
  v15 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  sub_10001DD00();
  __chkstk_darwin(v16);
  sub_10001DEA0();
  type metadata accessor for DispatchQoS(0);
  sub_10001DD00();
  __chkstk_darwin(v17);
  sub_10007F78C();
  swift_defaultActor_initialize(v6);
  if (qword_1000FB160 != -1)
    swift_once(&qword_1000FB160, sub_1000A19E0);
  *(_QWORD *)(v6 + 112) = qword_1000FFED8;
  *(_QWORD *)&v59 = sub_1000066D4();
  static DispatchQoS.unspecified.getter();
  v64 = _swiftEmptyArrayStorage;
  sub_100006710(&qword_1000FB2F8, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  v19 = v18;
  v20 = sub_100002F78(&qword_1000FB300);
  sub_100006744(&qword_1000FB308, &qword_1000FB300);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v64, v20, v21, v15, v19);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 104))(v0, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v60);
  v22 = v59;
  *(_QWORD *)(v6 + 120) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000014, 0x80000001000CCC70, v2, v3, v0, 0);
  v23 = v6 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_assetLock;
  v24 = sub_1000AB0B8();
  sub_10002B26C(v23, v25, v26, v24);
  *(_BYTE *)(v6 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_assetsHaveUpdated) = 0;
  *(_QWORD *)(v6 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_tasksUsingAssetLock) = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)(v6 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_cycleAssetLockTask) = 0;
  v57 = v6;
  *(_QWORD *)(v6 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_assetUpdateWatcher) = 0;
  if (qword_1000FB158 != -1)
    swift_once(&qword_1000FB158, sub_1000A1974);
  v27 = sub_10001DD64();
  v28 = sub_100037AC4(v27, (uint64_t)qword_1000FE768);
  v29 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)sub_10001D8D4(12);
    *(_DWORD *)v30 = 134217984;
    if (qword_1000FB1F8 != -1)
      swift_once(&qword_1000FB1F8, sub_1000A9C04);
    v64 = *(_QWORD **)(qword_100100080 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v30 + 4);
    sub_10001E18C((void *)&_mh_execute_header, v28, v29, "%ld builtin test assets", v30);
    sub_10001D790((uint64_t)v30);
  }

  v31 = v63;
  if (qword_1000FB1F8 != -1)
    swift_once(&qword_1000FB1F8, sub_1000A9C04);
  v32 = *(_QWORD *)(qword_100100080 + 16);
  if (v32)
  {
    sub_10001EA78();
    v35 = v33 + v34;
    v37 = *(_QWORD *)(v36 + 72);
    v56 = v33;
    sub_10001EBA8(v33);
    *(_QWORD *)&v38 = 136315138;
    v59 = v38;
    v58 = (char *)&type metadata for Any + 8;
    v60 = v22;
    do
    {
      sub_1000AA42C(v35, (uint64_t)v13, type metadata accessor for ModelCatalogAsset);
      sub_1000AB320((uint64_t)v13);
      v40 = Logger.logObject.getter(v39);
      v41 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v40, v41))
      {
        v42 = sub_10001D8D4(12);
        v43 = v13;
        v44 = v37;
        v45 = (_QWORD *)sub_10001D8D4(32);
        v64 = v45;
        *(_DWORD *)v42 = v59;
        v46 = (uint64_t)v31;
        v47 = v61;
        sub_1000AB320(v46);
        v48 = String.init<A>(describing:)(v47, v62);
        v50 = v49;
        sub_1000102C0(v48, v49, (uint64_t *)&v64);
        *(_QWORD *)(v42 + 4) = v51;
        v52 = v50;
        v31 = v63;
        swift_bridgeObjectRelease(v52);
        sub_1000AB32C();
        sub_10001E18C((void *)&_mh_execute_header, v40, v41, "%s", (uint8_t *)v42);
        swift_arrayDestroy(v45, 1);
        v53 = (uint64_t)v45;
        v37 = v44;
        v13 = v43;
        sub_10001D790(v53);
        sub_10001D790(v42);
      }
      else
      {
        sub_1000AB32C();
      }

      sub_10002ACC4((uint64_t)v13, type metadata accessor for ModelCatalogAsset);
      v35 += v37;
      --v32;
    }
    while (v32);
    sub_10002BA68(v56);
  }
  return v57;
}

uint64_t sub_1000A1F28()
{
  uint64_t v0;
  _QWORD v2[3];

  static Catalog.Resource.DisabledUseCaseList.All()(v2);
  sub_10002BD68(v2);
  v0 = sub_1000AB3B8();
  sub_10000650C(v2);
  return v0;
}

uint64_t sub_1000A1F80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84[5];
  uint64_t v85;
  uint64_t v86;

  v3 = v2;
  if (qword_1000FB158 != -1)
    swift_once(&qword_1000FB158, sub_1000A1974);
  v6 = sub_10001DD64();
  sub_100002FF8(v6, (uint64_t)qword_1000FE768);
  sub_1000AAE9C();
  v7 = sub_1000AB344();
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v74 = v2;
    v9 = (uint8_t *)sub_10001D8D4(12);
    v10 = sub_10001D8D4(32);
    v84[0] = v10;
    *(_DWORD *)v9 = 136315138;
    sub_10001D964();
    sub_1000AB02C(a1, v11, v84);
    v80 = v12;
    v3 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v9 + 4);
    sub_100037F88();
    sub_10001E18C((void *)&_mh_execute_header, v7, v8, "Looking up asset bundle %s in Model Catalog", v9);
    sub_10001DBB8(v10);
    sub_10001D790(v10);
    sub_10001D790((uint64_t)v9);
  }
  else
  {
    sub_1000AAE00();
  }

  if (qword_1000FB168 != -1)
    swift_once(&qword_1000FB168, sub_1000A19FC);
  v13 = qword_1000FFEE0;
  v14 = a1;
  dispatch thunk of CatalogClient.resourceBundle(for:)(&v80, a1, a2);
  v15 = v3;
  if (v3)
  {
    v80 = v3;
    swift_errorRetain(v3);
    v16 = sub_100002F78(&qword_1000FB5F8);
    v17 = String.init<A>(describing:)(&v80, v16);
    v19 = v18;
    sub_1000AAE9C();
    sub_10001EBA8(v19);
    sub_1000AB344();
    v20 = sub_100039EB4();
    if (sub_1000962E8(v20))
    {
      v76 = v17;
      v21 = sub_10001D8D4(22);
      v22 = sub_10001D8D4(64);
      v80 = v22;
      *(_DWORD *)v21 = 136315394;
      sub_10001D964();
      sub_1000AB02C(a1, v23, &v80);
      *(_QWORD *)&v77 = v24;
      sub_1000AB09C((uint64_t)&v77, (uint64_t)&v77 + 8);
      sub_100037F88();
      *(_WORD *)(v21 + 12) = 2080;
      swift_bridgeObjectRetain(v19);
      v25 = v76;
      sub_1000102C0(v76, v19, &v80);
      *(_QWORD *)&v77 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, (char *)&v77 + 8, v21 + 14);
      sub_10002BD84(v19);
      _os_log_impl((void *)&_mh_execute_header, v13, (os_log_type_t)a1, "Failed to get resource bundle for %s: %s", (uint8_t *)v21, 0x16u);
      sub_10002BA20(v22);
      sub_10001D790(v22);
      sub_10001D790(v21);

    }
    else
    {
      sub_1000AAE00();
      sub_10002BA68(v19);

      v25 = v17;
    }
    v30 = sub_10002B8A0();
    sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_10002B560(v30, v31);
    *v32 = v25;
    v32[1] = v19;
    v33 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v32, enum case for ModelManagerError.modelCatalogError(_:), v30);
    swift_willThrow(v33, v34, v35, v36, v37, v38, v39, v40);
    swift_errorRelease(v15);
  }
  else
  {
    sub_10008B88C((uint64_t)&v80, (uint64_t)v84, (uint64_t *)&stru_1000FEAD8);
    sub_10008B6B4((uint64_t)v84, (uint64_t)&v77, (uint64_t *)&stru_1000FEAD8);
    if (v79)
    {
      sub_10000667C(&v77, (uint64_t)&v80);
      v27 = v82;
      v28 = v83;
      sub_10001C830(&v80, v82);
      v29 = dispatch thunk of ResourceBundle.resources.getter(v27, v28);
      swift_retain();
      sub_1000A1214(v29, v75);
      swift_bridgeObjectRelease(v29);
      sub_10000B724();
      v15 = v47;
      swift_bridgeObjectRetain_n(v47, 4);
      v48 = sub_1000AAE9C();
      v49 = Logger.logObject.getter(v48);
      v50 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v49, v50))
      {
        v51 = sub_10001D8D4(32);
        v52 = sub_10001D8D4(64);
        *(_QWORD *)&v77 = v52;
        *(_DWORD *)v51 = 136315650;
        sub_10001D964();
        sub_1000AB02C(v14, v53, (uint64_t *)&v77);
        v85 = v54;
        sub_1000AB09C((uint64_t)&v85, (uint64_t)&v86);
        sub_100037F88();
        *(_WORD *)(v51 + 12) = 2048;
        v55 = *(_QWORD *)(v15 + 16);
        swift_bridgeObjectRelease(v15);
        v85 = v55;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v51 + 14);
        swift_bridgeObjectRelease(v15);
        *(_WORD *)(v51 + 22) = 2080;
        if (*(_QWORD *)(v15 + 16) == 1)
          v57 = 0;
        else
          v57 = 115;
        if (*(_QWORD *)(v15 + 16) == 1)
          v58 = 0xE000000000000000;
        else
          v58 = 0xE100000000000000;
        sub_1000AB02C(v57, v56, (uint64_t *)&v77);
        v85 = v59;
        sub_1000AB09C((uint64_t)&v85, (uint64_t)&v86);
        swift_bridgeObjectRelease(v58);
        sub_10002BA68(v15);
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "Found asset bundle %s with %ld asset%s", (uint8_t *)v51, 0x20u);
        sub_10002BA20(v52);
        sub_10001D790(v52);
        sub_10001D790(v51);

      }
      else
      {
        swift_bridgeObjectRelease_n(v15, 4);

        v60 = sub_1000AAE00();
      }
      sub_1000AB300(v60, (uint64_t *)&stru_1000FEAD8, v61, v62, v63, v64, v65, v66, v73, v74, v75, v77, *((uint64_t *)&v77 + 1), v78, v79);
      sub_10000650C(&v80);
    }
    else
    {
      sub_10002AD5C((uint64_t)&v77, (uint64_t *)&stru_1000FEAD8);
      sub_1000AAE9C();
      sub_1000AB344();
      v42 = sub_100039EB4();
      if (sub_1000962E8(v42))
      {
        v43 = (uint8_t *)sub_10001D8D4(12);
        v44 = sub_10001D8D4(32);
        v80 = v44;
        *(_DWORD *)v43 = 136315138;
        sub_10001D964();
        sub_1000AB02C(a1, v45, &v80);
        *(_QWORD *)&v77 = v46;
        sub_100037AAC((uint64_t)&v77, (uint64_t)&v77 + 8);
        sub_100037F88();
        sub_10001E18C((void *)&_mh_execute_header, &stru_1000FEAD8, (os_log_type_t)a1, "Asset bundle %s not found in Model Catalog, falling back to test assets", v43);
        sub_10001DBB8(v44);
        sub_10001D790(v44);
        sub_10001D790((uint64_t)v43);
      }
      else
      {
        sub_1000AAE00();
      }

      v15 = sub_1000A2658(a1, a2);
      sub_1000AB300(v15, (uint64_t *)&stru_1000FEAD8, v67, v68, v69, v70, v71, v72, v73, v74, v75, v77, *((uint64_t *)&v77 + 1), v78, v79);
    }
  }
  return v15;
}

uint64_t sub_1000A2658(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44[2];
  uint64_t v45;
  uint64_t v46;

  sub_100002F78(&qword_1000FBED0);
  sub_10001DD00();
  __chkstk_darwin(v7);
  v8 = sub_1000AB134();
  v9 = type metadata accessor for ModelCatalogAsset(v8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_10001E654();
  type metadata accessor for ModelCatalogProvider(0);
  sub_1000AB0F8();
  sub_1000A760C();
  if (sub_100005700(v4, 1, v9) == 1)
  {
    sub_10002AD5C(v4, &qword_1000FBED0);
    if (qword_1000FB158 != -1)
      swift_once(&qword_1000FB158, sub_1000A1974);
    v11 = sub_10001DD64();
    v12 = sub_100002FF8(v11, (uint64_t)qword_1000FE768);
    v13 = sub_1000AAE9C();
    Logger.logObject.getter(v13);
    v14 = sub_100039EB4();
    if (os_log_type_enabled(v12, v14))
    {
      v15 = (uint8_t *)sub_10001D8D4(12);
      v16 = sub_10001D8D4(32);
      v44[0] = v16;
      *(_DWORD *)v15 = 136315138;
      sub_10001D964();
      sub_1000AB02C(a1, v17, v44);
      v45 = v18;
      sub_100037AAC((uint64_t)&v45, (uint64_t)&v46);
      sub_100037F88();
      sub_10001E18C((void *)&_mh_execute_header, v12, v14, "Asset bundle %s not found in test assets", v15);
      sub_10001DBB8(v16);
      sub_10001D790(v16);
      sub_10001D790((uint64_t)v15);
    }
    else
    {
      sub_1000AAE00();
    }

    v29 = sub_10002B8A0();
    sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    v31 = sub_10002B560(v29, v30);
    v33 = sub_10007E0C4(v31, v32);
    *v34 = a1;
    v34[1] = a2;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v33, enum case for ModelManagerError.assetBundleNotFound(_:), v29);
    v35 = sub_10001D964();
    swift_willThrow(v35, v36, v37, v38, v39, v40, v41, v42);
  }
  else
  {
    v19 = sub_10001E4C8();
    sub_1000AAAF8(v19, v20, type metadata accessor for ModelCatalogAsset);
    v21 = sub_100002F78(&qword_1000FB650);
    v22 = *(unsigned __int8 *)(v10 + 80);
    v23 = (v22 + 32) & ~v22;
    v24 = swift_allocObject(v21, v23 + *(_QWORD *)(v10 + 72), v22 | 7);
    *(_OWORD *)(v24 + 16) = xmmword_1000CB140;
    sub_1000AA42C(v3, v24 + v23, type metadata accessor for ModelCatalogAsset);
    sub_10000B724();
    v45 = v25;
    v26 = *(_QWORD *)(v3 + 16);
    v27 = *(_QWORD *)(v26 + 16);
    if (v27)
    {
      sub_1000AAE9C();
      v28 = (uint64_t *)(v26 + 40);
      while (1)
      {
        a1 = *v28;
        v44[0] = *(v28 - 1);
        v44[1] = a1;
        sub_10001E3E0();
        sub_1000A87E8(v44);
        swift_bridgeObjectRelease(a1);
        if (v2)
          break;
        v28 += 2;
        if (!--v27)
        {
          sub_1000AAE00();
          a1 = v45;
          goto LABEL_14;
        }
      }
      sub_1000AAE00();
      sub_10002ACC4(v3, type metadata accessor for ModelCatalogAsset);
      swift_bridgeObjectRelease(v45);
    }
    else
    {
      a1 = v25;
LABEL_14:
      sub_10002ACC4(v3, type metadata accessor for ModelCatalogAsset);
    }
  }
  return a1;
}

uint64_t sub_1000A2988(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68[2];
  uint64_t v69;
  uint64_t v70[3];
  uint64_t v71;
  _QWORD v72[3];
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v5 = v3;
  sub_100006694((uint64_t)a1, (uint64_t)v70);
  v7 = sub_100002F78(&qword_1000FEA20);
  v8 = sub_100002F78(&qword_1000FEA28);
  if ((swift_dynamicCast(v68, v70, v7, v8, 6) & 1) == 0)
  {
    v69 = 0;
    memset(v68, 0, sizeof(v68));
    sub_10002AD5C((uint64_t)v68, &qword_1000FEA30);
    if (qword_1000FB158 != -1)
      swift_once(&qword_1000FB158, sub_1000A1974);
    v15 = type metadata accessor for Logger(0);
    sub_100002FF8(v15, (uint64_t)qword_1000FE768);
    sub_100006694((uint64_t)a1, (uint64_t)v72);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v66 = swift_slowAlloc(32, -1);
      v70[0] = v66;
      *(_DWORD *)v19 = 136315138;
      v20 = v73;
      sub_10001C830(v72, v73);
      v21 = dispatch thunk of CatalogResource.id.getter(v20);
      v23 = v22;
      sub_1000102C0(v21, v22, v70);
      *(_QWORD *)&v68[0] = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v68, (char *)v68 + 8, v19 + 4);
      swift_bridgeObjectRelease(v23);
      sub_10000650C(v72);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Asset %s cannot be converted to a Model Catalog Managed Resource", v19, 0xCu);
      swift_arrayDestroy(v66, 1);
      swift_slowDealloc(v66, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }
    else
    {
      sub_10000650C(v72);
    }

    v25 = type metadata accessor for ModelManagerError(0);
    sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    v5 = swift_allocError(v25, v26, 0, 0);
    v28 = v27;
    v29 = a1[3];
    sub_10001C830(a1, v29);
    *v28 = dispatch thunk of CatalogResource.id.getter(v29);
    v28[1] = v30;
    v31 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v28, enum case for ModelManagerError.unrecognizedModelCatalogResource(_:), v25);
    result = swift_willThrow(v31, v32, v33, v34, v35, v36, v37, v38);
    goto LABEL_10;
  }
  sub_10000667C(v68, (uint64_t)v72);
  v9 = a1[3];
  sub_10001C830(a1, v9);
  v10 = dispatch thunk of CatalogResource.id.getter(v9);
  v12 = v11;
  v13 = sub_1000A3408(v10, v11);
  if (v3)
  {
    sub_10000650C(v72);
    result = swift_bridgeObjectRelease(v12);
LABEL_10:
    *a3 = v5;
    return result;
  }
  v39 = v13;
  swift_bridgeObjectRelease(v12);
  if ((v39 & 1) == 0)
  {
    if (qword_1000FB158 != -1)
      swift_once(&qword_1000FB158, sub_1000A1974);
    v40 = type metadata accessor for Logger(0);
    sub_100002FF8(v40, (uint64_t)qword_1000FE768);
    sub_100006694((uint64_t)a1, (uint64_t)v70);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      v67 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v68[0] = v67;
      *(_DWORD *)v44 = 136315138;
      v45 = a3;
      v46 = v71;
      sub_10001C830(v70, v71);
      v47 = v46;
      a3 = v45;
      v48 = dispatch thunk of CatalogResource.id.getter(v47);
      v50 = v49;
      sub_1000102C0(v48, v49, (uint64_t *)v68);
      v74 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v44 + 4);
      swift_bridgeObjectRelease(v50);
      sub_10000650C(v70);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Asset %s is not available in Model Catalog", v44, 0xCu);
      swift_arrayDestroy(v67, 1);
      swift_slowDealloc(v67, -1, -1);
      swift_slowDealloc(v44, -1, -1);
    }
    else
    {
      sub_10000650C(v70);
    }

    v52 = type metadata accessor for ModelManagerError(0);
    sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    v5 = swift_allocError(v52, v53, 0, 0);
    v55 = v54;
    v56 = a1[3];
    sub_10001C830(a1, v56);
    *v55 = dispatch thunk of CatalogResource.id.getter(v56);
    v55[1] = v57;
    v58 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v52 - 8) + 104))(v55, enum case for ModelManagerError.assetNotAvailableInModelCatalog(_:), v52);
    swift_willThrow(v58, v59, v60, v61, v62, v63, v64, v65);
    result = sub_10000650C(v72);
    goto LABEL_10;
  }
  sub_100006694((uint64_t)v72, (uint64_t)v70);
  sub_1000A2EE8();
  return sub_10000650C(v72);
}

void sub_1000A2EE8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char v49;
  void (*v50)(uint64_t, uint64_t);
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t);
  uint64_t v66;
  char v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  int *v79;
  _QWORD v80[2];
  _QWORD *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t (*v91)(uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;

  sub_10001D810();
  v1 = v0;
  v89 = v2;
  v3 = type metadata accessor for InferenceProvider(0);
  v99 = *(_QWORD *)(v3 - 8);
  v100 = v3;
  sub_10001DD00();
  __chkstk_darwin(v4);
  sub_10001EB18();
  v98 = v5;
  sub_10001E148();
  __chkstk_darwin(v6);
  v97 = (char *)v80 - v7;
  v96 = type metadata accessor for ManagedRuntimeInformation(0);
  v8 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  sub_10001EB18();
  v94 = v9;
  sub_10001E148();
  __chkstk_darwin(v10);
  v95 = (char *)v80 - v11;
  v12 = type metadata accessor for CostProfile(0);
  v83 = *(_QWORD *)(v12 - 8);
  sub_10001DD00();
  __chkstk_darwin(v13);
  sub_10001EB18();
  v88 = v14;
  sub_10001E148();
  __chkstk_darwin(v15);
  v85 = (char *)v80 - v16;
  sub_10001E148();
  __chkstk_darwin(v17);
  v84 = (char *)v80 - v18;
  sub_10001E148();
  __chkstk_darwin(v19);
  v82 = (char *)v80 - v20;
  v21 = sub_10004A92C();
  v86 = *(_QWORD *)(v21 - 8);
  v87 = v21;
  sub_10001DD00();
  __chkstk_darwin(v22);
  sub_10001E168();
  v90 = v24 - v23;
  v25 = v1[3];
  v26 = v1[4];
  sub_10002BD68(v1);
  v27 = dispatch thunk of ManagedResource.runtimeInformation.getter(v25, v26);
  v28 = *(_QWORD *)(v27 + 16);
  if (v28)
  {
    v80[1] = v12;
    v81 = v1;
    v105 = _swiftEmptyArrayStorage;
    sub_100011794(0, v28, 0);
    sub_10001EA78();
    v80[0] = v27;
    v30 = v27 + v29;
    v92 = *(_QWORD *)(v8 + 72);
    v93 = v8;
    v91 = *(uint64_t (**)(uint64_t))(v8 + 16);
    v31 = v95;
    v32 = v96;
    v33 = v94;
    do
    {
      v34 = sub_1000AB0F8();
      v35 = v91;
      v91(v34);
      v36 = sub_1000AB288();
      v37 = v35(v36);
      v38 = v97;
      v39 = ManagedRuntimeInformation.inferenceProvider.getter(v37);
      v40 = InferenceProvider.id.getter(v39);
      v103 = v41;
      v104 = v40;
      v42 = v100;
      v43 = *(uint64_t (**)(char *, uint64_t))(v99 + 8);
      v44 = v43(v38, v100);
      v45 = ManagedRuntimeInformation.instanceID.getter(v44);
      v101 = v46;
      v102 = v45;
      v47 = v98;
      v48 = ManagedRuntimeInformation.inferenceProvider.getter(v45);
      v49 = InferenceProvider.hostedOnServer.getter(v48);
      v43(v47, v42);
      v50 = *(void (**)(uint64_t, uint64_t))(v93 + 8);
      v50(v33, v32);
      v50((uint64_t)v31, v32);
      v51 = v105;
      if ((swift_isUniquelyReferenced_nonNull_native(v105) & 1) == 0)
      {
        sub_100011794(0, v51[2] + 1, 1);
        v51 = v105;
      }
      v53 = v51[2];
      v52 = v51[3];
      if (v53 >= v52 >> 1)
      {
        sub_100011794((char *)(v52 > 1), v53 + 1, 1);
        v51 = v105;
      }
      v51[2] = v53 + 1;
      v54 = &v51[5 * v53];
      v55 = v103;
      v54[4] = v104;
      v54[5] = v55;
      v56 = v101;
      v54[6] = v102;
      v54[7] = v56;
      *((_BYTE *)v54 + 64) = v49 & 1;
      v30 += v92;
      --v28;
    }
    while (v28);
    swift_bridgeObjectRelease(v80[0]);
    v1 = v81;
  }
  else
  {
    sub_10001D8B4();
    v51 = _swiftEmptyArrayStorage;
  }
  sub_10002BD68(v1);
  v57 = sub_1000AB3B8();
  v103 = v58;
  v104 = v57;
  v60 = v1[3];
  v59 = v1[4];
  v61 = (_QWORD *)sub_1000AB288();
  sub_10001C830(v61, v62);
  v102 = dispatch thunk of CatalogResource.dependentResourceIDs.getter(v60, *(_QWORD *)(v59 + 8));
  sub_1000AB1E4();
  v63 = sub_1000AB05C();
  v64 = CostProfile.onDeviceMemory.getter(v63);
  v65 = *(void (**)(uint64_t))(v83 + 8);
  sub_1000AB1B8();
  if (v64 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20);
    __break(1u);
  }
  else
  {
    AssetCost.init(onDeviceMemory:)(v64);
    sub_1000AB1E4();
    v66 = sub_1000AB05C();
    v67 = CostProfile.cacheable.getter(v66);
    sub_1000AB1B8();
    v68 = v1;
    v69 = v1[3];
    v70 = v1[4];
    sub_10001C830(v68, v69);
    v71 = dispatch thunk of ManagedResource.cost.getter(v69, v70);
    LOBYTE(v69) = CostProfile.dynamicModeAllowed.getter(v71);
    sub_1000AB1B8();
    v72 = v68[3];
    v73 = v68[4];
    sub_10001C830(v68, v72);
    v74 = dispatch thunk of ManagedResource.cost.getter(v72, v73);
    v75 = CostProfile.energyEfficientMode.getter(v74);
    v76 = sub_1000AB0F8();
    v65(v76);
    v77 = (char *)v89;
    v78 = v103;
    *v89 = v104;
    *((_QWORD *)v77 + 1) = v78;
    *((_QWORD *)v77 + 2) = v102;
    *((_QWORD *)v77 + 3) = v51;
    v79 = (int *)sub_10007F430();
    (*(void (**)(char *, uint64_t, uint64_t))(v86 + 32))(&v77[v79[7]], v90, v87);
    v77[v79[8]] = v67 & 1;
    v77[v79[9]] = v69 & 1;
    v77[v79[10]] = v75 & 1;
    sub_10000650C(v68);
    sub_100006A68();
  }
}

uint64_t sub_1000A3408(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  type metadata accessor for ResourceStatus(0);
  sub_1000AB2CC();
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  if (qword_1000FB168 != -1)
    swift_once(&qword_1000FB168, sub_1000A19FC);
  v10 = sub_10001E4C8();
  v11 = dispatch thunk of CatalogClient.resourceStatus(identifier:)(v10);
  if (v2)
  {
    sub_1000AB3D8();
    v12 = sub_100002F78(&qword_1000FB5F8);
    v13 = sub_1000AB3E4();
    v15 = v14;
    if (qword_1000FB158 != -1)
      swift_once(&qword_1000FB158, sub_1000A1974);
    v16 = sub_10001DD64();
    v17 = (void *)sub_100002FF8(v16, (uint64_t)qword_1000FE768);
    sub_10001EBA8(a2);
    v18 = sub_10001E4D4();
    Logger.logObject.getter(v18);
    v19 = sub_100039EB4();
    if (sub_1000AB2B4(v19))
    {
      v20 = sub_10001D8D4(22);
      v21 = sub_10001D8D4(64);
      v48 = v12;
      v22 = v21;
      v51 = v21;
      *(_DWORD *)v20 = 136315394;
      v47 = v13;
      sub_10001DBE4();
      v23 = sub_10001E4C8();
      sub_1000102C0(v23, v24, v25);
      v49 = v26;
      sub_1000AB09C((uint64_t)&v49, (uint64_t)&v50);
      sub_10002BD84(a2);
      *(_WORD *)(v20 + 12) = 2080;
      sub_10001E4D4();
      sub_1000102C0(v47, v15, &v51);
      v49 = v27;
      sub_1000AB09C((uint64_t)&v49, (uint64_t)&v50);
      sub_10002BD84(v15);
      sub_1000AB120((void *)&_mh_execute_header, v28, v29, "Failed to get resource status for %s: %s");
      sub_10002BA20(v22);
      sub_10001D790(v22);
      sub_10001D790(v20);

    }
    else
    {

      sub_10002BA68(v15);
      sub_10002BA68(a2);
    }
    v30 = sub_10002B8A0();
    sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_10002B560(v30, v33);
    v35 = v34;
    sub_1000AB3D8();
    *v35 = sub_1000AB3E4();
    v35[1] = v36;
    v37 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v35, enum case for ModelManagerError.modelCatalogError(_:), v30);
    swift_willThrow(v37, v38, v39, v40, v41, v42, v43, v44);
    swift_errorRelease(v2);
  }
  else
  {
    v30 = v11;
    StatusResponse.status.getter();

    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v9, enum case for ResourceStatus.available(_:), v3);
    sub_100006710(&qword_1000FEAD0, (uint64_t (*)(uint64_t))&type metadata accessor for ResourceStatus);
    sub_1000AB314();
    sub_1000AB314();
    LOBYTE(v30) = v51 == v49;
    v31 = *(void (**)(char *, uint64_t))(v4 + 8);
    v31(v9, v3);
    v32 = sub_1000AB288();
    ((void (*)(uint64_t))v31)(v32);
  }
  return v30 & 1;
}

uint64_t sub_1000A3764(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t AssociatedTypeWitness;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  _QWORD v56[3];
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t AssociatedConformanceWitness;
  uint64_t v62[3];
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;

  v4 = type metadata accessor for CatalogErrors.AssetErrors(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10001E168();
  v8 = v7 - v6;
  if (qword_1000FB168 != -1)
    swift_once(&qword_1000FB168, sub_1000A19FC);
  v9 = sub_1000AB288();
  dispatch thunk of CatalogClient.resource(for:)(v9);
  if (v2)
  {
    sub_1000AB16C();
    v10 = sub_100002F78(&qword_1000FB5F8);
    if (swift_dynamicCast(v8, v62, v10, v4, 0))
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v5 + 88))(v8, v4) == enum case for CatalogErrors.AssetErrors.failedToFindAsset(_:))
      {
        swift_errorRelease(v2);
        sub_1000AB388(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 96));
        swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
        v11 = sub_1000AB39C();
        sub_1000AB1A4(v11);
        v12 = v62[0];
        return swift_errorRelease(v12);
      }
      sub_1000AB388(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
    }
    swift_errorRelease(v62[0]);
    sub_1000AB16C();
    v65 = (_QWORD *)v10;
    v17 = String.init<A>(describing:)(v62, v10);
    if (qword_1000FB158 != -1)
      swift_once(&qword_1000FB158, sub_1000A1974);
    v18 = sub_10001DD64();
    v19 = (void *)sub_100002FF8(v18, (uint64_t)qword_1000FE768);
    sub_10001EBA8(a2);
    v20 = sub_10001D964();
    Logger.logObject.getter(v20);
    v21 = sub_100039EB4();
    if (sub_1000AB2B4(v21))
    {
      v22 = sub_10001D8D4(22);
      v55 = v17;
      v23 = sub_10001D8D4(64);
      v62[0] = v23;
      *(_DWORD *)v22 = 136315394;
      sub_10001E3E0();
      v24 = sub_1000AB288();
      sub_1000102C0(v24, v25, v26);
      *(_QWORD *)&v59 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, (char *)&v59 + 8, v22 + 4);
      sub_10002BD84(a2);
      *(_WORD *)(v22 + 12) = 2080;
      sub_10001D964();
      sub_1000AB02C(v55, v28, v62);
      *(_QWORD *)&v59 = v29;
      sub_1000AB09C((uint64_t)&v59, (uint64_t)&v59 + 8);
      sub_100037F88();
      sub_1000AB120((void *)&_mh_execute_header, v30, v31, "Failed to get asset location for %s: %s");
      sub_10002BA20(v23);
      sub_10001D790(v23);
      sub_10001D790(v22);

    }
    else
    {

      sub_1000AAE00();
      sub_10002BA68(a2);
    }
    v32 = sub_10002B8A0();
    sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_10002B560(v32, v33);
    v35 = v34;
    sub_1000AB16C();
    *v35 = String.init<A>(describing:)(v62, v65);
    v35[1] = v36;
    v37 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v35, enum case for ModelManagerError.modelCatalogError(_:), v32);
    swift_willThrow(v37, v38, v39, v40, v41, v42, v43, v44);
    v12 = v2;
    return swift_errorRelease(v12);
  }
  if (v57)
  {
    v13 = sub_100002F78(&qword_1000FEA20);
    v14 = sub_100002F78(&qword_1000FEA38);
    if ((swift_dynamicCast(&v59, v56, v13, v14, 6) & 1) != 0)
    {
      if (*((_QWORD *)&v60 + 1))
      {
        sub_10000667C(&v59, (uint64_t)v62);
        v15 = v63;
        v16 = v64;
        v65 = sub_10001C830(v62, v63);
        *((_QWORD *)&v60 + 1) = swift_getAssociatedTypeWitness(0, v16, v15, &protocol requirements base descriptor for AssetBackedResource, &associated type descriptor for AssetBackedResource.CatalogAssetType);
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v16, v15, *((_QWORD *)&v60 + 1), &protocol requirements base descriptor for AssetBackedResource);
        sub_100048F1C(&v59);
        dispatch thunk of AssetBackedResource.fetchAsset()(v15, v16);
        v46 = *((_QWORD *)&v60 + 1);
        v47 = AssociatedConformanceWitness;
        sub_10001C830(&v59, *((uint64_t *)&v60 + 1));
        AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v47, v46, &protocol requirements base descriptor for CatalogAssetProtocol, &associated type descriptor for CatalogAssetProtocol.C);
        v57 = AssociatedTypeWitness;
        v49 = swift_getAssociatedConformanceWitness(v47, v46, AssociatedTypeWitness, &protocol requirements base descriptor for CatalogAssetProtocol);
        v58 = v49;
        sub_100048F1C(v56);
        dispatch thunk of CatalogAssetProtocol.contents.getter(v46, v47);
        dispatch thunk of AssetContents.baseURL.getter(AssociatedTypeWitness, v49);
        sub_1000AB39C();
        sub_1000AB23C();
        sub_100005630(v50, v51, v52, v53);
        sub_10000650C(v56);
        sub_10000650C(&v59);
        return sub_10000650C(v62);
      }
    }
    else
    {
      AssociatedConformanceWitness = 0;
      v59 = 0u;
      v60 = 0u;
    }
  }
  else
  {
    sub_10002AD5C((uint64_t)v56, &qword_1000FEA18);
    v59 = 0u;
    v60 = 0u;
    AssociatedConformanceWitness = 0;
  }
  sub_10002AD5C((uint64_t)&v59, &qword_1000FEA40);
  v45 = sub_1000AB39C();
  return sub_1000AB1A4(v45);
}

uint64_t sub_1000A3CA8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[5] = v0;
  v2 = sub_100002F78(&qword_1000FB230);
  v1[6] = sub_10001D7CC(v2);
  v3 = sub_100002F78(&qword_1000FEAA8);
  v1[7] = v3;
  v1[8] = sub_10001D7CC(v3);
  v4 = sub_100002F78(&qword_1000FEAB0);
  v1[9] = sub_10001D7CC(v4);
  v5 = sub_100002F78(&qword_1000FEAB8);
  v1[10] = sub_10001D7CC(v5);
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_1000A3D28()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t (*v30)();
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t (*v41)(void);

  sub_10001E6F0();
  if (qword_1000FB158 != -1)
    goto LABEL_34;
  while (1)
  {
    v5 = sub_10001DD64();
    sub_100037AC4(v5, (uint64_t)qword_1000FE768);
    v6 = sub_10001E9D0();
    if (os_log_type_enabled((os_log_t)v0, v6))
    {
      v7 = (uint8_t *)sub_10001D8D4(2);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v0, v6, "Cycled ModelCatalog asset lock", v7, 2u);
      sub_10001D790((uint64_t)v7);
    }
    v8 = v1[5];

    v9 = OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_tasksUsingAssetLock;
    v1[11] = OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_tasksUsingAssetLock;
    v10 = (uint64_t *)(v8 + v9);
    v11 = sub_10002BE5C();
    sub_10002B308(v11, v12, 0);
    v13 = *v10;
    if (!*(_QWORD *)(*v10 + 16))
      break;
    v0 = 1;
    while (1)
    {
      sub_1000AB0A4();
      if (!v17)
      {
        v22 = v16 & 0x3F;
        if (v22 < 7)
          goto LABEL_21;
        if (!*(_QWORD *)(v13 + 72))
        {
          if (v22 < 8)
            goto LABEL_21;
          if (!*(_QWORD *)(v13 + 80))
          {
            sub_1000AB1D4();
            while (v23 - 8 < v24)
            {
              if (*(_QWORD *)(v13 + 8 * v23++))
                goto LABEL_7;
            }
LABEL_21:
            sub_10002B26C(v1[9], v14, v15, v1[7]);
            goto LABEL_22;
          }
        }
      }
LABEL_7:
      sub_1000AB088();
      if (v19)
        goto LABEL_21;
      if (v4 < 0 || v4 >= v18)
        break;
      sub_1000AB074();
      if ((v20 & 1) == 0)
        goto LABEL_33;
      v21 = sub_1000AAE0C();
      sub_1000AAD04(v21);
      sub_1000AAD9C();
      sub_1000AAF0C();
      sub_10001DBE4();
      sub_10002AD5C(v3, &qword_1000FEAA8);
      sub_1000AAE60();
      sub_1000AB0C0();
      if (!v19)
      {
        sub_1000AAFE4();
        v40 = swift_task_alloc(async function pointer to Task.value.getter[1]);
        sub_1000AAF90(v40);
        sub_100002F78(&qword_1000FB5F8);
        qword_1000FEAB8 = (uint64_t)v1;
        unk_1000FEAC0 = sub_1000A4064;
        sub_1000AB268();
        return sub_1000AAD2C();
      }
LABEL_22:
      sub_1000AB0EC();
      sub_1000AAD48();
      sub_1000AAE4C();
      if (!v26)
        goto LABEL_25;
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    swift_once(&qword_1000FB158, sub_1000A1974);
  }
  v2 = v1[5];
LABEL_25:
  v27 = OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_cycleAssetLockTask;
  v28 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_cycleAssetLockTask);
  v1[17] = v28;
  if (v28)
  {
    sub_10001E194();
    v29 = (_QWORD *)sub_10001E784();
    v1[18] = v29;
    sub_100002F78(&qword_1000FB5F8);
    v30 = sub_1000A439C;
LABEL_29:
    *v29 = v1;
    v29[1] = v30;
    sub_1000AB278();
    return sub_1000AAD2C();
  }
  else
  {
    v31 = v1[6];
    v32 = sub_10001DBC0();
    sub_10002B26C(v31, v33, v34, v32);
    sub_100006710(&qword_1000FEA78, type metadata accessor for ModelCatalogProvider);
    v35 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F49B8, 40);
    v36 = sub_1000AAE84(v35);
    sub_1000AB198(v36, (uint64_t)&unk_1000FEAC8);
    sub_1000AB04C(v37);
    v38 = *(_QWORD *)(v2 + v27);
    v1[20] = v38;
    if (v38)
    {
      sub_10001E194();
      v29 = (_QWORD *)sub_10001E784();
      v1[21] = v29;
      sub_100002F78(&qword_1000FB5F8);
      v30 = sub_1000A4428;
      goto LABEL_29;
    }
    sub_1000AAE3C();
    sub_10001E330();
    sub_10001D938();
    sub_10001EAC8();
    v41 = (uint64_t (*)(void))sub_10001E5D0();
    return sub_10002B160(v41);
  }
}

uint64_t sub_1000A4064()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)();
  uint64_t v6;
  _QWORD *v8;

  v2 = (_QWORD *)*v1;
  v8 = v2;
  sub_1000AB3CC(v2[15], &v8);
  if (v0)
  {
    v3 = v2[14];
    v4 = v2[5];
    swift_errorRelease(v0);
    swift_release(v3);
    v5 = sub_1000A44C4;
    v6 = v4;
  }
  else
  {
    v6 = v2[5];
    v5 = sub_1000A40E0;
  }
  return swift_task_switch(v5, v6, 0);
}

void sub_1000A40E0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t (*v27)();
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void);

  sub_10001E6F0();
  v3 = v0[16];
  v4 = v0[13];
  v6 = v0[9];
  v5 = v0[10];
  swift_release(v0[14]);
  sub_1000AB23C();
  sub_100005630(v7, v8, v9, v3);
  sub_10002AD5C(v5, &qword_1000FEAB8);
  sub_10007E7EC(v6, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_1000AAE4C();
  if (v10)
  {
    while (1)
    {
      sub_1000AB0A4();
      if (!v14)
      {
        v19 = v13 & 0x3F;
        if (v19 < 7)
          goto LABEL_17;
        if (!*(_QWORD *)(v6 + 72))
        {
          if (v19 < 8)
            goto LABEL_17;
          if (!*(_QWORD *)(v6 + 80))
            break;
        }
      }
LABEL_3:
      sub_1000AB088();
      if (v16)
        goto LABEL_17;
      if (v2 < 0 || v2 >= v15)
      {
        __break(1u);
LABEL_27:
        __break(1u);
        return;
      }
      sub_1000AB074();
      if ((v17 & 1) == 0)
        goto LABEL_27;
      v18 = sub_1000AAE0C();
      sub_1000AAD04(v18);
      sub_1000AAD9C();
      sub_1000AAF0C();
      sub_10001DBE4();
      sub_10002AD5C(v1, &qword_1000FEAA8);
      sub_1000AAE60();
      sub_1000AB0C0();
      if (!v16)
      {
        sub_1000AAFE4();
        v36 = swift_task_alloc(async function pointer to Task.value.getter[1]);
        sub_1000AAF90(v36);
        sub_100002F78(&qword_1000FB5F8);
        qword_1000FEAB8 = (uint64_t)v0;
        unk_1000FEAC0 = sub_1000A4064;
        sub_1000AB268();
        goto LABEL_24;
      }
LABEL_18:
      sub_1000AB0EC();
      sub_1000AAD48();
      sub_1000AAE4C();
      if (!v23)
        goto LABEL_19;
    }
    sub_1000AB1D4();
    while (v20 - 8 < v21)
    {
      if (*(_QWORD *)(v6 + 8 * v20++))
        goto LABEL_3;
    }
LABEL_17:
    sub_10002B26C(v0[9], v11, v12, v0[7]);
    goto LABEL_18;
  }
LABEL_19:
  v24 = OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_cycleAssetLockTask;
  v25 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_cycleAssetLockTask);
  v0[17] = v25;
  if (v25)
  {
    sub_10001E194();
    v26 = (_QWORD *)sub_10001E784();
    v0[18] = v26;
    sub_100002F78(&qword_1000FB5F8);
    v27 = sub_1000A439C;
  }
  else
  {
    v28 = v0[6];
    v29 = sub_10001DBC0();
    sub_10002B26C(v28, v30, v31, v29);
    sub_100006710(&qword_1000FEA78, type metadata accessor for ModelCatalogProvider);
    v32 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F49B8, 40);
    v33 = sub_1000AAE84(v32);
    sub_1000AB198(v33, (uint64_t)&unk_1000FEAC8);
    sub_1000AB04C(v34);
    v35 = *(_QWORD *)(v4 + v24);
    v0[20] = v35;
    if (!v35)
    {
      sub_1000AAE3C();
      sub_10001E330();
      sub_10001D938();
      sub_10001EAC8();
      v37 = (uint64_t (*)(void))sub_10001E5D0();
      sub_10002B160(v37);
      return;
    }
    sub_10001E194();
    v26 = (_QWORD *)sub_10001E784();
    v0[21] = v26;
    sub_100002F78(&qword_1000FB5F8);
    v27 = sub_1000A4428;
  }
  *v26 = v0;
  v26[1] = v27;
  sub_1000AB278();
LABEL_24:
  sub_1000AAD2C();
}

uint64_t sub_1000A439C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 152) = v1;
  swift_task_dealloc(v3);
  return sub_10001D6D0();
}

uint64_t sub_1000A43EC()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  swift_release(*(_QWORD *)(v0 + 136));
  sub_1000AAE3C();
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  v1 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_10002B7C0(v1);
}

uint64_t sub_1000A4428()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 176) = v1;
  swift_task_dealloc(v3);
  if (v1)
    swift_release(*(_QWORD *)(v0 + 160));
  return sub_10001D6D0();
}

uint64_t sub_1000A4488()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  swift_release(*(_QWORD *)(v0 + 160));
  sub_1000AAE3C();
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  v1 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_10002B7C0(v1);
}

void sub_1000A44C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t (*v24)();
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(void);

  sub_10001E6F0();
  v5 = v0[16];
  v6 = v0[10];
  (*(void (**)(_QWORD, _QWORD))(v0[13] + 8))(v0[9], v0[12]);
  sub_100005630(v6, 1, 1, v5);
  sub_10002AD5C(v6, &qword_1000FEAB8);
  sub_1000AAE4C();
  if (v7)
  {
    while (1)
    {
      sub_1000AB0A4();
      if (!v11)
      {
        v16 = v10 & 0x3F;
        if (v16 < 7)
          goto LABEL_17;
        if (!*(_QWORD *)(v1 + 72))
        {
          if (v16 < 8)
            goto LABEL_17;
          if (!*(_QWORD *)(v1 + 80))
            break;
        }
      }
LABEL_3:
      sub_1000AB088();
      if (v13)
        goto LABEL_17;
      if (v4 < 0 || v4 >= v12)
      {
        __break(1u);
LABEL_27:
        __break(1u);
        return;
      }
      sub_1000AB074();
      if ((v14 & 1) == 0)
        goto LABEL_27;
      v15 = sub_1000AAE0C();
      sub_1000AAD04(v15);
      sub_1000AAD9C();
      sub_1000AAF0C();
      sub_10001DBE4();
      sub_10002AD5C(v3, &qword_1000FEAA8);
      sub_1000AAE60();
      sub_1000AB0C0();
      if (!v13)
      {
        sub_1000AAFE4();
        v33 = swift_task_alloc(async function pointer to Task.value.getter[1]);
        sub_1000AAF90(v33);
        sub_100002F78(&qword_1000FB5F8);
        qword_1000FEAB8 = (uint64_t)v0;
        unk_1000FEAC0 = sub_1000A4064;
        sub_1000AB268();
        goto LABEL_24;
      }
LABEL_18:
      sub_1000AB0EC();
      sub_1000AAD48();
      sub_1000AAE4C();
      if (!v20)
        goto LABEL_19;
    }
    sub_1000AB1D4();
    while (v17 - 8 < v18)
    {
      if (*(_QWORD *)(v1 + 8 * v17++))
        goto LABEL_3;
    }
LABEL_17:
    sub_10002B26C(v0[9], v8, v9, v0[7]);
    goto LABEL_18;
  }
LABEL_19:
  v21 = OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_cycleAssetLockTask;
  v22 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_cycleAssetLockTask);
  v0[17] = v22;
  if (v22)
  {
    sub_10001E194();
    v23 = (_QWORD *)sub_10001E784();
    v0[18] = v23;
    sub_100002F78(&qword_1000FB5F8);
    v24 = sub_1000A439C;
  }
  else
  {
    v25 = v0[6];
    v26 = sub_10001DBC0();
    sub_10002B26C(v25, v27, v28, v26);
    sub_100006710(&qword_1000FEA78, type metadata accessor for ModelCatalogProvider);
    v29 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F49B8, 40);
    v30 = sub_1000AAE84(v29);
    sub_1000AB198(v30, (uint64_t)&unk_1000FEAC8);
    sub_1000AB04C(v31);
    v32 = *(_QWORD *)(v2 + v21);
    v0[20] = v32;
    if (!v32)
    {
      sub_1000AAE3C();
      sub_10001E330();
      sub_10001D938();
      sub_10001EAC8();
      v34 = (uint64_t (*)(void))sub_10001E5D0();
      sub_10002B160(v34);
      return;
    }
    sub_10001E194();
    v23 = (_QWORD *)sub_10001E784();
    v0[21] = v23;
    sub_100002F78(&qword_1000FB5F8);
    v24 = sub_1000A4428;
  }
  *v23 = v0;
  v23[1] = v24;
  sub_1000AB278();
LABEL_24:
  sub_1000AAD2C();
}

uint64_t sub_1000A4778()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 136));
  sub_1000AB294();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  return sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000A47C0()
{
  uint64_t v0;

  sub_1000AB294();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  return sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000A4800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4[7] = a4;
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_100002F78(&qword_1000FEA88) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[8] = swift_task_alloc(v5);
  v6 = swift_task_alloc(v5);
  v4[9] = v6;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to static AssetLock.lockAllResources()[1]);
  v4[10] = v7;
  *v7 = v4;
  v7[1] = sub_1000A488C;
  return static AssetLock.lockAllResources()(v6);
}

uint64_t sub_1000A488C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 88) = v1;
  swift_task_dealloc();
  return sub_10001D6D0();
}

uint64_t sub_1000A48DC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);

  v1 = v0[8];
  v2 = v0[9];
  v3 = v0[7];
  sub_1000AB0B8();
  sub_1000AB23C();
  sub_100005630(v4, v5, v6, v7);
  sub_10008B88C(v2, v1, &qword_1000FEA88);
  v8 = sub_10001E4C8();
  sub_10002B308(v8, v9, 33);
  v10 = sub_1000AB434();
  sub_1000AAB7C(v10, v11);
  sub_100080074();
  *(_BYTE *)(v3 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_assetsHaveUpdated) = 0;
  sub_1000A5860();
  *(_QWORD *)(v3 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_cycleAssetLockTask) = 0;
  swift_release();
  sub_10001EAC8();
  sub_10001D938();
  v12 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_1000AB0E0(v12);
}

uint64_t sub_1000A4990()
{
  uint64_t v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v2 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 40) = v2;
  swift_errorRetain(v2);
  v3 = sub_100002F78(&qword_1000FB5F8);
  v4 = String.init<A>(describing:)(v0 + 40, v3);
  v6 = v5;
  if (qword_1000FB158 != -1)
    swift_once(&qword_1000FB158, sub_1000A1974);
  v7 = sub_10001DD64();
  v8 = sub_100002FF8(v7, (uint64_t)qword_1000FE768);
  v9 = sub_10001EBA8(v6);
  Logger.logObject.getter(v9);
  v10 = sub_100039EB4();
  if (sub_10007D4C8(v10))
  {
    v11 = (uint8_t *)sub_10001D8D4(12);
    v12 = sub_10001D8D4(32);
    v27 = v12;
    *(_DWORD *)v11 = 136315138;
    sub_10001D964();
    sub_1000102C0(v4, v6, &v27);
    *(_QWORD *)(v0 + 48) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56);
    sub_10002BD84(v6);
    sub_10001E18C((void *)&_mh_execute_header, v8, v1, "Failed to create new asset lock: %s", v11);
    sub_10001DBB8(v12);
    sub_10001D790(v12);
    sub_10001D790((uint64_t)v11);
  }
  else
  {
    sub_10002BA68(v6);
  }

  v14 = *(_QWORD *)(v0 + 88);
  v15 = sub_10002B8A0();
  sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
  sub_10002B560(v15, v16);
  *v17 = v4;
  v17[1] = v6;
  v18 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v17, enum case for ModelManagerError.modelCatalogError(_:), v15);
  swift_willThrow(v18, v19, v20, v21, v22, v23, v24, v25);
  swift_errorRelease(v14);
  sub_10001E490();
  sub_10002B504();
  return sub_10001D8DC(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1000A4B80()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[5];

  sub_10001D810();
  v2 = v1;
  v20 = v3;
  v19 = *(_QWORD *)(type metadata accessor for AssetVersion(0) - 8);
  sub_10001DD00();
  __chkstk_darwin(v4);
  v5 = sub_1000AB134();
  v6 = type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData(v5);
  sub_10001DD00();
  __chkstk_darwin(v7);
  sub_10001DEA0();
  v8 = v2[3];
  v9 = v2[4];
  sub_10001C830(v2, v8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v9, v8, &protocol requirements base descriptor for CatalogAssetProtocol, &associated type descriptor for CatalogAssetProtocol.C);
  v21[3] = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v9, v8, AssociatedTypeWitness, &protocol requirements base descriptor for CatalogAssetProtocol);
  v21[4] = AssociatedConformanceWitness;
  sub_100048F1C(v21);
  dispatch thunk of CatalogAssetProtocol.contents.getter(v8, v9);
  dispatch thunk of AssetContents.baseURL.getter(AssociatedTypeWitness, AssociatedConformanceWitness);
  sub_10000650C(v21);
  v12 = v2[3];
  v13 = v2[4];
  sub_10001C830(v2, v12);
  v14 = dispatch thunk of CatalogAssetProtocol.version.getter(v12, v13);
  v15 = AssetVersion.number.getter(v14);
  v17 = v16;
  sub_100037D5C(v19);
  v18 = (uint64_t *)(v0 + *(int *)(v6 + 20));
  *v18 = v15;
  v18[1] = v17;
  sub_1000AAAF8(v0, v20, type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData);
  sub_10002BF38();
  sub_100006A68();
}

void sub_1000A4CEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[3];
  uint64_t v23;

  sub_10001D810();
  v5 = v4;
  sub_1000AB044();
  sub_1000AB2CC();
  __chkstk_darwin(v6);
  sub_10001E654();
  v7 = (uint64_t *)(v0 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_tasksUsingAssetLock);
  sub_10002B308(v0 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_tasksUsingAssetLock, (uint64_t)&v23, 0);
  v8 = *v7;
  swift_bridgeObjectRetain(*v7);
  sub_100009FB8(v5, v8);
  v10 = v9;
  sub_10001E034();
  swift_release();
  if (!v10)
  {
    if (qword_1000FB158 != -1)
      swift_once(&qword_1000FB158, sub_1000A1974);
    v11 = sub_10001DD64();
    sub_100002FF8(v11, (uint64_t)qword_1000FE768);
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v1);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.fault.getter();
    if (sub_10007F0A8(v13))
    {
      v15 = (uint8_t *)sub_10001D8D4(12);
      v20 = sub_10001D8D4(32);
      v22[0] = v20;
      *(_DWORD *)v15 = 136315138;
      sub_100006710(&qword_1000FCD30, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
      v17 = dispatch thunk of CustomStringConvertible.description.getter(v1, v16);
      sub_1000102C0(v17, v18, v22);
      v21 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, v22);
      sub_10001E034();
      sub_1000AB22C();
      sub_10001E18C((void *)&_mh_execute_header, v13, v14, "removeTaskFromAssetLockSet called with not present UUID %s", v15);
      sub_10001DBB8(v20);
      sub_10001D790(v20);
      sub_10001D790((uint64_t)v15);
    }
    else
    {
      sub_1000AB22C();
    }

  }
  sub_10002B308((uint64_t)v7, (uint64_t)v22, 33);
  sub_1000AA9B8(v5);
  swift_endAccess();
  swift_release();
  sub_100006A68();
}

uint64_t sub_1000A4EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  v5 = sub_100002F78(&qword_1000FB230);
  v4[12] = sub_10001D7CC(v5);
  v6 = sub_1000AB044();
  v4[13] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[14] = v7;
  v4[15] = *(_QWORD *)(v7 + 64);
  v4[16] = sub_10001E784();
  v4[17] = sub_10001E784();
  v8 = sub_1000AB0B8();
  v4[18] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[19] = v9;
  v4[20] = *(_QWORD *)(v9 + 64);
  v4[21] = sub_10001E784();
  v4[22] = sub_10001E784();
  sub_100002F78(&qword_1000FEA88);
  v4[23] = sub_10001E784();
  v4[24] = sub_10001E784();
  sub_10001D7B8();
  return sub_10001D6D0();
}

uint64_t sub_1000A4FC8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t (*v86)(uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v2 = *(void **)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_assetLock;
  *(_QWORD *)(v0 + 200) = OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_assetLock;
  v6 = v4 + v5;
  sub_10002B308(v4 + v5, v0 + 16, 0);
  sub_10008B6B4(v6, (uint64_t)v2, &qword_1000FEA88);
  v7 = sub_100005700((uint64_t)v2, 1, v3);
  sub_10002AD5C((uint64_t)v2, &qword_1000FEA88);
  if ((_DWORD)v7 == 1)
  {
    v8 = (_QWORD *)swift_task_alloc(dword_1000FE7C4);
    *(_QWORD *)(v0 + 208) = v8;
    *v8 = v0;
    v8[1] = sub_1000A52CC;
    return sub_1000A3CA8();
  }
  else
  {
    v10 = sub_1000AB1F4();
    sub_10008B6B4(v10, (uint64_t)v2, &qword_1000FEA88);
    if (sub_100005700((uint64_t)v2, 1, v7) == 1)
    {
      sub_10002AD5C(*(_QWORD *)(v0 + 184), &qword_1000FEA88);
      if (qword_1000FB158 != -1)
        swift_once(&qword_1000FB158, sub_1000A1974);
      v11 = sub_10001DD64();
      sub_100037AC4(v11, (uint64_t)qword_1000FE768);
      v12 = sub_100037B50();
      if (sub_100039E20(v12))
      {
        v13 = (_WORD *)sub_10001D8D4(2);
        *v13 = 0;
        sub_100039E4C((void *)&_mh_execute_header, v14, v15, "After cycleAssetLock, assetLock was nil");
        sub_10001D790((uint64_t)v13);
      }

      v16 = sub_10002B8A0();
      sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
      sub_10002B560(v16, v17);
      v19 = sub_10007E954(v18, enum case for ModelManagerError.internalError(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104));
      swift_willThrow(v19, v20, v21, v22, v23, v24, v25, v26);
      sub_1000AB01C(*(_QWORD *)(v0 + 192));
      sub_10001E330();
      sub_10001EAC8();
      sub_10001E490();
      sub_10002B504();
      sub_10002B528();
      sub_10002B4C4();
      return sub_1000AAEB8(*(uint64_t (**)(void))(v0 + 8));
    }
    else
    {
      v27 = sub_1000AACB4();
      sub_1000AB2F4(v27, v28, v29, v30, v31, v32, v33, v34, v63, v67, v71);
      v35 = sub_10001DBC0();
      sub_1000AAFB4(v35);
      sub_1000AB184();
      sub_100006710(&qword_1000FEA78, type metadata accessor for ModelCatalogProvider);
      sub_1000AADBC();
      v38 = (char *)swift_allocObject(&unk_1000F4990, v36, v37);
      v46 = sub_1000AAF20(v38, v39, v40, v41, v42, v43, v44, v45, v64, v68, v72, v75, v78, v81);
      sub_1000AAFFC(v46, v47, v48, v49, v50, v51, v52, v53, v65, v69, v73, v76, v79, v82, v84, v86, v88, v90);
      sub_10001D834(v1);
      v54 = sub_10001E194();
      sub_1000AB408(v54, (uint64_t)&unk_1000FEA98, v55, v56, v57, v58, v59, v60, v66, v70, v74, v77, v80, v83, v85, v87, v89);
      *(_QWORD *)(v0 + 216) = v61;
      sub_10002B308(v1 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_tasksUsingAssetLock, v91, 33);
      swift_retain();
      sub_1000AB3F0();
      sub_100080074();
      v62 = (_QWORD *)swift_task_alloc(async function pointer to Task.value.getter[1]);
      *(_QWORD *)(v0 + 224) = v62;
      type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData(0);
      sub_100002F78(&qword_1000FB5F8);
      *v62 = v0;
      v62[1] = sub_1000A55BC;
      return sub_1000AAED4();
    }
  }
}

uint64_t sub_1000A52CC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;

  v2 = *(_QWORD **)v1;
  v4 = v2;
  sub_1000AB3CC(v2[26], &v4);
  if (!v0)
    return swift_task_switch(sub_1000A5368, v2[11], 0);
  swift_task_dealloc(v2[24]);
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  return sub_10002B698(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1000A5368()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(uint64_t, uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v4 = sub_1000AB1F4();
  sub_10008B6B4(v4, (uint64_t)v1, &qword_1000FEA88);
  if (sub_100005700((uint64_t)v1, 1, v0) == 1)
  {
    sub_10002AD5C(*(_QWORD *)(v2 + 184), &qword_1000FEA88);
    if (qword_1000FB158 != -1)
      swift_once(&qword_1000FB158, sub_1000A1974);
    v5 = sub_10001DD64();
    sub_100037AC4(v5, (uint64_t)qword_1000FE768);
    v6 = sub_100037B50();
    if (sub_100039E20(v6))
    {
      v7 = (_WORD *)sub_10001D8D4(2);
      *v7 = 0;
      sub_100039E4C((void *)&_mh_execute_header, v8, v9, "After cycleAssetLock, assetLock was nil");
      sub_10001D790((uint64_t)v7);
    }

    v10 = sub_10002B8A0();
    sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_10002B560(v10, v11);
    v13 = sub_10007E954(v12, enum case for ModelManagerError.internalError(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104));
    swift_willThrow(v13, v14, v15, v16, v17, v18, v19, v20);
    sub_1000AB01C(*(_QWORD *)(v2 + 192));
    sub_10001E330();
    sub_10001EAC8();
    sub_10001E490();
    sub_10002B504();
    sub_10002B528();
    sub_10002B4C4();
    return sub_1000AAEB8(*(uint64_t (**)(void))(v2 + 8));
  }
  else
  {
    v22 = sub_1000AACB4();
    sub_1000AB2F4(v22, v23, v24, v25, v26, v27, v28, v29, v58, v62, v66);
    v30 = sub_10001DBC0();
    sub_1000AAFB4(v30);
    sub_1000AB184();
    sub_100006710(&qword_1000FEA78, type metadata accessor for ModelCatalogProvider);
    sub_1000AADBC();
    v33 = (char *)swift_allocObject(&unk_1000F4990, v31, v32);
    v41 = sub_1000AAF20(v33, v34, v35, v36, v37, v38, v39, v40, v59, v63, v67, v70, v73, v76);
    sub_1000AAFFC(v41, v42, v43, v44, v45, v46, v47, v48, v60, v64, v68, v71, v74, v77, v79, v81, v83, v85);
    sub_10001D834(v3);
    v49 = sub_10001E194();
    sub_1000AB408(v49, (uint64_t)&unk_1000FEA98, v50, v51, v52, v53, v54, v55, v61, v65, v69, v72, v75, v78, v80, v82, v84);
    *(_QWORD *)(v2 + 216) = v56;
    sub_10002B308(v3 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_tasksUsingAssetLock, v86, 33);
    swift_retain();
    sub_1000AB3F0();
    sub_100080074();
    v57 = (_QWORD *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    *(_QWORD *)(v2 + 224) = v57;
    type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData(0);
    sub_100002F78(&qword_1000FB5F8);
    *v57 = v2;
    v57[1] = sub_1000A55BC;
    return sub_1000AAED4();
  }
}

uint64_t sub_1000A55BC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 232) = v1;
  swift_task_dealloc(v3);
  return sub_10001D6D0();
}

uint64_t sub_1000A560C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;

  v1 = v0[22];
  v2 = v0[19];
  v3 = v0[17];
  v5 = v0[13];
  v4 = v0[14];
  v9 = v0[16];
  v10 = v0[12];
  v6 = swift_release(v0[27]);
  (*(void (**)(uint64_t, uint64_t, __n128))(v4 + 8))(v3, v5, v6);
  sub_10001E808(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B528();
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  v7 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_10001D8DC(v7);
}

uint64_t sub_1000A56A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 112);
  v6 = swift_release(*(_QWORD *)(v0 + 216));
  (*(void (**)(uint64_t, uint64_t, __n128))(v5 + 8))(v3, v4, v6);
  sub_10007E7EC(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_1000AB01C(*(_QWORD *)(v0 + 192));
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  return sub_10002B698(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000A5724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  _QWORD *v10;
  int *v12;

  v8[8] = a4;
  v8[9] = a5;
  v8[7] = a1;
  v12 = (int *)((char *)a6 + *a6);
  v10 = (_QWORD *)swift_task_alloc(a6[1]);
  v8[10] = v10;
  *v10 = v8;
  v10[1] = sub_1000A57A0;
  return ((uint64_t (*)(_QWORD *, uint64_t))v12)(v8 + 2, a8);
}

uint64_t sub_1000A57A0()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001DB38();
  *v2 = *v1;
  *(_QWORD *)(v3 + 88) = v0;
  swift_task_dealloc();
  return sub_10001D6D0();
}

uint64_t sub_1000A57F8()
{
  uint64_t (*v0)(void);

  sub_1000A4B80();
  sub_1000A4CEC();
  v0 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_10001D940(v0);
}

uint64_t sub_1000A5834()
{
  uint64_t v0;

  sub_1000A4CEC();
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1000A5860()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  sub_100002F78(&qword_1000FB230);
  sub_10001DD00();
  __chkstk_darwin(v2);
  sub_10004465C();
  v3 = OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_assetUpdateWatcher;
  if (!*(_QWORD *)(v1 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_assetUpdateWatcher))
  {
    v4 = sub_10001DBC0();
    sub_10002B26C(v0, v5, v6, v4);
    sub_100006710(&qword_1000FEA78, type metadata accessor for ModelCatalogProvider);
    v8 = v7;
    v9 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F4968, 40);
    v9[2] = v1;
    v9[3] = v8;
    v9[4] = v1;
    sub_10001D834(v1);
    *(_QWORD *)(v1 + v3) = sub_100002CAC(v0, (uint64_t)&unk_1000FEA80, (uint64_t)v9);
    swift_release();
  }
  sub_10001E7B4();
}

uint64_t sub_1000A592C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[30] = a4;
  v6 = sub_100002F78(&qword_1000FEA08);
  v4[31] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[32] = v7;
  v4[33] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100002F78(&qword_1000FEA00);
  v4[34] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[35] = v9;
  v4[36] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000A59C0, a4, 0);
}

uint64_t sub_1000A59C0()
{
  uint64_t v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  uint64_t v36;
  uint64_t v37;

  if (qword_1000FB168 != -1)
    swift_once(&qword_1000FB168, sub_1000A19FC);
  v2 = 0;
  v3 = dispatch thunk of CatalogClient.resources()();
  v36 = v0;
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v2 = v0 + 56;
    v5 = (_QWORD *)(v0 + 96);
    v34 = v3;
    v35 = (__int128 *)(v0 + 136);
    v1 = (__int128 *)(v0 + 176);
    v6 = v0 + 16;
    v7 = v3 + 32;
    swift_bridgeObjectRetain(v3);
    v8 = _swiftEmptyArrayStorage;
    do
    {
      sub_100006694(v7, (uint64_t)v5);
      sub_1000AB3B0((uint64_t)v5);
      v9 = sub_100002F78(&qword_1000FEA20);
      v10 = sub_100002F78(&qword_1000FEA38);
      if ((sub_1000AB36C(v6, v2, v9, v10) & 1) == 0)
      {
        *(_QWORD *)(v6 + 32) = 0;
        *(_OWORD *)v6 = 0u;
        *(_OWORD *)(v6 + 16) = 0u;
      }
      sub_10000650C(v5);
      if (*(_QWORD *)(v0 + 40))
      {
        sub_10000667C((__int128 *)v6, (uint64_t)v35);
        sub_10000667C(v35, (uint64_t)v1);
        if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
        {
          sub_1000AB3FC();
          v8 = v12;
        }
        v11 = v8[2];
        if (v11 >= v8[3] >> 1)
        {
          sub_1000AB3FC();
          v8 = v13;
        }
        v8[2] = v11 + 1;
        sub_10000667C(v1, (uint64_t)&v8[5 * v11 + 4]);
        v0 = v36;
      }
      else
      {
        sub_10002AD5C(v6, &qword_1000FEA40);
      }
      v7 += 40;
      --v4;
    }
    while (v4);
    sub_10002BA68(v34);
  }
  else
  {
    swift_bridgeObjectRelease(v3);
    v8 = _swiftEmptyArrayStorage;
  }
  sub_1000AB428((uint64_t)v8);
  if (v2)
  {
    sub_10001D8B4();
    *(_QWORD *)(v0 + 232) = v2;
    swift_errorRetain(v2);
    v14 = sub_100002F78(&qword_1000FB5F8);
    String.init<A>(describing:)(v0 + 232, v14);
    v16 = v15;
    if (qword_1000FB158 != -1)
      swift_once(&qword_1000FB158, sub_1000A1974);
    v17 = sub_10001DD64();
    v18 = sub_100002FF8(v17, (uint64_t)qword_1000FE768);
    v19 = sub_10001D964();
    Logger.logObject.getter(v19);
    v20 = sub_100037B50();
    if (sub_1000962E8(v20))
    {
      v21 = (uint8_t *)sub_10001D8D4(12);
      v37 = sub_10001D8D4(32);
      *(_DWORD *)v21 = 136315138;
      sub_10001D964();
      v22 = sub_1000AB0F8();
      sub_1000102C0(v22, v23, v24);
      *(_QWORD *)(v36 + 216) = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v36 + 224);
      sub_10002BD84(v16);
      sub_10001E18C((void *)&_mh_execute_header, v18, (os_log_type_t)v1, "Failed to monitor model catalog for updates to all assets: %s", v21);
      sub_10001DBB8(v37);
      sub_10001D790(v37);
      v0 = v36;
      sub_10001D790((uint64_t)v21);

      swift_errorRelease(v2);
    }
    else
    {
      swift_errorRelease(v2);

      sub_10002BA68(v16);
    }
    sub_1000AB338(*(_QWORD *)(v0 + 240));
    sub_10001E330();
    sub_10001D938();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v28 = *(_QWORD *)(v0 + 256);
    v27 = *(_QWORD *)(v0 + 264);
    v29 = *(_QWORD *)(v0 + 248);
    sub_10001D8B4();
    AsyncStream.makeAsyncIterator()(v29);
    sub_10001E808(v27, *(uint64_t (**)(uint64_t, uint64_t))(v28 + 8));
    sub_100006710(&qword_1000FEA78, type metadata accessor for ModelCatalogProvider);
    v30 = OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_assetsHaveUpdated;
    *(_QWORD *)(v0 + 296) = v31;
    *(_QWORD *)(v0 + 304) = v30;
    v32 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 312) = v32;
    *v32 = v0;
    v32[1] = sub_1000A5DE0;
    v33 = sub_1000AB358();
    return AsyncStream.Iterator.next(isolation:)(v33);
  }
}

uint64_t sub_1000A5DE0()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 312));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_1000A5E18()
{
  void *v0;
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v3 = *(_QWORD *)(v1 + 224);
  if (v3)
  {
    if ((*(_BYTE *)(*(_QWORD *)(v1 + 240) + *(_QWORD *)(v1 + 304)) & 1) != 0)
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v1 + 224));
    }
    else
    {
      if (qword_1000FB158 != -1)
        swift_once(&qword_1000FB158, sub_1000A1974);
      v10 = sub_10001DD64();
      v11 = sub_100002FF8(v10, (uint64_t)qword_1000FE768);
      v12 = sub_10001E140();
      Logger.logObject.getter(v12);
      v13 = sub_10001E9D0();
      if (sub_10007D4C8(v13))
      {
        v14 = sub_10001D8D4(12);
        v15 = sub_10001D8D4(32);
        v22 = v15;
        *(_DWORD *)v14 = 136315138;
        sub_10001E140();
        v16 = sub_100002F78(&qword_1000FEA38);
        v17 = Array.description.getter(v3, v16);
        v19 = v18;
        swift_bridgeObjectRelease(v3);
        sub_1000102C0(v17, v19, &v22);
        *(_QWORD *)(v14 + 4) = v20;
        swift_bridgeObjectRelease(v19);
        sub_10002BA68(v3);
        sub_10001E18C((void *)&_mh_execute_header, v11, v2, "ModelCatalog assets have updated (%s)", (uint8_t *)v14);
        sub_10001DBB8(v15);
        sub_10001D790(v15);
        sub_10001D790(v14);
      }
      else
      {
        sub_10002BA68(v3);
      }

      *(_BYTE *)(*(_QWORD *)(v1 + 240) + *(_QWORD *)(v1 + 304)) = 1;
    }
    v21 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v1 + 312) = v21;
    *v21 = v1;
    v21[1] = sub_1000A5DE0;
    return AsyncStream.Iterator.next(isolation:)(v1 + 224);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 280) + 8))(*(_QWORD *)(v1 + 288), *(_QWORD *)(v1 + 272));
    if (qword_1000FB158 != -1)
      swift_once(&qword_1000FB158, sub_1000A1974);
    v4 = sub_10001DD64();
    sub_100037AC4(v4, (uint64_t)qword_1000FE768);
    v5 = sub_100037B50();
    if (sub_100039E20(v5))
    {
      v6 = (_WORD *)sub_10001D8D4(2);
      *v6 = 0;
      sub_100039E4C((void *)&_mh_execute_header, v7, v8, "ModelCatalog asset update stream ended unexpectedly");
      sub_10001D790((uint64_t)v6);
    }

    sub_1000AB338(*(_QWORD *)(v1 + 240));
    sub_10001E330();
    sub_10001D938();
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000A60BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4[58] = a3;
  v4[59] = v3;
  v4[56] = a1;
  v4[57] = a2;
  v5 = sub_10002B8A0();
  v4[60] = v5;
  v4[61] = *(_QWORD *)(v5 - 8);
  v4[62] = sub_10001E784();
  v4[63] = sub_10001E784();
  v6 = sub_100002F78(&qword_1000FBED0);
  v4[64] = sub_10001D7CC(v6);
  v7 = sub_1000AB39C();
  v4[65] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[66] = v8;
  v4[67] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100002F78(&qword_1000FC828);
  v4[68] = sub_10001D7CC(v9);
  v10 = type metadata accessor for FilePath(0);
  v4[69] = v10;
  v4[70] = *(_QWORD *)(v10 - 8);
  v4[71] = sub_10001E784();
  v4[72] = sub_10001E784();
  v4[73] = type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData(0);
  v4[74] = sub_10001E784();
  v4[75] = sub_10001E784();
  sub_10001D7B8();
  return sub_10001D6D0();
}

uint64_t sub_1000A61C0()
{
  uint64_t v0;
  uint64_t v1;
  uint32_t *p_ivar_base_size;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  os_log_type_t v15;
  _BOOL4 v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t (*v45)(void);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  NSObject *v50;
  uint64_t v51;
  os_log_type_t v52;
  os_log_type_t v53;
  _BOOL4 v54;
  uint64_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  uint64_t v62;
  os_log_type_t v63;
  _BOOL4 v64;
  unint64_t v65;
  uint64_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  NSObject *v106;
  uint64_t v107;
  os_log_type_t v108;
  os_log_type_t v109;
  _BOOL4 v110;
  uint8_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140[2];

  v1 = v0 + 392;
  if (qword_1000FB168 != -1)
    swift_once(&qword_1000FB168, sub_1000A19FC);
  dispatch thunk of CatalogClient.resource(for:)(*(_QWORD *)(v0 + 456));
  p_ivar_base_size = &DaemonRequest.ivar_base_size;
  v139 = v0 + 384;
  if (*(_QWORD *)(v0 + 80))
  {
    v23 = v0 + 336;
    v24 = (__int128 *)sub_1000AB434();
    sub_10000667C(v24, v25);
    sub_100006694(v0 + 16, v0 + 336);
    v26 = sub_100002F78(&qword_1000FEA20);
    v27 = sub_100002F78(&qword_1000FEA28);
    v28 = sub_1000AB36C(v0 + 256, v0 + 336, v26, v27);
    if (!(_DWORD)v28)
    {
      *(_QWORD *)(v0 + 288) = 0;
      *(_OWORD *)(v0 + 256) = 0u;
      *(_OWORD *)(v0 + 272) = 0u;
      sub_10002BBF0(v28, &qword_1000FEA30);
      if (qword_1000FB158 != -1)
        swift_once(&qword_1000FB158, sub_1000A1974);
      v61 = *(NSObject **)(v0 + 464);
      v62 = sub_10001DD64();
      sub_100002FF8(v62, (uint64_t)qword_1000FE768);
      sub_10001EBA8((uint64_t)v61);
      sub_10002B3CC();
      v63 = sub_100039EB4();
      v64 = sub_1000962E8(v63);
      v65 = *(_QWORD *)(v0 + 464);
      if (v64)
      {
        v136 = v0 + 392;
        v66 = *(_QWORD *)(v0 + 456);
        v67 = (uint8_t *)sub_10001D8D4(12);
        v68 = sub_10001D8D4(32);
        v140[0] = v68;
        *(_DWORD *)v67 = 136315138;
        swift_bridgeObjectRetain(v65);
        v69 = v66;
        v1 = v0 + 392;
        sub_1000102C0(v69, v65, v140);
        *(_QWORD *)(v0 + 384) = v70;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v139, v0 + 392);
        sub_10002BD84(v65);
        sub_10001E18C((void *)&_mh_execute_header, v61, (os_log_type_t)(v0 + 80), "Asset %s cannot be converted to a Model Catalog Managed Resource", v67);
        sub_10001DBB8(v68);
        sub_10001D790(v68);
        sub_10001D790((uint64_t)v67);

      }
      else
      {

        sub_10002BA68(v65);
      }
      v77 = *(_QWORD *)(v0 + 480);
      v78 = *(_QWORD *)(v0 + 488);
      sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
      v80 = sub_10002B560(v77, v79);
      v82 = sub_1000AB21C(v80, v81);
      sub_10007E954((uint64_t)v82, enum case for ModelManagerError.unrecognizedModelCatalogResource(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 104));
      v83 = sub_10001D964();
      sub_1000AB374(v83, v84, v85, v86, v87, v88, v89, v90, v129, v130, v0 + 16, v136, v139, v140[0]);
      v91 = v134;
LABEL_41:
      sub_10000650C(v91);
      p_ivar_base_size = (_DWORD *)(&DaemonRequest + 8);
LABEL_4:
      v3 = *(_QWORD *)(v0 + 504);
      *(_QWORD *)(v0 + 424) = v23;
      swift_errorRetain(v23);
      sub_100002F78(&qword_1000FB5F8);
      if (sub_1000AB1C4(v3, v0 + 424))
      {
        v4 = *(_QWORD *)(v0 + 496);
        v5 = *(_QWORD *)(v0 + 504);
        v6 = *(_QWORD *)(v0 + 480);
        v7 = *(_QWORD *)(v0 + 488);
        swift_errorRelease(v23);
        sub_10001EA84(v4, v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32));
        sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
        sub_10002B560(v6, v8);
        sub_10001EA84(v9, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));
        sub_10007D88C();
        sub_1000AB258();
        v10 = *(_QWORD *)(v0 + 424);
      }
      else
      {
        swift_errorRelease(*(_QWORD *)(v0 + 424));
        *(_QWORD *)(v0 + 408) = v23;
        swift_errorRetain(v23);
        v138 = sub_1000AB308();
        v12 = v11;
        if (*((_QWORD *)p_ivar_base_size + 43) != -1)
          swift_once(&qword_1000FB158, sub_1000A1974);
        v13 = *(NSObject **)(v0 + 464);
        v14 = sub_10001DD64();
        sub_100002FF8(v14, (uint64_t)qword_1000FE768);
        sub_10001EBA8((uint64_t)v13);
        sub_10001EBA8(v12);
        sub_10002B3CC();
        v15 = sub_100039EB4();
        v16 = sub_10007F0A8(v13);
        v17 = *(_QWORD *)(v0 + 464);
        if (v16)
        {
          v131 = *(_QWORD *)(v0 + 456);
          v137 = v1;
          v18 = sub_10001D8D4(22);
          v133 = sub_10001D8D4(64);
          v140[0] = v133;
          *(_DWORD *)v18 = 136315394;
          sub_10001DBE4();
          sub_1000102C0(v131, v17, v140);
          *(_QWORD *)(v0 + 400) = v19;
          sub_10002B800(v0 + 400, v0 + 408);
          sub_10002BD84(v17);
          *(_WORD *)(v18 + 12) = 2080;
          sub_10001E140();
          v20 = v138;
          sub_10008F414(v138, v21, v140);
          *(_QWORD *)(v0 + 392) = v22;
          sub_10002B800(v137, v0 + 400);
          sub_10002BD84(v12);
          sub_10002B4A0((void *)&_mh_execute_header, v13, v15, "Failed to get asset versioned data for %s: %s", (uint8_t *)v18);
          sub_10002BA20(v133);
          sub_10001D790(v133);
          sub_10001D790(v18);

        }
        else
        {

          sub_10002BA68(v12);
          sub_10002BA68(v17);
          v20 = v138;
        }
        v39 = *(_QWORD *)(v0 + 480);
        sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
        v41 = sub_10002B560(v39, v40);
        v43 = sub_10007E0C4(v41, v42);
        *v44 = v20;
        v44[1] = v12;
        sub_1000AB454(v43, enum case for ModelManagerError.modelCatalogError(_:));
        sub_10007D88C();
        v10 = v23;
      }
      swift_errorRelease(v10);
      sub_1000AAD78();
      sub_10001D938();
      sub_10001EAC8();
      sub_10001E490();
      sub_10002B504();
      sub_10002B528();
      sub_10002B4C4();
      sub_10002B70C();
      sub_10002BDF0();
      v45 = *(uint64_t (**)(void))(v0 + 8);
      return sub_10001DBC8(v45);
    }
    sub_10000667C((__int128 *)(v0 + 256), v0 + 296);
    v30 = *(_QWORD *)(v0 + 320);
    v29 = *(_QWORD *)(v0 + 328);
    sub_10001C830((_QWORD *)(v0 + 296), v30);
    if ((dispatch thunk of CatalogResource.assetBacked.getter(v30, *(_QWORD *)(v29 + 8)) & 1) != 0)
    {
      sub_1000AB3B0(v0 + 296);
      v31 = sub_100002F78(&qword_1000FEA38);
      v32 = sub_1000AB36C(v0 + 136, v0 + 176, v27, v31);
      if ((_DWORD)v32)
      {
        v33 = *(_QWORD *)(v0 + 472);
        v34 = (__int128 *)sub_10002BE5C();
        sub_10000667C(v34, v35);
        sub_1000AB3B0(v0 + 216);
        v36 = sub_100006A80((uint64_t)&unk_1000F48C8, 64);
        *(_QWORD *)(v0 + 608) = v36;
        *(_QWORD *)(v36 + 16) = v33;
        sub_10000667C((__int128 *)(v0 + 96), v36 + 24);
        swift_retain();
        v37 = (_QWORD *)sub_10001E784();
        *(_QWORD *)(v0 + 616) = v37;
        *v37 = v0;
        v37[1] = sub_1000A6C40;
        return sub_1000A4EF8(*(_QWORD *)(v0 + 600), (uint64_t)&unk_1000FEA50, v36);
      }
      *(_QWORD *)(v0 + 168) = 0;
      *(_OWORD *)(v0 + 136) = 0u;
      *(_OWORD *)(v0 + 152) = 0u;
      sub_10002BBF0(v32, &qword_1000FEA40);
      if (qword_1000FB158 != -1)
        swift_once(&qword_1000FB158, sub_1000A1974);
      v106 = *(NSObject **)(v0 + 464);
      v107 = sub_10001DD64();
      v108 = sub_100002FF8(v107, (uint64_t)qword_1000FE768);
      sub_10001EBA8((uint64_t)v106);
      sub_10002B3CC();
      v109 = sub_100039EB4();
      v110 = sub_100039E20(v109);
      v23 = *(_QWORD *)(v0 + 464);
      if (v110)
      {
        v136 = *(_QWORD *)(v0 + 456);
        v139 = v0 + 416;
        v111 = (uint8_t *)sub_10001D8D4(12);
        v112 = sub_10001D8D4(32);
        v140[0] = v112;
        *(_DWORD *)v111 = 136315138;
        v130 = (uint64_t)(v111 + 4);
        sub_10001E4D4();
        sub_1000102C0(v136, v23, v140);
        *(_QWORD *)(v0 + 416) = v113;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 416, v0 + 424);
        sub_10002BD84(v23);
        sub_10001E18C((void *)&_mh_execute_header, v106, v108, "Asset %s cannot be converted to a Model Catalog Asset Backed Resource", v111);
        sub_10001DBB8(v112);
        v114 = v112;
        v1 = v0 + 392;
        sub_10001D790(v114);
        sub_10001D790((uint64_t)v111);

      }
      else
      {

        sub_10002BA68(v23);
      }
      v115 = *(_QWORD *)(v0 + 480);
      v116 = *(_QWORD *)(v0 + 488);
      sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
      v118 = sub_10002B560(v115, v117);
      v120 = sub_1000AB21C(v118, v119);
      sub_10007E954((uint64_t)v120, enum case for ModelManagerError.unrecognizedModelCatalogResource(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v116 + 104));
      v121 = sub_10001D964();
      sub_1000AB374(v121, v122, v123, v124, v125, v126, v127, v128, v129, v130, v0 + 16, v136, v139, v140[0]);
      sub_10000650C(v135);
      v91 = (_QWORD *)(v0 + 296);
      goto LABEL_41;
    }
    v72 = *(_QWORD *)(v0 + 568);
    v73 = *(_QWORD *)(v0 + 560);
    v74 = *(_QWORD *)(v0 + 552);
    v75 = *(char **)(v0 + 448);
    sub_1000AB3A4();
    sub_10000650C((_QWORD *)(v0 + 16));
    *(_QWORD *)v75 = 0;
    *((_QWORD *)v75 + 1) = 0xE000000000000000;
    v76 = sub_1000AB394();
    (*(void (**)(char *, uint64_t, uint64_t))(v73 + 32))(&v75[*(int *)(v76 + 20)], v72, v74);
    sub_10000650C((_QWORD *)(v0 + 296));
  }
  else
  {
    v46 = *(_QWORD *)(v0 + 512);
    sub_10002AD5C(v0 + 56, &qword_1000FEA18);
    type metadata accessor for ModelCatalogProvider(0);
    sub_1000A760C();
    v47 = sub_10007F430();
    v48 = sub_100005700(v46, 1, v47);
    v49 = v48;
    sub_10002BBF0(v48, &qword_1000FBED0);
    if (v49 == 1)
    {
      if (qword_1000FB158 != -1)
        swift_once(&qword_1000FB158, sub_1000A1974);
      v50 = *(NSObject **)(v0 + 464);
      v51 = sub_10001DD64();
      v52 = sub_100002FF8(v51, (uint64_t)qword_1000FE768);
      sub_10001EBA8((uint64_t)v50);
      sub_10002B3CC();
      v53 = sub_100039EB4();
      v54 = sub_100039E20(v53);
      v23 = *(_QWORD *)(v0 + 464);
      if (v54)
      {
        v132 = v0 + 376;
        v55 = *(_QWORD *)(v0 + 456);
        v56 = (uint8_t *)sub_10001D8D4(12);
        v136 = v0 + 392;
        v57 = sub_10001D8D4(32);
        v140[0] = v57;
        *(_DWORD *)v56 = 136315138;
        sub_10001E4D4();
        v58 = v55;
        p_ivar_base_size = (_DWORD *)(&DaemonRequest + 8);
        sub_1000102C0(v58, v23, v140);
        *(_QWORD *)(v0 + 376) = v59;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 376, v139);
        sub_10002BD84(v23);
        sub_10001E18C((void *)&_mh_execute_header, v50, v52, "Asset %s not found in Model Catalog", v56);
        sub_10001DBB8(v57);
        v60 = v57;
        v1 = v0 + 392;
        sub_10001D790(v60);
        sub_10001D790((uint64_t)v56);

      }
      else
      {

        sub_10002BA68(v23);
      }
      v92 = *(_QWORD *)(v0 + 480);
      v93 = *(_QWORD *)(v0 + 488);
      sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
      v95 = sub_10002B560(v92, v94);
      v97 = sub_1000AB21C(v95, v96);
      sub_10007E954((uint64_t)v97, enum case for ModelManagerError.assetNotFound(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v93 + 104));
      v98 = sub_10001D964();
      sub_1000AB374(v98, v99, v100, v101, v102, v103, v104, v105, v129, v130, v132, v136, v139, v140[0]);
      goto LABEL_4;
    }
    v71 = *(_QWORD **)(v0 + 448);
    sub_1000AB394();
    sub_1000AB3A4();
    *v71 = 0;
    v71[1] = 0xE000000000000000;
  }
  sub_1000AAF58();
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  sub_10002B70C();
  v45 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_10001DBC8(v45);
}

uint64_t sub_1000A6C40()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 624) = v1;
  swift_task_dealloc(v3);
  sub_1000AB34C();
  sub_10001D7B8();
  return sub_10001D6D0();
}

uint64_t sub_1000A6C94()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  void (*v28)(uint64_t);
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(void);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  _BOOL4 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89[2];

  v1 = v0[69];
  v2 = v0[68];
  v3 = v0[67];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[66] + 16))(v3, v0[75], v0[65]);
  FilePath.init(_:)(v3);
  if (sub_100005700(v2, 1, v1) == 1)
  {
    sub_10002AD5C(v0[68], &qword_1000FC828);
    if (qword_1000FB158 != -1)
      swift_once(&qword_1000FB158, sub_1000A1974);
    v86 = v0 + 53;
    v4 = v0[58];
    v85 = sub_10001DD64();
    sub_100002FF8(v85, (uint64_t)qword_1000FE768);
    v5 = sub_10002BE5C();
    sub_1000AA42C(v5, v6, v7);
    v8 = sub_10001EBA8(v4);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter();
    if (sub_10007F0A8(v9))
    {
      v83 = v0[65];
      v12 = v0[57];
      v11 = v0[58];
      v13 = sub_10001D8D4(22);
      v14 = sub_10001D8D4(64);
      v89[0] = v14;
      *(_DWORD *)v13 = 136315394;
      sub_10001DBE4();
      sub_1000102C0(v12, v11, v89);
      v0[54] = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 54, v0 + 55);
      sub_10002BD84(v11);
      *(_WORD *)(v13 + 12) = 2080;
      sub_100006710(&qword_1000FC840, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
      v17 = dispatch thunk of CustomStringConvertible.description.getter(v83, v16);
      v19 = v18;
      sub_1000102C0(v17, v18, v89);
      v0[55] = v20;
      sub_10002B800((uint64_t)(v0 + 55), (uint64_t)(v0 + 56));
      v21 = swift_bridgeObjectRelease(v19);
      sub_1000AB2C4(v21, type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData);
      sub_10002B4A0((void *)&_mh_execute_header, v9, v10, "Failed to convert asset %s URL %s to file path", (uint8_t *)v13);
      sub_10002BA20(v14);
      sub_10001D790(v14);
      sub_10001D790(v13);
    }
    else
    {
      v36 = sub_10002BA68(v0[58]);
      sub_1000AB2C4(v36, type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData);
    }

    v37 = v0[60];
    v39 = v0[57];
    v38 = v0[58];
    sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    v41 = v40;
    v42 = sub_10002B560(v37, v40);
    *v43 = v39;
    v43[1] = v38;
    sub_1000AB454((uint64_t)v43, enum case for ModelManagerError.assetNotAvailableInModelCatalog(_:));
    v44 = sub_10001E140();
    v52 = swift_willThrow(v44, v45, v46, v47, v48, v49, v50, v51);
    sub_1000AB2C4(v52, type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData);
    sub_10000650C(v0 + 27);
    sub_10000650C(v0 + 2);
    sub_10000650C(v0 + 37);
    v53 = v0[63];
    v0[53] = v42;
    swift_errorRetain(v42);
    v54 = sub_100002F78(&qword_1000FB5F8);
    if (sub_1000AB1C4(v53, (uint64_t)v86))
    {
      v55 = v0[62];
      v56 = v0[63];
      v57 = v0[60];
      v58 = v0[61];
      swift_errorRelease(v42);
      sub_10001EA84(v55, v56, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v58 + 32));
      sub_10002B560(v57, v41);
      sub_10001EA84(v59, v55, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v58 + 16));
      sub_10007D88C();
      sub_1000AB258();
      v60 = v0[53];
    }
    else
    {
      swift_errorRelease(*v86);
      v0[51] = v42;
      swift_errorRetain(v42);
      v88 = String.init<A>(describing:)(v0 + 51, v54);
      v62 = v61;
      if (qword_1000FB158 != -1)
        swift_once(&qword_1000FB158, sub_1000A1974);
      v63 = v0[58];
      v64 = sub_100002FF8(v85, (uint64_t)qword_1000FE768);
      sub_10001EBA8(v63);
      v65 = sub_10001EBA8(v62);
      v66 = v64;
      Logger.logObject.getter(v65);
      v67 = sub_100039EB4();
      v68 = sub_10007D4C8(v67);
      v69 = v0[58];
      if (v68)
      {
        v84 = v0[57];
        v70 = sub_10001D8D4(22);
        v87 = sub_10001D8D4(64);
        v89[0] = v87;
        *(_DWORD *)v70 = 136315394;
        sub_10001E140();
        sub_10008F414(v84, v71, v89);
        v0[50] = v72;
        v73 = sub_10001E4C8();
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v73, v74);
        sub_10002BD84(v69);
        *(_WORD *)(v70 + 12) = 2080;
        sub_10001D964();
        sub_1000102C0(v88, v62, v89);
        v0[49] = v75;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 49, v0 + 50);
        sub_10002BD84(v62);
        sub_10002B4A0((void *)&_mh_execute_header, v66, (os_log_type_t)v39, "Failed to get asset versioned data for %s: %s", (uint8_t *)v70);
        sub_10002BA20(v87);
        sub_10001D790(v87);
        sub_10001D790(v70);

      }
      else
      {

        sub_10002BA68(v62);
        sub_10002BA68(v69);
      }
      v76 = v0[60];
      v77 = v0[61];
      v78 = sub_10002B560(v76, v41);
      v80 = sub_10007E0C4(v78, v79);
      *v81 = v88;
      v81[1] = v62;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v77 + 104))(v80, enum case for ModelManagerError.modelCatalogError(_:), v76);
      sub_10007D88C();
      v60 = v42;
    }
    swift_errorRelease(v60);
    sub_1000AAD78();
    sub_10001D938();
    sub_10001EAC8();
    sub_10001E490();
    sub_10002B504();
    sub_10002B528();
    sub_10002B4C4();
    sub_10002B70C();
    sub_10002BDF0();
    v35 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    v22 = v0[75];
    v23 = v0[73];
    v24 = v0[72];
    v25 = v0[70];
    v26 = v0[69];
    v27 = (_QWORD *)v0[56];
    sub_10000650C(v0 + 27);
    sub_10000650C(v0 + 2);
    v28 = *(void (**)(uint64_t))(v25 + 32);
    v29 = sub_1000AB434();
    v28(v29);
    v30 = (uint64_t *)(v22 + *(int *)(v23 + 20));
    v32 = *v30;
    v31 = v30[1];
    v33 = sub_10001DBE4();
    sub_1000AB2C4(v33, type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData);
    v34 = sub_1000AB394();
    ((void (*)(char *, uint64_t, uint64_t))v28)((char *)v27 + *(int *)(v34 + 20), v24, v26);
    *v27 = v32;
    v27[1] = v31;
    sub_10000650C(v0 + 37);
    sub_1000AAF58();
    sub_10001E330();
    sub_10001D938();
    sub_10001EAC8();
    sub_10001E490();
    sub_10002B504();
    sub_10002B528();
    sub_10002B4C4();
    sub_10002B70C();
    v35 = (uint64_t (*)(void))sub_10001E5D0();
  }
  return v35();
}

uint64_t sub_1000A72E4()
{
  uint64_t v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  os_log_type_t v22;
  _BOOL4 v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[2];

  sub_10000650C((_QWORD *)(v0 + 216));
  sub_10000650C((_QWORD *)(v0 + 16));
  sub_10002BF38();
  v2 = *(_QWORD *)(v0 + 624);
  v3 = *(_QWORD *)(v0 + 504);
  v4 = *(_QWORD *)(v0 + 480);
  *(_QWORD *)(v0 + 424) = v2;
  swift_errorRetain(v2);
  v5 = sub_100002F78(&qword_1000FB5F8);
  if (swift_dynamicCast(v3, v0 + 424, v5, v4, 0))
  {
    v7 = *(_QWORD *)(v0 + 496);
    v6 = *(_QWORD *)(v0 + 504);
    v8 = *(_QWORD *)(v0 + 480);
    v9 = *(_QWORD *)(v0 + 488);
    swift_errorRelease(v2);
    sub_10007DB54(v7, v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 32));
    sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    v11 = sub_10002B560(v8, v10);
    v13 = sub_10007E0C4(v11, v12);
    sub_10007DB54(v13, v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16));
    sub_10007D88C();
    sub_10001E808(v7, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
    v14 = *(_QWORD *)(v0 + 424);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 424));
    *(_QWORD *)(v0 + 408) = v2;
    swift_errorRetain(v2);
    v15 = sub_1000AB308();
    v17 = v16;
    if (qword_1000FB158 != -1)
      swift_once(&qword_1000FB158, sub_1000A1974);
    v18 = *(_QWORD *)(v0 + 464);
    v19 = sub_10001DD64();
    v20 = sub_100002FF8(v19, (uint64_t)qword_1000FE768);
    sub_10001EBA8(v18);
    v21 = sub_10001EBA8(v17);
    Logger.logObject.getter(v21);
    v22 = sub_100039EB4();
    v23 = sub_1000962E8(v22);
    v24 = *(_QWORD *)(v0 + 464);
    if (v23)
    {
      v38 = *(_QWORD *)(v0 + 456);
      v40 = v15;
      v25 = sub_10001D8D4(22);
      v39 = sub_10001D8D4(64);
      v41[0] = v39;
      *(_DWORD *)v25 = 136315394;
      swift_bridgeObjectRetain(v24);
      sub_1000102C0(v38, v24, v41);
      *(_QWORD *)(v0 + 400) = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 400, v0 + 408);
      sub_10002BD84(v24);
      *(_WORD *)(v25 + 12) = 2080;
      sub_10001E140();
      sub_10008F414(v40, v27, v41);
      *(_QWORD *)(v0 + 392) = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 392, v0 + 400);
      sub_10002BD84(v17);
      sub_10002B4A0((void *)&_mh_execute_header, v20, v1, "Failed to get asset versioned data for %s: %s", (uint8_t *)v25);
      sub_10002BA20(v39);
      sub_10001D790(v39);
      v29 = v25;
      v15 = v40;
      sub_10001D790(v29);
    }
    else
    {
      sub_10002BA68(*(_QWORD *)(v0 + 464));
      sub_10002BA68(v17);
    }

    v30 = *(_QWORD *)(v0 + 480);
    v31 = *(_QWORD *)(v0 + 488);
    sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    v33 = sub_10002B560(v30, v32);
    v35 = sub_10007E0C4(v33, v34);
    *v36 = v15;
    v36[1] = v17;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v31 + 104))(v35, enum case for ModelManagerError.modelCatalogError(_:), v30);
    sub_10007D88C();
    v14 = v2;
  }
  swift_errorRelease(v14);
  sub_1000AAD78();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  sub_10002B70C();
  sub_10002BDF0();
  return sub_10001DBC8(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1000A760C()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  os_log_type_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  Swift::String v56;
  Swift::String v57;

  sub_10001D810();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = sub_10007F430();
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = sub_1000AB150();
  type metadata accessor for AssetCost(v9);
  sub_10001DD00();
  __chkstk_darwin(v10);
  sub_10001E66C();
  v56._countAndFlagsBits = 0x706D655478616A41;
  v56._object = (void *)0xE800000000000000;
  if (sub_1000AB37C(v56))
  {
    v51 = 2019650145;
    v52 = 0xE400000000000000;
    v53 = 0;
    v54 = 0;
    v55 = 1;
LABEL_21:
    sub_10001E3E0();
    AssetCost.init(onDeviceMemory:)(1750000);
    sub_1000AB2A4();
    sub_1000AB23C();
    sub_100005630(v39, v40, v41, v7);
    goto LABEL_26;
  }
  v57._countAndFlagsBits = 0xD000000000000018;
  v57._object = (void *)0x80000001000CF000;
  if (sub_1000AB37C(v57))
  {
    sub_10001E3E0();
    v11 = String.count.getter(0xD000000000000018, 0x80000001000CF000);
    v12 = sub_1000AA1BC(v11, v4, v2);
    v49 = v13;
    v15 = v14;
    v17 = v16;
    if (qword_1000FB158 != -1)
      swift_once(&qword_1000FB158, sub_1000A1974);
    v18 = sub_10001DD64();
    v19 = sub_100002FF8(v18, (uint64_t)qword_1000FE768);
    sub_10001EBA8(v2);
    v20 = sub_10001EBA8(v17);
    Logger.logObject.getter(v20);
    v46 = sub_10001E9D0();
    if (os_log_type_enabled(v19, v46))
    {
      v48 = v12;
      v21 = sub_10001D8D4(22);
      v45 = sub_10001D8D4(64);
      v51 = v45;
      *(_DWORD *)v21 = 136315394;
      v47 = v15;
      sub_10001E3E0();
      sub_1000102C0(v4, v2, &v51);
      v50 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v21 + 4);
      sub_10002BD84(v2);
      *(_WORD *)(v21 + 12) = 2080;
      sub_10001E4D4();
      v23 = static String._fromSubstring(_:)(v48, v49, v15, v17);
      v44 = v19;
      v25 = v24;
      swift_bridgeObjectRelease(v17);
      v26 = v23;
      v15 = v47;
      sub_1000102C0(v26, v25, &v51);
      v50 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v21 + 14);
      sub_10002BA68(v17);
      sub_10001E034();
      sub_10002B4A0((void *)&_mh_execute_header, v44, v46, "Using override bundle with identifier %s and provider %s", (uint8_t *)v21);
      sub_10002BA20(v45);
      sub_10001D790(v45);
      v28 = v21;
      v12 = v48;
      sub_10001D790(v28);

    }
    else
    {

      sub_10002BA68(v17);
      sub_10002BA68(v2);
    }
    v36 = static String._fromSubstring(_:)(v12, v49, v15, v17);
    v38 = v37;
    swift_bridgeObjectRelease(v17);
    v51 = v36;
    v52 = v38;
    v53 = 0;
    v54 = 0;
    v55 = 0;
    goto LABEL_21;
  }
  if (qword_1000FB1F8 != -1)
    swift_once(&qword_1000FB1F8, sub_1000A9C04);
  v29 = qword_100100080;
  v30 = *(_QWORD *)(qword_100100080 + 16);
  if (v30)
  {
    sub_10001EA78();
    v32 = v29 + v31;
    v33 = *(_QWORD *)(v8 + 72);
    swift_bridgeObjectRetain(v29);
    while (1)
    {
      sub_1000AA42C(v32, (uint64_t)v0, type metadata accessor for ModelCatalogAsset);
      v34 = v0[1];
      v35 = *v0 == v4 && v34 == v2;
      if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v0, v34, v4, v2, 0) & 1) != 0)
        break;
      sub_10002ACC4((uint64_t)v0, type metadata accessor for ModelCatalogAsset);
      v32 += v33;
      if (!--v30)
        goto LABEL_24;
    }
    sub_1000AAAF8((uint64_t)v0, v6, type metadata accessor for ModelCatalogAsset);
    v42 = v6;
    v43 = 0;
  }
  else
  {
    swift_bridgeObjectRetain(qword_100100080);
LABEL_24:
    v42 = v6;
    v43 = 1;
  }
  sub_100005630(v42, v43, 1, v7);
  swift_bridgeObjectRelease(v29);
LABEL_26:
  sub_100006A68();
}

uint64_t sub_1000A7A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[9] = a3;
  v4[10] = a4;
  v4[7] = a1;
  v4[8] = a2;
  v5 = type metadata accessor for AssetLock(0);
  v4[11] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[12] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v4[13] = v7;
  v4[14] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000A7A8C, 0, 0);
}

uint64_t sub_1000A7A8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v10;

  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 64);
  sub_100006694(*(_QWORD *)(v0 + 80), v0 + 16);
  sub_10001EA84(v1, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 56) & ~v5;
  v7 = swift_allocObject(&unk_1000F48F0, v6 + v2, v5 | 7);
  *(_QWORD *)(v0 + 120) = v7;
  sub_10000667C((__int128 *)(v0 + 16), v7 + 16);
  sub_10001EA84(v7 + v6, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
  v10 = (char *)&dword_1000FEA58 + dword_1000FEA58;
  v8 = (_QWORD *)swift_task_alloc(unk_1000FEA5C);
  *(_QWORD *)(v0 + 128) = v8;
  *v8 = v0;
  v8[1] = sub_1000A7B88;
  return ((uint64_t (*)(_QWORD, _QWORD *(*)@<X0>(_QWORD *@<X8>), uint64_t))v10)(*(_QWORD *)(v0 + 56), sub_1000AA36C, v7);
}

uint64_t sub_1000A7B88()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 136) = v1;
  swift_task_dealloc();
  if (v1)
  {
    sub_100037A7C();
    return sub_10001D6D0();
  }
  else
  {
    swift_release();
    sub_10001E330();
    v4 = (uint64_t (*)(void))sub_10001E5D0();
    return sub_10001D940(v4);
  }
}

uint64_t sub_1000A7BE4()
{
  uint64_t v0;

  swift_release();
  sub_10001E330();
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

_QWORD *sub_1000A7C14@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  _QWORD *result;

  v6 = a1[3];
  v7 = a1[4];
  sub_10001C830(a1, v6);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v7, v6, &protocol requirements base descriptor for AssetBackedResource, &associated type descriptor for AssetBackedResource.CatalogAssetType);
  a3[3] = AssociatedTypeWitness;
  a3[4] = swift_getAssociatedConformanceWitness(v7, v6, AssociatedTypeWitness, &protocol requirements base descriptor for AssetBackedResource);
  sub_100048F1C(a3);
  result = (_QWORD *)dispatch thunk of AssetBackedResource.fetchLockedAsset(with:)(a2, v6, v7);
  if (v3)
    return sub_1000373EC(a3);
  return result;
}

uint64_t sub_1000A7CE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD v23[4];

  sub_100002F78(&qword_1000FB230);
  sub_10001DD00();
  __chkstk_darwin(v5);
  v6 = sub_1000AB150();
  v7 = type metadata accessor for TaskPriority(v6);
  sub_100005630(v2, 1, 1, v7);
  v8 = (_QWORD *)swift_allocObject(&unk_1000F48A0, 48, 7);
  v8[2] = 0;
  v9 = v8 + 2;
  v8[3] = 0;
  v8[4] = a1;
  v8[5] = a2;
  v10 = sub_100005700(v2, 1, v7);
  v11 = swift_retain(a2);
  if (v10 == 1)
  {
    sub_10002AD5C(v2, &qword_1000FB230);
    v12 = 0;
    v13 = 0;
    v14 = 7168;
  }
  else
  {
    v15 = TaskPriority.rawValue.getter(v11);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v2, v7);
    v14 = v15 | 0x1C00;
    v16 = *v9;
    if (*v9)
    {
      v17 = v8[3];
      ObjectType = swift_getObjectType(*v9);
      swift_unknownObjectRetain(v16);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v17);
      v13 = v19;
      swift_unknownObjectRelease(v16);
    }
    else
    {
      v12 = 0;
      v13 = 0;
    }
  }
  if (v13 | v12)
  {
    v23[0] = 0;
    v23[1] = 0;
    v20 = v23;
    v23[2] = v12;
    v23[3] = v13;
  }
  else
  {
    v20 = 0;
  }
  v21 = swift_task_create(v14, v20, (char *)&type metadata for () + 8, &unk_1000FE9F8, v8);
  return swift_release(v21);
}

uint64_t sub_1000A7E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[8] = a4;
  v5[9] = a5;
  v6 = sub_100002F78(&qword_1000FEA00);
  v5[10] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[11] = v7;
  v5[12] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100002F78(&qword_1000FEA08);
  v5[13] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[14] = v9;
  v5[15] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000A7F14, 0, 0);
}

uint64_t sub_1000A7F14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = sub_100002F78(&qword_1000FEA10);
  v3 = sub_100006A80(v2, 72);
  *(_OWORD *)(v3 + 16) = xmmword_1000CB140;
  static Catalog.Resource.DisabledUseCaseList.All()((_QWORD *)(v0 + 16));
  v5 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  v6 = (_QWORD *)sub_1000AB434();
  v8 = sub_10001C830(v6, v7);
  *(_QWORD *)(v3 + 56) = v5;
  *(_QWORD *)(v3 + 64) = *(_QWORD *)(v4 + 8);
  v9 = sub_100048F1C((_QWORD *)(v3 + 32));
  sub_10007DB54((uint64_t)v9, (uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16));
  sub_10002BF38();
  sub_1000AB428(v3);
  if (v1)
  {
    swift_bridgeObjectRelease(v3);
    sub_10001E330();
    sub_10001D938();
    return sub_10002B698(*(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 104);
    swift_bridgeObjectRelease(v3);
    AsyncStream.makeAsyncIterator()(v11);
    v12 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 128) = v12;
    *v12 = v0;
    v12[1] = sub_1000A8050;
    sub_100037A7C();
    return AsyncStream.Iterator.next(isolation:)(v13);
  }
}

uint64_t sub_1000A8050()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 128));
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_1000A8084()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v8)(void);

  v1 = v0[7];
  if (v1)
  {
    v2 = (int *)v0[8];
    swift_bridgeObjectRelease(v1);
    v8 = (uint64_t (*)(void))((char *)v2 + *v2);
    v3 = (_QWORD *)swift_task_alloc(v2[1]);
    v0[17] = v3;
    *v3 = v0;
    v3[1] = sub_1000A8124;
    v4 = v8;
  }
  else
  {
    v6 = v0[14];
    v5 = v0[15];
    (*(void (**)(_QWORD, _QWORD))(v0[11] + 8))(v0[12], v0[10]);
    sub_10007E7EC(v5, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    sub_10001E330();
    sub_10001EAC8();
    v4 = (uint64_t (*)(void))sub_10001E5D0();
  }
  return sub_1000AB0E0(v4);
}

uint64_t sub_1000A8124()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *v0;
  v2 = *v0;
  swift_task_dealloc();
  v3 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v1 + 128) = v3;
  *v3 = v2;
  v3[1] = sub_1000A8050;
  sub_100037A7C();
  return AsyncStream.Iterator.next(isolation:)(v4);
}

uint64_t sub_1000A81A4()
{
  uint64_t v0;

  sub_10002AD5C(v0 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_assetLock, &qword_1000FEA88);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_tasksUsingAssetLock));
  swift_release();
  swift_release();
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_1000A8210()
{
  uint64_t v0;

  sub_1000A81A4();
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000A8228()
{
  return type metadata accessor for ModelCatalogProvider(0);
}

uint64_t type metadata accessor for ModelCatalogProvider(uint64_t a1)
{
  return sub_100042760(a1, (uint64_t *)&unk_1000FE7B0, (uint64_t)&nominal type descriptor for ModelCatalogProvider);
}

void sub_1000A8244(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[8];

  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_1000A82FC(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    v4[4] = &unk_1000CCCC0;
    v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[6] = &unk_1000CCCD8;
    v4[7] = &unk_1000CCCD8;
    swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
  }
}

void sub_1000A82FC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000FE7D8)
  {
    v2 = type metadata accessor for AssetLock(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000FE7D8);
  }
}

uint64_t *sub_1000A8350(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain(v11);
  }
  return a1;
}

uint64_t sub_1000A83E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t sub_1000A842C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t sub_1000A8494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t sub_1000A8510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1000A856C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_1000A85D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A85E4);
}

uint64_t sub_1000A85E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;

  v6 = sub_1000AB39C();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return sub_100005700(a1, a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  return (v8 + 1);
}

uint64_t sub_1000A865C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A8668);
}

uint64_t sub_1000A8668(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;

  result = sub_1000AB39C();
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
    return sub_100005630(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData(uint64_t a1)
{
  return sub_100042760(a1, qword_1000FE9B8, (uint64_t)&nominal type descriptor for ModelCatalogProvider.CatalogAssetProtocolData);
}

uint64_t sub_1000A86F0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1000CCD10;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000A8760()
{
  uint64_t v0;

  sub_10002BBD8();
  swift_release();
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000A8788()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = swift_task_alloc(dword_1000FE9F4);
  v3 = (_QWORD *)sub_100006AF4(v2);
  v4 = sub_1000AB104(v3);
  return sub_1000A7E84(v4, v5, v6, v7, v1);
}

void sub_1000A87E8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = sub_100002F78(&qword_1000FBED0);
  __chkstk_darwin(v2);
  v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ModelCatalogAsset(0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v34 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v34 - v12;
  v15 = *a1;
  v14 = a1[1];
  type metadata accessor for ModelCatalogProvider(0);
  sub_1000A760C();
  if (sub_100005700((uint64_t)v4, 1, v5) == 1)
  {
    sub_10002AD5C((uint64_t)v4, &qword_1000FBED0);
    if (qword_1000FB158 != -1)
      swift_once(&qword_1000FB158, sub_1000A1974);
    v16 = type metadata accessor for Logger(0);
    sub_100002FF8(v16, (uint64_t)qword_1000FE768);
    v17 = swift_bridgeObjectRetain_n(v14, 2);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v37 = v21;
      *(_DWORD *)v20 = 136315138;
      swift_bridgeObjectRetain(v14);
      sub_1000102C0(v15, v14, &v37);
      v35 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v20 + 4);
      swift_bridgeObjectRelease_n(v14, 3);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Dependent asset %s not found in test assets", v20, 0xCu);
      swift_arrayDestroy(v21, 1);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v14, 2);
    }

    v23 = type metadata accessor for ModelManagerError(0);
    sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    swift_allocError(v23, v24, 0, 0);
    *v25 = v15;
    v25[1] = v14;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, enum case for ModelManagerError.assetNotFound(_:), v23);
    v26 = swift_bridgeObjectRetain(v14);
    swift_willThrow(v26, v27, v28, v29, v30, v31, v32, v33);
  }
  else
  {
    sub_1000AAAF8((uint64_t)v4, (uint64_t)v13, type metadata accessor for ModelCatalogAsset);
    sub_1000AA42C((uint64_t)v13, (uint64_t)v8, type metadata accessor for ModelCatalogAsset);
    sub_1000122B8();
    sub_10002ACC4((uint64_t)v11, type metadata accessor for ModelCatalogAsset);
    sub_10002ACC4((uint64_t)v13, type metadata accessor for ModelCatalogAsset);
  }
}

void sub_1000A8B40()
{
  uint64_t v0;
  uint64_t v1;
  _WORD v2[8];
  uint64_t v3;
  uint64_t v4;
  char v5;

  v0 = type metadata accessor for AssetCost(0);
  __chkstk_darwin(v0);
  v1 = type metadata accessor for ModelCatalogAsset(0);
  sub_100002FB8(v1, qword_1000FFEE8);
  sub_100002FF8(v1, (uint64_t)qword_1000FFEE8);
  strcpy((char *)v2, "EchoInference");
  v2[7] = -4864;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  AssetCost.init(onDeviceMemory:)(1);
  sub_1000A8C3C();
}

void sub_1000A8C3C()
{
  char v0;
  char v1;
  char v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  int *v22;
  char *v23;
  uint64_t v24;

  sub_10001D810();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v18 = sub_100002F78(&qword_1000FB658);
  v19 = sub_100006A80(v18, 72);
  v20 = *v11;
  v21 = v11[1];
  *(_OWORD *)(v19 + 16) = xmmword_1000CB140;
  *(_OWORD *)(v19 + 32) = v20;
  *(_OWORD *)(v19 + 48) = v21;
  *(_BYTE *)(v19 + 64) = *((_BYTE *)v11 + 32);
  *v17 = v15;
  v17[1] = v13;
  v17[2] = v9;
  v17[3] = v19;
  v22 = (int *)sub_10007F430();
  v23 = (char *)v17 + v22[7];
  v24 = sub_10004A92C();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v23, v7, v24);
  *((_BYTE *)v17 + v22[8]) = v5;
  *((_BYTE *)v17 + v22[9]) = v3;
  *((_BYTE *)v17 + v22[10]) = v1;
  sub_100006A68();
}

void sub_1000A8CF8()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for AssetCost(0);
  __chkstk_darwin(v0);
  v1 = type metadata accessor for ModelCatalogAsset(0);
  sub_100002FB8(v1, qword_1000FFF00);
  sub_100002FF8(v1, (uint64_t)qword_1000FFF00);
  AssetCost.init(onDeviceMemory:)(100);
  sub_1000A8C3C();
}

void sub_1000A8DF4()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for AssetCost(0);
  __chkstk_darwin(v0);
  v1 = type metadata accessor for ModelCatalogAsset(0);
  sub_100002FB8(v1, qword_1000FFF18);
  sub_100002FF8(v1, (uint64_t)qword_1000FFF18);
  if (qword_1000FB160 != -1)
    swift_once(&qword_1000FB160, sub_1000A19E0);
  AssetCost.init(onDeviceMemory:)(qword_1000FFED8);
  sub_1000A8C3C();
}

void sub_1000A8F1C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for AssetCost(0);
  __chkstk_darwin(v0);
  v1 = type metadata accessor for ModelCatalogAsset(0);
  sub_100002FB8(v1, qword_1000FFF30);
  sub_100002FF8(v1, (uint64_t)qword_1000FFF30);
  AssetCost.init(onDeviceMemory:)(100);
  sub_1000A8C3C();
}

void sub_1000A9018()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for AssetCost(0);
  __chkstk_darwin(v0);
  v1 = type metadata accessor for ModelCatalogAsset(0);
  sub_100002FB8(v1, qword_1000FFF48);
  sub_100002FF8(v1, (uint64_t)qword_1000FFF48);
  AssetCost.init(onDeviceMemory:)(1750000);
  sub_1000A8C3C();
}

void sub_1000A9118()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for AssetCost(0);
  __chkstk_darwin(v0);
  v1 = type metadata accessor for ModelCatalogAsset(0);
  sub_100002FB8(v1, qword_1000FFF60);
  sub_100002FF8(v1, (uint64_t)qword_1000FFF60);
  AssetCost.init(onDeviceMemory:)(1750000);
  sub_1000A8C3C();
}

void sub_1000A9224()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for AssetCost(0);
  __chkstk_darwin(v0);
  v1 = type metadata accessor for ModelCatalogAsset(0);
  sub_100002FB8(v1, qword_1000FFF78);
  sub_100002FF8(v1, (uint64_t)qword_1000FFF78);
  AssetCost.init(onDeviceMemory:)(1750000);
  sub_1000A8C3C();
}

void sub_1000A932C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for AssetCost(0);
  __chkstk_darwin(v0);
  v1 = type metadata accessor for ModelCatalogAsset(0);
  sub_100002FB8(v1, qword_1000FFF90);
  sub_100002FF8(v1, (uint64_t)qword_1000FFF90);
  AssetCost.init(onDeviceMemory:)(1750000);
  sub_1000A8C3C();
}

void sub_1000A9420()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for AssetCost(0);
  __chkstk_darwin(v0);
  v1 = type metadata accessor for ModelCatalogAsset(0);
  sub_100002FB8(v1, qword_1000FFFA8);
  sub_100002FF8(v1, (uint64_t)qword_1000FFFA8);
  AssetCost.init(onDeviceMemory:)(100);
  sub_1000A8C3C();
}

void sub_1000A9510(uint64_t a1)
{
  sub_1000A9534(a1, qword_1000FFFC0);
}

void sub_1000A9534(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  sub_10004A92C();
  sub_10001DD00();
  __chkstk_darwin(v3);
  sub_10007F78C();
  v4 = sub_10007F430();
  sub_100002FB8(v4, a2);
  sub_100002FF8(v4, (uint64_t)a2);
  if (qword_1000FB160 != -1)
    swift_once(&qword_1000FB160, sub_1000A19E0);
  AssetCost.init(onDeviceMemory:)(qword_1000FFED8);
  sub_10002BE5C();
  sub_1000AB2A4();
  sub_10001E7B4();
}

void sub_1000A9618(uint64_t a1)
{
  sub_1000A9534(a1, qword_1000FFFD8);
}

uint64_t sub_1000A963C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  int *v4;
  char *v5;
  uint64_t result;
  uint64_t v7;

  v0 = type metadata accessor for AssetCost(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (int *)type metadata accessor for ModelCatalogAsset(0);
  sub_100002FB8((uint64_t)v4, qword_1000FFFF0);
  v5 = (char *)sub_100002FF8((uint64_t)v4, (uint64_t)qword_1000FFFF0);
  AssetCost.init(onDeviceMemory:)(1);
  *(_QWORD *)v5 = 0xD000000000000023;
  *((_QWORD *)v5 + 1) = 0x80000001000CF0F0;
  *((_QWORD *)v5 + 2) = _swiftEmptyArrayStorage;
  *((_QWORD *)v5 + 3) = &off_1000F2598;
  result = (*(uint64_t (**)(char *, char *, uint64_t))(v1 + 32))(&v5[v4[7]], v3, v0);
  v5[v4[8]] = 1;
  v5[v4[9]] = 0;
  v5[v4[10]] = 0;
  return result;
}

void sub_1000A973C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for AssetCost(0);
  __chkstk_darwin(v0);
  v1 = type metadata accessor for ModelCatalogAsset(0);
  sub_100002FB8(v1, qword_100100008);
  sub_100002FF8(v1, (uint64_t)qword_100100008);
  AssetCost.init(onDeviceMemory:)(1750000);
  sub_1000A8C3C();
}

void sub_1000A9838()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for AssetCost(0);
  __chkstk_darwin(v0);
  v1 = type metadata accessor for ModelCatalogAsset(0);
  sub_100002FB8(v1, qword_100100020);
  sub_100002FF8(v1, (uint64_t)qword_100100020);
  AssetCost.init(onDeviceMemory:)(1750000);
  sub_1000A8C3C();
}

void sub_1000A9928()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for AssetCost(0);
  __chkstk_darwin(v0);
  v1 = type metadata accessor for ModelCatalogAsset(0);
  sub_100002FB8(v1, qword_100100038);
  sub_100002FF8(v1, (uint64_t)qword_100100038);
  AssetCost.init(onDeviceMemory:)(1750000);
  sub_1000A8C3C();
}

void sub_1000A9A1C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for AssetCost(0);
  __chkstk_darwin(v0);
  v1 = type metadata accessor for ModelCatalogAsset(0);
  sub_100002FB8(v1, qword_100100050);
  sub_100002FF8(v1, (uint64_t)qword_100100050);
  AssetCost.init(onDeviceMemory:)(1750000);
  sub_1000A8C3C();
}

void sub_1000A9B10()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for AssetCost(0);
  __chkstk_darwin(v0);
  v1 = type metadata accessor for ModelCatalogAsset(0);
  sub_100002FB8(v1, qword_100100068);
  sub_100002FF8(v1, (uint64_t)qword_100100068);
  AssetCost.init(onDeviceMemory:)(1750000);
  sub_1000A8C3C();
}

void sub_1000A9C04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v0 = sub_100002F78(&qword_1000FB650);
  v1 = type metadata accessor for ModelCatalogAsset(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = *(unsigned __int8 *)(v2 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v0, v5 + 17 * v3, v4 | 7);
  *(_OWORD *)(v6 + 16) = xmmword_1000CCC70;
  v7 = v6 + v5;
  if (qword_1000FB170 != -1)
    swift_once(&qword_1000FB170, sub_1000A8B40);
  v8 = sub_100002FF8(v1, (uint64_t)qword_1000FFEE8);
  sub_1000AA42C(v8, v7, type metadata accessor for ModelCatalogAsset);
  if (qword_1000FB178 != -1)
    swift_once(&qword_1000FB178, sub_1000A8CF8);
  v9 = sub_100002FF8(v1, (uint64_t)qword_1000FFF00);
  sub_1000AA42C(v9, v7 + v3, type metadata accessor for ModelCatalogAsset);
  if (qword_1000FB180 != -1)
    swift_once(&qword_1000FB180, sub_1000A8DF4);
  v10 = sub_100002FF8(v1, (uint64_t)qword_1000FFF18);
  sub_1000AA42C(v10, v7 + 2 * v3, type metadata accessor for ModelCatalogAsset);
  if (qword_1000FB188 != -1)
    swift_once(&qword_1000FB188, sub_1000A8F1C);
  v11 = sub_100002FF8(v1, (uint64_t)qword_1000FFF30);
  sub_1000AA42C(v11, v7 + 3 * v3, type metadata accessor for ModelCatalogAsset);
  if (qword_1000FB190 != -1)
    swift_once(&qword_1000FB190, sub_1000A9018);
  v12 = sub_100002FF8(v1, (uint64_t)qword_1000FFF48);
  sub_1000AA42C(v12, v7 + 4 * v3, type metadata accessor for ModelCatalogAsset);
  if (qword_1000FB1A0 != -1)
    swift_once(&qword_1000FB1A0, sub_1000A9224);
  v13 = sub_100002FF8(v1, (uint64_t)qword_1000FFF78);
  sub_1000AA42C(v13, v7 + 5 * v3, type metadata accessor for ModelCatalogAsset);
  if (qword_1000FB198 != -1)
    swift_once(&qword_1000FB198, sub_1000A9118);
  v14 = sub_100002FF8(v1, (uint64_t)qword_1000FFF60);
  sub_1000AA42C(v14, v7 + 6 * v3, type metadata accessor for ModelCatalogAsset);
  if (qword_1000FB1A8 != -1)
    swift_once(&qword_1000FB1A8, sub_1000A932C);
  v15 = sub_100002FF8(v1, (uint64_t)qword_1000FFF90);
  sub_1000AA42C(v15, v7 - v3 + 8 * v3, type metadata accessor for ModelCatalogAsset);
  if (qword_1000FB1B0 != -1)
    swift_once(&qword_1000FB1B0, sub_1000A9420);
  v16 = sub_100002FF8(v1, (uint64_t)qword_1000FFFA8);
  sub_1000AA42C(v16, v7 + 8 * v3, type metadata accessor for ModelCatalogAsset);
  if (qword_1000FB1B8 != -1)
    swift_once(&qword_1000FB1B8, sub_1000A9510);
  v17 = sub_100002FF8(v1, (uint64_t)qword_1000FFFC0);
  sub_1000AA42C(v17, v7 + 9 * v3, type metadata accessor for ModelCatalogAsset);
  if (qword_1000FB1C0 != -1)
    swift_once(&qword_1000FB1C0, sub_1000A9618);
  v18 = sub_100002FF8(v1, (uint64_t)qword_1000FFFD8);
  sub_1000AA42C(v18, v7 + 10 * v3, type metadata accessor for ModelCatalogAsset);
  if (qword_1000FB1C8 != -1)
    swift_once(&qword_1000FB1C8, sub_1000A963C);
  v19 = sub_100002FF8(v1, (uint64_t)qword_1000FFFF0);
  sub_1000AA42C(v19, v7 + 11 * v3, type metadata accessor for ModelCatalogAsset);
  if (qword_1000FB1D0 != -1)
    swift_once(&qword_1000FB1D0, sub_1000A973C);
  v20 = sub_100002FF8(v1, (uint64_t)qword_100100008);
  sub_1000AA42C(v20, v7 + 12 * v3, type metadata accessor for ModelCatalogAsset);
  if (qword_1000FB1D8 != -1)
    swift_once(&qword_1000FB1D8, sub_1000A9838);
  v21 = sub_100002FF8(v1, (uint64_t)qword_100100020);
  sub_1000AA42C(v21, v7 + 13 * v3, type metadata accessor for ModelCatalogAsset);
  if (qword_1000FB1E0 != -1)
    swift_once(&qword_1000FB1E0, sub_1000A9928);
  v22 = sub_100002FF8(v1, (uint64_t)qword_100100038);
  sub_1000AA42C(v22, v7 + 14 * v3, type metadata accessor for ModelCatalogAsset);
  if (qword_1000FB1E8 != -1)
    swift_once(&qword_1000FB1E8, sub_1000A9A1C);
  v23 = sub_100002FF8(v1, (uint64_t)qword_100100050);
  sub_1000AA42C(v23, v7 - v3 + 16 * v3, type metadata accessor for ModelCatalogAsset);
  if (qword_1000FB1F0 != -1)
    swift_once(&qword_1000FB1F0, sub_1000A9B10);
  v24 = sub_100002FF8(v1, (uint64_t)qword_100100068);
  sub_1000AA42C(v24, v7 + 16 * v3, type metadata accessor for ModelCatalogAsset);
  qword_100100080 = v6;
}

unint64_t sub_1000AA1BC(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v4 = HIBYTE(a3) & 0xF;
    else
      v4 = a2 & 0xFFFFFFFFFFFFLL;
    v5 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v5 = 11;
    v6 = v5 | (v4 << 16);
    result = String.index(_:offsetBy:limitedBy:)(15, result, v6, a2, a3);
    if ((v7 & 1) != 0)
      result = v6;
    if (4 * v4 >= result >> 14)
    {
      v8 = String.subscript.getter();
      swift_bridgeObjectRelease(a3);
      return v8;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000AA28C()
{
  uint64_t v0;

  swift_release();
  sub_10000650C((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000AA2B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = swift_task_alloc(dword_1000FEA4C);
  v3 = (_QWORD *)sub_100006AF4(v2);
  *v3 = v1;
  v3[1] = sub_10001D668;
  v4 = sub_1000AB358();
  return sub_1000A7A24(v4, v5, v6, v0 + 24);
}

uint64_t sub_1000AA318()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(sub_1000AB0B8() - 8);
  sub_1000AB2E0();
  sub_10000650C((_QWORD *)(v0 + 16));
  sub_10007E7EC(v0 + v3, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  return sub_10001E060(v0, v1, v2);
}

_QWORD *sub_1000AA36C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AssetLock(0) - 8) + 80);
  return sub_1000A7C14((_QWORD *)(v1 + 16), v1 + ((v3 + 56) & ~v3), a1);
}

void sub_1000AA3B8()
{
  sub_1000A1610();
}

uint64_t sub_1000AA3F4()
{
  return sub_1000AAC0C(&qword_1000FEA68);
}

uint64_t sub_1000AA400()
{
  return sub_1000AAC74(&qword_1000FEA68, (uint64_t (*)(_QWORD, _QWORD, uint64_t))sub_1000A18B8);
}

uint64_t sub_1000AA414(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000AA424(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000AA42C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = sub_1000AB248(a1, a2, a3);
  sub_10001EBE8(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  sub_100006C14();
}

uint64_t sub_1000AA45C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = swift_task_alloc(dword_1000FEA74);
  v1 = (_QWORD *)sub_100006AF4(v0);
  v2 = sub_100006AD8(v1);
  return sub_1000A592C(v2, v3, v4, v5);
}

uint64_t sub_1000AA4B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;

  sub_10001D810();
  v1 = *(_QWORD *)(sub_1000AB044() - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 40) & ~v2;
  v4 = (*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = sub_1000AB0B8();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v4 + v7 + 16) & ~v7;
  v9 = v8 + *(_QWORD *)(v6 + 64);
  v10 = v2 | v7 | 7;
  sub_10002BBD8();
  swift_release();
  sub_10007E7EC(v0 + v3, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  v11 = swift_release();
  (*(void (**)(uint64_t, uint64_t, __n128))(v6 + 8))(v0 + v8, v5, v11);
  return swift_deallocObject(v0, v9, v10);
}

uint64_t sub_1000AA574()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(sub_1000AB044() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000AB0B8() - 8) + 80);
  v5 = (v3 + v4 + 16) & ~v4;
  v6 = v0 + v2;
  v7 = v0 + v3;
  v8 = *(int **)(v0 + v3);
  v9 = *(_QWORD *)(v7 + 8);
  v10 = v0 + v5;
  v11 = swift_task_alloc(dword_1000FEA94);
  v12 = (_QWORD *)sub_100006AF4(v11);
  v13 = sub_1000AB104(v12);
  return sub_1000A5724(v13, v14, v15, v16, v6, v8, v9, v10);
}

uint64_t sub_1000AA634@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;

  sub_10001DBE4();
  sub_1000AB034();
  sub_1000AAEA8();
  if ((a2 & 1) != 0)
  {
    sub_1000AB3C4();
    sub_1000AAEF0();
    v6 = sub_100002F78(&qword_1000FD0F0);
    v14 = sub_1000AAE28(v6, v7, v8, v9, v10, v11, v12, v13, v31, v33);
    sub_1000AAF44(v14, v15, v16, v17, v18, v19, v20, v21, v32, v34);
    v22 = *(_QWORD *)(a2 + 56);
    v23 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0);
    sub_1000AAAF8(v22 + *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72) * a1, a3, type metadata accessor for InferenceProviderManager.ConnectionCollection.Group);
    sub_1000AB20C(v24, v25, (uint64_t)&type metadata for String);
    sub_1000AB178();
    v26 = sub_1000AB440();
  }
  else
  {
    type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0);
    v26 = sub_10001E070();
  }
  return sub_1000AAF7C(v26, v27, v28, v29);
}

uint64_t sub_1000AA6EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;

  sub_10001DBE4();
  sub_1000AB034();
  sub_1000AAEA8();
  if ((a2 & 1) != 0)
  {
    sub_1000AB3C4();
    sub_1000AAEF0();
    v6 = sub_100002F78(&qword_1000FB690);
    v14 = sub_1000AAE28(v6, v7, v8, v9, v10, v11, v12, v13, v31, v33);
    sub_1000AAF44(v14, v15, v16, v17, v18, v19, v20, v21, v32, v34);
    v22 = *(_QWORD *)(a2 + 56);
    v23 = type metadata accessor for Policy(0);
    v24 = sub_10001EA84(a3, v22 + *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72) * a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 32));
    sub_1000AB20C(v24, v25, (uint64_t)&type metadata for String);
    sub_1000AB178();
    v26 = sub_1000AB440();
  }
  else
  {
    type metadata accessor for Policy(0);
    v26 = sub_10001E070();
  }
  return sub_1000AAF7C(v26, v27, v28, v29);
}

double sub_1000AA7A0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double result;
  uint64_t v27;
  uint64_t v28;
  char v29[8];
  uint64_t v30;

  v4 = v3;
  sub_10001DBE4();
  sub_1000AB034();
  sub_1000AAEA8();
  if ((a2 & 1) != 0)
  {
    swift_isUniquelyReferenced_nonNull_native(*v4);
    *(_QWORD *)v29 = *v4;
    *v4 = 0x8000000000000000;
    v8 = sub_100002F78(&qword_1000FDE38);
    v16 = sub_1000AAE28(v8, v9, v10, v11, v12, v13, v14, v15, v27, v29[0]);
    sub_1000AAF44(v16, v17, v18, v19, v20, v21, v22, v23, v28, v30);
    sub_10000667C((__int128 *)(*(_QWORD *)(a2 + 56) + 40 * a1), a3);
    v24 = sub_100002F78(&qword_1000FB9C8);
    _NativeDictionary._delete(at:)(a1, a2, &type metadata for String, v24);
    v25 = *v4;
    *v4 = a2;
    swift_bridgeObjectRelease(v25);
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1000AA894@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  uint64_t v27;

  v4 = v2;
  v7 = *v4;
  sub_10001DBE4();
  sub_1000109F0(a1);
  sub_1000AAEA8();
  if ((v7 & 1) != 0)
  {
    sub_1000AB3C4();
    sub_1000AAEF0();
    v8 = sub_100002F78(&qword_1000FDE40);
    sub_1000AAE28(v8, v9, v10, v11, v12, v13, v14, v15, v25, v26);
    v16 = *(_QWORD *)(v27 + 48);
    v17 = sub_100002F78(&qword_1000FB2A0);
    sub_10001E808(v16 + *(_QWORD *)(*(_QWORD *)(v17 - 8) + 72) * v3, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8));
    v18 = *(_QWORD *)(v27 + 56);
    v19 = type metadata accessor for RequestPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(a2, v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v3, v19);
    sub_100006744(&qword_1000FB2A8, &qword_1000FB2A0);
    _NativeDictionary._delete(at:)(v3, v27, v17, v19);
    sub_1000AB178();
    sub_1000AB23C();
    v23 = v19;
  }
  else
  {
    type metadata accessor for RequestPriority(0);
    v20 = sub_10001E070();
  }
  return sub_100005630(v20, v21, v22, v23);
}

uint64_t sub_1000AA9B8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = v1;
  v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  v5 = sub_100010A64(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v16 = *v2;
  v8 = *v2;
  *v2 = 0x8000000000000000;
  v9 = *(_QWORD *)(v8 + 24);
  sub_100002F78(&qword_1000FDE30);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v9);
  v10 = *(_QWORD *)(v16 + 48);
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v5, v11);
  v12 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v5);
  v13 = sub_100002F78(&qword_1000FEAA0);
  sub_100006710(&qword_1000FB638, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  _NativeDictionary._delete(at:)(v5, v16, v11, v13);
  v14 = *v2;
  *v2 = v16;
  swift_bridgeObjectRelease(v14);
  return v12;
}

void sub_1000AAAF8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = sub_1000AB248(a1, a2, a3);
  sub_10001EBE8(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  sub_100006C14();
}

uint64_t sub_1000AAB28()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = swift_task_alloc(dword_1000FEAC4);
  v1 = (_QWORD *)sub_100006AF4(v0);
  v2 = sub_100006AD8(v1);
  return sub_1000A4800(v2, v3, v4, v5);
}

uint64_t sub_1000AAB7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100002F78(&qword_1000FEA88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1000AABC4()
{
  sub_1000A1610();
}

uint64_t sub_1000AAC00()
{
  return sub_1000AAC0C(&qword_1000FEAF0);
}

uint64_t sub_1000AAC0C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(sub_100002F78(a1) - 8);
  sub_1000AB2E0();
  swift_release();
  sub_10007E7EC(v1 + v4, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  return sub_10001E060(v1, v2, v3);
}

uint64_t sub_1000AAC60()
{
  return sub_1000AAC74(&qword_1000FEAF0, (uint64_t (*)(_QWORD, _QWORD, uint64_t))sub_1000A1830);
}

uint64_t sub_1000AAC74(uint64_t *a1, uint64_t (*a2)(_QWORD, _QWORD, uint64_t))
{
  uint64_t v2;
  uint64_t v3;

  sub_100002F78(a1);
  sub_10001EA78();
  return a2(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), v2 + v3);
}

uint64_t sub_1000AACB4()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0[19] + 32))(v0[22], v0[23], v0[18]);
}

uint64_t sub_1000AAD04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v2 + 96) = a1;
  v5 = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v2 + 104) = v5;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v1 + *(_QWORD *)(v5 + 72) * v4, a1);
}

uint64_t sub_1000AAD2C()
{
  return Task.value.getter();
}

void sub_1000AAD48()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData(0);
  sub_100005630(v1, 1, 1, v2);
  sub_10002AD5C(v1, v0);
}

uint64_t sub_1000AAD78()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 600));
}

uint64_t sub_1000AAD9C()
{
  uint64_t (*v0)(uint64_t, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v3 + v1) = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v6);
  return v0(v4, v3, v5);
}

uint64_t sub_1000AAE00()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

uint64_t sub_1000AAE0C()
{
  return type metadata accessor for UUID(0);
}

BOOL sub_1000AAE28(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::Bool v10;
  Swift::Int v11;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

uint64_t sub_1000AAE3C()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 80));
}

uint64_t sub_1000AAE60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100005630(v2, 0, 1, v1);
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000AAE84(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  a1[2] = v2;
  a1[3] = v1;
  a1[4] = v2;
  return swift_retain_n(v2, 2);
}

uint64_t sub_1000AAE9C()
{
  uint64_t v0;

  return swift_bridgeObjectRetain_n(v0, 2);
}

uint64_t sub_1000AAEA8()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000AAEB8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000AAED4()
{
  return Task.value.getter();
}

void sub_1000AAEF0()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

uint64_t sub_1000AAF0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + *(int *)(v0 + 48)) = v2;
  return swift_retain_n(v2, 2);
}

uint64_t sub_1000AAF20(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *((_QWORD *)a1 + 2) = a14;
  *((_QWORD *)a1 + 3) = v14;
  *((_QWORD *)a1 + 4) = a14;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 32))(&a1[v15], v18, v16);
}

uint64_t sub_1000AAF44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  return swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(a10 + 48) + 16 * v10 + 8));
}

uint64_t sub_1000AAF58()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 600));
}

uint64_t sub_1000AAF7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100005630(a1, a2, a3, a4);
}

uint64_t sub_1000AAF90(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  *(_QWORD *)(v1 + 120) = a1;
  result = type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData(0);
  *(_QWORD *)(v1 + 128) = result;
  return result;
}

uint64_t sub_1000AAFB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100005630(v3, 1, 1, a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v5, v1, v2);
}

void sub_1000AAFE4()
{
  _QWORD *v0;

  v0[14] = *(_QWORD *)(v0[9] + *(int *)(v0[7] + 48));
}

uint64_t sub_1000AAFFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t (*a16)(uint64_t, uint64_t, uint64_t), uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v21 = (_QWORD *)(v18 + v19);
  *v21 = a15;
  v21[1] = a18;
  return a16(v18 + v20, a11, a10);
}

uint64_t sub_1000AB01C(uint64_t a1)
{
  return swift_task_dealloc(a1);
}

void sub_1000AB02C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  sub_1000102C0(a1, v3, a3);
}

unint64_t sub_1000AB034()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100010994(v1, v0);
}

uint64_t sub_1000AB044()
{
  return type metadata accessor for UUID(0);
}

uint64_t sub_1000AB04C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + v1);
  *(_QWORD *)(v2 + v1) = a1;
  return swift_release(v3);
}

uint64_t sub_1000AB05C()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of ManagedResource.cost.getter(v0, v1);
}

uint64_t sub_1000AB09C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_1000AB0B8()
{
  return type metadata accessor for AssetLock(0);
}

uint64_t sub_1000AB0C0()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100005700(v1, 1, v0);
}

uint64_t sub_1000AB0E0(uint64_t (*a1)(void))
{
  return a1();
}

void sub_1000AB0EC()
{
  uint64_t *v0;
  uint64_t v1;

  sub_10002AD5C(*(_QWORD *)(v1 + 72), v0);
}

uint64_t sub_1000AB0F8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000AB104(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

void sub_1000AB120(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0x16u);
}

uint64_t sub_1000AB134()
{
  return 0;
}

uint64_t sub_1000AB150()
{
  return 0;
}

uint64_t sub_1000AB16C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 120) = v0;
  return swift_errorRetain(v0);
}

uint64_t sub_1000AB178()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *v1 = v0;
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_1000AB184()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v3, v0, v2);
}

void sub_1000AB198(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  sub_10000DB68(v2, a2, v3);
}

uint64_t sub_1000AB1A4(uint64_t a1)
{
  uint64_t v1;

  return sub_100005630(v1, 1, 1, a1);
}

uint64_t sub_1000AB1B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_1000AB1C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return swift_dynamicCast(a1, a2, v2, v3, 0);
}

_QWORD *sub_1000AB1E4()
{
  _QWORD *v0;

  return sub_10001C830(v0, v0[3]);
}

uint64_t sub_1000AB1F4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 88) + *(_QWORD *)(v0 + 200);
}

uint64_t sub_1000AB20C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return _NativeDictionary._delete(at:)(v4, v3, a3, v5);
}

_QWORD *sub_1000AB21C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  result = a2;
  *a2 = v3;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000AB22C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000AB248(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  return a3(0);
}

uint64_t sub_1000AB258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1000AB288()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000AB294()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 80));
}

void sub_1000AB2A4()
{
  sub_1000A8C3C();
}

BOOL sub_1000AB2B4(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void sub_1000AB2C4(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_10002ACC4(v2, a2);
}

uint64_t sub_1000AB2F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return UUID.init()(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

void sub_1000AB300(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_10002AD5C((uint64_t)va, a2);
}

uint64_t sub_1000AB308()
{
  uint64_t v0;
  uint64_t v1;

  return String.init<A>(describing:)(v1, v0);
}

uint64_t sub_1000AB314()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v0, v1);
}

void sub_1000AB320(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  sub_1000AA42C(a1, v1, v2);
}

void sub_1000AB32C()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  sub_10002ACC4(v0, v1);
}

uint64_t sub_1000AB338@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + v1);
  *(_QWORD *)(a1 + v1) = 0;
  return swift_release(v2);
}

uint64_t sub_1000AB344()
{
  return Logger.logObject.getter();
}

uint64_t sub_1000AB34C()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 608));
}

uint64_t sub_1000AB358()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000AB36C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 6);
}

uint64_t sub_1000AB374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

BOOL sub_1000AB37C(Swift::String a1)
{
  return String.hasPrefix(_:)(a1);
}

uint64_t sub_1000AB388@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_1000AB394()
{
  return type metadata accessor for ModelCatalogAssetVersionedData(0);
}

uint64_t sub_1000AB39C()
{
  return type metadata accessor for URL(0);
}

uint64_t sub_1000AB3A4()
{
  return FilePath.init(stringLiteral:)(0, 0xE000000000000000);
}

void sub_1000AB3B0(uint64_t a1)
{
  uint64_t v1;

  sub_100006694(a1, v1);
}

uint64_t sub_1000AB3B8()
{
  uint64_t v0;

  return dispatch thunk of CatalogResource.id.getter(v0);
}

uint64_t sub_1000AB3C4()
{
  _QWORD *v0;

  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t sub_1000AB3CC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2;
  return swift_task_dealloc(a1);
}

uint64_t sub_1000AB3D8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 72) = v0;
  return swift_errorRetain(v0);
}

uint64_t sub_1000AB3E4()
{
  uint64_t v0;
  uint64_t v1;

  return String.init<A>(describing:)(v1 - 72, v0);
}

uint64_t sub_1000AB3F0()
{
  return sub_10008FE80();
}

void sub_1000AB3FC()
{
  sub_1000BF0B4();
}

void sub_1000AB408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;

  sub_10000DDC0(a17, a2, v17);
}

uint64_t sub_1000AB428(uint64_t a1)
{
  return static Catalog.monitorUpdates(for:on:)(a1, 0);
}

uint64_t sub_1000AB434()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000AB440()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000AB454(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 104))(a1, a2, v2);
}

uint64_t storeEnumTagSinglePayload for ModelManager(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000AB4AC + 4 * byte_1000CCD65[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000AB4E0 + 4 * byte_1000CCD60[v4]))();
}

uint64_t sub_1000AB4E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AB4E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000AB4F0);
  return result;
}

uint64_t sub_1000AB4FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000AB504);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000AB508(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AB510(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ModelManager()
{
  return &type metadata for ModelManager;
}

unint64_t sub_1000AB530()
{
  unint64_t result;

  result = qword_1000FEAF8;
  if (!qword_1000FEAF8)
  {
    result = swift_getWitnessTable(&unk_1000CCDBC, &type metadata for ModelManager);
    atomic_store(result, (unint64_t *)&qword_1000FEAF8);
  }
  return result;
}

const char *sub_1000AB56C(char a1)
{
  if ((a1 & 1) != 0)
    return "asset_transition_delay";
  else
    return "block_allowlist_enforcement";
}

Swift::Int sub_1000AB598(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

Swift::Int sub_1000AB5DC()
{
  char *v0;

  return sub_1000AB598(*v0);
}

const char *sub_1000AB5E4()
{
  return "ModelManager";
}

const char *sub_1000AB5F8()
{
  char *v0;

  return sub_1000AB56C(*v0);
}

uint64_t initializeBufferWithCopyOfBuffer for ProcessEvent(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ProcessEvent(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;
  BOOL v4;

  if (a2)
  {
    if (a2 >= 0xFC && *(_BYTE *)(a1 + 5))
    {
      v2 = *(_DWORD *)a1 + 251;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 4);
      v4 = v3 >= 5;
      v2 = v3 - 5;
      if (!v4)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ProcessEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 5) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 5) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = a2 + 4;
  }
  return result;
}

ValueMetadata *type metadata accessor for ProcessEvent()
{
  return &type metadata for ProcessEvent;
}

BOOL sub_1000AB6B8(char a1, char a2)
{
  return a1 == a2;
}

uint64_t getEnumTagSinglePayload for ProcessPriority(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 4) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v5 = v6 - 5;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ProcessPriority(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1000AB79C + 4 * byte_1000CCE25[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000AB7D0 + 4 * byte_1000CCE20[v4]))();
}

uint64_t sub_1000AB7D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AB7D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000AB7E0);
  return result;
}

uint64_t sub_1000AB7EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000AB7F4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1000AB7F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AB800(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1000AB80C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ProcessPriority()
{
  return &type metadata for ProcessPriority;
}

unint64_t sub_1000AB828()
{
  unint64_t result;

  result = qword_1000FEB00;
  if (!qword_1000FEB00)
  {
    result = swift_getWitnessTable(&unk_1000CCEA4, &type metadata for ProcessPriority);
    atomic_store(result, (unint64_t *)&qword_1000FEB00);
  }
  return result;
}

void sub_1000AB864(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int sub_1000AB888(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

BOOL sub_1000AB8CC(char *a1, char *a2)
{
  return sub_1000AB6B8(*a1, *a2);
}

Swift::Int sub_1000AB8D8()
{
  unsigned __int8 *v0;

  return sub_1000AB888(*v0);
}

void sub_1000AB8E0(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1000AB864(a1, *v1);
}

_QWORD *sub_1000AB8E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;

  v5 = type metadata accessor for InferenceProviderAssetDescriptor(0);
  v43 = *(_QWORD *)(v5 - 8);
  v44 = v5;
  v6 = __chkstk_darwin(v5);
  v42 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v41 = (char *)&v37 - v8;
  v49 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion(0);
  v40 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v48 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    v37 = a2;
    v50 = v2;
    v51 = _swiftEmptyArrayStorage;
    sub_10001193C();
    result = (_QWORD *)sub_10001C854(a1);
    v13 = (uint64_t)result;
    v15 = v14 & 1;
    v38 = a1;
    v39 = a1 + 56;
    v16 = v43;
    v17 = v44;
    while ((v13 & 0x8000000000000000) == 0 && v13 < 1 << *(_BYTE *)(a1 + 32))
    {
      if (((*(_QWORD *)(v39 + (((unint64_t)v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
        goto LABEL_16;
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v12)
        goto LABEL_17;
      v45 = v15;
      v46 = v12;
      v47 = v10;
      v18 = v41;
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v41, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v16 + 72) * v13, v17);
      v19 = v42;
      v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(v42, v18, v17);
      v21 = InferenceProviderAssetDescriptor.identifier.getter(v20);
      v23 = v22;
      v28 = InferenceProviderAssetDescriptor.version.getter(v21, v22, v24, v25, v26, v27);
      v30 = v29;
      v31 = __chkstk_darwin(v28);
      *(&v37 - 4) = v21;
      *(&v37 - 3) = v23;
      *(&v37 - 2) = v31;
      *(&v37 - 1) = v30;
      v32 = v50;
      static Buildable.with(_:)(sub_1000AF4E0, &v37 - 6, v49, &protocol witness table for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion);
      v50 = v32;
      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRelease(v30);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v17);
      v33 = v51;
      if ((swift_isUniquelyReferenced_nonNull_native(v51) & 1) == 0)
      {
        sub_10001193C();
        v33 = v51;
      }
      v34 = v47;
      v35 = v33[2];
      if (v35 >= v33[3] >> 1)
      {
        sub_10001193C();
        v33 = v51;
      }
      v33[2] = v35 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v40 + 32))((unint64_t)v33+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(_QWORD *)(v40 + 72) * v35, v48, v49);
      v51 = v33;
      a1 = v38;
      result = (_QWORD *)sub_10001C6FC(v13, v46, v45 & 1, v38);
      v13 = (uint64_t)result;
      v15 = v36 & 1;
      v10 = v34 - 1;
      if (!v10)
      {
        sub_10001C7E4((uint64_t)result, v12, v15);
        swift_release();
        return v33;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  else
  {
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t EventReporterWrapper.deinit()
{
  uint64_t v0;

  sub_10007F858();
  return v0;
}

uint64_t type metadata accessor for EventReporterWrapper()
{
  return objc_opt_self(_TtC13modelmanagerd20EventReporterWrapper);
}

uint64_t _s13modelmanagerd20EventReporterWrapperCfD_0()
{
  uint64_t v0;

  sub_10007F858();
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for TelemetryIntervalState()
{
  return objc_opt_self(_TtC13modelmanagerd22TelemetryIntervalState);
}

_QWORD *sub_1000ABC98(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11[2];

  sub_100002F78(&qword_1000FD7E0);
  sub_10002BCBC();
  __chkstk_darwin(v3);
  sub_10007F78C();
  v4 = sub_100002F78(&qword_1000FED60);
  v5 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for UInt32, v4, &protocol witness table for UInt32);
  v6 = sub_100002F78(&qword_1000FED68);
  v7 = swift_allocObject(v6, 28, 7);
  *(_DWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 16) = v5;
  a1[2] = v7;
  a1[3] = sub_1000ABDAC;
  a1[4] = 0;
  v8 = type metadata accessor for AuditToken(0);
  sub_100005630(v1, 1, 1, v8);
  sub_1000ABDAC(v1, (uint64_t *)v11);
  sub_1000399D8(v1, &qword_1000FD7E0);
  sub_10000667C(v11, (uint64_t)(a1 + 5));
  v9 = type metadata accessor for TelemetrySignposter(0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  a1[10] = sub_10008C3A0();
  return a1;
}

uint64_t sub_1000ABDAC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v4 = sub_100002F78(&qword_1000FD7E0);
  __chkstk_darwin(v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000AF488(a1, (uint64_t)v6, &qword_1000FD7E0);
  v7 = type metadata accessor for AuditToken(0);
  sub_100005700((uint64_t)v6, 1, v7);
  sub_1000399D8((uint64_t)v6, &qword_1000FD7E0);
  v8 = type metadata accessor for EventReporter(0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v9 = EventReporter.init()();
  v10 = type metadata accessor for EventReporterWrapper();
  result = swift_allocObject(v10, 24, 7);
  *(_QWORD *)(result + 16) = v9;
  a2[3] = v10;
  a2[4] = (uint64_t)&off_1000F4C68;
  *a2 = result;
  return result;
}

void sub_1000ABE90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,__int16 a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  sub_10001D810();
  v51 = v29;
  v31 = v30;
  v33 = v32;
  v35 = v34;
  v37 = v36;
  v39 = v38;
  v41 = v40;
  v43 = v42;
  LODWORD(v50) = HIBYTE(a26);
  HIDWORD(v50) = a26;
  sub_100002F78(&qword_1000FED00);
  sub_10002BCBC();
  __chkstk_darwin(v44);
  sub_10007F7A4();
  sub_1000AF51C();
  sub_1000AF510();
  sub_1000AF508();
  if (v31)
    sub_10001DB48();
  v45 = sub_1000AF500();
  sub_1000AF4F4(v28, v46, v47, v45);
  sub_1000399D8(v28, &qword_1000FED00);
  LOWORD(v48) = a26 & 0x101;
  sub_10008C52C(v43, v41, v39, v37, v35, v33, v31, v51, a21, a22, a23, a24, a25, v48, a27, v49, a22, a23, a25,
    a24,
    v50,
    v27,
    a21,
    a27,
    v43,
    v41,
    BYTE1(v41));
  sub_100006A68();
}

uint64_t sub_1000AC0B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14, unsigned __int8 a15, uint64_t a16)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  _BYTE v40[16];
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[16];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v35 = a7;
  v34 = a6;
  v33 = a5;
  v32 = a4;
  v58 = a16;
  v39 = a15;
  v38 = a14;
  v37 = a13;
  v36 = a12;
  v31 = a11;
  v30 = a9;
  v19 = sub_100002F78(&qword_1000FED28);
  __chkstk_darwin(v19);
  v21 = (uint64_t *)((char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers(0);
  __chkstk_darwin(v22);
  v24 = (char *)&v30 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  GenerativeFunctionsInstrumentationEvent.eventType.setter(0xD000000000000021, 0x80000001000CF530);
  v48 = a2;
  v49 = a3;
  v50 = v32;
  v51 = v33;
  v52 = v34;
  v53 = v35;
  v54 = a8;
  v55 = v30;
  v56 = a10;
  v57 = v31;
  static Buildable.with(_:)(sub_1000AF428, v47, v22, &protocol witness table for GenerativeFunctionsInstrumentationEvent.Identifiers);
  GenerativeFunctionsInstrumentationEvent.identifiers.setter(v24);
  v25 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest(0);
  v26 = swift_allocBox();
  v41 = v36;
  v42 = v37;
  v43 = v38;
  v44 = v39;
  v45 = v58;
  v46 = a8;
  static Buildable.with(_:)(sub_1000AF464, v40, v25, &protocol witness table for GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest);
  *v21 = v26;
  v27 = enum case for GenerativeFunctionsInstrumentationMetadata.mmExecuteRequest(_:);
  v28 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata(0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v21, v27, v28);
  sub_100005630((uint64_t)v21, 0, 1, v28);
  return GenerativeFunctionsInstrumentationEvent.metadata.setter(v21);
}

uint64_t sub_1000AC360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[16];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v26 = a4;
  v27 = a6;
  v35 = a11;
  v29 = a10;
  v28 = a9;
  v14 = sub_100002F78(&qword_1000FED18);
  __chkstk_darwin(v14);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100002F78(&qword_1000FED20);
  __chkstk_darwin(v17);
  v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100002F78(&qword_1000FB2A0);
  UUIDIdentifier.uuid.getter(v20);
  v21 = type metadata accessor for UUID(0);
  sub_100005630((uint64_t)v19, 0, 1, v21);
  GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerRequestIdentifier.setter(v19);
  v22 = sub_100002F78(&qword_1000FB2D8);
  UUIDIdentifier.uuid.getter(v22);
  sub_100005630((uint64_t)v19, 0, 1, v21);
  GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerSessionIdentifier.setter(v19);
  swift_bridgeObjectRetain(a5);
  GenerativeFunctionsInstrumentationEvent.Identifiers.clientRequestIdentifier.setter(v26, a5);
  swift_bridgeObjectRetain(a7);
  GenerativeFunctionsInstrumentationEvent.Identifiers.useCaseIdentifier.setter(v27, a7);
  v23 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion(0);
  v31 = v28;
  v32 = v29;
  v33 = 0;
  v34 = 0;
  static Buildable.with(_:)(sub_1000AF4E0, v30, v23, &protocol witness table for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion);
  sub_100005630((uint64_t)v16, 0, 1, v23);
  GenerativeFunctionsInstrumentationEvent.Identifiers.catalogResourceIdentifier.setter(v16);
  swift_bridgeObjectRetain(a12);
  return GenerativeFunctionsInstrumentationEvent.Identifiers.inferenceProviderIdentifier.setter(v35, a12);
}

uint64_t sub_1000AC558(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unsigned int *v17;
  _QWORD *v18;
  uint64_t v20;

  v13 = sub_100002F78(&qword_1000FED58);
  __chkstk_darwin(v13);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.createdByPID.setter(a2, 0);
  GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.onBehalfOfPID.setter(a3, 0);
  v16 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.RequestType(0);
  v17 = (unsigned int *)&enum case for GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.RequestType.oneShot(_:);
  if ((a4 & 1) == 0)
    v17 = (unsigned int *)&enum case for GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.RequestType.streaming(_:);
  (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v15, *v17, v16);
  type metadata accessor for GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.RequestType(0);
  sub_100005630((uint64_t)v15, 0, 1, v16);
  GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.requestType.setter(v15);
  GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.isFallbackRequest.setter(a5 & 1);
  swift_retain();
  v18 = sub_1000AB8E8(a6, a7);
  return GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.assets.setter(v18);
}

void sub_1000AC694()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10001D810();
  sub_1000AF55C();
  sub_100002F78(&qword_1000FED00);
  sub_10002BCBC();
  __chkstk_darwin(v2);
  sub_1000A10A4();
  sub_1000AF51C();
  sub_1000AF510();
  sub_1000AF508();
  if (v0)
    sub_10001DB48();
  v3 = sub_1000AF500();
  sub_1000AF4F4(v1, v4, v5, v3);
  sub_1000399D8(v1, &qword_1000FED00);
  sub_1000AF54C();
  sub_10008CC48();
  sub_100006A68();
}

uint64_t sub_1000AC75C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  _BYTE v25[8];

  v9 = sub_100002F78(&qword_1000FED08);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)&v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers(0);
  __chkstk_darwin(v12);
  v14 = &v20[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  GenerativeFunctionsInstrumentationEvent.eventType.setter(0xD00000000000001FLL, 0x80000001000CF510);
  v21 = a2;
  v22 = a3;
  v23 = a4;
  static Buildable.with(_:)(sub_1000AF3B4, v20, v12, &protocol witness table for GenerativeFunctionsInstrumentationEvent.Identifiers);
  result = GenerativeFunctionsInstrumentationEvent.identifiers.setter(v14);
  if (a5)
  {
    swift_getErrorValue(a5, v25, v24);
    v16 = v24[1];
    v17 = (char *)v24[2];
    swift_errorRetain(a5);
    sub_10004914C(v16, v17, v11);
    v18 = type metadata accessor for GenerativeFunctionsInstrumentationError(0);
    sub_100005630((uint64_t)v11, 0, 1, v18);
    GenerativeFunctionsInstrumentationEvent.error.setter(v11);
    return swift_errorRelease(a5);
  }
  return result;
}

void sub_1000AC8EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  sub_10001D810();
  v27 = v26;
  v29 = v28;
  v31 = v30;
  v33 = v32;
  v35 = v34;
  v37 = v36;
  v39 = v38;
  v41 = v40;
  v50 = v42;
  sub_100002F78(&qword_1000FED00);
  sub_10002BCBC();
  __chkstk_darwin(v43);
  sub_10004465C();
  sub_10001C830((_QWORD *)(v27 + 40), *(_QWORD *)(v27 + 64));
  sub_1000AF510();
  sub_1000AF508();
  if (v31)
    sub_10001DB48();
  v44 = sub_1000AF500();
  v47 = sub_1000AF4F4(v25, v45, v46, v44);
  sub_1000AF544(v47, &qword_1000FED00);
  sub_10008D068(v50, v41, v39, v37, v35, v33, v31, v29, a21, a22, a23, a24, a25, v48, v49, a22, a23, a24, a25,
    v50,
    v41,
    v39,
    v37,
    v35);
  sub_100006A68();
}

uint64_t sub_1000ACA64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  _BYTE v38[16];
  __int128 v39;
  uint64_t v40;
  _BYTE v41[16];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v36 = a8;
  v35 = a7;
  v34 = a6;
  v33 = a5;
  v32 = a4;
  v51 = a12;
  v37 = a11;
  v31 = a10;
  v30 = a9;
  v14 = sub_100002F78(&qword_1000FED28);
  __chkstk_darwin(v14);
  v16 = (uint64_t *)((char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100002F78(&qword_1000FED10);
  __chkstk_darwin(v20);
  v22 = (char *)&v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  GenerativeFunctionsInstrumentationEvent.eventType.setter(0xD00000000000001CLL, 0x80000001000CF4F0);
  v23 = enum case for GenerativeFunctionsInstrumentationEvent.Subtype.start(_:);
  v24 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Subtype(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v22, v23, v24);
  sub_100005630((uint64_t)v22, 0, 1, v24);
  GenerativeFunctionsInstrumentationEvent.subtype.setter(v22);
  v42 = a2;
  v43 = a3;
  v44 = v32;
  v45 = v33;
  v46 = v34;
  v47 = v35;
  v48 = v36;
  v49 = v30;
  v50 = v31;
  static Buildable.with(_:)(sub_1000AF358, v41, v17, &protocol witness table for GenerativeFunctionsInstrumentationEvent.Identifiers);
  GenerativeFunctionsInstrumentationEvent.identifiers.setter(v19);
  v25 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition(0);
  v26 = swift_allocBox();
  v39 = v37;
  v40 = v51;
  static Buildable.with(_:)(sub_1000AF380, v38, v25, &protocol witness table for GenerativeFunctionsInstrumentationMetadata.AssetTransition);
  *v16 = v26;
  v27 = enum case for GenerativeFunctionsInstrumentationMetadata.assetTransition(_:);
  v28 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata(0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v16, v27, v28);
  sub_100005630((uint64_t)v16, 0, 1, v28);
  return GenerativeFunctionsInstrumentationEvent.metadata.setter(v16);
}

uint64_t sub_1000ACD34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48[16];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v46 = a8;
  v43 = a1;
  v44 = a7;
  v41 = a5;
  v42 = a6;
  v39 = a3;
  v40 = a4;
  v53 = a10;
  v47 = a9;
  v10 = sub_100002F78(&qword_1000FD820);
  __chkstk_darwin(v10);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100002F78(&qword_1000FB2D8);
  v38 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v37 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100002F78(&qword_1000FED20);
  __chkstk_darwin(v15);
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100002F78(&qword_1000FB920);
  __chkstk_darwin(v18);
  v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100002F78(&qword_1000FB2A0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v36 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100002F78(&qword_1000FED18);
  __chkstk_darwin(v25);
  v27 = (char *)&v36 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion(0);
  v49 = v39;
  v50 = v40;
  v51 = v41;
  v52 = v42;
  v29 = v45;
  static Buildable.with(_:)(sub_1000AF4E0, v48, v28, &protocol witness table for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion);
  v45 = v29;
  sub_100005630((uint64_t)v27, 0, 1, v28);
  GenerativeFunctionsInstrumentationEvent.Identifiers.catalogResourceIdentifier.setter(v27);
  sub_1000AF488(v44, (uint64_t)v20, &qword_1000FB920);
  if (sub_100005700((uint64_t)v20, 1, v21) == 1)
  {
    sub_1000399D8((uint64_t)v20, &qword_1000FB920);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v24, v20, v21);
    UUIDIdentifier.uuid.getter(v21);
    v30 = type metadata accessor for UUID(0);
    sub_100005630((uint64_t)v17, 0, 1, v30);
    GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerRequestIdentifier.setter(v17);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  }
  sub_1000AF488(v46, (uint64_t)v12, &qword_1000FD820);
  if (sub_100005700((uint64_t)v12, 1, v13) == 1)
  {
    sub_1000399D8((uint64_t)v12, &qword_1000FD820);
  }
  else
  {
    v32 = v37;
    v31 = v38;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v37, v12, v13);
    UUIDIdentifier.uuid.getter(v13);
    v33 = type metadata accessor for UUID(0);
    sub_100005630((uint64_t)v17, 0, 1, v33);
    GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerSessionIdentifier.setter(v17);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v13);
  }
  v34 = v53;
  swift_bridgeObjectRetain(v53);
  return GenerativeFunctionsInstrumentationEvent.Identifiers.inferenceProviderIdentifier.setter(v47, v34);
}

uint64_t sub_1000AD0C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t State;
  uint64_t v12;

  v3 = sub_100002F78(&qword_1000FED48);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100002F78(&qword_1000FED50);
  __chkstk_darwin(v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v8, a2, v9);
  sub_100005630((uint64_t)v8, 0, 1, v9);
  GenerativeFunctionsInstrumentationMetadata.AssetTransition.reason.setter(v8);
  sub_1000AD224(v5);
  State = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.LoadState(0);
  sub_100005630((uint64_t)v5, 0, 1, State);
  GenerativeFunctionsInstrumentationMetadata.AssetTransition.fromState.setter(v5);
  sub_1000AD224(v5);
  sub_100005630((uint64_t)v5, 0, 1, State);
  return GenerativeFunctionsInstrumentationMetadata.AssetTransition.toState.setter(v5);
}

uint64_t sub_1000AD224@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t State;
  uint64_t v6;
  int v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);

  v3 = v1;
  State = type metadata accessor for LoadState(0);
  v6 = *(_QWORD *)(State - 8);
  __chkstk_darwin(State);
  sub_10007F78C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v2, v3, State);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 88))(v2, State);
  if (v7 == enum case for LoadState.unloaded(_:))
  {
    v8 = (unsigned int *)&enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.LoadState.unloaded(_:);
LABEL_7:
    v9 = *v8;
    type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.LoadState(0);
    v10 = sub_1000AF5A0();
    return v11(v10, v9);
  }
  if (v7 == enum case for LoadState.dynamicMode(_:))
  {
    v8 = (unsigned int *)&enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.LoadState.dynamicMode(_:);
    goto LABEL_7;
  }
  if (v7 == enum case for LoadState.loaded(_:))
  {
    v8 = (unsigned int *)&enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.LoadState.loaded(_:);
    goto LABEL_7;
  }
  *a1 = 0;
  v13 = enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.LoadState.unknown(_:);
  type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.LoadState(0);
  v14 = sub_1000AF5A0();
  v15(v14, v13);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, State);
}

void sub_1000AD350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  sub_10001D810();
  v25 = v23;
  v46 = v26;
  v28 = v27;
  v30 = v29;
  v32 = v31;
  v34 = v33;
  v36 = v35;
  v38 = v37;
  v45 = v39;
  sub_100002F78(&qword_1000FED00);
  sub_10002BCBC();
  __chkstk_darwin(v40);
  sub_10004465C();
  sub_10001C830((_QWORD *)(v25 + 40), *(_QWORD *)(v25 + 64));
  sub_1000AF510();
  sub_1000AF508();
  if (v24)
    sub_10001DB48();
  v41 = sub_1000AF500();
  v44 = sub_1000AF4F4(v22, v42, v43, v41);
  sub_1000AF544(v44, &qword_1000FED00);
  sub_10008D94C(v45, v38, v36, v34, v32, v30, v28, v46, a21, a22, a22, v45, v28, v46, v47, v48, v25, v38, v36, v34, v32);
  sub_100006A68();
}

uint64_t sub_1000AD454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[16];
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[16];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[4];
  _BYTE v48[8];

  v36 = a7;
  v37 = a8;
  v34 = a5;
  v35 = a6;
  v33 = a4;
  v32 = a3;
  v31 = a2;
  v9 = sub_100002F78(&qword_1000FED08);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_100002F78(&qword_1000FED28);
  __chkstk_darwin(v12);
  v14 = (uint64_t *)((char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100002F78(&qword_1000FED10);
  __chkstk_darwin(v18);
  v20 = (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  GenerativeFunctionsInstrumentationEvent.eventType.setter(0xD00000000000001CLL, 0x80000001000CF4F0);
  v21 = enum case for GenerativeFunctionsInstrumentationEvent.Subtype.end(_:);
  v22 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Subtype(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v20, v21, v22);
  sub_100005630((uint64_t)v20, 0, 1, v22);
  GenerativeFunctionsInstrumentationEvent.subtype.setter(v20);
  v42 = v31;
  v43 = v32;
  v44 = v33;
  v45 = v34;
  v46 = v35;
  static Buildable.with(_:)(sub_1000AF2F4, v41, v15, &protocol witness table for GenerativeFunctionsInstrumentationEvent.Identifiers);
  GenerativeFunctionsInstrumentationEvent.identifiers.setter(v17);
  v23 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition(0);
  v24 = swift_allocBox();
  v39 = v36;
  v40 = v37;
  static Buildable.with(_:)(sub_1000AF314, v38, v23, &protocol witness table for GenerativeFunctionsInstrumentationMetadata.AssetTransition);
  *v14 = v24;
  v25 = enum case for GenerativeFunctionsInstrumentationMetadata.assetTransition(_:);
  v26 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata(0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v14, v25, v26);
  sub_100005630((uint64_t)v14, 0, 1, v26);
  result = GenerativeFunctionsInstrumentationEvent.metadata.setter(v14);
  if (a9)
  {
    swift_getErrorValue(a9, v48, v47);
    v28 = v47[1];
    v29 = (char *)v47[2];
    swift_errorRetain(a9);
    sub_10004914C(v28, v29, v11);
    v30 = type metadata accessor for GenerativeFunctionsInstrumentationError(0);
    sub_100005630((uint64_t)v11, 0, 1, v30);
    GenerativeFunctionsInstrumentationEvent.error.setter(v11);
    return swift_errorRelease(a9);
  }
  return result;
}

uint64_t sub_1000AD76C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v10 = sub_100002F78(&qword_1000FED18);
  __chkstk_darwin(v10);
  v12 = &v15[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion(0);
  v16 = a3;
  v17 = a4;
  v18 = a5;
  v19 = a6;
  static Buildable.with(_:)(sub_1000AF4E0, v15, v13, &protocol witness table for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion);
  sub_100005630((uint64_t)v12, 0, 1, v13);
  return GenerativeFunctionsInstrumentationEvent.Identifiers.catalogResourceIdentifier.setter(v12);
}

uint64_t sub_1000AD858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v5 = sub_100002F78(&qword_1000FED40);
  __chkstk_darwin(v5);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  GenerativeFunctionsInstrumentationMetadata.AssetTransition.memoryCostKB.setter(a2, 0);
  v8 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v7, a3, v8);
  sub_100005630((uint64_t)v7, 0, 1, v8);
  return GenerativeFunctionsInstrumentationMetadata.AssetTransition.result.setter(v7);
}

void sub_1000AD91C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_10001D810();
  sub_1000AF55C();
  sub_100002F78(&qword_1000FED00);
  sub_10002BCBC();
  __chkstk_darwin(v3);
  sub_10004465C();
  sub_10001C830((_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 64));
  sub_1000AF510();
  sub_1000AF508();
  if (v2)
    sub_10001DB48();
  v4 = sub_1000AF500();
  v7 = sub_1000AF4F4(v0, v5, v6, v4);
  sub_1000AF544(v7, &qword_1000FED00);
  sub_1000AF54C();
  sub_10008DF40();
  sub_100006A68();
}

uint64_t sub_1000AD9FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _BYTE v36[16];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;

  v28 = a5;
  v40 = a8;
  v29 = a6;
  v30 = a7;
  v27 = a4;
  v10 = sub_100002F78(&qword_1000FED28);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100002F78(&qword_1000FED10);
  __chkstk_darwin(v16);
  v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  GenerativeFunctionsInstrumentationEvent.eventType.setter(0xD000000000000017, 0x80000001000CF4D0);
  v19 = enum case for GenerativeFunctionsInstrumentationEvent.Subtype.start(_:);
  v20 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Subtype(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v18, v19, v20);
  sub_100005630((uint64_t)v18, 0, 1, v20);
  GenerativeFunctionsInstrumentationEvent.subtype.setter(v18);
  v37 = a2;
  v38 = a3;
  v39 = v27;
  static Buildable.with(_:)(sub_1000AF284, v36, v13, &protocol witness table for GenerativeFunctionsInstrumentationEvent.Identifiers);
  GenerativeFunctionsInstrumentationEvent.identifiers.setter(v15);
  v21 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent(0);
  v22 = swift_allocBox();
  v32 = v28;
  v33 = v29;
  v34 = v30;
  v35 = v40;
  static Buildable.with(_:)(sub_1000AF2B4, v31, v21, &protocol witness table for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent);
  *v12 = v22;
  v23 = enum case for GenerativeFunctionsInstrumentationMetadata.modelManagerSessionEvent(_:);
  v24 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata(0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v12, v23, v24);
  sub_100005630((uint64_t)v12, 0, 1, v24);
  return GenerativeFunctionsInstrumentationEvent.metadata.setter(v12);
}

void sub_1000ADC60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t), void (*a7)(uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_100002F78(&qword_1000FED20);
  sub_10002BCBC();
  __chkstk_darwin(v13);
  sub_1000A10A4();
  v14 = sub_100002F78(a5);
  UUIDIdentifier.uuid.getter(v14);
  v15 = type metadata accessor for UUID(0);
  sub_1000AF5E8(v7, v16, v17, v15);
  a6(v7);
  swift_bridgeObjectRetain(a4);
  a7(a3, a4);
  sub_10007EDD8();
}

uint64_t sub_1000ADD14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v9 = sub_100002F78(&qword_1000FED38);
  __chkstk_darwin(v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = enum case for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventType.add(_:);
  v13 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventType(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v11, v12, v13);
  sub_100005630((uint64_t)v11, 0, 1, v13);
  GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.sessionEventType.setter(v11);
  v14 = swift_bridgeObjectRetain(a2);
  GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.supportedAssetBundleIdentifiers.setter(v14);
  GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.onBehalfOfPID.setter(a3, 0);
  GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.createdByPID.setter(a4, 0);
  return GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.containsSensitiveData.setter(a5 & 1);
}

void sub_1000ADE1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[16];
  uint64_t v11;
  uint64_t v12;

  sub_1000AF5B4();
  sub_100002F78(&qword_1000FED00);
  sub_10002BCBC();
  __chkstk_darwin(v4);
  v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001C830((_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 64));
  v11 = v3;
  v12 = v2;
  sub_1000AF510();
  sub_1000AF508();
  if (v1)
    sub_10001DB48();
  v7 = sub_1000AF500();
  sub_1000AF4F4((uint64_t)v6, v8, v9, v7);
  sub_1000399D8((uint64_t)v6, &qword_1000FED00);
  sub_1000AF58C();
  sub_10008E394();
  sub_10001D950();
}

void sub_1000ADEDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100002F78(&qword_1000FED00);
  sub_10002BCBC();
  __chkstk_darwin(v2);
  sub_10001E654();
  sub_1000AF51C();
  sub_1000AF510();
  sub_1000AF508();
  if (v0)
    sub_10001DB48();
  v3 = sub_1000AF500();
  sub_1000AF4F4(v1, v4, v5, v3);
  sub_1000399D8(v1, &qword_1000FED00);
  sub_10008E604();
}

uint64_t sub_1000ADF94(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[16];
  uint64_t v20;

  v3 = sub_100002F78(&qword_1000FED28);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)&v19[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers(0);
  __chkstk_darwin(v6);
  v8 = &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_100002F78(&qword_1000FED10);
  __chkstk_darwin(v9);
  v11 = &v19[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  GenerativeFunctionsInstrumentationEvent.eventType.setter(0xD00000000000001ALL, 0x80000001000CF4B0);
  v12 = enum case for GenerativeFunctionsInstrumentationEvent.Subtype.start(_:);
  v13 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Subtype(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v11, v12, v13);
  sub_100005630((uint64_t)v11, 0, 1, v13);
  GenerativeFunctionsInstrumentationEvent.subtype.setter(v11);
  v20 = a2;
  static Buildable.with(_:)(sub_1000AF4CC, v19, v6, &protocol witness table for GenerativeFunctionsInstrumentationEvent.Identifiers);
  GenerativeFunctionsInstrumentationEvent.identifiers.setter(v8);
  v14 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent(0);
  v15 = swift_allocBox();
  static Buildable.with(_:)(sub_1000AE1C8, 0, v14, &protocol witness table for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent);
  *v5 = v15;
  v16 = enum case for GenerativeFunctionsInstrumentationMetadata.modelManagerSessionEvent(_:);
  v17 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata(0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v5, v16, v17);
  sub_100005630((uint64_t)v5, 0, 1, v17);
  return GenerativeFunctionsInstrumentationEvent.metadata.setter(v5);
}

uint64_t sub_1000AE1C8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v0 = sub_100002F78(&qword_1000FED38);
  __chkstk_darwin(v0);
  v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = enum case for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventType.remove(_:);
  v4 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventType(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 104))(v2, v3, v4);
  sub_100005630((uint64_t)v2, 0, 1, v4);
  return GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.sessionEventType.setter(v2);
}

void sub_1000AE284()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[16];
  uint64_t v11;
  uint64_t v12;

  sub_1000AF5B4();
  sub_100002F78(&qword_1000FED00);
  sub_10002BCBC();
  __chkstk_darwin(v4);
  v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001C830((_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 64));
  v11 = v3;
  v12 = v2;
  sub_1000AF510();
  sub_1000AF508();
  if (v1)
    sub_10001DB48();
  v7 = sub_1000AF500();
  sub_1000AF4F4((uint64_t)v6, v8, v9, v7);
  sub_1000399D8((uint64_t)v6, &qword_1000FED00);
  sub_1000AF58C();
  sub_10008E8D0();
  sub_10001D950();
}

void sub_1000AE344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v25[16];
  uint64_t v26;
  _BYTE v27[16];
  uint64_t v28;
  uint64_t v29;

  v29 = a7;
  sub_100002F78(&qword_1000FED28);
  sub_10002BCBC();
  __chkstk_darwin(v14);
  sub_10007F7A4();
  v15 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers(0);
  sub_10002BCBC();
  __chkstk_darwin(v16);
  sub_10001E654();
  sub_100002F78(&qword_1000FED10);
  sub_10002BCBC();
  __chkstk_darwin(v17);
  sub_10001E63C();
  GenerativeFunctionsInstrumentationEvent.eventType.setter(a4, a5);
  v18 = enum case for GenerativeFunctionsInstrumentationEvent.Subtype.end(_:);
  v19 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Subtype(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v9, v18, v19);
  sub_1000AF57C(v9);
  GenerativeFunctionsInstrumentationEvent.subtype.setter(v9);
  v28 = a2;
  static Buildable.with(_:)(a6, v27, v15, &protocol witness table for GenerativeFunctionsInstrumentationEvent.Identifiers);
  GenerativeFunctionsInstrumentationEvent.identifiers.setter(v8);
  v20 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent(0);
  v21 = swift_allocBox();
  v26 = a3;
  static Buildable.with(_:)(v29, v25, v20, &protocol witness table for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent);
  *v7 = v21;
  v22 = enum case for GenerativeFunctionsInstrumentationMetadata.modelManagerSessionEvent(_:);
  v23 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata(0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v7, v22, v23);
  sub_100005630((uint64_t)v7, 0, 1, v23);
  GenerativeFunctionsInstrumentationEvent.metadata.setter(v7);
  sub_10007EDD8();
}

uint64_t sub_1000AE510()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100002F78(&qword_1000FED20);
  sub_10002BCBC();
  __chkstk_darwin(v1);
  sub_10001E654();
  v2 = sub_100002F78(&qword_1000FB2D8);
  UUIDIdentifier.uuid.getter(v2);
  v3 = type metadata accessor for UUID(0);
  sub_1000AF5E8(v0, v4, v5, v3);
  return GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerSessionIdentifier.setter(v0);
}

uint64_t sub_1000AE598(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_100002F78(&qword_1000FED30);
  sub_10002BCBC();
  __chkstk_darwin(v7);
  sub_10001E654();
  sub_100002F78(&qword_1000FED38);
  sub_10002BCBC();
  __chkstk_darwin(v8);
  sub_10001E63C();
  v9 = *a3;
  v10 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v4, v9, v10);
  sub_100005630(v4, 0, 1, v10);
  GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.sessionEventType.setter(v4);
  v11 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v3, a2, v11);
  sub_1000AF57C(v3);
  return GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.sessionEventResult.setter(v3);
}

void sub_1000AE698()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10001D810();
  sub_1000AF55C();
  sub_100002F78(&qword_1000FED00);
  sub_10002BCBC();
  __chkstk_darwin(v2);
  sub_10004465C();
  sub_1000AF54C();
  sub_10008EB40();
  sub_10001C830((_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 64));
  sub_1000AF510();
  sub_1000AF508();
  if (v1)
    sub_10001DB48();
  v3 = sub_1000AF500();
  v6 = sub_1000AF4F4(v0, v4, v5, v3);
  sub_1000AF544(v6, &qword_1000FED00);
  sub_100006A68();
}

uint64_t sub_1000AE768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v17 = a7;
  v12 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  GenerativeFunctionsInstrumentationEvent.eventType.setter(0xD00000000000001BLL, 0x80000001000CF490);
  v19 = a2;
  v20 = a3;
  v21 = a4;
  v22 = a5;
  v23 = a6;
  v24 = v17;
  static Buildable.with(_:)(sub_1000AF140, v18, v12, &protocol witness table for GenerativeFunctionsInstrumentationEvent.Identifiers);
  return GenerativeFunctionsInstrumentationEvent.identifiers.setter(v14);
}

uint64_t sub_1000AE86C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v21[16];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v11 = sub_100002F78(&qword_1000FED18);
  __chkstk_darwin(v11);
  v13 = &v21[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = sub_100002F78(&qword_1000FED20);
  __chkstk_darwin(v14);
  v16 = &v21[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = sub_100002F78(&qword_1000FB2D8);
  UUIDIdentifier.uuid.getter(v17);
  v18 = type metadata accessor for UUID(0);
  sub_100005630((uint64_t)v16, 0, 1, v18);
  GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerSessionIdentifier.setter(v16);
  swift_bridgeObjectRetain(a4);
  GenerativeFunctionsInstrumentationEvent.Identifiers.inferenceProviderIdentifier.setter(a3, a4);
  v19 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion(0);
  v22 = a6;
  v23 = a7;
  v24 = 0;
  v25 = 0;
  static Buildable.with(_:)(sub_1000AF4E0, v21, v19, &protocol witness table for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion);
  sub_100005630((uint64_t)v13, 0, 1, v19);
  return GenerativeFunctionsInstrumentationEvent.Identifiers.catalogResourceIdentifier.setter(v13);
}

void sub_1000AE9E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_100002F78(&qword_1000FED00);
  sub_10002BCBC();
  __chkstk_darwin(v7);
  sub_10004465C();
  sub_1000AF51C();
  sub_1000AF510();
  sub_1000AF508();
  if (a5)
    sub_10001DB48();
  v8 = sub_1000AF500();
  v11 = sub_1000AF4F4(v5, v9, v10, v8);
  sub_1000AF544(v11, &qword_1000FED00);
  sub_10001D950();
}

uint64_t sub_1000AEA9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[16];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[3];
  _BYTE v34[8];

  v26 = a7;
  v24 = a5;
  v25 = a6;
  v23 = a4;
  v9 = sub_100002F78(&qword_1000FED08);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100002F78(&qword_1000FED10);
  __chkstk_darwin(v15);
  v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  GenerativeFunctionsInstrumentationEvent.eventType.setter(0xD000000000000021, 0x80000001000CF460);
  v18 = enum case for GenerativeFunctionsInstrumentationEvent.Subtype.fail(_:);
  v19 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Subtype(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v17, v18, v19);
  sub_100005630((uint64_t)v17, 0, 1, v19);
  GenerativeFunctionsInstrumentationEvent.subtype.setter(v17);
  v28 = a2;
  v29 = a3;
  v30 = v23;
  v31 = v24;
  v32 = v25;
  static Buildable.with(_:)(sub_1000AF0E8, v27, v12, &protocol witness table for GenerativeFunctionsInstrumentationEvent.Identifiers);
  GenerativeFunctionsInstrumentationEvent.identifiers.setter(v14);
  swift_getErrorValue(v26, v34, v33);
  sub_10004914C(v33[1], (char *)v33[2], v11);
  v20 = type metadata accessor for GenerativeFunctionsInstrumentationError(0);
  sub_100005630((uint64_t)v11, 0, 1, v20);
  return GenerativeFunctionsInstrumentationEvent.error.setter(v11);
}

uint64_t sub_1000AECA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v8 = sub_100002F78(&qword_1000FED18);
  __chkstk_darwin(v8);
  v10 = &v19[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_100002F78(&qword_1000FED20);
  __chkstk_darwin(v11);
  v13 = &v19[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = sub_100002F78(&qword_1000FB2A0);
  UUIDIdentifier.uuid.getter(v14);
  v15 = type metadata accessor for UUID(0);
  sub_100005630((uint64_t)v13, 0, 1, v15);
  GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerRequestIdentifier.setter(v13);
  v16 = sub_100002F78(&qword_1000FB2D8);
  UUIDIdentifier.uuid.getter(v16);
  sub_100005630((uint64_t)v13, 0, 1, v15);
  GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerSessionIdentifier.setter(v13);
  v17 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion(0);
  v20 = a5;
  v21 = a6;
  v22 = 0;
  v23 = 0;
  static Buildable.with(_:)(sub_1000AF108, v19, v17, &protocol witness table for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion);
  sub_100005630((uint64_t)v10, 0, 1, v17);
  return GenerativeFunctionsInstrumentationEvent.Identifiers.catalogResourceIdentifier.setter(v10);
}

uint64_t sub_1000AEE44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9;
  unint64_t v10;

  swift_bridgeObjectRetain(a3);
  GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion.identifier.setter(a2, a3);
  if (a5)
    v9 = a4;
  else
    v9 = 3157552;
  if (a5)
    v10 = a5;
  else
    v10 = 0xE300000000000000;
  swift_bridgeObjectRetain(a5);
  return GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion.version.setter(v9, v10);
}

uint64_t sub_1000AEEC8()
{
  uint64_t v0;

  sub_10007F858();
  swift_release();
  sub_10000650C((_QWORD *)(v0 + 40));
  swift_release();
  return v0;
}

uint64_t sub_1000AEEF8()
{
  uint64_t v0;

  sub_1000AEEC8();
  return swift_deallocClassInstance(v0, 88, 7);
}

uint64_t type metadata accessor for TelemetryManager()
{
  return objc_opt_self(_TtC13modelmanagerd16TelemetryManager);
}

#error "1000AEF74: call analysis failed (funcsize=20)"

void sub_1000AEF88()
{
  sub_1000AC694();
}

#error "1000AEFCC: call analysis failed (funcsize=14)"

#error "1000AEFFC: call analysis failed (funcsize=12)"

void sub_1000AF010()
{
  sub_1000AD91C();
}

void sub_1000AF030()
{
  sub_1000ADE1C();
}

void sub_1000AF050()
{
  sub_1000ADEDC();
}

void sub_1000AF070()
{
  sub_1000AE284();
}

void sub_1000AF090()
{
  sub_1000AE698();
}

void sub_1000AF0B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1000AE9E8(a1, a2, a3, a4, a5);
}

uint64_t sub_1000AF0D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000AF56C();
  return sub_1000AEA9C(v0, v1, v2, v3, v4, v5, v6);
}

uint64_t sub_1000AF0E8(uint64_t a1)
{
  uint64_t *v1;

  return sub_1000AECA4(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1000AF108(uint64_t a1)
{
  uint64_t v1;

  return sub_1000AEE44(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1000AF124()
{
  return sub_1000AF15C();
}

uint64_t sub_1000AF140()
{
  return sub_1000AF15C();
}

uint64_t sub_1000AF15C()
{
  uint64_t (*v0)(void);

  sub_1000AF56C();
  return v0();
}

void sub_1000AF178(uint64_t a1)
{
  uint64_t v1;

  sub_1000AE344(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), 0xD00000000000001ALL, 0x80000001000CF4B0, (uint64_t)sub_1000AF4CC, (uint64_t)sub_1000AF1B8);
}

uint64_t sub_1000AF1B8(uint64_t a1)
{
  uint64_t v1;

  return sub_1000AE598(a1, *(_QWORD *)(v1 + 16), (unsigned int *)&enum case for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventType.remove(_:));
}

uint64_t sub_1000AF1D8(uint64_t a1)
{
  uint64_t v1;

  return sub_1000ADF94(a1, *(_QWORD *)(v1 + 16));
}

void sub_1000AF1F0(uint64_t a1)
{
  uint64_t v1;

  sub_1000AE344(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), 0xD000000000000017, 0x80000001000CF4D0, (uint64_t)sub_1000AF230, (uint64_t)sub_1000AF248);
}

uint64_t sub_1000AF230()
{
  return sub_1000AE510();
}

uint64_t sub_1000AF248(uint64_t a1)
{
  uint64_t v1;

  return sub_1000AE598(a1, *(_QWORD *)(v1 + 16), (unsigned int *)&enum case for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventType.add(_:));
}

uint64_t sub_1000AF268()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000AF56C();
  return sub_1000AD9FC(v1, v2, v3, v4, v5, v6, v7, *(unsigned __int8 *)(v0 + 64));
}

void sub_1000AF284()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000AF5DC();
  sub_1000ADC60(v0, v1, v2, v3, &qword_1000FB2D8, (void (*)(uint64_t))&GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerSessionIdentifier.setter, (void (*)(uint64_t, uint64_t))&GenerativeFunctionsInstrumentationEvent.Identifiers.useCaseIdentifier.setter);
}

uint64_t sub_1000AF2B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000AF5DC();
  return sub_1000ADD14(v1, v2, v3, v4, *(_BYTE *)(v0 + 40));
}

uint64_t sub_1000AF2D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000AF5C8();
  return sub_1000AD454(v0, v1, v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_1000AF2F4(uint64_t a1)
{
  uint64_t *v1;

  return sub_1000AD76C(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1000AF314(uint64_t a1)
{
  uint64_t v1;

  return sub_1000AD858(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000AF32C()
{
  uint64_t v0;
  __n128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v1 = sub_1000AF528();
  return sub_1000ACA64(v2, v3, v4, v5, v6, v7, v8, v9, v1.n128_i64[0], v1.n128_i64[1], v10, *(_QWORD *)(v0 + 104));
}

uint64_t sub_1000AF358()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_1000AF5C8();
  return sub_1000ACD34(v1, v2, v3, v4, v5, v6, v7, v8, v9, *(_QWORD *)(v0 + 80));
}

uint64_t sub_1000AF380()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000AF5DC();
  return sub_1000AD0C0(v0, v1);
}

uint64_t sub_1000AF398(uint64_t a1)
{
  uint64_t *v1;

  return sub_1000AC75C(a1, v1[2], v1[3], v1[4], v1[5]);
}

void sub_1000AF3B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000AF5DC();
  sub_1000ADC60(v0, v1, v2, v3, &qword_1000FB2A0, (void (*)(uint64_t))&GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerRequestIdentifier.setter, (void (*)(uint64_t, uint64_t))&GenerativeFunctionsInstrumentationEvent.Identifiers.inferenceProviderIdentifier.setter);
}

uint64_t sub_1000AF3E4()
{
  uint64_t v0;
  __n128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = sub_1000AF528();
  return sub_1000AC0B8(v2, v3, v4, v5, v6, v7, v8, v9, *(_OWORD *)&v1, v10, v11, *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_BYTE *)(v0 + 120), *(_BYTE *)(v0 + 121), *(_QWORD *)(v0 + 128));
}

uint64_t sub_1000AF428(uint64_t a1)
{
  uint64_t *v1;

  return sub_1000AC360(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9], v1[10], v1[11], v1[12]);
}

uint64_t sub_1000AF464(uint64_t a1)
{
  uint64_t v1;

  return sub_1000AC558(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32), *(_BYTE *)(v1 + 33), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_1000AF488(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100002F78(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000AF4CC()
{
  return sub_1000AF230();
}

uint64_t sub_1000AF4E0(uint64_t a1)
{
  return sub_1000AF108(a1);
}

uint64_t sub_1000AF4F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_100005630(a1, v4, 1, a4);
}

uint64_t sub_1000AF500()
{
  return type metadata accessor for GenerativeFunctionsInstrumentationEvent(0);
}

uint64_t sub_1000AF508()
{
  return EventReporter.send(eventBuiltWithPresetsAnd:)();
}

_QWORD *sub_1000AF51C()
{
  uint64_t v0;

  return sub_10001C830((_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 64));
}

__n128 sub_1000AF528()
{
  uint64_t v0;

  return *(__n128 *)(v0 + 72);
}

uint64_t sub_1000AF544(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_1000399D8(v2, a2);
}

uint64_t sub_1000AF57C(uint64_t a1)
{
  uint64_t v1;

  return sub_100005630(a1, 0, 1, v1);
}

uint64_t sub_1000AF58C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000AF5A0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000AF5E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100005630(a1, 0, 1, a4);
}

uint64_t sub_1000AF5F4()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_100002FB8(v0, qword_1000FED70);
  sub_100002FF8(v0, (uint64_t)qword_1000FED70);
  v1 = subsystemName.getter();
  return Logger.init(subsystem:category:)(v1);
}

void sub_1000AF660(uint64_t a1, unint64_t a2, char a3)
{
  NSObject *v3;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSString v21;
  uint64_t v22;
  uint64_t v23[17];

  if (&_sendAneSignal)
  {
    if (qword_1000FB200 != -1)
      swift_once(&qword_1000FB200, sub_1000AF5F4);
    v7 = sub_10001DD64();
    sub_100002FF8(v7, (uint64_t)qword_1000FED70);
    v8 = sub_100037E8C();
    Logger.logObject.getter(v8);
    v9 = sub_10001E9D0();
    if (os_log_type_enabled(v3, v9))
    {
      v10 = sub_10001D8D4(18);
      v11 = sub_10001D8D4(32);
      v23[0] = v11;
      *(_DWORD *)v10 = 136315394;
      sub_10001D964();
      sub_1000102C0(a1, a2, v23);
      v22 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, v23);
      sub_100037F88();
      *(_WORD *)(v10 + 12) = 1024;
      LODWORD(v22) = a3 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, (char *)&v22 + 4);
      _os_log_impl((void *)&_mh_execute_header, v3, v9, "Sending start ANE session signal for %s (useEnergyEfficientMode: %{BOOL}d)", (uint8_t *)v10, 0x12u);
      swift_arrayDestroy(v11, 1);
      sub_10001D790(v11);
      sub_10001D790(v10);

    }
    else
    {

      sub_1000AAE00();
    }
    v13 = sub_100002F78(&qword_1000FEE38);
    v16 = sub_1000AFCB4(v13, v14, v15);
    *(_OWORD *)(v16 + 16) = xmmword_1000CBCD0;
    *(_QWORD *)(v16 + 32) = 0xD000000000000017;
    *(_QWORD *)(v16 + 40) = 0x80000001000CF590;
    *(_QWORD *)(v16 + 48) = a1;
    *(_QWORD *)(v16 + 56) = a2;
    *(_QWORD *)(v16 + 72) = &type metadata for String;
    *(_QWORD *)(v16 + 80) = 0xD000000000000020;
    *(_QWORD *)(v16 + 88) = 0x80000001000CF5F0;
    *(_QWORD *)(v16 + 120) = &type metadata for Bool;
    *(_BYTE *)(v16 + 96) = a3 & 1;
    sub_10001D964();
    v17 = sub_1000AFCF0();
    Dictionary.init(dictionaryLiteral:)(v17, v18, v19, v20);
    v21 = sub_1000AFC88();
    sub_1000AFCF0();
    Dictionary._bridgeToObjectiveC()();
    sub_10009B2FC();
    sendAneSignal(v21, (char *)&type metadata for Any + 8);

  }
}

void sub_1000AF8B8(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSString v29;
  uint64_t v30;

  if (&_sendAneSignal)
  {
    if (qword_1000FB200 != -1)
      swift_once(&qword_1000FB200, sub_1000AF5F4);
    v5 = sub_10001DD64();
    sub_100002FF8(v5, (uint64_t)qword_1000FED70);
    v6 = sub_100037E8C();
    Logger.logObject.getter(v6);
    v7 = sub_10001E9D0();
    if (sub_100039E8C(v7))
    {
      v8 = sub_10001D8D4(12);
      v9 = sub_10001D8D4(32);
      v10 = sub_1000AFC74(4.8149e-34);
      sub_1000AFC94(v10);
      sub_1000AFC44(v11, v12, v13, v14, v15, v16, v17, v18, v30, v9);
      sub_100037F88();
      sub_1000AFC60((void *)&_mh_execute_header, v19, v20, "Sending stop ANE session signal for %s");
      sub_1000AFCA4();
      sub_10001D790(v9);
      sub_10001D790(v8);

    }
    else
    {

      sub_1000AAE00();
    }
    v21 = sub_100002F78(&qword_1000FEE38);
    v24 = sub_1000AFCB4(v21, v22, v23);
    *(_OWORD *)(v24 + 16) = xmmword_1000CB140;
    *(_QWORD *)(v24 + 32) = 0xD000000000000017;
    *(_QWORD *)(v24 + 40) = 0x80000001000CF590;
    *(_QWORD *)(v24 + 72) = &type metadata for String;
    *(_QWORD *)(v24 + 48) = a1;
    *(_QWORD *)(v24 + 56) = a2;
    sub_10001D964();
    v25 = sub_1000AFCC8();
    Dictionary.init(dictionaryLiteral:)(v25, v26, v27, v28);
    v29 = sub_1000AFC88();
    sub_1000AFCC8();
    Dictionary._bridgeToObjectiveC()();
    sub_10009B2FC();
    sub_1000AFCBC();

  }
}

void sub_1000AFA64()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSString v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSString v27;
  uint64_t v28;

  if (&_sendAneSignal)
  {
    if (qword_1000FB200 != -1)
      swift_once(&qword_1000FB200, sub_1000AF5F4);
    v1 = sub_10001DD64();
    sub_100002FF8(v1, (uint64_t)qword_1000FED70);
    v2 = sub_100037E8C();
    Logger.logObject.getter(v2);
    v3 = sub_10001E9D0();
    if (sub_100039E8C(v3))
    {
      v4 = sub_10001D8D4(12);
      v5 = sub_10001D8D4(32);
      v6 = sub_1000AFC74(4.8149e-34);
      sub_1000AFC94(v6);
      sub_1000AFC44(v7, v8, v9, v10, v11, v12, v13, v14, v28, v5);
      sub_100037F88();
      sub_1000AFC60((void *)&_mh_execute_header, v15, v16, "Sending abort ANE session signal for %s");
      sub_1000AFCA4();
      sub_10001D790(v5);
      sub_10001D790(v4);

    }
    else
    {

      sub_1000AAE00();
    }
    v17 = sub_100002F78(&qword_1000FEE38);
    v20 = sub_1000AFCB4(v17, v18, v19);
    *(_OWORD *)(v20 + 16) = xmmword_1000CB140;
    *(_QWORD *)(v20 + 32) = 0xD000000000000017;
    *(_QWORD *)(v20 + 40) = 0x80000001000CF590;
    v21 = String._bridgeToObjectiveC()();
    type metadata accessor for CFString(0);
    *(_QWORD *)(v20 + 72) = v22;
    *(_QWORD *)(v20 + 48) = v21;
    v23 = sub_1000AFCDC();
    Dictionary.init(dictionaryLiteral:)(v23, v24, v25, v26);
    v27 = sub_1000AFC88();
    sub_1000AFCDC();
    Dictionary._bridgeToObjectiveC()();
    sub_10009B2FC();
    sub_1000AFCBC();

  }
}

uint64_t type metadata accessor for NeuralEngine()
{
  return objc_opt_self(_TtC13modelmanagerd12NeuralEngine);
}

uint64_t sub_1000AFC44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a9 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a9, &a10, v10);
}

void sub_1000AFC60(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_1000AFC74(float a1)
{
  uint64_t v1;
  float *v2;

  *v2 = a1;
  return swift_bridgeObjectRetain(v1);
}

NSString sub_1000AFC88()
{
  return String._bridgeToObjectiveC()();
}

void sub_1000AFC94(uint64_t a1, ...)
{
  unint64_t v1;
  uint64_t v2;
  va_list va;

  va_start(va, a1);
  sub_1000102C0(v2, v1, (uint64_t *)va);
}

uint64_t sub_1000AFCA4()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 1);
}

uint64_t sub_1000AFCB4(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  return swift_initStackObject(a1, va);
}

uint64_t sub_1000AFCBC()
{
  uint64_t v0;
  uint64_t v1;

  return sendAneSignal(v1, v0);
}

uint64_t sub_1000AFCC8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000AFCDC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000AFCF0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000AFD04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ObjectType;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void (*v36)(uint64_t, char *, uint64_t);
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void **v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;

  v46 = type metadata accessor for DispatchWorkItemFlags(0);
  v44 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  sub_10002BD70();
  v41 = v2;
  v3 = type metadata accessor for DispatchQoS(0);
  v42 = *(_QWORD *)(v3 - 8);
  v43 = v3;
  __chkstk_darwin(v3);
  sub_10002BD70();
  v40 = v4;
  v39 = sub_100002F78(&qword_1000FEE40);
  v5 = *(_QWORD *)(v39 - 8);
  v45 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v39);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_source.MemoryPressureEvent(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B0144();
  v12 = sub_100002F78(&qword_1000FEE50);
  v13 = swift_allocObject(v12, ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ 3 * *(_QWORD *)(v9 + 72), *(unsigned __int8 *)(v9 + 80) | 7);
  *(_OWORD *)(v13 + 16) = xmmword_1000CC930;
  v14 = static OS_dispatch_source.MemoryPressureEvent.all.getter();
  v15 = static OS_dispatch_source.MemoryPressureEvent.procLimitWarn.getter(v14);
  static OS_dispatch_source.MemoryPressureEvent.procLimitCritical.getter(v15);
  v47 = (void **)v13;
  v16 = sub_100039A14(&qword_1000FEE58, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.MemoryPressureEvent, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.MemoryPressureEvent);
  v17 = sub_100002F78(&qword_1000FEE60);
  v18 = sub_1000B0640(&qword_1000FEE68, &qword_1000FEE60);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v47, v17, v18, v8, v16);
  v19 = static OS_dispatch_source.makeMemoryPressureSource(eventMask:queue:)(v11, 0);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  ObjectType = swift_getObjectType(v19);
  v37 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v38 = a1;
  v21 = a1;
  v22 = v39;
  v37(v7, a1, v39);
  v23 = *(unsigned __int8 *)(v5 + 80);
  v24 = (v23 + 24) & ~v23;
  v25 = swift_allocObject(&unk_1000F4CE0, v24 + v45, v23 | 7);
  *(_QWORD *)(v25 + 16) = v19;
  v36 = *(void (**)(uint64_t, char *, uint64_t))(v5 + 32);
  v36(v25 + v24, v7, v22);
  v49 = sub_1000B0408;
  v50 = v25;
  v47 = _NSConcreteStackBlock;
  v48 = 1107296256;
  v26 = sub_1000B0698((uint64_t)&unk_1000F4CF8);
  v27 = swift_unknownObjectRetain(v19);
  v28 = v40;
  static DispatchQoS.unspecified.getter(v27);
  v29 = v41;
  sub_1000B06A4();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v28, v29, v26, ObjectType);
  _Block_release(v26);
  v44 = *(_QWORD *)(v44 + 8);
  ((void (*)(uint64_t, uint64_t))v44)(v29, v46);
  v30 = v43;
  v42 = *(_QWORD *)(v42 + 8);
  ((void (*)(uint64_t, uint64_t))v42)(v28, v43);
  swift_release(v50);
  v37(v7, v21, v22);
  v31 = (v23 + 16) & ~v23;
  v32 = swift_allocObject(&unk_1000F4D30, v31 + v45, v23 | 7);
  v36(v32 + v31, v7, v22);
  v49 = sub_1000B0510;
  v50 = v32;
  v47 = _NSConcreteStackBlock;
  v48 = 1107296256;
  v33 = sub_1000B0698((uint64_t)&unk_1000F4D48);
  static DispatchQoS.unspecified.getter(v33);
  sub_1000B06A4();
  OS_dispatch_source.setCancelHandler(qos:flags:handler:)(v28, v29, v33, ObjectType);
  _Block_release(v33);
  ((void (*)(uint64_t, uint64_t))v44)(v29, v46);
  ((void (*)(uint64_t, uint64_t))v42)(v28, v30);
  swift_release(v50);
  OS_dispatch_source.activate()();
  v34 = swift_allocObject(&unk_1000F4D80, 24, 7);
  *(_QWORD *)(v34 + 16) = v19;
  return AsyncStream.Continuation.onTermination.setter(sub_1000B0638, v34, v22);
}

unint64_t sub_1000B0144()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000FEE48;
  if (!qword_1000FEE48)
  {
    v1 = objc_opt_self(OS_dispatch_source);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000FEE48);
  }
  return result;
}

uint64_t sub_1000B0180(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t ObjectType;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t (*v17)(char *, uint64_t);
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  char v23;
  _QWORD v24[2];

  v24[1] = a2;
  v24[0] = sub_100002F78(&qword_1000FEEE8);
  v3 = *(_QWORD *)(v24[0] - 8);
  __chkstk_darwin(v24[0]);
  v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_source.MemoryPressureEvent(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)v24 - v11;
  ObjectType = swift_getObjectType(a1);
  v14 = ((uint64_t (*)(void))OS_dispatch_source_memorypressure.data.getter)();
  static OS_dispatch_source.MemoryPressureEvent.critical.getter(v14);
  v15 = sub_100039A14((unint64_t *)&unk_1000FEEF0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.MemoryPressureEvent, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.MemoryPressureEvent);
  v16 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v12, v6, v15);
  v17 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
  v18 = v17(v10, v6);
  if ((v16 & 1) != 0
    || (static OS_dispatch_source.MemoryPressureEvent.warning.getter(v18),
        v19 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v12, v6, v15),
        v20 = v17(v10, v6),
        (v19 & 1) != 0))
  {
    v17(v12, v6);
LABEL_4:
    OS_dispatch_source_memorypressure.data.getter(ObjectType);
    v21 = sub_100002F78(&qword_1000FEE40);
    AsyncStream.Continuation.yield(_:)(v10, v21);
    return (*(uint64_t (**)(char *, _QWORD))(v3 + 8))(v5, v24[0]);
  }
  static OS_dispatch_source.MemoryPressureEvent.normal.getter(v20);
  v23 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v12, v6, v15);
  v17(v10, v6);
  result = v17(v12, v6);
  if ((v23 & 1) != 0)
    goto LABEL_4;
  return result;
}

uint64_t sub_1000B0390()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100002F78(&qword_1000FEE40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000B0408()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_100002F78(&qword_1000FEE40) - 8) + 80);
  return sub_1000B0180(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_1000B043C(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_1000B0468(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000B0478(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000B0480()
{
  sub_100002F78(&qword_1000FEE40);
  AsyncStream.Continuation.finish()();
}

uint64_t sub_1000B04AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100002F78(&qword_1000FEE40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_1000B0510()
{
  sub_100002F78(&qword_1000FEE40);
  sub_1000B0480();
}

uint64_t sub_1000B0540()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = _swiftEmptyArrayStorage;
  v1 = sub_100039A14((unint64_t *)&unk_1000FEED0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v2 = sub_100002F78(&qword_1000FBF38);
  v3 = sub_1000B0640(&qword_1000FEEE0, &qword_1000FBF38);
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

void sub_1000B05EC(uint64_t a1, uint64_t a2)
{
  swift_getObjectType(a2);
  OS_dispatch_source.cancel()();
}

uint64_t sub_1000B0614()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000B0638(uint64_t a1)
{
  uint64_t v1;

  sub_1000B05EC(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1000B0640(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_1000056BC(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for MemoryPressureEventProvider()
{
  return &type metadata for MemoryPressureEventProvider;
}

void *sub_1000B0698@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 136) = v1;
  *(_QWORD *)(v2 - 128) = a1;
  return _Block_copy((const void *)(v2 - 152));
}

uint64_t sub_1000B06A4()
{
  return sub_1000B0540();
}

void sub_1000B06B0()
{
  _QWORD *v0;
  _QWORD v1[9];

  v0 = Hasher.init(_seed:)(v1, 0);
  sub_1000B1028((uint64_t)v0);
  Hasher._finalize()();
  sub_1000449BC();
}

Swift::Int sub_1000B06E0(char a1)
{
  return sub_1000B0760(0, a1 & 1);
}

uint64_t sub_1000B06EC(uint64_t a1)
{
  return String.hash(into:)(a1, 0x64656C6261736964, 0xE800000000000000);
}

uint64_t sub_1000B0704(uint64_t a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;

  v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0)
    v3 = 0x73694C776F6C6C41;
  else
    v3 = 0x73656963696C6F50;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xE900000000000074;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_1000B0760(uint64_t a1, char a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  if ((a2 & 1) != 0)
    v3 = 0x73694C776F6C6C41;
  else
    v3 = 0x73656963696C6F50;
  if ((a2 & 1) != 0)
    v4 = 0xE900000000000074;
  else
    v4 = 0xE800000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_1000B07E0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD v2[9];

  v1 = Hasher.init(_seed:)(v2, a1);
  sub_1000B1028((uint64_t)v1);
  Hasher._finalize()();
  sub_1000449BC();
}

uint64_t sub_1000B080C(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  unsigned int v4;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000F2760, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t sub_1000B0860(char a1)
{
  if ((a1 & 1) != 0)
    return 0x73694C776F6C6C41;
  else
    return 0x73656963696C6F50;
}

uint64_t sub_1000B089C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;

  v3 = sub_100002F78(&qword_1000FEFC0);
  __chkstk_darwin(v3);
  v4 = a1[3];
  v5 = a1[4];
  sub_10001C830(a1, v4);
  v6 = sub_1000B0D58();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PolicyFile.CodingKeys, &type metadata for PolicyFile.CodingKeys, v6, v4, v5);
  if (v1)
  {
    sub_10002BF38();
  }
  else
  {
    sub_100002F78(&qword_1000FEFD0);
    sub_1000B0D94();
    sub_1000B104C();
    sub_1000B1074();
    v4 = v9;
    sub_100002F78(&qword_1000FEFE8);
    v8 = sub_1000B0E40();
    swift_bridgeObjectRetain();
    sub_1000B104C();
    sub_1000B1074();
    sub_1000B1064();
    if (v8)
    {
      sub_100006C48();
      sub_10002BF38();
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_10002BF38();
      swift_bridgeObjectRelease();
    }
    sub_100006C48();
  }
  return v4;
}

uint64_t sub_1000B0A10(uint64_t a1)
{
  return sub_1000B1044(a1, qword_1001000A8, 41, 0x80000001000CF680);
}

uint64_t sub_1000B0A30(uint64_t a1)
{
  return sub_1000B1044(a1, qword_1001000C0, 48, 0x80000001000CF640);
}

uint64_t sub_1000B0A50(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = type metadata accessor for FilePath(0);
  sub_100002FB8(v7, a2);
  sub_100002FF8(v7, (uint64_t)a2);
  return FilePath.init(stringLiteral:)(a3, a4);
}

uint64_t destroy for PolicyFile(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return swift_bridgeObjectRelease(a1[1]);
}

uint64_t *_s13modelmanagerd10PolicyFileVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t *assignWithCopy for PolicyFile(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for PolicyFile(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PolicyFile(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PolicyFile(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PolicyFile()
{
  return &type metadata for PolicyFile;
}

void sub_1000B0C30(char *a1, char *a2)
{
  sub_1000B2300(*a1, *a2);
}

Swift::Int sub_1000B0C3C()
{
  char *v0;

  return sub_1000B06E0(*v0);
}

uint64_t sub_1000B0C44(uint64_t a1)
{
  char *v1;

  return sub_1000B0704(a1, *v1);
}

Swift::Int sub_1000B0C4C(uint64_t a1)
{
  char *v1;

  return sub_1000B0760(a1, *v1);
}

uint64_t sub_1000B0C54@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1000B080C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000B0C80@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1000B0860(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000B0CA8()
{
  char *v0;

  return sub_1000B0860(*v0);
}

uint64_t sub_1000B0CB0@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1000B085C(a1);
  *a2 = result;
  return result;
}

void sub_1000B0CD4(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1000B0CE0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B0D58();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B0D08(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B0D58();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B0D30@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1000B089C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

unint64_t sub_1000B0D58()
{
  unint64_t result;

  result = qword_1000FEFC8;
  if (!qword_1000FEFC8)
  {
    result = swift_getWitnessTable(&unk_1000CD168, &type metadata for PolicyFile.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000FEFC8);
  }
  return result;
}

unint64_t sub_1000B0D94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000FEFD8;
  if (!qword_1000FEFD8)
  {
    v1 = sub_1000056BC(&qword_1000FEFD0);
    sub_1000B0E00();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1000FEFD8);
  }
  return result;
}

unint64_t sub_1000B0E00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000FEFE0;
  if (!qword_1000FEFE0)
  {
    v1 = type metadata accessor for Policy(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Policy, v1);
    atomic_store(result, (unint64_t *)&qword_1000FEFE0);
  }
  return result;
}

unint64_t sub_1000B0E40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000FEFF0;
  if (!qword_1000FEFF0)
  {
    v1 = sub_1000056BC(&qword_1000FEFE8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000FEFF0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PolicyFile.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000B0EE8 + 4 * byte_1000CD031[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000B0F1C + 4 * byte_1000CD02C[v4]))();
}

uint64_t sub_1000B0F1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B0F24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000B0F2CLL);
  return result;
}

uint64_t sub_1000B0F38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000B0F40);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000B0F44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B0F4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PolicyFile.CodingKeys()
{
  return &type metadata for PolicyFile.CodingKeys;
}

unint64_t sub_1000B0F6C()
{
  unint64_t result;

  result = qword_1000FEFF8;
  if (!qword_1000FEFF8)
  {
    result = swift_getWitnessTable(&unk_1000CD140, &type metadata for PolicyFile.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000FEFF8);
  }
  return result;
}

unint64_t sub_1000B0FAC()
{
  unint64_t result;

  result = qword_1000FF000;
  if (!qword_1000FF000)
  {
    result = swift_getWitnessTable(&unk_1000CD078, &type metadata for PolicyFile.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000FF000);
  }
  return result;
}

unint64_t sub_1000B0FEC()
{
  unint64_t result;

  result = qword_1000FF008;
  if (!qword_1000FF008)
  {
    result = swift_getWitnessTable(&unk_1000CD0A0, &type metadata for PolicyFile.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000FF008);
  }
  return result;
}

uint64_t sub_1000B1028(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return String.hash(into:)(va, 0x64656C6261736964, 0xE800000000000000);
}

uint64_t sub_1000B1044(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000B0A50(a1, a2, a3 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a4);
}

uint64_t sub_1000B104C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000B1064()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000B1074()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t sub_1000B1080(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[5] = a1;
  v3[6] = v2;
  v4 = sub_100002F78(&qword_1000FF160);
  v3[7] = sub_1000983EC(v4);
  v3[8] = swift_task_alloc(v1);
  return sub_10001D6D0();
}

uint64_t sub_1000B10D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = sub_100002F78(&qword_1000FBF30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v1, v3, v5);
  sub_100005630(v1, 0, 1, v5);
  sub_1000B1F24(v1, v2);
  v6 = v4 + OBJC_IVAR____TtC13modelmanagerd15TimeoutExecutor_continuation;
  sub_10002B308(v4 + OBJC_IVAR____TtC13modelmanagerd15TimeoutExecutor_continuation, v0 + 16, 33);
  sub_1000B1EDC(v2, v6);
  swift_endAccess();
  swift_task_dealloc();
  swift_task_dealloc();
  return sub_1000A0F88(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000B118C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[8] = v1;
  v3 = sub_100002F78(&qword_1000FF160);
  v2[9] = sub_1000983EC(v3);
  v2[10] = swift_task_alloc(v0);
  v4 = sub_100002F78(&qword_1000FBF30);
  v2[11] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[12] = v5;
  v2[13] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return sub_10001D6D0();
}

uint64_t sub_1000B1208()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 64) + OBJC_IVAR____TtC13modelmanagerd15TimeoutExecutor_continuation;
  sub_10002B308(v3, v0 + 16, 0);
  sub_1000B1E54(v3, v2);
  if (sub_100005700(v2, 1, v1) == 1)
  {
    sub_1000B1E9C(*(_QWORD *)(v0 + 80));
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 96);
    v4 = *(_QWORD *)(v0 + 104);
    v6 = *(_QWORD *)(v0 + 88);
    v7 = *(_QWORD *)(v0 + 72);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 32))(v4, *(_QWORD *)(v0 + 80), v6);
    sub_100005630(v7, 1, 1, v6);
    sub_10002B308(v3, v0 + 40, 33);
    sub_1000B1EDC(v7, v3);
    v8 = swift_endAccess();
    CheckedContinuation.resume(returning:)(v8, v6);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  }
  swift_task_dealloc();
  sub_10001E330();
  swift_task_dealloc();
  return sub_1000A0F88(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000B1310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch(sub_1000B1330, v4, 0);
}

uint64_t sub_1000B1330()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  sub_1000B1BF8();
  v4 = swift_task_alloc(64);
  *(_QWORD *)(v0 + 56) = v4;
  v5 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = v3;
  *(_QWORD *)(v4 + 32) = v2;
  *(_OWORD *)(v4 + 40) = v5;
  v6 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 64) = v6;
  *v6 = v0;
  v6[1] = sub_1000B13F0;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t sub_1000B13F0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 64);
  *(_QWORD *)(*v1 + 72) = v0;
  swift_task_dealloc(v3);
  if (!v0)
    swift_task_dealloc(*(_QWORD *)(v2 + 56));
  return sub_10001D6D0();
}

uint64_t sub_1000B1458()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(*(_QWORD *)(v0 + 48)
                                                                         + OBJC_IVAR____TtC13modelmanagerd15TimeoutExecutor_hitTimeout));
}

uint64_t sub_1000B1474()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

double sub_1000B14AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  double result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v30 = a5;
  v31 = a6;
  v28 = a3;
  v29 = a4;
  v8 = sub_100002F78(&qword_1000FBF30);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100002F78(&qword_1000FB230);
  __chkstk_darwin(v12);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TaskPriority(0);
  sub_100005630((uint64_t)v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  v16 = sub_1000B1BF8();
  v17 = *(unsigned __int8 *)(v9 + 80);
  v18 = (v17 + 40) & ~v17;
  v19 = (v10 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8;
  v21 = (char *)swift_allocObject(&unk_1000F4FB0, v20 + 16, v17 | 7);
  *((_QWORD *)v21 + 2) = a2;
  *((_QWORD *)v21 + 3) = v16;
  *((_QWORD *)v21 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v21[v18], v11, v8);
  v22 = &v21[v19];
  v23 = v29;
  *(_QWORD *)v22 = v28;
  *((_QWORD *)v22 + 1) = v23;
  v24 = &v21[v20];
  v25 = v31;
  *(_QWORD *)v24 = v30;
  *((_QWORD *)v24 + 1) = v25;
  swift_retain_n(a2, 2);
  swift_retain();
  sub_10000DB68((uint64_t)v14, (uint64_t)&unk_1000FF148, (uint64_t)v21);
  *(_QWORD *)&result = swift_release(v26).n128_u64[0];
  return result;
}

uint64_t sub_1000B1644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;

  v8[5] = a8;
  v8[6] = v13;
  v8[3] = a6;
  v8[4] = a7;
  v8[2] = a4;
  v10 = sub_100002F78(&qword_1000FB230);
  v8[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)swift_task_alloc(dword_1000FF04C);
  v8[8] = v11;
  *v11 = v8;
  v11[1] = sub_1000B16D0;
  return sub_1000B1080(a5);
}

uint64_t sub_1000B16D0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  sub_10001D680(*(_QWORD *)(*(_QWORD *)v0 + 64));
  return swift_task_switch(sub_1000B171C, v1, 0);
}

uint64_t sub_1000B171C()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t (*v11)(void);

  v1 = v0[7];
  v3 = v0[4];
  v2 = (int *)v0[5];
  v4 = v0[2];
  v5 = v0[3];
  v6 = type metadata accessor for TaskPriority(0);
  sub_100005630(v1, 1, 1, v6);
  v7 = sub_1000B1BF8();
  v8 = (_QWORD *)swift_allocObject(&unk_1000F4FD8, 56, 7);
  v8[2] = v4;
  v8[3] = v7;
  v8[4] = v5;
  v8[5] = v3;
  v8[6] = v4;
  swift_retain_n(v4, 2);
  sub_10000DB68(v1, (uint64_t)&unk_1000FF158, (uint64_t)v8);
  swift_release();
  v11 = (uint64_t (*)(void))((char *)v2 + *v2);
  v9 = (_QWORD *)swift_task_alloc(v2[1]);
  v0[9] = v9;
  *v9 = v0;
  v9[1] = sub_1000B1800;
  return v11();
}

uint64_t sub_1000B1800()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  v2 = *v1;
  v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
  else
  {
    v5 = (_QWORD *)swift_task_alloc(dword_1000FF054);
    *(_QWORD *)(v2 + 80) = v5;
    *v5 = v3;
    v5[1] = sub_1000B1884;
    return sub_1000B118C();
  }
}

uint64_t sub_1000B1884()
{
  uint64_t (**v0)(void);

  sub_10001D680(*((_QWORD *)*v0 + 10));
  sub_10001E330();
  return sub_100006A38(v0[1]);
}

uint64_t sub_1000B18C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v8 = type metadata accessor for ContinuousClock(0);
  v6[5] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[6] = v9;
  v6[7] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000B192C, a6, 0);
}

uint64_t sub_1000B192C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  ContinuousClock.init()();
  v3 = (uint64_t (__cdecl *)())((char *)&dword_1000FF718 + dword_1000FF718);
  v1 = (_QWORD *)swift_task_alloc(unk_1000FF71C);
  *(_QWORD *)(v0 + 64) = v1;
  *v1 = v0;
  v1[1] = sub_1000B19A4;
  return v3();
}

uint64_t sub_1000B19A4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 56);
  v4 = *(_QWORD *)(*v1 + 40);
  v5 = *(_QWORD *)(*v1 + 48);
  *(_QWORD *)(*v1 + 72) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  if (v0)
    v6 = sub_1000B1A88;
  else
    v6 = sub_1000B1A2C;
  return swift_task_switch(v6, *(_QWORD *)(v2 + 32), 0);
}

uint64_t sub_1000B1A2C()
{
  uint64_t v0;
  _QWORD *v1;

  *(_BYTE *)(*(_QWORD *)(v0 + 32) + OBJC_IVAR____TtC13modelmanagerd15TimeoutExecutor_hitTimeout) = 1;
  v1 = (_QWORD *)swift_task_alloc(dword_1000FF054);
  *(_QWORD *)(v0 + 80) = v1;
  *v1 = v0;
  v1[1] = sub_1000B1884;
  return sub_1000B118C();
}

uint64_t sub_1000B1A88()
{
  uint64_t v0;

  swift_task_dealloc();
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000B1AB4()
{
  uint64_t v0;

  sub_1000B1E9C(v0 + OBJC_IVAR____TtC13modelmanagerd15TimeoutExecutor_continuation);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000B1AE0()
{
  return type metadata accessor for TimeoutExecutor(0);
}

uint64_t type metadata accessor for TimeoutExecutor(uint64_t a1)
{
  uint64_t result;

  result = qword_1000FF038;
  if (!qword_1000FF038)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TimeoutExecutor);
  return result;
}

void sub_1000B1B20(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_1000B1BA0(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_1000CD1E8;
    swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
  }
}

void sub_1000B1BA0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000FF060)
  {
    v2 = sub_1000056BC(&qword_1000FBF30);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000FF060);
  }
}

unint64_t sub_1000B1BF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000FF138;
  if (!qword_1000FF138)
  {
    v1 = type metadata accessor for TimeoutExecutor(255);
    result = swift_getWitnessTable(&unk_1000CD200, v1);
    atomic_store(result, &qword_1000FF138);
  }
  return result;
}

double sub_1000B1C38(uint64_t a1)
{
  uint64_t *v1;

  return sub_1000B14AC(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1000B1C48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 v7;

  v1 = sub_100002F78(&qword_1000FBF30);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = ((((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v7 = swift_release();
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 8))(v0 + v4, v1, v7);
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1000B1CF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = sub_100002F78(&qword_1000FBF30);
  v3 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64)
      + ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = (v3 + 23) & 0xFFFFFFFFFFFFFFF8;
  v5 = (uint64_t *)(v0 + v3);
  v6 = *v5;
  v7 = v5[1];
  v8 = *(_QWORD *)(v0 + v4);
  v9 = (_QWORD *)swift_task_alloc(dword_1000FF144);
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = sub_10001CA84;
  v10 = sub_1000B1F6C();
  return sub_1000B1644(v10, v11, v12, v13, v14, v6, v7, v8);
}

uint64_t sub_1000B1DBC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000B1DE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v0 + 48);
  v3 = (_QWORD *)swift_task_alloc(dword_1000FF154);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10001D668;
  v4 = sub_1000B1F6C();
  return sub_1000B18C4(v4, v5, v6, v7, v8, v2);
}

uint64_t sub_1000B1E54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100002F78(&qword_1000FF160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B1E9C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100002F78(&qword_1000FF160);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000B1EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100002F78(&qword_1000FF160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B1F24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100002F78(&qword_1000FF160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B1F6C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000B1F88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t vars0;
  uint64_t vars8;

  v6 = *(_QWORD *)(a3 + 16);
  if (v6)
  {
    v21 = v5;
    swift_retain();
    swift_retain();
    swift_retain();
    v9 = 0;
    while (1)
    {
      v10 = *(_QWORD *)(a3 + 8 * v9 + 32);
      v11 = *(_QWORD *)(v10 + OBJC_IVAR____TtC13modelmanagerd14ExecutionGroup_assets);
      swift_retain();
      sub_1000B46F8(v11, a5, v12, v13, v14, v15, v16, v17, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, vars0,
        vars8);
      if ((v18 & 1) != 0)
        break;
      swift_release();
      if (v6 == ++v9)
      {
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        return 0;
      }
    }
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    return 0;
  }
  return v10;
}

_QWORD *sub_1000B20A4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v4;
      v4 += 2;
      v6 = swift_retain(v5);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v6);
      v7 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v7);
      v8 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v5);
      specialized ContiguousArray._endMutation()(v8);
      --v2;
    }
    while (v2);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_1000B2150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD v24[3];
  _QWORD v25[4];

  v4 = (uint64_t *)v3;
  sub_100002F78(&qword_1000FB230);
  sub_10001DD00();
  __chkstk_darwin(v8);
  sub_1000C49BC();
  sub_100048DB4(a1, v3, &qword_1000FB230);
  v9 = sub_10001DBC0();
  v10 = sub_1000C4918();
  if ((_DWORD)v10 == 1)
  {
    sub_1000C37F8(v3, &qword_1000FB230);
    v11 = 12544;
  }
  else
  {
    v12 = TaskPriority.rawValue.getter(v10);
    sub_10002B7F8(v3, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8));
    v11 = v12 | 0x3100;
  }
  v13 = *(_QWORD *)(a3 + 16);
  if (v13)
  {
    v14 = *(_QWORD *)(a3 + 24);
    ObjectType = swift_getObjectType(*(_QWORD *)(a3 + 16));
    swift_unknownObjectRetain(v13);
    v16 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v14);
    v18 = v17;
    swift_unknownObjectRelease(v13);
  }
  else
  {
    v16 = 0;
    v18 = 0;
  }
  v19 = *v4;
  v20 = sub_100006A80((uint64_t)&unk_1000F5290, 32);
  *(_QWORD *)(v20 + 16) = a2;
  *(_QWORD *)(v20 + 24) = a3;
  v21 = (_QWORD *)(v18 | v16);
  if (v18 | v16)
  {
    v25[0] = 0;
    v25[1] = 0;
    v21 = v25;
    v25[2] = v16;
    v25[3] = v18;
  }
  v24[0] = 1;
  v24[1] = v21;
  v24[2] = v19;
  v22 = swift_task_create(v11, v24, (char *)&type metadata for () + 8, &unk_1000FF7F8, v20);
  return swift_release(v22);
}

uint64_t sub_1000B22C8(uint64_t a1, uint64_t a2)
{
  return sub_1000B23C8(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for AssetPolicy, &qword_1000FF678);
}

uint64_t sub_1000B22E4(uint64_t a1, uint64_t a2)
{
  return sub_1000B23C8(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for RequestPriority, &qword_1000FF668);
}

void sub_1000B2300(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x73694C776F6C6C41;
  else
    v3 = 0x73656963696C6F50;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xE900000000000074;
  if ((a2 & 1) != 0)
    v5 = 0x73694C776F6C6C41;
  else
    v5 = 0x73656963696C6F50;
  if ((a2 & 1) != 0)
    v6 = 0xE900000000000074;
  else
    v6 = 0xE800000000000000;
  if (v3 != v5 || v4 != v6)
    sub_10001DB04(v3, v4, v5, v6);
  sub_10001D8B4();
  sub_10001E034();
  sub_100049140();
}

uint64_t sub_1000B2390(uint64_t a1, uint64_t a2)
{
  return sub_1000B23C8(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState, &qword_1000FD7E8);
}

uint64_t sub_1000B23AC(uint64_t a1, uint64_t a2)
{
  return sub_1000B23C8(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for DaemonSessionState, &qword_1000FF848);
}

uint64_t sub_1000B23C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4)
{
  char v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  a3(0);
  sub_100006710(a4, a3);
  sub_1000C4D7C();
  sub_1000C4D7C();
  if (v11 == v9 && v12 == v10)
    v7 = 1;
  else
    v7 = sub_10001DB04(v11, v12, v9, v10);
  sub_10001D8B4();
  sub_10001E034();
  return v7 & 1;
}

uint64_t sub_1000B2480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[18] = a4;
  v5[19] = a5;
  v5[16] = a2;
  v5[17] = a3;
  return sub_10001D948((uint64_t)sub_1000B2498, 0);
}

uint64_t sub_1000B2498()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t ObjectType;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  int64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t (*v64)(uint64_t, uint64_t);
  _QWORD *v65;

  v63 = v1 + 11;
  v2 = v1[17];
  if ((v2 & 0xC000000000000001) != 0)
  {
    if (v2 < 0)
      v3 = v1[17];
    else
      v3 = v2 & 0xFFFFFFFFFFFFFF8;
    sub_10007DCD8();
    __CocoaSet.makeIterator()(v3);
    sub_10001E1D8();
    sub_100006710(&qword_1000FB768, type metadata accessor for InferenceProviderAsset);
    v4 = sub_10007F9BC();
    result = Set.Iterator.init(_cocoa:)(v4, v5, v6);
    v2 = v1[2];
    v60 = v1[3];
    v8 = v1[4];
    v9 = v1[5];
    v10 = v1[6];
  }
  else
  {
    v60 = v2 + 56;
    sub_1000C4860();
    v10 = v11 & v12;
    result = sub_10007DCD8();
    v8 = v0;
    v9 = 0;
  }
  v61 = v1 + 7;
  v57 = v1 + 15;
  v58 = v1 + 14;
  v59 = (unint64_t)(v8 + 64) >> 6;
  v65 = v1;
  v62 = v2;
  if (v2 < 0)
    goto LABEL_10;
  while (1)
  {
    if (v10)
    {
      v13 = (v10 - 1) & v10;
      v14 = __clz(__rbit64(v10)) | (v9 << 6);
      v15 = v9;
      goto LABEL_29;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      return result;
    }
    if (v22 >= v59)
      goto LABEL_40;
    v15 = v9 + 1;
    if (!*(_QWORD *)(v60 + 8 * v22))
    {
      v15 = v9 + 2;
      if (v9 + 2 >= v59)
        goto LABEL_40;
      if (!*(_QWORD *)(v60 + 8 * v15))
      {
        v15 = v9 + 3;
        if (v9 + 3 >= v59)
          goto LABEL_40;
        if (!*(_QWORD *)(v60 + 8 * v15))
        {
          v15 = v9 + 4;
          if (v9 + 4 >= v59)
            goto LABEL_40;
          if (!*(_QWORD *)(v60 + 8 * v15))
          {
            v15 = v9 + 5;
            if (v9 + 5 >= v59)
              goto LABEL_40;
            if (!*(_QWORD *)(v60 + 8 * v15))
              break;
          }
        }
      }
    }
LABEL_28:
    sub_10001E70C();
    v13 = v26 & v25;
    v14 = v27 + (v15 << 6);
LABEL_29:
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    sub_10001E194();
    if (!v21)
      goto LABEL_40;
    while (1)
    {
      v28 = v65[18];
      v29 = v65[19];
      sub_100002F78(&qword_1000FB230);
      v30 = sub_10001FAE8();
      v31 = sub_10001DBC0();
      sub_10007F8CC();
      sub_100005630(v32, v33, v34, v31);
      v35 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F52B8, 56);
      v35[2] = 0;
      v36 = v35 + 2;
      v35[3] = 0;
      v35[4] = v28;
      v35[5] = v29;
      v35[6] = v21;
      v37 = sub_10001FAE8();
      sub_1000C4D44(v30);
      v38 = sub_100005700(v37, 1, v31);
      v39 = sub_10001DAE8();
      if (v38 == 1)
      {
        sub_1000C3DD4(v37);
        v40 = 0;
      }
      else
      {
        v41 = TaskPriority.rawValue.getter(v39);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v37, v31);
        v40 = v41;
      }
      sub_10001E330();
      v42 = *v36;
      if (*v36)
      {
        v43 = v35[3];
        ObjectType = swift_getObjectType(*v36);
        swift_unknownObjectRetain(v42);
        v45 = v42;
        dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v43);
        sub_1000C48C4();
      }
      else
      {
        v45 = 0;
        ObjectType = 0;
      }
      v2 = v62;
      v46 = *(_QWORD *)v65[16];
      v47 = sub_100006A80((uint64_t)&unk_1000F52E0, 32);
      *(_QWORD *)(v47 + 16) = &unk_1000FF818;
      *(_QWORD *)(v47 + 24) = v35;
      v48 = (_QWORD *)(ObjectType | v45);
      if (ObjectType | v45)
      {
        v48 = v61;
        *v61 = 0;
        v61[1] = 0;
        v65[9] = v45;
        v65[10] = ObjectType;
      }
      v65[11] = 1;
      v65[12] = v48;
      v65[13] = v46;
      v49 = swift_task_create(v40 | 0x3100, v63, (char *)&type metadata for () + 8, &unk_1000FF820, v47);
      swift_release(v49);
      sub_1000C37F8(v30, &qword_1000FB230);
      result = sub_10002B504();
      v9 = v15;
      v10 = v13;
      if ((v62 & 0x8000000000000000) == 0)
        break;
LABEL_10:
      v16 = __CocoaSet.Iterator.next()(result);
      if (v16)
      {
        v17 = v16;
        *v57 = v16;
        v18 = sub_10001E1D8();
        swift_unknownObjectRetain(v17);
        v19 = sub_10002BF40();
        sub_10002B4BC(v19, v20, (uint64_t)&type metadata for Swift.AnyObject + 8, v18);
        v21 = *v58;
        swift_unknownObjectRelease(v17);
        v15 = v9;
        v13 = v10;
        if (v21)
          continue;
      }
      goto LABEL_40;
    }
  }
  v23 = v9 + 6;
  while (v23 < v59)
  {
    if (*(_QWORD *)(v60 + 8 * v23++))
    {
      v15 = v23 - 1;
      goto LABEL_28;
    }
  }
LABEL_40:
  sub_10001CD34(v2);
  if (sub_1000C40BC())
  {
    v50 = (_QWORD *)swift_task_alloc(async function pointer to TaskGroup.awaitAllRemainingTasks(isolation:)[1]);
    v65[20] = v50;
    sub_100002F78(&qword_1000FBC38);
    *v50 = v65;
    v50[1] = sub_1000B29A4;
    v51 = sub_1000C4D18();
    return TaskGroup.awaitAllRemainingTasks(isolation:)(v51, v52, v53);
  }
  else
  {
    v64 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1000FF7E8 + dword_1000FF7E8);
    v54 = (_QWORD *)swift_task_alloc(unk_1000FF7EC);
    v65[21] = v54;
    *v54 = v65;
    v54[1] = sub_1000B29D0;
    v55 = sub_1000C4D18();
    return v64(v55, v56);
  }
}

uint64_t sub_1000B29A4()
{
  uint64_t v0;
  uint64_t v1;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v1 + 160));
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000B29D0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1000C4AFC();
  sub_10001D680(v1);
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000B29F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[11] = a4;
  v5[12] = a5;
  v5[9] = a2;
  v5[10] = a3;
  return swift_task_switch(sub_1000B2A14, 0, 0);
}

uint64_t sub_1000B2A14()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t (*v40)(uint64_t, uint64_t);

  v2 = *(_QWORD *)(v1 + 80);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = (__int128 *)(v2 + 32);
    swift_bridgeObjectRetain();
    do
    {
      v38 = v3;
      v6 = *(_QWORD *)(v1 + 88);
      v5 = *(_QWORD *)(v1 + 96);
      v7 = sub_100002F78(&qword_1000FB230);
      v8 = sub_100037A68(*(_QWORD *)(v7 - 8));
      v9 = sub_10001DBC0();
      v39 = *v4;
      sub_10007F8CC();
      sub_100005630(v10, v11, v12, v9);
      v13 = sub_100006A80((uint64_t)&unk_1000F5240, 64);
      *(_QWORD *)(v13 + 16) = 0;
      v14 = (_QWORD *)(v13 + 16);
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = v6;
      *(_QWORD *)(v13 + 40) = v5;
      *(_OWORD *)(v13 + 48) = v39;
      v15 = swift_task_alloc(v3);
      sub_1000C4D44(v8);
      LODWORD(v6) = sub_1000C4918();
      swift_retain();
      swift_retain();
      v16 = sub_10007D280();
      if ((_DWORD)v6 == 1)
      {
        sub_1000C3DD4(v15);
        v17 = 0;
      }
      else
      {
        v18 = TaskPriority.rawValue.getter(v16);
        sub_10002B7F8(v15, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8));
        v17 = v18;
      }
      sub_10001E330();
      v19 = *v14;
      if (*v14)
      {
        v20 = *(_QWORD *)(v13 + 24);
        v21 = v17;
        ObjectType = swift_getObjectType(*v14);
        swift_unknownObjectRetain(v19);
        v23 = ObjectType;
        v17 = v21;
        v24 = dispatch thunk of Actor.unownedExecutor.getter(v23, v20);
        v26 = v25;
        swift_unknownObjectRelease(v19);
      }
      else
      {
        v24 = 0;
        v26 = 0;
      }
      v27 = **(_QWORD **)(v1 + 72);
      v28 = sub_100006A80((uint64_t)&unk_1000F5268, 32);
      *(_QWORD *)(v28 + 16) = &unk_1000FF7D8;
      *(_QWORD *)(v28 + 24) = v13;
      v29 = v26 | v24;
      if (v26 | v24)
      {
        v29 = v1 + 16;
        *(_QWORD *)(v1 + 16) = 0;
        *(_QWORD *)(v1 + 24) = 0;
        *(_QWORD *)(v1 + 32) = v24;
        *(_QWORD *)(v1 + 40) = v26;
      }
      v0 = &qword_1000FB230;
      *(_QWORD *)(v1 + 48) = 1;
      *(_QWORD *)(v1 + 56) = v29;
      *(_QWORD *)(v1 + 64) = v27;
      swift_task_create(v17 | 0x3100, v1 + 48, (char *)&type metadata for () + 8, &unk_1000FF7E0, v28);
      swift_release();
      sub_1000C3DD4(v8);
      sub_10002B70C();
      ++v4;
      v3 = v38 - 1;
    }
    while (v38 != 1);
    swift_bridgeObjectRelease();
  }
  if (sub_1000C40BC())
  {
    v30 = swift_task_alloc(async function pointer to TaskGroup.awaitAllRemainingTasks(isolation:)[1]);
    sub_1000C4C28(v30);
    sub_100002F78(&qword_1000FBC38);
    *v0 = v1;
    v0[1] = (uint64_t)sub_1000B2CF0;
    v31 = sub_1000C4D18();
    return TaskGroup.awaitAllRemainingTasks(isolation:)(v31, v32, v33);
  }
  else
  {
    v40 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1000FF7E8 + dword_1000FF7E8);
    v35 = (uint64_t *)swift_task_alloc(unk_1000FF7EC);
    *(_QWORD *)(v1 + 112) = v35;
    *v35 = v1;
    v35[1] = (uint64_t)sub_1000B2D1C;
    v36 = sub_1000C4D18();
    return v40(v36, v37);
  }
}

uint64_t sub_1000B2CF0()
{
  uint64_t v0;
  uint64_t v1;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v1 + 104));
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000B2D1C()
{
  uint64_t v0;
  uint64_t v1;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v1 + 112));
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000B2D48(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t);

  *(_QWORD *)(v6 + 16) = a6;
  v9 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  v7 = (_QWORD *)swift_task_alloc(a4[1]);
  *(_QWORD *)(v6 + 24) = v7;
  *v7 = v6;
  v7[1] = sub_1000B2DAC;
  return v9(v6 + 16);
}

uint64_t sub_1000B2DAC()
{
  uint64_t v0;

  sub_10001D680(*(_QWORD *)(*(_QWORD *)v0 + 24));
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_1000B2DE8(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *);

  v7[2] = a6;
  v7[3] = a7;
  v10 = (uint64_t (*)(_QWORD *))((char *)a4 + *a4);
  v8 = (_QWORD *)swift_task_alloc(a4[1]);
  v7[4] = v8;
  *v8 = v7;
  v8[1] = sub_1000B2E50;
  return v10(v7 + 2);
}

uint64_t sub_1000B2E50()
{
  uint64_t v0;

  sub_10001D680(*(_QWORD *)(*(_QWORD *)v0 + 32));
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_1000B2E8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;

  sub_10001E140();
  v0 = sub_10001E76C();
  sub_1000C4D50(&qword_1000FF670);
  v2 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v0, v1);
  sub_10001EADC();
  sub_10001E3E0();
  v3._countAndFlagsBits = 10272;
  v3._object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  sub_100049010();
  v4 = type metadata accessor for RequestManagerPolicy(0);
  v5 = RequestPriority.rawValue.getter(v4);
  v7 = v6;
  sub_10001E140();
  v8._countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  sub_10001EADC();
  sub_100049010();
  sub_10001D964();
  v9._countAndFlagsBits = 41;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  sub_10001D8B4();
  return v2;
}

uint64_t sub_1000B2F94(_QWORD **a1, _QWORD **a2)
{
  char v4;
  uint64_t v5;
  char v6;

  sub_1000BDFDC(*a1, *a2);
  if ((v4 & 1) != 0)
  {
    v5 = type metadata accessor for RequestManagerPolicy(0);
    v6 = sub_1000B23C8((uint64_t)a1 + *(int *)(v5 + 20), (uint64_t)a2 + *(int *)(v5 + 20), (uint64_t (*)(uint64_t))&type metadata accessor for RequestPriority, &qword_1000FF668);
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

uint64_t sub_1000B3008()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v0 = type metadata accessor for Logger(0);
  sub_100002FB8(v0, qword_1000FF168);
  v1 = sub_100002FF8(v0, (uint64_t)qword_1000FF168);
  v2 = *(_QWORD *)(v0 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  generalLogger.getter(v3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v2 + 32))(v1, v5, v0);
}

void sub_1000B30A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t i;
  int64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  int64_t v41;

  sub_10001D810();
  v1 = sub_10007F430();
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_10001E684();
  v5 = v3 - v4;
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - v7;
  v9 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd14ExecutionGroup_assets);
  v40 = v9 + 56;
  sub_10007F308();
  v12 = v11 & v10;
  v41 = (unint64_t)(v13 + 63) >> 6;
  sub_10001EBA8(v9);
  v14 = 0;
  v15 = 0;
  if (!v12)
    goto LABEL_3;
LABEL_2:
  v16 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v16 | (v14 << 6); ; i = v34 + (v14 << 6))
  {
    sub_1000C343C(*(_QWORD *)(v9 + 48) + *(_QWORD *)(v2 + 72) * i, (uint64_t)v8, type metadata accessor for ModelCatalogAsset);
    v35 = sub_1000C46FC();
    v37 = sub_10001CB5C(v35, v36);
    v38 = AssetCost.onDeviceMemory.getter(v37);
    v39 = __CFADD__(v15, v38);
    v15 += v38;
    if (v39)
    {
      __break(1u);
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    sub_1000C3460(v5, type metadata accessor for ModelCatalogAsset);
    if (v12)
      goto LABEL_2;
LABEL_3:
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
      goto LABEL_31;
    if (v18 >= v41)
      goto LABEL_29;
    ++v14;
    if (!*(_QWORD *)(v40 + 8 * v18))
    {
      v14 = v18 + 1;
      sub_1000C49A4();
      if (v19 == v20)
        goto LABEL_29;
      sub_1000C4998();
      if (!v22)
      {
        v14 = v21 + 2;
        sub_1000C49A4();
        if (v19 == v20)
          goto LABEL_29;
        sub_1000C4998();
        if (!v24)
        {
          v14 = v23 + 3;
          sub_1000C49A4();
          if (v19 == v20)
            goto LABEL_29;
          sub_1000C4998();
          if (!v26)
          {
            v14 = v25 + 4;
            sub_1000C49A4();
            if (v19 == v20)
              goto LABEL_29;
            sub_1000C4998();
            if (!v28)
              break;
          }
        }
      }
    }
LABEL_25:
    sub_10001E70C();
    v12 = v33 & v32;
  }
  v29 = v27 + 5;
  if (v29 >= v41)
  {
LABEL_29:
    sub_10001DEEC();
    sub_100049010();
    sub_100006A68();
    return;
  }
  if (*(_QWORD *)(v40 + 8 * v29))
  {
    v14 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    sub_1000C49A4();
    if (v19 == v20)
      goto LABEL_29;
    sub_1000C4998();
    v29 = v30 + 1;
    if (v31)
      goto LABEL_25;
  }
LABEL_32:
  __break(1u);
}

_QWORD *sub_1000B3290()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  _BYTE v6[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC13modelmanagerd14ExecutionGroup_neverWaitedOnExecutionTasks);
  sub_10002B2E0(v0 + OBJC_IVAR____TtC13modelmanagerd14ExecutionGroup_neverWaitedOnExecutionTasks, (uint64_t)v6);
  v5 = *v1;
  swift_bridgeObjectRetain(*v1);
  v2 = sub_10001D964();
  sub_1000BF9F0(v2);
  v3 = sub_1000B20A4(v5);
  sub_10001D8B4();
  return v3;
}

void sub_1000B3314()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  sub_10001D810();
  v0 = sub_10001E368();
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_10001E684();
  v4 = v2 - v3;
  __chkstk_darwin(v5);
  v7 = (char *)&v18 - v6;
  v8 = (uint64_t)sub_1000B3290();
  if ((unint64_t)v8 >> 62)
    goto LABEL_18;
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  sub_1000C4618();
  for (; v9; v9 = _CocoaArrayWrapper.endIndex.getter(v17))
  {
    v20 = v8 & 0xC000000000000001;
    v19 = enum case for RequestPriority.foreground(_:);
    v10 = 4;
    while (1)
    {
      if (v20)
      {
        v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, v8);
      }
      else
      {
        v11 = *(_QWORD *)(v8 + 8 * v10);
        sub_10001E900();
      }
      if (__OFADD__(v10 - 4, 1))
        break;
      v23 = v10 - 3;
      sub_1000C5C2C();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 104))(v4, v19, v0);
      sub_100006710(&qword_1000FF668, (uint64_t (*)(uint64_t))&type metadata accessor for RequestPriority);
      sub_1000C4B88();
      sub_1000C4B88();
      if (v26 == v24 && v27 == v25)
      {
        sub_10002BA68(v27);
        v16 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
        v16(v4, v0);
        v16((uint64_t)v7, v0);
        sub_100044820();
        goto LABEL_16;
      }
      v13 = sub_10001DB04(v26, v27, v24, v25);
      v21 = v11;
      v22 = v13;
      sub_10001E034();
      sub_10002B684();
      v14 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
      v14(v4, v0);
      v15 = sub_1000C46FC();
      ((void (*)(uint64_t))v14)(v15);
      swift_release();
      if ((v22 & 1) == 0)
      {
        ++v10;
        if (v23 != v9)
          continue;
      }
      goto LABEL_16;
    }
    __break(1u);
LABEL_18:
    if (v8 < 0)
      v17 = v8;
    else
      v17 = v8 & 0xFFFFFFFFFFFFFF8;
    sub_1000C4618();
  }
LABEL_16:
  sub_10002BA68(v8);
  sub_100006A68();
}

uint64_t sub_1000B352C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;

  v3 = *(_QWORD *)(a3 + 16);
  if (v3)
  {
    swift_retain();
    sub_10001E194();
    sub_10007E904();
    v4 = 0;
    while (1)
    {
      sub_10001DAE8();
      sub_10000E244();
      v6 = v5;
      swift_release();
      if ((v6 & 1) != 0)
        break;
      if (v3 == ++v4)
      {
        sub_10001E4C0();
        swift_release();
        sub_10001DEEC();
        sub_10001D9C0();
        return 0;
      }
    }
    sub_10001E4C0();
    swift_release();
    sub_10001DEEC();
    sub_10001D9C0();
    return 1;
  }
  else
  {
    sub_10001E4C0();
    return 0;
  }
}

uint64_t sub_1000B3620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[8] = a3;
  v4[9] = v3;
  v4[6] = a1;
  v4[7] = a2;
  return sub_10001D948((uint64_t)sub_1000B363C, a1);
}

uint64_t sub_1000B363C()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v12)(void);

  sub_1000C4BF4();
  v1 = (uint64_t *)(v0[9] + OBJC_IVAR____TtC13modelmanagerd14ExecutionGroup_neverWaitedOnExecutionTasks);
  v2 = OBJC_IVAR____TtC13modelmanagerd14ExecutionGroup_currentWaitingOnExecutionTasks;
  v0[10] = OBJC_IVAR____TtC13modelmanagerd14ExecutionGroup_neverWaitedOnExecutionTasks;
  v0[11] = v2;
  sub_10002B308((uint64_t)v1, (uint64_t)(v0 + 2), 1);
  v3 = *v1;
  if (*(_QWORD *)(v3 + 16))
  {
    v0[12] = v3;
    v4 = v0[10];
    v5 = v0[9];
    *(_QWORD *)(v5 + v0[11]) = v3;
    sub_10001EBA8(v3);
    sub_10001D8B4();
    *(_QWORD *)(v5 + v4) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    v0[5] = v3;
    sub_100037A7C();
    return swift_task_switch(v6, v7, v8);
  }
  else
  {
    v10 = v0[7];
    *(_BYTE *)(v0[9] + OBJC_IVAR____TtC13modelmanagerd14ExecutionGroup_startedReleasing) = 1;
    v11 = (_QWORD *)sub_1000C4194(*(unsigned int *)(v10 + 4));
    v0[15] = v11;
    sub_1000C4750(v11, (uint64_t)sub_1000B3904);
    return sub_1000AB0E0(v12);
  }
}

uint64_t sub_1000B3730()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)sub_10007F040();
  *(_QWORD *)(v0 + 104) = v1;
  v1[2] = v0 + 40;
  v1[3] = &unk_1000FF7A8;
  v1[4] = 0;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 112) = v2;
  *v2 = v0;
  v2[1] = sub_1000B37C4;
  return withTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_1000B37C4()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 112));
  sub_10001E330();
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_1000B37FC()
{
  swift_bridgeObjectRelease();
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_1000B3830()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v10;
  _QWORD *v11;
  uint64_t (*v12)(void);

  sub_10001DD0C();
  v1 = v0[10];
  v2 = v0[9];
  *(_QWORD *)(v2 + v0[11]) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v2 + v1);
  if (*(_QWORD *)(v3 + 16))
  {
    v0[12] = v3;
    v4 = v0[10];
    v5 = v0[9];
    *(_QWORD *)(v5 + v0[11]) = v3;
    sub_10001EBA8(v3);
    sub_10001D8B4();
    *(_QWORD *)(v5 + v4) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    v0[5] = v3;
    sub_100037A7C();
    return sub_10007D24C(v6, v7, v8);
  }
  else
  {
    v10 = (int *)v0[7];
    *(_BYTE *)(v0[9] + OBJC_IVAR____TtC13modelmanagerd14ExecutionGroup_startedReleasing) = 1;
    v12 = (uint64_t (*)(void))((char *)v10 + *v10);
    v11 = (_QWORD *)swift_task_alloc(v10[1]);
    v0[15] = v11;
    sub_1000C4750(v11, (uint64_t)sub_1000B3904);
    return sub_1000AB0E0(v12);
  }
}

uint64_t sub_1000B3904()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_10002B980();
  sub_10001D680(v1);
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000B392C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to Task.value.getter[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = sub_100002F78(&qword_1000FB5F8);
  *v4 = v2;
  v4[1] = sub_1000B39A4;
  return Task.value.getter(v5, a2, (char *)&type metadata for () + 8, v5, &protocol self-conformance witness table for Error);
}

uint64_t sub_1000B39A4()
{
  uint64_t v0;
  uint64_t v1;

  sub_10001D680(*(_QWORD *)(*(_QWORD *)v1 + 16));
  if (v0)
    swift_errorRelease(v0);
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_1000B39F8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)swift_task_alloc(dword_1000FF804);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10001CA84;
  return sub_1000B392C(v3, v2);
}

void sub_1000B3A48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  sub_10001D810();
  v30 = v2;
  v31 = v1;
  v4 = v3;
  v32 = v5;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  sub_100002F78(&qword_1000FB230);
  sub_10001DD00();
  __chkstk_darwin(v14);
  sub_10001E168();
  v17 = v16 - v15;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd14ExecutionGroup_releaseTask) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd14ExecutionGroup_currentWaitingOnExecutionTasks) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC13modelmanagerd14ExecutionGroup_startedReleasing) = 0;
  v18 = v0 + OBJC_IVAR____TtC13modelmanagerd14ExecutionGroup_id;
  v19 = *(_QWORD *)(sub_1000AB044() - 8);
  sub_10001EB74(v18, v11, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 16));
  *(_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd14ExecutionGroup_assets) = v9;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd14ExecutionGroup_acquireTask) = v7;
  v20 = sub_100002F78(&qword_1000FF770);
  v21 = sub_100006A80(v20, 48);
  *(_OWORD *)(v21 + 16) = xmmword_1000CB140;
  *(_QWORD *)(v21 + 32) = v4;
  *(_QWORD *)(v21 + 40) = v30;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd14ExecutionGroup_neverWaitedOnExecutionTasks) = v21;
  v22 = sub_10001DBC0();
  sub_10002B26C(v17, v23, v24, v22);
  sub_100006710(&qword_1000FF660, type metadata accessor for RequestManager);
  v26 = v25;
  v27 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F5218, 64);
  v27[2] = v13;
  v27[3] = v26;
  v27[4] = v0;
  v27[5] = v13;
  v27[6] = v31;
  v27[7] = v32;
  sub_10001E194();
  sub_10001D7EC();
  v28 = sub_100002CAC(v17, (uint64_t)&unk_1000FF780, (uint64_t)v27);
  sub_10002BADC(v11, *(uint64_t (**)(uint64_t, uint64_t))(v19 + 8));
  v29 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd14ExecutionGroup_releaseTask);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd14ExecutionGroup_releaseTask) = v28;
  swift_release(v29);
  sub_100006A68();
}

uint64_t sub_1000B3BF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v11;

  v11 = (_QWORD *)swift_task_alloc(dword_1000FF1BC);
  *(_QWORD *)(v7 + 16) = v11;
  *v11 = v7;
  v11[1] = sub_10001D668;
  return sub_1000B3620(a5, a6, a7);
}

uint64_t sub_1000B3C5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[24];

  v6 = v3 + OBJC_IVAR____TtC13modelmanagerd14ExecutionGroup_neverWaitedOnExecutionTasks;
  sub_10002B308(v6, (uint64_t)v11, 33);
  sub_10001D7EC();
  sub_10002B400();
  sub_1000BE81C();
  v7 = *(_QWORD *)(*(_QWORD *)v6 + 16);
  sub_1000BE8C0(v7);
  v8 = *(_QWORD *)v6;
  *(_QWORD *)(v8 + 16) = v7 + 1;
  v9 = v8 + 16 * v7;
  *(_QWORD *)(v9 + 32) = a2;
  *(_QWORD *)(v9 + 40) = a3;
  return swift_endAccess(v11);
}

void sub_1000B3CE0()
{
  uint64_t v0;

  v0 = sub_1000AB044();
  sub_10008BC68(*(_QWORD *)(v0 - 8));
  sub_1000C45FC(OBJC_IVAR____TtC13modelmanagerd14ExecutionGroup_assets);
  sub_100037E2C(OBJC_IVAR____TtC13modelmanagerd14ExecutionGroup_acquireTask);
  sub_100037E2C(OBJC_IVAR____TtC13modelmanagerd14ExecutionGroup_releaseTask);
  sub_1000C45FC(OBJC_IVAR____TtC13modelmanagerd14ExecutionGroup_neverWaitedOnExecutionTasks);
  sub_1000C45FC(OBJC_IVAR____TtC13modelmanagerd14ExecutionGroup_currentWaitingOnExecutionTasks);
  sub_100006C14();
}

uint64_t sub_1000B3D50()
{
  uint64_t v0;

  sub_1000B3CE0();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000B3D74()
{
  return type metadata accessor for ExecutionGroup(0);
}

uint64_t type metadata accessor for ExecutionGroup(uint64_t a1)
{
  return sub_100042760(a1, (uint64_t *)&unk_1000FF1A8, (uint64_t)&nominal type descriptor for ExecutionGroup);
}

uint64_t sub_1000B3D90(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[3] = "\b";
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[6] = &unk_1000CD268;
    result = swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_1000B3E30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _WORD *v10;
  _BYTE v11[24];

  v1 = v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups;
  sub_10002B2E0(v1, (uint64_t)v11);
  v2 = *(_QWORD *)(v1 + 16);
  sub_10007E904();
  sub_10001E900();
  sub_10001E194();
  sub_10001D964();
  v3 = sub_1000C4A6C();
  v6 = sub_1000B352C(v3, v4, v5);
  sub_10001D9C0();
  sub_100044820();
  sub_10001DEEC();
  if ((v6 & 1) == 0)
  {
    if (qword_1000FB218 != -1)
      swift_once(&qword_1000FB218, sub_1000B3008);
    v7 = sub_10001DD64();
    v8 = sub_100037AC4(v7, (uint64_t)qword_1000FF168);
    v9 = static os_log_type_t.fault.getter();
    if (sub_100037E74(v9))
    {
      v10 = (_WORD *)sub_10001D8D4(2);
      sub_10004478C(v10);
      sub_1000C3C44((void *)&_mh_execute_header, v8, (os_log_type_t)v2, "assertActiveGroupsContainsGroup couldn't find active group with assets");
      sub_10001D790(0);
    }

  }
}

void sub_1000B3F30()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  _WORD *v15;
  _BYTE v16[32];
  _BYTE v17[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups);
  sub_10002B2E0(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups, (uint64_t)v17);
  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  sub_10007E904();
  sub_10001E900();
  sub_10007D280();
  sub_10001D964();
  v5 = sub_1000B352C(v2, v3, v4);
  sub_10002B88C();
  sub_100044820();
  sub_10001DEEC();
  if ((v5 & 1) == 0)
  {
    v6 = v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingBackgroundGroups;
    sub_10002B2E0(v6, (uint64_t)v16);
    v7 = *(_QWORD *)(v6 + 16);
    sub_10007E904();
    sub_10001E900();
    sub_10001E194();
    sub_10001D964();
    v8 = sub_1000C4A6C();
    v11 = sub_1000B352C(v8, v9, v10);
    sub_10001D9C0();
    sub_100044820();
    sub_10001DEEC();
    if ((v11 & 1) == 0)
    {
      if (qword_1000FB218 != -1)
        swift_once(&qword_1000FB218, sub_1000B3008);
      v12 = sub_10001DD64();
      v13 = sub_100037AC4(v12, (uint64_t)qword_1000FF168);
      v14 = static os_log_type_t.fault.getter();
      if (sub_100037E74(v14))
      {
        v15 = (_WORD *)sub_10001D8D4(2);
        sub_10004478C(v15);
        sub_1000C3C44((void *)&_mh_execute_header, v13, (os_log_type_t)v7, "assertPendingGroupsContainsGroup couldn't find pending group with assets");
        sub_10001D790(0);
      }

    }
  }
  sub_1000C43C8();
}

uint64_t sub_1000B407C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v32;
  uint64_t v33;
  os_log_type_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[4];
  _BYTE v49[16];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE v53[24];
  _BYTE v54[24];
  _BYTE v55[24];
  unint64_t v56;

  v3 = type metadata accessor for UUID(0);
  v48[2] = *(_QWORD *)(v3 - 8);
  v48[3] = v3;
  sub_10001DD00();
  __chkstk_darwin(v4);
  sub_10001E168();
  v48[1] = v6 - v5;
  v7 = (uint64_t *)(v1 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups);
  sub_10002B2E0(v1 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups, (uint64_t)v55);
  v8 = v7[1];
  v9 = v7[2];
  v50 = *v7;
  v51 = v8;
  v52 = a1;
  sub_10001E8B0();
  sub_10002B400();
  sub_10007E904();
  v10 = sub_1000C118C((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, _QWORD))sub_1000C3AF0, (uint64_t)v49, v8);
  if ((v11 & 1) == 0)
  {
    v56 = sub_1000C1168((unint64_t)v10, v9);
    sub_10001DEEC();
    sub_10001D930();
    v12 = sub_10007D970();
    v13 = sub_1000C49FC(v12, (uint64_t)v54);
    v14 = *v7;
    v15 = v7[1];
    __chkstk_darwin(v13);
    v48[-4] = v14;
    v48[-3] = v15;
    v48[-2] = a1;
    sub_10007E904();
    sub_10001E8B0();
    sub_1000C4294((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, _QWORD))sub_1000C3AF0);
    v17 = v16;
    sub_10007D970();
    sub_10001DEEC();
    if ((v17 & 1) == 0)
    {
      sub_1000C439C();
      sub_1000C47B0();
      sub_1000C4C4C();
      swift_release();
    }
LABEL_8:
    swift_endAccess();
    return v56;
  }
  sub_10001DEEC();
  sub_10001D930();
  sub_10007D970();
  v18 = (uint64_t *)(v1 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingBackgroundGroups);
  v19 = sub_10002B2E0(v1 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingBackgroundGroups, (uint64_t)v54);
  v20 = *v18;
  v21 = v18[1];
  v22 = v18[2];
  __chkstk_darwin(v19);
  v48[-4] = v20;
  v48[-3] = v21;
  v48[-2] = a1;
  sub_10001E194();
  sub_10001E8B0();
  sub_10002B400();
  v23 = sub_1000C4294((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, _QWORD))sub_1000C3AF0);
  if ((v24 & 1) == 0)
  {
    v56 = sub_1000C1168((unint64_t)v23, v22);
    sub_10001D930();
    sub_10007D970();
    v25 = sub_10001D9C0();
    v26 = sub_1000C49FC(v25, (uint64_t)v53);
    v27 = *v18;
    v28 = v18[1];
    __chkstk_darwin(v26);
    v48[-4] = v27;
    v48[-3] = v28;
    v48[-2] = a1;
    sub_10007E904();
    sub_10001E8B0();
    sub_1000C4294((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, _QWORD))sub_1000C3AF0);
    v30 = v29;
    sub_10007D970();
    sub_10001DEEC();
    if ((v30 & 1) == 0)
    {
      sub_1000C439C();
      sub_1000C47B0();
      sub_1000C4C4C();
      swift_release();
    }
    goto LABEL_8;
  }
  sub_10001D930();
  sub_10007D970();
  sub_10001D9C0();
  if (qword_1000FB218 != -1)
    swift_once(&qword_1000FB218, sub_1000B3008);
  v32 = sub_10001DD64();
  v33 = sub_100002FF8(v32, (uint64_t)qword_1000FF168);
  v34 = v33;
  v35 = Logger.logObject.getter(v33);
  v36 = static os_log_type_t.fault.getter();
  if (sub_100037E74(v36))
  {
    v37 = (uint8_t *)sub_10001D8D4(2);
    *(_WORD *)v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, v34, "findGroupInPendingAndRemove couldn't find pending group with assets", v37, 2u);
    sub_10001D790((uint64_t)v37);
  }

  type metadata accessor for ModelManagerError(0);
  sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
  sub_10002BA54(v38);
  v40 = sub_10007D1C8(v39, enum case for ModelManagerError.internalError(_:));
  return swift_willThrow(v40, v41, v42, v43, v44, v45, v46, v47);
}

void sub_1000B43EC(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33;
  char *v34;

  v3 = v2;
  v30 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v2[1];
  v32 = *v2;
  v9 = v32;
  v33 = v10;
  v34 = a2;
  swift_retain();
  swift_retain();
  v11 = (unint64_t)sub_1000C118C((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, _QWORD))sub_1000C3AF0, (uint64_t)v31, v10);
  v13 = v12;
  v15 = v14;
  swift_release(v10);
  v16 = swift_release(v9);
  if ((v13 & 1) != 0)
  {
    if (a1)
    {
      swift_retain();
      sub_1000C1E84();
      v24 = swift_retain();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v24);
      v25 = *(_QWORD *)(v3[2] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v25);
      v23 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, a1);
      goto LABEL_10;
    }
    (*(void (**)(char *, uint64_t, __n128))(v6 + 8))(a2, v30, v16);
  }
  else if (a1)
  {
    v19 = v3[2];
    v18 = v3 + 2;
    v17 = v19;
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
    *v18 = v19;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v17 = sub_1000C2398(v17);
      *v18 = v17;
    }
    if ((v11 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v11 < *(_QWORD *)(v17 + 16))
    {
      v21 = v17 + 8 * v11;
      v22 = *(_QWORD *)(v21 + 32);
      swift_retain();
      swift_release(v22);
      *(_QWORD *)(v21 + 32) = a1;
LABEL_10:
      specialized ContiguousArray._endMutation()(v23);
      (*(void (**)(char *, uint64_t))(v6 + 8))(a2, v30);
      swift_release_n(a1, 2);
      return;
    }
    __break(1u);
  }
  else
  {
    sub_1000C2080(v11, v15, (uint64_t)v8);
    v26 = *(void (**)(char *, uint64_t))(v6 + 8);
    v27 = v30;
    v26(v8, v30);
    v28 = sub_1000C223C(v11);
    v26(a2, v27);
    swift_release(v28);
  }
}

_QWORD *sub_1000B461C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups);
  sub_10002B2E0(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups, (uint64_t)v11);
  v2 = v1[2];
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
    return _swiftEmptySetSingleton;
  v6 = v1;
  v4 = *v1;
  v5 = v6[1];
  sub_10001D834(v4);
  sub_10001D834(v2);
  sub_10001D834(v5);
  v7 = 0;
  do
  {
    ++v7;
    swift_bridgeObjectRetain();
    sub_10000C97C();
    v9 = v8;
  }
  while (v3 != v7);
  sub_10001EBB0(v2);
  sub_10001EBB0(v5);
  sub_10001EBB0(v4);
  return (_QWORD *)v9;
}

void sub_1000B46F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  unint64_t i;
  int64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  int64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  sub_10001D810();
  a19 = v20;
  a20 = v21;
  v86 = v22;
  v23 = sub_10007F430();
  v90 = *(_QWORD *)(v23 - 8);
  v91 = v23;
  sub_10001DD00();
  __chkstk_darwin(v24);
  sub_10001E684();
  v27 = v25 - v26;
  __chkstk_darwin(v28);
  v30 = (char *)&v84 - v29;
  v31 = type metadata accessor for AssetCost(0);
  v32 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  sub_10001E684();
  v85 = v33 - v34;
  v36 = __chkstk_darwin(v35);
  v38 = (char *)&v84 - v37;
  v39 = __chkstk_darwin(v36);
  v41 = (char *)&v84 - v40;
  __chkstk_darwin(v39);
  v87 = (char *)&v84 - v42;
  sub_1000B461C();
  sub_10001E3E0();
  sub_10000C97C();
  v44 = v43;
  AssetCost.init(onDeviceMemory:)(0);
  v88 = v44 + 56;
  sub_10007F308();
  v47 = v46 & v45;
  v89 = (unint64_t)(v48 + 63) >> 6;
  v92 = v44;
  sub_10001E338();
  v49 = 0;
  if (!v47)
    goto LABEL_3;
LABEL_2:
  v50 = __clz(__rbit64(v47));
  v47 &= v47 - 1;
  for (i = v50 | (v49 << 6); ; i = v68 + (v49 << 6))
  {
    sub_1000C343C(*(_QWORD *)(v92 + 48) + *(_QWORD *)(v90 + 72) * i, (uint64_t)v30, type metadata accessor for ModelCatalogAsset);
    v69 = sub_1000C48DC();
    sub_10001CB5C(v69, v70);
    v71 = v27 + *(int *)(v91 + 28);
    sub_100006710(&qword_1000FD988, (uint64_t (*)(uint64_t))&type metadata accessor for AssetCost);
    dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)(v41, v71, v31, v72);
    sub_10007E7EC((uint64_t)v41, *(uint64_t (**)(uint64_t, uint64_t))(v32 + 8));
    sub_10001E0E8((uint64_t)v41, (uint64_t)v38, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 32));
    sub_1000C3460(v27, type metadata accessor for ModelCatalogAsset);
    if (v47)
      goto LABEL_2;
LABEL_3:
    v52 = v49 + 1;
    if (__OFADD__(v49, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v52 >= v89)
      break;
    ++v49;
    if (*(_QWORD *)(v88 + 8 * v52))
      goto LABEL_25;
    v49 = v52 + 1;
    sub_1000C4744();
    if (v53 == v54)
      break;
    sub_1000C4738();
    if (v56)
      goto LABEL_25;
    v49 = v55 + 2;
    sub_1000C4744();
    if (v53 == v54)
      break;
    sub_1000C4738();
    if (v58)
      goto LABEL_25;
    v49 = v57 + 3;
    sub_1000C4744();
    if (v53 == v54)
      break;
    sub_1000C4738();
    if (v60)
      goto LABEL_25;
    v49 = v59 + 4;
    sub_1000C4744();
    if (v53 == v54)
      break;
    sub_1000C4738();
    if (v62)
      goto LABEL_25;
    v63 = v61 + 5;
    if (v63 >= v89)
      break;
    if (!*(_QWORD *)(v88 + 8 * v63))
    {
      while (1)
      {
        v49 = v63 + 1;
        if (__OFADD__(v63, 1))
          break;
        sub_1000C4744();
        if (v53 == v54)
          goto LABEL_28;
        sub_1000C4738();
        v63 = v64 + 1;
        if (v65)
          goto LABEL_25;
      }
LABEL_43:
      __break(1u);
LABEL_44:
      swift_once(&qword_1000FB218, sub_1000B3008);
      goto LABEL_37;
    }
    v49 = v63;
LABEL_25:
    sub_10001E70C();
    v47 = v67 & v66;
  }
LABEL_28:
  sub_10001D9C0();
  v38 = v87;
  sub_10001E0E8((uint64_t)v87, (uint64_t)v41, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 32));
  v73 = sub_10001E034();
  v74 = AssetCost.onDeviceMemory.getter(v73);
  v27 = v86;
  if (v86 >= 0 && v74 <= v86)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v38, v31);
    goto LABEL_41;
  }
  if (qword_1000FB218 != -1)
    goto LABEL_44;
LABEL_37:
  v77 = sub_10001DD64();
  sub_100002FF8(v77, (uint64_t)qword_1000FF168);
  v78 = sub_10001E0E8(v85, (uint64_t)v38, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 16));
  v79 = Logger.logObject.getter(v78);
  v80 = static os_log_type_t.default.getter(v79);
  if (sub_10002B3F8(v79))
  {
    v81 = sub_10001D8D4(22);
    *(_DWORD *)v81 = 134218240;
    v93 = v27;
    v82 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &a9);
    *(_WORD *)(v81 + 12) = 2048;
    v92 = v81 + 14;
    v83 = AssetCost.onDeviceMemory.getter(v82);
    sub_1000C4A0C();
    v93 = v83;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &a9);
    _os_log_impl((void *)&_mh_execute_header, v79, v80, "acquireAssetsIfAllowedByPolicy denying acquisition that would put us over %ldKB,\nto %lluKB", (uint8_t *)v81, 0x16u);
    sub_10001D790(v81);
  }
  else
  {
    sub_1000C4A0C();
  }

  ((void (*)(char *, uint64_t))v32)(v38, v31);
LABEL_41:
  sub_100006A68();
}

uint64_t sub_1000B4B3C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = v0;
  return sub_10001D948((uint64_t)sub_1000B4B50, v0);
}

uint64_t sub_1000B4B50()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  int64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;

  sub_10001E6F0();
  v1 = (uint64_t *)(*(_QWORD *)(v0 + 40) + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups);
  sub_10002B2E0((uint64_t)v1, v0 + 16);
  v2 = v1[2];
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v6 = v1;
    v5 = *v1;
    v4 = v6[1];
    sub_10001D834(v5);
    v19 = v4;
    sub_10001D834(v4);
    sub_10001D834(v2);
    v7 = 0;
    v8 = OBJC_IVAR____TtC13modelmanagerd14ExecutionGroup_releaseTask;
    v9 = (char *)_swiftEmptyArrayStorage;
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)(v2 + 8 * v7 + 32) + v8);
      if (v10)
      {
        sub_10007D280();
        if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
        {
          v13 = (char *)sub_1000C48B4();
          v9 = sub_1000BEC78(v13, v14, v15, (uint64_t)v9);
        }
        v12 = *((_QWORD *)v9 + 2);
        v11 = *((_QWORD *)v9 + 3);
        if (v12 >= v11 >> 1)
          v9 = sub_1000BEC78((char *)(v11 > 1), v12 + 1, 1, (uint64_t)v9);
        *((_QWORD *)v9 + 2) = v12 + 1;
        *(_QWORD *)&v9[8 * v12 + 32] = v10;
        v8 = OBJC_IVAR____TtC13modelmanagerd14ExecutionGroup_releaseTask;
      }
      ++v7;
    }
    while (v3 != v7);
    sub_10001EBB0(v5);
    sub_10001EBB0(v19);
    sub_10001D9C0();
  }
  else
  {
    sub_10001E194();
    v9 = (char *)_swiftEmptyArrayStorage;
  }
  *(_QWORD *)(v0 + 48) = v9;
  sub_10001D9C0();
  v16 = *((_QWORD *)v9 + 2);
  *(_QWORD *)(v0 + 56) = v16;
  if (v16)
  {
    *(_QWORD *)(v0 + 64) = 0;
    *(_QWORD *)(v0 + 72) = *(_QWORD *)(*(_QWORD *)(v0 + 48) + 32);
    sub_10001E194();
    v17 = (_QWORD *)sub_10001E784();
    *(_QWORD *)(v0 + 80) = v17;
    *v17 = v0;
    v17[1] = sub_1000B4CE8;
    return sub_10001DC14();
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
    return sub_10002B160(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_1000B4CE8()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 80));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_1000B4D20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v13 = *(_QWORD *)(v12 + 64);
  v14 = *(_QWORD *)(v12 + 56);
  swift_release(*(_QWORD *)(v12 + 72));
  if (v13 + 1 == v14)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v12 + 48));
    return sub_10001D940(*(uint64_t (**)(void))(v12 + 8));
  }
  else
  {
    v16 = *(_QWORD *)(v12 + 64) + 1;
    *(_QWORD *)(v12 + 64) = v16;
    v17 = *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * v16 + 32);
    *(_QWORD *)(v12 + 72) = v17;
    sub_10001E194();
    v18 = (_QWORD *)sub_10001E784();
    *(_QWORD *)(v12 + 80) = v18;
    *v18 = v12;
    v18[1] = sub_1000B4CE8;
    return Task<>.value.getter(v18, v17, (char *)&type metadata for () + 8, v19, v20, v21, v22, v23, a9, a10, a11, a12);
  }
}

uint64_t sub_1000B4DC8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[5] = v0;
  v2 = sub_100002F78(&qword_1000FF680);
  v1[6] = sub_10002B1BC(*(_QWORD *)(v2 - 8));
  v1[7] = sub_10001E784();
  v3 = sub_100002F78(&qword_1000FF688);
  v1[8] = v3;
  v1[9] = sub_10002B1BC(*(_QWORD *)(v3 - 8));
  v1[10] = sub_10001E784();
  v1[11] = sub_10001E784();
  v4 = sub_100002F78(&qword_1000FF790);
  v1[12] = sub_10001D800(*(_QWORD *)(v4 - 8));
  sub_10001D7B8();
  return sub_10001D6DC();
}

uint64_t sub_1000B4E5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, unint64_t, uint64_t);
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  os_log_type_t v47;
  _WORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  os_log_type_t v63;
  _WORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  if (qword_1000FB218 != -1)
    goto LABEL_24;
  while (1)
  {
    v14 = sub_10001DD64();
    v15 = sub_100037AC4(v14, (uint64_t)qword_1000FF168);
    v16 = static os_log_type_t.info.getter();
    if (sub_10002B3F8(v15))
    {
      v17 = (uint8_t *)sub_10001D8D4(2);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "in waitForAnActiveGroupToFinish", v17, 2u);
      sub_10001D790((uint64_t)v17);
    }
    v18 = *(_QWORD *)(v13 + 40);

    v19 = (uint64_t *)(v18 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups);
    v20 = sub_10002BF40();
    sub_10002B2E0(v20, v21);
    v23 = *v19;
    v22 = v19[1];
    v24 = v19[2];
    v78 = *(_QWORD *)(v24 + 16);
    if (!v78)
      break;
    v68 = v12;
    v76 = *(_QWORD *)(v13 + 88);
    v12 = *(_QWORD *)(v13 + 64);
    v25 = sub_1000AB044();
    v73 = *(_QWORD *)(v25 - 8);
    v74 = v25;
    v72 = v22 + ((*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80));
    v75 = v12;
    v71 = *(int *)(v12 + 48);
    v77 = *(_QWORD *)(v22 + 16);
    sub_10001D834(v23);
    sub_10001D834(v22);
    sub_10001D834(v24);
    v26 = 0;
    v69 = v13;
    v70 = v24;
    while (v77 != v26)
    {
      v28 = *(_QWORD *)(v13 + 80);
      v27 = *(_QWORD *)(v13 + 88);
      v79 = *(_QWORD *)(v13 + 72);
      v30 = *(_QWORD *)(v13 + 48);
      v29 = *(_QWORD *)(v13 + 56);
      v31 = *(void (**)(uint64_t, unint64_t, uint64_t))(v73 + 16);
      v31(v29, v72 + *(_QWORD *)(v73 + 72) * v26, v74);
      v32 = *(_QWORD *)(v24 + 8 * v26 + 32);
      v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 32);
      v33(v30, v29, v74);
      v34 = sub_1000C4D0C();
      ((void (*)(uint64_t))v33)(v34);
      *(_QWORD *)(v76 + v71) = v32;
      sub_100048F58(v27, v28, &qword_1000FF688);
      v35 = *(int *)(v75 + 48);
      v31(v79, v28, v74);
      v12 = *(_QWORD *)(v28 + v35);
      *(_QWORD *)(v79 + v35) = v12;
      sub_10001E900();
      sub_10001E194();
      sub_1000B30A0();
      v37 = v36;
      sub_10001D9C0();
      sub_10002BADC(v79, *(uint64_t (**)(uint64_t, uint64_t))(v73 + 8));
      if (v37)
      {
        v13 = v69;
        sub_10001E098();
        sub_10002B88C();
        sub_100044820();
        v39 = sub_10001EBDC();
        sub_100048F58(v39, v40, v41);
        v38 = 0;
        goto LABEL_12;
      }
      v13 = v69;
      ++v26;
      sub_1000C3C14(*(_QWORD *)(v69 + 80));
      v24 = v70;
      if (v78 == v26)
      {
        sub_10001E098();
        sub_10002B88C();
        sub_100044820();
        v38 = 1;
LABEL_12:
        v12 = v68;
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_24:
    swift_once(&qword_1000FB218, sub_1000B3008);
  }
  sub_10001E20C();
  sub_10007D280();
  sub_10001E900();
  v38 = 1;
LABEL_13:
  v42 = *(_QWORD *)(v13 + 96);
  v43 = *(_QWORD *)(v13 + 64);
  sub_100005630(v42, v38, 1, v43);
  sub_10001E098();
  sub_10002B88C();
  sub_100044820();
  v44 = sub_100005700(v42, 1, v43);
  v45 = *(_QWORD *)(v13 + 96);
  if (v44 == 1)
  {
    sub_1000C37F8(*(_QWORD *)(v13 + 96), &qword_1000FF790);
    Logger.logObject.getter(v46);
    v47 = sub_100037B50();
    if (sub_100039E20(v47))
    {
      v48 = (_WORD *)sub_10001D8D4(2);
      sub_10004478C(v48);
      sub_1000C3C44((void *)&_mh_execute_header, v12, (os_log_type_t)v45, "We can't acquire assets for foreground group but there are no nonzero cost active groups");
      sub_10001D790(v42);
    }

    v49 = sub_10002B8A0();
    sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_10002B560(v49, v50);
    sub_10007D1C8(v51, enum case for ModelManagerError.internalError(_:));
    sub_10007D88C();
  }
  else
  {
    v52 = *(_QWORD *)(v45 + *(int *)(*(_QWORD *)(v13 + 64) + 48));
    *(_QWORD *)(v13 + 104) = v52;
    v53 = sub_1000AB044();
    v54 = sub_10008BC68(*(_QWORD *)(v53 - 8));
    v55 = *(_QWORD *)(v52 + OBJC_IVAR____TtC13modelmanagerd14ExecutionGroup_releaseTask);
    *(_QWORD *)(v13 + 112) = v55;
    if (v55)
    {
      sub_10001D7EC();
      v56 = (_QWORD *)sub_10001E784();
      *(_QWORD *)(v13 + 120) = v56;
      *v56 = v13;
      v56[1] = sub_1000B535C;
      return Task<>.value.getter(v56, v55, (char *)&type metadata for () + 8, v57, v58, v59, v60, v61, a9, a10, a11, a12);
    }
    Logger.logObject.getter(v54);
    v63 = sub_100037B50();
    if (sub_100039E20(v63))
    {
      v64 = (_WORD *)sub_10001D8D4(2);
      sub_10004478C(v64);
      sub_1000C3C44((void *)&_mh_execute_header, v12, (os_log_type_t)v45, "Couldn't find releaseTask for firstActiveGroup");
      sub_10001D790(0);
    }

    v65 = sub_10002B8A0();
    sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_10002B560(v65, v66);
    sub_10007D1C8(v67, enum case for ModelManagerError.internalError(_:));
    sub_10007D88C();
    sub_100044820();
  }
  swift_task_dealloc();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  return (*(uint64_t (**)(void))(v13 + 8))();
}

uint64_t sub_1000B535C()
{
  uint64_t v0;

  v0 = sub_10002B980();
  sub_10001D680(v0);
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_1000B5390()
{
  uint64_t (*v0)(void);

  sub_10001DB50();
  swift_release();
  sub_10001D9C0();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  v0 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_100037D1C(v0);
}

uint64_t sub_1000B53F0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = v0;
  return sub_10001D948((uint64_t)sub_1000B5404, v0);
}

uint64_t sub_1000B5404()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);

  v1 = v0[8];
  v2 = OBJC_IVAR____TtC13modelmanagerd14RequestManager_nextExecutionGroupToAcquire;
  v3 = OBJC_IVAR____TtC13modelmanagerd14RequestManager_assetManager;
  v0[9] = OBJC_IVAR____TtC13modelmanagerd14RequestManager_nextExecutionGroupToAcquire;
  v0[10] = v3;
  v4 = v1 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups;
  v5 = OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingBackgroundGroups;
  v0[11] = OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups;
  v0[12] = v5;
  sub_10002B2E0(v4, (uint64_t)(v0 + 2));
  v6 = sub_10001EBDC();
  sub_10002B2E0(v6, v7);
  if (*(_QWORD *)(v1 + v2))
  {
    v8 = (uint64_t (*)(void))sub_10001E5D0();
    return sub_10001D940(v8);
  }
  else
  {
    v0[13] = 0;
    sub_1000C4834((_QWORD *)(v0[8] + v0[10]));
    return sub_10001D6DC();
  }
}

uint64_t sub_1000B54B0()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 120) = sub_10004D710();
  sub_10001E10C();
  return sub_10001D6DC();
}

uint64_t sub_1000B54F0()
{
  NSObject *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  _QWORD *v40;
  uint64_t v42;
  uint64_t (*v43)(void);
  uint64_t v44;
  uint64_t v45;
  os_log_type_t v46;
  _WORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v2 = v1[8];
  v3 = (uint64_t *)(v2 + v1[11]);
  v4 = v3[2];
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v7 = *v3;
    v6 = v3[1];
    sub_10001D834(*v3);
    v60 = v6;
    sub_10001D834(v6);
    sub_10001D834(v4);
    v8 = 0;
    while (1)
    {
      v9 = *(_QWORD *)(v4 + 8 * v8 + 32);
      sub_10007D280();
      v10 = sub_1000C48DC();
      sub_1000B46F8(v10, v11, v12, v13, v14, v15, v16, v17, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70);
      if ((v18 & 1) != 0)
      {
        sub_1000B3314();
        if ((v19 & 1) != 0)
          break;
      }
      ++v8;
      sub_10002B88C();
      if (v5 == v8)
      {
        v20 = v1[15];
        v21 = v1[13];
        v22 = v1[11];
        v23 = v1[8];
        sub_10001EBB0(v7);
        sub_10001EBB0(v60);
        sub_10001EBB0(v4);
        v24 = *(_QWORD *)(v23 + v22 + 16);
        sub_10002B400();
        sub_10007D280();
        sub_10001E900();
        sub_10001DAE8();
        v25 = sub_10007F9BC();
        v9 = sub_1000B1F88(v25, v26, v24, v23, v20);
        sub_10001D930();
        sub_100044820();
        sub_10001DBEC();
        if (v9)
          goto LABEL_15;
        goto LABEL_13;
      }
    }
  }
  else
  {
    v27 = (uint64_t *)(v2 + v1[12]);
    v4 = v27[2];
    v28 = *(_QWORD *)(v4 + 16);
    if (!v28)
    {
      if (qword_1000FB218 != -1)
        swift_once(&qword_1000FB218, sub_1000B3008);
      v45 = sub_10001DD64();
      sub_100037AC4(v45, (uint64_t)qword_1000FF168);
      v46 = sub_100037B50();
      if (sub_100039E20(v46))
      {
        v47 = (_WORD *)sub_10001D8D4(2);
        sub_10004478C(v47);
        sub_1000C3C44((void *)&_mh_execute_header, v0, (os_log_type_t)v4, "In determineNextGroupToAcquireAndWaitUntilItCanStart but all pending groups are empty");
        sub_10001D790(0);
      }

      v48 = sub_10002B8A0();
      sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
      sub_10002B560(v48, v49);
      v51 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v48 - 8) + 104))(v50, enum case for ModelManagerError.internalError(_:), v48);
      swift_willThrow(v51, v52, v53, v54, v55, v56, v57, v58);
      v43 = (uint64_t (*)(void))v1[1];
      return sub_10007D480(v43);
    }
    v7 = *v27;
    v29 = v27[1];
    sub_10001D834(*v27);
    v60 = v29;
    sub_10001D834(v29);
    sub_10001D834(v4);
    v30 = 0;
    while (1)
    {
      v31 = v1[15];
      v9 = *(_QWORD *)(v4 + 8 * v30 + 32);
      v32 = *(_QWORD *)(v9 + OBJC_IVAR____TtC13modelmanagerd14ExecutionGroup_assets);
      sub_10007D280();
      sub_1000B46F8(v32, v31, v33, v34, v35, v36, v37, v38, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70);
      if ((v39 & 1) != 0)
        break;
      sub_10002B88C();
      if (v28 == ++v30)
      {
        sub_10001EBB0(v7);
        sub_10001EBB0(v60);
        sub_10001EBB0(v4);
LABEL_13:
        v40 = (_QWORD *)swift_task_alloc(dword_1000FF334);
        v1[16] = v40;
        sub_1000C4750(v40, (uint64_t)sub_1000B5844);
        return sub_1000B4DC8();
      }
    }
  }
  sub_10001EBB0(v7);
  sub_10001EBB0(v60);
  sub_10001EBB0(v4);
  v21 = v1[13];
LABEL_15:
  *(_QWORD *)(v1[8] + v1[9]) = v9;
  swift_release();
  v42 = v1[8];
  if (!*(_QWORD *)(v42 + v1[9]))
  {
    v1[13] = v21;
    sub_1000C4834((_QWORD *)(v42 + v1[10]));
    return swift_task_switch(sub_1000B54B0, v44, 0);
  }
  v43 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_10007D480(v43);
}

uint64_t sub_1000B5844()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  sub_10001E0D8();
  sub_10001EA4C(v3);
  *(_QWORD *)(v0 + 136) = v1;
  swift_task_dealloc();
  if (v1)
    return sub_10001D940(*(uint64_t (**)(void))(v2 + 8));
  else
    return sub_10001D6DC();
}

uint64_t sub_1000B589C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  v1 = v0[8];
  if (*(_QWORD *)(v1 + v0[9]))
  {
    v2 = (uint64_t (*)(void))sub_10001E5D0();
    return sub_100006A38(v2);
  }
  else
  {
    v0[13] = v0[17];
    sub_1000C4834((_QWORD *)(v1 + v0[10]));
    return sub_10001D674();
  }
}

uint64_t sub_1000B58F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4[14] = a3;
  v4[15] = v3;
  v4[12] = a1;
  v4[13] = a2;
  v5 = sub_100002F78(&qword_1000FD7E0);
  v4[16] = sub_10001D800(*(_QWORD *)(v5 - 8));
  v6 = type metadata accessor for InferenceProviderRequestConfiguration(0);
  v4[17] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[18] = v7;
  v4[19] = sub_10001D800(v7);
  v8 = sub_10001E368();
  v4[20] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[21] = v9;
  v4[22] = sub_10001D800(v9);
  v10 = sub_100002F78(&qword_1000FF788);
  v4[23] = v10;
  v4[24] = sub_10002B1BC(*(_QWORD *)(v10 - 8));
  v4[25] = sub_10001E784();
  v11 = sub_100002F78(&qword_1000FED20);
  v4[26] = sub_10002B1BC(*(_QWORD *)(v11 - 8));
  v4[27] = sub_10001E784();
  v4[28] = sub_10001E784();
  v4[29] = sub_10001E784();
  v4[30] = sub_10001E784();
  v4[31] = sub_10001E784();
  v12 = sub_1000AB044();
  v4[32] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[33] = v13;
  v4[34] = sub_10002B1BC(v13);
  v4[35] = sub_10001E784();
  sub_10001D7B8();
  return sub_10001D6DC();
}

#error "1000B5B28: call analysis failed (funcsize=459)"

uint64_t sub_1000B61B0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 344) = v1;
  swift_task_dealloc();
  if (v1)
    swift_errorRelease(v1);
  sub_10001E10C();
  return sub_10001D6DC();
}

#error "1000B66E4: call analysis failed (funcsize=301)"

uint64_t sub_1000B672C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 360) = v1;
  swift_task_dealloc();
  return sub_10001D6DC();
}

#error "1000B6C50: call analysis failed (funcsize=299)"

uint64_t sub_1000B6C98()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_10001DD0C();
  sub_10001E0D8();
  sub_10001EA4C(v2);
  v0[49] = v1;
  swift_task_dealloc();
  v4 = v0[21];
  v3 = v0[22];
  sub_1000C37F8(v0[16], &qword_1000FD7E0);
  sub_10002B7F8(v3, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_10001E10C();
  return sub_10007D24C(v5, v6, v7);
}

#error "1000B6E90: call analysis failed (funcsize=101)"

#error "1000B6FE0: call analysis failed (funcsize=81)"

#error "1000B74B0: call analysis failed (funcsize=293)"

#error "1000B7680: call analysis failed (funcsize=110)"

uint64_t sub_1000B76D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[11] = a3;
  v4[12] = v3;
  v4[9] = a1;
  v4[10] = a2;
  v5 = sub_1000AB044();
  v4[13] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[14] = v6;
  v4[15] = sub_10002B1BC(v6);
  v4[16] = sub_10001E784();
  sub_10001D7B8();
  return sub_10001D6DC();
}

uint64_t sub_1000B772C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[10];
  sub_10001C830((_QWORD *)(v0[12] + OBJC_IVAR____TtC13modelmanagerd14RequestManager_assetManager), *(_QWORD *)(v0[12] + OBJC_IVAR____TtC13modelmanagerd14RequestManager_assetManager + 24));
  v2 = v1 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_id;
  v3 = (_QWORD *)swift_task_alloc(dword_1000FD41C);
  v0[17] = v3;
  *v3 = v0;
  v3[1] = sub_1000B77A4;
  return sub_100057C08(v2);
}

uint64_t sub_1000B77A4()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 136));
  sub_10001D7B8();
  return sub_10001D674();
}

#error "1000B7984: call analysis failed (funcsize=186)"

uint64_t sub_1000B7AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[11] = a4;
  v5[12] = v4;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  v6 = sub_10001E368();
  v5[13] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[14] = v7;
  v5[15] = sub_10002B1BC(v7);
  v5[16] = sub_10001E784();
  v8 = sub_100002F78(&qword_1000FB230);
  v5[17] = sub_10001D800(*(_QWORD *)(v8 - 8));
  v9 = sub_1000AB044();
  v5[18] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[19] = v10;
  v5[20] = *(_QWORD *)(v10 + 64);
  v5[21] = sub_10001E784();
  v5[22] = sub_10001E784();
  v5[23] = sub_10001E784();
  sub_10001D7B8();
  return sub_10001D6DC();
}

uint64_t sub_1000B7B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t, uint64_t);
  uint64_t v77;

  v19 = v18[22];
  v20 = v18[23];
  v74 = v19;
  v21 = v18[20];
  v22 = v18[18];
  v23 = v18[19];
  v24 = v18[17];
  v69 = v18[21];
  v70 = v18[16];
  v71 = v18[14];
  v72 = v18[15];
  v73 = v18[13];
  v25 = v18[9];
  v67 = v18[10];
  v68 = v18[11];
  v75 = v18[8];
  v77 = v20;
  UUID.init()(a1, a2, a3, a4, a5, a6, a7, a8, v18[12]);
  v63 = sub_10001DBC0();
  sub_10002B26C(v24, v26, v27, v63);
  v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16);
  v76(v19, v20, v22);
  sub_100006710(&qword_1000FF660, type metadata accessor for RequestManager);
  v29 = v28;
  v30 = *(unsigned __int8 *)(v23 + 80);
  v31 = (v30 + 56) & ~v30;
  v32 = (char *)swift_allocObject(&unk_1000F51A0, v31 + v21, v30 | 7);
  *((_QWORD *)v32 + 2) = v62;
  *((_QWORD *)v32 + 3) = v29;
  v64 = v25;
  *((_QWORD *)v32 + 4) = v25;
  *((_QWORD *)v32 + 5) = v62;
  *((_QWORD *)v32 + 6) = v75;
  v66 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 32);
  v66(&v32[v31], v74, v22);
  sub_10001D834(v62);
  sub_10001DBE4();
  sub_10001DAE8();
  sub_10000DDB4(v24, (uint64_t)&unk_1000FF738, (uint64_t)v32);
  v34 = v33;
  v18[24] = v33;
  sub_10007F8CC();
  sub_100005630(v35, v36, v37, v63);
  v38 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F51C8, 56);
  v38[2] = 0;
  v38[3] = 0;
  v38[4] = v34;
  v38[5] = v67;
  v38[6] = v68;
  sub_10001E69C();
  sub_10001DAE8();
  sub_10000DB68(v24, (uint64_t)&unk_1000FF748, (uint64_t)v38);
  v18[25] = v39;
  v76(v74, v77, v22);
  v40 = v22;
  v65 = v22;
  v76(v69, v77, v22);
  v41 = (v30 + 32) & ~v30;
  v42 = (v21 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
  v43 = (v42 + 15) & 0xFFFFFFFFFFFFFFF8;
  v44 = swift_allocObject(&unk_1000F51F0, v43 + 8, v30 | 7);
  *(_QWORD *)(v44 + 16) = v34;
  *(_QWORD *)(v44 + 24) = v62;
  v66((char *)(v44 + v41), v69, v40);
  *(_QWORD *)(v44 + v42) = v75;
  *(_QWORD *)(v44 + v43) = v64;
  v45 = type metadata accessor for ExecutionGroup(0);
  v18[26] = swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
  sub_10001D834(v62);
  sub_10001EBA8(v64);
  sub_10001D834(v75);
  sub_10001D834(v34);
  sub_10001E8B0();
  sub_1000B3A48();
  sub_1000C5C2C();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v71 + 104))(v72, enum case for RequestPriority.foreground(_:), v73);
  LOBYTE(v44) = sub_1000B23C8(v70, v72, (uint64_t (*)(uint64_t))&type metadata accessor for RequestPriority, &qword_1000FF668);
  v46 = *(void (**)(uint64_t, uint64_t))(v71 + 8);
  v46(v72, v73);
  v46(v70, v73);
  v76(v74, v77, v65);
  v47 = (char *)v18[22];
  if ((v44 & 1) != 0)
    v48 = v18 + 5;
  else
    v48 = v18 + 2;
  v49 = sub_1000C46FC();
  sub_10002B308(v49, v50, 33);
  v51 = sub_10001E20C();
  sub_1000B43EC(v51, v47);
  swift_endAccess(v48);
  v52 = (_QWORD *)swift_task_alloc(async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:)[1]);
  v18[27] = v52;
  *v52 = v18;
  v52[1] = sub_1000B7F7C;
  sub_1000C47E0();
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(v53, v54, v55, v56, v57, v58, v59, v60, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t sub_1000B7F7C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 224) = v1;
  swift_task_dealloc(v3);
  return sub_10001D6DC();
}

#error "1000B8014: call analysis failed (funcsize=25)"

#error "1000B8078: call analysis failed (funcsize=26)"

uint64_t sub_1000B809C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v11;

  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  v11 = (_QWORD *)swift_task_alloc(dword_1000FF344);
  v7[5] = v11;
  *v11 = v7;
  v11[1] = sub_1000B8110;
  return sub_1000B58F0(a6, a4, a7);
}

uint64_t sub_1000B8110(char a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  sub_10002B940();
  sub_10001EA4C(v4);
  *(_QWORD *)(v2 + 48) = v1;
  swift_task_dealloc();
  v5 = *(_QWORD *)(v2 + 32);
  if (v1)
  {
    v6 = sub_1000B81A4;
  }
  else
  {
    *(_BYTE *)(v2 + 56) = a1 & 1;
    v6 = sub_1000B8174;
  }
  return sub_10002B3A8((uint64_t)v6, v5, 0);
}

uint64_t sub_1000B8174()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  v1 = *(_QWORD *)(v0 + 24);
  **(_BYTE **)(v0 + 16) = *(_BYTE *)(v0 + 56);
  sub_1000B81D0(v1);
  v2 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_100006A38(v2);
}

uint64_t sub_1000B81A4()
{
  uint64_t v0;

  sub_1000B81D0(*(_QWORD *)(v0 + 24));
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1000B81D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  uint8_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _BYTE v34[4];
  int v35;
  uint8_t *v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;

  v2 = type metadata accessor for ModelCatalogAsset(0);
  v42 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v5 = (uint64_t *)&v34[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  v41 = &v34[-v6];
  if (qword_1000FB218 != -1)
    goto LABEL_20;
  while (1)
  {
    v7 = type metadata accessor for Logger(0);
    sub_100002FF8(v7, (uint64_t)qword_1000FF168);
    v8 = swift_bridgeObjectRetain_n(a1, 2);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter(v9);
    if (!os_log_type_enabled(v9, (os_log_type_t)v10))
    {

      swift_bridgeObjectRelease_n(a1, 2);
      return;
    }
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v38 = swift_slowAlloc(32, -1);
    v44 = v38;
    *(_DWORD *)v11 = 136315138;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = _swiftEmptyArrayStorage;
    if (!v12)
      break;
    v35 = v10;
    v36 = v11;
    v37 = v9;
    v43 = _swiftEmptyArrayStorage;
    sub_100011720(0, v12, 0);
    v14 = sub_10001C854(a1);
    v16 = v15;
    v18 = v17 & 1;
    v39 = a1;
    v40 = a1 + 56;
    while ((v14 & 0x8000000000000000) == 0 && v14 < 1 << *(_BYTE *)(a1 + 32))
    {
      if (((*(_QWORD *)(v40 + (((unint64_t)v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
        goto LABEL_18;
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v16)
        goto LABEL_19;
      v19 = *(_QWORD *)(a1 + 48);
      v20 = v41;
      sub_1000C343C(v19 + *(_QWORD *)(v42 + 72) * v14, (uint64_t)v41, type metadata accessor for ModelCatalogAsset);
      sub_10001CB5C((uint64_t)v20, (uint64_t)v5);
      v22 = *v5;
      v21 = v5[1];
      swift_bridgeObjectRetain();
      sub_1000C3460((uint64_t)v5, type metadata accessor for ModelCatalogAsset);
      v13 = v43;
      if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
      {
        sub_100011720(0, v13[2] + 1, 1);
        v13 = v43;
      }
      v24 = v13[2];
      v23 = v13[3];
      if (v24 >= v23 >> 1)
      {
        sub_100011720(v23 > 1, v24 + 1, 1);
        v13 = v43;
      }
      v13[2] = v24 + 1;
      v25 = &v13[2 * v24];
      v25[4] = v22;
      v25[5] = v21;
      a1 = v39;
      v26 = sub_10001C6FC(v14, v16, v18 & 1, v39);
      v14 = v26;
      v16 = v27;
      v18 = v28 & 1;
      if (!--v12)
      {
        sub_10001C7E4(v26, v27, v28 & 1);
        v11 = v36;
        v9 = v37;
        LOBYTE(v10) = v35;
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    swift_once(&qword_1000FB218, sub_1000B3008);
  }
LABEL_16:
  v29 = Array.description.getter(v13, &type metadata for String);
  v31 = v30;
  swift_bridgeObjectRelease();
  sub_1000102C0(v29, v31, &v44);
  v43 = v32;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);
  swift_bridgeObjectRelease_n(a1, 2);
  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v9, (os_log_type_t)v10, "Request manager asset aquisition complete for bundle %s", v11, 0xCu);
  v33 = v38;
  swift_arrayDestroy(v38, 1);
  swift_slowDealloc(v33, -1, -1);
  swift_slowDealloc(v11, -1, -1);

}

uint64_t sub_1000B8570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v8;
  uint64_t v9;

  v6[2] = a5;
  v6[3] = a6;
  v8 = (_QWORD *)swift_task_alloc(async function pointer to Task.value.getter[1]);
  v6[4] = v8;
  v9 = sub_100002F78(&qword_1000FB5F8);
  *v8 = v6;
  v8[1] = sub_1000B85F8;
  return Task.value.getter(v6 + 7, a4, &type metadata for Bool, v9, &protocol self-conformance witness table for Error);
}

uint64_t sub_1000B85F8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc();
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_1000B8650()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  v1 = (_QWORD *)sub_10001D6BC(*(_QWORD *)(v0 + 16));
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_1000B8690;
  return sub_100006A38(v3);
}

uint64_t sub_1000B8690()
{
  uint64_t (**v0)(void);

  sub_10001D680(*((_QWORD *)*v0 + 6));
  return sub_100006A38(v0[1]);
}

uint64_t sub_1000B86C4()
{
  return sub_10001DCF8();
}

uint64_t sub_1000B86CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;

  v5[4] = a4;
  v5[5] = a5;
  v5[2] = a2;
  v5[3] = a3;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to Task.value.getter[1]);
  v5[6] = v7;
  v8 = sub_100002F78(&qword_1000FB5F8);
  *v7 = v5;
  v7[1] = sub_1000B8758;
  return Task.value.getter(v5 + 9, a1, &type metadata for Bool, v8, &protocol self-conformance witness table for Error);
}

uint64_t sub_1000B8758()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_1000B87B0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(v0 + 72) != 1)
    return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
  v1 = (_QWORD *)swift_task_alloc(dword_1000FF34C);
  *(_QWORD *)(v0 + 64) = v1;
  *v1 = v0;
  v1[1] = sub_1000B883C;
  v2 = sub_10002BD0C(*(_QWORD *)(v0 + 24));
  return sub_1000B76D8(v2, v3, v4);
}

uint64_t sub_1000B8814()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 56));
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000B883C()
{
  uint64_t v0;
  uint64_t v1;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v1 + 64));
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000B8868(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to Task.value.getter[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100002F78(&qword_1000FB5F8);
  *v5 = v2;
  v5[1] = sub_10001D668;
  return Task.value.getter(a1, a2, (char *)&type metadata for () + 8, v6, &protocol self-conformance witness table for Error);
}

void sub_1000B88F0()
{
  sub_100002F78(&qword_1000FB5F8);
  Task.cancel()();
}

uint64_t sub_1000B8934(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[14] = a1;
  v2[15] = v1;
  v3 = sub_100002F78(&qword_1000FF680);
  v2[16] = sub_10002B1BC(*(_QWORD *)(v3 - 8));
  v2[17] = sub_10001E784();
  v4 = sub_100002F78(&qword_1000FF688);
  v2[18] = v4;
  v2[19] = sub_10001D800(*(_QWORD *)(v4 - 8));
  v5 = sub_10007F430();
  v2[20] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[21] = v6;
  v2[22] = sub_10002B1BC(v6);
  v2[23] = sub_10001E784();
  v2[24] = sub_10001E784();
  sub_10001D7B8();
  return sub_10001D6DC();
}

void sub_1000B89C8()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;

  v113 = v0 + 2;
  v4 = v0[14];
  v5 = v0[15];
  v6 = *(_BYTE *)(v4 + 32);
  *((_BYTE *)v0 + 240) = v6;
  v7 = 1;
  v8 = 1 << v6;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v4 + 56);
  v11 = v5 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups;
  v12 = OBJC_IVAR____TtC13modelmanagerd14RequestManager_assetManager;
  v0[25] = OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups;
  v0[26] = v12;
  swift_bridgeObjectRetain();
  sub_10002B2E0(v11, (uint64_t)(v0 + 11));
  v13 = 0;
  if (!v10)
  {
LABEL_6:
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
      goto LABEL_122;
    v19 = (1 << *((_BYTE *)v0 + 240)) + 63;
    v17 = v0[14];
    if (v18 >= (uint64_t)(v19 >> 6))
      goto LABEL_119;
    v20 = v17 + 56;
    v21 = *(_QWORD *)(v17 + 56 + 8 * v18);
    ++v13;
    if (!v21)
    {
      v22 = v19 >> 6;
      v13 = v18 + 1;
      if (v18 + 1 >= v22)
        goto LABEL_119;
      v21 = *(_QWORD *)(v20 + 8 * v13);
      if (!v21)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v22)
          goto LABEL_119;
        v21 = *(_QWORD *)(v20 + 8 * v13);
        if (!v21)
        {
          v23 = v18 + 3;
          if (v23 < v22)
          {
            v21 = *(_QWORD *)(v20 + 8 * v23);
            if (!v21)
            {
              while (1)
              {
                v13 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_123;
                if (v13 >= v22)
                  goto LABEL_119;
                v21 = *(_QWORD *)(v20 + 8 * v13);
                ++v23;
                if (v21)
                  goto LABEL_19;
              }
            }
            v13 = v23;
            goto LABEL_19;
          }
LABEL_119:
          swift_release();
          sub_1000C4654();
          sub_10001E330();
          sub_10001D938();
          sub_10001EAC8();
          sub_10001E490();
          sub_10002B504();
          sub_1000C401C((uint64_t (*)(void))v0[1]);
          return;
        }
      }
    }
LABEL_19:
    v15 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v13 << 6);
    goto LABEL_20;
  }
LABEL_5:
  v14 = __clz(__rbit64(v10));
  v15 = (v10 - 1) & v10;
  v16 = v14 | (v13 << 6);
  v17 = v0[14];
LABEL_20:
  v105 = v15;
  v107 = v13;
  v0[27] = v13;
  v0[28] = v15;
  sub_1000C3E8C(v17, v16);
  sub_1000C4D00();
  v24 = sub_1000C4780();
  sub_1000C4AB4(v24);
  if (!v25)
  {
LABEL_118:
    sub_10007D280();
    sub_10002B400();
    goto LABEL_116;
  }
  v26 = v0[18];
  v123 = v0[19];
  v27 = sub_1000AB044();
  v121 = *(_QWORD *)(v27 - 8);
  v122 = v27;
  v120 = (uint64_t)v1 + ((*(unsigned __int8 *)(v121 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v121 + 80));
  v118 = *(int *)(v26 + 48);
  v119 = 33;
  v124 = v1[2];
  sub_10001D834(v11);
  v109 = (uint64_t)v1;
  sub_10001D834((uint64_t)v1);
  v110 = 1;
  v28 = sub_10001D834(1);
  v36 = 0;
  v127 = v0;
  v117 = v11;
  while (1)
  {
    if (v36 == v124)
    {
      __break(1u);
      goto LABEL_121;
    }
    sub_1000C3FAC(v28, v29, v30, v31, v32, v33, v34, v35, v104, v105, v107, v109, v110, v111, v112, (uint64_t)v113, v114, v115, v116,
      v117,
      v118,
      v119,
      v120,
      v121,
      v122);
    v125 = v36;
    v37 = *(_QWORD *)(v119 + 8 * v36);
    v7 = *(_QWORD *)(v7 + 32);
    sub_1000C40E8((uint64_t)v1, v15);
    v38 = sub_1000C40E8(v26, (uint64_t)v1);
    *(_QWORD *)(v123 + v118) = v37;
    if (*(_QWORD *)(*(_QWORD *)(v37 + OBJC_IVAR____TtC13modelmanagerd14ExecutionGroup_assets) + 16))
      break;
    sub_10001DAE8();
LABEL_97:
    v36 = v125 + 1;
    sub_1000C37F8(v0[19], &qword_1000FF688);
    v11 = v117;
    if (v125 + 1 == v116)
    {
      sub_10001EBB0(v117);
      sub_10002B88C();
      sub_10001D9C8();
LABEL_116:
      v93 = v0[26];
      v94 = v0[15];
      sub_10002B88C();
      v95 = sub_10001D9C8();
      sub_10007FC24(v95, v96, v97, v98, v99, v100, v101, v102, v104, v105, v107, v109, v110, v111);
      v103 = sub_10001C830((_QWORD *)(v94 + v93), *(_QWORD *)(v94 + v93 + 24));
      v0[29] = v103;
      sub_1000C4000((uint64_t)sub_1000B9068, *v103, 0);
      return;
    }
  }
  sub_1000C4344(v38, v39, v40, v41, v42, v43, v44, v45, v104, v105, v107, v109, v110, v111, v112, v113);
  v26 = *(_QWORD *)v7;
  v46 = *(_QWORD *)(v7 + 8);
  v112 = v37;
  sub_10001DAE8();
  sub_10001DBE4();
  sub_1000C4804();
  sub_10001DA38();
  sub_1000C4668();
  if (v1)
  {
    sub_10001DBE4();
    v11 = v26;
    v7 = v46 + 40;
    do
    {
      sub_1000C4A4C();
      sub_1000C4814();
      sub_100006C48();
      v7 += 16;
      v1 = (uint64_t *)((char *)v1 - 1);
    }
    while (v1);
    sub_10001DA38();
  }
  sub_1000C45C4();
  if (v3)
  {
    sub_10007DCD8();
    v11 = v2 + 64;
    do
    {
      sub_1000C45B0();
      sub_10001DBE4();
      sub_1000C4938();
      if (type metadata accessor for ModelCatalogAsset)
      {
        Hasher._combine(_:)(1u);
        sub_10007F0CC();
        sub_1000C4928();
        sub_10002B684();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      Hasher._combine(_:)((Swift::UInt8)v1);
      sub_10001DA38();
      sub_10002B684();
      v11 += 40;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  v15 = sub_1000C41BC();
  sub_100006710(&qword_1000FB628, (uint64_t (*)(uint64_t))&type metadata accessor for AssetCost);
  sub_1000C4620(v47);
  sub_1000C4724();
  sub_1000C4A34();
  sub_1000C4710();
  Hasher._finalize()();
  sub_1000C4060();
  if ((v49 & 1) == 0)
    goto LABEL_97;
  while (1)
  {
    v26 = v0[22];
    v7 = v0[23];
    sub_1000C42F4(*(_QWORD *)(v48 + 48) + v2 * v126);
    v50 = *(_QWORD *)(v26 + 8);
    v51 = *(_QWORD *)(v7 + 8);
    v52 = *(_QWORD *)v26 == *(_QWORD *)v7 && v50 == v51;
    if (!v52 && (sub_10001DB04(*(_QWORD *)v26, v50, *(_QWORD *)v7, v51) & 1) == 0)
      goto LABEL_94;
    sub_1000C457C();
    if (!v52)
      goto LABEL_94;
    if (v26)
      v53 = v11 == v15;
    else
      v53 = 1;
    if (!v53)
    {
      v59 = *(_QWORD *)(v11 + 32);
      v60 = *(_QWORD *)(v11 + 40);
      v61 = *(_QWORD *)(v15 + 32);
      v62 = *(_QWORD *)(v15 + 40);
      v63 = v59 == v61 && v60 == v62;
      if (!v63 && (sub_10001DB04(v59, v60, v61, v62) & 1) == 0)
        goto LABEL_94;
      if (v26 != 1)
      {
        v64 = *(_QWORD *)(v11 + 48);
        v65 = *(_QWORD *)(v11 + 56);
        v66 = *(_QWORD *)(v15 + 48);
        v67 = *(_QWORD *)(v15 + 56);
        v68 = v64 == v66 && v65 == v67;
        if (!v68 && (sub_10001DB04(v64, v65, v66, v67) & 1) == 0)
          goto LABEL_94;
        if (v26 != 2)
        {
          v0 = (_QWORD *)(v15 + 72);
          v7 = v11 + 72;
          v11 = 2;
          while (v26 > 2)
          {
            v69 = *(_QWORD *)(v7 - 8);
            v70 = *(_QWORD *)v7;
            v71 = *(_QWORD *)(v15 + 64);
            v72 = *v0;
            v73 = v69 == v71 && v70 == v72;
            if (!v73 && (sub_10001DB04(v69, v70, v71, v72) & 1) == 0)
              goto LABEL_94;
            sub_1000C4CA4();
            if (v52)
              goto LABEL_48;
          }
          __break(1u);
          goto LABEL_118;
        }
      }
    }
LABEL_48:
    sub_1000C442C();
    if (v52)
    {
      if (v11)
        v57 = v55 == v56;
      else
        v57 = 1;
      if (!v57)
      {
        v74 = v56 + 64;
        v3 = v55 + 64;
        while (1)
        {
          v75 = sub_1000C44D8();
          v79 = v52 && v76 == v78;
          if (!v79 && (sub_10001DB04(v75, v76, v77, v78) & 1) == 0
            || v26
            || ((v0 ^ v7) & 1) != 0)
          {
            goto LABEL_94;
          }
          v3 += 40;
          v74 += 40;
          if (!--v11)
          {
            v54 = v127[22];
            break;
          }
        }
      }
      if ((sub_1000C4564(v54) & 1) != 0)
      {
        sub_1000C416C();
        if (v52)
        {
          sub_1000C46D8();
          if (v52)
          {
            sub_1000C46BC();
            if (v52)
              break;
          }
        }
      }
    }
LABEL_94:
    v0 = v127;
    sub_1000C42A4(v127[22]);
    sub_1000C42B4();
    if ((v80 & 1) == 0)
      goto LABEL_97;
  }
  sub_1000C42A4(v58);
  v81 = (uint64_t)sub_1000B3290();
  v26 = v81;
  if ((unint64_t)v81 >> 62)
  {
    if (v81 < 0)
      v15 = v81;
    else
      v15 = v81 & 0xFFFFFFFFFFFFFF8;
    sub_10001E338();
    v82 = sub_1000C4708();
  }
  else
  {
    v82 = *(_QWORD *)((v81 & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_10001E338();
  }
  v1 = &OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_isCancelled;
  if (!v82)
  {
LABEL_109:
    sub_10002BA68(v26);
    v0 = v127;
    goto LABEL_97;
  }
  v15 = 0;
  while (1)
  {
    v83 = (v26 & 0xC000000000000001) != 0 ? sub_1000C4958(v15) : sub_1000C4374(v26 + 8 * v15);
    v7 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    sub_1000C4C64(v83);
    if ((v11 & 1) != 0)
    {
      v0 = v127;
      v84 = v127[23];
      v1 = (uint64_t *)v127[19];
      sub_10002BA68(v26);
      sub_1000C37F8((uint64_t)v1, &qword_1000FF688);
      sub_10001EBB0(v117);
      sub_10001EBB0(v109);
      v85 = sub_10001EBB0(v110);
      sub_10007FC24(v85, v86, v87, v88, v89, v90, v91, v92, v104, v105, v107, v109, v110, v111);
      sub_1000C42A4(v84);
      v7 = 1;
      v10 = v106;
      v13 = v108;
      if (v106)
        goto LABEL_5;
      goto LABEL_6;
    }
    ++v15;
    if (v7 == v82)
      goto LABEL_109;
  }
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
LABEL_123:
  __break(1u);
}

uint64_t sub_1000B9068()
{
  uint64_t v0;

  sub_100058DBC(*(_QWORD *)(v0 + 184));
  sub_10001E10C();
  return sub_10001D6DC();
}

void sub_1000B90A8()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;

  v107 = v2 + 2;
  sub_1000C42A4(v2[23]);
  v8 = v2[27];
  v7 = v2[28];
  if (!v7)
  {
LABEL_3:
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
      goto LABEL_119;
    v14 = (1 << *((_BYTE *)v2 + 240)) + 63;
    v12 = v2[14];
    if (v13 >= (uint64_t)(v14 >> 6))
      goto LABEL_116;
    v15 = v12 + 56;
    v16 = *(_QWORD *)(v12 + 56 + 8 * v13);
    ++v8;
    if (!v16)
    {
      v17 = v14 >> 6;
      v8 = v13 + 1;
      if (v13 + 1 >= v17)
        goto LABEL_116;
      v16 = *(_QWORD *)(v15 + 8 * v8);
      if (!v16)
      {
        v8 = v13 + 2;
        if (v13 + 2 >= v17)
          goto LABEL_116;
        v16 = *(_QWORD *)(v15 + 8 * v8);
        if (!v16)
        {
          v18 = v13 + 3;
          if (v18 < v17)
          {
            v16 = *(_QWORD *)(v15 + 8 * v18);
            if (!v16)
            {
              while (1)
              {
                v8 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_120;
                if (v8 >= v17)
                  goto LABEL_116;
                v16 = *(_QWORD *)(v15 + 8 * v8);
                ++v18;
                if (v16)
                  goto LABEL_16;
              }
            }
            v8 = v18;
            goto LABEL_16;
          }
LABEL_116:
          swift_release();
          sub_1000C4654();
          sub_10001E330();
          sub_10001D938();
          sub_10001EAC8();
          sub_10001E490();
          sub_10002B504();
          sub_1000C401C((uint64_t (*)(void))v2[1]);
          return;
        }
      }
    }
LABEL_16:
    v10 = (v16 - 1) & v16;
    v11 = __clz(__rbit64(v16)) + (v8 << 6);
    goto LABEL_17;
  }
LABEL_2:
  v9 = __clz(__rbit64(v7));
  v10 = (v7 - 1) & v7;
  v11 = v9 | (v8 << 6);
  v12 = v2[14];
LABEL_17:
  v99 = v10;
  v101 = v8;
  v2[27] = v8;
  v2[28] = v10;
  sub_1000C3E8C(v12, v11);
  sub_1000C4D00();
  v19 = sub_1000C4780();
  sub_1000C4AB4(v19);
  if (!v20)
  {
LABEL_115:
    sub_10007D280();
    sub_10002B400();
    goto LABEL_113;
  }
  v21 = v2[18];
  v117 = v2[19];
  v22 = sub_1000AB044();
  v115 = *(_QWORD *)(v22 - 8);
  v116 = v22;
  v114 = (uint64_t)v4 + ((*(unsigned __int8 *)(v115 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v115 + 80));
  v112 = *(int *)(v21 + 48);
  v113 = (uint64_t)(v0 + 4);
  v118 = v4[2];
  sub_10001D834(v1);
  v103 = (uint64_t)v4;
  sub_10001D834((uint64_t)v4);
  v104 = (uint64_t)v0;
  v23 = sub_10001D834((uint64_t)v0);
  v31 = 0;
  v121 = v2;
  v111 = v1;
  while (1)
  {
    if (v31 == v118)
    {
      __break(1u);
      goto LABEL_118;
    }
    sub_1000C3FAC(v23, v24, v25, v26, v27, v28, v29, v30, v98, v99, v101, v103, v104, v105, v106, (uint64_t)v107, v108, v109, v110,
      v111,
      v112,
      v113,
      v114,
      v115,
      v116);
    v119 = v31;
    v32 = *(_QWORD *)(v113 + 8 * v31);
    v0 = (uint64_t *)v0[4];
    sub_1000C40E8((uint64_t)v4, v3);
    v33 = sub_1000C40E8(v21, (uint64_t)v4);
    *(_QWORD *)(v117 + v112) = v32;
    if (*(_QWORD *)(*(_QWORD *)(v32 + OBJC_IVAR____TtC13modelmanagerd14ExecutionGroup_assets) + 16))
      break;
    sub_10001DAE8();
LABEL_94:
    v31 = v119 + 1;
    sub_1000C37F8(v2[19], &qword_1000FF688);
    v1 = v111;
    if (v119 + 1 == v110)
    {
      sub_10001EBB0(v111);
      sub_10002B88C();
      sub_10001D9C8();
LABEL_113:
      v87 = v2[26];
      v88 = v2[15];
      sub_10002B88C();
      v89 = sub_10001D9C8();
      sub_10007FC24(v89, v90, v91, v92, v93, v94, v95, v96, v98, v99, v101, v103, v104, v105);
      v97 = sub_10001C830((_QWORD *)(v88 + v87), *(_QWORD *)(v88 + v87 + 24));
      v2[29] = v97;
      sub_1000C4000((uint64_t)sub_1000B9068, *v97, 0);
      return;
    }
  }
  sub_1000C4344(v33, v34, v35, v36, v37, v38, v39, v40, v98, v99, v101, v103, v104, v105, v106, v107);
  v21 = *v0;
  v41 = v0[1];
  v106 = v32;
  sub_10001DAE8();
  sub_10001DBE4();
  sub_1000C4804();
  sub_10001DA38();
  sub_1000C4668();
  if (v4)
  {
    sub_10001DBE4();
    v1 = v21;
    v0 = (uint64_t *)(v41 + 40);
    do
    {
      sub_1000C4A4C();
      sub_1000C4814();
      sub_100006C48();
      v0 += 2;
      v4 = (uint64_t *)((char *)v4 - 1);
    }
    while (v4);
    sub_10001DA38();
  }
  sub_1000C45C4();
  if (v6)
  {
    sub_10007DCD8();
    v1 = v5 + 64;
    do
    {
      sub_1000C45B0();
      sub_10001DBE4();
      sub_1000C4938();
      if (type metadata accessor for ModelCatalogAsset)
      {
        Hasher._combine(_:)(1u);
        sub_10007F0CC();
        sub_1000C4928();
        sub_10002B684();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      Hasher._combine(_:)((Swift::UInt8)v4);
      sub_10001DA38();
      sub_10002B684();
      v1 += 40;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  v3 = sub_1000C41BC();
  sub_100006710(&qword_1000FB628, (uint64_t (*)(uint64_t))&type metadata accessor for AssetCost);
  sub_1000C4620(v42);
  sub_1000C4724();
  sub_1000C4A34();
  sub_1000C4710();
  Hasher._finalize()();
  sub_1000C4060();
  if ((v44 & 1) == 0)
    goto LABEL_94;
  while (1)
  {
    v21 = v2[22];
    v0 = (uint64_t *)v2[23];
    sub_1000C42F4(*(_QWORD *)(v43 + 48) + v5 * v120);
    v45 = *(_QWORD *)(v21 + 8);
    v46 = v0[1];
    v47 = *(_QWORD *)v21 == *v0 && v45 == v46;
    if (!v47 && (sub_10001DB04(*(_QWORD *)v21, v45, *v0, v46) & 1) == 0)
      goto LABEL_91;
    sub_1000C457C();
    if (!v47)
      goto LABEL_91;
    if (v21)
      v48 = v1 == v3;
    else
      v48 = 1;
    if (!v48)
    {
      v54 = *(_QWORD *)(v1 + 32);
      v55 = *(_QWORD *)(v1 + 40);
      v56 = *(_QWORD *)(v3 + 32);
      v57 = *(_QWORD *)(v3 + 40);
      v58 = v54 == v56 && v55 == v57;
      if (!v58 && (sub_10001DB04(v54, v55, v56, v57) & 1) == 0)
        goto LABEL_91;
      if (v21 != 1)
      {
        v59 = *(_QWORD *)(v1 + 48);
        v60 = *(_QWORD *)(v1 + 56);
        v61 = *(_QWORD *)(v3 + 48);
        v62 = *(_QWORD *)(v3 + 56);
        v63 = v59 == v61 && v60 == v62;
        if (!v63 && (sub_10001DB04(v59, v60, v61, v62) & 1) == 0)
          goto LABEL_91;
        if (v21 != 2)
        {
          v2 = (_QWORD *)(v3 + 72);
          v0 = (uint64_t *)(v1 + 72);
          v1 = 2;
          while (v21 > 2)
          {
            v64 = *(v0 - 1);
            v65 = *v0;
            v66 = *(_QWORD *)(v3 + 64);
            v67 = *v2;
            v68 = v64 == v66 && v65 == v67;
            if (!v68 && (sub_10001DB04(v64, v65, v66, v67) & 1) == 0)
              goto LABEL_91;
            sub_1000C4CA4();
            if (v47)
              goto LABEL_45;
          }
          __break(1u);
          goto LABEL_115;
        }
      }
    }
LABEL_45:
    sub_1000C442C();
    if (v47)
    {
      if (v1)
        v52 = v50 == v51;
      else
        v52 = 1;
      if (!v52)
      {
        v69 = v51 + 64;
        v6 = v50 + 64;
        while (1)
        {
          v70 = sub_1000C44D8();
          v74 = v47 && v71 == v73;
          if (!v74 && (sub_10001DB04(v70, v71, v72, v73) & 1) == 0
            || v21
            || ((v2 ^ v0) & 1) != 0)
          {
            goto LABEL_91;
          }
          v6 += 40;
          v69 += 40;
          if (!--v1)
          {
            v49 = v121[22];
            break;
          }
        }
      }
      if ((sub_1000C4564(v49) & 1) != 0)
      {
        sub_1000C416C();
        if (v47)
        {
          sub_1000C46D8();
          if (v47)
          {
            sub_1000C46BC();
            if (v47)
              break;
          }
        }
      }
    }
LABEL_91:
    v2 = v121;
    sub_1000C42A4(v121[22]);
    sub_1000C42B4();
    if ((v75 & 1) == 0)
      goto LABEL_94;
  }
  sub_1000C42A4(v53);
  v76 = (uint64_t)sub_1000B3290();
  v21 = v76;
  if ((unint64_t)v76 >> 62)
  {
    if (v76 < 0)
      v3 = v76;
    else
      v3 = v76 & 0xFFFFFFFFFFFFFF8;
    sub_10001E338();
    v77 = sub_1000C4708();
  }
  else
  {
    v77 = *(_QWORD *)((v76 & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_10001E338();
  }
  v4 = &OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_isCancelled;
  if (!v77)
  {
LABEL_106:
    sub_10002BA68(v21);
    v2 = v121;
    goto LABEL_94;
  }
  v3 = 0;
  while (1)
  {
    v78 = (v21 & 0xC000000000000001) != 0 ? sub_1000C4958(v3) : sub_1000C4374(v21 + 8 * v3);
    v0 = (uint64_t *)(v3 + 1);
    if (__OFADD__(v3, 1))
      break;
    sub_1000C4C64(v78);
    if ((v1 & 1) != 0)
    {
      v2 = v121;
      v3 = v121[23];
      v4 = (uint64_t *)v121[19];
      sub_10002BA68(v21);
      sub_1000C37F8((uint64_t)v4, &qword_1000FF688);
      sub_10001EBB0(v111);
      sub_10001EBB0(v103);
      v79 = sub_10001EBB0(v104);
      sub_10007FC24(v79, v80, v81, v82, v83, v84, v85, v86, v98, v99, v101, v103, v104, v105);
      sub_1000C42A4(v3);
      v7 = v100;
      v8 = v102;
      if (v100)
        goto LABEL_2;
      goto LABEL_3;
    }
    ++v3;
    if (v0 == (uint64_t *)v77)
      goto LABEL_106;
  }
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
}

uint64_t sub_1000B96FC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[5] = v0;
  v2 = sub_100002F78(&qword_1000FF680);
  v1[6] = sub_10002B1BC(*(_QWORD *)(v2 - 8));
  v1[7] = sub_10001E784();
  v3 = sub_100002F78(&qword_1000FF688);
  v1[8] = v3;
  v1[9] = sub_10002B1BC(*(_QWORD *)(v3 - 8));
  v1[10] = sub_10001E784();
  v1[11] = sub_10001E784();
  v1[12] = sub_10001E784();
  sub_10001D7B8();
  return sub_10001D6DC();
}

#error "1000B9848: call analysis failed (funcsize=148)"

uint64_t sub_1000B99DC()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 176));
  sub_10001D9C0();
  sub_10001E10C();
  return sub_10001D6DC();
}

#error "1000B9A9C: call analysis failed (funcsize=127)"

uint64_t sub_1000B9C28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v9[10] = v15;
  v9[11] = v8;
  v9[8] = a7;
  v9[9] = a8;
  v9[6] = a5;
  v9[7] = a6;
  v9[4] = a3;
  v9[5] = a4;
  v9[2] = a1;
  v9[3] = a2;
  v10 = sub_100002F78(&qword_1000FB230);
  v9[12] = sub_10001D800(*(_QWORD *)(v10 - 8));
  sub_10001D7B8();
  return swift_task_switch(v11, v12, v13);
}

uint64_t sub_1000B9C88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = (uint64_t *)(v1 + 32);
    v4 = *(_QWORD *)(v0 + 16);
    sub_10001D834(*(_QWORD *)(v0 + 24));
    sub_10001D834(v1);
    sub_10001D834(v4);
    sub_10001E140();
    while (1)
    {
      v5 = *v3;
      *(_QWORD *)(v0 + 104) = *v3;
      sub_10002B400();
      sub_1000C46FC();
      sub_10000E244();
      if ((v6 & 1) != 0 && (*(_BYTE *)(v5 + OBJC_IVAR____TtC13modelmanagerd14ExecutionGroup_startedReleasing) & 1) == 0)
        break;
      sub_10001D930();
      ++v3;
      if (!--v2)
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
        sub_10001D930();
        sub_10001D9C8();
        sub_10001EBB0(v4);
        goto LABEL_8;
      }
    }
    v8 = *(_QWORD *)(v0 + 72);
    v10 = *(_QWORD *)(v0 + 24);
    v9 = *(_QWORD *)(v0 + 32);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
    sub_10001EBB0(v9);
    sub_10001EBB0(v10);
    sub_10001EBB0(v4);
    if (v8)
    {
      v12 = *(void (**)(uint64_t))(v0 + 72);
      v11 = *(_QWORD *)(v0 + 80);
      sub_10001E194();
      v12(v5);
      sub_10008F170((uint64_t)v12, v11);
    }
    v14 = *(_QWORD *)(v0 + 88);
    v13 = *(_QWORD *)(v0 + 96);
    v16 = *(_QWORD *)(v0 + 56);
    v15 = *(_QWORD *)(v0 + 64);
    v17 = *(_QWORD *)(v0 + 40);
    v18 = sub_10001DBC0();
    sub_10002B26C(v13, v19, v20, v18);
    sub_100006710(&qword_1000FF660, type metadata accessor for RequestManager);
    v22 = v21;
    v23 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F5178, 64);
    v23[2] = v14;
    v23[3] = v22;
    v23[4] = v14;
    v23[5] = v5;
    v23[6] = v16;
    v23[7] = v15;
    sub_10001D834(v14);
    sub_10002B400();
    sub_10007D280();
    sub_10000DB68(v13, (uint64_t)&unk_1000FF728, (uint64_t)v23);
    v25 = v24;
    *(_QWORD *)(v0 + 112) = v24;
    sub_1000B3C5C(v24, v17, v24);
    v26 = (_QWORD *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    *(_QWORD *)(v0 + 120) = v26;
    v27 = sub_100002F78(&qword_1000FB5F8);
    *v26 = v0;
    v26[1] = sub_1000B9ED0;
    return Task.value.getter(v27, v25, (char *)&type metadata for () + 8, v27, &protocol self-conformance witness table for Error);
  }
  else
  {
    sub_10001E194();
    sub_10002B400();
LABEL_8:
    sub_10001D930();
    sub_10001D9C0();
    swift_task_dealloc(*(_QWORD *)(v0 + 96));
    return sub_1000C45F4(0, *(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_1000B9ED0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 128) = v1;
  swift_task_dealloc(v3);
  return sub_10001D6DC();
}

uint64_t sub_1000B9F24()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 104));
  sub_10001D9C0();
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
}

uint64_t sub_1000B9F68()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 104));
  sub_10001D9C0();
  sub_10001D938();
  return sub_1000C45F4(0, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000B9FA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return swift_task_switch(sub_1000B9FC4, a4, 0);
}

uint64_t sub_1000B9FC4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0[6] = *(_QWORD *)(v0[3] + OBJC_IVAR____TtC13modelmanagerd14ExecutionGroup_acquireTask);
  sub_10002B400();
  v1 = (_QWORD *)sub_10001FAE8();
  v0[7] = v1;
  sub_100002F78(&qword_1000FB5F8);
  *v1 = v0;
  v1[1] = sub_1000BA054;
  v2 = sub_1000C419C();
  return Task.value.getter(v2, v3, v4, v5, v6);
}

uint64_t sub_1000BA054()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)();

  sub_10002B940();
  sub_10001EA4C(v2);
  *(_QWORD *)(v1 + 64) = v0;
  swift_task_dealloc();
  sub_10001D930();
  if (v0)
    v3 = sub_1000BA11C;
  else
    v3 = sub_1000BA0B0;
  return sub_10002B3A8((uint64_t)v3, *(_QWORD *)(v1 + 16), 0);
}

uint64_t sub_1000BA0B0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  v1 = (_QWORD *)sub_10001D6BC(*(_QWORD *)(v0 + 32));
  *(_QWORD *)(v0 + 72) = v1;
  *v1 = v0;
  v1[1] = sub_1000BA0F0;
  return sub_100006A38(v3);
}

uint64_t sub_1000BA0F0()
{
  uint64_t v0;
  uint64_t v1;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v1 + 72));
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000BA11C()
{
  return sub_10001DCF8();
}

uint64_t sub_1000BA124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[13] = a3;
  v4[14] = v3;
  v4[11] = a1;
  v4[12] = a2;
  v5 = sub_10001E368();
  v4[15] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[16] = v6;
  v4[17] = sub_10002B1BC(v6);
  v4[18] = sub_10001E784();
  sub_10001D7B8();
  return sub_10001D6DC();
}

uint64_t sub_1000BA178()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  os_log_type_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t **v17;

  v2 = *(_QWORD *)(v0[11] + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_modelAssets);
  v0[19] = v2;
  if (qword_1000FB218 != -1)
    swift_once(&qword_1000FB218, sub_1000B3008);
  v3 = sub_10001DD64();
  v4 = sub_100002FF8(v3, (uint64_t)qword_1000FF168);
  v0[20] = v4;
  v5 = (void *)v4;
  Logger.logObject.getter(v4);
  v6 = sub_100037FDC();
  if (sub_10001E6C4(v6))
  {
    v7 = (_WORD *)sub_10001D8D4(2);
    sub_10007F108(v7);
    sub_1000C3CBC((void *)&_mh_execute_header, v8, v9, "Entering enqueueRequestAndWait");
    sub_10001D790(v1);
  }
  v10 = v0[14];

  v11 = OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups;
  v0[21] = OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups;
  v12 = (uint64_t *)(v10 + v11);
  sub_10002B2E0(v10 + v11, (uint64_t)(v0 + 2));
  v13 = *v12;
  v0[22] = *v12;
  v14 = v12[1];
  v0[23] = v14;
  v15 = v12[2];
  v0[24] = v15;
  v16 = dword_1000FF36C;
  sub_10001D7EC();
  sub_10001E900();
  sub_10001DAE8();
  v17 = (uint64_t **)swift_task_alloc(v16);
  v0[25] = (uint64_t)v17;
  *v17 = v0;
  v17[1] = (uint64_t *)sub_1000BA2C8;
  return sub_1000C45EC(v13, v14, v15, v0[11], v2, v0[12], v0[13], 0);
}

uint64_t sub_1000BA2C8()
{
  char v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  sub_100037EFC();
  sub_1000C4B3C();
  v4 = *v2;
  sub_10001D788(*(_QWORD *)(v3 + 200), v5);
  sub_10001D9C8();
  sub_100044820();
  sub_10002B88C();
  if (v1)
  {
    swift_task_dealloc(*(_QWORD *)(v3 + 144));
    sub_10001D938();
    return sub_10001D940(*(uint64_t (**)(void))(v4 + 8));
  }
  else
  {
    *(_BYTE *)(v3 + 288) = v0 & 1;
    return sub_10001D6DC();
  }
}

uint64_t sub_1000BA354()
{
  os_log_type_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t (*v6)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (*(_BYTE *)(v3 + 288) == 1)
  {
    sub_1000C47FC();
    v4 = sub_10001E9D0();
    if (sub_100039E20(v4))
    {
      v5 = (_WORD *)sub_10001D8D4(2);
      sub_10004478C(v5);
      sub_1000C3C44((void *)&_mh_execute_header, v1, v0, "enqueueRequestAndWait adding request to existing pending foreground group");
      sub_10001D790(v2);
    }

    sub_1000C4B34();
    sub_10001E330();
    v6 = (uint64_t (*)(void))sub_10001E5D0();
    return sub_10001D940(v6);
  }
  else
  {
    v8 = *(_QWORD *)(v3 + 112);
    v9 = *(_QWORD *)(v3 + 88);
    v10 = (uint64_t *)(v8 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingBackgroundGroups);
    sub_10002B2E0(v8 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingBackgroundGroups, v3 + 40);
    v11 = *v10;
    *(_QWORD *)(v3 + 208) = *v10;
    v12 = v10[1];
    *(_QWORD *)(v3 + 216) = v12;
    v13 = v10[2];
    *(_QWORD *)(v3 + 224) = v13;
    v14 = sub_100006A80((uint64_t)&unk_1000F5150, 32);
    *(_QWORD *)(v3 + 232) = v14;
    *(_QWORD *)(v14 + 16) = v9;
    *(_QWORD *)(v14 + 24) = v8;
    v15 = dword_1000FF36C;
    sub_10001E69C();
    sub_10002B400();
    sub_10001D7EC();
    sub_10007D280();
    sub_10001E900();
    v16 = (_QWORD *)swift_task_alloc(v15);
    *(_QWORD *)(v3 + 240) = v16;
    sub_1000C4AA0(v16, (uint64_t)sub_1000BA4A4);
    return sub_1000C45EC(v11, v12, v13, v17, v18, v19, v20, (uint64_t)sub_1000C31B4);
  }
}

uint64_t sub_1000BA4A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  sub_10001DB50();
  a17 = v20;
  a18 = v21;
  a16 = v19;
  v23 = v22;
  v24 = *v19;
  a16 = (_QWORD *)v24;
  v25 = *v19;
  sub_10001D788(*(_QWORD *)(v24 + 240), &a16);
  sub_100044820();
  sub_10002B88C();
  sub_10001DBEC();
  sub_10001D9C8();
  if (v18)
  {
    swift_task_dealloc(*(_QWORD *)(v24 + 144));
    sub_10001D938();
    return sub_100037D1C(*(uint64_t (**)(void))(v25 + 8));
  }
  else
  {
    *(_BYTE *)(v24 + 289) = v23 & 1;
    sub_10001DB20();
    return swift_task_switch(v27, v28, v29);
  }
}

uint64_t sub_1000BA544()
{
  os_log_type_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t (*v6)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  unint64_t *v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  _WORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (*(_BYTE *)(v3 + 289) == 1)
  {
    sub_1000C47FC();
    v4 = sub_10001E9D0();
    if (sub_100039E20(v4))
    {
      v5 = (_WORD *)sub_10001D8D4(2);
      sub_10004478C(v5);
      sub_1000C3C44((void *)&_mh_execute_header, v1, v0, "enqueueRequestAndWait adding request to existing pending background group");
      sub_10001D790(v2);
    }

    sub_1000C4B34();
    sub_10001E330();
    v6 = (uint64_t (*)(void))sub_10001E5D0();
    return sub_100037D1C(v6);
  }
  v9 = *(_QWORD *)(v3 + 136);
  v8 = *(_QWORD *)(v3 + 144);
  v10 = *(_QWORD *)(v3 + 120);
  v11 = *(_QWORD *)(v3 + 128);
  sub_1000C4A44();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 104))(v9, enum case for RequestPriority.foreground(_:), v10);
  v12 = sub_10002BF40();
  v16 = sub_1000B23C8(v12, v13, v14, v15);
  v17 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v17(v9, v10);
  v18 = sub_10007F9BC();
  ((void (*)(uint64_t))v17)(v18);
  if ((v16 & 1) != 0)
  {
    v19 = *(_QWORD *)(v3 + 112);
LABEL_11:
    v27 = (_QWORD *)(v19 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups);
    sub_10002B2E0(v19 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups, v3 + 64);
    *(_QWORD *)(v3 + 248) = *v27;
    *(_QWORD *)(v3 + 256) = v27[1];
    v28 = v27[2];
    *(_QWORD *)(v3 + 264) = v28;
    v29 = dword_1000FF36C;
    sub_10002B400();
    sub_10001D7EC();
    sub_10007D280();
    v30 = (_QWORD *)swift_task_alloc(v29);
    *(_QWORD *)(v3 + 272) = v30;
    sub_1000C4AA0(v30, (uint64_t)sub_1000BA768);
    v31 = sub_10002BF40();
    return sub_1000B9C28(v31, v32, v28, v33, v34, v35, v36, 0);
  }
  v19 = *(_QWORD *)(v3 + 112);
  if (!*(_QWORD *)(*(_QWORD *)(v19 + *(_QWORD *)(v3 + 168) + 16) + 16))
    goto LABEL_11;
  sub_1000C47FC();
  v20 = sub_10001E9D0();
  if (sub_100039E20(v20))
  {
    v21 = (_WORD *)sub_10001D8D4(2);
    sub_10004478C(v21);
    sub_1000C3C44((void *)&_mh_execute_header, v16, (os_log_type_t)v8, "enqueueRequestAndWait request creating new group");
    sub_10001D790(v9);
  }

  v22 = (_QWORD *)swift_task_alloc(dword_1000FF354);
  *(_QWORD *)(v3 + 280) = v22;
  *v22 = v3;
  v22[1] = sub_1000BA8FC;
  v23 = sub_10002BD0C(*(_QWORD *)(v3 + 88));
  return sub_1000B7AE4(v23, v24, v25, v26);
}

uint64_t sub_1000BA768()
{
  char v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  sub_100037EFC();
  sub_1000C4B3C();
  v4 = *v2;
  sub_10001D788(*(_QWORD *)(v3 + 272), v5);
  sub_10001D9C8();
  sub_100044820();
  sub_10002B88C();
  if (v1)
  {
    swift_task_dealloc(*(_QWORD *)(v3 + 144));
    sub_10001D938();
    return sub_10001D940(*(uint64_t (**)(void))(v4 + 8));
  }
  else
  {
    *(_BYTE *)(v3 + 290) = v0 & 1;
    return sub_10001D6DC();
  }
}

uint64_t sub_1000BA7F4()
{
  NSObject *v0;
  uint64_t v1;
  int v2;
  os_log_type_t v3;
  _BOOL4 v4;
  _WORD *v5;
  uint64_t (*v6)(void);
  _WORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(unsigned __int8 *)(v1 + 290);
  sub_1000C47FC();
  v3 = sub_10001E9D0();
  v4 = os_log_type_enabled(v0, v3);
  if (v2 == 1)
  {
    if (v4)
    {
      v5 = (_WORD *)sub_10001D8D4(2);
      *v5 = 0;
      sub_1000C3C44((void *)&_mh_execute_header, v0, v3, "enqueueRequestAndWait adding request to existing active group");
      sub_10001D790((uint64_t)v5);
    }

    sub_1000C4B34();
    sub_10001E330();
    v6 = (uint64_t (*)(void))sub_10001E5D0();
    return sub_10002B7C0(v6);
  }
  else
  {
    if (v4)
    {
      v8 = (_WORD *)sub_10001D8D4(2);
      *v8 = 0;
      sub_1000C3C44((void *)&_mh_execute_header, v0, v3, "enqueueRequestAndWait request creating new group");
      sub_10001D790((uint64_t)v8);
    }

    v9 = (_QWORD *)swift_task_alloc(dword_1000FF354);
    *(_QWORD *)(v1 + 280) = v9;
    *v9 = v1;
    v9[1] = sub_1000BA8FC;
    v10 = sub_10002BD0C(*(_QWORD *)(v1 + 88));
    return sub_1000B7AE4(v10, v11, v12, v13);
  }
}

uint64_t sub_1000BA8FC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;

  sub_10001E0D8();
  v2 = *v1;
  sub_10001D788(*(_QWORD *)(v0 + 280), v3);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  sub_10001D938();
  return sub_10001D940(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_1000BA93C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t result;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[24];

  v33 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for RequestPriority(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v30 - v13;
  sub_1000C5C2C();
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for RequestPriority.foreground(_:), v8);
  v15 = sub_1000B23C8((uint64_t)v14, (uint64_t)v12, (uint64_t (*)(uint64_t))&type metadata accessor for RequestPriority, &qword_1000FF668);
  v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v12, v8);
  result = ((uint64_t (*)(char *, uint64_t))v16)(v14, v8);
  if ((v15 & 1) != 0)
  {
    v31 = a3;
    v32 = a1;
    v18 = a1 + OBJC_IVAR____TtC13modelmanagerd14ExecutionGroup_id;
    v19 = (uint64_t *)(a3 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingBackgroundGroups);
    v20 = swift_beginAccess(a3 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingBackgroundGroups, v34, 33, 0);
    v21 = *v19;
    v22 = v19[1];
    __chkstk_darwin(v20);
    *(&v30 - 4) = v21;
    *(&v30 - 3) = v22;
    v30 = v18;
    *(&v30 - 2) = v18;
    swift_retain();
    swift_retain();
    v23 = sub_1000C118C((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, _QWORD))sub_1000C33D0, (uint64_t)(&v30 - 6), v22);
    LOBYTE(v18) = v24;
    v26 = v25;
    swift_release(v22);
    swift_release(v21);
    v27 = v33;
    if ((v18 & 1) == 0)
    {
      sub_1000C2080((int64_t)v23, v26, (uint64_t)v7);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v27);
      v28 = sub_1000C223C((unint64_t)v23);
      swift_release(v28);
    }
    swift_endAccess(v34);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v30, v27);
    swift_beginAccess(v31 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups, v34, 33, 0);
    v29 = swift_retain();
    sub_1000B43EC(v29, v7);
    return swift_endAccess(v34);
  }
  return result;
}

uint64_t sub_1000BABBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  uint64_t v26;
  os_log_type_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  Swift::String v48;
  Swift::String v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  os_log_type_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70[3];
  uint64_t v71;

  v5 = type metadata accessor for RequestManagerPolicy(0);
  sub_10001DD00();
  __chkstk_darwin(v6);
  sub_10001E654();
  v7 = type metadata accessor for RequestPriority(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_10008F254();
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_isCancelled) == 1)
  {
    if (qword_1000FB218 != -1)
      swift_once(&qword_1000FB218, sub_1000B3008);
    v9 = sub_10001DD64();
    sub_100002FF8(v9, (uint64_t)qword_1000FF168);
    v10 = sub_10001D834(a1);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)sub_10001D8D4(12);
      v14 = sub_10001D8D4(32);
      *(_DWORD *)v13 = 136315138;
      v70[0] = v14;
      sub_100002F78(&qword_1000FB2A0);
      sub_100006744((unint64_t *)&qword_1000FBEA0, &qword_1000FB2A0);
      v16 = sub_10002B548(v15);
      v18 = v17;
      sub_1000102C0(v16, v17, v70);
      v20 = sub_1000C4AD4(v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v20, v21, v13 + 4);
      sub_1000C41F4();
      swift_bridgeObjectRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Request %s cancelled before executing", v13, 0xCu);
      swift_arrayDestroy(v14, 1);
      sub_10001D790(v14);
      sub_10001D790((uint64_t)v13);

    }
    else
    {

      sub_1000C41F4();
    }
    v54 = (unsigned int *)&enum case for ModelManagerError.operationCancelled(_:);
  }
  else
  {
    v67 = v2;
    v22 = v1;
    v23 = v1 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_currentPolicy;
    sub_10002B2E0(v1 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_currentPolicy, (uint64_t)v70);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v3, v23 + *(int *)(v5 + 20), v7);
    v24 = sub_1000C6BC4();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v3, v7);
    if ((v24 & 1) == 0)
      return result;
    if (qword_1000FB218 != -1)
      swift_once(&qword_1000FB218, sub_1000B3008);
    v26 = sub_10001DD64();
    v27 = sub_100002FF8(v26, (uint64_t)qword_1000FF168);
    sub_10001D834(a1);
    v28 = sub_10001D834(v22);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.default.getter();
    if (sub_100037E74(v30))
    {
      v31 = sub_10001D8D4(22);
      v66 = sub_10001D8D4(64);
      v71 = v66;
      *(_DWORD *)v31 = 136315394;
      v65 = v27;
      sub_100002F78(&qword_1000FB2A0);
      sub_100006744((unint64_t *)&qword_1000FBEA0, &qword_1000FB2A0);
      v33 = sub_10002B548(v32);
      v35 = v34;
      sub_1000102C0(v33, v34, &v71);
      v37 = sub_1000C4AD4(v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v37, v38, v31 + 4);
      sub_1000C41F4();
      swift_bridgeObjectRelease(v35);
      *(_WORD *)(v31 + 12) = 2080;
      sub_1000C343C(v23, v67, type metadata accessor for RequestManagerPolicy);
      sub_10001E940();
      v39 = sub_100002F78(&qword_1000FEFE8);
      sub_100006744(&qword_1000FF670, &qword_1000FEFE8);
      BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v39, v40);
      v42 = v41;
      sub_10001E4C0();
      v69 = v42;
      sub_10007F0CC();
      v43._countAndFlagsBits = 10272;
      v43._object = (void *)0xE200000000000000;
      String.append(_:)(v43);
      v44 = swift_bridgeObjectRelease(v42);
      v45 = RequestPriority.rawValue.getter(v44);
      v47 = v46;
      sub_10001E940();
      v48._countAndFlagsBits = v45;
      v48._object = v47;
      String.append(_:)(v48);
      sub_10001E4C0();
      swift_bridgeObjectRelease(v47);
      sub_10001E940();
      v49._countAndFlagsBits = 41;
      v49._object = (void *)0xE100000000000000;
      String.append(_:)(v49);
      sub_10001E4C0();
      sub_1000C3460(v67, type metadata accessor for RequestManagerPolicy);
      v50 = sub_1000C4D0C();
      sub_1000102C0(v50, v51, v52);
      v68 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v31 + 14);
      swift_release_n(v22, 2);
      sub_10001E4C0();
      _os_log_impl((void *)&_mh_execute_header, v29, v65, "Request %s denied due to policy %s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy(v66, 2);
      sub_10001D790(v66);
      sub_10001D790(v31);

    }
    else
    {

      swift_release_n(v22, 2);
      sub_1000C41F4();
    }
    v54 = (unsigned int *)&enum case for ModelManagerError.deniedDueToSystemState(_:);
  }
  type metadata accessor for ModelManagerError(0);
  sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
  sub_10002BA54(v55);
  v57 = sub_10007D1C8(v56, *v54);
  return swift_willThrow(v57, v58, v59, v60, v61, v62, v63, v64);
}

uint64_t sub_1000BB134(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_10001E368();
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = sub_10001D800(v4);
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_1000BB178()
{
  os_log_type_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v15)(void);

  if (qword_1000FB218 != -1)
    swift_once(&qword_1000FB218, sub_1000B3008);
  v3 = sub_10001DD64();
  v4 = sub_100037AC4(v3, (uint64_t)qword_1000FF168);
  v5 = static os_log_type_t.info.getter();
  if (sub_1000C4878(v5))
  {
    v6 = (_WORD *)sub_10001D8D4(2);
    sub_10004478C(v6);
    sub_1000C3C44((void *)&_mh_execute_header, v4, v0, "RequestManager holdAssets called");
    sub_10001D790(v1);
  }
  v7 = *(_QWORD *)(v2 + 16);

  v8 = *(_QWORD *)(v7 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_inferenceProviderConnection + 32);
  sub_10001C830((_QWORD *)(v7 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_inferenceProviderConnection), *(_QWORD *)(v7 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_inferenceProviderConnection + 24));
  sub_1000C4A44();
  v9 = (_QWORD *)sub_10001DA40(*(_QWORD *)(v8 + 40));
  *(_QWORD *)(v2 + 56) = v9;
  *v9 = v2;
  v9[1] = sub_1000BB284;
  v10 = sub_1000C47C0();
  return sub_1000C440C(v10, v11, v12, v13, v15);
}

uint64_t sub_1000BB284()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  sub_10001DD0C();
  sub_10001E538();
  v3 = v2[5];
  sub_10001EA4C(v4);
  v2[8] = v0;
  swift_task_dealloc(v5);
  sub_10007D04C(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  if (v0)
    return sub_10007D24C((uint64_t)sub_1000BB3AC, v2[3], 0);
  v7 = (_QWORD *)swift_task_alloc(dword_1000FF374);
  v2[9] = (uint64_t)v7;
  *v7 = v1;
  v7[1] = sub_1000BB318;
  v8 = sub_10002BD0C(v2[2]);
  return sub_1000C4400(v8, v9, 0);
}

uint64_t sub_1000BB318()
{
  sub_10001D9A0();
  return sub_10001D6DC();
}

uint64_t sub_1000BB35C()
{
  uint64_t (*v0)(void);

  sub_1000BC938();
  sub_10001E330();
  v0 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_100006A38(v0);
}

uint64_t sub_1000BB3AC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000BB3D8()
{
  uint64_t v0;

  sub_1000BC938();
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000BB42C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for ContinuousClock.Instant(0);
  v0[7] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[8] = v2;
  v3 = (*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v0[9] = swift_task_alloc(v3);
  v0[10] = swift_task_alloc(v3);
  v4 = type metadata accessor for ContinuousClock(0);
  v0[11] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v0[12] = v5;
  v0[13] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000BB4C0, 0, 0);
}

uint64_t sub_1000BB4C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  _QWORD *v6;

  sub_10001E6F0();
  sub_1000C430C();
  sub_1000C43E0((__n128)xmmword_1000CC2E0);
  sub_100006710(&qword_1000FD880, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock);
  sub_1000C4604(v3);
  sub_100006710(&qword_1000FF710, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
  sub_1000C4464(v4);
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
  *(_QWORD *)(v0 + 112) = v5;
  sub_10002BADC(v1, v5);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  sub_1000C4248(v6, (uint64_t)sub_1000BB55C);
  return sub_1000C3D24();
}

uint64_t sub_1000BB55C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  sub_10002B940();
  sub_10001EA4C(v2);
  *(_QWORD *)(v1 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_1000C4D94(*(uint64_t (**)(_QWORD, _QWORD))(v1 + 112));
  }
  else
  {
    v3 = *(_QWORD *)(v1 + 104);
    v4 = *(_QWORD *)(v1 + 96);
    sub_1000C4D94(*(uint64_t (**)(_QWORD, _QWORD))(v1 + 112));
    sub_10007E7EC(v3, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  }
  sub_100037A7C();
  return sub_10001D6DC();
}

uint64_t sub_1000BB5D4()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88));
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  return sub_10002B7C0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000BB620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  v5 = sub_100002F78(&qword_1000FB230);
  v4[7] = sub_10001D800(*(_QWORD *)(v5 - 8));
  v6 = sub_10001DBC0();
  v4[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[9] = v7;
  v4[10] = sub_10001D800(v7);
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_1000BB680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  _QWORD *v21;
  uint64_t (*v22)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;

  sub_1000C4890();
  sub_1000C4CB8(v21[3]);
  if (v20)
  {
    swift_task_dealloc();
    sub_10001E330();
    sub_10002B848();
    return v22(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
  }
  else
  {
    if (qword_1000FB218 != -1)
      swift_once(&qword_1000FB218, sub_1000B3008);
    v31 = sub_10001DD64();
    v32 = sub_100037AC4(v31, (uint64_t)qword_1000FF168);
    v33 = static os_log_type_t.info.getter();
    if (sub_10002B3F8(v32))
    {
      v34 = v21[10];
      v53 = v21[9];
      v35 = v21[8];
      v36 = (uint8_t *)sub_10001D8D4(12);
      v55 = sub_10001D8D4(32);
      *(_DWORD *)v36 = 136315138;
      static Task<>.currentPriority.getter();
      sub_100006710(&qword_1000FF6C8, (uint64_t (*)(uint64_t))&type metadata accessor for TaskPriority);
      sub_10002B548(v37);
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v34, v35);
      v38 = sub_1000C48DC();
      sub_1000102C0(v38, v39, v40);
      v21[2] = v41;
      sub_10001EB6C((uint64_t)(v21 + 2), (uint64_t)(v21 + 3), (uint64_t)(v36 + 4));
      sub_100006C48();
      sub_10001E18C((void *)&_mh_execute_header, v32, v33, "executeRequest executing (Priority: %s)", v36);
      sub_10001DBB8(v55);
      sub_10001D790(v55);
      sub_10001D790((uint64_t)v36);
    }

    v42 = v21[7];
    v44 = v21[5];
    v43 = v21[6];
    v54 = *(_OWORD *)(v21 + 3);
    sub_10002B26C(v42, v45, v46, v21[8]);
    sub_100006710(&qword_1000FF660, type metadata accessor for RequestManager);
    v48 = v47;
    v49 = sub_100006A80((uint64_t)&unk_1000F50B0, 64);
    *(_QWORD *)(v49 + 16) = v43;
    *(_QWORD *)(v49 + 24) = v48;
    *(_QWORD *)(v49 + 32) = v43;
    *(_OWORD *)(v49 + 40) = v54;
    *(_QWORD *)(v49 + 56) = v44;
    sub_10001D834(v43);
    sub_10002B400();
    sub_10001D7EC();
    sub_10000DB68(v42, (uint64_t)&unk_1000FF6C0, v49);
    v50 = OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_runningTask;
    v21[11] = v51;
    v21[12] = v50;
    *(_QWORD *)(v54 + v50) = v51;
    swift_retain();
    sub_10001D9C8();
    v52 = swift_task_alloc(async function pointer to Task.value.getter[1]);
    sub_1000C4C28(v52);
    sub_100002F78(&qword_1000FB5F8);
    *(_QWORD *)v54 = v21;
    *(_QWORD *)(v54 + 8) = sub_1000BB928;
    return sub_1000C3F70();
  }
}

uint64_t sub_1000BB928()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 112) = v1;
  swift_task_dealloc();
  return sub_10001D6DC();
}

uint64_t sub_1000BB97C()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  *(_QWORD *)(*(_QWORD *)(v0 + 24) + *(_QWORD *)(v0 + 96)) = 0;
  swift_release();
  sub_10001D9C8();
  sub_10001E330();
  sub_10001D938();
  v1 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_10002B7C0(v1);
}

uint64_t sub_1000BB9C8()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 24) + *(_QWORD *)(v0 + 96)) = 0;
  swift_release();
  sub_10001D9C0();
  swift_task_dealloc();
  sub_10001D938();
  return sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000BBA18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  return swift_task_switch(sub_1000BBA38, a4, 0);
}

uint64_t sub_1000BBA38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 v27;

  sub_1000C4BF4();
  v19 = *(_QWORD *)(v18 + 48);
  v20 = *(_QWORD *)(v18 + 24);
  v21 = sub_10007F040();
  *(_QWORD *)(v18 + 56) = v21;
  v27 = *(_OWORD *)(v18 + 32);
  *(_QWORD *)(v21 + 16) = v20;
  *(_OWORD *)(v21 + 24) = v27;
  *(_QWORD *)(v21 + 40) = v19;
  v22 = swift_task_alloc(32);
  *(_QWORD *)(v18 + 64) = v22;
  *(_QWORD *)(v22 + 16) = v27;
  *(_QWORD *)(v22 + 24) = v20;
  sub_100006710(&qword_1000FF660, type metadata accessor for RequestManager);
  v24 = v23;
  v25 = (_QWORD *)swift_task_alloc(async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:)[1]);
  *(_QWORD *)(v18 + 72) = v25;
  *v25 = v18;
  v25[1] = sub_1000BBB24;
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(*(_QWORD *)(v18 + 16), &unk_1000FF6D8, v21, sub_1000C3040, v22, v20, v24, (char *)&type metadata for () + 8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t sub_1000BBB24()
{
  uint64_t v0;
  uint64_t (*v2)(void);

  sub_10001D9A0();
  if (v0)
    return sub_10001D6DC();
  swift_task_dealloc();
  sub_10001E330();
  v2 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_10001D940(v2);
}

uint64_t sub_1000BBB78()
{
  uint64_t v0;

  swift_task_dealloc();
  sub_10001E330();
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000BBBA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[10] = a4;
  v5[11] = a5;
  v5[8] = a2;
  v5[9] = a3;
  v7 = type metadata accessor for InferenceProviderRequestConfiguration(0);
  v5[12] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[13] = v8;
  v5[14] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for InferenceProviderRequestResult(0);
  v5[15] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[16] = v10;
  v5[17] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000BBC38, a2, 0);
}

uint64_t sub_1000BBC38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v11)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v12;

  sub_1000C4CB8(*(_QWORD *)(v1 + 72));
  if (v0)
  {
    swift_task_dealloc();
    sub_10001E330();
    return sub_10007D480(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    v3 = *(_QWORD *)(v1 + 112);
    v4 = *(_QWORD *)(v1 + 72);
    sub_10002B308(*(_QWORD *)(v1 + 64) + OBJC_IVAR____TtC13modelmanagerd14RequestManager_extantRequests, v1 + 16, 33);
    sub_10001E900();
    sub_100011CD8(&v12, v4);
    swift_endAccess();
    swift_release();
    v5 = OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_inferenceProviderConnection;
    *(_QWORD *)(v1 + 144) = OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_inferenceProviderConnection;
    v6 = *(_QWORD *)(v4 + v5 + 24);
    v7 = *(_QWORD *)(v4 + v5 + 32);
    sub_10001C830((_QWORD *)(v4 + v5), v6);
    v8 = *(unsigned __int8 *)(v4 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_isStream);
    *(_BYTE *)(v1 + 184) = v8;
    v9 = v4 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_clientData;
    sub_1000C5B78(v3);
    v10 = (_QWORD *)sub_10001DA40(*(_QWORD *)(v7 + 32));
    *(_QWORD *)(v1 + 152) = v10;
    *v10 = v1;
    v10[1] = sub_1000BBD94;
    return v11(*(_QWORD *)(v1 + 136), v8, v9, *(_QWORD *)(v1 + 112), v6, v7);
  }
}

uint64_t sub_1000BBD94()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);

  sub_10001E0D8();
  sub_10001EA4C(v3);
  v0[20] = v1;
  swift_task_dealloc();
  v4 = v0[14];
  v5 = v0[12];
  v6 = *(void (**)(uint64_t, uint64_t))(v0[13] + 8);
  if (v1)
  {
    v6(v4, v5);
    sub_10001D7B8();
    return sub_10002B3A8(v7, v8, v9);
  }
  else
  {
    v11 = v0[10];
    v6(v4, v5);
    v12 = (_QWORD *)sub_1000C4194(*(unsigned int *)(v11 + 4));
    v0[21] = v12;
    *v12 = v2;
    v12[1] = sub_1000BBE38;
    v13 = sub_10002BD0C(v0[17]);
    return v14(v13);
  }
}

uint64_t sub_1000BBE38()
{
  uint64_t v0;

  v0 = sub_1000C4AFC();
  sub_10001D680(v0);
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_1000BBE6C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t (*v8)(void);

  sub_1000C4BF4();
  if (*(_BYTE *)(v1 + 184) == 1)
  {
    sub_1000C4324(*(_QWORD *)(v1 + 144));
    v2 = (_QWORD *)sub_10001DA40(*(_QWORD *)(v0 + 72));
    *(_QWORD *)(v1 + 176) = v2;
    v3 = sub_1000C3FE4(v2, (uint64_t)sub_1000BBEF0);
    return sub_1000C3E64(v3, v4, v5, v6);
  }
  else
  {
    sub_1000C44B0();
    sub_1000C4D58();
    sub_10001E330();
    sub_10001D938();
    v8 = (uint64_t (*)(void))sub_10001E5D0();
    return sub_1000AB0E0(v8);
  }
}

uint64_t sub_1000BBEF0()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 176));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_1000BBF28()
{
  uint64_t (*v0)(void);

  sub_1000C44B0();
  sub_1000C4D58();
  sub_10001E330();
  sub_10001D938();
  v0 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_10001D940(v0);
}

uint64_t sub_1000BBF64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_10001DD0C();
  v1 = *(_QWORD *)(v0 + 72);
  v2 = (uint64_t *)(*(_QWORD *)(v0 + 64)
                 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_cancelledForPolicyExtantRequests);
  sub_10002B2E0((uint64_t)v2, v0 + 40);
  v3 = *v2;
  sub_10001D964();
  LOBYTE(v1) = sub_10002C77C(v1, v3);
  v4 = sub_10001D8B4();
  v12 = *(_QWORD *)(v0 + 160);
  if ((v1 & 1) != 0)
  {
    v13 = sub_10002B8A0();
    sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_10002B560(v13, v14);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v15, enum case for ModelManagerError.deniedDueToSystemState(_:), v13);
    sub_10007D88C();
    swift_errorRelease(v12);
  }
  else
  {
    swift_willThrow(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  sub_1000C4C58();
  swift_task_dealloc();
  sub_10001D938();
  return sub_1000AB0E0(*(uint64_t (**)(void))(v0 + 8));
}

double sub_1000BC05C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  char v6;
  double result;
  uint64_t v8;
  _BYTE v9[24];

  swift_beginAccess(a1 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_extantRequests, v9, 33, 0);
  sub_1000C002C(a2);
  swift_endAccess();
  swift_release();
  v4 = (uint64_t *)(a1 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_cancelledForPolicyExtantRequests);
  swift_beginAccess(a1 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_cancelledForPolicyExtantRequests, v9, 0, 0);
  v5 = *v4;
  swift_bridgeObjectRetain();
  v6 = sub_10002C77C(a2, v5);
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    swift_beginAccess(v4, &v8, 33, 0);
    sub_1000C002C(a2);
    swift_endAccess();
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

double sub_1000BC140(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  double result;
  uint64_t v10;

  v4 = sub_100002F78(&qword_1000FB230);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _OSActivity(0);
  _OSActivity.__allocating_init(_:)("Request cancelled", 17, 2);
  v7 = type metadata accessor for TaskPriority(0);
  sub_100005630((uint64_t)v6, 1, 1, v7);
  v8 = (_QWORD *)swift_allocObject(&unk_1000F50D8, 48, 7);
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = a1;
  v8[5] = a2;
  swift_retain();
  swift_retain();
  sub_100002CAC((uint64_t)v6, (uint64_t)&unk_1000FF6E8, (uint64_t)v8);
  swift_release();
  _OSActivity.close()();
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_1000BC240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 24) = a4;
  *(_QWORD *)(v5 + 32) = a5;
  return swift_task_switch(sub_1000BC258, 0, 0);
}

uint64_t sub_1000BC258()
{
  _QWORD *v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;

  sub_10002B628();
  if (qword_1000FB218 != -1)
    swift_once(&qword_1000FB218, sub_1000B3008);
  v2 = v0[3];
  v3 = sub_10001DD64();
  v4 = sub_100002FF8(v3, (uint64_t)qword_1000FF168);
  v5 = sub_10001D834(v2);
  Logger.logObject.getter(v5);
  v6 = sub_100037C08();
  v7 = sub_10002B5FC(v6);
  v8 = v0[3];
  if (v7)
  {
    v9 = (uint8_t *)sub_10001D8D4(12);
    v22 = sub_10001D8D4(32);
    *(_DWORD *)v9 = 136315138;
    v10 = sub_100002F78(&qword_1000FB2A0);
    sub_100006744((unint64_t *)&qword_1000FBEA0, &qword_1000FB2A0);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v10, v11);
    sub_1000C4AF0(v12, v13, v14, v15, v16, v17);
    v0[2] = v18;
    sub_10001EB6C((uint64_t)(v0 + 2), (uint64_t)(v0 + 3), (uint64_t)(v9 + 4));
    sub_10001E034();
    sub_10001EBB0(v8);
    sub_10001E18C((void *)&_mh_execute_header, v4, v1, "InferenceProvider cancel for Request %s", v9);
    sub_10001DBB8(v22);
    sub_10001D790(v22);
    sub_10001D790((uint64_t)v9);
  }
  else
  {
    sub_10001EBB0(v0[3]);
  }

  v19 = *(_QWORD *)(v0[3] + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_modelAssets);
  v20 = (_QWORD *)swift_task_alloc(dword_1000FF35C);
  v0[5] = v20;
  *v20 = v0;
  v20[1] = sub_10001F11C;
  return sub_1000B8934(v19);
}

uint64_t sub_1000BC430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  v5 = sub_10001E368();
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v4[9] = sub_10001D800(v6);
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_1000BC478()
{
  os_log_type_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);

  if (qword_1000FB218 != -1)
    swift_once(&qword_1000FB218, sub_1000B3008);
  v3 = sub_10001DD64();
  v4 = sub_100002FF8(v3, (uint64_t)qword_1000FF168);
  *(_QWORD *)(v2 + 80) = v4;
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.info.getter();
  if (sub_1000C4878(v6))
  {
    v7 = (_WORD *)sub_10001D8D4(2);
    sub_10004478C(v7);
    sub_1000C3C44((void *)&_mh_execute_header, v5, v0, "executeRequest requested");
    sub_10001D790(v1);
  }
  v8 = *(_QWORD *)(v2 + 24);

  sub_1000C4CB8(v8);
  if (v1)
  {
    sub_10001D938();
    return sub_100037D1C(*(uint64_t (**)(void))(v2 + 8));
  }
  else
  {
    v10 = *(_QWORD *)(v2 + 24);
    v11 = *(_QWORD *)(v10 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_inferenceProviderConnection + 32);
    sub_10001C830((_QWORD *)(v10 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_inferenceProviderConnection), *(_QWORD *)(v10 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_inferenceProviderConnection + 24));
    sub_1000C4A44();
    v12 = (_QWORD *)sub_10001D6BC(*(_QWORD *)(v11 + 40));
    *(_QWORD *)(v2 + 88) = v12;
    *v12 = v2;
    v12[1] = sub_1000BC5C8;
    v13 = sub_1000C47C0();
    return sub_1000C440C(v13, v14, v15, v16, v17);
  }
}

uint64_t sub_1000BC5C8()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  v0[12] = v1;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v0[8] + 8))(v0[9], v0[7]);
  sub_10001E10C();
  return sub_10001D6DC();
}

uint64_t sub_1000BC628()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000C4BF4();
  v1 = v0[5];
  v2 = v0[6];
  v3 = sub_100006A80((uint64_t)&unk_1000F5038, 48);
  v0[13] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_OWORD *)(v3 + 24) = *(_OWORD *)(v0 + 3);
  *(_QWORD *)(v3 + 40) = v1;
  v4 = dword_1000FF374;
  sub_10001E194();
  swift_retain();
  sub_10002B400();
  v5 = (uint64_t **)swift_task_alloc(v4);
  v0[14] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = (uint64_t *)sub_1000BC6CC;
  v6 = sub_10002BD0C(v0[3]);
  return sub_1000C4400(v6, v7, v3);
}

uint64_t sub_1000BC6CC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 120) = v1;
  swift_task_dealloc(v3);
  if (!v1)
    swift_release(*(_QWORD *)(v0 + 104));
  return sub_10001D6DC();
}

uint64_t sub_1000BC730()
{
  uint64_t (*v0)(void);

  sub_1000BC938();
  sub_10001E330();
  v0 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_100006A38(v0);
}

uint64_t sub_1000BC780()
{
  os_log_type_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(v1 + 96);
  swift_errorRetain(v2);
  v3 = swift_errorRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (sub_10001E6C4(v5))
  {
    v6 = *(_QWORD *)(v1 + 96);
    v7 = (uint8_t *)sub_10001D8D4(12);
    v8 = (_QWORD *)sub_10001D8D4(8);
    *(_DWORD *)v7 = 138412290;
    swift_errorRetain(v6);
    v9 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(_QWORD *)(v1 + 16) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v7 + 4);
    *v8 = v9;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    sub_10001E18C((void *)&_mh_execute_header, v4, v0, "Calling back request unable to add connection with %@", v7);
    sub_100002F78(&qword_1000FB8E0);
    sub_10001DBB8((uint64_t)v8);
    sub_10001D790((uint64_t)v8);
    sub_10001D790((uint64_t)v7);
  }
  else
  {
    v10 = *(_QWORD *)(v1 + 96);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }

  swift_willThrow(v11, v12, v13, v14, v15, v16, v17, v18);
  swift_task_dealloc(*(_QWORD *)(v1 + 72));
  return sub_10002B3B4(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1000BC8D8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 104));
  sub_1000BC938();
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1000BC938()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  void (*v25)(uint64_t);
  uint64_t v26;
  uint64_t ObjectType;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD v31[4];

  sub_10001D810();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  sub_100002F78(&qword_1000FB230);
  sub_10001DD00();
  __chkstk_darwin(v11);
  sub_1000C49BC();
  v12 = sub_10001DBC0();
  sub_10007F8CC();
  sub_100005630(v13, v14, v15, v12);
  v16 = (_QWORD *)sub_100006A80(v8, 40);
  v16[2] = 0;
  v17 = v16 + 2;
  v16[3] = 0;
  v16[4] = v10;
  v18 = sub_100005700(v0, 1, v12);
  v19 = sub_10001DAE8();
  if (v18 == 1)
  {
    sub_1000C37F8(v0, &qword_1000FB230);
    v20 = 0;
    v21 = 0;
    v22 = 7168;
  }
  else
  {
    v23 = TaskPriority.rawValue.getter(v19);
    v24 = sub_1000C4D0C();
    v25(v24);
    v22 = v23 | 0x1C00;
    v26 = *v17;
    if (*v17)
    {
      v21 = v16[3];
      ObjectType = swift_getObjectType(*v17);
      swift_unknownObjectRetain(v26);
      v20 = v26;
      dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v21);
      sub_1000C48C4();
    }
    else
    {
      v20 = 0;
      v21 = 0;
    }
  }
  v28 = sub_100006A80(v6, 32);
  *(_QWORD *)(v28 + 16) = v4;
  *(_QWORD *)(v28 + 24) = v16;
  if (v21 | v20)
  {
    v31[0] = 0;
    v31[1] = 0;
    v29 = v31;
    v31[2] = v20;
    v31[3] = v21;
  }
  else
  {
    v29 = 0;
  }
  v30 = swift_task_create(v22, v29, (char *)&type metadata for () + 8, v2, v28);
  swift_release(v30);
  sub_100006A68();
}

uint64_t sub_1000BCAB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc(dword_1000FF384);
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_10001CA84;
  return sub_1000BB620(a2, a3, a4);
}

uint64_t sub_1000BCB20(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2[29] = a1;
  v2[30] = v1;
  v3 = type metadata accessor for RequestCancellationReason(0);
  v2[31] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[32] = v4;
  v2[33] = sub_10001D800(v4);
  v5 = sub_100002F78(&qword_1000FF680);
  v2[34] = sub_10002B1BC(*(_QWORD *)(v5 - 8));
  v2[35] = sub_10001E784();
  v6 = sub_100002F78(&qword_1000FF688);
  v2[36] = v6;
  v2[37] = sub_10002B1BC(*(_QWORD *)(v6 - 8));
  v2[38] = sub_10001E784();
  v2[39] = sub_10001E784();
  v7 = sub_10001E368();
  v2[40] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[41] = v8;
  v2[42] = sub_10001D800(v8);
  sub_10001D7B8();
  return sub_10001D6DC();
}

uint64_t sub_1000BCBD0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t);
  char v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t i;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t, uint64_t);
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  int64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t *v96;
  unint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  int64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  _QWORD *v114;
  uint64_t v115;

  v1 = v0[29];
  v2 = v0[30];
  v3 = v2 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_currentPolicy;
  sub_10002B308(v2 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_currentPolicy, (uint64_t)(v0 + 12), 33);
  sub_1000C2E44(v1, v3);
  swift_endAccess(v0 + 12);
  v0[24] = &_swiftEmptySetSingleton;
  v113 = v0 + 24;
  v111 = (uint64_t)(v0 + 21);
  v4 = (uint64_t *)(v2 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_extantRequests);
  sub_10002B2E0(v2 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_extantRequests, (uint64_t)(v0 + 15));
  v5 = *v4;
  if ((*v4 & 0xC000000000000001) != 0)
  {
    if (v5 < 0)
      v6 = *v4;
    else
      v6 = v5 & 0xFFFFFFFFFFFFFF8;
    sub_1000C4618();
    __CocoaSet.makeIterator()(v6);
    sub_10002B50C();
    sub_100006710(&qword_1000FB8C0, type metadata accessor for DaemonRequest);
    v7 = sub_10002BF40();
    v10 = Set.Iterator.init(_cocoa:)(v7, v8, v9);
    v5 = v0[7];
    v109 = v0[8];
    v4 = (uint64_t *)v0[9];
    v11 = v0[10];
    v12 = v0[11];
  }
  else
  {
    v109 = v5 + 56;
    sub_1000C4860();
    v12 = v13 & v14;
    v10 = sub_1000C4618();
    v11 = 0;
  }
  v96 = v0 + 26;
  v97 = v0 + 25;
  v104 = v0 + 27;
  v15 = (uint64_t)(v0 + 28);
  v114 = v0;
  v16 = v0[41];
  v107 = (unint64_t)(v4 + 8) >> 6;
  if (v5 < 0)
    goto LABEL_10;
  while (1)
  {
    if (v12)
    {
      v17 = (v12 - 1) & v12;
      v18 = __clz(__rbit64(v12)) | (v11 << 6);
      v19 = v11;
      goto LABEL_27;
    }
    v23 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_94;
    if (v23 >= v107)
      goto LABEL_33;
    v24 = *(_QWORD *)(v109 + 8 * v23);
    v19 = v11 + 1;
    if (!v24)
    {
      v19 = v11 + 2;
      if (v11 + 2 >= v107)
        goto LABEL_33;
      v24 = *(_QWORD *)(v109 + 8 * v19);
      if (!v24)
      {
        v19 = v11 + 3;
        if (v11 + 3 >= v107)
          goto LABEL_33;
        v24 = *(_QWORD *)(v109 + 8 * v19);
        if (!v24)
        {
          v19 = v11 + 4;
          if (v11 + 4 >= v107)
            goto LABEL_33;
          v24 = *(_QWORD *)(v109 + 8 * v19);
          if (!v24)
            break;
        }
      }
    }
LABEL_26:
    v17 = (v24 - 1) & v24;
    v18 = __clz(__rbit64(v24)) + (v19 << 6);
LABEL_27:
    v22 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v18);
    sub_10001E69C();
    if (!v22)
      goto LABEL_34;
    while (1)
    {
      v26 = v0[42];
      type metadata accessor for RequestManagerPolicy(0);
      sub_1000C4A58();
      v27(v26);
      v28 = sub_1000C6BC4();
      sub_1000C4B7C(*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8));
      if ((v28 & 1) != 0)
      {
        sub_10002B308(v0[30] + OBJC_IVAR____TtC13modelmanagerd14RequestManager_cancelledForPolicyExtantRequests, v111, 33);
        sub_10001E69C();
        sub_100011CD8(&v115, v22);
        swift_endAccess(v111);
        swift_release(v115);
        sub_100011CD8(&v115, v22);
        v29 = v115;
      }
      else
      {
        v29 = v22;
      }
      v10 = swift_release(v29);
      v11 = v19;
      v12 = v17;
      if ((v5 & 0x8000000000000000) == 0)
        break;
LABEL_10:
      v20 = __CocoaSet.Iterator.next()(v10);
      if (v20)
      {
        *(_QWORD *)v15 = v20;
        v21 = sub_10002B50C();
        sub_10007E5C4();
        sub_10002B4BC((uint64_t)v104, v15, (uint64_t)&type metadata for Swift.AnyObject + 8, v21);
        v22 = *v104;
        sub_10007E5CC();
        v19 = v11;
        v17 = v12;
        if (v22)
          continue;
      }
      goto LABEL_34;
    }
  }
  v25 = v11 + 5;
  while (v25 < v107)
  {
    v24 = *(_QWORD *)(v109 + 8 * v25++);
    if (v24)
    {
      v19 = v25 - 1;
      goto LABEL_26;
    }
  }
LABEL_33:
  v12 = 0;
LABEL_34:
  v15 = (uint64_t)v0;
  v30 = v0[30];
  sub_10001CD34(v5);
  v31 = (_QWORD *)(v30 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups);
  result = sub_10002B2E0((uint64_t)v31, (uint64_t)(v0 + 18));
  v33 = v31[2];
  v106 = *(_QWORD *)(v33 + 16);
  if (!v106)
  {
LABEL_56:
    v58 = *v113;
    if ((*v113 & 0xC000000000000001) != 0)
    {
      if (v58 < 0)
        v59 = *v113;
      else
        v59 = v58 & 0xFFFFFFFFFFFFFF8;
      v60 = __CocoaSet.makeIterator()(v59);
      v61 = sub_10002B50C();
      sub_100006710(&qword_1000FB8C0, type metadata accessor for DaemonRequest);
      result = Set.Iterator.init(_cocoa:)(v60, v61, v62);
      v58 = *(_QWORD *)(v15 + 16);
      v63 = *(_QWORD *)(v15 + 24);
      v64 = *(_QWORD *)(v15 + 32);
      v65 = *(_QWORD *)(v15 + 40);
      v66 = *(_QWORD *)(v15 + 48);
    }
    else
    {
      v65 = 0;
      v67 = -1;
      v68 = -1 << *(_BYTE *)(v58 + 32);
      v63 = v58 + 56;
      v64 = ~v68;
      v69 = -v68;
      if (v69 < 64)
        v67 = ~(-1 << v69);
      v66 = v67 & *(_QWORD *)(v58 + 56);
    }
    *(_QWORD *)(v15 + 352) = v63;
    *(_QWORD *)(v15 + 360) = v64;
    *(_QWORD *)(v15 + 344) = v58;
    *(_DWORD *)(v15 + 408) = enum case for RequestCancellationReason.policyChange(_:);
    if (v58 < 0)
    {
      v73 = __CocoaSet.Iterator.next()(result);
      if (!v73)
        goto LABEL_90;
      LOBYTE(v11) = (_BYTE)v113 + 16;
      *v96 = v73;
      v74 = sub_10002B50C();
      sub_10007E5C4();
      sub_10002B4BC((uint64_t)v97, (uint64_t)v96, (uint64_t)&type metadata for Swift.AnyObject + 8, v74);
      v12 = *v97;
      sub_10007E5CC();
      v72 = v65;
      v70 = v66;
    }
    else
    {
      if (v66)
      {
        v70 = (v66 - 1) & v66;
        v71 = __clz(__rbit64(v66)) | (v65 << 6);
        v72 = v65;
      }
      else
      {
        v86 = v65 + 1;
        if (__OFADD__(v65, 1))
        {
          __break(1u);
          return result;
        }
        v87 = v64 + 64;
        if (v86 >= (uint64_t)(v87 >> 6))
        {
LABEL_90:
          sub_10001CD34(*(_QWORD *)(v15 + 344));
          v94 = (uint64_t *)swift_task_alloc(dword_1000FF364);
          *(_QWORD *)(v15 + 400) = v94;
          *v94 = v15;
          v94[1] = (uint64_t)sub_1000BD958;
          sub_1000C47E0();
          return sub_1000B96FC();
        }
        v88 = *(_QWORD *)(v63 + 8 * v86);
        v72 = v65 + 1;
        if (!v88)
        {
          v92 = v87 >> 6;
          v72 = v65 + 2;
          if (v65 + 2 >= v92)
            goto LABEL_90;
          v88 = *(_QWORD *)(v63 + 8 * v72);
          if (!v88)
          {
            v72 = v65 + 3;
            if (v65 + 3 >= v92)
              goto LABEL_90;
            v88 = *(_QWORD *)(v63 + 8 * v72);
            if (!v88)
            {
              v72 = v65 + 4;
              if (v65 + 4 >= v92)
                goto LABEL_90;
              v88 = *(_QWORD *)(v63 + 8 * v72);
              if (!v88)
              {
                v93 = v65 + 5;
                while (v93 < v92)
                {
                  v88 = *(_QWORD *)(v63 + 8 * v93++);
                  if (v88)
                  {
                    v72 = v93 - 1;
                    goto LABEL_77;
                  }
                }
                goto LABEL_90;
              }
            }
          }
        }
LABEL_77:
        v70 = (v88 - 1) & v88;
        v71 = __clz(__rbit64(v88)) + (v72 << 6);
      }
      v12 = *(_QWORD *)(*(_QWORD *)(v58 + 48) + 8 * v71);
      sub_10001D7EC();
    }
    *(_QWORD *)(v15 + 376) = v72;
    *(_QWORD *)(v15 + 384) = v70;
    *(_QWORD *)(v15 + 368) = v12;
    if (v12)
    {
      if (qword_1000FB218 != -1)
        goto LABEL_95;
      goto LABEL_72;
    }
    goto LABEL_90;
  }
  v36 = v31;
  v34 = *v31;
  v35 = v36[1];
  v102 = v114[36];
  v103 = v114[39];
  v101 = *(int *)(v102 + 48);
  v37 = sub_1000AB044();
  v38 = *(_QWORD *)(v37 - 8);
  sub_10001EA78();
  v105 = v35 + v39;
  v100 = v33 + 32;
  sub_10002B400();
  v95 = v34;
  sub_10001E194();
  v108 = v35;
  sub_10007E904();
  v40 = 0;
  v98 = v37;
  v99 = v33;
  while (v40 < *(_QWORD *)(v108 + 16))
  {
    v12 = *(_QWORD *)(v38 + 16);
    ((void (*)(_QWORD, unint64_t, uint64_t))v12)(*(_QWORD *)(v15 + 280), v105 + *(_QWORD *)(v38 + 72) * v40, v37);
    if (v40 >= *(_QWORD *)(v33 + 16))
      goto LABEL_92;
    v42 = *(_QWORD *)(v15 + 304);
    v41 = *(_QWORD *)(v15 + 312);
    v110 = v40;
    v112 = *(_QWORD *)(v15 + 296);
    v43 = *(_QWORD *)(v15 + 272);
    v44 = *(_QWORD *)(v100 + 8 * v40);
    sub_1000C4CF8(v43, *(_QWORD *)(v15 + 280));
    sub_1000C4CF8(v41, v43);
    *(_QWORD *)(v103 + v101) = v44;
    v45 = *(int *)(v102 + 48);
    sub_1000C4CF8(v42, v41);
    *(_QWORD *)(v42 + v45) = v44;
    v46 = *(int *)(v102 + 48);
    ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v112, v42, v37);
    *(_QWORD *)(v112 + v46) = v44;
    sub_10001D834(v44);
    v47 = (uint64_t)sub_1000B3290();
    sub_10001D9C0();
    v48 = v38;
    sub_10002B7F8(v112, *(uint64_t (**)(uint64_t, uint64_t))(v38 + 8));
    if ((unint64_t)v47 >> 62)
    {
      if (v47 < 0)
        v57 = v47;
      else
        v57 = v47 & 0xFFFFFFFFFFFFFF8;
      sub_1000C4618();
      v11 = _CocoaArrayWrapper.endIndex.getter(v57);
      swift_bridgeObjectRelease(v47);
    }
    else
    {
      v11 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v15 = (uint64_t)v114;
    if (v11)
    {
      if (v11 < 1)
        goto LABEL_93;
      for (i = 0; i != v11; ++i)
      {
        if ((v47 & 0xC000000000000001) != 0)
        {
          v50 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v47);
        }
        else
        {
          v50 = *(_QWORD *)(v47 + 8 * i + 32);
          sub_10001E194();
        }
        v51 = *(_QWORD *)(v15 + 336);
        type metadata accessor for RequestManagerPolicy(0);
        sub_1000C4A58();
        sub_10001DE08(v51, v52, v53);
        v54 = sub_1000C6BC4();
        sub_10007D04C(*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8));
        if ((v54 & 1) != 0)
        {
          sub_100011CD8(&v115, v50);
          v55 = v115;
        }
        else
        {
          v55 = v50;
        }
        swift_release(v55);
        v15 = (uint64_t)v114;
      }
    }
    v12 = v110 + 1;
    v56 = *(_QWORD *)(v15 + 304);
    swift_bridgeObjectRelease(v47);
    sub_1000C37F8(v56, &qword_1000FF688);
    v37 = v98;
    v33 = v99;
    v38 = v48;
    v40 = v110 + 1;
    if (v110 + 1 == v106)
    {
      swift_release(v95);
      swift_release(v108);
      result = sub_10001D930();
      goto LABEL_56;
    }
  }
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  swift_once(&qword_1000FB218, sub_1000B3008);
LABEL_72:
  v75 = sub_10001DD64();
  sub_100002FF8(v75, (uint64_t)qword_1000FF168);
  v76 = sub_10001D834(v12);
  v77 = Logger.logObject.getter(v76);
  v78 = static os_log_type_t.default.getter();
  if (sub_10002B5FC(v78))
  {
    v79 = sub_10001D8D4(12);
    v80 = sub_10001D8D4(32);
    v115 = v80;
    *(_DWORD *)v79 = 136315138;
    sub_100002F78(&qword_1000FB2A0);
    sub_100006744((unint64_t *)&qword_1000FBEA0, &qword_1000FB2A0);
    v82 = sub_10002B548(v81);
    sub_1000102C0(v82, v83, &v115);
    *(_QWORD *)(v79 + 4) = v84;
    sub_10001E034();
    sub_10001EBB0(v12);
    sub_10001E18C((void *)&_mh_execute_header, v77, (os_log_type_t)v11, "Cancelling request %s due to policy change", (uint8_t *)v79);
    sub_10001DBB8(v80);
    v85 = v80;
    v15 = (uint64_t)v114;
    sub_10001D790(v85);
    sub_10001D790(v79);
  }
  else
  {
    sub_10001EBB0(v12);
  }

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v15 + 256) + 104))(*(_QWORD *)(v15 + 264), *(unsigned int *)(v15 + 408), *(_QWORD *)(v15 + 248));
  v89 = (uint64_t *)swift_task_alloc(dword_1000FFA44);
  *(_QWORD *)(v15 + 392) = v89;
  *v89 = v15;
  v89[1] = (uint64_t)sub_1000BD5A0;
  sub_10002BD0C(*(_QWORD *)(v15 + 240));
  sub_1000C47E0();
  return sub_1000C6594(v90, v91);
}

uint64_t sub_1000BD5A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  sub_10001DB38();
  v2 = v0[32];
  v1 = v0[33];
  sub_10001D680(v0[49]);
  sub_10007E7EC(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  return sub_10001D6DC();
}

uint64_t sub_1000BD5F8()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  int64_t v29;
  _QWORD *v30;
  uint64_t v31;

  result = swift_release(*(_QWORD *)(v0 + 368));
  v2 = *(_QWORD *)(v0 + 376);
  v3 = *(_QWORD *)(v0 + 384);
  v4 = *(_QWORD *)(v0 + 344);
  if ((v4 & 0x8000000000000000) == 0)
  {
    if (v3)
    {
      v5 = (v3 - 1) & v3;
      v6 = __clz(__rbit64(v3)) | (v2 << 6);
      v7 = *(_QWORD *)(v0 + 376);
LABEL_4:
      v8 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v6);
      sub_10002B400();
      goto LABEL_7;
    }
    v21 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      return result;
    }
    v22 = *(_QWORD *)(v0 + 360) + 64;
    if (v21 < (uint64_t)(v22 >> 6))
    {
      v23 = *(_QWORD *)(v0 + 352);
      v24 = *(_QWORD *)(v23 + 8 * v21);
      v7 = v2 + 1;
      if (!v24)
      {
        v28 = v22 >> 6;
        v7 = v2 + 2;
        if (v2 + 2 >= v28)
          goto LABEL_28;
        v24 = *(_QWORD *)(v23 + 8 * v7);
        if (!v24)
        {
          v7 = v2 + 3;
          if (v2 + 3 >= v28)
            goto LABEL_28;
          v24 = *(_QWORD *)(v23 + 8 * v7);
          if (!v24)
          {
            v7 = v2 + 4;
            if (v2 + 4 >= v28)
              goto LABEL_28;
            v24 = *(_QWORD *)(v23 + 8 * v7);
            if (!v24)
            {
              v29 = v2 + 5;
              while (v29 < v28)
              {
                v24 = *(_QWORD *)(v23 + 8 * v29++);
                if (v24)
                {
                  v7 = v29 - 1;
                  goto LABEL_15;
                }
              }
              goto LABEL_28;
            }
          }
        }
      }
LABEL_15:
      v5 = (v24 - 1) & v24;
      v6 = __clz(__rbit64(v24)) + (v7 << 6);
      goto LABEL_4;
    }
LABEL_28:
    sub_10001CD34(*(_QWORD *)(v0 + 344));
    v30 = (_QWORD *)swift_task_alloc(dword_1000FF364);
    *(_QWORD *)(v0 + 400) = v30;
    *v30 = v0;
    v30[1] = sub_1000BD958;
    return sub_1000B96FC();
  }
  v9 = __CocoaSet.Iterator.next()(result);
  if (!v9)
    goto LABEL_28;
  *(_QWORD *)(v0 + 208) = v9;
  v10 = sub_10002B50C();
  sub_10007E5C4();
  sub_10002B4BC(v0 + 200, v0 + 208, (uint64_t)&type metadata for Swift.AnyObject + 8, v10);
  v8 = *(_QWORD *)(v0 + 200);
  sub_10007E5CC();
  v7 = v2;
  v5 = v3;
LABEL_7:
  *(_QWORD *)(v0 + 376) = v7;
  *(_QWORD *)(v0 + 384) = v5;
  *(_QWORD *)(v0 + 368) = v8;
  if (!v8)
    goto LABEL_28;
  if (qword_1000FB218 != -1)
    swift_once(&qword_1000FB218, sub_1000B3008);
  v11 = sub_10001DD64();
  sub_100002FF8(v11, (uint64_t)qword_1000FF168);
  v12 = sub_10001D834(v8);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = sub_10001D8D4(12);
    v16 = sub_10001D8D4(32);
    v31 = v16;
    *(_DWORD *)v15 = 136315138;
    sub_100002F78(&qword_1000FB2A0);
    sub_100006744((unint64_t *)&qword_1000FBEA0, &qword_1000FB2A0);
    v18 = sub_10002B548(v17);
    sub_1000102C0(v18, v19, &v31);
    *(_QWORD *)(v15 + 4) = v20;
    sub_10001E034();
    sub_10001EBB0(v8);
    sub_10001E18C((void *)&_mh_execute_header, v13, v14, "Cancelling request %s due to policy change", (uint8_t *)v15);
    sub_10001DBB8(v16);
    sub_10001D790(v16);
    sub_10001D790(v15);
  }
  else
  {
    sub_10001EBB0(v8);
  }

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 256) + 104))(*(_QWORD *)(v0 + 264), *(unsigned int *)(v0 + 408), *(_QWORD *)(v0 + 248));
  v25 = (_QWORD *)swift_task_alloc(dword_1000FFA44);
  *(_QWORD *)(v0 + 392) = v25;
  *v25 = v0;
  v25[1] = sub_1000BD5A0;
  v26 = sub_10002BD0C(*(_QWORD *)(v0 + 240));
  return sub_1000C6594(v26, v27);
}

uint64_t sub_1000BD958()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 400));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_1000BD990()
{
  uint64_t v0;

  sub_100037EFC();
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  return sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1000BD9F0()
{
  uint64_t v0;

  sub_1000C3460(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_currentPolicy, type metadata accessor for RequestManagerPolicy);
  sub_10000650C((_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_assetManager));
  sub_100037E2C(OBJC_IVAR____TtC13modelmanagerd14RequestManager_neuralEngine);
  sub_1000C4200(OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups);
  sub_10001D9C8();
  sub_10001D930();
  sub_1000C4200(OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups);
  sub_10001D9C8();
  sub_10001D930();
  sub_1000C4200(OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingBackgroundGroups);
  sub_10001D9C8();
  sub_10001D930();
  sub_100037E2C(OBJC_IVAR____TtC13modelmanagerd14RequestManager_workQueueState);
  sub_100037E2C(OBJC_IVAR____TtC13modelmanagerd14RequestManager_nextExecutionGroupToAcquire);
  sub_1000C45FC(OBJC_IVAR____TtC13modelmanagerd14RequestManager_extantRequests);
  sub_1000C45FC(OBJC_IVAR____TtC13modelmanagerd14RequestManager_cancelledForPolicyExtantRequests);
  swift_defaultActor_destroy(v0);
  sub_100049140();
}

uint64_t sub_1000BDAB4()
{
  uint64_t v0;

  sub_1000BD9F0();
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000BDACC()
{
  return type metadata accessor for RequestManager(0);
}

uint64_t type metadata accessor for RequestManager(uint64_t a1)
{
  return sub_100042760(a1, (uint64_t *)&unk_1000FF318, (uint64_t)&nominal type descriptor for RequestManager);
}

uint64_t sub_1000BDAE8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[11];

  result = type metadata accessor for RequestManagerPolicy(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_1000CD2A8;
    v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[4] = &unk_1000CD2C0;
    v4[5] = &unk_1000CD2C0;
    v4[6] = &unk_1000CD2C0;
    v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[8] = "\b";
    v4[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[10] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 11, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for RequestManagerPolicy(uint64_t a1)
{
  return sub_100042760(a1, qword_1000FF628, (uint64_t)&nominal type descriptor for RequestManagerPolicy);
}

uint64_t *sub_1000BDBB4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for RequestPriority(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t sub_1000BDC4C(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*a1);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for RequestPriority(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *sub_1000BDC94(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = *a2;
  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for RequestPriority(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

uint64_t *sub_1000BDD04(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for RequestPriority(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

_QWORD *sub_1000BDD78(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for RequestPriority(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *sub_1000BDDD4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for RequestPriority(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_1000BDE40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BDE4C);
}

void sub_1000BDE4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_100049140();
  }
  else
  {
    v6 = sub_10001E368();
    sub_100005700(a1 + *(int *)(a3 + 20), a2, v6);
  }
}

uint64_t sub_1000BDEB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BDEC0);
}

_QWORD *sub_1000BDEC0(_QWORD *result, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *result = (a2 - 1);
  }
  else
  {
    v7 = sub_10001E368();
    return (_QWORD *)sub_100005630((uint64_t)v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1000BDF28(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for RequestPriority(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_1000BDFA0(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FF660, type metadata accessor for RequestManager);
  *(_QWORD *)(a1 + 8) = v2;
}

void sub_1000BDFDC(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;

  v2 = a1[2];
  if (v2 == a2[2]
    && v2
    && a1 != a2
    && ((v5 = a1[4], v6 = a1[5], v7 = a2[4], v8 = a2[5], v5 == v7) ? (v9 = v6 == v8) : (v9 = 0),
        (v9 || (sub_10001DB04(v5, v6, v7, v8) & 1) != 0) && v2 != 1))
  {
    v10 = a2 + 7;
    v11 = a1 + 7;
    v12 = 1;
    while (v12 < v2)
    {
      v13 = *(v11 - 1);
      v14 = *v11;
      v15 = *(v10 - 1);
      v16 = *v10;
      v17 = v13 == v15 && v14 == v16;
      if (v17 || (sub_10001DB04(v13, v14, v15, v16) & 1) != 0)
      {
        ++v12;
        v10 += 2;
        v11 += 2;
        if (v2 != v12)
          continue;
      }
      goto LABEL_18;
    }
    __break(1u);
  }
  else
  {
LABEL_18:
    sub_100049140();
  }
}

void sub_1000BE098()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;

  sub_10001D810();
  v2 = *(_QWORD *)(v0 + 16);
  if (v2 == *(_QWORD *)(v1 + 16) && v2 && v0 != v1)
  {
    v3 = (unsigned __int8 *)(v0 + 64);
    v4 = (unsigned __int8 *)(v1 + 64);
    do
    {
      v5 = *((_QWORD *)v3 - 4);
      v6 = *((_QWORD *)v3 - 3);
      v8 = *((_QWORD *)v3 - 2);
      v7 = *((_QWORD *)v3 - 1);
      v9 = *v3;
      v10 = *((_QWORD *)v4 - 4);
      v11 = *((_QWORD *)v4 - 3);
      v13 = *((_QWORD *)v4 - 2);
      v12 = *((_QWORD *)v4 - 1);
      v14 = *v4;
      v15 = v5 == v10 && v6 == v11;
      if (!v15 && (sub_10001DB04(v5, v6, v10, v11) & 1) == 0)
        break;
      if (v7)
      {
        if (!v12)
          break;
        if (v8 == v13 && v7 == v12)
        {
          if (v9 != v14)
            break;
          goto LABEL_22;
        }
        if ((sub_10001DB04(v8, v7, v13, v12) & 1) == 0)
          break;
      }
      else if (v12)
      {
        break;
      }
      if (((v9 ^ v14) & 1) != 0)
        break;
LABEL_22:
      v4 += 40;
      v3 += 40;
      --v2;
    }
    while (v2);
  }
  sub_100006A68();
}

uint64_t sub_1000BE174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_1000BE18C, 0, 0);
}

uint64_t sub_1000BE18C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_1000C4BF4();
  sub_1000C4324(OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_inferenceProviderConnection);
  v2 = (_QWORD *)sub_10001DA40(*(_QWORD *)(v0 + 48));
  *(_QWORD *)(v1 + 24) = v2;
  v3 = sub_1000C3FE4(v2, (uint64_t)sub_1000C3B18);
  return sub_1000C3E64(v3, v4, v5, v6);
}

uint64_t sub_1000BE1E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_1000BE200, 0, 0);
}

uint64_t sub_1000BE200()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_1000C4BF4();
  sub_1000C4324(OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_inferenceProviderConnection);
  v2 = (_QWORD *)sub_10001DA40(*(_QWORD *)(v0 + 48));
  *(_QWORD *)(v1 + 24) = v2;
  v3 = sub_1000C3FE4(v2, (uint64_t)sub_100072B1C);
  return sub_1000C3E64(v3, v4, v5, v6);
}

uint64_t sub_1000BE25C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v4 = sub_1000C4194(*(unsigned int *)(a2 + 4));
  v5 = (_QWORD *)sub_100006AF4(v4);
  *v5 = v2;
  v5[1] = sub_1000C3B04;
  return v7(a1);
}

uint64_t sub_1000BE2B8(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1000BE31C;
  return v6(a1);
}

uint64_t sub_1000BE31C()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  sub_10001D680(*(_QWORD *)(*(_QWORD *)v0 + 16));
  v1 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_100006A38(v1);
}

uint64_t sub_1000BE350(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v3 + 64) = a2;
  *(_QWORD *)(v3 + 72) = v2;
  *(_QWORD *)(v3 + 56) = a1;
  v4 = sub_1000C40BC();
  *(_DWORD *)(v3 + 112) = v4;
  if (v4)
  {
    v5 = swift_task_alloc(async function pointer to TaskGroup.next(isolation:)[1]);
    sub_1000C4C28(v5);
    sub_100002F78(&qword_1000FBC38);
    sub_10007E7A0((uint64_t)sub_1000BE508);
    return sub_1000C4238();
  }
  else
  {
    if (*(_QWORD *)(v3 + 56))
    {
      v7 = sub_1000C4BD4();
      v8 = sub_1000C4C70(v7);
      v10 = v9;
    }
    else
    {
      v8 = 0;
      v10 = 0;
    }
    *(_QWORD *)(v3 + 80) = v8;
    *(_QWORD *)(v3 + 88) = v10;
    return sub_10002B3A8((uint64_t)sub_1000BE3F8, v8, v10);
  }
}

uint64_t sub_1000BE3F8()
{
  uint64_t v0;

  return swift_taskGroup_wait_next_throwing(v0 + 117, **(_QWORD **)(v0 + 72), sub_1000BE414, v0 + 16);
}

uint64_t sub_1000BE414()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v1 + 96) = v0;
  if (v0)
  {
    v2 = *(_QWORD *)(v1 + 80);
    v3 = *(_QWORD *)(v1 + 88);
    v4 = sub_1000BE4EC;
    return sub_10002B3A8((uint64_t)v4, v2, v3);
  }
  if ((*(_BYTE *)(v1 + 117) & 1) != 0)
    return (*(uint64_t (**)(void))(v1 + 8))();
  if (!*(_DWORD *)(v1 + 112))
  {
    if (*(_QWORD *)(v1 + 56))
    {
      v7 = sub_1000C4BD4();
      v8 = sub_1000C4C70(v7);
      v3 = v9;
    }
    else
    {
      v8 = 0;
      v3 = 0;
    }
    *(_QWORD *)(v1 + 80) = v8;
    *(_QWORD *)(v1 + 88) = v3;
    v4 = sub_1000BE3F8;
    v2 = v8;
    return sub_10002B3A8((uint64_t)v4, v2, v3);
  }
  v6 = swift_task_alloc(async function pointer to TaskGroup.next(isolation:)[1]);
  sub_1000C4C28(v6);
  sub_100002F78(&qword_1000FBC38);
  sub_10007E7A0((uint64_t)sub_1000BE508);
  return sub_1000C4238();
}

uint64_t sub_1000BE4EC()
{
  uint64_t v0;

  return swift_unexpectedError(*(_QWORD *)(v0 + 96), "_Concurrency/TaskGroup.swift", 28, 1, 648);
}

uint64_t sub_1000BE508()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_10001E538();
  v2 = *v0;
  sub_10001D788(*(_QWORD *)(v1 + 104), v3);
  if ((*(_BYTE *)(v1 + 116) & 1) != 0)
    return sub_10001D940(*(uint64_t (**)(void))(v2 + 8));
  if (*(_DWORD *)(v1 + 112))
  {
    v5 = (_QWORD *)swift_task_alloc(async function pointer to TaskGroup.next(isolation:)[1]);
    *(_QWORD *)(v1 + 104) = v5;
    v6 = sub_100002F78(&qword_1000FBC38);
    *v5 = v2;
    v5[1] = sub_1000BE508;
    return TaskGroup.next(isolation:)(v1 + 116, *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), v6);
  }
  else
  {
    if (*(_QWORD *)(v1 + 56))
    {
      ObjectType = swift_getObjectType(*(_QWORD *)(v1 + 56));
      v8 = sub_1000C4C70(ObjectType);
      v10 = v9;
    }
    else
    {
      v8 = 0;
      v10 = 0;
    }
    *(_QWORD *)(v1 + 80) = v8;
    *(_QWORD *)(v1 + 88) = v10;
    return sub_10001D6DC();
  }
}

uint64_t sub_1000BE5FC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_100037EFC();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  *(_QWORD *)(v1 + 56) = v0;
  v12 = ((uint64_t (*)(_QWORD))type metadata accessor for ContinuousClock.Instant)(0);
  *(_QWORD *)(v1 + 64) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v1 + 72) = v13;
  *(_QWORD *)(v1 + 80) = sub_100037A68(v13);
  *(_QWORD *)(v1 + 88) = swift_task_alloc(v0);
  *(_QWORD *)(v1 + 40) = v11;
  *(_QWORD *)(v1 + 48) = v9;
  *(_QWORD *)(v1 + 16) = v7;
  *(_QWORD *)(v1 + 24) = v5;
  *(_BYTE *)(v1 + 32) = v3 & 1;
  sub_100037A7C();
  return sub_10001D6DC();
}

uint64_t sub_1000BE684()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  _QWORD *v8;

  sub_10001E6F0();
  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  v4 = type metadata accessor for ContinuousClock(0);
  sub_100006710(&qword_1000FD880, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v4, v5);
  sub_100006710(&qword_1000FF710, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 5, v2, v6);
  v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v7;
  v7(v1, v2);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  v0[13] = v8;
  *v8 = v0;
  v8[1] = sub_1000BE778;
  return sub_1000C3D24();
}

uint64_t sub_1000BE778()
{
  uint64_t v0;
  _QWORD *v1;
  void (*v2)(uint64_t);
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v10)(void);

  sub_10001DD0C();
  sub_10001E538();
  v2 = (void (*)(uint64_t))v1[12];
  sub_10001EA4C(v3);
  v1[14] = v0;
  swift_task_dealloc(v4);
  v5 = sub_10002BF40();
  v2(v5);
  if (v0)
  {
    sub_100037A7C();
    return sub_10007D24C(v6, v7, v8);
  }
  else
  {
    swift_task_dealloc(v1[11]);
    sub_10001E330();
    v10 = (uint64_t (*)(void))sub_10001E5D0();
    return sub_1000AB0E0(v10);
  }
}

uint64_t sub_1000BE7EC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  sub_10001E330();
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1000BE81C()
{
  _QWORD *v0;
  uint64_t v1;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v3;

  v1 = *v0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v0);
  *v0 = v1;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000BE950();
    *v0 = v3;
  }
}

void sub_1000BE87C()
{
  uint64_t *v0;
  uint64_t v1;
  int isUniquelyReferenced_nonNull_native;

  v1 = *v0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v0);
  *v0 = v1;
  if (!isUniquelyReferenced_nonNull_native)
    *v0 = sub_1000BEEDC(0, *(_QWORD *)(v1 + 16) + 1, 1, v1);
  sub_100006C14();
}

void sub_1000BE8C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  if (a1 + 1 > *(_QWORD *)(*(_QWORD *)v1 + 24) >> 1)
  {
    sub_1000BE950();
    *(_QWORD *)v1 = v2;
  }
}

uint64_t sub_1000BE914(uint64_t result)
{
  uint64_t *v1;
  unint64_t v2;

  v2 = *(_QWORD *)(*v1 + 24);
  if (result + 1 > (uint64_t)(v2 >> 1))
  {
    result = sub_1000BEEDC(v2 > 1, result + 1, 1, *v1);
    *v1 = result;
  }
  return result;
}

void sub_1000BE950()
{
  uint64_t v0;
  void (*v1)(_QWORD, uint64_t, _QWORD *, uint64_t);
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;

  sub_1000C44F8();
  if ((v5 & 1) != 0)
  {
    sub_10001E508();
    if (v9 != v10)
    {
      sub_1000C4688();
      if (v9)
      {
        __break(1u);
        return;
      }
      sub_10001E4F8();
    }
  }
  else
  {
    v8 = v4;
  }
  v11 = *(_QWORD *)(v0 + 16);
  if (v8 <= v11)
    v12 = *(_QWORD *)(v0 + 16);
  else
    v12 = v8;
  if (v12)
  {
    v13 = sub_1000C48AC(v3, v4, v5, v6, v7);
    v14 = (_QWORD *)sub_100006A80(v13, 16 * v12 + 32);
    v15 = j__malloc_size(v14);
    v14[2] = v11;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 16);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  if ((v2 & 1) != 0)
  {
    sub_1000C4C78();
    *(_QWORD *)(v0 + 16) = 0;
    sub_10001D8B4();
  }
  else
  {
    v1(0, v11, v14 + 4, v0);
  }
  sub_10001E7B4();
}

uint64_t sub_1000BEA08()
{
  return sub_1000BEAE8();
}

void sub_1000BEA24(char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  char v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  if ((a3 & 1) != 0)
  {
    sub_10001E508();
    if (v8 != v9)
    {
      sub_1000C4688();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_10001E4F8();
    }
  }
  sub_1000C4790();
  if (v5)
  {
    v10 = sub_100002F78(&qword_1000FB658);
    v11 = (_QWORD *)sub_100006A80(v10, 40 * (_QWORD)v5 + 32);
    sub_1000C4B10(v11);
  }
  else
  {
    v5 = (char *)_swiftEmptyArrayStorage;
  }
  if ((a1 & 1) != 0)
  {
    sub_10000FB98((char *)(a4 + 32), v4, v5 + 32);
    *(_QWORD *)(a4 + 16) = 0;
    sub_10001D8B4();
  }
  else
  {
    v12 = sub_1000C4948();
    sub_1000BF2D8(v12, v13, v14, v15);
  }
  sub_10001E7B4();
}

uint64_t sub_1000BEACC()
{
  return sub_1000BEAE8();
}

uint64_t sub_1000BEAE8()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  void (*v2)(uint64_t, uint64_t, char *);
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  size_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void (*v27)(_QWORD);
  uint64_t result;
  const char *v29;
  uint64_t v30;

  sub_1000C44F8();
  if ((v6 & 1) != 0)
  {
    sub_10001E508();
    if (v10 != v11)
    {
      sub_1000C4688();
      if (v10)
      {
        __break(1u);
LABEL_23:
        sub_10001D6A8();
        v29 = "Division by zero";
        v30 = 16;
LABEL_25:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v29, v30, 2, "Swift/IntegerTypes.swift", 24);
        __break(1u);
        return result;
      }
      sub_10001E4F8();
    }
  }
  else
  {
    v9 = v5;
  }
  v12 = *(_QWORD *)(v0 + 16);
  if (v9 <= v12)
    v13 = *(_QWORD *)(v0 + 16);
  else
    v13 = v9;
  if (!v13)
  {
    v19 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  v14 = sub_1000C48AC(v4, v5, v6, v7, v8);
  v15 = *(_QWORD *)(v1(0) - 8);
  v16 = *(_QWORD *)(v15 + 72);
  v17 = *(unsigned __int8 *)(v15 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = (_QWORD *)swift_allocObject(v14, v18 + v16 * v13, v17 | 7);
  v20 = j__malloc_size(v19);
  if (!v16)
    goto LABEL_23;
  if (v20 - v18 == 0x8000000000000000 && v16 == -1)
  {
    sub_10001D6A8();
    v29 = "Division results in an overflow";
    v30 = 31;
    goto LABEL_25;
  }
  v19[2] = v12;
  v19[3] = 2 * ((uint64_t)(v20 - v18) / v16);
LABEL_18:
  v1(0);
  sub_10001EA78();
  if ((v3 & 1) != 0)
  {
    v2(v0 + v22, v12, (char *)v19 + v22);
    *(_QWORD *)(v0 + 16) = 0;
    sub_10001D8B4();
  }
  else
  {
    v23 = sub_1000C4D24();
    sub_1000BF3D4(v23, v24, v25, v26, v27);
  }
  return (uint64_t)v19;
}

char *sub_1000BEC78(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100002F78(&qword_1000FF798);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 8);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  if ((v5 & 1) != 0)
  {
    sub_10000FC0C((char *)(a4 + 32), v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    sub_1000BF4C4(0, v8, (unint64_t)v13, a4);
  }
  return v11;
}

void sub_1000BED64()
{
  sub_1000BED80();
}

void sub_1000BED80()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;

  sub_1000C44F8();
  if ((v4 & 1) != 0)
  {
    sub_10001E508();
    if (v8 != v9)
    {
      sub_1000C4688();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_10001E4F8();
    }
  }
  else
  {
    v7 = v3;
  }
  v10 = *(_QWORD *)(v0 + 16);
  if (v7 <= v10)
    v11 = *(_QWORD *)(v0 + 16);
  else
    v11 = v7;
  if (v11)
  {
    v12 = sub_1000C48AC(v2, v3, v4, v5, v6);
    v13 = (_QWORD *)sub_100006A80(v12, 40 * v11 + 32);
    v14 = j__malloc_size(v13);
    v13[2] = v10;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
  }
  if ((v1 & 1) != 0)
  {
    sub_1000C4C78();
    *(_QWORD *)(v0 + 16) = 0;
    sub_10001D8B4();
  }
  else
  {
    v15 = sub_1000C4D24();
    sub_1000BF818(v15, v16, v17, v18, v19);
  }
  sub_10001D950();
}

void sub_1000BEE34(char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  char v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  if ((a3 & 1) != 0)
  {
    sub_10001E508();
    if (v8 != v9)
    {
      sub_1000C4688();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_10001E4F8();
    }
  }
  sub_1000C4790();
  if (v5)
  {
    v10 = sub_100002F78(&qword_1000FF838);
    v11 = (_QWORD *)sub_100006A80(v10, 48 * (_QWORD)v5 + 32);
    sub_1000C4B10(v11);
  }
  else
  {
    v5 = (char *)_swiftEmptyArrayStorage;
  }
  if ((a1 & 1) != 0)
  {
    sub_10000FCC8((char *)(a4 + 32), v4, v5 + 32);
    *(_QWORD *)(a4 + 16) = 0;
    sub_10001D8B4();
  }
  else
  {
    v12 = sub_1000C4948();
    sub_1000BF5D8(v12, v13, v14, v15);
  }
  sub_10001E7B4();
}

uint64_t sub_1000BEEDC(char a1, int64_t a2, char a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  const char *v21;
  uint64_t v22;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_24:
        v21 = "Division by zero";
        v22 = 16;
LABEL_26:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v21, v22, 2, "Swift/IntegerTypes.swift", 24);
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100002F78(&qword_1000FF830);
  v11 = *(_QWORD *)(sub_100002F78(&qword_1000FB818) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
    goto LABEL_24;
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
  {
    v21 = "Division results in an overflow";
    v22 = 31;
    goto LABEL_26;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = *(unsigned __int8 *)(*(_QWORD *)(sub_100002F78(&qword_1000FB818) - 8) + 80);
  v19 = (v18 + 32) & ~v18;
  if ((a1 & 1) != 0)
  {
    sub_10000FD24(a4 + v19, v8);
    *(_QWORD *)(a4 + 16) = 0;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    sub_1000BF6F4(0, v8, (unint64_t)v15 + v19, a4);
  }
  return (uint64_t)v15;
}

void sub_1000BF0B4()
{
  sub_1000BED80();
}

uint64_t sub_1000BF0D0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 16 * a1 + 32;
  v7 = a3 + 16 * v4;
  if (v6 >= v7 || v6 + 16 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000BF1C4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v7 = a4 + 16 * a1 + 32;
  v8 = a3 + 16 * v4;
  if (v7 >= v8 || v7 + 16 * v4 <= a3)
  {
    sub_100002F78(&qword_1000FB630);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000BF2D8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 40 * a1 + 32;
  v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000BF3D4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    sub_10001D6A8();
    v20 = "UnsafeMutablePointer.initialize with negative count";
    v21 = 51;
    goto LABEL_11;
  }
  a5(0);
  sub_1000C459C();
  v11 = *(_QWORD *)(v10 + 72);
  v12 = a4 + v9 + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    sub_10001D8B4();
    return v14;
  }
  sub_10001D6A8();
  v20 = "UnsafeMutablePointer.initialize overlapping range";
  v21 = 49;
LABEL_11:
  result = sub_10001D7E0((uint64_t)"Fatal error", 11, 2, (uint64_t)v20, v21, v18, (uint64_t)"Swift/UnsafePointer.swift", v19, v22, v23, v24);
  __break(1u);
  return result;
}

uint64_t sub_1000BF4C4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v7 = a4 + 8 * a1 + 32;
  v8 = a3 + 8 * v4;
  if (v7 >= v8 || v7 + 8 * v4 <= a3)
  {
    sub_100002F78(&qword_1000FF7A0);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000BF5D8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v7 = a4 + 48 * a1 + 32;
  v8 = a3 + 48 * v4;
  if (v7 >= v8 || v7 + 48 * v4 <= a3)
  {
    sub_100002F78(&qword_1000FF840);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000BF6F4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(sub_100002F78(&qword_1000FB818) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 72);
  v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  v12 = v10 * v4;
  v13 = a3 + v12;
  v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v13;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000BF818(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    sub_10001D6A8();
    v13 = "UnsafeMutablePointer.initialize with negative count";
    v14 = 51;
    goto LABEL_11;
  }
  v7 = a4 + 40 * a1 + 32;
  v8 = a3 + 40 * v5;
  if (v7 >= v8 || v7 + 40 * v5 <= a3)
  {
    sub_1000C48AC(a1, a2, a3, a4, a5);
    swift_arrayInitWithCopy(a3);
    sub_10001D8B4();
    return v8;
  }
  sub_10001D6A8();
  v13 = "UnsafeMutablePointer.initialize overlapping range";
  v14 = 49;
LABEL_11:
  result = sub_10001D7E0((uint64_t)"Fatal error", 11, 2, (uint64_t)v13, v14, v11, (uint64_t)"Swift/UnsafePointer.swift", v12, v15, v16, v17);
  __break(1u);
  return result;
}

unint64_t sub_1000BF90C(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

void sub_1000BF930()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  sub_1000C4BA8();
  if (v5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_1000C4C08() || v4 > *(_QWORD *)(v2 + 24) >> 1)
  {
    sub_1000BE950();
    v2 = v6;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  sub_1000C4B94();
  if (v8 != v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_10000FE98(v0 + 32, v3, v2 + 16 * v7 + 32);
  if (!v3)
  {
LABEL_11:
    sub_10001D8B4();
    *v1 = v2;
    sub_10001E7B4();
    return;
  }
  v9 = *(_QWORD *)(v2 + 16);
  v5 = __OFADD__(v9, v3);
  v10 = v9 + v3;
  if (!v5)
  {
    *(_QWORD *)(v2 + 16) = v10;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_1000BF9F0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!swift_isUniquelyReferenced_nonNull_native(*v1) || v4 + v2 > *(_QWORD *)(v3 + 24) >> 1)
  {
    sub_1000BE950();
    v3 = v6;
  }
  if (!*(_QWORD *)(a1 + 16))
  {
    if (!v2)
      goto LABEL_11;
    goto LABEL_13;
  }
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_10000FF30(a1 + 32, v2);
  if (!v2)
  {
LABEL_11:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

uint64_t sub_1000BFAE0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    sub_10001D964();
    v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    sub_10001D8B4();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if ((unint64_t)*v1 >> 62)
  {
    sub_10001E3E0();
    v5 = sub_1000C4708();
    sub_100049010();
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
    goto LABEL_27;
  }
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_16;
    v5 = 1;
  }
  if ((unint64_t)v4 >> 62)
    goto LABEL_28;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    sub_10001E3E0();
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1, v4);
    swift_bridgeObjectRelease(*v1);
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_16:
    result = sub_10001B80C(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_27:
    __break(1u);
LABEL_28:
    if (v4 < 0)
      v17 = v4;
    else
      v17 = v4 & 0xFFFFFFFFFFFFFF8;
    sub_10001E3E0();
    v9 = _CocoaArrayWrapper.endIndex.getter(v17);
    sub_100049010();
  }
  if (v11 < 1)
    goto LABEL_20;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_20:
    v15 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v15);
  }
  __break(1u);
  return result;
}

void sub_1000BFC74()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  sub_1000C4BA8();
  if (v5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_1000C4C08() || v4 > *(_QWORD *)(v2 + 24) >> 1)
  {
    sub_1000BED80();
    v2 = v6;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  sub_1000C4B94();
  if (v7 != v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_100010068(v0 + 32, v3);
  if (!v3)
  {
LABEL_11:
    sub_10001D8B4();
    *v1 = v2;
    sub_10001E7B4();
    return;
  }
  v8 = *(_QWORD *)(v2 + 16);
  v5 = __OFADD__(v8, v3);
  v9 = v8 + v3;
  if (!v5)
  {
    *(_QWORD *)(v2 + 16) = v9;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

#error "1000BFE58: call analysis failed (funcsize=84)"

#error "1000BFFA4: call analysis failed (funcsize=98)"

#error "1000C0148: call analysis failed (funcsize=98)"

void sub_1000C01D0()
{
  sub_1000C0218();
}

void sub_1000C01F4()
{
  sub_1000C0218();
}

void sub_1000C0218()
{
  uint64_t *v0;
  void (*v1)(void);
  unint64_t *v2;
  unint64_t *v3;
  unint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  void (*v34)(void);
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  uint64_t *v38;
  uint64_t v39;

  sub_10001D810();
  v34 = v1;
  v37 = v2;
  v4 = v3;
  v6 = v5;
  v7 = v0;
  v9 = v8;
  v11 = v10;
  v12 = sub_10001E23C(v8, v5);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_10001E168();
  v16 = v15 - v14;
  v17 = *v0;
  v18 = *(_QWORD *)(*v0 + 40);
  v38 = v6;
  sub_100006744(v4, v6);
  v20 = v19;
  swift_bridgeObjectRetain(v17);
  v36 = v9;
  v21 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v12, v20);
  v22 = -1 << *(_BYTE *)(v17 + 32);
  v23 = v21 & ~v22;
  if (((*(_QWORD *)(v17 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) != 0)
  {
    v33 = v7;
    v35 = v11;
    v24 = ~v22;
    v25 = *(_QWORD *)(v13 + 72);
    while (1)
    {
      v26 = v25 * v23;
      sub_1000C42AC(v16, *(_QWORD *)(v17 + 48) + v25 * v23);
      sub_100006744(v37, v38);
      v28 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v36, v12, v27);
      sub_10007D04C(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
      if ((v28 & 1) != 0)
        break;
      v23 = (v23 + 1) & v24;
      if (((*(_QWORD *)(v17 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
      {
        sub_100006C48();
        v29 = 1;
        v11 = v35;
        goto LABEL_10;
      }
    }
    sub_100006C48();
    v30 = sub_1000C48D4();
    v31 = *v33;
    v39 = *v33;
    *v33 = 0x8000000000000000;
    if ((v30 & 1) == 0)
    {
      v34();
      v31 = v39;
    }
    v11 = v35;
    sub_10001DE08(v35, *(_QWORD *)(v31 + 48) + v26, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 32));
    sub_1000C0DF4();
    v32 = *v33;
    *v33 = v39;
    swift_bridgeObjectRelease(v32);
    v29 = 0;
  }
  else
  {
    sub_100006C48();
    v29 = 1;
  }
LABEL_10:
  sub_100005630(v11, v29, 1, v12);
  sub_100006A68();
}

#error "1000C045C: call analysis failed (funcsize=105)"

void sub_1000C05B4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32[9];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t vars0;
  uint64_t vars8;

  v3 = v2;
  swift_bridgeObjectRelease(*v3);
  v6 = __CocoaSet.count.getter(a1);
  v7 = swift_unknownObjectRetain(a1);
  sub_100013F4C(v7, v6, v8, v9, v10, v11, v12, v13, v29, v30, v32[0], v32[1], v32[2], v32[3], v32[4], v32[5], v32[6], v32[7], v32[8],
    v33,
    v34,
    v35,
    v36,
    v37,
    v38,
    v39,
    v40,
    v41,
    v42,
    v43,
    vars0,
    vars8);
  v15 = v14;
  v33 = v14;
  Hasher.init(_seed:)(v32, *(_QWORD *)(v14 + 40));
  v16 = a2 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_id;
  swift_retain();
  v17 = sub_100002F78(&qword_1000FB2D8);
  sub_100006744(&qword_1000FB2E0, &qword_1000FB2D8);
  dispatch thunk of Hashable.hash(into:)(v32, v17, v18);
  v19 = Hasher._finalize()();
  v20 = -1 << *(_BYTE *)(v15 + 32);
  v21 = v19 & ~v20;
  v22 = v15 + 56;
  if (((*(_QWORD *)(v15 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
  {
    v23 = *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * v21);
    v24 = v23 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_id;
    v25 = type metadata accessor for Session(0);
    swift_retain();
    LOBYTE(v24) = static UUIDIdentifier.== infix(_:_:)(v24, v16, v25);
    swift_release(v23);
    if ((v24 & 1) == 0)
    {
      v31 = v3;
      v26 = ~v20;
      v21 = (v21 + 1) & v26;
      if (((*(_QWORD *)(v22 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
      {
        while (1)
        {
          v27 = *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * v21);
          v28 = v27 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_id;
          swift_retain();
          LOBYTE(v28) = static UUIDIdentifier.== infix(_:_:)(v28, v16, v25);
          swift_release(v27);
          if ((v28 & 1) != 0)
            break;
          v21 = (v21 + 1) & v26;
          if (((*(_QWORD *)(v22 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
            goto LABEL_6;
        }
      }
      else
      {
LABEL_6:
        swift_release(v15);
        __break(1u);
      }
      v3 = v31;
    }
    swift_release(v15);
    v15 = *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * v21);
    sub_1000C0C14(v21, (uint64_t)&OBJC_IVAR____TtC13modelmanagerd13DaemonSession_id, &qword_1000FB2D8, &qword_1000FB2E0);
    if ((static UUIDIdentifier.== infix(_:_:)(v16, v15 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_id, v25) & 1) != 0)
    {
      *v3 = v33;
      return;
    }
    __break(1u);
  }
  swift_release(v15);
  __break(1u);
}

void sub_1000C080C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32[9];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t vars0;
  uint64_t vars8;

  v3 = v2;
  swift_bridgeObjectRelease(*v3);
  v6 = __CocoaSet.count.getter(a1);
  v7 = swift_unknownObjectRetain(a1);
  sub_100013DEC(v7, v6, v8, v9, v10, v11, v12, v13, v29, v30, v32[0], v32[1], v32[2], v32[3], v32[4], v32[5], v32[6], v32[7], v32[8],
    v33,
    v34,
    v35,
    v36,
    v37,
    v38,
    v39,
    v40,
    v41,
    v42,
    v43,
    vars0,
    vars8);
  v15 = v14;
  v33 = v14;
  Hasher.init(_seed:)(v32, *(_QWORD *)(v14 + 40));
  v16 = a2 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_id;
  swift_retain();
  v17 = sub_100002F78(&qword_1000FB2A0);
  sub_100006744(&qword_1000FB2A8, &qword_1000FB2A0);
  dispatch thunk of Hashable.hash(into:)(v32, v17, v18);
  v19 = Hasher._finalize()();
  v20 = -1 << *(_BYTE *)(v15 + 32);
  v21 = v19 & ~v20;
  v22 = v15 + 56;
  if (((*(_QWORD *)(v15 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
  {
    v23 = *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * v21);
    v24 = v23 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_id;
    v25 = type metadata accessor for OneShotRequest(0);
    swift_retain();
    LOBYTE(v24) = static UUIDIdentifier.== infix(_:_:)(v24, v16, v25);
    swift_release(v23);
    if ((v24 & 1) == 0)
    {
      v31 = v3;
      v26 = ~v20;
      v21 = (v21 + 1) & v26;
      if (((*(_QWORD *)(v22 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
      {
        while (1)
        {
          v27 = *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * v21);
          v28 = v27 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_id;
          swift_retain();
          LOBYTE(v28) = static UUIDIdentifier.== infix(_:_:)(v28, v16, v25);
          swift_release(v27);
          if ((v28 & 1) != 0)
            break;
          v21 = (v21 + 1) & v26;
          if (((*(_QWORD *)(v22 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
            goto LABEL_6;
        }
      }
      else
      {
LABEL_6:
        swift_release(v15);
        __break(1u);
      }
      v3 = v31;
    }
    swift_release(v15);
    v15 = *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * v21);
    sub_1000C0C14(v21, (uint64_t)&OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_id, &qword_1000FB2A0, &qword_1000FB2A8);
    if ((static UUIDIdentifier.== infix(_:_:)(v16, v15 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_id, v25) & 1) != 0)
    {
      *v3 = v33;
      return;
    }
    __break(1u);
  }
  swift_release(v15);
  __break(1u);
}

unint64_t sub_1000C0A64(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)(v22, *(_QWORD *)(v3 + 40));
        swift_retain(v10);
        sub_10008B000();
        v11 = Hasher._finalize()();
        swift_release(v10);
        v12 = v11 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_15:
            v15 = *(_QWORD *)(v3 + 48);
            v16 = (_QWORD *)(v15 + 8 * v2);
            v17 = (_QWORD *)(v15 + 8 * v6);
            v18 = v2 != v6 || v16 >= v17 + 1;
            v2 = v6;
            if (v18)
            {
              *v16 = *v17;
              v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_15;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v19 = *(_QWORD *)(v3 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_1000C0C14(unint64_t result, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  Swift::Int v20;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD v31[9];

  v5 = result;
  v6 = *v4;
  v7 = *v4 + 56;
  v8 = -1 << *(_BYTE *)(*v4 + 32);
  v9 = (result + 1) & ~v8;
  if (((1 << v9) & *(_QWORD *)(v7 + 8 * (v9 >> 6))) != 0)
  {
    v11 = ~v8;
    sub_10002B400();
    v12 = sub_1000C46FC();
    v14 = _HashTable.previousHole(before:)(v12, v13, v11);
    if ((*(_QWORD *)(v7 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      v15 = (v14 + 1) & v11;
      do
      {
        v16 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v9);
        Hasher.init(_seed:)(v31, *(_QWORD *)(v6 + 40));
        sub_10001E8B0();
        v17 = sub_100002F78(a3);
        sub_100006744(a4, a3);
        dispatch thunk of Hashable.hash(into:)(v31, v17, v18);
        v19 = Hasher._finalize()();
        swift_release(v16);
        v20 = v19 & v11;
        if (v5 >= (uint64_t)v15)
        {
          if (v20 >= v15 && v5 >= v20)
          {
LABEL_15:
            v23 = *(_QWORD *)(v6 + 48);
            v24 = (_QWORD *)(v23 + 8 * v5);
            v25 = (_QWORD *)(v23 + 8 * v9);
            v26 = v5 != v9 || v24 >= v25 + 1;
            v5 = v9;
            if (v26)
            {
              *v24 = *v25;
              v5 = v9;
            }
          }
        }
        else if (v20 >= v15 || v5 >= v20)
        {
          goto LABEL_15;
        }
        v9 = (v9 + 1) & v11;
      }
      while (((*(_QWORD *)(v7 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    *(_QWORD *)(v7 + (((unint64_t)v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v5) - 1;
    result = sub_10001D930();
  }
  else
  {
    *(_QWORD *)(v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v27 = *(_QWORD *)(v6 + 16);
  v28 = __OFSUB__(v27, 1);
  v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v6 + 16) = v29;
    ++*(_DWORD *)(v6 + 36);
  }
  return result;
}

void sub_1000C0DF4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  unint64_t *v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t *v33;
  void (*v34)(uint64_t, unint64_t, uint64_t);
  uint64_t *v35;
  unint64_t *v36;
  uint64_t v37;
  uint64_t v38;

  sub_10001D810();
  v35 = v2;
  v36 = v3;
  v5 = v4;
  v6 = sub_10001E23C(v4, v2);
  v37 = *(_QWORD *)(v6 - 8);
  sub_10001DD00();
  __chkstk_darwin(v7);
  sub_10008F254();
  v8 = *v0;
  v9 = *v0 + 56;
  v10 = -1 << *(_BYTE *)(*v0 + 32);
  v11 = (v5 + 1) & ~v10;
  if (((1 << v11) & *(_QWORD *)(v9 + 8 * (v11 >> 6))) != 0)
  {
    v33 = v0;
    v12 = ~v10;
    sub_10001E8B0();
    v13 = _HashTable.previousHole(before:)(v5, v9, v12);
    if ((*(_QWORD *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      v14 = (v13 + 1) & v12;
      v38 = *(_QWORD *)(v37 + 72);
      v34 = *(void (**)(uint64_t, unint64_t, uint64_t))(v37 + 16);
      while (1)
      {
        v15 = v9;
        v16 = v38 * v11;
        v34(v1, *(_QWORD *)(v8 + 48) + v38 * v11, v6);
        v17 = v14;
        v18 = *(_QWORD *)(v8 + 40);
        sub_100006744(v36, v35);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v6, v19);
        sub_10002BADC(v1, *(uint64_t (**)(uint64_t, uint64_t))(v37 + 8));
        v21 = v20 & v12;
        v14 = v17;
        if (v5 >= (uint64_t)v17)
        {
          if (v21 < v17 || v5 < v21)
            goto LABEL_24;
        }
        else if (v21 < v17 && v5 < v21)
        {
          goto LABEL_24;
        }
        v24 = *(_QWORD *)(v8 + 48);
        v25 = v38 * v5;
        v26 = v24 + v38 * v5;
        v27 = v24 + v16 + v38;
        if (v38 * v5 < v16 || v26 >= v27)
          break;
        v5 = v11;
        if (v25 != v16)
        {
          swift_arrayInitWithTakeBackToFront();
          goto LABEL_23;
        }
LABEL_24:
        v11 = (v11 + 1) & v12;
        v9 = v15;
        if (((*(_QWORD *)(v15 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
          goto LABEL_25;
      }
      swift_arrayInitWithTakeFrontToBack();
LABEL_23:
      v5 = v11;
      goto LABEL_24;
    }
LABEL_25:
    *(_QWORD *)(v9 + (((unint64_t)v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v5) - 1;
    swift_release(v8);
    v0 = v33;
  }
  else
  {
    *(_QWORD *)(v9 + (((unint64_t)v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v5) - 1;
  }
  v29 = *v0;
  v30 = *(_QWORD *)(*v0 + 16);
  v31 = __OFSUB__(v30, 1);
  v32 = v30 - 1;
  if (v31)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v29 + 16) = v32;
    ++*(_DWORD *)(v29 + 36);
    sub_100006A68();
  }
}

void sub_1000C1034(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16) < a1)
  {
    __break(1u);
  }
  else if ((a1 & 0x8000000000000000) == 0)
  {
    type metadata accessor for InferenceProviderDescriptor(0);
    sub_10001EA78();
    sub_10001E338();
    sub_100049140();
    return;
  }
  __break(1u);
}

void sub_1000C109C(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16) < a1)
  {
    __break(1u);
  }
  else if ((a1 & 0x8000000000000000) == 0)
  {
    swift_bridgeObjectRetain(a2);
    sub_100049140();
    return;
  }
  __break(1u);
}

uint64_t sub_1000C10F0(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16) < result)
  {
    __break(1u);
  }
  else if ((result & 0x8000000000000000) == 0)
  {
    type metadata accessor for UUID(0);
    return swift_retain(a2);
  }
  __break(1u);
  return result;
}

unint64_t sub_1000C1168(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a2 + 16) > result)
  {
    return swift_retain(*(_QWORD *)(a2 + 8 * result + 32));
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000C118C(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, _QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  result = a1(&v8, a3 + ((v6 + 32) & ~v6), *(_QWORD *)(a3 + 16));
  if (!v3)
    return (_QWORD *)v8;
  return result;
}

void sub_1000C1208()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;

  sub_10001D810();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = type metadata accessor for InferenceProviderDescriptor(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_10001E654();
  v9 = *v4;
  sub_100006710(&qword_1000FD9B8, v10);
  dispatch thunk of Hashable._rawHashValue(seed:)(v9, v7, v11);
  sub_1000C44C8();
  if (v14)
  {
    __break(1u);
  }
  else
  {
    v39 = _HashTable.UnsafeHandle._startIterator(bucket:)(v13 & v12, v4, v2);
    v22 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))_HashTable.BucketIterator.currentValue.getter)(v39, v15, v16, v17, v18, v19, v20, v21);
    if ((v23 & 1) == 0)
    {
      v24 = *(_QWORD *)(v8 + 72);
      v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
      do
      {
        v25(v0, v6 + v24 * v22, v7);
        sub_100006710(&qword_1000FD9B0, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
        v26 = sub_1000C46FC();
        v29 = dispatch thunk of static Equatable.== infix(_:_:)(v26, v27, v7, v28);
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0, v7);
        if ((v29 & 1) != 0)
          break;
        _HashTable.BucketIterator.advance()();
        v22 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))_HashTable.BucketIterator.currentValue.getter)(v30, v31, v32, v33, v34, v35, v36, v37);
      }
      while ((v38 & 1) == 0);
    }
  }
}

void sub_1000C13C0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;

  sub_1000C42D8(a1, a2, a3, a4, a5, a6, a7, a8, v53, v57, v61, v65, v68);
  AssetInferenceProvider.hash(into:)((uint64_t)&v82);
  Hasher._finalize()();
  sub_1000C44C8();
  if (v12)
  {
    __break(1u);
  }
  else
  {
    v13 = sub_1000C46A8(v10, v11);
    v21 = sub_1000C450C(v13, v14, v15, v16, v17, v18, v19, v20, v54, v58, v62, v66, v69, v72, v74, v77, v79, v82, v83,
            v84,
            v85,
            v86,
            *((uint64_t *)&v86 + 1),
            v87);
    sub_1000C4524(v21, v22, v23, v24, v25, v26, v27, v28, v55, v59, v63, v67, v70, v73, v75, v78, v80, v82, v83,
      v84,
      v85,
      v86);
    if ((v29 & 1) == 0)
    {
      v30 = *(_QWORD *)v9;
      v31 = *(_QWORD *)(v9 + 8);
      do
      {
        v32 = v8 + 40 * v21;
        v33 = *(_QWORD *)(v32 + 8);
        v35 = *(_QWORD *)(v32 + 16);
        v34 = *(_QWORD *)(v32 + 24);
        v36 = *(unsigned __int8 *)(v32 + 32);
        v37 = *(_QWORD *)v32 == v30 && v33 == v31;
        if (v37 || (sub_10001DB04(*(_QWORD *)v32, v33, v30, v31) & 1) != 0)
        {
          v38 = *(_QWORD *)(v9 + 24);
          if (v34)
          {
            if (v38)
            {
              v39 = v35 == *(_QWORD *)(v9 + 16) && v34 == v38;
              if (v39 || (v40 = sub_1000C48DC(), (sub_10001DB04(v40, v41, v42, v43) & 1) != 0))
              {
LABEL_18:
                if (v36 == (*(_BYTE *)(v9 + 32) & 1))
                  return;
              }
            }
          }
          else if (!v38)
          {
            goto LABEL_18;
          }
        }
        _HashTable.BucketIterator.advance()();
        v21 = sub_1000C40F0(v44, v45, v46, v47, v48, v49, v50, v51, v56, v60, v64, v71, v76, v81, v82, v83, v84, v85, v86,
                *((uint64_t *)&v86 + 1),
                v87);
      }
      while ((v52 & 1) == 0);
    }
  }
}

uint64_t sub_1000C14DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char v61;

  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a4;
  sub_100006710(&qword_1000FB638, v14);
  result = dispatch thunk of Hashable._rawHashValue(seed:)(v13, v9, v15);
  v17 = 1 << *a4;
  v18 = __OFSUB__(v17, 1);
  v19 = v17 - 1;
  if (v18)
  {
    __break(1u);
  }
  else
  {
    v20 = v19 & result;
    v21 = _HashTable.UnsafeHandle._startIterator(bucket:)(v19 & result, a4, a5);
    *(_QWORD *)&v58 = a4;
    *((_QWORD *)&v58 + 1) = a5;
    *(_QWORD *)&v59 = v20;
    *((_QWORD *)&v59 + 1) = v21;
    *(_QWORD *)&v60 = v22;
    *((_QWORD *)&v60 + 1) = v23;
    v61 = 0;
    v29 = _HashTable.BucketIterator.currentValue.getter(v21, v22, v23, v24, v25, v26, v27, v28, v44, v45, v46, *((_QWORD *)&v46 + 1), v47, *((_QWORD *)&v47 + 1), v48, *((_QWORD *)&v48 + 1), v49, v50, v51,
            v52,
            v53,
            v54,
            v55,
            v56);
    v46 = v58;
    v47 = v59;
    v48 = v60;
    LOBYTE(v49) = v61;
    if ((v30 & 1) == 0)
    {
      v31 = *(_QWORD *)(v10 + 72);
      v32 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
      do
      {
        v32(v12, a2 + v31 * v29, v9);
        sub_100006710(&qword_1000FB640, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
        v34 = dispatch thunk of static Equatable.== infix(_:_:)(v12, a1, v9, v33);
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
        if ((v34 & 1) != 0)
          break;
        _HashTable.BucketIterator.advance()();
        v57 = v49;
        v29 = _HashTable.BucketIterator.currentValue.getter(v35, v36, v37, v38, v39, v40, v41, v42, v44, v45, v46, *((_QWORD *)&v46 + 1), v47, *((_QWORD *)&v47 + 1), v48, *((_QWORD *)&v48 + 1), v49, v50, v46,
                *((_QWORD *)&v46 + 1),
                v47,
                *((_QWORD *)&v47 + 1),
                v48,
                *((_QWORD *)&v48 + 1));
      }
      while ((v43 & 1) == 0);
    }
    return v29;
  }
  return result;
}

void sub_1000C16B8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  sub_1000C42D8(a1, a2, a3, a4, a5, a6, a7, a8, v39, v43, v47, v51, v54);
  sub_10008B000();
  Hasher._finalize()();
  sub_1000C44C8();
  if (v10)
  {
    __break(1u);
  }
  else
  {
    v11 = sub_1000C46A8(v8, v9);
    v19 = sub_1000C450C(v11, v12, v13, v14, v15, v16, v17, v18, v40, v44, v48, v52, v55, v58, v60, v63, v65, v68, v71,
            v74,
            v77,
            v80,
            v83,
            v85);
    sub_1000C4524(v19, v20, v21, v22, v23, v24, v25, v26, v41, v45, v49, v53, v56, v59, v61, v64, v66, v69, v72,
      v75,
      v78,
      v81);
    if ((v27 & 1) == 0)
    {
      sub_10001E1D8();
      sub_10001E20C();
      v28 = sub_1000C4C34();
      sub_10001E098();
      if ((v28 & 1) == 0)
      {
        do
        {
          _HashTable.BucketIterator.advance()();
          sub_1000C40F0(v29, v30, v31, v32, v33, v34, v35, v36, v42, v46, v50, v57, v62, v67, v70, v73, v76, v79, v82,
            v84,
            v86);
          if ((v37 & 1) != 0)
            break;
          sub_10001E20C();
          v38 = sub_1000C4C34();
          sub_10001E098();
        }
        while ((v38 & 1) == 0);
      }
    }
  }
}

void sub_1000C17A0()
{
  uint64_t v0;
  _QWORD *v1;

  if (!*v1 || swift_isUniquelyReferenced_native())
    goto LABEL_5;
  if (*v1)
  {
    _HashTable.copy()();
    sub_1000C4648();
    *v1 = v0;
LABEL_5:
    sub_100006C14();
    return;
  }
  __break(1u);
}

void sub_1000C17DC()
{
  sub_1000C1820();
}

void sub_1000C17E8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  unint64_t *v7;

  v2 = sub_1000C4490();
  sub_1000C18CC(v2, v3, v4, v5, v6, v7);
  sub_1000C4648();
  *v1 = v0;
  sub_100006C14();
}

void sub_1000C1814()
{
  sub_1000C1820();
}

void sub_1000C1820()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);

  v2 = sub_1000C4490();
  sub_1000C1850(v2, v3, v4, v5, v6);
  sub_1000C4648();
  *v1 = v0;
  sub_100006C14();
}

void sub_1000C1844(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_1000C1850(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t))sub_1000C196C);
}

void sub_1000C1850(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = static _HashTable.scale(forCapacity:)(*(_QWORD *)(a1 + 16));
  if ((a3 & 1) != 0)
    v11 = 0;
  else
    v11 = a2;
  if (v11 <= v10)
    v11 = v10;
  if (v11 <= a4)
    v12 = a4;
  else
    v12 = v11;
  if (v12 >= 5)
  {
    v13 = _HashTable.init(scale:reservedScale:)();
    a5(a1, v13 + 16, v13 + 32);
  }
  sub_10001E7B4();
}

void sub_1000C18CC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(uint64_t), unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v12 = static _HashTable.scale(forCapacity:)(*(_QWORD *)(a1 + 16));
  if ((a3 & 1) != 0)
    v13 = 0;
  else
    v13 = a2;
  if (v13 <= v12)
    v13 = v12;
  if (v13 <= a4)
    v14 = a4;
  else
    v14 = v13;
  if (v14 >= 5)
  {
    v15 = _HashTable.init(scale:reservedScale:)();
    sub_1000C1AE8(a1, (_QWORD *)(v15 + 16), v15 + 32, a5, a6);
  }
  sub_10001D950();
}

void sub_1000C1960(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_1000C1850(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t))sub_1000C1BF4);
}

Swift::Int sub_1000C196C(Swift::Int result, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt8 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v6 = 0;
    v22 = result + 32;
    while (1)
    {
      v7 = v22 + 40 * v6;
      v8 = *(_QWORD *)v7;
      v9 = *(_QWORD *)(v7 + 8);
      v11 = *(_QWORD *)(v7 + 16);
      v10 = *(_QWORD *)(v7 + 24);
      v12 = *(_BYTE *)(v7 + 32);
      Hasher.init(_seed:)(v23, *a2);
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v9);
      String.hash(into:)(v23, v8, v9);
      if (v10)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain(v10);
        String.hash(into:)(v23, v11, v10);
        swift_bridgeObjectRelease(v10);
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      Hasher._combine(_:)(v12);
      result = Hasher._finalize()();
      v13 = 1 << *a2;
      v14 = __OFSUB__(v13, 1);
      v15 = v13 - 1;
      if (v14)
        break;
      v16 = v15 & result;
      v17 = _HashTable.UnsafeHandle._startIterator(bucket:)(v15 & result, a2, a3);
      v19 = v18;
      v21 = v20;
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v9);
      v23[0] = a2;
      v23[1] = a3;
      v23[2] = v16;
      v24 = v17;
      v25 = v19;
      v26 = v21;
      v27 = 0;
      while (v24)
        _HashTable.BucketIterator.advance()();
      result = _HashTable.BucketIterator.currentValue.setter(v6++, 0);
      if (v6 == v3)
        return result;
    }
    __break(1u);
  }
  return result;
}

void sub_1000C1AE8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v10 = a4(0);
    sub_1000C459C();
    sub_100006710(a5, a4);
    v12 = v11;
    v13 = 0;
    while (1)
    {
      dispatch thunk of Hashable._rawHashValue(seed:)(*a2, v10, v12);
      sub_1000C44C8();
      if (v16)
        break;
      if (_HashTable.UnsafeHandle._startIterator(bucket:)(v15 & v14, a2, a3))
      {
        while (1)
          _HashTable.BucketIterator.advance()();
      }
      _HashTable.BucketIterator.currentValue.setter(v13++, 0);
      if (v13 == v5)
        return;
    }
    __break(1u);
  }
}

Swift::Int sub_1000C1BF4(Swift::Int result, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v6 = 0;
    v7 = result + 32;
    while (1)
    {
      v8 = *(_QWORD *)(v7 + 8 * v6);
      Hasher.init(_seed:)(v18, *a2);
      swift_retain();
      sub_10008B000();
      result = Hasher._finalize()();
      v9 = 1 << *a2;
      v10 = __OFSUB__(v9, 1);
      v11 = v9 - 1;
      if (v10)
        break;
      v12 = v11 & result;
      v13 = _HashTable.UnsafeHandle._startIterator(bucket:)(v11 & result, a2, a3);
      v15 = v14;
      v17 = v16;
      swift_release(v8);
      v18[0] = a2;
      v18[1] = a3;
      v18[2] = v12;
      v19 = v13;
      v20 = v15;
      v21 = v17;
      v22 = 0;
      while (v19)
        _HashTable.BucketIterator.advance()();
      result = _HashTable.BucketIterator.currentValue.setter(v6++, 0);
      if (v6 == v3)
        return result;
    }
    __break(1u);
  }
  return result;
}

void sub_1000C1CFC()
{
  sub_1000C1E84();
}

void sub_1000C1D20(__int128 *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  char *v10;
  int64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE v20[24];
  _BYTE v21[16];
  __int128 v22;

  v3 = v2;
  v22 = *a1;
  sub_100048F58((uint64_t)(a1 + 1), (uint64_t)v21, &qword_1000FD9C0);
  v8 = v2[1];
  v6 = v2 + 1;
  v7 = v8;
  sub_10007CC70((uint64_t)&v22);
  sub_10007CC70((uint64_t)v21);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
  *v6 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v10 = (char *)sub_1000C48B4();
    sub_100011794(v10, v11, v12);
    v7 = *v6;
  }
  v14 = *(_QWORD *)(v7 + 16);
  v13 = *(_QWORD *)(v7 + 24);
  if (v14 >= v13 >> 1)
  {
    sub_100011794((char *)(v13 > 1), v14 + 1, 1);
    v7 = *v6;
  }
  *(_QWORD *)(v7 + 16) = v14 + 1;
  v15 = v7 + 40 * v14;
  v16 = *a1;
  v17 = a1[1];
  *(_BYTE *)(v15 + 64) = *((_BYTE *)a1 + 32);
  *(_OWORD *)(v15 + 32) = v16;
  *(_OWORD *)(v15 + 48) = v17;
  v3[1] = v7;
  v18 = *(_QWORD *)(v7 + 16);
  v19 = *v3;
  if (!*v3)
  {
    if (v18 <= 0xF)
      goto LABEL_14;
    goto LABEL_11;
  }
  sub_10002B2E0(v19 + 16, (uint64_t)v20);
  if (static _HashTable.maximumCapacity(forScale:)(*(_QWORD *)(v19 + 16) & 0x3FLL) < (uint64_t)v18)
  {
    if (v18 <= 0xF && (*(_QWORD *)(v19 + 24) & 0x3FLL) == 0)
    {
      sub_10001DEEC();
      *v3 = 0;
LABEL_14:
      sub_1000C43C8();
      return;
    }
LABEL_11:
    static _HashTable.scale(forCapacity:)(v18);
    sub_1000C1820();
    goto LABEL_14;
  }
  sub_1000C17A0();
  if (*v3)
  {
    sub_1000C4B50((_QWORD *)(*v3 + 16), *v3 + 32, a2);
    goto LABEL_14;
  }
  __break(1u);
}

void sub_1000C1E84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  void (*v6)(uint64_t);
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  sub_10001D810();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = (_QWORD *)v0;
  v25 = v8;
  v11 = sub_1000C4CC0(v9, v8, v10);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v24 - v13;
  sub_10001EB74((uint64_t)&v24 - v13, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16));
  v15 = (uint64_t *)(v0 + 8);
  v16 = v7[1];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v16);
  *v15 = v16;
  v26 = v4;
  v27 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v18 = sub_1000C48B4();
    v6(v18);
    v16 = *v15;
  }
  v20 = *(_QWORD *)(v16 + 16);
  v19 = *(_QWORD *)(v16 + 24);
  if (v20 >= v19 >> 1)
  {
    ((void (*)(BOOL, unint64_t, uint64_t))v6)(v19 > 1, v20 + 1, 1);
    v16 = *v15;
  }
  *(_QWORD *)(v16 + 16) = v20 + 1;
  sub_10001EA78();
  sub_10001EB74(v16 + v21 + *(_QWORD *)(v12 + 72) * v20, (uint64_t)v14, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 32));
  v7[1] = v16;
  v22 = *(_QWORD *)(v16 + 16);
  v23 = *v7;
  if (!*v7)
  {
    if (v22 <= 0xF)
      goto LABEL_14;
    goto LABEL_11;
  }
  sub_10002B2E0(v23 + 16, (uint64_t)&v28);
  if (static _HashTable.maximumCapacity(forScale:)(*(_QWORD *)(v23 + 16) & 0x3FLL) < (uint64_t)v22)
  {
    if (v22 <= 0xF && (*(_QWORD *)(v23 + 24) & 0x3FLL) == 0)
    {
      sub_10001DBEC();
      *v7 = 0;
LABEL_14:
      sub_100006A68();
      return;
    }
LABEL_11:
    static _HashTable.scale(forCapacity:)(v22);
    sub_1000C17E8();
    goto LABEL_14;
  }
  sub_1000C17A0();
  if (*v7)
  {
    sub_1000C4B50((_QWORD *)(*v7 + 16), *v7 + 32, v25);
    goto LABEL_14;
  }
  __break(1u);
}

uint64_t sub_1000C201C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 16) + ~((uint64_t)a1[1] >> 6);
  return _HashTable.UnsafeHandle.subscript.setter((-1 << *a1) ^ ~(((v4 >> 63) & ~(-1 << *a1)) + v4), a3, a1, a2);
}

void sub_1000C2080(int64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE v17[24];

  v4 = v3;
  v7 = v3 + 1;
  v8 = *(_QWORD *)(v3[1] + 16);
  v9 = *v4;
  if (!*v4)
  {
    if (!v8)
      goto LABEL_13;
LABEL_12:
    sub_1000C22B8(a1, a3);
    return;
  }
  swift_beginAccess(v9 + 16, &v16, 0, 0);
  if ((*(_QWORD *)(v9 + 16) & 0x3FLL) == (*(_QWORD *)(v9 + 24) & 0x3FLL))
  {
    if (!v8)
      goto LABEL_13;
LABEL_8:
    sub_1000C17A0();
    v11 = *v4;
    if (*v4)
    {
      swift_retain();
      sub_1000C23AC(a2, (uint64_t *)(v11 + 16), v11 + 32, (uint64_t)v4);
      if (__OFADD__(a1, 1))
      {
        __break(1u);
      }
      else if (a1 + 1 >= a1)
      {
        v12 = v4[1];
        swift_retain();
        sub_1000C2628(a1, a1 + 1, v12, (_QWORD *)(v11 + 16), v11 + 32);
        swift_release(v11);
        swift_release(v12);
        goto LABEL_12;
      }
      __break(1u);
    }
    __break(1u);
    return;
  }
  if (v8 > static _HashTable.minimumCapacity(forScale:)())
    goto LABEL_8;
LABEL_13:
  sub_1000C22B8(a1, a3);
  v13 = *v7;
  if (v9)
  {
    swift_beginAccess(v9 + 16, v17, 0, 0);
    v14 = *(_QWORD *)(v9 + 24) & 0x3FLL;
  }
  else
  {
    v14 = 0;
  }
  v15 = *(_QWORD *)(v13 + 16);
  if (v14 || v15 >= 0x10)
  {
    static _HashTable.scale(forCapacity:)(v15);
    sub_1000C17E8();
  }
  else
  {
    swift_release(v9);
    *v4 = 0;
  }
}

uint64_t sub_1000C223C(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v3;
  if ((result & 1) == 0)
  {
    result = sub_1000C2398(v3);
    v3 = result;
    *v1 = result;
  }
  v5 = *(_QWORD *)(v3 + 16);
  if (v5 <= a1)
  {
    __break(1u);
  }
  else
  {
    v6 = v5 - 1;
    v7 = v5 - 1 - a1;
    v8 = v3 + 8 * a1;
    v9 = *(_QWORD *)(v8 + 32);
    v10 = sub_10000FB88(v8 + 40, v7, v8 + 32);
    *(_QWORD *)(v3 + 16) = v6;
    specialized ContiguousArray._endMutation()(v10);
    return v9;
  }
  return result;
}

void sub_1000C22B8(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native(*v2) & 1) == 0)
  {
    sub_1000C2384();
    v5 = v6;
  }
  v7 = *(_QWORD *)(v5 + 16);
  if (v7 <= a1)
  {
    __break(1u);
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    v9 = *(_QWORD *)(v8 - 8);
    v10 = *(_QWORD *)(v9 + 72);
    v11 = v5 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)) + v10 * a1;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 32))(a2, v11, v8);
    sub_10000FC00(v11 + v10, v7 - 1 - a1);
    *(_QWORD *)(v5 + 16) = v7 - 1;
    *v2 = v5;
  }
}

void sub_1000C2370(uint64_t a1)
{
  sub_100011968(0, *(_QWORD *)(a1 + 16), 0, a1);
}

void sub_1000C2384()
{
  sub_100011BEC();
}

uint64_t sub_1000C2398(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

unint64_t sub_1000C23AC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  unint64_t result;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v47;
  char v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;

  v54 = a4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = _HashTable.UnsafeHandle._startIterator(bucket:)(a1, a2, a3);
  *(_QWORD *)&v55 = a2;
  *((_QWORD *)&v55 + 1) = a3;
  v56 = a1;
  v57 = v11;
  v58 = v12;
  v59 = v13;
  LOBYTE(v60) = 0;
  _HashTable.BucketIterator.advance()();
  v14 = v57;
  if (!v57)
    return _HashTable.UnsafeHandle.subscript.setter(0, a1, a2, a3);
  v15 = v60;
  v16 = a3;
  v18 = v58;
  v17 = v59;
  v19 = v56;
  v50 = v55;
  v52 = v16;
  v20 = _HashTable.UnsafeHandle.firstOccupiedBucketInChain(with:)(a1, a2);
  v28 = v50;
  v53 = v20;
  while (1)
  {
    v64 = v19;
    v65 = v14;
    v66 = v18;
    v67 = v17;
    v68 = v15 & 1;
    result = _HashTable.BucketIterator.currentValue.getter(v20, v21, v22, v23, v24, v25, v26, v27, v50, *((_QWORD *)&v50 + 1), v51, v52, v53, v54, v55, *((_QWORD *)&v55 + 1), v56, v57, v58,
               v59,
               v60,
               v61,
               v28,
               *((_QWORD *)&v28 + 1));
    if ((v30 & 1) != 0)
      break;
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
      break;
    }
    v31 = *(_QWORD *)(v54 + 8);
    if (result >= *(_QWORD *)(v31 + 16))
      goto LABEL_26;
    v32 = *a2;
    (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v10, v31+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * result, v7);
    sub_100006710(&qword_1000FB638, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    v34 = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v7, v33);
    result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v42 = 1 << *a2;
    v43 = v42 - 1;
    if (__OFSUB__(v42, 1))
      goto LABEL_27;
    v44 = v43 & v34;
    if (a1 >= v53)
    {
      if (v44 < v53 || a1 < v44)
        goto LABEL_22;
    }
    else if (v44 < v53 && a1 < v44)
    {
      goto LABEL_22;
    }
    v47 = _HashTable.BucketIterator.currentValue.getter(result, v35, v36, v37, v38, v39, v40, v41, v50, *((_QWORD *)&v50 + 1), v51, v52, v53, v54, v55, *((_QWORD *)&v55 + 1), v56, v57, v58,
            v59,
            v60,
            v61,
            v62,
            v63);
    if ((v48 & 1) != 0)
      v49 = 0;
    else
      v49 = ((v43 & ((v47 - (a2[1] >> 6)) >> 63)) + v47 - (a2[1] >> 6)) ^ v43;
    _HashTable.UnsafeHandle.subscript.setter(v49, a1, a2, v52);
    a1 = v19;
LABEL_22:
    _HashTable.BucketIterator.advance()();
    v28 = v55;
    v19 = v56;
    v14 = v57;
    v18 = v58;
    v17 = v59;
    v15 = v60;
    if (!v57)
      return _HashTable.UnsafeHandle.subscript.setter(0, a1, a2, v52);
  }
  __break(1u);
  return result;
}

void sub_1000C2628(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  char v121;

  v110 = a5;
  v108 = a3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v105 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v105 - v13;
  v15 = sub_100002F78(&qword_1000FED20);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v105 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v105 - v19;
  v21 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  if (v21 < 1)
    return;
  v22 = *(_QWORD *)(v108 + 16);
  v109 = a2 - a1;
  if ((uint64_t)(v22 - v21) / 2 > a1)
  {
    if (static _HashTable.maximumCapacity(forScale:)(*a4 & 0x3FLL) / 3 <= a1)
    {
      v73 = v110;
      v74 = _HashTable.UnsafeHandle._startIterator(bucket:)(0, a4, v110);
      v82 = 0;
      v111 = a4;
      v112 = v73;
      v113 = 0;
      *(_QWORD *)&v114 = v74;
      *((_QWORD *)&v114 + 1) = v75;
      v115 = v76;
      LOBYTE(v116) = 0;
      v83 = v109;
      while (1)
      {
        v118 = v82;
        v119 = v114;
        v120 = v115;
        v121 = v116;
        v84 = _HashTable.BucketIterator.currentValue.getter(v74, v75, v76, v77, v78, v79, v80, v81, v105, v106, v107, v108, v109, v110, v111, v112, v113, v114, *((_QWORD *)&v114 + 1),
                v115,
                v116,
                v117,
                v111,
                v112);
        if ((v85 & 1) == 0 && v84 < a1)
        {
          v30 = __OFADD__(v84, v83);
          v86 = v84 + v83;
          if (v30)
          {
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            __break(1u);
LABEL_64:
            __break(1u);
LABEL_65:
            __break(1u);
LABEL_66:
            __break(1u);
            goto LABEL_67;
          }
          _HashTable.BucketIterator.currentValue.setter(v86, 0);
        }
        _HashTable.BucketIterator.advance()();
        v82 = v113;
        if (!v113)
          goto LABEL_54;
      }
    }
    if (a1 < 0)
      goto LABEL_73;
    if (v22 < a1)
    {
LABEL_74:
      __break(1u);
      return;
    }
    if (a1)
    {
      v107 = v108 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
      v106 = *(_QWORD *)(v9 + 72);
      v23 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
      swift_retain();
      v24 = 0;
      v25 = v110;
      while (v24 != a1)
      {
        v23(v20, v107 + v106 * v24, v8);
        sub_100005630((uint64_t)v20, 0, 1, v8);
        if (sub_100005700((uint64_t)v20, 1, v8) == 1)
          goto LABEL_53;
        (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v20, v8);
        v26 = *a4;
        sub_100006710(&qword_1000FB638, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
        v28 = dispatch thunk of Hashable._rawHashValue(seed:)(v26, v8, v27);
        v29 = 1 << *a4;
        v30 = __OFSUB__(v29, 1);
        v31 = v29 - 1;
        if (v30)
          goto LABEL_63;
        v32 = v31 & v28;
        v33 = _HashTable.UnsafeHandle._startIterator(bucket:)(v31 & v28, a4, v25);
        v111 = a4;
        v112 = v25;
        v113 = v32;
        *(_QWORD *)&v114 = v33;
        *((_QWORD *)&v114 + 1) = v34;
        v115 = v35;
        LOBYTE(v116) = 0;
        if (v33)
        {
          v41 = 0;
          v42 = a4;
          v43 = v110;
          do
          {
            v118 = v32;
            *(_QWORD *)&v119 = v33;
            *((_QWORD *)&v119 + 1) = v34;
            v120 = v35;
            v121 = v41 & 1;
            v44 = _HashTable.BucketIterator.currentValue.getter(v33, v34, v35, v36, v37, v38, v39, v40, v105, v106, v107, v108, v109, v110, v111, v112, v113, v114, *((_QWORD *)&v114 + 1),
                    v115,
                    v116,
                    v117,
                    v42,
                    v43);
            if ((v45 & 1) == 0 && v44 == v24)
              break;
            _HashTable.BucketIterator.advance()();
            v43 = v112;
            v42 = v111;
            v32 = v113;
            v34 = *((_QWORD *)&v114 + 1);
            v33 = v114;
            v35 = v115;
            v41 = v116;
          }
          while ((_QWORD)v114);
        }
        v46 = v24 + v109;
        if (__OFADD__(v24, v109))
          goto LABEL_64;
        ++v24;
        _HashTable.BucketIterator.currentValue.setter(v46, 0);
        (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
        if (v24 == a1)
          goto LABEL_52;
      }
      goto LABEL_62;
    }
    swift_retain();
LABEL_52:
    sub_100005630((uint64_t)v20, 1, 1, v8);
LABEL_53:
    swift_release(v108);
    v83 = v109;
LABEL_54:
    v101 = a4[1];
    if (!__OFSUB__(v101 >> 6, v83))
    {
      v102 = 1 << *a4;
      v30 = __OFSUB__(v102, 1);
      v103 = v102 - 1;
      if (!v30)
      {
        v104 = (v103 & (((v101 >> 6) - v83) >> 63)) + (v101 >> 6) - v83;
        if (v104 < v103)
          v103 = 0;
        a4[1] = a4[1] & 0x3FLL | ((v104 - v103) << 6);
        return;
      }
      goto LABEL_72;
    }
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  v30 = __OFSUB__(v22, a2);
  v47 = v22 - a2;
  if (v30)
  {
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  if (v47 >= static _HashTable.maximumCapacity(forScale:)(*a4 & 0x3FLL) / 3)
  {
    v87 = v110;
    v88 = _HashTable.UnsafeHandle._startIterator(bucket:)(0, a4, v110);
    v96 = 0;
    v111 = a4;
    v112 = v87;
    v113 = 0;
    *(_QWORD *)&v114 = v88;
    *((_QWORD *)&v114 + 1) = v89;
    v115 = v90;
    LOBYTE(v116) = 0;
    v97 = v109;
    do
    {
      v118 = v96;
      v119 = v114;
      v120 = v115;
      v121 = v116;
      v98 = _HashTable.BucketIterator.currentValue.getter(v88, v89, v90, v91, v92, v93, v94, v95, v105, v106, v107, v108, v109, v110, v111, v112, v113, v114, *((_QWORD *)&v114 + 1),
              v115,
              v116,
              v117,
              v111,
              v112);
      if ((v99 & 1) == 0 && v98 >= a2)
      {
        v30 = __OFSUB__(v98, v97);
        v100 = v98 - v97;
        if (v30)
          goto LABEL_61;
        _HashTable.BucketIterator.currentValue.setter(v100, 0);
      }
      _HashTable.BucketIterator.advance()();
      v96 = v113;
    }
    while (v113);
  }
  else
  {
    v107 = sub_1000C10F0(a2, v108);
    v108 = v48;
    if (v49 == v50 >> 1)
    {
LABEL_35:
      sub_100005630((uint64_t)v18, 1, 1, v8);
    }
    else
    {
      v51 = v49;
      v52 = v50 >> 1;
      v53 = v110;
      while (1)
      {
        if (v51 >= v52)
          goto LABEL_65;
        (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v18, v108 + *(_QWORD *)(v9 + 72) * v51, v8);
        sub_100005630((uint64_t)v18, 0, 1, v8);
        if (sub_100005700((uint64_t)v18, 1, v8) == 1)
          break;
        (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v18, v8);
        v54 = *a4;
        sub_100006710(&qword_1000FB638, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
        v56 = dispatch thunk of Hashable._rawHashValue(seed:)(v54, v8, v55);
        v57 = 1 << *a4;
        v30 = __OFSUB__(v57, 1);
        v58 = v57 - 1;
        if (v30)
          goto LABEL_66;
        v59 = v58 & v56;
        v60 = _HashTable.UnsafeHandle._startIterator(bucket:)(v58 & v56, a4, v53);
        v111 = a4;
        v112 = v53;
        v113 = v59;
        *(_QWORD *)&v114 = v60;
        *((_QWORD *)&v114 + 1) = v61;
        v115 = v62;
        LOBYTE(v116) = 0;
        if (v60)
        {
          v68 = 0;
          v69 = a4;
          v70 = v110;
          do
          {
            v118 = v59;
            *(_QWORD *)&v119 = v60;
            *((_QWORD *)&v119 + 1) = v61;
            v120 = v62;
            v121 = v68 & 1;
            v71 = _HashTable.BucketIterator.currentValue.getter(v60, v61, v62, v63, v64, v65, v66, v67, v105, v106, v107, v108, v109, v110, v111, v112, v113, v114, *((_QWORD *)&v114 + 1),
                    v115,
                    v116,
                    v117,
                    v69,
                    v70);
            if ((v72 & 1) == 0 && v71 == a2)
              break;
            _HashTable.BucketIterator.advance()();
            v70 = v112;
            v69 = v111;
            v59 = v113;
            v61 = *((_QWORD *)&v114 + 1);
            v60 = v114;
            v62 = v115;
            v68 = v116;
          }
          while ((_QWORD)v114);
        }
        if (__OFSUB__(a2, v109))
        {
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
          goto LABEL_69;
        }
        _HashTable.BucketIterator.currentValue.setter(a2 - v109, 0);
        (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
        v30 = __OFADD__(a2++, 1);
        if (v30)
          goto LABEL_68;
        if (++v51 == v52)
          goto LABEL_35;
      }
    }
    swift_unknownObjectRelease(v107);
  }
}

void sub_1000C2C88()
{
  uint64_t v0;
  void *v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;

  v1 = sub_1000C4138();
  v2 = (uint64_t *)sub_1000C43B4((uint64_t)v1);
  *(_QWORD *)(v0 + 32) = sub_1000C2D48(v2, v3, v4);
  sub_100049140();
}

void sub_1000C2CBC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = sub_1000C4138();
  v2 = sub_1000C43B4((uint64_t)v1);
  sub_1000C2DB4(v2, v3, v4);
  *(_QWORD *)(v0 + 32) = v5;
  sub_100049140();
}

void sub_1000C2CEC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = sub_1000C4138();
  v2 = sub_1000C43B4((uint64_t)v1);
  sub_1000C2DF8(v2, v3, v4);
  *(_QWORD *)(v0 + 32) = v5;
  sub_100049140();
}

void sub_1000C2D1C(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*sub_1000C2D48(uint64_t *a1, unint64_t a2, uint64_t a3))(_QWORD *)
{
  unint64_t v6;
  uint64_t v7;

  v6 = a3 & 0xC000000000000001;
  sub_1000BF90C(a2, (a3 & 0xC000000000000001) == 0, a3);
  if (v6)
    v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
  else
    v7 = swift_retain(*(_QWORD *)(a3 + 8 * a2 + 32));
  *a1 = v7;
  return sub_1000C3B20;
}

void sub_1000C2DB4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000C4210(a1, a2, a3);
  if (v6)
    v7 = sub_1000C4958(v5);
  else
    v7 = sub_1000C4374(v4 + 8 * v5);
  *v3 = v7;
  sub_100049140();
}

void sub_1000C2DF8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000C4210(a1, a2, a3);
  if (v6)
    v7 = sub_1000C4958(v5);
  else
    v7 = sub_1000C4374(v4 + 8 * v5);
  *v3 = v7;
  sub_100049140();
}

uint64_t sub_1000C2E3C(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t sub_1000C2E44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RequestManagerPolicy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C2E88()
{
  uint64_t v0;

  sub_10007F858();
  sub_10007FBE8();
  sub_10002BE14();
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000C2EB0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v5 = v0[4];
  v4 = v0[5];
  v6 = (_QWORD *)swift_task_alloc(dword_1000FF694);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_10001CA84;
  return sub_1000BCAB4(v2, v3, v5, v4);
}

uint64_t sub_1000C2F18()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = swift_task_alloc(dword_1000FF6A4);
  v1 = (_QWORD *)sub_100006AF4(v0);
  v2 = sub_100006AD8(v1);
  return sub_1000BE1E8(v2, v3, v4, v5);
}

uint64_t sub_1000C2F6C()
{
  uint64_t v0;

  sub_10007FBE8();
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000C2F90()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_10001DB50();
  sub_10001D864();
  v0 = swift_task_alloc(dword_1000FF6BC);
  v1 = (_QWORD *)sub_100006AF4(v0);
  sub_1000C3C1C(v1);
  sub_10001DB20();
  return sub_1000BBA18(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_1000C2FDC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_10001DD0C();
  v1 = swift_task_alloc(dword_1000FF6D4);
  v2 = (_QWORD *)sub_100006AF4(v1);
  *v2 = v0;
  v2[1] = sub_10001D668;
  sub_1000C447C();
  return sub_1000BBBA8(v3, v4, v5, v6, v7);
}

double sub_1000C3040()
{
  uint64_t v0;

  return sub_1000BC140(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000C3048()
{
  uint64_t v0;

  sub_10002BBD8();
  sub_10001E390();
  sub_10002BE14();
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000C3070()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_10001DD0C();
  v1 = swift_task_alloc(dword_1000FF6E4);
  v2 = (_QWORD *)sub_100006AF4(v1);
  *v2 = v0;
  v2[1] = sub_10001D668;
  sub_1000C447C();
  return sub_1000BC240(v3, v4, v5, v6, v7);
}

uint64_t sub_1000C30D8()
{
  uint64_t v0;

  sub_10002BBD8();
  sub_10001E390();
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000C30FC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = swift_task_alloc(dword_1000FF6FC);
  v1 = (_QWORD *)sub_100006AF4(v0);
  v2 = sub_100006AD8(v1);
  return sub_1000BE174(v2, v3, v4, v5);
}

uint64_t sub_1000C3150()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  sub_100006C08();
  v0 = sub_100006BC0();
  v1 = (_QWORD *)sub_100006AF4(v0);
  v2 = sub_1000068F0(v1);
  return sub_1000068E0(v2, v3, v4, v5);
}

uint64_t sub_1000C3190()
{
  uint64_t v0;

  sub_10007F858();
  sub_10007FBE8();
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000C31B4(uint64_t a1)
{
  uint64_t v1;

  return sub_1000BA93C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000C31BC(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v12;
  _QWORD *v13;

  v12 = *a6;
  v13 = (_QWORD *)swift_task_alloc(dword_1000FF82C);
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = sub_10001D668;
  return sub_1000B2D48(a1, a2, a3, a4, a5, v12);
}

void sub_1000C3244(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  char v23;
  _QWORD v24[2];
  uint64_t v25;

  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    swift_retain();
    a2 = sub_1000C14DC(a4, a1, a2, (uint64_t *)(a3 + 16), a3 + 32);
    v16 = v15;
    v18 = v17;
    swift_release(a3);
    v19 = v16 & 1;
  }
  else if (a2)
  {
    v25 = a2;
    v24[0] = a5;
    v24[1] = v5;
    a2 = 0;
    v20 = *(_QWORD *)(v12 + 72);
    v21 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    while (1)
    {
      v21(v14, a1, v11);
      sub_100006710(&qword_1000FB640, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
      v23 = dispatch thunk of static Equatable.== infix(_:_:)(v14, a4, v11, v22);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      if ((v23 & 1) != 0)
        break;
      ++a2;
      a1 += v20;
      if (v25 == a2)
      {
        a2 = 0;
        break;
      }
    }
    v18 = 0;
    v19 = v23 ^ 1;
    a5 = v24[0];
  }
  else
  {
    v18 = 0;
    v19 = 1;
  }
  *(_QWORD *)a5 = a2;
  *(_BYTE *)(a5 + 8) = v19 & 1;
  *(_QWORD *)(a5 + 16) = v18;
}

void sub_1000C33D0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  sub_1000C3244(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 32), a3);
}

uint64_t sub_1000C33F0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_10001DB50();
  sub_10001D864();
  v0 = swift_task_alloc(dword_1000FF724);
  v1 = (_QWORD *)sub_100006AF4(v0);
  sub_1000C3C1C(v1);
  sub_10001DB20();
  return sub_1000B9FA8(v2, v3, v4, v5, v6, v7, v8);
}

void sub_1000C343C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = sub_1000C4CC0(a1, a2, a3);
  sub_10002B9CC(v3);
  sub_100006C14();
}

void sub_1000C3460(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  v2 = a2(0);
  sub_10008BC68(*(_QWORD *)(v2 - 8));
  sub_100006C14();
}

uint64_t sub_1000C3490()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(sub_1000AB044() - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 56) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v5 = v2 | 7;
  sub_10002BBD8();
  swift_bridgeObjectRelease();
  sub_10002BE14();
  sub_1000C47D8();
  sub_10007E7EC(v0 + v3, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  return swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1000C3508()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_10001DB50();
  sub_1000AB044();
  v0 = swift_task_alloc(dword_1000FF734);
  v1 = (_QWORD *)sub_100006AF4(v0);
  sub_1000C3C1C(v1);
  sub_10001DB20();
  return sub_1000B809C(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_1000C3578()
{
  uint64_t v0;

  sub_10002BBD8();
  sub_10001E390();
  sub_1000C47D8();
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000C35A0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_100037EFC();
  v1 = swift_task_alloc(dword_1000FF744);
  v2 = (_QWORD *)sub_100006AF4(v1);
  *v2 = v0;
  v2[1] = sub_10001D668;
  v3 = sub_10007EEE4();
  return sub_1000B8570(v3, v4, v5, v6, v7, v8);
}

uint64_t sub_1000C3600()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(sub_1000AB044() - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = v2 | 7;
  v5 = (((*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  sub_10007F858();
  sub_10007FBE8();
  sub_10007E7EC(v0 + v3, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5 + 8, v4);
}

uint64_t sub_1000C3698()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10001DD0C();
  sub_1000AB044();
  sub_1000C459C();
  v1 = (_QWORD *)swift_task_alloc(dword_1000FF754);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10001D668;
  sub_1000C447C();
  return sub_1000B86CC(v2, v3, v4, v5, v6);
}

uint64_t sub_1000C3720(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = swift_task_alloc(dword_1000FF764);
  v5 = (_QWORD *)sub_100006AF4(v4);
  *v5 = v2;
  v5[1] = sub_10001D668;
  return sub_1000B8868(a1, v1);
}

void sub_1000C3770()
{
  sub_1000B88F0();
}

uint64_t sub_1000C377C()
{
  uint64_t v0;

  sub_10002BBD8();
  sub_10001E390();
  sub_10002BE14();
  swift_release();
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000C37AC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_10001DB50();
  sub_10001D864();
  v0 = swift_task_alloc(dword_1000FF77C);
  v1 = (_QWORD *)sub_100006AF4(v0);
  sub_1000C3C1C(v1);
  sub_10001DB20();
  return sub_1000B3BF0(v2, v3, v4, v5, v6, v7, v8);
}

void sub_1000C37F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = sub_10001E23C(a1, a2);
  sub_10008BC68(*(_QWORD *)(v2 - 8));
  sub_100006C14();
}

uint64_t sub_1000C3824(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  _QWORD *v11;

  v10 = *a3;
  v11 = (_QWORD *)swift_task_alloc(dword_1000FF7C4);
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_10001D668;
  return sub_1000B29F8(a1, a2, v10, a4, a5);
}

uint64_t sub_1000C38A4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  sub_100037EFC();
  v3 = v2;
  v5 = v4;
  v6 = (uint64_t *)v0[2];
  v7 = v0[3];
  v8 = v0[4];
  v9 = swift_task_alloc(dword_1000FF7B4);
  v10 = (_QWORD *)sub_100006AF4(v9);
  *v10 = v1;
  v10[1] = sub_10001D668;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))((char *)&dword_1000FF7B0
                                                                                + dword_1000FF7B0))(v5, v3, v6, v7, v8);
}

uint64_t sub_1000C3924(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v12 = *a6;
  v13 = a6[1];
  v14 = (_QWORD *)swift_task_alloc(dword_1000FF7F4);
  *(_QWORD *)(v6 + 16) = v14;
  *v14 = v6;
  v14[1] = sub_10001D668;
  return sub_1000B2DE8(a1, a2, a3, a4, a5, v12, v13);
}

uint64_t sub_1000C39B8()
{
  uint64_t v0;

  sub_10002BBD8();
  sub_10002BE14();
  sub_1000C47D8();
  swift_release();
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000C39E8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);

  sub_10001DB50();
  sub_1000C4C14();
  v1 = swift_task_alloc(dword_1000FF7CC);
  v2 = (_QWORD *)sub_100006AF4(v1);
  *v2 = v0;
  v2[1] = sub_10001D668;
  v3 = sub_10007EEE4();
  return sub_1000C40D0(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1000C3A38()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  sub_100006C08();
  v0 = sub_100006BC0();
  v1 = (_QWORD *)sub_100006AF4(v0);
  v2 = sub_1000068F0(v1);
  return sub_1000068E0(v2, v3, v4, v5);
}

uint64_t sub_1000C3A78()
{
  uint64_t v0;

  sub_10002BBD8();
  sub_10002BE14();
  sub_1000C47D8();
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000C3AA0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);

  sub_10001DB50();
  sub_1000C4C14();
  v1 = swift_task_alloc(dword_1000FF814);
  v2 = (_QWORD *)sub_100006AF4(v1);
  *v2 = v0;
  v2[1] = sub_10001D668;
  v3 = sub_10007EEE4();
  return sub_1000C40D0(v3, v4, v5, v6, v7, v8, v9);
}

void sub_1000C3AF0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_1000C33D0(a1, a2, a3);
}

uint64_t sub_1000C3B24(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v2[37];
  v4 = v2[32];
  v5 = v2[27];
  v6 = v2[14];
  sub_100005630(v2[28], a2, 1, v4);
  return v3(v5, v6, v4);
}

uint64_t sub_1000C3B60()
{
  uint64_t v0;
  _QWORD *v1;

  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(v1[33] + 32))(v1[34], v0, v1[32]);
}

uint64_t sub_1000C3B88()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 296))(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 256));
}

uint64_t sub_1000C3BC8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 384) = a1;
  *a1 = v2;
  a1[1] = a2;
  return *(_QWORD *)(v2 + 104);
}

uint64_t sub_1000C3BF4()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100005700(v1, 1, v0);
}

void sub_1000C3C14(uint64_t a1)
{
  uint64_t *v1;

  sub_1000C37F8(a1, v1);
}

uint64_t sub_1000C3C1C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

void sub_1000C3C44(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 2u);
}

uint64_t sub_1000C3C50()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100005630(v1, 0, 1, v0);
}

uint64_t sub_1000C3C78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return dispatch thunk of static Equatable.== infix(_:_:)(v3, v1, v2, a1);
}

uint64_t sub_1000C3C90()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 280));
}

void sub_1000C3CBC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_1000C3CD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100056248(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1000C3CEC()
{
  return sub_1000B53F0();
}

uint64_t sub_1000C3D08()
{
  return Task.value.getter();
}

uint64_t sub_1000C3D24()
{
  return ((uint64_t (*)(void))dispatch thunk of Clock.sleep(until:tolerance:))();
}

void sub_1000C3D40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  sub_100048DB4(v0, v1, v2);
}

void sub_1000C3D50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  sub_100048DB4(v1, v0, v2);
}

uint64_t sub_1000C3D60()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100005700(v1, 1, v0);
}

uint64_t sub_1000C3D84()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100005700(v0, 1, v1);
}

void sub_1000C3DCC(uint64_t a1)
{
  uint64_t *v1;

  sub_1000C37F8(a1, v1);
}

void sub_1000C3DD4(uint64_t a1)
{
  uint64_t *v1;

  sub_1000C37F8(a1, v1);
}

uint64_t sub_1000C3DDC()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0[18] + 32))(v0[6], v0[7], v0[17]);
}

uint64_t sub_1000C3E14()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100005700(v0, 1, v1);
}

void sub_1000C3E34(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 376) = a1;
  sub_1000C5C2C();
}

uint64_t sub_1000C3E48()
{
  uint64_t v0;

  return sub_1000B407C(*(_QWORD *)(v0 + 112));
}

uint64_t sub_1000C3E54()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t sub_1000C3E64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_1000C3E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, a4);
}

uint64_t sub_1000C3E80@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

void sub_1000C3E8C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v2 + 192);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(*(_QWORD *)(v2 + 168) + 72);
  *(_QWORD *)(v4 - 120) = v7;
  sub_1000C343C(v6 + v7 * a2, v5, v3);
}

uint64_t sub_1000C3EBC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v2[37];
  v4 = v2[32];
  v5 = v2[30];
  v6 = v2[14];
  sub_100005630(v2[31], a2, 1, v4);
  return v3(v5, v6, v4);
}

uint64_t sub_1000C3EFC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v2[37];
  v4 = v2[32];
  v5 = v2[30];
  v6 = v2[14];
  sub_100005630(v2[31], a2, 1, v4);
  return v3(v5, v6, v4);
}

void sub_1000C3F3C(uint64_t a1)
{
  uint64_t *v1;

  sub_1000C37F8(a1, v1);
}

uint64_t sub_1000C3F44@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(*(_QWORD *)(v2 + 144) + 16))(*(_QWORD *)(v2 + 56), a1+ ((*(unsigned __int8 *)(v2 + 184) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 184))+ *(_QWORD *)(*(_QWORD *)(v2 + 144) + 72) * v1, *(_QWORD *)(v2 + 136));
}

uint64_t sub_1000C3F70()
{
  return Task.value.getter();
}

void sub_1000C3F8C()
{
  uint64_t v0;

  sub_1000C5B78(v0);
}

void sub_1000C3F9C(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;

  sub_1000102C0(a1, v1, v2);
}

uint64_t sub_1000C3FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;

  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(a24 + 16))(*(_QWORD *)(v25 + 136), a23 + *(_QWORD *)(a24 + 72) * v26, a25);
}

BOOL sub_1000C3FD4(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000C3FE4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v2;
  a1[1] = a2;
  return v3;
}

uint64_t sub_1000C4000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_1000C401C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000C4038(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_1000C4040(uint64_t a1)
{
  uint64_t v1;

  return sub_100005700(a1, 1, v1);
}

void sub_1000C4060()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 104) = *(_QWORD *)(v0 - 96) + 56;
}

uint64_t sub_1000C4090()
{
  uint64_t v0;
  _QWORD *v1;

  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(v1[33] + 32))(v1[34], v0, v1[32]);
}

uint64_t sub_1000C40B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2 + v3);
}

uint64_t sub_1000C40BC()
{
  return sub_1000C8AD4(2, 18, 0, 0);
}

uint64_t sub_1000C40D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  return a7();
}

uint64_t sub_1000C40E8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t sub_1000C40F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11, __int128 a12, __int128 a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  _OWORD *v21;

  *v21 = a11;
  v21[1] = a12;
  v21[2] = a13;
  return _HashTable.BucketIterator.currentValue.getter(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, *((_QWORD *)&a11 + 1), a12, *((_QWORD *)&a12 + 1), a13, *((_QWORD *)&a13 + 1), a14, a15, a16,
           a17,
           a18,
           a19,
           a20,
           a21);
}

uint64_t sub_1000C4114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + v0);
  *(_QWORD *)(v1 + v0) = 0;
  return swift_release(v2);
}

void sub_1000C4120()
{
  void *v0;

}

uint64_t sub_1000C412C()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

void *sub_1000C4138()
{
  return malloc(0x28uLL);
}

uint64_t sub_1000C414C()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 208));
}

uint64_t sub_1000C416C()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 - 88) + 176);
}

uint64_t sub_1000C4194(uint64_t a1)
{
  return swift_task_alloc(a1);
}

uint64_t sub_1000C419C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C41AC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 216);
}

uint64_t sub_1000C41BC()
{
  return type metadata accessor for AssetCost(0);
}

_QWORD *sub_1000C41D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10001C830((_QWORD *)(v1 + a1), *(_QWORD *)(v1 + a1 + 24));
}

uint64_t sub_1000C41F4()
{
  uint64_t v0;

  return swift_release_n(v0, 2);
}

uint64_t sub_1000C4200@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + a1 + 16));
}

unint64_t sub_1000C4210(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_1000BF90C(a2, (a3 & 0xC000000000000001) == 0, a3);
}

uint64_t sub_1000C422C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_1000C4238()
{
  return ((uint64_t (*)(void))TaskGroup.next(isolation:))();
}

uint64_t sub_1000C4248@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 120) = a1;
  *a1 = v2;
  a1[1] = a2;
  return *(_QWORD *)(v2 + 80);
}

uint64_t sub_1000C426C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + v9) = v10;
  return a9(v13, v12, v11);
}

uint64_t sub_1000C4288()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + v0);
  *(_QWORD *)(v1 + v0) = 0;
  return swift_release(v2);
}

_QWORD *sub_1000C4294(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, _QWORD))
{
  uint64_t v1;
  uint64_t v2;

  return sub_1000C118C(a1, v1, v2);
}

void sub_1000C42A4(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_1000C3460(a1, v1);
}

uint64_t sub_1000C42AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

_QWORD *sub_1000C42D8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  return Hasher.init(_seed:)((uint64_t *)va, *a4);
}

void sub_1000C42F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  sub_1000C343C(a1, v1, v2);
}

void sub_1000C4300(uint64_t a1)
{
  char *v1;

  sub_1000B43EC(a1, v1);
}

uint64_t sub_1000C430C()
{
  return ContinuousClock.init()();
}

_QWORD *sub_1000C4324@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10001C830((_QWORD *)(v1 + a1), *(_QWORD *)(v1 + a1 + 24));
}

_QWORD *sub_1000C4344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16)
{
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v17 - 96) = v16;
  return Hasher.init(_seed:)(a16, *(_QWORD *)(v16 + 40));
}

uint64_t sub_1000C435C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return dispatch thunk of static Equatable.== infix(_:_:)(v3, v1, v2, a1);
}

uint64_t sub_1000C4374@<X0>(uint64_t a1@<X8>)
{
  return swift_retain(*(_QWORD *)(a1 + 32));
}

_QWORD *sub_1000C437C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_1000C438C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 240);
}

void sub_1000C439C()
{
  int64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000C2080(v0, v1, *(_QWORD *)(v2 - 216));
}

uint64_t sub_1000C43B4(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

void sub_1000C43E0(__n128 a1)
{
  uint64_t v1;

  *(__n128 *)(v1 + 40) = a1;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 32) = 1;
}

uint64_t sub_1000C4400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BA124(a1, a2, a3);
}

uint64_t sub_1000C440C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

void sub_1000C4418()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

uint64_t sub_1000C444C()
{
  _QWORD *v0;
  uint64_t (*v1)(_QWORD, _QWORD, _QWORD);

  return v1(v0[9], v0[11], v0[17]);
}

uint64_t sub_1000C4464(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return dispatch thunk of InstantProtocol.advanced(by:)(v2, v1, a1);
}

uint64_t sub_1000C4490()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_1000C44B0()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[16] + 8))(v0[17], v0[15]);
}

uint64_t sub_1000C44D8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 32);
}

uint64_t sub_1000C450C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  LOBYTE(a24) = 0;
  return _HashTable.BucketIterator.currentValue.getter(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, v26, v25,
           v24,
           a1,
           a2,
           a3,
           a24);
}

__n128 sub_1000C4524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,__int128 a22)
{
  return (__n128)a22;
}

uint64_t sub_1000C4544()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 280);
}

uint64_t sub_1000C4564@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return static AssetCost.== infix(_:_:)(a1 + *(int *)(*(_QWORD *)(*(_QWORD *)(v1 - 88) + 160) + 28), *(_QWORD *)(v1 - 128));
}

uint64_t sub_1000C45B0()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 - 8));
}

void sub_1000C45C4()
{
  uint64_t v0;

  Hasher._combine(_:)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 184) + 24) + 16));
}

uint64_t sub_1000C45D8()
{
  return Logger.logObject.getter();
}

_QWORD *sub_1000C45E0(uint64_t a1, ...)
{
  uint64_t v1;
  va_list va;

  va_start(va, a1);
  return Hasher.init(_seed:)((uint64_t *)va, *(_QWORD *)(v1 + 40));
}

uint64_t sub_1000C45EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1000B9C28(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1000C45F4(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_1000C45FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_bridgeObjectRelease(*(_QWORD *)(v1 + a1));
}

uint64_t sub_1000C4604(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of Clock.now.getter(v1, a1);
}

uint64_t sub_1000C4618()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000C4620(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 128) = v1;
  return dispatch thunk of Hashable.hash(into:)(v2, v3, a1);
}

uint64_t sub_1000C4634(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  return dispatch thunk of Hashable.hash(into:)(va, v2, a1);
}

uint64_t sub_1000C4648()
{
  _QWORD *v0;

  return swift_release(*v0);
}

uint64_t sub_1000C4654()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 192));
}

void sub_1000C4668()
{
  uint64_t v0;

  Hasher._combine(_:)(*(_QWORD *)(*(_QWORD *)(v0 + 16) + 16));
}

uint64_t sub_1000C467C()
{
  return InferenceProviderRequestConfiguration.auditToken.getter();
}

uint64_t sub_1000C4694()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return static UUIDIdentifier.== infix(_:_:)(v2, v1, v0);
}

uint64_t sub_1000C46A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return _HashTable.UnsafeHandle._startIterator(bucket:)(a2 & a1, v3, v2);
}

uint64_t sub_1000C46F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_1000C46FC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C4708()
{
  uint64_t v0;

  return _CocoaArrayWrapper.endIndex.getter(v0);
}

void sub_1000C4710()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(int *)(v0 + 40);
  *(_QWORD *)(v2 - 144) = v1;
  Hasher._combine(_:)(*(_BYTE *)(v1 + v3));
}

void sub_1000C4724()
{
  uint64_t v0;
  uint64_t v1;

  Hasher._combine(_:)(*(_BYTE *)(v1 + *(int *)(v0 + 32)));
}

_QWORD *sub_1000C4750@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_1000C4760()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_1000C4770()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_1000C4780()
{
  return swift_task_alloc(32);
}

uint64_t sub_1000C47A0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 224);
}

uint64_t sub_1000C47B0()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 208) + 8))(v0, *(_QWORD *)(v1 - 200));
}

uint64_t sub_1000C47C0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C47D8()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 48));
}

uint64_t sub_1000C47FC()
{
  return Logger.logObject.getter();
}

uint64_t sub_1000C4804()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return String.hash(into:)(v1, v0, v2);
}

uint64_t sub_1000C4814()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return String.hash(into:)(v1, v0, v2);
}

void sub_1000C4824()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  sub_100048DB4(v0, v1, v2);
}

_QWORD *sub_1000C4834(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *result;

  result = sub_10001C830(a1, a1[3]);
  *(_QWORD *)(v1 + 112) = result;
  return result;
}

uint64_t sub_1000C4850()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 96));
}

BOOL sub_1000C4878(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000C4888()
{
  return UUID.description.getter();
}

uint64_t sub_1000C48AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return sub_100002F78(a5);
}

uint64_t sub_1000C48B4()
{
  return 0;
}

uint64_t sub_1000C48C4()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_1000C48D4()
{
  _QWORD *v0;

  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t sub_1000C48DC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C48E8()
{
  return 0;
}

uint64_t sub_1000C48F8()
{
  return 0;
}

uint64_t sub_1000C4908()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return static UUIDIdentifier.== infix(_:_:)(v2, v1, v0);
}

uint64_t sub_1000C4918()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100005700(v0, 1, v1);
}

uint64_t sub_1000C4928()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return String.hash(into:)(v0, v1, v2);
}

uint64_t sub_1000C4938()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return String.hash(into:)(v1, v0, v2);
}

uint64_t sub_1000C4948()
{
  return 0;
}

uint64_t sub_1000C4958(uint64_t a1)
{
  uint64_t v1;

  return specialized _ArrayBuffer._getElementSlowPath(_:)(a1, v1);
}

uint64_t sub_1000C4960()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100005630(v1, 0, 1, v0);
}

void sub_1000C4988()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  sub_100048DB4(v1, v0, v2);
}

uint64_t sub_1000C49B0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 192);
}

uint64_t sub_1000C49D4()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100005630(v1, 0, 1, v0);
}

uint64_t sub_1000C49FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_beginAccess(v2, a2, 33, 0);
}

uint64_t sub_1000C4A0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_1000C4A1C()
{
  return 0;
}

void sub_1000C4A34()
{
  uint64_t v0;
  uint64_t v1;

  Hasher._combine(_:)(*(_BYTE *)(v1 + *(int *)(v0 + 36)));
}

void sub_1000C4A44()
{
  sub_1000C5C2C();
}

uint64_t sub_1000C4A4C()
{
  _QWORD *v0;

  return swift_bridgeObjectRetain(*v0);
}

uint64_t sub_1000C4A6C()
{
  uint64_t v0;

  return v0;
}

void sub_1000C4A80(float a1)
{
  float *v1;

  *v1 = a1;
}

_QWORD *sub_1000C4AA0@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_1000C4AB4(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(result + 16) = v1;
  return result;
}

uint64_t sub_1000C4AC8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 200);
}

uint64_t sub_1000C4AD4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 120) = a1;
  return v1 - 120;
}

void sub_1000C4AE8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1000102C0(a1, a2, (uint64_t *)va);
}

void sub_1000C4AF0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_1000102C0(a1, a2, (uint64_t *)va);
}

uint64_t sub_1000C4AFC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return *(_QWORD *)(v2 + 168);
}

size_t sub_1000C4B10(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  size_t result;

  result = j__malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

uint64_t sub_1000C4B34()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 144));
}

void sub_1000C4B3C()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_1000C4B50(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1000C201C(a1, a2, a3, v3);
}

unint64_t sub_1000C4B70(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  unint64_t v4;

  return sub_1000C0C14(v4, a2, a3, a4);
}

uint64_t sub_1000C4B7C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_1000C4B88()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v0, v1);
}

uint64_t sub_1000C4BBC(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_1000C4BC8()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 104));
}

uint64_t sub_1000C4BD4()
{
  uint64_t v0;

  return swift_getObjectType(v0);
}

void sub_1000C4BE0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 152) = v0;
}

uint64_t sub_1000C4C08()
{
  uint64_t v0;

  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_1000C4C28(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 104) = result;
  return result;
}

uint64_t sub_1000C4C34()
{
  return sub_10008AE98();
}

uint64_t sub_1000C4C40(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = result;
  return result;
}

uint64_t sub_1000C4C4C()
{
  unint64_t v0;

  return sub_1000C223C(v0);
}

double sub_1000C4C58()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1000BC05C(v0, v1);
}

uint64_t sub_1000C4C64(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_1000C4C70(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of Actor.unownedExecutor.getter(a1, v1);
}

uint64_t sub_1000C4C78()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0 + 32, v2);
}

uint64_t sub_1000C4C84(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 336) = result;
  return result;
}

uint64_t sub_1000C4CB8(uint64_t a1)
{
  return sub_1000BABBC(a1);
}

uint64_t sub_1000C4CC0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  return a3(0);
}

uint64_t sub_1000C4CCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_1000C4CD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_1000C4CF8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t sub_1000C4D00()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10001CB5C(v0, v1);
}

uint64_t sub_1000C4D0C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C4D18()
{
  return 0;
}

uint64_t sub_1000C4D24()
{
  return 0;
}

uint64_t sub_1000C4D38()
{
  return 0;
}

void sub_1000C4D44(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  sub_100048DB4(a1, v2, v1);
}

void sub_1000C4D50(unint64_t *a1)
{
  uint64_t *v1;

  sub_100006744(a1, v1);
}

double sub_1000C4D58()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1000BC05C(v1, v0);
}

uint64_t sub_1000C4D64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_1000C4D70()
{
  uint64_t v0;
  uint64_t v1;

  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

uint64_t sub_1000C4D7C()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v1, v0);
}

void sub_1000C4D88(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 328) = *(_QWORD *)(a1 + v1);
}

uint64_t sub_1000C4D94@<X0>(uint64_t (*a1)(_QWORD, _QWORD)@<X8>)
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 56));
}

uint64_t sub_1000C4DA0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for WorkQueueState()
{
  return objc_opt_self(_TtC13modelmanagerd14WorkQueueState);
}

uint64_t sub_1000C4DE4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 112));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for DetachedWorkQueue.Actor()
{
  return objc_opt_self(_TtCV13modelmanagerd17DetachedWorkQueue5Actor);
}

unint64_t sub_1000C4E28(uint64_t a1)
{
  unint64_t result;

  result = sub_1000C4E4C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000C4E4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000FF9E8;
  if (!qword_1000FF9E8)
  {
    v1 = type metadata accessor for DetachedWorkQueue.Actor();
    result = swift_getWitnessTable(&unk_1000CD430, v1);
    atomic_store(result, (unint64_t *)&qword_1000FF9E8);
  }
  return result;
}

ValueMetadata *type metadata accessor for DetachedWorkQueue()
{
  return &type metadata for DetachedWorkQueue;
}

void sub_1000C4E98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,_QWORD *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,unsigned __int8 a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,_QWORD *a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  void (*v83)(void (*)(uint64_t, uint64_t), uint64_t, uint64_t);
  char v84;
  void (*v85)(char *, uint64_t);
  unsigned int *v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(char *, uint64_t, uint64_t);
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(uint64_t, uint64_t);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  NSObject *v128;
  os_log_type_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  void (*v145)(uint64_t, uint64_t);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void (*v152)(void);
  uint64_t v153;
  void (*v154)(uint64_t, uint64_t);
  uint64_t v155;
  uint64_t v156;
  void (*v157)(uint64_t, uint64_t *);
  int v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void (*v167)(char *, uint64_t);
  uint64_t v168;
  void (*v169)(void (*)(uint64_t, uint64_t), uint64_t, uint64_t);
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  void (*v180)(uint64_t, uint64_t);
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void (*v185)(uint64_t, uint64_t *);
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  _QWORD *v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;

  sub_10001D810();
  a19 = v32;
  a20 = v33;
  v196 = v34;
  v173 = v35;
  v175 = v36;
  v202 = (_QWORD *)v37;
  v197 = v38;
  v178 = v39;
  v198 = v40;
  v184 = v41;
  v42 = a28;
  v43 = a27;
  v195 = sub_1000C7444();
  v193 = *(_QWORD *)(v195 - 8);
  sub_10001DD00();
  __chkstk_darwin(v44);
  sub_10002BD70();
  v177 = v45;
  v194 = sub_100002F78(&qword_1000FB2D8);
  v192 = *(_QWORD *)(v194 - 8);
  sub_10001DD00();
  __chkstk_darwin(v46);
  sub_10002BD70();
  v176 = v47;
  v183 = sub_100002F78(&qword_1000FB2A0);
  v185 = *(void (**)(uint64_t, uint64_t *))(v183 - 8);
  sub_10001DD00();
  __chkstk_darwin(v48);
  sub_10001EB18();
  sub_10009B294();
  __chkstk_darwin(v49);
  sub_10007FD38();
  v174 = v50;
  sub_100002F78(&qword_1000FD7E0);
  sub_10001DD00();
  __chkstk_darwin(v51);
  sub_10002BD70();
  v171 = v52;
  v53 = sub_1000C7498();
  type metadata accessor for UUID(v53);
  sub_10001DD00();
  __chkstk_darwin(v54);
  sub_10001EB18();
  sub_10009B294();
  __chkstk_darwin(v55);
  sub_10007FD38();
  v168 = v56;
  v57 = sub_1000C7498();
  v201 = *(_QWORD **)(type metadata accessor for ModelCatalogAsset(v57) - 8);
  sub_10001DD00();
  __chkstk_darwin(v58);
  sub_10001E684();
  v61 = (uint64_t *)(v59 - v60);
  __chkstk_darwin(v62);
  sub_10007FD38();
  v200 = v63;
  v64 = sub_1000C7498();
  v65 = type metadata accessor for InferenceProviderRequestConfiguration(v64);
  v190 = *(_QWORD *)(v65 - 8);
  v191 = v65;
  sub_10001DD00();
  __chkstk_darwin(v66);
  sub_10001EB18();
  sub_10009B294();
  __chkstk_darwin(v67);
  sub_10007FD38();
  v189 = v68;
  v69 = sub_1000C7498();
  v70 = type metadata accessor for TaskPriority(v69);
  v71 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  sub_10001EB18();
  sub_10009B294();
  v73 = __chkstk_darwin(v72);
  v75 = (char *)&v158 - v74;
  __chkstk_darwin(v73);
  v77 = (char *)&v158 - v76;
  v78 = sub_10001E368();
  v79 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  sub_10001EB18();
  sub_10009B294();
  __chkstk_darwin(v80);
  v82 = (char *)&v158 - v81;
  v83 = *(void (**)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t))(v71 + 16);
  v182 = v42;
  v169 = v83;
  v83((void (*)(_QWORD, _QWORD))v77, v42, v70);
  v158 = v43;
  v181 = v70;
  if (v43)
  {
    v167 = *(void (**)(char *, uint64_t))(v71 + 8);
    v167(v77, v70);
  }
  else
  {
    TaskPriority.init(rawValue:)(21);
    v84 = static TaskPriority.>= infix(_:_:)(v77, v75);
    v85 = *(void (**)(char *, uint64_t))(v71 + 8);
    sub_1000C74B0();
    v167 = v85;
    v85(v77, v70);
    if ((v84 & 1) != 0)
    {
      v86 = (unsigned int *)&enum case for RequestPriority.foreground(_:);
      v87 = (uint64_t)v202;
      goto LABEL_6;
    }
  }
  v87 = (uint64_t)v202;
  v86 = (unsigned int *)&enum case for RequestPriority.background(_:);
LABEL_6:
  v88 = *v86;
  v187 = v79;
  v89 = *(void (**)(char *, uint64_t, uint64_t))(v79 + 104);
  v186 = v82;
  v188 = v78;
  v89(v82, v88, v78);
  v90 = *(_QWORD *)(v87 + 16);
  v91 = _swiftEmptyArrayStorage;
  if (v90)
  {
    v204 = _swiftEmptyArrayStorage;
    sub_100011720(0, v90, 0);
    v92 = sub_10001C854(v87);
    v94 = v93;
    v96 = v95 & 1;
    v199 = v87 + 56;
    while ((v92 & 0x8000000000000000) == 0 && v92 < 1 << *(_BYTE *)(v87 + 32))
    {
      if (((*(_QWORD *)(v199 + (((unint64_t)v92 >> 3) & 0xFFFFFFFFFFFFF8)) >> v92) & 1) == 0)
        goto LABEL_24;
      if (*(_DWORD *)(v87 + 36) != (_DWORD)v94)
        goto LABEL_25;
      v97 = *(_QWORD *)(v87 + 48);
      v98 = v200;
      sub_100037420(v97 + v201[9] * v92, v200);
      sub_10001CB5C(v98, (uint64_t)v61);
      v99 = *v61;
      v78 = v61[1];
      swift_bridgeObjectRetain(v78);
      sub_100037464((uint64_t)v61);
      v91 = v204;
      if ((swift_isUniquelyReferenced_nonNull_native(v204) & 1) == 0)
      {
        sub_100011720(0, v91[2] + 1, 1);
        v91 = v204;
      }
      v101 = v91[2];
      v100 = v91[3];
      if (v101 >= v100 >> 1)
      {
        sub_100011720(v100 > 1, v101 + 1, 1);
        v91 = v204;
      }
      v91[2] = v101 + 1;
      v102 = &v91[2 * v101];
      v102[4] = v99;
      v102[5] = v78;
      v87 = (uint64_t)v202;
      v103 = sub_10001C6FC(v92, v94, v96 & 1, v202);
      v92 = v103;
      v94 = v104;
      v96 = v105 & 1;
      if (!--v90)
      {
        sub_10001C7E4(v103, v104, v105 & 1);
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }
  else
  {
LABEL_18:
    v201 = a32;
    v166 = a31;
    v165 = a30;
    v164 = a29;
    v163 = a26;
    v162 = a25;
    v161 = a24;
    v106 = a22;
    v160 = a23;
    v159 = a21;
    v107 = sub_10000B690(v91);
    v108 = v168;
    v61 = (uint64_t *)v183;
    v109 = v184;
    UUIDIdentifier.uuid.getter(v183);
    v110 = v170;
    v111 = v194;
    v112 = v198;
    UUIDIdentifier.uuid.getter(v194);
    v113 = type metadata accessor for AuditToken(0);
    v199 = *(_QWORD *)(v113 - 8);
    v78 = v171;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v199 + 16))(v171, v196, v113);
    v200 = v113;
    sub_100005630(v78, 0, 1, v113);
    v114 = v179;
    (*(void (**)(uint64_t, char *, uint64_t))(v187 + 16))(v179, v186, v188);
    v115 = v109;
    v116 = v189;
    v117 = v110;
    v90 = v115;
    InferenceProviderRequestConfiguration.init(sessionLoggingIdentifier:requestLoggingIdentifier:assetIdentifiers:requestUUID:sessionUUID:onBehalfOfPID:parentOfOnBehalfOfPID:auditToken:auditSessionUID:useCaseIdentifier:assetBundleIdentifier:requestPriority:)(v164, v165, v166, v201, v107, v108, v117, v175, v173, v78, v159, v160, v161, v162, v163, v114);
    sub_1000C748C();
    sub_1000C740C((uint64_t)&v205);
    v118 = v176;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v192 + 16))(v176, v112, v111);
    v119 = v177;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v193 + 16))(v177, v197, v195);
    v201 = v106;
    sub_10001D29C((uint64_t)v106, (uint64_t)&v204);
    v120 = v172;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v190 + 16))(v172, v116, v191);
    v121 = type metadata accessor for DaemonRequest(0);
    v96 = sub_100006ACC(v121);
    sub_1000C5C9C(v78, v118, v178 & 1, v119, (uint64_t)v202, (uint64_t)&v204, v120);
    v122 = qword_1000FB220;
    swift_retain();
    if (v122 == -1)
      goto LABEL_19;
  }
  swift_once(&qword_1000FB220, sub_1000C5B08);
LABEL_19:
  v123 = sub_10001DD64();
  v124 = (void (*)(uint64_t, uint64_t))sub_100002FF8(v123, (uint64_t)qword_1000FF9F0);
  sub_1000C740C((uint64_t)&a9);
  v125 = v182;
  v126 = v181;
  v169(v180, v182, v181);
  v127 = swift_retain();
  v128 = Logger.logObject.getter(v127);
  v129 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v128, v129))
  {
    v130 = sub_10001D8D4(42);
    v202 = (_QWORD *)sub_10001D8D4(128);
    v204 = v202;
    *(_DWORD *)v130 = 136315906;
    sub_100006744((unint64_t *)&qword_1000FBEA0, &qword_1000FB2A0);
    v132 = sub_10008BF74(v131, v131);
    sub_100080158(v132, v133);
    v203 = v134;
    sub_1000C7464();
    sub_10001E034();
    sub_1000C748C();
    v185 = *(void (**)(uint64_t, uint64_t *))(v135 + 8);
    v185(v78, v61);
    *(_WORD *)(v130 + 12) = 2080;
    v136 = v179;
    sub_1000C5C2C();
    v137 = v188;
    v138 = String.init<A>(describing:)(v136, v188);
    sub_100080158(v138, v139);
    v203 = v140;
    sub_1000C7464();
    sub_10001EBB0(v96);
    sub_10001E034();
    *(_WORD *)(v130 + 22) = 2080;
    LOBYTE(v203) = v158;
    v141 = String.init<A>(describing:)(&v203, &type metadata for ProcessPriority);
    v143 = v142;
    sub_1000102C0(v141, v142, (uint64_t *)&v204);
    v203 = v144;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v203, &v204, v130 + 24);
    swift_bridgeObjectRelease(v143);
    *(_WORD *)(v130 + 32) = 2080;
    sub_100006710(&qword_1000FF6C8, (uint64_t (*)(uint64_t))&type metadata accessor for TaskPriority);
    v145 = v180;
    v146 = v181;
    v148 = sub_10008BF74(v147, v147);
    sub_100080158(v148, v149);
    v203 = v150;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v203, &v204, v130 + 34);
    sub_10001E034();
    sub_1000C74A4();
    _os_log_impl((void *)&_mh_execute_header, v128, v129, "Resolved priority for request %s to %s (from %s and %s)", (uint8_t *)v130, 0x2Au);
    v151 = (uint64_t)v202;
    swift_arrayDestroy(v202, 4);
    sub_10001D790(v151);
    sub_10001D790(v130);

    v145(v182, v146);
    sub_10000650C(v201);
    sub_1000C7434();
    sub_1000C7420();
    sub_1000C73F8();
    sub_1000C748C();
    v152();
    sub_1000C7474();
    v153 = sub_1000C744C();
    v155 = v137;
  }
  else
  {

    sub_1000C74A4();
    sub_10001EBB0(v96);
    sub_1000C748C();
    v157 = *(void (**)(uint64_t, uint64_t *))(v156 + 8);
    v157(v78, v61);
    v124(v125, v126);
    sub_10000650C(v201);
    sub_1000C7434();
    sub_1000C7420();
    sub_1000C73F8();
    v157(v90, v61);
    sub_1000C7474();
    v153 = sub_1000C744C();
    v155 = v188;
  }
  v154(v153, v155);
  sub_100006A68();
}

void sub_1000C5954()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[40];

  sub_10001D810();
  v1 = v0;
  v3 = v2;
  type metadata accessor for InferenceProviderRequestConfiguration(0);
  sub_10001DD00();
  __chkstk_darwin(v4);
  sub_10001E168();
  v7 = v6 - v5;
  v8 = sub_1000C7444();
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_10001E168();
  v12 = v11 - v10;
  v13 = sub_100002F78(&qword_1000FB2D8);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  sub_10001E168();
  v17 = v16 - v15;
  v18 = sub_100002F78(&qword_1000FB2A0);
  __chkstk_darwin(v18);
  sub_10001E168();
  v21 = v20 - v19;
  (*(void (**)(uint64_t, uint64_t))(v22 + 16))(v20 - v19, v3 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_id);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v17, v3 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_sessionID, v13);
  LOBYTE(v13) = *(_BYTE *)(v3 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_isStream);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v12, v3 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_clientData, v8);
  v23 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_modelAssets);
  sub_10001D29C((uint64_t)v1, (uint64_t)v25);
  swift_bridgeObjectRetain(v23);
  sub_1000C5B78(v7);
  v24 = type metadata accessor for DaemonRequest(0);
  sub_100006ACC(v24);
  sub_1000C5C9C(v21, v17, v13, v12, v23, (uint64_t)v25, v7);
  swift_release(v3);
  sub_10000650C(v1);
  sub_100006A68();
}

uint64_t sub_1000C5B08()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_100002FB8(v0, qword_1000FF9F0);
  sub_100002FF8(v0, (uint64_t)qword_1000FF9F0);
  v1 = subsystemName.getter();
  return Logger.init(subsystem:category:)(v1);
}

void sub_1000C5B78(uint64_t a1@<X8>)
{
  uint64_t v1;
  os_unfair_lock_s *v2;

  sub_1000C73D4(*(_QWORD *)(v1 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_locked_config));
  sub_1000C5BDC(v1, a1);
  os_unfair_lock_unlock(v2);
}

uint64_t sub_1000C5BDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for InferenceProviderRequestConfiguration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
}

void sub_1000C5C2C()
{
  uint64_t v0;
  os_unfair_lock_s *v1;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_locked_config)
                          + ((*(unsigned int *)(**(_QWORD **)(v0
                                                            + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_locked_config)
                                              + 48)
                            + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v1);
  InferenceProviderRequestConfiguration.requestPriority.getter();
  os_unfair_lock_unlock(v1);
}

uint64_t sub_1000C5C9C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v30;
  uint64_t v33;

  *(_QWORD *)(v7 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_runningTask) = 0;
  *(_BYTE *)(v7 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_isCancelled) = 0;
  v14 = v7 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_id;
  v15 = sub_100002F78(&qword_1000FB2A0);
  v33 = *(_QWORD *)(v15 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v14, a1, v15);
  v16 = v7 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_sessionID;
  v17 = sub_100002F78(&qword_1000FB2D8);
  v30 = *(_QWORD *)(v17 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v16, a2, v17);
  *(_BYTE *)(v7 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_isStream) = a3;
  v18 = v7 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_clientData;
  v19 = sub_1000C7444();
  v20 = *(_QWORD *)(v19 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v18, a4, v19);
  *(_QWORD *)(v7 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_modelAssets) = a5;
  v21 = (_QWORD *)a6;
  sub_10001D29C(a6, v7 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_inferenceProviderConnection);
  v22 = sub_100002F78(&qword_1000FFB80);
  v23 = swift_allocObject(v22, ((*(unsigned int *)(v22 + 48) + 3) & 0x1FFFFFFFCLL) + 4, *(unsigned __int16 *)(v22 + 52) | 3);
  *(_DWORD *)(v23 + ((*(unsigned int *)(*(_QWORD *)v23 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  v24 = v23 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v23 + 16);
  v25 = type metadata accessor for InferenceProviderRequestConfiguration(0);
  v26 = *(_QWORD *)(v25 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v24, a7, v25);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(a7, v25);
  sub_10000650C(v21);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(a4, v19);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(a2, v17);
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(a1, v15);
  *(_QWORD *)(v7 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_locked_config) = v23;
  return v7;
}

void sub_1000C5EBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(uint64_t, os_unfair_lock_s *);
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[12];
  uint64_t v29;
  uint64_t v30;

  sub_10001D810();
  v29 = v1;
  v30 = v2;
  v3 = v0;
  v5 = v4;
  v6 = (os_unfair_lock_s *)sub_10001E368();
  v7 = *(_QWORD *)&v6[-2]._os_unfair_lock_opaque;
  __chkstk_darwin(v6);
  sub_10001E684();
  v10 = v8 - v9;
  __chkstk_darwin(v11);
  v13 = (char *)&v26 - v12;
  sub_1000C5C2C();
  (*(void (**)(uint64_t, _QWORD, os_unfair_lock_s *))(v7 + 104))(v10, enum case for RequestPriority.background(_:), v6);
  v14 = sub_1000B22E4((uint64_t)v13, v10);
  v15 = *(void (**)(uint64_t, os_unfair_lock_s *))(v7 + 8);
  v15(v10, v6);
  v15((uint64_t)v13, v6);
  if ((v14 & 1) != 0)
  {
    if (qword_1000FB220 != -1)
      swift_once(&qword_1000FB220, sub_1000C5B08);
    v16 = sub_10001DD64();
    sub_100002FF8(v16, (uint64_t)qword_1000FF9F0);
    v17 = swift_retain_n(v3, 2);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)sub_10001D8D4(12);
      v21 = sub_10001D8D4(32);
      *(_DWORD *)v20 = 136315138;
      v28[0] = v21;
      sub_1000C7484();
      sub_100006744((unint64_t *)&qword_1000FBEA0, &qword_1000FB2A0);
      v23 = sub_10001EC14(v22);
      sub_1000102C0(v23, v24, v28);
      v27 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28, v20 + 4);
      sub_10001EBB0(v3);
      sub_10001E034();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Request %s updateSessionPriority doing nothing for background request", v20, 0xCu);
      swift_arrayDestroy(v21, 1);
      sub_10001D790(v21);
      sub_10001D790((uint64_t)v20);

    }
    else
    {

      sub_10001EBB0(v3);
    }
  }
  else
  {
    sub_1000C73D4(*(_QWORD *)(v3 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_locked_config));
    sub_1000C6148(v14, v5, v3);
    os_unfair_lock_unlock(v6);
  }
}

void sub_1000C6148(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  uint8_t *v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  int v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint8_t *v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v5 = a2;
  v6 = type metadata accessor for RequestPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v5)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for RequestPriority.userInitiated(_:), v6);
    InferenceProviderRequestConfiguration.requestPriority.setter(v9);
    if (qword_1000FB220 != -1)
      swift_once(&qword_1000FB220, sub_1000C5B08);
    v10 = type metadata accessor for Logger(0);
    sub_100002FF8(v10, (uint64_t)qword_1000FF9F0);
    v11 = swift_retain_n(a3, 2);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(32, -1);
      *(_DWORD *)v14 = 136315138;
      v45 = v15;
      v42 = v14 + 4;
      v16 = sub_100002F78(&qword_1000FB2A0);
      v41 = a3;
      v17 = v16;
      sub_100006744((unint64_t *)&qword_1000FBEA0, &qword_1000FB2A0);
      v19 = dispatch thunk of CustomStringConvertible.description.getter(v17, v18);
      v21 = v20;
      sub_1000102C0(v19, v20, &v45);
      v43 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v42);
      swift_release_n(v41, 2);
      swift_bridgeObjectRelease(v21);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Reducing priority of request %s to userInitiated", v14, 0xCu);
      swift_arrayDestroy(v15, 1);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);

    }
    else
    {

      swift_release_n(a3, 2);
    }
  }
  else
  {
    if (qword_1000FB220 != -1)
      swift_once(&qword_1000FB220, sub_1000C5B08);
    v23 = type metadata accessor for Logger(0);
    sub_100002FF8(v23, (uint64_t)qword_1000FF9F0);
    v24 = swift_retain_n(a3, 2);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter();
    v27 = v26;
    if (os_log_type_enabled(v25, v26))
    {
      LODWORD(v41) = v27;
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = swift_slowAlloc(32, -1);
      v40 = v29;
      v42 = v3;
      *(_DWORD *)v28 = 136315138;
      v45 = v29;
      v38 = v28 + 4;
      v39 = v28;
      v30 = sub_100002F78(&qword_1000FB2A0);
      sub_100006744((unint64_t *)&qword_1000FBEA0, &qword_1000FB2A0);
      v32 = dispatch thunk of CustomStringConvertible.description.getter(v30, v31);
      v34 = v33;
      sub_1000102C0(v32, v33, &v45);
      v43 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v38);
      swift_release_n(a3, 2);
      swift_bridgeObjectRelease(v34);
      v36 = v39;
      _os_log_impl((void *)&_mh_execute_header, v25, (os_log_type_t)v41, "Increasing priority of request %s to foreground", v39, 0xCu);
      v37 = v40;
      swift_arrayDestroy(v40, 1);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);

    }
    else
    {

      swift_release_n(a3, 2);
    }
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for RequestPriority.foreground(_:), v6);
    InferenceProviderRequestConfiguration.requestPriority.setter(v9);
  }
}

uint64_t sub_1000C6594(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  return swift_task_switch(sub_1000C65B4, a1, 0);
}

uint64_t sub_1000C65B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  _QWORD *v28;
  int *v30;
  uint64_t v31;

  if (qword_1000FB220 != -1)
    swift_once(&qword_1000FB220, sub_1000C5B08);
  v1 = v0[8];
  v2 = sub_10001DD64();
  v0[9] = sub_100002FF8(v2, (uint64_t)qword_1000FF9F0);
  v3 = sub_10008BC60(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[8];
  v8 = &qword_1000FFFF0[2];
  if (v6)
  {
    v9 = sub_10001D8D4(22);
    v31 = sub_10001D8D4(64);
    *(_DWORD *)v9 = 136315394;
    sub_100002F78(&qword_1000FB2A0);
    sub_100006744((unint64_t *)&qword_1000FBEA0, &qword_1000FB2A0);
    v11 = sub_10008BF74(v10, v10);
    sub_10001E89C(v11, v12, v13, v14);
    v0[4] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v9 + 4);
    sub_10001E034();
    sub_10001EBB0(v7);
    *(_WORD *)(v9 + 12) = 2080;
    sub_1000C7484();
    sub_100006744(&qword_1000FBE80, &qword_1000FB2D8);
    v17 = sub_10001EC14(v16);
    sub_10001E89C(v17, v18, v19, v20);
    v0[5] = v21;
    v8 = qword_1000FFFF0 + 16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v9 + 14);
    sub_10001E034();
    sub_10001EBB0(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Cancelling request %s with session %s", (uint8_t *)v9, 0x16u);
    sub_10007DBD8();
    sub_10001D790(v31);
    sub_10001D790(v9);
  }
  else
  {
    sub_100044904(v0[8]);
  }

  v22 = v0[8];
  *(_BYTE *)(v22 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_isCancelled) = 1;
  v23 = *(_QWORD *)(v22 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_inferenceProviderConnection + 24);
  v24 = *(_QWORD *)(v22 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_inferenceProviderConnection + 32);
  sub_10001C830((_QWORD *)(v22 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_inferenceProviderConnection), v23);
  v25 = v8[46];
  v0[10] = v25;
  v26 = v22 + v25;
  v27 = *(int **)(v24 + 56);
  v30 = (int *)((char *)v27 + *v27);
  v28 = (_QWORD *)swift_task_alloc(v27[1]);
  v0[11] = v28;
  *v28 = v0;
  v28[1] = sub_1000C684C;
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v30)(v26, v0[7], v23, v24);
}

uint64_t sub_1000C684C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 88));
  return swift_task_switch(sub_1000C68A4, v1, 0);
}

uint64_t sub_1000C68A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_runningTask);
  *(_QWORD *)(v0 + 96) = v2;
  if (!v2)
    return (*(uint64_t (**)(void))(v0 + 8))();
  sub_10008BC60(v1);
  v3 = swift_retain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 64);
    v7 = sub_10001D8D4(22);
    v27 = sub_10001D8D4(64);
    *(_DWORD *)v7 = 136315394;
    v8 = sub_100002F78(&qword_1000FB2A0);
    sub_100006744((unint64_t *)&qword_1000FBEA0, &qword_1000FB2A0);
    v10 = dispatch thunk of CustomStringConvertible.description.getter(v8, v9);
    sub_1000C4AF0(v10, v11, v12, v13, v14, v15);
    *(_QWORD *)(v0 + 16) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v7 + 4);
    sub_10001E034();
    sub_10001EBB0(v6);
    *(_WORD *)(v7 + 12) = 2080;
    sub_1000C7484();
    sub_100006744(&qword_1000FBE80, &qword_1000FB2D8);
    v18 = sub_10001EC14(v17);
    sub_1000C4AF0(v18, v19, v20, v21, v22, v23);
    *(_QWORD *)(v0 + 24) = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v7 + 14);
    sub_10001E034();
    sub_10001EBB0(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Cancelling Task running the request %s with session %s", (uint8_t *)v7, 0x16u);
    sub_10007DBD8();
    sub_10001D790(v27);
    sub_10001D790(v7);
  }
  else
  {
    sub_100044904(*(_QWORD *)(v0 + 64));
  }

  sub_100002F78(&qword_1000FB5F8);
  Task.cancel()();
  v26 = (_QWORD *)swift_task_alloc(async function pointer to Task.value.getter[1]);
  *(_QWORD *)(v0 + 104) = v26;
  *v26 = v0;
  v26[1] = sub_1000C6B28;
  return Task.value.getter();
}

uint64_t sub_1000C6B28()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 104));
  v3 = *(_QWORD *)(v2 + 48);
  if (v0)
  {
    swift_errorRelease(v0);
    v4 = sub_1000C73D0;
  }
  else
  {
    v4 = sub_1000C6B94;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000C6B94()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 96));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C6BC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57[11];
  uint64_t v58;
  uint64_t v59;

  sub_10001D810();
  v58 = v1;
  v59 = v2;
  v3 = v0;
  v5 = v4;
  v6 = type metadata accessor for InferenceProviderDescriptor(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_10001E168();
  v10 = v9 - v8;
  v11 = sub_10001E368();
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_10001E684();
  v15 = (char *)(v13 - v14);
  __chkstk_darwin(v16);
  v18 = (char *)&v50 - v17;
  sub_1000C5C2C();
  sub_100006710(&qword_1000FB570, (uint64_t (*)(uint64_t))&type metadata accessor for RequestPriority);
  v55 = v5;
  v20 = ((uint64_t (*)(uint64_t, char *, uint64_t, uint64_t))dispatch thunk of static Comparable.< infix(_:_:))(v5, v18, v11, v19);
  v21 = *(void (**)(char *, uint64_t))(v12 + 8);
  v21(v18, v11);
  if ((v20 & 1) != 0)
    return 0;
  v52 = v21;
  v53 = v3;
  v54 = v15;
  v22 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_inferenceProviderConnection + 24);
  v23 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_inferenceProviderConnection + 32);
  sub_10001C830((_QWORD *)(v3 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_inferenceProviderConnection), v22);
  v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
  v25 = ((uint64_t (*)(uint64_t))InferenceProviderDescriptor.hostedOnServer.getter)(v24);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  if ((v25 & 1) != 0)
    return 0;
  if (qword_1000FB220 != -1)
    swift_once(&qword_1000FB220, sub_1000C5B08);
  v27 = sub_10001DD64();
  sub_100002FF8(v27, (uint64_t)qword_1000FF9F0);
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  v29 = v54;
  v28((uint64_t)v54, v55, v11);
  v30 = v53;
  v31 = sub_10008BC60(v53);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.default.getter();
  v34 = v33;
  if (os_log_type_enabled(v32, v33))
  {
    v35 = sub_10001D8D4(32);
    v55 = sub_10001D8D4(96);
    v57[0] = v55;
    *(_DWORD *)v35 = 136315650;
    v51 = v34;
    v36 = sub_100002F78(&qword_1000FB2A0);
    sub_100006744((unint64_t *)&qword_1000FBEA0, &qword_1000FB2A0);
    v38 = dispatch thunk of CustomStringConvertible.description.getter(v36, v37);
    sub_10002B7E0(v38, v39);
    v56 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v35 + 4);
    sub_10001EBB0(v30);
    sub_10001E034();
    *(_WORD *)(v35 + 12) = 2080;
    sub_1000C5C2C();
    v41 = ((uint64_t (*)(void))RequestPriority.rawValue.getter)();
    v43 = v42;
    v52(v18, v11);
    sub_1000102C0(v41, v43, v57);
    v56 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v35 + 14);
    sub_10001EBB0(v30);
    v45 = swift_bridgeObjectRelease(v43);
    *(_WORD *)(v35 + 22) = 2080;
    v46 = ((uint64_t (*)(uint64_t))RequestPriority.rawValue.getter)(v45);
    sub_10002B7E0(v46, v47);
    v56 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v35 + 24);
    sub_10001E034();
    sub_1000C74B0();
    _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)v51, "Request %s should be cancelled: priority %s <= %s and it is not using a server IP", (uint8_t *)v35, 0x20u);
    v49 = v55;
    swift_arrayDestroy(v55, 3);
    sub_10001D790(v49);
    sub_10001D790(v35);
  }
  else
  {
    sub_100044904(v30);
    v52(v29, v11);
  }

  return 1;
}

uint64_t sub_1000C6F70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_id;
  v3 = a2 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_id;
  v4 = type metadata accessor for OneShotRequest(0);
  return static UUIDIdentifier.== infix(_:_:)(v2, v3, v4);
}

uint64_t sub_1000C6FB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100002F78(&qword_1000FB2A0);
  sub_100006744(&qword_1000FB2A8, &qword_1000FB2A0);
  return dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
}

void sub_1000C7020()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = sub_100002F78(&qword_1000FB2A0);
  sub_10001DD50(v1);
  v2 = sub_100002F78(&qword_1000FB2D8);
  sub_10001DD50(v2);
  v3 = sub_1000C7444();
  sub_10001DD50(v3);
  swift_bridgeObjectRelease();
  sub_10000650C((_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_inferenceProviderConnection));
  swift_release();
  swift_release();
  sub_100006C14();
}

uint64_t sub_1000C70C4()
{
  uint64_t v0;

  sub_1000C7020();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for DaemonRequest(uint64_t a1)
{
  uint64_t result;

  result = qword_1000FFA30;
  if (!qword_1000FFA30)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DaemonRequest);
  return result;
}

void sub_1000C7120(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[9];

  sub_1000C72AC(319, (unint64_t *)&unk_1000FFA48, (uint64_t (*)(uint64_t))&type metadata accessor for OneShotRequest, (uint64_t)&protocol witness table for OneShotRequest);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_1000C72AC(319, (unint64_t *)&qword_1000FE4E8, (uint64_t (*)(uint64_t))&type metadata accessor for Session, (uint64_t)&protocol witness table for Session);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = &unk_1000CD470;
      v6 = type metadata accessor for ClientData(319);
      if (v7 <= 0x3F)
      {
        v8[3] = *(_QWORD *)(v6 - 8) + 64;
        v8[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
        v8[5] = &unk_1000CD488;
        v8[6] = (char *)&value witness table for Builtin.NativeObject + 64;
        v8[7] = &unk_1000CD4A0;
        v8[8] = &unk_1000CD470;
        swift_updateClassMetadata2(a1, 256, 9, v8, a1 + 80);
      }
    }
  }
}

Swift::Int sub_1000C7228()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  v0 = sub_100002F78(&qword_1000FB2A0);
  sub_100006744(&qword_1000FB2A8, &qword_1000FB2A0);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

void sub_1000C72AC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = type metadata accessor for UUIDIdentifier(a1, v7, a4);
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_1000C7308()
{
  sub_100006710(&qword_1000FFB78, type metadata accessor for DaemonRequest);
}

uint64_t sub_1000C7334(uint64_t *a1, uint64_t *a2)
{
  return sub_1000C6F70(*a1, *a2) & 1;
}

Swift::Int sub_1000C7354()
{
  return sub_1000C7228();
}

uint64_t sub_1000C7374(uint64_t a1)
{
  return sub_1000C6FB4(a1);
}

Swift::Int sub_1000C7394(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_1000C6FB4((uint64_t)v2);
  return Hasher._finalize()();
}

void sub_1000C73D4(uint64_t a1@<X8>)
{
  uint64_t v1;

  os_unfair_lock_lock((os_unfair_lock_t)(a1 + ((*(unsigned int *)(v1 + 48) + 3) & 0x1FFFFFFFCLL)));
}

uint64_t sub_1000C73F8()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 224) + 8))(*(_QWORD *)(v0 - 176), *(_QWORD *)(v0 - 208));
}

uint64_t sub_1000C740C@<X0>(uint64_t a1@<X8>)
{
  uint64_t (*v1)(_QWORD, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(*(_QWORD *)(a1 - 256), v3, v2);
}

uint64_t sub_1000C7420()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 216) + 8))(*(_QWORD *)(v0 - 184), *(_QWORD *)(v0 - 200));
}

uint64_t sub_1000C7434()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 168) + 8))(*(_QWORD *)(v0 - 192), *(_QWORD *)(v0 - 160));
}

uint64_t sub_1000C7444()
{
  return type metadata accessor for ClientData(0);
}

uint64_t sub_1000C744C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 272);
}

uint64_t sub_1000C7464()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 136, v1, v0);
}

uint64_t sub_1000C7474()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 240) + 8))(*(_QWORD *)(v0 - 248), *(_QWORD *)(v0 - 232));
}

uint64_t sub_1000C7484()
{
  uint64_t *v0;

  return sub_100002F78(v0);
}

uint64_t sub_1000C7498()
{
  return 0;
}

uint64_t sub_1000C74A4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 432))();
}

uint64_t sub_1000C74B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_1000C74BC()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_100002FB8(v0, qword_1000FFB88);
  sub_100002FF8(v0, (uint64_t)qword_1000FFB88);
  v1 = subsystemName.getter();
  return Logger.init(subsystem:category:)(v1);
}

uint64_t sub_1000C752C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1000FFBDC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1000C7574;
  return sub_1000C75A8();
}

uint64_t sub_1000C7574()
{
  uint64_t v0;
  uint64_t v1;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v1 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C75A8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1[2] = v0;
  v2 = type metadata accessor for OS_dispatch_source.MemoryPressureEvent(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = sub_10001D800(v3);
  v4 = sub_100002F78(&qword_1000FFCB8);
  v1[6] = sub_10001D800(*(_QWORD *)(v4 - 8));
  v5 = sub_100002F78(&qword_1000FFCC0);
  v1[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[8] = v6;
  v1[9] = sub_10001D800(v6);
  v7 = sub_100002F78(&qword_1000FFCC8);
  v1[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[11] = v8;
  v1[12] = sub_10001D800(v8);
  v9 = sub_100002F78(&qword_1000FFCD0);
  v1[13] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v1[14] = v10;
  v1[15] = sub_10001D800(v10);
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_1000C7668()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  if (qword_1000FB228 != -1)
    swift_once(&qword_1000FB228, sub_1000C74BC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100002FF8(v1, (uint64_t)qword_1000FFB88);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)sub_10001D8D4(2);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Listening for memory pressure events", v5, 2u);
    sub_10001D790((uint64_t)v5);
  }
  v7 = v0[11];
  v6 = v0[12];
  v9 = v0[9];
  v8 = v0[10];
  v10 = v0[7];
  v11 = v0[8];
  v12 = v0[3];

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 104))(v9, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v10);
  AsyncStream.init(_:bufferingPolicy:_:)(v12, v9, sub_1000AFD04, 0, v12);
  AsyncStream.makeAsyncIterator()(v8);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v0[16] = sub_100039A14(&qword_1000FFCD8, type metadata accessor for MemoryPressureObserver, (uint64_t)&unk_1000CD578);
  v13 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v14 = sub_1000C8A90(v13);
  return AsyncStream.Iterator.next(isolation:)(v14);
}

uint64_t sub_1000C7804()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 136));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_1000C783C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 24);
  if (sub_100005700(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
    sub_10001D938();
    sub_10001EAC8();
    sub_10001E490();
    sub_10001E330();
    sub_10002B504();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v0 + 32) + 32))(*(_QWORD *)(v0 + 40), v1, v2);
    v4 = (_QWORD *)swift_task_alloc(dword_1000FFBE4);
    *(_QWORD *)(v0 + 144) = v4;
    *v4 = v0;
    v4[1] = sub_1000C791C;
    return sub_1000C79B8(*(_QWORD *)(v0 + 40));
  }
}

uint64_t sub_1000C791C()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 144));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_1000C7954()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  (*(void (**)(_QWORD, _QWORD))(v0[4] + 8))(v0[5], v0[3]);
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to AsyncStream.Iterator.next(isolation:) + 1));
  v2 = sub_1000C8A90(v1);
  return AsyncStream.Iterator.next(isolation:)(v2);
}

uint64_t sub_1000C79B8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[28] = a1;
  v2[29] = v1;
  v3 = type metadata accessor for Assertion.DaemonRep(0);
  v2[30] = v3;
  v2[31] = *(_QWORD *)(v3 - 8);
  v2[32] = sub_10001E784();
  v2[33] = sub_10001E784();
  v2[34] = sub_10001E784();
  sub_100002F78(&qword_1000FB578);
  v2[35] = sub_10001E784();
  v2[36] = sub_10001E784();
  v2[37] = sub_10001E784();
  v2[38] = sub_10001E784();
  v4 = sub_100002F78(&qword_1000FB250);
  v2[39] = v4;
  v2[40] = *(_QWORD *)(v4 - 8);
  v2[41] = sub_10001E784();
  v2[42] = sub_10001E784();
  v2[43] = sub_10001E784();
  v5 = type metadata accessor for OS_dispatch_source.MemoryPressureEvent(0);
  v2[44] = v5;
  v2[45] = *(_QWORD *)(v5 - 8);
  v2[46] = sub_10001E784();
  v2[47] = sub_10001E784();
  v2[48] = sub_10001E784();
  sub_10001D7B8();
  return sub_10001D6D0();
}

uint64_t sub_1000C7ACC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t (*v90)(uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  sub_10001E6D4();
  v96 = v1;
  v97 = v2;
  v95 = v0;
  if (qword_1000FB228 != -1)
    swift_once(&qword_1000FB228, sub_1000C74BC);
  v3 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 384);
  v6 = *(_QWORD *)(v0 + 352);
  v5 = *(_QWORD *)(v0 + 360);
  v7 = type metadata accessor for Logger(0);
  v8 = (void (*)(uint64_t, uint64_t))sub_100002FF8(v7, (uint64_t)qword_1000FFB88);
  *(_QWORD *)(v0 + 392) = v8;
  v90 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v9 = v90(v4, v3, v6);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  v12 = os_log_type_enabled(v10, v11);
  v13 = *(_QWORD *)(v0 + 352);
  if (v12)
  {
    v84 = v0 + 216;
    v14 = (uint8_t *)sub_10001D8D4(12);
    v87 = sub_10001D8D4(32);
    v94 = v87;
    *(_DWORD *)v14 = 136315138;
    v8 = (void (*)(uint64_t, uint64_t))(v14 + 12);
    v81 = (uint64_t)(v14 + 4);
    v15 = sub_100039A14(&qword_1000FFCB0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.MemoryPressureEvent, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.MemoryPressureEvent);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v13, v15);
    v18 = v17;
    sub_1000102C0(v16, v17, &v94);
    *(_QWORD *)(v0 + 216) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v14 + 4);
    swift_bridgeObjectRelease(v18);
    sub_1000C8AB4();
    sub_10001E18C((void *)&_mh_execute_header, v10, v11, "Processing memory pressure %s event", v14);
    sub_10001DBB8(v87);
    sub_10001D790(v87);
    sub_10001D790((uint64_t)v14);
  }
  else
  {
    sub_1000C8AB4();
  }

  v21 = *(_QWORD *)(v0 + 368);
  v20 = *(_QWORD *)(v0 + 376);
  v22 = *(_QWORD *)(v0 + 352);
  v23 = *(_QWORD *)(v0 + 224);
  static OS_dispatch_source.MemoryPressureEvent.normal.getter(v24);
  sub_100039A14(&qword_1000FFCA8, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.MemoryPressureEvent, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.MemoryPressureEvent);
  sub_1000C8A84();
  sub_1000C8A84();
  v25 = *(_QWORD *)(v0 + 160);
  v26 = *(_QWORD *)(v0 + 200);
  v8(v20, v22);
  v27 = v90(v21, v23, v22);
  if (v25 == v26)
  {
    v8(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 352));
LABEL_9:
    v35 = *(_QWORD *)(v0 + 304);
    v34 = *(_QWORD *)(v0 + 312);
    v36 = *(_QWORD *)(v0 + 232) + OBJC_IVAR____TtC13modelmanagerd22MemoryPressureObserver_activeAssertionID;
    sub_10002B308(v36, v0 + 64, 0);
    sub_1000C88F8(v36, v35);
    if (sub_100005700(v35, 1, v34) != 1)
    {
      v37 = *(_QWORD *)(v0 + 312);
      v38 = *(_QWORD *)(v0 + 296);
      (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v0 + 320) + 32))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 304), v37);
      sub_100005630(v38, 1, 1, v37);
      sub_10002B308(v36, v0 + 40, 33);
      sub_1000C89C8(v38, v36);
      swift_endAccess(v0 + 40);
      v39 = (_QWORD *)swift_task_alloc(dword_1000FB59C);
      *(_QWORD *)(v0 + 400) = v39;
      *v39 = v0;
      v39[1] = sub_1000C8030;
      return sub_100007210(*(_QWORD *)(v0 + 344));
    }
    sub_1000C8940(*(_QWORD *)(v0 + 304));
    goto LABEL_15;
  }
  v29 = *(_QWORD *)(v0 + 368);
  v28 = *(_QWORD *)(v0 + 376);
  v30 = *(_QWORD *)(v0 + 352);
  static OS_dispatch_source.MemoryPressureEvent.warning.getter(v27);
  sub_10007EBD4();
  sub_10007EBD4();
  v31 = *(_QWORD *)(v0 + 192);
  v32 = *(_QWORD *)(v0 + 152);
  v8(v28, v30);
  v33 = ((uint64_t (*)(uint64_t, uint64_t))v8)(v29, v30);
  if (v31 == v32)
    goto LABEL_9;
  v41 = *(_QWORD *)(v0 + 376);
  v42 = *(_QWORD *)(v0 + 352);
  static OS_dispatch_source.MemoryPressureEvent.critical.getter(v33);
  sub_1000C8A84();
  sub_1000C8A84();
  v43 = *(_QWORD *)(v0 + 136);
  v44 = *(_QWORD *)(v0 + 144);
  v8(v41, v42);
  if (v44 == v43)
  {
    v45 = *(_QWORD *)(v0 + 312);
    v46 = *(_QWORD *)(v0 + 288);
    v47 = *(_QWORD *)(v0 + 232);
    v48 = OBJC_IVAR____TtC13modelmanagerd22MemoryPressureObserver_activeAssertionID;
    *(_QWORD *)(v0 + 408) = OBJC_IVAR____TtC13modelmanagerd22MemoryPressureObserver_activeAssertionID;
    v49 = v47 + v48;
    sub_10002B308(v47 + v48, v0 + 112, 0);
    sub_1000C88F8(v49, v46);
    LODWORD(v45) = sub_100005700(v46, 1, v45);
    sub_1000C8940(v46);
    if ((_DWORD)v45 == 1)
    {
      v50 = *(_QWORD *)(v0 + 328);
      v51 = *(_QWORD *)(v0 + 312);
      v52 = *(_QWORD *)(v0 + 296);
      v53 = *(_QWORD *)(v0 + 280);
      v54 = ((uint64_t (*)(_QWORD))type metadata accessor for Assertion)(0);
      ((void (*)(uint64_t, void *))UUIDIdentifier.init())(v54, &protocol witness table for Assertion);
      v55 = ((uint64_t (*)(unint64_t, unint64_t, unint64_t, unint64_t, uint64_t))Assertion.DaemonRep.init(policy:description:id:))(0xD000000000000016, 0x80000001000CFAF0, 0xD000000000000016, 0x80000001000CFAF0, v50);
      ((void (*)(uint64_t))Assertion.DaemonRep.id.getter)(v55);
      sub_100005630(v52, 0, 1, v51);
      sub_1000C8980(v52, v53);
      sub_10002B308(v49, v0 + 88, 33);
      sub_1000C89C8(v53, v49);
      swift_endAccess(v0 + 88);
      v56 = (_QWORD *)swift_task_alloc(dword_1000FB5BC);
      *(_QWORD *)(v0 + 416) = v56;
      *v56 = v0;
      v56[1] = sub_1000C8258;
      return sub_100007068(*(_QWORD *)(v0 + 272));
    }
  }
LABEL_15:
  sub_1000C8A54();
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  sub_10002B70C();
  v57 = sub_10002BDF0();
  v65 = sub_10007F17C(v57, v58, v59, v60, v61, v62, v63, v64, v81, v84, v87, (uint64_t)v90);
  v73 = sub_1000C8AC4(v65, v66, v67, v68, v69, v70, v71, v72, v82, v85, v88, v91, v0 + 160);
  sub_10007FC24(v73, v74, v75, v76, v77, v78, v79, v80, v83, v86, v89, v92, v93, v0 + 200);
  return sub_10001DBC8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000C8030()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 400));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_1000C8068()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 320) + 16))(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 312));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 336);
    v5 = *(_QWORD *)(v0 + 312);
    v27 = *(_QWORD *)(v0 + 320);
    v29 = *(_QWORD *)(v0 + 344);
    v6 = (uint8_t *)sub_10001D8D4(12);
    v7 = sub_10001D8D4(32);
    v31 = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = sub_1000C8A10();
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v5, v8);
    v11 = v10;
    sub_1000102C0(v9, v10, &v31);
    *(_QWORD *)(v0 + 208) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v6 + 4);
    swift_bridgeObjectRelease(v11);
    v13 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v13(v4, v5);
    sub_10001E18C((void *)&_mh_execute_header, v2, v3, "Released critical memory pressure assertion %s", v6);
    sub_10001DBB8(v7);
    sub_10001D790(v7);
    sub_10001D790((uint64_t)v6);

    v13(v29, v5);
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 336);
    v14 = *(_QWORD *)(v0 + 344);

    sub_1000C4038(v15);
    sub_1000C4038(v14);
  }
  v26 = *(_QWORD *)(v0 + 272);
  v28 = *(_QWORD *)(v0 + 264);
  v30 = *(_QWORD *)(v0 + 256);
  swift_task_dealloc(*(_QWORD *)(v0 + 384));
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  sub_10002B70C();
  sub_10002BDF0();
  swift_task_dealloc(v26);
  v16 = swift_task_dealloc(v28);
  sub_10007F17C(v16, v17, v18, v19, v20, v21, v22, v23, v25, v26, v28, v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C8258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 416);
  *(_QWORD *)(*(_QWORD *)v1 + 424) = v0;
  swift_task_dealloc(v2);
  return sub_10001D6D0();
}

#error "1000C8478: call analysis failed (funcsize=117)"

#error "1000C8764: call analysis failed (funcsize=184)"

uint64_t sub_1000C877C()
{
  uint64_t v0;

  swift_release();
  sub_10000650C((_QWORD *)(v0 + 120));
  sub_1000C8940(v0 + OBJC_IVAR____TtC13modelmanagerd22MemoryPressureObserver_activeAssertionID);
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_1000C87B8()
{
  uint64_t v0;

  sub_1000C877C();
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000C87D0()
{
  return type metadata accessor for MemoryPressureObserver(0);
}

uint64_t type metadata accessor for MemoryPressureObserver(uint64_t a1)
{
  uint64_t result;

  result = qword_1000FFBC8;
  if (!qword_1000FFBC8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MemoryPressureObserver);
  return result;
}

void sub_1000C8810(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = &unk_1000CD560;
  sub_1000C88A0(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
  }
}

void sub_1000C88A0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000FFBE8)
  {
    v2 = sub_1000056BC(&qword_1000FB250);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000FFBE8);
  }
}

uint64_t sub_1000C88F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100002F78(&qword_1000FB578);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C8940(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100002F78(&qword_1000FB578);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000C8980(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100002F78(&qword_1000FB578);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C89C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100002F78(&qword_1000FB578);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000C8A10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000FB5B0;
  if (!qword_1000FB5B0)
  {
    v1 = sub_1000056BC(&qword_1000FB250);
    result = swift_getWitnessTable(&protocol conformance descriptor for UUIDIdentifier<A>, v1);
    atomic_store(result, &qword_1000FB5B0);
  }
  return result;
}

uint64_t sub_1000C8A54()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 384));
}

uint64_t sub_1000C8A84()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v1, v0);
}

uint64_t sub_1000C8A90(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 136) = a1;
  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 48);
}

uint64_t sub_1000C8AB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1000C8AC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return swift_task_dealloc(a13);
}

uint64_t sub_1000C8ACC()
{
  return sub_1000C8C64(1);
}

uint64_t sub_1000C8AD4(int a1, int a2, int a3, int a4)
{
  BOOL v9;
  _DWORD v10[2];

  if (qword_1001036F8 == -1)
  {
    if (qword_100103700)
    {
LABEL_3:
      v10[0] = a1;
      v10[1] = (a2 << 16) | (a3 << 8) | a4;
      return _availability_version_check(1, v10);
    }
  }
  else
  {
    dispatch_once_f(&qword_1001036F8, 0, (dispatch_function_t)sub_1000C8C5C);
    if (qword_100103700)
      goto LABEL_3;
  }
  if (qword_1001036F0 == -1)
  {
    v9 = dword_1001036E0 < a2;
    if (dword_1001036E0 > a2)
      return 1;
  }
  else
  {
    dispatch_once_f(&qword_1001036F0, 0, (dispatch_function_t)sub_1000C8ACC);
    v9 = dword_1001036E0 < a2;
    if (dword_1001036E0 > a2)
      return 1;
  }
  if (v9)
    return 0;
  if (dword_1001036E4 > a3)
    return 1;
  return dword_1001036E4 >= a3 && dword_1001036E8 >= a4;
}

uint64_t sub_1000C8C5C()
{
  return sub_1000C8C64(0);
}

uint64_t sub_1000C8C64(uint64_t result)
{
  void *v1;
  BOOL v2;
  unsigned __int8 *v4;
  uint64_t (*v5)(_QWORD);
  unint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, _QWORD, _QWORD);
  uint64_t (*v8)(_QWORD, const char *, uint64_t, unsigned __int8 *);
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t (*v10)(uint64_t);
  uint64_t (*v11)(void);
  FILE *v12;
  FILE *v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  FILE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  FILE *v27;
  unsigned int (*v28)(uint64_t, char *, uint64_t, uint64_t);
  char v29[32];

  v1 = (void *)qword_100103700;
  if (qword_100103700)
    v2 = (_DWORD)result == 0;
  else
    v2 = 0;
  if (!v2)
  {
    if (&__availability_version_check)
    {
      qword_100103700 = (uint64_t)&__availability_version_check;
      v1 = &__availability_version_check;
    }
    if (!v1 || (_DWORD)result != 0)
    {
      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "kCFAllocatorNull");
      if (result)
      {
        v4 = *(unsigned __int8 **)result;
        result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDataCreateWithBytesNoCopy");
        if (result)
        {
          v5 = (uint64_t (*)(_QWORD))result;
          v6 = (unint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateWithData");
          result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateFromXMLData");
          if (v6 | result)
          {
            v7 = (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD))result;
            result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringCreateWithCStringNoCopy");
            if (result)
            {
              v8 = (uint64_t (*)(_QWORD, const char *, uint64_t, unsigned __int8 *))result;
              result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDictionaryGetValue");
              if (result)
              {
                v9 = (uint64_t (*)(uint64_t, uint64_t))result;
                result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFGetTypeID");
                if (result)
                {
                  v10 = (uint64_t (*)(uint64_t))result;
                  result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetTypeID");
                  if (result)
                  {
                    v11 = (uint64_t (*)(void))result;
                    result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetCString");
                    v28 = (unsigned int (*)(uint64_t, char *, uint64_t, uint64_t))result;
                    if (result)
                    {
                      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFRelease");
                      if (result)
                      {
                        v12 = (FILE *)result;
                        result = (uint64_t)fopen("/System/Library/CoreServices/SystemVersion.plist", "r");
                        if (result)
                        {
                          v13 = (FILE *)result;
                          v27 = v12;
                          fseek((FILE *)result, 0, 2);
                          v14 = ftell(v13);
                          if (v14 < 0)
                          {
                            v16 = 0;
                          }
                          else
                          {
                            v15 = v14;
                            rewind(v13);
                            v16 = malloc(v15);
                            if (v16)
                            {
                              v26 = v16;
                              if (fread(v16, 1uLL, v15, v13) == v15)
                              {
                                v17 = v5(0);
                                if (v17)
                                {
                                  v18 = v17;
                                  v19 = v13;
                                  if (v6)
                                    v20 = ((uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))v6)(0, v17, 0, 0, 0);
                                  else
                                    v20 = v7(0, v17, 0, 0);
                                  v21 = v20;
                                  if (v20)
                                  {
                                    v22 = v8(0, "ProductVersion", 1536, v4);
                                    if (v22)
                                    {
                                      v23 = v22;
                                      v24 = v9(v21, v22);
                                      ((void (*)(uint64_t))v27)(v23);
                                      if (v24)
                                      {
                                        v25 = v10(v24);
                                        if (v25 == v11())
                                        {
                                          if (v28(v24, v29, 32, 134217984))
                                            sscanf(v29, "%d.%d.%d", &dword_1001036E0, &dword_1001036E4, &dword_1001036E8);
                                        }
                                      }
                                    }
                                    ((void (*)(uint64_t))v27)(v21);
                                    v19 = v13;
                                  }
                                  ((void (*)(uint64_t))v27)(v18);
                                }
                                else
                                {
                                  v19 = v13;
                                }
                                v16 = v26;
                              }
                              else
                              {
                                v16 = v26;
                                v19 = v13;
                              }
                              goto LABEL_41;
                            }
                          }
                          v19 = v13;
LABEL_41:
                          free(v16);
                          return fclose(v19);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

