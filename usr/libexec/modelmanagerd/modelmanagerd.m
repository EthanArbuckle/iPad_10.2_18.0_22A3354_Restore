int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v41;
  __int128 v42;
  uint64_t v43;

  v3 = sub_100002F78(&qword_1000FB230);
  __chkstk_darwin(v3);
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100002F78(&qword_1000FB238);
  v7 = sub_100006A80(v6, 64);
  *(_OWORD *)(v7 + 16) = xmmword_1000CB140;
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  strcpy((char *)(v7 + 32), "Entered Daemon");
  *(_BYTE *)(v7 + 47) = -18;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease(v7);
  type metadata accessor for _OSActivity(0);
  qword_1000FB0A0 = _OSActivity.__allocating_init(_:)("Daemon initialization", 21, 2);
  v8 = type metadata accessor for Logger(0);
  sub_100002FB8(v8, qword_1000FB0A8);
  v9 = sub_100002FF8(v8, (uint64_t)qword_1000FB0A8);
  v10 = *(_QWORD *)(v8 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  generalLogger.getter(v11);
  v14 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(v9, v13, v8);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Initializing Daemon...", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }

  v18 = type metadata accessor for ModelCatalogProvider(0);
  sub_100006ACC(v18);
  v19 = sub_1000A1A38();
  v20 = type metadata accessor for FilesystemProvider();
  v21 = sub_100006A80(v20, 16);
  v22 = type metadata accessor for RunningBoardProvider(0);
  sub_100006ACC(v22);
  v23 = sub_100092020();
  v24 = type metadata accessor for TrialFrameworkProvider();
  swift_allocObject(v24, 120, 15);
  v25 = sub_10004A9B0();
  v26 = type metadata accessor for NeuralEngine();
  v27 = sub_100006A80(v26, 16);
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_100003010((unint64_t)_swiftEmptyArrayStorage);
    v28 = v41;
  }
  else
  {
    v28 = &_swiftEmptySetSingleton;
  }
  v29 = type metadata accessor for TelemetryManager();
  v30 = (_QWORD *)sub_100006A80(v29, 88);
  v31 = sub_1000ABC98(v30);
  *((_QWORD *)&v42 + 1) = v28;
  *(_QWORD *)&v42 = 0;
  v32 = sub_100005330(v19, v27, v21, v23, v25, 0, 0, 0, v42, (uint64_t)v31);
  qword_1000FB0C0 = v32;
  v33 = type metadata accessor for Daemon(0);
  sub_100006ACC(v33);
  v34 = swift_retain(v32);
  qword_1000FB0C8 = sub_10001ED74(v34);
  _OSActivity.close()();
  v35 = type metadata accessor for TaskPriority(0);
  sub_100005630((uint64_t)v5, 1, 1, v35);
  type metadata accessor for MainActor(0);
  v36 = static MainActor.shared.getter();
  v37 = sub_100006A80((uint64_t)&unk_1000F27C0, 32);
  *(_QWORD *)(v37 + 16) = v36;
  *(_QWORD *)(v37 + 24) = &protocol witness table for MainActor;
  v38 = sub_100002D04((uint64_t)v5, (uint64_t)&unk_1000FB248, v37, (uint64_t)&unk_1000F28C0, (uint64_t)&type metadata for () + 8, (uint64_t)&unk_1000FB2C8);
  swift_release(v38);
  v39 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  objc_msgSend(v39, "run");

  return 0;
}

uint64_t sub_100002B84()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for MainActor(0);
  v0[2] = static MainActor.shared.getter();
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  v0[3] = v2;
  v0[4] = v3;
  return swift_task_switch(sub_100002BEC, v2, v3);
}

uint64_t sub_100002BEC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1000FBB44);
  *(_QWORD *)(v0 + 40) = v1;
  *v1 = v0;
  v1[1] = sub_100002C38;
  return sub_10001F2E4();
}

uint64_t sub_100002C38()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 40));
  return swift_task_switch(sub_100002C84, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100002C84()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100002CAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100002D04(a1, a2, a3, (uint64_t)&unk_1000F28C0, (uint64_t)&type metadata for () + 8, (uint64_t)&unk_1000FB2C8);
}

uint64_t sub_100002CCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100002D04(a1, a2, a3, (uint64_t)&unk_1000F2898, (uint64_t)&type metadata for ProcessPriority, (uint64_t)&unk_1000FB2B8);
}

uint64_t sub_100002CE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100002D04(a1, a2, a3, (uint64_t)&unk_1000F2870, (uint64_t)&type metadata for Bool, (uint64_t)&unk_1000FB290);
}

uint64_t sub_100002D04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD v24[4];

  v12 = type metadata accessor for TaskPriority(0);
  if (sub_100005700(a1, 1, v12) == 1)
  {
    sub_10000570C(a1);
    v13 = 7168;
  }
  else
  {
    v14 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
    v13 = v14 | 0x1C00;
  }
  v15 = *(_QWORD *)(a3 + 16);
  if (v15)
  {
    v16 = *(_QWORD *)(a3 + 24);
    ObjectType = swift_getObjectType(*(_QWORD *)(a3 + 16));
    swift_unknownObjectRetain(v15);
    v18 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
    v20 = v19;
    swift_unknownObjectRelease(v15);
  }
  else
  {
    v18 = 0;
    v20 = 0;
  }
  v21 = sub_100006A80(a4, 32);
  *(_QWORD *)(v21 + 16) = a2;
  *(_QWORD *)(v21 + 24) = a3;
  if (v20 | v18)
  {
    v24[0] = 0;
    v24[1] = 0;
    v22 = v24;
    v24[2] = v18;
    v24[3] = v20;
  }
  else
  {
    v22 = 0;
  }
  return swift_task_create(v13, v22, a5, a6, v21);
}

uint64_t variable initialization expression of InferenceProviderManager.ConnectionCollection.groupsByIdentifier()
{
  uint64_t v0;

  v0 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0);
  return Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v0, &protocol witness table for String);
}

uint64_t variable initialization expression of InferenceProviderManager.waitingForFirstUpdate()
{
  return 0;
}

void *variable initialization expression of InferenceProviderManager.firstUpdateContinuations()
{
  return &_swiftEmptyArrayStorage;
}

_UNKNOWN **variable initialization expression of InferenceProviderManager.eligibilityControlledIPs()
{
  return &off_1000F2690;
}

void sub_100002E94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a1 < 0)
  {
    sub_100006B58();
    sub_100006A44((uint64_t)"Fatal error", v1, v2, (uint64_t)"Can't construct Array with count < 0", v3, v4, (uint64_t)"Swift/Array.swift");
    __break(1u);
  }
  else
  {
    if (a1)
      *(_QWORD *)(static Array._allocateBufferUninitialized(minimumCapacity:)(a1, &type metadata for String) + 16) = a1;
    sub_100006BC8();
  }
}

void sub_100002F00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 < 0)
  {
    sub_100006B58();
    sub_100006A44((uint64_t)"Fatal error", v3, v4, (uint64_t)"Can't construct Array with count < 0", v5, v6, (uint64_t)"Swift/Array.swift");
    __break(1u);
  }
  else
  {
    if (a1)
    {
      v2 = type metadata accessor for InferenceProviderAsset(0);
      *(_QWORD *)((static Array._allocateBufferUninitialized(minimumCapacity:)(a1, v2) & 0xFFFFFFFFFFFFF8) + 0x10) = a1;
    }
    sub_100006BC8();
  }
}

uint64_t sub_100002F78(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t *sub_100002FB8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_100002FF8(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

void sub_100003010(unint64_t a1)
{
  char v1;
  unint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = a1 >> 62;
  if (a1 >> 62)
  {
    sub_100006B14();
    v6 = sub_100006B70();
    sub_100006C48();
    if (v6)
    {
LABEL_3:
      sub_100002F78(&qword_1000FB2C0);
      v4 = (_BYTE *)sub_100006938();
      if (!v3)
        goto LABEL_4;
LABEL_8:
      sub_100006B14();
      v5 = sub_100006B70();
      sub_100006C48();
      if (!v5)
      {
LABEL_25:
        sub_100006C48();
        sub_100006A00();
        return;
      }
      goto LABEL_9;
    }
  }
  else if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  v4 = &_swiftEmptySetSingleton;
  if (v3)
    goto LABEL_8;
LABEL_4:
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v5)
    goto LABEL_25;
LABEL_9:
  v7 = 0;
  v24 = v5;
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, a1);
      v13 = v8;
    }
    else
    {
      if (v7 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_28;
      v13 = *(_QWORD *)(a1 + 32 + 8 * v7);
      v8 = swift_retain(v13);
    }
    v14 = __OFADD__(v7++, 1);
    if (v14)
      break;
    sub_100006BD4(v8, v9, v10, v11, v12);
    sub_10008B000();
    v15 = Hasher._finalize()();
    v16 = -1 << v4[32];
    v17 = v15 & ~v16;
    sub_100006BAC();
    if ((v20 & v19) != 0)
    {
      type metadata accessor for InferenceProviderAsset(0);
      sub_100006B78();
      sub_10008AE98();
      sub_100006C3C();
      if ((v1 & 1) != 0)
      {
LABEL_20:
        swift_release(v13);
        v5 = v24;
        goto LABEL_24;
      }
      v21 = ~v16;
      while (1)
      {
        v17 = (v17 + 1) & v21;
        sub_100006BAC();
        if ((v19 & v20) == 0)
          break;
        sub_100006B78();
        sub_10008AE98();
        sub_100006C3C();
        if ((v1 & 1) != 0)
          goto LABEL_20;
      }
      v5 = v24;
    }
    *(_QWORD *)&v4[8 * v18 + 56] = v20 | v19;
    *(_QWORD *)(*((_QWORD *)v4 + 6) + 8 * v17) = v13;
    v22 = *((_QWORD *)v4 + 2);
    v14 = __OFADD__(v22, 1);
    v23 = v22 + 1;
    if (v14)
      goto LABEL_27;
    *((_QWORD *)v4 + 2) = v23;
LABEL_24:
    if (v7 == v5)
      goto LABEL_25;
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
}

Swift::Int sub_1000031E8(Swift::Int result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  Swift::Int v10;
  BOOL v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[9];

  v1 = result;
  v2 = (unint64_t)result >> 62;
  if ((unint64_t)result >> 62)
  {
    if (result < 0)
      v5 = result;
    else
      v5 = result & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(result);
    v3 = _CocoaArrayWrapper.endIndex.getter(v5);
    result = swift_bridgeObjectRelease(v1);
    if (v3)
      goto LABEL_3;
LABEL_8:
    v4 = &_swiftEmptySetSingleton;
    goto LABEL_9;
  }
  v3 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v3)
    goto LABEL_8;
LABEL_3:
  sub_100002F78(&qword_1000FB2D0);
  result = static _SetStorage.allocate(capacity:)(v3);
  v4 = (_QWORD *)result;
LABEL_9:
  v29 = v1;
  if (v2)
  {
    if (v1 < 0)
      v7 = v1;
    else
      v7 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v6 = _CocoaArrayWrapper.endIndex.getter(v7);
    result = swift_bridgeObjectRelease(v1);
    if (!v6)
      goto LABEL_32;
  }
  else
  {
    v6 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v6)
    {
LABEL_32:
      swift_bridgeObjectRelease(v29);
      return (Swift::Int)v4;
    }
  }
  v8 = 0;
  v9 = (char *)(v4 + 7);
  v28 = v6;
  while (1)
  {
    if ((v29 & 0xC000000000000001) != 0)
    {
      result = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v29);
      v10 = result;
    }
    else
    {
      if (v8 >= *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_35;
      v10 = *(_QWORD *)(v29 + 32 + 8 * v8);
      result = swift_retain(v10);
    }
    v11 = __OFADD__(v8++, 1);
    if (v11)
      break;
    Hasher.init(_seed:)(v30, v4[5]);
    v12 = v10 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_id;
    v13 = sub_100002F78(&qword_1000FB2D8);
    sub_100006744(&qword_1000FB2E0, &qword_1000FB2D8);
    dispatch thunk of Hashable.hash(into:)(v30, v13, v14);
    result = Hasher._finalize()();
    v15 = -1 << *((_BYTE *)v4 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    v18 = *(_QWORD *)&v9[8 * (v16 >> 6)];
    v19 = 1 << v16;
    if (((1 << v16) & v18) != 0)
    {
      v20 = *(_QWORD *)(v4[6] + 8 * v16);
      v21 = v20 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_id;
      v22 = type metadata accessor for Session(0);
      swift_retain(v20);
      LOBYTE(v21) = static UUIDIdentifier.== infix(_:_:)(v21, v12, v22);
      result = swift_release(v20);
      if ((v21 & 1) != 0)
      {
LABEL_27:
        result = swift_release(v10);
        v6 = v28;
        goto LABEL_31;
      }
      v23 = ~v15;
      while (1)
      {
        v16 = (v16 + 1) & v23;
        v17 = v16 >> 6;
        v18 = *(_QWORD *)&v9[8 * (v16 >> 6)];
        v19 = 1 << v16;
        if ((v18 & (1 << v16)) == 0)
          break;
        v24 = *(_QWORD *)(v4[6] + 8 * v16);
        v25 = v24 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_id;
        swift_retain(v24);
        LOBYTE(v25) = static UUIDIdentifier.== infix(_:_:)(v25, v12, v22);
        result = swift_release(v24);
        if ((v25 & 1) != 0)
          goto LABEL_27;
      }
      v6 = v28;
    }
    *(_QWORD *)&v9[8 * v17] = v19 | v18;
    *(_QWORD *)(v4[6] + 8 * v16) = v10;
    v26 = v4[2];
    v11 = __OFADD__(v26, 1);
    v27 = v26 + 1;
    if (v11)
      goto LABEL_34;
    v4[2] = v27;
LABEL_31:
    if (v8 == v6)
      goto LABEL_32;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

void sub_1000034E8(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for Assertion.DaemonRep(0);
  v5 = sub_100006B88(v4);
  __chkstk_darwin(v5);
  sub_100006B28();
  __chkstk_darwin(v6);
  sub_100006BF4();
  if (v1 && (sub_100002F78(&qword_1000FB270), v7 = sub_100006938(), (v17 = *(_QWORD *)(a1 + 16)) != 0))
  {
    sub_1000069B4();
    while (v2 < *(_QWORD *)(a1 + 16))
    {
      sub_100006994();
      v8 = *(_QWORD *)(v7 + 40);
      sub_100006710(&qword_1000FB278, (uint64_t (*)(uint64_t))&type metadata accessor for Assertion.DaemonRep);
      sub_100006B00(v9);
      sub_100006948();
      if (v12)
      {
LABEL_11:
        sub_100006910(v10);
        v14 = *(_QWORD *)(v7 + 16);
        v15 = __OFADD__(v14, 1);
        v16 = v14 + 1;
        if (v15)
          goto LABEL_17;
        *(_QWORD *)(v7 + 16) = v16;
      }
      else
      {
        a1 = ~v11;
        while (1)
        {
          sub_100006B44();
          sub_100006710(&qword_1000FB280, (uint64_t (*)(uint64_t))&type metadata accessor for Assertion.DaemonRep);
          sub_100006A88(v13);
          sub_100006AA0();
          if ((v8 & 1) != 0)
            break;
          sub_1000069DC();
          if (v12)
          {
            sub_100006C1C();
            goto LABEL_11;
          }
        }
        sub_100006BA0();
        sub_100006C1C();
      }
      if (++v2 == v17)
        goto LABEL_15;
    }
    __break(1u);
LABEL_17:
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease(a1);
    sub_100006A68();
  }
}

void sub_100003638(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v4 = sub_100002F78(&qword_1000FB250);
  v5 = sub_100006B88(v4);
  __chkstk_darwin(v5);
  sub_100006B28();
  __chkstk_darwin(v6);
  sub_100006BF4();
  if (v1 && (sub_100002F78(&qword_1000FB258), v7 = sub_100006938(), (v17 = *(_QWORD *)(a1 + 16)) != 0))
  {
    sub_1000069B4();
    while (v2 < *(_QWORD *)(a1 + 16))
    {
      sub_100006994();
      v8 = *(_QWORD *)(v7 + 40);
      sub_100006744(&qword_1000FB260, &qword_1000FB250);
      sub_100006B00(v9);
      sub_100006948();
      if (v12)
      {
LABEL_11:
        sub_100006910(v10);
        v14 = *(_QWORD *)(v7 + 16);
        v15 = __OFADD__(v14, 1);
        v16 = v14 + 1;
        if (v15)
          goto LABEL_17;
        *(_QWORD *)(v7 + 16) = v16;
      }
      else
      {
        a1 = ~v11;
        while (1)
        {
          sub_100006B44();
          sub_100006744(&qword_1000FB268, &qword_1000FB250);
          sub_100006A88(v13);
          sub_100006AA0();
          if ((v8 & 1) != 0)
            break;
          sub_1000069DC();
          if (v12)
          {
            sub_100006C1C();
            goto LABEL_11;
          }
        }
        sub_100006BA0();
        sub_100006C1C();
      }
      if (++v2 == v17)
        goto LABEL_15;
    }
    __break(1u);
LABEL_17:
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease(a1);
    sub_100006A68();
  }
}

void sub_10000378C(unint64_t a1)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33[72];

  v2 = a1 >> 62;
  if (a1 >> 62)
  {
    sub_100006AB8();
    v4 = sub_100006B70();
    swift_bridgeObjectRelease(a1);
    if (v4)
      goto LABEL_3;
LABEL_5:
    v3 = _swiftEmptySetSingleton;
    goto LABEL_6;
  }
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_5;
LABEL_3:
  sub_100002F78(&qword_1000FB298);
  v3 = (_QWORD *)sub_100006938();
LABEL_6:
  if (v2)
  {
    sub_100006AB8();
    v5 = sub_100006B70();
    swift_bridgeObjectRelease(a1);
    if (!v5)
    {
LABEL_26:
      swift_bridgeObjectRelease(a1);
      sub_100006A00();
      return;
    }
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v5)
      goto LABEL_26;
  }
  v6 = 0;
  v32 = v5;
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
      v12 = v7;
    }
    else
    {
      if (v6 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_29;
      v12 = *(_QWORD *)(a1 + 32 + 8 * v6);
      v7 = swift_retain();
    }
    v13 = __OFADD__(v6++, 1);
    if (v13)
      break;
    sub_100006BD4(v7, v8, v9, v10, v11);
    v14 = v12 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_id;
    v15 = sub_100002F78(&qword_1000FB2A0);
    sub_100006744(&qword_1000FB2A8, &qword_1000FB2A0);
    dispatch thunk of Hashable.hash(into:)(v33, v15, v16);
    v17 = Hasher._finalize()();
    v18 = -1 << *((_BYTE *)v3 + 32);
    v19 = v17 & ~v18;
    sub_100006C28();
    if ((v22 & v21) != 0)
    {
      v24 = *(_QWORD *)(v3[6] + 8 * v19);
      v25 = v24 + *v23;
      v26 = type metadata accessor for OneShotRequest(0);
      swift_retain();
      LOBYTE(v25) = static UUIDIdentifier.== infix(_:_:)(v25, v14, v26);
      swift_release(v24);
      if ((v25 & 1) != 0)
      {
LABEL_21:
        swift_release(v12);
        v5 = v32;
        goto LABEL_25;
      }
      v27 = ~v18;
      while (1)
      {
        v19 = (v19 + 1) & v27;
        sub_100006C28();
        if ((v21 & v22) == 0)
          break;
        v28 = *(_QWORD *)(v3[6] + 8 * v19);
        v29 = v28 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_id;
        swift_retain();
        LOBYTE(v29) = static UUIDIdentifier.== infix(_:_:)(v29, v14, v26);
        swift_release(v28);
        if ((v29 & 1) != 0)
          goto LABEL_21;
      }
      v5 = v32;
    }
    v3[v20 + 7] = v22 | v21;
    *(_QWORD *)(v3[6] + 8 * v19) = v12;
    v30 = v3[2];
    v13 = __OFADD__(v30, 1);
    v31 = v30 + 1;
    if (v13)
      goto LABEL_28;
    v3[2] = v31;
LABEL_25:
    if (v6 == v5)
      goto LABEL_26;
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
}

uint64_t sub_100003A20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  uint64_t v18;
  _UNKNOWN **v19;

  v18 = type metadata accessor for ModelCatalogProvider(0);
  v19 = &off_1000F4838;
  *(_QWORD *)&v17 = a1;
  swift_defaultActor_initialize(a7);
  v14 = type metadata accessor for WorkQueueState();
  v15 = swift_allocObject(v14, 32, 7);
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(a7 + 112) = v15;
  *(_QWORD *)(a7 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_purgeInactiveAssetsTask) = 0;
  *(_QWORD *)(a7 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_delayedAssetTransitionTask) = 0;
  *(_QWORD *)(a7 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetVersionChangeUnloadTask) = 0;
  sub_10000667C(&v17, a7 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_modelCatalog);
  *(_QWORD *)(a7 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_providerManager) = a2;
  sub_10000667C(a5, a7 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_telemetryManager);
  *(_QWORD *)(a7 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_neuralEngine) = a6;
  sub_100006820(a3, a7 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy);
  *(_QWORD *)(a7 + 120) = a4;
  return a7;
}

uint64_t sub_100003B50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _UNKNOWN **v23;

  v22 = type metadata accessor for InferenceProviderAssetManager(0);
  v23 = &off_1000F3D28;
  *(_QWORD *)&v21 = a1;
  swift_defaultActor_initialize(a3);
  v6 = (_QWORD *)(a3 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_currentPolicy);
  v7 = (char *)v6 + *(int *)(type metadata accessor for RequestManagerPolicy(0) + 20);
  v8 = enum case for RequestPriority.none(_:);
  v9 = type metadata accessor for RequestPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v7, v8, v9);
  *v6 = _swiftEmptyArrayStorage;
  v10 = (_QWORD *)(a3 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups);
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0)
  {
    sub_10001B17C();
    *v10 = 0;
    v10[1] = _swiftEmptyArrayStorage;
    v10[2] = v18;
    sub_10001B17C();
    v19 = (_QWORD *)(a3 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups);
    *v19 = 0;
    v19[1] = _swiftEmptyArrayStorage;
    v19[2] = v20;
    sub_10001B17C();
  }
  else
  {
    *v10 = 0;
    v10[1] = _swiftEmptyArrayStorage;
    v10[2] = _swiftEmptyArrayStorage;
    v11 = (_QWORD *)(a3 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups);
    *v11 = 0;
    v11[1] = _swiftEmptyArrayStorage;
    v11[2] = _swiftEmptyArrayStorage;
    v12 = _swiftEmptyArrayStorage;
  }
  v13 = (_QWORD *)(a3 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingBackgroundGroups);
  *v13 = 0;
  v13[1] = _swiftEmptyArrayStorage;
  v13[2] = v12;
  v14 = OBJC_IVAR____TtC13modelmanagerd14RequestManager_workQueueState;
  v15 = type metadata accessor for WorkQueueState();
  v16 = swift_allocObject(v15, 32, 7);
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(a3 + v14) = v16;
  *(_QWORD *)(a3 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_nextExecutionGroupToAcquire) = 0;
  *(_QWORD *)(a3 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_extantRequests) = &_swiftEmptySetSingleton;
  *(_QWORD *)(a3 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_cancelledForPolicyExtantRequests) = &_swiftEmptySetSingleton;
  sub_10000667C(&v21, a3 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_assetManager);
  *(_QWORD *)(a3 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_neuralEngine) = a2;
  return a3;
}

uint64_t sub_100003D20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v7;
  uint64_t v8;
  _UNKNOWN **v9;
  __int128 v10;
  uint64_t v11;
  _UNKNOWN **v12;

  v11 = type metadata accessor for FilesystemProvider();
  v12 = &off_1000F4280;
  *(_QWORD *)&v10 = a1;
  v8 = type metadata accessor for ModelCatalogProvider(0);
  v9 = &off_1000F4838;
  *(_QWORD *)&v7 = a2;
  swift_defaultActor_initialize(a3);
  *(_QWORD *)(a3 + 192) = &_swiftEmptySetSingleton;
  sub_10000667C(&v10, a3 + 112);
  sub_10000667C(&v7, a3 + 152);
  return a3;
}

_QWORD *sub_100003DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD v46[5];
  _QWORD v47[6];

  v38 = a8;
  v39 = a2;
  v43 = a6;
  v44 = a7;
  v41 = a4;
  v42 = a5;
  v11 = sub_100002F78(&qword_1000FB230);
  __chkstk_darwin(v11);
  v40 = (uint64_t)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v13 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47[3] = type metadata accessor for RunningBoardProvider(0);
  v47[4] = &off_1000F42C8;
  v47[0] = a1;
  v46[3] = type metadata accessor for ModelCatalogProvider(0);
  v46[4] = &off_1000F4838;
  v46[0] = a3;
  swift_defaultActor_initialize(a9);
  sub_1000066D4();
  static DispatchQoS.unspecified.getter();
  v45 = _swiftEmptyArrayStorage;
  sub_100006710(&qword_1000FB2F8, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  v23 = v22;
  v24 = sub_100002F78(&qword_1000FB300);
  sub_100006744(&qword_1000FB308, &qword_1000FB300);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v24, v25, v16, v23);
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v37);
  v26 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0x4D6E6F6973736553, 0xEE00726567616E61, v21, v18, v15, 0);
  a9[35] = 0;
  a9[14] = v38;
  a9[15] = v26;
  sub_100006694((uint64_t)v47, (uint64_t)(a9 + 16));
  v27 = v39;
  a9[21] = v39;
  sub_100006694((uint64_t)v46, (uint64_t)(a9 + 22));
  v29 = v41;
  v28 = v42;
  a9[27] = v41;
  sub_100006694((uint64_t)v28, (uint64_t)(a9 + 28));
  v31 = v43;
  v30 = v44;
  a9[33] = v43;
  a9[34] = v30;
  v32 = type metadata accessor for TaskPriority(0);
  v33 = v40;
  sub_100005630(v40, 1, 1, v32);
  v34 = (_QWORD *)swift_allocObject(&unk_1000F2910, 40, 7);
  v34[2] = 0;
  v34[3] = 0;
  v34[4] = a9;
  swift_retain(v27);
  swift_retain(v29);
  swift_retain(v31);
  swift_retain(v30);
  swift_retain(a9);
  v35 = sub_100002D04(v33, (uint64_t)&unk_1000FB310, (uint64_t)v34, (uint64_t)&unk_1000F28C0, (uint64_t)&type metadata for () + 8, (uint64_t)&unk_1000FB2C8);
  swift_release(v27);
  swift_release(v29);
  swift_release(v31);
  swift_release(v30);
  swift_release(v35);
  sub_10000650C(v28);
  sub_10000650C(v46);
  sub_10000650C(v47);
  return a9;
}

_QWORD *sub_10000412C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v33[5];
  _QWORD v34[5];
  _QWORD v35[5];
  _QWORD v36[6];

  v16 = type metadata accessor for RequestPriority(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v33[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for AssetPolicy(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v33[-1] - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36[3] = type metadata accessor for FilesystemProvider();
  v36[4] = &off_1000F4280;
  v36[0] = a1;
  v35[3] = &type metadata for OSVariantProvider;
  v35[4] = &off_1000F41A8;
  v34[3] = type metadata accessor for InferenceProviderAssetManager(0);
  v34[4] = &off_1000F3D28;
  v34[0] = a3;
  v33[3] = type metadata accessor for ModelCatalogProvider(0);
  v33[4] = &off_1000F4838;
  v33[0] = a4;
  swift_defaultActor_initialize(a8);
  v22 = type metadata accessor for WorkQueueState();
  v23 = swift_allocObject(v22, 32, 7);
  *(_QWORD *)(v23 + 16) = 0;
  *(_QWORD *)(v23 + 24) = 0;
  a8[39] = v23;
  a8[40] = &_swiftEmptySetSingleton;
  v24 = default argument 0 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
  v25 = default argument 1 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)(v24);
  v26 = default argument 2 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
  v27 = default argument 3 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)(v26);
  v28 = default argument 4 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
  Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)(v21, v25, v18, v27, v28);
  sub_100006694((uint64_t)v36, (uint64_t)(a8 + 14));
  sub_100006694((uint64_t)v35, (uint64_t)(a8 + 19));
  a8[24] = a2;
  sub_100006694((uint64_t)v34, (uint64_t)(a8 + 25));
  sub_100006694((uint64_t)v33, (uint64_t)(a8 + 30));
  a8[35] = a5;
  a8[36] = a6;
  swift_bridgeObjectRetain_n(a5, 2);
  v29 = swift_bridgeObjectRetain(a6);
  v30 = sub_100008394(v29, a5, a5);
  sub_10000650C(v33);
  sub_10000650C(v34);
  sub_10000650C(v35);
  sub_10000650C(v36);
  a8[37] = v30;
  a8[38] = a7;
  return a8;
}

_QWORD *sub_100004354(__int128 *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  _UNKNOWN **v14;

  v13 = type metadata accessor for PolicyManager(0);
  v14 = &off_1000F29A8;
  *(_QWORD *)&v12 = a2;
  swift_defaultActor_initialize(a4);
  v8 = type metadata accessor for WorkQueueState();
  v9 = swift_allocObject(v8, 32, 7);
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = 0;
  a4[24] = v9;
  v10 = type metadata accessor for Policy(0);
  a4[26] = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v10, &protocol witness table for String);
  sub_10000667C(a1, (uint64_t)(a4 + 14));
  sub_10000667C(&v12, (uint64_t)(a4 + 19));
  a4[25] = a3;
  return a4;
}

uint64_t sub_100004414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  _UNKNOWN **v41;
  _QWORD v42[5];
  _QWORD v43[5];
  _QWORD v44[5];
  _QWORD v45[5];
  _QWORD v46[6];

  v38 = a7;
  v15 = type metadata accessor for RunningBoardProvider(0);
  v46[3] = v15;
  v46[4] = &off_1000F42C8;
  v46[0] = a1;
  v45[3] = &type metadata for OSVariantProvider;
  v45[4] = &off_1000F41A8;
  v44[3] = type metadata accessor for ModelCatalogProvider(0);
  v44[4] = &off_1000F4838;
  v44[0] = a5;
  v16 = a8 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_logHandle;
  v17 = type metadata accessor for Logger(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  generalLogger.getter(v19);
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v16, v21, v17);
  sub_100006694((uint64_t)v46, a8 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_runningBoard);
  sub_100006694((uint64_t)v45, a8 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_osVariant);
  *(_QWORD *)(a8 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_assetManager) = a2;
  *(_QWORD *)(a8 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_policyManager) = a4;
  *(_QWORD *)(a8 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_sessionManager) = a3;
  sub_100006694((uint64_t)v44, a8 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_modelCatalog);
  v22 = a8 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_stateDumpManager;
  *(_QWORD *)(v22 + 48) = *((_QWORD *)a6 + 6);
  v23 = a6[2];
  v24 = *a6;
  *(_OWORD *)(v22 + 16) = a6[1];
  *(_OWORD *)(v22 + 32) = v23;
  *(_OWORD *)v22 = v24;
  sub_100006694((uint64_t)v46, (uint64_t)v43);
  v25 = sub_1000064E4((uint64_t)v43, v43[3]);
  __chkstk_darwin(v25);
  v27 = (uint64_t *)((char *)&v38 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v28 + 16))(v27);
  v29 = *v27;
  v42[4] = &off_1000F42C8;
  v42[3] = v15;
  v42[0] = v29;
  v30 = type metadata accessor for AssertionRequestDispatcher();
  v31 = swift_allocObject(v30, 160, 15);
  v32 = sub_1000064E4((uint64_t)v42, v15);
  __chkstk_darwin(v32);
  v34 = (uint64_t *)((char *)&v38 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v35 + 16))(v34);
  v36 = *v34;
  v41 = &off_1000F42C8;
  v40 = v15;
  *(_QWORD *)&v39 = v36;
  swift_retain(a2);
  swift_retain(a4);
  swift_retain(a3);
  sub_100006584(a6);
  swift_defaultActor_initialize(v31);
  sub_10000667C(&v39, v31 + 112);
  *(_QWORD *)(v31 + 152) = a4;
  sub_10000650C(v42);
  sub_10000650C(v43);
  sub_100006600((uint64_t *)a6);
  swift_release(a2);
  swift_release(a3);
  sub_10000650C(v44);
  sub_10000650C(v45);
  sub_10000650C(v46);
  *(_QWORD *)(a8 + 16) = v31;
  *(_QWORD *)(a8 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_requestManager) = v38;
  return a8;
}

uint64_t sub_100004758(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v14[5];

  v4 = sub_100002F78(&qword_1000FB230);
  __chkstk_darwin(v4);
  v6 = (char *)&v14[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[3] = &type metadata for MemoryPressureEventProvider;
  v14[4] = &off_1000F4DB8;
  swift_defaultActor_initialize(a2);
  v7 = a2 + OBJC_IVAR____TtC13modelmanagerd22MemoryPressureObserver_activeAssertionID;
  v8 = sub_100002F78(&qword_1000FB250);
  sub_100005630(v7, 1, 1, v8);
  *(_QWORD *)(a2 + 112) = a1;
  sub_100006694((uint64_t)v14, a2 + 120);
  v9 = type metadata accessor for TaskPriority(0);
  sub_100005630((uint64_t)v6, 1, 1, v9);
  v10 = (_QWORD *)swift_allocObject(&unk_1000F28E8, 40, 7);
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = a2;
  swift_retain(a1);
  swift_retain(a2);
  v11 = sub_100002D04((uint64_t)v6, (uint64_t)&unk_1000FB2E8, (uint64_t)v10, (uint64_t)&unk_1000F28C0, (uint64_t)&type metadata for () + 8, (uint64_t)&unk_1000FB2C8);
  swift_release(a1);
  swift_release(v11);
  sub_10000650C(v14);
  return a2;
}

uint64_t sub_1000048B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v21[3];
  uint64_t v22;
  _UNKNOWN **v23;

  v22 = type metadata accessor for ModelCatalogProvider(0);
  v23 = &off_1000F4838;
  v21[0] = a1;
  v12 = type metadata accessor for InferenceProviderAssetManager(0);
  v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v14 = sub_1000064E4((uint64_t)v21, v22);
  __chkstk_darwin(v14);
  v16 = (_QWORD *)((char *)&v21[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v17 + 16))(v16);
  v18 = sub_100003A20(*v16, a2, a3, a4, a5, a6, v13);
  sub_10000650C(v21);
  return v18;
}

uint64_t sub_1000049B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v13[3];
  uint64_t v14;
  _UNKNOWN **v15;

  v14 = type metadata accessor for InferenceProviderAssetManager(0);
  v15 = &off_1000F3D28;
  v13[0] = a1;
  v4 = type metadata accessor for RequestManager(0);
  v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v6 = sub_1000064E4((uint64_t)v13, v14);
  __chkstk_darwin(v6);
  v8 = (_QWORD *)((char *)&v13[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v9 + 16))(v8);
  v10 = sub_100003B50(*v8, a2, v5);
  sub_10000650C(v13);
  return v10;
}

uint64_t sub_100004A88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  uint64_t v17;
  _UNKNOWN **v18;
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v20 = type metadata accessor for FilesystemProvider();
  v21 = &off_1000F4280;
  v19[0] = a1;
  v17 = type metadata accessor for ModelCatalogProvider(0);
  v18 = &off_1000F4838;
  v16[0] = a2;
  v4 = type metadata accessor for UseCaseManager();
  v5 = swift_allocObject(v4, 200, 15);
  v6 = sub_1000064E4((uint64_t)v19, v20);
  __chkstk_darwin(v6);
  v8 = (_QWORD *)((char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v9 + 16))(v8);
  v10 = sub_1000064E4((uint64_t)v16, v17);
  __chkstk_darwin(v10);
  v12 = (_QWORD *)((char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v13 + 16))(v12);
  v14 = sub_100003D20(*v8, *v12, v5);
  sub_10000650C(v16);
  sub_10000650C(v19);
  return v14;
}

_QWORD *sub_100004BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD v28[3];
  uint64_t v29;
  _UNKNOWN **v30;
  _QWORD v31[3];
  uint64_t v32;
  _UNKNOWN **v33;

  v32 = type metadata accessor for RunningBoardProvider(0);
  v33 = &off_1000F42C8;
  v31[0] = a1;
  v29 = type metadata accessor for ModelCatalogProvider(0);
  v30 = &off_1000F4838;
  v28[0] = a3;
  v16 = type metadata accessor for SessionManager();
  v17 = (_QWORD *)swift_allocObject(v16, 288, 15);
  v18 = sub_1000064E4((uint64_t)v31, v32);
  __chkstk_darwin(v18);
  v20 = (_QWORD *)((char *)v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  v22 = sub_1000064E4((uint64_t)v28, v29);
  __chkstk_darwin(v22);
  v24 = (_QWORD *)((char *)v28 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v25 + 16))(v24);
  v26 = sub_100003DB4(*v20, a2, *v24, a4, a5, a6, a7, a8, v17);
  sub_10000650C(v28);
  sub_10000650C(v31);
  return v26;
}

_QWORD *sub_100004D54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD v33[3];
  uint64_t v34;
  _UNKNOWN **v35;
  _QWORD v36[3];
  uint64_t v37;
  _UNKNOWN **v38;
  _QWORD v39[3];
  ValueMetadata *v40;
  _UNKNOWN **v41;
  _QWORD v42[3];
  uint64_t v43;
  _UNKNOWN **v44;

  v43 = type metadata accessor for FilesystemProvider();
  v44 = &off_1000F4280;
  v42[0] = a1;
  v40 = &type metadata for OSVariantProvider;
  v41 = &off_1000F41A8;
  v37 = type metadata accessor for InferenceProviderAssetManager(0);
  v38 = &off_1000F3D28;
  v36[0] = a3;
  v34 = type metadata accessor for ModelCatalogProvider(0);
  v35 = &off_1000F4838;
  v33[0] = a4;
  v14 = type metadata accessor for PolicyManager(0);
  v15 = (_QWORD *)swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v16 = sub_1000064E4((uint64_t)v42, v43);
  __chkstk_darwin(v16);
  v18 = (_QWORD *)((char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v19 + 16))(v18);
  v20 = sub_1000064E4((uint64_t)v39, (uint64_t)v40);
  __chkstk_darwin(v20);
  (*(void (**)(char *))(v22 + 16))((char *)v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = sub_1000064E4((uint64_t)v36, v37);
  __chkstk_darwin(v23);
  v25 = (_QWORD *)((char *)v33 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v26 + 16))(v25);
  v27 = sub_1000064E4((uint64_t)v33, v34);
  __chkstk_darwin(v27);
  v29 = (_QWORD *)((char *)v33 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v30 + 16))(v29);
  v31 = sub_10000412C(*v18, a2, *v25, *v29, a5, a6, a7, v15);
  sub_10000650C(v33);
  sub_10000650C(v36);
  sub_10000650C(v39);
  sub_10000650C(v42);
  return v31;
}

_QWORD *sub_100004FAC(__int128 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD v15[3];
  uint64_t v16;
  _UNKNOWN **v17;

  v16 = type metadata accessor for PolicyManager(0);
  v17 = &off_1000F29A8;
  v15[0] = a2;
  v6 = type metadata accessor for TrialManager();
  v7 = (_QWORD *)swift_allocObject(v6, 216, 15);
  v8 = sub_1000064E4((uint64_t)v15, v16);
  __chkstk_darwin(v8);
  v10 = (_QWORD *)((char *)&v15[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v11 + 16))(v10);
  v12 = sub_100004354(a1, *v10, a3, v7);
  sub_10000650C(v15);
  return v12;
}

uint64_t sub_10000508C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v29[3];
  uint64_t v30;
  _UNKNOWN **v31;
  _QWORD v32[3];
  ValueMetadata *v33;
  _UNKNOWN **v34;
  _QWORD v35[3];
  uint64_t v36;
  _UNKNOWN **v37;

  v36 = type metadata accessor for RunningBoardProvider(0);
  v37 = &off_1000F42C8;
  v35[0] = a1;
  v33 = &type metadata for OSVariantProvider;
  v34 = &off_1000F41A8;
  v30 = type metadata accessor for ModelCatalogProvider(0);
  v31 = &off_1000F4838;
  v29[0] = a5;
  v14 = type metadata accessor for ModelXPCDispatcher(0);
  v15 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v16 = sub_1000064E4((uint64_t)v35, v36);
  __chkstk_darwin(v16);
  v18 = (_QWORD *)((char *)&v29[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v19 + 16))(v18);
  v20 = sub_1000064E4((uint64_t)v32, (uint64_t)v33);
  __chkstk_darwin(v20);
  (*(void (**)(void))(v21 + 16))();
  v22 = sub_1000064E4((uint64_t)v29, v30);
  __chkstk_darwin(v22);
  v24 = (_QWORD *)((char *)&v29[-1] - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v25 + 16))(v24);
  v26 = sub_100004414(*v18, a2, a3, a4, *v24, a6, a7, v15);
  sub_10000650C(v29);
  sub_10000650C(v32);
  sub_10000650C(v35);
  return v26;
}

uint64_t sub_100005274(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];

  v8[3] = &type metadata for MemoryPressureEventProvider;
  v8[4] = &off_1000F4DB8;
  v2 = type metadata accessor for MemoryPressureObserver(0);
  v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v4 = sub_1000064E4((uint64_t)v8, (uint64_t)&type metadata for MemoryPressureEventProvider);
  __chkstk_darwin(v4);
  (*(void (**)(void))(v5 + 16))();
  v6 = sub_100004758(a1, v3);
  sub_10000650C(v8);
  return v6;
}

uint64_t sub_100005330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v37;
  uint64_t v38;
  _QWORD v39[3];
  ValueMetadata *v40;
  _UNKNOWN **v41;
  _QWORD v42[3];
  ValueMetadata *v43;
  _UNKNOWN **v44;
  _QWORD v45[3];
  uint64_t v46;
  _UNKNOWN **v47;
  _QWORD v48[3];
  uint64_t v49;
  _UNKNOWN **v50;
  _QWORD v51[3];
  uint64_t v52;
  _UNKNOWN **v53;

  v38 = a8;
  v37 = a9;
  v52 = type metadata accessor for ModelCatalogProvider(0);
  v53 = &off_1000F4838;
  v51[0] = a1;
  v49 = type metadata accessor for FilesystemProvider();
  v50 = &off_1000F4280;
  v48[0] = a3;
  v46 = type metadata accessor for RunningBoardProvider(0);
  v47 = &off_1000F42C8;
  v45[0] = a4;
  v43 = &type metadata for OSVariantProvider;
  v44 = &off_1000F41A8;
  v40 = &type metadata for MemoryPressureEventProvider;
  v41 = &off_1000F4DB8;
  v17 = type metadata accessor for DaemonContext();
  v18 = swift_allocObject(v17, 392, 7);
  v19 = sub_1000064E4((uint64_t)v51, v52);
  __chkstk_darwin(v19);
  v21 = (uint64_t *)((char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v22 + 16))(v21);
  v23 = sub_1000064E4((uint64_t)v48, v49);
  __chkstk_darwin(v23);
  v25 = (uint64_t *)((char *)&v37 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v26 + 16))(v25);
  v27 = sub_1000064E4((uint64_t)v45, v46);
  __chkstk_darwin(v27);
  v29 = (uint64_t *)((char *)&v37 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v30 + 16))(v29);
  v31 = sub_1000064E4((uint64_t)v42, (uint64_t)v43);
  __chkstk_darwin(v31);
  (*(void (**)(void))(v32 + 16))();
  v33 = sub_1000064E4((uint64_t)v39, (uint64_t)v40);
  __chkstk_darwin(v33);
  (*(void (**)(void))(v34 + 16))();
  v35 = sub_10000574C(*v21, a2, *v25, *v29, a5, a6, a7, v38, v37, *((uint64_t *)&v37 + 1), a10, v18);
  sub_10000650C(v39);
  sub_10000650C(v42);
  sub_10000650C(v45);
  sub_10000650C(v48);
  sub_10000650C(v51);
  return v35;
}

uint64_t sub_100005630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_10000563C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100005660()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_100006C08();
  v1 = swift_task_alloc(dword_1000FB244);
  v2 = (_QWORD *)sub_100006AF4(v1);
  *v2 = v0;
  v2[1] = sub_1000068D4;
  return sub_100002B84();
}

uint64_t sub_1000056BC(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100005700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_10000570C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100002F78(&qword_1000FB230);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000574C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t *v129;
  uint64_t v130;
  _QWORD v131[3];
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  _QWORD v135[3];
  uint64_t v136;
  _QWORD v137[5];
  _QWORD v138[5];
  _QWORD v139[5];
  _QWORD v140[5];
  _QWORD v141[5];
  _QWORD v142[5];
  _QWORD v143[5];
  __int128 v144;
  __int128 v145;
  __int128 v146;
  _QWORD *v147;

  v130 = a8;
  v127 = a7;
  v128 = (_QWORD *)a10;
  v18 = type metadata accessor for AssetPolicy(0);
  v119 = *(_QWORD *)(v18 - 8);
  v120 = v18;
  __chkstk_darwin(v18);
  v118 = (char *)&v117 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = type metadata accessor for InferenceProviderAssetManagerPolicy(0);
  __chkstk_darwin(v117);
  v21 = (char *)&v117 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143[3] = type metadata accessor for TelemetryManager();
  v143[4] = &off_1000F4C78;
  v143[0] = a11;
  v22 = a6;
  v142[3] = type metadata accessor for TrialFrameworkProvider();
  v142[4] = &off_1000F3C40;
  v142[0] = a5;
  v141[3] = type metadata accessor for ModelCatalogProvider(0);
  v141[4] = &off_1000F4838;
  v141[0] = a1;
  v23 = a2;
  v140[3] = type metadata accessor for FilesystemProvider();
  v140[4] = &off_1000F4280;
  v140[0] = a3;
  v24 = type metadata accessor for RunningBoardProvider(0);
  v139[4] = &off_1000F42C8;
  v139[3] = v24;
  v139[0] = a4;
  v138[3] = &type metadata for OSVariantProvider;
  v138[4] = &off_1000F41A8;
  v137[3] = &type metadata for MemoryPressureEventProvider;
  v137[4] = &off_1000F4DB8;
  v129 = (uint64_t *)(a12 + 64);
  sub_100006694((uint64_t)v141, a12 + 64);
  *(_QWORD *)(a12 + 152) = a2;
  v25 = a12 + 160;
  sub_100006694((uint64_t)v140, a12 + 160);
  v126 = (uint64_t *)(a12 + 200);
  sub_100006694((uint64_t)v139, a12 + 200);
  v121 = a12 + 240;
  sub_100006694((uint64_t)v142, a12 + 240);
  v124 = (uint64_t *)(a12 + 280);
  sub_100006694((uint64_t)v138, a12 + 280);
  v125 = v23;
  if (a6)
  {
    swift_retain(v23);
    v26 = a6;
  }
  else
  {
    type metadata accessor for InferenceProviderManager();
    swift_retain(v23);
    sub_100044B10();
    v26 = v27;
  }
  *(_QWORD *)(a12 + 16) = v26;
  v123 = (uint64_t *)(a12 + 112);
  sub_100006694((uint64_t)v143, a12 + 112);
  sub_100006694((uint64_t)v141, (uint64_t)&v144);
  v28 = v127;
  v29 = v130;
  v122 = a6;
  if (v127)
  {
    swift_retain(v127);
    swift_retain(a6);
    swift_bridgeObjectRelease(v128);
    sub_10000650C(&v144);
    v30 = v28;
  }
  else
  {
    sub_100006694((uint64_t)&v144, (uint64_t)v135);
    v32 = v118;
    v31 = v119;
    v33 = v120;
    (*(void (**)(char *, _QWORD, uint64_t))(v119 + 104))(v118, enum case for AssetPolicy.standard(_:), v120);
    swift_retain(v22);
    swift_retain(v26);
    v34 = swift_retain(v125);
    v35 = static Policy.defaultMemoryBudgetMarker.getter(v34);
    v36 = (*(uint64_t (**)(char *, char *, uint64_t))(v31 + 16))(v21, v32, v33);
    v37 = (uint64_t)v21;
    v38 = v117;
    *(_QWORD *)(v37 + *(int *)(v117 + 20)) = v35;
    static Policy.defaultInactiveAssetTimeout.getter(v36);
    *(_QWORD *)(v37 + *(int *)(v38 + 24)) = 0x408C200000000000;
    sub_10004D620();
    v40 = v39;
    (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v33);
    *(_QWORD *)(v37 + *(int *)(v38 + 28)) = v40;
    sub_100006694((uint64_t)v123, (uint64_t)&v133);
    v41 = sub_1000064E4((uint64_t)v135, v136);
    __chkstk_darwin(v41);
    v43 = (uint64_t *)((char *)&v117 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v44 + 16))(v43);
    v45 = *v43;
    v25 = a12 + 160;
    v29 = v130;
    v30 = sub_1000048B8(v45, v26, v37, (uint64_t)v128, &v133, v125);
    sub_10000650C(v135);
    sub_10000650C(&v144);
  }
  *(_QWORD *)(a12 + 24) = v30;
  if (v29)
  {
    v46 = v29;
  }
  else
  {
    v47 = *(_QWORD *)(a12 + 152);
    swift_retain(v30);
    swift_retain(v47);
    v46 = sub_1000049B8(v30, v47);
  }
  v128 = (_QWORD *)a9;
  *(_QWORD *)(a12 + 32) = v46;
  v119 = v25;
  sub_100006694(v25, (uint64_t)v135);
  v48 = (uint64_t)v129;
  sub_100006694((uint64_t)v129, (uint64_t)&v133);
  v49 = sub_1000064E4((uint64_t)v135, v136);
  __chkstk_darwin(v49);
  v51 = (uint64_t *)((char *)&v117 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v52 + 16))(v51);
  v53 = sub_1000064E4((uint64_t)&v133, v134);
  __chkstk_darwin(v53);
  v55 = (uint64_t *)((char *)&v117 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v56 + 16))(v55);
  v57 = *v51;
  v58 = *v55;
  swift_retain(v29);
  v59 = sub_100004A88(v57, v58);
  sub_10000650C(&v133);
  sub_10000650C(v135);
  *(_QWORD *)(a12 + 320) = v59;
  sub_100006694((uint64_t)v126, (uint64_t)v135);
  v60 = *(_QWORD *)(a12 + 24);
  sub_100006694(v48, (uint64_t)&v133);
  v61 = *(_QWORD *)(a12 + 32);
  sub_100006694((uint64_t)v123, (uint64_t)v131);
  v62 = *(_QWORD *)(a12 + 16);
  swift_retain(v60);
  swift_retain(v61);
  swift_retain(v59);
  swift_retain(v62);
  v120 = v60;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    v123 = (uint64_t *)sub_1000031E8((Swift::Int)_swiftEmptyArrayStorage);
  }
  else
  {
    v123 = (uint64_t *)&_swiftEmptySetSingleton;
  }
  v63 = sub_1000064E4((uint64_t)v135, v136);
  __chkstk_darwin(v63);
  v65 = (uint64_t *)((char *)&v117 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v66 + 16))(v65);
  v67 = sub_1000064E4((uint64_t)&v133, v134);
  __chkstk_darwin(v67);
  v69 = (uint64_t *)((char *)&v117 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v70 + 16))(v69);
  v71 = sub_100004BC8(*v65, v120, *v69, v61, v131, v59, v62, (uint64_t)v123);
  sub_10000650C(&v133);
  sub_10000650C(v135);
  *(_QWORD *)(a12 + 40) = v71;
  v72 = (uint64_t)v128;
  if (v128)
  {
    v73 = v128;
  }
  else
  {
    sub_100006694(v119, (uint64_t)v135);
    sub_100006694((uint64_t)v124, (uint64_t)&v133);
    v75 = *(_QWORD *)(a12 + 24);
    v74 = *(_QWORD *)(a12 + 32);
    sub_100006694((uint64_t)v129, (uint64_t)v131);
    v76 = type metadata accessor for Policy(0);
    swift_retain(v74);
    swift_retain(v75);
    v120 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v76, &protocol witness table for String);
    v77 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v76, &protocol witness table for String);
    v78 = sub_1000064E4((uint64_t)v135, v136);
    v123 = &v117;
    __chkstk_darwin(v78);
    v80 = (uint64_t *)((char *)&v117 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v81 + 16))(v80);
    v82 = sub_1000064E4((uint64_t)&v133, v134);
    __chkstk_darwin(v82);
    (*(void (**)(void))(v83 + 16))();
    v84 = sub_1000064E4((uint64_t)v131, v132);
    __chkstk_darwin(v84);
    v86 = (uint64_t *)((char *)&v117 - ((v85 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v87 + 16))(v86);
    v88 = *v80;
    v89 = *v86;
    swift_retain(v75);
    v73 = sub_100004D54(v88, v74, v75, v89, v120, v77, (uint64_t)_swiftEmptyArrayStorage);
    sub_10000650C(v131);
    swift_release(v75);
    sub_10000650C(&v133);
    v72 = (uint64_t)v128;
    sub_10000650C(v135);
  }
  *(_QWORD *)(a12 + 48) = v73;
  sub_100006694(v121, (uint64_t)&v144);
  v90 = qword_1000FB148;
  swift_retain(v72);
  swift_retain(v73);
  if (v90 != -1)
    swift_once(&qword_1000FB148, sub_1000966E0);
  v91 = qword_1000FFE88;
  swift_bridgeObjectRetain(qword_1000FFE88);
  v92 = sub_100004FAC(&v144, (uint64_t)v73, v91);
  *(_QWORD *)(a12 + 56) = v92;
  v93 = *(_QWORD *)(a12 + 24);
  v121 = *(_QWORD *)(a12 + 16);
  v95 = *(_QWORD *)(a12 + 40);
  v94 = *(_QWORD *)(a12 + 48);
  v96 = *(_QWORD *)(a12 + 32);
  v123 = *(uint64_t **)(a12 + 320);
  *(_QWORD *)&v144 = v93;
  *((_QWORD *)&v144 + 1) = v121;
  *(_QWORD *)&v145 = v94;
  *((_QWORD *)&v145 + 1) = v95;
  *(_QWORD *)&v146 = v96;
  *((_QWORD *)&v146 + 1) = v123;
  v147 = v92;
  *(_QWORD *)(a12 + 384) = v92;
  v97 = v145;
  *(_OWORD *)(a12 + 336) = v144;
  *(_OWORD *)(a12 + 352) = v97;
  *(_OWORD *)(a12 + 368) = v146;
  sub_100006694((uint64_t)v126, (uint64_t)v135);
  sub_100006694((uint64_t)v124, (uint64_t)&v133);
  sub_100006694((uint64_t)v129, (uint64_t)v131);
  v98 = sub_1000064E4((uint64_t)v135, v136);
  v129 = &v117;
  __chkstk_darwin(v98);
  v100 = (uint64_t *)((char *)&v117 - ((v99 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v101 + 16))(v100);
  v102 = sub_1000064E4((uint64_t)&v133, v134);
  v126 = &v117;
  __chkstk_darwin(v102);
  (*(void (**)(void))(v103 + 16))();
  v104 = sub_1000064E4((uint64_t)v131, v132);
  v124 = &v117;
  __chkstk_darwin(v104);
  v106 = (uint64_t *)((char *)&v117 - ((v105 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v107 + 16))(v106);
  v108 = *v100;
  v109 = *v106;
  swift_retain_n(v93, 3);
  swift_retain_n(v94, 3);
  swift_retain_n(v95, 3);
  swift_retain_n(v96, 3);
  swift_retain_n(v121, 2);
  swift_retain_n(v123, 2);
  swift_retain_n(v92, 2);
  v110 = sub_10000508C(v108, v93, v95, v94, v109, &v144, v96);
  sub_10000650C(v131);
  sub_10000650C(&v133);
  sub_10000650C(v135);
  *(_QWORD *)(a12 + 104) = v110;
  v111 = *(_QWORD *)(a12 + 48);
  sub_100006694((uint64_t)v137, (uint64_t)v135);
  v112 = sub_1000064E4((uint64_t)v135, v136);
  __chkstk_darwin(v112);
  (*(void (**)(void))(v113 + 16))();
  v114 = swift_retain(v111);
  v115 = sub_100005274(v114);
  sub_10000650C(v135);
  swift_release(v125);
  swift_release(v130);
  swift_release(v128);
  swift_release(v127);
  swift_release(v122);
  sub_10000650C(v143);
  sub_10000650C(v137);
  sub_10000650C(v138);
  sub_10000650C(v142);
  sub_10000650C(v139);
  sub_10000650C(v140);
  sub_10000650C(v141);
  *(_QWORD *)(a12 + 328) = v115;
  return a12;
}

uint64_t sub_100006348(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_1000063B0;
  return v5(v2 + 32);
}

uint64_t sub_1000063B0()
{
  uint64_t (*v0)(void);

  sub_100006A1C();
  v0 = (uint64_t (*)(void))sub_100006BE0();
  return sub_100006A5C(v0);
}

uint64_t sub_1000063D4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  sub_100006C08();
  v0 = sub_100006BC0();
  v1 = (_QWORD *)sub_100006AF4(v0);
  v2 = sub_1000068F0(v1);
  return sub_1000068E0(v2, v3, v4, v5);
}

uint64_t sub_100006414()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  sub_100006C08();
  v0 = sub_100006BC0();
  v1 = (_QWORD *)sub_100006AF4(v0);
  v2 = sub_1000068F0(v1);
  return sub_1000068E0(v2, v3, v4, v5);
}

uint64_t sub_100006454()
{
  uint64_t v0;

  sub_100006974();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100006480()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000064A4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  sub_100006C08();
  v0 = sub_100006BC0();
  v1 = (_QWORD *)sub_100006AF4(v0);
  v2 = sub_1000068F0(v1);
  return sub_1000068E0(v2, v3, v4, v5);
}

uint64_t sub_1000064E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_10000650C(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100006530()
{
  uint64_t v0;
  _QWORD *v1;

  v0 = swift_task_alloc(dword_1000FFCE4);
  v1 = (_QWORD *)sub_100006AF4(v0);
  sub_100006AD8(v1);
  return sub_1000C752C();
}

_QWORD *sub_100006584(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[6];
  swift_retain(*a1);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  return a1;
}

uint64_t *sub_100006600(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  swift_release(a1[6]);
  swift_release(v7);
  swift_release(v6);
  swift_release(v5);
  swift_release(v4);
  swift_release(v3);
  swift_release(v2);
  return a1;
}

uint64_t sub_10000667C(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void sub_100006694(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a2, a1);
  sub_100006C14();
}

unint64_t sub_1000066D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000FB2F0;
  if (!qword_1000FB2F0)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000FB2F0);
  }
  return result;
}

void sub_100006710(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = a2(255);
    atomic_store(sub_100006C50(v3), a1);
  }
  sub_100006C14();
}

void sub_100006744(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = sub_1000056BC(a2);
    atomic_store(sub_100006C50(v3), a1);
  }
  sub_100006C14();
}

uint64_t sub_10000677C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000067A8()
{
  uint64_t v0;
  _QWORD *v1;

  v0 = swift_task_alloc(dword_1000FBF54);
  v1 = (_QWORD *)sub_100006AF4(v0);
  sub_100006AD8(v1);
  return sub_10001FB6C();
}

uint64_t sub_1000067FC()
{
  uint64_t v0;

  sub_100006974();
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100006820(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for InferenceProviderAssetManagerPolicy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_10000688C(a1, &qword_1000FB318, (uint64_t)&unk_1000F2938);
}

void type metadata accessor for CFString(uint64_t a1)
{
  sub_10000688C(a1, &qword_1000FB320, (uint64_t)&unk_1000F2960);
}

void sub_10000688C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_1000068E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_1000068F0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_100006910@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(*(_QWORD *)(v8 - 96) + 8 * a1) = v2 | v1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 88) + 32))(*(_QWORD *)(v5 + 48) + v3 * v7, v6, v4);
}

uint64_t sub_100006938()
{
  uint64_t v0;

  return static _SetStorage.allocate(capacity:)(v0);
}

uint64_t sub_100006974()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  v3 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v1 - 8) = *v0;
  return swift_task_dealloc(v3);
}

uint64_t sub_100006994()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 88) + 16))(v1, *(_QWORD *)(v3 - 120) + *(_QWORD *)(*(_QWORD *)(v3 - 88) + 72) * v2, v0);
}

void sub_1000069B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 - 96) = v0 + 56;
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 88) + 80);
  *(_QWORD *)(v2 - 128) = v1;
  *(_QWORD *)(v2 - 120) = v1 + ((v3 + 32) & ~v3);
}

uint64_t sub_100006A1C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = *v0;
  v3 = (uint64_t *)(v1 - 8);
  *v3 = *v0;
  v4 = *(_QWORD *)(v2 + 24);
  *v3 = *v0;
  return swift_task_dealloc(v4);
}

uint64_t sub_100006A38(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100006A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11, 2, a4, 36, 2, a7, 17);
}

uint64_t sub_100006A5C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100006A80(uint64_t a1, uint64_t a2)
{
  return swift_allocObject(a1, a2, 7);
}

uint64_t sub_100006A88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return dispatch thunk of static Equatable.== infix(_:_:)(v2, v3, v1, a1);
}

uint64_t sub_100006AA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 88) + 8))(v1, v0);
}

uint64_t sub_100006AB8()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100006ACC(uint64_t a1)
{
  return swift_allocObject(a1, *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 52));
}

uint64_t sub_100006AD8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_100006AF4(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t sub_100006B00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return dispatch thunk of Hashable._rawHashValue(seed:)(v1, v2, a1);
}

uint64_t sub_100006B14()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100006B44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);

  return v5(v2, *(_QWORD *)(v3 + 48) + v0 * v4, v1);
}

uint64_t sub_100006B70()
{
  uint64_t v0;

  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t sub_100006B78()
{
  uint64_t v0;
  uint64_t v1;

  return swift_retain(*(_QWORD *)(*(_QWORD *)(v0 + 48) + 8 * v1));
}

uint64_t sub_100006B88(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = *(_QWORD *)(result - 8);
  return result;
}

uint64_t sub_100006BA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_100006BC0()
{
  uint64_t v0;

  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

_QWORD *sub_100006BD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  return Hasher.init(_seed:)((uint64_t *)va, *(_QWORD *)(v5 + 40));
}

uint64_t sub_100006BE0()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;

  *v0 = *(_BYTE *)(v1 + 32);
  return *(_QWORD *)(v2 + 8);
}

uint64_t sub_100006C3C()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_100006C48()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100006C50(uint64_t a1)
{
  uint64_t v1;

  return swift_getWitnessTable(v1, a1);
}

uint64_t sub_100006C5C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_100002FB8(v0, qword_1000FB328);
  sub_100002FF8(v0, (uint64_t)qword_1000FB328);
  v1 = subsystemName.getter();
  return Logger.init(subsystem:category:)(v1);
}

void sub_100006CCC()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10000650C(v0 + 14);
  sub_10000650C(v0 + 19);
  swift_release(v0[24]);
  sub_10000650C(v0 + 25);
  sub_10000650C(v0 + 30);
  swift_bridgeObjectRelease(v0[35]);
  swift_bridgeObjectRelease(v0[36]);
  swift_bridgeObjectRelease(v0[37]);
  swift_bridgeObjectRelease(v0[38]);
  swift_release(v0[39]);
  swift_bridgeObjectRelease(v0[40]);
  v1 = sub_10001DED0();
  sub_10001DD50(v1);
  swift_defaultActor_destroy(v0);
  sub_100006C14();
}

uint64_t sub_100006D58()
{
  uint64_t v0;

  sub_100006CCC();
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_100006D70()
{
  return type metadata accessor for PolicyManager(0);
}

uint64_t type metadata accessor for PolicyManager(uint64_t a1)
{
  uint64_t result;

  result = qword_1000FB368;
  if (!qword_1000FB368)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PolicyManager);
  return result;
}

uint64_t sub_100006DB0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[13];

  v4[1] = &unk_1000CB270;
  v4[2] = &unk_1000CB270;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[4] = &unk_1000CB270;
  v4[5] = &unk_1000CB270;
  v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[10] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[11] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for Policy(319);
  if (v3 <= 0x3F)
  {
    v4[12] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 13, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_100006E5C(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FB4F8, type metadata accessor for PolicyManager);
  *(_QWORD *)(a1 + 8) = v2;
}

uint64_t InferenceProviderManager.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100006EA4()
{
  return InferenceProviderManager.unownedExecutor.getter();
}

uint64_t sub_100006EBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  sub_10001E310(a1, a2, a3);
  v4 = *(_QWORD *)(sub_100002F78(&qword_1000FB560) - 8);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v3[7] = v5;
  v3[8] = sub_10001D828(v5);
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_100006F0C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t (*v15)(void);

  v2 = v0[7];
  v1 = v0[8];
  v3 = v0[5];
  v4 = v0[6];
  v5 = v0[3];
  v6 = v0[2];
  sub_10001CBC0(v0[4], v1);
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = (v2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = swift_allocObject(&unk_1000F2AF0, v10 + 16, v7 | 7);
  v0[9] = v11;
  sub_10001CD3C(v1, v11 + v8, &qword_1000FB560);
  *(_QWORD *)(v11 + v9) = v3;
  v12 = (_QWORD *)(v11 + v10);
  *v12 = v6;
  v12[1] = v5;
  sub_10001EAF0(&dword_1000FB518);
  swift_retain();
  sub_10001E140();
  v13 = (_QWORD *)sub_10001EBC0();
  v0[10] = v13;
  *v13 = v0;
  v13[1] = sub_100007004;
  return v15();
}

uint64_t sub_100007004()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 80));
  sub_10001D9C0();
  sub_10001E10C();
  return sub_10001D6D0();
}

uint64_t sub_100007040()
{
  uint64_t v0;

  swift_task_dealloc();
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100007068(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_10001EC28();
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v2[6] = v5;
  v2[7] = sub_10001D828(v5);
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_1000070B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(void);

  sub_10001DF98();
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 24) & ~v5;
  v7 = swift_allocObject(&unk_1000F2A78, v6 + v3, v5 | 7);
  *(_QWORD *)(v2 + 64) = v7;
  *(_QWORD *)(v7 + 16) = v1;
  sub_10001E0E8(v7 + v6, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32));
  sub_10001EAF0(dword_1000FB5D0);
  sub_10001D7EC();
  v8 = (_QWORD *)sub_10001EBC0();
  *(_QWORD *)(v2 + 72) = v8;
  *v8 = v2;
  v8[1] = sub_100007168;
  return v10();
}

uint64_t sub_100007168()
{
  uint64_t v0;
  uint64_t v1;

  sub_10001D9A0();
  if (!v1)
    swift_release(*(_QWORD *)(v0 + 64));
  return sub_10001D6D0();
}

uint64_t sub_1000071B8()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  v1 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_100006A38(v1);
}

uint64_t sub_1000071E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 64));
  sub_10001E330();
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100007210(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_100002F78(&qword_1000FB250);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v2[6] = v5;
  v2[7] = sub_10001D828(v5);
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_100007264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t (*v20)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v29;

  sub_10001DB50();
  sub_10001DF98();
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = (v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = swift_allocObject(&unk_1000F2A50, v17 + 8, v15 | 7);
  *(_QWORD *)(v12 + 64) = v18;
  sub_10001E0E8(v18 + v16, v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 32));
  *(_QWORD *)(v18 + v17) = v11;
  v29 = (char *)&dword_1000FB518 + dword_1000FB518;
  sub_10001D7EC();
  v19 = (_QWORD *)sub_10001EBC0();
  *(_QWORD *)(v12 + 72) = v19;
  *v19 = v12;
  v19[1] = sub_100007324;
  sub_10001DB20();
  return v20(v20, v21, v22, v23, v24, v25, v26, v27, v29, a10);
}

uint64_t sub_100007324()
{
  uint64_t v0;

  v0 = sub_10001EA58();
  sub_10001D680(v0);
  sub_10001D9C0();
  sub_10001E10C();
  return sub_10001D6D0();
}

uint64_t sub_10000735C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100007384()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 96) = v0;
  return sub_10001D948((uint64_t)sub_100007398, v0);
}

uint64_t sub_100007398()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v5)(uint64_t);

  sub_10001C830((_QWORD *)(v0[12] + 112), *(_QWORD *)(v0[12] + 136));
  if (qword_1000FB208 != -1)
    swift_once(&qword_1000FB208, sub_1000B0A10);
  v1 = type metadata accessor for FilePath(0);
  v0[13] = v1;
  v0[14] = sub_100002FF8(v1, (uint64_t)qword_1001000A8);
  v2 = (_QWORD *)sub_10001DA40((uint64_t)&unk_1000FC868);
  v0[15] = v2;
  *v2 = v0;
  v2[1] = sub_100007444;
  v3 = sub_10001E2B4();
  return v5(v3);
}

uint64_t sub_100007444(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v6;
  uint64_t v7;

  sub_10001E538();
  sub_10001EA4C(v6);
  v3[16] = v2;
  swift_task_dealloc(v7);
  if (!v2)
  {
    v3[17] = a2;
    v3[18] = a1;
  }
  return sub_10001D6DC();
}

uint64_t sub_1000074AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_10001DD0C();
  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 96);
  *(_QWORD *)(v2 + 280) = *(_QWORD *)(v0 + 144);
  sub_10001D964();
  sub_10001EADC();
  swift_beginAccess(v2 + 304, v0 + 40, 1, 0);
  v3 = *(_QWORD *)(v2 + 304);
  *(_QWORD *)(v2 + 304) = v1;
  swift_bridgeObjectRelease(v3);
  sub_10001D8B4();
  if (os_variant_has_internal_content("ModelManager"))
  {
    sub_10001C830((_QWORD *)(*(_QWORD *)(v0 + 96) + 112), *(_QWORD *)(*(_QWORD *)(v0 + 96) + 136));
    if (qword_1000FB210 != -1)
      swift_once(&qword_1000FB210, sub_1000B0A30);
    *(_QWORD *)(v0 + 152) = sub_100002FF8(*(_QWORD *)(v0 + 104), (uint64_t)qword_1001000C0);
    v4 = (_QWORD *)sub_10001D6BC((uint64_t)&unk_1000FC868);
    *(_QWORD *)(v0 + 160) = v4;
    *v4 = v0;
    v4[1] = sub_1000075B4;
    sub_10001E2B4();
    sub_10001DCCC();
    return v6(v5, v6, v7, v8, v9, v10, v11, v12);
  }
  else
  {
    sub_1000084EC();
    return sub_10001DE38(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_1000075B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v6;
  uint64_t v7;

  sub_10001E538();
  sub_10001EA4C(v6);
  v3[21] = v2;
  swift_task_dealloc(v7);
  if (!v2)
  {
    v3[22] = a2;
    v3[23] = a1;
  }
  return sub_10001D6DC();
}

uint64_t sub_10000761C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 96);
  sub_10001E194();
  sub_10001E4D4();
  sub_10001E940();
  sub_10001E934();
  v5 = sub_100008440(v2, v3, v4);
  v6 = *(_QWORD *)(v1 + 280);
  *(_QWORD *)(v1 + 280) = v5;
  swift_bridgeObjectRelease(v6);
  sub_10001E26C(v1 + 304, v0 + 16);
  sub_10001D964();
  sub_1000BF930();
  swift_endAccess(v0 + 16);
  sub_10001E4C0();
  sub_10001D8B4();
  sub_1000084EC();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000076C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  _DWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;

  sub_10001DFE8();
  if (qword_1000FB0D0 != -1)
    swift_once(&qword_1000FB0D0, sub_100006C5C);
  v1 = sub_10001DD64();
  sub_100002FF8(v1, (uint64_t)qword_1000FB328);
  sub_10001E764();
  v2 = sub_10001E764();
  v3 = Logger.logObject.getter(v2);
  static os_log_type_t.fault.getter();
  v4 = sub_10001E264(v3);
  v5 = *(_QWORD *)(v0 + 128);
  if (v4)
  {
    v6 = (_DWORD *)sub_10001D8D4(22);
    v7 = (_QWORD *)sub_10001D8D4(8);
    v27 = sub_10001D8D4(32);
    *v6 = 136315394;
    sub_100006710(&qword_1000FB8D8, (uint64_t (*)(uint64_t))&type metadata accessor for FilePath);
    v9 = sub_10001EC14(v8);
    sub_10001E89C(v9, v10, v11, v12);
    *(_QWORD *)(v0 + 80) = v13;
    sub_10001E448(v13, v14, v15, (uint64_t)(v6 + 3), v16, v17, v18, v19, v0 + 88, v0 + 80);
    sub_10001E034();
    sub_10001E244();
    v20 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v0 + 88) = v20;
    sub_10001E8B8(v20, v0 + 96);
    *v7 = v20;
    sub_10001DB48();
    sub_10001DB48();
    sub_10001E2A0((void *)&_mh_execute_header, v21, v22, "Failed to load policy file %s: %@");
    sub_100002F78(&qword_1000FB8E0);
    sub_10001DBB8((uint64_t)v7);
    sub_10001D790((uint64_t)v7);
    sub_10001DBB8(v27);
    sub_10001D790(v27);
    sub_10001D790((uint64_t)v6);

    sub_10001DB48();
  }
  else
  {
    sub_10001DB48();
    sub_10001DB48();
    sub_10001DB48();

  }
  if (os_variant_has_internal_content("ModelManager"))
  {
    sub_10001C830((_QWORD *)(*(_QWORD *)(v0 + 96) + 112), *(_QWORD *)(*(_QWORD *)(v0 + 96) + 136));
    if (qword_1000FB210 != -1)
      swift_once(&qword_1000FB210, sub_1000B0A30);
    *(_QWORD *)(v0 + 152) = sub_100002FF8(*(_QWORD *)(v0 + 104), (uint64_t)qword_1001000C0);
    v23 = (_QWORD *)sub_10001DA40((uint64_t)&unk_1000FC868);
    *(_QWORD *)(v0 + 160) = v23;
    *v23 = v0;
    v23[1] = sub_1000075B4;
    v24 = sub_10001E2B4();
    return v26(v24);
  }
  else
  {
    sub_1000084EC();
    return sub_10001D8DC(*(uint64_t (**)(void))(v0 + 8));
  }
}

#error "100007A04: call analysis failed (funcsize=103)"

uint64_t sub_100007AD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v7 = sub_100002F78(&qword_1000FB6A0);
  __chkstk_darwin(v7);
  v9 = (_QWORD *)((char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(_QWORD *)(a2 + 280);
  v31 = a1;
  swift_bridgeObjectRetain(v10);
  sub_100007D7C((uint64_t (*)(char *))sub_10001D64C, v10, (uint64_t)v9);
  swift_bridgeObjectRelease(v10);
  v11 = sub_100002F78(&qword_1000FB678);
  result = sub_100005700((uint64_t)v9, 1, v11);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v14 = *v9;
    v13 = v9[1];
    v15 = (char *)v9 + *(int *)(v11 + 48);
    v16 = type metadata accessor for Policy(0);
    v17 = *(_QWORD *)(v16 - 8);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v15, v16);
    if (qword_1000FB0D0 != -1)
      swift_once(&qword_1000FB0D0, sub_100006C5C);
    v18 = type metadata accessor for Logger(0);
    sub_100002FF8(v18, (uint64_t)qword_1000FB328);
    v19 = swift_bridgeObjectRetain(v13);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v30 = a1;
      v22 = swift_slowAlloc(12, -1);
      v28[1] = v3;
      v23 = (uint8_t *)v22;
      v24 = swift_slowAlloc(32, -1);
      v29 = a3;
      v25 = v24;
      v34 = v24;
      *(_DWORD *)v23 = 136315138;
      swift_bridgeObjectRetain(v13);
      sub_1000102C0(v14, v13, &v34);
      v32 = v26;
      a1 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v23 + 4);
      swift_bridgeObjectRelease_n(v13, 3);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Internal policy file contains policy with same name as existing policy: %s", v23, 0xCu);
      swift_arrayDestroy(v25, 1);
      v27 = v25;
      a3 = v29;
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v23, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v13, 2);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a3, a1, v16);
  }
  return result;
}

void sub_100007D7C(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t (*v31)(char *);
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[5];
  int64_t v35;

  v31 = a1;
  v28 = a3;
  v32 = sub_100002F78(&qword_1000FB678);
  v5 = __chkstk_darwin(v32);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v27 - v8;
  sub_10001C6C4(a2, v34);
  v33 = v34[0];
  v35 = v34[3];
  v10 = v34[4];
  v29 = v34[1];
  v30 = (unint64_t)(v34[2] + 64) >> 6;
  swift_bridgeObjectRetain(a2);
  if (!v10)
    goto LABEL_3;
LABEL_2:
  v11 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  v12 = v11 | (v35 << 6);
  while (1)
  {
    v16 = *(_QWORD *)(v33 + 56);
    v17 = (uint64_t *)(*(_QWORD *)(v33 + 48) + 16 * v12);
    v18 = *v17;
    v19 = v17[1];
    v20 = type metadata accessor for Policy(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(&v9[*(int *)(v32 + 48)], v16 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v12, v20);
    *(_QWORD *)v9 = v18;
    *((_QWORD *)v9 + 1) = v19;
    sub_10001CD3C((uint64_t)v9, (uint64_t)v7, &qword_1000FB678);
    swift_bridgeObjectRetain(v19);
    v21 = v31(v7);
    if (v3)
    {
      sub_10001D5AC((uint64_t)v7, &qword_1000FB678);
      swift_release(v33);
      return;
    }
    if ((v21 & 1) != 0)
    {
      swift_release(v33);
      v23 = v28;
      sub_10001CD3C((uint64_t)v7, v28, &qword_1000FB678);
      v24 = v23;
      v25 = 0;
      goto LABEL_27;
    }
    sub_10001D5AC((uint64_t)v7, &qword_1000FB678);
    if (v10)
      goto LABEL_2;
LABEL_3:
    v13 = v35 + 1;
    if (__OFADD__(v35, 1))
      break;
    if (v13 >= v30)
      goto LABEL_26;
    v14 = *(_QWORD *)(v29 + 8 * v13);
    if (!v14)
    {
      v15 = v35 + 2;
      if (v35 + 2 >= v30)
        goto LABEL_26;
      v14 = *(_QWORD *)(v29 + 8 * v15);
      if (v14)
        goto LABEL_12;
      v15 = v35 + 3;
      if (v35 + 3 >= v30)
        goto LABEL_26;
      v14 = *(_QWORD *)(v29 + 8 * v15);
      if (v14)
        goto LABEL_12;
      v15 = v35 + 4;
      if (v35 + 4 >= v30)
        goto LABEL_26;
      v14 = *(_QWORD *)(v29 + 8 * v15);
      if (v14)
      {
LABEL_12:
        v13 = v15;
      }
      else
      {
        v13 = v35 + 5;
        if (v35 + 5 >= v30)
          goto LABEL_26;
        v14 = *(_QWORD *)(v29 + 8 * v13);
        if (!v14)
        {
          v22 = v35 + 6;
          while (v22 < v30)
          {
            v14 = *(_QWORD *)(v29 + 8 * v22++);
            if (v14)
            {
              v13 = v22 - 1;
              goto LABEL_13;
            }
          }
LABEL_26:
          v26 = v28;
          swift_release(v33);
          v24 = v26;
          v25 = 1;
LABEL_27:
          sub_100005630(v24, v25, 1, v32);
          return;
        }
      }
    }
LABEL_13:
    v10 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v13 << 6);
    v35 = v13;
  }
  __break(1u);
}

void sub_10000805C(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  sub_1000080B4(a1, a2, a3, type metadata accessor for InferenceProviderAsset);
}

void sub_100008088(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  sub_1000080B4(a1, a2, a3, type metadata accessor for DaemonSession);
}

void sub_1000080B4(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v38;
  uint64_t v39;
  _QWORD v40[6];
  uint64_t v41;

  v6 = v4;
  v7 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    sub_10001E3E0();
    __CocoaSet.makeIterator()(v10);
    v11 = sub_10001E5EC();
    v5 = a4(v11);
    sub_10001E934();
    sub_100006710(v12, v13);
    v15 = Set.Iterator.init(_cocoa:)(v7, v5, v14);
    v7 = v40[1];
    v39 = v40[2];
    v16 = v40[3];
    v17 = v40[4];
    v18 = v40[5];
  }
  else
  {
    sub_10001DED8();
    v39 = v7 + 56;
    v10 = ~v19;
    sub_10001E7F4();
    v18 = v20 & v21;
    v15 = sub_10001E3E0();
    v16 = v10;
    v17 = 0;
  }
  v38 = (unint64_t)(v16 + 64) >> 6;
  if (v7 < 0)
    goto LABEL_10;
LABEL_8:
  if (v18)
  {
    v5 = (v18 - 1) & v18;
    v22 = __clz(__rbit64(v18)) | (v17 << 6);
    v23 = v17;
    goto LABEL_27;
  }
  v23 = v17 + 1;
  if (!__OFADD__(v17, 1))
  {
    if (v23 >= v38)
      goto LABEL_39;
    if (!*(_QWORD *)(v39 + 8 * v23))
    {
      sub_10001E7E8();
      if (v27 == v28)
      {
LABEL_39:
        sub_10001E7C4(v7);
        return;
      }
      sub_10001E7DC();
      if (v30)
        goto LABEL_25;
      sub_10001E7E8();
      if (v27 == v28)
        goto LABEL_39;
      sub_10001E7DC();
      if (v31)
        goto LABEL_25;
      sub_10001E7E8();
      if (v27 == v28)
        goto LABEL_39;
      sub_10001E7DC();
      if (v32)
      {
LABEL_25:
        v23 = v29;
      }
      else
      {
        v23 = v17 + 5;
        if (v17 + 5 >= v38)
          goto LABEL_39;
        if (!*(_QWORD *)(v39 + 8 * v23))
        {
          while (1)
          {
            sub_10001E7E8();
            if (v27 == v28)
              goto LABEL_39;
            sub_10001E7DC();
            v35 = v34 + 1;
            if (v36)
            {
              v23 = v35 - 1;
              break;
            }
          }
        }
      }
    }
    sub_10001E370();
LABEL_27:
    v26 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v22);
    sub_10001DAE8();
    if (v26)
    {
      while (1)
      {
        v41 = v26;
        v10 = v6;
        v33 = a1(&v41);
        if (v6)
          break;
        if ((v33 & 1) != 0)
          goto LABEL_39;
        swift_release(v26);
        v17 = v23;
        v18 = v5;
        if ((v7 & 0x8000000000000000) == 0)
          goto LABEL_8;
LABEL_10:
        v24 = __CocoaSet.Iterator.next()(v15);
        if (v24)
        {
          v25 = v24;
          v40[0] = v24;
          a4(0);
          sub_10001DF68();
          swift_dynamicCast(&v41, v40, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
          v26 = v41;
          swift_unknownObjectRelease(v25);
          v23 = v17;
          v5 = v18;
          if (v26)
            continue;
        }
        goto LABEL_39;
      }
      swift_release(v26);
    }
    goto LABEL_39;
  }
  __break(1u);
}

void sub_100008368(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  sub_1000080B4(a1, a2, a3, type metadata accessor for DaemonRequest);
}

uint64_t sub_100008394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v10;

  swift_bridgeObjectRetain(a3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
  v10 = a2;
  sub_100010EF4(a1, (uint64_t)sub_100010E94, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v10, a3, (uint64_t)&_swift_bridgeObjectRelease, (void (*)(uint64_t, uint64_t, uint64_t))sub_10000D0F0);
  v8 = v10;
  swift_bridgeObjectRelease(0x8000000000000000);
  swift_bridgeObjectRelease(a3);
  if (v3)
    swift_bridgeObjectRelease(v8);
  return v8;
}

uint64_t sub_100008440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v10;

  swift_retain(a3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
  v10 = a2;
  sub_100010EF4(a1, (uint64_t)sub_100010E94, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v10, a3, (uint64_t)&_swift_release, (void (*)(uint64_t, uint64_t, uint64_t))sub_100007AD8);
  v8 = v10;
  swift_bridgeObjectRelease(0x8000000000000000);
  swift_release(a3);
  if (v3)
    swift_bridgeObjectRelease(v8);
  return v8;
}

void sub_1000084EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[24];

  v1 = *(_QWORD *)(v0 + 280);
  swift_beginAccess(v0 + 288, v5, 0, 0);
  sub_10001EBA8(v1);
  v2 = sub_10001E140();
  v3 = sub_100008394(v2, v1, v1);
  v4 = *(_QWORD *)(v0 + 296);
  *(_QWORD *)(v0 + 296) = v3;
  swift_bridgeObjectRelease(v4);
  sub_10001E014();
}

uint64_t sub_100008550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;

  v5[9] = a4;
  v5[10] = a5;
  v5[7] = a2;
  v5[8] = a3;
  v7 = sub_100002F78(&qword_1000FB560);
  v5[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000085B4, a3, 0);
}

uint64_t sub_1000085B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  os_log_type_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  unint64_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  sub_10001DFE8();
  a21 = v23;
  a22 = v24;
  a20 = v22;
  sub_10001DED0();
  v25 = sub_10001E864();
  if (sub_100005700(v25, 1, v26) == 1)
  {
    sub_10001E4D4();
    sub_10001EB9C();
    v28 = v27;
    sub_100006C48();
    v29 = sub_10001E4C8();
    v31 = sub_1000089DC(v29, v30, v28);
    sub_10001E034();
    if ((v31 & 1) != 0)
    {
      if (qword_1000FB0D0 != -1)
        swift_once(&qword_1000FB0D0, sub_100006C5C);
      v32 = *(_QWORD *)(v22 + 80);
      v33 = sub_10001DD64();
      v34 = sub_100002FF8(v33, (uint64_t)qword_1000FB328);
      v35 = sub_10001EBA8(v32);
      v36 = Logger.logObject.getter(v35);
      v37 = static os_log_type_t.fault.getter();
      v38 = sub_10001E6C4(v37);
      v39 = *(_QWORD *)(v22 + 80);
      if (v38)
      {
        v40 = *(_QWORD *)(v22 + 72);
        v41 = (uint8_t *)sub_10001D8D4(12);
        v42 = sub_10001D8D4(32);
        a10 = v42;
        *(_DWORD *)v41 = 136315138;
        sub_10001E940();
        sub_1000102C0(v40, v39, &a10);
        *(_QWORD *)(v22 + 48) = v43;
        sub_10001EB6C(v22 + 48, v22 + 56, (uint64_t)(v41 + 4));
        swift_bridgeObjectRelease_n(v39, 3);
        sub_10001E18C((void *)&_mh_execute_header, v36, v34, "Removed trial policy %s while it was still in use by an assertion", v41);
        sub_10001DBB8(v42);
        sub_10001D790(v42);
        sub_10001D790((uint64_t)v41);
      }
      else
      {
        swift_bridgeObjectRelease_n(*(_QWORD *)(v22 + 80), 2);
      }

    }
  }
  v44 = *(_QWORD *)(v22 + 80);
  v45 = *(_QWORD *)(v22 + 88);
  v47 = *(_QWORD *)(v22 + 64);
  v46 = *(_QWORD *)(v22 + 72);
  sub_10001CBC0(*(_QWORD *)(v22 + 56), v45);
  sub_10001E26C(v47 + 288, v22 + 16);
  sub_10001E338();
  sub_1000963FC(v45, v46, v44);
  swift_endAccess(v22 + 16);
  sub_1000084EC();
  sub_10001EAC8();
  return sub_10001D8DC(*(uint64_t (**)(void))(v22 + 8));
}

void sub_1000087B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  int64_t v26;
  int v27;
  char v28;
  int v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;

  v2 = sub_10001E5EC();
  v3 = type metadata accessor for Assertion.DaemonRep(v2);
  v39 = *(_QWORD *)(v3 - 8);
  v40 = v3;
  sub_10001DD00();
  __chkstk_darwin(v4);
  v38 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E148();
  __chkstk_darwin(v6);
  v37 = (char *)v34 - v7;
  v8 = *(_QWORD *)(v1 + 16);
  if (v8)
  {
    v34[1] = v0;
    v41 = _swiftEmptyArrayStorage;
    sub_100011720(0, v8, 0);
    v9 = sub_10001C858(v1);
    v11 = v10;
    v35 = v1;
    v36 = v1 + 56;
    while ((v9 & 0x8000000000000000) == 0)
    {
      sub_10001DC08();
      if (v9 >= v12)
        break;
      if (((*(_QWORD *)(v36 + (((unint64_t)v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_15;
      if (*(_DWORD *)(v1 + 36) != v11)
        goto LABEL_16;
      v13 = *(_QWORD *)(v1 + 48);
      v15 = v39;
      v14 = v40;
      v16 = v37;
      (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v37, v13 + *(_QWORD *)(v39 + 72) * v9, v40);
      v17 = v38;
      v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(v38, v16, v14);
      v19 = Assertion.DaemonRep.policy.getter(v18);
      v21 = v20;
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      v22 = v41;
      if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0)
      {
        sub_100011720(0, v22[2] + 1, 1);
        v22 = v41;
      }
      v24 = v22[2];
      v23 = v22[3];
      if (v24 >= v23 >> 1)
      {
        sub_100011720(v23 > 1, v24 + 1, 1);
        v22 = v41;
      }
      v22[2] = v24 + 1;
      v25 = &v22[2 * v24];
      v25[4] = v19;
      v25[5] = v21;
      v26 = sub_10001EB60();
      v1 = v35;
      v9 = sub_10001C700(v26, v27, v28, v35);
      v11 = v29;
      v31 = v30 & 1;
      if (!--v8)
      {
        v32 = sub_10001EB60();
        sub_10001C7E4(v32, v33, v31);
        return;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
}

uint64_t sub_1000089DC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  if (v7 == a1 && v8 == a2)
    return 1;
  result = sub_10001DB04(v7, v8, a1, a2);
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v11 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v13 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v14 = *(v11 - 1);
    v15 = *v11;
    v16 = v14 == a1 && v15 == a2;
    if (v16 || (sub_10001DB04(v14, v15, a1, a2) & 1) != 0)
      return 1;
    result = 0;
    v11 += 2;
    if (v13 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_100008A98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = sub_100002F78(&qword_1000FB230);
  v4[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100008AF8, v3, 0);
}

void sub_100008AF8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;

  sub_10001DB68();
  v1 = v0[5];
  v3 = v0[3];
  v2 = v0[4];
  v4 = *(_QWORD *)(*(_QWORD *)(v1 + 312) + 16);
  v0[7] = v4;
  sub_10001DBC0();
  sub_10001D718();
  sub_100006710(&qword_1000FB4F8, type metadata accessor for PolicyManager);
  v6 = v5;
  v7 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F2A00, 64);
  v7[2] = v1;
  v7[3] = v6;
  v7[4] = v1;
  v7[5] = v4;
  v7[6] = v3;
  v7[7] = v2;
  sub_10001D834(v4);
  sub_10001D7AC();
  v8 = sub_10001D7EC();
  v9 = sub_10001DD20(v8, (uint64_t)&unk_1000FB528);
  v0[8] = v9;
  sub_10001D718();
  v10 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F2A28, 48);
  v10[2] = v1;
  v10[3] = v6;
  v10[4] = v1;
  v10[5] = v9;
  sub_10001D7AC();
  sub_10001DAE8();
  v11 = sub_10001D7EC();
  v12 = sub_10001DAC8(v11, (uint64_t)&unk_1000FB538);
  sub_10001D920(v12);
  sub_10001D930();
  sub_10001DE74();
  if (v15)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v13 + 24) = v14;
    v16 = (_QWORD *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    v0[9] = v16;
    sub_10001E548(v16);
    sub_10001DE4C();
    sub_10001D7C4();
  }
}

uint64_t sub_100008C34()
{
  uint64_t v0;

  sub_10001D680(*(_QWORD *)(*(_QWORD *)v0 + 72));
  sub_10001D7B8();
  return sub_10001D674();
}

void sub_100008C74()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  sub_10001DBFC();
  if (v2)
  {
    __break(1u);
  }
  else
  {
    sub_10001D914(*(_QWORD *)(v0 + 64), v1);
    sub_10001D9C0();
    sub_10001D938();
    sub_100006A5C(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_100008CB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  sub_10001E310(a1, a2, a3);
  v4 = sub_100002F78(&qword_1000FB230);
  *(_QWORD *)(v3 + 48) = sub_10001D7CC(v4);
  sub_10001D7B8();
  return sub_10001D674();
}

void sub_100008CF8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;

  sub_10001DB68();
  v1 = v0[5];
  v3 = v0[3];
  v2 = v0[4];
  v4 = *(_QWORD *)(*(_QWORD *)(v1 + 192) + 16);
  v0[7] = v4;
  sub_10001DBC0();
  sub_10001D718();
  sub_100006710(&qword_1000FB6B0, (uint64_t (*)(uint64_t))type metadata accessor for TrialManager);
  v6 = v5;
  v7 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F2B18, 64);
  v7[2] = v1;
  v7[3] = v6;
  v7[4] = v1;
  v7[5] = v4;
  v7[6] = v3;
  v7[7] = v2;
  sub_10001D834(v4);
  sub_10001D7AC();
  v8 = sub_10001D7EC();
  v9 = sub_10001DD20(v8, (uint64_t)&unk_1000FB6C0);
  v0[8] = v9;
  sub_10001D718();
  v10 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F2B40, 48);
  v10[2] = v1;
  v10[3] = v6;
  v10[4] = v1;
  v10[5] = v9;
  sub_10001D7AC();
  sub_10001DAE8();
  v11 = sub_10001D7EC();
  v12 = sub_10001DAC8(v11, (uint64_t)&unk_1000FB6D0);
  sub_10001D920(v12);
  sub_10001D930();
  sub_10001DE74();
  if (v15)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v13 + 24) = v14;
    v16 = (_QWORD *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    v0[9] = v16;
    sub_10001E548(v16);
    sub_10001DE4C();
    sub_10001D7C4();
  }
}

uint64_t sub_100008E34()
{
  uint64_t v0;

  sub_10001D680(*(_QWORD *)(*(_QWORD *)v0 + 72));
  sub_10001D7B8();
  return sub_10001D674();
}

void sub_100008E74()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  sub_10001DBFC();
  if (v2)
  {
    __break(1u);
  }
  else
  {
    sub_10001D914(*(_QWORD *)(v0 + 64), v1);
    sub_10001D9C0();
    sub_10001D938();
    sub_100006A5C(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_100008EB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = sub_100002F78(&qword_1000FB230);
  v3[5] = sub_10001D7CC(v4);
  sub_10001D7B8();
  return sub_10001D674();
}

void sub_100008EFC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;

  sub_10001DB68();
  v2 = v0[4];
  v1 = v0[5];
  v4 = v0[2];
  v3 = v0[3];
  v5 = *(_QWORD *)(*(_QWORD *)(v2 + 112) + 16);
  v0[6] = v5;
  sub_10001DBC0();
  sub_10001D718();
  sub_100006710(&qword_1000FB728, type metadata accessor for InferenceProviderAssetManager);
  v7 = v6;
  v8 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F2C58, 64);
  v8[2] = v2;
  v8[3] = v7;
  v8[4] = v2;
  v8[5] = v5;
  v8[6] = v4;
  v8[7] = v3;
  sub_10001D834(v5);
  sub_10001D7AC();
  sub_10001D7EC();
  v9 = sub_100002CE8(v1, (uint64_t)&unk_1000FB7B8, (uint64_t)v8);
  v0[7] = v9;
  sub_10001D718();
  v10 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F2C80, 48);
  v10[2] = v2;
  v10[3] = v7;
  v10[4] = v2;
  v10[5] = v9;
  sub_10001D7AC();
  sub_10001DAE8();
  v11 = sub_10001D7EC();
  v12 = sub_10001DAC8(v11, (uint64_t)&unk_1000FB7C8);
  sub_10001D920(v12);
  sub_10001D930();
  sub_10001DE74();
  if (v15)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v13 + 24) = v14;
    v16 = swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    v17 = (_QWORD *)sub_10001D994(v16);
    *v17 = v0;
    v17[1] = sub_100009048;
    sub_10001D7C4();
  }
}

uint64_t sub_100009048()
{
  uint64_t v0;

  sub_10001D680(*(_QWORD *)(*(_QWORD *)v0 + 64));
  sub_10001D7B8();
  return sub_10001D674();
}

void sub_100009088()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  sub_10001DBFC();
  if (v3)
  {
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 56);
    *(_QWORD *)(v1 + 24) = v2;
    swift_release(v4);
    sub_10001D9C0();
    v5 = *(unsigned __int8 *)(v0 + 72);
    sub_10001D938();
    (*(void (**)(uint64_t))(v0 + 8))(v5);
  }
}

uint64_t sub_1000090E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  sub_10001E310(a1, a2, a3);
  v4 = sub_100002F78(&qword_1000FB230);
  *(_QWORD *)(v3 + 48) = sub_10001D7CC(v4);
  sub_10001D7B8();
  return sub_10001D674();
}

void sub_100009124()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;

  sub_10001E6F0();
  v1 = v0[5];
  v3 = v0[3];
  v2 = v0[4];
  v4 = OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_workQueueState;
  v0[7] = OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_workQueueState;
  v5 = *(_QWORD *)(*(_QWORD *)(v1 + v4) + 16);
  v0[8] = v5;
  sub_10001DBC0();
  sub_10001D718();
  sub_100006710(&qword_1000FB828, type metadata accessor for InferenceProviderExtensionConnection);
  v7 = v6;
  v8 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F2CF8, 64);
  v8[2] = v1;
  v8[3] = v7;
  v8[4] = v1;
  v8[5] = v5;
  v8[6] = v3;
  v8[7] = v2;
  sub_10001D834(v5);
  sub_10001D7AC();
  v9 = sub_10001D7EC();
  v10 = sub_10001DD20(v9, (uint64_t)&unk_1000FB860);
  v0[9] = v10;
  sub_10001D718();
  v11 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F2D20, 48);
  v11[2] = v1;
  v11[3] = v7;
  v11[4] = v1;
  v11[5] = v10;
  sub_10001D7AC();
  sub_10001DAE8();
  v12 = sub_10001D7EC();
  v13 = sub_10001DAC8(v12, (uint64_t)&unk_1000FB870);
  sub_10001D920(v13);
  sub_10001D930();
  sub_10001DE74();
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v14 + 24) = v15;
    v17 = (_QWORD *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    v0[10] = v17;
    sub_10001E548(v17);
    sub_10001DE4C();
    sub_10001DC14();
  }
}

uint64_t sub_100009260()
{
  uint64_t v0;

  sub_10001D680(*(_QWORD *)(*(_QWORD *)v0 + 80));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_1000092A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  sub_10001E310(a1, a2, a3);
  v4 = sub_100002F78(&qword_1000FB230);
  *(_QWORD *)(v3 + 48) = sub_10001D7CC(v4);
  sub_10001D7B8();
  return sub_10001D674();
}

void sub_1000092E0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;

  sub_10001DB68();
  v1 = v0[5];
  v3 = v0[3];
  v2 = v0[4];
  v4 = *(_QWORD *)(*(_QWORD *)(v1 + 112) + 16);
  v0[7] = v4;
  sub_10001DBC0();
  sub_10001D718();
  sub_100006710(&qword_1000FB728, type metadata accessor for InferenceProviderAssetManager);
  v6 = v5;
  v7 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F2BB8, 64);
  v7[2] = v1;
  v7[3] = v6;
  v7[4] = v1;
  v7[5] = v4;
  v7[6] = v3;
  v7[7] = v2;
  sub_10001D834(v4);
  sub_10001D7AC();
  v8 = sub_10001D7EC();
  v9 = sub_10001DD20(v8, (uint64_t)&unk_1000FB738);
  v0[8] = v9;
  sub_10001D718();
  v10 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F2BE0, 48);
  v10[2] = v1;
  v10[3] = v6;
  v10[4] = v1;
  v10[5] = v9;
  sub_10001D7AC();
  sub_10001DAE8();
  v11 = sub_10001D7EC();
  v12 = sub_10001DAC8(v11, (uint64_t)&unk_1000FB748);
  sub_10001D920(v12);
  sub_10001D930();
  sub_10001DE74();
  if (v15)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v13 + 24) = v14;
    v16 = (_QWORD *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    v0[9] = v16;
    sub_10001E548(v16);
    sub_10001DE4C();
    sub_10001D7C4();
  }
}

uint64_t sub_10000941C()
{
  uint64_t v0;

  sub_10001D680(*(_QWORD *)(*(_QWORD *)v0 + 72));
  sub_10001D7B8();
  return sub_10001D674();
}

void sub_10000945C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  sub_10001DBFC();
  if (v2)
  {
    __break(1u);
  }
  else
  {
    sub_10001D914(*(_QWORD *)(v0 + 64), v1);
    sub_10001D9C0();
    sub_10001D938();
    sub_100006A5C(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_1000094A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  sub_10001E310(a1, a2, a3);
  v4 = sub_100002F78(&qword_1000FB230);
  *(_QWORD *)(v3 + 48) = sub_10001D7CC(v4);
  sub_10001D7B8();
  return sub_10001D674();
}

void sub_1000094E0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;

  sub_10001E6F0();
  v1 = v0[5];
  v3 = v0[3];
  v2 = v0[4];
  v4 = OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider_workQueueState;
  v0[7] = OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider_workQueueState;
  v5 = *(_QWORD *)(*(_QWORD *)(v1 + v4) + 16);
  v0[8] = v5;
  sub_10001DBC0();
  sub_10001D718();
  sub_100006710(&qword_1000FB6E0, type metadata accessor for RunningBoardProvider);
  v7 = v6;
  v8 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F2B68, 64);
  v8[2] = v1;
  v8[3] = v7;
  v8[4] = v1;
  v8[5] = v5;
  v8[6] = v3;
  v8[7] = v2;
  sub_10001D834(v5);
  sub_10001D7AC();
  v9 = sub_10001D7EC();
  v10 = sub_10001DD20(v9, (uint64_t)&unk_1000FB6F0);
  v0[9] = v10;
  sub_10001D718();
  v11 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F2B90, 48);
  v11[2] = v1;
  v11[3] = v7;
  v11[4] = v1;
  v11[5] = v10;
  sub_10001D7AC();
  sub_10001DAE8();
  v12 = sub_10001D7EC();
  v13 = sub_10001DAC8(v12, (uint64_t)&unk_1000FB700);
  sub_10001D920(v13);
  sub_10001D930();
  sub_10001DE74();
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v14 + 24) = v15;
    v17 = (_QWORD *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    v0[10] = v17;
    sub_10001E548(v17);
    sub_10001DE4C();
    sub_10001DC14();
  }
}

uint64_t sub_10000961C()
{
  uint64_t v0;

  sub_10001D680(*(_QWORD *)(*(_QWORD *)v0 + 80));
  sub_10001D7B8();
  return sub_10001D674();
}

void sub_10000965C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  sub_10001DBFC();
  if (v2)
  {
    __break(1u);
  }
  else
  {
    sub_10001D914(*(_QWORD *)(v0 + 72), v1);
    sub_10001D9C0();
    sub_10001D938();
    sub_100006A5C(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_1000096A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v3[5] = a2;
  v3[6] = a3;
  v5 = type metadata accessor for Assertion.DaemonRep(0);
  v3[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[8] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[9] = swift_task_alloc(v7);
  v3[10] = swift_task_alloc(v7);
  v3[11] = swift_task_alloc(v7);
  v3[12] = swift_task_alloc(v7);
  v8 = sub_100002F78(&qword_1000FB560);
  v3[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100009754, a2, 0);
}

uint64_t sub_100009754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint8_t *a10, uint64_t a11, _QWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint8_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  uint64_t (*v90)(uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  _BOOL4 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint8_t *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t (*v110)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint8_t *, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v119;
  __n128 *v120;
  char *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(uint64_t, uint64_t, uint64_t);

  sub_10001E6D4();
  v19 = v18[5];
  v20 = v18[13];
  v22 = Assertion.DaemonRep.policy.getter(v21);
  v24 = v23;
  v25 = *(_QWORD *)(v19 + 296);
  sub_10001E4D4();
  sub_100009DD0(v22, v24, v25);
  sub_100006C48();
  sub_10001E4C0();
  v26 = sub_10001DED0();
  LODWORD(v22) = sub_100005700(v20, 1, v26);
  sub_10001D5AC(v20, &qword_1000FB560);
  if ((_DWORD)v22 == 1)
  {
    if (qword_1000FB0D0 != -1)
      swift_once(&qword_1000FB0D0, sub_100006C5C);
    v28 = v18[8];
    v27 = v18[9];
    v29 = v18[6];
    v30 = sub_10001DD64();
    sub_100002FF8(v30, (uint64_t)qword_1000FB328);
    sub_10001E0E8(v27, v29, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 16));
    v31 = sub_10001E694();
    v32 = static os_log_type_t.error.getter();
    v33 = sub_10001E264(v31);
    v35 = v18[8];
    v34 = v18[9];
    if (v33)
    {
      a11 = (uint64_t)(v18 + 2);
      a12 = (_QWORD *)v18[7];
      v36 = (uint8_t *)sub_10001D8D4(12);
      a13 = (uint64_t)(v18 + 3);
      a14 = sub_10001D8D4(32);
      *(_DWORD *)v36 = 136315138;
      v37 = Assertion.DaemonRep.policy.getter(a14);
      sub_10001E8F8(v37, v38, v39, v40, v41, v42, v43);
      v18[2] = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v18 + 2, v18 + 3, v36 + 4);
      sub_10001D8B4();
      (*(void (**)(uint64_t, _QWORD *))(v35 + 8))(v34, a12);
      sub_10001E18C((void *)&_mh_execute_header, v31, v32, "Failed to acquire assertion: Policy %s does not exist", v36);
      sub_10001DBB8(a14);
      sub_10001D790(a14);
      sub_10001D790((uint64_t)v36);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v35 + 8))(v18[9], v18[7]);
    }

    v67 = v18[12];
    v68 = v18[13];
    v69 = v18[11];
    v70 = type metadata accessor for ModelManagerError(0);
    sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    v72 = swift_allocError(v70, v71, 0, 0);
    v74 = v73;
    *v73 = Assertion.DaemonRep.policy.getter(v72);
    v74[1] = v75;
    v76 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v70 - 8) + 104))(v74, enum case for ModelManagerError.policyNotFound(_:), v70);
    swift_willThrow(v76, v77, v78, v79, v80, v81, v82, v83);
    swift_task_dealloc(v68);
    swift_task_dealloc(v67);
    swift_task_dealloc(v69);
    sub_10001E490();
    sub_10001D938();
LABEL_19:
    sub_10001E3E8();
    return v110(v110, v111, v112, v113, v114, v115, v116, v117, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  }
  sub_10001E940();
  sub_10002C280();
  v46 = v45;
  sub_10001E4C0();
  if ((v46 & 1) != 0)
  {
    if (qword_1000FB0D0 != -1)
      swift_once(&qword_1000FB0D0, sub_100006C5C);
    v47 = v18[10];
    v48 = v18[7];
    v49 = v18[8];
    v50 = v18[6];
    v51 = sub_10001DD64();
    sub_100002FF8(v51, (uint64_t)qword_1000FB328);
    v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 16);
    v52(v47, v50, v48);
    v53 = sub_10001E694();
    v54 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v53, v54))
    {
      v56 = v18[10];
      v55 = v18[11];
      a11 = v18[8];
      a12 = v18 + 4;
      v57 = v18[7];
      v58 = (uint8_t *)sub_10001D8D4(12);
      a13 = sub_10001D8D4(32);
      a14 = a13;
      *(_DWORD *)v58 = 136315138;
      a10 = v58 + 4;
      v52(v55, v56, v57);
      v59 = String.init<A>(describing:)(v55, v57);
      sub_10001E8F8(v59, v60, v61, v62, v63, v64, v65);
      v18[4] = v66;
      sub_10001EB6C((uint64_t)(v18 + 4), (uint64_t)(v18 + 5), (uint64_t)(v58 + 4));
      sub_10001DA38();
      sub_10001E78C(a11);
      sub_10001E18C((void *)&_mh_execute_header, v53, v54, "Failed to acquire assetion: redundant assertion ID: %s", v58);
      sub_10001DBB8(a13);
      sub_10001D790(a13);
      sub_10001D790((uint64_t)v58);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v18[8] + 8))(v18[10], v18[7]);
    }

    swift_task_dealloc(v18[13]);
    sub_10001E330();
    sub_10001D938();
    sub_10001EAC8();
    sub_10001E490();
    sub_10001E5D0();
    goto LABEL_19;
  }
  if (qword_1000FB0D0 != -1)
    swift_once(&qword_1000FB0D0, sub_100006C5C);
  v84 = v18[12];
  v86 = v18[7];
  v85 = v18[8];
  v87 = v18[6];
  v88 = sub_10001DD64();
  v89 = sub_100002FF8(v88, (uint64_t)qword_1000FB328);
  v90 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v85 + 16);
  v91 = v90(v84, v87, v86);
  v92 = v89;
  Logger.logObject.getter(v91);
  v93 = sub_10001E9D0();
  v94 = sub_10001E264(v89);
  v95 = v18[12];
  if (v94)
  {
    v126 = (void (*)(uint64_t, uint64_t, uint64_t))v90;
    v96 = v18[11];
    v97 = v18[7];
    v125 = v18[8];
    v98 = (uint8_t *)sub_10001D8D4(12);
    v99 = sub_10001D8D4(32);
    *(_DWORD *)v98 = 136315138;
    v126(v96, v95, v97);
    v100 = String.init<A>(describing:)(v96, v97);
    v102 = v101;
    sub_10001E8F8(v100, v101, v103, v104, v105, v106, v107);
    v18[3] = v108;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v18 + 3, v18 + 4, v98 + 4);
    v109 = v102;
    v90 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v126;
    swift_bridgeObjectRelease(v109);
    sub_10001E78C(v125);
    sub_10001E18C((void *)&_mh_execute_header, v92, v93, "Acquiring assertion: %s", v98);
    sub_10001DBB8(v99);
    sub_10001D790(v99);
    sub_10001D790((uint64_t)v98);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v18[8] + 8))(v18[12], v18[7]);
  }

  v119 = sub_100002F78(&qword_1000FB608);
  v120 = (__n128 *)sub_10001DEF4(v119);
  v121 = sub_10001E844(v120, (__n128)xmmword_1000CB140);
  ((void (*)(char *))v90)(v121);
  sub_1000034E8((uint64_t)v120);
  v18[14] = v122;
  v123 = (_QWORD *)swift_task_alloc(dword_1000FB614);
  v18[15] = v123;
  *v123 = v18;
  v123[1] = sub_100009D70;
  sub_10001E2B4();
  sub_10001E3E8();
  return sub_100009FF4(v124);
}

uint64_t sub_100009D70()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v2)(void);

  sub_10001E538();
  sub_10001D788(*(_QWORD *)(v0 + 120), v1);
  sub_10001E034();
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  v2 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_10001D940(v2);
}

uint64_t sub_100009DD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(a3 + 16) && (sub_10001E1E0(a1, a2), (v3 & 1) != 0))
  {
    v4 = sub_10001DED0();
    sub_10001DE80(v4);
    v5 = sub_10001E19C();
  }
  else
  {
    sub_10001DED0();
    v5 = sub_10001E070();
  }
  return sub_10001DBAC(v5, v6, v7, v8);
}

uint64_t sub_100009E1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_10001E1E0(a1, a2);
    if ((v3 & 1) != 0)
      sub_10001E194();
  }
  return sub_10001EBDC();
}

double sub_100009E64@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t v6;
  char v7;
  double result;

  if (*(_QWORD *)(a3 + 16) && (v6 = sub_10001E1E0(a1, a2), (v7 & 1) != 0))
  {
    sub_10001D29C(*(_QWORD *)(v4 + 56) + 40 * v6, a4);
  }
  else
  {
    *(_QWORD *)(a4 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

uint64_t sub_100009EB8(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(a2 + 16) && (sub_1000109F0(a1), (v2 & 1) != 0))
  {
    v3 = sub_10001E368();
    sub_10001DE80(v3);
    v4 = sub_10001E19C();
  }
  else
  {
    sub_10001E368();
    v4 = sub_10001E070();
  }
  return sub_10001DBAC(v4, v5, v6, v7);
}

uint64_t sub_100009F08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(a3 + 16) && (sub_10001E1E0(a1, a2), (v3 & 1) != 0))
  {
    type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0);
    sub_10001D2E0();
    v4 = sub_10001E19C();
  }
  else
  {
    type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0);
    v4 = sub_10001E070();
  }
  return sub_10001DBAC(v4, v5, v6, v7);
}

uint64_t sub_100009F78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  char v5;

  if (*(_QWORD *)(a3 + 16) && (v4 = sub_10001E1E0(a1, a2), (v5 & 1) != 0))
    return *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v4);
  else
    return 0;
}

void sub_100009FB8(uint64_t a1, uint64_t a2)
{
  char v2;

  if (*(_QWORD *)(a2 + 16))
  {
    sub_100010A64(a1);
    if ((v2 & 1) != 0)
      swift_retain();
  }
  sub_100006C14();
}

uint64_t sub_100009FF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return sub_10001D948((uint64_t)sub_10000A008, v1);
}

uint64_t sub_10000A008()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  _QWORD *v5;
  uint64_t v6;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 320);
  sub_10001D964();
  v2 = sub_10001E338();
  *(_QWORD *)(v0 + 32) = sub_10000C514(v2, v1);
  sub_10001D964();
  v3 = sub_10001E910();
  sub_10001D8B4();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v5 = (_QWORD *)swift_task_alloc(dword_1000FB554);
    *(_QWORD *)(v0 + 40) = v5;
    v6 = sub_10001EAAC(v5, (uint64_t)sub_10000A0A8);
    return sub_10000CB30(v6);
  }
}

uint64_t sub_10000A0A8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *v0;
  v4 = v1;
  v2 = *v0;
  sub_10001D788(*(_QWORD *)(v1 + 40), &v4);
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 32));
  return sub_100006A38(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_10000A0E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = sub_100002F78(&qword_1000FB230);
  v4[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10000A148, v3, 0);
}

void sub_10000A148()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;

  sub_10001DB68();
  v1 = v0[5];
  v3 = v0[3];
  v2 = v0[4];
  v4 = *(_QWORD *)(*(_QWORD *)(v1 + 312) + 16);
  v0[7] = v4;
  sub_10001DBC0();
  sub_10001DAB4();
  sub_100006710(&qword_1000FB4F8, type metadata accessor for PolicyManager);
  v6 = v5;
  v7 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F2AA0, 64);
  v7[2] = v1;
  v7[3] = v6;
  v7[4] = v1;
  v7[5] = v4;
  v7[6] = v3;
  v7[7] = v2;
  sub_10001D834(v4);
  sub_10001D7AC();
  v8 = sub_10001D7EC();
  sub_10001E774(v8, (uint64_t)&unk_1000FB5E0);
  v10 = v9;
  v0[8] = v9;
  v11 = *(_QWORD *)(v1 + 312);
  sub_10001DAB4();
  v12 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F2AC8, 48);
  v12[2] = v1;
  v12[3] = v6;
  v12[4] = v1;
  v12[5] = v10;
  sub_10001D7AC();
  sub_10001E20C();
  v13 = sub_10001E900();
  *(_QWORD *)(v11 + 16) = sub_10001EBF4(v13, (uint64_t)&unk_1000FB5F0);
  sub_10001E098();
  sub_10001D930();
  sub_10001DE74();
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v14 + 24) = v15;
    v17 = (_QWORD *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    v0[9] = v17;
    sub_100002F78(&qword_1000FB5F8);
    *v17 = v0;
    v17[1] = sub_10000A2B0;
    sub_10001E91C();
    sub_10001DAAC();
  }
}

uint64_t sub_10000A2B0()
{
  sub_10001D9A0();
  return sub_10001D6D0();
}

void sub_10000A2F0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t (*v3)(void);

  sub_10001DBFC();
  if (v2)
  {
    __break(1u);
  }
  else
  {
    sub_10001D914(*(_QWORD *)(v0 + 64), v1);
    sub_10001D9C0();
    sub_10001D938();
    v3 = (uint64_t (*)(void))sub_10001E5D0();
    sub_10001D940(v3);
  }
}

void sub_10000A338()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  sub_10001DBFC();
  if (v2)
  {
    __break(1u);
  }
  else
  {
    sub_10001D914(*(_QWORD *)(v0 + 64), v1);
    sub_10001D9C0();
    sub_10001D938();
    sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_10000A384(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = sub_100002F78(&qword_1000FB230);
  v3[6] = sub_10001D7CC(v4);
  sub_10001D7B8();
  return sub_10001D674();
}

void sub_10000A3C8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;

  sub_10001DB68();
  v2 = v0[5];
  v1 = v0[6];
  v4 = v0[3];
  v3 = v0[4];
  v5 = *(_QWORD *)(*(_QWORD *)(v2 + 112) + 16);
  v0[7] = v5;
  sub_10001DBC0();
  sub_10001D718();
  sub_100006710(&qword_1000FB728, type metadata accessor for InferenceProviderAssetManager);
  v7 = v6;
  v8 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F2C08, 64);
  v8[2] = v2;
  v8[3] = v7;
  v8[4] = v2;
  v8[5] = v5;
  v8[6] = v4;
  v8[7] = v3;
  sub_10001D834(v5);
  sub_10001D7AC();
  sub_10001D7EC();
  v9 = sub_10000DC88(v1, (uint64_t)&unk_1000FB780, (uint64_t)v8);
  v0[8] = v9;
  sub_10001D718();
  v10 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F2C30, 48);
  v10[2] = v2;
  v10[3] = v7;
  v10[4] = v2;
  v10[5] = v9;
  sub_10001D7AC();
  sub_10001DAE8();
  v11 = sub_10001D7EC();
  v12 = sub_10001DAC8(v11, (uint64_t)&unk_1000FB790);
  sub_10001D920(v12);
  sub_10001D930();
  sub_10001DE74();
  if (v15)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v13 + 24) = v14;
    v16 = (_QWORD *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    v0[9] = v16;
    sub_100002F78(&qword_1000FB798);
    sub_100002F78(&qword_1000FB5F8);
    *v16 = v0;
    v16[1] = sub_10000A53C;
    sub_10001DAAC();
  }
}

uint64_t sub_10000A53C()
{
  sub_10001D9A0();
  return sub_10001D6D0();
}

void sub_10000A57C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  sub_10001DBFC();
  if (v2)
  {
    __break(1u);
  }
  else
  {
    sub_10001D914(*(_QWORD *)(v0 + 64), v1);
    sub_10001D9C0();
    v3 = *(_QWORD *)(v0 + 16);
    sub_10001D938();
    (*(void (**)(uint64_t))(v0 + 8))(v3);
  }
}

void sub_10000A5D4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  sub_10001DBFC();
  if (v2)
  {
    __break(1u);
  }
  else
  {
    sub_10001D914(*(_QWORD *)(v0 + 64), v1);
    sub_10001D9C0();
    sub_10001D938();
    (*(void (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10000A624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  sub_10001E310(a1, a2, a3);
  v4 = sub_100002F78(&qword_1000FB230);
  *(_QWORD *)(v3 + 48) = sub_10001D7CC(v4);
  sub_10001D7B8();
  return sub_10001D674();
}

void sub_10000A664()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_10001E6F0();
  v1 = v0[5];
  v3 = v0[3];
  v2 = v0[4];
  v4 = OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_workQueueState;
  v0[7] = OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_workQueueState;
  v5 = *(_QWORD *)(*(_QWORD *)(v1 + v4) + 16);
  v0[8] = v5;
  sub_10001DBC0();
  sub_10001DAB4();
  sub_100006710(&qword_1000FB828, type metadata accessor for InferenceProviderExtensionConnection);
  v7 = v6;
  v8 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F2CA8, 64);
  v8[2] = v1;
  v8[3] = v7;
  v8[4] = v1;
  v8[5] = v5;
  v8[6] = v3;
  v8[7] = v2;
  sub_10001D834(v5);
  sub_10001D7AC();
  v9 = sub_10001D7EC();
  sub_10001E774(v9, (uint64_t)&unk_1000FB838);
  v11 = v10;
  v0[9] = v10;
  v12 = *(_QWORD *)(v1 + v4);
  sub_10001DAB4();
  v13 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F2CD0, 48);
  v13[2] = v1;
  v13[3] = v7;
  v13[4] = v1;
  v13[5] = v11;
  sub_10001D7AC();
  sub_10001E20C();
  v14 = sub_10001E900();
  *(_QWORD *)(v12 + 16) = sub_10001EBF4(v14, (uint64_t)&unk_1000FB848);
  sub_10001E098();
  sub_10001D930();
  sub_10001DE74();
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v15 + 24) = v16;
    v18 = (_QWORD *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    v0[10] = v18;
    sub_100002F78(&qword_1000FB5F8);
    *v18 = v0;
    v18[1] = sub_10000A7E4;
    sub_10001E91C();
    Task.value.getter(v19, v20, v21, v22, v23);
  }
}

uint64_t sub_10000A7E4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 88) = v1;
  swift_task_dealloc(v3);
  return sub_10001D6D0();
}

void sub_10000A834()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t (*v3)(void);

  sub_10001DBFC();
  if (v2)
  {
    __break(1u);
  }
  else
  {
    sub_10001D914(*(_QWORD *)(v0 + 72), v1);
    sub_10001D9C0();
    sub_10001D938();
    v3 = (uint64_t (*)(void))sub_10001E5D0();
    sub_10001D940(v3);
  }
}

void sub_10000A880()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  sub_10001DBFC();
  if (v2)
  {
    __break(1u);
  }
  else
  {
    sub_10001D914(*(_QWORD *)(v0 + 72), v1);
    sub_10001D9C0();
    sub_10001D938();
    sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_10000A8D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a2;
  v3[4] = a3;
  v5 = sub_100002F78(&qword_1000FB250);
  v3[5] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[6] = v6;
  v3[7] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10000A938, a3, 0);
}

uint64_t sub_10000A938()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __n128 *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  void (*v24)(uint64_t);
  uint64_t v25;

  if (qword_1000FB0D0 != -1)
    swift_once(&qword_1000FB0D0, sub_100006C5C);
  v1 = v0[6];
  v2 = sub_10001DD64();
  sub_100002FF8(v2, (uint64_t)qword_1000FB328);
  v3 = *(void (**)(uint64_t))(v1 + 16);
  v4 = sub_10001EBDC();
  v3(v4);
  v5 = sub_10001E694();
  v6 = static os_log_type_t.default.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = v0[5];
  if (v7)
  {
    v24 = v3;
    v9 = (uint8_t *)sub_10001D8D4(12);
    v23 = sub_10001D8D4(32);
    v25 = v23;
    *(_DWORD *)v9 = 136315138;
    sub_100006744(&qword_1000FB5B0, &qword_1000FB250);
    v11 = dispatch thunk of CustomStringConvertible.description.getter(v8, v10);
    v13 = v12;
    sub_1000102C0(v11, v12, &v25);
    v0[2] = v14;
    sub_10001EB6C((uint64_t)(v0 + 2), (uint64_t)(v0 + 3), (uint64_t)(v9 + 4));
    v15 = v13;
    v3 = v24;
    swift_bridgeObjectRelease(v15);
    sub_10001E79C();
    sub_10001E18C((void *)&_mh_execute_header, v5, v6, "Releasing assertion: %s", v9);
    sub_10001DBB8(v23);
    sub_10001D790(v23);
    sub_10001D790((uint64_t)v9);
  }
  else
  {
    sub_10001E79C();
  }

  v16 = sub_100002F78(&qword_1000FB580);
  v17 = (__n128 *)sub_10001DEF4(v16);
  v18 = sub_10001E844(v17, (__n128)xmmword_1000CB140);
  v3((uint64_t)v18);
  sub_100003638((uint64_t)v17);
  v0[8] = v19;
  v20 = (_QWORD *)swift_task_alloc(dword_1000FB544);
  v0[9] = v20;
  *v20 = v0;
  v20[1] = sub_10000AB50;
  v21 = sub_10001E2B4();
  return sub_10000AB84(v21);
}

uint64_t sub_10000AB50()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_10001EA58();
  sub_10001D680(v1);
  sub_10001E034();
  sub_10001D938();
  return sub_100006A5C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10000AB84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return sub_10001D948((uint64_t)sub_10000AB98, v1);
}

uint64_t sub_10000AB98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  _QWORD *v5;
  uint64_t v6;

  sub_10001DD0C();
  v1 = *(_QWORD *)(v0 + 16);
  sub_10001E338();
  v2 = sub_10001D964();
  *(_QWORD *)(v0 + 32) = sub_100019A04(v2, v1);
  sub_10001D964();
  v3 = sub_10001E910();
  sub_10001D8B4();
  if ((v3 & 1) != 0)
  {
    swift_release(*(_QWORD *)(v0 + 32));
    return sub_10001DE38(*(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    v5 = (_QWORD *)swift_task_alloc(dword_1000FB554);
    *(_QWORD *)(v0 + 40) = v5;
    sub_10001EAAC(v5, (uint64_t)sub_10000AC30);
    sub_10001DCCC();
    return sub_10000CB30(v6);
  }
}

uint64_t sub_10000AC30()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v3 = *v0;
  v1 = *v0;
  sub_10001D788(*(_QWORD *)(v3 + 40), &v3);
  sub_10001E390();
  return sub_100006A38(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10000AC6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return sub_10001D948((uint64_t)sub_10000AC80, v1);
}

uint64_t sub_10000AC80()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v1 = v0[2];
  v2 = v0[3];
  v3 = sub_100006A80((uint64_t)&unk_1000F2D48, 32);
  v0[4] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = unk_1000FB51C;
  v7 = (uint64_t (*)(void))((char *)&dword_1000FB518 + dword_1000FB518);
  sub_10001D964();
  sub_10001E194();
  v5 = (_QWORD *)swift_task_alloc(v4);
  v0[5] = v5;
  *v5 = v0;
  v5[1] = sub_10000AD20;
  return v7();
}

uint64_t sub_10000AD20()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 40));
  sub_10001D9C0();
  sub_10001E10C();
  return sub_10001D6D0();
}

uint64_t sub_10000AD60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = a2;
  *(_QWORD *)(v3 + 24) = a3;
  return swift_task_switch(sub_10000AD78, a3, 0);
}

uint64_t sub_10000AD78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 24);
  sub_10001E194();
  v2 = sub_10001D964();
  v3 = sub_100019BD0(v2, v1);
  *(_QWORD *)(v0 + 32) = v3;
  if (*(_QWORD *)(v3 + 16))
  {
    v4 = (_QWORD *)swift_task_alloc(dword_1000FB614);
    *(_QWORD *)(v0 + 40) = v4;
    *v4 = v0;
    v4[1] = sub_10000AC30;
    v5 = sub_10001E2B4();
    return sub_100009FF4(v5);
  }
  else
  {
    sub_10001D930();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

void sub_10000AE0C()
{
  uint64_t v0;

  v0 = sub_10001D964();
  sub_10001B27C(v0);
  sub_10001D8B4();
  sub_100006C14();
}

uint64_t sub_10000AE38(int a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = v1;
  *(_DWORD *)(v2 + 40) = a1;
  return sub_10001D948((uint64_t)sub_10000AE50, v1);
}

uint64_t sub_10000AE50()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_DWORD *)(v0 + 40);
  v3 = sub_100006A80((uint64_t)&unk_1000F29D8, 28);
  *(_QWORD *)(v0 + 24) = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_DWORD *)(v3 + 24) = v2;
  v4 = unk_1000FB51C;
  v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1000FB518 + dword_1000FB518);
  sub_10001E194();
  v5 = (_QWORD *)swift_task_alloc(v4);
  *(_QWORD *)(v0 + 32) = v5;
  *v5 = v0;
  v5[1] = sub_10000AEF0;
  return v7((uint64_t)v7, (uint64_t)&unk_1000FB510, v3);
}

uint64_t sub_10000AEF0()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 32));
  sub_10001D9C0();
  sub_10001E10C();
  return sub_10001D6D0();
}

uint64_t sub_10000AF2C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)(v3 + 108) = a3;
  *(_QWORD *)(v3 + 24) = a2;
  v5 = type metadata accessor for Assertion.DaemonRep(0);
  *(_QWORD *)(v3 + 32) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 40) = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 48) = swift_task_alloc(v7);
  *(_QWORD *)(v3 + 56) = swift_task_alloc(v7);
  v8 = sub_100002F78(&qword_1000FB250);
  *(_QWORD *)(v3 + 64) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v3 + 72) = v9;
  *(_QWORD *)(v3 + 80) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10000AFD0, a2, 0);
}

uint64_t sub_10000AFD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  int v36;
  int v37;
  char v38;
  char v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  sub_10001E6D4();
  a25 = v27;
  a26 = v28;
  a24 = v26;
  v29 = v26;
  v30 = *(_DWORD *)(v26 + 108);
  v72 = v26 + 108;
  v73 = v26 + 24;
  v31 = swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v26 + 24) + 320));
  v32 = sub_100019D9C(v31, v30);
  v33 = *(_QWORD *)(v32 + 16);
  if (v33)
  {
    v34 = *(_QWORD *)(v29 + 40);
    a14 = (char *)_swiftEmptyArrayStorage;
    sub_10001173C();
    v35 = sub_10001C858(v32);
    v37 = v36;
    v39 = v38 & 1;
    v74 = v32;
    v75 = v32 + 56;
    while ((v35 & 0x8000000000000000) == 0)
    {
      sub_10001DC08();
      if (v35 >= v40)
        break;
      sub_10001EB40();
      if (((*(_QWORD *)(v75 + v41) >> v35) & 1) == 0)
        goto LABEL_22;
      if (*(_DWORD *)(v32 + 36) != v37)
        goto LABEL_23;
      v42 = *(_QWORD *)(v29 + 48);
      v43 = *(_QWORD *)(v29 + 56);
      sub_10001EA84(v43, *(_QWORD *)(v32 + 48) + *(_QWORD *)(v34 + 72) * v35, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 16));
      v44 = sub_10001EA84(v42, v43, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 32));
      Assertion.DaemonRep.id.getter(v44);
      sub_10001EBC8(*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8));
      v45 = a14;
      if ((swift_isUniquelyReferenced_nonNull_native(a14) & 1) == 0)
      {
        sub_10001173C();
        v45 = a14;
      }
      v46 = *((_QWORD *)v45 + 2);
      if (v46 >= *((_QWORD *)v45 + 3) >> 1)
      {
        sub_10001173C();
        v45 = a14;
      }
      *((_QWORD *)v45 + 2) = v46 + 1;
      sub_10001EA78();
      (*(void (**)(char *))(v48 + 32))(&v45[v47 + *(_QWORD *)(v48 + 72) * v46]);
      v32 = v74;
      v49 = sub_10001C700(v35, v37, v39 & 1, v74);
      v35 = v49;
      v37 = v50;
      v39 = v51 & 1;
      if (!--v33)
      {
        sub_10001C7E4(v49, v50, v51 & 1);
        sub_10001DEEC();
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    swift_once(&qword_1000FB0D0, sub_100006C5C);
    goto LABEL_16;
  }
  sub_10001DEEC();
  v45 = (char *)_swiftEmptyArrayStorage;
LABEL_14:
  v34 = sub_10000B4A8((uint64_t)v45);
  *(_QWORD *)(v29 + 88) = v34;
  if (!*(_QWORD *)(v34 + 16))
  {
    sub_10001EADC();
    swift_task_dealloc(*(_QWORD *)(v29 + 80));
    sub_10001E330();
    sub_10001D938();
    return sub_10001DBC8(*(uint64_t (**)(void))(v29 + 8));
  }
  if (qword_1000FB0D0 != -1)
    goto LABEL_24;
LABEL_16:
  v52 = sub_10001DD64();
  v53 = sub_100002FF8(v52, (uint64_t)qword_1000FB328);
  v54 = sub_10001EBA8(v34);
  Logger.logObject.getter(v54);
  v55 = sub_10001E9D0();
  if (sub_10001E264(v53))
  {
    v56 = v29;
    v57 = *(_QWORD *)(v29 + 64);
    v58 = *(_DWORD *)(v56 + 108);
    v59 = sub_10001D8D4(18);
    v60 = sub_10001D8D4(32);
    a14 = (char *)v60;
    *(_DWORD *)v59 = 67109378;
    *(_DWORD *)(v56 + 104) = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v72 - 4, v72, v59 + 4);
    *(_WORD *)(v59 + 8) = 2080;
    sub_100006744(&qword_1000FB260, &qword_1000FB250);
    v62 = v61;
    v63 = sub_10001E140();
    v64 = Set.description.getter(v63, v57, v62);
    v66 = v65;
    sub_10001EADC();
    v67 = v64;
    v29 = v56;
    sub_1000102C0(v67, v66, (uint64_t *)&a14);
    *(_QWORD *)(v56 + 16) = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v72 - 92, v73, v59 + 10);
    sub_10001E8A8();
    sub_10001EAD0();
    _os_log_impl((void *)&_mh_execute_header, v53, v55, "Releasing all assertions from pid %d: %s", (uint8_t *)v59, 0x12u);
    sub_10001DBB8(v60);
    sub_10001D790(v60);
    sub_10001D790(v59);
  }
  else
  {
    sub_10001EAD0();
  }

  v70 = (_QWORD *)swift_task_alloc(dword_1000FB544);
  *(_QWORD *)(v29 + 96) = v70;
  *v70 = v29;
  v70[1] = sub_10000B3D8;
  sub_10001E3E8();
  return sub_10000AB84(v71);
}

uint64_t sub_10000B3D8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;

  sub_10001E0D8();
  v2 = *v1;
  sub_10001D788(*(_QWORD *)(v0 + 96), v3);
  sub_10001E034();
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  sub_10001E330();
  sub_10001D938();
  return sub_100006A5C(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_10000B420()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 28, 7);
}

uint64_t sub_10000B444(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_DWORD *)(v1 + 24);
  v6 = swift_task_alloc(dword_1000FB50C);
  v7 = (_QWORD *)sub_100006AF4(v6);
  *v7 = v2;
  v7[1] = sub_10001D668;
  return sub_10000AF2C(a1, v4, v5);
}

uint64_t sub_10000B4A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;

  v2 = sub_100002F78(&qword_1000FB250);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v20 - v7;
  v9 = sub_100002F78(&qword_1000FB578);
  __chkstk_darwin(v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 16);
  sub_100006744(&qword_1000FB260, &qword_1000FB250);
  v14 = Set.init(minimumCapacity:)(v12, v2, v13);
  v20 = a1;
  v21 = v14;
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    v16 = v20 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v17 = *(_QWORD *)(v3 + 72);
    v18 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    while (1)
    {
      v18(v11, v16, v2);
      sub_100005630((uint64_t)v11, 0, 1, v2);
      if (sub_100005700((uint64_t)v11, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v11, v2);
      sub_1000137E0();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v16 += v17;
      if (!--v15)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    sub_100005630((uint64_t)v11, 1, 1, v2);
  }
  swift_bridgeObjectRelease(v20);
  return v21;
}

#error "10000B6EC: call analysis failed (funcsize=37)"

void sub_10000B724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];

  sub_10001E9F8();
  v1 = sub_10001E9C4();
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_10001E2DC();
  __chkstk_darwin(v3);
  v5 = (char *)v13 - v4;
  v6 = *(_QWORD *)(v0 + 16);
  sub_100006710(&qword_1000FB648, v7);
  v13[1] = Set.init(minimumCapacity:)(v6, v1, v8);
  v9 = *(_QWORD *)(v0 + 16);
  if (v9)
  {
    sub_10001EA78();
    v11 = v0 + v10;
    v12 = *(_QWORD *)(v2 + 72);
    do
    {
      sub_10001E388();
      sub_10001E82C();
      sub_10001E1E8((uint64_t)v5);
      v11 += v12;
      --v9;
    }
    while (v9);
  }
  sub_10001D8B4();
  sub_10001D950();
}

void sub_10000B818()
{
  sub_10000B980();
}

void sub_10000B83C(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    sub_10001D964();
    sub_100006B70();
    sub_10001D8B4();
  }
  sub_10001E1D8();
  sub_100006710(&qword_1000FB768, type metadata accessor for InferenceProviderAsset);
  v8[1] = sub_10001DF10(v3);
  if (!v2)
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_5;
LABEL_16:
    sub_10001D8B4();
LABEL_17:
    sub_10001E31C();
    return;
  }
  if (a1 < 0)
    v7 = a1;
  else
    v7 = a1 & 0xFFFFFFFFFFFFFF8;
  sub_10001D964();
  v4 = _CocoaArrayWrapper.endIndex.getter(v7);
  sub_10001D8B4();
  if (!v4)
    goto LABEL_16;
LABEL_5:
  if (v4 >= 1)
  {
    for (i = 0; i != v4; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v6 = sub_10001E838();
      }
      else
      {
        v6 = *(_QWORD *)(a1 + 8 * i + 32);
        sub_10001E900();
      }
      sub_100012818(v8, v6);
      swift_release(v8[0]);
    }
    sub_10001D8B4();
    goto LABEL_17;
  }
  __break(1u);
}

void sub_10000B95C()
{
  sub_10000B980();
}

void sub_10000B980()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  void (*v4)(uint64_t);
  unint64_t *v5;
  unint64_t *v6;
  uint64_t (*v7)(uint64_t);
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  _QWORD v23[2];

  sub_10001D810();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = sub_10001E9B8(v9, v7);
  sub_10001E518();
  __chkstk_darwin(v11);
  sub_10001E2C0();
  __chkstk_darwin(v12);
  v14 = (char *)v23 - v13;
  v15 = *(_QWORD *)(v0 + 16);
  sub_100006710(v6, v8);
  v23[1] = Set.init(minimumCapacity:)(v15, v10, v16);
  v17 = *(_QWORD *)(v0 + 16);
  if (v17)
  {
    sub_10001EA78();
    v23[0] = v0;
    v19 = v0 + v18;
    v20 = *(_QWORD *)(v2 + 72);
    v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
    do
    {
      v21(v1, v19, v10);
      v22 = sub_10001E4C8();
      v4(v22);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v14, v10);
      v19 += v20;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease(v23[0]);
  }
  else
  {
    sub_10001D8B4();
  }
  sub_100006A68();
}

void sub_10000BA84()
{
  sub_10000B980();
}

void sub_10000BAA8()
{
  sub_10000B980();
}

void sub_10000BACC()
{
  sub_10000B980();
}

void sub_10000BAF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  _QWORD v17[2];

  sub_10001D810();
  v3 = v2;
  v4 = sub_100002F78(&qword_1000FB2A0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10001E684();
  sub_10001E4DC();
  __chkstk_darwin(v6);
  v8 = (char *)v17 - v7;
  sub_100002F78(&qword_1000FB920);
  sub_10001DD00();
  __chkstk_darwin(v9);
  sub_10001E66C();
  sub_100006744(&qword_1000FB2A8, &qword_1000FB2A0);
  v11 = sub_10001DF10(v10);
  v17[0] = v3;
  v17[1] = v11;
  v12 = *(_QWORD *)(v3 + 16);
  if (v12)
  {
    sub_10001EA78();
    v14 = v17[0] + v13;
    v15 = *(_QWORD *)(v5 + 72);
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    while (1)
    {
      v16(v1, v14, v4);
      sub_10001EA2C(v1, 0);
      if (sub_10001EB7C(v1) == 1)
        break;
      sub_10001DE08(v0, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32));
      sub_1000137E0();
      sub_10001EB58((uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
      v14 += v15;
      if (!--v12)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    sub_10001EA2C(v1, 1);
  }
  swift_bridgeObjectRelease(v17[0]);
  sub_100006A68();
}

void sub_10000BC68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void (*v28)(uint64_t, uint64_t);
  void (*v29)(_BYTE *, _QWORD);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  Swift::UInt v35;
  char v36;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  Swift::UInt v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[16];
  Swift::UInt v60;
  _BYTE v61[16];
  uint64_t v62;
  _BYTE v63[16];
  Swift::UInt v64;
  _BYTE v65[32];

  sub_10001D810();
  v1 = sub_100002F78(&qword_1000FB880);
  v51 = *(_QWORD *)(v1 - 8);
  sub_10001DD00();
  __chkstk_darwin(v2);
  sub_10001E168();
  v50 = v4 - v3;
  v53 = sub_100002F78(&qword_1000FB888);
  v5 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  sub_10001EB18();
  v56 = v6;
  sub_10001E148();
  __chkstk_darwin(v7);
  v55 = (char *)&v48 - v8;
  v9 = sub_100002F78(&qword_1000FB890);
  sub_10001DD00();
  __chkstk_darwin(v10);
  sub_10001E63C();
  sub_100006744(&qword_1000FB898, &qword_1000FB880);
  v12 = v11;
  v13 = dispatch thunk of Sequence.underestimatedCount.getter(v1, v11);
  v14 = sub_10001D570();
  v15 = Set.init(minimumCapacity:)(v13, &type metadata for InferenceProviderExtensionConnection.TerminationHandlerWrapper, v14);
  v54 = v1;
  dispatch thunk of Sequence.makeIterator()(v1, v12);
  v16 = v0;
  v17 = v0 + *(int *)(v9 + 36);
  v57 = v5;
  v52 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v48 = v17;
  v49 = v16;
  v18 = v53;
  v19 = v54;
  while (1)
  {
    v20 = v55;
    v52(v55, v17, v18);
    sub_100006744(&qword_1000FB8A8, &qword_1000FB880);
    v22 = v21;
    v23 = v17;
    v24 = v56;
    v25 = sub_10001E4C8();
    dispatch thunk of Collection.endIndex.getter(v25);
    sub_100006744(&qword_1000FB8B0, &qword_1000FB888);
    v27 = dispatch thunk of static Equatable.== infix(_:_:)(v20, v24, v18, v26);
    v28 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
    v28(v24, v18);
    v28((uint64_t)v20, v18);
    if ((v27 & 1) != 0)
    {
      sub_10001D5AC(v16, &qword_1000FB890);
      sub_100006A68();
      return;
    }
    v29 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read(v61, v23, v19, v22);
    sub_10001D500(v30, (uint64_t)v65);
    v29(v61, 0);
    v31 = v51;
    v32 = v50;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v50, v16, v19);
    dispatch thunk of Collection.formIndex(after:)(v23, v19, v22);
    sub_10001E808(v32, *(uint64_t (**)(uint64_t, uint64_t))(v31 + 8));
    sub_10001D4C4((uint64_t)v65, (uint64_t)v63);
    sub_10001E870();
    Hasher._combine(_:)(v64);
    Hasher._finalize()();
    sub_10001DDE0();
    if ((v33 & 1) != 0)
    {
      sub_10001D964();
      while (1)
      {
        sub_10001E404();
        v34 = v62;
        v35 = v64;
        sub_10001D53C((uint64_t)v61);
        if (v34 == v35)
          break;
        sub_10001E1F0();
        if ((v36 & 1) == 0)
        {
          sub_10001D8B4();
          v17 = v48;
          goto LABEL_9;
        }
      }
      sub_10001D8B4();
      v16 = v49;
      v17 = v48;
      goto LABEL_22;
    }
    v17 = v23;
LABEL_9:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v15);
    sub_10001D500((uint64_t)v63, (uint64_t)v59);
    v58 = v15;
    v38 = *(_QWORD *)(v15 + 16);
    if (*(_QWORD *)(v15 + 24) <= v38)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1000180C4();
      v15 = v58;
    }
LABEL_20:
    sub_10001E818(v15 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8));
    sub_10001D4C4((uint64_t)v59, v44 + 24 * v22);
    v45 = *(_QWORD *)(v15 + 16);
    v46 = __OFADD__(v45, 1);
    v47 = v45 + 1;
    v16 = v49;
    if (v46)
    {
      __break(1u);
      goto LABEL_25;
    }
    *(_QWORD *)(v15 + 16) = v47;
    swift_bridgeObjectRelease(0x8000000000000000);
LABEL_22:
    sub_10001D53C((uint64_t)v63);
  }
  v39 = v38 + 1;
  if (isUniquelyReferenced_nonNull_native)
    sub_1000152D4(v39);
  else
    sub_100019508(v39);
  v15 = v58;
  sub_10001E870();
  Hasher._combine(_:)(v60);
  Hasher._finalize()();
  sub_10001DDE0();
  if ((v40 & 1) == 0)
    goto LABEL_20;
  while (1)
  {
    sub_10001E404();
    v41 = v62;
    v42 = v60;
    sub_10001D53C((uint64_t)v61);
    if (v41 == v42)
      break;
    sub_10001E1F0();
    if ((v43 & 1) == 0)
    {
      v17 = v48;
      goto LABEL_20;
    }
  }
LABEL_25:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
  __break(1u);
}

void sub_10000C0C0(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  id v6;
  uint64_t v7;
  id v8[2];

  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    sub_10001D964();
    sub_100006B70();
    sub_10001D8B4();
  }
  sub_10001CED8();
  sub_100006710((unint64_t *)&qword_1000FB710, (uint64_t (*)(uint64_t))sub_10001CED8);
  v8[1] = (id)sub_10001DF10(v3);
  if (!v2)
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_5;
LABEL_16:
    sub_10001D8B4();
LABEL_17:
    sub_10001E31C();
    return;
  }
  if (a1 < 0)
    v7 = a1;
  else
    v7 = a1 & 0xFFFFFFFFFFFFFF8;
  sub_10001D964();
  v4 = _CocoaArrayWrapper.endIndex.getter(v7);
  sub_10001D8B4();
  if (!v4)
    goto LABEL_16;
LABEL_5:
  if (v4 >= 1)
  {
    for (i = 0; i != v4; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v6 = (id)sub_10001E838();
      else
        v6 = *(id *)(a1 + 8 * i + 32);
      sub_100013A24((Swift::Int *)v8, v6);

    }
    sub_10001D8B4();
    goto LABEL_17;
  }
  __break(1u);
}

void sub_10000C1E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v58)(uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  char *v60;
  void (*v61)(uint64_t, uint64_t);
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  sub_10001D810();
  v68 = v1;
  v2 = sub_10001E368();
  v3 = *(_QWORD *)(v2 - 8);
  v64 = v2;
  v65 = v3;
  sub_10001DD00();
  __chkstk_darwin(v4);
  sub_10001EB18();
  v67 = v5;
  sub_10001E148();
  __chkstk_darwin(v6);
  v62 = (char *)&v55 - v7;
  sub_10001E148();
  __chkstk_darwin(v8);
  v60 = (char *)&v55 - v9;
  sub_10001E148();
  __chkstk_darwin(v10);
  v63 = (uint64_t)&v55 - v11;
  v12 = sub_10001EC20();
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v66 = (uint64_t)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E148();
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v55 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v55 - v20;
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v55 - v23;
  v59 = (uint64_t)&v55 - v23;
  v25 = Policy.memoryBudget.getter(v22);
  v26 = Policy.memoryBudget.getter(v25);
  v55 = v0;
  v27 = ((uint64_t (*)(void))Policy.assetPolicy.getter)();
  Policy.assetPolicy.getter(v27);
  sub_100006710(&qword_1000FB568, (uint64_t (*)(uint64_t))&type metadata accessor for AssetPolicy);
  v29 = dispatch thunk of static Comparable.>= infix(_:_:)(v18, v21, v12, v28);
  v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
  v58 = v30;
  if ((v29 & 1) != 0)
    v31 = (uint64_t)v18;
  else
    v31 = (uint64_t)v21;
  sub_10001E554((uint64_t)v24, v31, v30);
  v61 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  sub_10001EAC0((uint64_t)v18);
  v32 = sub_10001EAC0((uint64_t)v21);
  v33 = (uint64_t)v60;
  v34 = Policy.cancelPriority.getter(v32);
  v35 = (uint64_t)v62;
  Policy.cancelPriority.getter(v34);
  sub_100006710(&qword_1000FB570, (uint64_t (*)(uint64_t))&type metadata accessor for RequestPriority);
  v36 = v64;
  v38 = dispatch thunk of static Comparable.>= infix(_:_:)(v35, v33, v64, v37);
  v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v65 + 16);
  v57 = v39;
  if ((v38 & 1) != 0)
    v40 = v35;
  else
    v40 = v33;
  v41 = v63;
  sub_10001E0E8(v63, v40, v39);
  if (v26 >= v25)
    v42 = v25;
  else
    v42 = v26;
  if (v26 == -1)
    v42 = v25;
  if (v25 == -1)
    v42 = v26;
  v56 = v42;
  sub_10001EA38(v35);
  v43 = sub_10001EA38(v33);
  v44 = Policy.inactiveAssetTimeout.getter(v43);
  v45 = Policy.inactiveAssetTimeout.getter(v44);
  if (v45 >= v44)
    v46 = v44;
  else
    v46 = v45;
  if (v45 == -1)
    v46 = v44;
  if (v44 == -1)
    v47 = v45;
  else
    v47 = v46;
  v48 = Policy.assetTransitionDelay.getter();
  v49 = Policy.assetTransitionDelay.getter();
  if (v49 >= v48)
    v50 = v48;
  else
    v50 = v49;
  if (v49 == -1)
    v50 = v48;
  if (v48 == -1)
    v51 = v49;
  else
    v51 = v50;
  v52 = v66;
  v53 = v59;
  sub_10001E554(v66, v59, v58);
  v54 = v67;
  v57(v67, v41, v36);
  Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)(v52, v56, v54, v47, v51);
  sub_10001EA38(v41);
  v61(v53, v12);
  sub_100006A68();
}

uint64_t sub_10000C514(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t i;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = type metadata accessor for Assertion.DaemonRep(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v26 - v10;
  result = __chkstk_darwin(v9);
  v14 = (char *)&v26 - v13;
  v15 = 0;
  v16 = *(_QWORD *)(a1 + 56);
  v26 = a1 + 56;
  v27 = a2;
  v17 = 1 << *(_BYTE *)(a1 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v16;
  v20 = (unint64_t)(v17 + 63) >> 6;
  if ((v18 & v16) == 0)
    goto LABEL_5;
LABEL_4:
  v21 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  for (i = v21 | (v15 << 6); ; i = __clz(__rbit64(v24)) + (v15 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v14, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v5 + 72) * i, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v14, v4);
    sub_100011F0C((uint64_t)v11, v8);
    result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v11, v4);
    if (v19)
      goto LABEL_4;
LABEL_5:
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v23 >= v20)
      goto LABEL_23;
    v24 = *(_QWORD *)(v26 + 8 * v23);
    ++v15;
    if (!v24)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v20)
        goto LABEL_23;
      v24 = *(_QWORD *)(v26 + 8 * v15);
      if (!v24)
      {
        v15 = v23 + 2;
        if (v23 + 2 >= v20)
          goto LABEL_23;
        v24 = *(_QWORD *)(v26 + 8 * v15);
        if (!v24)
        {
          v15 = v23 + 3;
          if (v23 + 3 >= v20)
            goto LABEL_23;
          v24 = *(_QWORD *)(v26 + 8 * v15);
          if (!v24)
            break;
        }
      }
    }
LABEL_20:
    v19 = (v24 - 1) & v24;
  }
  v25 = v23 + 4;
  if (v25 >= v20)
  {
LABEL_23:
    swift_release(a1);
    return v27;
  }
  v24 = *(_QWORD *)(v26 + 8 * v25);
  if (v24)
  {
    v15 = v25;
    goto LABEL_20;
  }
  while (1)
  {
    v15 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v15 >= v20)
      goto LABEL_23;
    v24 = *(_QWORD *)(v26 + 8 * v15);
    ++v25;
    if (v24)
      goto LABEL_20;
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_10000C748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v61;

  sub_10001DA08();
  a29 = v31;
  a30 = v33;
  v34 = v32;
  a13 = v35;
  if ((v32 & 0xC000000000000001) != 0)
  {
    if (v32 >= 0)
      v32 &= 0xFFFFFFFFFFFFFF8uLL;
    __CocoaSet.makeIterator()(v32);
    sub_10001E1D8();
    sub_100006710(&qword_1000FB768, type metadata accessor for InferenceProviderAsset);
    v36 = sub_10001EBDC();
    v39 = Set.Iterator.init(_cocoa:)(v36, v37, v38);
    v34 = a14;
    v61 = a15;
    v40 = a16;
    v41 = a17;
    v42 = a18;
  }
  else
  {
    v41 = 0;
    sub_10001DED8();
    v61 = v34 + 56;
    sub_10001E7F4();
    v42 = v43 & v44;
  }
  v45 = (unint64_t)(v40 + 64) >> 6;
  if (v34 < 0)
    goto LABEL_9;
  while (1)
  {
    if (v42)
    {
      v30 = (v42 - 1) & v42;
      v46 = __clz(__rbit64(v42)) | (v41 << 6);
      v47 = v41;
      goto LABEL_28;
    }
    v52 = v41 + 1;
    if (__OFADD__(v41, 1))
      break;
    if (v52 >= v45)
      goto LABEL_31;
    v47 = v41 + 1;
    if (!*(_QWORD *)(v61 + 8 * v52))
    {
      v47 = v41 + 2;
      if (v41 + 2 >= v45)
        goto LABEL_31;
      sub_10001E340();
      if (!v54)
      {
        v47 = v53 + 2;
        if (v53 + 2 >= v45)
          goto LABEL_31;
        sub_10001E340();
        if (!v56)
        {
          v47 = v55 + 3;
          if (v55 + 3 >= v45)
            goto LABEL_31;
          sub_10001E340();
          if (!v58)
          {
            v47 = v57 + 4;
            if (v57 + 4 >= v45)
              goto LABEL_31;
            if (!*(_QWORD *)(v61 + 8 * v47))
            {
              v59 = v41 + 6;
              while (v59 < v45)
              {
                if (*(_QWORD *)(v61 + 8 * v59++))
                {
                  v47 = v59 - 1;
                  goto LABEL_27;
                }
              }
LABEL_31:
              sub_10001CD34(v34);
              sub_10001DFCC();
              return;
            }
          }
        }
      }
    }
LABEL_27:
    sub_10001DEB8();
LABEL_28:
    v51 = *(_QWORD *)(*(_QWORD *)(v34 + 48) + 8 * v46);
    sub_10001E69C();
    if (!v51)
      goto LABEL_31;
    while (1)
    {
      sub_100012818(&a12, v51);
      swift_release(a12);
      v41 = v47;
      v42 = v30;
      if ((v34 & 0x8000000000000000) == 0)
        break;
LABEL_9:
      v48 = __CocoaSet.Iterator.next()(v39);
      if (v48)
      {
        v49 = v48;
        a11 = v48;
        v50 = sub_10001E1D8();
        swift_unknownObjectRetain(v49);
        swift_dynamicCast(&a12, &a11, (char *)&type metadata for Swift.AnyObject + 8, v50, 7);
        v51 = a12;
        swift_unknownObjectRelease(v49);
        v47 = v41;
        v30 = v42;
        if (v51)
          continue;
      }
      goto LABEL_31;
    }
  }
  __break(1u);
}

void sub_10000C97C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];

  sub_10001D810();
  v4 = v3;
  sub_10001E9C4();
  sub_10001E6B4();
  __chkstk_darwin(v5);
  sub_10001E2DC();
  __chkstk_darwin(v6);
  sub_10001E4DC();
  __chkstk_darwin(v7);
  v9 = (char *)v28 - v8;
  v10 = 0;
  v11 = *(_QWORD *)(v0 + 56);
  v28[0] = v0 + 56;
  v28[1] = v4;
  v12 = 1 << *(_BYTE *)(v0 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v15 = (unint64_t)(v12 + 63) >> 6;
  if ((v13 & v11) == 0)
    goto LABEL_5;
LABEL_4:
  for (v14 &= v14 - 1; ; v14 = v27 & v26)
  {
    sub_10001E388();
    sub_10001CB5C((uint64_t)v9, v1);
    sub_10001E82C();
    sub_10001E1E8(v2);
    if (v14)
      goto LABEL_4;
LABEL_5:
    v16 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v16 >= v15)
      goto LABEL_23;
    ++v10;
    if (!*(_QWORD *)(v28[0] + 8 * v16))
    {
      v10 = v16 + 1;
      if (v16 + 1 >= v15)
        goto LABEL_23;
      sub_10001E928();
      if (!v18)
      {
        v10 = v17 + 2;
        if (v17 + 2 >= v15)
          goto LABEL_23;
        sub_10001E928();
        if (!v20)
        {
          v10 = v19 + 3;
          if (v19 + 3 >= v15)
            goto LABEL_23;
          sub_10001E928();
          if (!v22)
            break;
        }
      }
    }
LABEL_20:
    sub_10001E70C();
  }
  v23 = v21 + 4;
  if (v23 >= v15)
  {
LABEL_23:
    sub_10001D930();
    sub_100006A68();
    return;
  }
  if (*(_QWORD *)(v28[0] + 8 * v23))
  {
    v10 = v23;
    goto LABEL_20;
  }
  while (1)
  {
    v10 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v10 >= v15)
      goto LABEL_23;
    sub_10001E928();
    v23 = v24 + 1;
    if (v25)
      goto LABEL_20;
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_10000CB30(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2[7] = a1;
  v2[8] = v1;
  v3 = sub_10001E368();
  v2[9] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[10] = v4;
  v2[11] = sub_10001D800(v4);
  v5 = type metadata accessor for RequestManagerPolicy(0);
  v2[12] = v5;
  v2[13] = sub_10001D7CC(v5);
  v6 = sub_10001EC20();
  v2[14] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[15] = v7;
  v2[16] = sub_10001D800(v7);
  v8 = type metadata accessor for InferenceProviderAssetManagerPolicy(0);
  v2[17] = v8;
  v2[18] = sub_10001D7CC(v8);
  v9 = sub_10001DED0();
  v2[19] = v9;
  v2[20] = *(_QWORD *)(v9 - 8);
  v2[21] = sub_10001E784();
  v2[22] = sub_10001E784();
  v2[23] = sub_10001E784();
  v2[24] = sub_10001E784();
  sub_10001D7B8();
  return sub_10001D6D0();
}

uint64_t sub_10000CBF0()
{
  _QWORD *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, NSObject *, uint64_t);
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;

  sub_10000D3D0();
  if (qword_1000FB0D0 != -1)
    swift_once(&qword_1000FB0D0, sub_100006C5C);
  v2 = v0[23];
  v1 = v0[24];
  v3 = v0[19];
  v4 = v0[20];
  v5 = sub_10001DD64();
  sub_100002FF8(v5, (uint64_t)qword_1000FB328);
  v6 = *(void (**)(uint64_t, NSObject *, uint64_t))(v4 + 16);
  v0[25] = v6;
  v6(v2, v1, v3);
  sub_10001E694();
  v7 = sub_10001E9D0();
  v8 = sub_10001E6C4(v7);
  v9 = v0[23];
  if (v8)
  {
    v10 = v0[22];
    v11 = v0[19];
    v36 = v0[20];
    v12 = (uint8_t *)sub_10001D8D4(12);
    v37 = sub_10001D8D4(32);
    v39 = v37;
    *(_DWORD *)v12 = 136315138;
    v6(v10, v9, v11);
    v13 = String.init<A>(describing:)(v10, v11);
    sub_1000102C0(v13, v14, &v39);
    v0[6] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v12 + 4);
    sub_10001E8A8();
    v16 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    sub_10001EAC0(v9);
    sub_10001E18C((void *)&_mh_execute_header, v1, (os_log_type_t)v2, "Applying new policy: %s", v12);
    sub_10001DBB8(v37);
    sub_10001D790(v37);
    sub_10001D790((uint64_t)v12);
  }
  else
  {
    v16 = *(void (**)(uint64_t, uint64_t))(v0[20] + 8);
    v16(v0[23], v0[19]);
  }

  v38 = v16;
  v0[26] = v16;
  v17 = v0[21];
  v19 = v0[18];
  v18 = v0[19];
  v20 = v0[16];
  v21 = (int *)v0[17];
  v22 = v0[14];
  v23 = v0[15];
  v24 = v0[8];
  v25 = ((uint64_t (*)(uint64_t, _QWORD, uint64_t))v6)(v17, v0[24], v18);
  v26 = Policy.assetPolicy.getter(v25);
  v27 = Policy.memoryBudget.getter(v26);
  v28 = (double)Policy.inactiveAssetTimeout.getter(v27);
  Policy.assetTransitionDelay.getter();
  v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v19, v20, v22);
  *(_QWORD *)(v19 + v21[5]) = v27;
  v30 = static Policy.defaultInactiveAssetTimeout.getter(v29);
  v31 = 900.0;
  if (v28 != (double)v30)
    v31 = v28;
  *(double *)(v19 + v21[6]) = v31;
  sub_10004D620();
  v33 = v32;
  sub_10001E808(v20, *(uint64_t (**)(uint64_t, uint64_t))(v23 + 8));
  *(_QWORD *)(v19 + v21[7]) = v33;
  v38(v17, v18);
  sub_10001C830((_QWORD *)(v24 + 200), *(_QWORD *)(v24 + 224));
  v34 = (_QWORD *)swift_task_alloc(dword_1000FD424);
  v0[27] = v34;
  *v34 = v0;
  v34[1] = sub_10000CEA4;
  return sub_1000584D8(v0[18]);
}

uint64_t sub_10000CEA4()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 216));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_10000CEDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void (*v11)(uint64_t, uint64_t);

  sub_10001DFE8();
  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD **)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 88);
  v11 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
  sub_10001EA84(v1, *(_QWORD *)(v0 + 192), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 200));
  sub_10001EB9C();
  v8 = v7;
  ((void (*)(void))Policy.cancelPriority.getter)();
  v11(v1, v2);
  *v3 = v8;
  sub_10001EB74((uint64_t)v3 + *(int *)(v4 + 20), v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 32));
  v9 = (_QWORD *)swift_task_alloc(dword_1000FF394);
  *(_QWORD *)(v0 + 224) = v9;
  *v9 = v0;
  v9[1] = sub_10000CFB4;
  return sub_1000BCB20(*(_QWORD *)(v0 + 104));
}

uint64_t sub_10000CFB4()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 224));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_10000CFEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_10001E6D4();
  v1 = *(_QWORD *)(v0 + 192);
  v9 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
  v10 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 160);
  v11 = *(_QWORD *)(v0 + 176);
  v12 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 152);
  v13 = *(_QWORD *)(v0 + 128);
  v14 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 64);
  sub_10001CBA0(*(_QWORD *)(v0 + 104), type metadata accessor for RequestManagerPolicy);
  sub_10001CBA0(v4, type metadata accessor for InferenceProviderAssetManagerPolicy);
  *(_QWORD *)(v6 + 320) = v5;
  sub_10001E140();
  sub_10001E4C0();
  v7 = v6 + OBJC_IVAR____TtC13modelmanagerd13PolicyManager__currentPolicy;
  sub_10001E26C(v6 + OBJC_IVAR____TtC13modelmanagerd13PolicyManager__currentPolicy, v0 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 24))(v7, v1, v3);
  swift_endAccess(v0 + 16);
  v9(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  sub_10001E490();
  swift_task_dealloc(v13);
  sub_10001D938();
  swift_task_dealloc(v14);
  return sub_10001DBC8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10000D0F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v7 = sub_100002F78(&qword_1000FB6A0);
  __chkstk_darwin(v7);
  v9 = (_QWORD *)((char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v30 = a1;
  sub_100007D7C((uint64_t (*)(char *))sub_10001CD74, a2, (uint64_t)v9);
  v10 = sub_100002F78(&qword_1000FB678);
  result = sub_100005700((uint64_t)v9, 1, v10);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v13 = *v9;
    v12 = v9[1];
    v14 = (char *)v9 + *(int *)(v10 + 48);
    v15 = type metadata accessor for Policy(0);
    v16 = *(_QWORD *)(v15 - 8);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v15);
    if (qword_1000FB0D0 != -1)
      swift_once(&qword_1000FB0D0, sub_100006C5C);
    v17 = type metadata accessor for Logger(0);
    sub_100002FF8(v17, (uint64_t)qword_1000FB328);
    v18 = swift_bridgeObjectRetain(v12);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v28 = a3;
      v21 = swift_slowAlloc(12, -1);
      v27[1] = v3;
      v22 = (uint8_t *)v21;
      v23 = swift_slowAlloc(32, -1);
      v29 = a1;
      v24 = v23;
      v33 = v23;
      *(_DWORD *)v22 = 136315138;
      swift_bridgeObjectRetain(v12);
      sub_1000102C0(v13, v12, &v33);
      v31 = v25;
      a3 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v22 + 4);
      swift_bridgeObjectRelease_n(v12, 3);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Trial policy with same name as file policy: %s", v22, 0xCu);
      swift_arrayDestroy(v24, 1);
      v26 = v24;
      a1 = v29;
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v22, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v12, 2);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(a3, a1, v15);
  }
  return result;
}

uint64_t sub_10000D380(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100002F78(&qword_1000FB678);
  return static Policy.== infix(_:_:)(a1 + *(int *)(v4 + 48), a2) & 1;
}

void sub_10000D3D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_10001D810();
  v5 = v4;
  v7 = v6;
  sub_10001E368();
  sub_10001DD00();
  __chkstk_darwin(v8);
  sub_10001E168();
  v11 = v10 - v9;
  sub_10001EC20();
  sub_10001DD00();
  __chkstk_darwin(v12);
  sub_10001E654();
  sub_10001DED0();
  sub_10001E518();
  __chkstk_darwin(v13);
  sub_10001E63C();
  v14 = default argument 0 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
  v15 = default argument 1 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)(v14);
  v16 = default argument 2 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
  v17 = default argument 3 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)(v16);
  v18 = default argument 4 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
  Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)(v1, v15, v11, v17, v18);
  sub_10001E194();
  sub_10000D7FC(v2, v5, v0, v7);
  sub_10001E808(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_100006A68();
}

uint64_t sub_10000D4C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v8 = type metadata accessor for Assertion.DaemonRep(0);
  v9 = *(_QWORD *)(v8 - 8);
  v43 = v8;
  v44 = v9;
  __chkstk_darwin(v8);
  v42 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100002F78(&qword_1000FB560);
  __chkstk_darwin(v11);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Policy(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = Assertion.DaemonRep.policy.getter(v16);
  v21 = v20;
  v22 = *(_QWORD *)(a3 + 296);
  swift_bridgeObjectRetain(v22);
  sub_100009DD0(v19, v21, v22);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v22);
  if (sub_100005700((uint64_t)v13, 1, v14) == 1)
  {
    v40 = a4;
    v41 = v15;
    v39 = a1;
    sub_10001D5AC((uint64_t)v13, &qword_1000FB560);
    if (qword_1000FB0D0 != -1)
      swift_once(&qword_1000FB0D0, sub_100006C5C);
    v23 = type metadata accessor for Logger(0);
    sub_100002FF8(v23, (uint64_t)qword_1000FB328);
    v25 = v43;
    v24 = v44;
    v26 = v42;
    v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 16))(v42, a2, v43);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      v47 = v31;
      *(_DWORD *)v30 = 136315138;
      v38 = v30 + 4;
      v32 = Assertion.DaemonRep.policy.getter(v31);
      v34 = v33;
      sub_1000102C0(v32, v33, &v47);
      v45 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v38);
      swift_bridgeObjectRelease(v34);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v26, v25);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Error while building policy: No such policy %s", v30, 0xCu);
      swift_arrayDestroy(v31, 1);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v25);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v40, v39, v14);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v13, v14);
    sub_10000C1E0();
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  }
}

uint64_t sub_10000D7FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t result;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t i;
  unint64_t v30;
  int64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v42 = a3;
  v35 = a4;
  v7 = type metadata accessor for Assertion.DaemonRep(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v38 = (char *)&v35 - v12;
  v13 = type metadata accessor for Policy(0);
  v14 = __chkstk_darwin(v13);
  v43 = (uint64_t)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v35 - v16;
  v39 = v19;
  v40 = v18;
  (*(void (**)(char *, uint64_t))(v19 + 16))((char *)&v35 - v16, a1);
  v20 = *(_QWORD *)(a2 + 56);
  v36 = a2 + 56;
  v21 = 1 << *(_BYTE *)(a2 + 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & v20;
  v37 = (unint64_t)(v21 + 63) >> 6;
  v41 = a2;
  result = swift_bridgeObjectRetain(a2);
  v25 = 0;
  v26 = v40;
  if (!v23)
    goto LABEL_5;
LABEL_4:
  v27 = __clz(__rbit64(v23));
  v23 &= v23 - 1;
  for (i = v27 | (v25 << 6); ; i = __clz(__rbit64(v30)) + (v25 << 6))
  {
    v32 = v38;
    (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v38, *(_QWORD *)(v41 + 48) + *(_QWORD *)(v8 + 72) * i, v7);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v32, v7);
    sub_10000D4C0((uint64_t)v17, (uint64_t)v11, v42, v43);
    if (v4)
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      swift_release(v41);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v17, v40);
      return swift_release(v42);
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    v33 = v39;
    (*(void (**)(char *, uint64_t))(v39 + 8))(v17, v26);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 32))(v17, v43, v26);
    if (v23)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v25++, 1))
      break;
    if (v25 >= v37)
      goto LABEL_26;
    v30 = *(_QWORD *)(v36 + 8 * v25);
    if (!v30)
    {
      v31 = v25 + 1;
      if (v25 + 1 >= v37)
        goto LABEL_26;
      v30 = *(_QWORD *)(v36 + 8 * v31);
      if (v30)
        goto LABEL_16;
      v31 = v25 + 2;
      if (v25 + 2 >= v37)
        goto LABEL_26;
      v30 = *(_QWORD *)(v36 + 8 * v31);
      if (v30)
        goto LABEL_16;
      v31 = v25 + 3;
      if (v25 + 3 >= v37)
        goto LABEL_26;
      v30 = *(_QWORD *)(v36 + 8 * v31);
      if (v30)
      {
LABEL_16:
        v25 = v31;
        goto LABEL_17;
      }
      v31 = v25 + 4;
      if (v25 + 4 < v37)
      {
        v30 = *(_QWORD *)(v36 + 8 * v31);
        if (!v30)
        {
          while (1)
          {
            v25 = v31 + 1;
            if (__OFADD__(v31, 1))
              goto LABEL_29;
            if (v25 >= v37)
              goto LABEL_26;
            v30 = *(_QWORD *)(v36 + 8 * v25);
            ++v31;
            if (v30)
              goto LABEL_17;
          }
        }
        goto LABEL_16;
      }
LABEL_26:
      v34 = v35;
      swift_release(v41);
      (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v34, v17, v40);
      return swift_release(v42);
    }
LABEL_17:
    v23 = (v30 - 1) & v30;
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_10000DB48(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) == 0)
    return *(_QWORD *)(a1 + 16);
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  return __CocoaSet.count.getter(a1);
}

void sub_10000DB68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10000DB84(a1, a2, a3, (uint64_t)&type metadata for () + 8);
}

void sub_10000DB78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10000DB84(a1, a2, a3, (uint64_t)&type metadata for Data);
}

void sub_10000DB84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v19[4];

  v8 = sub_10001DBC0();
  v9 = sub_100005700(a1, 1, v8);
  if ((_DWORD)v9 == 1)
  {
    sub_10001D5AC(a1, &qword_1000FB230);
    v10 = 7168;
  }
  else
  {
    v11 = TaskPriority.rawValue.getter(v9);
    sub_10001EBC8(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8));
    v10 = v11 | 0x1C00;
  }
  v12 = *(_QWORD *)(a3 + 16);
  if (v12)
  {
    v13 = *(_QWORD *)(a3 + 24);
    ObjectType = swift_getObjectType(*(_QWORD *)(a3 + 16));
    swift_unknownObjectRetain(v12);
    v15 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v13);
    v17 = v16;
    swift_unknownObjectRelease(v12);
  }
  else
  {
    v15 = 0;
    v17 = 0;
  }
  if (v17 | v15)
  {
    v19[0] = 0;
    v19[1] = 0;
    v18 = v19;
    v19[2] = v15;
    v19[3] = v17;
  }
  else
  {
    v18 = 0;
  }
  swift_task_create(v10, v18, a4, a2, a3);
  sub_10001E0A0();
}

uint64_t sub_10000DC88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = sub_100005700(a1, 1, v6);
  if ((_DWORD)v7 == 1)
  {
    sub_10001D5AC(a1, &qword_1000FB230);
    v8 = 7168;
  }
  else
  {
    v9 = TaskPriority.rawValue.getter(v7);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    v8 = v9 | 0x1C00;
  }
  v10 = *(_QWORD *)(a3 + 16);
  if (v10)
  {
    v11 = *(_QWORD *)(a3 + 24);
    ObjectType = swift_getObjectType(*(_QWORD *)(a3 + 16));
    swift_unknownObjectRetain(v10);
    v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
    v15 = v14;
    swift_unknownObjectRelease(v10);
  }
  else
  {
    v13 = 0;
    v15 = 0;
  }
  v16 = sub_100002F78(&qword_1000FB798);
  if (v15 | v13)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v13;
    v19[3] = v15;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, v16, a2, a3);
}

void sub_10000DDB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10000DB84(a1, a2, a3, (uint64_t)&type metadata for Bool);
}

void sub_10000DDC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v18[4];

  v6 = sub_10001DBC0();
  v7 = sub_100005700(a1, 1, v6);
  if ((_DWORD)v7 == 1)
  {
    sub_10001D5AC(a1, &qword_1000FB230);
    v8 = 7168;
  }
  else
  {
    v9 = TaskPriority.rawValue.getter(v7);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    v8 = v9 | 0x1C00;
  }
  v10 = *(_QWORD *)(a3 + 16);
  if (v10)
  {
    v11 = *(_QWORD *)(a3 + 24);
    ObjectType = swift_getObjectType(*(_QWORD *)(a3 + 16));
    swift_unknownObjectRetain(v10);
    v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
    v15 = v14;
    swift_unknownObjectRelease(v10);
  }
  else
  {
    v13 = 0;
    v15 = 0;
  }
  v16 = type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData(0);
  if (v15 | v13)
  {
    v18[0] = 0;
    v18[1] = 0;
    v17 = v18;
    v18[2] = v13;
    v18[3] = v15;
  }
  else
  {
    v17 = 0;
  }
  swift_task_create(v8, v17, v16, a2, a3);
  sub_10001E0A0();
}

uint64_t sub_10000DED0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  _QWORD *v43;

  v4 = type metadata accessor for Assertion.DaemonRep(0);
  v43 = *(_QWORD **)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v36 - v9;
  result = __chkstk_darwin(v8);
  v13 = (char *)&v36 - v12;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 56);
    v37 = a1;
    v38 = a1 + 56;
    v16 = 1 << *(_BYTE *)(a1 + 32);
    if (v16 < 64)
      v17 = ~(-1 << v16);
    else
      v17 = -1;
    v18 = v17 & v15;
    v39 = (unint64_t)(v16 + 63) >> 6;
    v42 = a2 + 56;
    v36 = (char *)&v36 - v12;
    if (!v18)
      goto LABEL_8;
LABEL_7:
    v40 = (v18 - 1) & v18;
    v41 = v14;
    for (i = __clz(__rbit64(v18)) | (v14 << 6); ; i = __clz(__rbit64(v21)) + (v22 << 6))
    {
      v24 = v43;
      v25 = v43[9];
      v26 = (void (*)(char *, unint64_t, uint64_t))v43[2];
      v26(v13, *(_QWORD *)(a1 + 48) + v25 * i, v4);
      ((void (*)(char *, char *, uint64_t))v24[4])(v10, v13, v4);
      v27 = *(_QWORD *)(a2 + 40);
      sub_100006710(&qword_1000FB278, (uint64_t (*)(uint64_t))&type metadata accessor for Assertion.DaemonRep);
      v29 = dispatch thunk of Hashable._rawHashValue(seed:)(v27, v4, v28);
      v30 = -1 << *(_BYTE *)(a2 + 32);
      v31 = v29 & ~v30;
      if (((*(_QWORD *)(v42 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
        break;
      v32 = ~v30;
      while (1)
      {
        v26(v7, *(_QWORD *)(a2 + 48) + v31 * v25, v4);
        sub_100006710(&qword_1000FB280, (uint64_t (*)(uint64_t))&type metadata accessor for Assertion.DaemonRep);
        v34 = dispatch thunk of static Equatable.== infix(_:_:)(v7, v10, v4, v33);
        v35 = (void (*)(char *, uint64_t))v43[1];
        v35(v7, v4);
        if ((v34 & 1) != 0)
          break;
        v31 = (v31 + 1) & v32;
        if (((*(_QWORD *)(v42 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
          goto LABEL_33;
      }
      result = ((uint64_t (*)(char *, uint64_t))v35)(v10, v4);
      v13 = v36;
      a1 = v37;
      v18 = v40;
      v14 = v41;
      if (v40)
        goto LABEL_7;
LABEL_8:
      v20 = v14 + 1;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
LABEL_36:
        __break(1u);
        return result;
      }
      if (v20 >= v39)
        return 1;
      v21 = *(_QWORD *)(v38 + 8 * v20);
      v22 = v14 + 1;
      if (!v21)
      {
        v22 = v20 + 1;
        if (v20 + 1 >= v39)
          return 1;
        v21 = *(_QWORD *)(v38 + 8 * v22);
        if (!v21)
        {
          v22 = v20 + 2;
          if (v20 + 2 >= v39)
            return 1;
          v21 = *(_QWORD *)(v38 + 8 * v22);
          if (!v21)
          {
            v22 = v20 + 3;
            if (v20 + 3 >= v39)
              return 1;
            v21 = *(_QWORD *)(v38 + 8 * v22);
            if (!v21)
            {
              v23 = v20 + 4;
              if (v23 >= v39)
                return 1;
              v21 = *(_QWORD *)(v38 + 8 * v23);
              if (!v21)
              {
                while (1)
                {
                  v22 = v23 + 1;
                  if (__OFADD__(v23, 1))
                    goto LABEL_36;
                  if (v22 >= v39)
                    return 1;
                  v21 = *(_QWORD *)(v38 + 8 * v22);
                  ++v23;
                  if (v21)
                    goto LABEL_23;
                }
              }
              v22 = v23;
            }
          }
        }
      }
LABEL_23:
      v40 = (v21 - 1) & v21;
      v41 = v22;
    }
    v35 = (void (*)(char *, uint64_t))v43[1];
LABEL_33:
    v35(v10, v4);
  }
  return 0;
}

void sub_10000E244()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t *v47;
  uint64_t *v48;
  unint64_t i;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v84;
  uint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  int64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  _QWORD v109[10];

  sub_10001D810();
  v3 = v2;
  v4 = sub_10001E56C();
  v100 = type metadata accessor for ModelCatalogAsset(v4);
  __chkstk_darwin(v100);
  sub_10001E2C0();
  __chkstk_darwin(v5);
  v108 = (uint64_t *)((char *)&v93 - v6);
  sub_10001E148();
  __chkstk_darwin(v7);
  v10 = (char *)&v93 - v9;
  if (v0 == v3 || *(_QWORD *)(v0 + 16) != *(_QWORD *)(v3 + 16))
    goto LABEL_103;
  v11 = 0;
  v12 = v0 + 56;
  v13 = 1 << *(_BYTE *)(v0 + 32);
  if (v13 < 64)
    v14 = ~(-1 << v13);
  else
    v14 = -1;
  v15 = v14 & *(_QWORD *)(v0 + 56);
  v16 = (unint64_t)(v13 + 63) >> 6;
  v107 = v3 + 56;
  v98 = v16;
  v99 = v0 + 56;
  if (!v15)
    goto LABEL_8;
  while (2)
  {
    v93 = (v15 - 1) & v15;
    v94 = v11;
LABEL_23:
    v97 = v0;
    v96 = v8;
    v106 = *(_QWORD *)(v8 + 72);
    sub_10001E388();
    v95 = v10;
    sub_10001CB5C((uint64_t)v10, (uint64_t)v108);
    Hasher.init(_seed:)(v109, *(_QWORD *)(v3 + 40));
    sub_1000499E4((uint64_t)v109);
    v23 = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v3 + 32);
    v25 = v23 & ~v24;
    if (((*(_QWORD *)(v107 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
      goto LABEL_102;
    v104 = ~v24;
    v105 = v3;
    while (1)
    {
      sub_10001E388();
      v26 = v1[1];
      v27 = v108[1];
      v28 = *v1 == *v108 && v26 == v27;
      if (!v28 && (sub_10001DB04(*v1, v26, *v108, v27) & 1) == 0)
        goto LABEL_97;
      v29 = (_QWORD *)v1[2];
      v30 = (_QWORD *)v108[2];
      v31 = v29[2];
      if (v31 != v30[2])
        goto LABEL_97;
      if (v31)
        v32 = v29 == v30;
      else
        v32 = 1;
      if (!v32)
      {
        v37 = v29[4];
        v38 = v29[5];
        v39 = v30[4];
        v40 = v30[5];
        v41 = v37 == v39 && v38 == v40;
        if (!v41 && (sub_10001DB04(v37, v38, v39, v40) & 1) == 0)
          goto LABEL_97;
        if (v31 != 1)
        {
          v42 = v29[6];
          v43 = v29[7];
          v44 = v30[6];
          v45 = v30[7];
          v46 = v42 == v44 && v43 == v45;
          if (!v46 && (sub_10001DB04(v42, v43, v44, v45) & 1) == 0)
            goto LABEL_97;
          if (v31 != 2)
          {
            v47 = v30 + 9;
            v48 = v29 + 9;
            for (i = 2; i != v31; ++i)
            {
              if (i >= v31)
                goto LABEL_106;
              v50 = *(v48 - 1);
              v51 = *v48;
              v52 = *(v47 - 1);
              v53 = *v47;
              v54 = v50 == v52 && v51 == v53;
              if (!v54 && (sub_10001DB04(v50, v51, v52, v53) & 1) == 0)
                goto LABEL_97;
              v47 += 2;
              v48 += 2;
            }
          }
        }
      }
      v33 = v1[3];
      v34 = v108[3];
      v35 = *(_QWORD *)(v33 + 16);
      if (v35 != *(_QWORD *)(v34 + 16))
        goto LABEL_97;
      if (!v35 || v33 == v34)
        break;
      v55 = *(_QWORD *)(v33 + 32);
      v56 = *(_QWORD *)(v33 + 40);
      v57 = *(_QWORD *)(v33 + 48);
      v58 = *(_QWORD *)(v33 + 56);
      v59 = *(unsigned __int8 *)(v33 + 64);
      v60 = *(_QWORD *)(v34 + 32);
      v61 = *(_QWORD *)(v34 + 40);
      v63 = *(_QWORD *)(v34 + 48);
      v62 = *(_QWORD *)(v34 + 56);
      v64 = *(unsigned __int8 *)(v34 + 64);
      if (v55 != v60 || v56 != v61)
      {
        v66 = *(unsigned __int8 *)(v33 + 64);
        v67 = *(_QWORD *)(v34 + 56);
        v103 = *(_QWORD *)(v34 + 48);
        v68 = _stringCompareWithSmolCheck(_:_:expecting:)(v55, v56, v60, v61, 0);
        v63 = v103;
        v62 = v67;
        v59 = v66;
        if ((v68 & 1) == 0)
          goto LABEL_97;
      }
      v69 = 0;
      v70 = 1;
      if (v58)
      {
LABEL_77:
        if (v62)
        {
          if (v57 != v63 || v58 != v62)
          {
            v72 = sub_10001EB60();
            v73 = v64;
            v75 = v74;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(v72, v76, v78, v77, 0) & 1) == 0
              || ((v73 ^ v75) & 1) != 0)
            {
              goto LABEL_97;
            }
            goto LABEL_87;
          }
          goto LABEL_86;
        }
      }
      else
      {
        while (!v62)
        {
LABEL_86:
          if (((v64 ^ v59) & 1) != 0)
            break;
LABEL_87:
          if (v35 == v70)
            goto LABEL_42;
          if (v70 >= v35)
          {
            __break(1u);
LABEL_105:
            __break(1u);
LABEL_106:
            __break(1u);
LABEL_107:
            __break(1u);
            goto LABEL_108;
          }
          if (v70 >= *(_QWORD *)(v34 + 16))
            goto LABEL_105;
          v79 = *(_QWORD *)(v33 + v69 + 72);
          v80 = *(_QWORD *)(v33 + v69 + 80);
          v57 = *(_QWORD *)(v33 + v69 + 88);
          v58 = *(_QWORD *)(v33 + v69 + 96);
          v59 = *(unsigned __int8 *)(v33 + v69 + 104);
          v81 = *(_QWORD *)(v34 + v69 + 72);
          v82 = *(_QWORD *)(v34 + v69 + 80);
          v63 = *(_QWORD *)(v34 + v69 + 88);
          v62 = *(_QWORD *)(v34 + v69 + 96);
          v64 = *(unsigned __int8 *)(v34 + v69 + 104);
          if (v79 != v81 || v80 != v82)
          {
            v102 = *(_QWORD *)(v33 + v69 + 96);
            v103 = v69;
            v101 = v57;
            v84 = v34;
            v85 = v1;
            v86 = v35;
            v87 = v33;
            v88 = v64;
            v89 = v59;
            v90 = v62;
            v91 = v63;
            v92 = _stringCompareWithSmolCheck(_:_:expecting:)(v79, v80, v81, v82, 0);
            v63 = v91;
            v62 = v90;
            v59 = v89;
            v64 = v88;
            v33 = v87;
            v35 = v86;
            v1 = v85;
            v34 = v84;
            v57 = v101;
            v58 = v102;
            v69 = v103;
            if ((v92 & 1) == 0)
              break;
          }
          v69 += 40;
          ++v70;
          if (v58)
            goto LABEL_77;
        }
      }
LABEL_97:
      sub_10001E1E8((uint64_t)v1);
      v25 = (v25 + 1) & v104;
      if (((*(_QWORD *)(v107 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
      {
LABEL_102:
        sub_10001CBA0((uint64_t)v108, type metadata accessor for ModelCatalogAsset);
LABEL_103:
        sub_100006A68();
        return;
      }
    }
LABEL_42:
    if ((static AssetCost.== infix(_:_:)((char *)v1 + *(int *)(v100 + 28), (char *)v108 + *(int *)(v100 + 28)) & 1) == 0)
      goto LABEL_97;
    sub_10001E084();
    if (!v28)
      goto LABEL_97;
    sub_10001E084();
    if (!v28)
      goto LABEL_97;
    sub_10001E084();
    if (!v28)
      goto LABEL_97;
    sub_10001E1E8((uint64_t)v1);
    sub_10001E1E8((uint64_t)v108);
    v3 = v105;
    v0 = v97;
    v16 = v98;
    v8 = v96;
    v10 = v95;
    v12 = v99;
    v11 = v94;
    v15 = v93;
    if (v93)
      continue;
    break;
  }
LABEL_8:
  v17 = v11 + 1;
  if (__OFADD__(v11, 1))
    goto LABEL_107;
  if (v17 >= v16)
    goto LABEL_103;
  if (*(_QWORD *)(v12 + 8 * v17))
    goto LABEL_22;
  if (v11 + 2 >= v16)
    goto LABEL_103;
  if (*(_QWORD *)(v12 + 8 * (v11 + 2)))
    goto LABEL_22;
  if (v11 + 3 >= v16)
    goto LABEL_103;
  if (*(_QWORD *)(v12 + 8 * (v11 + 3)))
    goto LABEL_22;
  if (v11 + 4 >= v16)
    goto LABEL_103;
  if (*(_QWORD *)(v12 + 8 * (v11 + 4)))
    goto LABEL_22;
  v18 = v11 + 5;
  if (v11 + 5 >= v16)
    goto LABEL_103;
  if (*(_QWORD *)(v12 + 8 * v18))
  {
LABEL_22:
    sub_10001E70C();
    v93 = v21 & v20;
    v94 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    v19 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v19 >= v16)
      goto LABEL_103;
    ++v18;
    if (*(_QWORD *)(v12 + 8 * v19))
      goto LABEL_22;
  }
LABEL_108:
  __break(1u);
}

uint64_t sub_10000E7F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  return swift_task_switch(sub_10000E818, a4, 0);
}

uint64_t sub_10000E818()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)(void);

  v1 = *(_QWORD *)(v0 + 32);
  sub_100006D70();
  sub_100006710(&qword_1000FB4F8, type metadata accessor for PolicyManager);
  sub_10001D83C((uint64_t)sub_10000FB24, v2, (uint64_t)"modelmanagerd/WorkQueue.swift");
  if (v1)
  {
    v3 = (_QWORD *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    sub_10001DFB4(v3, (uint64_t)sub_10000E8C8);
    sub_10001D974();
    return sub_10001D708();
  }
  else
  {
    v5 = sub_10001D690();
    v6 = (_QWORD *)sub_10001D994(v5);
    v7 = sub_10001D72C(v6);
    return sub_10001D744(v7, v8);
  }
}

uint64_t sub_10000E8C8()
{
  uint64_t v0;

  sub_10001D680(*(_QWORD *)(*(_QWORD *)v0 + 56));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_10000E908()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  v0 = sub_10001D690();
  v1 = (_QWORD *)sub_10001D994(v0);
  v2 = sub_10001D72C(v1);
  return sub_10001D7F4(v2, v3);
}

uint64_t sub_10000E93C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_10001DB50();
  sub_10001D864();
  v1 = swift_task_alloc(dword_1000FB524);
  v2 = (_QWORD *)sub_100006AF4(v1);
  *v2 = v0;
  v2[1] = sub_10001D668;
  sub_10001D6E4();
  sub_10001DB20();
  return sub_10000E7F8(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10000E98C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  return swift_task_switch(sub_10000E9AC, a4, 0);
}

uint64_t sub_10000E9AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)(void);

  v1 = *(_QWORD *)(v0 + 32);
  type metadata accessor for TrialManager();
  sub_100006710(&qword_1000FB6B0, (uint64_t (*)(uint64_t))type metadata accessor for TrialManager);
  sub_10001D83C((uint64_t)sub_10000FB24, v2, (uint64_t)"modelmanagerd/WorkQueue.swift");
  if (v1)
  {
    v3 = (_QWORD *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    sub_10001DFB4(v3, (uint64_t)sub_10000EA60);
    sub_10001D974();
    return sub_10001D708();
  }
  else
  {
    v5 = sub_10001D690();
    v6 = (_QWORD *)sub_10001D994(v5);
    v7 = sub_10001D72C(v6);
    return sub_10001D744(v7, v8);
  }
}

uint64_t sub_10000EA60()
{
  uint64_t v0;

  sub_10001D680(*(_QWORD *)(*(_QWORD *)v0 + 56));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_10000EAA0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  v0 = sub_10001D690();
  v1 = (_QWORD *)sub_10001D994(v0);
  v2 = sub_10001D72C(v1);
  return sub_10001D7F4(v2, v3);
}

uint64_t sub_10000EAD0()
{
  uint64_t (**v0)(void);

  sub_10001D680(*((_QWORD *)*v0 + 8));
  return sub_100006A38(v0[1]);
}

uint64_t sub_10000EB04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[4] = a5;
  v6[5] = a6;
  v6[2] = a3;
  v6[3] = a4;
  return swift_task_switch(sub_10000EB20, a3, 0);
}

uint64_t sub_10000EB20()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  v1 = v0[3];
  sub_10001E1D0();
  sub_100006710(&qword_1000FB728, type metadata accessor for InferenceProviderAssetManager);
  sub_10001D83C((uint64_t)sub_10000FB24, v2, (uint64_t)"modelmanagerd/WorkQueue.swift");
  if (v1)
  {
    v3 = (_QWORD *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    v0[6] = v3;
    *v3 = v0;
    v3[1] = sub_10000EBE4;
    sub_10001D974();
    return sub_10001D708();
  }
  else
  {
    v5 = (_QWORD *)sub_10001D6BC(v0[4]);
    v0[7] = v5;
    v6 = sub_10001E990(v5);
    return sub_10001D744(v6, v7);
  }
}

uint64_t sub_10000EBE4()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 48));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_10000EC1C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v4)(void);

  v1 = (_QWORD *)sub_10001DA40(*(_QWORD *)(v0 + 32));
  *(_QWORD *)(v0 + 56) = v1;
  v2 = sub_10001E990(v1);
  return sub_10001D744(v2, v4);
}

uint64_t sub_10000EC60()
{
  uint64_t v0;

  sub_10001D680(*(_QWORD *)(*(_QWORD *)v0 + 56));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_10000ECA0()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 64));
}

uint64_t sub_10000ECAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  return swift_task_switch(sub_10000ECCC, a4, 0);
}

uint64_t sub_10000ECCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)(void);

  v1 = *(_QWORD *)(v0 + 32);
  sub_10001E7AC();
  sub_100006710(&qword_1000FB828, type metadata accessor for InferenceProviderExtensionConnection);
  sub_10001D83C((uint64_t)sub_10000FB24, v2, (uint64_t)"modelmanagerd/WorkQueue.swift");
  if (v1)
  {
    v3 = (_QWORD *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    sub_10001DFB4(v3, (uint64_t)sub_10000E8C8);
    sub_10001D974();
    return sub_10001D708();
  }
  else
  {
    v5 = sub_10001D690();
    v6 = (_QWORD *)sub_10001D994(v5);
    v7 = sub_10001D72C(v6);
    return sub_10001D744(v7, v8);
  }
}

uint64_t sub_10000ED7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  return swift_task_switch(sub_10000ED9C, a4, 0);
}

uint64_t sub_10000ED9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)(void);

  v1 = *(_QWORD *)(v0 + 32);
  sub_10001E1D0();
  sub_100006710(&qword_1000FB728, type metadata accessor for InferenceProviderAssetManager);
  sub_10001D83C((uint64_t)sub_10000FB24, v2, (uint64_t)"modelmanagerd/WorkQueue.swift");
  if (v1)
  {
    v3 = (_QWORD *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    sub_10001DFB4(v3, (uint64_t)sub_10000E8C8);
    sub_10001D974();
    return sub_10001D708();
  }
  else
  {
    v5 = sub_10001D690();
    v6 = (_QWORD *)sub_10001D994(v5);
    v7 = sub_10001D72C(v6);
    return sub_10001D744(v7, v8);
  }
}

uint64_t sub_10000EE4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  return swift_task_switch(sub_10000EE6C, a4, 0);
}

uint64_t sub_10000EE6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)(void);

  v1 = *(_QWORD *)(v0 + 32);
  type metadata accessor for RunningBoardProvider(0);
  sub_100006710(&qword_1000FB6E0, type metadata accessor for RunningBoardProvider);
  sub_10001D83C((uint64_t)sub_10000FB24, v2, (uint64_t)"modelmanagerd/WorkQueue.swift");
  if (v1)
  {
    v3 = (_QWORD *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    sub_10001DFB4(v3, (uint64_t)sub_10000E8C8);
    sub_10001D974();
    return sub_10001D708();
  }
  else
  {
    v5 = sub_10001D690();
    v6 = (_QWORD *)sub_10001D994(v5);
    v7 = sub_10001D72C(v6);
    return sub_10001D744(v7, v8);
  }
}

uint64_t sub_10000EF20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_10000EF38, a4, 0);
}

uint64_t sub_10000EF38()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_100006D70();
  sub_100006710(&qword_1000FB4F8, type metadata accessor for PolicyManager);
  sub_10001D8BC((uint64_t)sub_10000FB24, v1, (uint64_t)"modelmanagerd/WorkQueue.swift");
  v2 = (_QWORD *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
  *(_QWORD *)(v0 + 32) = v2;
  sub_10001E5F8(v2, (uint64_t)sub_10000EFC4);
  sub_10001E414();
  return sub_10001D7C4();
}

uint64_t sub_10000EFC4()
{
  uint64_t v0;

  sub_10001D680(*(_QWORD *)(*(_QWORD *)v0 + 32));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_10000F008()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10001DD0C();
  sub_10001D984();
  v0 = swift_task_alloc(dword_1000FB534);
  v1 = (_QWORD *)sub_100006AF4(v0);
  sub_10001D750(v1);
  sub_10001DCCC();
  return sub_10000EF20(v2, v3, v4, v5, v6);
}

uint64_t sub_10000F054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_10000F06C, a4, 0);
}

uint64_t sub_10000F06C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  type metadata accessor for TrialManager();
  sub_100006710(&qword_1000FB6B0, (uint64_t (*)(uint64_t))type metadata accessor for TrialManager);
  sub_10001D8BC((uint64_t)sub_10000FB24, v1, (uint64_t)"modelmanagerd/WorkQueue.swift");
  v2 = (_QWORD *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
  *(_QWORD *)(v0 + 32) = v2;
  sub_10001E5F8(v2, (uint64_t)sub_10000F0FC);
  sub_10001E414();
  return sub_10001D7C4();
}

uint64_t sub_10000F0FC()
{
  uint64_t v0;

  sub_10001D680(*(_QWORD *)(*(_QWORD *)v0 + 32));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_10000F13C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_10000F154, a4, 0);
}

uint64_t sub_10000F154()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = sub_10001E1D0();
  sub_100006710(&qword_1000FB728, type metadata accessor for InferenceProviderAssetManager);
  Actor.assertIsolated(_:file:line:)(sub_10000FB24, 0, "modelmanagerd/WorkQueue.swift", 29, 2, 44, v1);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
  *(_QWORD *)(v0 + 32) = v2;
  *v2 = v0;
  v2[1] = sub_10000F0FC;
  return sub_10001D708();
}

uint64_t sub_10000F204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_10000F21C, a4, 0);
}

uint64_t sub_10000F21C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_10001E7AC();
  sub_100006710(&qword_1000FB828, type metadata accessor for InferenceProviderExtensionConnection);
  sub_10001D8BC((uint64_t)sub_10000FB24, v1, (uint64_t)"modelmanagerd/WorkQueue.swift");
  v2 = (_QWORD *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
  *(_QWORD *)(v0 + 32) = v2;
  sub_10001E5F8(v2, (uint64_t)sub_10000EFC4);
  sub_10001E414();
  return sub_10001D7C4();
}

uint64_t sub_10000F2A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_10000F2C0, a4, 0);
}

uint64_t sub_10000F2C0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_10001E1D0();
  sub_100006710(&qword_1000FB728, type metadata accessor for InferenceProviderAssetManager);
  sub_10001D8BC((uint64_t)sub_10000FB24, v1, (uint64_t)"modelmanagerd/WorkQueue.swift");
  v2 = (_QWORD *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
  *(_QWORD *)(v0 + 32) = v2;
  sub_10001E5F8(v2, (uint64_t)sub_10000EFC4);
  sub_10001E414();
  return sub_10001D7C4();
}

uint64_t sub_10000F34C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_10000F364, a4, 0);
}

uint64_t sub_10000F364()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  type metadata accessor for RunningBoardProvider(0);
  sub_100006710(&qword_1000FB6E0, type metadata accessor for RunningBoardProvider);
  sub_10001D8BC((uint64_t)sub_10000FB24, v1, (uint64_t)"modelmanagerd/WorkQueue.swift");
  v2 = (_QWORD *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
  *(_QWORD *)(v0 + 32) = v2;
  sub_10001E5F8(v2, (uint64_t)sub_10000EFC4);
  sub_10001E414();
  return sub_10001D7C4();
}

uint64_t sub_10000F3F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  return swift_task_switch(sub_10000F414, a4, 0);
}

uint64_t sub_10000F414()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  v1 = *(_QWORD *)(v0 + 32);
  sub_100006D70();
  sub_100006710(&qword_1000FB4F8, type metadata accessor for PolicyManager);
  sub_10001D96C((uint64_t)sub_10000FB24, 0, (uint64_t)"modelmanagerd/WorkQueue.swift", 29, 2, 56);
  if (v1)
  {
    v2 = (_QWORD *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    sub_10001DFB4(v2, (uint64_t)sub_10000EA60);
    sub_10001D974();
    return sub_10001D708();
  }
  else
  {
    v4 = sub_10001D690();
    v5 = (_QWORD *)sub_10001D994(v4);
    v6 = sub_10001D72C(v5);
    return sub_10001D744(v6, v7);
  }
}

uint64_t sub_10000F4D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[5] = a5;
  v6[6] = a6;
  v6[3] = a3;
  v6[4] = a4;
  return swift_task_switch(sub_10000F4F0, a3, 0);
}

uint64_t sub_10000F4F0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  v1 = *(_QWORD *)(v0 + 32);
  sub_10001E1D0();
  sub_100006710(&qword_1000FB728, type metadata accessor for InferenceProviderAssetManager);
  sub_10001D96C((uint64_t)sub_10000FB24, 0, (uint64_t)"modelmanagerd/WorkQueue.swift", 29, 2, 56);
  if (v1)
  {
    v2 = (_QWORD *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    sub_10001DFB4(v2, (uint64_t)sub_10000F5B8);
    sub_10001D974();
    return sub_10001D708();
  }
  else
  {
    v4 = sub_10001D690();
    v5 = (_QWORD *)sub_10001D994(v4);
    v6 = sub_10001E9A4(v5);
    return sub_10001D744(v6, v7);
  }
}

uint64_t sub_10000F5B8()
{
  uint64_t v0;

  sub_10001D680(*(_QWORD *)(*(_QWORD *)v0 + 56));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_10000F5F8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v5)(void);

  v1 = sub_10001DA40(*(_QWORD *)(v0 + 40));
  v2 = (_QWORD *)sub_10001D994(v1);
  v3 = sub_10001E9A4(v2);
  return sub_10001D744(v3, v5);
}

uint64_t sub_10000F638()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 72) = v1;
  swift_task_dealloc(v3);
  return sub_10001D6D0();
}

uint64_t sub_10000F688()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10000F694()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000F6A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  return swift_task_switch(sub_10000F6C0, a4, 0);
}

uint64_t sub_10000F6C0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  v1 = *(_QWORD *)(v0 + 32);
  sub_10001E7AC();
  sub_100006710(&qword_1000FB828, type metadata accessor for InferenceProviderExtensionConnection);
  sub_10001D96C((uint64_t)sub_10000FB24, 0, (uint64_t)"modelmanagerd/WorkQueue.swift", 29, 2, 56);
  if (v1)
  {
    v2 = (_QWORD *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    sub_10001DFB4(v2, (uint64_t)sub_10000E8C8);
    sub_10001D974();
    return sub_10001D708();
  }
  else
  {
    v4 = sub_10001D690();
    v5 = (_QWORD *)sub_10001D994(v4);
    v6 = sub_10001D72C(v5);
    return sub_10001D744(v6, v7);
  }
}

uint64_t sub_10000F780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_10000F798, a4, 0);
}

uint64_t sub_10000F798()
{
  uint64_t v0;
  _QWORD *v1;

  sub_100006D70();
  sub_100006710(&qword_1000FB4F8, type metadata accessor for PolicyManager);
  sub_10001D96C((uint64_t)sub_10000FB24, 0, (uint64_t)"modelmanagerd/WorkQueue.swift", 29, 2, 62);
  v1 = (_QWORD *)swift_task_alloc(async function pointer to Task.value.getter[1]);
  *(_QWORD *)(v0 + 32) = v1;
  sub_100002F78(&qword_1000FB5F8);
  *v1 = v0;
  v1[1] = sub_10000F858;
  return sub_10001DAAC();
}

uint64_t sub_10000F858()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  sub_10001D788(*(_QWORD *)(v3 + 32), &v3);
  if (v0)
    sub_10001EBB8();
  sub_10001E10C();
  return sub_10001D6D0();
}

uint64_t sub_10000F8B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 24) = a4;
  *(_QWORD *)(v5 + 32) = a5;
  return swift_task_switch(sub_10000F8C8, a4, 0);
}

uint64_t sub_10000F8C8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_10001E1D0();
  sub_100006710(&qword_1000FB728, type metadata accessor for InferenceProviderAssetManager);
  Actor.assertIsolated(_:file:line:)(sub_10000FB24, 0, "modelmanagerd/WorkQueue.swift", 29, 2, 62, v1);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to Task.value.getter[1]);
  *(_QWORD *)(v0 + 40) = v2;
  v3 = sub_100002F78(&qword_1000FB798);
  v4 = sub_100002F78(&qword_1000FB5F8);
  *v2 = v0;
  v2[1] = sub_10000F9A8;
  return Task.value.getter(v0 + 16, *(_QWORD *)(v0 + 32), v3, v4, &protocol self-conformance witness table for Error);
}

uint64_t sub_10000F9A8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_10001E0D8();
  sub_10001D788(*(_QWORD *)(v0 + 40), v2);
  if (v1)
    sub_10001EBB8();
  sub_10001E10C();
  return sub_10001D6D0();
}

uint64_t sub_10000F9F8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10000FA20()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = 0;
  swift_bridgeObjectRelease(0);
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10000FA4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_10000FA64, a4, 0);
}

uint64_t sub_10000FA64()
{
  uint64_t v0;
  _QWORD *v1;

  sub_10001E7AC();
  sub_100006710(&qword_1000FB828, type metadata accessor for InferenceProviderExtensionConnection);
  sub_10001D96C((uint64_t)sub_10000FB24, 0, (uint64_t)"modelmanagerd/WorkQueue.swift", 29, 2, 62);
  v1 = (_QWORD *)swift_task_alloc(async function pointer to Task.value.getter[1]);
  *(_QWORD *)(v0 + 32) = v1;
  sub_100002F78(&qword_1000FB5F8);
  *v1 = v0;
  v1[1] = sub_10000F858;
  return sub_10001DAAC();
}

uint64_t sub_10000FB24()
{
  return 0;
}

char *sub_10000FB30(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_10001D6A8();
    result = (char *)sub_10001D770((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_10001D79C(a3, result);
  }
  return result;
}

void sub_10000FB8C(uint64_t a1, uint64_t a2)
{
  sub_10000FE10(a1, a2);
}

char *sub_10000FB98(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_10001D6A8();
    result = (char *)sub_10001D770((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)sub_10001D79C(a3, result);
  }
  return result;
}

void sub_10000FBF4(uint64_t a1, uint64_t a2)
{
  sub_10000FE10(a1, a2);
}

void sub_10000FC00(uint64_t a1, uint64_t a2)
{
  sub_10000FE10(a1, a2);
}

char *sub_10000FC0C(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_10001D6A8();
    result = (char *)sub_10001D770((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_10001D79C(a3, result);
  }
  return result;
}

char *sub_10000FC64(char *__src, size_t __len, char *__dst)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if ((__len & 0x8000000000000000) != 0)
  {
    sub_10001D6A8();
    __src = (char *)sub_10001D770((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

char *sub_10000FCC8(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_10001D6A8();
    result = (char *)sub_10001D770((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[48 * a2] <= a3)
  {
    return (char *)sub_10001D79C(a3, result);
  }
  return result;
}

void sub_10000FD24(uint64_t a1, uint64_t a2)
{
  sub_10000FD30(a1, a2);
}

void sub_10000FD30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;

  if (a2 < 0)
  {
    sub_10001D6A8();
    sub_10001D770((uint64_t)"Fatal error", v6, v7, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v8, v9, (uint64_t)"Swift/UnsafePointer.swift", v10, v11, v12, v13);
    __break(1u);
  }
  else
  {
    sub_10001E74C();
    if (v4 && (sub_10001DEE4(), sub_10001EC00(), !v5 & v4))
    {
      if (v3 == v2)
      {
        sub_10001E014();
      }
      else
      {
        sub_10001DC64();
        sub_10001E004();
      }
    }
    else
    {
      sub_10001DEE4();
      sub_10001DC64();
      sub_10001E024();
    }
  }
}

char *sub_10000FDB0(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_10001D6A8();
    result = (char *)sub_10001D770((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)sub_10001D79C(a3, result);
  }
  return result;
}

void sub_10000FE10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(_QWORD);
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;

  if (a2 < 0)
  {
    sub_10001D6A8();
    sub_10001D770((uint64_t)"Fatal error", v7, v8, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v9, v10, (uint64_t)"Swift/UnsafePointer.swift", v11, v12, v13, v14);
    __break(1u);
  }
  else
  {
    sub_10001E74C();
    if (v5 && (v4(0), sub_10001EC00(), !v6 & v5))
    {
      if (v3 == v2)
      {
        sub_10001E014();
      }
      else
      {
        sub_10001DC64();
        sub_10001E004();
      }
    }
    else
    {
      v4(0);
      sub_10001DC64();
      sub_10001E024();
    }
  }
}

uint64_t sub_10000FE98(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;

  if (a2 < 0)
  {
    sub_10001D6A8();
    sub_10001DB80();
  }
  else
  {
    if (a3 + 16 * a2 <= a1 || a1 + 16 * a2 <= a3)
      return sub_10001E278();
    sub_10001D6A8();
    sub_10001DB90();
  }
  result = sub_10001D7E0(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

uint64_t sub_10000FF30(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;

  if (a2 < 0)
  {
    sub_10001D6A8();
    sub_10001DB80();
  }
  else
  {
    sub_10001DDB0();
    v5 = v3 + 16 * v4;
    if (v2 + 16 * v4 > v3)
    {
      v6 = v5 >= v2;
      v7 = v5 == v2;
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
    if (v7 || !v6)
    {
      sub_100002F78(&qword_1000FB630);
      sub_10001DAD4();
      return sub_10001D854();
    }
    sub_10001D6A8();
    sub_10001DB90();
  }
  result = sub_10001D7E0(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19);
  __break(1u);
  return result;
}

uint64_t sub_10000FFCC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;

  if (a2 < 0)
  {
    sub_10001D6A8();
    sub_10001DB80();
  }
  else
  {
    if (a3 + 40 * a2 <= a1 || a1 + 40 * a2 <= a3)
      return sub_10001E278();
    sub_10001D6A8();
    sub_10001DB90();
  }
  result = sub_10001D7E0(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

uint64_t sub_100010068(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;

  if (a2 < 0)
  {
    sub_10001D6A8();
    sub_10001DB80();
  }
  else
  {
    sub_10001DDB0();
    v5 = v3 + 40 * v4;
    if (v2 + 40 * v4 > v3)
    {
      v6 = v5 >= v2;
      v7 = v5 == v2;
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
    if (v7 || !v6)
    {
      sub_100002F78(&qword_1000FB9C8);
      sub_10001DAD4();
      return sub_10001D854();
    }
    sub_10001D6A8();
    sub_10001DB90();
  }
  result = sub_10001D7E0(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19);
  __break(1u);
  return result;
}

uint64_t sub_100010108(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  if (a2 < 0)
  {
    sub_10001D6A8();
    sub_10001DB80();
  }
  else
  {
    sub_10001DDB0();
    sub_100002F78(v3);
    sub_10001E34C();
    if (!v6 && v5)
    {
      v5 = v4 >= v2;
      v6 = v4 == v2;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    if (v6 || !v5)
    {
      sub_10001DAD4();
      return sub_10001D854();
    }
    sub_10001D6A8();
    sub_10001DB90();
  }
  result = sub_10001D7E0(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t sub_100010198(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void (*v5)(_QWORD);
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  if (a2 < 0)
  {
    sub_10001D6A8();
    sub_10001DB80();
  }
  else
  {
    sub_10001DDB0();
    if (v4 + 8 * v3 <= v2 || v2 + 8 * v3 <= v4)
    {
      v5(0);
      sub_10001DAD4();
      return sub_10001D854();
    }
    sub_10001D6A8();
    sub_10001DB90();
  }
  result = sub_10001D7E0(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t sub_100010230(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  void (*v3)(_QWORD);
  unint64_t v4;
  char v5;
  char v6;
  BOOL v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;

  if (a2 < 0)
  {
    sub_10001D6A8();
    sub_10001DB80();
  }
  else
  {
    sub_10001DDB0();
    v3(0);
    sub_10001E34C();
    if (!v6 & v5)
      v7 = v4 > v2;
    else
      v7 = 0;
    if (!v7)
    {
      sub_10001DAD4();
      return sub_10001D854();
    }
    sub_10001D6A8();
    sub_10001DB90();
  }
  result = sub_10001D7E0(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19);
  __break(1u);
  return result;
}

void sub_1000102C0(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  void *ObjectType;

  v6 = sub_10001037C(v10, 0, 0, 1, a1, a2);
  if (v6)
  {
    v7 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v10[0] = v7;
    v8 = *a3;
    if (*a3)
    {
      sub_10001C7F0((uint64_t)v10, *a3);
      *a3 = v8 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v10[0] = a1;
    v10[1] = a2;
    v9 = *a3;
    if (*a3)
    {
      sub_10001C7F0((uint64_t)v10, *a3);
      *a3 = v9 + 32;
    }
    sub_10001E140();
  }
  sub_10000650C(v10);
  sub_10001E28C();
}

_QWORD *sub_10001037C(_QWORD *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  _QWORD *result;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_1000104D0((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
      result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = sub_100010594(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    v8 = _StringObject.sharedUTF8.getter(a5, a6);
    if (!v8)
    {
      result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25);
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return (_QWORD *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

void *sub_1000104D0(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) != 0)
  {
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory with negative count", 60, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 1170, 0);
  }
  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst)
      return memcpy(__dst, __src, __n);
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 1173, 0);
  }
  __break(1u);
  return result;
}

_QWORD *sub_100010594(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_100010628(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1000107FC(0, v2[2] + 1, 1, (uint64_t)v2);
  v4 = v2[2];
  v3 = v2[3];
  if (v4 >= v3 >> 1)
    v2 = sub_1000107FC((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  v2[2] = v4 + 1;
  *((_BYTE *)v2 + v4 + 32) = 0;
  return v2;
}

_QWORD *sub_100010628(uint64_t a1, unint64_t a2)
{
  Swift::Int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v4 = String.UTF8View._foreignCount()();
    if (v4)
      goto LABEL_6;
    return _swiftEmptyArrayStorage;
  }
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v4)
    return _swiftEmptyArrayStorage;
LABEL_6:
  v5 = sub_100010798(v4, 0);
  if (v4 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 71, 0);
    __break(1u);
    goto LABEL_14;
  }
  v6 = v5;
  v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
  if ((v8 & 1) != 0)
  {
LABEL_14:
    v9 = "Insufficient space allocated to copy string contents";
    v10 = "Swift/StringUTF8View.swift";
    v11 = 52;
    v12 = 26;
    goto LABEL_15;
  }
  if (v7 == v4)
    return v6;
  v9 = "invalid Collection: less than 'count' elements in collection";
  v10 = "Swift/ContiguousArrayBuffer.swift";
  v11 = 60;
  v12 = 33;
LABEL_15:
  result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v9, v11, 2, v10, v12);
  __break(1u);
  return result;
}

_QWORD *sub_100010798(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_100002F78(&qword_1000FB548);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

char *sub_1000107FC(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100002F78(&qword_1000FB548);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_10000FC64(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000108D0(v14, v8, v13);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_1000108D0(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) != 0)
  {
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst)
      return memcpy(__dst, __src, __n);
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

unint64_t sub_100010994(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _BYTE v7[72];

  sub_10001DC4C(*(_QWORD *)(v2 + 40), a2);
  String.hash(into:)(v7, a1, a2);
  v5 = sub_10001DBF4();
  return sub_100010AD0(a1, a2, v5);
}

unint64_t sub_1000109F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = sub_10001DEE4();
  sub_100006744(&qword_1000FB2A8, &qword_1000FB2A0);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_100010BB0(a1, v7);
}

unint64_t sub_100010A64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for UUID(0);
  sub_100006710(&qword_1000FB638, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_100010CF4(a1, v7);
}

unint64_t sub_100010AD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_100010BB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v18 = a1;
  v5 = sub_100002F78(&qword_1000FB2A0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      sub_100006744(&qword_1000FB808, &qword_1000FB2A0);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_100010CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v18 = a1;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      sub_100006710(&qword_1000FB640, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

uint64_t sub_100010E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = type metadata accessor for Policy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a4, v8);
  swift_bridgeObjectRetain(a3);
  return a2;
}

uint64_t sub_100010E94@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = (uint64_t)a1 + *(int *)(sub_100002F78(&qword_1000FB678) + 48);
  v5 = sub_100002F78(&qword_1000FB680);
  result = sub_100010E34((uint64_t)a2 + *(int *)(v5 + 48), *a1, a1[1], v4);
  *a2 = result;
  a2[1] = v7;
  return result;
}

uint64_t sub_100010EF4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  char v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  _QWORD *v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  Swift::String v58;
  Swift::String v59;
  _QWORD v60[2];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75[6];
  uint64_t v76;
  uint64_t v77;

  v64 = a8;
  v65 = a6;
  v62 = a7;
  v70 = a5;
  v67 = type metadata accessor for Policy(0);
  sub_10001E6B4();
  __chkstk_darwin(v15);
  sub_10001E684();
  v18 = v16 - v17;
  __chkstk_darwin(v19);
  sub_10001E4DC();
  __chkstk_darwin(v20);
  v22 = (char *)v60 - v21;
  sub_100002F78(&qword_1000FB688);
  sub_10001DD00();
  __chkstk_darwin(v23);
  sub_10001DEA0();
  sub_10001B9A8(a1, a2, a3, v75);
  v61 = a1;
  sub_10001DBE4();
  v60[1] = a3;
  swift_retain(a3);
  sub_10001C3B0((uint64_t)v10);
  v24 = sub_100002F78(&qword_1000FB680);
  if (sub_100005700((uint64_t)v10, 1, v24) == 1)
  {
LABEL_2:
    sub_10001EA40();
    swift_bridgeObjectRelease(v61);
    sub_10001E5DC();
    v25 = v76;
    sub_10001DFC0();
    return swift_release(v25);
  }
  v69 = *(_QWORD *)(v9 + 32);
  v66 = v10;
  v63 = v8;
  while (1)
  {
    v27 = v18;
    v28 = v9;
    v29 = (uint64_t)v10 + *(int *)(v24 + 48);
    v31 = *v10;
    v30 = v10[1];
    v73 = *v10;
    v74 = v30;
    v32 = (uint64_t)v22;
    sub_10001EA8C((uint64_t)v22, v29);
    v33 = *(_QWORD **)v70;
    v35 = sub_10001E950();
    v36 = v33[2];
    v37 = (v34 & 1) == 0;
    v38 = v36 + v37;
    if (__OFADD__(v36, v37))
    {
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      sub_10001DFC0();
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      goto LABEL_22;
    }
    v39 = v34;
    if (v33[3] >= v38)
    {
      if ((a4 & 1) == 0)
      {
        sub_100002F78(&qword_1000FB690);
        _NativeDictionary.copy()();
      }
    }
    else
    {
      sub_1000113A0(v38, a4 & 1);
      v40 = sub_10001E950();
      if ((v39 & 1) != (v41 & 1))
        goto LABEL_21;
      v35 = v40;
    }
    v42 = *(_QWORD **)v70;
    if ((v39 & 1) != 0)
      break;
    v42[(v35 >> 6) + 8] |= 1 << v35;
    v51 = (_QWORD *)(v42[6] + 16 * v35);
    *v51 = v31;
    v51[1] = v30;
    v9 = v28;
    v22 = (char *)v32;
    sub_10001EA8C(v42[7] + *(_QWORD *)(v28 + 72) * v35, v32);
    v52 = v42[2];
    v53 = __OFADD__(v52, 1);
    v54 = v52 + 1;
    if (v53)
      goto LABEL_20;
    v42[2] = v54;
    v18 = v27;
LABEL_15:
    v10 = v66;
    sub_10001C3B0((uint64_t)v66);
    v24 = sub_100002F78(&qword_1000FB680);
    a4 = 1;
    if (sub_100005700((uint64_t)v10, 1, v24) == 1)
      goto LABEL_2;
  }
  v43 = v42[7];
  v9 = v28;
  v44 = *(_QWORD *)(v28 + 72) * v35;
  v45 = v43 + v44;
  v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16);
  v18 = v27;
  v47 = v67;
  v46(v27, v45, v67);
  v48 = v63;
  v22 = (char *)v32;
  v49 = v68;
  v64(v18, v32, v65);
  if (!v49)
  {
    v68 = 0;
    v50 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v50(v18, v47);
    v50(v32, v47);
    swift_bridgeObjectRelease(v74);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v9 + 40))(*(_QWORD *)(*(_QWORD *)v70 + 56) + v44, v48, v47);
    goto LABEL_15;
  }
  v55 = v18;
  v56 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v56(v55, v47);
  v77 = v49;
  swift_errorRetain(v49);
  v57 = sub_100002F78(&qword_1000FB5F8);
  if ((swift_dynamicCast(v57, &v77, v57, &type metadata for _MergeError, 0) & 1) == 0)
  {
    sub_10001EA40();
    swift_bridgeObjectRelease(v61);
    v56(v32, v47);
    swift_bridgeObjectRelease(v74);
    sub_10001E5DC();
    swift_release(v76);
    swift_errorRelease(v77);
    return sub_10001DFC0();
  }
LABEL_22:
  v71 = 0;
  v72 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v58._object = (void *)0x80000001000CDAF0;
  v58._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v58);
  _print_unlocked<A, B>(_:_:)(&v73, &v71, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v59._countAndFlagsBits = 39;
  v59._object = (void *)0xE100000000000000;
  String.append(_:)(v59);
  sub_10001DFC0();
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v71, v72, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

Swift::Int sub_1000113A0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  Swift::Int result;
  int64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  int v44;
  char *v45;
  uint64_t v46;
  _QWORD v47[9];

  v3 = v2;
  v46 = type metadata accessor for Policy(0);
  v6 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v45 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_100002F78(&qword_1000FB698);
  v44 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_40;
  v41 = v3;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v43 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v42 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain(v8);
  v17 = 0;
  if (!v14)
    goto LABEL_9;
LABEL_8:
  v18 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  for (i = v18 | (v17 << 6); ; i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    v23 = *(_QWORD *)(v8 + 56);
    v24 = v8;
    v25 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * i);
    v27 = *v25;
    v26 = v25[1];
    v28 = *(_QWORD *)(v6 + 72);
    v29 = v23 + v28 * i;
    if ((v44 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v45, v29, v46);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v45, v29, v46);
      swift_bridgeObjectRetain(v26);
    }
    Hasher.init(_seed:)(v47, *(_QWORD *)(v10 + 40));
    String.hash(into:)(v47, v27, v26);
    result = Hasher._finalize()();
    v30 = -1 << *(_BYTE *)(v10 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v15 + 8 * (v31 >> 6))) == 0)
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v30) >> 6;
      while (++v32 != v35 || (v34 & 1) == 0)
      {
        v36 = v32 == v35;
        if (v32 == v35)
          v32 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v15 + 8 * v32);
        if (v37 != -1)
        {
          v33 = __clz(__rbit64(~v37)) + (v32 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    v33 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v15 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v15 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
    v38 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v33);
    *v38 = v27;
    v38[1] = v26;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v10 + 56) + v28 * v33, v45, v46);
    ++*(_QWORD *)(v10 + 16);
    v8 = v24;
    if (v14)
      goto LABEL_8;
LABEL_9:
    v20 = v17 + 1;
    if (__OFADD__(v17, 1))
      goto LABEL_42;
    if (v20 >= v42)
      goto LABEL_35;
    v21 = v43[v20];
    ++v17;
    if (!v21)
    {
      v17 = v20 + 1;
      if (v20 + 1 >= v42)
        goto LABEL_35;
      v21 = v43[v17];
      if (!v21)
        break;
    }
LABEL_20:
    v14 = (v21 - 1) & v21;
  }
  v22 = v20 + 2;
  if (v22 < v42)
  {
    v21 = v43[v22];
    if (!v21)
    {
      while (1)
      {
        v17 = v22 + 1;
        if (__OFADD__(v22, 1))
          goto LABEL_43;
        if (v17 >= v42)
          goto LABEL_35;
        v21 = v43[v17];
        ++v22;
        if (v21)
          goto LABEL_20;
      }
    }
    v17 = v22;
    goto LABEL_20;
  }
LABEL_35:
  swift_release(v8);
  v3 = v41;
  if ((v44 & 1) != 0)
  {
    v39 = 1 << *(_BYTE *)(v8 + 32);
    if (v39 >= 64)
      sub_100011704(0, (unint64_t)(v39 + 63) >> 6, v43);
    else
      *v43 = -1 << v39;
    *(_QWORD *)(v8 + 16) = 0;
  }
LABEL_40:
  result = swift_release(v8);
  *v3 = v10;
  return result;
}

uint64_t sub_100011704(uint64_t result, uint64_t a2, _QWORD *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

void sub_100011720(char a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;

  sub_100011968(a1, a2, a3, *v3);
  *v3 = v4;
}

void sub_10001173C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100011C00();
  *v0 = v1;
}

void sub_100011768()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100011B0C();
  *v0 = v1;
}

char *sub_100011794(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_100011A24(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

void sub_1000117B0()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100011B0C();
  *v0 = v1;
}

void sub_1000117DC()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100011B0C();
  *v0 = v1;
}

void sub_100011808()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100011B0C();
  *v0 = v1;
}

void sub_100011834()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100011B0C();
  *v0 = v1;
}

void sub_100011860()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100011B0C();
  *v0 = v1;
}

void sub_10001188C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100011B0C();
  *v0 = v1;
}

void sub_1000118B8()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100011B0C();
  *v0 = v1;
}

void sub_1000118E4()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100011B0C();
  *v0 = v1;
}

void sub_100011910()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100011C00();
  *v0 = v1;
}

void sub_10001193C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100011B0C();
  *v0 = v1;
}

void sub_100011968(char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;

  if ((a3 & 1) != 0)
  {
    sub_10001E508();
    if (v7 != v8)
    {
      if (v6 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return;
      }
      sub_10001E4F8();
    }
  }
  else
  {
    v6 = a2;
  }
  v9 = *(_QWORD *)(a4 + 16);
  if (v6 <= v9)
    v10 = *(_QWORD *)(a4 + 16);
  else
    v10 = v6;
  if (v10)
  {
    v11 = sub_100002F78(&qword_1000FB558);
    v12 = (char *)sub_100006A80(v11, 16 * v10 + 32);
    j__malloc_size(v12);
    sub_10001E95C();
    *((_QWORD *)v12 + 2) = v9;
    *((_QWORD *)v12 + 3) = v13;
  }
  else
  {
    v12 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v12 + 32;
  v15 = (char *)(a4 + 32);
  if ((a1 & 1) != 0)
  {
    sub_10000FB30(v15, v9, v14);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10000FE98((unint64_t)v15, v9, (unint64_t)v14);
  }
  sub_10001D930();
}

char *sub_100011A24(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100002F78(&qword_1000FB658);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_10000FB98(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10000FFCC((unint64_t)v14, v8, (unint64_t)v13);
  }
  swift_release(a4);
  return v11;
}

void sub_100011B0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t (*v4)(_QWORD);
  uint64_t (*v5)(_QWORD);
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  size_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  sub_10001E9F8();
  v5 = v4;
  v7 = v6;
  v9 = v8;
  if ((v10 & 1) != 0)
  {
    sub_10001E508();
    if (v12 != v13)
    {
      if (v11 + 0x4000000000000000 < 0)
      {
LABEL_23:
        __break(1u);
        return;
      }
      sub_10001E4F8();
    }
  }
  else
  {
    v11 = v2;
  }
  v14 = *(_QWORD *)(v7 + 16);
  if (v11 <= v14)
    v15 = *(_QWORD *)(v7 + 16);
  else
    v15 = v11;
  if (!v15)
    goto LABEL_17;
  sub_100002F78(v3);
  v16 = v5(0);
  v17 = (_QWORD *)sub_10001DD2C(v16);
  v18 = j__malloc_size(v17);
  if (!v0)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v18 - v1 == 0x8000000000000000 && v0 == -1)
    goto LABEL_22;
  v17[2] = v14;
  v17[3] = 2 * ((uint64_t)(v18 - v1) / v0);
LABEL_17:
  v20 = v5(0);
  v21 = sub_10001E03C(v20);
  if ((v9 & 1) != 0)
  {
    sub_10000FE10(v21, v22);
    *(_QWORD *)(v7 + 16) = 0;
  }
  else
  {
    sub_100010230(v21, v22);
  }
  sub_10001D930();
  sub_10001D950();
}

void sub_100011BEC()
{
  sub_100011B0C();
}

void sub_100011C00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_10001E9F8();
  v5 = v4;
  v7 = v6;
  if ((v8 & 1) != 0)
  {
    sub_10001E508();
    if (v10 != v11)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
LABEL_23:
        __break(1u);
        return;
      }
      sub_10001E4F8();
    }
  }
  else
  {
    v9 = v2;
  }
  v12 = *(_QWORD *)(v5 + 16);
  if (v9 <= v12)
    v13 = *(_QWORD *)(v5 + 16);
  else
    v13 = v9;
  if (!v13)
    goto LABEL_17;
  sub_100002F78(v3);
  v14 = sub_10001E76C();
  v15 = (_QWORD *)sub_10001DD2C(v14);
  v16 = j__malloc_size(v15);
  if (!v0)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v16 - v1 == 0x8000000000000000 && v0 == -1)
    goto LABEL_22;
  v15[2] = v12;
  v15[3] = 2 * ((uint64_t)(v16 - v1) / v0);
LABEL_17:
  v18 = sub_10001E76C();
  v19 = sub_10001E03C(v18);
  if ((v7 & 1) != 0)
  {
    sub_10000FD30(v19, v20);
    *(_QWORD *)(v5 + 16) = 0;
  }
  else
  {
    sub_100010108(v19, v20);
  }
  sub_10001D930();
  sub_10001D950();
}

#error "100011E98: call analysis failed (funcsize=130)"

uint64_t sub_100011F0C(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD, _QWORD, _QWORD);
  uint64_t v22;
  void (*v23)(_QWORD, _QWORD, _QWORD);
  uint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  char *v29;
  uint64_t v30;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;

  v3 = v2;
  v6 = type metadata accessor for Assertion.DaemonRep(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  sub_100006710(&qword_1000FB278, v12);
  v14 = v13;
  swift_bridgeObjectRetain(v10);
  v36 = a2;
  v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v14);
  v16 = -1 << *(_BYTE *)(v10 + 32);
  v17 = v15 & ~v16;
  v18 = v10;
  v19 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
  {
    v32 = v3;
    v33 = a1;
    v34 = ~v16;
    v35 = v7;
    v20 = *(_QWORD *)(v7 + 72);
    v21 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v22 = v18;
      v23 = v21;
      v21(v9, *(_QWORD *)(v18 + 48) + v20 * v17, v6);
      sub_100006710(&qword_1000FB280, (uint64_t (*)(uint64_t))&type metadata accessor for Assertion.DaemonRep);
      v25 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v36, v6, v24);
      v26 = *(void (**)(char *, uint64_t))(v35 + 8);
      v26(v9, v6);
      if ((v25 & 1) != 0)
        break;
      v17 = (v17 + 1) & v34;
      v18 = v22;
      v21 = v23;
      if (((*(_QWORD *)(v19 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
      {
        swift_bridgeObjectRelease(v22);
        v3 = v32;
        a1 = v33;
        v27 = v35;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v22);
    v26(v36, v6);
    v23(v33, *(_QWORD *)(*v32 + 48) + v20 * v17, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v21 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v27 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v29 = v36;
    v21(v9, v36, v6);
    v37 = *v3;
    *v3 = 0x8000000000000000;
    sub_100015C28((uint64_t)v9, v17, isUniquelyReferenced_nonNull_native);
    v30 = *v3;
    *v3 = v37;
    swift_bridgeObjectRelease(v30);
    (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(a1, v29, v6);
    return 1;
  }
}

void sub_100012168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  Swift::Int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  BOOL v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t *v52;
  uint64_t v53;
  BOOL v54;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v56;

  sub_10001DA08();
  a29 = v31;
  a30 = v32;
  v34 = v33;
  v36 = v35;
  v38 = v37;
  v39 = *v30;
  sub_10001DC4C(*(_QWORD *)(*v30 + 40), v35);
  sub_10001E4D4();
  String.hash(into:)(&a10, v36, v34);
  v40 = sub_10001DBF4();
  v41 = -1 << *(_BYTE *)(v39 + 32);
  v42 = v40 & ~v41;
  sub_10001E8D8();
  if ((v43 & 1) == 0)
  {
LABEL_16:
    sub_100006C48();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v30);
    a10 = *v30;
    *v30 = 0x8000000000000000;
    sub_10001E3E0();
    sub_100015E7C(v36, v34, v42, isUniquelyReferenced_nonNull_native);
    v56 = *v30;
    *v30 = a10;
    swift_bridgeObjectRelease(v56);
    *v38 = v36;
    v38[1] = v34;
    goto LABEL_17;
  }
  v44 = *(_QWORD *)(v39 + 48);
  v45 = (uint64_t *)(v44 + 16 * v42);
  v46 = v45[1];
  v47 = *v45 == v36 && v46 == v34;
  if (!v47 && (sub_10001DB04(*v45, v46, v36, v34) & 1) == 0)
  {
    v50 = ~v41;
    do
    {
      v42 = (v42 + 1) & v50;
      sub_10001E8D8();
      if ((v51 & 1) == 0)
        goto LABEL_16;
      v52 = (uint64_t *)(v44 + 16 * v42);
      v53 = v52[1];
      v54 = *v52 == v36 && v53 == v34;
    }
    while (!v54 && (sub_10001DB04(*v52, v53, v36, v34) & 1) == 0);
  }
  swift_bridgeObjectRelease(v34);
  sub_100006C48();
  v48 = (uint64_t *)(*(_QWORD *)(*v30 + 48) + 16 * v42);
  v49 = v48[1];
  *v38 = *v48;
  v38[1] = v49;
  swift_bridgeObjectRetain(v49);
LABEL_17:
  sub_10001DFCC();
}

void sub_1000122B8()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  BOOL v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t *v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[9];

  sub_10001D810();
  v2 = v0;
  v4 = v3;
  v5 = sub_10001E5EC();
  v52 = type metadata accessor for ModelCatalogAsset(v5);
  v6 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  sub_10001E684();
  v9 = (uint64_t *)(v7 - v8);
  __chkstk_darwin(v10);
  v12 = (char *)&v49 - v11;
  v13 = *v0;
  Hasher.init(_seed:)(v56, *(_QWORD *)(*v0 + 40));
  swift_bridgeObjectRetain(v13);
  sub_1000499E4((uint64_t)v56);
  Hasher._finalize()();
  sub_10001DED8();
  v16 = v15 & ~v14;
  v55 = v13 + 56;
  v17 = *(_QWORD *)(v13 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16;
  v51 = v12;
  if ((v17 & 1) != 0)
  {
    v49 = v0;
    v50 = v1;
    v53 = ~v14;
    v54 = *(_QWORD *)(v6 + 72);
    v18 = type metadata accessor for ModelCatalogAsset;
    while (1)
    {
      v19 = v18;
      sub_10001D2E0();
      v20 = v9[1];
      v21 = v4[1];
      v22 = *v9 == *v4 && v20 == v21;
      if (v22 || (sub_10001DB04(*v9, v20, *v4, v21) & 1) != 0)
      {
        v23 = (_QWORD *)v9[2];
        v24 = (_QWORD *)v4[2];
        v25 = v23[2];
        if (v25 == v24[2])
        {
          if (v25)
            v26 = v23 == v24;
          else
            v26 = 1;
          if (v26)
            goto LABEL_14;
          v28 = v23[4];
          v29 = v23[5];
          v30 = v24[4];
          v31 = v24[5];
          v32 = v28 == v30 && v29 == v31;
          if (v32 || (sub_10001DB04(v28, v29, v30, v31) & 1) != 0)
          {
            if (v25 == 1)
              goto LABEL_14;
            v33 = v23[6];
            v34 = v23[7];
            v35 = v24[6];
            v36 = v24[7];
            v37 = v33 == v35 && v34 == v36;
            if (v37 || (sub_10001DB04(v33, v34, v35, v36) & 1) != 0)
              break;
          }
        }
      }
LABEL_44:
      v18 = v19;
      sub_10001CBA0((uint64_t)v9, v19);
      v16 = (v16 + 1) & v53;
      if (((*(_QWORD *)(v55 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        sub_10001E420();
        v2 = v49;
        v1 = v50;
        goto LABEL_47;
      }
    }
    if (v25 != 2)
    {
      v38 = v24 + 9;
      v39 = v23 + 9;
      v40 = 2;
      while (v40 < v25)
      {
        v41 = *(v39 - 1);
        v42 = *v39;
        v43 = *(v38 - 1);
        v44 = *v38;
        v45 = v41 == v43 && v42 == v44;
        if (!v45 && (sub_10001DB04(v41, v42, v43, v44) & 1) == 0)
          goto LABEL_44;
        ++v40;
        v38 += 2;
        v39 += 2;
        if (v25 == v40)
          goto LABEL_14;
      }
      __break(1u);
      return;
    }
LABEL_14:
    sub_1000BE098();
    if ((v27 & 1) != 0
      && (static AssetCost.== infix(_:_:)((char *)v9 + *(int *)(v52 + 28), (char *)v4 + *(int *)(v52 + 28)) & 1) != 0)
    {
      sub_10001E398();
      if (v22)
      {
        sub_10001E398();
        if (v22)
        {
          sub_10001E398();
          if (v22)
          {
            sub_10001CBA0((uint64_t)v9, type metadata accessor for ModelCatalogAsset);
            sub_10001E420();
            sub_10001CBA0((uint64_t)v4, type metadata accessor for ModelCatalogAsset);
            sub_10001D2E0();
            goto LABEL_48;
          }
        }
      }
    }
    goto LABEL_44;
  }
  sub_10001E420();
LABEL_47:
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v47 = v51;
  sub_10001D2E0();
  v56[0] = *v2;
  *v2 = 0x8000000000000000;
  sub_100016014(v47, v16, isUniquelyReferenced_nonNull_native);
  v48 = *v2;
  *v2 = v56[0];
  swift_bridgeObjectRelease(v48);
  sub_10001CB5C((uint64_t)v4, v1);
LABEL_48:
  sub_100006A68();
}

#error "1000127A4: call analysis failed (funcsize=130)"

#error "100012954: call analysis failed (funcsize=120)"

uint64_t sub_1000129F8(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD, _QWORD, _QWORD);
  uint64_t v22;
  void (*v23)(_QWORD, _QWORD, _QWORD);
  uint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  char *v29;
  uint64_t v30;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;

  v3 = v2;
  v6 = type metadata accessor for InferenceProviderAssetDescriptor(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  sub_100006710(&qword_1000FB7D8, v12);
  v14 = v13;
  swift_bridgeObjectRetain(v10);
  v36 = a2;
  v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v14);
  v16 = -1 << *(_BYTE *)(v10 + 32);
  v17 = v15 & ~v16;
  v18 = v10;
  v19 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
  {
    v32 = v3;
    v33 = a1;
    v34 = ~v16;
    v35 = v7;
    v20 = *(_QWORD *)(v7 + 72);
    v21 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v22 = v18;
      v23 = v21;
      v21(v9, *(_QWORD *)(v18 + 48) + v20 * v17, v6);
      sub_100006710(&qword_1000FB7E0, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
      v25 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v36, v6, v24);
      v26 = *(void (**)(char *, uint64_t))(v35 + 8);
      v26(v9, v6);
      if ((v25 & 1) != 0)
        break;
      v17 = (v17 + 1) & v34;
      v18 = v22;
      v21 = v23;
      if (((*(_QWORD *)(v19 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
      {
        swift_bridgeObjectRelease(v22);
        v3 = v32;
        a1 = v33;
        v27 = v35;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v22);
    v26(v36, v6);
    v23(v33, *(_QWORD *)(*v32 + 48) + v20 * v17, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v21 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v27 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v29 = v36;
    v21(v9, v36, v6);
    v37 = *v3;
    *v3 = 0x8000000000000000;
    sub_100016774((uint64_t)v9, v17, isUniquelyReferenced_nonNull_native);
    v30 = *v3;
    *v3 = v37;
    swift_bridgeObjectRelease(v30);
    (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(a1, v29, v6);
    return 1;
  }
}

uint64_t sub_100012C54(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD, _QWORD, _QWORD);
  uint64_t v22;
  void (*v23)(_QWORD, _QWORD, _QWORD);
  uint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  char *v29;
  uint64_t v30;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;

  v3 = v2;
  v6 = type metadata accessor for StateDump.AssetState(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  sub_100006710(&qword_1000FB980, v12);
  v14 = v13;
  swift_bridgeObjectRetain(v10);
  v36 = a2;
  v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v14);
  v16 = -1 << *(_BYTE *)(v10 + 32);
  v17 = v15 & ~v16;
  v18 = v10;
  v19 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
  {
    v32 = v3;
    v33 = a1;
    v34 = ~v16;
    v35 = v7;
    v20 = *(_QWORD *)(v7 + 72);
    v21 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v22 = v18;
      v23 = v21;
      v21(v9, *(_QWORD *)(v18 + 48) + v20 * v17, v6);
      sub_100006710(&qword_1000FB988, (uint64_t (*)(uint64_t))&type metadata accessor for StateDump.AssetState);
      v25 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v36, v6, v24);
      v26 = *(void (**)(char *, uint64_t))(v35 + 8);
      v26(v9, v6);
      if ((v25 & 1) != 0)
        break;
      v17 = (v17 + 1) & v34;
      v18 = v22;
      v21 = v23;
      if (((*(_QWORD *)(v19 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
      {
        swift_bridgeObjectRelease(v22);
        v3 = v32;
        a1 = v33;
        v27 = v35;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v22);
    v26(v36, v6);
    v23(v33, *(_QWORD *)(*v32 + 48) + v20 * v17, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v21 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v27 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v29 = v36;
    v21(v9, v36, v6);
    v37 = *v3;
    *v3 = 0x8000000000000000;
    sub_1000169C8((uint64_t)v9, v17, isUniquelyReferenced_nonNull_native);
    v30 = *v3;
    *v3 = v37;
    swift_bridgeObjectRelease(v30);
    (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(a1, v29, v6);
    return 1;
  }
}

uint64_t sub_100012EB0(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD, _QWORD, _QWORD);
  uint64_t v22;
  void (*v23)(_QWORD, _QWORD, _QWORD);
  uint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  char *v29;
  uint64_t v30;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;

  v3 = v2;
  v6 = type metadata accessor for StateDump.SessionState(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  sub_100006710(&qword_1000FB960, v12);
  v14 = v13;
  swift_bridgeObjectRetain(v10);
  v36 = a2;
  v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v14);
  v16 = -1 << *(_BYTE *)(v10 + 32);
  v17 = v15 & ~v16;
  v18 = v10;
  v19 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
  {
    v32 = v3;
    v33 = a1;
    v34 = ~v16;
    v35 = v7;
    v20 = *(_QWORD *)(v7 + 72);
    v21 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v22 = v18;
      v23 = v21;
      v21(v9, *(_QWORD *)(v18 + 48) + v20 * v17, v6);
      sub_100006710(&qword_1000FB968, (uint64_t (*)(uint64_t))&type metadata accessor for StateDump.SessionState);
      v25 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v36, v6, v24);
      v26 = *(void (**)(char *, uint64_t))(v35 + 8);
      v26(v9, v6);
      if ((v25 & 1) != 0)
        break;
      v17 = (v17 + 1) & v34;
      v18 = v22;
      v21 = v23;
      if (((*(_QWORD *)(v19 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
      {
        swift_bridgeObjectRelease(v22);
        v3 = v32;
        a1 = v33;
        v27 = v35;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v22);
    v26(v36, v6);
    v23(v33, *(_QWORD *)(*v32 + 48) + v20 * v17, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v21 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v27 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v29 = v36;
    v21(v9, v36, v6);
    v37 = *v3;
    *v3 = 0x8000000000000000;
    sub_100016C1C((uint64_t)v9, v17, isUniquelyReferenced_nonNull_native);
    v30 = *v3;
    *v3 = v37;
    swift_bridgeObjectRelease(v30);
    (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(a1, v29, v6);
    return 1;
  }
}

uint64_t sub_10001310C(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD, _QWORD, _QWORD);
  uint64_t v22;
  void (*v23)(_QWORD, _QWORD, _QWORD);
  uint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  char *v29;
  uint64_t v30;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;

  v3 = v2;
  v6 = type metadata accessor for StateDump.RequestState(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  sub_100006710(&qword_1000FB930, v12);
  v14 = v13;
  swift_bridgeObjectRetain(v10);
  v36 = a2;
  v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v14);
  v16 = -1 << *(_BYTE *)(v10 + 32);
  v17 = v15 & ~v16;
  v18 = v10;
  v19 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
  {
    v32 = v3;
    v33 = a1;
    v34 = ~v16;
    v35 = v7;
    v20 = *(_QWORD *)(v7 + 72);
    v21 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v22 = v18;
      v23 = v21;
      v21(v9, *(_QWORD *)(v18 + 48) + v20 * v17, v6);
      sub_100006710(&qword_1000FB938, (uint64_t (*)(uint64_t))&type metadata accessor for StateDump.RequestState);
      v25 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v36, v6, v24);
      v26 = *(void (**)(char *, uint64_t))(v35 + 8);
      v26(v9, v6);
      if ((v25 & 1) != 0)
        break;
      v17 = (v17 + 1) & v34;
      v18 = v22;
      v21 = v23;
      if (((*(_QWORD *)(v19 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
      {
        swift_bridgeObjectRelease(v22);
        v3 = v32;
        a1 = v33;
        v27 = v35;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v22);
    v26(v36, v6);
    v23(v33, *(_QWORD *)(*v32 + 48) + v20 * v17, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v21 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v27 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v29 = v36;
    v21(v9, v36, v6);
    v37 = *v3;
    *v3 = 0x8000000000000000;
    sub_100016E70((uint64_t)v9, v17, isUniquelyReferenced_nonNull_native);
    v30 = *v3;
    *v3 = v37;
    swift_bridgeObjectRelease(v30);
    (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(a1, v29, v6);
    return 1;
  }
}

uint64_t sub_100013368(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t active;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD, _QWORD, _QWORD);
  uint64_t v22;
  void (*v23)(_QWORD, _QWORD, _QWORD);
  uint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  char *v29;
  uint64_t v30;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;

  v3 = v2;
  active = type metadata accessor for StateDump.InferenceProviderState.ActiveRequest(0);
  v7 = *(_QWORD *)(active - 8);
  __chkstk_darwin(active);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  sub_100006710(&qword_1000FB900, v12);
  v14 = v13;
  swift_bridgeObjectRetain(v10);
  v36 = a2;
  v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, active, v14);
  v16 = -1 << *(_BYTE *)(v10 + 32);
  v17 = v15 & ~v16;
  v18 = v10;
  v19 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
  {
    v32 = v3;
    v33 = a1;
    v34 = ~v16;
    v35 = v7;
    v20 = *(_QWORD *)(v7 + 72);
    v21 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v22 = v18;
      v23 = v21;
      v21(v9, *(_QWORD *)(v18 + 48) + v20 * v17, active);
      sub_100006710(&qword_1000FB908, (uint64_t (*)(uint64_t))&type metadata accessor for StateDump.InferenceProviderState.ActiveRequest);
      v25 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v36, active, v24);
      v26 = *(void (**)(char *, uint64_t))(v35 + 8);
      v26(v9, active);
      if ((v25 & 1) != 0)
        break;
      v17 = (v17 + 1) & v34;
      v18 = v22;
      v21 = v23;
      if (((*(_QWORD *)(v19 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
      {
        swift_bridgeObjectRelease(v22);
        v3 = v32;
        a1 = v33;
        v27 = v35;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v22);
    v26(v36, active);
    v23(v33, *(_QWORD *)(*v32 + 48) + v20 * v17, active);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v21 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v27 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v29 = v36;
    v21(v9, v36, active);
    v37 = *v3;
    *v3 = 0x8000000000000000;
    sub_1000170C4((uint64_t)v9, v17, isUniquelyReferenced_nonNull_native);
    v30 = *v3;
    *v3 = v37;
    swift_bridgeObjectRelease(v30);
    (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(a1, v29, active);
    return 1;
  }
}

void sub_1000135C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(void);
  uint64_t v19;
  void (*v20)(void);
  uint64_t v21;
  uint64_t v22;
  char v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  _QWORD *v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  sub_10001D810();
  v3 = v0;
  v5 = v4;
  v6 = sub_10001E5EC();
  v7 = type metadata accessor for StateDump.InferenceProviderState(v6);
  v8 = *(_QWORD **)(v7 - 8);
  __chkstk_darwin(v7);
  sub_10001E66C();
  v9 = *v3;
  v10 = *(_QWORD *)(*v3 + 40);
  sub_100006710(&qword_1000FB8E8, v11);
  v13 = v12;
  swift_bridgeObjectRetain(v9);
  v32 = v5;
  sub_10001EB4C(v10);
  sub_10001E3A8();
  v15 = v9;
  v16 = v9 + 56;
  if (((*(_QWORD *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v29 = v3;
    v30 = v1;
    v31 = ~v14;
    v17 = v8[9];
    v18 = (void (*)(void))v8[2];
    while (1)
    {
      v19 = v15;
      v20 = v18;
      ((void (*)(uint64_t, unint64_t, uint64_t))v18)(v2, *(_QWORD *)(v15 + 48) + v17 * v13, v7);
      sub_100006710(&qword_1000FB8F0, (uint64_t (*)(uint64_t))&type metadata accessor for StateDump.InferenceProviderState);
      v23 = sub_10001E304(v2, v32, v22, v21);
      v24 = (void (*)(uint64_t, uint64_t))v8[1];
      v24(v2, v7);
      if ((v23 & 1) != 0)
        break;
      v13 = (v13 + 1) & v31;
      sub_10001EB40();
      v15 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v16 + v25) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease(v19);
        v3 = v29;
        v1 = v30;
        v26 = v8;
        goto LABEL_7;
      }
    }
    sub_10001E8A8();
    v24(v32, v7);
    sub_10001EA0C();
    v20();
  }
  else
  {
    swift_bridgeObjectRelease(v9);
    v18 = (void (*)(void))v8[2];
    v26 = v8;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    sub_10001E91C();
    v18();
    v33 = *v3;
    *v3 = 0x8000000000000000;
    sub_100017318(v2, v13, isUniquelyReferenced_nonNull_native);
    v28 = *v3;
    *v3 = v33;
    swift_bridgeObjectRelease(v28);
    sub_10001DE08(v1, v32, (uint64_t (*)(uint64_t, uint64_t, uint64_t))v26[4]);
  }
  sub_100006A68();
}

void sub_1000137BC()
{
  sub_1000137E0();
}

void sub_1000137E0()
{
  _QWORD *v0;
  unint64_t *v1;
  unint64_t *v2;
  unint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(void);
  void (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  char v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t *v35;
  uint64_t v36;

  sub_10001D810();
  v35 = v1;
  v3 = v2;
  v5 = v4;
  v6 = v0;
  v8 = v7;
  v10 = v9;
  v11 = sub_100002F78(v4);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_10001E168();
  v15 = v14 - v13;
  v16 = *v0;
  v17 = *(_QWORD *)(*v0 + 40);
  v34 = v5;
  sub_100006744(v3, v5);
  v19 = v18;
  sub_10001DBE4();
  sub_10001EB4C(v17);
  sub_10001E3A8();
  if (((*(_QWORD *)(v16 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
  {
    v31 = v6;
    v32 = ~v20;
    v21 = v12;
    v22 = *(_QWORD *)(v12 + 72);
    v33 = v21;
    v23 = *(void (**)(void))(v21 + 16);
    while (1)
    {
      v24 = v23;
      ((void (*)(uint64_t, unint64_t, uint64_t))v23)(v15, *(_QWORD *)(v16 + 48) + v22 * v19, v11);
      sub_100006744(v35, v34);
      v27 = sub_10001E304(v15, v8, v26, v25);
      v28 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
      v28(v15, v11);
      if ((v27 & 1) != 0)
        break;
      v19 = (v19 + 1) & v32;
      sub_10001EB40();
      v23 = v24;
      if (((*(_QWORD *)(v16 + 56 + v29) >> v19) & 1) == 0)
      {
        sub_10001DA38();
        v6 = v31;
        v12 = v33;
        goto LABEL_7;
      }
    }
    sub_10001E420();
    v28(v8, v11);
    sub_10001EA0C();
    v24();
  }
  else
  {
    sub_10001DA38();
    v23 = *(void (**)(void))(v12 + 16);
LABEL_7:
    swift_isUniquelyReferenced_nonNull_native(*v6);
    ((void (*)(uint64_t, uint64_t, uint64_t))v23)(v15, v8, v11);
    v36 = *v6;
    *v6 = 0x8000000000000000;
    sub_1000176B4();
    v30 = *v6;
    *v6 = v36;
    swift_bridgeObjectRelease(v30);
    sub_10001DE08(v10, v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 32));
  }
  sub_100006A68();
}

void sub_100013A00()
{
  sub_1000137E0();
}

uint64_t sub_100013A24(Swift::Int *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  void *v20;
  id v21;
  uint64_t result;
  Swift::Int v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  Swift::Int v32;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = a2;
    v9 = __CocoaSet.member(for:)(v8, v7);

    if (v9)
    {
      swift_bridgeObjectRelease(v6);

      v31 = v9;
      v10 = sub_10001CED8();
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v32, &v31, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v32;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_1000140AC(v7, result + 1);
    v32 = v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v29 = v24 + 1;
      v30 = v8;
      sub_10001558C(v29);
      v25 = v32;
    }
    else
    {
      v25 = v23;
      v26 = v8;
    }
    sub_100015924((uint64_t)v8, v25);
    v28 = *v3;
    *v3 = v25;
  }
  else
  {
    v11 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain(v6);
    v12 = NSObject._rawHashValue(seed:)(v11);
    v13 = -1 << *(_BYTE *)(v6 + 32);
    v14 = v12 & ~v13;
    if (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
    {
      sub_10001CED8();
      v15 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v14);
      v16 = static NSObject.== infix(_:_:)();

      if ((v16 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v6);
        v20 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v14);
        *a1 = (Swift::Int)v20;
        v21 = v20;
        return 0;
      }
      v17 = ~v13;
      while (1)
      {
        v14 = (v14 + 1) & v17;
        if (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
          break;
        v18 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v14);
        v19 = static NSObject.== infix(_:_:)();

        if ((v19 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    sub_100017888((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native);
    v28 = *v3;
    *v3 = v32;
  }
  swift_bridgeObjectRelease(v28);
  *a1 = (Swift::Int)v8;
  return 1;
}

void sub_100013C9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  uint64_t v47;

  sub_10001DA90();
  a31 = v32;
  a32 = v33;
  if (!v34)
  {
    sub_10001EBD4();
    goto LABEL_16;
  }
  sub_100002F78(&qword_1000FB2C0);
  sub_10001DCA4();
  sub_10001E2F8();
  v35 = sub_10001E280();
  if (!v35)
  {
LABEL_14:
    sub_10001D930();
LABEL_16:
    sub_10001D8F8();
    return;
  }
  v36 = v35;
  sub_10001E1D8();
  while (1)
  {
    a10 = v36;
    sub_10001DBA0((uint64_t)&a19, (uint64_t)&a10, (uint64_t)&type metadata for Swift.AnyObject + 8);
    v38 = a20;
    if (*(_QWORD *)(a20 + 24) <= *(_QWORD *)(a20 + 16))
    {
      sub_100014280();
      v38 = a20;
    }
    v39 = a19;
    sub_10001DC4C(*(_QWORD *)(v38 + 40), v37);
    sub_10001EA20();
    sub_10001DBF4();
    sub_10001DC30();
    if (v42)
      break;
    sub_10001E178();
LABEL_13:
    *(_QWORD *)(v43 + ((v44 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v44;
    *(_QWORD *)(*(_QWORD *)(v38 + 48) + 8 * v44) = v39;
    sub_10001DE10();
    v36 = __CocoaSet.Iterator.next()(v47);
    if (!v36)
      goto LABEL_14;
  }
  v45 = 0;
  v46 = (unint64_t)(63 - v41) >> 6;
  while (v40 + 1 != v46 || (v45 & 1) == 0)
  {
    sub_10001E62C();
    if (!v42)
    {
      sub_10001E154();
      goto LABEL_13;
    }
  }
  __break(1u);
}

void sub_100013DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;

  sub_10001DA90();
  a31 = v32;
  a32 = v34;
  if (!v33)
  {
    sub_10001EBD4();
    goto LABEL_16;
  }
  v35 = v33;
  sub_100002F78(&qword_1000FB298);
  sub_10001DCA4();
  sub_10001E2F8();
  if (!sub_10001E280())
  {
LABEL_14:
    sub_10001D930();
LABEL_16:
    sub_10001D8F8();
    return;
  }
  v36 = sub_10001E56C();
  type metadata accessor for DaemonRequest(v36);
  while (1)
  {
    a10 = v35;
    sub_10001DBA0((uint64_t)&a19, (uint64_t)&a10, (uint64_t)&type metadata for Swift.AnyObject + 8);
    v38 = a20;
    v39 = *(_QWORD *)(a20 + 16);
    if (*(_QWORD *)(a20 + 24) <= v39)
    {
      sub_10001E7D0(v39 + 1, (uint64_t)&qword_1000FB298, (uint64_t)&OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_id);
      v38 = a20;
    }
    sub_10001DC4C(*(_QWORD *)(v38 + 40), v37);
    sub_10001E908();
    v40 = (unint64_t *)sub_10001E4C8();
    sub_100006744(v40, v41);
    sub_10001E438(v42, v43);
    sub_10001DBF4();
    sub_10001DC30();
    if (v44)
      break;
    sub_10001E178();
LABEL_13:
    v35 = sub_10001D9D0(v45);
    if (!v35)
      goto LABEL_14;
  }
  sub_10001EB2C();
  while (v47 + 1 != v48 || (v46 & 1) == 0)
  {
    sub_10001E62C();
    if (!v44)
    {
      sub_10001E154();
      goto LABEL_13;
    }
  }
  __break(1u);
}

void sub_100013F4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;

  sub_10001DA90();
  a31 = v32;
  a32 = v34;
  if (!v33)
  {
    sub_10001EBD4();
    goto LABEL_16;
  }
  v35 = v33;
  sub_100002F78(&qword_1000FB2D0);
  sub_10001DCA4();
  sub_10001E2F8();
  if (!sub_10001E280())
  {
LABEL_14:
    sub_10001D930();
LABEL_16:
    sub_10001D8F8();
    return;
  }
  v36 = sub_10001E56C();
  type metadata accessor for DaemonSession(v36);
  while (1)
  {
    a10 = v35;
    sub_10001DBA0((uint64_t)&a19, (uint64_t)&a10, (uint64_t)&type metadata for Swift.AnyObject + 8);
    v38 = a20;
    v39 = *(_QWORD *)(a20 + 16);
    if (*(_QWORD *)(a20 + 24) <= v39)
    {
      sub_10001E7D0(v39 + 1, (uint64_t)&qword_1000FB2D0, (uint64_t)&OBJC_IVAR____TtC13modelmanagerd13DaemonSession_id);
      v38 = a20;
    }
    sub_10001DC4C(*(_QWORD *)(v38 + 40), v37);
    sub_10001E908();
    v40 = (unint64_t *)sub_10001E4C8();
    sub_100006744(v40, v41);
    sub_10001E438(v42, v43);
    sub_10001DBF4();
    sub_10001DC30();
    if (v44)
      break;
    sub_10001E178();
LABEL_13:
    v35 = sub_10001D9D0(v45);
    if (!v35)
      goto LABEL_14;
  }
  sub_10001EB2C();
  while (v47 + 1 != v48 || (v46 & 1) == 0)
  {
    sub_10001E62C();
    if (!v44)
    {
      sub_10001E154();
      goto LABEL_13;
    }
  }
  __break(1u);
}

Swift::Int sub_1000140AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (!a2)
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)_swiftEmptySetSingleton;
  }
  sub_100002F78(&qword_1000FB718);
  v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
  v23 = v4;
  v5 = __CocoaSet.makeIterator()(a1);
  v6 = __CocoaSet.Iterator.next()(v5);
  if (!v6)
  {
LABEL_16:
    swift_release();
    return v4;
  }
  v7 = v6;
  v8 = sub_10001CED8();
  while (1)
  {
    v21 = v7;
    swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
    v4 = v23;
    v9 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v9)
    {
      sub_10001558C(v9 + 1);
      v4 = v23;
    }
    v10 = v22;
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
    v12 = v4 + 56;
    v13 = -1 << *(_BYTE *)(v4 + 32);
    v14 = result & ~v13;
    v15 = v14 >> 6;
    if (((-1 << v14) & ~*(_QWORD *)(v4 + 56 + 8 * (v14 >> 6))) == 0)
      break;
    v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v4 + 56 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
LABEL_15:
    *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v16) = v10;
    ++*(_QWORD *)(v4 + 16);
    v7 = __CocoaSet.Iterator.next()(result);
    if (!v7)
      goto LABEL_16;
  }
  v17 = 0;
  v18 = (unint64_t)(63 - v13) >> 6;
  while (++v15 != v18 || (v17 & 1) == 0)
  {
    v19 = v15 == v18;
    if (v15 == v18)
      v15 = 0;
    v17 |= v19;
    v20 = *(_QWORD *)(v12 + 8 * v15);
    if (v20 != -1)
    {
      v16 = __clz(__rbit64(~v20)) + (v15 << 6);
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

void sub_100014280()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;

  sub_10001DA08();
  sub_10001E614();
  sub_100002F78(&qword_1000FB2C0);
  v2 = sub_10001DC54((uint64_t)v1);
  if (v1[2])
  {
    v30 = v0;
    sub_10001DC08();
    v4 = v1 + 7;
    if (v3 < 64)
      v5 = ~(-1 << v3);
    else
      v5 = -1;
    v6 = v5 & v1[7];
    v7 = (unint64_t)(v3 + 63) >> 6;
    v8 = v2 + 56;
    sub_10001D7EC();
    v10 = 0;
    if (!v6)
      goto LABEL_7;
LABEL_6:
    v11 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    for (i = v11 | (v10 << 6); ; i = v15 + (v10 << 6))
    {
      v16 = *(_QWORD *)(v1[6] + 8 * i);
      sub_10001DC4C(*(_QWORD *)(v2 + 40), v9);
      sub_10001EA20();
      v17 = sub_10001DBF4() & ~(-1 << *(_BYTE *)(v2 + 32));
      if (((-1 << v17) & ~*(_QWORD *)(v8 + 8 * (v17 >> 6))) == 0)
      {
        sub_10001D88C();
        while (1)
        {
          sub_10001DD6C();
          if (v21)
          {
            if ((v18 & 1) != 0)
              break;
          }
          if (v19 == v20)
            v19 = 0;
          if (*(_QWORD *)(v8 + 8 * v19) != -1)
          {
            sub_10001D878();
            goto LABEL_31;
          }
        }
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return;
      }
      sub_10001D8A0();
LABEL_31:
      sub_10001DB0C();
      *(_QWORD *)(v8 + v22) |= v23;
      *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v24) = v16;
      sub_10001DE10();
      if (v6)
        goto LABEL_6;
LABEL_7:
      v13 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_39;
      if (v13 >= v7)
        goto LABEL_33;
      ++v10;
      if (!v4[v13])
      {
        v10 = v13 + 1;
        if (v13 + 1 >= v7)
          goto LABEL_33;
        if (!v4[v10])
        {
          v10 = v13 + 2;
          if (v13 + 2 >= v7)
            goto LABEL_33;
          if (!v4[v10])
          {
            v14 = v13 + 3;
            if (v14 >= v7)
            {
LABEL_33:
              sub_10001D9C8();
              v0 = v30;
              sub_10001E130();
              if (v25 ^ v26 | v21)
              {
                sub_10001DED8();
                *v4 = v27;
              }
              else
              {
                v28 = sub_10001E0F0();
                sub_100011704(v28, v29, v1 + 7);
              }
              v1[2] = 0;
              break;
            }
            if (!v4[v14])
            {
              while (1)
              {
                v10 = v14 + 1;
                if (__OFADD__(v14, 1))
                  goto LABEL_40;
                if (v10 >= v7)
                  goto LABEL_33;
                ++v14;
                if (v4[v10])
                  goto LABEL_20;
              }
            }
            v10 = v14;
          }
        }
      }
LABEL_20:
      sub_10001EB88();
    }
  }
  sub_10001D9C8();
  *v0 = v2;
  sub_10001DFCC();
}

Swift::Int sub_100014478(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100002F78(&qword_1000FB588);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    if (!v9)
      goto LABEL_10;
LABEL_9:
    v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
    {
      v19 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * i);
      v20 = *v19;
      v21 = v19[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v20, v21);
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6))) == 0)
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v22) >> 6;
        while (++v24 != v27 || (v26 & 1) == 0)
        {
          v28 = v24 == v27;
          if (v24 == v27)
            v24 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v11 + 8 * v24);
          if (v29 != -1)
          {
            v25 = __clz(__rbit64(~v29)) + (v24 << 6);
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }
      v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
      *(_QWORD *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
      v30 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v25);
      *v30 = v20;
      v30[1] = v21;
      ++*(_QWORD *)(v6 + 16);
      if (v9)
        goto LABEL_9;
LABEL_10:
      v16 = v13 + 1;
      if (__OFADD__(v13, 1))
        goto LABEL_41;
      if (v16 >= v10)
        goto LABEL_35;
      v17 = v33[v16];
      ++v13;
      if (!v17)
      {
        v13 = v16 + 1;
        if (v16 + 1 >= v10)
          goto LABEL_35;
        v17 = v33[v13];
        if (!v17)
        {
          v13 = v16 + 2;
          if (v16 + 2 >= v10)
            goto LABEL_35;
          v17 = v33[v13];
          if (!v17)
          {
            v18 = v16 + 3;
            if (v18 >= v10)
            {
LABEL_35:
              swift_release(v3);
              v2 = v32;
              v31 = 1 << *(_BYTE *)(v3 + 32);
              if (v31 > 63)
                sub_100011704(0, (unint64_t)(v31 + 63) >> 6, v33);
              else
                *v33 = -1 << v31;
              *(_QWORD *)(v3 + 16) = 0;
              break;
            }
            v17 = v33[v18];
            if (!v17)
            {
              while (1)
              {
                v13 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_42;
                if (v13 >= v10)
                  goto LABEL_35;
                v17 = v33[v13];
                ++v18;
                if (v17)
                  goto LABEL_23;
              }
            }
            v13 = v18;
          }
        }
      }
LABEL_23:
      v9 = (v17 - 1) & v17;
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_100014750(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  unint64_t v47;
  _QWORD v48[9];

  v3 = type metadata accessor for ModelCatalogAsset(0);
  v45 = *(_QWORD *)(v3 - 8);
  v46 = (int *)v3;
  __chkstk_darwin(v3);
  v5 = (uint64_t **)((char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v41 = v1;
  v6 = *v1;
  if (*(_QWORD *)(*v1 + 24) > a1)
    a1 = *(_QWORD *)(*v1 + 24);
  sub_100002F78(&qword_1000FB620);
  v7 = static _SetStorage.resize(original:capacity:move:)(v6, a1, 1);
  v8 = v7;
  if (*(_QWORD *)(v6 + 16))
  {
    v9 = 1 << *(_BYTE *)(v6 + 32);
    v10 = *(_QWORD *)(v6 + 56);
    v42 = (_QWORD *)(v6 + 56);
    if (v9 < 64)
      v11 = ~(-1 << v9);
    else
      v11 = -1;
    v12 = v11 & v10;
    v43 = (unint64_t)(v9 + 63) >> 6;
    v44 = v7 + 56;
    result = swift_retain(v6);
    v14 = 0;
    if (!v12)
      goto LABEL_9;
LABEL_8:
    v15 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    for (i = v15 | (v14 << 6); ; i = __clz(__rbit64(v18)) + (v14 << 6))
    {
      v20 = *(_QWORD *)(v45 + 72);
      sub_10001CB5C(*(_QWORD *)(v6 + 48) + v20 * i, (uint64_t)v5);
      Hasher.init(_seed:)(v48, *(_QWORD *)(v8 + 40));
      v21 = *v5;
      v22 = v5[1];
      swift_bridgeObjectRetain(v22);
      String.hash(into:)(v48, v21, v22);
      swift_bridgeObjectRelease(v22);
      v23 = v5[2];
      Hasher._combine(_:)(*(_QWORD *)(v23 + 16));
      v24 = *(_QWORD *)(v23 + 16);
      if (v24)
      {
        v47 = v12;
        v25 = v20;
        v26 = v8;
        v27 = v14;
        v28 = v6;
        swift_bridgeObjectRetain(v23);
        v29 = (_QWORD *)(v23 + 40);
        do
        {
          v30 = *(v29 - 1);
          v31 = *v29;
          swift_bridgeObjectRetain(*v29);
          String.hash(into:)(v48, v30, v31);
          swift_bridgeObjectRelease(v31);
          v29 += 2;
          --v24;
        }
        while (v24);
        swift_bridgeObjectRelease(v23);
        v6 = v28;
        v14 = v27;
        v8 = v26;
        v20 = v25;
        v12 = v47;
      }
      v32 = v5[3];
      swift_bridgeObjectRetain(v32);
      sub_10004A3E4((uint64_t)v48, v32);
      swift_bridgeObjectRelease(v32);
      v33 = v46;
      v34 = type metadata accessor for AssetCost(0);
      sub_100006710(&qword_1000FB628, (uint64_t (*)(uint64_t))&type metadata accessor for AssetCost);
      dispatch thunk of Hashable.hash(into:)(v48, v34, v35);
      Hasher._combine(_:)(*((_BYTE *)v5 + v33[8]));
      Hasher._combine(_:)(*((_BYTE *)v5 + v33[9]));
      Hasher._combine(_:)(*((_BYTE *)v5 + v33[10]));
      v36 = Hasher._finalize()();
      v37 = v44;
      v38 = _HashTable.nextHole(atOrAfter:)(v36 & ~(-1 << *(_BYTE *)(v8 + 32)), v44, ~(-1 << *(_BYTE *)(v8 + 32)));
      *(_QWORD *)(v37 + ((v38 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v38;
      result = sub_10001CB5C((uint64_t)v5, *(_QWORD *)(v8 + 48) + v38 * v20);
      ++*(_QWORD *)(v8 + 16);
      if (v12)
        goto LABEL_8;
LABEL_9:
      v17 = v14 + 1;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
LABEL_36:
        __break(1u);
        return result;
      }
      if (v17 >= v43)
        goto LABEL_29;
      v18 = v42[v17];
      ++v14;
      if (!v18)
      {
        v14 = v17 + 1;
        if (v17 + 1 >= v43)
          goto LABEL_29;
        v18 = v42[v14];
        if (!v18)
        {
          v14 = v17 + 2;
          if (v17 + 2 >= v43)
            goto LABEL_29;
          v18 = v42[v14];
          if (!v18)
          {
            v19 = v17 + 3;
            if (v19 >= v43)
            {
LABEL_29:
              swift_release(v6);
              v39 = v41;
              v40 = 1 << *(_BYTE *)(v6 + 32);
              if (v40 > 63)
                sub_100011704(0, (unint64_t)(v40 + 63) >> 6, v42);
              else
                *v42 = -1 << v40;
              *(_QWORD *)(v6 + 16) = 0;
              result = swift_release(v6);
              goto LABEL_34;
            }
            v18 = v42[v19];
            if (!v18)
            {
              while (1)
              {
                v14 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_36;
                if (v14 >= v43)
                  goto LABEL_29;
                v18 = v42[v14];
                ++v19;
                if (v18)
                  goto LABEL_22;
              }
            }
            v14 = v19;
          }
        }
      }
LABEL_22:
      v12 = (v18 - 1) & v18;
    }
  }
  result = swift_release(v6);
  v39 = v41;
LABEL_34:
  *v39 = v8;
  return result;
}

void sub_100014B54(uint64_t a1)
{
  sub_100014B78(a1, (uint64_t)&qword_1000FB2D0, (uint64_t)&OBJC_IVAR____TtC13modelmanagerd13DaemonSession_id, &qword_1000FB2D8, &qword_1000FB2E0);
}

void sub_100014B78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t i;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD v45[9];

  sub_10001E614();
  sub_10001E23C(v8, v9);
  v10 = sub_10001DC54((uint64_t)v6);
  if (v6[2])
  {
    sub_10001DC08();
    v43 = v6 + 7;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & v6[7];
    sub_10001E100();
    v42 = v14;
    v15 = v10 + 56;
    sub_10001D7EC();
    v16 = 0;
    if (!v13)
      goto LABEL_7;
LABEL_6:
    sub_10001E9E4();
    for (i = v17 | (v16 << 6); ; i = __clz(__rbit64(v20)) + (v16 << 6))
    {
      v22 = *(_QWORD *)(v6[6] + 8 * i);
      Hasher.init(_seed:)(v45, *(_QWORD *)(v10 + 40));
      sub_100002F78(a4);
      sub_100006744(a5, a4);
      sub_10001E428(v23, v24, v25, v26, v27, v28);
      v29 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v10 + 32));
      if (((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6))) == 0)
      {
        sub_10001D88C();
        while (1)
        {
          sub_10001DD6C();
          if (v33)
          {
            if ((v30 & 1) != 0)
              break;
          }
          if (v31 == v32)
            v31 = 0;
          if (*(_QWORD *)(v15 + 8 * v31) != -1)
          {
            sub_10001D878();
            goto LABEL_31;
          }
        }
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return;
      }
      sub_10001D8A0();
LABEL_31:
      sub_10001DB0C();
      *(_QWORD *)(v15 + v34) |= v35;
      *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v36) = v22;
      sub_10001DE10();
      if (v13)
        goto LABEL_6;
LABEL_7:
      v19 = v16 + 1;
      if (__OFADD__(v16, 1))
        goto LABEL_39;
      if (v19 >= v42)
        goto LABEL_33;
      v20 = v43[v19];
      ++v16;
      if (!v20)
      {
        v16 = v19 + 1;
        if (v19 + 1 >= v42)
          goto LABEL_33;
        v20 = v43[v16];
        if (!v20)
        {
          v16 = v19 + 2;
          if (v19 + 2 >= v42)
            goto LABEL_33;
          v20 = v43[v16];
          if (!v20)
          {
            v21 = v19 + 3;
            if (v21 >= v42)
            {
LABEL_33:
              sub_10001D9C8();
              sub_10001E130();
              if (v37 ^ v38 | v33)
              {
                sub_10001DED8();
                *v43 = v39;
              }
              else
              {
                v40 = sub_10001E0F0();
                sub_100011704(v40, v41, v43);
              }
              v6[2] = 0;
              break;
            }
            v20 = v43[v21];
            if (!v20)
            {
              while (1)
              {
                v16 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v16 >= v42)
                  goto LABEL_33;
                v20 = v43[v16];
                ++v21;
                if (v20)
                  goto LABEL_20;
              }
            }
            v16 = v21;
          }
        }
      }
LABEL_20:
      v13 = (v20 - 1) & v20;
    }
  }
  sub_10001D9C8();
  *v5 = v10;
  sub_100006A00();
}

void sub_100014DE0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  sub_10001D810();
  v43 = v1;
  v44 = v2;
  v3 = v0;
  v6 = sub_10001E578(v4, v5);
  v42 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v38 - v7;
  v9 = (_QWORD *)*v0;
  sub_10001DEE4();
  v10 = sub_10001DC54((uint64_t)v9);
  if (v9[2])
  {
    sub_10001DC08();
    v41 = v9 + 7;
    sub_10001E97C();
    v13 = v12 & v11;
    sub_10001E100();
    v39 = v0;
    v40 = v14;
    v15 = v10 + 56;
    sub_10001E20C();
    v16 = 0;
    if (!v13)
      goto LABEL_4;
LABEL_3:
    sub_10001E5B8();
    while (1)
    {
      v22 = v9;
      v23 = v9[6];
      v24 = *(_QWORD *)(v42 + 72);
      v25 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 32);
      v25(v8, v23 + v24 * v17, v6);
      sub_10001E970();
      v26 = sub_10001E864();
      dispatch thunk of Hashable._rawHashValue(seed:)(v26, v6, v27);
      sub_10001DAF0();
      sub_10001E4EC();
      if (v28)
      {
        sub_10001D88C();
        while (1)
        {
          sub_10001DD6C();
          if (v28)
          {
            if ((v30 & 1) != 0)
              break;
          }
          if (v31 == v32)
            v31 = 0;
          if (*(_QWORD *)(v15 + 8 * v31) != -1)
          {
            sub_10001D878();
            goto LABEL_28;
          }
        }
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        return;
      }
      sub_10001D8A0();
LABEL_28:
      *(_QWORD *)(v15 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
      v25((char *)(*(_QWORD *)(v10 + 48) + v29 * v24), (uint64_t)v8, v6);
      sub_10001DE10();
      v9 = v22;
      if (v13)
        goto LABEL_3;
LABEL_4:
      if (__OFADD__(v16, 1))
        goto LABEL_36;
      if (v16 + 1 >= v40)
        goto LABEL_30;
      sub_10001EA6C();
      v16 = v18;
      if (!v19)
      {
        v16 = v18 + 1;
        if (v18 + 1 >= v40)
          goto LABEL_30;
        if (!v41[v16])
        {
          v16 = v18 + 2;
          if (v18 + 2 >= v40)
            goto LABEL_30;
          if (!v41[v16])
          {
            if (v18 + 3 >= v40)
            {
LABEL_30:
              sub_10001E098();
              v3 = v39;
              sub_10001E130();
              if (v33 ^ v34 | v28)
              {
                sub_10001DED8();
                *v41 = v35;
              }
              else
              {
                v36 = sub_10001E0F0();
                sub_100011704(v36, v37, v41);
              }
              v9[2] = 0;
              break;
            }
            sub_10001EA6C();
            if (!v21)
            {
              while (1)
              {
                v16 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_37;
                if (v16 >= v40)
                  goto LABEL_30;
                ++v20;
                if (v41[v16])
                  goto LABEL_17;
              }
            }
            v16 = v20;
          }
        }
      }
LABEL_17:
      sub_10001E71C();
    }
  }
  sub_10001E098();
  *v3 = v10;
  sub_100006A68();
}

void sub_10001505C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  unint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t *v40;

  sub_10001D810();
  v39 = v2;
  v40 = v3;
  v4 = v0;
  v6 = sub_10001E23C(v5, v2);
  v38 = *(_QWORD *)(v6 - 8);
  sub_10001DD00();
  __chkstk_darwin(v7);
  sub_10001E168();
  v10 = v9 - v8;
  v11 = *v0;
  sub_10001DEE4();
  v12 = sub_10001DC54(v11);
  if (*(_QWORD *)(v11 + 16))
  {
    sub_10001DC08();
    v37 = (_QWORD *)(v11 + 56);
    sub_10001E0B8();
    v36 = v13;
    v14 = v12 + 56;
    sub_10001E8B0();
    v15 = 0;
    if (!v1)
      goto LABEL_4;
LABEL_3:
    sub_10001E588();
    while (1)
    {
      v21 = v11;
      v22 = *(_QWORD *)(v11 + 48);
      v23 = *(_QWORD *)(v38 + 72);
      v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32);
      v24(v10, v22 + v23 * v16, v6);
      sub_100006744(v40, v39);
      sub_10001E214(v25);
      sub_10001DAF0();
      sub_10001E4EC();
      if (v26)
      {
        sub_10001D88C();
        while (1)
        {
          sub_10001DD6C();
          if (v26)
          {
            if ((v28 & 1) != 0)
              break;
          }
          if (v29 == v30)
            v29 = 0;
          if (*(_QWORD *)(v14 + 8 * v29) != -1)
          {
            sub_10001D878();
            goto LABEL_28;
          }
        }
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        return;
      }
      sub_10001D8A0();
LABEL_28:
      *(_QWORD *)(v14 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
      v24(*(_QWORD *)(v12 + 48) + v27 * v23, v10, v6);
      sub_10001DE10();
      v11 = v21;
      if (v1)
        goto LABEL_3;
LABEL_4:
      if (__OFADD__(v15, 1))
        goto LABEL_36;
      if (v15 + 1 >= v36)
        goto LABEL_30;
      sub_10001EC30();
      v15 = v17;
      if (!v18)
      {
        v15 = v17 + 1;
        if (v17 + 1 >= v36)
          goto LABEL_30;
        if (!v37[v15])
        {
          v15 = v17 + 2;
          if (v17 + 2 >= v36)
            goto LABEL_30;
          if (!v37[v15])
          {
            if (v17 + 3 >= v36)
            {
LABEL_30:
              swift_release(v11);
              v4 = v0;
              sub_10001E130();
              if (v31 ^ v32 | v26)
              {
                sub_10001DED8();
                *v37 = v33;
              }
              else
              {
                v34 = sub_10001E0F0();
                sub_100011704(v34, v35, v37);
              }
              *(_QWORD *)(v11 + 16) = 0;
              break;
            }
            sub_10001EC30();
            if (!v20)
            {
              while (1)
              {
                v15 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_37;
                if (v15 >= v36)
                  goto LABEL_30;
                ++v19;
                if (v37[v15])
                  goto LABEL_17;
              }
            }
            v15 = v19;
          }
        }
      }
LABEL_17:
      sub_10001DEB8();
    }
  }
  swift_release(v11);
  *v4 = v12;
  sub_100006A68();
}

void sub_1000152D4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30[9];
  _BYTE v31[16];
  Swift::UInt v32;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100002F78(&qword_1000FB878);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v29 = v2;
    v7 = 0;
    v8 = (_QWORD *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = v5 + 56;
    if (!v11)
      goto LABEL_10;
LABEL_9:
    v14 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    for (i = v14 | (v7 << 6); ; i = __clz(__rbit64(v17)) + (v7 << 6))
    {
      sub_10001D4C4(*(_QWORD *)(v3 + 48) + 24 * i, (uint64_t)v31);
      Hasher.init(_seed:)(v30, *(_QWORD *)(v6 + 40));
      Hasher._combine(_:)(v32);
      v19 = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v6 + 32);
      v21 = v19 & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v13 + 8 * (v21 >> 6))) == 0)
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          v26 = v22 == v25;
          if (v22 == v25)
            v22 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v22);
          if (v27 != -1)
          {
            v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return;
      }
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v13 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
      *(_QWORD *)(v13 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      sub_10001D4C4((uint64_t)v31, *(_QWORD *)(v6 + 48) + 24 * v23);
      ++*(_QWORD *)(v6 + 16);
      if (v11)
        goto LABEL_9;
LABEL_10:
      v16 = v7 + 1;
      if (__OFADD__(v7, 1))
        goto LABEL_41;
      if (v16 >= v12)
        goto LABEL_35;
      v17 = v8[v16];
      ++v7;
      if (!v17)
      {
        v7 = v16 + 1;
        if (v16 + 1 >= v12)
          goto LABEL_35;
        v17 = v8[v7];
        if (!v17)
        {
          v7 = v16 + 2;
          if (v16 + 2 >= v12)
            goto LABEL_35;
          v17 = v8[v7];
          if (!v17)
          {
            v18 = v16 + 3;
            if (v18 >= v12)
            {
LABEL_35:
              v28 = 1 << *(_BYTE *)(v3 + 32);
              if (v28 > 63)
                sub_100011704(0, (unint64_t)(v28 + 63) >> 6, (_QWORD *)(v3 + 56));
              else
                *v8 = -1 << v28;
              v2 = v29;
              *(_QWORD *)(v3 + 16) = 0;
              break;
            }
            v17 = v8[v18];
            if (!v17)
            {
              while (1)
              {
                v7 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_42;
                if (v7 >= v12)
                  goto LABEL_35;
                v17 = v8[v7];
                ++v18;
                if (v17)
                  goto LABEL_23;
              }
            }
            v7 = v18;
          }
        }
      }
LABEL_23:
      v11 = (v17 - 1) & v17;
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_10001558C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100002F78(&qword_1000FB718);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v30 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v8 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    swift_retain();
    v13 = 0;
    if (!v10)
      goto LABEL_10;
LABEL_9:
    v14 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
    {
      v19 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * i);
      v20 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
      v21 = -1 << *(_BYTE *)(v6 + 32);
      v22 = v20 & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6))) == 0)
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v21) >> 6;
        while (++v23 != v26 || (v25 & 1) == 0)
        {
          v27 = v23 == v26;
          if (v23 == v26)
            v23 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v23);
          if (v28 != -1)
          {
            v24 = __clz(__rbit64(~v28)) + (v23 << 6);
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return;
      }
      v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
      *(_QWORD *)(v12 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v24) = v19;
      ++*(_QWORD *)(v6 + 16);
      if (v10)
        goto LABEL_9;
LABEL_10:
      v16 = v13 + 1;
      if (__OFADD__(v13, 1))
        goto LABEL_41;
      if (v16 >= v11)
        goto LABEL_35;
      v17 = v8[v16];
      ++v13;
      if (!v17)
      {
        v13 = v16 + 1;
        if (v16 + 1 >= v11)
          goto LABEL_35;
        v17 = v8[v13];
        if (!v17)
        {
          v13 = v16 + 2;
          if (v16 + 2 >= v11)
            goto LABEL_35;
          v17 = v8[v13];
          if (!v17)
          {
            v18 = v16 + 3;
            if (v18 >= v11)
            {
LABEL_35:
              swift_release();
              v2 = v30;
              v29 = 1 << *(_BYTE *)(v3 + 32);
              if (v29 > 63)
                sub_100011704(0, (unint64_t)(v29 + 63) >> 6, (_QWORD *)(v3 + 56));
              else
                *v8 = -1 << v29;
              *(_QWORD *)(v3 + 16) = 0;
              break;
            }
            v17 = v8[v18];
            if (!v17)
            {
              while (1)
              {
                v13 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_42;
                if (v13 >= v11)
                  goto LABEL_35;
                v17 = v8[v13];
                ++v18;
                if (v17)
                  goto LABEL_23;
              }
            }
            v13 = v18;
          }
        }
      }
LABEL_23:
      v10 = (v17 - 1) & v17;
    }
  }
  swift_release();
  *v2 = v6;
}

unint64_t sub_100015824(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  unint64_t v5;
  unint64_t result;
  uint64_t v7;

  sub_10001DC4C(*(_QWORD *)(a2 + 40), a2);
  sub_10008B000();
  v4 = sub_10001DBF4();
  v5 = sub_10001DDC0(v4);
  result = sub_10001DF3C(v5);
  *(_QWORD *)(v7 + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

unint64_t sub_100015884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t result;
  uint64_t v14;
  _BYTE v15[72];

  sub_10001DC4C(*(_QWORD *)(a2 + 40), a2);
  v9 = sub_100002F78(a4);
  sub_100006744(a5, a4);
  dispatch thunk of Hashable.hash(into:)(v15, v9, v10);
  v11 = sub_10001DBF4();
  v12 = sub_10001DDC0(v11);
  result = sub_10001DF3C(v12);
  *(_QWORD *)(v14 + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

unint64_t sub_100015924(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  unint64_t result;

  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
  result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

void sub_1000159A4(uint64_t a1, unint64_t i, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD v29[9];

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_13;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100014B78(v8, (uint64_t)&qword_1000FB298, (uint64_t)&OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_id, &qword_1000FB2A0, &qword_1000FB2A8);
  }
  else
  {
    if (v7 > v6)
    {
      sub_100017DF0();
      goto LABEL_13;
    }
    sub_100018E6C(v8, &qword_1000FB298, (uint64_t)&OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_id, &qword_1000FB2A0, &qword_1000FB2A8);
  }
  v9 = *v3;
  Hasher.init(_seed:)(v29, *(_QWORD *)(*v3 + 40));
  v10 = a1 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_id;
  v11 = sub_100002F78(&qword_1000FB2A0);
  sub_100006744(&qword_1000FB2A8, &qword_1000FB2A0);
  dispatch thunk of Hashable.hash(into:)(v29, v11, v12);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v9 + 32);
  i = v13 & ~v14;
  v15 = v9 + 56;
  if (((*(_QWORD *)(v9 + 56 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v26 = type metadata accessor for DaemonRequest(0);
    v16 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * i);
    v17 = v16 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_id;
    v18 = type metadata accessor for OneShotRequest(0);
    swift_retain(v16);
    LOBYTE(v17) = static UUIDIdentifier.== infix(_:_:)(v17, v10, v18);
    swift_release(v16);
    if ((v17 & 1) != 0)
      goto LABEL_16;
    v19 = ~v14;
    for (i = (i + 1) & v19; ((*(_QWORD *)(v15 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v19)
    {
      v20 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * i);
      v21 = v20 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_id;
      swift_retain(v20);
      LOBYTE(v21) = static UUIDIdentifier.== infix(_:_:)(v21, v10, v18);
      swift_release(v20);
      if ((v21 & 1) != 0)
        goto LABEL_16;
    }
  }
LABEL_13:
  v22 = *v27;
  *(_QWORD *)(*v27 + 8 * (i >> 6) + 56) |= 1 << i;
  *(_QWORD *)(*(_QWORD *)(v22 + 48) + 8 * i) = a1;
  v23 = *(_QWORD *)(v22 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (!v24)
  {
    *(_QWORD *)(v22 + 16) = v25;
    return;
  }
  __break(1u);
LABEL_16:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v26);
  __break(1u);
}

uint64_t sub_100015C28(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v29 = a1;
  v6 = type metadata accessor for Assertion.DaemonRep(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v28 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_100014DE0();
  }
  else
  {
    if (v11 > v10)
    {
      sub_100017F5C();
      goto LABEL_12;
    }
    sub_1000190A0();
  }
  v12 = *v3;
  v13 = *(_QWORD *)(*v3 + 40);
  sub_100006710(&qword_1000FB278, (uint64_t (*)(uint64_t))&type metadata accessor for Assertion.DaemonRep);
  v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v13, v6, v14);
  v16 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v15 & ~v16;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v17 = ~v16;
    v18 = *(_QWORD *)(v7 + 72);
    v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v19(v9, *(_QWORD *)(v12 + 48) + v18 * a2, v6);
      sub_100006710(&qword_1000FB280, (uint64_t (*)(uint64_t))&type metadata accessor for Assertion.DaemonRep);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v29, v6, v20);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v21 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v17;
    }
    while (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v22 = v29;
  v23 = *v28;
  *(_QWORD *)(*v28 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v23 + 48) + *(_QWORD *)(v7 + 72) * a2, v22, v6);
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (!v26)
  {
    *(_QWORD *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

uint64_t sub_100015E7C(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100014478(v11);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_100017A14();
      goto LABEL_22;
    }
    sub_100018800(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v28, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v28, v8, a2);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  v14 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v12 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = v16[1];
    v18 = *v16 == v8 && v17 == a2;
    if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v20 = (_QWORD *)(v15 + 16 * a3);
        v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0);
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v23 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v24 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * a3);
  *v24 = v8;
  v24[1] = a2;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v23 + 16) = v27;
  return result;
}

uint64_t sub_100016014(_QWORD *a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  BOOL v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t *v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t result;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[9];

  v51 = (int *)type metadata accessor for ModelCatalogAsset(0);
  v7 = *((_QWORD *)v51 - 1);
  __chkstk_darwin(v51);
  v9 = (uint64_t *)((char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v49 = v7;
  v50 = v3;
  if (v11 <= v10 || (a3 & 1) == 0)
  {
    v12 = v10 + 1;
    if ((a3 & 1) != 0)
    {
      sub_100014750(v12);
    }
    else
    {
      if (v11 > v10)
      {
        sub_100017BC4();
        goto LABEL_49;
      }
      sub_100018AA8(v12);
    }
    v13 = *v3;
    Hasher.init(_seed:)(v54, *(_QWORD *)(*v3 + 40));
    sub_1000499E4((uint64_t)v54);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v13 + 32);
    a2 = v14 & ~v15;
    if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v52 = ~v15;
      v53 = *(_QWORD *)(v7 + 72);
      v16 = type metadata accessor for ModelCatalogAsset;
      do
      {
        v17 = v16;
        sub_10001D2E0();
        v18 = v9[1];
        v19 = a1[1];
        v20 = *v9 == *a1 && v18 == v19;
        if (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v9, v18, *a1, v19, 0) & 1) == 0)
          goto LABEL_48;
        v21 = (_QWORD *)v9[2];
        v22 = (_QWORD *)a1[2];
        v23 = v21[2];
        if (v23 != v22[2])
          goto LABEL_48;
        if (v23)
          v24 = v21 == v22;
        else
          v24 = 1;
        if (!v24)
        {
          v26 = v21[4];
          v27 = v21[5];
          v28 = v22[4];
          v29 = v22[5];
          v30 = v26 == v28 && v27 == v29;
          if (!v30 && (_stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, v28, v29, 0) & 1) == 0)
            goto LABEL_48;
          if (v23 != 1)
          {
            v31 = v21[6];
            v32 = v21[7];
            v33 = v22[6];
            v34 = v22[7];
            v35 = v31 == v33 && v32 == v34;
            if (!v35 && (_stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, v33, v34, 0) & 1) == 0)
              goto LABEL_48;
            if (v23 != 2)
            {
              v36 = v22 + 9;
              v37 = v21 + 9;
              v38 = 2;
              while (v38 < v23)
              {
                v39 = *(v37 - 1);
                v40 = *v37;
                v41 = *(v36 - 1);
                v42 = *v36;
                v43 = v39 == v41 && v40 == v42;
                if (!v43 && (_stringCompareWithSmolCheck(_:_:expecting:)(v39, v40, v41, v42, 0) & 1) == 0)
                  goto LABEL_48;
                ++v38;
                v36 += 2;
                v37 += 2;
                if (v23 == v38)
                  goto LABEL_21;
              }
              __break(1u);
              goto LABEL_52;
            }
          }
        }
LABEL_21:
        sub_1000BE098();
        if ((v25 & 1) != 0
          && (static AssetCost.== infix(_:_:)((char *)v9 + v51[7], (char *)a1 + v51[7]) & 1) != 0
          && *((unsigned __int8 *)v9 + v51[8]) == *((unsigned __int8 *)a1 + v51[8])
          && *((unsigned __int8 *)v9 + v51[9]) == *((unsigned __int8 *)a1 + v51[9])
          && *((unsigned __int8 *)v9 + v51[10]) == *((unsigned __int8 *)a1 + v51[10]))
        {
          goto LABEL_53;
        }
LABEL_48:
        v16 = v17;
        sub_10001CBA0((uint64_t)v9, v17);
        a2 = (a2 + 1) & v52;
      }
      while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_49:
  v44 = *v50;
  *(_QWORD *)(*v50 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_10001CB5C((uint64_t)a1, *(_QWORD *)(v44 + 48) + *(_QWORD *)(v49 + 72) * a2);
  v46 = *(_QWORD *)(v44 + 16);
  v47 = __OFADD__(v46, 1);
  v48 = v46 + 1;
  if (v47)
  {
LABEL_52:
    __break(1u);
LABEL_53:
    sub_10001CBA0((uint64_t)v9, type metadata accessor for ModelCatalogAsset);
    result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v51);
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v44 + 16) = v48;
  }
  return result;
}

void sub_100016348(uint64_t a1, unint64_t i, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD v29[9];

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_13;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100014B78(v8, (uint64_t)&qword_1000FB2D0, (uint64_t)&OBJC_IVAR____TtC13modelmanagerd13DaemonSession_id, &qword_1000FB2D8, &qword_1000FB2E0);
  }
  else
  {
    if (v7 > v6)
    {
      sub_100017DF0();
      goto LABEL_13;
    }
    sub_100018E6C(v8, &qword_1000FB2D0, (uint64_t)&OBJC_IVAR____TtC13modelmanagerd13DaemonSession_id, &qword_1000FB2D8, &qword_1000FB2E0);
  }
  v9 = *v3;
  Hasher.init(_seed:)(v29, *(_QWORD *)(*v3 + 40));
  v10 = a1 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_id;
  v11 = sub_100002F78(&qword_1000FB2D8);
  sub_100006744(&qword_1000FB2E0, &qword_1000FB2D8);
  dispatch thunk of Hashable.hash(into:)(v29, v11, v12);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v9 + 32);
  i = v13 & ~v14;
  v15 = v9 + 56;
  if (((*(_QWORD *)(v9 + 56 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v26 = type metadata accessor for DaemonSession(0);
    v16 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * i);
    v17 = v16 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_id;
    v18 = type metadata accessor for Session(0);
    swift_retain();
    LOBYTE(v17) = static UUIDIdentifier.== infix(_:_:)(v17, v10, v18);
    swift_release(v16);
    if ((v17 & 1) != 0)
      goto LABEL_16;
    v19 = ~v14;
    for (i = (i + 1) & v19; ((*(_QWORD *)(v15 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v19)
    {
      v20 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * i);
      v21 = v20 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_id;
      swift_retain();
      LOBYTE(v21) = static UUIDIdentifier.== infix(_:_:)(v21, v10, v18);
      swift_release(v20);
      if ((v21 & 1) != 0)
        goto LABEL_16;
    }
  }
LABEL_13:
  v22 = *v27;
  *(_QWORD *)(*v27 + 8 * (i >> 6) + 56) |= 1 << i;
  *(_QWORD *)(*(_QWORD *)(v22 + 48) + 8 * i) = a1;
  v23 = *(_QWORD *)(v22 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (!v24)
  {
    *(_QWORD *)(v22 + 16) = v25;
    return;
  }
  __break(1u);
LABEL_16:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v26);
  __break(1u);
}

void sub_1000165CC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[9];

  v4 = v3;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_100014280();
  }
  else
  {
    if (v8 > v7)
    {
      sub_100017DF0();
      goto LABEL_14;
    }
    sub_100018578(v7 + 1);
  }
  v9 = *v3;
  Hasher.init(_seed:)(v22, *(_QWORD *)(*v3 + 40));
  sub_10008B000();
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = type metadata accessor for InferenceProviderAsset(0);
    v13 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * a2);
    swift_retain();
    v14 = sub_10008AE98();
    swift_release(v13);
    if ((v14 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v12);
      __break(1u);
    }
    else
    {
      v15 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v15;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v16 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * a2);
        swift_retain();
        v17 = sub_10008AE98();
        swift_release(v16);
        if ((v17 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v18 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v18 + 48) + 8 * a2) = a1;
  v19 = *(_QWORD *)(v18 + 16);
  v20 = __OFADD__(v19, 1);
  v21 = v19 + 1;
  if (v20)
    __break(1u);
  else
    *(_QWORD *)(v18 + 16) = v21;
}

uint64_t sub_100016774(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v29 = a1;
  v6 = type metadata accessor for InferenceProviderAssetDescriptor(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v28 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_100014DE0();
  }
  else
  {
    if (v11 > v10)
    {
      sub_100017F5C();
      goto LABEL_12;
    }
    sub_1000190A0();
  }
  v12 = *v3;
  v13 = *(_QWORD *)(*v3 + 40);
  sub_100006710(&qword_1000FB7D8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
  v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v13, v6, v14);
  v16 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v15 & ~v16;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v17 = ~v16;
    v18 = *(_QWORD *)(v7 + 72);
    v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v19(v9, *(_QWORD *)(v12 + 48) + v18 * a2, v6);
      sub_100006710(&qword_1000FB7E0, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v29, v6, v20);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v21 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v17;
    }
    while (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v22 = v29;
  v23 = *v28;
  *(_QWORD *)(*v28 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v23 + 48) + *(_QWORD *)(v7 + 72) * a2, v22, v6);
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (!v26)
  {
    *(_QWORD *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

uint64_t sub_1000169C8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v29 = a1;
  v6 = type metadata accessor for StateDump.AssetState(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v28 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_100014DE0();
  }
  else
  {
    if (v11 > v10)
    {
      sub_100017F5C();
      goto LABEL_12;
    }
    sub_1000190A0();
  }
  v12 = *v3;
  v13 = *(_QWORD *)(*v3 + 40);
  sub_100006710(&qword_1000FB980, (uint64_t (*)(uint64_t))&type metadata accessor for StateDump.AssetState);
  v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v13, v6, v14);
  v16 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v15 & ~v16;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v17 = ~v16;
    v18 = *(_QWORD *)(v7 + 72);
    v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v19(v9, *(_QWORD *)(v12 + 48) + v18 * a2, v6);
      sub_100006710(&qword_1000FB988, (uint64_t (*)(uint64_t))&type metadata accessor for StateDump.AssetState);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v29, v6, v20);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v21 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v17;
    }
    while (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v22 = v29;
  v23 = *v28;
  *(_QWORD *)(*v28 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v23 + 48) + *(_QWORD *)(v7 + 72) * a2, v22, v6);
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (!v26)
  {
    *(_QWORD *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

uint64_t sub_100016C1C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v29 = a1;
  v6 = type metadata accessor for StateDump.SessionState(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v28 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_100014DE0();
  }
  else
  {
    if (v11 > v10)
    {
      sub_100017F5C();
      goto LABEL_12;
    }
    sub_1000190A0();
  }
  v12 = *v3;
  v13 = *(_QWORD *)(*v3 + 40);
  sub_100006710(&qword_1000FB960, (uint64_t (*)(uint64_t))&type metadata accessor for StateDump.SessionState);
  v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v13, v6, v14);
  v16 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v15 & ~v16;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v17 = ~v16;
    v18 = *(_QWORD *)(v7 + 72);
    v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v19(v9, *(_QWORD *)(v12 + 48) + v18 * a2, v6);
      sub_100006710(&qword_1000FB968, (uint64_t (*)(uint64_t))&type metadata accessor for StateDump.SessionState);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v29, v6, v20);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v21 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v17;
    }
    while (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v22 = v29;
  v23 = *v28;
  *(_QWORD *)(*v28 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v23 + 48) + *(_QWORD *)(v7 + 72) * a2, v22, v6);
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (!v26)
  {
    *(_QWORD *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

uint64_t sub_100016E70(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v29 = a1;
  v6 = type metadata accessor for StateDump.RequestState(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v28 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_100014DE0();
  }
  else
  {
    if (v11 > v10)
    {
      sub_100017F5C();
      goto LABEL_12;
    }
    sub_1000190A0();
  }
  v12 = *v3;
  v13 = *(_QWORD *)(*v3 + 40);
  sub_100006710(&qword_1000FB930, (uint64_t (*)(uint64_t))&type metadata accessor for StateDump.RequestState);
  v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v13, v6, v14);
  v16 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v15 & ~v16;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v17 = ~v16;
    v18 = *(_QWORD *)(v7 + 72);
    v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v19(v9, *(_QWORD *)(v12 + 48) + v18 * a2, v6);
      sub_100006710(&qword_1000FB938, (uint64_t (*)(uint64_t))&type metadata accessor for StateDump.RequestState);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v29, v6, v20);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v21 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v17;
    }
    while (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v22 = v29;
  v23 = *v28;
  *(_QWORD *)(*v28 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v23 + 48) + *(_QWORD *)(v7 + 72) * a2, v22, v6);
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (!v26)
  {
    *(_QWORD *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

uint64_t sub_1000170C4(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t active;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v29 = a1;
  active = type metadata accessor for StateDump.InferenceProviderState.ActiveRequest(0);
  v7 = *(_QWORD *)(active - 8);
  __chkstk_darwin(active);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v28 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_100014DE0();
  }
  else
  {
    if (v11 > v10)
    {
      sub_100017F5C();
      goto LABEL_12;
    }
    sub_1000190A0();
  }
  v12 = *v3;
  v13 = *(_QWORD *)(*v3 + 40);
  sub_100006710(&qword_1000FB900, (uint64_t (*)(uint64_t))&type metadata accessor for StateDump.InferenceProviderState.ActiveRequest);
  v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v13, active, v14);
  v16 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v15 & ~v16;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v17 = ~v16;
    v18 = *(_QWORD *)(v7 + 72);
    v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v19(v9, *(_QWORD *)(v12 + 48) + v18 * a2, active);
      sub_100006710(&qword_1000FB908, (uint64_t (*)(uint64_t))&type metadata accessor for StateDump.InferenceProviderState.ActiveRequest);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v29, active, v20);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, active);
      if ((v21 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v17;
    }
    while (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v22 = v29;
  v23 = *v28;
  *(_QWORD *)(*v28 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v23 + 48) + *(_QWORD *)(v7 + 72) * a2, v22, active);
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (!v26)
  {
    *(_QWORD *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(active);
  __break(1u);
  return result;
}

uint64_t sub_100017318(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v29 = a1;
  v6 = type metadata accessor for StateDump.InferenceProviderState(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v28 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_100014DE0();
  }
  else
  {
    if (v11 > v10)
    {
      sub_100017F5C();
      goto LABEL_12;
    }
    sub_1000190A0();
  }
  v12 = *v3;
  v13 = *(_QWORD *)(*v3 + 40);
  sub_100006710(&qword_1000FB8E8, (uint64_t (*)(uint64_t))&type metadata accessor for StateDump.InferenceProviderState);
  v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v13, v6, v14);
  v16 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v15 & ~v16;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v17 = ~v16;
    v18 = *(_QWORD *)(v7 + 72);
    v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v19(v9, *(_QWORD *)(v12 + 48) + v18 * a2, v6);
      sub_100006710(&qword_1000FB8F0, (uint64_t (*)(uint64_t))&type metadata accessor for StateDump.InferenceProviderState);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v29, v6, v20);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v21 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v17;
    }
    while (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v22 = v29;
  v23 = *v28;
  *(_QWORD *)(*v28 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v23 + 48) + *(_QWORD *)(v7 + 72) * a2, v22, v6);
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (!v26)
  {
    *(_QWORD *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

void sub_10001756C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  _QWORD *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  Swift::UInt v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;

  sub_10001DA08();
  a29 = v31;
  a30 = v33;
  v34 = v30;
  v36 = v35;
  v38 = v37;
  v39 = *(_QWORD *)(*v30 + 16);
  v40 = *(_QWORD *)(*v30 + 24);
  if (v40 > v39 && (v32 & 1) != 0)
    goto LABEL_12;
  v41 = v39 + 1;
  if ((v32 & 1) != 0)
  {
    sub_1000152D4(v41);
  }
  else
  {
    if (v40 > v39)
    {
      sub_1000180C4();
      goto LABEL_12;
    }
    sub_100019508(v41);
  }
  v43 = *v30;
  sub_10001DC4C(*(_QWORD *)(*v30 + 40), v42);
  v44 = *(_QWORD *)(v38 + 16);
  Hasher._combine(_:)(v44);
  sub_10001DBF4();
  sub_10001DED8();
  v36 = v46 & ~v45;
  if (((*(_QWORD *)(v43 + 56 + ((v36 >> 3) & 0xFFFFFFFFFFFFF8)) >> v36) & 1) != 0)
  {
    v47 = ~v45;
    do
    {
      sub_10001D500(*(_QWORD *)(v43 + 48) + 24 * v36, (uint64_t)&a10);
      v48 = a12;
      sub_10001D53C((uint64_t)&a10);
      if (v48 == v44)
        goto LABEL_15;
      v36 = (v36 + 1) & v47;
    }
    while (((*(_QWORD *)(v43 + 56 + ((v36 >> 3) & 0xFFFFFFFFFFFFF8)) >> v36) & 1) != 0);
  }
LABEL_12:
  v49 = *v30;
  *(_QWORD *)(*v34 + 8 * (v36 >> 6) + 56) |= 1 << v36;
  sub_10001D4C4(v38, *(_QWORD *)(v49 + 48) + 24 * v36);
  v50 = *(_QWORD *)(v49 + 16);
  v51 = __OFADD__(v50, 1);
  v52 = v50 + 1;
  if (!v51)
  {
    *(_QWORD *)(v49 + 16) = v52;
    sub_10001DFCC();
    return;
  }
  __break(1u);
LABEL_15:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
  __break(1u);
}

void sub_1000176B4()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  char v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, unint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;

  sub_10001D810();
  v33 = v2;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v35 = v9;
  v10 = sub_100002F78(v3);
  v34 = *(_QWORD *)(v10 - 8);
  sub_10001DD00();
  __chkstk_darwin(v11);
  sub_10001DEA0();
  v12 = *(_QWORD *)(*v0 + 16);
  v13 = *(_QWORD *)(*v0 + 24);
  v32 = v0;
  if (v13 > v12 && (v6 & 1) != 0)
    goto LABEL_12;
  if ((v6 & 1) != 0)
  {
    sub_10001505C();
  }
  else
  {
    if (v13 > v12)
    {
      sub_100018298();
      goto LABEL_12;
    }
    sub_1000192C4();
  }
  v14 = *v0;
  v15 = (unint64_t *)sub_10001EB60();
  sub_100006744(v15, v16);
  v17 = sub_10001E864();
  dispatch thunk of Hashable._rawHashValue(seed:)(v17, v10, v18);
  sub_10001E3A8();
  if (((*(_QWORD *)(v14 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v20 = ~v19;
    v21 = *(_QWORD *)(v34 + 72);
    v22 = *(void (**)(uint64_t, unint64_t, uint64_t))(v34 + 16);
    do
    {
      v22(v1, *(_QWORD *)(v14 + 48) + v21 * v8, v10);
      sub_100006744(v33, v4);
      v25 = sub_10001E304(v1, v35, v24, v23);
      sub_10001EB58(v1, *(uint64_t (**)(uint64_t, uint64_t))(v34 + 8));
      if ((v25 & 1) != 0)
        goto LABEL_15;
      v8 = (v8 + 1) & v20;
      sub_10001EB40();
    }
    while (((*(_QWORD *)(v14 + 56 + v26) >> v8) & 1) != 0);
  }
LABEL_12:
  v27 = *v32;
  sub_10001E818(*v32 + 8 * (v8 >> 6));
  sub_10001DE08(v28 + *(_QWORD *)(v34 + 72) * v8, v35, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 32));
  v29 = *(_QWORD *)(v27 + 16);
  v30 = __OFADD__(v29, 1);
  v31 = v29 + 1;
  if (!v30)
  {
    *(_QWORD *)(v27 + 16) = v31;
    sub_100006A68();
    return;
  }
  __break(1u);
LABEL_15:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
  __break(1u);
}

void sub_100017888(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v4 = v3;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_14;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10001558C(v9);
  }
  else
  {
    if (v8 > v7)
    {
      sub_1000183D0();
      goto LABEL_14;
    }
    sub_100019790(v9);
  }
  v10 = *v3;
  v11 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v3 + 40));
  v12 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v13 = sub_10001CED8();
    v14 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * a2);
    v15 = static NSObject.== infix(_:_:)();

    if ((v15 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
      __break(1u);
    }
    else
    {
      v16 = ~v12;
      while (1)
      {
        a2 = (a2 + 1) & v16;
        if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v17 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * a2);
        v18 = static NSObject.== infix(_:_:)();

        if ((v18 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v19 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v19 + 48) + 8 * a2) = a1;
  v20 = *(_QWORD *)(v19 + 16);
  v21 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  if (v21)
    __break(1u);
  else
    *(_QWORD *)(v19 + 16) = v22;
}

void sub_1000179FC()
{
  sub_100017DF0();
}

void sub_100017A08()
{
  sub_100017DF0();
}

void *sub_100017A14()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;

  v1 = v0;
  sub_100002F78(&qword_1000FB588);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = *(_QWORD *)(v2 + 56);
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & v11;
  v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0)
    goto LABEL_12;
LABEL_11:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v9 << 6); ; i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    v20 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v21 = v20[1];
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * i);
    *v22 = *v20;
    v22[1] = v21;
    result = (void *)swift_bridgeObjectRetain(v21);
    if (v13)
      goto LABEL_11;
LABEL_12:
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_25:
    v13 = (v18 - 1) & v18;
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100017BC4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v1 = v0;
  v2 = type metadata accessor for ModelCatalogAsset(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100002F78(&qword_1000FB620);
  v6 = *v0;
  v7 = static _SetStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release(v6);
LABEL_30:
    *v1 = v8;
    return result;
  }
  v25 = v1;
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  if (!v16)
    goto LABEL_12;
LABEL_11:
  v18 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (i = v18 | (v13 << 6); ; i = __clz(__rbit64(v21)) + (v13 << 6))
  {
    v23 = *(_QWORD *)(v3 + 72) * i;
    sub_10001D2E0();
    result = (void *)sub_10001CB5C((uint64_t)v5, *(_QWORD *)(v8 + 48) + v23);
    if (v16)
      goto LABEL_11;
LABEL_12:
    v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v20 >= v17)
      goto LABEL_28;
    v21 = *(_QWORD *)(v10 + 8 * v20);
    ++v13;
    if (!v21)
    {
      v13 = v20 + 1;
      if (v20 + 1 >= v17)
        goto LABEL_28;
      v21 = *(_QWORD *)(v10 + 8 * v13);
      if (!v21)
      {
        v13 = v20 + 2;
        if (v20 + 2 >= v17)
          goto LABEL_28;
        v21 = *(_QWORD *)(v10 + 8 * v13);
        if (!v21)
          break;
      }
    }
LABEL_25:
    v16 = (v21 - 1) & v21;
  }
  v22 = v20 + 3;
  if (v22 >= v17)
  {
LABEL_28:
    result = (void *)swift_release(v6);
    v1 = v25;
    goto LABEL_30;
  }
  v21 = *(_QWORD *)(v10 + 8 * v22);
  if (v21)
  {
    v13 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v21 = *(_QWORD *)(v10 + 8 * v13);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_32:
  __break(1u);
  return result;
}

void sub_100017DE4()
{
  sub_100017DF0();
}

void sub_100017DF0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;

  sub_10001E9F8();
  v1 = v0;
  sub_100002F78(v2);
  v3 = (_QWORD *)*v0;
  v4 = static _SetStorage.copy(original:)(*v0);
  if (!v3[2])
  {
LABEL_28:
    sub_10001D9C8();
    *v1 = v4;
    return;
  }
  sub_10001DC08();
  v5 = v3 + 7;
  sub_10001E100();
  if ((_QWORD *)v4 != v3 || v6 >= &v3[v7 + 7])
    memmove(v6, v3 + 7, 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = v3[2];
  sub_10001DC08();
  v11 = v3[7];
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & v11;
  v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0)
    goto LABEL_12;
LABEL_11:
  sub_10001E5B8();
  while (1)
  {
    v18 = *(_QWORD *)(v3[6] + 8 * v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = v18;
    swift_retain(v18);
    if (v13)
      goto LABEL_11;
LABEL_12:
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v14)
      goto LABEL_28;
    ++v9;
    if (!v5[v16])
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v14)
        goto LABEL_28;
      if (!v5[v9])
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v14)
          goto LABEL_28;
        if (!v5[v9])
          break;
      }
    }
LABEL_25:
    sub_10001E71C();
  }
  v17 = v16 + 3;
  if (v17 >= v14)
    goto LABEL_28;
  if (v5[v17])
  {
    v9 = v17;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v9 >= v14)
      goto LABEL_28;
    ++v17;
    if (v5[v9])
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void sub_100017F5C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t (*v8)(_QWORD);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  sub_10001D810();
  v6 = v5;
  v7 = v0;
  v9 = v8(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v22 - v11;
  sub_10001DEE4();
  v13 = sub_10001E55C();
  if (!*(_QWORD *)(v6 + 16))
  {
    sub_10001DEEC();
LABEL_28:
    *v7 = v13;
    sub_100006A68();
    return;
  }
  v14 = (void *)sub_10001DC78();
  if (v17)
    v18 = (unint64_t)v14 >= v16;
  else
    v18 = 1;
  if (v18)
    sub_10001E858(v14, v15);
  sub_10001DA54();
  if (!v4)
    goto LABEL_10;
LABEL_9:
  sub_10001E3C8();
  while (1)
  {
    sub_10001DD78(v19);
    sub_10001DE08((uint64_t)v7 + *(_QWORD *)(v13 + 48), (uint64_t)v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 32));
    if (v4)
      goto LABEL_9;
LABEL_10:
    v20 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v2)
      goto LABEL_26;
    ++v3;
    if (!*(_QWORD *)(v1 + 8 * v20))
    {
      v3 = v20 + 1;
      if (v20 + 1 >= v2)
        goto LABEL_26;
      if (!*(_QWORD *)(v1 + 8 * v3))
      {
        v3 = v20 + 2;
        if (v20 + 2 >= v2)
          goto LABEL_26;
        if (!*(_QWORD *)(v1 + 8 * v3))
          break;
      }
    }
LABEL_23:
    sub_10001E734();
  }
  v21 = v20 + 3;
  if (v21 >= v2)
  {
LABEL_26:
    sub_10001DEEC();
    v7 = (uint64_t *)v22[1];
    goto LABEL_28;
  }
  if (*(_QWORD *)(v1 + 8 * v21))
  {
    v3 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    v3 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v3 >= v2)
      goto LABEL_26;
    ++v21;
    if (*(_QWORD *)(v1 + 8 * v3))
      goto LABEL_23;
  }
LABEL_30:
  __break(1u);
}

void sub_1000180B0()
{
  sub_100018298();
}

void sub_1000180C4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  _BYTE v21[24];

  v1 = v0;
  sub_100002F78(&qword_1000FB878);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = *(_QWORD *)(v2 + 56);
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & v11;
  v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0)
    goto LABEL_12;
LABEL_11:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v9 << 6); ; i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    v20 = 3 * i;
    sub_10001D500(*(_QWORD *)(v2 + 48) + 24 * i, (uint64_t)v21);
    sub_10001D4C4((uint64_t)v21, *(_QWORD *)(v4 + 48) + 8 * v20);
    if (v13)
      goto LABEL_11;
LABEL_12:
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_25:
    v13 = (v18 - 1) & v18;
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void sub_100018284()
{
  sub_100018298();
}

void sub_100018298()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;

  sub_10001D810();
  v8 = v7;
  v9 = v0;
  sub_100002F78(v10);
  sub_10001E6B4();
  __chkstk_darwin(v11);
  sub_10001E654();
  sub_10001DEE4();
  v12 = sub_10001E55C();
  if (!*(_QWORD *)(v8 + 16))
  {
    sub_10001DEEC();
LABEL_28:
    *v9 = v12;
    sub_100006A68();
    return;
  }
  v13 = (void *)sub_10001DC78();
  if (v16)
    v17 = (unint64_t)v13 >= v15;
  else
    v17 = 1;
  if (v17)
    sub_10001E858(v13, v14);
  sub_10001DA54();
  if (!v6)
    goto LABEL_10;
LABEL_9:
  sub_10001E3C8();
  while (1)
  {
    sub_10001DD78(v18);
    sub_10001DE08((uint64_t)v9 + *(_QWORD *)(v12 + 48), v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
    if (v6)
      goto LABEL_9;
LABEL_10:
    v19 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v4)
      goto LABEL_26;
    ++v5;
    if (!*(_QWORD *)(v2 + 8 * v19))
    {
      v5 = v19 + 1;
      if (v19 + 1 >= v4)
        goto LABEL_26;
      if (!*(_QWORD *)(v2 + 8 * v5))
      {
        v5 = v19 + 2;
        if (v19 + 2 >= v4)
          goto LABEL_26;
        if (!*(_QWORD *)(v2 + 8 * v5))
          break;
      }
    }
LABEL_23:
    sub_10001E734();
  }
  v20 = v19 + 3;
  if (v20 >= v4)
  {
LABEL_26:
    sub_10001DEEC();
    v9 = v21;
    goto LABEL_28;
  }
  if (*(_QWORD *)(v2 + 8 * v20))
  {
    v5 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v5 >= v4)
      goto LABEL_26;
    ++v20;
    if (*(_QWORD *)(v2 + 8 * v5))
      goto LABEL_23;
  }
LABEL_30:
  __break(1u);
}

void sub_1000183D0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  id v21;

  v1 = v0;
  sub_100002F78(&qword_1000FB718);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = *(_QWORD *)(v2 + 56);
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & v11;
  v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0)
    goto LABEL_12;
LABEL_11:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v9 << 6); ; i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    v20 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * i);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * i) = v20;
    v21 = v20;
    if (v13)
      goto LABEL_11;
LABEL_12:
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_25:
    v13 = (v18 - 1) & v18;
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void sub_100018578(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100002F78(&qword_1000FB2C0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_37:
    *v2 = v6;
    return;
  }
  v29 = v2;
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v5 + 56;
  swift_retain();
  v13 = 0;
  if (!v10)
    goto LABEL_10;
LABEL_9:
  v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * i);
    Hasher.init(_seed:)(v30, *(_QWORD *)(v6 + 40));
    swift_retain();
    sub_10008B000();
    v20 = Hasher._finalize()();
    v21 = -1 << *(_BYTE *)(v6 + 32);
    v22 = v20 & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6))) == 0)
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v21) >> 6;
      while (++v23 != v26 || (v25 & 1) == 0)
      {
        v27 = v23 == v26;
        if (v23 == v26)
          v23 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v12 + 8 * v23);
        if (v28 != -1)
        {
          v24 = __clz(__rbit64(~v28)) + (v23 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v12 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v24) = v19;
    ++*(_QWORD *)(v6 + 16);
    if (v10)
      goto LABEL_9;
LABEL_10:
    v16 = v13 + 1;
    if (__OFADD__(v13, 1))
      goto LABEL_39;
    if (v16 >= v11)
      goto LABEL_35;
    v17 = *(_QWORD *)(v8 + 8 * v16);
    ++v13;
    if (!v17)
    {
      v13 = v16 + 1;
      if (v16 + 1 >= v11)
        goto LABEL_35;
      v17 = *(_QWORD *)(v8 + 8 * v13);
      if (!v17)
      {
        v13 = v16 + 2;
        if (v16 + 2 >= v11)
          goto LABEL_35;
        v17 = *(_QWORD *)(v8 + 8 * v13);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v10 = (v17 - 1) & v17;
  }
  v18 = v16 + 3;
  if (v18 >= v11)
  {
LABEL_35:
    swift_release_n(v3, 2);
    v2 = v29;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v8 + 8 * v18);
  if (v17)
  {
    v13 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v11)
      goto LABEL_35;
    v17 = *(_QWORD *)(v8 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
}

Swift::Int sub_100018800(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100002F78(&qword_1000FB588);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_37:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  if (!v10)
    goto LABEL_10;
LABEL_9:
  v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * i);
    v20 = *v19;
    v21 = v19[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v21);
    String.hash(into:)(v33, v20, v21);
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v6 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6))) == 0)
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        v28 = v24 == v27;
        if (v24 == v27)
          v24 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v24);
        if (v29 != -1)
        {
          v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    v30 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v25);
    *v30 = v20;
    v30[1] = v21;
    ++*(_QWORD *)(v6 + 16);
    if (v10)
      goto LABEL_9;
LABEL_10:
    v16 = v13 + 1;
    if (__OFADD__(v13, 1))
      goto LABEL_39;
    if (v16 >= v32)
      goto LABEL_35;
    v17 = *(_QWORD *)(v8 + 8 * v16);
    ++v13;
    if (!v17)
    {
      v13 = v16 + 1;
      if (v16 + 1 >= v32)
        goto LABEL_35;
      v17 = *(_QWORD *)(v8 + 8 * v13);
      if (!v17)
      {
        v13 = v16 + 2;
        if (v16 + 2 >= v32)
          goto LABEL_35;
        v17 = *(_QWORD *)(v8 + 8 * v13);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v10 = (v17 - 1) & v17;
  }
  v18 = v16 + 3;
  if (v18 >= v32)
  {
LABEL_35:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v8 + 8 * v18);
  if (v17)
  {
    v13 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v32)
      goto LABEL_35;
    v17 = *(_QWORD *)(v8 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100018AA8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  Swift::Int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  _QWORD v44[9];

  v3 = type metadata accessor for ModelCatalogAsset(0);
  v41 = *(_QWORD *)(v3 - 8);
  v42 = (int *)v3;
  __chkstk_darwin(v3);
  v5 = (uint64_t **)((char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v37 = v1;
  v6 = *v1;
  if (*(_QWORD *)(*v1 + 24) > a1)
    a1 = *(_QWORD *)(*v1 + 24);
  sub_100002F78(&qword_1000FB620);
  v7 = static _SetStorage.resize(original:capacity:move:)(v6, a1, 0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = swift_release(v6);
LABEL_31:
    *v37 = v8;
    return result;
  }
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = *(_QWORD *)(v6 + 56);
  v38 = v6 + 56;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  else
    v11 = -1;
  v12 = v11 & v10;
  v39 = (unint64_t)(v9 + 63) >> 6;
  v40 = v7 + 56;
  result = swift_retain(v6);
  v14 = 0;
  if (!v12)
    goto LABEL_9;
LABEL_8:
  for (v12 &= v12 - 1; ; v12 = (v16 - 1) & v16)
  {
    v18 = *(_QWORD *)(v41 + 72);
    sub_10001D2E0();
    Hasher.init(_seed:)(v44, *(_QWORD *)(v8 + 40));
    v19 = *v5;
    v20 = v5[1];
    swift_bridgeObjectRetain(v20);
    String.hash(into:)(v44, v19, v20);
    swift_bridgeObjectRelease(v20);
    v21 = v5[2];
    Hasher._combine(_:)(*(_QWORD *)(v21 + 16));
    v22 = *(_QWORD *)(v21 + 16);
    if (v22)
    {
      v43 = v12;
      v23 = v18;
      v24 = v8;
      v25 = v14;
      v26 = v6;
      swift_bridgeObjectRetain(v21);
      v27 = (_QWORD *)(v21 + 40);
      do
      {
        v28 = *(v27 - 1);
        v29 = *v27;
        swift_bridgeObjectRetain(*v27);
        String.hash(into:)(v44, v28, v29);
        swift_bridgeObjectRelease(v29);
        v27 += 2;
        --v22;
      }
      while (v22);
      swift_bridgeObjectRelease(v21);
      v6 = v26;
      v14 = v25;
      v8 = v24;
      v18 = v23;
      v12 = v43;
    }
    v30 = v5[3];
    swift_bridgeObjectRetain(v30);
    sub_10004A3E4((uint64_t)v44, v30);
    swift_bridgeObjectRelease(v30);
    v31 = v42;
    v32 = type metadata accessor for AssetCost(0);
    sub_100006710(&qword_1000FB628, (uint64_t (*)(uint64_t))&type metadata accessor for AssetCost);
    dispatch thunk of Hashable.hash(into:)(v44, v32, v33);
    Hasher._combine(_:)(*((_BYTE *)v5 + v31[8]));
    Hasher._combine(_:)(*((_BYTE *)v5 + v31[9]));
    Hasher._combine(_:)(*((_BYTE *)v5 + v31[10]));
    v34 = Hasher._finalize()();
    v35 = v40;
    v36 = _HashTable.nextHole(atOrAfter:)(v34 & ~(-1 << *(_BYTE *)(v8 + 32)), v40, ~(-1 << *(_BYTE *)(v8 + 32)));
    *(_QWORD *)(v35 + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v36;
    result = sub_10001CB5C((uint64_t)v5, *(_QWORD *)(v8 + 48) + v36 * v18);
    ++*(_QWORD *)(v8 + 16);
    if (v12)
      goto LABEL_8;
LABEL_9:
    v15 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v15 >= v39)
      goto LABEL_29;
    v16 = *(_QWORD *)(v38 + 8 * v15);
    ++v14;
    if (!v16)
    {
      v14 = v15 + 1;
      if (v15 + 1 >= v39)
        goto LABEL_29;
      v16 = *(_QWORD *)(v38 + 8 * v14);
      if (!v16)
      {
        v14 = v15 + 2;
        if (v15 + 2 >= v39)
          goto LABEL_29;
        v16 = *(_QWORD *)(v38 + 8 * v14);
        if (!v16)
          break;
      }
    }
LABEL_22:
    ;
  }
  v17 = v15 + 3;
  if (v17 >= v39)
  {
LABEL_29:
    result = swift_release_n(v6, 2);
    goto LABEL_31;
  }
  v16 = *(_QWORD *)(v38 + 8 * v17);
  if (v16)
  {
    v14 = v17;
    goto LABEL_22;
  }
  while (1)
  {
    v14 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v14 >= v39)
      goto LABEL_29;
    v16 = *(_QWORD *)(v38 + 8 * v14);
    ++v17;
    if (v16)
      goto LABEL_22;
  }
LABEL_33:
  __break(1u);
  return result;
}

void sub_100018E6C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46[9];

  v7 = v5;
  v8 = (_QWORD *)*v5;
  if (*(_QWORD *)(*v5 + 24) <= a1)
    v9 = a1;
  else
    v9 = *(_QWORD *)(*v5 + 24);
  sub_10001E23C(a1, a2);
  v10 = sub_10001DF60((uint64_t)v8, v9, 0);
  if (!v8[2])
  {
    sub_10001DEEC();
LABEL_38:
    *v7 = v10;
    sub_100006A00();
    return;
  }
  sub_10001DC08();
  v42 = v7;
  v43 = v8 + 7;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  else
    v12 = -1;
  v13 = v12 & v8[7];
  sub_10001E100();
  v44 = v14;
  v15 = v10 + 56;
  swift_retain(v8);
  v16 = 0;
  if (!v13)
    goto LABEL_10;
LABEL_9:
  sub_10001E5A0();
  while (1)
  {
    v27 = *(_QWORD *)(v8[6] + 8 * v17);
    Hasher.init(_seed:)(v46, *(_QWORD *)(v10 + 40));
    sub_10001E69C();
    sub_100002F78(a4);
    sub_100006744(a5, a4);
    sub_10001E428(v28, v29, v30, v31, v32, v33);
    v34 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v10 + 32));
    if (((-1 << v34) & ~*(_QWORD *)(v15 + 8 * (v34 >> 6))) == 0)
    {
      sub_10001D88C();
      while (1)
      {
        sub_10001DD6C();
        if (v39)
        {
          if ((v36 & 1) != 0)
            break;
        }
        if (v37 == v38)
          v37 = 0;
        if (*(_QWORD *)(v15 + 8 * v37) != -1)
        {
          sub_10001D878();
          goto LABEL_34;
        }
      }
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    sub_10001D8A0();
LABEL_34:
    sub_10001DF74(v35);
    *(_QWORD *)(v41 + 8 * v40) = v27;
    sub_10001E604();
    if (v13)
      goto LABEL_9;
LABEL_10:
    v18 = v16 + 1;
    if (__OFADD__(v16, 1))
      goto LABEL_40;
    if (v18 >= v44)
      goto LABEL_36;
    ++v16;
    if (!v43[v18])
    {
      v16 = v18 + 1;
      if (v18 + 1 >= v44)
        goto LABEL_36;
      sub_10001E340();
      if (!v20)
      {
        v16 = v19 + 2;
        if (v19 + 2 >= v44)
          goto LABEL_36;
        sub_10001E340();
        if (!v22)
          break;
      }
    }
LABEL_23:
    sub_10001EB88();
    v17 = v26 + (v16 << 6);
  }
  v23 = v21 + 3;
  if (v23 >= v44)
  {
LABEL_36:
    sub_10001EBB0((uint64_t)v8);
    v7 = v42;
    goto LABEL_38;
  }
  if (v43[v23])
  {
    v16 = v23;
    goto LABEL_23;
  }
  while (1)
  {
    v16 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v16 >= v44)
      goto LABEL_36;
    sub_10001E340();
    v23 = v24 + 1;
    if (v25)
      goto LABEL_23;
  }
LABEL_41:
  __break(1u);
}

void sub_1000190A0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  sub_10001D810();
  v33 = v2;
  v34 = v3;
  v4 = v0;
  v7 = sub_10001E578(v5, v6);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v30 - v9;
  v11 = *v0;
  sub_10001E528();
  v12 = sub_10001DF60(v11, (uint64_t)v0, 0);
  if (!*(_QWORD *)(v11 + 16))
  {
    sub_10001DBEC();
LABEL_32:
    *v4 = v12;
    sub_100006A68();
    return;
  }
  sub_10001DC08();
  v30 = v0;
  v31 = v11 + 56;
  sub_10001E0B8();
  v32 = v13;
  v14 = v12 + 56;
  sub_10001DAE8();
  v15 = 0;
  if (!v1)
    goto LABEL_4;
LABEL_3:
  sub_10001E588();
  while (1)
  {
    v21 = *(_QWORD *)(v8 + 72);
    sub_10001E554((uint64_t)v10, *(_QWORD *)(v11 + 48) + v21 * v16, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16));
    sub_10001E970();
    sub_10001E214(v22);
    sub_10001DAF0();
    sub_10001E4EC();
    if (v23)
    {
      sub_10001D88C();
      while (1)
      {
        sub_10001DD6C();
        if (v23)
        {
          if ((v24 & 1) != 0)
            break;
        }
        if (v25 == v26)
          v25 = 0;
        if (*(_QWORD *)(v14 + 8 * v25) != -1)
        {
          sub_10001D878();
          goto LABEL_28;
        }
      }
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    sub_10001D8A0();
LABEL_28:
    sub_10001DB0C();
    *(_QWORD *)(v14 + v27) |= v28;
    sub_10001E554(*(_QWORD *)(v12 + 48) + v29 * v21, (uint64_t)v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 32));
    sub_10001E604();
    if (v1)
      goto LABEL_3;
LABEL_4:
    if (__OFADD__(v15, 1))
      goto LABEL_34;
    if (v15 + 1 >= v32)
      goto LABEL_30;
    sub_10001EA6C();
    v15 = v17;
    if (!v18)
    {
      v15 = v17 + 1;
      if (v17 + 1 >= v32)
        goto LABEL_30;
      if (!*(_QWORD *)(v31 + 8 * v15))
      {
        v15 = v17 + 2;
        if (v17 + 2 >= v32)
          goto LABEL_30;
        if (!*(_QWORD *)(v31 + 8 * v15))
          break;
      }
    }
LABEL_17:
    sub_10001DEB8();
  }
  if (v17 + 3 >= v32)
  {
LABEL_30:
    sub_10001EBB0(v11);
    v4 = v30;
    goto LABEL_32;
  }
  sub_10001EA6C();
  if (v20)
  {
    v15 = v19;
    goto LABEL_17;
  }
  while (1)
  {
    v15 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v15 >= v32)
      goto LABEL_30;
    ++v19;
    if (*(_QWORD *)(v31 + 8 * v15))
      goto LABEL_17;
  }
LABEL_35:
  __break(1u);
}

void sub_1000192C4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t *v39;

  sub_10001D810();
  v38 = v3;
  v39 = v4;
  v5 = v0;
  v7 = v6;
  v8 = sub_10001E23C(v6, v3);
  sub_10001E518();
  __chkstk_darwin(v9);
  sub_10001DEA0();
  v10 = *v5;
  sub_10001E528();
  v11 = sub_10001DF60(v10, v7, 0);
  if (!*(_QWORD *)(v10 + 16))
  {
    swift_release(v10);
LABEL_32:
    *v5 = v11;
    sub_100006A68();
    return;
  }
  sub_10001DC08();
  v36 = v10 + 56;
  sub_10001E97C();
  v14 = v13 & v12;
  sub_10001E100();
  v37 = v15;
  swift_retain(v10);
  v16 = 0;
  if (!v14)
    goto LABEL_4;
LABEL_3:
  v17 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  for (i = v17 | (v16 << 6); ; i = v25 + (v16 << 6))
  {
    v26 = *(_QWORD *)(v2 + 72);
    sub_10001EB74(v1, *(_QWORD *)(v10 + 48) + v26 * i, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
    sub_100006744(v39, v38);
    v27 = sub_10001E864();
    dispatch thunk of Hashable._rawHashValue(seed:)(v27, v8, v28);
    sub_10001DAF0();
    sub_10001E4EC();
    if (v29)
    {
      sub_10001D88C();
      while (1)
      {
        sub_10001DD6C();
        if (v29)
        {
          if ((v31 & 1) != 0)
            break;
        }
        if (v32 == v33)
          v32 = 0;
        if (*(_QWORD *)(v11 + 56 + 8 * v32) != -1)
        {
          sub_10001D878();
          goto LABEL_28;
        }
      }
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    sub_10001D8A0();
LABEL_28:
    sub_10001DF74(v30);
    sub_10001EB74(v35 + v34 * v26, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32));
    sub_10001E604();
    if (v14)
      goto LABEL_3;
LABEL_4:
    if (__OFADD__(v16, 1))
      goto LABEL_34;
    if (v16 + 1 >= v37)
      goto LABEL_30;
    sub_10001EC30();
    v16 = v19;
    if (!v20)
    {
      v16 = v19 + 1;
      if (v19 + 1 >= v37)
        goto LABEL_30;
      if (!*(_QWORD *)(v36 + 8 * v16))
      {
        v16 = v19 + 2;
        if (v19 + 2 >= v37)
          goto LABEL_30;
        if (!*(_QWORD *)(v36 + 8 * v16))
          break;
      }
    }
LABEL_17:
    sub_10001E70C();
    v14 = v24 & v23;
  }
  if (v19 + 3 >= v37)
  {
LABEL_30:
    sub_10001EBB0(v10);
    goto LABEL_32;
  }
  sub_10001EC30();
  if (v22)
  {
    v16 = v21;
    goto LABEL_17;
  }
  while (1)
  {
    v16 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v16 >= v37)
      goto LABEL_30;
    ++v21;
    if (*(_QWORD *)(v36 + 8 * v16))
      goto LABEL_17;
  }
LABEL_35:
  __break(1u);
}

void sub_100019508(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29[9];
  _BYTE v30[16];
  Swift::UInt v31;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100002F78(&qword_1000FB878);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_37:
    *v2 = v6;
    return;
  }
  v28 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v5 + 56;
  if (!v11)
    goto LABEL_10;
LABEL_9:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v7 << 6); ; i = __clz(__rbit64(v17)) + (v7 << 6))
  {
    sub_10001D500(*(_QWORD *)(v3 + 48) + 24 * i, (uint64_t)v30);
    Hasher.init(_seed:)(v29, *(_QWORD *)(v6 + 40));
    Hasher._combine(_:)(v31);
    v19 = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v6 + 32);
    v21 = v19 & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v13 + 8 * (v21 >> 6))) == 0)
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v13 + 8 * v22);
        if (v27 != -1)
        {
          v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v13 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v13 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    sub_10001D4C4((uint64_t)v30, *(_QWORD *)(v6 + 48) + 24 * v23);
    ++*(_QWORD *)(v6 + 16);
    if (v11)
      goto LABEL_9;
LABEL_10:
    v16 = v7 + 1;
    if (__OFADD__(v7, 1))
      goto LABEL_39;
    if (v16 >= v12)
      goto LABEL_35;
    v17 = *(_QWORD *)(v8 + 8 * v16);
    ++v7;
    if (!v17)
    {
      v7 = v16 + 1;
      if (v16 + 1 >= v12)
        goto LABEL_35;
      v17 = *(_QWORD *)(v8 + 8 * v7);
      if (!v17)
      {
        v7 = v16 + 2;
        if (v16 + 2 >= v12)
          goto LABEL_35;
        v17 = *(_QWORD *)(v8 + 8 * v7);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v11 = (v17 - 1) & v17;
  }
  v18 = v16 + 3;
  if (v18 >= v12)
  {
LABEL_35:
    swift_release(v3);
    v2 = v28;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v8 + 8 * v18);
  if (v17)
  {
    v7 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v7 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v7 >= v12)
      goto LABEL_35;
    v17 = *(_QWORD *)(v8 + 8 * v7);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
}

void sub_100019790(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::Int v19;
  id v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100002F78(&qword_1000FB718);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release();
LABEL_37:
    *v2 = v6;
    return;
  }
  v30 = v2;
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v5 + 56;
  swift_retain();
  v13 = 0;
  if (!v10)
    goto LABEL_10;
LABEL_9:
  v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = *(_QWORD *)(v6 + 40);
    v20 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * i);
    v21 = NSObject._rawHashValue(seed:)(v19);
    v22 = -1 << *(_BYTE *)(v6 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) == 0)
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        v28 = v24 == v27;
        if (v24 == v27)
          v24 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v24);
        if (v29 != -1)
        {
          v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v25) = v20;
    ++*(_QWORD *)(v6 + 16);
    if (v10)
      goto LABEL_9;
LABEL_10:
    v16 = v13 + 1;
    if (__OFADD__(v13, 1))
      goto LABEL_39;
    if (v16 >= v11)
      goto LABEL_35;
    v17 = *(_QWORD *)(v8 + 8 * v16);
    ++v13;
    if (!v17)
    {
      v13 = v16 + 1;
      if (v16 + 1 >= v11)
        goto LABEL_35;
      v17 = *(_QWORD *)(v8 + 8 * v13);
      if (!v17)
      {
        v13 = v16 + 2;
        if (v16 + 2 >= v11)
          goto LABEL_35;
        v17 = *(_QWORD *)(v8 + 8 * v13);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v10 = (v17 - 1) & v17;
  }
  v18 = v16 + 3;
  if (v18 >= v11)
  {
LABEL_35:
    swift_release_n(v3, 2);
    v2 = v30;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v8 + 8 * v18);
  if (v17)
  {
    v13 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v11)
      goto LABEL_35;
    v17 = *(_QWORD *)(v8 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
}

uint64_t sub_100019A04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t isStackAllocationSafe;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v22;

  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v7 = (unint64_t)((1 << v5) + 63) >> 6;
  v8 = 8 * v7;
  isStackAllocationSafe = swift_bridgeObjectRetain_n(a2, 2);
  if (v6 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v8, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    v10 = (unint64_t *)((char *)&v22 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_100011704(0, v7, v10);
    swift_bridgeObjectRetain(a2);
    v11 = sub_100019F10(v10, v7, a1, a2);
    v12 = swift_release(a1);
    if (v2)
      swift_willThrow(v12, v13, v14, v15, v16, v17, v18, v19);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  else
  {
    v20 = (unint64_t *)swift_slowAlloc(v8, -1);
    sub_100011704(0, v7, v20);
    swift_bridgeObjectRetain(a2);
    v11 = sub_100019F10(v20, v7, a1, a2);
    swift_release(a1);
    swift_slowDealloc(v20, -1, -1);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  swift_bridgeObjectRelease(a2);
  return v11;
}

uint64_t sub_100019BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t isStackAllocationSafe;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v23;

  v3 = v2;
  v6 = *(_BYTE *)(a1 + 32);
  v7 = v6 & 0x3F;
  v8 = (unint64_t)((1 << v6) + 63) >> 6;
  v9 = 8 * v8;
  isStackAllocationSafe = swift_retain_n(a2, 2);
  if (v7 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v9, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    v11 = (unint64_t *)((char *)&v23 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_100011704(0, v8, v11);
    swift_retain(a2);
    v12 = sub_10001A334(v11, v8, a1, a2);
    v13 = swift_release(a1);
    if (v3)
      swift_willThrow(v13, v14, v15, v16, v17, v18, v19, v20);
    swift_release_n(a2, 2);
  }
  else
  {
    v21 = (unint64_t *)swift_slowAlloc(v9, -1);
    sub_100011704(0, v8, v21);
    swift_retain(a2);
    v12 = sub_10001A334(v21, v8, a1, a2);
    swift_release(a1);
    swift_slowDealloc(v21, -1, -1);
    swift_release_n(a2, 2);
  }
  swift_release(a2);
  return v12;
}

uint64_t sub_100019D9C(uint64_t isStackAllocationSafe, int a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v22;

  v4 = isStackAllocationSafe;
  v5 = *(_BYTE *)(isStackAllocationSafe + 32);
  v6 = v5 & 0x3F;
  v7 = (1 << v5) + 63;
  v8 = v7 >> 6;
  v9 = 8 * (v7 >> 6);
  if (v6 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v7 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    v10 = (unint64_t *)((char *)&v22 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_100011704(0, v8, v10);
    v11 = sub_10001A870(v10, v8, v4, a2);
    v12 = swift_release(v4);
    if (v2)
      swift_willThrow(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  else
  {
    v20 = (unint64_t *)swift_slowAlloc(v9, -1);
    sub_100011704(0, v8, v20);
    v11 = sub_10001A870(v20, v8, v4, a2);
    swift_release(v4);
    swift_slowDealloc(v20, -1, -1);
  }
  return v11;
}

uint64_t sub_100019F10(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, unint64_t, uint64_t);
  uint64_t v41;
  char v42;
  void (*v43)(char *, uint64_t);
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  uint64_t v50;
  int64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;

  v48 = a2;
  v49 = a1;
  v6 = sub_100002F78(&qword_1000FB250);
  v62 = *(_QWORD **)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v47 - v10;
  v12 = type metadata accessor for Assertion.DaemonRep(0);
  v13 = *(_QWORD *)(v12 - 8);
  result = __chkstk_darwin(v12);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = a3;
  v56 = 0;
  v17 = 0;
  v20 = *(_QWORD *)(a3 + 56);
  v19 = a3 + 56;
  v18 = v20;
  v21 = 1 << *(_BYTE *)(v19 - 24);
  if (v21 < 64)
    v22 = ~(-1 << v21);
  else
    v22 = -1;
  v23 = v22 & v18;
  v50 = v19;
  v51 = (unint64_t)(v21 + 63) >> 6;
  v60 = a4 + 56;
  v61 = a4;
  v24 = v11;
  v53 = v13;
  v54 = result;
  v52 = v16;
  do
  {
    while (1)
    {
      if (v23)
      {
        v58 = (v23 - 1) & v23;
        v25 = __clz(__rbit64(v23)) | (v17 << 6);
      }
      else
      {
        v26 = v17 + 1;
        if (__OFADD__(v17, 1))
          goto LABEL_32;
        if (v26 >= v51)
        {
LABEL_31:
          v45 = v55;
          swift_retain(v55);
          v46 = sub_10001AC6C(v49, v48, v56, v45);
          swift_bridgeObjectRelease(a4);
          return v46;
        }
        v27 = *(_QWORD *)(v50 + 8 * v26);
        ++v17;
        if (!v27)
        {
          v17 = v26 + 1;
          if (v26 + 1 >= v51)
            goto LABEL_31;
          v27 = *(_QWORD *)(v50 + 8 * v17);
          if (!v27)
          {
            v17 = v26 + 2;
            if (v26 + 2 >= v51)
              goto LABEL_31;
            v27 = *(_QWORD *)(v50 + 8 * v17);
            if (!v27)
            {
              v28 = v26 + 3;
              if (v28 >= v51)
                goto LABEL_31;
              v27 = *(_QWORD *)(v50 + 8 * v28);
              if (!v27)
              {
                while (1)
                {
                  v17 = v28 + 1;
                  if (__OFADD__(v28, 1))
                    goto LABEL_33;
                  if (v17 >= v51)
                    goto LABEL_31;
                  v27 = *(_QWORD *)(v50 + 8 * v17);
                  ++v28;
                  if (v27)
                    goto LABEL_20;
                }
              }
              v17 = v28;
            }
          }
        }
LABEL_20:
        v58 = (v27 - 1) & v27;
        v25 = __clz(__rbit64(v27)) + (v17 << 6);
      }
      v29 = *(_QWORD *)(v55 + 48);
      v30 = *(_QWORD *)(v13 + 72);
      v57 = v25;
      v31 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v13 + 16))(v16, v29 + v30 * v25, v12);
      Assertion.DaemonRep.id.getter(v31);
      v32 = *(_QWORD *)(a4 + 16);
      v59 = v17;
      if (!v32)
        break;
      v33 = *(_QWORD *)(a4 + 40);
      sub_100006744(&qword_1000FB260, &qword_1000FB250);
      v35 = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v6, v34);
      v36 = -1 << *(_BYTE *)(a4 + 32);
      v37 = v35 & ~v36;
      if (((*(_QWORD *)(v60 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) == 0)
        break;
      v38 = ~v36;
      v39 = v62[9];
      v40 = (void (*)(char *, unint64_t, uint64_t))v62[2];
      while (1)
      {
        v40(v9, *(_QWORD *)(v61 + 48) + v39 * v37, v6);
        sub_100006744(&qword_1000FB268, &qword_1000FB250);
        v42 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v24, v6, v41);
        v43 = (void (*)(char *, uint64_t))v62[1];
        v43(v9, v6);
        if ((v42 & 1) != 0)
          break;
        v37 = (v37 + 1) & v38;
        if (((*(_QWORD *)(v60 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) == 0)
          goto LABEL_26;
      }
      v43(v24, v6);
      v16 = v52;
      v13 = v53;
      v12 = v54;
      result = (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v52, v54);
      a4 = v61;
      v23 = v58;
      v17 = v59;
    }
    v43 = (void (*)(char *, uint64_t))v62[1];
LABEL_26:
    v43(v24, v6);
    v16 = v52;
    v13 = v53;
    v12 = v54;
    result = (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v52, v54);
    *(unint64_t *)((char *)v49 + ((v57 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v57;
    v44 = __OFADD__(v56++, 1);
    a4 = v61;
    v23 = v58;
    v17 = v59;
  }
  while (!v44);
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_10001A334(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;
  __int128 v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t (*v28)(char *, unint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  uint64_t v69;
  char *v70;
  __int128 v71;
  uint64_t v72;
  int64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;

  v67 = a2;
  v76 = a4;
  v68 = a1;
  v5 = sub_100002F78(&qword_1000FB560);
  __chkstk_darwin(v5);
  v7 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Assertion.DaemonRep(0);
  v9 = __chkstk_darwin(v8);
  v74 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v9);
  v15 = (char *)&v66 - v12;
  v69 = 0;
  v16 = 0;
  v75 = a3;
  v19 = *(_QWORD *)(a3 + 56);
  v18 = a3 + 56;
  v17 = v19;
  v20 = 1 << *(_BYTE *)(v18 - 24);
  v21 = -1;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  v22 = v21 & v17;
  v72 = v18;
  v73 = (unint64_t)(v20 + 63) >> 6;
  *(_QWORD *)&v14 = 136315138;
  v71 = v14;
  v70 = (char *)&type metadata for Any + 8;
  v77 = v7;
  v78 = (char *)&v66 - v12;
  v80 = v13;
  while (v22)
  {
    v23 = __clz(__rbit64(v22));
    v22 &= v22 - 1;
    v24 = v23 | (v16 << 6);
LABEL_20:
    v28 = (uint64_t (*)(char *, unint64_t, uint64_t))v80[2];
    v29 = v8;
    v30 = v28(v15, *(_QWORD *)(v75 + 48) + v80[9] * v24, v8);
    v31 = Assertion.DaemonRep.policy.getter(v30);
    v33 = v32;
    v34 = *(_QWORD *)(v76 + 296);
    v35 = *(_QWORD *)(v34 + 16);
    v79 = v24;
    if (v35)
    {
      v36 = v31;
      swift_bridgeObjectRetain(v34);
      v37 = sub_100010994(v36, v33);
      if ((v38 & 1) != 0)
      {
        v39 = v37;
        v40 = *(_QWORD *)(v34 + 56);
        v41 = type metadata accessor for Policy(0);
        v42 = *(_QWORD *)(v41 - 8);
        v43 = v40 + *(_QWORD *)(v42 + 72) * v39;
        v7 = v77;
        v15 = v78;
        (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v77, v43, v41);
        v44 = (uint64_t)v7;
        v45 = 0;
      }
      else
      {
        v41 = type metadata accessor for Policy(0);
        v7 = v77;
        v44 = (uint64_t)v77;
        v45 = 1;
      }
      sub_100005630(v44, v45, 1, v41);
      swift_bridgeObjectRelease(v33);
      v46 = v34;
    }
    else
    {
      v41 = type metadata accessor for Policy(0);
      sub_100005630((uint64_t)v7, 1, 1, v41);
      v46 = v33;
    }
    swift_bridgeObjectRelease(v46);
    type metadata accessor for Policy(0);
    v47 = sub_100005700((uint64_t)v7, 1, v41);
    sub_10001D5AC((uint64_t)v7, &qword_1000FB560);
    if (v47 == 1)
    {
      v79 = v16;
      if (qword_1000FB0D0 != -1)
        swift_once(&qword_1000FB0D0, sub_100006C5C);
      v48 = type metadata accessor for Logger(0);
      sub_100002FF8(v48, (uint64_t)qword_1000FB328);
      v49 = v74;
      v50 = v15;
      v51 = v29;
      v52 = v28(v74, (unint64_t)v50, v29);
      v53 = Logger.logObject.getter(v52);
      v54 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v53, v54))
      {
        v55 = swift_slowAlloc(12, -1);
        v56 = swift_slowAlloc(32, -1);
        v81 = v56;
        *(_DWORD *)v55 = v71;
        v57 = Assertion.DaemonRep.policy.getter(v56);
        v59 = v58;
        sub_1000102C0(v57, v58, &v81);
        *(_QWORD *)(v55 + 4) = v60;
        swift_bridgeObjectRelease(v59);
        v61 = (void (*)(char *, uint64_t))v80[1];
        v61(v49, v51);
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "Cannot restore assertion with non-existent policy: %s", (uint8_t *)v55, 0xCu);
        swift_arrayDestroy(v56, 1);
        swift_slowDealloc(v56, -1, -1);
        v62 = v55;
        v7 = v77;
        swift_slowDealloc(v62, -1, -1);
      }
      else
      {
        v61 = (void (*)(char *, uint64_t))v80[1];
        v61(v49, v51);
      }

      v8 = v51;
      v15 = v78;
      v16 = v79;
      result = ((uint64_t (*)(char *, uint64_t))v61)(v78, v8);
    }
    else
    {
      v8 = v29;
      result = ((uint64_t (*)(char *, uint64_t))v80[1])(v15, v29);
      *(unint64_t *)((char *)v68 + ((v79 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v79;
      if (__OFADD__(v69++, 1))
        goto LABEL_39;
    }
  }
  v25 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v25 >= v73)
    goto LABEL_36;
  v26 = *(_QWORD *)(v72 + 8 * v25);
  ++v16;
  if (v26)
    goto LABEL_19;
  v16 = v25 + 1;
  if (v25 + 1 >= v73)
    goto LABEL_36;
  v26 = *(_QWORD *)(v72 + 8 * v16);
  if (v26)
    goto LABEL_19;
  v16 = v25 + 2;
  if (v25 + 2 >= v73)
    goto LABEL_36;
  v26 = *(_QWORD *)(v72 + 8 * v16);
  if (v26)
  {
LABEL_19:
    v22 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v16 << 6);
    goto LABEL_20;
  }
  v27 = v25 + 3;
  if (v27 >= v73)
  {
LABEL_36:
    v64 = v75;
    swift_retain(v75);
    v65 = sub_10001AC6C(v68, v67, v69, v64);
    swift_release(v76);
    return v65;
  }
  v26 = *(_QWORD *)(v72 + 8 * v27);
  if (v26)
  {
    v16 = v27;
    goto LABEL_19;
  }
  while (1)
  {
    v16 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v16 >= v73)
      goto LABEL_36;
    v26 = *(_QWORD *)(v72 + 8 * v16);
    ++v27;
    if (v26)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10001A870(unint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;

  v25 = a2;
  v26 = a1;
  v6 = type metadata accessor for Assertion.DaemonRep(0);
  v7 = *(_QWORD *)(v6 - 8);
  result = __chkstk_darwin(v6);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = 0;
  v12 = *(_QWORD *)(a3 + 56);
  v27 = 0;
  v28 = a3 + 56;
  v13 = 1 << *(_BYTE *)(a3 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v29 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_20;
    }
    v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v18 >= v29)
      goto LABEL_24;
    v19 = *(_QWORD *)(v28 + 8 * v18);
    ++v11;
    if (!v19)
    {
      v11 = v18 + 1;
      if (v18 + 1 >= v29)
        goto LABEL_24;
      v19 = *(_QWORD *)(v28 + 8 * v11);
      if (!v19)
      {
        v11 = v18 + 2;
        if (v18 + 2 >= v29)
          goto LABEL_24;
        v19 = *(_QWORD *)(v28 + 8 * v11);
        if (!v19)
          break;
      }
    }
LABEL_19:
    v15 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_20:
    v21 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v7 + 16))(v10, *(_QWORD *)(a3 + 48) + *(_QWORD *)(v7 + 72) * v17, v6);
    v22 = Assertion.DaemonRep.acquirerPID.getter(v21);
    result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if (v22 == a4)
    {
      *(unint64_t *)((char *)v26 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      if (__OFADD__(v27++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain(a3);
        return sub_10001AC6C(v26, v25, v27, a3);
      }
    }
  }
  v20 = v18 + 3;
  if (v20 >= v29)
    goto LABEL_24;
  v19 = *(_QWORD *)(v28 + 8 * v20);
  if (v19)
  {
    v11 = v20;
    goto LABEL_19;
  }
  while (1)
  {
    v11 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v11 >= v29)
      goto LABEL_24;
    v19 = *(_QWORD *)(v28 + 8 * v11);
    ++v20;
    if (v19)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
  return result;
}

void sub_10001AA9C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;

  sub_10001DA08();
  v4 = v3;
  if (!v2)
  {
LABEL_36:
    sub_10001D930();
    goto LABEL_37;
  }
  if (*(_QWORD *)(v3 + 16) == v2)
  {
LABEL_37:
    sub_10001DFCC();
    return;
  }
  v5 = v1;
  v6 = v0;
  sub_100002F78(&qword_1000FB2C0);
  v7 = sub_10001E9D8();
  v8 = v7;
  v27 = v6;
  if (v5 < 1)
    v9 = 0;
  else
    v9 = *v6;
  v10 = 0;
  v11 = v7 + 56;
  while (1)
  {
    if (v9)
    {
      sub_10001E9E4();
      v14 = v13 | (v10 << 6);
      goto LABEL_24;
    }
    v15 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_40;
    if (v15 >= v5)
      goto LABEL_36;
    ++v10;
    if (!v27[v15])
    {
      v10 = v15 + 1;
      if (v15 + 1 >= v5)
        goto LABEL_36;
      if (!v27[v10])
      {
        v10 = v15 + 2;
        if (v15 + 2 >= v5)
          goto LABEL_36;
        if (!v27[v10])
          break;
      }
    }
LABEL_23:
    sub_10001E370();
LABEL_24:
    v17 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    sub_10001DC4C(*(_QWORD *)(v8 + 40), v12);
    sub_10001DAE8();
    sub_10008B000();
    v18 = sub_10001DBF4() & ~(-1 << *(_BYTE *)(v8 + 32));
    if (((-1 << v18) & ~*(_QWORD *)(v11 + 8 * (v18 >> 6))) == 0)
    {
      sub_10001D88C();
      while (1)
      {
        sub_10001DD6C();
        if (v22)
        {
          if ((v19 & 1) != 0)
            break;
        }
        if (v20 == v21)
          v20 = 0;
        if (*(_QWORD *)(v11 + 8 * v20) != -1)
        {
          sub_10001D878();
          goto LABEL_34;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    sub_10001D8A0();
LABEL_34:
    sub_10001DB0C();
    *(_QWORD *)(v11 + v23) |= v24;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v25) = v17;
    sub_10001EB04();
    if (v26)
      goto LABEL_39;
  }
  v16 = v15 + 3;
  if (v16 >= v5)
    goto LABEL_36;
  if (v27[v16])
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v5)
      goto LABEL_36;
    ++v16;
    if (v27[v10])
      goto LABEL_23;
  }
LABEL_41:
  __break(1u);
}

uint64_t sub_10001AC6C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;

  v8 = type metadata accessor for Assertion.DaemonRep(0);
  __chkstk_darwin(v8);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release(a4);
    return (uint64_t)_swiftEmptySetSingleton;
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  v40 = v9;
  sub_100002F78(&qword_1000FB270);
  result = static _SetStorage.allocate(capacity:)(a3);
  v12 = result;
  v38 = a1;
  v39 = a2;
  if (a2 < 1)
    v14 = 0;
  else
    v14 = *a1;
  v15 = 0;
  v16 = result + 56;
  v17 = v40;
  while (1)
  {
    if (v14)
    {
      v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v19 = v18 | (v15 << 6);
    }
    else
    {
      v20 = v15 + 1;
      if (__OFADD__(v15, 1))
        goto LABEL_40;
      if (v20 >= v39)
      {
LABEL_36:
        swift_release(a4);
        return v12;
      }
      v21 = v38[v20];
      ++v15;
      if (!v21)
      {
        v15 = v20 + 1;
        if (v20 + 1 >= v39)
          goto LABEL_36;
        v21 = v38[v15];
        if (!v21)
        {
          v15 = v20 + 2;
          if (v20 + 2 >= v39)
            goto LABEL_36;
          v21 = v38[v15];
          if (!v21)
          {
            v22 = v20 + 3;
            if (v22 >= v39)
              goto LABEL_36;
            v21 = v38[v22];
            if (!v21)
            {
              while (1)
              {
                v15 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_41;
                if (v15 >= v39)
                  goto LABEL_36;
                v21 = v38[v15];
                ++v22;
                if (v21)
                  goto LABEL_24;
              }
            }
            v15 = v22;
          }
        }
      }
LABEL_24:
      v14 = (v21 - 1) & v21;
      v19 = __clz(__rbit64(v21)) + (v15 << 6);
    }
    v23 = a4;
    v24 = *(_QWORD *)(a4 + 48);
    v25 = *(_QWORD *)(v17 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v11, v24 + v25 * v19, v8);
    v26 = *(_QWORD *)(v12 + 40);
    sub_100006710(&qword_1000FB278, (uint64_t (*)(uint64_t))&type metadata accessor for Assertion.DaemonRep);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v26, v8, v27);
    v28 = -1 << *(_BYTE *)(v12 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6))) == 0)
      break;
    v31 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    v17 = v40;
LABEL_34:
    *(_QWORD *)(v16 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v31;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v17 + 32))(*(_QWORD *)(v12 + 48) + v31 * v25, v11, v8);
    ++*(_QWORD *)(v12 + 16);
    if (__OFSUB__(a3--, 1))
      goto LABEL_39;
    a4 = v23;
    if (!a3)
      goto LABEL_36;
  }
  v32 = 0;
  v33 = (unint64_t)(63 - v28) >> 6;
  v17 = v40;
  while (++v30 != v33 || (v32 & 1) == 0)
  {
    v34 = v30 == v33;
    if (v30 == v33)
      v30 = 0;
    v32 |= v34;
    v35 = *(_QWORD *)(v16 + 8 * v30);
    if (v35 != -1)
    {
      v31 = __clz(__rbit64(~v35)) + (v30 << 6);
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

void sub_10001AF64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;

  sub_10001DA90();
  a31 = v32;
  a32 = v37;
  v38 = v36;
  if (!v35)
  {
LABEL_36:
    sub_10001D930();
    goto LABEL_37;
  }
  if (*(_QWORD *)(v36 + 16) == v35)
  {
LABEL_37:
    sub_10001D8F8();
    return;
  }
  v39 = v34;
  v40 = v33;
  sub_100002F78(&qword_1000FB2D0);
  v41 = sub_10001E9D8();
  v42 = v41;
  v61 = v39;
  if (v39 < 1)
    v43 = 0;
  else
    v43 = *v40;
  v44 = 0;
  v45 = v41 + 56;
  while (1)
  {
    if (v43)
    {
      sub_10001E5A0();
      goto LABEL_24;
    }
    v47 = v44 + 1;
    if (__OFADD__(v44, 1))
      goto LABEL_40;
    if (v47 >= v61)
      goto LABEL_36;
    v48 = v40[v47];
    ++v44;
    if (!v48)
    {
      v44 = v47 + 1;
      if (v47 + 1 >= v61)
        goto LABEL_36;
      v48 = v40[v44];
      if (!v48)
      {
        v44 = v47 + 2;
        if (v47 + 2 >= v61)
          goto LABEL_36;
        v48 = v40[v44];
        if (!v48)
          break;
      }
    }
LABEL_23:
    v43 = (v48 - 1) & v48;
    v46 = __clz(__rbit64(v48)) + (v44 << 6);
LABEL_24:
    v50 = *(_QWORD *)(*(_QWORD *)(v38 + 48) + 8 * v46);
    Hasher.init(_seed:)(&a12, *(_QWORD *)(v42 + 40));
    sub_10001E8B0();
    v51 = sub_100002F78(&qword_1000FB2D8);
    sub_100006744(&qword_1000FB2E0, &qword_1000FB2D8);
    dispatch thunk of Hashable.hash(into:)(&a12, v51, v52);
    Hasher._finalize()();
    sub_10001DAF0();
    sub_10001E4EC();
    if (v53)
    {
      sub_10001D88C();
      while (1)
      {
        sub_10001DD6C();
        if (v53)
        {
          if ((v54 & 1) != 0)
            break;
        }
        if (v55 == v56)
          v55 = 0;
        if (*(_QWORD *)(v45 + 8 * v55) != -1)
        {
          sub_10001D878();
          goto LABEL_34;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    sub_10001D8A0();
LABEL_34:
    sub_10001DB0C();
    *(_QWORD *)(v45 + v57) |= v58;
    *(_QWORD *)(*(_QWORD *)(v42 + 48) + 8 * v59) = v50;
    sub_10001EB04();
    if (v60)
      goto LABEL_39;
  }
  v49 = v47 + 3;
  if (v49 >= v61)
    goto LABEL_36;
  v48 = v40[v49];
  if (v48)
  {
    v44 = v49;
    goto LABEL_23;
  }
  while (1)
  {
    v44 = v49 + 1;
    if (__OFADD__(v49, 1))
      break;
    if (v44 >= v61)
      goto LABEL_36;
    v48 = v40[v44];
    ++v49;
    if (v48)
      goto LABEL_23;
  }
LABEL_41:
  __break(1u);
}

void sub_10001B17C()
{
  sub_10001B68C();
}

_QWORD *sub_10001B1A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;

  v1 = a1;
  if ((a1 & 0xC000000000000001) == 0)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
      goto LABEL_5;
    return _swiftEmptyArrayStorage;
  }
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  v2 = __CocoaSet.count.getter(a1);
  if (!v2)
    return _swiftEmptyArrayStorage;
LABEL_5:
  if (v2 <= 0)
  {
    v4 = _swiftEmptyArrayStorage;
  }
  else
  {
    v3 = sub_100002F78(&qword_1000FB750);
    v4 = (_QWORD *)sub_100006A80(v3, 8 * v2 + 32);
    j__malloc_size(v4);
    sub_10001DE20();
    v4[2] = v2;
    v4[3] = v5;
  }
  sub_10001E338();
  v6 = sub_10001B9E4((uint64_t)&v8, v4 + 4, v2, v1);
  result = (_QWORD *)sub_10001CD34(v8);
  if (v6 == v2)
    return v4;
  __break(1u);
  return result;
}

_QWORD *sub_10001B27C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100002F78(&qword_1000FB608);
  v4 = *(_QWORD *)(type metadata accessor for Assertion.DaemonRep(0) - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = (_QWORD *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  result = (_QWORD *)j__malloc_size(v8);
  if (v5)
  {
    if ((_QWORD *)((char *)result - v7) != (_QWORD *)0x8000000000000000 || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      v11 = sub_10001BCE0(&v13, (uint64_t)v8 + v7, v1, a1);
      v12 = v13;
      swift_bridgeObjectRetain(a1);
      sub_10001CD34(v12);
      if (v11 == v1)
        return v8;
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_10001B394()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  BOOL v16;
  uint64_t v17;

  sub_10001E9F8();
  v4 = v3 >> 1;
  v6 = (v3 >> 1) - v5;
  if (__OFSUB__(v3 >> 1, v5))
  {
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (!v6)
    goto LABEL_13;
  sub_10001E3B8();
  if (v7 ^ v8 | v16)
    goto LABEL_11;
  sub_100002F78(&qword_1000FB8B8);
  v9 = sub_10001E5EC();
  v10 = *(_QWORD *)(type metadata accessor for InferenceProviderDescriptor(v9) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = *(unsigned __int8 *)(v10 + 80);
  v13 = (v12 + 32) & ~v12;
  v14 = (_QWORD *)swift_allocObject(v2, v13 + v11 * v6, v12 | 7);
  v15 = j__malloc_size(v14);
  if (!v11)
    goto LABEL_15;
  v16 = v15 - v13 == 0x8000000000000000 && v11 == -1;
  if (v16)
    goto LABEL_16;
  v14[2] = v6;
  v14[3] = 2 * ((uint64_t)(v15 - v13) / v11);
LABEL_11:
  if (v4 != v0)
  {
    v17 = type metadata accessor for InferenceProviderDescriptor(0);
    sub_100010230(v1 + *(_QWORD *)(*(_QWORD *)(v17 - 8) + 72) * v0, v6);
LABEL_13:
    sub_10001D950();
    return;
  }
LABEL_17:
  __break(1u);
}

void sub_10001B494(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;

  v6 = a4 >> 1;
  v7 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }
  else
  {
    if (!v7)
      goto LABEL_9;
    sub_10001E3B8();
    if (v9 ^ v10 | v8)
    {
      v12 = _swiftEmptyArrayStorage;
    }
    else
    {
      v11 = sub_100002F78(&qword_1000FB658);
      v12 = (_QWORD *)sub_100006A80(v11, 40 * v7 + 32);
      v13 = j__malloc_size(v12);
      v12[2] = v7;
      v12[3] = 2 * ((uint64_t)(v13 - 32) / 40);
    }
    if (v6 != v4)
    {
      sub_10000FFCC(v5 + 40 * v4, v7, (unint64_t)(v12 + 4));
LABEL_9:
      sub_10001E7B4();
      return;
    }
  }
  __break(1u);
}

void sub_10001B53C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _BYTE v7[40];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v3 = sub_100002F78(&qword_1000FB558);
    v4 = (_QWORD *)sub_100006A80(v3, 16 * v1 + 32);
    j__malloc_size(v4);
    sub_10001E95C();
    v4[2] = v1;
    v4[3] = v5;
    sub_10001BFA8((uint64_t)v7, v4 + 4, v1, a1);
    sub_10001EA98();
    sub_10001E140();
    sub_10001E498();
    if (!v6)
      __break(1u);
  }
  sub_10001DF20();
}

void sub_10001B5CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  char v6;
  _BYTE v7[40];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v3 = sub_100002F78(&qword_1000FB9C0);
    v4 = (_QWORD *)sub_100006A80(v3, 40 * v1 + 32);
    v5 = j__malloc_size(v4);
    v4[2] = v1;
    v4[3] = 2 * ((uint64_t)(v5 - 32) / 40);
    sub_10001C1A4((uint64_t)v7, (uint64_t)(v4 + 4), v1, a1);
    sub_10001EA98();
    sub_10001E338();
    sub_10001E498();
    if (!v6)
      __break(1u);
  }
  sub_10001DF20();
}

void sub_10001B668()
{
  sub_10001B68C();
}

void sub_10001B68C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t (*v2)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v3)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v4;
  uint64_t *v5;
  unint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t);

  sub_10001E9F8();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = v1;
  if (v1 >> 62)
    goto LABEL_8;
  v0 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v0)
  {
    if (v0 <= 0)
    {
      v12 = _swiftEmptyArrayStorage;
    }
    else
    {
      v11 = sub_100002F78(&qword_1000FB750);
      v12 = (_QWORD *)sub_100006A80(v11, 8 * v0 + 32);
      j__malloc_size(v12);
      sub_10001DE20();
      v12[2] = v0;
      v12[3] = v13;
    }
    sub_10001DBE4();
    v14 = sub_10001B830((uint64_t)(v12 + 4), v0, v10, v9, v7, v5, v3);
    v3 = v15;
    swift_bridgeObjectRelease(v14);
    if (v3 == (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))v0)
      break;
    __break(1u);
LABEL_8:
    sub_10001DA24();
    v0 = _CocoaArrayWrapper.endIndex.getter(v0);
    sub_10001DA38();
  }
  sub_10001D950();
}

void sub_10001B76C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v6 = a4 >> 1;
  v7 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }
  else
  {
    if (!v7)
      goto LABEL_8;
    sub_10001E3B8();
    if (!(v9 ^ v10 | v8))
    {
      v11 = sub_100002F78(&qword_1000FB750);
      v12 = (_QWORD *)sub_100006A80(v11, 8 * v7 + 32);
      j__malloc_size(v12);
      sub_10001DE20();
      v12[2] = v7;
      v12[3] = v13;
    }
    if (v6 != v4)
    {
      sub_100010198(v5 + 8 * v4, v7);
LABEL_8:
      sub_10001E7B4();
      return;
    }
  }
  __break(1u);
}

uint64_t sub_10001B80C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001B830(a1, a2, a3, (uint64_t)type metadata accessor for DaemonRequest, &qword_1000FB958, &qword_1000FB950, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000C2CEC);
}

uint64_t sub_10001B830(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  void (*v21)(_BYTE *, _QWORD);
  uint64_t *v22;
  uint64_t v23;
  _BYTE v24[32];

  v12 = result;
  v13 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    sub_10001D964();
    v14 = sub_100006B70();
    result = sub_10001D8B4();
    if (!v14)
      return sub_10001EBDC();
  }
  else
  {
    v14 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v14)
      return sub_10001EBDC();
  }
  if (v12)
  {
    if (v13)
    {
      if (a3 < 0)
        v15 = a3;
      else
        v15 = a3 & 0xFFFFFFFFFFFFFF8;
      sub_10001D964();
      v16 = _CocoaArrayWrapper.endIndex.getter(v15);
      result = sub_10001D8B4();
      if (v16 <= a2)
      {
        if (v14 >= 1)
        {
          sub_100006744(a5, a6);
          v18 = v17;
          sub_10001D964();
          for (i = 0; i != v14; ++i)
          {
            v20 = sub_10001E908();
            v21 = (void (*)(_BYTE *, _QWORD))a7(v24, i, a3, v20, v18);
            v23 = *v22;
            sub_10001E8B0();
            v21(v24, 0);
            *(_QWORD *)(v12 + 8 * i) = v23;
          }
          sub_10001D8B4();
          return sub_10001EBDC();
        }
        goto LABEL_19;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        sub_100010198((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10));
        return sub_10001EBDC();
      }
      __break(1u);
    }
    __break(1u);
LABEL_19:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10001B9A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = -1 << *(_BYTE *)(a1 + 32);
  *a4 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64)
    v8 = ~(-1 << -(char)v4);
  else
    v8 = -1;
  a4[3] = 0;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t sub_10001B9E4(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  uint64_t v34;
  _QWORD v35[6];

  v4 = a4;
  v7 = (uint64_t *)result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a4 < 0)
      v8 = a4;
    else
      v8 = a4 & 0xFFFFFFFFFFFFFF8;
    v9 = __CocoaSet.makeIterator()(v8);
    v10 = type metadata accessor for InferenceProviderAsset(0);
    sub_100006710(&qword_1000FB768, type metadata accessor for InferenceProviderAsset);
    result = Set.Iterator.init(_cocoa:)(v9, v10, v11);
    v4 = v35[1];
    v12 = v35[2];
    v13 = v35[3];
    v14 = v35[4];
    v15 = v35[5];
  }
  else
  {
    v14 = 0;
    v16 = -1 << *(_BYTE *)(a4 + 32);
    v12 = a4 + 56;
    v13 = ~v16;
    v17 = -v16;
    if (v17 < 64)
      v18 = ~(-1 << v17);
    else
      v18 = -1;
    v15 = v18 & *(_QWORD *)(a4 + 56);
  }
  v32 = v7;
  if (!a2)
  {
    v19 = 0;
LABEL_50:
    *v32 = v4;
    v32[1] = v12;
    v32[2] = v13;
    v32[3] = v14;
    v32[4] = v15;
    return v19;
  }
  if (!a3)
  {
    v19 = 0;
    goto LABEL_50;
  }
  if (a3 < 0)
    goto LABEL_52;
  v19 = 0;
  v33 = (unint64_t)(v13 + 64) >> 6;
  v31 = v13;
  while (1)
  {
    if (v4 < 0)
    {
      v22 = v12;
      v23 = __CocoaSet.Iterator.next()(result);
      if (!v23)
        goto LABEL_49;
      v24 = v23;
      v34 = v23;
      v25 = type metadata accessor for InferenceProviderAsset(0);
      swift_unknownObjectRetain(v24);
      swift_dynamicCast(v35, &v34, (char *)&type metadata for Swift.AnyObject + 8, v25, 7);
      v26 = v35[0];
      result = swift_unknownObjectRelease(v24);
      v12 = v22;
      if (!v26)
        goto LABEL_49;
      goto LABEL_31;
    }
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_30;
    }
    v27 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v27 >= v33)
    {
      v15 = 0;
      goto LABEL_49;
    }
    v28 = *(_QWORD *)(v12 + 8 * v27);
    if (v28)
      goto LABEL_29;
    v29 = v14 + 2;
    if (v14 + 2 >= v33)
    {
      v15 = 0;
      ++v14;
      goto LABEL_49;
    }
    v28 = *(_QWORD *)(v12 + 8 * v29);
    if (!v28)
    {
      if (v14 + 3 >= v33)
        goto LABEL_46;
      v28 = *(_QWORD *)(v12 + 8 * (v14 + 3));
      if (v28)
      {
        v27 = v14 + 3;
        goto LABEL_29;
      }
      v29 = v14 + 4;
      if (v14 + 4 >= v33)
      {
        v15 = 0;
        v14 += 3;
        goto LABEL_49;
      }
      v28 = *(_QWORD *)(v12 + 8 * v29);
      if (!v28)
      {
        v27 = v14 + 5;
        if (v14 + 5 >= v33)
        {
LABEL_46:
          v15 = 0;
          v14 = v29;
          goto LABEL_49;
        }
        v28 = *(_QWORD *)(v12 + 8 * v27);
        if (!v28)
        {
          v30 = v14 + 6;
          while (v30 < v33)
          {
            v28 = *(_QWORD *)(v12 + 8 * v30++);
            if (v28)
            {
              v27 = v30 - 1;
              goto LABEL_29;
            }
          }
          v15 = 0;
          v14 = v33 - 1;
          goto LABEL_49;
        }
        goto LABEL_29;
      }
    }
    v27 = v29;
LABEL_29:
    v15 = (v28 - 1) & v28;
    v21 = __clz(__rbit64(v28)) + (v27 << 6);
    v14 = v27;
LABEL_30:
    v26 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v21);
    result = swift_retain(v26);
    if (!v26)
      goto LABEL_49;
LABEL_31:
    ++v19;
    *a2++ = v26;
    if (v19 == a3)
    {
      v19 = a3;
LABEL_49:
      v13 = v31;
      goto LABEL_50;
    }
  }
  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

uint64_t sub_10001BCE0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v8 = type metadata accessor for Assertion.DaemonRep(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = ((uint64_t (*)(void))__chkstk_darwin)();
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v10);
  v15 = (char *)&v32 - v14;
  v39 = a4;
  v18 = *(_QWORD *)(a4 + 56);
  v17 = a4 + 56;
  v16 = v18;
  v37 = v17;
  v19 = -1 << *(_BYTE *)(v17 - 24);
  if (-v19 < 64)
    v20 = ~(-1 << -(char)v19);
  else
    v20 = -1;
  v21 = v20 & v16;
  if (!a2)
  {
    v22 = 0;
    a3 = 0;
LABEL_38:
    v31 = v37;
    *a1 = v39;
    a1[1] = v31;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }
  if (!a3)
  {
    v22 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v34 = -1 << *(_BYTE *)(v17 - 24);
  v35 = a1;
  v22 = 0;
  v23 = 0;
  v36 = (unint64_t)(63 - v19) >> 6;
  v33 = v36 - 1;
  v38 = a3;
  if (!v21)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    v29 = *(_QWORD *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v12, *(_QWORD *)(v39 + 48) + v29 * v25, v8);
    v30 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v30(v15, v12, v8);
    result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v15, v8);
    a3 = v38;
    if (v23 == v38)
      goto LABEL_37;
    a2 += v29;
    if (v21)
      goto LABEL_8;
LABEL_9:
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v26 >= v36)
      goto LABEL_32;
    v27 = *(_QWORD *)(v37 + 8 * v26);
    if (!v27)
      break;
LABEL_18:
    v21 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v22 = v26;
  }
  v22 += 2;
  if (v26 + 1 >= v36)
  {
    v21 = 0;
    v22 = v26;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v37 + 8 * v22);
  if (v27)
    goto LABEL_14;
  v28 = v26 + 2;
  if (v26 + 2 >= v36)
    goto LABEL_32;
  v27 = *(_QWORD *)(v37 + 8 * v28);
  if (v27)
    goto LABEL_17;
  v22 = v26 + 3;
  if (v26 + 3 >= v36)
  {
    v21 = 0;
    v22 = v26 + 2;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v37 + 8 * v22);
  if (v27)
  {
LABEL_14:
    v26 = v22;
    goto LABEL_18;
  }
  v28 = v26 + 4;
  if (v26 + 4 >= v36)
  {
LABEL_32:
    v21 = 0;
LABEL_36:
    a3 = v23;
LABEL_37:
    v19 = v34;
    a1 = v35;
    goto LABEL_38;
  }
  v27 = *(_QWORD *)(v37 + 8 * v28);
  if (v27)
  {
LABEL_17:
    v26 = v28;
    goto LABEL_18;
  }
  while (1)
  {
    v26 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v26 >= v36)
    {
      v21 = 0;
      v22 = v33;
      goto LABEL_36;
    }
    v27 = *(_QWORD *)(v37 + 8 * v26);
    ++v28;
    if (v27)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10001BFA8(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain(v21);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10001C1A4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  __int128 v21[2];
  __int128 v22[2];

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v13 = 0;
LABEL_36:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v13;
  }
  if (!a3)
  {
    v12 = 0;
    v13 = 0;
    goto LABEL_36;
  }
  if (a3 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  v20 = -1 << *(_BYTE *)(a4 + 32);
  while (v9)
  {
    v15 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v16 = v15 | (v12 << 6);
LABEL_23:
    ++v13;
    sub_10001D29C(*(_QWORD *)(a4 + 56) + 40 * v16, (uint64_t)v21);
    sub_10000667C(v21, (uint64_t)v22);
    result = sub_10000667C(v22, v11);
    v11 += 40;
    if (v13 == a3)
    {
      v13 = a3;
LABEL_35:
      v7 = v20;
      goto LABEL_36;
    }
  }
  v17 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v17 >= v14)
    goto LABEL_34;
  v18 = *(_QWORD *)(v6 + 8 * v17);
  if (v18)
    goto LABEL_22;
  v19 = v12 + 2;
  ++v12;
  if (v17 + 1 >= v14)
    goto LABEL_34;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_15;
  v12 = v17 + 1;
  if (v17 + 2 >= v14)
    goto LABEL_34;
  v18 = *(_QWORD *)(v6 + 8 * (v17 + 2));
  if (v18)
  {
    v17 += 2;
    goto LABEL_22;
  }
  v12 = v17 + 2;
  if (v17 + 3 >= v14)
    goto LABEL_34;
  v18 = *(_QWORD *)(v6 + 8 * (v17 + 3));
  if (v18)
  {
    v17 += 3;
    goto LABEL_22;
  }
  v19 = v17 + 4;
  v12 = v17 + 3;
  if (v17 + 4 >= v14)
  {
LABEL_34:
    v9 = 0;
    goto LABEL_35;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_15:
    v17 = v19;
LABEL_22:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v12 = v14 - 1;
      goto LABEL_34;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_22;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10001C3B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  int64_t v32;
  int64_t v33;
  void (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  int64_t v45;

  v3 = sub_100002F78(&qword_1000FB678);
  __chkstk_darwin(v3);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100002F78(&qword_1000FB6A0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v40 - v10;
  v12 = *v1;
  v13 = v1[1];
  v15 = v1[2];
  v14 = v1[3];
  v16 = v14;
  v17 = v1[4];
  v41 = v5;
  if (v17)
  {
    v44 = v9;
    v45 = v14;
    v42 = v15;
    v43 = v13;
    v18 = a1;
    v19 = (v17 - 1) & v17;
    v20 = __clz(__rbit64(v17)) | (v14 << 6);
LABEL_3:
    v21 = *(_QWORD *)(v12 + 56);
    v22 = (uint64_t *)(*(_QWORD *)(v12 + 48) + 16 * v20);
    v23 = v12;
    v24 = *v22;
    v25 = v22[1];
    v26 = type metadata accessor for Policy(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(&v11[*(int *)(v3 + 48)], v21 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v20, v26);
    *(_QWORD *)v11 = v24;
    *((_QWORD *)v11 + 1) = v25;
    sub_100005630((uint64_t)v11, 0, 1, v3);
    v27 = v25;
    v12 = v23;
    swift_bridgeObjectRetain(v27);
    a1 = v18;
    v13 = v43;
    v9 = v44;
    v15 = v42;
    goto LABEL_25;
  }
  v28 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
LABEL_23:
    v16 = v10;
    goto LABEL_24;
  }
  v29 = (unint64_t)(v15 + 64) >> 6;
  if (v28 < v29)
  {
    v30 = *(_QWORD *)(v13 + 8 * v28);
    if (v30)
    {
LABEL_7:
      v42 = v15;
      v43 = v13;
      v44 = v9;
      v45 = v28;
      v18 = a1;
      v19 = (v30 - 1) & v30;
      v20 = __clz(__rbit64(v30)) + (v28 << 6);
      goto LABEL_3;
    }
    v31 = v14 + 2;
    v16 = v14 + 1;
    if (v14 + 2 < v29)
    {
      v30 = *(_QWORD *)(v13 + 8 * v31);
      if (v30)
      {
LABEL_10:
        v28 = v31;
        goto LABEL_7;
      }
      v16 = v14 + 2;
      if (v14 + 3 < v29)
      {
        v30 = *(_QWORD *)(v13 + 8 * (v14 + 3));
        if (v30)
        {
          v28 = v14 + 3;
          goto LABEL_7;
        }
        v31 = v14 + 4;
        v16 = v14 + 3;
        if (v14 + 4 < v29)
        {
          v30 = *(_QWORD *)(v13 + 8 * v31);
          if (v30)
            goto LABEL_10;
          v28 = v14 + 5;
          v16 = v14 + 4;
          if (v14 + 5 < v29)
          {
            v30 = *(_QWORD *)(v13 + 8 * v28);
            if (v30)
              goto LABEL_7;
            v10 = v29 - 1;
            v32 = v14 + 6;
            while (v32 < v29)
            {
              v30 = *(_QWORD *)(v13 + 8 * v32++);
              if (v30)
              {
                v28 = v32 - 1;
                goto LABEL_7;
              }
            }
            goto LABEL_23;
          }
        }
      }
    }
  }
LABEL_24:
  v45 = v16;
  sub_100005630((uint64_t)v11, 1, 1, v3);
  v19 = 0;
LABEL_25:
  *v1 = v12;
  v1[1] = v13;
  v33 = v45;
  v1[2] = v15;
  v1[3] = v33;
  v1[4] = v19;
  v34 = (void (*)(uint64_t))v1[5];
  sub_10001CD3C((uint64_t)v11, (uint64_t)v9, &qword_1000FB6A0);
  v35 = 1;
  if (sub_100005700((uint64_t)v9, 1, v3) != 1)
  {
    v36 = (uint64_t)v9;
    v37 = (uint64_t)v41;
    sub_10001CD3C(v36, (uint64_t)v41, &qword_1000FB678);
    v34(v37);
    sub_10001D5AC(v37, &qword_1000FB678);
    v35 = 0;
  }
  v38 = sub_100002F78(&qword_1000FB680);
  return sub_100005630(a1, v35, 1, v38);
}

uint64_t sub_10001C6C4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = -1;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v5 = v6;
  if (-v3 < 64)
    v2 = ~(-1 << -(char)v3);
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

int64_t sub_10001C700(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  if (v5 + 1 < (unint64_t)(result + 63) >> 6)
  {
    v10 = *(_QWORD *)(v6 + 8 * v9);
    if (v10)
      return __clz(__rbit64(v10)) + (v9 << 6);
    v11 = (unint64_t)(result + 63) >> 6;
    v9 = v5 + 2;
    if (v5 + 2 < v11)
    {
      v10 = *(_QWORD *)(v6 + 8 * v9);
      if (v10)
        return __clz(__rbit64(v10)) + (v9 << 6);
      while (v5 + 3 < v11)
      {
        v10 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v10)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v10)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_10001C7E4(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_10001C7F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_QWORD *sub_10001C830(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_10001C858(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v2 = 64;
  for (i = 9; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    v1 = *(_QWORD *)(a1 + 8 * i);
    v2 += 64;
    if (v1)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_10001C8D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_100002F78(&qword_1000FB250);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_10001C950()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100002F78(&qword_1000FB250);
  sub_10001E1B0();
  v0 = swift_task_alloc(dword_1000FB5A4);
  v1 = (_QWORD *)sub_100006AF4(v0);
  v2 = sub_10001DE5C(v1);
  return sub_10000A8D0(v2, v3, v4);
}

uint64_t sub_10001C9B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10001EC28();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return sub_10001E060(v0, v5, v6);
}

uint64_t sub_10001CA1C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_10001EC28();
  v0 = swift_task_alloc(dword_1000FB5C4);
  v1 = (_QWORD *)sub_100006AF4(v0);
  v2 = sub_10001DE5C(v1);
  return sub_1000096A4(v2, v3, v4);
}

uint64_t sub_10001CA84()
{
  uint64_t (**v0)(void);

  sub_10001D680(*((_QWORD *)*v0 + 2));
  return sub_100006A38(v0[1]);
}

uint64_t sub_10001CABC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_10001DB50();
  sub_10001D864();
  v1 = swift_task_alloc(dword_1000FB5DC);
  v2 = (_QWORD *)sub_100006AF4(v1);
  *v2 = v0;
  v2[1] = sub_10001D668;
  sub_10001D6E4();
  sub_10001DB20();
  return sub_10000F3F4(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10001CB10()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10001DD0C();
  sub_10001D984();
  v0 = swift_task_alloc(dword_1000FB5EC);
  v1 = (_QWORD *)sub_100006AF4(v0);
  sub_10001D750(v1);
  sub_10001DCCC();
  return sub_10000F780(v2, v3, v4, v5, v6);
}

uint64_t sub_10001CB5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ModelCatalogAsset(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10001CBA0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  v2 = sub_10001E9B8(a1, a2);
  sub_10001DD50(v2);
  sub_100006C14();
}

uint64_t sub_10001CBC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100002F78(&qword_1000FB560);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001CC08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = *(_QWORD *)(sub_100002F78(&qword_1000FB560) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = sub_10001DED0();
  if (!sub_10001EB7C(v0 + v3))
    sub_10001EB58(v0 + v3, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8));
  v6 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + v6));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7 + 8));
  return sub_10001E060(v0, v7 + 16, v2 | 7);
}

uint64_t sub_10001CCA8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_10001DD0C();
  sub_100002F78(&qword_1000FB560);
  sub_10001E1B0();
  v1 = swift_task_alloc(dword_1000FB66C);
  v2 = (_QWORD *)sub_100006AF4(v1);
  *v2 = v0;
  v2[1] = sub_10001CA84;
  sub_10001E91C();
  sub_10001DCCC();
  return sub_100008550(v3, v4, v5, v6, v7);
}

uint64_t sub_10001CD34(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

void sub_10001CD3C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_100002F78(a3);
  sub_10001EBE8(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  sub_100006C14();
}

uint64_t sub_10001CD74(uint64_t a1)
{
  uint64_t v1;

  return sub_10000D380(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_10001CD94()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_10001DB50();
  sub_10001D864();
  v1 = swift_task_alloc(dword_1000FB6BC);
  v2 = (_QWORD *)sub_100006AF4(v1);
  *v2 = v0;
  v2[1] = sub_10001D668;
  sub_10001D6E4();
  sub_10001DB20();
  return sub_10000E98C(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10001CDE8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10001DD0C();
  sub_10001D984();
  v0 = swift_task_alloc(dword_1000FB6CC);
  v1 = (_QWORD *)sub_100006AF4(v0);
  sub_10001D750(v1);
  sub_10001DCCC();
  return sub_10000F054(v2, v3, v4, v5, v6);
}

uint64_t sub_10001CE38()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_10001DB50();
  sub_10001D864();
  v1 = swift_task_alloc(dword_1000FB6EC);
  v2 = (_QWORD *)sub_100006AF4(v1);
  *v2 = v0;
  v2[1] = sub_10001D668;
  sub_10001D6E4();
  sub_10001DB20();
  return sub_10000EE4C(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10001CE8C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10001DD0C();
  sub_10001D984();
  v0 = swift_task_alloc(dword_1000FB6FC);
  v1 = (_QWORD *)sub_100006AF4(v0);
  sub_10001D750(v1);
  sub_10001DCCC();
  return sub_10000F34C(v2, v3, v4, v5, v6);
}

unint64_t sub_10001CED8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000FB708;
  if (!qword_1000FB708)
  {
    v1 = objc_opt_self(RBSProcessIdentifier);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000FB708);
  }
  return result;
}

uint64_t sub_10001CF18()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_10001DB50();
  sub_10001D864();
  v1 = swift_task_alloc(dword_1000FB734);
  v2 = (_QWORD *)sub_100006AF4(v1);
  *v2 = v0;
  v2[1] = sub_10001D668;
  sub_10001D6E4();
  sub_10001DB20();
  return sub_10000ED7C(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10001CF6C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10001DD0C();
  sub_10001D984();
  v0 = swift_task_alloc(dword_1000FB744);
  v1 = (_QWORD *)sub_100006AF4(v0);
  sub_10001D750(v1);
  sub_10001DCCC();
  return sub_10000F2A8(v2, v3, v4, v5, v6);
}

uint64_t sub_10001CFB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v14;

  *(_QWORD *)(v7 + 16) = a1;
  v14 = (_QWORD *)swift_task_alloc(dword_1000FB7A4);
  *(_QWORD *)(v7 + 24) = v14;
  *v14 = v7;
  v14[1] = sub_10001D040;
  return sub_10000F4D4(a2, a3, a4, a5, a6, a7);
}

uint64_t sub_10001D040(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *v2;
  v7 = v4;
  v5 = *v2;
  sub_10001D788(*(_QWORD *)(v4 + 24), &v7);
  if (!v1)
    **(_QWORD **)(v4 + 16) = a1;
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_10001D09C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);

  sub_10001DB68();
  sub_10001D864();
  v1 = swift_task_alloc(dword_1000FB77C);
  v2 = (_QWORD *)sub_100006AF4(v1);
  *v2 = v0;
  v2[1] = sub_10001D668;
  v3 = sub_10001D6E4();
  return sub_10001DCE0(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10001D0F0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10001DD0C();
  sub_10001D984();
  v0 = swift_task_alloc(dword_1000FB78C);
  v1 = (_QWORD *)sub_100006AF4(v0);
  sub_10001D750(v1);
  sub_10001DCCC();
  return sub_10000F8B0(v2, v3, v4, v5, v6);
}

uint64_t sub_10001D13C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v14;

  *(_QWORD *)(v7 + 16) = a1;
  v14 = (_QWORD *)swift_task_alloc(dword_1000FB7D4);
  *(_QWORD *)(v7 + 24) = v14;
  *v14 = v7;
  v14[1] = sub_10001D1C4;
  return sub_10000EB04(a2, a3, a4, a5, a6, a7);
}

uint64_t sub_10001D1C4(char a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE *v4;

  sub_10001DB38();
  v4 = *(_BYTE **)(v3 + 16);
  sub_10001D680(*(_QWORD *)(v3 + 24));
  *v4 = a1;
  return sub_100006A5C(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10001D1FC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);

  sub_10001DB68();
  sub_10001D864();
  v1 = swift_task_alloc(dword_1000FB7B4);
  v2 = (_QWORD *)sub_100006AF4(v1);
  *v2 = v0;
  v2[1] = sub_10001D668;
  v3 = sub_10001D6E4();
  return sub_10001DCE0(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10001D250()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10001DD0C();
  sub_10001D984();
  v0 = swift_task_alloc(dword_1000FB7C4);
  v1 = (_QWORD *)sub_100006AF4(v0);
  sub_10001D750(v1);
  sub_10001DCCC();
  return sub_10000F13C(v2, v3, v4, v5, v6);
}

uint64_t sub_10001D29C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_10001D2E0()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  v0 = sub_10001E56C();
  v2 = v1(v0);
  sub_10001EBE8(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16));
  sub_100006C14();
}

uint64_t sub_10001D318()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_10001DB50();
  sub_10001D864();
  v1 = swift_task_alloc(dword_1000FB834);
  v2 = (_QWORD *)sub_100006AF4(v1);
  *v2 = v0;
  v2[1] = sub_10001D668;
  sub_10001D6E4();
  sub_10001DB20();
  return sub_10000F6A0(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10001D36C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10001DD0C();
  sub_10001D984();
  v0 = swift_task_alloc(dword_1000FB844);
  v1 = (_QWORD *)sub_100006AF4(v0);
  sub_10001D750(v1);
  sub_10001DCCC();
  return sub_10000FA4C(v2, v3, v4, v5, v6);
}

uint64_t sub_10001D3BC()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  sub_10001E390();
  swift_release(v0[5]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10001D3F4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_10001DB50();
  sub_10001D864();
  v1 = swift_task_alloc(dword_1000FB85C);
  v2 = (_QWORD *)sub_100006AF4(v1);
  *v2 = v0;
  v2[1] = sub_10001D668;
  sub_10001D6E4();
  sub_10001DB20();
  return sub_10000ECAC(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10001D448()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  sub_10001E390();
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10001D478()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10001DD0C();
  sub_10001D984();
  v0 = swift_task_alloc(dword_1000FB86C);
  v1 = (_QWORD *)sub_100006AF4(v0);
  sub_10001D750(v1);
  sub_10001DCCC();
  return sub_10000F204(v2, v3, v4, v5, v6);
}

uint64_t sub_10001D4C4(uint64_t a1, uint64_t a2)
{
  initializeWithTake for InferenceProviderExtensionConnection.TerminationHandlerWrapper(a2, a1);
  return a2;
}

uint64_t sub_10001D500(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for InferenceProviderExtensionConnection.TerminationHandlerWrapper(a2, a1);
  return a2;
}

uint64_t sub_10001D53C(uint64_t a1)
{
  destroy for InferenceProviderExtensionConnection.TerminationHandlerWrapper();
  return a1;
}

unint64_t sub_10001D570()
{
  unint64_t result;

  result = qword_1000FB8A0;
  if (!qword_1000FB8A0)
  {
    result = swift_getWitnessTable(&unk_1000CBE90, &type metadata for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
    atomic_store(result, (unint64_t *)&qword_1000FB8A0);
  }
  return result;
}

void sub_10001D5AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = sub_10001E23C(a1, a2);
  sub_10001DD50(v2);
  sub_100006C14();
}

uint64_t sub_10001D5D0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10001D5FC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = swift_task_alloc(dword_1000FB9B4);
  v1 = (_QWORD *)sub_100006AF4(v0);
  v2 = sub_10001DE5C(v1);
  return sub_10000AD60(v2, v3, v4);
}

uint64_t sub_10001D64C(uint64_t a1)
{
  return sub_10001CD74(a1) & 1;
}

uint64_t sub_10001D674()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_10001D680(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 8) = *v1;
  return swift_task_dealloc(a1);
}

uint64_t sub_10001D690()
{
  uint64_t v0;

  return swift_task_alloc(*(unsigned int *)(*(_QWORD *)(v0 + 40) + 4));
}

uint64_t sub_10001D6BC@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

uint64_t sub_10001D6D0()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_10001D6DC()
{
  return swift_task_switch();
}

uint64_t sub_10001D6E4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001D708()
{
  return ((uint64_t (*)(void))Task<>.value.getter)();
}

uint64_t sub_10001D718()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100005630(v0, 1, 1, v1);
}

uint64_t sub_10001D72C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 16);
}

uint64_t sub_10001D744(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10001D750(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10001D770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, 11, 2, a4, 55, 2, a7, 25, a9, a10, a11);
}

uint64_t sub_10001D788@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = v2;
  return swift_task_dealloc(a1);
}

uint64_t sub_10001D790(uint64_t a1)
{
  return swift_slowDealloc(a1, -1, -1);
}

void *sub_10001D79C@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  size_t v2;

  return memmove(__dst, a2, v2);
}

uint64_t sub_10001D7AC()
{
  uint64_t v0;

  return swift_retain_n(v0, 2);
}

uint64_t sub_10001D7C4()
{
  return Task<>.value.getter();
}

uint64_t sub_10001D7CC(uint64_t a1)
{
  return swift_task_alloc((*(_QWORD *)(*(_QWORD *)(a1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_10001D7E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2, a7, 25, a9, a10, a11);
}

uint64_t sub_10001D7EC()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_10001D7F4(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10001D800@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(_QWORD *)(a1 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_10001D828@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_10001D834(uint64_t a1)
{
  return swift_retain_n(a1, 2);
}

uint64_t sub_10001D83C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return Actor.assertIsolated(_:file:line:)(a1, 0, a3, 29, 2, 38, v3);
}

uint64_t sub_10001D854()
{
  return ((uint64_t (*)(void))swift_arrayInitWithCopy)();
}

uint64_t sub_10001D8B4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10001D8BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return Actor.assertIsolated(_:file:line:)(a1, 0, a3, 29, 2, 44, v3);
}

uint64_t sub_10001D8D4(uint64_t a1)
{
  return swift_slowAlloc(a1, -1);
}

uint64_t sub_10001D8DC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10001D914@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(a2 + 24) = v2;
  return swift_release(a1);
}

uint64_t sub_10001D920(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_release(v1);
}

uint64_t sub_10001D930()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10001D938()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_10001D940(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10001D948(uint64_t a1, uint64_t a2)
{
  return swift_task_switch(a1, a2, 0);
}

uint64_t sub_10001D964()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10001D96C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  return Actor.assertIsolated(_:file:line:)(a1, a2, a3, a4, a5, a6, v6);
}

uint64_t sub_10001D994(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = result;
  return result;
}

uint64_t sub_10001D9A0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  v5 = *(_QWORD *)(v3 + 72);
  *v4 = *v1;
  *(_QWORD *)(v3 + 80) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_10001D9C0()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10001D9C8()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10001D9D0@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 + ((v1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v1;
  *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v1) = v2;
  ++*(_QWORD *)(v3 + 16);
  return __CocoaSet.Iterator.next()();
}

uint64_t sub_10001DA24()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10001DA38()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10001DA40@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

void sub_10001DA54()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v1 + 16);
}

uint64_t sub_10001DAAC()
{
  return Task.value.getter();
}

uint64_t sub_10001DAB4()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100005630(v0, 1, 1, v1);
}

uint64_t sub_10001DAC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return sub_100002CAC(v2, a2, v3);
}

uint64_t sub_10001DAD4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001DAE8()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_10001DB04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0);
}

void sub_10001DB38()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_10001DB48()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_10001DBA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return swift_dynamicCast(a1, a2, a3, v3, 7);
}

uint64_t sub_10001DBAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100005630(a1, a2, a3, a4);
}

uint64_t sub_10001DBB8(uint64_t a1)
{
  return swift_arrayDestroy(a1, 1);
}

uint64_t sub_10001DBC0()
{
  return type metadata accessor for TaskPriority(0);
}

uint64_t sub_10001DBC8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10001DBE4()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10001DBEC()
{
  uint64_t v0;

  return swift_release(v0);
}

Swift::Int sub_10001DBF4()
{
  return Hasher._finalize()();
}

uint64_t sub_10001DC14()
{
  return Task<>.value.getter();
}

_QWORD *sub_10001DC4C(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  return Hasher.init(_seed:)((uint64_t *)va, a1);
}

uint64_t sub_10001DC54(uint64_t a1)
{
  uint64_t v1;

  return static _SetStorage.resize(original:capacity:move:)(a1, v1, 1);
}

uint64_t sub_10001DC64()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001DC78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 88) = v0;
  return v1 + 56;
}

uint64_t sub_10001DCA4()
{
  uint64_t v0;
  uint64_t v1;

  return static _SetStorage.convert(_:capacity:)(v0, v1);
}

uint64_t sub_10001DCE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void))
{
  return a8();
}

uint64_t sub_10001DCF8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001DD20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return sub_100002CAC(v2, a2, v3);
}

uint64_t sub_10001DD2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return swift_allocObject(v1, ((*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(a1 - 8) + 72) * v2, *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80) | 7);
}

uint64_t sub_10001DD50(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t sub_10001DD64()
{
  return type metadata accessor for Logger(0);
}

uint64_t sub_10001DD78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, *(_QWORD *)(v2 + 48) + *(_QWORD *)(v4 + 72) * a1, v1);
}

uint64_t sub_10001DDC0(uint64_t a1)
{
  uint64_t v1;

  return _HashTable.nextHole(atOrAfter:)(a1 & ~(-1 << *(_BYTE *)(v1 + 32)), v1 + 56, ~(-1 << *(_BYTE *)(v1 + 32)));
}

uint64_t sub_10001DE08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

void sub_10001DE10()
{
  uint64_t v0;

  ++*(_QWORD *)(v0 + 16);
}

uint64_t sub_10001DE38(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10001DE5C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10001DE80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v3 + *(_QWORD *)(*(_QWORD *)(a1 - 8) + 72) * v2, a1);
}

uint64_t sub_10001DED0()
{
  return type metadata accessor for Policy(0);
}

uint64_t sub_10001DEE4()
{
  uint64_t *v0;

  return sub_100002F78(v0);
}

uint64_t sub_10001DEEC()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10001DEF4(uint64_t a1)
{
  uint64_t v1;

  return swift_allocObject(a1, ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(_QWORD *)(v1 + 72), *(unsigned __int8 *)(v1 + 80) | 7);
}

uint64_t sub_10001DF10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return Set.init(minimumCapacity:)(v1, v2, a1);
}

unint64_t sub_10001DF3C(unint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  return result;
}

uint64_t sub_10001DF60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static _SetStorage.resize(original:capacity:move:)(a1, a2, a3);
}

uint64_t sub_10001DF68()
{
  uint64_t v0;

  return swift_unknownObjectRetain(v0);
}

void sub_10001DF74(unint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a1;
}

uint64_t sub_10001DF98()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0[5] + 16))(v0[7], v0[2], v0[4]);
}

_QWORD *sub_10001DFB4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = result;
  *result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_10001DFC0()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 - 248))(*(_QWORD *)(v0 - 224));
}

uint64_t sub_10001E004()
{
  return ((uint64_t (*)(void))swift_arrayInitWithTakeBackToFront)();
}

uint64_t sub_10001E024()
{
  return ((uint64_t (*)(void))swift_arrayInitWithTakeFrontToBack)();
}

uint64_t sub_10001E034()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10001E03C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  return v1 + ((v2 + 32) & ~v2);
}

uint64_t sub_10001E060(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_10001E070()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001E098()
{
  uint64_t v0;

  return swift_release(v0);
}

void sub_10001E0D8()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_10001E0E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_10001E0F0()
{
  return 0;
}

uint64_t sub_10001E118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v10 + 48) + 8 * v11);
  *a10 = v12;
  return swift_retain(v12);
}

uint64_t sub_10001E140()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

void sub_10001E18C(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0xCu);
}

uint64_t sub_10001E194()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_10001E19C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001E1D0()
{
  return type metadata accessor for InferenceProviderAssetManager(0);
}

uint64_t sub_10001E1D8()
{
  return type metadata accessor for InferenceProviderAsset(0);
}

unint64_t sub_10001E1E0(uint64_t a1, uint64_t a2)
{
  return sub_100010994(a1, a2);
}

void sub_10001E1E8(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_10001CBA0(a1, v1);
}

uint64_t sub_10001E20C()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_10001E214(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return dispatch thunk of Hashable._rawHashValue(seed:)(v1, v2, a1);
}

uint64_t sub_10001E228(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  return dispatch thunk of Hashable.hash(into:)(va, v3, a1);
}

uint64_t sub_10001E23C(uint64_t a1, uint64_t *a2)
{
  return sub_100002F78(a2);
}

uint64_t sub_10001E244()
{
  uint64_t v0;
  uint64_t v1;

  *(_WORD *)(v1 + 12) = 2112;
  return swift_errorRetain(v0);
}

uint64_t sub_10001E258@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = a1;
  return swift_unknownObjectRelease(v2);
}

BOOL sub_10001E264(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_10001E26C(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 33, 0);
}

uint64_t sub_10001E278()
{
  return ((uint64_t (*)(void))swift_arrayInitWithCopy)();
}

uint64_t sub_10001E280()
{
  return __CocoaSet.Iterator.next()();
}

void sub_10001E2A0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0x16u);
}

uint64_t sub_10001E2B4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001E2F8()
{
  uint64_t v0;

  return __CocoaSet.makeIterator()(v0);
}

uint64_t sub_10001E304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, a4);
}

uint64_t sub_10001E310(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = result;
  v4[3] = a2;
  return result;
}

uint64_t sub_10001E330()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_10001E338()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10001E368()
{
  return type metadata accessor for RequestPriority(0);
}

void sub_10001E388()
{
  sub_10001D2E0();
}

uint64_t sub_10001E390()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 32));
}

uint64_t sub_10001E3E0()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10001E404()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return sub_10001D500(*(_QWORD *)(v0 + 48) + v2 * v1, v3 - 208);
}

uint64_t sub_10001E420()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10001E428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  return dispatch thunk of Hashable.hash(into:)(va, v6, a1);
}

uint64_t sub_10001E438(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  return dispatch thunk of Hashable.hash(into:)(va, v2, a1);
}

uint64_t sub_10001E448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a10, a9, v10);
}

uint64_t sub_10001E458()
{
  return 0;
}

_QWORD *sub_10001E470(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  return Hasher.init(_seed:)((uint64_t *)va, *(_QWORD *)(v2 + 40));
}

uint64_t sub_10001E480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t *v11;
  uint64_t v12;

  v12 = *v11;
  *v11 = a11;
  return swift_bridgeObjectRelease(v12);
}

uint64_t sub_10001E490()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_10001E498()
{
  uint64_t v0;

  return sub_10001CD34(v0);
}

uint64_t sub_10001E4C0()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10001E4C8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001E4D4()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10001E528()
{
  uint64_t *v0;

  return sub_100002F78(v0);
}

void sub_10001E538()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_10001E548(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 16);
}

uint64_t sub_10001E554@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_10001E55C()
{
  _QWORD *v0;

  return static _SetStorage.copy(original:)(*v0);
}

uint64_t sub_10001E56C()
{
  return 0;
}

uint64_t sub_10001E578(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  *(_QWORD *)(v2 - 104) = a2;
  return a2(0);
}

uint64_t sub_10001E5D0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_10001E5DC()
{
  uint64_t v0;

  return sub_10001CD34(*(_QWORD *)(v0 - 144));
}

uint64_t sub_10001E5EC()
{
  return 0;
}

_QWORD *sub_10001E5F8@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *result = v2;
  result[1] = a2;
  return result;
}

void sub_10001E604()
{
  uint64_t v0;

  ++*(_QWORD *)(v0 + 16);
}

uint64_t sub_10001E694()
{
  return Logger.logObject.getter();
}

uint64_t sub_10001E69C()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_10001E6A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return static UUIDIdentifier.== infix(_:_:)(v2, v1, v0);
}

BOOL sub_10001E6C4(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10001E764()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

uint64_t sub_10001E76C()
{
  uint64_t *v0;

  return sub_100002F78(v0);
}

void sub_10001E774(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_10000DB84(v2, a2, v4, v3);
}

uint64_t sub_10001E784()
{
  uint64_t v0;

  return swift_task_alloc(v0);
}

uint64_t sub_10001E78C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v1, v2);
}

uint64_t sub_10001E79C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_10001E7AC()
{
  return type metadata accessor for InferenceProviderExtensionConnection(0);
}

uint64_t sub_10001E7C4(uint64_t a1)
{
  return sub_10001CD34(a1);
}

void sub_10001E7D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  unint64_t *v4;

  sub_100014B78(a1, a2, a3, v3, v4);
}

uint64_t sub_10001E808@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_10001E810(uint64_t a1)
{
  uint64_t v1;

  return __CocoaSet.member(for:)(a1, v1);
}

void sub_10001E818(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 56) |= v1;
}

void sub_10001E82C()
{
  sub_1000122B8();
}

uint64_t sub_10001E838()
{
  uint64_t v0;
  uint64_t v1;

  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

char *sub_10001E844(__n128 *a1, __n128 a2)
{
  uint64_t v2;

  a1[1] = a2;
  return (char *)a1 + v2;
}

void *sub_10001E858@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v2;

  return memmove(a1, v2, 8 * a2);
}

uint64_t sub_10001E864()
{
  uint64_t v0;

  return v0;
}

_QWORD *sub_10001E870()
{
  uint64_t v0;
  uint64_t v1;

  return Hasher.init(_seed:)((_QWORD *)(v1 - 208), *(_QWORD *)(v0 + 40));
}

uint64_t sub_10001E87C()
{
  _QWORD *v0;

  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t sub_10001E884()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *v1 = v0;
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10001E890()
{
  uint64_t v0;

  return swift_release(v0);
}

void sub_10001E89C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1000102C0(a1, a2, (uint64_t *)va);
}

uint64_t sub_10001E8A8()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10001E8B0()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_10001E8B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3, a2, v2);
}

void sub_10001E8EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  uint64_t v5;

  sub_100014B78(v5, a2, a3, a4, a5);
}

void sub_10001E8F8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1000102C0(a1, a2, (uint64_t *)va);
}

uint64_t sub_10001E900()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_10001E908()
{
  uint64_t *v0;

  return sub_100002F78(v0);
}

uint64_t sub_10001E910()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10000DED0(v1, v0);
}

uint64_t sub_10001E940()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10001E948()
{
  uint64_t v0;

  return __CocoaSet.count.getter(v0);
}

unint64_t sub_10001E950()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100010994(v1, v0);
}

void sub_10001E970()
{
  uint64_t v0;

  sub_100006710(*(unint64_t **)(v0 - 96), *(uint64_t (**)(uint64_t))(v0 - 104));
}

uint64_t sub_10001E990(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10001E9A4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10001E9B8(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  return a2(0);
}

uint64_t sub_10001E9C4()
{
  return type metadata accessor for ModelCatalogAsset(0);
}

uint64_t sub_10001E9D0()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_10001E9D8()
{
  uint64_t v0;

  return static _SetStorage.allocate(capacity:)(v0);
}

uint64_t sub_10001EA20()
{
  return sub_10008B000();
}

uint64_t sub_10001EA2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100005630(a1, a2, 1, v2);
}

uint64_t sub_10001EA38(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_10001EA40()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 - 264));
}

void sub_10001EA4C(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_10001EA58()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return *(_QWORD *)(v2 + 72);
}

uint64_t sub_10001EA84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_10001EA8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 192))(a1, a2, v2);
}

uint64_t sub_10001EAAC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v2;
  a1[1] = a2;
  return v3;
}

uint64_t sub_10001EAC0(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_10001EAC8()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_10001EAD0()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

uint64_t sub_10001EADC()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

unint64_t sub_10001EAE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;

  return sub_100015884(v6, v5, a3, a4, a5);
}

char *sub_10001EAF0@<X0>(int *a1@<X8>)
{
  return (char *)a1 + *a1;
}

void sub_10001EB04()
{
  uint64_t v0;

  ++*(_QWORD *)(v0 + 16);
}

uint64_t sub_10001EB4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return dispatch thunk of Hashable._rawHashValue(seed:)(a1, v1, v2);
}

uint64_t sub_10001EB58@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_10001EB60()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001EB6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3);
}

uint64_t sub_10001EB74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_10001EB7C(uint64_t a1)
{
  uint64_t v1;

  return sub_100005700(a1, 1, v1);
}

void sub_10001EB9C()
{
  sub_1000087B4();
}

uint64_t sub_10001EBA8(uint64_t a1)
{
  return swift_bridgeObjectRetain_n(a1, 2);
}

uint64_t sub_10001EBB0(uint64_t a1)
{
  return swift_release_n(a1, 2);
}

uint64_t sub_10001EBB8()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_10001EBC0()
{
  uint64_t v0;

  return swift_task_alloc(v0);
}

uint64_t sub_10001EBC8@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_10001EBD4()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_10001EBDC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001EBE8@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_10001EBF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return sub_100002CAC(v2, a2, v3);
}

uint64_t sub_10001EC14(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

uint64_t sub_10001EC20()
{
  return type metadata accessor for AssetPolicy(0);
}

uint64_t sub_10001EC28()
{
  return type metadata accessor for Assertion.DaemonRep(0);
}

_QWORD *sub_10001EC3C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  sub_10000650C(v0 + 8);
  swift_release(v0[13]);
  sub_10000650C(v0 + 14);
  swift_release(v0[19]);
  sub_10000650C(v0 + 20);
  sub_10000650C(v0 + 25);
  sub_10000650C(v0 + 30);
  sub_10000650C(v0 + 35);
  swift_release(v0[40]);
  swift_release(v0[41]);
  v1 = v0[42];
  v2 = v0[43];
  v3 = v0[44];
  v4 = v0[45];
  v5 = v0[46];
  v6 = v0[47];
  swift_release(v0[48]);
  swift_release(v6);
  swift_release(v5);
  swift_release(v4);
  swift_release(v3);
  swift_release(v2);
  swift_release(v1);
  return v0;
}

uint64_t sub_10001ED34()
{
  uint64_t v0;

  sub_10001EC3C();
  return swift_deallocClassInstance(v0, 392, 7);
}

uint64_t type metadata accessor for DaemonContext()
{
  return objc_opt_self(_TtC13modelmanagerd13DaemonContext);
}

uint64_t sub_10001ED74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  swift_defaultActor_initialize(v1);
  *(_QWORD *)(v1 + 112) = objc_msgSend(objc_allocWithZone((Class)NSProcessInfo), "init");
  v3 = v1 + OBJC_IVAR____TtC13modelmanagerd6Daemon_logHandle;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  generalLogger.getter(v6);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v3, v8, v4);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13modelmanagerd6Daemon_context) = a1;
  return v1;
}

uint64_t sub_10001EE38()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_10001EE50, 0, 0);
}

uint64_t sub_10001EE50()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = sub_10001EEC4;
  return withTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_10001EEC4()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 24));
  return sub_10001D674();
}

uint64_t sub_10001EEFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = a2;
  *(_QWORD *)(v3 + 24) = a3;
  return swift_task_switch(sub_10001EF14, 0, 0);
}

uint64_t sub_10001EF14()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  char *v13;

  sub_100002F78(&qword_1000FB230);
  v1 = sub_10001FAE8();
  type metadata accessor for TaskPriority(0);
  sub_10001FAA4(v1);
  v2 = (_QWORD *)sub_10001FAC4((uint64_t)&unk_1000F2D90);
  v3 = sub_10001FAB4(v2);
  sub_10001FAF0(v3, (uint64_t)&unk_1000FBC10);
  sub_10000570C(v1);
  swift_task_dealloc(v1);
  v4 = sub_10001FAE8();
  sub_10001FAA4(v4);
  v5 = (_QWORD *)sub_10001FAC4((uint64_t)&unk_1000F2DB8);
  v6 = sub_10001FAB4(v5);
  sub_10001FAF0(v6, (uint64_t)&unk_1000FBC20);
  sub_10000570C(v4);
  swift_task_dealloc(v4);
  v7 = sub_10001FAE8();
  sub_10001FAA4(v7);
  v8 = (_QWORD *)sub_10001FAC4((uint64_t)&unk_1000F2DE0);
  sub_10001FAB4(v8);
  sub_1000B2150(v7, (uint64_t)&unk_1000FBC30, (uint64_t)v8);
  sub_10000570C(v7);
  swift_task_dealloc(v7);
  if (sub_1000C8AD4(2, 18, 0, 0))
  {
    v9 = (_QWORD *)swift_task_alloc(async function pointer to TaskGroup.awaitAllRemainingTasks(isolation:)[1]);
    *(_QWORD *)(v0 + 32) = v9;
    v10 = sub_100002F78(&qword_1000FBC38);
    *v9 = v0;
    v9[1] = sub_10001F0F0;
    return TaskGroup.awaitAllRemainingTasks(isolation:)(0, 0, v10);
  }
  else
  {
    v13 = (char *)&dword_1000FF7E8 + dword_1000FF7E8;
    v12 = (_QWORD *)swift_task_alloc(unk_1000FF7EC);
    *(_QWORD *)(v0 + 40) = v12;
    *v12 = v0;
    v12[1] = sub_10001F11C;
    return ((uint64_t (*)(_QWORD, _QWORD))v13)(0, 0);
  }
}

uint64_t sub_10001F0F0()
{
  uint64_t v0;
  uint64_t v1;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v1 + 32));
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10001F11C()
{
  uint64_t v0;
  uint64_t v1;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v1 + 40));
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10001F148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_10001F160, 0, 0);
}

uint64_t sub_10001F160()
{
  _QWORD *v0;
  _QWORD *v1;

  v0[3] = *(_QWORD *)(*(_QWORD *)(v0[2] + OBJC_IVAR____TtC13modelmanagerd6Daemon_context) + 56);
  sub_10001E194();
  v1 = (_QWORD *)sub_10001E784();
  v0[4] = v1;
  *v1 = v0;
  v1[1] = sub_10001FA9C;
  return sub_10009672C();
}

uint64_t sub_10001F1C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_10001F1D8, 0, 0);
}

uint64_t sub_10001F1D8()
{
  _QWORD *v0;
  _QWORD *v1;

  v0[3] = *(_QWORD *)(*(_QWORD *)(v0[2] + OBJC_IVAR____TtC13modelmanagerd6Daemon_context) + 48);
  sub_10001E194();
  v1 = (_QWORD *)sub_10001E784();
  v0[4] = v1;
  *v1 = v0;
  v1[1] = sub_10001F238;
  return sub_100007384();
}

uint64_t sub_10001F238()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10001DB38();
  v2 = *(_QWORD *)(v1 + 24);
  sub_10001D680(*(_QWORD *)(v1 + 32));
  swift_release(v2);
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10001F26C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_10001F284, 0, 0);
}

uint64_t sub_10001F284()
{
  _QWORD *v0;
  _QWORD *v1;

  v0[3] = *(_QWORD *)(*(_QWORD *)(v0[2] + OBJC_IVAR____TtC13modelmanagerd6Daemon_context) + 320);
  sub_10001E194();
  v1 = (_QWORD *)sub_10001E784();
  v0[4] = v1;
  *v1 = v0;
  v1[1] = sub_10001FA9C;
  return sub_1000386D0();
}

uint64_t sub_10001F2E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 24) = v0;
  v2 = type metadata accessor for XPCListener.InitializationOptions(0);
  *(_QWORD *)(v1 + 32) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return sub_10001D674();
}

uint64_t sub_10001F334()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint8_t *v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(v0 + 24);
  type metadata accessor for _OSActivity(0);
  v2 = _OSActivity.__allocating_init(_:)("Daemon setup", 12, 2);
  v3 = OBJC_IVAR____TtC13modelmanagerd6Daemon_logHandle;
  *(_QWORD *)(v0 + 40) = v2;
  *(_QWORD *)(v0 + 48) = v3;
  v4 = swift_retain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(_QWORD *)(v0 + 24);
    v8 = (uint8_t *)sub_10001D8D4(8);
    *(_DWORD *)v8 = 67109120;
    *(_DWORD *)(v0 + 64) = objc_msgSend(*(id *)(v7 + 112), "processIdentifier");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 68, v8 + 4);
    swift_release(v7);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Daemon started with pid: %d", v8, 8u);
    sub_10001D790((uint64_t)v8);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 24));
  }

  v9 = (_QWORD *)swift_task_alloc(dword_1000FBB3C);
  *(_QWORD *)(v0 + 56) = v9;
  *v9 = v0;
  v9[1] = sub_10001F480;
  return sub_10001EE38();
}

uint64_t sub_10001F480()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 56));
  return sub_10001D674();
}

uint64_t sub_10001F4BC(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)sub_10001D8D4(2);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Daemon setup complete", v4, 2u);
    sub_10001D790((uint64_t)v4);
  }
  v6 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);

  v7 = static ModelXPCRequest.serviceName.getter();
  v9 = v8;
  v10 = swift_retain(v6);
  static XPCListener.InitializationOptions.none.getter(v10);
  v11 = type metadata accessor for XPCListener(0);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  v12 = XPCListener.init(service:targetQueue:options:incomingSessionHandler:)(v7, v9, 0, v5, sub_10001F8CC, v6);
  swift_release(v12);
  v13 = *(_QWORD *)(v1 + 32);
  v14 = *(_QWORD *)(v1 + 40);
  _OSActivity.close()();
  swift_release(v14);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_10001F704(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13modelmanagerd6Daemon_context);
  v3 = *(_QWORD *)(v2 + 104);
  if (v3)
  {
    swift_retain(*(_QWORD *)(v2 + 104));
    v4 = sub_100002F78(&qword_1000FBBE8);
    v5 = sub_10001F8DC();
    dispatch thunk of XPCListener.IncomingSessionRequest.accept<A>(_:)(sub_10001F8D4, v3, v4, v5);
    swift_release(v3);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10001F780()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC13modelmanagerd6Daemon_logHandle;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd6Daemon_context));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_10001F7E4()
{
  uint64_t v0;

  sub_10001F780();
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_10001F7FC()
{
  return type metadata accessor for Daemon(0);
}

uint64_t type metadata accessor for Daemon(uint64_t a1)
{
  uint64_t result;

  result = qword_1000FBB28;
  if (!qword_1000FBB28)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Daemon);
  return result;
}

uint64_t sub_10001F83C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_10001F8CC(uint64_t a1)
{
  uint64_t v1;

  sub_10001F704(a1, v1);
}

void sub_10001F8D4(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_100030774(v1, a1);
}

unint64_t sub_10001F8DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000FBBF0;
  if (!qword_1000FBBF0)
  {
    v1 = sub_1000056BC(&qword_1000FBBE8);
    result = swift_getWitnessTable(&protocol conformance descriptor for TaskCancellingXPCPeerHandler<A>, v1);
    atomic_store(result, &qword_1000FBBF0);
  }
  return result;
}

uint64_t sub_10001F920(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = swift_task_alloc(dword_1000FBBFC);
  v7 = (_QWORD *)sub_100006AF4(v6);
  *v7 = v3;
  v7[1] = sub_10001F980;
  return sub_10001EEFC(a1, a2, v2);
}

uint64_t sub_10001F980()
{
  uint64_t v0;
  uint64_t v1;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v1 + 16));
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10001F9B0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10001FAD0();
  v0 = swift_task_alloc(dword_1000FBC0C);
  v1 = (_QWORD *)sub_100006AF4(v0);
  v2 = sub_100006AD8(v1);
  return sub_10001F148(v2, v3, v4, v5);
}

uint64_t sub_10001FA00()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10001FAD0();
  v0 = swift_task_alloc(dword_1000FBC1C);
  v1 = (_QWORD *)sub_100006AF4(v0);
  v2 = sub_100006AD8(v1);
  return sub_10001F1C0(v2, v3, v4, v5);
}

uint64_t sub_10001FA50()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10001FAD0();
  v0 = swift_task_alloc(dword_1000FBC2C);
  v1 = (_QWORD *)sub_100006AF4(v0);
  v2 = sub_100006AD8(v1);
  return sub_10001F26C(v2, v3, v4, v5);
}

uint64_t sub_10001FAA4(uint64_t a1)
{
  uint64_t v1;

  return sub_100005630(a1, 1, 1, v1);
}

uint64_t sub_10001FAB4(_QWORD *a1)
{
  uint64_t v1;

  a1[2] = 0;
  a1[3] = 0;
  a1[4] = v1;
  return swift_retain(v1);
}

uint64_t sub_10001FAC4(uint64_t a1)
{
  return swift_allocObject(a1, 40, 7);
}

uint64_t sub_10001FAE0()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

uint64_t sub_10001FAE8()
{
  uint64_t v0;

  return swift_task_alloc(v0);
}

uint64_t sub_10001FAF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return sub_1000B2150(v2, a2, v3);
}

uint64_t sub_10001FAFC()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_100002FB8(v0, qword_1000FBC40);
  sub_100002FF8(v0, (uint64_t)qword_1000FBC40);
  v1 = subsystemName.getter();
  return Logger.init(subsystem:category:)(v1);
}

uint64_t sub_10001FB6C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1000FBCAC);
  *(_QWORD *)(v0 + 16) = v1;
  sub_10002BFB4(v1, (uint64_t)sub_10001D668);
  return sub_100022B38();
}

uint64_t sub_10001FBB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, __int128 a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)(v12 + 272) = a11;
  *(_QWORD *)(v12 + 280) = v11;
  *(_QWORD *)(v12 + 264) = a10;
  *(_OWORD *)(v12 + 248) = a9;
  *(_BYTE *)(v12 + 546) = a8;
  *(_QWORD *)(v12 + 232) = a6;
  *(_QWORD *)(v12 + 240) = a7;
  *(_QWORD *)(v12 + 216) = a4;
  *(_QWORD *)(v12 + 224) = a5;
  *(_QWORD *)(v12 + 200) = a2;
  *(_QWORD *)(v12 + 208) = a3;
  *(_QWORD *)(v12 + 192) = a1;
  v13 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventResult(0);
  *(_QWORD *)(v12 + 288) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v12 + 296) = v14;
  *(_QWORD *)(v12 + 304) = sub_10001D800(v14);
  v15 = sub_100002F78(&qword_1000FB230);
  *(_QWORD *)(v12 + 312) = sub_10001D800(*(_QWORD *)(v15 - 8));
  v16 = sub_100002F78(&qword_1000FBEA8);
  *(_QWORD *)(v12 + 320) = sub_10001D800(*(_QWORD *)(v16 - 8));
  v17 = sub_10002BA0C();
  *(_QWORD *)(v12 + 328) = v17;
  v18 = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(v12 + 336) = v18;
  *(_QWORD *)(v12 + 344) = sub_10002B1BC(v18);
  *(_QWORD *)(v12 + 352) = sub_10001E784();
  v19 = sub_100002F78(&qword_1000FB2D8);
  *(_QWORD *)(v12 + 360) = v19;
  v20 = *(_QWORD *)(v19 - 8);
  *(_QWORD *)(v12 + 368) = v20;
  *(_QWORD *)(v12 + 376) = sub_10002B1BC(v20);
  *(_QWORD *)(v12 + 384) = sub_10001E784();
  *(_QWORD *)(v12 + 392) = sub_10001E784();
  *(_QWORD *)(v12 + 400) = sub_10001E784();
  v21 = sub_10002BCD4();
  *(_QWORD *)(v12 + 408) = v21;
  v22 = *(_QWORD *)(v21 - 8);
  *(_QWORD *)(v12 + 416) = v22;
  *(_QWORD *)(v12 + 424) = sub_10001D800(v22);
  sub_10001D7B8();
  return sub_10002B6B0(v23, v24, v25);
}

uint64_t sub_10001FCC4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  sub_10001DFE8();
  v1 = *(_QWORD **)(v0 + 280);
  v12 = *(_QWORD *)(v0 + 264);
  v2 = *(unsigned __int8 *)(v0 + 546);
  v3 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 216);
  v7 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 200);
  v9 = v1[31];
  v8 = v1[32];
  sub_10002BE98(v1 + 28);
  *(_QWORD *)(v0 + 432) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 40))(v7, v6, v5, v4, v3, v2, v12, v9);
  v10 = v1[33];
  *(_QWORD *)(v0 + 440) = v10;
  return sub_10002B590((uint64_t)sub_10001FD58, v10, 0);
}

uint64_t sub_10001FD58()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 440) + 192);
  *(_QWORD *)(v0 + 448) = v1;
  swift_bridgeObjectRetain(v1);
  sub_10001D7B8();
  return sub_10001D674();
}

void sub_10001FD94()
{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  char v20;
  char v21;
  char v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60[2];

  sub_10002C3B4(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 448));
  v2 = v1;
  sub_10001E034();
  if ((v2 & 1) != 0)
  {
    if (qword_1000FB0D8 != -1)
      swift_once(&qword_1000FB0D8, sub_10001FAFC);
    v4 = *(_QWORD *)(v0 + 368);
    v3 = *(_QWORD *)(v0 + 376);
    v5 = *(NSObject **)(v0 + 360);
    v6 = *(_QWORD *)(v0 + 264);
    v7 = *(_QWORD *)(v0 + 208);
    v8 = sub_10001DD64();
    sub_100002FF8(v8, (uint64_t)qword_1000FBC40);
    (*(void (**)(uint64_t, uint64_t, NSObject *))(v4 + 16))(v3, v6, v5);
    sub_10001EBA8(v7);
    sub_10001E694();
    v9 = sub_10002B470();
    v10 = os_log_type_enabled(v5, v9);
    v11 = *(_QWORD *)(v0 + 368);
    if (v10)
    {
      v52 = *(_QWORD *)(v0 + 240);
      v12 = *(_QWORD *)(v0 + 208);
      v55 = *(_QWORD *)(v0 + 200);
      v13 = sub_10001D8D4(32);
      v58 = sub_10001D8D4(64);
      v60[0] = v58;
      *(_DWORD *)v13 = 136315650;
      sub_100006744(&qword_1000FBE80, &qword_1000FB2D8);
      v15 = sub_10001EC14(v14);
      sub_1000102C0(v15, v16, v60);
      *(_QWORD *)(v0 + 184) = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v13 + 4);
      sub_10002B684();
      sub_10002B554(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
      *(_WORD *)(v13 + 12) = 2048;
      *(_QWORD *)(v0 + 152) = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v13 + 14);
      *(_WORD *)(v13 + 22) = 2080;
      sub_10001E4D4();
      sub_1000102C0(v55, v12, v60);
      *(_QWORD *)(v0 + 136) = v18;
      sub_10002B3F0(v0 + 136, v0 + 144);
      sub_10002BD84(v12);
      _os_log_impl((void *)&_mh_execute_header, v5, v9, "Blocking creation of session %s for pid %ld: Use case %s has been disabled", (uint8_t *)v13, 0x20u);
      sub_10002BA20(v58);
      sub_10001D790(v58);
      sub_10001D790(v13);

    }
    else
    {
      v25 = *(_QWORD *)(v0 + 208);
      sub_10002B554(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));

      sub_10002BA68(v25);
    }
    v26 = *(_QWORD *)(v0 + 432);
    v48 = *(_QWORD *)(v0 + 424);
    v49 = *(_QWORD *)(v0 + 400);
    v50 = *(_QWORD *)(v0 + 392);
    v51 = *(_QWORD *)(v0 + 384);
    v53 = *(_QWORD *)(v0 + 376);
    v54 = *(_QWORD *)(v0 + 352);
    v56 = *(_QWORD *)(v0 + 344);
    v57 = *(_QWORD *)(v0 + 320);
    v27 = *(_QWORD *)(v0 + 304);
    v59 = *(_QWORD *)(v0 + 312);
    v29 = *(_QWORD *)(v0 + 288);
    v28 = *(_QWORD *)(v0 + 296);
    v30 = *(_QWORD **)(v0 + 280);
    v31 = *(_QWORD *)(v0 + 264);
    v32 = *(_QWORD *)(v0 + 208);
    v47 = *(_QWORD *)(v0 + 200);
    v34 = v30[31];
    v33 = v30[32];
    sub_10001C830(v30 + 28, v34);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v28 + 104))(v27, enum case for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventResult.failedDueToUseCaseDisabled(_:), v29);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 48))(v31, v27, v26, v34, v33);
    sub_10002B978(v27, *(uint64_t (**)(uint64_t, uint64_t))(v28 + 8));
    v35 = sub_10002B8A0();
    sub_10002B5DC((unint64_t *)&qword_1000FB600, v36, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_10002B560(v35, v37);
    *v38 = v47;
    v38[1] = v32;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v38, enum case for ModelManagerError.useCaseDisabled(_:), v35);
    v39 = swift_bridgeObjectRetain(v32);
    swift_willThrow(v39, v40, v41, v42, v43, v44, v45, v46);
    swift_release(v26);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v59);
    sub_10001D938();
    (*(void (**)(void))(v0 + 8))();
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 216);
    sub_10001C830((_QWORD *)(*(_QWORD *)(v0 + 280) + 128), *(_QWORD *)(*(_QWORD *)(v0 + 280) + 152));
    if (v19 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else
    {
      sub_10002BB74();
      if (v21 ^ v22 | v20)
      {
        v23 = (_QWORD *)swift_task_alloc(dword_1000FDF84);
        *(_QWORD *)(v0 + 456) = v23;
        v24 = sub_10002B408(v23, (uint64_t)sub_1000201BC);
        sub_100092A58(v24);
        return;
      }
    }
    __break(1u);
  }
}

uint64_t sub_1000201BC()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 456));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_1000201F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v35;
  _QWORD *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  sub_10002B644();
  v53 = v1;
  v54 = v2;
  v52 = v0;
  v4 = *(_QWORD *)(v0 + 416);
  v3 = *(_QWORD *)(v0 + 424);
  v49 = *(_QWORD *)(v0 + 400);
  v5 = *(_QWORD *)(v0 + 368);
  v6 = *(_QWORD *)(v0 + 280);
  v45 = *(_QWORD *)(v0 + 256);
  v7 = *(_QWORD *)(v0 + 232);
  v43 = *(_QWORD *)(v0 + 208);
  v8 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 192));
  v48 = ((uint64_t (*)(uint64_t))sub_10000B690)(v8);
  sub_10001EA84(v3, v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  *(_QWORD *)(v0 + 464) = v9;
  sub_10002BAC8(v49, v9);
  v10 = *(_QWORD *)(v6 + 216);
  sub_100006694(v6 + 176, v0 + 16);
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRetain(v45);
  sub_10001E900();
  v50 = v6 + 176;
  v47 = v10;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_10000378C((unint64_t)_swiftEmptyArrayStorage);
    v36 = v35;
  }
  else
  {
    v36 = _swiftEmptySetSingleton;
  }
  v42 = *(_QWORD *)(v0 + 424);
  v39 = *(_QWORD *)(v0 + 400);
  v11 = *(_QWORD *)(v0 + 320);
  v46 = *(_QWORD *)(v0 + 328);
  v44 = *(_QWORD *)(v0 + 272);
  v37 = *(_OWORD *)(v0 + 248);
  v41 = *(unsigned __int8 *)(v0 + 546);
  v40 = *(_QWORD *)(v0 + 240);
  v12 = *(_QWORD *)(v0 + 216);
  v38 = *(_QWORD *)(v0 + 224);
  v13 = *(_QWORD *)(v0 + 200);
  v14 = *(_QWORD *)(v0 + 208);
  v15 = *(_QWORD *)(v0 + 40);
  v16 = sub_1000064E4(v0 + 16, v15);
  v17 = *(_QWORD *)(v15 - 8);
  v18 = (uint64_t *)sub_10001D828(*(_QWORD *)(v17 + 64));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v17 + 16))(v18, v16, v15);
  v19 = sub_10002AA84(v48, v13, v14, v12, v38, v42, v40, v41, v37, v39, v47, *v18, (uint64_t)v36);
  *(_QWORD *)(v0 + 472) = v19;
  sub_10000650C((_QWORD *)(v0 + 16));
  sub_10002BDF0();
  sub_10002AEB4(v44, v11, &qword_1000FBEA8);
  if (sub_100005700(v11, 1, v46) == 1)
  {
    sub_10002AD5C(*(_QWORD *)(v0 + 320), &qword_1000FBEA8);
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 352);
    v21 = *(_QWORD *)(v0 + 336);
    sub_10001EA84(v20, *(_QWORD *)(v0 + 320), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 32));
    sub_10009B774(v20);
    sub_10002B7F8(v20, *(uint64_t (**)(uint64_t, uint64_t))(v21 + 8));
  }
  v22 = *(_QWORD *)(v0 + 312);
  v23 = *(_QWORD *)(v0 + 280);
  v24 = *(_QWORD *)(v0 + 216);
  sub_10002B308(v23 + 112, v0 + 56, 33);
  sub_10001D7EC();
  ((void (*)(uint64_t *, _QWORD *))sub_1000125E4)(&v51, v19);
  sub_10002BB48();
  swift_release(v51);
  v25 = sub_10001DBC0();
  sub_10002B26C(v22, v26, v27, v25);
  sub_10002B00C(&qword_1000FBEE8, v28, (uint64_t (*)(uint64_t))type metadata accessor for SessionManager);
  v30 = v29;
  v31 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F2EE0, 48);
  v31[2] = v23;
  v31[3] = v30;
  v31[4] = v23;
  v31[5] = v24;
  sub_10001D834(v23);
  *(_QWORD *)(v0 + 480) = sub_100002CCC(v22, (uint64_t)&unk_1000FBF28, (uint64_t)v31);
  v32 = (_QWORD *)swift_task_alloc(48);
  *(_QWORD *)(v0 + 488) = v32;
  v32[2] = v23;
  v32[3] = v19;
  v32[4] = v50;
  v33 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 496) = v33;
  *v33 = v0;
  v33[1] = sub_100020560;
  return ((uint64_t (*)(void))withCheckedThrowingContinuation<A>(isolation:function:_:))();
}

uint64_t sub_100020560()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 504) = v1;
  swift_task_dealloc(v3);
  if (!v1)
    swift_task_dealloc(*(_QWORD *)(v0 + 488));
  return sub_10001D6DC();
}

uint64_t sub_1000205C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _DWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;

  sub_10002B628();
  a23 = v26;
  a24 = v27;
  a22 = v24;
  v28 = *(_QWORD *)(v24 + 504);
  *(_QWORD *)(v24 + 512) = sub_10009BBD8();
  if (v28)
  {
    if (qword_1000FB0D8 != -1)
      swift_once(&qword_1000FB0D8, sub_10001FAFC);
    v30 = sub_10001DD64();
    v31 = sub_100002FF8(v30, (uint64_t)qword_1000FBC40);
    sub_10001E194();
    sub_10001FAE0();
    sub_10001E194();
    sub_10001FAE0();
    sub_10002B3CC();
    v32 = sub_10002BE0C();
    if (sub_10002B5FC(v32))
    {
      v33 = (_DWORD *)sub_10001D8D4(22);
      v34 = (_QWORD *)sub_10001D8D4(8);
      v47 = sub_10001D8D4(32);
      a12 = v47;
      *v33 = 136315394;
      sub_10001E194();
      sub_10009FEF4();
      v35 = sub_10001D9C0();
      sub_10002BA48(v35, v36, &a12);
      *(_QWORD *)(v24 + 168) = v37;
      sub_10002B83C(v24 + 168);
      sub_100006C48();
      sub_10002B154();
      sub_10001E244();
      v38 = sub_10002B8B4();
      *(_QWORD *)(v24 + 176) = v38;
      sub_10002B3F0(v24 + 176, v24 + 184);
      *v34 = v38;
      sub_10001DB48();
      sub_10001DB48();
      sub_10002B3C0((void *)&_mh_execute_header, v31, v25, "Session %s couldn't mark assets as in use by the session: %@");
      sub_100002F78(&qword_1000FB8E0);
      sub_10001DBB8((uint64_t)v34);
      sub_10001D790((uint64_t)v34);
      sub_10001DBB8(v47);
      sub_10001D790(v47);
      sub_10001D790((uint64_t)v33);

      sub_10001DB48();
    }
    else
    {
      sub_10001DB48();
      sub_10002B154();
      sub_10001DB48();
      sub_10001DB48();

    }
    v39 = swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    v40 = (_QWORD *)sub_10002BF0C(v39);
    sub_10002BEEC(v40);
    sub_10002BE50();
    return sub_10002B2EC();
  }
  else
  {
    v29 = *(_QWORD *)(v24 + 344);
    (*(void (**)(_QWORD, uint64_t, _QWORD))(v24 + 464))(*(_QWORD *)(v24 + 392), *(_QWORD *)(v24 + 472) + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_id, *(_QWORD *)(v24 + 360));
    sub_10009BC28(v29);
    v41 = (_QWORD *)swift_task_alloc(dword_1000FD3E4);
    *(_QWORD *)(v24 + 520) = v41;
    *v41 = v24;
    v41[1] = sub_100020848;
    sub_10002B864();
    return sub_10004ED50(v42, v43, v44, v45);
  }
}

uint64_t sub_100020848()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_10001DB68();
  sub_10001E0D8();
  sub_10001EA4C(v2);
  v0[66] = v1;
  swift_task_dealloc(v3);
  v4 = v0[49];
  v5 = v0[46];
  v7 = v0[42];
  v6 = v0[43];
  swift_bridgeObjectRelease(v0[64]);
  sub_10002BADC(v6, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  sub_10002B7F8(v4, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  sub_10001E10C();
  return sub_10001D6DC();
}

uint64_t sub_1000208DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v12 = swift_task_alloc(async function pointer to Task<>.value.getter[1]);
  v13 = (_QWORD *)sub_10002BF0C(v12);
  sub_10002BEEC(v13);
  v14 = sub_10002BE50();
  return Task<>.value.getter(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10, a11, a12);
}

uint64_t sub_100020930()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 536));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_100020968()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  void *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  os_log_t v15;
  os_log_type_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(void);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  os_log_type_t type[8];
  os_log_type_t typea[8];
  char v57;
  uint64_t v58;
  uint64_t v59;
  os_log_t log;
  void (*v61)(_QWORD, NSObject *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v65 = v0 + 88;
  v1 = *(_BYTE *)(v0 + 545);
  if (qword_1000FB0D8 != -1)
    swift_once(&qword_1000FB0D8, sub_10001FAFC);
  v2 = sub_10001DD64();
  v3 = (void *)sub_100002FF8(v2, (uint64_t)qword_1000FBC40);
  sub_10001D7AC();
  sub_10002B3CC();
  v4 = sub_10002B470();
  if (sub_10002B1AC(v4))
  {
    *(_QWORD *)type = *(_QWORD *)(v0 + 216);
    v57 = v1;
    v5 = sub_10001D8D4(32);
    v6 = sub_10001D8D4(64);
    v66 = v6;
    *(_DWORD *)v5 = 136315650;
    sub_10001E194();
    v7 = sub_10009FEF4();
    v9 = v8;
    sub_10001D9C0();
    sub_1000102C0(v7, v9, &v66);
    *(_QWORD *)(v0 + 80) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v65, v5 + 4);
    sub_10001EADC();
    sub_10002B154();
    *(_WORD *)(v5 + 12) = 2048;
    *(_QWORD *)(v0 + 144) = *(_QWORD *)type;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v5 + 14);
    *(_WORD *)(v5 + 22) = 2080;
    *(_BYTE *)(v0 + 544) = v57;
    v11 = String.init<A>(describing:)(v0 + 544, &type metadata for ProcessPriority);
    sub_1000102C0(v11, v12, &v66);
    *(_QWORD *)(v0 + 160) = v13;
    sub_10002B3F0(v0 + 160, v0 + 168);
    sub_10001EADC();
    sub_10002BA28();
    _os_log_impl(v14, v15, v16, v17, (uint8_t *)v5, 0x20u);
    sub_10002BA20(v6);
    sub_10001D790(v6);
    sub_10001D790(v5);
  }
  else
  {
    sub_10002B154();
  }

  v18 = *(_QWORD *)(v0 + 432);
  *(_QWORD *)typea = *(_QWORD *)(v0 + 384);
  v58 = *(_QWORD *)(v0 + 360);
  v19 = *(_QWORD *)(v0 + 296);
  v20 = *(_QWORD *)(v0 + 304);
  v21 = *(_QWORD **)(v0 + 280);
  v22 = *(NSObject **)(v0 + 264);
  v61 = *(void (**)(_QWORD, NSObject *, uint64_t))(v0 + 464);
  v63 = *(_QWORD *)(v0 + 256);
  log = *(os_log_t *)(v0 + 208);
  v23 = *(_QWORD *)(v0 + 192);
  v24 = v21[31];
  v25 = v21[32];
  sub_10002BE7C(v21 + 28);
  sub_10002BA70(enum case for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventResult.success(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 104));
  (*(void (**)(NSObject *, uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 48))(v22, v20, v18, v24, v25);
  sub_10002B68C(*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8));
  v61(*(_QWORD *)typea, v22, v58);
  sub_10001EBA8(v23);
  sub_10001EBA8((uint64_t)log);
  v26 = sub_10001EBA8(v63);
  Logger.logObject.getter(v26);
  v27 = sub_10002BF4C();
  v28 = sub_10002BBB8(v22);
  v29 = *(_QWORD *)(v0 + 432);
  v30 = *(_QWORD *)(v0 + 384);
  v31 = *(_QWORD *)(v0 + 368);
  v32 = *(_QWORD *)(v0 + 256);
  if (v28)
  {
    v51 = *(_QWORD *)(v0 + 248);
    v49 = *(_QWORD *)(v0 + 240);
    v50 = *(_QWORD *)(v0 + 216);
    v52 = *(_QWORD *)(v0 + 208);
    v53 = *(_QWORD *)(v0 + 200);
    v54 = *(_QWORD *)(v0 + 192);
    v64 = *(_QWORD *)(v0 + 472);
    v62 = *(_QWORD *)(v0 + 480);
    v33 = swift_slowAlloc(62, -1);
    v59 = sub_10001D8D4(128);
    v66 = v59;
    *(_DWORD *)v33 = 136316418;
    sub_100006744(&qword_1000FBE80, &qword_1000FB2D8);
    v35 = sub_10002BE00(v34);
    sub_1000102C0(v35, v36, &v66);
    *(_QWORD *)(v0 + 88) = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v65, v0 + 96, v33 + 4);
    sub_10001D8B4();
    sub_10002B818(v30, *(uint64_t (**)(uint64_t, uint64_t))(v31 + 8));
    *(_WORD *)(v33 + 12) = 2048;
    *(_QWORD *)(v0 + 96) = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v33 + 14);
    *(_WORD *)(v33 + 22) = 2048;
    *(_QWORD *)(v0 + 104) = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v33 + 24);
    *(_WORD *)(v33 + 32) = 2080;
    swift_bridgeObjectRetain(v32);
    sub_1000102C0(v51, v32, &v66);
    *(_QWORD *)(v0 + 112) = v38;
    sub_10002B3F0(v0 + 112, v0 + 120);
    sub_10002BD84(v32);
    *(_WORD *)(v33 + 42) = 2080;
    sub_10001DBE4();
    sub_1000102C0(v53, v52, &v66);
    *(_QWORD *)(v0 + 120) = v39;
    sub_10002B3F0(v0 + 120, v0 + 128);
    sub_10002BD84(v52);
    *(_WORD *)(v33 + 52) = 2080;
    v40 = sub_10001DBE4();
    Array.description.getter(v40, &type metadata for String);
    sub_10001DA38();
    v41 = sub_10002BF40();
    sub_1000102C0(v41, v42, v43);
    *(_QWORD *)(v0 + 128) = v44;
    sub_10002B3F0(v0 + 128, v0 + 136);
    sub_10001EADC();
    sub_10002BA68(v54);
    _os_log_impl((void *)&_mh_execute_header, v22, v27, "Added session %s for pid %ld (on behalf of pid %ld), loggingIdentifier: %s, useCaseIdentifier: %s, supportedAssets: %s", (uint8_t *)v33, 0x3Eu);
    swift_arrayDestroy(v59, 4);
    sub_10001D790(v59);
    sub_10001D790(v33);
    swift_release(v29);
    swift_release(v62);

    swift_release(v64);
  }
  else
  {
    v45 = *(_QWORD *)(v0 + 208);
    v46 = *(_QWORD *)(v0 + 192);
    swift_release(*(_QWORD *)(v0 + 472));
    sub_10002B818(v30, *(uint64_t (**)(uint64_t, uint64_t))(v31 + 8));
    sub_10002BA68(v32);
    sub_10002BA68(v45);
    sub_10002BA68(v46);
    swift_release(v29);
    sub_10002BA40();

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 424));
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  sub_10002B70C();
  sub_10002BDF0();
  v47 = (uint64_t (*)(void))sub_10001E5D0();
  return v47();
}

uint64_t sub_100020F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22,uint64_t a23,uint64_t a24)
{
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  os_log_type_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v41;

  sub_10002B628();
  a23 = v25;
  a24 = v26;
  a22 = v24;
  swift_task_dealloc(v24[61]);
  v27 = v24[63];
  if (qword_1000FB0D8 != -1)
    swift_once(&qword_1000FB0D8, sub_10001FAFC);
  v28 = sub_10001DD64();
  v29 = sub_100002FF8(v28, (uint64_t)qword_1000FBC40);
  sub_10001E194();
  sub_10002B5D4();
  sub_10001E194();
  v30 = sub_10002B5D4();
  Logger.logObject.getter(v30);
  v31 = sub_10002BBE8();
  if (sub_10001E264(v29))
  {
    v32 = sub_10001D8D4(22);
    v33 = (_QWORD *)sub_10001D8D4(8);
    v41 = sub_10001D8D4(32);
    a13 = v41;
    *(_DWORD *)v32 = 136315394;
    sub_10001E194();
    sub_10009FEF4();
    v34 = sub_10001D9C0();
    sub_10002BA48(v34, v35, &a13);
    v24[21] = v36;
    sub_10002B83C((uint64_t)(v24 + 21));
    sub_10002B154();
    sub_100006C48();
    *(_WORD *)(v32 + 12) = 2112;
    sub_10002B5D4();
    v37 = _swift_stdlib_bridgeErrorToNSError(v27);
    v24[22] = v37;
    sub_10002B3F0((uint64_t)(v24 + 22), (uint64_t)(v24 + 23));
    *v33 = v37;
    sub_10002B498();
    sub_10002B498();
    sub_10002B3C0((void *)&_mh_execute_header, v29, v31, "Session %s couldn't mark assets as in use by the session: %@");
    sub_100002F78(&qword_1000FB8E0);
    sub_10001DBB8((uint64_t)v33);
    sub_10001D790((uint64_t)v33);
    sub_10001DBB8(v41);
    sub_10001D790(v41);
    sub_10001D790(v32);

    sub_10002B498();
  }
  else
  {
    sub_10002B498();
    sub_10002B154();
    sub_10002B498();
    sub_10002B498();

  }
  v38 = swift_task_alloc(async function pointer to Task<>.value.getter[1]);
  v39 = (_QWORD *)sub_10002BF0C(v38);
  sub_10002BEEC(v39);
  sub_10002BE50();
  return sub_10002B2EC();
}

uint64_t sub_100021128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22,uint64_t a23,uint64_t a24)
{
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  os_log_type_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v41;

  sub_10002B628();
  a23 = v25;
  a24 = v26;
  a22 = v24;
  v27 = v24[66];
  if (qword_1000FB0D8 != -1)
    swift_once(&qword_1000FB0D8, sub_10001FAFC);
  v28 = sub_10001DD64();
  v29 = sub_100002FF8(v28, (uint64_t)qword_1000FBC40);
  sub_10001E194();
  sub_10002B5D4();
  sub_10001E194();
  v30 = sub_10002B5D4();
  Logger.logObject.getter(v30);
  v31 = sub_10002BBE8();
  if (sub_10001E264(v29))
  {
    v32 = sub_10001D8D4(22);
    v33 = (_QWORD *)sub_10001D8D4(8);
    v41 = sub_10001D8D4(32);
    a13 = v41;
    *(_DWORD *)v32 = 136315394;
    sub_10001E194();
    sub_10009FEF4();
    v34 = sub_10001D9C0();
    sub_10002BA48(v34, v35, &a13);
    v24[21] = v36;
    sub_10002B83C((uint64_t)(v24 + 21));
    sub_10002B154();
    sub_100006C48();
    *(_WORD *)(v32 + 12) = 2112;
    sub_10002B5D4();
    v37 = _swift_stdlib_bridgeErrorToNSError(v27);
    v24[22] = v37;
    sub_10002B3F0((uint64_t)(v24 + 22), (uint64_t)(v24 + 23));
    *v33 = v37;
    sub_10002B498();
    sub_10002B498();
    sub_10002B3C0((void *)&_mh_execute_header, v29, v31, "Session %s couldn't mark assets as in use by the session: %@");
    sub_100002F78(&qword_1000FB8E0);
    sub_10001DBB8((uint64_t)v33);
    sub_10001D790((uint64_t)v33);
    sub_10001DBB8(v41);
    sub_10001D790(v41);
    sub_10001D790(v32);

    sub_10002B498();
  }
  else
  {
    sub_10002B498();
    sub_10002B154();
    sub_10002B498();
    sub_10002B498();

  }
  v38 = swift_task_alloc(async function pointer to Task<>.value.getter[1]);
  v39 = (_QWORD *)sub_10002BF0C(v38);
  sub_10002BEEC(v39);
  sub_10002BE50();
  return sub_10002B2EC();
}

uint64_t sub_100021320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  return swift_task_switch(sub_10002133C, a4, 0);
}

void sub_10002133C()
{
  _QWORD *v0;
  int64_t v1;
  char v2;
  char v3;
  char v4;
  _QWORD *v5;
  int v6;

  v1 = v0[4];
  sub_10001C830((_QWORD *)(v0[3] + 128), *(_QWORD *)(v0[3] + 152));
  if (v1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else
  {
    sub_10002BB74();
    if (v3 ^ v4 | v2)
    {
      v5 = (_QWORD *)swift_task_alloc(dword_1000FDF9C);
      v0[5] = v5;
      v6 = sub_10002B408(v5, (uint64_t)sub_1000213AC);
      sub_10002BB6C(v6);
      return;
    }
  }
  __break(1u);
}

uint64_t sub_1000213AC(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_BYTE *)(*(_QWORD *)v1 + 48) = a1;
  sub_10002BD30(v2);
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_1000213FC()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = *(_BYTE *)(v0 + 48);
  return sub_10001DCF8();
}

double sub_10002140C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD aBlock[5];
  uint64_t v35;
  __int128 v36[2];

  v28 = a3;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v32 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v30 = *(_QWORD *)(v10 - 8);
  v31 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100002F78(&qword_1000FBF30);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = *(_QWORD *)(a2 + 120);
  sub_100006694(a4, (uint64_t)v36);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
  v17 = *(unsigned __int8 *)(v14 + 80);
  v18 = (v17 + 72) & ~v17;
  v19 = swift_allocObject(&unk_1000F2F08, v18 + v15, v17 | 7);
  *(_QWORD *)(v19 + 16) = v28;
  sub_10000667C(v36, v19 + 24);
  *(_QWORD *)(v19 + 64) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v19 + v18, v16, v13);
  aBlock[4] = sub_10002AFC4;
  v35 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A194C;
  aBlock[3] = &unk_1000F2F20;
  v20 = _Block_copy(aBlock);
  swift_retain();
  v21 = swift_retain();
  static DispatchQoS.unspecified.getter(v21);
  v33 = _swiftEmptyArrayStorage;
  sub_10002B00C((unint64_t *)&unk_1000FEED0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  v23 = v22;
  v24 = sub_100002F78(&qword_1000FBF38);
  sub_100006744(&qword_1000FEEE0, &qword_1000FBF38);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v24, v25, v7, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v9, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v31);
  *(_QWORD *)&result = swift_release(v35).n128_u64[0];
  return result;
}

double sub_1000216A8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double result;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v8 = sub_100002F78(&qword_1000FBF30);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = sub_100002F78(&qword_1000FB230);
  __chkstk_darwin(v11);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10009B7E0();
  v30 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = a1;
  v33 = a4;
  v16 = v15;
  v17 = v14;
  sub_10001C830(a2, a2[3]);
  v31 = v17;
  v34 = v16;
  v18 = sub_1000A1F80(v17, v16);
  v19 = type metadata accessor for TaskPriority(0);
  sub_100005630((uint64_t)v13, 1, 1, v19);
  v20 = v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v30, v33, v8);
  v21 = *(unsigned __int8 *)(v9 + 80);
  v22 = (v21 + 72) & ~v21;
  v23 = (char *)swift_allocObject(&unk_1000F2F58, v22 + v10, v21 | 7);
  *((_QWORD *)v23 + 2) = 0;
  *((_QWORD *)v23 + 3) = 0;
  v24 = v31;
  v25 = v32;
  *((_QWORD *)v23 + 4) = a3;
  *((_QWORD *)v23 + 5) = v25;
  v26 = v34;
  *((_QWORD *)v23 + 6) = v24;
  *((_QWORD *)v23 + 7) = v26;
  *((_QWORD *)v23 + 8) = v18;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v23[v22], v20, v8);
  swift_retain();
  swift_retain();
  v27 = sub_100002CAC((uint64_t)v13, (uint64_t)&unk_1000FBF48, (uint64_t)v23);
  *(_QWORD *)&result = swift_release(v27).n128_u64[0];
  return result;
}

uint64_t sub_100021884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t v12;

  v8[6] = a8;
  v8[7] = v12;
  v8[4] = a6;
  v8[5] = a7;
  v8[3] = a5;
  v10 = type metadata accessor for DaemonSession.LazyState(0);
  v8[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000218EC, a4, 0);
}

uint64_t sub_1000218EC()
{
  _QWORD *v0;

  sub_10009B5DC(v0[4], v0[5], v0[6]);
  v0[9] = 0;
  sub_10002ACC4(v0[8], type metadata accessor for DaemonSession.LazyState);
  return sub_10002B3A8((uint64_t)sub_100021958, 0, 0);
}

uint64_t sub_100021958()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_100002F78(&qword_1000FBF30);
  CheckedContinuation.resume(returning:)(v1, v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100021998()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 72);
  v1 = sub_100002F78(&qword_1000FBF30);
  CheckedContinuation.resume(throwing:)(v0 + 16, v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return sub_100006A5C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000219E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  sub_10001D7B8();
  return swift_task_switch(v4, v5, v6);
}

void sub_100021A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  char v48;
  _QWORD *v49;
  int v50;
  uint64_t v52;
  uint64_t v53;

  v14 = (uint64_t)(v12 + 2);
  if (qword_1000FB0D8 != -1)
    swift_once(&qword_1000FB0D8, sub_10001FAFC);
  v15 = v12[8];
  v16 = sub_10001DD64();
  sub_100002FF8(v16, (uint64_t)qword_1000FBC40);
  swift_retain_n(v15, 4);
  sub_10002BEA0();
  v17 = sub_10002BF4C();
  v18 = os_log_type_enabled(v13, v17);
  v19 = v12[8];
  if (v18)
  {
    v20 = sub_10001D8D4(22);
    v52 = sub_10001D8D4(32);
    v53 = v52;
    *(_DWORD *)v20 = 136315394;
    sub_10001E194();
    v21 = sub_10009FEF4();
    v23 = v22;
    sub_10001D9C0();
    sub_1000102C0(v21, v23, &v53);
    v12[6] = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v12 + 6, v12 + 7, v20 + 4);
    swift_bridgeObjectRelease(v23);
    sub_10002B154();
    *(_WORD *)(v20 + 12) = 2048;
    v25 = *(_QWORD *)(v19 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_createdByPID);
    sub_10001D9C0();
    v12[7] = v25;
    v14 = (uint64_t)(v12 + 2);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v12 + 7, v12 + 8, v20 + 14);
    sub_10001D9C0();
    sub_10002B4A0((void *)&_mh_execute_header, v13, v17, "Removing session %s for pid %ld", (uint8_t *)v20);
    sub_10001DBB8(v52);
    sub_10001D790(v52);
    sub_10001D790(v20);
  }
  else
  {
    swift_release_n(v19, 4);
  }

  v26 = v12[8];
  sub_10002B308(v12[10] + 112, v14, 33);
  v27 = sub_1000BFE88(v26);
  swift_endAccess(v14);
  if (!v27)
  {
    sub_10001D834(v12[8]);
    v39 = sub_10002BEA0();
    v40 = static os_log_type_t.fault.getter();
    if (sub_10001E264(v39))
    {
      v41 = (_DWORD *)sub_10001D8D4(12);
      v42 = sub_10001D8D4(32);
      v53 = v42;
      *v41 = 136315138;
      sub_10001E194();
      sub_10009FEF4();
      v43 = sub_10001D9C0();
      sub_10002B53C(v43, v44, &v53);
      v12[5] = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v12 + 5, v12 + 6, v41 + 1);
      sub_10002B684();
      sub_10002B154();
      sub_10002B290((void *)&_mh_execute_header, v39, v40, "Session manager was not managing session %s");
      sub_10001DBB8(v42);
      sub_10001D790(v42);
      sub_10001D790((uint64_t)v41);
    }
    else
    {
      sub_10002B154();
    }

    sub_10001E3E8();
    __asm { BR              X0 }
  }
  v28 = v12[10];
  sub_10001D9C0();
  v29 = *(_QWORD *)(v28 + 280);
  v12[11] = v29;
  if (v29)
  {
    sub_10001E194();
    v30 = (_QWORD *)sub_10001E784();
    v12[12] = v30;
    *v30 = v12;
    v30[1] = sub_100021DB0;
    sub_10001E3E8();
    Task<>.value.getter(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10, a11, a12);
    return;
  }
  sub_10002BA9C();
  if (v46 != v47)
  {
    __break(1u);
  }
  else
  {
    sub_10002BB74();
    if (v46 ^ v47 | v48)
    {
      v49 = (_QWORD *)swift_task_alloc(dword_1000FDF8C);
      v12[13] = v49;
      sub_10002B408(v49, (uint64_t)sub_100021E4C);
      sub_10001E3E8();
      sub_100092C44(v50);
      return;
    }
  }
  __break(1u);
}

uint64_t sub_100021DB0()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 96));
  sub_10001D9C0();
  sub_10001E10C();
  return sub_10001D6DC();
}

void sub_100021DF0()
{
  uint64_t v0;
  char v1;
  char v2;
  char v3;
  _QWORD *v4;
  int v5;

  sub_10002BA9C();
  if (v1 != v2)
  {
    __break(1u);
  }
  else
  {
    sub_10002BB74();
    if (v1 ^ v2 | v3)
    {
      v4 = (_QWORD *)swift_task_alloc(dword_1000FDF8C);
      *(_QWORD *)(v0 + 104) = v4;
      v5 = sub_10002B408(v4, (uint64_t)sub_100021E4C);
      sub_100092C44(v5);
      return;
    }
  }
  __break(1u);
}

uint64_t sub_100021E4C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = *v0;
  v1 = v7;
  sub_10001EA4C(&v7);
  swift_task_dealloc(v2);
  v3 = (uint64_t **)swift_task_alloc(dword_1000FE754);
  *(_QWORD *)(v1 + 112) = v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_100021EB0;
  v4 = sub_10002BD0C(*(_QWORD *)(v1 + 80));
  return sub_10009BC7C(v4, v5);
}

uint64_t sub_100021EB0()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 112));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_100021EE8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1000FF364);
  *(_QWORD *)(v0 + 120) = v1;
  sub_10002BFB4(v1, (uint64_t)sub_100021F28);
  return sub_10002BA14();
}

uint64_t sub_100021F28()
{
  uint64_t v0;

  v0 = sub_10002B980();
  sub_10001D680(v0);
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_100021F5C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(dword_1000FD414);
  *(_QWORD *)(v0 + 128) = v1;
  v2 = sub_10002B408(v1, (uint64_t)sub_100021FB0);
  return sub_10002B9C0(v2);
}

uint64_t sub_100021FB0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_10002B994();
  sub_10001D680(v1);
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100021FD8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[5] = a1;
  v2[6] = v1;
  v3 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventResult(0);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[8] = v4;
  v2[9] = sub_10001D800(v4);
  v5 = sub_10002BCCC();
  v2[10] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[11] = v6;
  v2[12] = sub_10001D800(v6);
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_100022038()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  sub_10001E6F0();
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD **)(v0 + 48);
  v4 = v3[31];
  v5 = v3[32];
  sub_10001C830(v3 + 28, v4);
  *(_QWORD *)(v0 + 104) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 56))(v2, v4, v5);
  sub_10002B2E0((uint64_t)(v3 + 14), v0 + 16);
  v6 = v3[14];
  v7 = swift_task_alloc(32);
  *(_QWORD *)(v7 + 16) = v2;
  sub_10001D964();
  sub_100008088(sub_10002B13C, v7, v6);
  v9 = v8;
  *(_QWORD *)(v0 + 112) = v8;
  sub_10001D8B4();
  sub_10001E490();
  if (v9)
  {
    sub_10002BAF8(*(_QWORD *)(v0 + 88));
    v10 = (_QWORD *)swift_task_alloc(dword_1000FBC8C);
    *(_QWORD *)(v0 + 120) = v10;
    *v10 = v0;
    v10[1] = sub_10002215C;
    return sub_10002B29C(v9, *(_QWORD *)(v0 + 96));
  }
  else
  {
    sub_10002B8D8();
    sub_10002BA70(enum case for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventResult.success(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 104));
    sub_10002B6D4();
    sub_10001D930();
    sub_10002B68C(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    sub_10001EAC8();
    sub_10001E490();
    return sub_10002B160(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_10002215C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_10002B980();
  v2 = *(_QWORD *)(v1 + 88);
  sub_10001D680(v0);
  sub_10002B260(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_10002BBCC();
  return sub_10001D6DC();
}

uint64_t sub_1000221AC()
{
  uint64_t v0;
  uint64_t v1;

  sub_10001E6F0();
  swift_release(*(_QWORD *)(v0 + 112));
  sub_10002B8D8();
  sub_10002BA70(enum case for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventResult.success(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 104));
  sub_10002B6D4();
  sub_10001D930();
  sub_10002B68C(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_10001EAC8();
  sub_10001E490();
  return sub_10002B160(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100022208(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[12] = a1;
  v2[13] = v1;
  v3 = sub_10002BCCC();
  v2[14] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[15] = v4;
  v2[16] = sub_10001D800(v4);
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_10002224C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  uint64_t v26;
  char v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;

  sub_10001E6F0();
  v3 = *(_QWORD *)(v0 + 104);
  sub_10002B2E0(v3 + 112, v0 + 56);
  v4 = *(_QWORD *)(v3 + 112);
  if ((v4 & 0xC000000000000001) != 0)
  {
    if (v4 < 0)
      v5 = *(_QWORD *)(v3 + 112);
    else
      v5 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    __CocoaSet.makeIterator()(v5);
    sub_10002B5F4();
    sub_10002B5DC(&qword_1000FB8C8, v6, type metadata accessor for DaemonSession);
    v7 = sub_10002BF40();
    Set.Iterator.init(_cocoa:)(v7, v8, v9);
    result = *(_QWORD *)(v0 + 16);
    v11 = *(_QWORD *)(v0 + 24);
    v13 = *(_QWORD *)(v0 + 32);
    v12 = *(_QWORD *)(v0 + 40);
    v14 = *(_QWORD *)(v0 + 48);
  }
  else
  {
    v15 = -1 << *(_BYTE *)(v4 + 32);
    v11 = v4 + 56;
    v13 = ~v15;
    v16 = -v15;
    if (v16 < 64)
      v17 = ~(-1 << v16);
    else
      v17 = -1;
    v14 = v17 & *(_QWORD *)(v4 + 56);
    result = swift_bridgeObjectRetain(v4);
    v12 = 0;
  }
  *(_QWORD *)(v0 + 144) = v11;
  *(_QWORD *)(v0 + 152) = v13;
  *(_QWORD *)(v0 + 136) = result;
  *(_DWORD *)(v0 + 192) = enum case for RequestCancellationReason.clientTermination(_:);
  if (result < 0)
    goto LABEL_13;
LABEL_11:
  if (v14)
  {
    sub_10002BB50();
    goto LABEL_29;
  }
  v21 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    v22 = *(_QWORD *)(v0 + 152) + 64;
    if (v21 < (uint64_t)(v22 >> 6))
    {
      v23 = *(_QWORD *)(v0 + 144);
      v11 = v12 + 1;
      if (*(_QWORD *)(v23 + 8 * v21))
        goto LABEL_28;
      v24 = v22 >> 6;
      v11 = v12 + 2;
      if (v12 + 2 >= v24)
        goto LABEL_35;
      if (*(_QWORD *)(v23 + 8 * v11))
        goto LABEL_28;
      v11 = v12 + 3;
      if (v12 + 3 >= v24)
        goto LABEL_35;
      if (*(_QWORD *)(v23 + 8 * v11))
      {
LABEL_28:
        sub_10002BC84();
LABEL_29:
        sub_10002BC64(v18, v19);
        while (1)
        {
          *(_QWORD *)(v0 + 168) = v11;
          *(_QWORD *)(v0 + 176) = v1;
          *(_QWORD *)(v0 + 160) = v2;
          if (!v2)
            goto LABEL_35;
          sub_10002BEF8();
          if (v27)
          {
            sub_10002BAE4();
            v28 = (_QWORD *)swift_task_alloc(dword_1000FBC8C);
            *(_QWORD *)(v0 + 184) = v28;
            v29 = sub_10002BD18(v28, (uint64_t)sub_1000224A8);
            return sub_10002B29C(v29, v30);
          }
          sub_10002BA40();
          result = *(_QWORD *)(v0 + 136);
          v12 = v11;
          v14 = v1;
          if ((result & 0x8000000000000000) == 0)
            goto LABEL_11;
LABEL_13:
          v20 = sub_10002B56C();
          if (!v20)
            goto LABEL_35;
          *(_QWORD *)(v0 + 88) = v20;
          sub_10002B5F4();
          sub_10002BF60();
          sub_10002B48C(v0 + 80, v0 + 88, (uint64_t)&type metadata for Swift.AnyObject + 8);
          sub_10002BF80();
          v11 = v12;
          v1 = v14;
        }
      }
      v11 = v12 + 4;
      if (v12 + 4 < v24)
      {
        if (!*(_QWORD *)(v23 + 8 * v11))
        {
          v25 = v12 + 5;
          while (v25 < v24)
          {
            sub_10002BA00();
            if (v26)
            {
              v11 = v25 - 1;
              goto LABEL_28;
            }
          }
          goto LABEL_36;
        }
        goto LABEL_28;
      }
    }
LABEL_35:
    result = *(_QWORD *)(v0 + 136);
LABEL_36:
    sub_10001CD34(result);
    sub_10001E330();
    return sub_10002B160(*(uint64_t (**)(void))(v0 + 8));
  }
  __break(1u);
  return result;
}

uint64_t sub_1000224A8()
{
  uint64_t v0;
  uint64_t v1;

  sub_10001DB38();
  v1 = *(_QWORD *)(v0 + 120);
  sub_10001D680(*(_QWORD *)(v0 + 184));
  sub_10002B260(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_10002BBCC();
  return sub_10001D6DC();
}

uint64_t sub_1000224F8()
{
  int64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  sub_10001E6F0();
  swift_release(*(_QWORD *)(v1 + 160));
  v4 = *(_QWORD *)(v1 + 168);
  for (i = *(_QWORD *)(v1 + 176); ; i = v2)
  {
    result = *(_QWORD *)(v1 + 136);
    if ((result & 0x8000000000000000) == 0)
      break;
    v9 = sub_10002B56C();
    if (!v9)
      goto LABEL_26;
    *(_QWORD *)(v1 + 88) = v9;
    sub_10002B5F4();
    sub_10002BF60();
    sub_10002B48C(v1 + 80, v1 + 88, (uint64_t)&type metadata for Swift.AnyObject + 8);
    sub_10002BF80();
    v0 = v4;
    v2 = i;
LABEL_22:
    *(_QWORD *)(v1 + 168) = v0;
    *(_QWORD *)(v1 + 176) = v2;
    *(_QWORD *)(v1 + 160) = v3;
    if (!v3)
    {
LABEL_26:
      result = *(_QWORD *)(v1 + 136);
LABEL_27:
      sub_10001CD34(result);
      sub_10001E330();
      return sub_10002B160(*(uint64_t (**)(void))(v1 + 8));
    }
    sub_10002BEF8();
    if (v16)
    {
      sub_10002BAE4();
      v17 = (_QWORD *)swift_task_alloc(dword_1000FBC8C);
      *(_QWORD *)(v1 + 184) = v17;
      v18 = sub_10002BD18(v17, (uint64_t)sub_1000224A8);
      return sub_10002B29C(v18, v19);
    }
    sub_10002BA40();
    v4 = v0;
  }
  if (i)
  {
    sub_10002BB50();
LABEL_21:
    sub_10002BC64(v7, v8);
    goto LABEL_22;
  }
  v10 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    v11 = *(_QWORD *)(v1 + 152) + 64;
    if (v10 >= (uint64_t)(v11 >> 6))
      goto LABEL_26;
    v12 = *(_QWORD *)(v1 + 144);
    v0 = v4 + 1;
    if (!*(_QWORD *)(v12 + 8 * v10))
    {
      v13 = v11 >> 6;
      v0 = v4 + 2;
      if (v4 + 2 >= v13)
        goto LABEL_26;
      if (!*(_QWORD *)(v12 + 8 * v0))
      {
        v0 = v4 + 3;
        if (v4 + 3 >= v13)
          goto LABEL_26;
        if (!*(_QWORD *)(v12 + 8 * v0))
        {
          v0 = v4 + 4;
          if (v4 + 4 >= v13)
            goto LABEL_26;
          if (!*(_QWORD *)(v12 + 8 * v0))
          {
            v14 = v4 + 5;
            while (v14 < v13)
            {
              sub_10002BA00();
              if (v15)
              {
                v0 = v14 - 1;
                goto LABEL_20;
              }
            }
            goto LABEL_27;
          }
        }
      }
    }
LABEL_20:
    sub_10002BC84();
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_100022690(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[6] = a1;
  v2[7] = v1;
  v3 = sub_100002F78(&qword_1000FB2D8);
  v2[8] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[9] = v4;
  v2[10] = sub_10001D800(v4);
  v5 = sub_10002BCCC();
  v2[11] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[12] = v6;
  v2[13] = sub_10001D800(v6);
  sub_10001D7B8();
  return sub_10001D674();
}

#error "100022880: call analysis failed (funcsize=165)"

uint64_t sub_1000229B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_10002B980();
  v2 = *(_QWORD *)(v1 + 96);
  sub_10001D680(v0);
  sub_10002B260(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_10002BBCC();
  return sub_10001D6DC();
}

uint64_t sub_100022A00()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1000FF364);
  *(_QWORD *)(v0 + 128) = v1;
  sub_10002BFB4(v1, (uint64_t)sub_100022A40);
  return sub_10002BA14();
}

uint64_t sub_100022A40()
{
  uint64_t v0;

  v0 = sub_10002B994();
  sub_10001D680(v0);
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_100022A74()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(dword_1000FD414);
  *(_QWORD *)(v0 + 136) = v1;
  v2 = sub_10002B408(v1, (uint64_t)sub_100022AC8);
  return sub_10002B9C0(v2);
}

uint64_t sub_100022AC8()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 136));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_100022B00()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  swift_release(*(_QWORD *)(v0 + 112));
  sub_10001E330();
  sub_10001D938();
  v1 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_10001D940(v1);
}

uint64_t sub_100022B38()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[6] = v0;
  v2 = sub_100002F78(&qword_1000FB230);
  v1[7] = sub_10001D800(*(_QWORD *)(v2 - 8));
  v3 = sub_100002F78(&qword_1000FBED8);
  v1[8] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[9] = v4;
  v1[10] = sub_10001D800(v4);
  v5 = sub_100002F78(&qword_1000FBEE0);
  v1[11] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[12] = v6;
  v1[13] = sub_10001D800(v6);
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_100022BBC()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 112) = sub_10001C830((_QWORD *)(*(_QWORD *)(v0 + 48) + 128), *(_QWORD *)(*(_QWORD *)(v0 + 48) + 152));
  return sub_10001D674();
}

uint64_t sub_100022BFC()
{
  uint64_t v0;

  sub_1000923A8(*(_QWORD *)(v0 + 80));
  sub_10001E10C();
  return sub_10001D6DC();
}

uint64_t sub_100022C3C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[9];
  v1 = v0[10];
  v3 = v0[8];
  AsyncStream.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_10002B00C(&qword_1000FBEE8, v4, (uint64_t (*)(uint64_t))type metadata accessor for SessionManager);
  v0[15] = v5;
  v6 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[16] = v6;
  sub_10002B4CC(v6);
  return sub_10002B7D0();
}

uint64_t sub_100022CD0()
{
  uint64_t v0;

  v0 = sub_10002B994();
  sub_10001D680(v0);
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_100022D04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ObjectType;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;

  sub_10001E6F0();
  v13 = *(unsigned int *)(v12 + 160) | ((unint64_t)*(unsigned __int8 *)(v12 + 164) << 32);
  if ((v13 & 0xFF00000000) == 0x500000000)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v12 + 96) + 8))(*(_QWORD *)(v12 + 104), *(_QWORD *)(v12 + 88));
    sub_10001E330();
    sub_10001D938();
    sub_10001EAC8();
    return sub_10002B160(*(uint64_t (**)(void))(v12 + 8));
  }
  v15 = *(_QWORD *)(v12 + 120);
  v16 = *(_QWORD *)(v12 + 48);
  v17 = *(_QWORD *)(v12 + 56);
  type metadata accessor for _OSActivity(0);
  *(_QWORD *)(v12 + 136) = _OSActivity.__allocating_init(_:)("Process State Update", 20, 2);
  v18 = sub_10001DBC0();
  sub_100005630(v17, 1, 1, v18);
  v19 = sub_100006A80((uint64_t)&unk_1000F2E40, 45);
  *(_QWORD *)(v19 + 16) = v16;
  *(_QWORD *)(v19 + 24) = v15;
  *(_QWORD *)(v19 + 32) = v16;
  *(_DWORD *)(v19 + 40) = v13;
  *(_BYTE *)(v19 + 44) = BYTE4(v13);
  LODWORD(v17) = sub_100005700(v17, 1, v18);
  v20 = sub_10001D834(v16);
  v21 = *(_QWORD *)(v12 + 56);
  if ((_DWORD)v17 != 1)
  {
    v28 = TaskPriority.rawValue.getter(v20);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v21, v18);
    v22 = v28 | 0x1C00;
    v16 = *(_QWORD *)(v19 + 16);
    if (v16)
      goto LABEL_5;
LABEL_7:
    v25 = 0;
    v27 = 0;
    goto LABEL_8;
  }
  sub_10002BBF0(v20, &qword_1000FB230);
  v22 = 7168;
  if (!v16)
    goto LABEL_7;
LABEL_5:
  v23 = *(_QWORD *)(v19 + 24);
  ObjectType = swift_getObjectType(v16);
  swift_unknownObjectRetain(v16);
  v25 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v23);
  v27 = v26;
  swift_unknownObjectRelease(v16);
LABEL_8:
  v29 = sub_100006A80((uint64_t)&unk_1000F2E68, 32);
  *(_QWORD *)(v29 + 16) = &unk_1000FBEF8;
  *(_QWORD *)(v29 + 24) = v19;
  if (v27 | v25)
  {
    v30 = v12 + 16;
    *(_QWORD *)(v12 + 16) = 0;
    *(_QWORD *)(v12 + 24) = 0;
    *(_QWORD *)(v12 + 32) = v25;
    *(_QWORD *)(v12 + 40) = v27;
  }
  else
  {
    v30 = 0;
  }
  v31 = *(_QWORD *)(v12 + 48);
  v32 = swift_task_create(v22, v30, (char *)&type metadata for () + 8, &unk_1000FB2C8, v29);
  v33 = *(_QWORD *)(v31 + 280);
  *(_QWORD *)(v31 + 280) = v32;
  swift_release(v33);
  v34 = *(_QWORD *)(v31 + 280);
  *(_QWORD *)(v12 + 144) = v34;
  if (v34)
  {
    sub_10001D7EC();
    v35 = (_QWORD *)sub_10001E784();
    *(_QWORD *)(v12 + 152) = v35;
    sub_10002BFB4(v35, (uint64_t)sub_100022F98);
    sub_10002B574();
    return Task<>.value.getter(v36, v37, v38, v39, v40, v41, v42, v43, a9, a10, a11, a12);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v12 + 48) + 280) = 0;
    _OSActivity.close()();
    sub_10001D9C0();
    v44 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v12 + 128) = v44;
    sub_10002B4CC(v44);
    sub_10002B574();
    return AsyncStream.Iterator.next(isolation:)(v45);
  }
}

uint64_t sub_100022F98()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 152));
  sub_10001D9C0();
  sub_10001E10C();
  return sub_10001D6DC();
}

uint64_t sub_100022FD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v1 + 280);
  *(_QWORD *)(v1 + 280) = 0;
  swift_release(v2);
  _OSActivity.close()();
  sub_10001D9C0();
  v3 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 128) = v3;
  sub_10002B4CC(v3);
  return sub_10002B7D0();
}

uint64_t sub_100023044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5[28] = a4;
  v5[29] = a5;
  v7 = type metadata accessor for InferenceProviderDescriptor(0);
  v5[30] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[31] = v8;
  v5[32] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100002F78(&qword_1000FB230);
  v5[33] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100002F78(&qword_1000FB2D8);
  v5[34] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[35] = v11;
  v5[36] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000230F8, a4, 0);
}

uint64_t sub_1000230F8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  void *v81;
  os_log_type_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  NSObject *v95;
  os_log_type_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  uint64_t v108;
  os_log_type_t v109;
  _BOOL4 v110;
  uint64_t v111;
  _DWORD *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  int64_t v128;
  unint64_t v129;
  int64_t v130;
  int64_t v131;
  uint64_t v132;
  NSObject *v133;
  os_log_type_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  char *v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191[11];

  v2 = *(_QWORD *)(v0 + 224);
  sub_10002B2E0(v2 + 112, v0 + 96);
  v3 = *(_QWORD *)(v2 + 112);
  if ((v3 & 0xC000000000000001) != 0)
  {
    v4 = (uint64_t)_swiftEmptySetSingleton;
    sub_10002B338(v3);
    v5 = (uint64_t *)sub_10002B938();
    v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      v7 = v6;
      v8 = (uint64_t *)(v0 + 208);
      v9 = (uint64_t *)(v0 + 216);
      v10 = *(int *)(v0 + 232);
      v1 = (uint64_t *)sub_10002B5F4();
      v11 = (uint64_t *)((char *)&type metadata for Swift.AnyObject + 8);
      do
      {
        *v9 = v7;
        sub_10002B4BC(v0 + 208, (uint64_t)v9, (uint64_t)v11, (uint64_t)v1);
        v12 = *v8;
        if (*(_QWORD *)(*v8 + 40) == v10)
        {
          v9 = v11;
          v11 = v1;
          v1 = v5;
          v13 = _swiftEmptySetSingleton[2];
          if (_swiftEmptySetSingleton[3] <= v13)
          {
            sub_100014B54(v13 + 1);
            v4 = (uint64_t)_swiftEmptySetSingleton;
          }
          v10 = *(_QWORD *)(v0 + 272);
          Hasher.init(_seed:)(v191, _swiftEmptySetSingleton[5]);
          sub_100006744(&qword_1000FB2E0, &qword_1000FB2D8);
          dispatch thunk of Hashable.hash(into:)(v191, v10, v14);
          v5 = v191;
          v15 = Hasher._finalize()() & ~(-1 << LOBYTE(_swiftEmptySetSingleton[4]));
          if (((-1 << v15) & ~_swiftEmptySetSingleton[(v15 >> 6) + 7]) != 0)
          {
            sub_10002BCF4();
          }
          else
          {
            sub_10002BCF4();
            do
            {
              if (++v20 == v21 && (v19 & 1) != 0)
              {
                __break(1u);
LABEL_99:
                sub_10001CD34(v4);
                sub_10001E330();
                sub_10001EAC8();
                sub_10002B528();
                sub_10002B7A4();
                __asm { BR              X0 }
              }
              v22 = v20 == v21;
              if (v20 == v21)
                v20 = 0;
              v19 |= v22;
              v23 = *(_QWORD *)(v17 + 8 * v20);
            }
            while (v23 == -1);
            v18 = __clz(__rbit64(~v23)) + (v20 << 6);
          }
          *(_QWORD *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
          *(_QWORD *)(_swiftEmptySetSingleton[6] + 8 * v18) = v12;
          ++_swiftEmptySetSingleton[2];
        }
        else
        {
          v16 = sub_10002BA40();
        }
        v7 = __CocoaSet.Iterator.next()(v16);
      }
      while (v7);
    }
    v24 = sub_10001D9C0();
  }
  else
  {
    v26 = *(_QWORD *)(v0 + 232) & 0xFFFFFFFFFFLL;
    v27 = swift_bridgeObjectRetain(v3);
    v24 = sub_10002A4D0(v27, v26);
    v4 = v24;
  }
  v187 = v0 + 16;
  v181 = v0 + 152;
  v177 = v0 + 160;
  if ((v4 & 0xC000000000000001) != 0)
  {
    v28 = __CocoaSet.makeIterator()(v4);
    v29 = sub_10002B5F4();
    sub_10002B5DC(&qword_1000FB8C8, v30, type metadata accessor for DaemonSession);
    v24 = Set.Iterator.init(_cocoa:)(v28, v29, v31);
    v4 = *(_QWORD *)(v0 + 56);
    v32 = *(_QWORD *)(v0 + 64);
    v33 = *(_QWORD *)(v0 + 72);
    v34 = *(_QWORD *)(v0 + 80);
    v35 = *(_QWORD *)(v0 + 88);
  }
  else
  {
    v34 = 0;
    v36 = -1;
    v37 = -1 << *(_BYTE *)(v4 + 32);
    v32 = v4 + 56;
    v33 = ~v37;
    v38 = -v37;
    if (v38 < 64)
      v36 = ~(-1 << v38);
    v35 = v36 & *(_QWORD *)(v4 + 56);
  }
  v161 = v0 + 144;
  v190 = (_QWORD *)(v0 + 168);
  v188 = (uint64_t *)(v0 + 176);
  v170 = (uint64_t *)(v0 + 192);
  v166 = (_QWORD *)(v0 + 184);
  v168 = (uint64_t *)(v0 + 200);
  *(_QWORD *)(v0 + 304) = v32;
  *(_QWORD *)(v0 + 312) = v33;
  *(_QWORD *)(v0 + 296) = v4;
  *(_QWORD *)&v25 = 136315138;
  v184 = v25;
  v179 = (char *)&type metadata for Any + 8;
  *(_QWORD *)&v25 = 136315394;
  v172 = v25;
  v164 = (char *)&type metadata for Swift.AnyObject + 8;
  while (1)
  {
    *(_QWORD *)(v0 + 320) = 0;
    if ((v4 & 0x8000000000000000) == 0)
      break;
    v41 = __CocoaSet.Iterator.next()(v24);
    if (!v41)
      goto LABEL_98;
    v42 = v41;
    *v168 = v41;
    sub_10002B5F4();
    swift_unknownObjectRetain(v42);
    v4 = (uint64_t)v170;
    v43 = sub_10002B9E4();
    sub_10002B48C(v43, v44, v45);
    v46 = *v170;
    swift_unknownObjectRelease(v42);
    v40 = v34;
    v1 = (uint64_t *)v35;
LABEL_48:
    *(_QWORD *)(v0 + 336) = v40;
    *(_QWORD *)(v0 + 344) = v1;
    *(_QWORD *)(v0 + 328) = v46;
    if (!v46)
    {
LABEL_98:
      v4 = *(_QWORD *)(v0 + 296);
      goto LABEL_99;
    }
    v55 = OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState;
    *(_QWORD *)(v0 + 352) = OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState;
    sub_10002B2E0(v46 + v55, v0 + 120);
    v56 = sub_10002BC10();
    if (v57)
    {
      v63 = -1 << *(_BYTE *)(v56 + 32);
      v60 = v56 + 56;
      v34 = ~v63;
      v64 = -v63;
      if (v64 < 64)
        v65 = ~(-1 << v64);
      else
        v65 = -1;
      v62 = v65 & *(_QWORD *)(v56 + 56);
      v59 = swift_bridgeObjectRetain(v56);
      v61 = 0;
    }
    else
    {
      sub_10002B338(v56);
      sub_10002B938();
      sub_10002B50C();
      sub_10002B00C(&qword_1000FB8C0, 255, type metadata accessor for DaemonRequest);
      sub_10002B324(v58);
      v59 = *(_QWORD *)(v0 + 16);
      v60 = *(_QWORD *)(v0 + 24);
      v34 = *(_QWORD *)(v0 + 32);
      v61 = *(_QWORD *)(v0 + 40);
      v62 = *(_QWORD *)(v0 + 48);
    }
    *(_QWORD *)(v0 + 368) = v60;
    *(_QWORD *)(v0 + 376) = v34;
    *(_QWORD *)(v0 + 360) = v59;
    if (v59 < 0)
    {
      v68 = sub_10002B56C();
      if (!v68)
        goto LABEL_62;
      v76 = sub_10002B4A8(v68, v69, v70, v71, v72, v73, v74, v75, v159, v161, (uint64_t)v164, v166);
      swift_unknownObjectRetain(v60);
      v77 = sub_10002B9E4();
      sub_10002B4BC(v77, v78, (uint64_t)v164, v76);
      v34 = *v188;
      swift_unknownObjectRelease(v60);
      v4 = v61;
      v66 = v62;
    }
    else
    {
      if (v62)
      {
        v66 = (v62 - 1) & v62;
        v67 = __clz(__rbit64(v62)) | (v61 << 6);
        v4 = v61;
      }
      else
      {
        v128 = v61 + 1;
        if (__OFADD__(v61, 1))
          goto LABEL_103;
        if (v128 >= (uint64_t)((unint64_t)(v34 + 64) >> 6))
        {
LABEL_91:
          v62 = 0;
          goto LABEL_62;
        }
        v129 = *(_QWORD *)(v60 + 8 * v128);
        v4 = v61 + 1;
        if (!v129)
        {
          v130 = (unint64_t)(v34 + 64) >> 6;
          v4 = v61 + 2;
          if (v61 + 2 >= v130)
            goto LABEL_91;
          v129 = *(_QWORD *)(v60 + 8 * v4);
          if (!v129)
          {
            v4 = v61 + 3;
            if (v61 + 3 >= v130)
              goto LABEL_91;
            v129 = *(_QWORD *)(v60 + 8 * v4);
            if (!v129)
            {
              v4 = v61 + 4;
              if (v61 + 4 >= v130)
                goto LABEL_91;
              v129 = *(_QWORD *)(v60 + 8 * v4);
              if (!v129)
              {
                v131 = v61 + 5;
                do
                {
                  if (v131 >= v130)
                    goto LABEL_91;
                  sub_10002BD94();
                }
                while (!v129);
                v4 = v131 - 1;
              }
            }
          }
        }
        v66 = (v129 - 1) & v129;
        v67 = __clz(__rbit64(v129)) + (v4 << 6);
      }
      v34 = *(_QWORD *)(*(_QWORD *)(v59 + 48) + 8 * v67);
      sub_10001E900();
    }
    *(_QWORD *)(v0 + 392) = v4;
    *(_QWORD *)(v0 + 400) = v66;
    *(_QWORD *)(v0 + 384) = v34;
    if (v34)
    {
      sub_10002B714();
      sub_10002B7A4();
      return swift_task_switch(v147, v148, v149);
    }
LABEL_62:
    v79 = (unint64_t)*(unsigned __int8 *)(v0 + 236) << 32;
    sub_10001CD34(*(_QWORD *)(v0 + 360));
    if (v79)
    {
      if (qword_1000FB0D8 == -1)
        goto LABEL_93;
      goto LABEL_104;
    }
    if (qword_1000FB0D8 != -1)
      swift_once(&qword_1000FB0D8, sub_10001FAFC);
    v80 = sub_10001DD64();
    v81 = (void *)sub_100002FF8(v80, (uint64_t)qword_1000FBC40);
    *(_QWORD *)(v0 + 424) = v81;
    sub_10001D7AC();
    sub_10002B3CC();
    v82 = sub_10002B470();
    if (sub_10002B1AC(v82))
    {
      v62 = sub_10001D8D4(12);
      v83 = sub_10001D8D4(32);
      *(_DWORD *)v1 = sub_10002BE30(v83, v84, v85, v86, v87, v88, v89, v90, v159, v161, (uint64_t)v164, (uint64_t)v166, (uint64_t)v168, (uint64_t)v170, v172, *((uint64_t *)&v172 + 1), v175, v177, (uint64_t)v179,
                        v181,
                        v184).n128_u32[0];
      v1 = (uint64_t *)((char *)v1 + 12);
      sub_10001E194();
      sub_10009FEF4();
      v91 = sub_10001D9C0();
      sub_10002B53C(v91, v92, v191);
      sub_10002B278(v93, v190, v160, v162, v165, v167, v169, v171, v173, v174, v176, v178, v180, v182, v185, v186, v187, (uint64_t)v188);
      sub_10002B154();
      sub_10002B684();
      sub_10002BA28();
      sub_10002B290(v94, v95, v96, "Client state reporter event: session %s is foreground, marking assets as in use by the session");
      sub_10002B5E4();
      sub_10001D790(v4);
      sub_10001D790(v62);

    }
    else
    {

      sub_10002B154();
    }
    *(_QWORD *)(v0 + 432) = sub_10002B460();
    if (!v62)
    {
      v97 = sub_10002B348();
      sub_10002B6B8(v97, v98);
      v99 = sub_10001DBC0();
      sub_10002B26C(0, v100, v101, v99);
      v102 = sub_100006A80((uint64_t)&unk_1000F2EB8, 32);
      v103 = sub_10002B75C(v102);
      v105 = sub_100002CCC(v103, (uint64_t)&unk_1000FBF18, v104);
      sub_10002B310(v105);
      v153 = (_QWORD *)swift_task_alloc(dword_1000FD3E4);
      *(_QWORD *)(v0 + 448) = v153;
      sub_10002B240(v153, (uint64_t)sub_100024C68);
      sub_10002B7A4();
      return sub_10004ED50(v154, v155, v156, v157);
    }
    v106 = *(_QWORD *)(v0 + 424);
    v107 = *(NSObject **)(v0 + 328);
    sub_10002B400();
    sub_10001FAE0();
    sub_10002B400();
    v108 = sub_10001FAE0();
    Logger.logObject.getter(v108);
    v109 = sub_10002BE0C();
    v110 = os_log_type_enabled(v107, v109);
    v111 = *(_QWORD *)(v0 + 328);
    if (v110)
    {
      v112 = (_DWORD *)sub_10001D8D4(22);
      v1 = (uint64_t *)sub_10001D8D4(8);
      v189 = sub_10001D8D4(32);
      v191[0] = v189;
      *v112 = v172;
      sub_100006744(&qword_1000FBE80, &qword_1000FB2D8);
      v114 = sub_10002B548(v113);
      sub_1000102C0(v114, v115, v191);
      *(_QWORD *)(v0 + 152) = v116;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v181, v177, v112 + 1);
      sub_10001EBB0(v111);
      sub_10001E034();
      sub_10001E244();
      v117 = sub_10002B8B4();
      *(_QWORD *)(v0 + 160) = v117;
      sub_10002B3F0(v177, (uint64_t)v190);
      *v1 = v117;
      sub_10001DB48();
      sub_10001DB48();
      sub_10002B3C0((void *)&_mh_execute_header, v107, v109, "Session %s is foreground but couldn't claim assets: %@");
      sub_100002F78(&qword_1000FB8E0);
      sub_10001DBB8((uint64_t)v1);
      sub_10001D790((uint64_t)v1);
      v106 = v189;
      sub_10001DBB8(v189);
      sub_10001D790(v189);
      sub_10001D790((uint64_t)v112);

      sub_10001DB48();
    }
    else
    {
      sub_10001DB48();
      sub_10001EBB0(v111);
      sub_10001DB48();
      sub_10001DB48();

    }
    sub_10002B514();
    if (v57)
    {
      v118 = *(_QWORD *)(v0 + 264);
      v119 = *(_QWORD *)(v0 + 224);
      v120 = sub_10001DBC0();
      sub_10002B26C(v118, v121, v122, v120);
      sub_10002B00C(&qword_1000FBEE8, v123, (uint64_t (*)(uint64_t))type metadata accessor for SessionManager);
      v125 = v124;
      v126 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F2E90, 48);
      v126[2] = v119;
      v126[3] = v125;
      v126[4] = v106;
      v126[5] = v119;
      sub_10001D834(v119);
      sub_10001E194();
      v127 = sub_10002BAD4(v118, (uint64_t)&unk_1000FBF08);
      swift_release(v127);
    }
    v24 = sub_10001D9C0();
    v34 = *(_QWORD *)(v0 + 336);
    v35 = *(_QWORD *)(v0 + 344);
    v4 = *(_QWORD *)(v0 + 296);
  }
  if (v35)
  {
    v1 = (uint64_t *)((v35 - 1) & v35);
    v39 = __clz(__rbit64(v35)) | (v34 << 6);
    v40 = v34;
LABEL_47:
    v46 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v39);
    sub_10001E194();
    goto LABEL_48;
  }
  if (!__OFADD__(v34, 1))
  {
    sub_10002B74C();
    if (v49 == v50)
      goto LABEL_98;
    v51 = *(_QWORD *)(v0 + 304);
    v52 = *(_QWORD *)(v51 + 8 * v48);
    v40 = v48;
    if (!v52)
    {
      v53 = v47 >> 6;
      v40 = v48 + 1;
      if (v48 + 1 >= v53)
        goto LABEL_98;
      v52 = *(_QWORD *)(v51 + 8 * v40);
      if (!v52)
      {
        v40 = v48 + 2;
        if (v48 + 2 >= v53)
          goto LABEL_98;
        v52 = *(_QWORD *)(v51 + 8 * v40);
        if (!v52)
        {
          v40 = v48 + 3;
          if (v48 + 3 >= v53)
            goto LABEL_98;
          v52 = *(_QWORD *)(v51 + 8 * v40);
          if (!v52)
          {
            v54 = v34 + 5;
            do
            {
              if (v54 >= v53)
                goto LABEL_99;
              sub_10002BA00();
            }
            while (!v52);
            v40 = v54 - 1;
          }
        }
      }
    }
    v1 = (uint64_t *)((v52 - 1) & v52);
    v39 = __clz(__rbit64(v52)) + (v40 << 6);
    goto LABEL_47;
  }
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  swift_once(&qword_1000FB0D8, sub_10001FAFC);
LABEL_93:
  v132 = sub_10001DD64();
  v133 = sub_100002FF8(v132, (uint64_t)qword_1000FBC40);
  sub_10001D7AC();
  sub_10002B3CC();
  v134 = sub_10002B470();
  if (sub_10002B1AC(v134))
  {
    v135 = sub_10001D8D4(12);
    v136 = sub_10001D8D4(32);
    *(_DWORD *)v1 = sub_10002BE30(v136, v137, v138, v139, v140, v141, v142, v143, v159, v161, (uint64_t)v164, (uint64_t)v166, (uint64_t)v168, (uint64_t)v170, v172, *((uint64_t *)&v172 + 1), v175, v177, (uint64_t)v179,
                      v181,
                      v184).n128_u32[0];
    sub_10001E194();
    sub_10009FEF4();
    v144 = sub_10001D9C0();
    sub_10002B530(v144, v145, v191);
    *v163 = v146;
    sub_10002B2B8((uint64_t)v163, v183);
    sub_10002B154();
    sub_10001E8A8();
    sub_10002B290((void *)&_mh_execute_header, v133, (os_log_type_t)v34, "Client state reporter event: session %s is not foreground, releasing assets");
    sub_10001DBB8(v4);
    sub_10001D790(v4);
    sub_10001D790(v135);

  }
  else
  {

    sub_10002B154();
  }
  sub_10002B6C4();
  v150 = (_QWORD *)swift_task_alloc(dword_1000FD414);
  *(_QWORD *)(v0 + 416) = v150;
  sub_10002B408(v150, (uint64_t)sub_1000244C4);
  sub_10002B7A4();
  return sub_100057620(v151);
}

uint64_t sub_100023C9C()
{
  sub_1000C5EBC();
  sub_10001E10C();
  return sub_10001D6DC();
}

#error "100023E84: call analysis failed (funcsize=474)"

uint64_t sub_1000244C4()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 416));
  sub_10001D7B8();
  return sub_10001D674();
}

#error "100024588: call analysis failed (funcsize=443)"

uint64_t sub_100024C68()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_10001E6F0();
  sub_10001E0D8();
  sub_10001EA4C(v2);
  v0[57] = v1;
  swift_task_dealloc(v3);
  v4 = v0[35];
  v6 = v0[31];
  v5 = v0[32];
  swift_bridgeObjectRelease(v0[54]);
  sub_10001D9C8();
  sub_10002B818(v5, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  sub_10002B68C(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_10001E10C();
  sub_10002B574();
  return swift_task_switch(v7, v8, v9);
}

#error "100024DFC: call analysis failed (funcsize=442)"

#error "1000256FC: call analysis failed (funcsize=457)"

uint64_t sub_100025C04(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100025C1C, 0, 0);
}

uint64_t sub_100025C1C()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = 0;
  return sub_10001DCF8();
}

uint64_t sub_100025C28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 40) = a4;
  *(_QWORD *)(v5 + 48) = a5;
  return swift_task_switch(sub_100025C40, a5, 0);
}

uint64_t sub_100025C40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20,uint64_t a21,uint64_t a22)
{
  _QWORD *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;

  sub_10001DFE8();
  a21 = v24;
  a22 = v25;
  a20 = v22;
  if (qword_1000FB0D8 != -1)
    swift_once(&qword_1000FB0D8, sub_10001FAFC);
  v26 = sub_10001DD64();
  v27 = sub_100002FF8(v26, (uint64_t)qword_1000FBC40);
  v22[7] = v27;
  sub_10001D7AC();
  sub_10002B3CC();
  v28 = sub_10002B470();
  if (sub_10002B5FC(v28))
  {
    v29 = (uint8_t *)sub_10001D8D4(12);
    v30 = sub_10001D8D4(32);
    a11 = v30;
    *(_DWORD *)v29 = 136315138;
    sub_10001E194();
    v31 = sub_10009FEF4();
    v33 = v32;
    sub_10001D9C0();
    sub_1000102C0(v31, v33, &a11);
    v22[4] = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v22 + 4, v22 + 5, v29 + 4);
    swift_bridgeObjectRelease(v33);
    sub_10002B154();
    sub_10001E18C((void *)&_mh_execute_header, v27, v23, "Session %s is foreground and been previously pre-warmed, pre-warming assets", v29);
    sub_10001DBB8(v30);
    sub_10001D790(v30);
    sub_10001D790((uint64_t)v29);
  }
  else
  {
    sub_10002B154();
  }

  v35 = (_QWORD *)swift_task_alloc(dword_1000FBCDC);
  v22[8] = v35;
  *v35 = v22;
  v35[1] = sub_100025DDC;
  sub_10001E2B4();
  sub_10002BC1C();
  return sub_10002957C(v36);
}

uint64_t sub_100025DDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  sub_10001E0D8();
  sub_10001EA4C(v3);
  *(_QWORD *)(v0 + 72) = v1;
  swift_task_dealloc(v4);
  if (v1)
    return sub_10001D6DC();
  else
    return sub_100006A5C(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_100025E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20,uint64_t a21,uint64_t a22)
{
  _QWORD *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  os_log_type_t v28;
  _DWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  sub_10001DFE8();
  a21 = v24;
  a22 = v25;
  a20 = v22;
  v26 = v22[9];
  sub_10001D7EC();
  sub_10002B5D4();
  sub_10001D7EC();
  v27 = sub_10002B5D4();
  Logger.logObject.getter(v27);
  v28 = sub_10002BE0C();
  if (sub_10002B5FC(v28))
  {
    v29 = (_DWORD *)sub_10001D8D4(22);
    v30 = (_QWORD *)sub_10001D8D4(8);
    a10 = sub_10001D8D4(32);
    a11 = a10;
    *v29 = 136315394;
    sub_10001E194();
    sub_10009FEF4();
    v31 = sub_10001D9C0();
    sub_10002B530(v31, v32, &a11);
    v22[2] = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v22 + 2, v22 + 3, v29 + 1);
    sub_10001E8A8();
    sub_10002B154();
    sub_10001E244();
    v34 = sub_10002B8B4();
    v22[3] = v34;
    sub_10002B3F0((uint64_t)(v22 + 3), (uint64_t)(v22 + 4));
    *v30 = v34;
    sub_10001DB48();
    sub_10001DB48();
    sub_10002B3C0((void *)&_mh_execute_header, v26, v23, "Failed to pre-warm assets for newly-foregrounded session %s: %@");
    sub_100002F78(&qword_1000FB8E0);
    sub_10001DBB8((uint64_t)v30);
    sub_10001D790((uint64_t)v30);
    sub_10001DBB8(a10);
    sub_10001D790(a10);
    sub_10001D790((uint64_t)v29);

    sub_10001DB48();
  }
  else
  {
    v35 = v22[5];
    sub_10001EBB8();
    sub_10001EBB0(v35);
    sub_10001EBB8();
    sub_10001EBB8();

  }
  sub_10002BC1C();
  return v36(v36, v37, v38, v39, v40, v41, v42, v43, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_100025FC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[3];
  _BYTE v22[24];

  swift_beginAccess(v1 + 112, v22, 0, 0);
  v4 = *(_QWORD *)(v1 + 112);
  v21[2] = a1;
  swift_bridgeObjectRetain(v4);
  sub_100008088(sub_10002B13C, (uint64_t)v21, v4);
  v6 = v5;
  sub_10001E4C0();
  if (v6)
  {
    sub_10001E900();
    sub_10009BD7C();
    swift_release(v6);
    if (v2)
      swift_release(v6);
  }
  else
  {
    v6 = sub_10002B8A0();
    sub_10002B5DC((unint64_t *)&qword_1000FB600, v7, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    swift_allocError(v6, v8, 0, 0);
    v10 = v9;
    v11 = sub_100002F78(&qword_1000FB2D8);
    UUIDIdentifier.uuid.getter(v11);
    v12 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v10, enum case for ModelManagerError.sessionNotFound(_:), v6);
    swift_willThrow(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  return v6;
}

uint64_t sub_100026100(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_id;
  v4 = type metadata accessor for Session(0);
  return static UUIDIdentifier.== infix(_:_:)(v3, a2, v4) & 1;
}

uint64_t sub_100026164(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t *v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  os_log_type_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  os_log_type_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE v70[32];
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t *v78;
  uint64_t v79;

  v9 = type metadata accessor for ModelCatalogAsset(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = &v70[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  v77 = &v70[-v14];
  v15 = sub_10009BFF0();
  v17 = v4;
  if (!v4)
  {
    v18 = v16;
    v19 = v15 == a2 && v16 == a3;
    if (v19)
    {
      swift_bridgeObjectRelease(a3);
    }
    else
    {
      v5 = _stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, v15, v16, 0);
      swift_bridgeObjectRelease(v18);
      if ((v5 & 1) == 0)
      {
        v20 = sub_10002B8A0();
        sub_10002B5DC((unint64_t *)&qword_1000FB600, v21, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
        sub_10002BA54(v22);
        v24 = v23;
        *v23 = a2;
        v23[1] = a3;
        v25 = (unsigned int *)&enum case for ModelManagerError.invalidRequestModelBundleID(_:);
LABEL_46:
        (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v24, *v25, v20);
        v56 = sub_10001E4D4();
        swift_willThrow(v56, v57, v58, v59, v60, v61, v62, v63);
        return v5;
      }
    }
    v5 = sub_10009BBD8();
    v75 = v13;
    v76 = v10;
    if (!a4)
    {
      if (qword_1000FB0D8 != -1)
        goto LABEL_57;
      goto LABEL_29;
    }
    swift_bridgeObjectRetain_n(a4, 2);
    sub_10002672C(v5, a4);
    swift_bridgeObjectRelease(v5);
    sub_10000B724();
    v5 = v26;
    if (*(_QWORD *)(v26 + 16) != *(_QWORD *)(a4 + 16))
    {
      swift_bridgeObjectRelease(v26);
      v20 = sub_10002B8A0();
      sub_10002B5DC((unint64_t *)&qword_1000FB600, v53, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
      sub_10002BA54(v54);
      v24 = v55;
      *v55 = a2;
      v55[1] = a3;
      v55[2] = a4;
      v25 = (unsigned int *)&enum case for ModelManagerError.invalidRequestRequiredAssetIDs(_:);
      goto LABEL_46;
    }
    swift_bridgeObjectRelease(a4);
    if (qword_1000FB0D8 != -1)
      swift_once(&qword_1000FB0D8, sub_10001FAFC);
    v27 = type metadata accessor for Logger(0);
    sub_100002FF8(v27, (uint64_t)qword_1000FBC40);
    v28 = sub_10002BCAC();
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.default.getter();
    if (!sub_10002BD38(v30))
      goto LABEL_44;
    v72 = 0;
    v31 = (uint8_t *)sub_10001D8D4(12);
    v71 = sub_10001D8D4(32);
    v79 = v71;
    *(_DWORD *)v31 = 136315138;
    v32 = _swiftEmptyArrayStorage;
    if (*(_QWORD *)(v5 + 16))
    {
      sub_10002B784();
      sub_10001C854(v5);
      sub_10002BF8C();
      v73 = v33;
      v17 = v5;
      while ((a4 & 0x8000000000000000) == 0)
      {
        sub_10002BFA0();
        if (v34 == v35)
          break;
        if (((*(_QWORD *)(v73 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) == 0)
          goto LABEL_55;
        if (*(_DWORD *)(v5 + 36) != (_DWORD)v31)
          goto LABEL_56;
        v36 = sub_10002BBF8();
        sub_10002AC98(v36, v37, type metadata accessor for ModelCatalogAsset);
        sub_10002BC74();
        v38 = v32[1];
        v74 = *v32;
        sub_10001D964();
        sub_10002ACC4((uint64_t)v32, type metadata accessor for ModelCatalogAsset);
        if ((sub_10002BF18() & 1) == 0)
        {
          sub_10002B960();
          v32 = v78;
        }
        v40 = v32[2];
        v39 = v32[3];
        if (v40 >= v39 >> 1)
        {
          sub_10002B9A8(v39);
          v32 = v78;
        }
        v32[2] = v40 + 1;
        v41 = &v32[2 * v40];
        v41[4] = v74;
        v41[5] = v38;
        v5 = v17;
        sub_10001C6FC(a4, v31, v29 & 1, v17);
        sub_10002BCDC();
        if (v19)
        {
          sub_10002BDA0();
          goto LABEL_49;
        }
      }
      while (1)
      {
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        swift_once(&qword_1000FB0D8, sub_10001FAFC);
LABEL_29:
        v42 = type metadata accessor for Logger(0);
        sub_100002FF8(v42, (uint64_t)qword_1000FBC40);
        v43 = sub_10002BCAC();
        v29 = Logger.logObject.getter(v43);
        v44 = static os_log_type_t.default.getter();
        if (!sub_10002BD38(v44))
          break;
        v72 = v17;
        v31 = (uint8_t *)sub_10001D8D4(12);
        v71 = sub_10001D8D4(32);
        v79 = v71;
        *(_DWORD *)v31 = 136315138;
        v45 = _swiftEmptyArrayStorage;
        if (!*(_QWORD *)(v5 + 16))
        {
LABEL_48:
          Array.description.getter(v45, &type metadata for String);
          sub_10002BB90();
          sub_10002BC40();
          sub_10002B820(v65);
          sub_10002BA34();
          sub_10001E4C0();
          v66 = a4;
          v67 = "Request didn't specify required asset IDs, using full asset bundle: %s";
          goto LABEL_50;
        }
        sub_10002B784();
        sub_10001C854(v5);
        sub_10002BF8C();
        v73 = v5;
        v74 = v46;
        while ((a4 & 0x8000000000000000) == 0)
        {
          sub_10002BFA0();
          if (v34 == v35)
            break;
          if (((*(_QWORD *)(v74 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) == 0)
            goto LABEL_52;
          if (*(_DWORD *)(v5 + 36) != (_DWORD)v31)
            goto LABEL_53;
          v47 = sub_10002BBF8();
          sub_10002AC98(v47, v48, type metadata accessor for ModelCatalogAsset);
          sub_10002BC74();
          v50 = *v45;
          v49 = v45[1];
          sub_10001D964();
          sub_10002ACC4((uint64_t)v45, type metadata accessor for ModelCatalogAsset);
          if ((sub_10002BF18() & 1) == 0)
          {
            sub_10002B960();
            v45 = v78;
          }
          v17 = v45[2];
          v51 = v45[3];
          if (v17 >= v51 >> 1)
          {
            sub_10002B9A8(v51);
            v45 = v78;
          }
          v45[2] = v17 + 1;
          v52 = &v45[2 * v17];
          v52[4] = v50;
          v52[5] = v49;
          v5 = v73;
          sub_10001C6FC(a4, v31, v29 & 1, v73);
          sub_10002BCDC();
          if (v19)
          {
            sub_10002BDA0();
            goto LABEL_48;
          }
        }
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
      }
LABEL_44:

      sub_10002BA34();
      return v5;
    }
LABEL_49:
    Array.description.getter(v32, &type metadata for String);
    sub_10002BB90();
    sub_10002BC40();
    sub_10002B820(v68);
    sub_10002BA34();
    sub_10001E4C0();
    v66 = a4;
    v67 = "Request specified required asset IDs, using asset subset: %s";
LABEL_50:
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v29, v66, v67, v31, 0xCu);
    v69 = v71;
    swift_arrayDestroy(v71, 1);
    sub_10001D790(v69);
    sub_10001D790((uint64_t)v31);

  }
  return v5;
}

void sub_10002672C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t (*v20)(uint64_t);
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a2;
  v3 = sub_100002F78(&qword_1000FBED0);
  __chkstk_darwin(v3);
  v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for ModelCatalogAsset(0);
  v48 = *(_QWORD *)(v45 - 8);
  v6 = __chkstk_darwin(v45);
  v41 = (uint64_t)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v40 = (uint64_t)&v39 - v9;
  v10 = __chkstk_darwin(v8);
  v12 = (uint64_t *)((char *)&v39 - v11);
  __chkstk_darwin(v10);
  v14 = (char *)&v39 - v13;
  v15 = *(_QWORD *)(a1 + 56);
  v43 = a1 + 56;
  v16 = 1 << *(_BYTE *)(a1 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v15;
  v44 = (unint64_t)(v16 + 63) >> 6;
  v47 = a1;
  swift_bridgeObjectRetain(a1);
  v19 = 0;
  v42 = _swiftEmptyArrayStorage;
  v20 = type metadata accessor for ModelCatalogAsset;
  while (v18)
  {
    v21 = __clz(__rbit64(v18));
    v18 &= v18 - 1;
    v22 = v21 | (v19 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v48 + 72);
    sub_10002AC98(*(_QWORD *)(v47 + 48) + v26 * v22, (uint64_t)v14, v20);
    sub_10001CB5C((uint64_t)v14, (uint64_t)v12);
    v27 = *v12;
    v28 = v12[1];
    swift_bridgeObjectRetain(v28);
    sub_10002C3B4(v27, v28, v46);
    v29 = v20;
    v31 = v30;
    swift_bridgeObjectRelease(v28);
    if ((v31 & 1) != 0)
    {
      sub_10002AC98((uint64_t)v12, (uint64_t)v5, v29);
      v32 = 0;
    }
    else
    {
      v32 = 1;
    }
    v20 = v29;
    v33 = v45;
    sub_100005630((uint64_t)v5, v32, 1, v45);
    sub_10002ACC4((uint64_t)v12, v20);
    if (sub_100005700((uint64_t)v5, 1, v33) == 1)
    {
      sub_10002AD5C((uint64_t)v5, &qword_1000FBED0);
    }
    else
    {
      v34 = v20;
      v35 = v40;
      sub_10001CB5C((uint64_t)v5, v40);
      sub_10001CB5C(v35, v41);
      if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0)
        v42 = (_QWORD *)sub_1000BEACC();
      v36 = v42[2];
      if (v36 >= v42[3] >> 1)
        v42 = (_QWORD *)sub_1000BEACC();
      v37 = v41;
      v38 = v42;
      v42[2] = v36 + 1;
      sub_10001CB5C(v37, (uint64_t)v38+ ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))+ v36 * v26);
      v20 = v34;
    }
  }
  v23 = v19 + 1;
  if (__OFADD__(v19, 1))
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v23 >= v44)
    goto LABEL_32;
  v24 = *(_QWORD *)(v43 + 8 * v23);
  ++v19;
  if (v24)
    goto LABEL_21;
  v19 = v23 + 1;
  if (v23 + 1 >= v44)
    goto LABEL_32;
  v24 = *(_QWORD *)(v43 + 8 * v19);
  if (v24)
    goto LABEL_21;
  v19 = v23 + 2;
  if (v23 + 2 >= v44)
    goto LABEL_32;
  v24 = *(_QWORD *)(v43 + 8 * v19);
  if (v24)
    goto LABEL_21;
  v19 = v23 + 3;
  if (v23 + 3 >= v44)
    goto LABEL_32;
  v24 = *(_QWORD *)(v43 + 8 * v19);
  if (v24)
  {
LABEL_21:
    v18 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v19 << 6);
    goto LABEL_22;
  }
  v25 = v23 + 4;
  if (v25 >= v44)
  {
LABEL_32:
    swift_bridgeObjectRelease(v46);
    swift_release(v47);
    return;
  }
  v24 = *(_QWORD *)(v43 + 8 * v25);
  if (v24)
  {
    v19 = v25;
    goto LABEL_21;
  }
  while (1)
  {
    v19 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v19 >= v44)
      goto LABEL_32;
    v24 = *(_QWORD *)(v43 + 8 * v19);
    ++v25;
    if (v24)
      goto LABEL_21;
  }
LABEL_34:
  __break(1u);
}

uint64_t sub_100026B28(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, int a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)(v13 + 256) = a12;
  *(_QWORD *)(v13 + 264) = v12;
  *(_DWORD *)(v13 + 456) = a10;
  *(_BYTE *)(v13 + 461) = a9;
  *(_QWORD *)(v13 + 240) = a8;
  *(_QWORD *)(v13 + 248) = a11;
  *(_QWORD *)(v13 + 224) = a6;
  *(_QWORD *)(v13 + 232) = a7;
  *(_QWORD *)(v13 + 208) = a4;
  *(_QWORD *)(v13 + 216) = a5;
  *(_QWORD *)(v13 + 192) = a2;
  *(_QWORD *)(v13 + 200) = a3;
  *(_BYTE *)(v13 + 460) = a1;
  v14 = sub_10001DBC0();
  *(_QWORD *)(v13 + 272) = v14;
  v15 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v13 + 280) = v15;
  *(_QWORD *)(v13 + 288) = sub_10001D800(v15);
  v16 = sub_10002BCD4();
  *(_QWORD *)(v13 + 296) = v16;
  v17 = *(_QWORD *)(v16 - 8);
  *(_QWORD *)(v13 + 304) = v17;
  *(_QWORD *)(v13 + 312) = sub_10001D800(v17);
  v18 = type metadata accessor for ClientData(0);
  *(_QWORD *)(v13 + 320) = v18;
  v19 = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v13 + 328) = v19;
  *(_QWORD *)(v13 + 336) = sub_10001D800(v19);
  v20 = sub_100002F78(&qword_1000FB2D8);
  *(_QWORD *)(v13 + 344) = v20;
  v21 = *(_QWORD *)(v20 - 8);
  *(_QWORD *)(v13 + 352) = v21;
  *(_QWORD *)(v13 + 360) = sub_10001D800(v21);
  v22 = sub_100002F78(&qword_1000FB2A0);
  *(_QWORD *)(v13 + 368) = v22;
  v23 = *(_QWORD *)(v22 - 8);
  *(_QWORD *)(v13 + 376) = v23;
  *(_QWORD *)(v13 + 384) = sub_10002B1BC(v23);
  *(_QWORD *)(v13 + 392) = sub_10001E784();
  v24 = sub_10002BA0C();
  *(_QWORD *)(v13 + 400) = v24;
  v25 = *(_QWORD *)(v24 - 8);
  *(_QWORD *)(v13 + 408) = v25;
  *(_QWORD *)(v13 + 416) = sub_10002B1BC(v25);
  *(_QWORD *)(v13 + 424) = sub_10001E784();
  sub_10001D7B8();
  return sub_10002B6B0(v26, v27, v28);
}

uint64_t sub_100026C38()
{
  _QWORD *v0;
  _QWORD *v1;

  v0[54] = sub_100026164(v0[29], v0[25], v0[26], v0[27]);
  sub_10009BC28(v0[53]);
  v1 = (_QWORD *)swift_task_alloc(dword_1000FCE84);
  v0[55] = v1;
  *v1 = v0;
  v1[1] = sub_100026D38;
  return sub_10004711C((uint64_t)(v0 + 2), v0[53]);
}

uint64_t sub_100026D38()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 448) = v1;
  swift_task_dealloc(v3);
  if (v1)
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 432));
  return sub_10001D6DC();
}

uint64_t sub_100026D9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  unsigned int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  sub_10002AEB4(v0 + 16, v0 + 96, &qword_1000FBEB0);
  if (*(_QWORD *)(v0 + 120))
  {
    v1 = *(_QWORD *)(v0 + 448);
    sub_10000667C((__int128 *)(v0 + 96), v0 + 56);
    v2 = sub_10009BFF0();
    if (!v1)
    {
      v83 = *(_QWORD *)(v0 + 424);
      v85 = *(_QWORD *)(v0 + 416);
      v80 = *(_QWORD *)(v0 + 432);
      v81 = *(_QWORD *)(v0 + 408);
      v30 = *(_QWORD *)(v0 + 392);
      v82 = *(_QWORD *)(v0 + 400);
      v72 = v30;
      v31 = *(_QWORD *)(v0 + 376);
      v86 = *(_QWORD *)(v0 + 384);
      v32 = *(_QWORD *)(v0 + 360);
      v58 = *(_QWORD **)(v0 + 368);
      v59 = *(_QWORD *)(v0 + 352);
      v33 = *(_QWORD *)(v0 + 336);
      v71 = v32;
      v34 = *(_QWORD *)(v0 + 312);
      v65 = *(_QWORD *)(v0 + 328);
      v67 = *(_QWORD *)(v0 + 320);
      v60 = *(_QWORD *)(v0 + 344);
      v61 = *(_QWORD *)(v0 + 304);
      v62 = *(_QWORD *)(v0 + 296);
      v64 = *(_QWORD *)(v0 + 280);
      v69 = *(_QWORD *)(v0 + 288);
      v70 = *(_QWORD **)(v0 + 272);
      v73 = *(_QWORD *)(v0 + 256);
      v79 = *(_DWORD *)(v0 + 456);
      v77 = *(_BYTE *)(v0 + 461);
      v76 = *(_QWORD *)(v0 + 248);
      v35 = *(_QWORD **)(v0 + 232);
      v63 = *(_QWORD *)(v0 + 240);
      v36 = *(_QWORD *)(v0 + 224);
      v37 = *(_QWORD *)(v0 + 192);
      v78 = *(unsigned __int8 *)(v0 + 460);
      v74 = v3;
      v75 = v2;
      sub_10002B50C();
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(v31 + 16))(v30, v36, v58);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 16))(v32, (uint64_t)v35 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_id, v60);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16))(v33, v37, v67);
      v66 = v35[6];
      v68 = v35[5];
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16))(v34, (uint64_t)v35 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_auditToken, v62);
      sub_100006694(v0 + 56, v0 + 136);
      v39 = v35[3];
      v38 = v35[4];
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(v64 + 16))(v69, v63, v70);
      v41 = *(_QWORD *)((char *)v35 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_loggingIdentifier);
      v40 = *(_QWORD *)((char *)v35 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_loggingIdentifier + 8);
      swift_bridgeObjectRetain(v38);
      sub_10001D964();
      v42 = swift_bridgeObjectRetain(v73);
      LOBYTE(v56) = v77;
      LODWORD(v55) = v79;
      sub_1000C4E98(v72, v71, v78, v33, v80, v68, v66, v34, v55, v0 + 136, v39, v38, v75, v74, v56, v69, v41, v40, v76,
        v42,
        v57,
        v58,
        v59,
        v60,
        v61,
        v62,
        v63,
        v64,
        v66,
        v68,
        v69,
        v70);
      v44 = v43;
      sub_10000650C((_QWORD *)(v0 + 56));
      sub_10002AD5C(v0 + 16, &qword_1000FBEB0);
      (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v83, v82);
      sub_10001E490();
      swift_task_dealloc(v85);
      sub_10002BDF0();
      swift_task_dealloc(v86);
      sub_10002B70C();
      sub_10002B504();
      sub_10002B4C4();
      sub_10001D938();
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v44);
    }
    v4 = *(_QWORD *)(v0 + 408);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 432));
    sub_10000650C((_QWORD *)(v0 + 56));
    sub_10002AD5C(v0 + 16, &qword_1000FBEB0);
    sub_10002B260(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 432));
    sub_10002AD5C(v0 + 96, &qword_1000FBEB0);
    if (qword_1000FB0D8 != -1)
      swift_once(&qword_1000FB0D8, sub_10001FAFC);
    v5 = *(_QWORD *)(v0 + 416);
    v6 = *(_QWORD *)(v0 + 424);
    v7 = *(NSObject **)(v0 + 400);
    v8 = *(_QWORD *)(v0 + 408);
    v9 = sub_10001DD64();
    sub_100002FF8(v9, (uint64_t)qword_1000FBC40);
    v10 = sub_10002BBC0();
    v11(v10);
    (*(void (**)(uint64_t, uint64_t, NSObject *))(v8 + 16))(v5, v6, v7);
    sub_10002BEA0();
    v12 = sub_10002BBE8();
    v13 = sub_10002BBB8(v7);
    v14 = *(_QWORD *)(v0 + 408);
    v15 = *(_QWORD *)(v0 + 376);
    if (v13)
    {
      v84 = *(_QWORD *)(v0 + 408);
      v16 = sub_10001D8D4(22);
      v87 = sub_10001D8D4(64);
      *(_DWORD *)v16 = 136315394;
      sub_100006744((unint64_t *)&qword_1000FBEA0, &qword_1000FB2A0);
      v18 = sub_10001EC14(v17);
      sub_10002BDC4(v18, v19);
      *(_QWORD *)(v0 + 176) = v20;
      sub_10002B800(v0 + 176, v0 + 184);
      sub_10002B684();
      sub_10002B554(*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8));
      *(_WORD *)(v16 + 12) = 2080;
      sub_10002B5DC(&qword_1000FBEB8, v21, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
      v23 = sub_10002BD8C(v22, v22);
      sub_10002BDC4(v23, v24);
      v26 = sub_10002BE68(v25);
      sub_10002B800(v26, v27);
      sub_10001E034();
      v28 = *(void (**)(uint64_t))(v84 + 8);
      v29 = sub_10002BBC0();
      v28(v29);
      sub_10002B4A0((void *)&_mh_execute_header, v7, v12, "request %s made with unrecognized InferenceProvider %s", (uint8_t *)v16);
      sub_10002BA20(v87);
      sub_10001D790(v87);
      sub_10001D790(v16);
    }
    else
    {
      sub_10002B554(*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8));
      v28 = *(void (**)(uint64_t))(v14 + 8);
      v46 = sub_10002B9E4();
      v28(v46);
    }

    v47 = *(_QWORD *)(v0 + 424);
    v48 = *(_QWORD *)(v0 + 400);
    v49 = sub_10002B8A0();
    sub_10002B5DC((unint64_t *)&qword_1000FB600, v50, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_10002B560(v49, v51);
    v53 = v52;
    *v52 = InferenceProviderDescriptor.description.getter();
    v53[1] = v54;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v49 - 8) + 104))(v53, enum case for ModelManagerError.unrecognizedInferenceProvider(_:), v49);
    sub_10002BECC();
    sub_10002AD5C(v0 + 16, &qword_1000FBEB0);
    ((void (*)(uint64_t, uint64_t))v28)(v47, v48);
  }
  sub_10002B808(*(_QWORD *)(v0 + 424));
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B528();
  sub_10002B4C4();
  sub_10002B70C();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002737C()
{
  uint64_t v0;

  sub_10001DB68();
  sub_10002BC38(*(_QWORD *)(v0 + 408));
  sub_10002B808(*(_QWORD *)(v0 + 424));
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  sub_10002B70C();
  return sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000273EC(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v12 + 88) = a11;
  *(_QWORD *)(v12 + 96) = v11;
  *(_DWORD *)(v12 + 136) = a9;
  *(_QWORD *)(v12 + 72) = a8;
  *(_QWORD *)(v12 + 80) = a10;
  *(_QWORD *)(v12 + 56) = a6;
  *(_QWORD *)(v12 + 64) = a7;
  *(_QWORD *)(v12 + 40) = a4;
  *(_QWORD *)(v12 + 48) = a5;
  *(_QWORD *)(v12 + 24) = a2;
  *(_QWORD *)(v12 + 32) = a3;
  *(_BYTE *)(v12 + 140) = a1;
  sub_10001D7B8();
  return sub_10002B6B0(v13, v14, v15);
}

void sub_100027428()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  int64_t v8;
  char v9;
  char v10;
  char v11;
  _QWORD *v12;
  int v13;

  if (qword_1000FB0D8 != -1)
    swift_once(&qword_1000FB0D8, sub_10001FAFC);
  v1 = sub_10001DD64();
  sub_100002FF8(v1, (uint64_t)qword_1000FBC40);
  sub_10001E194();
  v2 = sub_10002B3CC();
  v3 = static os_log_type_t.default.getter();
  v4 = sub_10002BBB8(v2);
  v5 = v0[8];
  if (v4)
  {
    v6 = (uint8_t *)sub_10001D8D4(12);
    *(_DWORD *)v6 = 134217984;
    v0[2] = *(_QWORD *)(v5 + 40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v6 + 4);
    sub_10001D9C8();
    sub_10001E18C((void *)&_mh_execute_header, v2, v3, "Forming DaemonRequest for session with obop %ld", v6);
    sub_10001D790((uint64_t)v6);
  }
  else
  {
    sub_10001D9C8();
  }

  v7 = v0[8];
  sub_10001C830((_QWORD *)(v0[12] + 128), *(_QWORD *)(v0[12] + 152));
  v8 = *(_QWORD *)(v7 + 40);
  v0[13] = v8;
  if (v8 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else
  {
    sub_10002BB74();
    if (v10 ^ v11 | v9)
    {
      v12 = (_QWORD *)swift_task_alloc(dword_1000FDF9C);
      v0[14] = v12;
      v13 = sub_10002B408(v12, (uint64_t)sub_100027588);
      sub_10002BB6C(v13);
      return;
    }
  }
  __break(1u);
}

uint64_t sub_100027588(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_BYTE *)(*(_QWORD *)v1 + 141) = a1;
  sub_10002BD30(v2);
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_1000275D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, int a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  if (*(_BYTE *)(v12 + 141) == 3 || *(_QWORD *)(v12 + 104) == 0)
  {
    v15 = sub_10002B8A0();
    sub_10002B5DC((unint64_t *)&qword_1000FB600, v16, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_10002B560(v15, v17);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v18, enum case for ModelManagerError.onBehalfOfProcessNotRunning(_:), v15);
    sub_10002BBB0();
    sub_10002BB00();
    sub_10002B5AC(v13 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_id, OBJC_IVAR____TtC13modelmanagerd13DaemonSession_auditToken);
    sub_10002BBB0();
    return (*(uint64_t (**)(void))(v12 + 8))();
  }
  else
  {
    v19 = (_QWORD *)swift_task_alloc(dword_1000FBCB4);
    *(_QWORD *)(v12 + 120) = v19;
    *v19 = v12;
    v19[1] = sub_10002771C;
    return sub_100026B28(*(_BYTE *)(v12 + 140), *(_QWORD *)(v12 + 24), *(_QWORD *)(v12 + 32), *(_QWORD *)(v12 + 40), *(_QWORD *)(v12 + 48), *(_QWORD *)(v12 + 56), *(_QWORD *)(v12 + 64), *(_QWORD *)(v12 + 72), a9, a10, a11, a12);
  }
}

uint64_t sub_10002771C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;

  sub_10002B940();
  sub_10001EA4C(v5);
  *(_QWORD *)(v2 + 128) = v1;
  swift_task_dealloc(v6);
  if (v1)
    return sub_10002B3A8((uint64_t)sub_100027788, *(_QWORD *)(v2 + 96), 0);
  else
    return (*(uint64_t (**)(uint64_t))(v3 + 8))(a1);
}

uint64_t sub_100027788()
{
  uint64_t v0;
  uint64_t v1;

  sub_10002BB00();
  sub_10002B5AC(v1 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_id, OBJC_IVAR____TtC13modelmanagerd13DaemonSession_auditToken);
  sub_10002BBB0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000277F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  *(_QWORD *)(v9 + 120) = v16;
  *(_QWORD *)(v9 + 128) = v8;
  *(_QWORD *)(v9 + 104) = a6;
  *(_QWORD *)(v9 + 112) = a8;
  *(_BYTE *)(v9 + 256) = a7;
  *(_QWORD *)(v9 + 88) = a4;
  *(_QWORD *)(v9 + 96) = a5;
  *(_QWORD *)(v9 + 72) = a2;
  *(_QWORD *)(v9 + 80) = a3;
  *(_QWORD *)(v9 + 64) = a1;
  v10 = sub_10002BA0C();
  *(_QWORD *)(v9 + 136) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v9 + 144) = v11;
  *(_QWORD *)(v9 + 152) = sub_10002B1BC(v11);
  *(_QWORD *)(v9 + 160) = sub_10001E784();
  sub_10001D7B8();
  return swift_task_switch(v12, v13, v14);
}

uint64_t sub_100027868()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0[8];
  v2 = OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_inferenceProviderConnection;
  v0[21] = OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_inferenceProviderConnection;
  v3 = *(_QWORD *)(v1 + v2 + 24);
  v4 = *(_QWORD *)(v1 + v2 + 32);
  sub_10001C830((_QWORD *)(v1 + v2), v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  v5 = (_QWORD *)swift_task_alloc(dword_1000FD42C);
  v0[22] = v5;
  *v5 = v0;
  v5[1] = sub_10002791C;
  v6 = sub_10001E2B4();
  return sub_100058ECC(v6, v7);
}

uint64_t sub_10002791C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_10002B940();
  v2 = v1[22];
  v1[23] = v3;
  v1[24] = v0;
  sub_10002BD30(v2);
  v4 = v1[20];
  v5 = v1[17];
  v6 = *(void (**)(uint64_t, uint64_t))(v1[18] + 8);
  if (!v0)
    v1[25] = v6;
  v6(v4, v5);
  sub_10001E10C();
  return sub_10002B3A8(v7, v8, v9);
}

uint64_t sub_100027994()
{
  uint64_t v0;
  os_log_type_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t);
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 184));
    if (qword_1000FB0D8 != -1)
      swift_once(&qword_1000FB0D8, sub_10001FAFC);
    v2 = sub_10001DD64();
    sub_100002FF8(v2, (uint64_t)qword_1000FBC40);
    sub_10001D7AC();
    v3 = sub_10002B3CC();
    v4 = static os_log_type_t.info.getter();
    v5 = sub_10002B5FC(v4);
    v6 = *(_QWORD *)(v0 + 64);
    if (v5)
    {
      v7 = (uint8_t *)sub_10001D8D4(12);
      v64 = sub_10001D8D4(32);
      *(_DWORD *)v7 = 136315138;
      sub_100002F78(&qword_1000FB2A0);
      sub_100006744((unint64_t *)&qword_1000FBEA0, &qword_1000FB2A0);
      v9 = sub_10002BE00(v8);
      sub_10002BDC4(v9, v10);
      *(_QWORD *)(v0 + 56) = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v7 + 4);
      sub_10001E034();
      sub_10001EBB0(v6);
      sub_10001E18C((void *)&_mh_execute_header, v3, v1, "Task for request %s cancelled, cancelling request before execution", v7);
      sub_10001DBB8(v64);
      sub_10001D790(v64);
      sub_10001D790((uint64_t)v7);
    }
    else
    {
      sub_10001EBB0(*(_QWORD *)(v0 + 64));
    }

    v13 = sub_10002B8A0();
    sub_10002B5DC((unint64_t *)&qword_1000FB600, v14, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_10002B560(v13, v15);
    v17 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v16, enum case for ModelManagerError.operationCancelled(_:), v13);
    swift_willThrow(v17, v18, v19, v20, v21, v22, v23, v24);
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v0 + 192);
  sub_10009BD7C();
  if (v12)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 184));
LABEL_10:
    sub_10002BDF8();
    sub_10001D938();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v55 = *(void (**)(uint64_t, uint64_t))(v0 + 200);
  v61 = *(_QWORD *)(v0 + 184);
  v26 = *(_QWORD *)(v0 + 152);
  v27 = *(_QWORD *)(v0 + 128);
  v54 = *(_QWORD *)(v0 + 136);
  v63 = *(_QWORD *)(v0 + 120);
  v62 = *(_QWORD *)(v0 + 112);
  v56 = *(_BYTE *)(v0 + 256);
  v59 = *(_QWORD *)(v0 + 96);
  v60 = *(_QWORD *)(v0 + 104);
  v29 = *(_QWORD *)(v0 + 64);
  v28 = *(char **)(v0 + 72);
  v30 = (_QWORD *)(v29 + *(_QWORD *)(v0 + 168));
  v57 = *(_QWORD *)(v0 + 80);
  v58 = *(_QWORD *)(v0 + 88);
  sub_10009C044();
  sub_100006694(v27 + 224, v0 + 16);
  v31 = *(_QWORD *)(v0 + 40);
  v32 = *(_QWORD *)(v0 + 48);
  sub_10002BD68((_QWORD *)(v0 + 16));
  v33 = OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_id;
  *(_QWORD *)(v0 + 208) = OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_id;
  v53 = v29 + v33;
  v50 = &v28[OBJC_IVAR____TtC13modelmanagerd13DaemonSession_id];
  v51 = *((_QWORD *)v28 + 4);
  v52 = *((_QWORD *)v28 + 3);
  v35 = v30[3];
  v34 = v30[4];
  sub_10002BE98(v30);
  v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v35, v34);
  v37 = InferenceProviderDescriptor.id.getter(v36);
  v39 = v38;
  v55(v26, v54);
  v40 = *(_QWORD *)&v28[OBJC_IVAR____TtC13modelmanagerd13DaemonSession_createdByPID];
  v41 = *((_QWORD *)v28 + 5);
  v42 = *(_BYTE *)(v29 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_isStream);
  v43 = OBJC_IVAR____TtC13modelmanagerd13DaemonSession_auditToken;
  *(_QWORD *)(v0 + 216) = OBJC_IVAR____TtC13modelmanagerd13DaemonSession_auditToken;
  HIBYTE(v49) = v56;
  LOBYTE(v49) = (v42 & 1) == 0;
  *(_QWORD *)(v0 + 224) = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16, char *, uint64_t, uint64_t))(v32 + 8))(v53, v50, v59, v60, v52, v51, v57, v58, v61, v37, v39, v40, v41, v49, &v28[v43], v31, v32);
  sub_10001D8B4();
  sub_100006C48();
  v44 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F2E18, 48);
  *(_QWORD *)(v0 + 232) = v44;
  v44[2] = v28;
  v44[3] = v29;
  v44[4] = v62;
  v44[5] = v63;
  v45 = dword_1000FF38C;
  sub_10001E900();
  sub_10001D7EC();
  swift_retain();
  v46 = (_QWORD *)swift_task_alloc(v45);
  *(_QWORD *)(v0 + 240) = v46;
  *v46 = v0;
  v46[1] = sub_100027DF4;
  v47 = sub_10002BD0C(*(_QWORD *)(v0 + 64));
  return sub_1000BC430(v47, v48, (uint64_t)v44);
}

uint64_t sub_100027DF4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 248) = v1;
  swift_task_dealloc(v3);
  swift_release(*(_QWORD *)(v0 + 232));
  sub_10001E10C();
  return sub_10001D6DC();
}

uint64_t sub_100027E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(void);
  uint64_t v24;
  uint64_t (*v25)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void (*)(uint64_t, uint64_t), uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;

  sub_10002B628();
  v35 = (void (*)(uint64_t, uint64_t))v16[25];
  v17 = v16[19];
  v18 = v16[8];
  v33 = v16[17];
  v34 = v18 + v16[26];
  v36 = v16[9] + v16[27];
  v19 = (_QWORD *)(v18 + v16[21]);
  sub_10009DB54();
  sub_10001C830(v16 + 2, v16[5]);
  v20 = v19[3];
  v21 = v19[4];
  sub_10002BD68(v19);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v20, v21);
  InferenceProviderDescriptor.id.getter(v22);
  v35(v17, v33);
  sub_10002BBCC();
  v23();
  sub_10001D8B4();
  sub_10001D9C8();
  sub_10000650C(v16 + 2);
  sub_10001E330();
  sub_10001D938();
  sub_10002B864();
  return v25(v24, v25, v26, v27, v28, v29, v30, v31, v33, v34, v35, v36, v16 + 2, a14, a15, a16);
}

uint64_t sub_100027F5C()
{
  uint64_t v0;

  sub_10002BDF8();
  sub_10001D938();
  return sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
}

void sub_100027F8C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(_BYTE *)(v0 + 256);
  sub_10002B5D4();
  v44 = v1;
  if ((v2 & 1) == 0)
  {
    swift_errorRetain(*(_QWORD *)(v0 + 248));
    v3 = sub_100029230(v1);
    sub_10001EBB8();
    if ((v3 & 1) != 0)
    {
      v33 = *(_QWORD *)(v0 + 248);
      v39 = *(void (**)(uint64_t, uint64_t))(v0 + 200);
      v4 = *(_QWORD *)(v0 + 152);
      v5 = *(_QWORD *)(v0 + 64);
      v41 = *(_QWORD *)(v0 + 72) + *(_QWORD *)(v0 + 216);
      v42 = *(_QWORD *)(v0 + 224);
      v6 = (_QWORD *)(v5 + *(_QWORD *)(v0 + 168));
      v35 = *(_QWORD *)(v0 + 136);
      v37 = v5 + *(_QWORD *)(v0 + 208);
      sub_10009DB54();
      v8 = *(_QWORD *)(v0 + 40);
      v7 = *(_QWORD *)(v0 + 48);
      sub_10002BE7C((_QWORD *)(v0 + 16));
      v10 = v6[3];
      v9 = v6[4];
      sub_10002BE98(v6);
      v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
      swift_errorRetain(v33);
      v12 = v11(v10, v9);
      v13 = InferenceProviderDescriptor.id.getter(v12);
      v15 = v14;
      v39(v4, v35);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 16))(v37, v42, v1, v13, v15, v41, v8, v7);
      swift_errorRelease(v33);
      sub_10001EADC();
      sub_10001DBEC();
      swift_errorRelease(v33);
      sub_10002BF38();
      sub_10001E330();
      sub_10001EAC8();
      sub_10002B848();
      __asm { BR              X1 }
    }
  }
  v17 = *(_QWORD *)(v0 + 248);
  v43 = *(_QWORD *)(v0 + 224);
  v18 = *(_QWORD *)(v0 + 152);
  v19 = *(_QWORD *)(v0 + 64);
  v36 = v19 + *(_QWORD *)(v0 + 208);
  v38 = *(void (**)(uint64_t, uint64_t))(v0 + 200);
  v40 = *(_QWORD *)(v0 + 72) + *(_QWORD *)(v0 + 216);
  v20 = v19 + *(_QWORD *)(v0 + 168);
  v34 = *(_QWORD *)(v0 + 136);
  sub_10002BECC();
  sub_10009DB54();
  v21 = *(_QWORD *)(v0 + 40);
  v22 = *(_QWORD *)(v0 + 48);
  sub_10002BD68((_QWORD *)(v0 + 16));
  v23 = *(_QWORD *)(v20 + 24);
  v24 = *(_QWORD *)(v20 + 32);
  v25 = (_QWORD *)sub_10002BBC0();
  sub_10001C830(v25, v26);
  v27 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 8);
  swift_errorRetain(v17);
  v28 = v27(v23, v24);
  v29 = InferenceProviderDescriptor.id.getter(v28);
  v31 = v30;
  v38(v18, v34);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 16))(v36, v43, v44, v29, v31, v40, v21, v22);
  swift_errorRelease(v17);
  sub_10001DA38();
  sub_10001DBEC();
  swift_errorRelease(v17);
  sub_10000650C((_QWORD *)(v0 + 16));
  sub_10002BDF8();
  sub_10001D938();
  sub_10002B848();
  __asm { BR              X0 }
}

uint64_t sub_100028220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = type metadata accessor for InferenceProviderDescriptor(0);
  v5[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[8] = v7;
  v5[9] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100028288, 0, 0);
}

uint64_t sub_100028288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v35;

  sub_10001E6F0();
  v14 = v12[8];
  v13 = v12[9];
  v15 = (int *)v12[5];
  v16 = (_QWORD *)(v12[4] + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_inferenceProviderConnection);
  v17 = v16[3];
  v18 = v16[4];
  v19 = (_QWORD *)sub_10002B9E4();
  sub_10001C830(v19, v20);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
  sub_10009B774(v13);
  v12[10] = *(_QWORD *)(v14 + 8);
  v21 = sub_10002BF40();
  v22(v21);
  v23 = v16[3];
  v24 = v16[4];
  sub_10001C830(v16, v23);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
  v35 = (char *)v15 + *v15;
  v25 = (uint64_t **)swift_task_alloc(v15[1]);
  v12[11] = (uint64_t)v25;
  *v25 = v12;
  v25[1] = (uint64_t *)sub_100028374;
  sub_10002BD0C(v12[2]);
  sub_10002B574();
  return v28(v26, v27, v28, v29, v30, v31, v32, v33, v35, a10, a11, a12);
}

uint64_t sub_100028374()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;

  sub_10001DB38();
  v2 = *(void (**)(uint64_t))(v1 + 80);
  sub_10001D680(*(_QWORD *)(v1 + 88));
  v3 = sub_10002BE5C();
  v2(v3);
  sub_10001E330();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000283C4(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v9 + 272) = v22;
  *(_QWORD *)(v9 + 280) = v8;
  *(_QWORD *)(v9 + 264) = v21;
  *(_OWORD *)(v9 + 248) = v20;
  *(_DWORD *)(v9 + 448) = v19;
  *(_QWORD *)(v9 + 232) = a7;
  *(_QWORD *)(v9 + 240) = a8;
  *(_QWORD *)(v9 + 216) = a5;
  *(_QWORD *)(v9 + 224) = a6;
  *(_QWORD *)(v9 + 200) = a3;
  *(_QWORD *)(v9 + 208) = a4;
  *(_QWORD *)(v9 + 192) = a2;
  *(_BYTE *)(v9 + 452) = a1;
  v10 = sub_100002F78(&qword_1000FB2A0);
  *(_QWORD *)(v9 + 288) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v9 + 296) = v11;
  *(_QWORD *)(v9 + 304) = sub_10001D800(v11);
  v12 = sub_100002F78(&qword_1000FBEA8);
  *(_QWORD *)(v9 + 312) = sub_10001D800(*(_QWORD *)(v12 - 8));
  v13 = sub_10002BA0C();
  *(_QWORD *)(v9 + 320) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v9 + 328) = v14;
  *(_QWORD *)(v9 + 336) = sub_10002B1BC(v14);
  *(_QWORD *)(v9 + 344) = sub_10001E784();
  sub_10001D7B8();
  return swift_task_switch(v15, v16, v17);
}

uint64_t sub_100028480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;
  _QWORD *v17;

  v13 = sub_10002BC5C(*(_QWORD *)(v12 + 232));
  *(_QWORD *)(v12 + 352) = v13;
  if (v11)
  {
    swift_task_dealloc(*(_QWORD *)(v12 + 344));
    sub_10001E330();
    sub_10001D938();
    sub_10001E490();
    v14 = (uint64_t (*)(void))sub_10002BC50();
    return sub_10002B3B4(v14);
  }
  else
  {
    v16 = v13;
    v17 = (_QWORD *)swift_task_alloc(dword_1000FBCBC);
    *(_QWORD *)(v12 + 360) = v17;
    *v17 = v12;
    v17[1] = sub_100028548;
    return sub_1000273EC(*(_BYTE *)(v12 + 452), *(_QWORD *)(v12 + 192), *(_QWORD *)(v12 + 200), *(_QWORD *)(v12 + 208), *(_QWORD *)(v12 + 216), *(_QWORD *)(v12 + 224), v16, *(_QWORD *)(v12 + 240), a9, a10, a11);
  }
}

uint64_t sub_100028548(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_10002B940();
  sub_10001EA4C(v5);
  v2[46] = a1;
  v2[47] = v1;
  swift_task_dealloc(v6);
  if (v1)
    return swift_task_switch(sub_100028C6C, v2[35], 0);
  v8 = (_QWORD *)swift_task_alloc(dword_1000FBCC4);
  v2[48] = v8;
  *v8 = v3;
  v8[1] = sub_1000285F0;
  v9 = sub_10001E2B4();
  return sub_1000277F8(v9, v10, v11, v12, v13, v14, 0, v15);
}

uint64_t sub_1000285F0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10001E0D8();
  v2 = v0[48];
  v0[49] = v3;
  v0[50] = v1;
  sub_10002BD30(v2);
  return sub_10001D6DC();
}

uint64_t sub_10002864C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  _QWORD *v7;

  if (!v0[49])
  {
    sub_10002BDE4();
    sub_10001D9C0();
    sub_10002BA7C();
    sub_10001E330();
    sub_10001D938();
    sub_10001EAC8();
    v5 = (uint64_t (*)(void))sub_10001E5D0();
    return v5();
  }
  v2 = v0[39];
  v1 = v0[40];
  v3 = sub_10002B5D4();
  sub_10009C12C(v3);
  if (sub_100005700(v2, 1, v1) == 1)
  {
    v4 = v0[44];
    sub_10002AD5C(v0[39], &qword_1000FBEA8);
    sub_10002BBB0();
    sub_10002B498();
    sub_10001D9C0();
    swift_release(v4);
    swift_task_dealloc(v0[43]);
    sub_10001E330();
    sub_10001EAC8();
    sub_10001E490();
    v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[41] + 32))(v0[43], v0[39], v0[40]);
  v7 = (_QWORD *)swift_task_alloc(dword_1000FCE84);
  v0[51] = v7;
  *v7 = v0;
  v7[1] = sub_100028784;
  return sub_10004711C((uint64_t)(v0 + 2), v0[43]);
}

uint64_t sub_100028784()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 416) = v1;
  swift_task_dealloc(v3);
  return sub_10001D6DC();
}

uint64_t sub_1000287D8()
{
  uint64_t v0;
  uint64_t v1;
  __int128 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56[14];

  sub_10002AEB4(v0 + 16, v0 + 96, &qword_1000FBEB0);
  if (*(_QWORD *)(v0 + 120))
  {
    v2 = (__int128 *)sub_10002BE5C();
    sub_10000667C(v2, v3);
    sub_10002B50C();
    v4 = sub_10002BF40();
    sub_100006694(v4, v5);
    sub_10001E900();
    sub_1000C5954();
    *(_QWORD *)(v0 + 424) = v6;
    v7 = (_QWORD *)swift_task_alloc(dword_1000FBCC4);
    *(_QWORD *)(v0 + 432) = v7;
    *v7 = v0;
    v7[1] = sub_100028B94;
    v56[12] = *(_QWORD *)(v0 + 272);
    sub_10001E2B4();
    sub_10001E3E8();
    return sub_1000277F8(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  else
  {
    sub_10002BBF0(v1, &qword_1000FBEB0);
    if (qword_1000FB0D8 != -1)
      swift_once(&qword_1000FB0D8, sub_10001FAFC);
    v18 = *(NSObject **)(v0 + 336);
    v17 = *(_QWORD *)(v0 + 344);
    v19 = *(_QWORD *)(v0 + 328);
    v21 = *(_QWORD *)(v0 + 296);
    v20 = *(_QWORD *)(v0 + 304);
    v22 = sub_10001DD64();
    sub_100002FF8(v22, (uint64_t)qword_1000FBC40);
    sub_10002BAC8(v20, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 16));
    v23 = sub_10001EA84((uint64_t)v18, v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 16));
    Logger.logObject.getter(v23);
    v24 = sub_10002BBE8();
    v25 = sub_10002B3F8(v18);
    v27 = *(_QWORD *)(v0 + 328);
    v26 = *(_QWORD *)(v0 + 336);
    v28 = *(_QWORD *)(v0 + 320);
    v29 = *(_QWORD *)(v0 + 296);
    if (v25)
    {
      v54 = *(_QWORD *)(v0 + 328);
      v30 = sub_10001D8D4(22);
      v55 = sub_10001D8D4(64);
      v56[0] = v55;
      *(_DWORD *)v30 = 136315394;
      sub_100006744((unint64_t *)&qword_1000FBEA0, &qword_1000FB2A0);
      v32 = sub_10001EC14(v31);
      sub_1000102C0(v32, v33, v56);
      *(_QWORD *)(v0 + 176) = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v30 + 4);
      sub_10001DA38();
      sub_10002B554(*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8));
      *(_WORD *)(v30 + 12) = 2080;
      sub_10002B5DC(&qword_1000FBEB8, v35, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
      v37 = sub_10002BD8C(v36, v36);
      sub_1000102C0(v37, v38, v56);
      v40 = sub_10002BE68(v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v40, v41, v30 + 14);
      sub_10001E034();
      v42 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
      v42(v26, v28);
      sub_10002B4A0((void *)&_mh_execute_header, v18, v24, "request %s made with unrecognized InferenceProvider %s", (uint8_t *)v30);
      sub_10002BA20(v55);
      sub_10001D790(v55);
      sub_10001D790(v30);
    }
    else
    {
      sub_10002B554(*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8));
      v42 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
      v43 = sub_10002B9E4();
      ((void (*)(uint64_t))v42)(v43);
    }

    v44 = *(_QWORD *)(v0 + 392);
    v45 = *(_QWORD *)(v0 + 368);
    v46 = *(_QWORD *)(v0 + 344);
    v47 = *(_QWORD *)(v0 + 320);
    v48 = sub_10002B8A0();
    sub_10002B5DC((unint64_t *)&qword_1000FB600, v49, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_10002B560(v48, v50);
    v52 = v51;
    *v51 = InferenceProviderDescriptor.description.getter();
    v52[1] = v53;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v48 - 8) + 104))(v52, enum case for ModelManagerError.unrecognizedInferenceProvider(_:), v48);
    sub_10002BECC();
    swift_errorRelease(v44);
    sub_10002BA40();
    swift_release(v45);
    swift_errorRelease(v44);
    sub_10002AD5C(v0 + 16, &qword_1000FBEB0);
    v42(v46, v47);
    sub_10002BA7C();
    sub_10001E330();
    sub_10001D938();
    sub_10001EAC8();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100028B94()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 440) = v1;
  swift_task_dealloc(v3);
  if (!v1)
    sub_10001DB48();
  sub_10001E10C();
  return sub_10002B3A8(v4, v5, v6);
}

uint64_t sub_100028BF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  sub_10001E6F0();
  sub_10002B660();
  sub_10001D9C8();
  sub_10001DBEC();
  sub_10002B88C();
  swift_errorRelease(v0);
  v3 = sub_10002BF38();
  sub_10002BBF0(v3, &qword_1000FBEB0);
  sub_10002B978(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_10002BA7C();
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  v4 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_10002B3B4(v4);
}

uint64_t sub_100028C6C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 352));
  sub_10002B8BC();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  return sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100028CB4()
{
  uint64_t v0;

  sub_10002BDE4();
  sub_10001D9C0();
  sub_10002B8BC();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  return sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100028CFC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 328);
  sub_10001EBB8();
  sub_10001D9C8();
  sub_10001D930();
  sub_10001EBB8();
  sub_10002B68C(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_10002B8BC();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  return sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100028D6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_10001E6F0();
  sub_10002B660();
  sub_10001D9C8();
  sub_10001DBEC();
  sub_10002B88C();
  swift_errorRelease(v1);
  v4 = sub_10002BF38();
  sub_10002BBF0(v4, &qword_1000FBEB0);
  sub_10002B978(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_10002B8BC();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  return sub_10002B3B4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100028DE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v4 = sub_10002BCCC();
  v3[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[8] = v5;
  v3[9] = sub_10001D800(v5);
  v6 = sub_100002F78(&qword_1000FB2D8);
  v3[10] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[11] = v7;
  v3[12] = sub_10001D800(v7);
  v8 = sub_100002F78(&qword_1000FB2A0);
  v3[13] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[14] = v9;
  v3[15] = sub_10001D800(v9);
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_100028E70()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35[2];

  if (qword_1000FB0D8 != -1)
    swift_once(&qword_1000FB0D8, sub_10001FAFC);
  v2 = v0 + 4;
  v1 = v0[4];
  v4 = v0[14];
  v3 = v0[15];
  v34 = v0;
  v5 = v0[12];
  v6 = v2[7];
  v7 = sub_10001DD64();
  sub_100002FF8(v7, (uint64_t)qword_1000FBC40);
  sub_10001EA84(v3, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
  v8 = sub_10002BAC8(v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16));
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.info.getter();
  v11 = sub_10002BBB8(v9);
  v13 = v2[10];
  v12 = v2[11];
  v14 = v2[8];
  v16 = v2[6];
  v15 = v2[7];
  if (v11)
  {
    v32 = v2[7];
    v17 = sub_10001D8D4(22);
    v33 = sub_10001D8D4(64);
    v35[0] = v33;
    *(_DWORD *)v17 = 136315394;
    sub_100006744((unint64_t *)&qword_1000FBEA0, &qword_1000FB2A0);
    v19 = sub_10002B548(v18);
    sub_1000102C0(v19, v20, v35);
    v34[2] = v21;
    sub_10002B800((uint64_t)(v34 + 2), (uint64_t)(v34 + 3));
    sub_10001E8A8();
    sub_10002B978(v12, *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
    *(_WORD *)(v17 + 12) = 2080;
    sub_100006744(&qword_1000FBE80, &qword_1000FB2D8);
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v16, v22);
    sub_1000102C0(v23, v24, v35);
    v34[3] = v25;
    sub_10002B800((uint64_t)(v34 + 3), (uint64_t)v2);
    sub_10001E034();
    sub_10002B818(v14, *(uint64_t (**)(uint64_t, uint64_t))(v32 + 8));
    sub_10002B4A0((void *)&_mh_execute_header, v9, v10, "Cancelling request %s for session %s", (uint8_t *)v17);
    sub_10002BA20(v33);
    sub_10001D790(v33);
    sub_10001D790(v17);

  }
  else
  {
    sub_10002B978(v2[11], *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
    sub_10002B818(v14, *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8));

  }
  v34[16] = sub_10002BC5C(v34[5]);
  if (v2)
  {
    swift_task_dealloc(v34[15]);
    sub_10001E330();
    sub_10001D938();
    sub_10002BC50();
    sub_10002B848();
    __asm { BR              X0 }
  }
  sub_10002BAF8(v34[8]);
  v27 = (_QWORD *)swift_task_alloc(dword_1000FE744);
  v34[17] = v27;
  *v27 = v34;
  v27[1] = sub_10002914C;
  sub_10002BD0C(v34[4]);
  sub_10002B848();
  return sub_10009C228(v28, v29, v30);
}

uint64_t sub_10002914C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 144) = v1;
  swift_task_dealloc(v3);
  sub_10002BC38(*(_QWORD *)(v0 + 64));
  sub_10001E10C();
  return sub_10001D6DC();
}

uint64_t sub_1000291A8()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  swift_release(*(_QWORD *)(v0 + 128));
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  v1 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_10002B7C0(v1);
}

uint64_t sub_1000291E8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  sub_10001D938();
  sub_10001EAC8();
  return sub_10002B7C0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100029230(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  uint64_t v40;
  char v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48[8];

  sub_100002F78(&qword_1000FBE88);
  sub_10002BCBC();
  __chkstk_darwin(v2);
  sub_10002BD70();
  v47 = v3;
  v4 = type metadata accessor for InferenceError.Context(0);
  v45 = *(_QWORD *)(v4 - 8);
  v46 = v4;
  __chkstk_darwin(v4);
  sub_10002BD70();
  v44 = v5;
  sub_100002F78(&qword_1000FBE90);
  sub_10002BCBC();
  __chkstk_darwin(v6);
  sub_10001E168();
  v9 = v8 - v7;
  sub_100002F78(&qword_1000FBE98);
  sub_10002BCBC();
  __chkstk_darwin(v10);
  sub_10001E168();
  v13 = v12 - v11;
  v14 = sub_10002B8A0();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v43 - v19;
  v21 = type metadata accessor for InferenceError(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  sub_10001E168();
  v25 = v24 - v23;
  if (!a1)
  {
    sub_10002BDCC(v13, 1);
LABEL_6:
    sub_10002AD5C(v13, &qword_1000FBE98);
    if (a1)
    {
      sub_10002BEA8();
      v29 = sub_100002F78(&qword_1000FB5F8);
      v30 = swift_dynamicCast(v9, v48, v29, v21, 6);
      sub_10002BDD8(v9, v30 ^ 1u);
      if (sub_100005700(v9, 1, v21) != 1)
      {
        v18 = (char *)v9;
        goto LABEL_9;
      }
    }
    else
    {
      sub_10002BDD8(v9, 1);
    }
    v34 = &qword_1000FBE90;
    v35 = v9;
    goto LABEL_13;
  }
  sub_10002BEA8();
  v26 = sub_100002F78(&qword_1000FB5F8);
  v27 = swift_dynamicCast(v13, v48, v26, v14, 6);
  sub_10002BDCC(v13, v27 ^ 1u);
  if (sub_100005700(v13, 1, v14) == 1)
    goto LABEL_6;
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 32);
  v28(v20, v13, v14);
  v28(v18, (uint64_t)v20, v14);
  if ((*(unsigned int (**)(char *, uint64_t))(v15 + 88))(v18, v14) != enum case for ModelManagerError.inferenceError(_:))
  {
    sub_10002B818((uint64_t)v18, *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8));
    goto LABEL_16;
  }
  sub_10002B818((uint64_t)v18, *(uint64_t (**)(uint64_t, uint64_t))(v15 + 96));
LABEL_9:
  v31 = sub_10001EA84(v25, (uint64_t)v18, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 32));
  v32 = v47;
  InferenceError.context.getter(v31);
  v33 = v46;
  if (sub_100005700(v32, 1, v46) == 1)
  {
    sub_10002B7F8(v25, *(uint64_t (**)(uint64_t, uint64_t))(v22 + 8));
    v34 = &qword_1000FBE88;
    v35 = v32;
LABEL_13:
    sub_10002AD5C(v35, v34);
LABEL_16:
    v41 = 0;
    return v41 & 1;
  }
  v36 = v44;
  v37 = v45;
  v38 = sub_10002BE5C();
  v40 = v39(v38);
  v41 = InferenceError.Context.fallbackAllowed.getter(v40);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v33);
  sub_10002B7F8(v25, *(uint64_t (**)(uint64_t, uint64_t))(v22 + 8));
  return v41 & 1;
}

uint64_t sub_10002957C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2[9] = a1;
  v2[10] = v1;
  v3 = sub_100002F78(&qword_1000FB2D8);
  v2[11] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[12] = v4;
  v2[13] = sub_10001D800(v4);
  v5 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason(0);
  v2[14] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[15] = v6;
  v2[16] = sub_10001D800(v6);
  v7 = type metadata accessor for UUID(0);
  v2[17] = sub_10001D800(*(_QWORD *)(v7 - 8));
  v8 = sub_10002BCD4();
  v2[18] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[19] = v9;
  v2[20] = sub_10001D800(v9);
  v10 = type metadata accessor for InferenceProviderPrewarmInformation(0);
  v2[21] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[22] = v11;
  v2[23] = sub_10001D800(v11);
  v12 = sub_10002BA0C();
  v2[24] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v2[25] = v13;
  v2[26] = sub_10001D800(v13);
  v14 = type metadata accessor for DaemonSession.ManagerOwnedState(0);
  v2[27] = sub_10002B1BC(*(_QWORD *)(v14 - 8));
  v2[28] = sub_10001E784();
  sub_10001D7B8();
  return sub_10001D6DC();
}

uint64_t sub_100029664()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = sub_10002BC5C(v1[9]);
  v1[29] = v2;
  if (v0)
  {
    sub_10002BA88(v1[28]);
    sub_10001E330();
    sub_10001D938();
    sub_10001E490();
    sub_10002B504();
    sub_10002B528();
    sub_10002B4C4();
    sub_10002B70C();
    sub_10002BC50();
    sub_10001E3E8();
    __asm { BR              X0 }
  }
  v3 = v2;
  v5 = v1[27];
  v4 = (_BYTE *)v1[28];
  v6 = v2 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState;
  sub_10002B2E0(v2 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState, (uint64_t)(v1 + 2));
  sub_10002AC98(v6, (uint64_t)v4, type metadata accessor for DaemonSession.ManagerOwnedState);
  *v4 = 1;
  sub_10002AC98((uint64_t)v4, v5, type metadata accessor for DaemonSession.ManagerOwnedState);
  sub_10002B308(v6, (uint64_t)(v1 + 5), 33);
  v7 = sub_10002B9E4();
  sub_10002ABC0(v7, v8);
  swift_endAccess(v1 + 5);
  sub_10002ACC4((uint64_t)v4, type metadata accessor for DaemonSession.ManagerOwnedState);
  v1[30] = sub_10009BBD8();
  sub_10009BC28(v1[26]);
  v1[31] = sub_10009BFF0();
  v1[32] = v9;
  v12 = v1[19];
  v11 = v1[20];
  v13 = v1[18];
  v14 = v1[11];
  v15 = OBJC_IVAR____TtC13modelmanagerd13DaemonSession_auditToken;
  v1[33] = OBJC_IVAR____TtC13modelmanagerd13DaemonSession_auditToken;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, v3 + v15, v13);
  sub_10001E4D4();
  result = UUIDIdentifier.uuid.getter(v14);
  v17 = *(_QWORD *)(v3 + 40);
  if (v17 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v17 <= 0x7FFFFFFF)
  {
    v26 = v1[15];
    v27 = v1[14];
    v28 = v1[16];
    sub_10001D964();
    v18 = sub_10002B9E4();
    InferenceProviderPrewarmInformation.init(bundleIdentifier:requestorAuditToken:sessionUUID:useCaseIdentifier:onBehalfOfPid:)(v18);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v26 + 104))(v28, enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.prewarm(_:), v27);
    v19 = (uint64_t **)swift_task_alloc(dword_1000FD3FC);
    v1[34] = (uint64_t)v19;
    *v19 = v1;
    v19[1] = (uint64_t *)sub_1000298D4;
    sub_10001E3E8();
    return sub_100052578(v20, v21, v22, v23, v24, v25);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000298D4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  sub_10002B940();
  v2 = v1[15];
  sub_10001EA4C(v3);
  v1[35] = v0;
  swift_task_dealloc(v4);
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2 + 8))(v1[16], v1[14]);
    sub_10001E034();
    sub_10001D8B4();
  }
  else
  {
    swift_bridgeObjectRelease(v1[30]);
    sub_10002B260(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  }
  sub_10002BBCC();
  return sub_10001D6DC();
}

uint64_t sub_100029970()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t (*v38)(void);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = v0[9];
  v1 = v0[32];
  v2 = v0[31];
  v3 = (_QWORD *)v0[10];
  v4 = v0[29] + v0[33];
  v5 = v3[31];
  v6 = v3[32];
  v7 = sub_10002BE7C(v3 + 28);
  v8 = InferenceProviderDescriptor.id.getter(v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 72))(v46, v8, v9, v2, v1, v4, v5, v6);
  sub_10001DA38();
  sub_10001EADC();
  if (qword_1000FB0D8 != -1)
    swift_once(&qword_1000FB0D8, sub_10001FAFC);
  v10 = v0[12];
  v11 = sub_10001DD64();
  sub_100002FF8(v11, (uint64_t)qword_1000FBC40);
  sub_10002B920();
  sub_10001E694();
  v12 = sub_10002BF4C();
  v13 = os_log_type_enabled(v10, v12);
  v15 = v0[25];
  v14 = v0[26];
  v17 = v0[23];
  v16 = v0[24];
  v44 = v0[29];
  v45 = v0[22];
  v47 = v0[21];
  v18 = v0[13];
  v43 = v0[12];
  v19 = v0[11];
  if (v13)
  {
    v42 = v0[25];
    v41 = v0[23];
    v20 = (uint8_t *)sub_10001D8D4(12);
    v40 = v16;
    v21 = sub_10001D8D4(32);
    v48 = v21;
    *(_DWORD *)v20 = 136315138;
    sub_100006744(&qword_1000FBE80, &qword_1000FB2D8);
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v19, v22);
    v25 = v24;
    sub_1000102C0(v23, v24, &v48);
    v34 = sub_10002BE84(v26, v27, v28, v29, v30, v31, v32, v33, (uint64_t)(v20 + 4), v0 + 8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v34, v35, v36);
    swift_bridgeObjectRelease(v25);
    sub_10002B7F8(v18, *(uint64_t (**)(uint64_t, uint64_t))(v43 + 8));
    sub_10001E18C((void *)&_mh_execute_header, v10, v12, "Prewarmed assets for session %s", v20);
    sub_10001DBB8(v21);
    sub_10001D790(v21);
    sub_10001D790((uint64_t)v20);

    v37 = swift_release(v44);
    (*(void (**)(uint64_t, uint64_t, __n128))(v45 + 8))(v41, v47, v37);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v14, v40);
  }
  else
  {

    swift_release(v44);
    sub_10002B7F8(v18, *(uint64_t (**)(uint64_t, uint64_t))(v43 + 8));
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v17, v47);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  }
  swift_task_dealloc(v0[28]);
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  v38 = (uint64_t (*)(void))sub_10001E5D0();
  return v38();
}

uint64_t sub_100029C44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10001DB68();
  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 176);
  swift_release(*(_QWORD *)(v0 + 232));
  sub_10002B7F8(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_10002B260(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_10002BA88(*(_QWORD *)(v0 + 224));
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  sub_10002B70C();
  return sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100029CCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = sub_10002BA0C();
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = sub_10002B1BC(v5);
  v3[8] = sub_10001E784();
  sub_10001D7B8();
  return sub_10001D6DC();
}

uint64_t sub_100029D20()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);

  sub_10002BC5C(v1[3]);
  if (v0)
  {
    swift_task_dealloc(v1[8]);
    sub_10001E330();
    v9 = (uint64_t (*)(void))sub_10002BC50();
  }
  else
  {
    sub_10009BC28(v1[8]);
    sub_10009B774(v1[8]);
    v3 = sub_10009BFF0();
    v5 = v4;
    v7 = v1[7];
    v6 = v1[8];
    v8 = v1[6];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v6, v1[5]);
    ModelInstance.init(assetBundleIdentifier:inferenceProvider:)(v3, v5, v7);
    sub_10001D9C0();
    sub_10002BADC(v6, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
    sub_10001EAC8();
    sub_10002B504();
    v9 = (uint64_t (*)(void))sub_10001E5D0();
  }
  return sub_10002B3B4(v9);
}

uint64_t sub_100029E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4[27] = a3;
  v4[28] = v3;
  v4[25] = a1;
  v4[26] = a2;
  v5 = sub_10001DBC0();
  v4[29] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[30] = v6;
  v4[31] = sub_10001D800(v6);
  v7 = sub_100002F78(&qword_1000FB2A0);
  v4[32] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[33] = v8;
  v4[34] = sub_10001D800(v8);
  v9 = type metadata accessor for ClientData(0);
  v4[35] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[36] = v10;
  v4[37] = sub_10001D800(v10);
  v11 = sub_100002F78(&qword_1000FB2D8);
  v4[38] = sub_10001D800(*(_QWORD *)(v11 - 8));
  v12 = sub_10002BCD4();
  v4[39] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[40] = v13;
  v4[41] = sub_10001D800(v13);
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_100029EB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, int a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t inited;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v14 = v12[40];
  v13 = v12[41];
  v16 = v12[27];
  v15 = v12[28];
  v18 = v12[25];
  v17 = v12[26];
  v19 = sub_100002F78(&qword_1000FB558);
  inited = swift_initStackObject(v19, v12 + 2);
  *(_OWORD *)(inited + 16) = xmmword_1000CB140;
  *(_QWORD *)(inited + 32) = v18;
  *(_QWORD *)(inited + 40) = v17;
  swift_bridgeObjectRetain(v17);
  v21 = sub_10000B690(inited);
  v22 = sub_10001EA84(v13, v16, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16));
  v23 = AuditToken.processIdentifier.getter(v22);
  v24 = type metadata accessor for Session(0);
  UUIDIdentifier.init()(v24, &protocol witness table for Session);
  v25 = *(_QWORD *)(v15 + 216);
  v12[42] = v25;
  sub_100006694(v15 + 176, (uint64_t)(v12 + 8));
  sub_10001E194();
  v56 = v21;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_10000378C((unint64_t)_swiftEmptyArrayStorage);
    v26 = v46;
  }
  else
  {
    v26 = _swiftEmptySetSingleton;
  }
  v27 = v12[38];
  v54 = v12[41];
  v55 = v12[28];
  v28 = v12[11];
  v29 = sub_1000064E4((uint64_t)(v12 + 8), v28);
  v30 = *(_QWORD *)(v28 - 8);
  v31 = (uint64_t *)sub_10001D828(*(_QWORD *)(v30 + 64));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v30 + 16))(v31, v29, v28);
  *(_QWORD *)&v47 = 0xD000000000000012;
  *((_QWORD *)&v47 + 1) = 0x80000001000CDD00;
  v32 = sub_10002AA84(v56, 0, 0xE000000000000000, 0, 0, v54, v23, 0, v47, v27, v25, *v31, (uint64_t)v26);
  v12[43] = v32;
  sub_10000650C(v12 + 8);
  sub_10002B4C4();
  sub_10002B308(v55 + 112, (uint64_t)(v12 + 13), 33);
  sub_10001D7EC();
  sub_1000125E4((int)&v57, (int)v32, v33, v34, v35, v36, v37, v38, v48, v49, v50, v51, v52, v53);
  sub_10002BB48();
  v39 = swift_release(v57);
  v40 = default argument 0 of ClientData.init(_:)(v39);
  ClientData.init(_:)(v40);
  v41 = type metadata accessor for OneShotRequest(0);
  v42 = UUIDIdentifier.init()(v41, &protocol witness table for OneShotRequest);
  v43 = static TaskPriority.userInitiated.getter(v42);
  AuditToken.auditUserIdentifier.getter(v43);
  v44 = (_QWORD *)swift_task_alloc(dword_1000FBCB4);
  v12[44] = v44;
  *v44 = v12;
  v44[1] = sub_10002A170;
  return sub_100026B28(0, v12[37], v12[25], v12[26], 0, v12[34], (uint64_t)v32, v12[31], a9, a10, a11, a12);
}

uint64_t sub_10002A170()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_10001DFE8();
  v3 = v2;
  v4 = (*v1)[44];
  v5 = (*v1)[36];
  v6 = (*v1)[34];
  v14 = (*v1)[35];
  v15 = (*v1)[37];
  v7 = (*v1)[33];
  v8 = (*v1)[30];
  v9 = (*v1)[31];
  v10 = *v1;
  v10[45] = v3;
  v10[46] = v0;
  swift_task_dealloc(v4);
  sub_10002B978(v9, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  sub_10002BADC(v6, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v15, v14);
  if (v0)
    return sub_10002B590((uint64_t)sub_10002A334, v10[28], 0);
  v12 = (uint64_t **)swift_task_alloc(dword_1000FF37C);
  v10[47] = (uint64_t)v12;
  *v12 = v10;
  v12[1] = (uint64_t *)sub_10002A248;
  sub_10002BC1C();
  return sub_1000BB134(v13);
}

uint64_t sub_10002A248()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 384) = v1;
  swift_task_dealloc(v3);
  return sub_10001D6DC();
}

uint64_t sub_10002A29C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_10001DB68();
  v1 = v0[43];
  v2 = v0[28];
  swift_release(v0[45]);
  sub_10002B308(v2 + 112, (uint64_t)(v0 + 22), 33);
  sub_1000BFE88(v1);
  sub_10002BB48();
  sub_10001D9C8();
  sub_10001D9C0();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  sub_10002B70C();
  v3 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_10001D940(v3);
}

uint64_t sub_10002A334()
{
  uint64_t v0;

  sub_10002B308(*(_QWORD *)(v0 + 224) + 112, v0 + 128, 33);
  sub_10002BE44();
  sub_10002BB48();
  sub_10002B908();
  sub_10001D9C8();
  sub_10001D938();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  return sub_10002B698(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10002A3AC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 224);
  swift_release(*(_QWORD *)(v0 + 360));
  sub_10002B308(v1 + 112, v0 + 152, 33);
  sub_10002BE44();
  sub_10002BB48();
  sub_10002B908();
  sub_10001D9C8();
  sub_10001D938();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  return sub_10002B698(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10002A42C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));

  sub_10000650C((_QWORD *)(v0 + 128));
  swift_release(*(_QWORD *)(v0 + 168));
  sub_10000650C((_QWORD *)(v0 + 176));
  swift_release(*(_QWORD *)(v0 + 216));
  sub_10000650C((_QWORD *)(v0 + 224));
  swift_release(*(_QWORD *)(v0 + 264));
  swift_release(*(_QWORD *)(v0 + 272));
  swift_release(*(_QWORD *)(v0 + 280));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_10002A498()
{
  uint64_t v0;

  sub_10002A42C();
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for SessionManager()
{
  return objc_opt_self(_TtC13modelmanagerd14SessionManager);
}

uint64_t sub_10002A4D0(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;

  v4 = isStackAllocationSafe;
  v5 = *(_BYTE *)(isStackAllocationSafe + 32);
  v6 = v5 & 0x3F;
  v7 = (1 << v5) + 63;
  v8 = v7 >> 6;
  v9 = 8 * (v7 >> 6);
  if (v6 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v7 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    v10 = (uint64_t *)((char *)&v22 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_100011704(0, v8, v10);
    v11 = sub_10002A644(v10, v8, v4, a2 & 0xFFFFFFFFFFLL);
    swift_release(v4);
    if (v2)
      swift_willThrow(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  else
  {
    v20 = (_QWORD *)swift_slowAlloc(v9, -1);
    sub_100011704(0, v8, v20);
    v11 = sub_10002A644(v20, v8, v4, a2 & 0xFFFFFFFFFFLL);
    swift_release(v4);
    swift_slowDealloc(v20, -1, -1);
  }
  return v11;
}

#error "10002A79C: call analysis failed (funcsize=94)"

_QWORD *sub_10002A7BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15)
{
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  _UNKNOWN **v49;

  v43 = a8;
  v44 = a11;
  v45 = a12;
  v41 = a10;
  v42 = a7;
  v39 = a6;
  v40 = a9;
  v46 = a14;
  v20 = type metadata accessor for DaemonSession.LazyState(0);
  __chkstk_darwin(v20);
  v22 = (uint64_t *)((char *)&v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v48 = type metadata accessor for ModelCatalogProvider(0);
  v49 = &off_1000F4838;
  *(_QWORD *)&v47 = a13;
  v23 = OBJC_IVAR____TtC13modelmanagerd13DaemonSession__lazyState;
  v22[1] = 0;
  v22[2] = 0;
  *v22 = 0;
  v24 = (uint64_t)v22 + *(int *)(v20 + 24);
  v25 = type metadata accessor for InferenceProviderDescriptor(0);
  sub_100005630(v24, 1, 1, v25);
  *((_BYTE *)v22 + *(int *)(v20 + 28)) = 0;
  v26 = sub_100002F78(&qword_1000FBE78);
  v27 = swift_allocObject(v26, ((*(unsigned int *)(v26 + 48) + 3) & 0x1FFFFFFFCLL) + 4, *(unsigned __int16 *)(v26 + 52) | 3);
  *(_DWORD *)(v27 + ((*(unsigned int *)(*(_QWORD *)v27 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_10002AC98((uint64_t)v22, v27 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v27 + 16), type metadata accessor for DaemonSession.LazyState);
  sub_10002ACC4((uint64_t)v22, type metadata accessor for DaemonSession.LazyState);
  *(_QWORD *)((char *)a15 + v23) = v27;
  a15[2] = a1;
  a15[3] = a2;
  a15[4] = a3;
  a15[5] = a4;
  a15[6] = a5;
  v28 = (char *)a15 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_auditToken;
  v29 = type metadata accessor for AuditToken(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v28, v39, v29);
  *(_QWORD *)((char *)a15 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_createdByPID) = v42;
  *((_BYTE *)a15 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_containsSensitiveData) = v43;
  v30 = (_QWORD *)((char *)a15 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_loggingIdentifier);
  v31 = v41;
  *v30 = v40;
  v30[1] = v31;
  v32 = (char *)a15 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_id;
  v33 = sub_100002F78(&qword_1000FB2D8);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v32, v44, v33);
  *(_QWORD *)((char *)a15 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_requestManager) = v45;
  sub_10000667C(&v47, (uint64_t)a15 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_modelCatalog);
  v34 = (char *)a15 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState;
  *v34 = 0;
  v35 = &v34[*(int *)(type metadata accessor for DaemonSession.ManagerOwnedState(0) + 24)];
  v36 = enum case for DaemonSessionState.none(_:);
  v37 = type metadata accessor for DaemonSessionState(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 104))(v35, v36, v37);
  *((_QWORD *)v34 + 1) = v46;
  return a15;
}

_QWORD *sub_10002AA84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _QWORD v30[3];
  uint64_t v31;
  _UNKNOWN **v32;

  v29 = a8;
  v27 = a6;
  v28 = a7;
  v26 = a5;
  v25 = a9;
  v31 = type metadata accessor for ModelCatalogProvider(0);
  v32 = &off_1000F4838;
  v30[0] = a12;
  v17 = type metadata accessor for DaemonSession(0);
  v18 = (_QWORD *)swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  v19 = sub_1000064E4((uint64_t)v30, v31);
  __chkstk_darwin(v19);
  v21 = (uint64_t *)((char *)&v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v22 + 16))(v21);
  v23 = sub_10002A7BC(a1, a2, a3, a4, v26, v27, v28, v29, v25, *((uint64_t *)&v25 + 1), a10, a11, *v21, a13, v18);
  sub_10000650C(v30);
  return v23;
}

uint64_t sub_10002ABC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DaemonSession.ManagerOwnedState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002AC04()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  sub_10002BE14();
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10002AC34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  sub_10001D984();
  v5 = (_QWORD *)swift_task_alloc(dword_1000FBEC4);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10002B408(v5, (uint64_t)sub_10001D668);
  return sub_100028220(v6, v1, v3, v4, v0);
}

void sub_10002AC98(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = a3(0);
  sub_10002B9CC(v3);
  sub_100006C14();
}

void sub_10002ACC4(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  v2 = a2(0);
  sub_10001DD50(v2);
  sub_100006C14();
}

uint64_t sub_10002ACEC()
{
  return sub_10002AEE8();
}

uint64_t sub_10002ACF4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = swift_task_alloc(dword_1000FBEF4);
  v1 = (_QWORD *)sub_100006AF4(v0);
  v2 = sub_10001D750(v1);
  return sub_100023044(v2, v3, v4, v5, v6);
}

void sub_10002AD5C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = sub_100002F78(a2);
  sub_10001DD50(v2);
  sub_100006C14();
}

uint64_t sub_10002AD84()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002ADA8()
{
  uint64_t v0;

  sub_10002BBD8();
  sub_10001E390();
  sub_10002BE14();
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10002ADD0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10001D984();
  v0 = swift_task_alloc(dword_1000FBF04);
  v1 = (_QWORD *)sub_100006AF4(v0);
  v2 = sub_10001D750(v1);
  return sub_100025C28(v2, v3, v4, v5, v6);
}

uint64_t sub_10002AE24()
{
  uint64_t v0;

  sub_10002BBD8();
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002AE44()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = swift_task_alloc(dword_1000FBF14);
  v2 = (_QWORD *)sub_100006AF4(v1);
  *v2 = v0;
  v2[1] = sub_10001D668;
  v3 = sub_10002BF24();
  return sub_100025C04(v3);
}

uint64_t sub_10002AE98(_QWORD *a1)
{
  uint64_t v1;

  return sub_100026100(a1, *(_QWORD *)(v1 + 16)) & 1;
}

void sub_10002AEB4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_100002F78(a3);
  sub_10002B9CC(v3);
  sub_100006C14();
}

uint64_t sub_10002AEE0()
{
  return sub_10002AEE8();
}

uint64_t sub_10002AEE8()
{
  uint64_t v0;
  uint64_t v1;

  sub_10002BBD8();
  sub_10001E390();
  v0 = sub_10002BE5C();
  return swift_deallocObject(v0, v1, 7);
}

uint64_t sub_10002AF14()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10001D984();
  v0 = swift_task_alloc(dword_1000FBF24);
  v1 = (_QWORD *)sub_100006AF4(v0);
  v2 = sub_10001D750(v1);
  return sub_100021320(v2, v3, v4, v5, v6);
}

double sub_10002AF68(uint64_t a1)
{
  uint64_t *v1;

  return sub_10002140C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10002AF74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100002F78(&qword_1000FBF30);
  v3 = sub_10002B724();
  swift_release(v3);
  sub_10000650C((_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 64));
  sub_10002BB80();
  return sub_10001E060(v0, v1, v2);
}

double sub_10002AFC4()
{
  uint64_t *v0;
  uint64_t v1;

  sub_100002F78(&qword_1000FBF30);
  sub_10002BF6C();
  return sub_1000216A8(v0[2], v0 + 3, v0[8], (uint64_t)v0 + v1);
}

uint64_t sub_10002AFF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002B004(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_10002B00C(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = a3(a2);
    atomic_store(sub_100006C50(v4), a1);
  }
  sub_100006C14();
}

uint64_t sub_10002B040()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100002F78(&qword_1000FBF30);
  v3 = sub_10002B724();
  swift_unknownObjectRelease(v3);
  sub_10001E390();
  sub_10002BE14();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  sub_10002BB80();
  return sub_10001E060(v0, v1, v2);
}

uint64_t sub_10002B098()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_100002F78(&qword_1000FBF30);
  sub_10002BF6C();
  v1 = swift_task_alloc(dword_1000FBF44);
  v2 = (_QWORD *)sub_100006AF4(v1);
  *v2 = v0;
  v2[1] = sub_10001D668;
  sub_10002B574();
  return sub_100021884(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10002B13C(_QWORD *a1)
{
  return sub_10002AE98(a1) & 1;
}

uint64_t sub_10002B154()
{
  uint64_t v0;

  return swift_release_n(v0, 2);
}

uint64_t sub_10002B160(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10002B17C(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

BOOL sub_10002B1AC(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10002B1BC@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(_QWORD *)(a1 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_10002B1D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10004ED50(a1, a2, a3, a4);
}

uint64_t sub_10002B1EC(uint64_t a1)
{
  return sub_100057620(a1);
}

uint64_t sub_10002B208(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10002B224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_10002B240@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v2;
  a1[1] = a2;
  return v3;
}

uint64_t sub_10002B260@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_10002B26C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100005630(a1, 1, 1, a4);
}

uint64_t sub_10002B278@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;

  *a2 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a2, a18, v18);
}

void sub_10002B290(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t sub_10002B29C(uint64_t a1, uint64_t a2)
{
  return sub_1000219E8(a1, a2);
}

uint64_t sub_10002B2B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_10002B2C4()
{
  uint64_t v0;

  return sub_10001CD34(*(_QWORD *)(v0 + 360));
}

uint64_t sub_10002B2E0(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 0, 0);
}

uint64_t sub_10002B2EC()
{
  return Task<>.value.getter();
}

uint64_t sub_10002B308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_beginAccess(a1, a2, a3, 0);
}

uint64_t sub_10002B310(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 440) = a1;
  return sub_10009BC28(v2);
}

uint64_t sub_10002B324(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return Set.Iterator.init(_cocoa:)(v2, v1, a1);
}

uint64_t sub_10002B338(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_10002B348()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 288);
}

void sub_10002B360()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = v0 + 120;
  *(_QWORD *)(v1 - 104) = v0 + 168;
}

uint64_t sub_10002B3A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_10002B3B4(uint64_t (*a1)(void))
{
  return a1();
}

void sub_10002B3C0(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0x16u);
}

uint64_t sub_10002B3CC()
{
  return Logger.logObject.getter();
}

uint64_t sub_10002B3F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

BOOL sub_10002B3F8(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_10002B400()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_10002B408@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_10002B418@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;

  return swift_dynamicCast(a7, v8, a1 + 8, v7, 7);
}

uint64_t sub_10002B434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v21 + 152) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a20, a18, v20);
}

uint64_t sub_10002B450()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10002B460()
{
  return sub_10009BBD8();
}

uint64_t sub_10002B470()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_10002B478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  *a13 = a1;
  return type metadata accessor for DaemonSession(0);
}

uint64_t sub_10002B48C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return swift_dynamicCast(a1, a2, a3, v3, 7);
}

uint64_t sub_10002B498()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

void sub_10002B4A0(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0x16u);
}

uint64_t sub_10002B4A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12)
{
  *a12 = a1;
  return type metadata accessor for DaemonRequest(0);
}

uint64_t sub_10002B4BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 7);
}

uint64_t sub_10002B4C4()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_10002B4CC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10002B504()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_10002B50C()
{
  return type metadata accessor for DaemonRequest(0);
}

uint64_t sub_10002B528()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

void sub_10002B530(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;

  sub_1000102C0(v3, v4, a3);
}

void sub_10002B53C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v4;

  sub_1000102C0(v4, v3, a3);
}

uint64_t sub_10002B548(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

uint64_t sub_10002B554@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_10002B560(uint64_t a1, uint64_t a2)
{
  return swift_allocError(a1, a2, 0, 0);
}

uint64_t sub_10002B56C()
{
  return __CocoaSet.Iterator.next()();
}

uint64_t sub_10002B590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_10002B5AC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 80))(v3, a1, v5, v4, v2, v8 + a2, v6, v7);
}

uint64_t sub_10002B5D4()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

void sub_10002B5DC(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  sub_10002B00C(a1, 255, a3);
}

uint64_t sub_10002B5E4()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 1);
}

uint64_t sub_10002B5F4()
{
  return type metadata accessor for DaemonSession(0);
}

BOOL sub_10002B5FC(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10002B660()
{
  uint64_t v0;

  return swift_errorRelease(*(_QWORD *)(v0 + 392));
}

uint64_t sub_10002B684()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10002B68C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_10002B698(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10002B6B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_10002B6B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, v3 + v2);
}

uint64_t sub_10002B6D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 64))(v1, v2, v0, v3, v4);
}

uint64_t sub_10002B70C()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

void sub_10002B714()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 408) = *(_QWORD *)(*(_QWORD *)(v0 + 224) + 216);
}

uint64_t sub_10002B724()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_10002B75C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  return v1;
}

__n128 sub_10002B76C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __n128 a15)
{
  _DWORD *v15;
  uint64_t v16;
  __n128 result;

  *(_QWORD *)(v16 - 112) = a1;
  *(_QWORD *)(v16 - 88) = a1;
  result = a15;
  *v15 = a15.n128_u32[0];
  return result;
}

void sub_10002B784()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)(v5 - 164) = v3;
  *(_QWORD *)(v5 - 160) = v2;
  *(_QWORD *)(v5 - 152) = v1;
  *(_QWORD *)(v5 - 88) = v0;
  sub_100011720(0, v4, 0);
}

uint64_t sub_10002B7C0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10002B7D0()
{
  return ((uint64_t (*)(void))AsyncStream.Iterator.next(isolation:))();
}

void sub_10002B7E0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  sub_1000102C0(a1, a2, (uint64_t *)(v2 - 88));
}

uint64_t sub_10002B7EC()
{
  uint64_t v0;

  return swift_unknownObjectRetain(v0);
}

uint64_t sub_10002B7F8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_10002B800(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_10002B808(uint64_t a1)
{
  return swift_task_dealloc(a1);
}

uint64_t sub_10002B818@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_10002B820(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 88) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 88, v2 - 80, v1);
}

uint64_t sub_10002B83C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, v1, v2);
}

uint64_t sub_10002B880()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_10002B88C()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10002B894()
{
  uint64_t v0;

  return swift_unknownObjectRetain(v0);
}

uint64_t sub_10002B8A0()
{
  return type metadata accessor for ModelManagerError(0);
}

uint64_t sub_10002B8A8()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_10002B8B4()
{
  uint64_t v0;

  return _swift_stdlib_bridgeErrorToNSError(v0);
}

uint64_t sub_10002B8BC()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 344));
}

uint64_t sub_10002B8C8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

_QWORD *sub_10002B8D8()
{
  uint64_t v0;

  return sub_10001C830((_QWORD *)(*(_QWORD *)(v0 + 48) + 224), *(_QWORD *)(*(_QWORD *)(v0 + 48) + 248));
}

uint64_t sub_10002B908()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 344));
}

uint64_t sub_10002B920()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v0, v2, v1);
}

uint64_t sub_10002B938()
{
  uint64_t v0;

  return __CocoaSet.makeIterator()(v0);
}

void sub_10002B940()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

void sub_10002B960()
{
  uint64_t v0;

  sub_100011720(0, *(_QWORD *)(v0 + 16) + 1, 1);
}

uint64_t sub_10002B978@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_10002B980()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return *(_QWORD *)(v2 + 120);
}

uint64_t sub_10002B994()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return *(_QWORD *)(v2 + 128);
}

void sub_10002B9A8(unint64_t a1@<X8>)
{
  uint64_t v1;

  sub_100011720(a1 > 1, v1, 1);
}

uint64_t sub_10002B9C0(uint64_t a1)
{
  return sub_100057620(a1);
}

uint64_t sub_10002B9CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

uint64_t sub_10002B9E4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10002BA0C()
{
  return type metadata accessor for InferenceProviderDescriptor(0);
}

uint64_t sub_10002BA14()
{
  return sub_1000B96FC();
}

uint64_t sub_10002BA20(uint64_t a1)
{
  return swift_arrayDestroy(a1, 2);
}

uint64_t sub_10002BA34()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

uint64_t sub_10002BA40()
{
  uint64_t v0;

  return swift_release(v0);
}

void sub_10002BA48(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v4;

  sub_1000102C0(v4, v3, a3);
}

uint64_t sub_10002BA54(uint64_t a1)
{
  uint64_t v1;

  return swift_allocError(v1, a1, 0, 0);
}

uint64_t sub_10002BA68(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 2);
}

uint64_t sub_10002BA70@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(v2, a1, v3);
}

uint64_t sub_10002BA7C()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 344));
}

uint64_t sub_10002BA88(uint64_t a1)
{
  return swift_task_dealloc(a1);
}

_QWORD *sub_10002BA9C()
{
  uint64_t v0;

  return sub_10001C830((_QWORD *)(*(_QWORD *)(v0 + 80) + 128), *(_QWORD *)(*(_QWORD *)(v0 + 80) + 152));
}

uint64_t sub_10002BAC8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v3, v2);
}

uint64_t sub_10002BAD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100002CAC(a1, a2, v2);
}

uint64_t sub_10002BADC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_10002BAE4()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 104))(*(_QWORD *)(v0 + 128), *(unsigned int *)(v0 + 192), *(_QWORD *)(v0 + 112));
}

uint64_t sub_10002BAF8@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 104))();
}

_QWORD *sub_10002BB00()
{
  uint64_t v0;

  return sub_10001C830((_QWORD *)(*(_QWORD *)(v0 + 96) + 224), *(_QWORD *)(*(_QWORD *)(v0 + 96) + 248));
}

void sub_10002BB2C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = v0 + 120;
}

uint64_t sub_10002BB48()
{
  uint64_t v0;

  return swift_endAccess(v0);
}

uint64_t sub_10002BB6C(int a1)
{
  return sub_1000935B8(a1);
}

uint64_t sub_10002BB80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1 + v3, v0);
}

uint64_t sub_10002BB90()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

BOOL sub_10002BBA0(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10002BBB0()
{
  return swift_willThrow();
}

BOOL sub_10002BBB8(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_10002BBC0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10002BBD8()
{
  uint64_t v0;

  return swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10002BBE0()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_10002BBE8()
{
  return static os_log_type_t.error.getter();
}

void sub_10002BBF0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_10002AD5C(v2, a2);
}

uint64_t sub_10002BBF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return *(_QWORD *)(v0 + 48) + *(_QWORD *)(v1 + 72) * v2;
}

uint64_t sub_10002BC10()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_10002BC38@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

void sub_10002BC40()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  sub_1000102C0(v0, v1, (uint64_t *)(v2 - 72));
}

uint64_t sub_10002BC50()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_10002BC5C(uint64_t a1)
{
  return sub_100025FC4(a1);
}

uint64_t sub_10002BC64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return swift_retain(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * a2));
}

uint64_t sub_10002BC74()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10001CB5C(v0, *(_QWORD *)(v1 - 112));
}

uint64_t sub_10002BCAC()
{
  uint64_t v0;

  return swift_bridgeObjectRetain_n(v0, 2);
}

uint64_t sub_10002BCCC()
{
  return type metadata accessor for RequestCancellationReason(0);
}

uint64_t sub_10002BCD4()
{
  return type metadata accessor for AuditToken(0);
}

uint64_t sub_10002BD0C@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_10002BD18@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v2;
  a1[1] = a2;
  return v3;
}

uint64_t sub_10002BD30@<X0>(uint64_t a1@<X8>)
{
  return swift_task_dealloc(a1);
}

BOOL sub_10002BD38(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void sub_10002BD48()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = v0 + 168;
}

uint64_t sub_10002BD5C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 296);
}

_QWORD *sub_10002BD68(_QWORD *a1)
{
  uint64_t v1;

  return sub_10001C830(a1, v1);
}

uint64_t sub_10002BD84(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 3);
}

uint64_t sub_10002BD8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return dispatch thunk of CustomStringConvertible.description.getter(v2, a2);
}

uint64_t sub_10002BDA0()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  return sub_10001C7E4(v2, v1, v0);
}

void sub_10002BDC4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  sub_1000102C0(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t sub_10002BDCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100005630(a1, a2, 1, v2);
}

uint64_t sub_10002BDD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100005630(a1, a2, 1, v2);
}

uint64_t sub_10002BDE4()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 368));
}

uint64_t sub_10002BDF0()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_10002BDF8()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 160));
}

uint64_t sub_10002BE00(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

uint64_t sub_10002BE0C()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_10002BE14()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 40));
}

__n128 sub_10002BE1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 a15)
{
  uint64_t v15;

  *(_QWORD *)(v15 - 88) = a1;
  return (__n128)a15;
}

__n128 sub_10002BE30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,__int128 a21)
{
  return (__n128)a21;
}

uint64_t sub_10002BE44()
{
  uint64_t v0;

  return sub_1000BFE88(v0);
}

uint64_t sub_10002BE50()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10002BE5C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10002BE68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 184) = a1;
  return v2;
}

_QWORD *sub_10002BE7C(_QWORD *a1)
{
  uint64_t v1;

  return sub_10001C830(a1, v1);
}

_QWORD *sub_10002BE84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  *a10 = a1;
  return a10;
}

_QWORD *sub_10002BE98(_QWORD *a1)
{
  uint64_t v1;

  return sub_10001C830(a1, v1);
}

uint64_t sub_10002BEA0()
{
  return Logger.logObject.getter();
}

uint64_t sub_10002BEA8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = v0;
  return swift_errorRetain(v0);
}

uint64_t sub_10002BEB4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v3[46] = v2;
  v3[47] = v1;
  v3[45] = result;
  return result;
}

void sub_10002BEC0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[42] = v0;
  v2[43] = v3;
  v2[41] = v1;
}

uint64_t sub_10002BECC()
{
  return swift_willThrow();
}

_QWORD *sub_10002BEEC(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;

  *result = v2;
  result[1] = v1;
  return result;
}

uint64_t sub_10002BF0C(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 536) = result;
  return result;
}

uint64_t sub_10002BF18()
{
  uint64_t v0;

  return swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 - 88));
}

uint64_t sub_10002BF24()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10002BF38()
{
  _QWORD *v0;

  return sub_10000650C(v0);
}

uint64_t sub_10002BF40()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10002BF4C()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_10002BF60()
{
  uint64_t v0;

  return swift_unknownObjectRetain(v0);
}

uint64_t sub_10002BF80()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

_QWORD *sub_10002BFB4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *result = v2;
  result[1] = a2;
  return result;
}

_QWORD *sub_10002BFC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  unsigned __int8 v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  unsigned __int8 v30;
  uint64_t v31;
  void (*v32)(_BYTE *, _QWORD);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v38[32];
  _QWORD *v39;
  uint64_t v40;
  unsigned __int8 v41;
  _QWORD *v42;

  v4 = type metadata accessor for AssetInfo(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10001E654();
  v6 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v7 = a1;
    else
      v7 = a1 & 0xFFFFFFFFFFFFFF8;
    v8 = __CocoaSet.count.getter(v7);
    if (v8)
      goto LABEL_6;
LABEL_12:
    swift_release(a2);
    return _swiftEmptyArrayStorage;
  }
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_12;
LABEL_6:
  v42 = _swiftEmptyArrayStorage;
  sub_100011834();
  if (v6)
  {
    if (a1 < 0)
      v9 = a1;
    else
      v9 = a1 & 0xFFFFFFFFFFFFFF8;
    result = (_QWORD *)__CocoaSet.startIndex.getter(v9);
    v12 = 1;
  }
  else
  {
    result = (_QWORD *)sub_10001C854(a1);
    v12 = v13 & 1;
  }
  v39 = result;
  v40 = v11;
  v41 = v12;
  if (v8 < 0)
  {
    __break(1u);
LABEL_32:
    __break(1u);
  }
  else
  {
    v14 = a1 & 0xFFFFFFFFFFFFFF8;
    if (a1 < 0)
      v14 = a1;
    v35 = v4;
    v36 = v14;
    v34 = v2;
    do
    {
      v15 = sub_10007B728((uint64_t)v39, v40, v41, a1);
      sub_100080E4C();
      swift_release(v15);
      v16 = v42;
      if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0)
      {
        sub_100011834();
        v16 = v42;
      }
      v17 = v16[2];
      if (v17 >= v16[3] >> 1)
      {
        sub_100011834();
        v16 = v42;
      }
      v16[2] = v17 + 1;
      result = (_QWORD *)(*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))((unint64_t)v16+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v17, v2, v4);
      v42 = v16;
      if (v6)
      {
        if ((v41 & 1) == 0)
          goto LABEL_32;
        v18 = __CocoaSet.Index.handleBitPattern.getter(v39, v40);
        if (v18)
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
        else
          isUniquelyReferenced_nonNull_native = 1;
        v31 = sub_100002F78(&qword_1000FC510);
        v32 = (void (*)(_BYTE *, _QWORD))Set.Index._asCocoa.modify(v38, v31);
        __CocoaSet.formIndex(after:isUnique:)(v33, isUniquelyReferenced_nonNull_native, v36);
        v32(v38, 0);
      }
      else
      {
        v20 = (uint64_t)v39;
        v21 = v40;
        v22 = v41;
        v23 = v5;
        v24 = sub_10001C6FC(v39, v40, v41, a1);
        v26 = v25;
        v28 = v27;
        v29 = v22;
        v6 = a1 & 0xC000000000000001;
        sub_10001C7E4(v20, v21, v29);
        v39 = (_QWORD *)v24;
        v40 = v26;
        v5 = v23;
        v30 = v28 & 1;
        v2 = v34;
        v4 = v35;
        v41 = v30;
      }
      --v8;
    }
    while (v8);
    sub_10001C7E4((uint64_t)v39, v40, v41);
    swift_release(a2);
    return v42;
  }
  return result;
}

void sub_10002C280()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, unint64_t, uint64_t);
  uint64_t v15;
  char v16;
  uint64_t v17;

  sub_10001D810();
  v3 = v2;
  v5 = v4;
  v6 = type metadata accessor for Assertion.DaemonRep(0);
  v7 = sub_100037F30(v6);
  __chkstk_darwin(v7);
  sub_100037DB0();
  if (v8)
  {
    v9 = *(_QWORD *)(v3 + 40);
    sub_100006710(&qword_1000FB278, (uint64_t (*)(uint64_t))&type metadata accessor for Assertion.DaemonRep);
    dispatch thunk of Hashable._rawHashValue(seed:)(v9, v6, v10);
    sub_100037F1C();
    if (((*(_QWORD *)(v3 + 56 + ((v1 >> 3) & 0xFFFFFFFFFFFFF8)) >> v1) & 1) != 0)
    {
      v12 = ~v11;
      v13 = *(_QWORD *)(v17 + 72);
      v14 = *(void (**)(uint64_t, unint64_t, uint64_t))(v17 + 16);
      do
      {
        v14(v0, *(_QWORD *)(v3 + 48) + v13 * v1, v6);
        sub_100006710(&qword_1000FB280, (uint64_t (*)(uint64_t))&type metadata accessor for Assertion.DaemonRep);
        v16 = dispatch thunk of static Equatable.== infix(_:_:)(v0, v5, v6, v15);
        sub_100037F10(*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8));
        if ((v16 & 1) != 0)
          break;
        v1 = (v1 + 1) & v12;
      }
      while (((*(_QWORD *)(v3 + 56 + ((v1 >> 3) & 0xFFFFFFFFFFFFF8)) >> v1) & 1) != 0);
    }
  }
  sub_100006A68();
}

void sub_10002C3B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  Swift::Int v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  char v22;
  _BYTE v23[72];

  if (*(_QWORD *)(a3 + 16))
  {
    sub_100037F58();
    sub_10001DC4C(*(_QWORD *)(v6 + 40), v7);
    String.hash(into:)(v23, v4, v3);
    v8 = sub_10001DBF4();
    v9 = -1 << *(_BYTE *)(a3 + 32);
    v10 = v8 & ~v9;
    sub_10001E8D8();
    if ((v11 & 1) != 0)
    {
      v12 = *(_QWORD *)(a3 + 48);
      v13 = (uint64_t *)(v12 + 16 * v10);
      v14 = v13[1];
      if ((*v13 != v4 || v14 != v3) && (sub_10001DB04(*v13, v14, v4, v3) & 1) == 0)
      {
        v16 = ~v9;
        v17 = (v10 + 1) & v16;
        sub_10001E8D8();
        if ((v18 & 1) != 0)
        {
          do
          {
            v19 = (uint64_t *)(v12 + 16 * v17);
            v20 = v19[1];
            if (*v19 == v4 && v20 == v3)
              break;
            if ((sub_10001DB04(*v19, v20, v4, v3) & 1) != 0)
              break;
            v17 = (v17 + 1) & v16;
            sub_10001E8D8();
          }
          while ((v22 & 1) != 0);
        }
      }
    }
  }
}

uint64_t sub_10002C4B0(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  Swift::Int v8;
  uint64_t v9;
  Swift::Int v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;

  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      sub_10001DC4C(*(_QWORD *)(a2 + 40), a2);
      sub_10008B000();
      v8 = sub_10001DBF4();
      v9 = -1 << *(_BYTE *)(a2 + 32);
      v10 = v8 & ~v9;
      sub_100037D08();
      if ((v11 & 1) != 0)
      {
        type metadata accessor for InferenceProviderAsset(0);
        swift_retain();
        sub_10008AE98();
        sub_100038078();
        if ((v2 & 1) != 0)
        {
          v12 = 1;
          return v12 & 1;
        }
        v13 = ~v9;
        v14 = (v10 + 1) & v13;
        sub_100037D08();
        if ((v15 & 1) != 0)
        {
          do
          {
            v16 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v14);
            sub_10001E900();
            v12 = sub_10008AE98();
            swift_release(v16);
            if ((v12 & 1) != 0)
              break;
            v14 = (v14 + 1) & v13;
            sub_100037D08();
          }
          while ((v17 & 1) != 0);
          return v12 & 1;
        }
      }
    }
    v12 = 0;
    return v12 & 1;
  }
  if (a2 < 0)
    v4 = a2;
  else
    v4 = a2 & 0xFFFFFFFFFFFFFF8;
  v5 = sub_10002B400();
  v6 = __CocoaSet.contains(_:)(v5, v4);
  sub_10001D930();
  return v6 & 1;
}

void sub_10002C5E4()
{
  sub_10002C61C();
}

void sub_10002C600()
{
  sub_10002C61C();
}

void sub_10002C61C()
{
  unint64_t *v0;
  unint64_t *v1;
  unint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;

  sub_10001D810();
  v24 = v0;
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = sub_100002F78(v3);
  v10 = sub_100037F30(v9);
  __chkstk_darwin(v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v6 + 16))
  {
    v13 = *(_QWORD *)(v6 + 40);
    sub_100006744(v2, v4);
    v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v13, v9, v14);
    v16 = -1 << *(_BYTE *)(v6 + 32);
    v17 = v15 & ~v16;
    if (((*(_QWORD *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
    {
      v23 = ~v16;
      v18 = *(_QWORD *)(v25 + 72);
      v19 = *(void (**)(char *, unint64_t, uint64_t))(v25 + 16);
      do
      {
        v19(v12, *(_QWORD *)(v6 + 48) + v18 * v17, v9);
        sub_100006744(v24, v4);
        v21 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v8, v9, v20);
        (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v9);
        if ((v21 & 1) != 0)
          break;
        v17 = (v17 + 1) & v23;
      }
      while (((*(_QWORD *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0);
    }
  }
  sub_100006A68();
}

uint64_t sub_10002C77C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  char v17;
  _BYTE v18[72];

  v3 = a2;
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      sub_10001DC4C(*(_QWORD *)(a2 + 40), a2);
      v8 = a1 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_id;
      v9 = sub_100002F78(&qword_1000FB2A0);
      sub_100006744(&qword_1000FB2A8, &qword_1000FB2A0);
      dispatch thunk of Hashable.hash(into:)(v18, v9, v10);
      v11 = sub_10001DBF4() & ~(-1 << *(_BYTE *)(v3 + 32));
      if (((*(_QWORD *)(v3 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
      {
        v12 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v11) + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_id;
        v13 = type metadata accessor for OneShotRequest(0);
        swift_retain();
        static UUIDIdentifier.== infix(_:_:)(v12, v8, v13);
        sub_100038078();
        if ((v12 & 1) != 0)
        {
          v14 = 1;
          return v14 & 1;
        }
        sub_100037E14();
        if ((v15 & 1) != 0)
        {
          do
          {
            v16 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v2) + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_id;
            swift_retain();
            v14 = static UUIDIdentifier.== infix(_:_:)(v16, v8, v13);
            sub_10002B88C();
            if ((v14 & 1) != 0)
              break;
            sub_100037E14();
          }
          while ((v17 & 1) != 0);
          return v14 & 1;
        }
      }
    }
    v14 = 0;
    return v14 & 1;
  }
  if (a2 >= 0)
    v3 = a2 & 0xFFFFFFFFFFFFFF8;
  v5 = sub_10001E194();
  v6 = __CocoaSet.contains(_:)(v5, v3);
  sub_10001D9C0();
  return v6 & 1;
}

uint64_t sub_10002C934()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v0 = type metadata accessor for Logger(0);
  sub_100002FB8(v0, qword_1000FBF58);
  v1 = sub_100002FF8(v0, (uint64_t)qword_1000FBF58);
  v2 = *(_QWORD *)(v0 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  generalLogger.getter(v3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v2 + 32))(v1, v5, v0);
}

uint64_t sub_10002C9CC()
{
  return swift_task_switch(sub_10002C9E0, 0, 0);
}

uint64_t sub_10002C9E0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  sub_100037A28();
  v28 = v2;
  v29 = v3;
  v27 = v1;
  if (qword_1000FB0E0 != -1)
    swift_once(&qword_1000FB0E0, sub_10002C934);
  v4 = sub_10001DD64();
  sub_100037AC4(v4, (uint64_t)qword_1000FBF58);
  v5 = sub_100037B50();
  if (sub_10001E6C4(v5))
  {
    v6 = (_DWORD *)sub_10001D8D4(12);
    v7 = sub_10001D8D4(32);
    v26 = v7;
    *v6 = 136315138;
    *(_QWORD *)(v1 + 16) = ((uint64_t (*)(_QWORD))type metadata accessor for ModelXPCRequest.ExecuteRequest)(0);
    v8 = sub_100002F78(&qword_1000FC650);
    v9 = sub_100037AD8(v8);
    sub_1000102C0(v9, v10, &v26);
    *(_QWORD *)(v1 + 16) = v11;
    sub_10002B2B8(v1 + 16, v1 + 24);
    sub_10002B684();
    sub_1000379D8((void *)&_mh_execute_header, v12, v13, "Unhandled message with direct reply of type: %s");
    sub_100037A18();
    sub_10001D790(v7);
    sub_10001D790((uint64_t)v6);
  }

  v14 = sub_10002B8A0();
  sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
  sub_10002B560(v14, v15);
  v17 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, enum case for ModelManagerError.internalError(_:), v14);
  swift_willThrow(v17, v18, v19, v20, v21, v22, v23, v24);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10002CB68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 72) = a3;
  *(_QWORD *)(v4 + 80) = a4;
  return swift_task_switch(sub_10002CB80, 0, 0);
}

uint64_t sub_10002CB80()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t (*v19)(void);

  sub_100037A28();
  if (qword_1000FB0E0 != -1)
    swift_once(&qword_1000FB0E0, sub_10002C934);
  v3 = sub_10001DD64();
  sub_100037AC4(v3, (uint64_t)qword_1000FBF58);
  v4 = sub_100037B50();
  if (sub_10001E6C4(v4))
  {
    v5 = sub_1000379C0();
    sub_10001D8D4(32);
    sub_100037B70();
    v6 = sub_100037A54(4.8149e-34);
    *(_QWORD *)(v1 + 56) = type metadata accessor for ModelXPCRequest.FetchModelInstance(v6);
    v7 = sub_100002F78(&qword_1000FC428);
    v8 = sub_100037AD8(v7);
    sub_100037AFC(v8, v9, v10);
    sub_1000379A8(v11);
    sub_10001E4C0();
    sub_1000379D8((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_100037A18();
    sub_10001D790(v2);
    sub_10001D790(v5);
  }

  sub_100037B7C();
  v14 = sub_100002F78(&qword_1000FC378);
  sub_100037B9C(v14);
  v15 = sub_100037300(&qword_1000FC380);
  sub_100037AE4(v15);
  v16 = sub_10002B8A0();
  sub_100037990(v16);
  sub_100037A44();
  v17 = (_QWORD *)sub_1000379EC();
  *(_QWORD *)(v1 + 88) = v17;
  v18 = sub_100037A00(v17, (uint64_t)sub_10002CCB8);
  return sub_100037974(v18, v19);
}

uint64_t sub_10002CCB8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  sub_100037C2C();
  sub_10001D680(*(_QWORD *)(v2 + 88));
  sub_10000650C(v0);
  return sub_100006A38(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10002CCEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 72) = a3;
  *(_QWORD *)(v4 + 80) = a4;
  return swift_task_switch(sub_10002CD04, 0, 0);
}

uint64_t sub_10002CD04()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t (*v19)(void);

  sub_100037A28();
  if (qword_1000FB0E0 != -1)
    swift_once(&qword_1000FB0E0, sub_10002C934);
  v3 = sub_10001DD64();
  sub_100037AC4(v3, (uint64_t)qword_1000FBF58);
  v4 = sub_100037B50();
  if (sub_10001E6C4(v4))
  {
    v5 = sub_1000379C0();
    sub_10001D8D4(32);
    sub_100037B70();
    v6 = sub_100037A54(4.8149e-34);
    *(_QWORD *)(v1 + 56) = type metadata accessor for ModelXPCRequest.CancelRequest(v6);
    v7 = sub_100002F78(&qword_1000FC5C0);
    v8 = sub_100037AD8(v7);
    sub_100037AFC(v8, v9, v10);
    sub_1000379A8(v11);
    sub_10001E4C0();
    sub_1000379D8((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_100037A18();
    sub_10001D790(v2);
    sub_10001D790(v5);
  }

  sub_100037B7C();
  v14 = sub_100002F78(&qword_1000FC378);
  sub_100037B9C(v14);
  v15 = sub_100037300(&qword_1000FC380);
  sub_100037AE4(v15);
  v16 = sub_10002B8A0();
  sub_100037990(v16);
  sub_100037A44();
  v17 = (_QWORD *)sub_1000379EC();
  *(_QWORD *)(v1 + 88) = v17;
  v18 = sub_100037A00(v17, (uint64_t)sub_100037970);
  return sub_100037974(v18, v19);
}

uint64_t sub_10002CE3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 72) = a3;
  *(_QWORD *)(v4 + 80) = a4;
  return swift_task_switch(sub_10002CE54, 0, 0);
}

uint64_t sub_10002CE54()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t (*v19)(void);

  sub_100037A28();
  if (qword_1000FB0E0 != -1)
    swift_once(&qword_1000FB0E0, sub_10002C934);
  v3 = sub_10001DD64();
  sub_100037AC4(v3, (uint64_t)qword_1000FBF58);
  v4 = sub_100037B50();
  if (sub_10001E6C4(v4))
  {
    v5 = sub_1000379C0();
    sub_10001D8D4(32);
    sub_100037B70();
    v6 = sub_100037A54(4.8149e-34);
    *(_QWORD *)(v1 + 56) = type metadata accessor for ModelXPCRequest.AcquireRequest(v6);
    v7 = sub_100002F78(&qword_1000FC5A0);
    v8 = sub_100037AD8(v7);
    sub_100037AFC(v8, v9, v10);
    sub_1000379A8(v11);
    sub_10001E4C0();
    sub_1000379D8((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_100037A18();
    sub_10001D790(v2);
    sub_10001D790(v5);
  }

  sub_100037B7C();
  v14 = sub_100002F78(&qword_1000FC378);
  sub_100037B9C(v14);
  v15 = sub_100037300(&qword_1000FC380);
  sub_100037AE4(v15);
  v16 = sub_10002B8A0();
  sub_100037990(v16);
  sub_100037A44();
  v17 = (_QWORD *)sub_1000379EC();
  *(_QWORD *)(v1 + 88) = v17;
  v18 = sub_100037A00(v17, (uint64_t)sub_100037970);
  return sub_100037974(v18, v19);
}

uint64_t sub_10002CF8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 72) = a3;
  *(_QWORD *)(v4 + 80) = a4;
  return swift_task_switch(sub_10002CFA4, 0, 0);
}

uint64_t sub_10002CFA4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t (*v19)(void);

  sub_100037A28();
  if (qword_1000FB0E0 != -1)
    swift_once(&qword_1000FB0E0, sub_10002C934);
  v3 = sub_10001DD64();
  sub_100037AC4(v3, (uint64_t)qword_1000FBF58);
  v4 = sub_100037B50();
  if (sub_10001E6C4(v4))
  {
    v5 = sub_1000379C0();
    sub_10001D8D4(32);
    sub_100037B70();
    v6 = sub_100037A54(4.8149e-34);
    *(_QWORD *)(v1 + 56) = type metadata accessor for ModelXPCRequest.PrewarmSession(v6);
    v7 = sub_100002F78(&qword_1000FC680);
    v8 = sub_100037AD8(v7);
    sub_100037AFC(v8, v9, v10);
    sub_1000379A8(v11);
    sub_10001E4C0();
    sub_1000379D8((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_100037A18();
    sub_10001D790(v2);
    sub_10001D790(v5);
  }

  sub_100037B7C();
  v14 = sub_100002F78(&qword_1000FC378);
  sub_100037B9C(v14);
  v15 = sub_100037300(&qword_1000FC380);
  sub_100037AE4(v15);
  v16 = sub_10002B8A0();
  sub_100037990(v16);
  sub_100037A44();
  v17 = (_QWORD *)sub_1000379EC();
  *(_QWORD *)(v1 + 88) = v17;
  v18 = sub_100037A00(v17, (uint64_t)sub_100037970);
  return sub_100037974(v18, v19);
}

uint64_t sub_10002D0DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 72) = a3;
  *(_QWORD *)(v4 + 80) = a4;
  return swift_task_switch(sub_10002D0F4, 0, 0);
}

uint64_t sub_10002D0F4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t (*v19)(void);

  sub_100037A28();
  if (qword_1000FB0E0 != -1)
    swift_once(&qword_1000FB0E0, sub_10002C934);
  v3 = sub_10001DD64();
  sub_100037AC4(v3, (uint64_t)qword_1000FBF58);
  v4 = sub_100037B50();
  if (sub_10001E6C4(v4))
  {
    v5 = sub_1000379C0();
    sub_10001D8D4(32);
    sub_100037B70();
    v6 = sub_100037A54(4.8149e-34);
    *(_QWORD *)(v1 + 56) = type metadata accessor for ModelXPCRequest.ReleaseRequest(v6);
    v7 = sub_100002F78(&qword_1000FC580);
    v8 = sub_100037AD8(v7);
    sub_100037AFC(v8, v9, v10);
    sub_1000379A8(v11);
    sub_10001E4C0();
    sub_1000379D8((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_100037A18();
    sub_10001D790(v2);
    sub_10001D790(v5);
  }

  sub_100037B7C();
  v14 = sub_100002F78(&qword_1000FC378);
  sub_100037B9C(v14);
  v15 = sub_100037300(&qword_1000FC380);
  sub_100037AE4(v15);
  v16 = sub_10002B8A0();
  sub_100037990(v16);
  sub_100037A44();
  v17 = (_QWORD *)sub_1000379EC();
  *(_QWORD *)(v1 + 88) = v17;
  v18 = sub_100037A00(v17, (uint64_t)sub_100037970);
  return sub_100037974(v18, v19);
}

uint64_t sub_10002D22C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 72) = a3;
  *(_QWORD *)(v4 + 80) = a4;
  return swift_task_switch(sub_10002D244, 0, 0);
}

uint64_t sub_10002D244()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t (*v19)(void);

  sub_100037A28();
  if (qword_1000FB0E0 != -1)
    swift_once(&qword_1000FB0E0, sub_10002C934);
  v3 = sub_10001DD64();
  sub_100037AC4(v3, (uint64_t)qword_1000FBF58);
  v4 = sub_100037B50();
  if (sub_10001E6C4(v4))
  {
    v5 = sub_1000379C0();
    sub_10001D8D4(32);
    sub_100037B70();
    v6 = sub_100037A54(4.8149e-34);
    *(_QWORD *)(v1 + 56) = type metadata accessor for ModelXPCRequest.HoldAssetBundle(v6);
    v7 = sub_100002F78(&qword_1000FC490);
    v8 = sub_100037AD8(v7);
    sub_100037AFC(v8, v9, v10);
    sub_1000379A8(v11);
    sub_10001E4C0();
    sub_1000379D8((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_100037A18();
    sub_10001D790(v2);
    sub_10001D790(v5);
  }

  sub_100037B7C();
  v14 = sub_100002F78(&qword_1000FC378);
  sub_100037B9C(v14);
  v15 = sub_100037300(&qword_1000FC380);
  sub_100037AE4(v15);
  v16 = sub_10002B8A0();
  sub_100037990(v16);
  sub_100037A44();
  v17 = (_QWORD *)sub_1000379EC();
  *(_QWORD *)(v1 + 88) = v17;
  v18 = sub_100037A00(v17, (uint64_t)sub_100037970);
  return sub_100037974(v18, v19);
}

uint64_t sub_10002D37C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 72) = a3;
  *(_QWORD *)(v4 + 80) = a4;
  return swift_task_switch(sub_10002D394, 0, 0);
}

uint64_t sub_10002D394()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t (*v19)(void);

  sub_100037A28();
  if (qword_1000FB0E0 != -1)
    swift_once(&qword_1000FB0E0, sub_10002C934);
  v3 = sub_10001DD64();
  sub_100037AC4(v3, (uint64_t)qword_1000FBF58);
  v4 = sub_100037B50();
  if (sub_10001E6C4(v4))
  {
    v5 = sub_1000379C0();
    sub_10001D8D4(32);
    sub_100037B70();
    v6 = sub_100037A54(4.8149e-34);
    *(_QWORD *)(v1 + 56) = type metadata accessor for ModelXPCRequest.LoadAssetBundle(v6);
    v7 = sub_100002F78(&qword_1000FC4B0);
    v8 = sub_100037AD8(v7);
    sub_100037AFC(v8, v9, v10);
    sub_1000379A8(v11);
    sub_10001E4C0();
    sub_1000379D8((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_100037A18();
    sub_10001D790(v2);
    sub_10001D790(v5);
  }

  sub_100037B7C();
  v14 = sub_100002F78(&qword_1000FC378);
  sub_100037B9C(v14);
  v15 = sub_100037300(&qword_1000FC380);
  sub_100037AE4(v15);
  v16 = sub_10002B8A0();
  sub_100037990(v16);
  sub_100037A44();
  v17 = (_QWORD *)sub_1000379EC();
  *(_QWORD *)(v1 + 88) = v17;
  v18 = sub_100037A00(v17, (uint64_t)sub_100037970);
  return sub_100037974(v18, v19);
}

uint64_t sub_10002D4CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 72) = a3;
  *(_QWORD *)(v4 + 80) = a4;
  return swift_task_switch(sub_10002D4E4, 0, 0);
}

uint64_t sub_10002D4E4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t (*v19)(void);

  sub_100037A28();
  if (qword_1000FB0E0 != -1)
    swift_once(&qword_1000FB0E0, sub_10002C934);
  v3 = sub_10001DD64();
  sub_100037AC4(v3, (uint64_t)qword_1000FBF58);
  v4 = sub_100037B50();
  if (sub_10001E6C4(v4))
  {
    v5 = sub_1000379C0();
    sub_10001D8D4(32);
    sub_100037B70();
    v6 = sub_100037A54(4.8149e-34);
    *(_QWORD *)(v1 + 56) = type metadata accessor for ModelXPCRequest.FetchAssetsRequest(v6);
    v7 = sub_100002F78(&qword_1000FC520);
    v8 = sub_100037AD8(v7);
    sub_100037AFC(v8, v9, v10);
    sub_1000379A8(v11);
    sub_10001E4C0();
    sub_1000379D8((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_100037A18();
    sub_10001D790(v2);
    sub_10001D790(v5);
  }

  sub_100037B7C();
  v14 = sub_100002F78(&qword_1000FC378);
  sub_100037B9C(v14);
  v15 = sub_100037300(&qword_1000FC380);
  sub_100037AE4(v15);
  v16 = sub_10002B8A0();
  sub_100037990(v16);
  sub_100037A44();
  v17 = (_QWORD *)sub_1000379EC();
  *(_QWORD *)(v1 + 88) = v17;
  v18 = sub_100037A00(v17, (uint64_t)sub_100037970);
  return sub_100037974(v18, v19);
}

uint64_t sub_10002D61C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 72) = a3;
  *(_QWORD *)(v4 + 80) = a4;
  return swift_task_switch(sub_10002D634, 0, 0);
}

uint64_t sub_10002D634()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t (*v19)(void);

  sub_100037A28();
  if (qword_1000FB0E0 != -1)
    swift_once(&qword_1000FB0E0, sub_10002C934);
  v3 = sub_10001DD64();
  sub_100037AC4(v3, (uint64_t)qword_1000FBF58);
  v4 = sub_100037B50();
  if (sub_10001E6C4(v4))
  {
    v5 = sub_1000379C0();
    sub_10001D8D4(32);
    sub_100037B70();
    v6 = sub_100037A54(4.8149e-34);
    *(_QWORD *)(v1 + 56) = type metadata accessor for ModelXPCRequest.FetchPolicyRequest(v6);
    v7 = sub_100002F78(&qword_1000FC4D0);
    v8 = sub_100037AD8(v7);
    sub_100037AFC(v8, v9, v10);
    sub_1000379A8(v11);
    sub_10001E4C0();
    sub_1000379D8((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_100037A18();
    sub_10001D790(v2);
    sub_10001D790(v5);
  }

  sub_100037B7C();
  v14 = sub_100002F78(&qword_1000FC378);
  sub_100037B9C(v14);
  v15 = sub_100037300(&qword_1000FC380);
  sub_100037AE4(v15);
  v16 = sub_10002B8A0();
  sub_100037990(v16);
  sub_100037A44();
  v17 = (_QWORD *)sub_1000379EC();
  *(_QWORD *)(v1 + 88) = v17;
  v18 = sub_100037A00(v17, (uint64_t)sub_100037970);
  return sub_100037974(v18, v19);
}

uint64_t sub_10002D76C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 72) = a3;
  *(_QWORD *)(v4 + 80) = a4;
  return swift_task_switch(sub_10002D784, 0, 0);
}

uint64_t sub_10002D784()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t (*v19)(void);

  sub_100037A28();
  if (qword_1000FB0E0 != -1)
    swift_once(&qword_1000FB0E0, sub_10002C934);
  v3 = sub_10001DD64();
  sub_100037AC4(v3, (uint64_t)qword_1000FBF58);
  v4 = sub_100037B50();
  if (sub_10001E6C4(v4))
  {
    v5 = sub_1000379C0();
    sub_10001D8D4(32);
    sub_100037B70();
    v6 = sub_100037A54(4.8149e-34);
    *(_QWORD *)(v1 + 56) = type metadata accessor for ModelXPCRequest.CancelSessionRequest(v6);
    v7 = sub_100002F78(&qword_1000FC660);
    v8 = sub_100037AD8(v7);
    sub_100037AFC(v8, v9, v10);
    sub_1000379A8(v11);
    sub_10001E4C0();
    sub_1000379D8((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_100037A18();
    sub_10001D790(v2);
    sub_10001D790(v5);
  }

  sub_100037B7C();
  v14 = sub_100002F78(&qword_1000FC378);
  sub_100037B9C(v14);
  v15 = sub_100037300(&qword_1000FC380);
  sub_100037AE4(v15);
  v16 = sub_10002B8A0();
  sub_100037990(v16);
  sub_100037A44();
  v17 = (_QWORD *)sub_1000379EC();
  *(_QWORD *)(v1 + 88) = v17;
  v18 = sub_100037A00(v17, (uint64_t)sub_100037970);
  return sub_100037974(v18, v19);
}

uint64_t sub_10002D8BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 72) = a3;
  *(_QWORD *)(v4 + 80) = a4;
  return swift_task_switch(sub_10002D8D4, 0, 0);
}

uint64_t sub_10002D8D4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t (*v19)(void);

  sub_100037A28();
  if (qword_1000FB0E0 != -1)
    swift_once(&qword_1000FB0E0, sub_10002C934);
  v3 = sub_10001DD64();
  sub_100037AC4(v3, (uint64_t)qword_1000FBF58);
  v4 = sub_100037B50();
  if (sub_10001E6C4(v4))
  {
    v5 = sub_1000379C0();
    sub_10001D8D4(32);
    sub_100037B70();
    v6 = sub_100037A54(4.8149e-34);
    *(_QWORD *)(v1 + 56) = type metadata accessor for ModelXPCRequest.CreateSessionRequest(v6);
    v7 = sub_100002F78(&qword_1000FC6D0);
    v8 = sub_100037AD8(v7);
    sub_100037AFC(v8, v9, v10);
    sub_1000379A8(v11);
    sub_10001E4C0();
    sub_1000379D8((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_100037A18();
    sub_10001D790(v2);
    sub_10001D790(v5);
  }

  sub_100037B7C();
  v14 = sub_100002F78(&qword_1000FC378);
  sub_100037B9C(v14);
  v15 = sub_100037300(&qword_1000FC380);
  sub_100037AE4(v15);
  v16 = sub_10002B8A0();
  sub_100037990(v16);
  sub_100037A44();
  v17 = (_QWORD *)sub_1000379EC();
  *(_QWORD *)(v1 + 88) = v17;
  v18 = sub_100037A00(v17, (uint64_t)sub_100037970);
  return sub_100037974(v18, v19);
}

uint64_t sub_10002DA0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 72) = a3;
  *(_QWORD *)(v4 + 80) = a4;
  return swift_task_switch(sub_10002DA24, 0, 0);
}

uint64_t sub_10002DA24()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t (*v19)(void);

  sub_100037A28();
  if (qword_1000FB0E0 != -1)
    swift_once(&qword_1000FB0E0, sub_10002C934);
  v3 = sub_10001DD64();
  sub_100037AC4(v3, (uint64_t)qword_1000FBF58);
  v4 = sub_100037B50();
  if (sub_10001E6C4(v4))
  {
    v5 = sub_1000379C0();
    sub_10001D8D4(32);
    sub_100037B70();
    v6 = sub_100037A54(4.8149e-34);
    *(_QWORD *)(v1 + 56) = type metadata accessor for ModelXPCRequest.DeleteSessionRequest(v6);
    v7 = sub_100002F78(&qword_1000FC6B0);
    v8 = sub_100037AD8(v7);
    sub_100037AFC(v8, v9, v10);
    sub_1000379A8(v11);
    sub_10001E4C0();
    sub_1000379D8((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_100037A18();
    sub_10001D790(v2);
    sub_10001D790(v5);
  }

  sub_100037B7C();
  v14 = sub_100002F78(&qword_1000FC378);
  sub_100037B9C(v14);
  v15 = sub_100037300(&qword_1000FC380);
  sub_100037AE4(v15);
  v16 = sub_10002B8A0();
  sub_100037990(v16);
  sub_100037A44();
  v17 = (_QWORD *)sub_1000379EC();
  *(_QWORD *)(v1 + 88) = v17;
  v18 = sub_100037A00(v17, (uint64_t)sub_100037970);
  return sub_100037974(v18, v19);
}

uint64_t sub_10002DB5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 72) = a3;
  *(_QWORD *)(v4 + 80) = a4;
  return swift_task_switch(sub_10002DB74, 0, 0);
}

uint64_t sub_10002DB74()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t (*v19)(void);

  sub_100037A28();
  if (qword_1000FB0E0 != -1)
    swift_once(&qword_1000FB0E0, sub_10002C934);
  v3 = sub_10001DD64();
  sub_100037AC4(v3, (uint64_t)qword_1000FBF58);
  v4 = sub_100037B50();
  if (sub_10001E6C4(v4))
  {
    v5 = sub_1000379C0();
    sub_10001D8D4(32);
    sub_100037B70();
    v6 = sub_100037A54(4.8149e-34);
    *(_QWORD *)(v1 + 56) = type metadata accessor for ModelXPCRequest.SetAssetsHaveUpdated(v6);
    v7 = sub_100002F78(&qword_1000FC408);
    v8 = sub_100037AD8(v7);
    sub_100037AFC(v8, v9, v10);
    sub_1000379A8(v11);
    sub_10001E4C0();
    sub_1000379D8((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_100037A18();
    sub_10001D790(v2);
    sub_10001D790(v5);
  }

  sub_100037B7C();
  v14 = sub_100002F78(&qword_1000FC378);
  sub_100037B9C(v14);
  v15 = sub_100037300(&qword_1000FC380);
  sub_100037AE4(v15);
  v16 = sub_10002B8A0();
  sub_100037990(v16);
  sub_100037A44();
  v17 = (_QWORD *)sub_1000379EC();
  *(_QWORD *)(v1 + 88) = v17;
  v18 = sub_100037A00(v17, (uint64_t)sub_100037970);
  return sub_100037974(v18, v19);
}

uint64_t sub_10002DCAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 72) = a3;
  *(_QWORD *)(v4 + 80) = a4;
  return swift_task_switch(sub_10002DCC4, 0, 0);
}

uint64_t sub_10002DCC4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t (*v19)(void);

  sub_100037A28();
  if (qword_1000FB0E0 != -1)
    swift_once(&qword_1000FB0E0, sub_10002C934);
  v3 = sub_10001DD64();
  sub_100037AC4(v3, (uint64_t)qword_1000FBF58);
  v4 = sub_100037B50();
  if (sub_10001E6C4(v4))
  {
    v5 = sub_1000379C0();
    sub_10001D8D4(32);
    sub_100037B70();
    v6 = sub_100037A54(4.8149e-34);
    *(_QWORD *)(v1 + 56) = type metadata accessor for ModelXPCRequest.FetchAssertionsRequest(v6);
    v7 = sub_100002F78(&qword_1000FC560);
    v8 = sub_100037AD8(v7);
    sub_100037AFC(v8, v9, v10);
    sub_1000379A8(v11);
    sub_10001E4C0();
    sub_1000379D8((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_100037A18();
    sub_10001D790(v2);
    sub_10001D790(v5);
  }

  sub_100037B7C();
  v14 = sub_100002F78(&qword_1000FC378);
  sub_100037B9C(v14);
  v15 = sub_100037300(&qword_1000FC380);
  sub_100037AE4(v15);
  v16 = sub_10002B8A0();
  sub_100037990(v16);
  sub_100037A44();
  v17 = (_QWORD *)sub_1000379EC();
  *(_QWORD *)(v1 + 88) = v17;
  v18 = sub_100037A00(v17, (uint64_t)sub_100037970);
  return sub_100037974(v18, v19);
}

uint64_t sub_10002DDFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 72) = a3;
  *(_QWORD *)(v4 + 80) = a4;
  return swift_task_switch(sub_10002DE14, 0, 0);
}

uint64_t sub_10002DE14()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t (*v19)(void);

  sub_100037A28();
  if (qword_1000FB0E0 != -1)
    swift_once(&qword_1000FB0E0, sub_10002C934);
  v3 = sub_10001DD64();
  sub_100037AC4(v3, (uint64_t)qword_1000FBF58);
  v4 = sub_100037B50();
  if (sub_10001E6C4(v4))
  {
    v5 = sub_1000379C0();
    sub_10001D8D4(32);
    sub_100037B70();
    v6 = sub_100037A54(4.8149e-34);
    *(_QWORD *)(v1 + 56) = type metadata accessor for ModelXPCRequest.ForceAssetVersionSwitch(v6);
    v7 = sub_100002F78(&qword_1000FC468);
    v8 = sub_100037AD8(v7);
    sub_100037AFC(v8, v9, v10);
    sub_1000379A8(v11);
    sub_10001E4C0();
    sub_1000379D8((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_100037A18();
    sub_10001D790(v2);
    sub_10001D790(v5);
  }

  sub_100037B7C();
  v14 = sub_100002F78(&qword_1000FC378);
  sub_100037B9C(v14);
  v15 = sub_100037300(&qword_1000FC380);
  sub_100037AE4(v15);
  v16 = sub_10002B8A0();
  sub_100037990(v16);
  sub_100037A44();
  v17 = (_QWORD *)sub_1000379EC();
  *(_QWORD *)(v1 + 88) = v17;
  v18 = sub_100037A00(v17, (uint64_t)sub_100037970);
  return sub_100037974(v18, v19);
}

uint64_t sub_10002DF4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 72) = a3;
  *(_QWORD *)(v4 + 80) = a4;
  return swift_task_switch(sub_10002DF64, 0, 0);
}

uint64_t sub_10002DF64()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t (*v19)(void);

  sub_100037A28();
  if (qword_1000FB0E0 != -1)
    swift_once(&qword_1000FB0E0, sub_10002C934);
  v3 = sub_10001DD64();
  sub_100037AC4(v3, (uint64_t)qword_1000FBF58);
  v4 = sub_100037B50();
  if (sub_10001E6C4(v4))
  {
    v5 = sub_1000379C0();
    sub_10001D8D4(32);
    sub_100037B70();
    v6 = sub_100037A54(4.8149e-34);
    *(_QWORD *)(v1 + 56) = type metadata accessor for ModelXPCRequest.RestoreAssertionsRequest(v6);
    v7 = sub_100002F78(&qword_1000FC540);
    v8 = sub_100037AD8(v7);
    sub_100037AFC(v8, v9, v10);
    sub_1000379A8(v11);
    sub_10001E4C0();
    sub_1000379D8((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_100037A18();
    sub_10001D790(v2);
    sub_10001D790(v5);
  }

  sub_100037B7C();
  v14 = sub_100002F78(&qword_1000FC378);
  sub_100037B9C(v14);
  v15 = sub_100037300(&qword_1000FC380);
  sub_100037AE4(v15);
  v16 = sub_10002B8A0();
  sub_100037990(v16);
  sub_100037A44();
  v17 = (_QWORD *)sub_1000379EC();
  *(_QWORD *)(v1 + 88) = v17;
  v18 = sub_100037A00(v17, (uint64_t)sub_100037970);
  return sub_100037974(v18, v19);
}

uint64_t sub_10002E09C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 72) = a3;
  *(_QWORD *)(v4 + 80) = a4;
  return swift_task_switch(sub_10002E0B4, 0, 0);
}

uint64_t sub_10002E0B4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t (*v19)(void);

  sub_100037A28();
  if (qword_1000FB0E0 != -1)
    swift_once(&qword_1000FB0E0, sub_10002C934);
  v3 = sub_10001DD64();
  sub_100037AC4(v3, (uint64_t)qword_1000FBF58);
  v4 = sub_100037B50();
  if (sub_10001E6C4(v4))
  {
    v5 = sub_1000379C0();
    sub_10001D8D4(32);
    sub_100037B70();
    v6 = sub_100037A54(4.8149e-34);
    *(_QWORD *)(v1 + 56) = type metadata accessor for ModelXPCRequest.FetchDynamicAssetsRequest(v6);
    v7 = sub_100002F78(&qword_1000FC4F8);
    v8 = sub_100037AD8(v7);
    sub_100037AFC(v8, v9, v10);
    sub_1000379A8(v11);
    sub_10001E4C0();
    sub_1000379D8((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_100037A18();
    sub_10001D790(v2);
    sub_10001D790(v5);
  }

  sub_100037B7C();
  v14 = sub_100002F78(&qword_1000FC378);
  sub_100037B9C(v14);
  v15 = sub_100037300(&qword_1000FC380);
  sub_100037AE4(v15);
  v16 = sub_10002B8A0();
  sub_100037990(v16);
  sub_100037A44();
  v17 = (_QWORD *)sub_1000379EC();
  *(_QWORD *)(v1 + 88) = v17;
  v18 = sub_100037A00(v17, (uint64_t)sub_100037970);
  return sub_100037974(v18, v19);
}

uint64_t sub_10002E1EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 72) = a3;
  *(_QWORD *)(v4 + 80) = a4;
  return swift_task_switch(sub_10002E204, 0, 0);
}

uint64_t sub_10002E204()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t (*v19)(void);

  sub_100037A28();
  if (qword_1000FB0E0 != -1)
    swift_once(&qword_1000FB0E0, sub_10002C934);
  v3 = sub_10001DD64();
  sub_100037AC4(v3, (uint64_t)qword_1000FBF58);
  v4 = sub_100037B50();
  if (sub_10001E6C4(v4))
  {
    v5 = sub_1000379C0();
    sub_10001D8D4(32);
    sub_100037B70();
    v6 = sub_100037A54(4.8149e-34);
    *(_QWORD *)(v1 + 56) = type metadata accessor for ModelXPCRequest.DumpState(v6);
    v7 = sub_100002F78(&qword_1000FC448);
    v8 = sub_100037AD8(v7);
    sub_100037AFC(v8, v9, v10);
    sub_1000379A8(v11);
    sub_10001E4C0();
    sub_1000379D8((void *)&_mh_execute_header, v12, v13, "Unhandled message with callback reply of type: %s");
    sub_100037A18();
    sub_10001D790(v2);
    sub_10001D790(v5);
  }

  sub_100037B7C();
  v14 = sub_100002F78(&qword_1000FC378);
  sub_100037B9C(v14);
  v15 = sub_100037300(&qword_1000FC380);
  sub_100037AE4(v15);
  v16 = sub_10002B8A0();
  sub_100037990(v16);
  sub_100037A44();
  v17 = (_QWORD *)sub_1000379EC();
  *(_QWORD *)(v1 + 88) = v17;
  v18 = sub_100037A00(v17, (uint64_t)sub_100037970);
  return sub_100037974(v18, v19);
}

uint64_t sub_10002E33C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t SessionRequest;
  uint64_t (*v10)(uint64_t);
  unint64_t *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v2 = v1;
  v4 = type metadata accessor for ModelXPCRequest(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 == enum case for ModelXPCRequest.executeRequest(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    SessionRequest = type metadata accessor for ModelXPCRequest.ExecuteRequest(0);
    v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.ExecuteRequest;
    a1[3] = SessionRequest;
    v11 = (unint64_t *)&unk_1000FC000;
LABEL_39:
    sub_100006710(v11, v10);
    a1[4] = v12;
    sub_1000373B4(a1);
    return (*(uint64_t (**)(void))(*(_QWORD *)(SessionRequest - 8) + 32))();
  }
  if (v8 == enum case for ModelXPCRequest.cancelRequest(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    SessionRequest = type metadata accessor for ModelXPCRequest.CancelRequest(0);
    v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.CancelRequest;
    a1[3] = SessionRequest;
    v11 = (unint64_t *)&unk_1000FC020;
    goto LABEL_39;
  }
  if (v8 == enum case for ModelXPCRequest.createSession(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    SessionRequest = type metadata accessor for ModelXPCRequest.CreateSessionRequest(0);
    v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.CreateSessionRequest;
    a1[3] = SessionRequest;
    v11 = (unint64_t *)&unk_1000FBF80;
    goto LABEL_39;
  }
  if (v8 == enum case for ModelXPCRequest.deleteSession(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    SessionRequest = type metadata accessor for ModelXPCRequest.DeleteSessionRequest(0);
    v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.DeleteSessionRequest;
    a1[3] = SessionRequest;
    v11 = (unint64_t *)&unk_1000FBFA0;
    goto LABEL_39;
  }
  if (v8 == enum case for ModelXPCRequest.prewarmSession(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    SessionRequest = type metadata accessor for ModelXPCRequest.PrewarmSession(0);
    v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.PrewarmSession;
    a1[3] = SessionRequest;
    v11 = (unint64_t *)&unk_1000FBFC0;
    goto LABEL_39;
  }
  if (v8 == enum case for ModelXPCRequest.cancelSession(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    SessionRequest = type metadata accessor for ModelXPCRequest.CancelSessionRequest(0);
    v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.CancelSessionRequest;
    a1[3] = SessionRequest;
    v11 = (unint64_t *)&unk_1000FBFE0;
    goto LABEL_39;
  }
  if (v8 == enum case for ModelXPCRequest.acquireAssertion(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    SessionRequest = type metadata accessor for ModelXPCRequest.AcquireRequest(0);
    v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.AcquireRequest;
    a1[3] = SessionRequest;
    v11 = (unint64_t *)&unk_1000FC040;
    goto LABEL_39;
  }
  if (v8 == enum case for ModelXPCRequest.releaseAssertion(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    SessionRequest = type metadata accessor for ModelXPCRequest.ReleaseRequest(0);
    v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.ReleaseRequest;
    a1[3] = SessionRequest;
    v11 = (unint64_t *)&unk_1000FC060;
    goto LABEL_39;
  }
  if (v8 == enum case for ModelXPCRequest.fetchAssertions(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    SessionRequest = type metadata accessor for ModelXPCRequest.FetchAssertionsRequest(0);
    v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.FetchAssertionsRequest;
    a1[3] = SessionRequest;
    v11 = (unint64_t *)&unk_1000FC080;
    goto LABEL_39;
  }
  if (v8 == enum case for ModelXPCRequest.restoreAssertions(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    SessionRequest = type metadata accessor for ModelXPCRequest.RestoreAssertionsRequest(0);
    v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.RestoreAssertionsRequest;
    a1[3] = SessionRequest;
    v11 = (unint64_t *)&unk_1000FC0A0;
    goto LABEL_39;
  }
  if (v8 == enum case for ModelXPCRequest.fetchAssets(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    SessionRequest = type metadata accessor for ModelXPCRequest.FetchAssetsRequest(0);
    v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.FetchAssetsRequest;
    a1[3] = SessionRequest;
    v11 = (unint64_t *)&unk_1000FC0C0;
    goto LABEL_39;
  }
  if (v8 == enum case for ModelXPCRequest.fetchDynamicAssets(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    SessionRequest = type metadata accessor for ModelXPCRequest.FetchDynamicAssetsRequest(0);
    v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.FetchDynamicAssetsRequest;
    a1[3] = SessionRequest;
    v11 = (unint64_t *)&unk_1000FC0E0;
    goto LABEL_39;
  }
  if (v8 == enum case for ModelXPCRequest.fetchPolicy(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    SessionRequest = type metadata accessor for ModelXPCRequest.FetchPolicyRequest(0);
    v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.FetchPolicyRequest;
    a1[3] = SessionRequest;
    v11 = (unint64_t *)&unk_1000FC100;
    goto LABEL_39;
  }
  if (v8 == enum case for ModelXPCRequest.loadAssetBundle(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    SessionRequest = type metadata accessor for ModelXPCRequest.LoadAssetBundle(0);
    v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.LoadAssetBundle;
    a1[3] = SessionRequest;
    v11 = (unint64_t *)&unk_1000FC710;
    goto LABEL_39;
  }
  if (v8 == enum case for ModelXPCRequest.holdAssetBundle(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    SessionRequest = type metadata accessor for ModelXPCRequest.HoldAssetBundle(0);
    v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.HoldAssetBundle;
    a1[3] = SessionRequest;
    v11 = (unint64_t *)&unk_1000FC6F8;
    goto LABEL_39;
  }
  if (v8 == enum case for ModelXPCRequest.forceAssetVersionSwitch(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    SessionRequest = type metadata accessor for ModelXPCRequest.ForceAssetVersionSwitch(0);
    v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.ForceAssetVersionSwitch;
    a1[3] = SessionRequest;
    v11 = (unint64_t *)&unk_1000FC6E8;
    goto LABEL_39;
  }
  if (v8 == enum case for ModelXPCRequest.dumpState(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    SessionRequest = type metadata accessor for ModelXPCRequest.DumpState(0);
    v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.DumpState;
    a1[3] = SessionRequest;
    v11 = (unint64_t *)&unk_1000FC708;
    goto LABEL_39;
  }
  if (v8 == enum case for ModelXPCRequest.fetchModelInstance(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    SessionRequest = type metadata accessor for ModelXPCRequest.FetchModelInstance(0);
    v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.FetchModelInstance;
    a1[3] = SessionRequest;
    v11 = (unint64_t *)&unk_1000FC700;
    goto LABEL_39;
  }
  if (v8 == enum case for ModelXPCRequest.setAssetsHaveUpdated(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    SessionRequest = type metadata accessor for ModelXPCRequest.SetAssetsHaveUpdated(0);
    v10 = (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.SetAssetsHaveUpdated;
    a1[3] = SessionRequest;
    v11 = (unint64_t *)&unk_1000FC6F0;
    goto LABEL_39;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "modelmanagerd/ModelXPCDispatcher.swift", 38, 2, 85, 0);
  __break(1u);
  return result;
}

void sub_10002EA20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  SecTaskRef v24;
  __SecTask *v25;
  __CFString *v26;
  CFTypeRef v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  os_log_type_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __SecTask *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  audit_token_t token;

  if (((*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a4, a5) & 1) != 0
    && (os_variant_has_internal_content("ModelManager") & 1) == 0)
  {
    v33 = sub_10002B8A0();
    sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_10002B560(v33, v34);
    v36 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v35, enum case for ModelManagerError.notSupportedOnExternalBuild(_:), v33);
    goto LABEL_19;
  }
  v7 = sub_10002BE5C();
  v9 = v8(v7);
  v11 = v10;
  v12 = (os_unfair_lock_s *)(a3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(a3 + 24));
  v14 = *(_QWORD *)(a3 + 16);
  v13 = a3 + 16;
  sub_10002C3B4(v9, v11, v14);
  if (!v5)
  {
    v16 = v15;
    sub_100037F94();
    if ((v16 & 1) != 0)
    {
      swift_bridgeObjectRelease(v11);
      return;
    }
    v17 = AuditToken.processIdentifier.getter();
    *(_QWORD *)token.val = AuditToken.token.getter();
    token.val[2] = v18;
    token.val[3] = v19;
    token.val[4] = v20;
    token.val[5] = v21;
    token.val[6] = v22;
    token.val[7] = v23;
    v24 = SecTaskCreateWithAuditToken(0, &token);
    if (v24)
    {
      *(_QWORD *)token.val = 0;
      v25 = v24;
      v26 = (__CFString *)String._bridgeToObjectiveC()();
      v106 = v25;
      v27 = SecTaskCopyValueForEntitlement(v25, v26, (CFErrorRef *)&token);

      v28 = *(void **)token.val;
      if (*(_QWORD *)token.val)
      {
        if (qword_1000FB0E0 != -1)
          swift_once(&qword_1000FB0E0, sub_10002C934);
        v29 = sub_10001DD64();
        v30 = sub_100002FF8(v29, (uint64_t)qword_1000FBF58);
        Logger.logObject.getter(v30);
        v31 = sub_10001E9D0();
        if (os_log_type_enabled(v30, v31))
        {
          v32 = (uint8_t *)sub_10001D8D4(8);
          *(_DWORD *)v32 = 67109120;
          LODWORD(v110) = v17;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, (char *)&v110 + 4, v32 + 4);
          _os_log_impl((void *)&_mh_execute_header, v30, v31, "SecTaskCopyValueForEntitlement failed for client %d", v32, 8u);
          sub_10001D790((uint64_t)v32);
        }

        goto LABEL_34;
      }
      if (v27
        && (v110 = (uint64_t)v27,
            swift_unknownObjectRetain(v27),
            (swift_dynamicCast(&v109, &v110, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for Bool, 6) & 1) != 0))
      {
        if ((v109 & 1) != 0)
        {
          os_unfair_lock_lock(v12);
          sub_10002F710(v13, v9, v11);
          sub_100037F94();
          swift_bridgeObjectRelease(v11);
          swift_unknownObjectRelease(v27);

          return;
        }
        if (qword_1000FB0E0 != -1)
          swift_once(&qword_1000FB0E0, sub_10002C934);
        v75 = sub_10001DD64();
        sub_100002FF8(v75, (uint64_t)qword_1000FBF58);
        v76 = sub_100037E8C();
        Logger.logObject.getter(v76);
        v77 = sub_10001E9D0();
        if (sub_100037DE4(v77))
        {
          v55 = (uint8_t *)sub_10001D8D4(18);
          v56 = sub_10001D8D4(32);
          v110 = v56;
          sub_100037C70(1.5047e-36, v56, v78, v79, v80, v81, v82, v83, v84, (uint64_t)v106, v109, SBYTE4(v109));
          v85 = sub_100037D48();
          sub_100037DD4(v85, v86);
          sub_100037CC0(v87, v88, v89, v90, v91, v92, v93, v94, v108, v109);
          sub_100037F88();
          v74 = "Client %d has entitlement %s set to false";
          goto LABEL_28;
        }
      }
      else
      {
        if (qword_1000FB0E0 != -1)
          swift_once(&qword_1000FB0E0, sub_10002C934);
        v52 = sub_10001DD64();
        sub_100002FF8(v52, (uint64_t)qword_1000FBF58);
        v53 = sub_100037E8C();
        Logger.logObject.getter(v53);
        v54 = sub_10001E9D0();
        if (sub_100037DE4(v54))
        {
          v55 = (uint8_t *)sub_10001D8D4(18);
          v56 = sub_10001D8D4(32);
          v110 = v56;
          sub_100037C70(1.5047e-36, v56, v57, v58, v59, v60, v61, v62, v63, (uint64_t)v106, v109, SBYTE4(v109));
          v64 = sub_100037D48();
          sub_100037DD4(v64, v65);
          sub_100037CC0(v66, v67, v68, v69, v70, v71, v72, v73, v107, v109);
          sub_100037F88();
          v74 = "Client %d missing entitlement %s";
LABEL_28:
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v26, (os_log_type_t)v13, v74, v55, 0x12u);
          swift_arrayDestroy(v56, 1);
          sub_10001D790(v56);
          sub_10001D790((uint64_t)v55);

LABEL_34:
          v95 = sub_10002B8A0();
          sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
          sub_10002B560(v95, v96);
          *v97 = v9;
          v97[1] = v11;
          v98 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v95 - 8) + 104))(v97, enum case for ModelManagerError.missingEntitlement(_:), v95);
          swift_willThrow(v98, v99, v100, v101, v102, v103, v104, v105);
          swift_unknownObjectRelease(v27);

          return;
        }
      }

      swift_bridgeObjectRelease_n(v11, 2);
      goto LABEL_34;
    }
    if (qword_1000FB0E0 != -1)
      swift_once(&qword_1000FB0E0, sub_10002C934);
    v44 = sub_10001DD64();
    v45 = sub_100002FF8(v44, (uint64_t)qword_1000FBF58);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)sub_10001D8D4(8);
      *(_DWORD *)v48 = 67109120;
      token.val[0] = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&token, &token.val[1], v48 + 4);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Could not find secTask for client %d", v48, 8u);
      sub_10001D790((uint64_t)v48);
    }

    v49 = sub_10002B8A0();
    sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_10002B560(v49, v50);
    *v51 = v9;
    v51[1] = v11;
    v36 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v49 - 8) + 104))(v51, enum case for ModelManagerError.missingEntitlement(_:), v49);
LABEL_19:
    swift_willThrow(v36, v37, v38, v39, v40, v41, v42, v43);
    return;
  }
  sub_100037F94();
  __break(1u);
}

uint64_t ModelXPCRequest.needsCallback.getter()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  char v2;
  _QWORD v4[4];

  sub_10002E33C(v4);
  sub_10001C830(v4, v4[3]);
  v0 = sub_10002BF40();
  v2 = v1(v0);
  sub_10000650C(v4);
  return v2 & 1;
}

void sub_10002F0E8()
{
  sub_100006710(&qword_1000FBF70, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest);
}

void sub_10002F114()
{
  sub_100006710(&qword_1000FBF78, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest);
}

void *sub_10002F140()
{
  return &protocol witness table for Never;
}

void *sub_10002F14C()
{
  return &protocol witness table for Never;
}

uint64_t sub_10002F158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[9] = a3;
  v4[10] = v3;
  v4[7] = a1;
  v4[8] = a2;
  return sub_100037AF0((uint64_t)sub_10002F16C);
}

uint64_t sub_10002F16C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  sub_10002E33C(v0 + 2);
  v1 = v0[5];
  v2 = v0[6];
  v3 = sub_10001C830(v0 + 2, v1);
  v4 = (_QWORD *)swift_task_alloc(dword_1000FC3EC);
  v0[11] = v4;
  *v4 = v0;
  v4[1] = sub_10002F1F4;
  return sub_10002F294(v0[7], (uint64_t)v3, v0[8], v0[9], v1, v2);
}

uint64_t sub_10002F1F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10001DB38();
  sub_100037FF0();
  *(_QWORD *)(v1 + 96) = v0;
  swift_task_dealloc(v2);
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_10002F240()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  sub_10000650C((_QWORD *)(v0 + 16));
  v1 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_100006A38(v1);
}

uint64_t sub_10002F268()
{
  uint64_t v0;

  sub_10000650C((_QWORD *)(v0 + 16));
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10002F294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[14] = a5;
  v6[15] = a6;
  v6[12] = a3;
  v6[13] = a4;
  v6[10] = a1;
  v6[11] = a2;
  return swift_task_switch(sub_10002F2B4, 0, 0);
}

uint64_t sub_10002F2B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t WitnessTable;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char *v37;

  sub_10001E6F0();
  v13 = v12[15];
  v14 = v12[10];
  v15 = *(int **)(v13 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(_QWORD *)(v13 + 8), v12[14], &protocol requirements base descriptor for XPCRequestProtocol, &associated type descriptor for XPCRequestProtocol.Response);
  v17 = type metadata accessor for ModelManagerError(255);
  sub_10003808C((unint64_t *)&qword_1000FB600);
  v19 = type metadata accessor for ModelXPCResult(0, AssociatedTypeWitness, v17, v18);
  *(_QWORD *)(v14 + 24) = v19;
  v20 = sub_100037D68();
  v21 = sub_100037D68();
  sub_10003808C(&qword_1000FC388);
  v23 = v22;
  sub_10003808C(&qword_1000FC390);
  v25 = v24;
  v12[2] = v20;
  v12[3] = v21;
  v12[4] = v23;
  v12[5] = v24;
  *(_QWORD *)(v14 + 32) = swift_getWitnessTable(&protocol conformance descriptor for <> ModelXPCResult<A, B>, v19);
  v12[6] = v20;
  v12[7] = v21;
  v12[8] = v23;
  v12[9] = v25;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModelXPCResult<A, B>, v19);
  sub_10003806C(WitnessTable);
  v37 = (char *)v15 + *v15;
  v27 = (_QWORD *)swift_task_alloc(v15[1]);
  v12[16] = v27;
  *v27 = v12;
  v27[1] = sub_10002F438;
  sub_10002B574();
  return v33(v28, v29, v30, v31, v32, v33, v34, v35, v37, a10, a11, a12);
}

uint64_t sub_10002F438()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10001DB38();
  sub_100037FF0();
  *(_QWORD *)(v2 + 136) = v0;
  swift_task_dealloc(v3);
  if (!v0)
    return sub_100006A38(*(uint64_t (**)(void))(v1 + 8));
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_10002F484()
{
  uint64_t v0;

  sub_1000373EC(*(_QWORD **)(v0 + 80));
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10002F4B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[10] = a4;
  v5[11] = v4;
  v5[8] = a2;
  v5[9] = a3;
  v5[7] = a1;
  return sub_100037AF0((uint64_t)sub_10002F4C8);
}

uint64_t sub_10002F4C8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v10)(uint64_t);

  v1 = v0[10];
  v2 = v0[9];
  sub_10002E33C(v0 + 2);
  v3 = v0[6];
  sub_10001C830(v0 + 2, v0[5]);
  v4 = sub_100006A80((uint64_t)&unk_1000F34B0, 32);
  v0[12] = v4;
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v1;
  v5 = *(int **)(v3 + 48);
  v6 = v5[1];
  v10 = (uint64_t (*)(uint64_t))((char *)v5 + *v5);
  sub_10001D7EC();
  v7 = (_QWORD *)swift_task_alloc(v6);
  v0[13] = v7;
  *v7 = v0;
  v7[1] = sub_10002F594;
  v8 = sub_10002BD0C(v0[7]);
  return v10(v8);
}

uint64_t sub_10002F594()
{
  uint64_t v0;

  v0 = sub_100038024();
  sub_10001D680(v0);
  sub_10001D9C0();
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_10002F5C8()
{
  uint64_t v0;

  sub_10000650C((_QWORD *)(v0 + 16));
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10002F5F0(_QWORD *a1, int *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  __int128 v7;

  v7 = *(_OWORD *)(a1 + 3);
  v4 = a1[3];
  sub_10001C830(a1, v4);
  *(_OWORD *)(v2 + 40) = v7;
  sub_1000373B4((_QWORD *)(v2 + 16));
  (*(void (**)(void))(*(_QWORD *)(v4 - 8) + 16))();
  *(_QWORD *)&v7 = (char *)a2 + *a2;
  v5 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 56) = v5;
  *v5 = v2;
  v5[1] = sub_10002F69C;
  return ((uint64_t (*)(uint64_t))v7)(v2 + 16);
}

uint64_t sub_10002F69C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  sub_100037C2C();
  sub_10001D680(*(_QWORD *)(v2 + 56));
  sub_10000650C(v0);
  return sub_100006A38(*(uint64_t (**)(void))(v1 + 8));
}

void sub_10002F6D4(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FBF80, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.CreateSessionRequest);
  *(_QWORD *)(a1 + 8) = v2;
}

#error "10002F74C: call analysis failed (funcsize=24)"

unint64_t sub_10002F770()
{
  return 0xD000000000000020;
}

unint64_t sub_10002F78C()
{
  return 0xD000000000000020;
}

unint64_t sub_10002F7A8()
{
  return 0xD00000000000001CLL;
}

void sub_10002F7C4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = sub_100002F78(&qword_1000FC3F0);
  v4 = sub_100006A80(v3, 24);
  *(_QWORD *)(v4 + 16) = 0;
  v1[3] = v4;
  v5 = sub_100002F78(&qword_1000FC3F8);
  v6 = sub_100006A80(v5, 28);
  *(_DWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 16) = &_swiftEmptySetSingleton;
  v1[4] = v6;
  v1[2] = a1;
  sub_100006C14();
}

void sub_10002F828()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint32_t v4;
  os_unfair_lock_s *v5;

  v1 = sub_10002BCD4();
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_10001E654();
  v3 = sub_100037FD4();
  v4 = AuditToken.processIdentifier.getter(v3);
  sub_100037F10(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  v5 = *(os_unfair_lock_s **)(v0 + 24);
  os_unfair_lock_lock(v5 + 5);
  if (!v5[4]._os_unfair_lock_opaque)
    v5[4]._os_unfair_lock_opaque = v4;
  os_unfair_lock_unlock(v5 + 5);
}

uint64_t sub_10002F8BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  v4 = sub_10002BCD4();
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v3[12] = sub_100037A68(v5);
  v3[13] = sub_10001EBC0();
  v6 = type metadata accessor for ModelXPCRequest(0);
  v3[14] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[15] = v7;
  v3[16] = sub_10001D800(v7);
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_10002F928()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 128);
  sub_100037FE4();
  sub_100037F64();
  sub_100037FD4();
  sub_100037E44();
  sub_100037C40();
  v2 = *(_QWORD *)(v0 + 104);
  if (v1)
  {
    v3 = *(_QWORD *)(v0 + 80);
    v4 = *(_QWORD *)(v0 + 88);
    sub_10002BF38();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
    v5 = *(_QWORD *)(v0 + 56);
    *(_QWORD *)(v5 + 24) = sub_100002F78(&qword_1000FC378);
    *(_QWORD *)(v5 + 32) = sub_100037300(&qword_1000FC3D8);
    v6 = sub_100037300(&qword_1000FC380);
    sub_10003806C(v6);
    v8 = v7;
    swift_errorRetain(v1);
    sub_100037F44();
    sub_100037AB8(v8);
    swift_errorRelease(v1);
    sub_100037BD4();
    sub_10001E330();
    sub_10001D938();
    sub_10001EAC8();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 88);
    sub_10002BF38();
    v11 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
    *(_QWORD *)(v0 + 136) = v11;
    v12 = sub_10002B7F8(v2, v11);
    TaskCancellingXPCReceivedMessage.auditToken.getter(v12);
    v13 = (_QWORD *)swift_task_alloc(dword_1000FC3E4);
    *(_QWORD *)(v0 + 144) = v13;
    *v13 = v0;
    v13[1] = sub_10002FA9C;
    return sub_10002F158(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 96));
  }
}

uint64_t sub_10002FA9C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 152) = v1;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v0 + 136))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
  sub_100037A7C();
  return sub_10001D6DC();
}

uint64_t sub_10002FAFC()
{
  uint64_t v0;

  sub_100037BD4();
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  return sub_10002B7C0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10002FB30()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD **)(v0 + 56);
  v2[3] = sub_100002F78(&qword_1000FC378);
  v2[4] = sub_100037300(&qword_1000FC3D8);
  v2[5] = sub_100037300(&qword_1000FC380);
  sub_1000373B4(v2);
  sub_10001E764();
  ModelManagerError.init(wrapping:)(v1);
  v3 = sub_10002BF40();
  sub_100037B20(v3, v4);
  swift_errorRelease(v1);
  sub_100037BD4();
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  return sub_10002B7C0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10002FBDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[14] = a3;
  v4[15] = v3;
  v4[12] = a1;
  v4[13] = a2;
  v5 = sub_10002BCD4();
  v4[16] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[17] = v6;
  v4[18] = sub_100037A68(v6);
  v4[19] = sub_10001EBC0();
  v7 = type metadata accessor for ModelXPCRequest(0);
  v4[20] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[21] = v8;
  v4[22] = sub_10001D800(v8);
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_10002FC48()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(_QWORD *);

  v1 = v0[22];
  sub_100037FE4();
  sub_100037F64();
  sub_100037FD4();
  sub_100037E44();
  sub_100037C40();
  v0[23] = v1;
  if (v1)
  {
    v2 = v0[19];
    v4 = v0[16];
    v3 = v0[17];
    v5 = (int *)v0[13];
    sub_10002BF38();
    v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v0[24] = v6;
    v6(v2, v4);
    v0[10] = sub_100002F78(&qword_1000FC378);
    v7 = sub_100037300(&qword_1000FC380);
    sub_100038060(v7);
    v9 = v8;
    swift_errorRetain(v1);
    ModelManagerError.init(wrapping:)(v1);
    sub_100037AB8(v9);
    v20 = (uint64_t (*)(_QWORD *))((char *)v5 + *v5);
    v10 = (_QWORD *)swift_task_alloc(v5[1]);
    v0[25] = v10;
    *v10 = v0;
    v10[1] = sub_10002FDC8;
    return v20(v0 + 7);
  }
  else
  {
    v12 = v0[17];
    sub_10002BF38();
    v13 = *(void (**)(uint64_t))(v12 + 8);
    v14 = sub_100037FBC();
    v13(v14);
    v0[26] = v13;
    sub_100037EF0();
    v15 = (_QWORD *)swift_task_alloc(dword_1000FC3BC);
    v0[27] = v15;
    *v15 = v0;
    v15[1] = sub_10002FE68;
    v16 = sub_10002BD0C(v0[15]);
    return sub_10002F4B0(v16, v17, v18, v19);
  }
}

uint64_t sub_10002FDC8()
{
  uint64_t v0;

  sub_100037FFC();
  sub_10001D680(*(_QWORD *)(v0 + 200));
  sub_100037E84();
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_10002FE00()
{
  uint64_t *v0;
  uint64_t **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_errorRelease(v0[23]);
  v0[26] = v0[24];
  sub_100037EF0();
  v1 = (uint64_t **)swift_task_alloc(dword_1000FC3BC);
  v0[27] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_10002FE68;
  v2 = sub_10002BD0C(v0[15]);
  return sub_10002F4B0(v2, v3, v4, v5);
}

uint64_t sub_10002FE68()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10001DB38();
  v1 = *(void (**)(uint64_t))(v0 + 208);
  sub_10001D680(*(_QWORD *)(v0 + 216));
  v2 = sub_10002BE5C();
  v1(v2);
  sub_100037A7C();
  return sub_100037B58(v3, v4, v5);
}

uint64_t sub_10002FEB0()
{
  uint64_t v0;

  sub_100037D00(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 168) + 8));
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  return sub_10002B7C0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10002FEF4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  if (qword_1000FB0E0 != -1)
    swift_once(&qword_1000FB0E0, sub_10002C934);
  v4 = sub_10001DD64();
  v5 = sub_100002FF8(v4, (uint64_t)qword_1000FBF58);
  sub_10002B5D4();
  v6 = sub_10002B5D4();
  Logger.logObject.getter(v6);
  v7 = sub_100037FDC();
  if (sub_10002B3F8(v5))
  {
    v8 = (uint8_t *)sub_10001D8D4(12);
    v9 = (_QWORD *)sub_10001D8D4(8);
    *(_DWORD *)v8 = 138412290;
    sub_10002B5D4();
    v10 = _swift_stdlib_bridgeErrorToNSError(a1);
    v20 = v10;
    sub_10002B2B8((uint64_t)&v20, (uint64_t)&v21);
    *v9 = v10;
    sub_10002B498();
    sub_10002B498();
    sub_10001E18C((void *)&_mh_execute_header, v5, v7, "Error during decoding the message %@", v8);
    sub_100002F78(&qword_1000FB8E0);
    sub_10001DBB8((uint64_t)v9);
    sub_10001D790((uint64_t)v9);
    sub_10001D790((uint64_t)v8);
  }
  else
  {
    sub_10002B498();
    sub_10002B498();
  }

  v11 = sub_100002F78(&qword_1000FC378);
  a2[3] = v11;
  a2[4] = sub_100037300(&qword_1000FC380);
  sub_1000373B4(a2);
  v13 = v12;
  v20 = 0;
  v21 = 0xE000000000000000;
  v19 = a1;
  v14 = sub_100002F78(&qword_1000FB5F8);
  _print_unlocked<A, B>(_:_:)(&v19, &v20, v14, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v15 = v21;
  *v13 = v20;
  v13[1] = v15;
  v16 = enum case for ModelManagerError.xpcError(_:);
  v17 = sub_10002B8A0();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v13, v16, v17);
  return sub_100037B20((uint64_t)v13, v11);
}

uint64_t sub_1000300FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint32_t os_unfair_lock_opaque;
  uint64_t v23;
  uint64_t v24;

  sub_10001D810();
  v23 = v2;
  v24 = v3;
  v5 = v4;
  v6 = sub_100038084();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100002F78(&qword_1000FB230);
  __chkstk_darwin(v10);
  sub_10001E654();
  type metadata accessor for _OSActivity(0);
  _OSActivity.__allocating_init(_:)("Client connection cancellation", 30, 2);
  v11 = *(os_unfair_lock_s **)(v0 + 24);
  os_unfair_lock_lock(v11 + 5);
  os_unfair_lock_opaque = v11[4]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v11 + 5);
  v12 = type metadata accessor for TaskPriority(0);
  sub_100037FA8(v1, 1, v13, v12);
  sub_10001DE08((uint64_t)v9, v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));
  v14 = *(unsigned __int8 *)(v7 + 80);
  v15 = (v14 + 32) & ~v14;
  v16 = (v8 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v17 = (v16 + 11) & 0xFFFFFFFFFFFFFFF8;
  v18 = swift_allocObject(&unk_1000F3488, v17 + 8, v14 | 7);
  *(_QWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v18 + 24) = 0;
  sub_10001DE08(v18 + v15, (uint64_t)v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32));
  *(_DWORD *)(v18 + v16) = os_unfair_lock_opaque;
  *(_QWORD *)(v18 + v17) = v0;
  sub_10002B400();
  v19 = sub_100002CAC(v1, (uint64_t)&unk_1000FC3A0, v18);
  swift_release(v19);
  _OSActivity.close()();
  return sub_10001D9C0();
}

uint64_t sub_100030280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_DWORD *)(v6 + 112) = a5;
  *(_QWORD *)(v6 + 32) = a4;
  *(_QWORD *)(v6 + 40) = a6;
  v7 = type metadata accessor for XPCRichError(0);
  *(_QWORD *)(v6 + 48) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 56) = v8;
  *(_QWORD *)(v6 + 64) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000302E4, 0, 0);
}

uint64_t sub_1000302E4()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(NSObject *, uint64_t, uint64_t);
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  os_log_type_t v25;
  _QWORD *v26;

  sub_10002B628();
  if (qword_1000FB0E0 != -1)
    swift_once(&qword_1000FB0E0, sub_10002C934);
  v1 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 56);
  v2 = *(NSObject **)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = sub_10001DD64();
  sub_100002FF8(v5, (uint64_t)qword_1000FBF58);
  v6 = *(void (**)(NSObject *, uint64_t, uint64_t))(v3 + 16);
  v6(v2, v1, v4);
  sub_10001E694();
  v7 = sub_10002B470();
  v8 = sub_100037E74(v7);
  v9 = *(_QWORD *)(v0 + 64);
  v10 = *(_QWORD *)(v0 + 48);
  v11 = *(int *)(v0 + 112);
  if (v8)
  {
    v12 = sub_10001D8D4(22);
    v26 = (_QWORD *)sub_10001D8D4(8);
    *(_DWORD *)v12 = 138412546;
    sub_100006710(&qword_1000FC3A8, (uint64_t (*)(uint64_t))&type metadata accessor for XPCRichError);
    v25 = v1;
    v14 = v11;
    v15 = sub_10002B560(v10, v13);
    v6(v16, v9, v10);
    v17 = _swift_stdlib_bridgeErrorToNSError(v15);
    *(_QWORD *)(v0 + 16) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v12 + 4);
    *v26 = v17;
    sub_100037E34();
    *(_WORD *)(v12 + 12) = 2048;
    *(_QWORD *)(v0 + 24) = v14;
    v18 = sub_10002BF40();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v18, v19, v20);
    sub_10002B4A0((void *)&_mh_execute_header, v2, v25, "Cancellation Handler with error %@, sessionManager invoked for removeAllSession with pid %ld", (uint8_t *)v12);
    sub_100002F78(&qword_1000FB8E0);
    sub_10001DBB8((uint64_t)v26);
    sub_10001D790((uint64_t)v26);
    sub_10001D790(v12);
  }
  else
  {
    sub_100037E34();
  }

  sub_100037F7C();
  *(_QWORD *)(v0 + 72) = v21;
  *(_QWORD *)(v0 + 80) = *(_QWORD *)(v21 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_sessionManager);
  sub_10001E194();
  v22 = (_QWORD *)sub_10001E784();
  *(_QWORD *)(v0 + 88) = v22;
  sub_10002BFB4(v22, (uint64_t)sub_1000304F0);
  sub_10002B864();
  return sub_100022208(v23);
}

uint64_t sub_1000304F0()
{
  uint64_t v0;

  v0 = sub_100038038();
  sub_10001D680(v0);
  sub_10001D9C0();
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_100030524()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 96) = *(_QWORD *)(*(_QWORD *)(v0 + 72)
                                   + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_policyManager);
  sub_10001E194();
  v1 = (_QWORD *)sub_10001E784();
  *(_QWORD *)(v0 + 104) = v1;
  *v1 = v0;
  v1[1] = sub_100030588;
  return sub_10000AE38(*(_DWORD *)(v0 + 112));
}

uint64_t sub_100030588()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_100038024();
  sub_10001D680(v1);
  sub_10001D9C0();
  sub_10001D938();
  return sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
}

_QWORD *sub_1000305C0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  return v0;
}

uint64_t sub_1000305EC()
{
  uint64_t v0;

  sub_1000305C0();
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t sub_10003060C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1000FC3D4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001D668;
  return sub_10002F8BC(a1, a2);
}

uint64_t sub_100030670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_1000FC3B4);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10001D668;
  return sub_10002FBDC(a1, a2, a3);
}

uint64_t sub_1000306D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to TaskCancellablePeerHandler.handleIncomingRequest(_:)[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10001CA84;
  return TaskCancellablePeerHandler.handleIncomingRequest(_:)(a1, a2, a3);
}

uint64_t sub_100030740()
{
  return sub_1000300FC();
}

uint64_t sub_100030760@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10002FEF4(a1, a2);
}

void sub_100030774(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_100002F78(&qword_1000FBBE8);
  v4 = type metadata accessor for ModelXPCMessageHandler();
  v5 = sub_100006A80(v4, 40);
  sub_10002F7C4(a1);
  v6 = v5;
  sub_10002B400();
  *a2 = TaskCancellingXPCPeerHandler.__allocating_init(handler:)(&v6);
  sub_100037E54();
}

uint64_t sub_1000307D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_release(*(_QWORD *)(v0 + 16));
  v1 = sub_10001DD64();
  sub_10001DD50(v1);
  sub_100037F50(OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_runningBoard);
  sub_100037F50(OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_osVariant);
  sub_100037E2C(OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_assetManager);
  sub_100037E2C(OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_policyManager);
  sub_100037E2C(OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_sessionManager);
  sub_100037F50(OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_modelCatalog);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_stateDumpManager + 16);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_stateDumpManager + 24);
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_stateDumpManager + 40);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_stateDumpManager + 48));
  swift_release(v4);
  sub_10002B88C();
  swift_release(v3);
  swift_release(v2);
  sub_10001D9C8();
  sub_10001D930();
  sub_100037E2C(OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_requestManager);
  return v0;
}

uint64_t sub_1000308C0()
{
  uint64_t v0;

  sub_1000307D8();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000308E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t SessionRequest;
  uint64_t v9;

  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  v5 = sub_100002F78(&qword_1000FBEA8);
  v4[8] = sub_10001D800(*(_QWORD *)(v5 - 8));
  v6 = sub_100002F78(&qword_1000FB2D8);
  v4[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[10] = v7;
  v4[11] = sub_100037A68(v7);
  v4[12] = sub_10001EBC0();
  SessionRequest = type metadata accessor for ModelXPCRequest.CreateSessionRequest(0);
  v4[13] = SessionRequest;
  v9 = *(_QWORD *)(SessionRequest - 8);
  v4[14] = v9;
  v4[15] = sub_100037A68(v9);
  v4[16] = sub_10001EBC0();
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_100030978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t Session;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;

  v48 = AuditToken.processIdentifier.getter(a1);
  if (qword_1000FB0E0 != -1)
    swift_once(&qword_1000FB0E0, sub_10002C934);
  v12 = *(_QWORD *)(v11 + 128);
  v13 = *(_QWORD *)(v11 + 112);
  v14 = *(_QWORD *)(v11 + 56);
  v15 = sub_10001DD64();
  *(_QWORD *)(v11 + 136) = sub_100002FF8(v15, (uint64_t)qword_1000FBF58);
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
  *(_QWORD *)(v11 + 144) = v16;
  sub_10001DE08(v12, v14, v16);
  v17 = sub_10001E694();
  v18 = static os_log_type_t.info.getter();
  v19 = sub_10002B3F8(v17);
  v20 = *(_QWORD *)(v11 + 128);
  v21 = *(_QWORD *)(v11 + 112);
  if (v19)
  {
    v22 = *(_QWORD *)(v11 + 96);
    v23 = *(_QWORD *)(v11 + 72);
    v44 = *(_QWORD *)(v11 + 80);
    v45 = *(_QWORD *)(v11 + 104);
    v24 = sub_10001D8D4(18);
    v46 = sub_10001D8D4(32);
    v50 = v46;
    *(_DWORD *)v24 = 136315394;
    ModelXPCRequest.CreateSessionRequest.id.getter();
    sub_100006744(&qword_1000FBE80, &qword_1000FB2D8);
    dispatch thunk of CustomStringConvertible.description.getter(v23, v25);
    v27 = v26;
    v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 8))(v22, v23);
    sub_100037FB0(v28, v29, &v50);
    *(_QWORD *)(v11 + 24) = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v11 + 24, v11 + 32, v24 + 4);
    swift_bridgeObjectRelease(v27);
    v31 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v31(v20, v45);
    *(_WORD *)(v24 + 12) = 1024;
    v32 = v48;
    *(_DWORD *)(v11 + 216) = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v11 + 216, v11 + 220, v24 + 14);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "XPC Handling createSessionRequest for client session %s from proceess %d", (uint8_t *)v24, 0x12u);
    sub_10001DBB8(v46);
    sub_10001D790(v46);
    sub_10001D790(v24);

  }
  else
  {
    v31 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v31(*(_QWORD *)(v11 + 128), *(_QWORD *)(v11 + 104));

    v32 = v48;
  }
  *(_QWORD *)(v11 + 152) = v31;
  sub_100037F7C();
  *(_QWORD *)(v11 + 160) = *(_QWORD *)(v33 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_sessionManager);
  v34 = sub_10001D7EC();
  Session = ModelXPCRequest.CreateSessionRequest.supportedAssetBundleIdentifiers.getter(v34);
  *(_QWORD *)(v11 + 168) = Session;
  v49 = ModelXPCRequest.CreateSessionRequest.useCaseIdentifier.getter();
  v37 = v36;
  *(_QWORD *)(v11 + 176) = v36;
  v47 = ModelXPCRequest.CreateSessionRequest.onBehalfOfPID.getter();
  v38 = ModelXPCRequest.CreateSessionRequest.parentOfOnBehalfOfPID.getter();
  v39 = ModelXPCRequest.CreateSessionRequest.containsSensitiveData.getter();
  ModelXPCRequest.CreateSessionRequest.loggingIdentifier.getter();
  *(_QWORD *)(v11 + 184) = v40;
  v41 = ModelXPCRequest.CreateSessionRequest.id.getter();
  ModelXPCRequest.CreateSessionRequest.alreadyLockedInferenceProvider.getter(v41);
  v42 = (_QWORD *)swift_task_alloc(dword_1000FBC84);
  *(_QWORD *)(v11 + 192) = v42;
  *v42 = v11;
  v42[1] = sub_100030C84;
  return sub_10001FBB0(Session, v49, v37, v47, v38, *(_QWORD *)(v11 + 48), v32, v39 & 1, a9, a10, a11);
}

uint64_t sub_100030C84()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  sub_10001E6F0();
  v2 = *(_QWORD *)(*v1 + 192);
  v3 = *(_QWORD *)(*v1 + 80);
  v11 = *(_QWORD *)(*v1 + 88);
  v5 = *(_QWORD *)(*v1 + 64);
  v4 = *(_QWORD *)(*v1 + 72);
  v12 = *v1;
  *(_QWORD *)(v12 + 200) = v0;
  swift_task_dealloc(v2);
  sub_10001D8B4();
  sub_10001EADC();
  sub_10001DA38();
  sub_10002B88C();
  sub_10002AD5C(v5, &qword_1000FBEA8);
  v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(_QWORD *)(v12 + 208) = v6;
  v6(v11, v4);
  sub_100037A7C();
  return sub_100037B34(v7, v8, v9);
}

uint64_t sub_100030D2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint8_t *a10, uint64_t a11, uint64_t (*a12)(uint64_t, uint64_t), uint64_t a13, void (*a14)(uint64_t, uint64_t), uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint8_t *, uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t, void (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  sub_10001E6D4();
  a25 = v28;
  a26 = v29;
  a24 = v27;
  v30 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v27 + 144))(*(_QWORD *)(v27 + 120), *(_QWORD *)(v27 + 56), *(_QWORD *)(v27 + 104));
  Logger.logObject.getter(v30);
  v31 = sub_100037C08();
  if (sub_100037B08(v26))
  {
    a11 = *(_QWORD *)(v27 + 120);
    a12 = *(uint64_t (**)(uint64_t, uint64_t))(v27 + 208);
    v32 = *(_QWORD *)(v27 + 96);
    a13 = *(_QWORD *)(v27 + 104);
    a14 = *(void (**)(uint64_t, uint64_t))(v27 + 152);
    v33 = *(_QWORD *)(v27 + 72);
    v34 = (uint8_t *)sub_10001D8D4(12);
    v35 = sub_10001D8D4(32);
    a15 = v35;
    *(_DWORD *)v34 = 136315138;
    a10 = v34 + 4;
    ModelXPCRequest.CreateSessionRequest.id.getter();
    sub_100006744(&qword_1000FBE80, &qword_1000FB2D8);
    dispatch thunk of CustomStringConvertible.description.getter(v33, v36);
    v38 = v37;
    v39 = a12(v32, v33);
    sub_100037FB0(v39, v40, &a15);
    *(_QWORD *)(v27 + 16) = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v27 + 16, v27 + 24, v34 + 4);
    swift_bridgeObjectRelease(v38);
    a14(a11, a13);
    sub_10001E18C((void *)&_mh_execute_header, v26, v31, "Completion of CreateSession for client session %s", v34);
    sub_10001DBB8(v35);
    sub_10001D790(v35);
    sub_10001D790((uint64_t)v34);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v27 + 152))(*(_QWORD *)(v27 + 120), *(_QWORD *)(v27 + 104));
  }

  v42 = *(_QWORD *)(v27 + 96);
  v43 = *(_QWORD *)(v27 + 32);
  ModelXPCRequest.CreateSessionRequest.id.getter();
  ModelXPCRequest.CreateSessionRequest.Response.init(sessionID:)(v42);
  v44 = sub_100002F78(&qword_1000FC6E0);
  sub_100037B68(v43, v44);
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  sub_10001E5D0();
  sub_10001E3E8();
  return v45(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t sub_100030F0C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  return sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100030F64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_1000FC6DC);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10001D668;
  return sub_1000308E4(a1, a2, a3);
}

uint64_t sub_100030FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000FC6C8 + dword_1000FC6C8);
  v9 = (_QWORD *)swift_task_alloc(unk_1000FC6CC);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_10001D668;
  return v11(a1, a2, a3, a4);
}

void sub_100031054(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FBF98, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.CreateSessionRequest);
  *(_QWORD *)(a1 + 8) = v2;
}

void sub_100031090(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FBFA0, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.DeleteSessionRequest);
  *(_QWORD *)(a1 + 8) = v2;
}

uint64_t sub_1000310CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = sub_100002F78(&qword_1000FB2D8);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = sub_10001D800(v5);
  v6 = type metadata accessor for ModelXPCRequest.DeleteSessionRequest(0);
  v3[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[10] = v7;
  v3[11] = sub_10001D800(v7);
  sub_100037A7C();
  return sub_10001D674();
}

#error "1000311FC: call analysis failed (funcsize=99)"

uint64_t sub_1000312E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  sub_10001D680(*(_QWORD *)(*(_QWORD *)v0 + 104));
  sub_10001D9C0();
  sub_10001EB58(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_100037A7C();
  return sub_10001D6DC();
}

uint64_t sub_100031344()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  v1 = *(_QWORD *)(v0 + 24);
  ModelXPCRequest.DeleteSessionRequest.Response.init()();
  v2 = sub_100002F78(&qword_1000FC6C0);
  sub_100037B68(v1, v2);
  sub_10001E330();
  sub_10001D938();
  v3 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_10002B7C0(v3);
}

uint64_t sub_10003139C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1000FC6BC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001D668;
  return sub_1000310CC(a1, a2);
}

uint64_t sub_1000313FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000FC6A8 + dword_1000FC6A8);
  v9 = (_QWORD *)swift_task_alloc(unk_1000FC6AC);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_10001D668;
  return v11(a1, a2, a3, a4);
}

void sub_100031484(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FBFB8, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.DeleteSessionRequest);
  *(_QWORD *)(a1 + 8) = v2;
}

void sub_1000314C0(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FBFC0, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.PrewarmSession);
  *(_QWORD *)(a1 + 8) = v2;
}

uint64_t sub_1000314FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v4 = sub_100002F78(&qword_1000FB230);
  v3[7] = sub_10001D800(*(_QWORD *)(v4 - 8));
  v5 = sub_10002B8A0();
  v3[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[9] = v6;
  v3[10] = sub_10001D800(v6);
  v7 = sub_100002F78(&qword_1000FB2D8);
  v3[11] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[12] = v8;
  v3[13] = sub_100037A68(v8);
  v3[14] = sub_10001EBC0();
  v9 = type metadata accessor for ModelXPCRequest.PrewarmSession(0);
  v3[15] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[16] = v10;
  v3[17] = sub_10001D800(v10);
  sub_100037A7C();
  return sub_10001D674();
}

#error "100031664: call analysis failed (funcsize=99)"

uint64_t sub_10003174C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = *v1;
  v2 = v8;
  sub_10001EA4C(&v8);
  *(_QWORD *)(v2 + 160) = v0;
  swift_task_dealloc(v3);
  sub_10002BC38(*(_QWORD *)(v2 + 96));
  sub_10001D930();
  sub_100037A7C();
  return sub_100037B58(v4, v5, v6);
}

uint64_t sub_1000317B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_100037EFC();
  v1 = *(_QWORD *)(v0 + 32);
  ((void (*)(void))ModelXPCRequest.PrewarmSession.Response.init())();
  v2 = sub_100002F78(&qword_1000FC6A0);
  sub_100037B68(v1, v2);
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  v3 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_10001D940(v3);
}

uint64_t sub_100031830()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 160);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  swift_errorRetain(v1);
  v4 = sub_100002F78(&qword_1000FB5F8);
  if (swift_dynamicCast(v2, v0 + 16, v4, v3, 0))
  {
    v5 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 88))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
    v6 = *(_QWORD *)(v0 + 72);
    if (v5 == enum case for ModelManagerError.inferenceError(_:))
    {
      sub_100037D00(*(uint64_t (**)(uint64_t))(v6 + 96));
      v7 = type metadata accessor for InferenceError(0);
      v8 = *(_QWORD *)(v7 - 8);
      v9 = sub_100037FC8(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 88));
      if ((_DWORD)v9 == enum case for InferenceError.assetVersionMismatch(_:))
      {
        v10 = v9;
        v11 = *(_QWORD *)(v0 + 56);
        v12 = *(_QWORD *)(v0 + 40);
        swift_errorRelease(*(_QWORD *)(v0 + 160));
        v13 = type metadata accessor for TaskPriority(0);
        sub_100037FA8(v11, 1, v14, v13);
        v15 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F3550, 40);
        v15[2] = 0;
        v15[3] = 0;
        v15[4] = v12;
        sub_10001E900();
        v16 = sub_100002CAC(v11, (uint64_t)&unk_1000FC698, (uint64_t)v15);
        swift_release(v16);
        sub_100006710((unint64_t *)&qword_1000FC620, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceError);
        sub_10002B560(v7, v17);
        v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 104))(v18, v10, v7);
        swift_willThrow(v19, v20, v21, v22, v23, v24, v25, v26);
      }
      else
      {
        (*(void (**)(_QWORD, uint64_t))(v8 + 8))(*(_QWORD *)(v0 + 80), v7);
      }
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v6 + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
    }
  }
  swift_errorRelease(*(_QWORD *)(v0 + 16));
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  return sub_100037D1C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100031A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_1000FC47C);
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = sub_10001D668;
  return sub_100031A50(a4);
}

uint64_t sub_100031A50(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return sub_100037AF0((uint64_t)sub_100031A60);
}

uint64_t sub_100031A60()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0[2] + 16);
  v2 = OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_requestManager;
  v0[3] = v1;
  v0[4] = v2;
  v0[5] = OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_assetManager;
  v0[6] = 0;
  v0[7] = *(_QWORD *)(v1 + v2);
  sub_10001E194();
  v3 = (_QWORD *)sub_10001E784();
  v0[8] = v3;
  sub_10002BFB4(v3, (uint64_t)sub_100031AC8);
  return sub_100037DCC();
}

uint64_t sub_100031AC8()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 64));
  sub_10001D9C0();
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_100031B00()
{
  _QWORD *v0;
  _QWORD *v1;

  v0[9] = *(_QWORD *)(v0[3] + v0[5]);
  sub_10001E194();
  v1 = (_QWORD *)sub_10001E784();
  v0[10] = v1;
  sub_10002BFB4(v1, (uint64_t)sub_100031B54);
  return sub_10005942C();
}

uint64_t sub_100031B54()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  sub_100037DF4();
  sub_100037EB4();
  *(_BYTE *)(v1 + 88) = v0;
  sub_10002BD30(v2);
  sub_10001D9C0();
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_100031B94()
{
  os_log_type_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  const char *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v10;

  if ((*(_BYTE *)(v2 + 88) & 1) != 0)
  {
    if (qword_1000FB0E0 != -1)
      swift_once(&qword_1000FB0E0, sub_10002C934);
    v3 = sub_10001DD64();
    sub_100037AC4(v3, (uint64_t)qword_1000FBF58);
    v4 = sub_100037FDC();
    if (!sub_100037E64(v4))
      goto LABEL_12;
    v5 = "Successfully forced an asset version switch";
LABEL_11:
    v8 = (uint8_t *)sub_10001D8D4(2);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v0, v5, v8, 2u);
    sub_10001D790((uint64_t)v8);
LABEL_12:

    return (*(uint64_t (**)(_QWORD))(v2 + 8))(*(unsigned __int8 *)(v2 + 88));
  }
  if (*(_QWORD *)(v2 + 48) == 9)
  {
    if (qword_1000FB0E0 != -1)
      swift_once(&qword_1000FB0E0, sub_10002C934);
    v6 = sub_10001DD64();
    sub_100037AC4(v6, (uint64_t)qword_1000FBF58);
    v7 = sub_100037FDC();
    if (!sub_100037E64(v7))
      goto LABEL_12;
    v5 = "Failed to force an asset version switch, multiple attempts to quiesce requests & asssets failed";
    goto LABEL_11;
  }
  ++*(_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 56) = *(_QWORD *)(*(_QWORD *)(v2 + 24) + *(_QWORD *)(v2 + 32));
  sub_10001E194();
  v10 = (_QWORD *)sub_10001E784();
  *(_QWORD *)(v2 + 64) = v10;
  sub_10002BFB4(v10, (uint64_t)sub_100031AC8);
  return sub_100037DCC();
}

uint64_t sub_100031CF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1000FC68C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001D668;
  return sub_1000314FC(a1, a2);
}

uint64_t sub_100031D58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000FC678 + dword_1000FC678);
  v9 = (_QWORD *)swift_task_alloc(unk_1000FC67C);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_10001D668;
  return v11(a1, a2, a3, a4);
}

void sub_100031DE0(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FBFD8, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.PrewarmSession);
  *(_QWORD *)(a1 + 8) = v2;
}

void sub_100031E1C(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FBFE0, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.CancelSessionRequest);
  *(_QWORD *)(a1 + 8) = v2;
}

uint64_t sub_100031E58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = sub_100002F78(&qword_1000FB2D8);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = sub_100037A68(v5);
  v3[9] = sub_10001EBC0();
  v6 = type metadata accessor for ModelXPCRequest.CancelSessionRequest(0);
  v3[10] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[11] = v7;
  v3[12] = sub_10001D800(v7);
  sub_100037A7C();
  return sub_10001D674();
}

#error "100031F90: call analysis failed (funcsize=99)"

uint64_t sub_100032078()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_10001DD0C();
  sub_10001DB38();
  v3 = *(_QWORD *)(v1 + 56);
  v2 = *(_QWORD *)(v1 + 64);
  sub_100037FF0();
  *(_QWORD *)(v4 + 120) = v0;
  swift_task_dealloc(v5);
  sub_10002B7F8(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_10001D930();
  sub_100037A7C();
  return sub_100037B28(v6, v7, v8);
}

uint64_t sub_1000320E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  v1 = *(_QWORD *)(v0 + 24);
  ModelXPCRequest.CancelSessionRequest.Response.init()();
  v2 = sub_100002F78(&qword_1000FC670);
  sub_100037B68(v1, v2);
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  v3 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_10001D940(v3);
}

uint64_t sub_10003214C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  sub_10001E330();
  sub_10001D938();
  return sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100032188(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1000FC66C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001D668;
  return sub_100031E58(a1, a2);
}

uint64_t sub_1000321E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000FC658 + dword_1000FC658);
  v9 = (_QWORD *)swift_task_alloc(unk_1000FC65C);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_10001D668;
  return v11(a1, a2, a3, a4);
}

void sub_100032270(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FBFF8, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.CancelSessionRequest);
  *(_QWORD *)(a1 + 8) = v2;
}

void sub_1000322AC(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FC000, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.ExecuteRequest);
  *(_QWORD *)(a1 + 8) = v2;
}

uint64_t sub_1000322E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[7] = a4;
  v5[8] = v4;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  v6 = sub_100002F78(&qword_1000FB2D8);
  v5[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[10] = v7;
  v5[11] = sub_100037A68(v7);
  v5[12] = sub_10001EBC0();
  v8 = sub_100002F78(&qword_1000FB2A0);
  v5[13] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[14] = v9;
  v5[15] = sub_100037A68(v9);
  v5[16] = sub_10001EBC0();
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_10003236C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  int v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  sub_10001E6D4();
  v19 = ModelXPCRequest.ExecuteRequest.id.getter();
  v20 = ModelXPCRequest.ExecuteRequest.sessionID.getter(v19);
  HIDWORD(a14) = AuditToken.auditUserIdentifier.getter(v20);
  if (qword_1000FB0E0 != -1)
    swift_once(&qword_1000FB0E0, sub_10002C934);
  v21 = *(_QWORD *)(v18 + 120);
  v22 = *(_QWORD *)(v18 + 128);
  v23 = *(_QWORD *)(v18 + 112);
  v25 = *(_QWORD *)(v18 + 88);
  v24 = *(_QWORD *)(v18 + 96);
  v26 = *(_QWORD *)(v18 + 72);
  v27 = *(_QWORD *)(v18 + 80);
  v28 = sub_10001DD64();
  sub_100002FF8(v28, (uint64_t)qword_1000FBF58);
  sub_10001DE08(v21, v22, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 16));
  v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v25, v24, v26);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter();
  v32 = v31;
  v33 = os_log_type_enabled(v30, v31);
  v35 = *(_QWORD *)(v18 + 80);
  v34 = *(_QWORD *)(v18 + 88);
  v36 = *(_QWORD *)(v18 + 72);
  if (v33)
  {
    a9 = v18 + 16;
    a10 = *(_QWORD *)(v18 + 88);
    HIDWORD(a12) = v32;
    v37 = sub_10001D8D4(22);
    a13 = sub_10001D8D4(64);
    a15 = a13;
    *(_DWORD *)v37 = 136315394;
    a11 = v35;
    sub_100006744((unint64_t *)&qword_1000FBEA0, &qword_1000FB2A0);
    v39 = sub_100037D90(v38);
    v23 = v40;
    sub_100037EC4(v39, v40, v41, v42, v43, v44, v45, v46);
    *(_QWORD *)(v18 + 16) = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v18 + 16, v18 + 24, v37 + 4);
    sub_10002B684();
    sub_100037ED4();
    *(_WORD *)(v37 + 12) = 2080;
    sub_100006744(&qword_1000FBE80, &qword_1000FB2D8);
    v49 = dispatch thunk of CustomStringConvertible.description.getter(v36, v48);
    sub_100037EC4(v49, v50, v51, v52, v53, v54, v55, v56);
    *(_QWORD *)(v18 + 24) = v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v18 + 24, v18 + 32, v37 + 14);
    sub_10001E034();
    v58 = *(_QWORD *)(v35 + 8);
    sub_100037ECC(v34);
    sub_10002B4A0((void *)&_mh_execute_header, v30, BYTE4(a12), "Received request %s (Session: %s)", (uint8_t *)v37);
    swift_arrayDestroy(a13, 2);
    sub_10001D790(a13);
    sub_10001D790(v37);
  }
  else
  {
    sub_100037ED4();
    v58 = *(_QWORD *)(v35 + 8);
    sub_100037ECC(v34);
  }

  *(_QWORD *)(v18 + 136) = v23;
  *(_QWORD *)(v18 + 144) = v58;
  v59 = *(_QWORD *)(v18 + 128);
  v60 = *(_QWORD *)(v18 + 96);
  v61 = *(_QWORD *)(v18 + 64);
  v62 = *(_QWORD *)(v18 + 32);
  v63 = swift_task_alloc(80);
  *(_QWORD *)(v18 + 152) = v63;
  v64 = *(_OWORD *)(v18 + 48);
  *(_QWORD *)(v63 + 16) = v62;
  *(_QWORD *)(v63 + 24) = v61;
  *(_QWORD *)(v63 + 32) = v59;
  *(_QWORD *)(v63 + 40) = v60;
  *(_DWORD *)(v63 + 48) = HIDWORD(a14);
  *(_OWORD *)(v63 + 56) = v64;
  v65 = (_QWORD *)swift_task_alloc(48);
  *(_QWORD *)(v18 + 160) = v65;
  v65[2] = v59;
  v65[3] = v62;
  v65[4] = v60;
  v66 = (_QWORD *)swift_task_alloc(async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:)[1]);
  *(_QWORD *)(v18 + 168) = v66;
  *v66 = v18;
  v66[1] = sub_100032664;
  sub_10001E3E8();
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(v67, v68, v69, v70, v71, v72, v73, v74, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t sub_100032664()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 168));
  sub_10001E330();
  sub_10001D938();
  sub_100037A7C();
  return sub_10001D6DC();
}

uint64_t sub_1000326A8()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10001DB68();
  v2 = *(void (**)(uint64_t))(v0 + 136);
  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 144);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 72);
  sub_100032720(*(_QWORD *)(v0 + 128), v3);
  v1(v3, v4);
  v5 = sub_100037FBC();
  v2(v5);
  sub_10001E330();
  sub_10001D938();
  sub_10001E490();
  sub_10002B504();
  return sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
}

void sub_100032720(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = sub_100002F78(&qword_1000FB2D8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100002F78(&qword_1000FB2A0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000FB0E0 != -1)
    swift_once(&qword_1000FB0E0, sub_10002C934);
  v12 = type metadata accessor for Logger(0);
  sub_100002FF8(v12, (uint64_t)qword_1000FBF58);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  v16 = v15;
  if (os_log_type_enabled(v14, v15))
  {
    v17 = swift_slowAlloc(22, -1);
    v32 = swift_slowAlloc(64, -1);
    v34 = v32;
    *(_DWORD *)v17 = 136315394;
    sub_100006744((unint64_t *)&qword_1000FBEA0, &qword_1000FB2A0);
    v31 = v16;
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v8, v18);
    v21 = v20;
    sub_1000102C0(v19, v20, &v34);
    v33 = v22;
    v30 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v17 + 4);
    swift_bridgeObjectRelease(v21);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    *(_WORD *)(v17 + 12) = 2080;
    sub_100006744(&qword_1000FBE80, &qword_1000FB2D8);
    v24 = dispatch thunk of CustomStringConvertible.description.getter(v4, v23);
    v26 = v25;
    sub_1000102C0(v24, v25, &v34);
    v33 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v17 + 14);
    swift_bridgeObjectRelease(v26);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v4);
    _os_log_impl((void *)&_mh_execute_header, v14, (os_log_type_t)v31, "Finished request %s (Session: %s)", (uint8_t *)v17, 0x16u);
    v28 = v32;
    swift_arrayDestroy(v32, 2);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v17, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

}

uint64_t sub_100032A18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(v8 + 160) = a7;
  *(_QWORD *)(v8 + 168) = a8;
  *(_DWORD *)(v8 + 384) = a6;
  *(_QWORD *)(v8 + 144) = a4;
  *(_QWORD *)(v8 + 152) = a5;
  *(_QWORD *)(v8 + 128) = a2;
  *(_QWORD *)(v8 + 136) = a3;
  v9 = type metadata accessor for ModelManagerError(0);
  *(_QWORD *)(v8 + 176) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 184) = v10;
  *(_QWORD *)(v8 + 192) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100002F78(&qword_1000FB230);
  *(_QWORD *)(v8 + 200) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100002F78(&qword_1000FB2A0);
  *(_QWORD *)(v8 + 208) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v8 + 216) = v13;
  v14 = *(_QWORD *)(v13 + 64);
  *(_QWORD *)(v8 + 224) = v14;
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 232) = swift_task_alloc(v15);
  *(_QWORD *)(v8 + 240) = swift_task_alloc(v15);
  *(_QWORD *)(v8 + 248) = swift_task_alloc(v15);
  v16 = type metadata accessor for TaskPriority(0);
  *(_QWORD *)(v8 + 256) = v16;
  v17 = *(_QWORD *)(v16 - 8);
  *(_QWORD *)(v8 + 264) = v17;
  *(_QWORD *)(v8 + 272) = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for ClientData(0);
  *(_QWORD *)(v8 + 280) = v18;
  v19 = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v8 + 288) = v19;
  *(_QWORD *)(v8 + 296) = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100032B44, 0, 0);
}

uint64_t sub_100032B44()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = v0[31];
  v2 = v0[27];
  v3 = v0[28];
  v4 = v0[26];
  v29 = v0[20];
  v30 = v0[21];
  v28 = v0[18];
  v0[38] = *(_QWORD *)(*(_QWORD *)(v0[16] + 16) + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_sessionManager);
  v5 = sub_10002B400();
  ModelXPCRequest.ExecuteRequest.isStream.getter(v5);
  v6 = ModelXPCRequest.ExecuteRequest.clientData.getter();
  ModelXPCRequest.ExecuteRequest.modelBundleID.getter(v6);
  v0[39] = v7;
  v0[40] = ModelXPCRequest.ExecuteRequest.requiredAssetIDs.getter();
  v8 = ModelXPCRequest.ExecuteRequest.taskPriority.getter();
  v9 = TaskPriority.init(rawValue:)(v8);
  ModelXPCRequest.ExecuteRequest.loggingIdentifier.getter(v9);
  v0[41] = v10;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v0[42] = v11;
  v11(v1, v28, v4);
  v12 = *(unsigned __int8 *)(v2 + 80);
  v13 = (v12 + 16) & ~v12;
  v14 = (v3 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = swift_allocObject(&unk_1000F3500, v14 + 16, v12 | 7);
  v0[43] = v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v15 + v13, v1, v4);
  v16 = (_QWORD *)(v15 + v14);
  *v16 = v29;
  v16[1] = v30;
  v17 = dword_1000FBCCC;
  swift_retain();
  v18 = (_QWORD *)swift_task_alloc(v17);
  v0[44] = v18;
  *v18 = v0;
  v18[1] = sub_100032CDC;
  sub_10001E3E8();
  return sub_1000283C4(v19, v20, v21, v22, v23, v24, v25, v26);
}

uint64_t sub_100032CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v28)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  sub_10002B628();
  v19 = *(_QWORD *)(*v17 + 352);
  v20 = *(_QWORD *)(*v17 + 304);
  v36 = *(_QWORD *)(*v17 + 320);
  v37 = *(_QWORD *)(*v17 + 288);
  v21 = *(_QWORD *)(*v17 + 272);
  v38 = *(_QWORD *)(*v17 + 280);
  v39 = *(_QWORD *)(*v17 + 296);
  v23 = *(_QWORD *)(*v17 + 256);
  v22 = *(_QWORD *)(*v17 + 264);
  v18 = *v17;
  *(_QWORD *)(*v17 + 360) = v16;
  swift_task_dealloc(v19);
  sub_10001D930();
  sub_10001EADC();
  sub_10001E4C0();
  swift_release(v20);
  swift_bridgeObjectRelease(v36);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v39, v38);
  if (v16)
  {
    sub_100037A7C();
    sub_10002B864();
    return swift_task_switch(v24, v25, v26);
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v18 + 296));
    sub_10001E330();
    sub_10001D938();
    sub_10001EAC8();
    sub_10001E490();
    sub_10002B504();
    sub_10002B528();
    sub_10001E5D0();
    sub_10002B864();
    return v28(v28, v29, v30, v31, v32, v33, v34, v35, a9, v36, v37, v38, v39, a14, a15, a16);
  }
}

uint64_t sub_100032DE0()
{
  uint64_t v0;

  sub_100037FFC();
  sub_10001D680(*(_QWORD *)(v0 + 368));
  sub_100037E84();
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_100032E18()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  sub_100037EFC();
  swift_errorRelease(*(_QWORD *)(v0 + 96));
  sub_100037CE8();
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  v1 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_10001D940(v1);
}

uint64_t sub_100032E6C()
{
  uint64_t v0;

  sub_100037C2C();
  sub_10001D680(*(_QWORD *)(v0 + 376));
  sub_100037E84();
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_100032EA4()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  sub_100037EFC();
  swift_errorRelease(*(_QWORD *)(v0 + 360));
  sub_100037CE8();
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  v1 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_10001D940(v1);
}

uint64_t sub_100032EF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t *a9, NSObject *a10, NSObject *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  int v61;
  _BOOL4 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t (*v84)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint8_t *, NSObject *, NSObject *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;

  sub_10001E6D4();
  v19 = v18[45];
  v18[12] = v19;
  v20 = v18[24];
  v21 = v18[22];
  swift_errorRetain(v19);
  v22 = sub_100002F78(&qword_1000FB5F8);
  if (swift_dynamicCast(v20, v18 + 12, v22, v21, 0))
  {
    v23 = (*(uint64_t (**)(_QWORD, _QWORD))(v18[23] + 88))(v18[24], v18[22]);
    v24 = v18[23];
    if (v23 == enum case for ModelManagerError.inferenceError(_:))
    {
      sub_100037D00(*(uint64_t (**)(uint64_t))(v24 + 96));
      v25 = type metadata accessor for InferenceError(0);
      v26 = *(_QWORD *)(v25 - 8);
      v27 = sub_100037FC8(*(uint64_t (**)(uint64_t, uint64_t))(v26 + 88));
      if (v27 == enum case for InferenceError.assetVersionMismatch(_:))
      {
        LODWORD(a14) = v27;
        v28 = v18[16];
        v29 = v18[32];
        v30 = v18[25];
        swift_errorRelease(v18[45]);
        sub_100005630(v30, 1, 1, v29);
        v31 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F3528, 40);
        v31[2] = 0;
        v31[3] = 0;
        v31[4] = v28;
        sub_10001E194();
        v32 = sub_100002CAC(v30, (uint64_t)&unk_1000FC618, (uint64_t)v31);
        swift_release(v32);
        if (qword_1000FB0E0 != -1)
          swift_once(&qword_1000FB0E0, sub_10002C934);
        v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v18[42];
        v34 = v18[30];
        v35 = v18[26];
        v36 = v18[18];
        v37 = sub_10001DD64();
        sub_100002FF8(v37, (uint64_t)qword_1000FBF58);
        v38 = v33(v34, v36, v35);
        v39 = Logger.logObject.getter(v38);
        v40 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v39, v40))
        {
          a13 = v26;
          a10 = v18[27];
          a11 = v39;
          v41 = (uint8_t *)swift_slowAlloc(12, -1);
          a12 = sub_10001D8D4(32);
          a15 = a12;
          *(_DWORD *)v41 = 136315138;
          a9 = v41 + 4;
          sub_100006744((unint64_t *)&qword_1000FBEA0, &qword_1000FB2A0);
          v43 = sub_100037D90(v42);
          v45 = v44;
          sub_100037EC4(v43, v44, v46, v47, v48, v49, v50, v51);
          v18[15] = v52;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v18 + 15, v18 + 16, v41 + 4);
          v53 = v45;
          v26 = a13;
          swift_bridgeObjectRelease(v53);
          sub_10002B260((uint64_t (*)(uint64_t, uint64_t))a10[1].isa);
          sub_10001E18C((void *)&_mh_execute_header, a11, v40, "Responding to request: %s with assetVersionMismatch", v41);
          sub_10001DBB8(a12);
          sub_10001D790(a12);
          sub_10001D790((uint64_t)v41);

        }
        else
        {
          sub_10002B260(*(uint64_t (**)(uint64_t, uint64_t))(v18[27] + 8));

        }
        v18[10] = sub_100002F78(&qword_1000FC378);
        v92 = sub_100037300(&qword_1000FC380);
        sub_100038060(v92);
        v94 = v93;
        sub_100006710((unint64_t *)&qword_1000FC620, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceError);
        v96 = sub_10002B560(v25, v95);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v26 + 104))(v97, a14, v25);
        ModelManagerError.init(wrapping:)(v96);
        sub_100037AB8(v94);
        v98 = (_QWORD *)sub_100037D9C();
        v18[46] = v98;
        *v98 = v18;
        v98[1] = sub_100032DE0;
        goto LABEL_16;
      }
      (*(void (**)(_QWORD, uint64_t))(v26 + 8))(v18[24], v25);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v24 + 8))(v18[24], v18[22]);
    }
  }
  swift_errorRelease(v18[12]);
  if (qword_1000FB0E0 != -1)
    swift_once(&qword_1000FB0E0, sub_10002C934);
  v54 = (void (*)(uint64_t, uint64_t, uint64_t))v18[42];
  v55 = v18[29];
  v56 = v18[26];
  v57 = v18[18];
  v58 = sub_10001DD64();
  sub_100002FF8(v58, (uint64_t)qword_1000FBF58);
  v54(v55, v57, v56);
  sub_10001E764();
  v59 = sub_10001E764();
  v60 = Logger.logObject.getter(v59);
  v61 = static os_log_type_t.error.getter();
  v62 = sub_10002B3F8(v60);
  v63 = v18[45];
  v64 = v18[27];
  if (v62)
  {
    a12 = (uint64_t)(v18 + 15);
    LODWORD(a13) = v61;
    v65 = sub_10001D8D4(22);
    a11 = sub_10001D8D4(8);
    a14 = sub_10001D8D4(32);
    a15 = a14;
    *(_DWORD *)v65 = 136315394;
    sub_100006744((unint64_t *)&qword_1000FBEA0, &qword_1000FB2A0);
    v67 = sub_100037D90(v66);
    a10 = v60;
    sub_100037EC4(v67, v68, v69, v70, v71, v72, v73, v74);
    v18[13] = v75;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v18 + 13, v18 + 14, v65 + 4);
    sub_10001EADC();
    sub_10002B260(*(uint64_t (**)(uint64_t, uint64_t))(v64 + 8));
    *(_WORD *)(v65 + 12) = 2112;
    swift_errorRetain(v63);
    v76 = _swift_stdlib_bridgeErrorToNSError(v63);
    v18[14] = v76;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v18 + 14, v18 + 15, v65 + 14);
    a11->isa = (Class)v76;
    sub_100037E9C();
    sub_100037E9C();
    sub_10002B4A0((void *)&_mh_execute_header, v60, (os_log_type_t)a13, "Responding to request: %s withError %@", (uint8_t *)v65);
    sub_100002F78(&qword_1000FB8E0);
    sub_10001DBB8((uint64_t)a11);
    sub_10001D790((uint64_t)a11);
    sub_10001DBB8(a14);
    sub_10001D790(a14);
    sub_10001D790(v65);
  }
  else
  {
    sub_10002B260(*(uint64_t (**)(uint64_t, uint64_t))(v64 + 8));
    sub_100037E9C();
    sub_100037E9C();
  }

  v77 = v18[45];
  v78 = sub_100002F78(&qword_1000FC378);
  v18[5] = v78;
  v79 = sub_100037300(&qword_1000FC380);
  sub_100037AE4(v79);
  v81 = v80;
  sub_10002B5D4();
  ModelManagerError.init(wrapping:)(v77);
  sub_100037B20(v81, v78);
  v82 = (_QWORD *)sub_100037D9C();
  v18[47] = v82;
  *v82 = v18;
  v82[1] = sub_100032E6C;
LABEL_16:
  sub_10001E3E8();
  return v84(v83, v84, v85, v86, v87, v88, v89, v90, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t sub_100033504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5[11] = a4;
  v5[12] = a5;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  v6 = type metadata accessor for InferenceProviderDescriptor(0);
  v5[13] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[14] = v7;
  v5[15] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for InferenceProviderRequestResult(0);
  v5[16] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[17] = v9;
  v5[18] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100002F78(&qword_1000FB2A0);
  v5[19] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[20] = v11;
  v5[21] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000335C0, 0, 0);
}

uint64_t sub_1000335C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22,uint64_t a23,uint64_t a24)
{
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  os_log_type_t v29;
  _BOOL4 v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  char *v59;

  sub_10002B628();
  a23 = v25;
  a24 = v26;
  a22 = v24;
  if (qword_1000FB0E0 != -1)
    swift_once(&qword_1000FB0E0, sub_10002C934);
  v27 = v24[19];
  v28 = sub_10001DD64();
  sub_100037A88(v28, (uint64_t)qword_1000FBF58);
  sub_100037C24();
  v29 = sub_10002B470();
  v30 = sub_100037B08(v27);
  v31 = v24[19];
  if (v30)
  {
    v32 = (uint8_t *)sub_10001D8D4(12);
    v33 = sub_10001D8D4(32);
    a13 = v33;
    *(_DWORD *)v32 = 136315138;
    sub_100006744((unint64_t *)&qword_1000FBEA0, &qword_1000FB2A0);
    v35 = dispatch thunk of CustomStringConvertible.description.getter(v31, v34);
    sub_1000102C0(v35, v36, &a13);
    v24[7] = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v24 + 7, v24 + 8, v32 + 4);
    sub_10001E420();
    sub_100037E04();
    sub_10001E18C((void *)&_mh_execute_header, v27, v29, "Responding to request: %s", v32);
    sub_10001DBB8(v33);
    sub_10001D790(v33);
    sub_10001D790((uint64_t)v32);
  }
  else
  {
    sub_100037E04();
  }

  v39 = v24[17];
  v38 = v24[18];
  v40 = v24[15];
  v57 = v24[14];
  v58 = v24[13];
  v41 = (int *)v24[11];
  v43 = v24[8];
  v42 = v24[9];
  v44 = sub_100002F78(&qword_1000FC628);
  v24[5] = v44;
  v24[6] = sub_100037800();
  sub_1000373B4(v24 + 2);
  v46 = v45;
  sub_10001DE08(v38, v43, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 16));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 16))(v40, v42, v58);
  ModelXPCRequest.ExecuteRequest.Response.init(result:lockedInferenceProvider:)(v38, v40);
  sub_100037B68(v46, v44);
  v59 = (char *)v41 + *v41;
  v47 = (_QWORD *)swift_task_alloc(v41[1]);
  v24[22] = v47;
  *v47 = v24;
  v47[1] = sub_1000337EC;
  sub_10002B864();
  return v49(v48, v49, v50, v51, v52, v53, v54, v55, a9, v57, v59, v24 + 2, a13, a14, a15, a16);
}

uint64_t sub_1000337EC()
{
  uint64_t v0;
  uint64_t v1;

  sub_100037C2C();
  sub_10001D680(*(_QWORD *)(v1 + 176));
  sub_100037E84();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  return sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003383C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_1000FC47C);
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = sub_10001CA84;
  return sub_100031A50(a4);
}

double sub_100033888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a3;
  v27 = a2;
  v4 = sub_100002F78(&qword_1000FB2D8);
  v5 = *(_QWORD *)(v4 - 8);
  v25 = v4;
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100002F78(&qword_1000FB2A0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100002F78(&qword_1000FB230);
  __chkstk_darwin(v12);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TaskPriority(0);
  sub_100005630((uint64_t)v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v26, v4);
  v16 = *(unsigned __int8 *)(v9 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(unsigned __int8 *)(v5 + 80);
  v20 = (v19 + v18 + 8) & ~v19;
  v21 = swift_allocObject(&unk_1000F34D8, v20 + v6, v16 | v19 | 7);
  *(_QWORD *)(v21 + 16) = 0;
  *(_QWORD *)(v21 + 24) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v21 + v17, v11, v8);
  *(_QWORD *)(v21 + v18) = v27;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v21 + v20, v7, v25);
  swift_retain();
  v22 = sub_100002CAC((uint64_t)v14, (uint64_t)&unk_1000FC5F8, v21);
  *(_QWORD *)&result = swift_release(v22).n128_u64[0];
  return result;
}

uint64_t sub_100033A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[5] = a5;
  v6[6] = a6;
  v6[4] = a4;
  v7 = sub_100002F78(&qword_1000FB2A0);
  v6[7] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[8] = v8;
  v6[9] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100033AC8, 0, 0);
}

uint64_t sub_100033AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22,uint64_t a23,uint64_t a24)
{
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;

  sub_10002B628();
  a23 = v25;
  a24 = v26;
  a22 = v24;
  if (qword_1000FB0E0 != -1)
    swift_once(&qword_1000FB0E0, sub_10002C934);
  v27 = v24[4];
  v29 = v24[8];
  v28 = v24[9];
  v30 = v24[7];
  v31 = sub_10001DD64();
  v24[10] = sub_100002FF8(v31, (uint64_t)qword_1000FBF58);
  (*(void (**)(NSObject *, uint64_t, uint64_t))(v29 + 16))(v28, v27, v30);
  sub_10001E694();
  v32 = sub_10002B470();
  v33 = sub_10002B3F8(v28);
  v34 = v24[7];
  if (v33)
  {
    v35 = (uint8_t *)sub_10001D8D4(12);
    v44 = sub_10001D8D4(32);
    a13 = v44;
    *(_DWORD *)v35 = 136315138;
    v36 = UUIDIdentifier.uuidString.getter(v34);
    sub_1000102C0(v36, v37, &a13);
    v24[3] = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v24 + 3, v24 + 4, v35 + 4);
    sub_10002B684();
    sub_10001E79C();
    sub_10001E18C((void *)&_mh_execute_header, v28, v32, "xpcdispatcher: Request TaskCancellation handler, id: %s.", v35);
    sub_10001DBB8(v44);
    sub_10001D790(v44);
    sub_10001D790((uint64_t)v35);
  }
  else
  {
    sub_10001E79C();
  }

  sub_100037F7C();
  v24[11] = *(_QWORD *)(v39 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_sessionManager);
  sub_10001E194();
  v40 = (_QWORD *)sub_10001E784();
  v24[12] = v40;
  *v40 = v24;
  v40[1] = sub_100033C7C;
  sub_10002BD0C(v24[4]);
  sub_10002B864();
  return sub_100028DE8(v41, v42);
}

uint64_t sub_100033C7C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  sub_10001E0D8();
  sub_10001EA4C(v3);
  v0[13] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    sub_100037A7C();
    return sub_10001D6DC();
  }
  else
  {
    swift_release(v0[11]);
    swift_task_dealloc(v0[9]);
    return sub_10001D940(*(uint64_t (**)(void))(v2 + 8));
  }
}

uint64_t sub_100033CE0()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint8_t *v5;
  _QWORD *v6;
  uint64_t v7;

  sub_10001DB68();
  swift_release(*(_QWORD *)(v0 + 88));
  sub_10002B5D4();
  v1 = sub_10002B5D4();
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (sub_10002B3F8(v2))
  {
    v4 = *(_QWORD *)(v0 + 104);
    v5 = (uint8_t *)sub_10001D8D4(12);
    v6 = (_QWORD *)sub_10001D8D4(8);
    *(_DWORD *)v5 = 138412290;
    sub_10002B5D4();
    v7 = _swift_stdlib_bridgeErrorToNSError(v4);
    *(_QWORD *)(v0 + 16) = v7;
    sub_10002B2B8(v0 + 16, v0 + 24);
    *v6 = v7;
    sub_10002B498();
    sub_10002B498();
    sub_10001E18C((void *)&_mh_execute_header, v2, v3, "xpcdispatcher: Request TaskCancellation error %@", v5);
    sub_100002F78(&qword_1000FB8E0);
    sub_10001DBB8((uint64_t)v6);
    sub_10001D790((uint64_t)v6);
    sub_10001D790((uint64_t)v5);

    sub_10002B498();
  }
  else
  {
    sub_10002B498();
    sub_10002B498();
    sub_10002B498();

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100033E14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1000FC648 + dword_1000FC648);
  v7 = (_QWORD *)swift_task_alloc(unk_1000FC64C);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10001D668;
  return v9(a1, a2, a3);
}

uint64_t sub_100033E94()
{
  return 1;
}

uint64_t sub_100033E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc(dword_1000FC5DC);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_10001D668;
  return sub_1000322E8(a1, a2, a3, a4);
}

void sub_100033F10(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FC018, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.ExecuteRequest);
  *(_QWORD *)(a1 + 8) = v2;
}

void sub_100033F4C(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FC020, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.CancelRequest);
  *(_QWORD *)(a1 + 8) = v2;
}

uint64_t sub_100033F88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  v5 = sub_100002F78(&qword_1000FB2D8);
  v4[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[9] = v6;
  v4[10] = sub_100037A68(v6);
  v4[11] = sub_10001EBC0();
  v7 = sub_100002F78(&qword_1000FB2A0);
  v4[12] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[13] = v8;
  v4[14] = sub_100037A68(v8);
  v4[15] = sub_10001EBC0();
  v9 = type metadata accessor for ModelXPCRequest.CancelRequest(0);
  v4[16] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[17] = v10;
  v4[18] = sub_100037A68(v10);
  v4[19] = sub_10001EBC0();
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_10003402C(uint64_t a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_log_type_t type;
  int v35;
  uint64_t v36;
  uint64_t v37;

  v2 = AuditToken.processIdentifier.getter(a1);
  if (qword_1000FB0E0 != -1)
    swift_once(&qword_1000FB0E0, sub_10002C934);
  v3 = *(NSObject **)(v1 + 144);
  v4 = *(_QWORD *)(v1 + 152);
  v5 = sub_10001DD64();
  sub_100002FF8(v5, (uint64_t)qword_1000FBF58);
  sub_100037F9C(v4);
  sub_100037F9C((uint64_t)v3);
  sub_10001E694();
  v6 = sub_100037C08();
  v7 = sub_100037E74(v6);
  v8 = *(_QWORD *)(v1 + 144);
  if (v7)
  {
    v35 = v2;
    v9 = *(_QWORD *)(v1 + 120);
    v10 = *(_QWORD *)(v1 + 96);
    v31 = *(_QWORD *)(v1 + 104);
    v11 = *(_QWORD *)(v1 + 88);
    v32 = *(_QWORD *)(v1 + 64);
    v33 = *(_QWORD *)(v1 + 72);
    v12 = sub_10001D8D4(28);
    v36 = sub_10001D8D4(64);
    v37 = v36;
    *(_DWORD *)v12 = 136315650;
    type = v4;
    ((void (*)(void))ModelXPCRequest.CancelRequest.id.getter)();
    sub_100006744((unint64_t *)&qword_1000FBEA0, &qword_1000FB2A0);
    dispatch thunk of CustomStringConvertible.description.getter(v10, v13);
    sub_10002B7F8(v9, *(uint64_t (**)(uint64_t, uint64_t))(v31 + 8));
    v14 = sub_10002BE5C();
    sub_1000102C0(v14, v15, v16);
    *(_QWORD *)(v1 + 16) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v12 + 4);
    sub_10001D8B4();
    v18 = sub_100037EE4();
    *(_WORD *)(v12 + 12) = 2080;
    ModelXPCRequest.CancelRequest.sessionID.getter(v18);
    sub_100006744(&qword_1000FBE80, &qword_1000FB2D8);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v32, v19);
    v22 = v21;
    sub_10001EB58(v11, *(uint64_t (**)(uint64_t, uint64_t))(v33 + 8));
    sub_1000102C0(v20, v22, &v37);
    *(_QWORD *)(v1 + 24) = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v1 + 32, v12 + 14);
    sub_10001DA38();
    sub_100037EE4();
    *(_WORD *)(v12 + 22) = 1024;
    *(_DWORD *)(v1 + 184) = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 184, v1 + 188, v12 + 24);
    _os_log_impl((void *)&_mh_execute_header, v3, type, "XPC Handling CancelRequest %s in client session %s from proceess %d", (uint8_t *)v12, 0x1Cu);
    swift_arrayDestroy(v36, 2);
    sub_10001D790(v36);
    sub_10001D790(v12);
  }
  else
  {
    sub_100037ECC(*(_QWORD *)(v1 + 152));
    sub_100037ECC(v8);
  }

  sub_100037F7C();
  *(_QWORD *)(v1 + 160) = *(_QWORD *)(v24 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_sessionManager);
  v25 = sub_10001E900();
  v26 = ModelXPCRequest.CancelRequest.id.getter(v25);
  ModelXPCRequest.CancelRequest.sessionID.getter(v26);
  v27 = (_QWORD *)swift_task_alloc(dword_1000FBCD4);
  *(_QWORD *)(v1 + 168) = v27;
  *v27 = v1;
  v27[1] = sub_100034370;
  v28 = sub_10002BD0C(*(_QWORD *)(v1 + 112));
  return sub_100028DE8(v28, v29);
}

uint64_t sub_100034370()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_10001DB68();
  sub_10001DB38();
  v3 = v1[13];
  v2 = v1[14];
  v5 = v1[9];
  v4 = v1[10];
  v6 = v1[8];
  sub_100037FF0();
  *(_QWORD *)(v7 + 176) = v0;
  swift_task_dealloc(v8);
  sub_10001D930();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  sub_10002B7F8(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_100037A7C();
  return sub_10001D6DC();
}

uint64_t sub_100034400()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  v1 = *(_QWORD *)(v0 + 32);
  ModelXPCRequest.CancelRequest.Response.init()();
  v2 = sub_100002F78(&qword_1000FC5D0);
  sub_100037B68(v1, v2);
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  v3 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_100037D1C(v3);
}

uint64_t sub_100034480()
{
  uint64_t v0;

  sub_10001DD0C();
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  return sub_10001DE38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000344CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_1000FC5CC);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10001D668;
  return sub_100033F88(a1, a2, a3);
}

uint64_t sub_100034534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000FC5B8 + dword_1000FC5B8);
  v9 = (_QWORD *)swift_task_alloc(unk_1000FC5BC);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_10001D668;
  return v11(a1, a2, a3, a4);
}

void sub_1000345BC(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FC038, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.CancelRequest);
  *(_QWORD *)(a1 + 8) = v2;
}

void sub_1000345F8(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FC040, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.AcquireRequest);
  *(_QWORD *)(a1 + 8) = v2;
}

uint64_t sub_100034634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = type metadata accessor for Assertion.DaemonRep(0);
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v4[8] = sub_10001D800(v6);
  v7 = sub_10002BCD4();
  v4[9] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[10] = v8;
  v4[11] = sub_10001D800(v8);
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_100034698()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  float *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  sub_10001E6F0();
  if (qword_1000FB0E0 != -1)
    swift_once(&qword_1000FB0E0, sub_10002C934);
  v1 = *(NSObject **)(v0 + 72);
  v2 = sub_10001DD64();
  sub_100037A88(v2, (uint64_t)qword_1000FBF58);
  sub_100037C24();
  sub_100037C08();
  if (sub_100037B08(v1))
  {
    v3 = (float *)sub_10001D8D4(8);
    v4 = sub_100037BC4(v3, 1.5047e-36);
    sub_100037B10();
    *(_DWORD *)(v0 + 120) = v4;
    sub_100037AAC(v0 + 120, v0 + 124);
    sub_100037B88((void *)&_mh_execute_header, v5, v6, "XPC Handling acquireAssertion for pid %d");
    sub_10001D790((uint64_t)v3);
  }
  else
  {
    sub_100037B10();
  }

  *(_QWORD *)(v0 + 96) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) + 16) + 16);
  v7 = sub_10001D7EC();
  ModelXPCRequest.AcquireRequest.assertion.getter(v7);
  v8 = (_QWORD *)swift_task_alloc(dword_1000FE214);
  *(_QWORD *)(v0 + 104) = v8;
  *v8 = v0;
  v8[1] = sub_1000347D8;
  sub_100037CD8(*(_QWORD *)(v0 + 64));
  sub_10002B574();
  return sub_100095C64(v9, v10);
}

uint64_t sub_1000347D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10001DD0C();
  v0 = sub_100038010();
  v3 = *(_QWORD *)(v1 + 56);
  v2 = *(_QWORD *)(v1 + 64);
  sub_100037EA4(v0, v1);
  sub_10002B7F8(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_10001D930();
  sub_100037A7C();
  return sub_100037B28(v4, v5, v6);
}

uint64_t sub_10003483C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  sub_10003804C();
  ModelXPCRequest.AcquireRequest.Response.init()();
  v1 = sub_100002F78(&qword_1000FC5B0);
  sub_100037B68(v0, v1);
  sub_10001E330();
  sub_10001D938();
  v2 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_10002B7C0(v2);
}

uint64_t sub_100034888()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  sub_10001E330();
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000348C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_1000FC5AC);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10001D668;
  return sub_100034634(a1, a2, a3);
}

uint64_t sub_100034928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000FC598 + dword_1000FC598);
  v9 = (_QWORD *)swift_task_alloc(unk_1000FC59C);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_10001D668;
  return v11(a1, a2, a3, a4);
}

void sub_1000349B0(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FC058, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.AcquireRequest);
  *(_QWORD *)(a1 + 8) = v2;
}

void sub_1000349EC(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FC060, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.ReleaseRequest);
  *(_QWORD *)(a1 + 8) = v2;
}

uint64_t sub_100034A28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = sub_100002F78(&qword_1000FB250);
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v4[8] = sub_10001D800(v6);
  v7 = sub_10002BCD4();
  v4[9] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[10] = v8;
  v4[11] = sub_10001D800(v8);
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_100034A90()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  float *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_10001E6F0();
  if (qword_1000FB0E0 != -1)
    swift_once(&qword_1000FB0E0, sub_10002C934);
  v1 = *(NSObject **)(v0 + 72);
  v2 = sub_10001DD64();
  sub_100037A88(v2, (uint64_t)qword_1000FBF58);
  sub_100037C24();
  sub_100037C08();
  if (sub_100037B08(v1))
  {
    v3 = (float *)sub_10001D8D4(8);
    v4 = sub_100037BC4(v3, 1.5047e-36);
    sub_100037B10();
    *(_DWORD *)(v0 + 112) = v4;
    sub_100037AAC(v0 + 112, v0 + 116);
    sub_100037B88((void *)&_mh_execute_header, v5, v6, "XPC Handling releaseAssertion for pid %d");
    sub_10001D790((uint64_t)v3);
  }
  else
  {
    sub_100037B10();
  }

  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) + 16) + 16);
  *(_QWORD *)(v0 + 96) = v7;
  v8 = sub_10001D7EC();
  ModelXPCRequest.ReleaseRequest.id.getter(v8);
  return sub_100037B34((uint64_t)sub_100034BAC, v7, 0);
}

uint64_t sub_100034BAC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(dword_1000FB59C);
  *(_QWORD *)(v0 + 104) = v1;
  *v1 = v0;
  v1[1] = sub_100034BFC;
  v2 = sub_10002BD0C(*(_QWORD *)(v0 + 64));
  return sub_100007210(v2);
}

uint64_t sub_100034BFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  sub_10001D680(*(_QWORD *)(*(_QWORD *)v0 + 104));
  sub_10001D9C0();
  sub_10001EB58(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_100037A7C();
  return sub_10001D6DC();
}

uint64_t sub_100034C5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  sub_10003804C();
  ModelXPCRequest.ReleaseRequest.Response.init()();
  v1 = sub_100002F78(&qword_1000FC590);
  sub_100037B68(v0, v1);
  sub_10001E330();
  sub_10001D938();
  v2 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_10002B7C0(v2);
}

uint64_t sub_100034CA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_1000FC58C);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10001D668;
  return sub_100034A28(a1, a2, a3);
}

uint64_t sub_100034D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000FC578 + dword_1000FC578);
  v9 = (_QWORD *)swift_task_alloc(unk_1000FC57C);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_10001D668;
  return v11(a1, a2, a3, a4);
}

void sub_100034D98(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FC078, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.ReleaseRequest);
  *(_QWORD *)(a1 + 8) = v2;
}

void sub_100034DD4(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FC080, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.FetchAssertionsRequest);
  *(_QWORD *)(a1 + 8) = v2;
}

uint64_t sub_100034E10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = sub_10002BCD4();
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = sub_10001D800(v5);
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_100034E58()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  float *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  sub_10001E6F0();
  if (qword_1000FB0E0 != -1)
    swift_once(&qword_1000FB0E0, sub_10002C934);
  v1 = *(NSObject **)(v0 + 40);
  v2 = sub_10001DD64();
  sub_100037A88(v2, (uint64_t)qword_1000FBF58);
  sub_100037C24();
  sub_100037C08();
  if (sub_100037B08(v1))
  {
    v3 = (float *)sub_10001D8D4(8);
    v4 = sub_100037BC4(v3, 1.5047e-36);
    sub_100037B10();
    *(_DWORD *)(v0 + 88) = v4;
    sub_100037AAC(v0 + 88, v0 + 92);
    sub_100037B88((void *)&_mh_execute_header, v5, v6, "XPC Handling fetchAssertions for pid %d");
    sub_10001D790((uint64_t)v3);
  }
  else
  {
    sub_100037B10();
  }

  sub_100037F70();
  *(_QWORD *)(v0 + 64) = *(_QWORD *)(v7 + 16);
  sub_10001E194();
  v8 = (_QWORD *)sub_10001E784();
  *(_QWORD *)(v0 + 72) = v8;
  sub_10002BFB4(v8, (uint64_t)sub_100034F74);
  sub_10002B574();
  return sub_10009600C();
}

uint64_t sub_100034F74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100037DF4();
  sub_100037EB4();
  *(_QWORD *)(v1 + 80) = v0;
  sub_10002BD30(v2);
  sub_10001D9C0();
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_100034FB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  v1 = *(_QWORD *)(v0 + 16);
  ModelXPCRequest.FetchAssertionsRequest.Response.init(assertions:)(*(_QWORD *)(v0 + 80));
  v2 = sub_100002F78(&qword_1000FC570);
  sub_100037B68(v1, v2);
  sub_10001E330();
  v3 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_10001D940(v3);
}

uint64_t sub_100035008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_1000FC56C);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10001D668;
  return sub_100034E10(a1, a2, a3);
}

uint64_t sub_100035070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000FC558 + dword_1000FC558);
  v9 = (_QWORD *)swift_task_alloc(unk_1000FC55C);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_10001D668;
  return v11(a1, a2, a3, a4);
}

void sub_1000350F8(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FC098, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.FetchAssertionsRequest);
  *(_QWORD *)(a1 + 8) = v2;
}

void sub_100035134(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FC0A0, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.RestoreAssertionsRequest);
  *(_QWORD *)(a1 + 8) = v2;
}

uint64_t sub_100035170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = sub_10002BCD4();
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v4[8] = sub_10001D800(v6);
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_1000351B8()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  float *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_10001E6F0();
  if (qword_1000FB0E0 != -1)
    swift_once(&qword_1000FB0E0, sub_10002C934);
  v1 = *(NSObject **)(v0 + 48);
  v2 = sub_10001DD64();
  sub_100037A88(v2, (uint64_t)qword_1000FBF58);
  sub_100037C24();
  sub_100037C08();
  if (sub_100037B08(v1))
  {
    v3 = (float *)sub_10001D8D4(8);
    v4 = sub_100037BC4(v3, 1.5047e-36);
    sub_100037B10();
    *(_DWORD *)(v0 + 96) = v4;
    sub_100037AAC(v0 + 96, v0 + 100);
    sub_100037B88((void *)&_mh_execute_header, v5, v6, "XPC Handling restoreAssertions for pid %d");
    sub_10001D790((uint64_t)v3);
  }
  else
  {
    sub_100037B10();
  }

  sub_100037F70();
  v8 = *(_QWORD *)(v7 + 16);
  *(_QWORD *)(v0 + 72) = v8;
  v9 = sub_10002B400();
  *(_QWORD *)(v0 + 80) = ModelXPCRequest.RestoreAssertionsRequest.assertions.getter(v9);
  return sub_100037B34((uint64_t)sub_1000352CC, v8, 0);
}

uint64_t sub_1000352CC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(dword_1000FB9AC);
  *(_QWORD *)(v0 + 88) = v1;
  *v1 = v0;
  v1[1] = sub_10003531C;
  v2 = sub_10002BD0C(*(_QWORD *)(v0 + 80));
  return sub_10000AC6C(v2);
}

uint64_t sub_10003531C()
{
  uint64_t v0;

  v0 = sub_100038038();
  sub_10001D680(v0);
  sub_10001E034();
  sub_10001D930();
  sub_100037A7C();
  return sub_10001D6DC();
}

uint64_t sub_10003535C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  v1 = *(_QWORD *)(v0 + 16);
  ModelXPCRequest.RestoreAssertionsRequest.Response.init()();
  v2 = sub_100002F78(&qword_1000FC550);
  sub_100037B68(v1, v2);
  sub_10001E330();
  v3 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_10001D940(v3);
}

uint64_t sub_1000353AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_1000FC54C);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10001D668;
  return sub_100035170(a1, a2, a3);
}

uint64_t sub_100035414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000FC538 + dword_1000FC538);
  v9 = (_QWORD *)swift_task_alloc(unk_1000FC53C);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_10001D668;
  return v11(a1, a2, a3, a4);
}

void sub_10003549C(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FC0B8, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.RestoreAssertionsRequest);
  *(_QWORD *)(a1 + 8) = v2;
}

void sub_1000354D8(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FC0C0, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.FetchAssetsRequest);
  *(_QWORD *)(a1 + 8) = v2;
}

uint64_t sub_100035514(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return sub_100037AF0((uint64_t)sub_100035524);
}

uint64_t sub_100035524()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 40) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 32) + 16)
                                   + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_assetManager);
  sub_10001E194();
  return sub_10001D674();
}

uint64_t sub_10003556C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10004D7E4();
  sub_10001E194();
  *(_QWORD *)(v0 + 48) = sub_100037D7C();
  sub_10001DA38();
  sub_10001D9C0();
  sub_100037A7C();
  return sub_100037B28(v1, v2, v3);
}

uint64_t sub_1000355C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  v1 = *(_QWORD *)(v0 + 24);
  ModelXPCRequest.FetchAssetsRequest.Response.init(assetInfo:)(*(_QWORD *)(v0 + 48));
  v2 = sub_100002F78(&qword_1000FC530);
  sub_100037B68(v1, v2);
  v3 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_100006A38(v3);
}

uint64_t sub_100035614(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1000FC52C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001D668;
  return sub_100035514(a1, a2);
}

uint64_t sub_10003566C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000FC518 + dword_1000FC518);
  v9 = (_QWORD *)swift_task_alloc(unk_1000FC51C);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_10001D668;
  return v11(a1, a2, a3, a4);
}

void sub_1000356F4(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FC0D8, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.FetchAssetsRequest);
  *(_QWORD *)(a1 + 8) = v2;
}

void sub_100035730(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FC0E0, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.FetchDynamicAssetsRequest);
  *(_QWORD *)(a1 + 8) = v2;
}

uint64_t sub_10003576C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return sub_100037AF0((uint64_t)sub_10003577C);
}

uint64_t sub_10003577C()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 40) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 32) + 16)
                                   + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_assetManager);
  sub_10001E194();
  return sub_10001D674();
}

uint64_t sub_1000357C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10004DA4C();
  sub_10001E194();
  *(_QWORD *)(v0 + 48) = sub_100037D7C();
  sub_10001DA38();
  sub_10001D9C0();
  sub_100037A7C();
  return sub_100037B28(v1, v2, v3);
}

uint64_t sub_100035820()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  v1 = *(_QWORD *)(v0 + 24);
  ModelXPCRequest.FetchDynamicAssetsRequest.Response.init(assetInfo:)(*(_QWORD *)(v0 + 48));
  v2 = sub_100002F78(&qword_1000FC508);
  sub_100037B68(v1, v2);
  v3 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_100006A38(v3);
}

uint64_t sub_100035868(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1000FC504);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001D668;
  return sub_10003576C(a1, a2);
}

uint64_t sub_1000358C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000FC4F0 + dword_1000FC4F0);
  v9 = (_QWORD *)swift_task_alloc(unk_1000FC4F4);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_10001D668;
  return v11(a1, a2, a3, a4);
}

void sub_100035948(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FC0F8, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.FetchDynamicAssetsRequest);
  *(_QWORD *)(a1 + 8) = v2;
}

void sub_100035984(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FC100, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.FetchPolicyRequest);
  *(_QWORD *)(a1 + 8) = v2;
}

uint64_t sub_1000359C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v3[2] = a1;
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_100002F78(&qword_1000FB560) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[3] = swift_task_alloc(v5);
  v6 = swift_task_alloc(v5);
  v3[4] = v6;
  v7 = (_QWORD *)swift_task_alloc(dword_1000FC4E4);
  v3[5] = v7;
  *v7 = v3;
  v7[1] = sub_100035A5C;
  return sub_100035B00(v6, v2, a2);
}

uint64_t sub_100035A5C()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 40));
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_100035A90()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  v1 = v0[3];
  v2 = v0[4];
  v3 = v0[2];
  v4 = sub_10002BE5C();
  sub_10001CBC0(v4, v5);
  ModelXPCRequest.FetchPolicyRequest.Response.init(policy:)(v1);
  sub_10002AD5C(v2, &qword_1000FB560);
  v6 = sub_100002F78(&qword_1000FC4E8);
  sub_100037B68(v3, v6);
  sub_10001E330();
  sub_10001D938();
  v7 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_10002B7C0(v7);
}

uint64_t sub_100035B00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  return swift_task_switch(sub_100035B1C, 0, 0);
}

uint64_t sub_100035B1C()
{
  _QWORD *v0;
  uint64_t Policy;
  uint64_t v2;
  uint64_t v3;

  Policy = ModelXPCRequest.FetchPolicyRequest.policyName.getter();
  v0[8] = v2;
  v3 = v0[7];
  if (v2)
  {
    v0[9] = Policy;
    v0[10] = *(_QWORD *)(*(_QWORD *)(v3 + 16) + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_policyManager);
  }
  else
  {
    v0[12] = *(_QWORD *)(*(_QWORD *)(v3 + 16) + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_policyManager);
  }
  sub_10001E194();
  return sub_10001D674();
}

uint64_t sub_100035B9C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 80) + 296);
  *(_QWORD *)(v0 + 88) = v1;
  swift_bridgeObjectRetain(v1);
  sub_10001D9C0();
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_100035BD8()
{
  uint64_t v0;

  sub_100009DD0(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 88));
  sub_10001E034();
  sub_10001D8B4();
  return sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100035C1C()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_beginAccess(*(_QWORD *)(v0 + 96) + OBJC_IVAR____TtC13modelmanagerd13PolicyManager__currentPolicy, v0 + 16, 0, 0);
  *(_QWORD *)(v0 + 104) = type metadata accessor for Policy(0);
  v1 = sub_10002BF40();
  v2(v1);
  sub_10001D9C0();
  sub_100037A7C();
  return sub_100037B58(v3, v4, v5);
}

uint64_t sub_100035C98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_100037FA8(*(_QWORD *)(v3 + 40), 0, a3, *(_QWORD *)(v3 + 104));
  return sub_100006A38(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_100035CC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1000FC4DC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001D668;
  return sub_1000359C0(a1, a2);
}

uint64_t sub_100035D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000FC4C8 + dword_1000FC4C8);
  v9 = (_QWORD *)swift_task_alloc(unk_1000FC4CC);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_10001D668;
  return v11(a1, a2, a3, a4);
}

void sub_100035DB0(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FC118, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.FetchPolicyRequest);
  *(_QWORD *)(a1 + 8) = v2;
}

uint64_t sub_100035DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = type metadata accessor for InferenceProviderDescriptor(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = sub_10001D800(v5);
  sub_100037A7C();
  return sub_10001D674();
}

#error "100035EB0: call analysis failed (funcsize=64)"

uint64_t sub_100035F3C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 88) = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    sub_10001D9C8();
    sub_10001D8B4();
  }
  else
  {
    sub_10001D8B4();
    sub_10001D9C8();
  }
  sub_100037A7C();
  return sub_100037B58(v4, v5, v6);
}

uint64_t sub_100035FA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 16);
  ModelXPCRequest.LoadAssetBundle.Response.init()();
  sub_10002B260(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  v3 = sub_100002F78(&qword_1000FC4C0);
  sub_100037B68(v2, v3);
  sub_10001E330();
  v4 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_10001D940(v4);
}

uint64_t sub_100036004()
{
  uint64_t v0;

  sub_10002BC38(*(_QWORD *)(v0 + 48));
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

unint64_t sub_10003603C()
{
  return 0xD000000000000021;
}

uint64_t sub_100036058(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1000FC4BC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001D668;
  return sub_100035DEC(a1, a2);
}

uint64_t sub_1000360B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000FC4A8 + dword_1000FC4A8);
  v9 = (_QWORD *)swift_task_alloc(unk_1000FC4AC);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_10001D668;
  return v11(a1, a2, a3, a4);
}

void sub_100036140(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FC130, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.LoadAssetBundle);
  *(_QWORD *)(a1 + 8) = v2;
}

uint64_t sub_10003617C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return sub_100037AF0((uint64_t)sub_100036190);
}

uint64_t sub_100036190()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100037F70();
  v0[6] = *(_QWORD *)(v1 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_sessionManager);
  v2 = sub_10002B400();
  ModelXPCRequest.HoldAssetBundle.assetBundleIdentifier.getter(v2);
  v0[7] = v3;
  v4 = (_QWORD *)swift_task_alloc(dword_1000FBCEC);
  v0[8] = v4;
  *v4 = v0;
  v4[1] = sub_100036214;
  v5 = sub_100037FBC();
  return sub_100029E04(v5, v6, v7);
}

uint64_t sub_100036214()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 72) = v1;
  swift_task_dealloc(v3);
  if (!v1)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
    sub_10001D9C0();
  }
  sub_100037A7C();
  return sub_10001D6DC();
}

uint64_t sub_100036270()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  v1 = *(_QWORD *)(v0 + 16);
  ModelXPCRequest.HoldAssetBundle.Response.init()();
  v2 = sub_100002F78(&qword_1000FC4A0);
  sub_100037B68(v1, v2);
  v3 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_100006A38(v3);
}

uint64_t sub_1000362B4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  sub_10001D9C0();
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000362E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_1000FC49C);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10001D668;
  return sub_10003617C(a1, a2, a3);
}

uint64_t sub_10003634C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000FC488 + dword_1000FC488);
  v9 = (_QWORD *)swift_task_alloc(unk_1000FC48C);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_10001D668;
  return v11(a1, a2, a3, a4);
}

void sub_1000363D4(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FC148, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.HoldAssetBundle);
  *(_QWORD *)(a1 + 8) = v2;
}

uint64_t sub_100036410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = sub_10002BCD4();
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = sub_10001D800(v5);
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_100036458()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  float *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  sub_10001E6F0();
  if (qword_1000FB0E0 != -1)
    swift_once(&qword_1000FB0E0, sub_10002C934);
  v1 = *(NSObject **)(v0 + 40);
  v2 = sub_10001DD64();
  sub_100037A88(v2, (uint64_t)qword_1000FBF58);
  sub_100037C24();
  sub_100037C08();
  if (sub_100037B08(v1))
  {
    v3 = (float *)sub_10001D8D4(8);
    v4 = sub_100037BC4(v3, 1.5047e-36);
    sub_100037B10();
    *(_DWORD *)(v0 + 72) = v4;
    sub_100037AAC(v0 + 72, v0 + 76);
    sub_100037B88((void *)&_mh_execute_header, v5, v6, "XPC Handling forceAssetVersionSwitch for pid %d");
    sub_10001D790((uint64_t)v3);
  }
  else
  {
    sub_100037B10();
  }

  v7 = (_QWORD *)swift_task_alloc(dword_1000FC47C);
  *(_QWORD *)(v0 + 64) = v7;
  *v7 = v0;
  v7[1] = sub_10003656C;
  sub_10002BD0C(*(_QWORD *)(v0 + 24));
  sub_10002B574();
  return sub_100031A50(v8);
}

uint64_t sub_10003656C()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  sub_100037DF4();
  sub_100037EB4();
  *(_BYTE *)(v1 + 76) = v0;
  sub_10002BD30(v2);
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_1000365A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  if (*(_BYTE *)(v0 + 76) == 1)
  {
    ModelXPCRequest.ForceAssetVersionSwitch.Response.init()();
    v1 = 0;
  }
  else
  {
    v2 = sub_10002B8A0();
    sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_10002B560(v2, v3);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, enum case for ModelManagerError.unableToForceAssetVersionSwitch(_:), v2);
    sub_100037F44();
    v1 = 1;
  }
  v5 = *(_QWORD *)(v0 + 16);
  v6 = sub_100002F78(&qword_1000FC480);
  swift_storeEnumTagMultiPayload(v5, v6, v1);
  sub_10001D938();
  v7 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_10002B7C0(v7);
}

unint64_t sub_100036670()
{
  return 0xD00000000000002ELL;
}

uint64_t sub_10003668C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_1000FC474);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10001D668;
  return sub_100036410(a1, a2, a3);
}

uint64_t sub_1000366F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000FC460 + dword_1000FC460);
  v9 = (_QWORD *)swift_task_alloc(unk_1000FC464);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_10001D668;
  return v11(a1, a2, a3, a4);
}

void sub_10003677C(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FC160, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.ForceAssetVersionSwitch);
  *(_QWORD *)(a1 + 8) = v2;
}

uint64_t sub_1000367B8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[9] = a1;
  v2[10] = a2;
  v3 = type metadata accessor for StateDump(0);
  v2[11] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[12] = v4;
  v2[13] = sub_100037A68(v4);
  v2[14] = sub_10001EBC0();
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_100036808()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 80) + 16) + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_stateDumpManager;
  v3 = *(_OWORD *)(v1 + 16);
  v2 = *(_OWORD *)(v1 + 32);
  v4 = *(_OWORD *)v1;
  *(_QWORD *)(v0 + 64) = *(_QWORD *)(v1 + 48);
  *(_OWORD *)(v0 + 32) = v3;
  *(_OWORD *)(v0 + 48) = v2;
  *(_OWORD *)(v0 + 16) = v4;
  sub_100006584((_QWORD *)(v0 + 16));
  v5 = (_QWORD *)swift_task_alloc(dword_1000FE46C);
  *(_QWORD *)(v0 + 120) = v5;
  *v5 = v0;
  v5[1] = sub_10003688C;
  return sub_100099060(*(_QWORD *)(v0 + 112));
}

uint64_t sub_10003688C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 128) = v1;
  swift_task_dealloc(v3);
  if (!v1)
    sub_100006600((uint64_t *)(v0 + 16));
  sub_100037A7C();
  return sub_10001D6DC();
}

uint64_t sub_1000368E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_10001DD0C();
  v1 = v0[13];
  v2 = v0[14];
  v3 = v0[12];
  v4 = v0[9];
  sub_10001DE08(v1, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  ModelXPCRequest.DumpState.Response.init(stateDump:)(v1);
  sub_10001EB58(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  v5 = sub_100002F78(&qword_1000FC458);
  sub_100037B68(v4, v5);
  sub_10001E330();
  sub_10001D938();
  v6 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_10001DE38(v6);
}

uint64_t sub_10003695C()
{
  uint64_t v0;

  sub_100006600((uint64_t *)(v0 + 16));
  sub_10001E330();
  sub_10001D938();
  return sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
}

unint64_t sub_100036998()
{
  return 0xD000000000000020;
}

uint64_t sub_1000369B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1000FC454);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001D668;
  return sub_1000367B8(a1, a2);
}

uint64_t sub_100036A0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000FC440 + dword_1000FC440);
  v9 = (_QWORD *)swift_task_alloc(unk_1000FC444);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_10001D668;
  return v11(a1, a2, a3, a4);
}

void sub_100036A94(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FC178, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.DumpState);
  *(_QWORD *)(a1 + 8) = v2;
}

uint64_t sub_100036AD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = sub_100002F78(&qword_1000FB2D8);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = sub_10001D800(v5);
  v6 = type metadata accessor for ModelInstance(0);
  v3[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[9] = v7;
  v3[10] = sub_100037A68(v7);
  v3[11] = sub_10001EBC0();
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_100036B44()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v0[12] = *(_QWORD *)(*(_QWORD *)(v0[3] + 16) + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_sessionManager);
  v1 = sub_10001D7EC();
  ModelXPCRequest.FetchModelInstance.session.getter(v1);
  v2 = (_QWORD *)swift_task_alloc(dword_1000FBCE4);
  v0[13] = v2;
  *v2 = v0;
  v2[1] = sub_100036BC8;
  return sub_100029CCC(v0[11], v0[7]);
}

uint64_t sub_100036BC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10001DD0C();
  v0 = sub_100038010();
  v3 = *(_QWORD *)(v1 + 48);
  v2 = *(_QWORD *)(v1 + 56);
  sub_100037EA4(v0, v1);
  sub_10002B7F8(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_10001D930();
  sub_100037A7C();
  return sub_100037B28(v4, v5, v6);
}

uint64_t sub_100036C2C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_100037EFC();
  v1 = v0[10];
  v2 = v0[11];
  v3 = v0[9];
  v4 = v0[2];
  sub_10001DE08(v1, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  ((void (*)(uint64_t))ModelXPCRequest.FetchModelInstance.Response.init(modelInstance:))(v1);
  sub_10001EB58(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  v5 = sub_100002F78(&qword_1000FC438);
  sub_100037B68(v4, v5);
  sub_10001E330();
  sub_10001D938();
  sub_10001E490();
  v6 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_10001D940(v6);
}

uint64_t sub_100036CB8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  sub_10001E330();
  sub_10001D938();
  return sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100036CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1000FC434);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001CA84;
  return sub_100036AD0(a1, a2);
}

uint64_t sub_100036D54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000FC420 + dword_1000FC420);
  v9 = (_QWORD *)swift_task_alloc(unk_1000FC424);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_10001D668;
  return v11(a1, a2, a3, a4);
}

void sub_100036DDC(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FC190, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.FetchModelInstance);
  *(_QWORD *)(a1 + 8) = v2;
}

uint64_t sub_100036E18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return sub_100037AF0((uint64_t)sub_100036E28);
}

uint64_t sub_100036E28()
{
  uint64_t v0;
  uint64_t v1;

  sub_100037F70();
  *(_QWORD *)(v0 + 32) = sub_10001C830((_QWORD *)(v1 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_modelCatalog), *(_QWORD *)(v1 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_modelCatalog + 24));
  return sub_10001D674();
}

uint64_t sub_100036E70()
{
  uint64_t v0;

  *(_BYTE *)(**(_QWORD **)(v0 + 32) + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_assetsHaveUpdated) = 1;
  return sub_100037AF0((uint64_t)sub_100036E98);
}

uint64_t sub_100036E98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  v1 = *(_QWORD *)(v0 + 16);
  ModelXPCRequest.SetAssetsHaveUpdated.Response.init()();
  v2 = sub_100002F78(&qword_1000FC418);
  sub_100037B68(v1, v2);
  v3 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_100006A38(v3);
}

unint64_t sub_100036EDC()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_100036EF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1000FC414);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001D668;
  return sub_100036E18(a1, a2);
}

uint64_t sub_100036F50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000FC400 + dword_1000FC400);
  v9 = (_QWORD *)swift_task_alloc(unk_1000FC404);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_10001D668;
  return v11(a1, a2, a3, a4);
}

void sub_100036FD8(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FC1A8, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.SetAssetsHaveUpdated);
  *(_QWORD *)(a1 + 8) = v2;
}

uint64_t type metadata accessor for ModelXPCMessageHandler()
{
  return objc_opt_self(_TtC13modelmanagerd22ModelXPCMessageHandler);
}

uint64_t sub_100037034()
{
  return type metadata accessor for ModelXPCDispatcher(0);
}

uint64_t type metadata accessor for ModelXPCDispatcher(uint64_t a1)
{
  uint64_t result;

  result = qword_1000FC288;
  if (!qword_1000FC288)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ModelXPCDispatcher);
  return result;
}

uint64_t sub_100037074(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[10];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = "(";
    v4[3] = "(";
    v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[7] = "(";
    v4[8] = &unk_1000CB960;
    v4[9] = (char *)&value witness table for Builtin.NativeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 10, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_100037110()
{
  sub_100006710(qword_1000FC358, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest);
}

uint64_t sub_10003713C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_100038084();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8;
  sub_10002BBD8();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1000371CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  sub_100037EFC();
  v3 = v2;
  v4 = *(_QWORD *)(sub_100038084() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = *(_QWORD *)(v0 + 16);
  v8 = *(_QWORD *)(v0 + 24);
  v9 = v0 + v5;
  v10 = *(_DWORD *)(v0 + v6);
  v11 = *(_QWORD *)(v0 + ((v6 + 11) & 0xFFFFFFFFFFFFF8));
  v12 = swift_task_alloc(dword_1000FC39C);
  v13 = (_QWORD *)sub_100006AF4(v12);
  *v13 = v1;
  v13[1] = sub_10001D668;
  return sub_100030280(v3, v7, v8, v9, v10, v11);
}

uint64_t sub_100037274()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100037298()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v1 = (_QWORD *)swift_task_alloc(dword_1000FC3C4);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10001D668;
  v2 = sub_10002BF40();
  return v3(v2);
}

uint64_t sub_100037300(unint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    sub_1000056BC(&qword_1000FC378);
    sub_100006710(&qword_1000FC388, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_100006710(&qword_1000FC390, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    v3 = sub_100037FBC();
    result = swift_getWitnessTable(v3, v4);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000373B4(_QWORD *a1)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
    *a1 = swift_allocBox();
  sub_100006C14();
}

_QWORD *sub_1000373EC(_QWORD *result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result[3] - 8);
  if ((*(_DWORD *)(v1 + 80) & 0x20000) != 0)
    return (_QWORD *)swift_slowDealloc(*result, *(_QWORD *)(v1 + 64)+ ((*(_DWORD *)(v1 + 80) + 16) & ~(unint64_t)*(_DWORD *)(v1 + 80)), *(_DWORD *)(v1 + 80) | 7);
  return result;
}

uint64_t sub_100037420(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ModelCatalogAsset(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100037464(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ModelCatalogAsset(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000374A0()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_10001DB68();
  v1 = *(_DWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v4 = swift_task_alloc(dword_1000FC5E4);
  v5 = (_QWORD *)sub_100006AF4(v4);
  v6 = sub_100037D28(v5);
  return sub_100032A18(v6, v7, v8, v9, v10, v1, v3, v2);
}

double sub_100037510()
{
  uint64_t *v0;

  return sub_100033888(v0[2], v0[3], v0[4]);
}

uint64_t sub_10003751C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_10001D810();
  v1 = sub_100002F78(&qword_1000FB2A0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(sub_100002F78(&qword_1000FB2D8) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v5 + v7 + 8) & ~v7;
  v9 = v8 + *(_QWORD *)(v6 + 64);
  v10 = v3 | v7 | 7;
  sub_10002BBD8();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v5));
  sub_10001EB58(v0 + v8, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  return swift_deallocObject(v0, v9, v10);
}

uint64_t sub_1000375E4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_100037EFC();
  v1 = sub_100002F78(&qword_1000FB2A0);
  v2 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64)
      + ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_100002F78(&qword_1000FB2D8) - 8) + 80);
  v4 = v0 + ((v2 + v3 + 8) & ~v3);
  v5 = swift_task_alloc(dword_1000FC5F4);
  v6 = (_QWORD *)sub_100006AF4(v5);
  v7 = sub_100037D28(v6);
  return sub_100033A60(v7, v8, v9, v10, v11, v4);
}

uint64_t sub_100037694()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(sub_100002F78(&qword_1000FB2A0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = v2 | 7;
  v4 = (*(_QWORD *)(v1 + 64) + ((v2 + 16) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10002BC38(v1);
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  return swift_deallocObject(v0, v4 + 16, v3);
}

uint64_t sub_10003770C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  sub_10001DD0C();
  sub_100037F58();
  v4 = *(_QWORD *)(sub_100002F78(&qword_1000FB2A0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1 + v5;
  v7 = (uint64_t *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v8 = *v7;
  v9 = v7[1];
  v10 = (_QWORD *)swift_task_alloc(dword_1000FC604);
  *(_QWORD *)(v3 + 16) = v10;
  sub_10002BFB4(v10, (uint64_t)sub_10001D668);
  return sub_100033504(v2, v0, v6, v8, v9);
}

uint64_t sub_1000377AC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = swift_task_alloc(dword_1000FC614);
  v1 = (_QWORD *)sub_100006AF4(v0);
  v2 = sub_100006AD8(v1);
  return sub_10003383C(v2, v3, v4, v5);
}

unint64_t sub_100037800()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000FC630;
  if (!qword_1000FC630)
  {
    v1 = sub_1000056BC(&qword_1000FC628);
    sub_100006710(&qword_1000FC638, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.ExecuteRequest.Response);
    sub_100006710(&qword_1000FC640, (uint64_t (*)(uint64_t))&type metadata accessor for ModelXPCRequest.ExecuteRequest.Response);
    sub_100006710(&qword_1000FC388, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_100006710(&qword_1000FC390, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModelXPCResult<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000FC630);
  }
  return result;
}

uint64_t sub_1000378F4()
{
  uint64_t v0;

  sub_10002BBD8();
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10003791C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = swift_task_alloc(dword_1000FC694);
  v1 = (_QWORD *)sub_100006AF4(v0);
  v2 = sub_100006AD8(v1);
  return sub_100031A04(v2, v3, v4, v5);
}

uint64_t sub_100037974(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_100037990(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 104))(v1, v2, a1);
}

uint64_t sub_1000379A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 64) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2, v1 + 72, v3);
}

uint64_t sub_1000379C0()
{
  return swift_slowAlloc(12, -1);
}

void sub_1000379D8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint8_t *v4;
  NSObject *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v5, v6, a4, v4, 0xCu);
}

uint64_t sub_1000379EC()
{
  uint64_t v0;

  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

uint64_t sub_100037A00@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v2;
  a1[1] = a2;
  return v3;
}

uint64_t sub_100037A18()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 1);
}

uint64_t sub_100037A44()
{
  uint64_t v0;
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v1, v0, 1);
}

uint64_t sub_100037A54(float a1)
{
  float *v1;

  *v1 = a1;
  return 0;
}

uint64_t sub_100037A68@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(_QWORD *)(a1 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_100037A88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100002FF8(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v4, v2);
}

uint64_t sub_100037AAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_100037AB8(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(a1, v1, 1);
}

uint64_t sub_100037AC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_100002FF8(a1, a2);
  return Logger.logObject.getter(v2);
}

uint64_t sub_100037AD8(uint64_t a1)
{
  uint64_t v1;

  return String.init<A>(describing:)(v1, a1);
}

void sub_100037AE4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 48) = a1;
  sub_1000373B4(v2);
}

uint64_t sub_100037AF0(uint64_t a1)
{
  return swift_task_switch(a1, 0, 0);
}

void sub_100037AFC(uint64_t a1, unint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1000102C0(a1, a2, (uint64_t *)va);
}

BOOL sub_100037B08(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_100037B10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_100037B20(uint64_t a1, uint64_t a2)
{
  return swift_storeEnumTagMultiPayload(a1, a2, 1);
}

uint64_t sub_100037B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_100037B34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_100037B50()
{
  return static os_log_type_t.fault.getter();
}

uint64_t sub_100037B58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_100037B68(uint64_t a1, uint64_t a2)
{
  return swift_storeEnumTagMultiPayload(a1, a2, 0);
}

void sub_100037B88(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 8u);
}

uint64_t sub_100037B9C(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

uint64_t sub_100037BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a10 + 8))(v11, v10);
}

uint64_t sub_100037BC4(float *a1, float a2)
{
  *a1 = a2;
  return AuditToken.processIdentifier.getter();
}

uint64_t sub_100037BD4()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[15] + 8))(v0[16], v0[14]);
}

void sub_100037BEC(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t sub_100037C08()
{
  return static os_log_type_t.info.getter();
}

uint64_t sub_100037C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a11 + 8))(v13, a13);
}

uint64_t sub_100037C24()
{
  return Logger.logObject.getter();
}

void sub_100037C2C()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

void sub_100037C40()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 48);
  v6 = sub_10001C830(v0, v4);
  sub_10002EA20((uint64_t)v6, v2, v3, v4, v5);
}

uint64_t sub_100037C70(float a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, char a12)
{
  int v12;
  float *v13;

  *v13 = a1;
  a11 = v12;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a11, &a12, v13 + 1);
}

uint64_t sub_100037C90(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

uint64_t sub_100037CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a12, a2, a9);
}

void sub_100037CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  unint64_t v7;
  va_list va;

  va_start(va, a6);
  sub_1000102C0(v6, v7, (uint64_t *)va);
}

uint64_t sub_100037CC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  a10 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a10, v10 + 8, v11);
}

uint64_t sub_100037CD8@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_100037CE8()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 296));
}

uint64_t sub_100037D00@<X0>(uint64_t (*a1)(uint64_t)@<X8>)
{
  uint64_t v1;

  return a1(v1);
}

uint64_t sub_100037D1C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100037D28(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_100037D48()
{
  uint64_t v0;
  uint64_t v1;

  *(_WORD *)(v1 + 8) = 2080;
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100037D5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_100037D68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return swift_getAssociatedConformanceWitness(v1, v0, v3, v2);
}

_QWORD *sub_100037D7C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10002BFC0(v1, v0);
}

uint64_t sub_100037D90(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

uint64_t sub_100037D9C()
{
  uint64_t v0;

  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

uint64_t sub_100037DCC()
{
  return sub_1000B4B3C();
}

void sub_100037DD4(uint64_t a1, uint64_t a2, ...)
{
  unint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  sub_1000102C0(v3, v2, (uint64_t *)va);
}

BOOL sub_100037DE4(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void sub_100037DF4()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_100037E04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_100037E2C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + a1));
}

uint64_t sub_100037E34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_100037E44()
{
  _QWORD *v0;

  return sub_10002E33C(v0);
}

BOOL sub_100037E64(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

BOOL sub_100037E74(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100037E84()
{
  _QWORD *v0;

  return sub_10000650C(v0);
}

uint64_t sub_100037E8C()
{
  uint64_t v0;

  return swift_bridgeObjectRetain_n(v0, 2);
}

uint64_t sub_100037E9C()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_100037EA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;

  *v2 = *v4;
  *(_QWORD *)(a2 + 112) = v3;
  return swift_task_dealloc(a1);
}

void sub_100037EB4()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

void sub_100037EC4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_1000102C0(a1, a2, (uint64_t *)va);
}

uint64_t sub_100037ECC(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_100037ED4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_100037EE4()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t sub_100037EF0()
{
  return TaskCancellingXPCReceivedMessage.auditToken.getter();
}

uint64_t sub_100037F10@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_100037F30(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = *(_QWORD *)(result - 8);
  return result;
}

uint64_t sub_100037F44()
{
  uint64_t v0;

  return ModelManagerError.init(wrapping:)(v0);
}

uint64_t sub_100037F50@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10000650C((_QWORD *)(v1 + a1));
}

uint64_t sub_100037F64()
{
  return TaskCancellingXPCReceivedMessage.decode()();
}

uint64_t sub_100037F88()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 3);
}

void sub_100037F94()
{
  os_unfair_lock_s *v0;

  os_unfair_lock_unlock(v0);
}

uint64_t sub_100037F9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v2, v1);
}

uint64_t sub_100037FA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100005630(a1, a2, 1, a4);
}

void sub_100037FB0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;

  sub_1000102C0(v3, v4, a3);
}

uint64_t sub_100037FBC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100037FC8@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_100037FD4()
{
  return TaskCancellingXPCReceivedMessage.auditToken.getter();
}

uint64_t sub_100037FDC()
{
  return static os_log_type_t.info.getter();
}

void sub_100037FE4()
{
  sub_10002F828();
}

void sub_100037FF0()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
}

void sub_100037FFC()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_100038010()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return *(_QWORD *)(v2 + 104);
}

uint64_t sub_100038024()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return *(_QWORD *)(v2 + 104);
}

uint64_t sub_100038038()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return *(_QWORD *)(v2 + 88);
}

void sub_100038060(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 88) = a1;
  sub_1000373B4(v2);
}

void sub_10003806C(uint64_t a1)
{
  _QWORD *v1;

  v1[5] = a1;
  sub_1000373B4(v1);
}

uint64_t sub_100038078()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_100038084()
{
  return type metadata accessor for XPCRichError(0);
}

void sub_10003808C(unint64_t *a1)
{
  uint64_t (*v1)(uint64_t);

  sub_100006710(a1, v1);
}

uint64_t sub_100038094(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1000FDEFC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000380E0;
  return sub_100090A20(a1);
}

uint64_t sub_1000380E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*v3 + 16);
  v5 = *v3;
  *(_QWORD *)(v5 + 24) = a1;
  *(_QWORD *)(v5 + 32) = a2;
  *(_QWORD *)(v5 + 40) = v2;
  swift_task_dealloc(v4);
  if (v2)
    return (*(uint64_t (**)(void))(v5 + 8))();
  else
    return sub_10001D674();
}

uint64_t sub_100038150()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 40);
  sub_10003986C(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  v3 = v2;
  v5 = v4;
  sub_100039A54(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  if (v1)
    return (*(uint64_t (**)(void))(v0 + 8))();
  else
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v3, v5);
}

uint64_t sub_1000381CC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1000FDEFC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100038218;
  return sub_100090A20(a1);
}

uint64_t sub_100038218(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *v3;
  *(_QWORD *)(v7 + 24) = v2;
  swift_task_dealloc(v6);
  if (v2)
    return (*(uint64_t (**)(void))(v7 + 8))();
  *(_QWORD *)(v7 + 32) = a2;
  *(_QWORD *)(v7 + 40) = a1;
  return sub_10001D6DC();
}

uint64_t sub_100038298()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = sub_100039904(v1, v2);
  v5 = sub_100039A54(v1, v2);
  if (!v3)
    v5 = v4;
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
}

uint64_t sub_100038308()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_100002FB8(v0, qword_1000FC718);
  sub_100002FF8(v0, (uint64_t)qword_1000FC718);
  v1 = subsystemName.getter();
  return Logger.init(subsystem:category:)(v1);
}

BOOL sub_100038370(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000F2658, v2);
  swift_bridgeObjectRelease(object);
  return v3 != 0;
}

BOOL sub_1000383C8@<W0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = sub_100038370(*a1);
  *a2 = result;
  return result;
}

void sub_1000383FC(_QWORD *a1@<X8>)
{
  *a1 = 0x64656C6261736964;
  a1[1] = 0xE800000000000000;
}

uint64_t sub_100038418()
{
  return 0x64656C6261736964;
}

uint64_t sub_100038430@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  uint64_t result;

  result = sub_1000383B4(a1);
  *a2 = result != 0;
  return result;
}

uint64_t sub_10003845C()
{
  return 0;
}

void sub_100038468(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_100038474(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100039BC4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003849C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100039BC4();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_1000384C4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;

  v3 = sub_100002F78(&qword_1000FC880);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_10001C830(a1, v7);
  v10 = sub_100039BC4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_1000F3720, &unk_1000F3720, v10, v7, v8);
  if (v1)
  {
    sub_10000650C(a1);
  }
  else
  {
    v11 = sub_100002F78(&qword_1000FC890);
    sub_100039C00();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v14, v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v14;
    sub_10000650C(a1);
  }
  return v9;
}

void sub_1000385F0()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_100038614()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

_QWORD *sub_100038654@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_1000384C4(a1);
  if (!v2)
    *a2 = result;
  return result;
}

Swift::Int sub_100038684(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_1000386D0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = v0;
  v2 = (_QWORD *)swift_task_alloc(dword_1000FC764);
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_100038718;
  return sub_100038948();
}

uint64_t sub_100038718()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 24));
  return sub_10001D674();
}

uint64_t sub_100038750()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_10001C830((_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 176));
  swift_retain(v1);
  sub_1000A7CE0((uint64_t)&unk_1000FC860, v1);
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003883C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100038854, 0, 0);
}

uint64_t sub_100038854()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  if (qword_1000FB0E8 != -1)
    swift_once(&qword_1000FB0E8, sub_100038308);
  v1 = sub_10001DD64();
  v2 = (void *)sub_100037AC4(v1, (uint64_t)qword_1000FC718);
  v3 = static os_log_type_t.default.getter();
  if (sub_100039E20(v3))
  {
    v4 = (_WORD *)sub_10001D8D4(2);
    *v4 = 0;
    sub_100039E4C((void *)&_mh_execute_header, v5, v6, "Disabled use case asset has updated");
    sub_10001D790((uint64_t)v4);
  }

  v7 = (_QWORD *)swift_task_alloc(dword_1000FC764);
  *(_QWORD *)(v0 + 24) = v7;
  *v7 = v0;
  v7[1] = sub_10003891C;
  return sub_100038948();
}

uint64_t sub_10003891C()
{
  uint64_t v0;
  uint64_t v1;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v1 + 24));
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100038948()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1[6] = v0;
  v2 = type metadata accessor for FilePath(0);
  v1[7] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[8] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[9] = swift_task_alloc(v4);
  v1[10] = swift_task_alloc(v4);
  return sub_10001D6DC();
}

uint64_t sub_1000389B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;

  sub_1000391F8(v0[10]);
  if (qword_1000FB0E8 != -1)
    swift_once(&qword_1000FB0E8, sub_100038308);
  v2 = v0[9];
  v1 = v0[10];
  v3 = v0[7];
  v4 = v0[8];
  v5 = sub_10001DD64();
  v0[11] = sub_100002FF8(v5, (uint64_t)qword_1000FC718);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = v0[7];
  if (v9)
  {
    v11 = (uint8_t *)sub_10001D8D4(12);
    v19 = sub_10001D8D4(32);
    v21 = v19;
    *(_DWORD *)v11 = 136315138;
    v12 = sub_100039A14(&qword_1000FB8D8, (uint64_t (*)(uint64_t))&type metadata accessor for FilePath, (uint64_t)&protocol conformance descriptor for FilePath);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v10, v12);
    v15 = v14;
    sub_1000102C0(v13, v14, &v21);
    v0[5] = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v11 + 4);
    swift_bridgeObjectRelease(v15);
    sub_100039E74();
    sub_10001E18C((void *)&_mh_execute_header, v7, v8, "Loading disabled use case asset plist: %s", v11);
    swift_arrayDestroy(v19, 1);
    sub_10001D790(v19);
    sub_10001D790((uint64_t)v11);
  }
  else
  {
    sub_100039E74();
  }

  v0[12] = v0 + 6;
  sub_10001C830((_QWORD *)(v0[6] + 112), *(_QWORD *)(v0[6] + 136));
  v20 = (uint64_t (*)(uint64_t))((char *)&dword_1000FC848 + dword_1000FC848);
  v17 = (_QWORD *)swift_task_alloc(unk_1000FC84C);
  v0[13] = v17;
  *v17 = v0;
  v17[1] = sub_100038DA8;
  return v20(v0[10]);
}

uint64_t sub_100038DA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 104);
  *(_QWORD *)(*v2 + 112) = v1;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 48);
  if (v1)
  {
    v7 = sub_100038FD8;
  }
  else
  {
    *(_QWORD *)(v4 + 120) = a1;
    v7 = sub_100038E1C;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_100038E1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v1 + 192);
  *(_QWORD *)(v1 + 192) = *(_QWORD *)(v0 + 120);
  swift_bridgeObjectRelease(v2);
  v3 = swift_retain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v21 = *(_QWORD *)(v0 + 80);
    v22 = *(void (**)(uint64_t, uint64_t))(v0 + 96);
    v19 = *(_QWORD *)(v0 + 48);
    v20 = *(_QWORD *)(v0 + 56);
    v6 = (uint8_t *)sub_10001D8D4(12);
    v7 = sub_10001D8D4(32);
    v23 = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = *(_QWORD *)(v1 + 192);
    v9 = swift_bridgeObjectRetain(v8);
    v10 = Set.description.getter(v9, &type metadata for String, &protocol witness table for String);
    v12 = v11;
    swift_bridgeObjectRelease(v8);
    sub_1000102C0(v10, v12, &v23);
    *(_QWORD *)(v0 + 32) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v6 + 4);
    swift_bridgeObjectRelease(v12);
    swift_release_n(v19, 2);
    sub_10001E18C((void *)&_mh_execute_header, v4, v5, "Updated disabled use case identifiers to: %s", v6);
    swift_arrayDestroy(v7, 1);
    sub_10001D790(v7);
    sub_10001D790((uint64_t)v6);

    v22(v21, v20);
  }
  else
  {
    v14 = *(void (**)(uint64_t, uint64_t))(v0 + 96);
    v15 = *(_QWORD *)(v0 + 80);
    v17 = *(_QWORD *)(v0 + 48);
    v16 = *(_QWORD *)(v0 + 56);

    swift_release_n(v17, 2);
    v14(v15, v16);
  }
  sub_100039EBC();
  sub_10001E330();
  return sub_100039E04(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100038FD8()
{
  uint64_t v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  os_log_type_t v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  _QWORD *v19;
  uint64_t v20;

  (*(void (**)(_QWORD, _QWORD))(v0 + 96))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 56));
  v3 = *(_QWORD *)(v0 + 112);
  *(_QWORD *)(v0 + 16) = v3;
  v4 = (_QWORD *)(v0 + 16);
  sub_10002B5D4();
  v5 = sub_100002F78(&qword_1000FB5F8);
  if ((sub_100039ED0(v5, v0 + 16, v6, (uint64_t)&unk_1000F3690) & 1) != 0)
  {
    sub_10002B498();
    if (qword_1000FB0E8 != -1)
      swift_once(&qword_1000FB0E8, sub_100038308);
    v7 = sub_10001DD64();
    v8 = (void *)sub_100037AC4(v7, (uint64_t)qword_1000FC718);
    v9 = static os_log_type_t.info.getter();
    if (sub_100039E20(v9))
    {
      v10 = (_WORD *)sub_10001D8D4(2);
      *v10 = 0;
      sub_100039E60((void *)&_mh_execute_header, v11, v12, "Not updating disabled use case identifiers");
      sub_10001D790((uint64_t)v10);
    }

    v13 = *v4;
  }
  else
  {
    swift_errorRelease(*v4);
    if (qword_1000FB0E8 != -1)
      swift_once(&qword_1000FB0E8, sub_100038308);
    v14 = sub_10001DD64();
    v15 = sub_100002FF8(v14, (uint64_t)qword_1000FC718);
    sub_10002B5D4();
    v16 = sub_10002B5D4();
    Logger.logObject.getter(v16);
    v17 = sub_100039EB4();
    if (!sub_100039E8C(v17))
    {
      sub_10002B498();
      sub_10002B498();
      sub_10002B498();

      goto LABEL_13;
    }
    v18 = (uint8_t *)sub_10001D8D4(12);
    v19 = (_QWORD *)sub_10001D8D4(8);
    *(_DWORD *)v18 = 138412290;
    sub_10002B5D4();
    v20 = _swift_stdlib_bridgeErrorToNSError(v3);
    sub_100039E30(v20);
    *v19 = v2;
    sub_10002B498();
    sub_10002B498();
    sub_10001E18C((void *)&_mh_execute_header, v15, v1, "Failed to load disabled use case identifiers: %@", v18);
    sub_100002F78(&qword_1000FB8E0);
    sub_100039E9C();
    sub_10001D790((uint64_t)v19);
    sub_10001D790((uint64_t)v18);

    v13 = v3;
  }
  swift_errorRelease(v13);
LABEL_13:
  sub_100039EBC();
  sub_10001E330();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000391F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  os_log_type_t v29;
  uint8_t *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  os_log_type_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  NSObject *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint8_t *v79;
  NSObject *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v77 = a1;
  v2 = sub_100002F78(&qword_1000FC828);
  __chkstk_darwin(v2);
  sub_10002BD70();
  v78 = v3;
  v79 = (uint8_t *)type metadata accessor for FilePath(0);
  v76 = *((_QWORD *)v79 - 1);
  v4 = __chkstk_darwin(v79);
  v75 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v74 = (char *)&v72 - v6;
  v7 = sub_100002F78(&qword_1000FC830);
  __chkstk_darwin(v7);
  sub_10002BD70();
  v80 = v8;
  v81 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v81 - 8);
  v10 = __chkstk_darwin(v81);
  v12 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = ((char *)&v72 - v14);
  __chkstk_darwin(v13);
  v17 = (char *)&v72 - v16;
  sub_10001C830((_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 176));
  v18 = sub_1000A1F28();
  v20 = v19;
  sub_10001C830((_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 176));
  v21 = v82;
  v22 = sub_1000A3408(v18, v20);
  if (v21)
    return sub_100006C48();
  v72 = v12;
  v73 = v15;
  v82 = v17;
  v24 = v81;
  if ((v22 & 1) == 0)
  {
    sub_100006C48();
    if (qword_1000FB0E8 != -1)
      swift_once(&qword_1000FB0E8, sub_100038308);
    v32 = sub_10001DD64();
    v33 = sub_100002FF8(v32, (uint64_t)qword_1000FC718);
    v28 = v33;
    Logger.logObject.getter(v33);
    v34 = sub_10002B470();
    if (!sub_100037E74(v34))
      goto LABEL_14;
    v30 = (uint8_t *)sub_10001D8D4(2);
    *(_WORD *)v30 = 0;
    v31 = "Disabled use case list asset is not available";
    goto LABEL_13;
  }
  sub_10001C830((_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 176));
  v15 = v80;
  sub_1000A3764(v18, v20);
  sub_100006C48();
  v25 = v24;
  if (sub_100005700((uint64_t)v15, 1, v24) == 1)
  {
    sub_1000399D8((uint64_t)v15, &qword_1000FC830);
    if (qword_1000FB0E8 != -1)
      swift_once(&qword_1000FB0E8, sub_100038308);
    v26 = sub_10001DD64();
    v27 = sub_100002FF8(v26, (uint64_t)qword_1000FC718);
    v28 = v27;
    Logger.logObject.getter(v27);
    v29 = sub_10002B470();
    if (!sub_100037E74(v29))
      goto LABEL_14;
    v30 = (uint8_t *)sub_10001D8D4(2);
    *(_WORD *)v30 = 0;
    v31 = "Disabled use case list asset is available, but has no location";
LABEL_13:
    _os_log_impl((void *)&_mh_execute_header, v15, v28, v31, v30, 2u);
    sub_10001D790((uint64_t)v30);
LABEL_14:

    v35 = sub_10003999C();
    v36 = sub_10002B560((uint64_t)&unk_1000F3690, v35);
    return swift_willThrow(v36, v37, v38, v39, v40, v41, v42, v43);
  }
  v44 = v9;
  v45 = (uint64_t)v82;
  (*(void (**)(char *, NSObject *, uint64_t))(v9 + 32))(v82, v15, v24);
  v46 = *(NSObject **)(v9 + 16);
  v47 = (uint64_t)v73;
  sub_100039EC4((uint64_t)v73);
  v48 = v78;
  FilePath.init(_:)(v47);
  v49 = (uint64_t)v79;
  if (sub_100005700(v48, 1, (uint64_t)v79) == 1)
  {
    sub_1000399D8(v48, &qword_1000FC828);
    if (qword_1000FB0E8 != -1)
      swift_once(&qword_1000FB0E8, sub_100038308);
    v50 = sub_10001DD64();
    sub_100002FF8(v50, (uint64_t)qword_1000FC718);
    v51 = (uint64_t)v72;
    v52 = sub_100039EC4((uint64_t)v72);
    Logger.logObject.getter(v52);
    v53 = sub_10002B470();
    if (os_log_type_enabled(v46, v53))
    {
      v54 = (uint8_t *)sub_10001D8D4(12);
      v55 = sub_10001D8D4(32);
      v85 = v55;
      v80 = v44;
      *(_DWORD *)v54 = 136315138;
      v79 = v54 + 4;
      v56 = sub_100039A14(&qword_1000FC840, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v57 = dispatch thunk of CustomStringConvertible.description.getter(v25, v56);
      v59 = v58;
      sub_1000102C0(v57, v58, &v85);
      v83 = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v79);
      swift_bridgeObjectRelease(v59);
      sub_100039EAC(v51);
      _os_log_impl((void *)&_mh_execute_header, v46, v53, "Disabled use case list asset location is not valid: %s", v54, 0xCu);
      swift_arrayDestroy(v55, 1);
      sub_10001D790(v55);
      sub_10001D790((uint64_t)v54);
    }
    else
    {
      sub_100039EAC(v51);
    }

    v63 = sub_10003999C();
    v64 = sub_10002B560((uint64_t)&unk_1000F3690, v63);
    swift_willThrow(v64, v65, v66, v67, v68, v69, v70, v71);
    return sub_100039EAC(v45);
  }
  else
  {
    v61 = v76;
    v62 = v74;
    (*(void (**)(char *, uint64_t, uint64_t))(v76 + 32))(v74, v48, v49);
    (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v75, v62, v49);
    FilePath.appending(_:)(0xD000000000000016, 0x80000001000CE0E0);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v49);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 8))(v45, v24);
  }
}

_QWORD *sub_1000397E0()
{
  _QWORD *v0;

  sub_10000650C(v0 + 14);
  sub_10000650C(v0 + 19);
  swift_bridgeObjectRelease(v0[24]);
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_100039814()
{
  uint64_t v0;

  sub_1000397E0();
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for UseCaseManager()
{
  return objc_opt_self(_TtC13modelmanagerd14UseCaseManager);
}

void sub_10003984C()
{
  sub_100039E84();
}

void sub_100039854()
{
  sub_10003984C();
}

void sub_10003986C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = PropertyListDecoder.init()();
  v6 = sub_100039B1C();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(&v7, &type metadata for PolicyFile, a1, a2, &type metadata for PolicyFile, v6);
  swift_release(v5);
}

uint64_t sub_100039904(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;

  v5 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v6 = PropertyListDecoder.init()();
  v7 = sub_100039A98();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(&v9, &unk_1000F35F8, a1, a2, &unk_1000F35F8, v7);
  result = swift_release(v6);
  if (!v2)
    return v9;
  return result;
}

unint64_t sub_10003999C()
{
  unint64_t result;

  result = qword_1000FC838;
  if (!qword_1000FC838)
  {
    result = swift_getWitnessTable(&unk_1000CBB20, &unk_1000F3690);
    atomic_store(result, (unint64_t *)&qword_1000FC838);
  }
  return result;
}

uint64_t sub_1000399D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100002F78(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100039A14(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100039A54(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

unint64_t sub_100039A98()
{
  unint64_t result;

  result = qword_1000FC850;
  if (!qword_1000FC850)
  {
    result = swift_getWitnessTable(&unk_1000CBAF8, &unk_1000F35F8);
    atomic_store(result, &qword_1000FC850);
  }
  return result;
}

uint64_t sub_100039AD4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_1000FC85C);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10001F980;
  return sub_10003883C(v0);
}

unint64_t sub_100039B1C()
{
  unint64_t result;

  result = qword_1000FC870;
  if (!qword_1000FC870)
  {
    result = swift_getWitnessTable(&unk_1000CD044, &type metadata for PolicyFile);
    atomic_store(result, (unint64_t *)&qword_1000FC870);
  }
  return result;
}

void type metadata accessor for DisabledUseCaseFile()
{
  sub_100039E84();
}

void type metadata accessor for DisabledUseCaseInternalError()
{
  sub_100039E84();
}

unint64_t sub_100039B88()
{
  unint64_t result;

  result = qword_1000FC878;
  if (!qword_1000FC878)
  {
    result = swift_getWitnessTable(&unk_1000CBAD0, &unk_1000F3690);
    atomic_store(result, (unint64_t *)&qword_1000FC878);
  }
  return result;
}

unint64_t sub_100039BC4()
{
  unint64_t result;

  result = qword_1000FC888;
  if (!qword_1000FC888)
  {
    result = swift_getWitnessTable(&unk_1000CBC5C, &unk_1000F3720);
    atomic_store(result, (unint64_t *)&qword_1000FC888);
  }
  return result;
}

unint64_t sub_100039C00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000FC898;
  if (!qword_1000FC898)
  {
    v1 = sub_1000056BC(&qword_1000FC890);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Set<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000FC898);
  }
  return result;
}

uint64_t sub_100039C5C(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t sub_100039CAC(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100039CEC + 4 * byte_1000CB9E0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100039D0C + 4 * byte_1000CB9E5[v4]))();
}

_BYTE *sub_100039CEC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100039D0C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100039D14(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100039D1C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100039D24(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100039D2C(_DWORD *result)
{
  *result = 0;
  return result;
}

void type metadata accessor for DisabledUseCaseFile.CodingKeys()
{
  sub_100039E84();
}

unint64_t sub_100039D48()
{
  unint64_t result;

  result = qword_1000FC8A0;
  if (!qword_1000FC8A0)
  {
    result = swift_getWitnessTable(&unk_1000CBC34, &unk_1000F3720);
    atomic_store(result, (unint64_t *)&qword_1000FC8A0);
  }
  return result;
}

unint64_t sub_100039D88()
{
  unint64_t result;

  result = qword_1000FC8A8;
  if (!qword_1000FC8A8)
  {
    result = swift_getWitnessTable(&unk_1000CBB6C, &unk_1000F3720);
    atomic_store(result, (unint64_t *)&qword_1000FC8A8);
  }
  return result;
}

unint64_t sub_100039DC8()
{
  unint64_t result;

  result = qword_1000FC8B0;
  if (!qword_1000FC8B0)
  {
    result = swift_getWitnessTable(&unk_1000CBB94, &unk_1000F3720);
    atomic_store(result, (unint64_t *)&qword_1000FC8B0);
  }
  return result;
}

uint64_t sub_100039E04(uint64_t (*a1)(void))
{
  return a1();
}

BOOL sub_100039E20(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100039E30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 24) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2, v1 + 32, v3);
}

void sub_100039E4C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  os_log_type_t v4;
  NSObject *v5;
  uint8_t *v6;

  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

void sub_100039E60(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  os_log_type_t v4;
  NSObject *v5;
  uint8_t *v6;

  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

uint64_t sub_100039E74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

BOOL sub_100039E8C(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100039E9C()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 1);
}

uint64_t sub_100039EAC(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_100039EB4()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_100039EBC()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 80));
}

uint64_t sub_100039EC4(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(a1, v3, v2);
}

uint64_t sub_100039ED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a1, a4, 0);
}

uint64_t sub_100039EDC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_getWitnessTable(&protocol conformance descriptor for ResponseStreamOverridingError<A, B, C>, a2);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100039F08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v0 = type metadata accessor for Logger(0);
  sub_100002FB8(v0, qword_1000FC8B8);
  v1 = sub_100002FF8(v0, (uint64_t)qword_1000FC8B8);
  v2 = *(_QWORD *)(v0 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  generalLogger.getter(v3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v2 + 32))(v1, v5, v0);
}

uint64_t sub_100039FA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[15] = a2;
  v3[16] = v2;
  v3[14] = a1;
  return sub_10001D948((uint64_t)sub_100039FB8, v2);
}

uint64_t sub_100039FB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  _QWORD v23[9];

  v2 = *(_QWORD *)(v0 + 120);
  v1 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 112);
  *(_QWORD *)(v0 + 24) = 0;
  v4 = swift_unknownObjectWeakInit(v0 + 16, 0);
  *(_QWORD *)(v0 + 24) = v2;
  swift_unknownObjectWeakAssign(v4, v3);
  *(_QWORD *)(v0 + 32) = v3;
  v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_terminationHandlers);
  sub_10001D7B8();
  sub_10002B308(v6, v7, v8);
  v9 = *v5;
  if (*(_QWORD *)(v9 + 16)
    && (v10 = *(_QWORD *)(v0 + 112),
        Hasher.init(_seed:)(v23, *(_QWORD *)(v9 + 40)),
        Hasher._combine(_:)(v10),
        v11 = Hasher._finalize()(),
        v12 = -1 << *(_BYTE *)(v9 + 32),
        v13 = v11 & ~v12,
        ((*(_QWORD *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0))
  {
    v14 = ~v12;
    sub_10001E140();
    while (1)
    {
      sub_100044B08(*(_QWORD *)(v9 + 48) + 24 * v13);
      v15 = *(_QWORD *)(v0 + 80);
      v16 = *(_QWORD *)(v0 + 32);
      sub_10001D53C(v0 + 64);
      if (v15 == v16)
        break;
      v13 = (v13 + 1) & v14;
      if (((*(_QWORD *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        sub_10001EADC();
        goto LABEL_7;
      }
    }
    sub_10001EADC();
    sub_10001D53C(v0 + 16);
    return sub_100044600(*(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
LABEL_7:
    v17 = *(_QWORD *)(v0 + 128);
    sub_100044B08(v0 + 16);
    v18 = sub_100006A80((uint64_t)&unk_1000F3A30, 48);
    *(_QWORD *)(v0 + 136) = v18;
    *(_QWORD *)(v18 + 16) = v17;
    sub_10001D4C4(v0 + 88, v18 + 24);
    v19 = unk_1000FB854;
    v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1000FB850 + dword_1000FB850);
    sub_10001D7EC();
    v20 = (_QWORD *)swift_task_alloc(v19);
    *(_QWORD *)(v0 + 144) = v20;
    *v20 = v0;
    v20[1] = sub_10003A18C;
    return v22((uint64_t)v22, (uint64_t)&unk_1000FCDF0, v18);
  }
}

uint64_t sub_10003A18C()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 144));
  sub_10001D9C0();
  sub_10001E10C();
  return sub_10001D6D0();
}

uint64_t sub_10003A1C8()
{
  uint64_t v0;

  sub_10001D53C(v0 + 16);
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003A1F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 88) = a2;
  *(_QWORD *)(v3 + 96) = a3;
  return swift_task_switch(sub_10003A204, a2, 0);
}

uint64_t sub_10003A204()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  uint64_t v22[20];

  v1 = v0 + 16;
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  sub_10003A380();
  sub_10001D500(v3, v0 + 16);
  v4 = (_QWORD *)(v2 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_terminationHandlers);
  sub_10002B308(v2 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_terminationHandlers, v0 + 40, 33);
  v5 = *v4;
  Hasher.init(_seed:)(v22, *(_QWORD *)(*v4 + 40));
  Hasher._combine(_:)(*(_QWORD *)(v0 + 32));
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v20 = v0 + 16;
    v21 = v0 + 40;
    v9 = ~v7;
    swift_bridgeObjectRetain(v5);
    while (1)
    {
      sub_10001D500(*(_QWORD *)(v5 + 48) + 24 * v8, v0 + 64);
      v10 = *(_QWORD *)(v0 + 80);
      v11 = *(_QWORD *)(v0 + 32);
      sub_10001D53C(v0 + 64);
      if (v10 == v11)
        break;
      v8 = (v8 + 1) & v9;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
      {
        sub_10001E420();
        v1 = v0 + 16;
        goto LABEL_6;
      }
    }
    sub_10001E420();
    v1 = v0 + 16;
  }
  else
  {
LABEL_6:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    sub_10001D500(v1, v0 + 64);
    v22[0] = *v4;
    *v4 = 0x8000000000000000;
    sub_10001756C(v0 + 64, v8, isUniquelyReferenced_nonNull_native, v13, v14, v15, v16, v17, v20, v21, v22[0], v22[1], v22[2], v22[3], v22[4], v22[5], v22[6], v22[7], v22[8],
      v22[9],
      v22[10],
      v22[11],
      v22[12],
      v22[13],
      v22[14],
      v22[15],
      v22[16],
      v22[17],
      v22[18],
      v22[19]);
    v18 = *v4;
    *v4 = v22[0];
    swift_bridgeObjectRelease(v18);
  }
  sub_10001D53C(v1);
  sub_10002BB48();
  return sub_100044600(*(uint64_t (**)(void))(v0 + 8));
}

void sub_10003A380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];

  sub_100002F78(&qword_1000FB880);
  sub_10002BCBC();
  __chkstk_darwin(v2);
  sub_10004465C();
  v3 = sub_100002F78(&qword_1000FCDF8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_10001E654();
  v5 = (_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_terminationHandlers);
  sub_10002B308(v0 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_terminationHandlers, (uint64_t)v12, 1);
  v6 = swift_bridgeObjectRetain(*v5);
  sub_1000433C8(v6);
  sub_10001E034();
  v7 = sub_100002F78(&qword_1000FCE00);
  v8 = sub_10004429C(&qword_1000FCE08, &qword_1000FCE00);
  Collection.removingSubranges(_:)(v1, v7, v8);
  sub_10000BC68();
  v10 = v9;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  v11 = *v5;
  *v5 = v10;
  swift_bridgeObjectRelease(v11);
  sub_10001D950();
}

uint64_t sub_10003A4A0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 136) = v0;
  return sub_10001D948((uint64_t)sub_10003A4B4, v0);
}

uint64_t sub_10003A4B4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  _BOOL4 v47;
  uint64_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;

  v1 = v0 + 16;
  if (qword_1000FB0F0 != -1)
    swift_once(&qword_1000FB0F0, sub_100039F08);
  v2 = (_QWORD *)(v0 + 120);
  v3 = v0 + 128;
  v4 = sub_10001DD64();
  *(_QWORD *)(v0 + 144) = sub_100002FF8(v4, (uint64_t)qword_1000FC8B8);
  sub_1000448BC();
  v5 = sub_10002B3CC();
  v6 = static os_log_type_t.default.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 136);
  if (v7)
  {
    v9 = sub_10001D8D4(22);
    v62 = sub_10001D8D4(32);
    *(_DWORD *)v9 = 136315394;
    v10 = sub_10002BA0C();
    v11 = sub_10004383C(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v10, v11);
    sub_100044AC4(v12, v13, v14, v15, v16, v17, v18, v19);
    *(_QWORD *)(v0 + 112) = v20;
    v2 = (_QWORD *)(v0 + 120);
    v3 = v0 + 128;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120);
    sub_10001EBB0(v8);
    sub_10001E034();
    *(_WORD *)(v9 + 12) = 2048;
    v21 = v8 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_terminationHandlers;
    sub_10002B2E0(v8 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_terminationHandlers, v0 + 88);
    v22 = *(_QWORD *)(*(_QWORD *)v21 + 16);
    swift_release(v8);
    *(_QWORD *)(v0 + 128) = v22;
    sub_10002B3F0(v0 + 128, v0 + 136);
    swift_release(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Inference Provider extension %s calling %ld terminationHandlers", (uint8_t *)v9, 0x16u);
    sub_10001DBB8(v62);
    sub_10001D790(v62);
    v23 = v9;
    v1 = v0 + 16;
    sub_10001D790(v23);

  }
  else
  {

    sub_100044904(v8);
  }
  v24 = (uint64_t *)(*(_QWORD *)(v0 + 136)
                  + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_terminationHandlers);
  sub_10002B2E0((uint64_t)v24, v1);
  v25 = *v24;
  *(_QWORD *)(v0 + 152) = *v24;
  v26 = *(_BYTE *)(v25 + 32);
  *(_BYTE *)(v0 + 192) = v26;
  v27 = -1;
  v28 = -1 << v26;
  if (-(-1 << v26) < 64)
    v27 = ~(-1 << -(char)v28);
  v29 = v27 & *(_QWORD *)(v25 + 56);
  v30 = (_QWORD *)swift_bridgeObjectRetain(v25);
  if (!v29)
  {
    v39 = 63 - v28;
    if ((unint64_t)(63 - v28) > 0x7F)
    {
      if (v30[8])
      {
LABEL_13:
        sub_100044A3C();
        goto LABEL_10;
      }
      if (v39 >= 0xC0)
      {
        if (v30[9])
          goto LABEL_13;
        if (v39 >= 0x100)
        {
          if (v30[10])
            goto LABEL_13;
          if (v39 >= 0x140)
          {
            if (v30[11])
              goto LABEL_13;
            v40 = v39 >> 6;
            v41 = 12;
            while (v41 - 7 < v40)
            {
              if (v30[v41++])
                goto LABEL_13;
            }
          }
        }
      }
    }
    v61 = v2;
    v43 = *(_QWORD *)(v0 + 136);
    swift_release(v30);
    v44 = sub_10001D834(v43);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.default.getter();
    v47 = sub_10001E264(v45);
    v48 = *(_QWORD *)(v0 + 136);
    if (v47)
    {
      v49 = (uint8_t *)sub_10001D8D4(12);
      v63 = sub_10001D8D4(32);
      *(_DWORD *)v49 = 136315138;
      sub_10002BA0C();
      v50 = sub_10004383C(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
      v51 = sub_10001EC14(v50);
      sub_100044AC4(v51, v52, v53, v54, v55, v56, v57, v58);
      *v61 = v59;
      sub_100037AAC((uint64_t)v61, v3);
      sub_10001EBB0(v48);
      sub_10001E034();
      sub_10001E18C((void *)&_mh_execute_header, v45, v46, "Inference Provider extension %s finished calling terminationHandlers", v49);
      sub_10001DBB8(v63);
      sub_10001D790(v63);
      sub_10001D790((uint64_t)v49);

    }
    else
    {

      sub_10001EBB0(v48);
    }
    *(_BYTE *)(*(_QWORD *)(v0 + 136) + 148) = 0;
    sub_10001E3E8();
    __asm { BR              X0 }
  }
  v31 = 0;
LABEL_10:
  v32 = sub_100044A5C((uint64_t)v30, v31);
  sub_100044B08(v32);
  v33 = sub_10002BE5C();
  sub_10001D4C4(v33, v34);
  sub_10001E3E8();
  return swift_task_switch(v35, v36, v37);
}

uint64_t sub_10003A92C()
{
  _QWORD *v0;
  uint64_t Strong;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v7)(uint64_t);

  Strong = swift_unknownObjectWeakLoadStrong(v0 + 8);
  v0[22] = Strong;
  if (!Strong)
    return sub_100037B58((uint64_t)sub_10003AA08, v0[17], 0);
  v2 = v0[9];
  swift_getObjectType(Strong);
  v3 = *(int **)(v2 + 8);
  v7 = (uint64_t (*)(uint64_t))((char *)v3 + *v3);
  v4 = (_QWORD *)swift_task_alloc(v3[1]);
  v0[23] = v4;
  *v4 = v0;
  v4[1] = sub_10003A9C4;
  v5 = sub_100044984();
  return v7(v5);
}

uint64_t sub_10003A9C4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_10001E0D8();
  v1 = *(_QWORD *)(v0 + 176);
  sub_10001D788(*(_QWORD *)(v0 + 184), v2);
  swift_unknownObjectRelease(v1);
  return sub_10001D6D0();
}

uint64_t sub_10003AA08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  sub_10001DFE8();
  result = sub_10001D53C(v0 + 64);
  v3 = *(_QWORD *)(v0 + 160);
  if (*(_QWORD *)(v0 + 168))
  {
    sub_100044A3C();
    result = *(_QWORD *)(v0 + 152);
LABEL_3:
    v5 = sub_100044A5C(result, v4);
    sub_10001D500(v5, v0 + 40);
    sub_10001D4C4(v0 + 40, v0 + 64);
    sub_10002BC1C();
    return swift_task_switch(v6, v7, v8);
  }
  v9 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
LABEL_23:
    __break(1u);
    return result;
  }
  v10 = (1 << *(_BYTE *)(v0 + 192)) + 63;
  result = *(_QWORD *)(v0 + 152);
  if (v9 < (uint64_t)(v10 >> 6))
  {
    v11 = result + 56;
    v4 = v3 + 1;
    if (*(_QWORD *)(result + 56 + 8 * v9))
      goto LABEL_3;
    v12 = v10 >> 6;
    v4 = v9 + 1;
    if (v9 + 1 < v12)
    {
      if (*(_QWORD *)(v11 + 8 * v4))
        goto LABEL_3;
      v4 = v9 + 2;
      if (v9 + 2 < v12)
      {
        if (*(_QWORD *)(v11 + 8 * v4))
          goto LABEL_3;
        v13 = v9 + 3;
        if (v13 < v12)
        {
          if (*(_QWORD *)(v11 + 8 * v13))
          {
            v4 = v13;
            goto LABEL_3;
          }
          while (1)
          {
            v4 = v13 + 1;
            if (__OFADD__(v13, 1))
              goto LABEL_23;
            if (v4 >= v12)
              break;
            ++v13;
            if (*(_QWORD *)(v11 + 8 * v4))
              goto LABEL_3;
          }
        }
      }
    }
  }
  v14 = *(NSObject **)(v0 + 136);
  swift_release(result);
  v15 = sub_10001D834((uint64_t)v14);
  Logger.logObject.getter(v15);
  v16 = sub_10002B470();
  v17 = sub_10002B1AC(v16);
  v18 = *(_QWORD *)(v0 + 136);
  if (v17)
  {
    v19 = sub_10001D8D4(12);
    v20 = sub_10001D8D4(32);
    sub_10004462C(4.8149e-34);
    sub_10002BA0C();
    v21 = sub_10004383C(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
    v22 = sub_10002BE00(v21);
    sub_10001E89C(v22, v23, v24, v25);
    *(_QWORD *)(v0 + 120) = v26;
    sub_100044654(v0 + 120, v0 + 128, v1);
    sub_10001EBB0(v18);
    sub_10001E034();
    sub_1000444E0((void *)&_mh_execute_header, v14, v27, "Inference Provider extension %s finished calling terminationHandlers");
    sub_10001DBB8(v20);
    sub_10001D790(v20);
    sub_10001D790(v19);

  }
  else
  {

    sub_10001EBB0(v18);
  }
  *(_BYTE *)(*(_QWORD *)(v0 + 136) + 148) = 0;
  return sub_10001D8DC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003AC48(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[3] = a1;
  v2[4] = v1;
  v3 = sub_100002F78(&qword_1000FB230);
  v2[5] = sub_10001D800(*(_QWORD *)(v3 - 8));
  sub_10001D7B8();
  return sub_10001D674();
}

#error "10003AD50: call analysis failed (funcsize=123)"

uint64_t sub_10003AEA8()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 56));
  sub_10001D9C0();
  sub_10001E10C();
  return sub_10001D6D0();
}

uint64_t sub_10003AEE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(v2 + 32);
  v5 = *(_QWORD *)(v4 + 112);
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)&v6 = swift_release(v5).n128_u64[0];
  v7 = *(void **)(v4 + 120);
  if (v7)
    LODWORD(v7) = objc_msgSend(v7, "pid", v6);
  sub_100044828((int)v7);

  sub_100044AD0();
  *(_BYTE *)(v0 + 148) = 1;
  v8 = sub_10001DBC0();
  sub_10002B26C(v1, v9, v10, v8);
  v11 = sub_10004383C(&qword_1000FB828, type metadata accessor for InferenceProviderExtensionConnection);
  v12 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F3A08, 40);
  v12[2] = v0;
  v12[3] = v11;
  v12[4] = v0;
  v13 = sub_10001D834(v0);
  v14 = sub_100044AA4(v13, (uint64_t)&unk_1000FCDE0);
  swift_release(v14);
  sub_10001E330();
  return sub_10001D940(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_10003AFB0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1000FC914);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10001D668;
  return sub_10003A4A0();
}

uint64_t sub_10003AFF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = v1;
  return sub_10001D948((uint64_t)sub_10003B00C, v1);
}

uint64_t sub_10003B00C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;

  v1 = type metadata accessor for TimeoutExecutor(0);
  v2 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  v0[6] = v2;
  swift_defaultActor_initialize(v2);
  v3 = v2 + OBJC_IVAR____TtC13modelmanagerd15TimeoutExecutor_continuation;
  v4 = sub_100002F78(&qword_1000FBF30);
  sub_10002B26C(v3, v5, v6, v4);
  *(_BYTE *)(v2 + OBJC_IVAR____TtC13modelmanagerd15TimeoutExecutor_hitTimeout) = 0;
  v7 = dword_1000FF05C;
  sub_10001E194();
  v8 = (uint64_t **)swift_task_alloc(v7);
  v0[7] = (uint64_t)v8;
  *v8 = v0;
  v8[1] = (uint64_t *)sub_10003B0DC;
  return sub_1000B1310(0x8AC7230489E80000, 0, (uint64_t)&unk_1000FCDD0, v0[5]);
}

uint64_t sub_10003B0DC(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = *v2;
  v4 = v7;
  sub_10001EA4C(&v7);
  *(_QWORD *)(v4 + 64) = v1;
  swift_task_dealloc(v5);
  if (!v1)
  {
    sub_10001D9C8();
    sub_10001D9C0();
    *(_BYTE *)(v4 + 80) = a1 & 1;
  }
  return sub_10001D6DC();
}

uint64_t sub_10003B15C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, os_log_type_t type, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_log_type_t v29;
  _WORD *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  void *v34;
  NSObject *v35;
  id v36;
  void *v37;
  unsigned int v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint8_t *v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  NSObject *v49;
  os_log_type_t v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  NSObject *v55;
  int v56;
  uint64_t v57;
  os_log_type_t v58;
  _WORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  id v65;
  void *v66;
  unsigned int v67;
  id v68;
  void *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  os_log_type_t typea;

  sub_10002B628();
  if (*(_BYTE *)(v27 + 80) == 1)
  {
    if (qword_1000FB0F0 != -1)
      swift_once(&qword_1000FB0F0, sub_100039F08);
    v28 = sub_10001DD64();
    sub_100037AC4(v28, (uint64_t)qword_1000FC8B8);
    v29 = sub_100037B50();
    if (!sub_100039E20(v29))
      goto LABEL_22;
    v30 = (_WORD *)sub_10001D8D4(2);
    sub_10004478C(v30);
    v33 = "terminatedExtensionError TimeoutExecutor timed out";
LABEL_21:
    sub_100039E4C((void *)&_mh_execute_header, v31, v32, v33);
    sub_10001D790(v26);
LABEL_22:
    v60 = *(_QWORD *)(v27 + 32);

    v61 = enum case for ModelManagerError.internalError(_:);
    v62 = sub_10002B8A0();
    v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 104);
    v64 = v60;
LABEL_31:
    v72 = v61;
    goto LABEL_32;
  }
  v34 = *(void **)(*(_QWORD *)(v27 + 40) + 136);
  if (!v34)
  {
    if (qword_1000FB0F0 != -1)
      swift_once(&qword_1000FB0F0, sub_100039F08);
    v57 = sub_10001DD64();
    sub_100037AC4(v57, (uint64_t)qword_1000FC8B8);
    v58 = sub_100037B50();
    if (!sub_100039E20(v58))
      goto LABEL_22;
    v59 = (_WORD *)sub_10001D8D4(2);
    sub_10004478C(v59);
    v33 = "terminatedExtensionError called with no exit context";
    goto LABEL_21;
  }
  v35 = v34;
  v36 = -[NSObject status](v35, "status");
  if (!v36 || (v37 = v36, v38 = objc_msgSend(v36, "isJetsam"), v37, !v38))
  {
    if (qword_1000FB0F0 != -1)
      swift_once(&qword_1000FB0F0, sub_100039F08);
    v46 = *(_QWORD *)(v27 + 40);
    v47 = sub_10001DD64();
    sub_100002FF8(v47, (uint64_t)qword_1000FC8B8);
    sub_10001D834(v46);
    v48 = v35;
    v49 = sub_100037C24();
    v50 = static os_log_type_t.error.getter();
    v51 = sub_1000447E0(v49);
    v52 = *(_QWORD *)(v27 + 40);
    if (v51)
    {
      v53 = sub_10001D8D4(18);
      typea = v50;
      v54 = (_QWORD *)sub_10001D8D4(8);
      *(_DWORD *)v53 = 138412546;
      *(_QWORD *)(v27 + 24) = v48;
      v55 = v48;
      sub_100044654(v27 + 24, v27 + 32, v53 + 4);
      *v54 = v34;

      *(_WORD *)(v53 + 12) = 1024;
      v56 = *(_DWORD *)(v52 + 144);
      swift_release(v52);
      *(_DWORD *)(v27 + 72) = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v27 + 72, v27 + 76, v53 + 14);
      swift_release(v52);
      _os_log_impl((void *)&_mh_execute_header, v49, typea, "terminatedExtensionError returning abnormal extension termination with %@ for %d", (uint8_t *)v53, 0x12u);
      sub_100002F78(&qword_1000FB8E0);
      sub_10001DBB8((uint64_t)v54);
      sub_10001D790((uint64_t)v54);
      sub_10001D790(v53);
    }
    else
    {
      sub_10001EBB0(*(_QWORD *)(v27 + 40));

    }
    v65 = sub_100044A98();
    if (v65)
    {
      v66 = v65;
      v67 = objc_msgSend(v65, "domain");

    }
    else
    {
      v67 = 0;
    }
    v68 = sub_100044A98();
    if (v68)
    {
      v69 = v68;
      v70 = objc_msgSend(v68, "code");

    }
    else
    {
      v70 = 0;
    }
    v71 = *(_QWORD *)(v27 + 32);

    *(_DWORD *)v71 = v67;
    *(_QWORD *)(v71 + 8) = v70;
    v61 = enum case for ModelManagerError.inferenceProviderCrashed(_:);
    v62 = sub_10002B8A0();
    v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 104);
    v64 = v71;
    goto LABEL_31;
  }
  if (qword_1000FB0F0 != -1)
    swift_once(&qword_1000FB0F0, sub_100039F08);
  v39 = sub_10001DD64();
  sub_100002FF8(v39, (uint64_t)qword_1000FC8B8);
  sub_10001E194();
  v40 = sub_100037C24();
  v41 = static os_log_type_t.default.getter();
  v42 = sub_10002B3F8(v40);
  v43 = *(_QWORD *)(v27 + 40);
  if (v42)
  {
    v44 = (uint8_t *)sub_10001D8D4(8);
    *(_DWORD *)v44 = 67109120;
    *(_DWORD *)(v27 + 76) = *(_DWORD *)(v43 + 144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v27 + 76, v27 + 80, v44 + 4);
    swift_release(v43);
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "terminatedExtensionError found process %d jettisoned", v44, 8u);
    sub_10001D790((uint64_t)v44);
    v45 = v40;
  }
  else
  {
    swift_release(*(_QWORD *)(v27 + 40));
    v45 = v35;
    v35 = v40;
  }

  sub_10002B8A0();
  v64 = sub_10004490C();
LABEL_32:
  v63(v64, v72, v62);
  return sub_100039E04(*(uint64_t (**)(void))(v27 + 8));
}

uint64_t sub_10003B604()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);

  sub_10001E6F0();
  swift_release(*(_QWORD *)(v0 + 40));
  sub_10001D9C0();
  if (qword_1000FB0F0 != -1)
    swift_once(&qword_1000FB0F0, sub_100039F08);
  v1 = *(NSObject **)(v0 + 64);
  v2 = sub_10001DD64();
  sub_100002FF8(v2, (uint64_t)qword_1000FC8B8);
  sub_10001E764();
  sub_10001E764();
  sub_10002B3CC();
  sub_100037B50();
  if (sub_10002B3F8(v1))
  {
    v3 = sub_10001D8D4(12);
    v4 = (_QWORD *)sub_10001D8D4(8);
    sub_100044874(5.7779e-34);
    v5 = sub_100044ADC();
    *(_QWORD *)(v0 + 16) = v5;
    sub_100037AAC(v0 + 16, v0 + 24);
    *v4 = v5;
    sub_10002B498();
    sub_10002B498();
    sub_1000444E0((void *)&_mh_execute_header, v1, v6, "terminatedExtensionError TimeoutExecutor threw %@");
    sub_100002F78(&qword_1000FB8E0);
    sub_10001DBB8((uint64_t)v4);
    sub_10001D790((uint64_t)v4);
    sub_10001D790(v3);

    sub_10002B498();
  }
  else
  {
    sub_10002B498();
    sub_10002B498();
    sub_10002B498();

  }
  sub_10002B8A0();
  v7 = sub_10004490C();
  v8(v7);
  return sub_10002B160(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003B760(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_10003B778, a1, 0);
}

uint64_t sub_10003B778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 16) + 128);
  *(_QWORD *)(v12 + 24) = v13;
  sub_10001E194();
  if (!v13)
    return sub_100006A38(*(uint64_t (**)(void))(v12 + 8));
  v14 = (_QWORD *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
  *(_QWORD *)(v12 + 32) = v14;
  *v14 = v12;
  v14[1] = sub_10003B7F0;
  return Task<>.value.getter(v14, v13, (char *)&type metadata for () + 8, v15, v16, v17, v18, v19, a9, a10, a11, a12);
}

uint64_t sub_10003B7F0()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 32));
  sub_10001D9C0();
  return sub_10001D674();
}

double sub_10003B830(void *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  double result;

  sub_100002F78(&qword_1000FB230);
  sub_10002BCBC();
  __chkstk_darwin(v6);
  sub_10004465C();
  v7 = (void *)v3[15];
  v3[15] = a1;
  v8 = a1;

  v3[14] = a2;
  swift_retain();
  sub_100044820();
  v9 = sub_10001DBC0();
  sub_10002B26C(v2, v10, v11, v9);
  v12 = sub_10004383C(&qword_1000FB828, type metadata accessor for InferenceProviderExtensionConnection);
  v13 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F3990, 48);
  v13[2] = v3;
  v13[3] = v12;
  v13[4] = v8;
  v13[5] = v3;
  sub_10001D834((uint64_t)v3);
  v14 = v8;
  v15 = sub_100002CAC(v2, (uint64_t)&unk_1000FCDB0, (uint64_t)v13);
  v16 = v3[16];
  v3[16] = v15;
  *(_QWORD *)&result = swift_release(v16).n128_u64[0];
  return result;
}

uint64_t sub_10003B928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 24) = a4;
  *(_QWORD *)(v5 + 32) = a5;
  return swift_task_switch(sub_10003B940, a5, 0);
}

uint64_t sub_10003B940()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = v0[3];
  v1 = v0[4];
  v3 = sub_10004383C(&qword_1000FB828, type metadata accessor for InferenceProviderExtensionConnection);
  v4 = swift_task_alloc(32);
  v0[5] = v4;
  *(_QWORD *)(v4 + 16) = v2;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[6] = v5;
  v6 = sub_100044B00((uint64_t)v5, &qword_1000FCDB8, RBSProcessExitContext_ptr);
  *v5 = v0;
  v5[1] = sub_10003BA20;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, v1, v3, 0xD000000000000027, 0x80000001000CE440, sub_100043DF4, v4, v6);
}

uint64_t sub_10003BA20()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 48));
  sub_10001E330();
  sub_10001E10C();
  return sub_10001D6D0();
}

uint64_t sub_10003BA5C()
{
  os_log_type_t v0;
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  _QWORD *v7;

  v2 = v1[2];
  v1[7] = v2;
  v3 = sub_10004464C();
  v1[8] = sub_1000446D4((uint64_t)"InferenceProvider Extension Terminated", 38);
  if (qword_1000FB0F0 != -1)
    swift_once(&qword_1000FB0F0, sub_100039F08);
  v4 = sub_10001DD64();
  sub_100037AC4(v4, (uint64_t)qword_1000FC8B8);
  v5 = sub_100037FDC();
  if (sub_10001E6C4(v5))
  {
    v6 = (uint8_t *)sub_10001D8D4(2);
    *(_WORD *)v6 = 0;
    sub_100044580((void *)&_mh_execute_header, v3, v0, "Extension marked terminated", v6);
    sub_10001D790((uint64_t)v6);
  }

  v7 = (_QWORD *)swift_task_alloc(dword_1000FC91C);
  v1[9] = v7;
  *v7 = v1;
  v7[1] = sub_10003BB54;
  return sub_10003AC48(v2);
}

uint64_t sub_10003BB54()
{
  uint64_t v0;

  v0 = sub_100044A14();
  sub_10001D680(v0);
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_10003BB88()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 56);
  _OSActivity.close()();
  sub_10001D9C0();

  return sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
}

void sub_10003BBBC(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD aBlock[5];
  uint64_t v12;

  v4 = sub_100002F78(&qword_1000FCDC0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = swift_allocObject(&unk_1000F39B8, v8 + v6, v7 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_100043E90;
  v12 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003BD30;
  aBlock[3] = &unk_1000F39D0;
  v10 = _Block_copy(aBlock);
  objc_msgSend(a2, "monitorForDeath:", v10, swift_release(v12).n128_f64[0]);
  _Block_release(v10);
}

uint64_t sub_10003BCEC(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;
  void *v5;

  v5 = a2;
  v2 = a2;
  v3 = sub_100002F78(&qword_1000FCDC0);
  return CheckedContinuation.resume(returning:)(&v5, v3);
}

void sub_10003BD30(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(id, id);
  id v7;
  id v8;

  v6 = *(void (**)(id, id))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(v8, v7);
  swift_release(v5);

}

uint64_t sub_10003BD9C(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 40) = a3;
  *(_QWORD *)(v4 + 48) = v3;
  *(_QWORD *)(v4 + 32) = a2;
  *(_DWORD *)(v4 + 84) = a1;
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_10003BDFC()
{
  uint64_t v0;
  id v1;
  void *v2;
  NSObject *v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  int v9;
  uint8_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  id v40;
  unsigned int v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  void *v59;
  uint64_t v60;

  sub_10002B628();
  v1 = objc_msgSend((id)objc_opt_self(RBSProcessIdentifier), "identifierWithPid:", *(unsigned int *)(v0 + 84));
  if (v1)
  {
    v2 = v1;
    v3 = sub_100044B00((uint64_t)v1, &qword_1000FCD90, RBSProcessHandle_ptr);
    v4 = v2;
    v5 = v3;
    v27 = sub_100091E84((uint64_t)v4);
    if (qword_1000FB0F0 != -1)
      swift_once(&qword_1000FB0F0, sub_100039F08);
    v28 = sub_10001DD64();
    sub_100037AC4(v28, (uint64_t)qword_1000FC8B8);
    v29 = sub_100037FDC();
    if (sub_10001E6C4(v29))
    {
      v30 = (uint8_t *)sub_10001D8D4(2);
      *(_WORD *)v30 = 0;
      sub_100044580((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "InferenceProviderExtensionConnection setCurrentState acquiring assertion", v30);
      sub_10001D790((uint64_t)v30);
    }
    v31 = *(_QWORD *)(v0 + 40);
    v32 = *(_QWORD *)(v0 + 32);

    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease(0xE000000000000000);
    sub_10002BA0C();
    v33 = sub_10004383C(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
    v34._countAndFlagsBits = sub_10002BE00(v33);
    String.append(_:)(v34);
    sub_10001E420();
    v59 = v27;
    v35 = objc_msgSend((id)objc_opt_self(RBSTarget), "targetWithPid:", objc_msgSend(v27, "pid"));
    v36 = sub_100002F78(&qword_1000FB750);
    v37 = sub_100006A80(v36, 40);
    *(_OWORD *)(v37 + 16) = xmmword_1000CBCC0;
    sub_100044B00(v37, &qword_1000FCD98, RBSDomainAttribute_ptr);
    sub_10001E140();
    v38 = sub_10003C440(0xD000000000000016, 0x80000001000CE420, v32, v31);
    *(_QWORD *)(v37 + 32) = v38;
    specialized Array._endMutation()(v38);
    v39 = objc_allocWithZone((Class)RBSAssertion);
    v40 = sub_1000436C0(0xD00000000000001CLL, 0x80000001000CE400, v35, v37);
    *(_QWORD *)(v0 + 24) = 0;
    v41 = objc_msgSend(v40, "acquireWithError:", v0 + 24);
    v42 = *(void **)(v0 + 24);
    if (v41)
    {
      v43 = *(_QWORD *)(*(_QWORD *)(v0 + 48) + 152);
      v44 = swift_task_alloc(32);
      *(_QWORD *)(v44 + 16) = v40;
      v45 = v42;
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v43 + 24));
      sub_10003C4D0((id *)(v43 + 16), *(void **)(v44 + 16));
      os_unfair_lock_unlock((os_unfair_lock_t)(v43 + 24));

      sub_10001D930();
      sub_10002B528();
      return sub_1000445E4((uint64_t)v59, *(uint64_t (**)(void))(v0 + 8));
    }
    v46 = v42;
    v17 = _convertNSErrorToError(_:)(v42);

    swift_willThrow(v47, v48, v49, v50, v51, v52, v53, v54);
  }
  else
  {
    if (qword_1000FB0F0 != -1)
      swift_once(&qword_1000FB0F0, sub_100039F08);
    v6 = sub_10001DD64();
    v7 = sub_100037AC4(v6, (uint64_t)qword_1000FC8B8);
    v8 = static os_log_type_t.fault.getter();
    if (sub_10001E264(v7))
    {
      v9 = *(_DWORD *)(v0 + 84);
      v10 = (uint8_t *)sub_10001D8D4(12);
      v60 = sub_10001D8D4(32);
      *(_DWORD *)v10 = 136315138;
      *(_DWORD *)(v0 + 80) = v9;
      v11 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
      sub_10001E89C(v11, v12, v13, v14);
      *(_QWORD *)(v0 + 16) = v15;
      sub_100044654(v0 + 16, v0 + 24, (uint64_t)(v10 + 4));
      sub_10001E034();
      sub_10001E18C((void *)&_mh_execute_header, v7, v8, "launchIfNeededAndTake failed to get process identifier for %s.", v10);
      sub_10001DBB8(v60);
      sub_10001D790(v60);
      sub_10001D790((uint64_t)v10);
    }

    sub_10002B8A0();
    v16 = sub_10004383C((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    v17 = sub_1000444A4(v16);
    v19 = sub_100044964(v18, enum case for ModelManagerError.internalError(_:));
    swift_willThrow(v19, v20, v21, v22, v23, v24, v25, v26);
  }
  *(_QWORD *)(v0 + 56) = v17;
  sub_10002B8A0();
  v55 = sub_10004383C((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
  *(_QWORD *)(v0 + 64) = sub_1000444A4(v55);
  v56 = (_QWORD *)swift_task_alloc(dword_1000FC924);
  *(_QWORD *)(v0 + 72) = v56;
  *v56 = v0;
  v56[1] = sub_10003C370;
  v57 = sub_100044708();
  return sub_1000445C8(v57);
}

uint64_t sub_10003C370()
{
  uint64_t v0;

  v0 = sub_100044A14();
  sub_10001D680(v0);
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_10003C3D0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_willThrow();
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_10003C440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  NSString v7;
  NSString v8;
  id v9;

  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), "attributeWithDomain:name:", v7, v8);

  return v9;
}

id sub_10003C4D0(id *a1, void *a2)
{

  *a1 = a2;
  return a2;
}

uint64_t sub_10003C510(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = type metadata accessor for BuiltInInferenceProvider(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = sub_10002B1BC(v5);
  v3[8] = sub_10001E784();
  v6 = type metadata accessor for InferenceProviderExtensionConnection.ProviderIdentification(0);
  v3[9] = v6;
  v3[10] = sub_10001D800(*(_QWORD *)(v6 - 8));
  v7 = type metadata accessor for XPCSession.InitializationOptions(0);
  v3[11] = sub_10001D800(*(_QWORD *)(v7 - 8));
  v8 = type metadata accessor for AppExtensionProcess(0);
  v3[12] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[13] = v9;
  v3[14] = sub_10001D800(v9);
  v10 = type metadata accessor for AppExtensionProcess._InstanceIdentifier(0);
  v3[15] = sub_10001D800(*(_QWORD *)(v10 - 8));
  v11 = type metadata accessor for AppExtensionProcess.Configuration(0);
  v3[16] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v3[17] = v12;
  v3[18] = sub_10002B1BC(v12);
  v3[19] = sub_10001E784();
  v13 = sub_1000449A0();
  v3[20] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v3[21] = v14;
  v3[22] = sub_10002B1BC(v14);
  v3[23] = sub_10001E784();
  sub_10001D7B8();
  return sub_10001D6D0();
}

#error "10003C840: call analysis failed (funcsize=182)"

uint64_t sub_10003C930()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 208));
  sub_10001D7B8();
  return sub_10001D674();
}

#error "10003C9D4: call analysis failed (funcsize=33)"

uint64_t sub_10003C9EC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 224) = v1;
  swift_task_dealloc(v3);
  return sub_10001D6D0();
}

uint64_t sub_10003CA3C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  _QWORD *v7;

  v1 = v0[22];
  v2 = v0[15];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[21] + 16))(v1, v0[23], v0[20]);
  v3 = AppExtensionProcess.Configuration.init(appExtensionIdentity:onInterruption:)(v1, nullsub_2, 0);
  AppExtensionProcess._InstanceIdentifier.init()(v3);
  AppExtensionProcess.Configuration._instanceIdentifier.setter(v2);
  v4 = sub_100044984();
  sub_10001EA84(v4, v5, v6);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to AppExtensionProcess.init(configuration:)[1]);
  v0[29] = v7;
  *v7 = v0;
  v7[1] = sub_10003CAF8;
  return AppExtensionProcess.init(configuration:)(v0[14], v0[18]);
}

uint64_t sub_10003CAF8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 240) = v1;
  swift_task_dealloc(v3);
  return sub_10001D6D0();
}

uint64_t sub_10003CB48()
{
  uint64_t v0;
  uint64_t result;
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  result = AppExtensionProcess._auditToken.getter();
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v3 = HIDWORD(v2);
    v4 = (_QWORD *)swift_task_alloc(dword_1000FC92C);
    *(_QWORD *)(v0 + 248) = v4;
    sub_100044A84(v4, (uint64_t)sub_10003CBA0);
    return sub_10003BD9C(v3, v5, v6);
  }
  return result;
}

uint64_t sub_10003CBA0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10001E0D8();
  v2 = v0[31];
  v0[32] = v3;
  v0[33] = v1;
  swift_task_dealloc(v2);
  return sub_10001D6D0();
}

void sub_10003CBFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Lib;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int EnumCaseMultiPayload;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 264);
  Lib = AppExtensionProcess._makeLibXPCConnection()();
  if (v1)
  {
    v3 = *(_QWORD *)(v0 + 152);
    v4 = *(_QWORD *)(v0 + 128);
    v5 = *(_QWORD *)(v0 + 136);
    v6 = *(_QWORD *)(v0 + 104);

    sub_100044888(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
    v7 = sub_10002BE5C();
    v12(v7, v11);
    v31 = *(_QWORD *)(v0 + 64);
    v33 = *(_QWORD *)(v0 + 56);
    _OSActivity.close()();
    sub_10001D9C0();
    sub_10001D938();
    sub_10001E490();
    sub_10002B504();
    sub_10002B528();
    sub_10002B4C4();
    sub_10002B70C();
    sub_10002BDF0();
    sub_10001EAC8();
    swift_task_dealloc(v31);
    swift_task_dealloc(v33);
  }
  else
  {
    v8 = Lib;
    v9 = *(_QWORD *)(v0 + 88);
    type metadata accessor for XPCSession(0);
    v10 = swift_unknownObjectRetain(v8);
    static XPCSession.InitializationOptions.none.getter(v10);
    v14 = XPCSession.__allocating_init(fromConnection:targetQueue:options:incomingMessageHandler:cancellationHandler:)(v8, 0, v9, sub_10003D160, 0, sub_10003D3A4, 0);
    sub_100044AE4(*(_QWORD *)(v0 + 32));
    v15 = sub_100037FBC();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v15, v16);
    v18 = *(_QWORD *)(v0 + 80);
    if (EnumCaseMultiPayload == 1)
    {
      sub_100044AF8();
      v19 = swift_retain();
      v20 = InferenceProviderXPCSender.__allocating_init(session:)(v19);
      sub_100042B48(v18);
    }
    else
    {
      v21 = *(_QWORD *)(v0 + 56);
      v22 = *(_QWORD *)(v0 + 64);
      v23 = *(_QWORD *)(v0 + 48);
      sub_10001E554(v22, *(_QWORD *)(v0 + 80), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 32));
      sub_100044AF8();
      sub_10001E554(v21, v22, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 16));
      swift_retain();
      v20 = InferenceProviderXPCSender.__allocating_init(builtInProvider:session:)(v21, v14);
      sub_100044888(*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8));
    }
    v24 = *(void **)(v0 + 256);
    v34 = *(_QWORD *)(v0 + 160);
    v36 = *(_QWORD *)(v0 + 184);
    v30 = *(_QWORD *)(v0 + 152);
    v32 = *(_QWORD *)(v0 + 168);
    v25 = *(_QWORD *)(v0 + 136);
    v29 = *(_QWORD *)(v0 + 128);
    v26 = *(_QWORD *)(v0 + 104);
    sub_10003B830(v24, v20);
    sub_10001D9C8();
    swift_unknownObjectRelease(v8);
    sub_100044820();

    sub_100044888(*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v30, v29);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v36, v34);
    sub_100044840();
    v35 = v28;
    v37 = v27;
    _OSActivity.close()();
    sub_10001D9C0();
    sub_10001D938();
    sub_10001EAC8();
    sub_10001E490();
    sub_10002B504();
    sub_10002B528();
    sub_10002B4C4();
    sub_10002B70C();
    sub_10002BDF0();
    swift_task_dealloc(v35);
    swift_task_dealloc(v37);
    sub_10001E5D0();
  }
  sub_10001E3E8();
  __asm { BR              X0 }
}

uint64_t sub_10003CEF8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_10001E0D8();
  sub_10001EA4C(v4);
  *(_QWORD *)(v1 + 280) = v2;
  swift_task_dealloc(v5);
  if (!v2)

  sub_10001E10C();
  return sub_100037B58(v6, v7, v8);
}

#error "10003CF9C: call analysis failed (funcsize=23)"

#error "10003CFF4: call analysis failed (funcsize=22)"

#error "10003D068: call analysis failed (funcsize=29)"

#error "10003D0F4: call analysis failed (funcsize=35)"

#error "10003D14C: call analysis failed (funcsize=22)"

void sub_10003D160(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = type metadata accessor for XPCReceivedMessage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v22 - v9;
  if (qword_1000FB0F0 != -1)
    swift_once(&qword_1000FB0F0, sub_100039F08);
  v11 = type metadata accessor for Logger(0);
  sub_100002FF8(v11, (uint64_t)qword_1000FC8B8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v13 = v12(v10, a1, v4);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = swift_slowAlloc(32, -1);
    v25 = v23;
    *(_DWORD *)v16 = 136315138;
    v22 = v16 + 4;
    v12(v8, (uint64_t)v10, v4);
    v17 = String.init<A>(describing:)(v8, v4);
    v19 = v18;
    sub_1000102C0(v17, v18, &v25);
    v24 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
    swift_bridgeObjectRelease(v19);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Unexpected message received from InferenceProvider XPC service: %s", v16, 0xCu);
    v21 = v23;
    swift_arrayDestroy(v23, 1);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v16, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }

  a2[3] = &type metadata for String;
  a2[4] = &protocol witness table for String;
  *a2 = 0;
  a2[1] = 0xE000000000000000;
}

void sub_10003D3A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t (*v7)(char *, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;

  v2 = type metadata accessor for XPCRichError(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000FB0F0 != -1)
    swift_once(&qword_1000FB0F0, sub_100039F08);
  v6 = type metadata accessor for Logger(0);
  sub_100002FF8(v6, (uint64_t)qword_1000FC8B8);
  v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v8 = v7(v5, a1, v2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v11 = 138412290;
    v17 = v11 + 4;
    v13 = sub_10004383C(&qword_1000FC3A8, (uint64_t (*)(uint64_t))&type metadata accessor for XPCRichError);
    v14 = swift_allocError(v2, v13, 0, 0);
    v7(v15, (uint64_t)v5, v2);
    v16 = _swift_stdlib_bridgeErrorToNSError(v14);
    v18 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    *v12 = v16;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Connection to InferenceProvider XPC service cancelled: %@", v11, 0xCu);
    sub_100002F78(&qword_1000FB8E0);
    swift_arrayDestroy(v12, 1);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

}

uint64_t sub_10003D5CC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_10001D948((uint64_t)sub_10003D5E0, v0);
}

uint64_t sub_10003D5E0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  v1 = unk_1000FB824;
  v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1000FB820 + dword_1000FB820);
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 24) = v2;
  *v2 = v0;
  v2[1] = sub_10003D654;
  return v4((uint64_t)v4, (uint64_t)&unk_1000FCD80, *(_QWORD *)(v0 + 16));
}

uint64_t sub_10003D654()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 32) = v1;
  swift_task_dealloc(v3);
  if (!v1)
    sub_10001D930();
  sub_10001E10C();
  return sub_10001D6D0();
}

uint64_t sub_10003D6A8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003D6D4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2[19] = a2;
  v4 = (*(_QWORD *)(*(_QWORD *)(sub_100002F78(&qword_1000FCD70) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[20] = swift_task_alloc(v4);
  v2[21] = swift_task_alloc(v4);
  v5 = type metadata accessor for RequestPriority(0);
  v2[22] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[23] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[24] = swift_task_alloc(v7);
  v2[25] = swift_task_alloc(v7);
  v2[26] = swift_task_alloc(v7);
  v2[27] = swift_task_alloc(v7);
  v2[28] = swift_task_alloc(v7);
  return swift_task_switch(sub_10003D7A0, a2, 0);
}

uint64_t sub_10003D7A0()
{
  uint64_t v0;
  uint64_t v1;
  uint8_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  _WORD *v80;
  NSObject *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  void (*v90)(uint64_t, _QWORD, uint64_t);
  os_log_type_t v91;
  uint64_t v92;
  os_log_type_t v93;
  uint8_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  uint64_t v100;
  char v101;
  const char *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  os_log_type_t type;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  NSObject *v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t, uint64_t);
  uint64_t v115;

  v1 = v0;
  v4 = *(_QWORD *)(v0 + 152);
  v2 = (uint8_t *)(v0 + 152);
  v3 = v4;
  v6 = *((_QWORD *)v2 + 8);
  v5 = *((_QWORD *)v2 + 9);
  v7 = *((_QWORD *)v2 + 3);
  v8 = *((_QWORD *)v2 + 4);
  v9 = *((_QWORD *)v2 + 1);
  v109 = OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_loadingCount;
  v10 = enum case for RequestPriority.none(_:);
  if (*(uint64_t *)(v4 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_loadingCount) <= 0)
    v11 = enum case for RequestPriority.none(_:);
  else
    v11 = enum case for RequestPriority.background(_:);
  v114 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 104);
  v114(v6, v11, v7);
  v12 = *(uint8_t **)(v8 + 32);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v5, v6, v7);
  v13 = sub_100002F78(&qword_1000FCD88);
  v14 = *(unsigned __int8 *)(v8 + 80);
  v15 = (v14 + 32) & ~v14;
  v16 = *(_QWORD *)(v8 + 72);
  v17 = swift_allocObject(v13, v15 + 2 * v16, v14 | 7);
  *(_OWORD *)(v17 + 16) = xmmword_1000CBCD0;
  v18 = v17 + v15;
  v110 = v3;
  v19 = (_QWORD *)(v3 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_activeRequest);
  sub_10002B2E0((uint64_t)v19, (uint64_t)(v2 - 136));
  v108 = v19;
  v20 = *v19;
  v21 = swift_bridgeObjectRetain(v20);
  sub_10003E0D4(v21, v9);
  swift_bridgeObjectRelease(v20);
  v22 = sub_100044974();
  v23 = *((_QWORD *)v2 + 3);
  v24 = v2;
  v25 = *((_QWORD *)v2 + 1);
  if (v22 == 1)
  {
    v26 = v114;
    v114(v18, v10, v23);
    sub_100043958(v25);
  }
  else
  {
    ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v18, v25, v23);
    v26 = v114;
  }
  v27 = *(_QWORD *)(v1 + 168);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 184) + 16))(v18 + v16, *(_QWORD *)(v1 + 224), *(_QWORD *)(v1 + 176));
  sub_10003E4E4(v17, v27);
  swift_setDeallocating(v17);
  sub_1000437F8();
  v28 = sub_100044974();
  v29 = *(_QWORD *)(v1 + 208);
  v31 = *(_QWORD *)(v1 + 168);
  v30 = *(_QWORD *)(v1 + 176);
  if (v28 == 1)
  {
    v26(v29, v10, v30);
    sub_100043958(v31);
  }
  else
  {
    ((void (*)(uint64_t, _QWORD, uint64_t))v12)(v29, *(_QWORD *)(v1 + 168), v30);
  }
  v113 = (uint64_t)v24;
  v32 = (uint64_t)(v24 - 112);
  if (qword_1000FB0F0 != -1)
    swift_once(&qword_1000FB0F0, sub_100039F08);
  v33 = *(NSObject **)(v1 + 200);
  v34 = *(_QWORD *)(v1 + 152);
  v35 = sub_10001DD64();
  v36 = sub_100002FF8(v35, (uint64_t)qword_1000FC8B8);
  sub_100044944();
  v37 = swift_retain_n(v34, 8);
  Logger.logObject.getter(v37);
  v38 = sub_10002B470();
  v112 = v33;
  v39 = sub_10002B3F8(v33);
  v40 = *(_QWORD *)(v1 + 200);
  v111 = v10;
  if (v39)
  {
    v12 = v24;
    v105 = *(_QWORD *)(v1 + 184);
    v41 = *(_QWORD *)(v1 + 176);
    type = v38;
    v42 = *(_QWORD *)(v1 + 152);
    v107 = v32;
    v43 = sub_10001D8D4(52);
    v115 = sub_10001D8D4(96);
    *(_DWORD *)v43 = 136316162;
    sub_10002BA0C();
    v44 = sub_10004383C(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
    v45 = sub_10002BE00(v44);
    sub_1000449DC(v45, v46);
    *(_QWORD *)(v1 + 120) = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v113 - 32, v113 - 24);
    sub_10001EBB0(v42);
    sub_10001E034();
    *(_WORD *)(v43 + 12) = 2080;
    v48 = v40;
    sub_100044944();
    v49 = sub_1000449FC();
    sub_1000449DC(v49, v50);
    *(_QWORD *)(v1 + 112) = v51;
    sub_10002B3F0(v113 - 40, v113 - 32);
    sub_10001E420();
    v52 = *(void (**)(uint64_t, uint64_t))(v105 + 8);
    v52(v40, v41);
    *(_WORD *)(v43 + 22) = 2080;
    sub_10002B2E0(v42 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_activePriority, v113 - 64);
    sub_100044944();
    v53 = sub_1000449FC();
    v55 = v54;
    sub_1000449DC(v53, v54);
    *(_QWORD *)(v1 + 128) = v56;
    sub_10002B3F0(v113 - 24, v113 - 16);
    sub_10001EBB0(v42);
    swift_bridgeObjectRelease(v55);
    *(_WORD *)(v43 + 32) = 2048;
    v57 = *(_QWORD *)(v110 + v109);
    sub_100044820();
    *(_QWORD *)(v1 + 136) = v57;
    sub_10002B3F0(v113 - 16, v113 - 8);
    sub_100044820();
    *(_WORD *)(v43 + 42) = 2048;
    v58 = *(_QWORD *)(*v108 + 16);
    sub_100044820();
    *(_QWORD *)(v1 + 144) = v58;
    sub_10002B3F0(v113 - 8, v113);
    sub_100044820();
    _os_log_impl((void *)&_mh_execute_header, v112, type, "InferenceProviderExtensionConnection %s setCurrentState to %s from %s [%ld, %ld", (uint8_t *)v43, 0x34u);
    sub_1000448A8(v59, v60, v61, v62, v63, v64, v65, v66, v48, v105, v113 - 40, v113 - 64, v113 - 16, v113 - 8, v115);
    sub_10001D790(v43 + 44);
    v67 = v43;
    v32 = v107;
    sub_10001D790(v67);

  }
  else
  {
    v69 = *(_QWORD *)(v1 + 176);
    v68 = *(_QWORD *)(v1 + 184);
    v70 = *(_QWORD *)(v1 + 152);
    sub_100044904(v70);
    v52 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
    v52(v40, v69);

    sub_100044904(v70);
  }
  *(_QWORD *)(v1 + 232) = v52;
  v71 = *(_QWORD *)(v1 + 208);
  v72 = *(_QWORD *)(v1 + 192);
  v73 = *(_QWORD *)(v1 + 176);
  v74 = *(_QWORD *)(v1 + 152) + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_activePriority;
  sub_10002B2E0(v74, v32);
  sub_100044944();
  v75 = sub_1000B22E4(v71, v72);
  v76 = ((uint64_t (*)(uint64_t, uint64_t))v52)(v72, v73);
  v77 = *(_QWORD *)(v1 + 152);
  if ((v75 & 1) != 0 && *(_QWORD *)(v77 + 112))
  {
    v78 = Logger.logObject.getter(v76);
    v79 = static os_log_type_t.info.getter();
    if (sub_1000447E0(v78))
    {
      v80 = (_WORD *)sub_10001D8D4(2);
      sub_10004478C(v80);
      sub_100044580((void *)&_mh_execute_header, v78, v79, "InferenceProviderExtensionConnection setCurrentState not updating state", v12);
      sub_10001D790((uint64_t)v12);
    }
    v81 = v78;
LABEL_24:
    v95 = *(_QWORD *)(v1 + 224);
    v96 = *(_QWORD *)(v1 + 208);
    v97 = *(_QWORD *)(v1 + 160);

    sub_10001EAC0(v96);
    sub_10001EAC0(v95);
    sub_10001E330();
    sub_10001EAC8();
    sub_10001E490();
    sub_10002B504();
    sub_10002B528();
    sub_10002B70C();
    swift_task_dealloc(v97);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  v82 = *(_QWORD *)(v1 + 208);
  v84 = *(_QWORD *)(v1 + 184);
  v83 = *(_QWORD *)(v1 + 192);
  v85 = *(_QWORD *)(v1 + 176);
  v86 = sub_10002BF40();
  sub_10002B308(v86, v87, 33);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 24))(v74, v82, v85);
  swift_endAccess(v113 - 88);
  v88 = *(_QWORD *)(v77 + 152);
  sub_10001D7EC();
  os_unfair_lock_lock((os_unfair_lock_t)(v88 + 24));
  v89 = *(NSObject **)(v88 + 16);
  *(_QWORD *)(v1 + 240) = v89;
  *(_QWORD *)(v88 + 16) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(v88 + 24));
  sub_10001D9C8();
  v90 = *(void (**)(uint64_t, _QWORD, uint64_t))(v84 + 104);
  v90(v83, v111, v85);
  v91 = sub_1000B22E4(v82, v83);
  v92 = ((uint64_t (*)(uint64_t, uint64_t))v52)(v83, v85);
  if ((v91 & 1) != 0)
  {
    Logger.logObject.getter(v92);
    v93 = sub_100037FDC();
    if (sub_10001E6C4(v93))
    {
      v94 = (uint8_t *)sub_10001D8D4(2);
      *(_WORD *)v94 = 0;
      sub_100044580((void *)&_mh_execute_header, v36, v91, "InferenceProviderExtensionConnection setCurrentState no active requests", v94);
      sub_10001D790((uint64_t)v94);
    }

    sub_10003E6C0(v89);
    v81 = v89;
    goto LABEL_24;
  }
  v90(*(_QWORD *)(v1 + 192), enum case for RequestPriority.foreground(_:), *(_QWORD *)(v1 + 176));
  v99 = sub_10002BE5C();
  v101 = sub_1000B22E4(v99, v100);
  *(_BYTE *)(v1 + 264) = v101 & 1;
  if ((v101 & 1) != 0)
    v102 = "ForegroundInference";
  else
    v102 = "BackgroundInference";
  v103 = sub_10002BF40();
  ((void (*)(uint64_t))v52)(v103);
  v104 = (_QWORD *)swift_task_alloc(dword_1000FC934);
  *(_QWORD *)(v1 + 248) = v104;
  *v104 = v1;
  v104[1] = sub_10003DF3C;
  return sub_10003C510(0xD000000000000013, (unint64_t)(v102 - 32) | 0x8000000000000000);
}

uint64_t sub_10003DF3C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 248);
  if (*(_BYTE *)(*v1 + 264))
    v4 = 0x80000001000CE3B0;
  else
    v4 = 0x80000001000CE390;
  *(_QWORD *)(v2 + 256) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  if (v0)
    v5 = (uint64_t (*)())sub_10003E050;
  else
    v5 = sub_10003DFD4;
  return sub_100037B58((uint64_t)v5, *(_QWORD *)(v2 + 152), 0);
}

uint64_t sub_10003DFD4()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  sub_10001E6F0();
  sub_10003E6C0(*(void **)(v0 + 240));
  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 232);
  v2 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 176);

  v1(v3, v4);
  v1(v2, v4);
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B4C4();
  sub_10002B70C();
  v5 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_10002B160(v5);
}

#error "10003E0C0: call analysis failed (funcsize=33)"

_QWORD *sub_10003E0D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  _QWORD *result;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  void (*v25)(char *, unint64_t, uint64_t);
  void (*v26)(char *, char *, uint64_t);
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  int64_t v32;
  uint64_t v33;
  char v34;
  void (*v35)(char *, uint64_t);
  __n128 v36;
  uint64_t v37;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  int64_t v46;
  _QWORD *v47;
  _QWORD v48[2];
  uint64_t v49;
  int64_t v50;
  unint64_t v51;

  v4 = type metadata accessor for RequestPriority(0);
  v47 = *(_QWORD **)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v41 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v41 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v41 - v14;
  result = sub_10001C6C0(v48, a1);
  v45 = v48[1];
  if (!v51)
  {
    v38 = v50 + 1;
    if (__OFADD__(v50, 1))
      goto LABEL_45;
    v46 = (unint64_t)(v49 + 64) >> 6;
    if (v38 < v46)
    {
      v39 = *(_QWORD *)(v45 + 8 * v38);
      v20 = v50 + 1;
      if (v39)
      {
LABEL_29:
        v17 = v13;
        v42 = a2;
        v43 = a1;
        v18 = (v39 - 1) & v39;
        v19 = __clz(__rbit64(v39)) + (v20 << 6);
        goto LABEL_3;
      }
      v20 = v50 + 2;
      if (v50 + 2 < v46)
      {
        v39 = *(_QWORD *)(v45 + 8 * v20);
        if (v39)
          goto LABEL_29;
        v20 = v50 + 3;
        if (v50 + 3 < v46)
        {
          v39 = *(_QWORD *)(v45 + 8 * v20);
          if (v39)
            goto LABEL_29;
          v20 = v50 + 4;
          if (v50 + 4 < v46)
          {
            v39 = *(_QWORD *)(v45 + 8 * v20);
            if (v39)
              goto LABEL_29;
            v20 = v50 + 5;
            if (v50 + 5 < v46)
            {
              v39 = *(_QWORD *)(v45 + 8 * v20);
              if (!v39)
              {
                v40 = v50 + 6;
                do
                {
                  if (v40 >= v46)
                    goto LABEL_42;
                  v39 = *(_QWORD *)(v45 + 8 * v40++);
                }
                while (!v39);
                v20 = v40 - 1;
              }
              goto LABEL_29;
            }
          }
        }
      }
    }
LABEL_42:
    swift_bridgeObjectRetain(a1);
    sub_100043D24(v48);
    v37 = 1;
    return (_QWORD *)sub_100005630(a2, v37, 1, v4);
  }
  v17 = v13;
  v42 = a2;
  v43 = a1;
  v18 = (v51 - 1) & v51;
  v19 = __clz(__rbit64(v51)) | (v50 << 6);
  v46 = (unint64_t)(v49 + 64) >> 6;
  v20 = v50;
LABEL_3:
  v22 = v47;
  v21 = v48[0];
  v23 = v47[9];
  v24 = *(_QWORD *)(v48[0] + 56) + v23 * v19;
  v25 = (void (*)(char *, unint64_t, uint64_t))v47[2];
  v44 = v17;
  v25(v17, v24, v4);
  v26 = (void (*)(char *, char *, uint64_t))v22[4];
  v26(v15, v44, v4);
  result = (_QWORD *)swift_bridgeObjectRetain(v43);
  while (1)
  {
    if (v18)
    {
      v27 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v28 = v27 | (v20 << 6);
      goto LABEL_22;
    }
    v29 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v29 >= v46)
      goto LABEL_25;
    v30 = *(_QWORD *)(v45 + 8 * v29);
    v31 = v20 + 1;
    if (!v30)
    {
      v31 = v20 + 2;
      if (v20 + 2 >= v46)
        goto LABEL_25;
      v30 = *(_QWORD *)(v45 + 8 * v31);
      if (!v30)
      {
        v31 = v20 + 3;
        if (v20 + 3 >= v46)
          goto LABEL_25;
        v30 = *(_QWORD *)(v45 + 8 * v31);
        if (!v30)
        {
          v31 = v20 + 4;
          if (v20 + 4 >= v46)
            goto LABEL_25;
          v30 = *(_QWORD *)(v45 + 8 * v31);
          if (!v30)
          {
            v31 = v20 + 5;
            if (v20 + 5 >= v46)
              goto LABEL_25;
            v30 = *(_QWORD *)(v45 + 8 * v31);
            if (!v30)
            {
              v32 = v20 + 6;
              while (v32 < v46)
              {
                v30 = *(_QWORD *)(v45 + 8 * v32++);
                if (v30)
                {
                  v31 = v32 - 1;
                  goto LABEL_21;
                }
              }
LABEL_25:
              v36 = swift_release(v21);
              a2 = v42;
              ((void (*)(uint64_t, char *, uint64_t, __n128))v26)(v42, v15, v4, v36);
              v37 = 0;
              return (_QWORD *)sub_100005630(a2, v37, 1, v4);
            }
          }
        }
      }
    }
LABEL_21:
    v18 = (v30 - 1) & v30;
    v28 = __clz(__rbit64(v30)) + (v31 << 6);
    v20 = v31;
LABEL_22:
    v25(v7, *(_QWORD *)(v21 + 56) + v28 * v23, v4);
    v26(v10, v7, v4);
    v33 = sub_10004383C(&qword_1000FB570, (uint64_t (*)(uint64_t))&type metadata accessor for RequestPriority);
    v34 = dispatch thunk of static Comparable.< infix(_:_:)(v15, v10, v4, v33);
    v35 = (void (*)(char *, uint64_t))v47[1];
    if ((v34 & 1) != 0)
    {
      v35(v15, v4);
      result = (_QWORD *)((uint64_t (*)(char *, char *, uint64_t))v26)(v15, v10, v4);
    }
    else
    {
      result = (_QWORD *)((uint64_t (*)(char *, uint64_t))v35)(v10, v4);
    }
  }
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_10003E4E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v4 = type metadata accessor for RequestPriority(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v22 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
    return sub_100005630(a2, 1, 1, v4);
  v22 = a2;
  v12 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
  v13((char *)&v22 - v9, a1 + v12, v4);
  v23 = a1;
  swift_bridgeObjectRetain(a1);
  v14 = v11 - 1;
  if (v14)
  {
    v15 = *(_QWORD *)(v5 + 72);
    v16 = v23 + v15 + v12;
    do
    {
      v13(v8, v16, v4);
      v17 = sub_10004383C(&qword_1000FB570, (uint64_t (*)(uint64_t))&type metadata accessor for RequestPriority);
      v18 = dispatch thunk of static Comparable.< infix(_:_:)(v10, v8, v4, v17);
      v19 = *(void (**)(char *, uint64_t))(v5 + 8);
      if ((v18 & 1) != 0)
      {
        v19(v10, v4);
        (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v8, v4);
      }
      else
      {
        v19(v8, v4);
      }
      v16 += v15;
      --v14;
    }
    while (v14);
  }
  swift_bridgeObjectRelease(v23);
  v20 = v22;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v22, v10, v4);
  return sub_100005630(v20, 0, 1, v4);
}

void sub_10003E6C0(void *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1)
  {
    v1 = qword_1000FB0F0;
    v2 = a1;
    if (v1 != -1)
      swift_once(&qword_1000FB0F0, sub_100039F08);
    v3 = type metadata accessor for Logger(0);
    sub_100002FF8(v3, (uint64_t)qword_1000FC8B8);
    v4 = v2;
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      v15 = v8;
      *(_DWORD *)v7 = 136315138;
      v9 = objc_msgSend(v4, "description");
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v12 = v11;

      sub_1000102C0(v10, v12, &v15);
      v14 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15);

      swift_bridgeObjectRelease(v12);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "InferenceProviderExtensionConnection setCurrentState invalidating assertion %s", v7, 0xCu);
      swift_arrayDestroy(v8, 1);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);

    }
    else
    {

    }
    objc_msgSend(v4, "invalidate");

  }
}

uint64_t sub_10003E8A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  v4 = sub_100002F78(&qword_1000FB2A0);
  v3[12] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[13] = v5;
  v3[14] = sub_10002B1BC(v5);
  v3[15] = sub_10001E784();
  v6 = sub_100002F78(&qword_1000FCD70);
  v3[16] = sub_10002B1BC(*(_QWORD *)(v6 - 8));
  v3[17] = sub_10001E784();
  sub_10001D7B8();
  return sub_10001D6D0();
}

uint64_t sub_10003E918()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void);
  uint64_t v38;
  uint64_t v39;

  sub_10002B628();
  v1 = v0[9];
  v2 = v0[17];
  v3 = v0[11];
  sub_10004464C();
  v0[18] = sub_1000446D4((uint64_t)"Adding active InferenceProvider request", 39);
  v4 = (uint64_t *)(v3 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_activeRequest);
  sub_10002B2E0((uint64_t)v4, (uint64_t)(v0 + 2));
  v5 = *v4;
  swift_bridgeObjectRetain(*v4);
  sub_100009EB8(v1, v5);
  sub_10001E034();
  v6 = sub_10001E368();
  v7 = sub_100005700(v2, 1, v6);
  sub_100043958(v2);
  if ((_DWORD)v7 == 1)
  {
    if (qword_1000FB0F0 != -1)
      swift_once(&qword_1000FB0F0, sub_100039F08);
    v8 = sub_10001DD64();
    sub_100037AC4(v8, (uint64_t)qword_1000FC8B8);
    v9 = sub_100037FDC();
    if (sub_100039E20(v9))
    {
      v10 = (uint8_t *)sub_10001D8D4(2);
      *(_WORD *)v10 = 0;
      sub_100044580((void *)&_mh_execute_header, v7, (os_log_type_t)((_BYTE)v0 + 72), "In InferenceProviderExtensionConnection addActiveRequest", v10);
      sub_10001D790((uint64_t)v10);
    }
    v12 = v0[15];
    v11 = v0[16];
    v13 = v0[13];
    v15 = v0[9];
    v14 = v0[10];

    sub_10001E554(v12, v15, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 16));
    sub_10001EA84(v11, v14, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16));
    sub_100005630(v11, 0, 1, v6);
    sub_10002B308((uint64_t)v4, (uint64_t)(v0 + 5), 33);
    sub_100096570(v11, v12);
    sub_10002BB48();
    v16 = (_QWORD *)swift_task_alloc(dword_1000FC93C);
    v0[19] = v16;
    *v16 = v0;
    v16[1] = sub_10003EC74;
    return sub_10004450C();
  }
  else
  {
    if (qword_1000FB0F0 != -1)
      swift_once(&qword_1000FB0F0, sub_100039F08);
    v19 = v0[13];
    v18 = v0[14];
    v20 = v0[12];
    v21 = v0[9];
    v22 = sub_10001DD64();
    sub_100002FF8(v22, (uint64_t)qword_1000FC8B8);
    v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v18, v21, v20);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.fault.getter();
    v26 = sub_10002B3F8(v24);
    v27 = v0[14];
    if (v26)
    {
      v38 = v0[13];
      v28 = (uint8_t *)sub_10001D8D4(12);
      v39 = sub_10001D8D4(32);
      *(_DWORD *)v28 = 136315138;
      v29 = sub_10004429C((unint64_t *)&qword_1000FBEA0, &qword_1000FB2A0);
      v30 = sub_10002BD8C(v29, v29);
      sub_1000446F4(v30, v31, v32, v33, v34, v35);
      v0[8] = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 8, v0 + 9);
      sub_10002B684();
      sub_10002BADC(v27, *(uint64_t (**)(uint64_t, uint64_t))(v38 + 8));
      sub_10001E18C((void *)&_mh_execute_header, v24, v25, "InferenceProviderExtensionConnection addActiveRequest called multiple times for %s", v28);
      sub_10001DBB8(v39);
      sub_10001D790(v39);
      sub_10001D790((uint64_t)v28);
    }
    else
    {
      sub_10002BADC(v0[14], *(uint64_t (**)(uint64_t, uint64_t))(v0[13] + 8));
    }

    sub_100044540();
    sub_10001D9C0();
    sub_10001D938();
    sub_10001EAC8();
    sub_10001E490();
    sub_10002B504();
    v37 = (uint64_t (*)(void))sub_10001E5D0();
    return sub_100039E04(v37);
  }
}

uint64_t sub_10003EC74()
{
  sub_100044694();
  return sub_10001D6D0();
}

uint64_t sub_10003ECB4()
{
  uint64_t (*v0)(void);

  sub_100044540();
  sub_10001D9C0();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  v0 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_10001DE38(v0);
}

uint64_t sub_10003ECF4()
{
  uint64_t v0;

  sub_100044540();
  sub_10001D9C0();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  return sub_10001DE38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003ED38(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[10] = a1;
  v2[11] = v1;
  v3 = sub_100002F78(&qword_1000FB2A0);
  v2[12] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[13] = v4;
  v2[14] = sub_10002B1BC(v4);
  v2[15] = sub_10001E784();
  v5 = sub_100002F78(&qword_1000FCD70);
  v2[16] = sub_10002B1BC(*(_QWORD *)(v5 - 8));
  v2[17] = sub_10001E784();
  sub_10001D7B8();
  return sub_10001D6D0();
}

uint64_t sub_10003EDAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;

  sub_10001DFE8();
  a21 = v23;
  a22 = v24;
  a20 = v22;
  v25 = *(_QWORD *)(v22 + 136);
  v26 = *(_QWORD *)(v22 + 80);
  v27 = *(_QWORD *)(v22 + 88);
  sub_10004464C();
  *(_QWORD *)(v22 + 144) = sub_1000446D4((uint64_t)"Removing active InferenceProvider request", 41);
  v28 = (uint64_t *)(v27 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_activeRequest);
  v29 = sub_100037FBC();
  sub_10002B2E0(v29, v30);
  v31 = *v28;
  sub_10001E140();
  sub_100009EB8(v26, v31);
  sub_10001EADC();
  v32 = sub_10001E368();
  LODWORD(v26) = sub_100005700(v25, 1, v32);
  sub_100043958(v25);
  if ((_DWORD)v26 == 1)
  {
    if (qword_1000FB0F0 != -1)
      swift_once(&qword_1000FB0F0, sub_100039F08);
    v33 = sub_10001DD64();
    sub_100002FF8(v33, (uint64_t)qword_1000FC8B8);
    sub_1000447C8();
    v34 = sub_100037C24();
    v35 = static os_log_type_t.fault.getter();
    v36 = sub_100037B08(v34);
    v37 = *(_QWORD *)(v22 + 96);
    if (v36)
    {
      v38 = (uint8_t *)sub_10001D8D4(12);
      v39 = sub_10001D8D4(32);
      a11 = v39;
      *(_DWORD *)v38 = 136315138;
      v40 = sub_10004429C((unint64_t *)&qword_1000FBEA0, &qword_1000FB2A0);
      v41 = dispatch thunk of CustomStringConvertible.description.getter(v37, v40);
      sub_1000102C0(v41, v42, &a11);
      *(_QWORD *)(v22 + 64) = v43;
      sub_100044654(v22 + 64, v22 + 72, (uint64_t)(v38 + 4));
      sub_10001E420();
      sub_100037E04();
      sub_10001E18C((void *)&_mh_execute_header, v34, v35, "InferenceProviderExtensionConnection removeActiveRequest called for nonactive %s", v38);
      sub_10001DBB8(v39);
      sub_10001D790(v39);
      sub_10001D790((uint64_t)v38);
    }
    else
    {
      sub_100037E04();
    }

    sub_100044540();
    sub_10001D9C0();
    sub_10001D938();
    sub_10001EAC8();
    sub_10001E490();
    sub_10002B504();
    return sub_10001D8DC(*(uint64_t (**)(void))(v22 + 8));
  }
  else
  {
    v45 = *(_QWORD *)(v22 + 120);
    v44 = *(_QWORD *)(v22 + 128);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v22 + 104) + 16))(v45, *(_QWORD *)(v22 + 80), *(_QWORD *)(v22 + 96));
    sub_100005630(v44, 1, 1, v32);
    v46 = sub_10002BE5C();
    sub_10002B308(v46, v47, 33);
    sub_100096570(v44, v45);
    sub_10002BB48();
    v48 = (_QWORD *)swift_task_alloc(dword_1000FC93C);
    *(_QWORD *)(v22 + 152) = v48;
    *v48 = v22;
    v48[1] = sub_10003F038;
    sub_10002BC1C();
    return sub_10003D5CC();
  }
}

uint64_t sub_10003F038()
{
  sub_100044694();
  return sub_10001D6D0();
}

uint64_t sub_10003F078()
{
  uint64_t v0;

  sub_100044540();
  sub_10001D9C0();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003F0C8()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  sub_10001E6F0();
  if (qword_1000FB0F0 != -1)
    swift_once(&qword_1000FB0F0, sub_100039F08);
  v1 = *(NSObject **)(v0 + 160);
  v2 = sub_10001DD64();
  sub_100002FF8(v2, (uint64_t)qword_1000FC8B8);
  sub_10001E764();
  sub_10001E764();
  sub_10002B3CC();
  sub_100037B50();
  if (sub_10002B3F8(v1))
  {
    v3 = sub_10001D8D4(12);
    v4 = (_QWORD *)sub_10001D8D4(8);
    sub_100044874(5.7779e-34);
    v5 = sub_100044ADC();
    *(_QWORD *)(v0 + 72) = v5;
    sub_100037AAC(v0 + 72, v0 + 80);
    *v4 = v5;
    sub_10002B498();
    sub_10002B498();
    sub_1000444E0((void *)&_mh_execute_header, v1, v6, "InferenceProviderExtensionConnection removeActiveRequest failed with %@");
    sub_100002F78(&qword_1000FB8E0);
    sub_10001DBB8((uint64_t)v4);
    sub_10001D790((uint64_t)v4);
    sub_10001D790(v3);

    sub_10002B498();
  }
  else
  {
    sub_10002B498();
    sub_10002B498();
    sub_10002B498();

  }
  sub_100044540();
  sub_10001D9C0();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  return sub_10002B160(*(uint64_t (**)(void))(v0 + 8));
}

void sub_10003F214()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  swift_defaultActor_initialize(v0);
  *(_QWORD *)(v0 + 141) = 0;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  v1 = sub_100002F78(&qword_1000FCD28);
  v2 = sub_100006A80(v1, 28);
  *(_DWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v0 + 152) = v2;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_loadingCount) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_activeRequest) = &_swiftEmptyDictionarySingleton;
  v3 = sub_10001E368();
  sub_100044744(v3);
  v4 = OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_workQueueState;
  v5 = type metadata accessor for WorkQueueState();
  v6 = sub_100006A80(v5, 32);
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v0 + v4) = v6;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_terminationHandlers) = _swiftEmptySetSingleton;
  v7 = sub_10002BA0C();
  sub_100044714(v7);
  v8 = v0 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_providerIdentification;
  v9 = type metadata accessor for BuiltInInferenceProvider(0);
  sub_10004472C(v9);
  v10 = type metadata accessor for InferenceProviderExtensionConnection.ProviderIdentification(0);
  swift_storeEnumTagMultiPayload(v8, v10, 0);
  sub_10001E7B4();
}

void sub_10003F328()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  swift_defaultActor_initialize(v0);
  *(_QWORD *)(v0 + 141) = 0;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  v1 = sub_100002F78(&qword_1000FCD28);
  v2 = sub_100006A80(v1, 28);
  *(_DWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v0 + 152) = v2;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_loadingCount) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_activeRequest) = &_swiftEmptyDictionarySingleton;
  v3 = sub_10001E368();
  sub_100044744(v3);
  v4 = OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_workQueueState;
  v5 = type metadata accessor for WorkQueueState();
  v6 = sub_100006A80(v5, 32);
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v0 + v4) = v6;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_terminationHandlers) = _swiftEmptySetSingleton;
  v7 = sub_10002BA0C();
  sub_100044714(v7);
  v8 = v0 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_providerIdentification;
  v9 = sub_1000449A0();
  sub_10004472C(v9);
  v10 = type metadata accessor for InferenceProviderExtensionConnection.ProviderIdentification(0);
  swift_storeEnumTagMultiPayload(v8, v10, 1);
  sub_10001E7B4();
}

uint64_t sub_10003F438(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for InferenceProviderExtensionConnection.ProviderIdentification(0);
  v2[4] = v3;
  v2[5] = sub_10001D800(*(_QWORD *)(v3 - 8));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_10003F47C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  sub_100044AE4(v0[3]);
  v1 = sub_10002BE5C();
  if (swift_getEnumCaseMultiPayload(v1, v2) == 1)
  {
    v3 = v0[5];
    v4 = v0[2];
    v5 = sub_1000449A0();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v4, v3, v5);
    swift_task_dealloc(v0[5]);
    v6 = (uint64_t (*)(void))sub_10001E5D0();
    return v6();
  }
  else
  {
    sub_100044AF8();
    v8 = static InferenceProviderXPCSender.builtInInferenceProviderExtensionIdentityCache.getter();
    v0[6] = v8;
    v9 = (_QWORD *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    v0[7] = v9;
    v10 = sub_1000449A0();
    v11 = sub_100002F78(&qword_1000FB5F8);
    *v9 = v0;
    v9[1] = sub_10003F578;
    return Task.value.getter(v0[2], v8, v10, v11, &protocol self-conformance witness table for Error);
  }
}

uint64_t sub_10003F578()
{
  sub_1000446B4();
  return sub_10001D6D0();
}

uint64_t sub_10003F5B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  v1 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 48));
  sub_100042B48(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  v2 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_100006A38(v2);
}

uint64_t sub_10003F5F0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 48));
  sub_100042B48(v1);
  sub_10001E330();
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003F628()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_100002F78(&qword_1000FB230);
  sub_10002BCBC();
  __chkstk_darwin(v2);
  sub_10004465C();
  v3 = *(_QWORD *)(v1 + 152);
  sub_10001D7EC();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  v4 = *(void **)(v3 + 16);
  if (v4)
    objc_msgSend(v4, "invalidate");
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
  sub_10001D9C8();
  v5 = *(_QWORD *)(v1 + 112);
  if (v5)
  {
    v6 = sub_10001DBC0();
    sub_10002B26C(v0, v7, v8, v6);
    v9 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F3A58, 40);
    v9[2] = 0;
    v9[3] = 0;
    v9[4] = v5;
    sub_10001D7EC();
    v10 = sub_100002CAC(v0, (uint64_t)&unk_1000FCE30, (uint64_t)v9);
    swift_release(v10);
    v11 = *(_QWORD *)(v1 + 112);
  }
  else
  {
    v11 = 0;
  }
  swift_release(v11);

  swift_release(*(_QWORD *)(v1 + 128));
  swift_release(*(_QWORD *)(v1 + 152));
  v12 = sub_10002BA0C();
  sub_10001DD50(v12);
  sub_100042B48(v1 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_providerIdentification);
  swift_bridgeObjectRelease(*(_QWORD *)(v1
                                      + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_activeRequest));
  v13 = sub_10001E368();
  sub_10001DD50(v13);
  swift_release(*(_QWORD *)(v1 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_workQueueState));
  swift_bridgeObjectRelease(*(_QWORD *)(v1
                                      + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_terminationHandlers));
  swift_defaultActor_destroy(v1);
  return v1;
}

uint64_t sub_10003F794()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  v3 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of InferenceProviderXPCSender.invalidate()
                         + async function pointer to dispatch thunk of InferenceProviderXPCSender.invalidate());
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of InferenceProviderXPCSender.invalidate()
                                  + 1));
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10001D668;
  return v3();
}

uint64_t sub_10003F7F0()
{
  uint64_t v0;

  sub_10003F628();
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for InferenceProviderExtensionConnection(uint64_t a1)
{
  return sub_100042760(a1, (uint64_t *)&unk_1000FC8F8, (uint64_t)&nominal type descriptor for InferenceProviderExtensionConnection);
}

uint64_t sub_10003F81C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[15];

  v6[1] = &unk_1000CBE00;
  v6[2] = &unk_1000CBE00;
  v6[3] = &unk_1000CBE00;
  v6[4] = &unk_1000CBE00;
  v6[5] = (char *)&value witness table for Builtin.Int32 + 64;
  v6[6] = &unk_1000CBE18;
  v6[7] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for InferenceProviderDescriptor(319);
  if (v3 <= 0x3F)
  {
    v6[8] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for InferenceProviderExtensionConnection.ProviderIdentification(319);
    if (v4 <= 0x3F)
    {
      v6[9] = *(_QWORD *)(result - 8) + 64;
      v6[10] = (char *)&value witness table for Builtin.Int64 + 64;
      v6[11] = (char *)&value witness table for Builtin.BridgeObject + 64;
      result = type metadata accessor for RequestPriority(319);
      if (v5 <= 0x3F)
      {
        v6[12] = *(_QWORD *)(result - 8) + 64;
        v6[13] = (char *)&value witness table for Builtin.NativeObject + 64;
        v6[14] = (char *)&value witness table for Builtin.BridgeObject + 64;
        return swift_updateClassMetadata2(a1, 256, 15, v6, a1 + 80);
      }
    }
  }
  return result;
}

uint64_t sub_10003F928()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = v0;
  return sub_10001D948((uint64_t)sub_10003F93C, v0);
}

#error "10003FA28: call analysis failed (funcsize=104)"

uint64_t sub_10003FAF8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = v0;
  return sub_10001D948((uint64_t)sub_10003FB0C, v0);
}

#error "10003FBFC: call analysis failed (funcsize=105)"

uint64_t sub_10003FCCC()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000446B4();
  if (v0)
    return sub_10001D6D0();
  else
    return sub_10001D940(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10003FD10()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  _DWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(NSObject **)(v0 + 48);
  sub_10002B5D4();
  v2 = sub_10002B5D4();
  Logger.logObject.getter(v2);
  sub_100037B50();
  if (sub_10002B3F8(v1))
  {
    v3 = (_DWORD *)sub_10001D8D4(12);
    v4 = (_QWORD *)sub_10001D8D4(8);
    *v3 = 138412290;
    sub_10002B5D4();
    v5 = sub_100044ADC();
    *(_QWORD *)(v0 + 16) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    *v4 = v5;
    sub_10002B498();
    sub_10002B498();
    sub_1000444E0((void *)&_mh_execute_header, v1, v6, "InferenceProviderExtensionConnection removeActiveRequest failed with %@");
    sub_100002F78(&qword_1000FB8E0);
    sub_10001DBB8((uint64_t)v4);
    sub_10001D790((uint64_t)v4);
    sub_10001D790((uint64_t)v3);

    sub_10002B498();
  }
  else
  {
    sub_10002B498();
    sub_10002B498();
    sub_10002B498();

  }
  return sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003FE38(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[7] = a1;
  v2[8] = v1;
  v3 = sub_100038084();
  v2[9] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[10] = v4;
  v2[11] = sub_10002B1BC(v4);
  v2[12] = sub_10001E784();
  v2[13] = sub_10001E784();
  v5 = type metadata accessor for InferenceProviderPrewarmInformation(0);
  v2[14] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[15] = v6;
  v2[16] = sub_10001D800(v6);
  sub_10001D7B8();
  return sub_10001D6D0();
}

#error "100040008: call analysis failed (funcsize=112)"

uint64_t sub_100040084()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *v1;
  v5 = v2;
  v3 = *v1;
  sub_10001D788(*(_QWORD *)(v2 + 144), &v5);
  if (!v0)
    return sub_10001D6DC();
  swift_task_dealloc(*(_QWORD *)(v2 + 128));
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  return sub_10001D940(*(uint64_t (**)(void))(v3 + 8));
}

#error "1000401F4: call analysis failed (funcsize=92)"

uint64_t sub_100040290()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 168) = v1;
  swift_task_dealloc(v3);
  return sub_10001D6D0();
}

uint64_t sub_1000402E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  swift_release(*(_QWORD *)(v0 + 152));
  v1 = sub_100044A70();
  sub_10004145C(v1, (uint64_t (*)(void))&static os_log_type_t.info.getter, (uint64_t)&unk_1000F3968, (uint64_t)&unk_1000FCD68);
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  v2 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_10001D940(v2);
}

uint64_t sub_100040344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;

  sub_10001DFE8();
  v10 = *(_QWORD *)(v9 + 168);
  *(_QWORD *)(v9 + 24) = v10;
  swift_errorRetain(v10);
  v11 = sub_100002F78(&qword_1000FB5F8);
  if (sub_10004475C(v11))
  {
    v12 = *(NSObject **)(v9 + 136);
    v13 = *(_QWORD *)(v9 + 104);
    swift_errorRelease(*(_QWORD *)(v9 + 168));
    sub_1000448DC();
    v14 = sub_1000448C8();
    Logger.logObject.getter(v14);
    v15 = sub_100039EB4();
    v16 = sub_10001E6C4(v15);
    v17 = *(_QWORD *)(v9 + 80);
    v18 = *(_QWORD *)(v9 + 72);
    if (v16)
    {
      v19 = (uint8_t *)sub_10001D8D4(12);
      v29 = (_QWORD *)sub_10001D8D4(8);
      sub_100044AB0(5.7779e-34);
      v20 = sub_10004383C(&qword_1000FC3A8, (uint64_t (*)(uint64_t))&type metadata accessor for XPCRichError);
      v21 = sub_10002B560(v18, v20);
      sub_100044860(v21, v22);
      v23 = _swift_stdlib_bridgeErrorToNSError(12);
      *(_QWORD *)(v9 + 32) = v23;
      sub_100044654(v9 + 32, v9 + 40, a9);
      *v29 = v23;
      sub_10004461C();
      sub_10001E18C((void *)&_mh_execute_header, v12, (os_log_type_t)v13, "transitionAsset failed with XPC Error %@, checking exit status", v19);
      sub_100002F78(&qword_1000FB8E0);
      sub_10001DBB8((uint64_t)v29);
      sub_10001D790((uint64_t)v29);
      sub_10001D790((uint64_t)v19);
    }
    else
    {
      sub_10004461C();
    }
    *(_QWORD *)(v9 + 176) = v17;

    sub_10002B8A0();
    v26 = sub_10004383C((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    *(_QWORD *)(v9 + 184) = sub_1000444A4(v26);
    v27 = (_QWORD *)swift_task_alloc(dword_1000FC924);
    *(_QWORD *)(v9 + 192) = v27;
    *v27 = v9;
    v27[1] = sub_100040550;
    v28 = sub_100044708();
    return sub_1000444F0(v28);
  }
  else
  {
    swift_release(*(_QWORD *)(v9 + 152));
    v24 = sub_100044800();
    sub_10004495C(v24, (uint64_t (*)(void))&static os_log_type_t.info.getter, (uint64_t)&unk_1000F3968, (uint64_t)&unk_1000FCD68);
    sub_10004494C();
    sub_10001D938();
    sub_10001EAC8();
    sub_10001E490();
    return sub_10001D8DC(*(uint64_t (**)(void))(v9 + 8));
  }
}

uint64_t sub_100040550()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 192));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_100040588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  v9 = *(_QWORD *)(v8 + 64);
  swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_10001D9C0();
  sub_1000448F8();
  sub_100044800();
  sub_10004145C(v9, (uint64_t (*)(void))&static os_log_type_t.info.getter, (uint64_t)&unk_1000F3968, (uint64_t)&unk_1000FCD68);
  sub_10004494C();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  return sub_100037D1C(*(uint64_t (**)(void))(v8 + 8));
}

uint64_t sub_100040614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t State;
  uint64_t v11;

  v5[12] = a4;
  v5[13] = v4;
  v5[10] = a2;
  v5[11] = a3;
  v5[9] = a1;
  v6 = sub_100038084();
  v5[14] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[15] = v7;
  v5[16] = sub_10002B1BC(v7);
  v5[17] = sub_10001E784();
  v5[18] = sub_10001E784();
  v8 = type metadata accessor for InferenceProviderAssetDescriptor(0);
  v5[19] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[20] = v9;
  v5[21] = sub_10001D800(v9);
  State = type metadata accessor for LoadState(0);
  v5[22] = State;
  v11 = *(_QWORD *)(State - 8);
  v5[23] = v11;
  v5[24] = sub_10002B1BC(v11);
  v5[25] = sub_10001E784();
  sub_10001D7B8();
  return sub_10001D6D0();
}

uint64_t sub_1000406B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  int v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  _BOOL4 v86;
  uint64_t v87;
  _DWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t _18a;
  os_log_t log;
  os_log_t loga;
  NSObject *logb;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t (*v124)(uint64_t, uint64_t);
  uint64_t v125;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 184);
  sub_100041330();
  *(_QWORD *)(v0 + 208) = v4;
  *(_DWORD *)(v0 + 320) = enum case for LoadState.loaded(_:);
  v5 = *(void (**)(uint64_t))(v3 + 104);
  *(_QWORD *)(v0 + 216) = v5;
  v5(v1);
  sub_10004383C(&qword_1000FCD38, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState);
  v6 = sub_10002BE5C();
  v9 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v7, v2, v8);
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  *(_QWORD *)(v0 + 224) = v10;
  v11 = sub_10002BF40();
  ((void (*)(uint64_t))v10)(v11);
  v119 = v0 + 64;
  if ((v9 & 1) == 0)
  {
    v12 = *(_QWORD *)(v0 + 104);
    if (!*(_QWORD *)(v12 + 112))
    {
      if (qword_1000FB0F0 != -1)
      {
        swift_once(&qword_1000FB0F0, sub_100039F08);
        v12 = *(_QWORD *)(v0 + 104);
      }
      v83 = sub_10001DD64();
      v84 = sub_100002FF8(v83, (uint64_t)qword_1000FC8B8);
      sub_10001D834(v12);
      sub_10002B3CC();
      v85 = sub_100037C08();
      v86 = sub_10002B1AC(v85);
      v87 = *(_QWORD *)(v0 + 104);
      if (v86)
      {
        v88 = (_DWORD *)sub_10001D8D4(12);
        v89 = sub_10001D8D4(32);
        *v88 = 136315138;
        v125 = v89;
        sub_10002BA0C();
        v90 = sub_10004383C(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
        v91 = sub_10001EC14(v90);
        sub_1000446FC(v91, v92, v93, v94, v95, v96, v97, v98, v102, v107);
        *(_QWORD *)(v0 + 64) = v99;
        sub_100037AAC(v119, v0 + 72);
        sub_10001EBB0(v87);
        sub_10001E034();
        sub_1000444E0((void *)&_mh_execute_header, v84, v100, "Implicitly succeeding a loadOut for an exited InferenceProvider %s");
        sub_10001DBB8(v89);
        sub_10001D790(v89);
        sub_10001D790((uint64_t)v88);

      }
      else
      {

        sub_10001EBB0(v87);
      }
      sub_100044568();
      sub_10001D9C0();
      sub_10001D938();
      sub_10001EAC8();
      sub_10001E490();
      sub_10002B504();
      sub_10002B528();
      sub_10002B4C4();
      sub_10001E5D0();
      sub_10002B848();
      __asm { BR              X0 }
    }
  }
  v124 = v10;
  if (qword_1000FB0F0 != -1)
    swift_once(&qword_1000FB0F0, sub_100039F08);
  v14 = *(_QWORD *)(v0 + 184);
  v13 = *(_QWORD *)(v0 + 192);
  v16 = *(_QWORD *)(v0 + 168);
  v15 = *(_QWORD *)(v0 + 176);
  v17 = *(_QWORD *)(v0 + 160);
  v121 = *(_QWORD *)(v0 + 104);
  v19 = *(_QWORD *)(v0 + 72);
  v18 = *(_QWORD *)(v0 + 80);
  v20 = sub_10001DD64();
  *(_QWORD *)(v0 + 232) = sub_100002FF8(v20, (uint64_t)qword_1000FC8B8);
  sub_10001EA84(v16, v19, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 16));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v18, v15);
  v21 = sub_10001D834(v121);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter();
  v24 = sub_100037B08(v22);
  v25 = *(_QWORD *)(v0 + 192);
  v26 = *(_QWORD *)(v0 + 176);
  v27 = *(_QWORD *)(v0 + 152);
  v28 = *(_QWORD *)(v0 + 104);
  if (v24)
  {
    v112 = *(_QWORD *)(v0 + 104);
    v103 = *(_QWORD *)(v0 + 192);
    v29 = sub_10001D8D4(32);
    v122 = sub_10001D8D4(96);
    v125 = v122;
    *(_DWORD *)v29 = 136315650;
    loga = v22;
    v30 = sub_10004383C(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
    v31 = dispatch thunk of CustomStringConvertible.description.getter(v27, v30);
    HIDWORD(v114) = v23;
    sub_1000102C0(v31, v32, &v125);
    *(_QWORD *)(v0 + 40) = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v29 + 4);
    sub_10001EADC();
    sub_100044934();
    *(_WORD *)(v29 + 12) = 2080;
    v34 = sub_10004383C(&qword_1000FCD48, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState);
    v35 = v103;
    v36 = dispatch thunk of CustomStringConvertible.description.getter(v26, v34);
    sub_1000446FC(v36, v37, v38, v39, v40, v41, v42, v43, v103, v0 + 56);
    *(_QWORD *)(v0 + 48) = v44;
    v45 = (_QWORD *)v108;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v108, v29 + 14);
    sub_10001E034();
    sub_100044A08(v35, v46, v47, v48, v49, v50, v51, v52, v104, v108, v112, v114, (uint64_t)loga, v119, v122, v124);
    *(_WORD *)(v29 + 22) = 2080;
    v53 = v113 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_descriptor;
    v54 = sub_10002BA0C();
    v55 = sub_10004383C(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
    v56 = dispatch thunk of CustomStringConvertible.description.getter(v54, v55);
    sub_1000446FC(v56, v57, v58, v59, v60, v61, v62, v63, v105, v109);
    *v45 = v64;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v45, v120, v29 + 24);
    sub_10001EBB0(v113);
    sub_10001E034();
    v65 = logb;
    _os_log_impl((void *)&_mh_execute_header, logb, BYTE4(_18a), "InferenceProvider transition asset %s to %s executing on %s", (uint8_t *)v29, 0x20u);
    sub_1000448A8(v66, v67, v68, v69, v70, v71, v72, v73, v106, v110, v113, _18a, (uint64_t)logb, v120, v123);
    sub_10001D790(v53);
    sub_10001D790(v29);

  }
  else
  {
    sub_100044934();
    sub_100044A08(v25, v74, v75, v76, v77, v78, v79, v80, v102, v107, v111, v114, (uint64_t)log, v119, v121, v124);

    sub_10001EBB0(v28);
  }
  v81 = (_QWORD *)swift_task_alloc(dword_1000FC95C);
  *(_QWORD *)(v0 + 240) = v81;
  *v81 = v0;
  v81[1] = sub_100040BA0;
  sub_10002B848();
  return sub_10003F928();
}

uint64_t sub_100040BA0()
{
  sub_100044674();
  return sub_10001D6D0();
}

#error "100040DAC: call analysis failed (funcsize=148)"

uint64_t sub_100040E58()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 272) = v1;
  swift_task_dealloc(v3);
  return sub_10001D6D0();
}

uint64_t sub_100040EA8()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  v0 = sub_1000449B0();
  sub_10004495C(v0, (uint64_t (*)(void))&static os_log_type_t.default.getter, (uint64_t)&unk_1000F3940, (uint64_t)&unk_1000FCD58);
  sub_100044568();
  sub_10001D9C0();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  v1 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_100037D1C(v1);
}

uint64_t sub_100040F20()
{
  uint64_t v0;

  v0 = sub_100044A28();
  sub_10001D680(v0);
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_100040F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t (*v9)(void);

  v8 = swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_10004495C(v8, (uint64_t (*)(void))&static os_log_type_t.default.getter, (uint64_t)&unk_1000F3940, (uint64_t)&unk_1000FCD58);
  sub_100044528();
  sub_10001D9C0();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  sub_10002B70C();
  v9 = (uint64_t (*)(void))sub_1000447E8();
  return sub_10002B3B4(v9);
}

uint64_t sub_100040FE0()
{
  uint64_t (*v0)(void);

  sub_100044528();
  sub_10001D9C0();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  sub_10002B70C();
  v0 = (uint64_t (*)(void))sub_1000447E8();
  return sub_10001D940(v0);
}

uint64_t sub_100041040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(void);
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;

  sub_10001DFE8();
  v10 = v9[34];
  v9[3] = v10;
  swift_errorRetain(v10);
  v11 = sub_100002F78(&qword_1000FB5F8);
  if (sub_10004475C(v11))
  {
    v12 = v9[29];
    v13 = v9[18];
    swift_errorRelease(v9[34]);
    sub_1000448DC();
    v14 = sub_1000448C8();
    Logger.logObject.getter(v14);
    v15 = sub_100039EB4();
    v16 = sub_10001E6C4(v15);
    v17 = v9[15];
    v18 = v9[14];
    if (v16)
    {
      v19 = (uint8_t *)sub_10001D8D4(12);
      v30 = (_QWORD *)sub_10001D8D4(8);
      sub_100044AB0(5.7779e-34);
      v20 = sub_10004383C(&qword_1000FC3A8, (uint64_t (*)(uint64_t))&type metadata accessor for XPCRichError);
      v21 = sub_10002B560(v18, v20);
      sub_100044860(v21, v22);
      v23 = _swift_stdlib_bridgeErrorToNSError(12);
      v9[4] = v23;
      sub_100044654((uint64_t)(v9 + 4), (uint64_t)(v9 + 5), a9);
      *v30 = v23;
      sub_10004461C();
      sub_10001E18C((void *)&_mh_execute_header, v12, (os_log_type_t)v13, "transitionAsset failed with XPC Error %@, checking exit status", v19);
      sub_100002F78(&qword_1000FB8E0);
      sub_10001DBB8((uint64_t)v30);
      sub_10001D790((uint64_t)v30);
      sub_10001D790((uint64_t)v19);
    }
    else
    {
      sub_10004461C();
    }
    v9[37] = v17;

    sub_10002B8A0();
    v27 = sub_10004383C((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    v9[38] = sub_1000444A4(v27);
    v28 = (_QWORD *)swift_task_alloc(dword_1000FC924);
    v9[39] = v28;
    *v28 = v9;
    v28[1] = sub_100041254;
    v29 = sub_100044708();
    return sub_1000444F0(v29);
  }
  else
  {
    sub_1000449B0();
    v24 = sub_100044800();
    sub_10004495C(v24, (uint64_t (*)(void))&static os_log_type_t.default.getter, (uint64_t)&unk_1000F3940, (uint64_t)&unk_1000FCD58);
    sub_100044528();
    sub_10001D9C0();
    sub_10001EAC8();
    sub_10001E490();
    sub_10002B504();
    sub_10002B528();
    sub_10002B4C4();
    sub_10002B70C();
    v25 = (uint64_t (*)(void))sub_1000447E8();
    return sub_10001D8DC(v25);
  }
}

uint64_t sub_100041254()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 312));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_10004128C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);

  v9 = *(_QWORD *)(v8 + 104);
  swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_10001D9C0();
  sub_1000448F8();
  sub_100044800();
  sub_10004145C(v9, (uint64_t (*)(void))&static os_log_type_t.default.getter, (uint64_t)&unk_1000F3940, (uint64_t)&unk_1000FCD58);
  sub_100044528();
  sub_10001D9C0();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  sub_10002B70C();
  v10 = (uint64_t (*)(void))sub_1000447E8();
  return sub_10002B3B4(v10);
}

void sub_100041330()
{
  uint64_t v0;
  uint64_t State;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  int v6;
  const char *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;

  State = type metadata accessor for LoadState(0);
  v2 = *(_QWORD *)(State - 8);
  __chkstk_darwin(State);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))((char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v0, State);
  v4 = sub_100044984();
  v6 = v5(v4);
  if (v6 == enum case for LoadState.unloaded(_:))
  {
    sub_10004464C();
    v7 = "Unloading InferenceProvider asset";
    v8 = 33;
  }
  else
  {
    v9 = v6;
    if (v6 == enum case for LoadState.dynamicMode(_:))
    {
      sub_10004464C();
      v7 = "Making InferenceProvider asset dynamic";
      v8 = 38;
    }
    else
    {
      v10 = enum case for LoadState.loaded(_:);
      sub_10004464C();
      if (v9 != v10)
      {
        sub_1000446D4((uint64_t)"Unknown InferenceProvider asset transition", 42);
        v11 = sub_100044984();
        v12(v11);
        goto LABEL_8;
      }
      v7 = "Loading InferenceProvider asset";
      v8 = 31;
    }
  }
  sub_1000446D4((uint64_t)v7, v8);
LABEL_8:
  sub_10001E7B4();
}

void sub_10004145C(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  sub_100002F78(&qword_1000FB230);
  sub_10002BCBC();
  __chkstk_darwin(v9);
  sub_10001E654();
  if (qword_1000FB0F0 != -1)
    swift_once(&qword_1000FB0F0, sub_100039F08);
  v10 = sub_10001DD64();
  v11 = sub_100037AC4(v10, (uint64_t)qword_1000FC8B8);
  v12 = a2();
  if (sub_10001E264(v11))
  {
    v13 = (uint8_t *)sub_10001D8D4(2);
    *(_WORD *)v13 = 0;
    sub_100044580((void *)&_mh_execute_header, v11, v12, "InferenceProvider transition asset finished", v13);
    sub_10001D790((uint64_t)v13);
  }

  v14 = sub_10001DBC0();
  sub_10002B26C(v4, v15, v16, v14);
  v17 = sub_10004383C(&qword_1000FB828, type metadata accessor for InferenceProviderExtensionConnection);
  v18 = (_QWORD *)sub_100006A80(a3, 40);
  v18[2] = a1;
  v18[3] = v17;
  v18[4] = a1;
  sub_10001D834(a1);
  v19 = sub_100002CAC(v4, a4, (uint64_t)v18);
  swift_release(v19);
  sub_10001D950();
}

uint64_t sub_1000415A0(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v5 + 80) = a4;
  *(_QWORD *)(v5 + 88) = v4;
  *(_BYTE *)(v5 + 296) = a2;
  *(_QWORD *)(v5 + 64) = a1;
  *(_QWORD *)(v5 + 72) = a3;
  v6 = sub_100038084();
  *(_QWORD *)(v5 + 96) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 104) = v7;
  *(_QWORD *)(v5 + 112) = sub_10002B1BC(v7);
  *(_QWORD *)(v5 + 120) = sub_10001E784();
  *(_QWORD *)(v5 + 128) = sub_10001E784();
  v8 = type metadata accessor for UUID(0);
  *(_QWORD *)(v5 + 136) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v5 + 144) = v9;
  *(_QWORD *)(v5 + 152) = sub_10001D800(v9);
  v10 = type metadata accessor for InferenceProviderRequestConfiguration(0);
  *(_QWORD *)(v5 + 160) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v5 + 168) = v11;
  *(_QWORD *)(v5 + 176) = sub_10002B1BC(v11);
  *(_QWORD *)(v5 + 184) = sub_10001E784();
  *(_QWORD *)(v5 + 192) = sub_10001E784();
  sub_10001D7B8();
  return sub_10001D6D0();
}

uint64_t sub_100041644()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, NSObject *);
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v1 = v0[11];
  sub_10004464C();
  v0[25] = sub_1000446D4((uint64_t)"Inference request", 17);
  v2 = *(_QWORD *)(v1 + 112);
  v0[26] = v2;
  if (v2)
  {
    v3 = qword_1000FB0F0;
    swift_retain();
    if (v3 != -1)
      swift_once(&qword_1000FB0F0, sub_100039F08);
    v4 = v0[24];
    v5 = v0[20];
    v6 = v0[21];
    v8 = v0[10];
    v7 = v0[11];
    v9 = sub_10001DD64();
    v10 = sub_100002FF8(v9, (uint64_t)qword_1000FC8B8);
    v0[27] = v10;
    v11 = *(void (**)(uint64_t, uint64_t, NSObject *))(v6 + 16);
    v0[28] = v11;
    v11(v4, v8, v5);
    sub_10001D834(v7);
    sub_100044AF0();
    v12 = sub_1000449A8();
    if (sub_1000446DC(v12))
    {
      v13 = v0[19];
      v52 = v0[18];
      v10 = v0[17];
      v54 = v0[11];
      v14 = sub_10001D8D4(22);
      v57 = sub_10001D8D4(64);
      v59 = v57;
      sub_100044924(4.8151e-34);
      InferenceProviderRequestConfiguration.requestUUID.getter();
      v15 = sub_10004383C(&qword_1000FCD30, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
      sub_10002BD8C(v15, v15);
      sub_10002BADC(v13, *(uint64_t (**)(uint64_t, uint64_t))(v52 + 8));
      v16 = sub_100037FBC();
      sub_1000102C0(v16, v17, v18);
      v0[6] = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7);
      sub_10001EADC();
      sub_100044990();
      *(_WORD *)(v14 + 12) = 2080;
      v20 = sub_10002BA0C();
      v21 = sub_10004383C(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
      v22 = dispatch thunk of CustomStringConvertible.description.getter(v20, v21);
      sub_1000446FC(v22, v23, v24, v25, v26, v27, v28, v29, v51, v52);
      v0[7] = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8);
      sub_10001E034();
      sub_10001EBB0(v54);
      sub_100044640((void *)&_mh_execute_header, v5, (os_log_type_t)v4, "InferenceProvider requestInference (%s) executing on %s");
      swift_arrayDestroy(v57, 2);
      sub_10001D790(v57);
      sub_10001D790(v14);
    }
    else
    {
      v44 = v0[11];
      sub_100044990();
      sub_10001EBB0(v44);
    }

    v0[29] = v10;
    v45 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of InferenceProviderXPCSender.requestInference(asStream:clientData:configuration:)
                                     + 1));
    v0[30] = v45;
    *v45 = v0;
    v45[1] = sub_100041B28;
    sub_10002B848();
    __asm { BR              X4 }
  }
  if (qword_1000FB0F0 != -1)
    swift_once(&qword_1000FB0F0, sub_100039F08);
  v31 = sub_10001DD64();
  sub_100002FF8(v31, (uint64_t)qword_1000FC8B8);
  sub_1000447C8();
  v32 = sub_100037C24();
  v33 = static os_log_type_t.error.getter();
  v34 = sub_100037B08(v32);
  v35 = v0[23];
  if (v34)
  {
    v56 = v0[20];
    v36 = v0[19];
    v53 = v0[18];
    v55 = v0[21];
    v37 = v0[17];
    v38 = (uint8_t *)sub_10001D8D4(12);
    v58 = sub_10001D8D4(32);
    v59 = v58;
    *(_DWORD *)v38 = 136315138;
    InferenceProviderRequestConfiguration.requestUUID.getter();
    v39 = sub_10004383C(&qword_1000FCD30, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    v40 = dispatch thunk of CustomStringConvertible.description.getter(v37, v39);
    v42 = v41;
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v36, v37);
    sub_1000102C0(v40, v42, &v59);
    v0[2] = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3);
    sub_10001E420();
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v35, v56);
    sub_10001E18C((void *)&_mh_execute_header, v32, v33, "requestInference (%s) called for exited extension", v38);
    sub_10001DBB8(v58);
    sub_10001D790(v58);
    sub_10001D790((uint64_t)v38);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[21] + 8))(v0[23], v0[20]);
  }

  sub_10002B8A0();
  v47 = sub_10004383C((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
  v0[32] = sub_1000444A4(v47);
  v48 = (_QWORD *)swift_task_alloc(dword_1000FC924);
  v0[33] = v48;
  *v48 = v0;
  v48[1] = sub_100041BD8;
  sub_100044708();
  sub_10002B848();
  return sub_10003AFF8(v49);
}

uint64_t sub_100041B28()
{
  sub_100044674();
  return sub_10001D6D0();
}

uint64_t sub_100041B68()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  sub_10001E6F0();
  sub_1000420F4(*(_QWORD *)(v0 + 80));
  sub_10001D9C0();
  _OSActivity.close()();
  sub_10001D930();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  sub_10002B70C();
  sub_10002BDF0();
  v1 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_10002B160(v1);
}

uint64_t sub_100041BD8()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 264));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_100041C10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);

  sub_10001E6F0();
  swift_willThrow(v0, v1, v2, v3, v4, v5, v6, v7);
  sub_100044588();
  sub_10001D9C0();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  sub_10002B70C();
  sub_10002BDF0();
  v8 = (uint64_t (*)(void))sub_1000447E8();
  return sub_10002B160(v8);
}

uint64_t sub_100041C64()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t);
  uint64_t v30;
  uint64_t (*v31)(void);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  os_log_type_t type;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  NSObject *log;
  uint64_t v48;

  v1 = v0[31];
  v0[3] = v1;
  v2 = v0[12];
  swift_errorRetain(v1);
  sub_100002F78(&qword_1000FB5F8);
  v3 = sub_100037FBC();
  if (swift_dynamicCast(v3, v4, v5, v2, 0))
  {
    v45 = (void (*)(uint64_t, uint64_t, uint64_t))v0[28];
    v6 = v0[22];
    v7 = v0[20];
    v9 = v0[15];
    v8 = v0[16];
    v10 = v0[13];
    v11 = v0[14];
    v12 = v0[12];
    v13 = v0[10];
    swift_errorRelease(v0[31]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v9, v8, v12);
    v45(v6, v13, v7);
    v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
    v15 = v14(v11, v9, v12);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter();
    if (sub_1000447E0(v16))
    {
      log = v16;
      v18 = v0[19];
      v38 = v0[18];
      v42 = v0[14];
      v44 = v0[13];
      v40 = v0[12];
      v19 = sub_10001D8D4(22);
      v43 = (_QWORD *)sub_10001D8D4(8);
      v46 = sub_10001D8D4(32);
      v48 = v46;
      *(_DWORD *)v19 = 136315394;
      v39 = (void (*)(uint64_t, uint64_t, uint64_t))v14;
      type = v17;
      InferenceProviderRequestConfiguration.requestUUID.getter();
      v20 = sub_10004383C(&qword_1000FCD30, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
      v21 = sub_10002BD8C(v20, v20);
      v23 = v22;
      sub_10002BADC(v18, *(uint64_t (**)(uint64_t, uint64_t))(v38 + 8));
      sub_1000102C0(v21, v23, &v48);
      v0[4] = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v19 + 4);
      sub_10002B684();
      sub_1000449F0();
      *(_WORD *)(v19 + 12) = 2112;
      v25 = sub_10004383C(&qword_1000FC3A8, (uint64_t (*)(uint64_t))&type metadata accessor for XPCRichError);
      v26 = sub_10002B560(v40, v25);
      v39(v27, v42, v40);
      v28 = _swift_stdlib_bridgeErrorToNSError(v26);
      v0[5] = v28;
      sub_10002B3F0((uint64_t)(v0 + 5), (uint64_t)(v0 + 6));
      *v43 = v28;
      v29 = *(void (**)(uint64_t))(v44 + 8);
      sub_10001EAC0(v42);
      _os_log_impl((void *)&_mh_execute_header, log, type, "requestInference (%s) failed with XPC Error %@, checking exit status", (uint8_t *)v19, 0x16u);
      sub_100002F78(&qword_1000FB8E0);
      sub_10001DBB8((uint64_t)v43);
      sub_10001D790((uint64_t)v43);
      sub_10001DBB8(v46);
      sub_10001D790(v46);
      sub_10001D790(v19);

    }
    else
    {
      v33 = v0[13];
      sub_1000449F0();
      v29 = *(void (**)(uint64_t))(v33 + 8);
      v34 = sub_100037FBC();
      v29(v34);

    }
    v0[34] = v29;
    sub_10002B8A0();
    v35 = sub_10004383C((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    v0[35] = sub_1000444A4(v35);
    v36 = (_QWORD *)swift_task_alloc(dword_1000FC924);
    v0[36] = v36;
    *v36 = v0;
    v36[1] = sub_100042048;
    v37 = sub_100044708();
    return sub_10003AFF8(v37);
  }
  else
  {
    v30 = v0[10];
    sub_100044800();
    sub_1000420F4(v30);
    sub_10001D9C0();
    sub_100044588();
    sub_10001D9C0();
    sub_10001EAC8();
    sub_10001E490();
    sub_10002B504();
    sub_10002B528();
    sub_10002B4C4();
    sub_10002B70C();
    sub_10002BDF0();
    v31 = (uint64_t (*)(void))sub_1000447E8();
    return v31();
  }
}

uint64_t sub_100042048()
{
  uint64_t v0;

  v0 = sub_100044A28();
  sub_10001D680(v0);
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_10004207C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);

  sub_10001E6F0();
  v1 = *(_QWORD *)(v0 + 80);
  swift_willThrow(v2, v3, v4, v5, v6, v7, v8, v9);
  sub_1000448F8();
  sub_100044800();
  sub_1000420F4(v1);
  sub_10001D9C0();
  sub_100044588();
  sub_10001D9C0();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  sub_10002B70C();
  sub_10002BDF0();
  v10 = (uint64_t (*)(void))sub_1000447E8();
  return sub_10002B160(v10);
}

void sub_1000420F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for InferenceProviderRequestConfiguration(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000FB0F0 != -1)
    swift_once(&qword_1000FB0F0, sub_100039F08);
  v10 = type metadata accessor for Logger(0);
  sub_100002FF8(v10, (uint64_t)qword_1000FC8B8);
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(12, -1);
    v24 = v3;
    v15 = (uint8_t *)v14;
    v26 = swift_slowAlloc(32, -1);
    v28 = v26;
    *(_DWORD *)v15 = 136315138;
    v25 = v15 + 4;
    InferenceProviderRequestConfiguration.requestUUID.getter();
    v16 = sub_10004383C(&qword_1000FCD30, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v2, v16);
    v18 = v2;
    v20 = v19;
    (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v18);
    sub_1000102C0(v17, v20, &v28);
    v27 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v25);
    swift_bridgeObjectRelease(v20);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "InferenceProvider requestInference (%s) finished", v15, 0xCu);
    v22 = v26;
    swift_arrayDestroy(v26, 1);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

}

uint64_t sub_100042378(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_10001D948((uint64_t)sub_100042390, v2);
}

uint64_t sub_100042390()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v5)(uint64_t);

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 112);
  *(_QWORD *)(v0 + 40) = v1;
  if (!v1)
    return (*(uint64_t (**)(void))(v0 + 8))();
  sub_100044550();
  v2 = (_QWORD *)sub_10001E784();
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10004240C;
  v3 = sub_10002BD0C(*(_QWORD *)(v0 + 16));
  return v5(v3);
}

uint64_t sub_10004240C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;

  sub_10001E0D8();
  v3 = *v2;
  sub_10001D788(*(_QWORD *)(v0 + 48), v4);
  if (v1)
    swift_errorRelease(v1);
  swift_release(*(_QWORD *)(v0 + 40));
  return sub_10001D940(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_100042454(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[4] = a1;
  v2[5] = v1;
  v3 = sub_100002F78(&qword_1000FB2A0);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = sub_10001D800(v4);
  sub_10001D7B8();
  return sub_10001D674();
}

#error "10004262C: call analysis failed (funcsize=133)"

uint64_t sub_1000426DC()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 88));
  sub_10001D9C0();
  sub_10001E10C();
  return sub_10001D6D0();
}

uint64_t sub_100042718()
{
  uint64_t v0;

  sub_1000449E4();
  _OSActivity.close()();
  sub_10001D9C0();
  sub_10001D938();
  return sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t type metadata accessor for InferenceProviderExtensionConnection.ProviderIdentification(uint64_t a1)
{
  return sub_100042760(a1, qword_1000FCCA8, (uint64_t)&nominal type descriptor for InferenceProviderExtensionConnection.ProviderIdentification);
}

uint64_t sub_100042760(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AssetInferenceProvider(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t initializeWithCopy for InferenceProviderExtensionConnection.TerminationHandlerWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_unknownObjectWeakCopyInit();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(result + 16) = v4;
  return result;
}

uint64_t assignWithCopy for InferenceProviderExtensionConnection.TerminationHandlerWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakCopyAssign();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  return result;
}

uint64_t initializeWithTake for InferenceProviderExtensionConnection.TerminationHandlerWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_unknownObjectWeakTakeInit();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(result + 16) = v4;
  return result;
}

__n128 assignWithTake for InferenceProviderExtensionConnection.TerminationHandlerWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __n128 result;

  v3 = swift_unknownObjectWeakTakeAssign();
  result = *(__n128 *)(a2 + 8);
  *(__n128 *)(v3 + 8) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for InferenceProviderExtensionConnection.TerminationHandlerWrapper(uint64_t a1, int a2)
{
  int v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      v2 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else if ((*(_QWORD *)(a1 + 8) & 0xF000000000000007) != 0)
    {
      v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
    }
    else
    {
      v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InferenceProviderExtensionConnection.TerminationHandlerWrapper(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      *(_QWORD *)(result + 8) = 1;
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper()
{
  return &type metadata for InferenceProviderExtensionConnection.TerminationHandlerWrapper;
}

uint64_t *sub_100042904(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v7 = type metadata accessor for AppExtensionIdentity(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = a3;
      v10 = 1;
    }
    else
    {
      v12 = type metadata accessor for BuiltInInferenceProvider(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v8 = a1;
      v9 = a3;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

uint64_t sub_1000429D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (swift_getEnumCaseMultiPayload(a1, a2) == 1)
    v3 = type metadata accessor for AppExtensionIdentity(0);
  else
    v3 = type metadata accessor for BuiltInInferenceProvider(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

uint64_t sub_100042A20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for AppExtensionIdentity(0);
    v7 = 1;
  }
  else
  {
    v6 = type metadata accessor for BuiltInInferenceProvider(0);
    v7 = 0;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2);
  swift_storeEnumTagMultiPayload(a1, a3, v7);
  return a1;
}

uint64_t sub_100042AAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_100042B48(a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for AppExtensionIdentity(0);
      v7 = 1;
    }
    else
    {
      v6 = type metadata accessor for BuiltInInferenceProvider(0);
      v7 = 0;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2);
    swift_storeEnumTagMultiPayload(a1, a3, v7);
  }
  return a1;
}

uint64_t sub_100042B48(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for InferenceProviderExtensionConnection.ProviderIdentification(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100042B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for AppExtensionIdentity(0);
    v7 = 1;
  }
  else
  {
    v6 = type metadata accessor for BuiltInInferenceProvider(0);
    v7 = 0;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2);
  swift_storeEnumTagMultiPayload(a1, a3, v7);
  return a1;
}

uint64_t sub_100042C10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_100042B48(a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for AppExtensionIdentity(0);
      v7 = 1;
    }
    else
    {
      v6 = type metadata accessor for BuiltInInferenceProvider(0);
      v7 = 0;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2);
    swift_storeEnumTagMultiPayload(a1, a3, v7);
  }
  return a1;
}

uint64_t sub_100042CB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_100042CC8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for BuiltInInferenceProvider(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for AppExtensionIdentity(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initEnumMetadataMultiPayload(a1, 256, 2, v5);
      return 0;
    }
  }
  return result;
}

void sub_100042D48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = sub_100002F78(&qword_1000FB2A0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000FB0F0 != -1)
    swift_once(&qword_1000FB0F0, sub_100039F08);
  v6 = type metadata accessor for Logger(0);
  sub_100002FF8(v6, (uint64_t)qword_1000FC8B8);
  v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v18 = v11;
    *(_DWORD *)v10 = 136315138;
    v12 = sub_10004429C((unint64_t *)&qword_1000FBEA0, &qword_1000FB2A0);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v2, v12);
    v15 = v14;
    sub_1000102C0(v13, v14, &v18);
    v17 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
    swift_bridgeObjectRelease(v15);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "InferenceProvider await endOfStream (%s) finished", v10, 0xCu);
    swift_arrayDestroy(v11, 1);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

}

uint64_t sub_100042F5C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_descriptor;
  v4 = type metadata accessor for InferenceProviderDescriptor(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_100042FA4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1000FC96C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10001D668;
  return sub_10003FE38(a1);
}

uint64_t sub_100042FF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc(dword_1000FC974);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_10001D668;
  return sub_100040614(a1, a2, a3, a4);
}

uint64_t sub_10004306C(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc(dword_1000FC97C);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_10001CA84;
  return sub_1000415A0(a1, a2, a3, a4);
}

uint64_t sub_1000430E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1000FC944);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001D668;
  return sub_10003E8A0(a1, a2);
}

uint64_t sub_100043148(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1000FC94C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10001D668;
  return sub_10003ED38(a1);
}

uint64_t sub_100043198(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1000FC984);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001D668;
  return sub_100042378(a1, a2);
}

uint64_t sub_1000431F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1000FC90C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001D668;
  return sub_100039FA0(a1, a2);
}

uint64_t sub_100043258(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1000FC98C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10001D668;
  return sub_100042454(a1);
}

BOOL sub_1000432A8(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

void sub_1000432BC()
{
  uint64_t v0;

  Hasher._combine(_:)(*(_QWORD *)(v0 + 16));
}

void sub_1000432E4()
{
  _QWORD v0[9];

  Hasher.init(_seed:)(v0, 0);
  sub_1000449C8();
  Hasher._finalize()();
  sub_1000449BC();
}

void sub_10004331C(uint64_t a1)
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, a1);
  sub_1000449C8();
  Hasher._finalize()();
  sub_1000449BC();
}

unint64_t sub_100043350()
{
  unint64_t result;

  result = qword_1000FCCE0;
  if (!qword_1000FCCE0)
  {
    result = swift_getWitnessTable(&unk_1000CBE68, &type metadata for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
    atomic_store(result, (unint64_t *)&qword_1000FCCE0);
  }
  return result;
}

uint64_t sub_10004338C(uint64_t a1)
{
  uint64_t result;

  result = sub_10004383C(&qword_1000FB828, type metadata accessor for InferenceProviderExtensionConnection);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_1000433C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  char v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  char v29;
  __int128 v30;
  char v31;
  uint64_t v32;
  _BYTE v33[56];
  __int128 v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  char v42;
  __int128 v43;
  char v44;
  __int128 v45;
  char v46;
  _QWORD v47[2];
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  _QWORD v52[2];
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;

  v3 = sub_10001C854(a1);
  if ((v5 & 1) == 0)
  {
    v6 = _swiftEmptyArrayStorage;
    while (1)
    {
      v7 = *(unsigned int *)(a1 + 36);
      if ((_DWORD)v7 != (_DWORD)v4)
        break;
      v8 = 1 << *(_BYTE *)(a1 + 32);
      if (v8 < v3)
        goto LABEL_24;
      v52[0] = v3;
      v52[1] = v4;
      v53 = 0;
      v54 = v8;
      v55 = v7;
      v56 = 0;
      sub_10004401C((uint64_t)v52, a1, (uint64_t)&v28);
      v45 = v28;
      v46 = v29;
      v43 = v30;
      v44 = v31;
      v57 = v32;
      v9 = sub_1000439E4((uint64_t)&v28);
      if (v1)
      {
        sub_100044244((uint64_t)&v45);
        sub_100044244((uint64_t)&v43);
        sub_100044274(&v57);
        swift_bridgeObjectRelease(v6);
        return;
      }
      v12 = v9;
      v13 = v10;
      v14 = v11;
      sub_100044244((uint64_t)&v45);
      sub_100044244((uint64_t)&v43);
      sub_100044274(&v57);
      if (v14 == -1)
        goto LABEL_21;
      if ((v14 & 1) != 0)
        goto LABEL_30;
      v15 = *(unsigned int *)(a1 + 36);
      if ((_DWORD)v15 != (_DWORD)v13)
        goto LABEL_25;
      v16 = 1 << *(_BYTE *)(a1 + 32);
      if (v16 < v12)
        goto LABEL_26;
      v47[0] = v12;
      v47[1] = v13;
      v48 = 0;
      v49 = v16;
      v50 = v15;
      v51 = 0;
      sub_10004401C((uint64_t)v47, a1, (uint64_t)v33);
      sub_100043B5C((uint64_t)v33, (uint64_t)&v34);
      v41 = v34;
      v42 = v35;
      sub_100044244((uint64_t)&v41);
      v17 = v36;
      v18 = v37;
      v19 = v38;
      v40 = v39;
      sub_100044274(&v40);
      if ((v19 & 1) != 0)
        goto LABEL_31;
      if ((_DWORD)v18 != (_DWORD)v13)
        goto LABEL_27;
      if (v17 < v12)
        goto LABEL_28;
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
      {
        sub_1000BEE34(0, v6[2] + 1, 1, (uint64_t)v6);
        v6 = v24;
      }
      v21 = v6[2];
      v20 = v6[3];
      if (v21 >= v20 >> 1)
      {
        sub_1000BEE34(v20 > 1, v21 + 1, 1, (uint64_t)v6);
        v6 = v25;
      }
      v6[2] = v21 + 1;
      v22 = &v6[6 * v21];
      v22[4] = v12;
      v22[5] = v13;
      *((_BYTE *)v22 + 48) = 0;
      v22[7] = v17;
      v22[8] = v18;
      *((_BYTE *)v22 + 72) = 0;
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v13)
        goto LABEL_29;
      if (v17 >= 1 << *(_BYTE *)(a1 + 32))
      {
LABEL_21:
        v26 = sub_100002F78(&qword_1000FCE10);
        v27 = sub_10004429C(&qword_1000FCE18, &qword_1000FCE10);
        RangeSet.init(_orderedRanges:)(v6, v26, v27);
        return;
      }
      v3 = sub_10001C6FC(v17, v18, 0, a1);
      if ((v23 & 1) != 0)
        goto LABEL_32;
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
  }
LABEL_32:
  __break(1u);
}

id sub_1000436C0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  void *v4;
  NSString v8;
  Class isa;
  id v10;

  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  sub_100043DFC(0, &qword_1000FCDA0, RBSAttribute_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a4);
  v10 = objc_msgSend(v4, "initWithExplanation:target:attributes:", v8, a3, isa);

  return v10;
}

uint64_t sub_100043764()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1000FC964);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10001D668;
  return sub_10003FAF8();
}

uint64_t sub_1000437AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100002F78(&qword_1000FCE38);
  v1 = sub_10002BF40();
  swift_arrayDestroy(v1, v2);
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_1000437F8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RequestPriority(0) - 8) + 80);
  swift_arrayDestroy(v0 + ((v1 + 32) & ~v1), *(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_10004383C(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = a2(255);
    result = sub_100006C50(v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100043878()
{
  uint64_t v0;
  _QWORD *v1;

  sub_10001FAD0();
  v0 = swift_task_alloc(dword_1000FCD54);
  v1 = (_QWORD *)sub_100006AF4(v0);
  sub_100006AD8(v1);
  return sub_100043764();
}

uint64_t sub_1000438C8()
{
  uint64_t v0;
  _QWORD *v1;

  sub_10001FAD0();
  v0 = swift_task_alloc(dword_1000FCD64);
  v1 = (_QWORD *)sub_100006AF4(v0);
  sub_100006AD8(v1);
  return sub_100043764();
}

uint64_t sub_100043914(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for InferenceProviderExtensionConnection.ProviderIdentification(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100043958(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100002F78(&qword_1000FCD70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100043998()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = swift_task_alloc(dword_1000FCD7C);
  v3 = (_QWORD *)sub_100006AF4(v2);
  *v3 = v1;
  v3[1] = sub_10001D668;
  v4 = sub_100044708();
  return sub_10003D6D4(v4, v0);
}

uint64_t sub_1000439E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Strong;
  uint64_t v13;
  char v14;
  _BYTE v15[24];
  _BYTE v16[24];

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_BYTE *)(a1 + 40);
  result = sub_1000442D4(*(_QWORD *)a1, v3, v4 & 1);
  if ((v4 & 1) != 0 || (v7 & 1) != 0)
  {
LABEL_15:
    __break(1u);
    return 0;
  }
  else
  {
    v9 = v3;
    v10 = v2;
    while ((_DWORD)v9 == (_DWORD)v6)
    {
      if (v10 == v5)
        return 0;
      if (v10 < v2)
        goto LABEL_20;
      if ((_DWORD)v6 != (_DWORD)v3)
        goto LABEL_21;
      if (v10 >= v5)
        goto LABEL_22;
      if (v10 < 0)
        goto LABEL_23;
      v11 = *(_QWORD *)(a1 + 48);
      if (v10 >= 1 << *(_BYTE *)(v11 + 32))
        goto LABEL_23;
      if (((*(_QWORD *)(v11 + (((unint64_t)v10 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v10) & 1) == 0)
        goto LABEL_24;
      if (*(_DWORD *)(v11 + 36) != (_DWORD)v6)
        goto LABEL_25;
      sub_10001D500(*(_QWORD *)(v11 + 48) + 24 * v10, (uint64_t)v16);
      sub_10001D4C4((uint64_t)v16, (uint64_t)v15);
      Strong = swift_unknownObjectWeakLoadStrong(v15);
      if (!Strong)
      {
        sub_10001D53C((uint64_t)v15);
        return v10;
      }
      swift_unknownObjectRelease(Strong);
      sub_10001D53C((uint64_t)v15);
      result = sub_10001C6FC(v10, v9, 0, v11);
      v10 = result;
      v9 = v13;
      if ((v14 & 1) != 0)
        goto LABEL_15;
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }
  return result;
}

uint64_t sub_100043B5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char v12;
  __int128 v13;
  _OWORD v15[3];
  uint64_t v16;
  uint64_t v17[2];
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(unsigned __int8 *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v8 = *(_BYTE *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v22 = v9;
  result = sub_1000442D4(v3, v4, v5);
  if ((v5 & 1) != 0 || (v8 & 1) != 0)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    if ((_DWORD)v6 != (_DWORD)v4)
    {
      __break(1u);
LABEL_18:
      swift_unknownObjectRelease(result);
      result = sub_10001D53C((uint64_t)v17);
      v7 = v2;
    }
    if (v7 >= v3)
    {
      v17[0] = v3;
      v17[1] = v4;
      v18 = 0;
      v19 = v7;
      v20 = v5;
      v21 = 0;
      sub_100044328(v17, (uint64_t)v15);
      result = (uint64_t)sub_100044274(&v22);
      v13 = v15[1];
      *(_OWORD *)a2 = v15[0];
      *(_OWORD *)(a2 + 16) = v13;
      *(_OWORD *)(a2 + 32) = v15[2];
      *(_QWORD *)(a2 + 48) = v16;
      return result;
    }
  }
  else
  {
    v5 = v4;
    v2 = v3;
    while ((_DWORD)v5 == (_DWORD)v6)
    {
      if (v2 == v7)
        goto LABEL_16;
      if (v2 < v3)
        goto LABEL_22;
      if ((_DWORD)v6 != (_DWORD)v4)
        goto LABEL_23;
      if (v2 >= v7)
        goto LABEL_24;
      if (v2 < 0 || v2 >= 1 << *(_BYTE *)(v9 + 32))
        goto LABEL_25;
      if (((*(_QWORD *)(v9 + 56 + (((unint64_t)v2 >> 3) & 0xFFFFFFFFFFFFF8)) >> v2) & 1) == 0)
        goto LABEL_26;
      if (*(_DWORD *)(v9 + 36) != (_DWORD)v6)
        goto LABEL_27;
      sub_10001D500(*(_QWORD *)(v9 + 48) + 24 * v2, (uint64_t)v15);
      sub_10001D4C4((uint64_t)v15, (uint64_t)v17);
      result = swift_unknownObjectWeakLoadStrong(v17);
      if (result)
        goto LABEL_18;
      sub_10001D53C((uint64_t)v17);
      result = sub_10001C6FC(v2, v5, 0, v9);
      v2 = result;
      v5 = v11;
      if ((v12 & 1) != 0)
        goto LABEL_15;
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_100043D24(_QWORD *a1)
{
  swift_release(*a1);
  return a1;
}

uint64_t sub_100043D4C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100043D80(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = swift_task_alloc(dword_1000FCDAC);
  v9 = (_QWORD *)sub_100006AF4(v8);
  *v9 = v2;
  v9[1] = sub_10001D668;
  return sub_10003B928(a1, v4, v5, v7, v6);
}

void sub_100043DF4(uint64_t a1)
{
  uint64_t v1;

  sub_10003BBBC(a1, *(void **)(v1 + 16));
}

uint64_t sub_100043DFC(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_100043E34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = *(_QWORD *)(sub_100002F78(&qword_1000FCDC0) - 8);
  v1 = *(unsigned __int8 *)(v0 + 80) | 7;
  sub_10002BC38(v0);
  v2 = sub_10002BE5C();
  return swift_deallocObject(v2, v3, v1);
}

uint64_t sub_100043E90()
{
  uint64_t v0;
  void *v1;

  sub_100002F78(&qword_1000FCDC0);
  v0 = sub_100044984();
  return sub_10003BCEC(v0, v1);
}

uint64_t sub_100043EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100043EEC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100043EF4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_1000FCDCC);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10001CA84;
  return sub_10003B760(v0);
}

uint64_t sub_100043F40()
{
  uint64_t v0;
  _QWORD *v1;

  sub_10001FAD0();
  v0 = swift_task_alloc(dword_1000FCDDC);
  v1 = (_QWORD *)sub_100006AF4(v0);
  sub_100006AD8(v1);
  return sub_10003AFB0();
}

uint64_t sub_100043F8C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_unknownObjectWeakDestroy(v0 + 24);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100043FB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = swift_task_alloc(dword_1000FCDEC);
  v6 = (_QWORD *)sub_100006AF4(v5);
  *v6 = v2;
  v6[1] = sub_10001D668;
  return sub_10003A1F0(a1, v4, v1 + 24);
}

uint64_t sub_10004401C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  result = sub_10001C854(a2);
  if ((v8 & 1) == 0)
  {
    v9 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v9 == (_DWORD)v7)
    {
      v10 = 1 << *(_BYTE *)(a2 + 32);
      if (v10 >= result)
      {
        v11 = *(_QWORD *)a1;
        v12 = *(_QWORD *)(a1 + 8);
        v13 = *(_BYTE *)(a1 + 16);
        v14 = *(_QWORD *)(a1 + 24);
        v15 = *(_QWORD *)(a1 + 32);
        v16 = *(_BYTE *)(a1 + 40);
        *(_QWORD *)&v17 = result;
        *((_QWORD *)&v17 + 1) = v7;
        v18 = 0;
        v19 = v10;
        v20 = v9;
        v21 = 0;
        sub_10004410C((uint64_t *)a1, &v17);
        swift_bridgeObjectRetain(a2);
        sub_1000442D4(v11, v12, v13);
        result = sub_1000442D4(v14, v15, v16);
        *(_QWORD *)a3 = v11;
        *(_QWORD *)(a3 + 8) = v12;
        *(_BYTE *)(a3 + 16) = v13;
        *(_QWORD *)(a3 + 24) = v14;
        *(_QWORD *)(a3 + 32) = v15;
        *(_BYTE *)(a3 + 40) = v16;
        *(_QWORD *)(a3 + 48) = a2;
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10004410C(uint64_t *a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  int v9;
  __int128 v10;
  char v11;
  _BYTE v12[24];
  __int128 v13;
  char v14;
  _BYTE v15[24];
  __int128 v16;
  char v17;
  _BYTE v18[24];
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  int v26;
  char v27;

  v2 = *a1;
  if ((a1[2] & 1) != 0)
    goto LABEL_15;
  v5 = a1[1];
  v16 = *a2;
  v17 = *((_BYTE *)a2 + 16);
  sub_1000442E0((uint64_t)&v16, (uint64_t)v18);
  result = sub_1000442E0((uint64_t)v18, (uint64_t)&v19);
  if ((v21 & 1) != 0)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  v7 = v19;
  v8 = v20;
  v13 = *(__int128 *)((char *)a2 + 24);
  v14 = *((_BYTE *)a2 + 40);
  sub_1000442E0((uint64_t)&v13, (uint64_t)v15);
  if (v8 != (_DWORD)v5)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v2 < v7)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  sub_1000442E0((uint64_t)v15, (uint64_t)&v22);
  if ((v24 & 1) != 0)
    goto LABEL_14;
  v2 = v22;
  v9 = v23;
  v10 = *(_OWORD *)(a1 + 3);
  v11 = *((_BYTE *)a1 + 40);
  sub_1000442E0((uint64_t)&v10, (uint64_t)v12);
  result = sub_1000442E0((uint64_t)v12, (uint64_t)&v25);
  if ((v27 & 1) != 0)
    goto LABEL_14;
  if (v9 != v26)
    goto LABEL_12;
  if (v2 < v25)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    result = swift_bridgeObjectRetain(v2);
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_100044244(uint64_t a1)
{
  sub_10001C7E4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

_QWORD *sub_100044274(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

uint64_t sub_10004429C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_1000056BC(a2);
    result = sub_100006C50(v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000442D4(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRetain(result);
  return result;
}

uint64_t sub_1000442E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100002F78(&qword_1000FCE20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100044328@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  char v13;
  _BYTE v14[24];
  __int128 v15;
  char v16;
  _BYTE v17[24];
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;

  v4 = *a1;
  if ((a1[2] & 1) != 0)
    goto LABEL_15;
  v6 = a1[1];
  v15 = *v2;
  v16 = *((_BYTE *)v2 + 16);
  sub_1000442E0((uint64_t)&v15, (uint64_t)v17);
  result = sub_1000442E0((uint64_t)v17, (uint64_t)&v18);
  if ((v20 & 1) == 0)
  {
    v8 = v18;
    v9 = v19;
    v12 = *(__int128 *)((char *)v2 + 24);
    v13 = *((_BYTE *)v2 + 40);
    sub_1000442E0((uint64_t)&v12, (uint64_t)v14);
    if (v9 == (_DWORD)v6)
    {
      if (v4 >= v8)
      {
        sub_1000442E0((uint64_t)v14, (uint64_t)&v21);
        if ((v23 & 1) != 0 || (a1[5] & 1) != 0)
          goto LABEL_14;
        v10 = a1[4];
        if (v22 == (_DWORD)v10)
        {
          v11 = a1[3];
          if (v21 >= v11)
          {
            result = swift_bridgeObjectRetain(*((_QWORD *)v2 + 6));
            *(_QWORD *)a2 = v4;
            *(_QWORD *)(a2 + 8) = v6;
            *(_BYTE *)(a2 + 16) = 0;
            *(_QWORD *)(a2 + 24) = v11;
            *(_QWORD *)(a2 + 32) = v10;
            *(_BYTE *)(a2 + 40) = 0;
            *(_QWORD *)(a2 + 48) = result;
            return result;
          }
          goto LABEL_13;
        }
LABEL_12:
        __break(1u);
LABEL_13:
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        result = swift_bridgeObjectRetain(v4);
        goto LABEL_16;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_12;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_100044458()
{
  uint64_t v0;
  _QWORD *v1;

  sub_10001FAD0();
  v0 = swift_task_alloc(dword_1000FCE2C);
  v1 = (_QWORD *)sub_100006AF4(v0);
  sub_100006AD8(v1);
  return sub_10003F794();
}

uint64_t sub_1000444A4(uint64_t a1)
{
  uint64_t v1;

  return swift_allocError(v1, a1, 0, 0);
}

void sub_1000444B8()
{
  _OSActivity.close()();
}

void sub_1000444E0(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  uint8_t *v4;
  os_log_type_t v5;

  _os_log_impl(a1, a2, v5, a4, v4, 0xCu);
}

uint64_t sub_1000444F0(uint64_t a1)
{
  return sub_10003AFF8(a1);
}

uint64_t sub_10004450C()
{
  return sub_10003D5CC();
}

void sub_100044528()
{
  _OSActivity.close()();
}

void sub_100044540()
{
  _OSActivity.close()();
}

uint64_t sub_100044550()
{
  uint64_t v0;

  return swift_retain(v0);
}

void sub_100044568()
{
  _OSActivity.close()();
}

void sub_100044580(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 2u);
}

void sub_100044588()
{
  _OSActivity.close()();
}

uint64_t sub_1000445A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 16) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a10, v10 + 24, v11);
}

uint64_t sub_1000445B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_1000445C8(uint64_t a1)
{
  return sub_10003AFF8(a1);
}

uint64_t sub_1000445E4(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_100044600(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10004461C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

void sub_10004462C(float a1)
{
  float *v1;

  *v1 = a1;
}

void sub_100044640(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0x16u);
}

uint64_t sub_10004464C()
{
  return type metadata accessor for _OSActivity(0);
}

uint64_t sub_100044654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3);
}

uint64_t sub_100044674()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  v5 = *(_QWORD *)(v3 + 240);
  *v4 = *v1;
  *(_QWORD *)(v3 + 248) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_100044694()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  v5 = *(_QWORD *)(v3 + 152);
  *v4 = *v1;
  *(_QWORD *)(v3 + 160) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_1000446B4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  v5 = *(_QWORD *)(v3 + 56);
  *v4 = *v1;
  *(_QWORD *)(v3 + 64) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_1000446D4(uint64_t a1, uint64_t a2)
{
  return _OSActivity.__allocating_init(_:)(a1, a2, 2);
}

BOOL sub_1000446DC(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000446EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_task_dealloc(a10);
}

void sub_1000446F4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_1000102C0(a1, a2, (uint64_t *)va);
}

void sub_1000446FC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_1000102C0(a1, a2, (uint64_t *)va);
}

uint64_t sub_100044708()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100044714(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v2, v1, a1);
}

uint64_t sub_10004472C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v2, v1, a1);
}

uint64_t sub_100044744(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 104))(v1, v2, a1);
}

uint64_t sub_10004475C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return swift_dynamicCast(v2, v1, a1, v3, 0);
}

uint64_t sub_100044774(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1, v2, v3);
}

_WORD *sub_10004478C(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_100044798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  *v10 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v10, a10, a9);
}

uint64_t sub_1000447B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  *v3 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3, v1, v2);
}

uint64_t sub_1000447C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v2, v0);
}

BOOL sub_1000447E0(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_1000447E8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_1000447F4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100044800()
{
  uint64_t v0;

  return swift_errorRelease(*(_QWORD *)(v0 + 24));
}

uint64_t sub_100044808()
{
  uint64_t v0;
  uint64_t v1;

  *(_WORD *)(v0 + 12) = 2048;
  return swift_release(v1);
}

uint64_t sub_100044820()
{
  uint64_t v0;

  return swift_release(v0);
}

id sub_100044828(int a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(void **)(v1 + 24);
  *(_DWORD *)(v2 + 144) = a1;
  *(_QWORD *)(v2 + 136) = v3;
  return v3;
}

uint64_t sub_100044860(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  return v4(a2, v2, v3);
}

uint64_t sub_100044874(float a1)
{
  uint64_t v1;
  float *v2;

  *v2 = a1;
  return swift_errorRetain(v1);
}

uint64_t sub_100044888@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_100044894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return swift_arrayDestroy(a12, 2);
}

uint64_t sub_1000448A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return swift_arrayDestroy(a15, 3);
}

uint64_t sub_1000448BC()
{
  uint64_t v0;

  return swift_retain_n(v0, 4);
}

uint64_t sub_1000448C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v0, v2);
}

uint64_t sub_1000448DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v0, v2);
}

uint64_t sub_1000448F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return swift_task_dealloc(a9);
}

uint64_t sub_1000448F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_100044904(uint64_t a1)
{
  return swift_release_n(a1, 4);
}

uint64_t sub_10004490C()
{
  uint64_t v0;

  return v0;
}

void sub_100044924(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t sub_100044934()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_100044944()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 88))();
}

uint64_t sub_10004494C()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 128));
}

void sub_10004495C(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_10004145C(v4, a2, a3, a4);
}

uint64_t sub_100044964(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(a1, a2, v2);
}

uint64_t sub_100044974()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100005700(v1, 1, v0);
}

uint64_t sub_100044984()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100044990()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_1000449A0()
{
  return type metadata accessor for AppExtensionIdentity(0);
}

uint64_t sub_1000449A8()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_1000449B0()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 256));
}

void sub_1000449C8()
{
  uint64_t v0;

  Hasher._combine(_:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000449D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return swift_task_dealloc(a11);
}

void sub_1000449DC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  sub_1000102C0(a1, a2, (uint64_t *)(v2 - 80));
}

void sub_1000449E4()
{
  uint64_t v0;

  sub_100042D48(*(_QWORD *)(v0 + 32));
}

uint64_t sub_1000449F0()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t sub_1000449FC()
{
  uint64_t v0;
  uint64_t v1;

  return String.init<A>(describing:)(v0, v1);
}

uint64_t sub_100044A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t (*a16)(uint64_t, uint64_t))
{
  uint64_t v16;

  return a16(a1, v16);
}

uint64_t sub_100044A14()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return *(_QWORD *)(v2 + 72);
}

uint64_t sub_100044A28()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return *(_QWORD *)(v2 + 288);
}

uint64_t sub_100044A50()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_100044A5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 160) = a2;
  *(_QWORD *)(v4 + 168) = v3;
  return *(_QWORD *)(a1 + 48) + 24 * v2;
}

uint64_t sub_100044A70()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

_QWORD *sub_100044A84@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *result = v2;
  result[1] = a2;
  return result;
}

id sub_100044A98()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, *(SEL *)(v1 + 2840));
}

uint64_t sub_100044AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return sub_100002CAC(v2, a2, v3);
}

void sub_100044AB0(float a1)
{
  float *v1;

  *v1 = a1;
}

void sub_100044AC4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_1000102C0(a1, a2, (uint64_t *)va);
}

void sub_100044AD0()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 120);
  *(_QWORD *)(v0 + 120) = 0;

}

uint64_t sub_100044ADC()
{
  uint64_t v0;

  return _swift_stdlib_bridgeErrorToNSError(v0);
}

uint64_t sub_100044AE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return sub_100043914(a1 + v1, v2);
}

uint64_t sub_100044AF0()
{
  return Logger.logObject.getter();
}

uint64_t sub_100044AF8()
{
  return type metadata accessor for InferenceProviderXPCSender(0);
}

uint64_t sub_100044B00(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  return sub_100043DFC(0, a2, a3);
}

uint64_t sub_100044B08(uint64_t a1)
{
  uint64_t v1;

  return sub_10001D500(a1, v1);
}

void sub_100044B10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = static BuiltInInferenceProvider.allCases.getter();
  v1 = sub_10004526C(v0);
  type metadata accessor for OSEligibilityChecker(0);
  v2 = static OSEligibilityChecker.shared.getter();
  v3 = type metadata accessor for InferenceProviderManager();
  v4 = swift_allocObject(v3, 184, 15);
  v5 = sub_100047B24(v1, 1, v2, v4);
  swift_retain(v5);
  sub_100045FD8();
  swift_release(v5);
  sub_100006C14();
}

uint64_t sub_100044B80()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_100002FB8(v0, qword_1000FCE40);
  v1 = sub_100002FF8(v0, (uint64_t)qword_1000FCE40);
  return generalLogger.getter(v1);
}

void sub_100044BC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v6;

  v2 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(0);
  sub_10002BCBC();
  __chkstk_darwin(v3);
  sub_10004465C();
  sub_10002AC98(v1, v0, v4);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v0, v2);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 8));
      sub_100002F78(&qword_1000FCF98);
      v6 = sub_1000449A0();
      sub_10001DD50(v6);
    }
  }
  else
  {
    sub_10002ACC4(v0, type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype);
  }
  sub_100049140();
}

double sub_100044C70@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  double result;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  _OWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;

  v3 = v2;
  v37 = a1;
  v38 = a2;
  v4 = type metadata accessor for InferenceProviderDescriptor(0);
  v34 = *(_QWORD *)(v4 - 8);
  v35 = v4;
  __chkstk_darwin(v4);
  v36 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AppExtensionIdentity(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v33 - v11;
  v13 = type metadata accessor for BuiltInInferenceProvider(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002AC98(v3, (uint64_t)v19, v20);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v19, v17);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease(*((_QWORD *)v19 + 1));
      v22 = sub_100002F78(&qword_1000FCF98);
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, &v19[*(int *)(v22 + 48)], v6);
      (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v36, v37, v35);
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
      v23 = type metadata accessor for InferenceProviderExtensionConnection(0);
      swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
      sub_10003F328();
      v24 = v38;
      v38[3] = v23;
      v24[4] = &off_1000F38B8;
      *v24 = v25;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    }
    else
    {
      if (qword_1000FB0F8 != -1)
        swift_once(&qword_1000FB0F8, sub_100044B80);
      v27 = type metadata accessor for Logger(0);
      v28 = sub_100002FF8(v27, (uint64_t)qword_1000FCE40);
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v31 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Cannot make an instanceID connection from a direct connection", v31, 2u);
        swift_slowDealloc(v31, -1, -1);
      }

      v32 = v38;
      v38[4] = 0;
      result = 0.0;
      *v32 = 0u;
      v32[1] = 0u;
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v19, v13);
    type metadata accessor for InferenceProviderManager();
    sub_100044F78((uint64_t)v16, v37, v38);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  return result;
}

void sub_100044F78(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v7 = type metadata accessor for InferenceProviderDescriptor(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_10001E168();
  v11 = v10 - v9;
  v12 = type metadata accessor for BuiltInInferenceProvider(0);
  __chkstk_darwin(v12);
  sub_10001E66C();
  (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v3, a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v11, a2, v7);
  v14 = type metadata accessor for InferenceProviderExtensionConnection(0);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  sub_10003F214();
  a3[3] = v14;
  a3[4] = &off_1000F38B8;
  *a3 = v15;
  sub_10001D950();
}

void sub_10004505C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  __int128 v13[2];

  v4 = type metadata accessor for InferenceProviderDescriptor.Instance(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10001E66C();
  InferenceProviderDescriptor.instance.getter();
  v6 = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 88))(v2, v4);
  if (v6 == enum case for InferenceProviderDescriptor.Instance.specificInstance(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v5 + 96))(v2, v4);
    v8 = *v2;
    v7 = v2[1];
    v9 = *(_QWORD *)(v1 + *(int *)(sub_100049048() + 24));
    sub_10001E3E0();
    sub_100009E64(v8, v7, v9, (uint64_t)v11);
    sub_100049010();
    if (!v12)
    {
      sub_10002AD5C((uint64_t)v11, &qword_1000FBEB0);
      sub_1000490E8(v11);
      if (!v12)
      {
        sub_100049010();
        sub_10002AD5C((uint64_t)v11, &qword_1000FBEB0);
        *(_QWORD *)(a1 + 32) = 0;
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        goto LABEL_12;
      }
      sub_1000490F4();
      sub_100006694((uint64_t)v13, (uint64_t)v11);
      sub_1000964EC((uint64_t)v11, v8, v7);
      goto LABEL_7;
    }
    sub_100049010();
LABEL_6:
    sub_1000490F4();
LABEL_7:
    sub_10000667C(v13, a1);
LABEL_12:
    sub_10001D950();
    return;
  }
  if (v6 == enum case for InferenceProviderDescriptor.Instance.defaultInstance(_:))
  {
    v10 = v1 + *(int *)(sub_100049048() + 20);
    sub_100048DB4(v10, (uint64_t)v11, &qword_1000FBEB0);
    if (!v12)
    {
      sub_10002AD5C((uint64_t)v11, &qword_1000FBEB0);
      sub_1000490E8(v13);
      sub_100048D28((uint64_t)v13, v10);
      sub_100048F58((uint64_t)v13, a1, &qword_1000FBEB0);
      goto LABEL_12;
    }
    goto LABEL_6;
  }
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "modelmanagerd/InferenceProviderManager.swift", 44, 2, 92, 0);
  __break(1u);
}

uint64_t sub_10004526C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, char *, uint64_t);
  void (*v20)(uint64_t, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  _BOOL8 v41;
  Swift::Int v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t result;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  void (*v65)(uint64_t, char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v2 = sub_100049048();
  v66 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v69 = (char *)&v59 - v6;
  sub_10001E148();
  __chkstk_darwin(v7);
  v68 = (uint64_t)&v59 - v8;
  v9 = type metadata accessor for BuiltInInferenceProvider(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_10001EB18();
  v67 = v11;
  sub_10001E148();
  __chkstk_darwin(v12);
  v14 = (char *)&v59 - v13;
  v70 = v2;
  v15 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v2, &protocol witness table for String);
  v16 = *(_QWORD *)(a1 + 16);
  if (v16)
  {
    v17 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v18 = *(_QWORD *)(v10 + 72);
    v60 = a1;
    v61 = v18;
    v19 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 16);
    v64 = v5;
    v65 = v19;
    v62 = v14;
    v63 = v10;
    while (1)
    {
      v71 = v16;
      v20 = v65;
      v21 = ((uint64_t (*)(char *, uint64_t, uint64_t))v65)(v14, v17, v9);
      v22 = BuiltInInferenceProvider.rawValue.getter(v21);
      v24 = v23;
      v25 = v67;
      v20(v67, v14, v9);
      v27 = (uint64_t)v69;
      v26 = v70;
      v28 = (uint64_t)&v69[*(int *)(v70 + 20)];
      *(_QWORD *)(v28 + 32) = 0;
      *(_OWORD *)v28 = 0u;
      *(_OWORD *)(v28 + 16) = 0u;
      v29 = *(int *)(v26 + 24);
      v30 = sub_100002F78(&qword_1000FB9C8);
      *(_QWORD *)(v27 + v29) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v30, &protocol witness table for String);
      v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
      v32 = v9;
      v31(v27, v25, v9);
      v33 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(0);
      swift_storeEnumTagMultiPayload(v27, v33, 0);
      sub_10002AD5C(v28, &qword_1000FBEB0);
      *(_OWORD *)v28 = 0u;
      *(_OWORD *)(v28 + 16) = 0u;
      *(_QWORD *)(v28 + 32) = 0;
      v34 = v68;
      sub_100048D70(v27, v68);
      sub_100048D70(v34, (uint64_t)v64);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v15);
      v72 = v15;
      v36 = sub_100049120();
      v38 = sub_100010994(v36, v37);
      v40 = *(_QWORD *)(v15 + 16);
      v41 = (v39 & 1) == 0;
      v42 = v40 + v41;
      if (__OFADD__(v40, v41))
        break;
      v43 = v38;
      v44 = v39;
      sub_100002F78(&qword_1000FD0F0);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v42))
      {
        v45 = sub_100049120();
        v47 = sub_100010994(v45, v46);
        if ((v44 & 1) != (v48 & 1))
          goto LABEL_17;
        v43 = v47;
      }
      v15 = v72;
      if ((v44 & 1) != 0)
      {
        v49 = sub_100049080();
        sub_100048F8C(v49, v50);
      }
      else
      {
        *(_QWORD *)(v72 + 8 * (v43 >> 6) + 64) |= 1 << v43;
        v51 = (uint64_t *)(*(_QWORD *)(v15 + 48) + 16 * v43);
        *v51 = v22;
        v51[1] = v24;
        v52 = sub_100049080();
        sub_100048D70(v52, v53);
        v54 = *(_QWORD *)(v15 + 16);
        v55 = __OFADD__(v54, 1);
        v56 = v54 + 1;
        if (v55)
          goto LABEL_16;
        *(_QWORD *)(v15 + 16) = v56;
        sub_10001E140();
      }
      sub_10001EADC();
      swift_bridgeObjectRelease(0x8000000000000000);
      v14 = v62;
      v9 = v32;
      v10 = v63;
      (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v9);
      v17 += v61;
      v16 = v71 - 1;
      if (v71 == 1)
      {
        v57 = v60;
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
  }
  else
  {
    v57 = a1;
LABEL_14:
    swift_bridgeObjectRelease(v57);
    return v15;
  }
  return result;
}

void sub_1000455F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  os_log_type_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  uint64_t v42;
  uint64_t v43;

  v5 = v3;
  sub_100002F78(&qword_1000FD0E8);
  sub_10002BCBC();
  v10 = __chkstk_darwin(v9);
  v12 = (_QWORD *)((char *)v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  v14 = (char *)v41 - v13;
  v15 = sub_100049048();
  sub_10002BCBC();
  __chkstk_darwin(v16);
  sub_10001DEA0();
  v17 = *v5;
  sub_10001E140();
  v18 = sub_100049120();
  sub_100009F08(v18, v19, v17);
  sub_10001EADC();
  if (sub_100005700((uint64_t)v14, 1, v15) == 1)
  {
    sub_10002AD5C((uint64_t)v14, &qword_1000FD0E8);
  }
  else
  {
    sub_100048D70((uint64_t)v14, v4);
    sub_100044BC8();
    v21 = v20;
    sub_10002ACC4(v4, type metadata accessor for InferenceProviderManager.ConnectionCollection.Group);
    if ((v21 & 1) == 0)
      goto LABEL_10;
  }
  if (qword_1000FB0F8 != -1)
    swift_once(&qword_1000FB0F8, sub_100044B80);
  v22 = sub_10001DD64();
  v23 = sub_100002FF8(v22, (uint64_t)qword_1000FCE40);
  v24 = sub_1000490B0();
  Logger.logObject.getter(v24);
  v25 = sub_10001E9D0();
  if (os_log_type_enabled(v23, v25))
  {
    v26 = sub_10001D8D4(12);
    v41[1] = v5;
    v27 = (uint8_t *)v26;
    v28 = sub_10001D8D4(32);
    v41[0] = a3;
    v29 = v28;
    v43 = v28;
    *(_DWORD *)v27 = 136315138;
    sub_10001E140();
    v30 = sub_100049120();
    sub_1000102C0(v30, v31, v32);
    v42 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43);
    swift_bridgeObjectRelease_n(a2, 3);
    sub_10001E18C((void *)&_mh_execute_header, v23, v25, "Found inference provider extension: %s", v27);
    sub_10001DBB8(v29);
    v34 = v29;
    a3 = v41[0];
    sub_10001D790(v34);
    sub_10001D790((uint64_t)v27);
  }
  else
  {
    swift_bridgeObjectRelease_n(a2, 2);
  }

  v35 = (char *)v12 + *(int *)(sub_100002F78(&qword_1000FCF98) + 48);
  v36 = sub_1000449A0();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v35, a3, v36);
  v37 = (uint64_t)v12 + *(int *)(v15 + 20);
  *(_QWORD *)(v37 + 32) = 0;
  *(_OWORD *)v37 = 0u;
  *(_OWORD *)(v37 + 16) = 0u;
  v38 = *(int *)(v15 + 24);
  sub_1000490B0();
  v39 = sub_100002F78(&qword_1000FB9C8);
  *(uint64_t *)((char *)v12 + v38) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v39, &protocol witness table for String);
  *v12 = a1;
  v12[1] = a2;
  v40 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(0);
  swift_storeEnumTagMultiPayload(v12, v40, 1);
  sub_10002AD5C(v37, &qword_1000FBEB0);
  *(_OWORD *)v37 = 0u;
  *(_OWORD *)(v37 + 16) = 0u;
  *(_QWORD *)(v37 + 32) = 0;
  sub_100048FD4((uint64_t)v12, 0);
  sub_100096330((uint64_t)v12, a1, a2);
LABEL_10:
  sub_100006A68();
}

uint64_t sub_10004590C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[4];

  v2 = InferenceProviderDescriptor.id.getter();
  sub_1000459B8(v24, v2, v3);
  v5 = v4;
  v6 = sub_100049048();
  v7 = sub_100005700(v5, 1, v6);
  if ((_DWORD)v7)
  {
    sub_1000490C8(v7, v8, v9, v10, v11, v12, v13, v14, v24[0]);
    result = sub_10001D8B4();
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else
  {
    sub_10004505C(a1);
    sub_1000490C8(v16, v17, v18, v19, v20, v21, v22, v23, v24[0]);
    return sub_10001D8B4();
  }
  return result;
}

void (*sub_1000459B8(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain(a3);
  v6[5] = sub_1000475D0(v6, a2, a3);
  return sub_100045A24;
}

void sub_100045A24(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);
  sub_10001E034();
  sub_10004902C(v1);
}

uint64_t sub_100045A54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44[2];
  __int128 v45;
  uint64_t v46;
  _QWORD v47[6];
  int64_t v48;

  v42 = sub_100002F78(&qword_1000FD130);
  v2 = __chkstk_darwin(v42);
  v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (uint64_t *)((char *)&v38 - v5);
  sub_10001C6C0(v47, a1);
  v43 = v47[0];
  v39 = v47[1];
  v48 = v47[3];
  v7 = v47[4];
  v41 = (unint64_t)(v47[2] + 64) >> 6;
  swift_bridgeObjectRetain(a1);
  v8 = _swiftEmptyArrayStorage;
  v40 = xmmword_1000CB140;
  if (!v7)
    goto LABEL_3;
LABEL_2:
  v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  v10 = v9 | (v48 << 6);
  while (1)
  {
    v15 = *(_QWORD *)(v43 + 56);
    v16 = (uint64_t *)(*(_QWORD *)(v43 + 48) + 16 * v10);
    v18 = *v16;
    v17 = v16[1];
    v19 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0);
    v20 = v15 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v10;
    v21 = v42;
    sub_10002AC98(v20, (uint64_t)v6 + *(int *)(v42 + 48), type metadata accessor for InferenceProviderManager.ConnectionCollection.Group);
    *v6 = v18;
    v6[1] = v17;
    sub_100048F58((uint64_t)v6, (uint64_t)v4, &qword_1000FD130);
    v22 = &v4[*(int *)(v21 + 48)];
    sub_100048DB4((uint64_t)&v22[*(int *)(v19 + 20)], (uint64_t)&v45, &qword_1000FBEB0);
    if (v46)
    {
      sub_10000667C(&v45, (uint64_t)v44);
      v23 = sub_100002F78(&qword_1000FB9C0);
      v24 = (_QWORD *)swift_allocObject(v23, 72, 7);
      *((_OWORD *)v24 + 1) = v40;
      sub_10000667C(v44, (uint64_t)(v24 + 4));
    }
    else
    {
      v24 = _swiftEmptyArrayStorage;
    }
    v25 = *(_QWORD *)&v22[*(int *)(v19 + 24)];
    swift_bridgeObjectRetain(v17);
    v26 = swift_bridgeObjectRetain(v25);
    sub_10001B5CC(v26);
    swift_bridgeObjectRelease(v25);
    *(_QWORD *)&v45 = v24;
    sub_1000BFC74();
    v27 = v45;
    sub_10002AD5C((uint64_t)v4, &qword_1000FD130);
    v28 = *(_QWORD *)(v27 + 16);
    v29 = v8[2];
    if (__OFADD__(v29, v28))
      break;
    if (!swift_isUniquelyReferenced_nonNull_native(v8) || v29 + v28 > v8[3] >> 1)
    {
      sub_1000BED64();
      v8 = v30;
    }
    if (*(_QWORD *)(v27 + 16))
    {
      v31 = v8[2];
      if ((v8[3] >> 1) - v31 < v28)
        goto LABEL_42;
      v32 = (unint64_t)&v8[5 * v31 + 4];
      if (v27 + 32 < v32 + 40 * v28 && v32 < v27 + 32 + 40 * v28)
        goto LABEL_45;
      sub_100002F78(&qword_1000FB9C8);
      swift_arrayInitWithCopy(v32);
      if (v28)
      {
        v34 = v8[2];
        v35 = __OFADD__(v34, v28);
        v36 = v34 + v28;
        if (v35)
          goto LABEL_43;
        v8[2] = v36;
      }
    }
    else if (v28)
    {
      goto LABEL_41;
    }
    swift_bridgeObjectRelease(v27);
    if (v7)
      goto LABEL_2;
LABEL_3:
    v11 = v48 + 1;
    if (__OFADD__(v48, 1))
      goto LABEL_44;
    if (v11 >= v41)
      goto LABEL_39;
    v12 = *(_QWORD *)(v39 + 8 * v11);
    v13 = v48 + 1;
    if (!v12)
    {
      v13 = v48 + 2;
      if (v48 + 2 >= v41)
        goto LABEL_39;
      v12 = *(_QWORD *)(v39 + 8 * v13);
      if (!v12)
      {
        v13 = v48 + 3;
        if (v48 + 3 >= v41)
          goto LABEL_39;
        v12 = *(_QWORD *)(v39 + 8 * v13);
        if (!v12)
        {
          v13 = v48 + 4;
          if (v48 + 4 >= v41)
            goto LABEL_39;
          v12 = *(_QWORD *)(v39 + 8 * v13);
          if (!v12)
          {
            v13 = v48 + 5;
            if (v48 + 5 >= v41)
              goto LABEL_39;
            v12 = *(_QWORD *)(v39 + 8 * v13);
            if (!v12)
            {
              v14 = v48 + 6;
              while (v14 < v41)
              {
                v12 = *(_QWORD *)(v39 + 8 * v14++);
                if (v12)
                {
                  v13 = v14 - 1;
                  goto LABEL_18;
                }
              }
LABEL_39:
              swift_release(v43);
              return (uint64_t)v8;
            }
          }
        }
      }
    }
LABEL_18:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
    v48 = v13;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t InferenceProviderManager.allConnections.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];

  sub_10002B308(v0 + 112, (uint64_t)v4, 0);
  v1 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 112));
  v2 = sub_100045A54(v1);
  sub_10001D8B4();
  return v2;
}

uint64_t InferenceProviderManager.__allocating_init(connectionCollection:waitingForFirstUpdate:osEligibilityChecker:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return sub_100045F28(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100047A54);
}

uint64_t InferenceProviderManager.init(connectionCollection:waitingForFirstUpdate:osEligibilityChecker:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return sub_100045F28(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100047BD8);
}

uint64_t sub_100045F28(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a3[3];
  v11 = a3[4];
  v12 = sub_1000064E4((uint64_t)a3, v10);
  __chkstk_darwin(v12);
  sub_10001DEA0();
  (*(void (**)(uint64_t))(v13 + 16))(v5);
  v14 = a4(a1, a2, v5, v4, v10, v11);
  sub_10000650C(a3);
  return v14;
}

void sub_100045FD8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  sub_100002F78(&qword_1000FB230);
  sub_10002BCBC();
  __chkstk_darwin(v1);
  sub_10004465C();
  type metadata accessor for TaskPriority(0);
  sub_100049034();
  v2 = (_QWORD *)sub_10001FAC4((uint64_t)&unk_1000F3B10);
  sub_100049098(v2);
  v3 = sub_100002CAC(v0, (uint64_t)&unk_1000FD110, (uint64_t)v2);
  swift_release(v3);
  sub_100049034();
  v4 = (_QWORD *)sub_10001FAC4((uint64_t)&unk_1000F3B38);
  sub_100049098(v4);
  v5 = sub_100002CAC(v0, (uint64_t)&unk_1000FD120, (uint64_t)v4);
  swift_release(v5);
  sub_100049140();
}

uint64_t sub_100046080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4[6] = a4;
  v5 = type metadata accessor for _AppExtensionQuery.Results(0);
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v4[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for _AppExtensionQuery.Results.AsyncIterator(0);
  v4[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[11] = v8;
  v4[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for _AppExtensionQuery(0);
  v4[13] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[14] = v10;
  v4[15] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100046130, 0, 0);
}

uint64_t sub_100046130()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;

  if (qword_1000FB0F8 != -1)
    swift_once(&qword_1000FB0F8, sub_100044B80);
  v1 = sub_10001DD64();
  v0[16] = sub_100002FF8(v1, (uint64_t)qword_1000FCE40);
  v2 = sub_1000490A8();
  v3 = static os_log_type_t.default.getter();
  if (sub_10002B3F8(v2))
  {
    v4 = (uint8_t *)sub_10001D8D4(12);
    v5 = sub_10001D8D4(32);
    v19 = v5;
    *(_DWORD *)v4 = 136315138;
    sub_100044AF8();
    v6 = static InferenceProviderXPCSender.extensionPointIdentifier.getter();
    sub_1000102C0(v6, v7, &v19);
    v0[5] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6);
    sub_10001E034();
    sub_10001E18C((void *)&_mh_execute_header, v2, v3, "Started query for extension point: %s", v4);
    sub_10001DBB8(v5);
    sub_10001D790(v5);
    sub_10001D790((uint64_t)v4);
  }

  v10 = v0[8];
  v9 = v0[9];
  v11 = v0[7];
  sub_100044AF8();
  v12 = static InferenceProviderXPCSender.extensionPointIdentifier.getter();
  v13 = _AppExtensionQuery.init(extensionPointIdentifier:)(v12);
  v14 = _AppExtensionQuery.results.getter(v13);
  _AppExtensionQuery.Results.makeAsyncIterator()(v14);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  sub_100048EE0(&qword_1000FD128, 255, (uint64_t (*)(uint64_t))&type metadata accessor for _AppExtensionQuery.Results.AsyncIterator, (uint64_t)&protocol conformance descriptor for _AppExtensionQuery.Results.AsyncIterator);
  v0[17] = v15;
  v16 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[18] = v16;
  *v16 = v0;
  v16[1] = sub_100046324;
  v17 = sub_10004912C();
  return dispatch thunk of AsyncIteratorProtocol.next()(v17);
}

uint64_t sub_100046324()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = v2;
  sub_10001D788(*(_QWORD *)(v2 + 144), &v4);
  if (v0)
    *(_QWORD *)(v2 + 168) = v0;
  sub_100037A7C();
  return sub_10001D6DC();
}

uint64_t sub_10004637C()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 152) = *(_QWORD *)(v0 + 16);
  return sub_10001D948((uint64_t)sub_100046394, 0);
}

uint64_t sub_100046394()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (*(_QWORD *)(v2 + 152))
    return swift_task_switch(sub_100046400, *(_QWORD *)(v2 + 48), 0);
  sub_100049060();
  sub_100048FF8();
  swift_task_dealloc(v0);
  sub_10001D938();
  swift_task_dealloc(v1);
  return sub_10002B7C0(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_100046400()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  sub_1000468B0(*(_QWORD *)(v0 + 152));
  sub_10001EADC();
  v1 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  *(_QWORD *)(v0 + 160) = v1;
  *v1 = v0;
  v1[1] = sub_100046470;
  v2 = sub_10004912C();
  return dispatch thunk of AsyncIteratorProtocol.next()(v2);
}

uint64_t sub_100046470()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = v2;
  sub_10001D788(*(_QWORD *)(v2 + 160), &v4);
  if (v0)
    *(_QWORD *)(v2 + 168) = v0;
  sub_100037A7C();
  return sub_10001D6DC();
}

uint64_t sub_1000464C8()
{
  sub_1000468B0((uint64_t)_swiftEmptyArrayStorage);
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_100046500()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_errorRelease(*(_QWORD *)(v2 + 168));
  sub_100048FF8();
  swift_task_dealloc(v0);
  sub_10001D938();
  swift_task_dealloc(v1);
  return sub_10002B7C0(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_100046544()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 24) = *(_QWORD *)(v0 + 168);
  v1 = sub_100002F78(&qword_1000FB5F8);
  swift_willThrowTypedImpl(v0 + 24, v1, &protocol self-conformance witness table for Error);
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_100046598()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 168);
  sub_100049060();
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 168);
    v6 = (uint8_t *)sub_10001D8D4(12);
    v7 = (_QWORD *)sub_10001D8D4(8);
    *(_DWORD *)v6 = 138412290;
    swift_errorRetain(v5);
    v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v0 + 32) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40);
    *v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    sub_10001E18C((void *)&_mh_execute_header, v3, v4, "Error from _AppExtensionQuery: %@", v6);
    sub_100002F78(&qword_1000FB8E0);
    sub_10001DBB8((uint64_t)v7);
    sub_10001D790((uint64_t)v7);
    sub_10001D790((uint64_t)v6);
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 168);
    swift_errorRelease(v9);
    swift_errorRelease(v9);
  }

  return sub_10001D6DC();
}

uint64_t sub_1000466F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[2] = a4;
  v5 = type metadata accessor for ContinuousClock(0);
  v4[3] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[4] = v6;
  v4[5] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100046758, 0, 0);
}

uint64_t sub_100046758()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  static Clock<>.continuous.getter();
  v3 = (uint64_t (__cdecl *)())((char *)&dword_1000FF718 + dword_1000FF718);
  v1 = (_QWORD *)swift_task_alloc(unk_1000FF71C);
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_1000467D4;
  sub_100037A7C();
  return v3();
}

uint64_t sub_1000467D4()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;

  v2 = (_QWORD *)*v1;
  v7 = v2;
  sub_10001D788(v2[6], &v7);
  if (v0)
  {
    v4 = v2[4];
    v3 = v2[5];
    v5 = v2[3];
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v2[4] + 8))(v2[5], v2[3]);
  }
  return sub_10001D6DC();
}

uint64_t sub_100046868()
{
  uint64_t v0;

  return sub_10001D948((uint64_t)sub_100046878, *(_QWORD *)(v0 + 16));
}

uint64_t sub_100046878()
{
  uint64_t v0;

  sub_10004704C();
  sub_10001D938();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000468B0(uint64_t a1)
{
  NSObject *v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint32_t *p_ivar_base_size;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  os_log_type_t v62;
  uint8_t *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  NSObject *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  unint64_t v81;
  int v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD v93[4];
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;

  v91 = sub_100002F78(&qword_1000FB818);
  v3 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  sub_10001E168();
  v6 = v5 - v4;
  v78 = sub_1000449A0();
  v77 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  sub_10001E168();
  v76 = v8 - v7;
  v9 = type metadata accessor for _AppExtensionIdentity(0);
  v92 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_10001EB18();
  v85 = v10;
  sub_10001E148();
  __chkstk_darwin(v11);
  v75 = (uint64_t)&v72 - v12;
  sub_10001E148();
  __chkstk_darwin(v13);
  v15 = (char *)&v72 - v14;
  sub_100002F78(&qword_1000FD0F8);
  sub_10002BCBC();
  __chkstk_darwin(v16);
  sub_10001E168();
  v19 = v18 - v17;
  v20 = *(_QWORD *)(a1 + 16);
  p_ivar_base_size = &DaemonRequest.ivar_base_size;
  if (v20)
  {
    v81 = v3;
    v80 = v1;
    v74 = v1 + 14;
    v90 = a1 + ((*(unsigned __int8 *)(v92 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80));
    v79 = a1;
    sub_10001E3E0();
    v82 = 0;
    v22 = 0;
    v73 = v20 - 1;
    *(_QWORD *)&v23 = 136315138;
    v86 = v23;
    v83 = (char *)&type metadata for Any + 8;
    v87 = v19;
    v88 = v15;
    v84 = v9;
    v89 = v20;
LABEL_3:
    v3 = v22;
    while (1)
    {
      if (v3 >= v20)
      {
        __break(1u);
        goto LABEL_40;
      }
      sub_100049118(v19, v90 + *(_QWORD *)(v92 + 72) * v3);
      sub_100048FD4(v19, 0);
      if (sub_100005700(v19, 1, v9) == 1)
        break;
      v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v92 + 32))(v15, v19, v9);
      v25 = _AppExtensionIdentity.attributes.getter(v24);
      sub_100044AF8();
      v26 = static InferenceProviderXPCSender.inferenceProviderIdentifierKey.getter();
      if (*(_QWORD *)(v25 + 16) && (v28 = sub_100010994(v26, v27), (v29 & 1) != 0))
      {
        sub_10001C7F0(*(_QWORD *)(v25 + 56) + 32 * v28, (uint64_t)&v95);
      }
      else
      {
        v95 = 0u;
        v96 = 0u;
      }
      sub_100049010();
      sub_10001DA38();
      if (*((_QWORD *)&v96 + 1))
      {
        sub_100048DD4(&v95, &v97);
        sub_100049100();
        if (swift_dynamicCast(v93, &v95, (char *)&type metadata for Any + 8, &type metadata for String, 6))
        {
          v54 = v93[0];
          v55 = v93[1];
          v56 = v75;
          sub_100049118(v75, (uint64_t)v88);
          v57 = v76;
          v58 = v56;
          v15 = v88;
          AppExtensionIdentity.init(_:)(v58);
          v59 = (uint64_t)v74;
          sub_10002B308((uint64_t)v74, (uint64_t)&v95, 33);
          v60 = v54;
          v1 = v59;
          sub_1000455F0(v60, v55, v57);
          (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v57, v78);
          swift_endAccess(&v95);
          sub_100049010();
          sub_10000650C(&v97);
          sub_10004910C(*(uint64_t (**)(uint64_t, uint64_t))(v92 + 8));
          v22 = v3 + 1;
          v82 = 1;
          v20 = v89;
          if (v73 != v3)
            goto LABEL_3;
          sub_100048FD4(v19, 1);
          sub_1000490BC();
          sub_1000490D4();
          goto LABEL_34;
        }
        if (*((_QWORD *)p_ivar_base_size + 31) != -1)
          swift_once(&qword_1000FB0F8, sub_100044B80);
        v30 = sub_10001DD64();
        sub_100002FF8(v30, (uint64_t)qword_1000FCE40);
        v31 = sub_100049100();
        v1 = Logger.logObject.getter(v31);
        v32 = static os_log_type_t.error.getter();
        if (sub_10002B3F8(v1))
        {
          v33 = sub_10001D8D4(12);
          v34 = sub_10001D8D4(32);
          v94 = v34;
          *(_DWORD *)v33 = v86;
          sub_10001C7F0((uint64_t)&v95, (uint64_t)v93);
          v35 = String.init<A>(describing:)(v93, (char *)&type metadata for Any + 8);
          v37 = v36;
          sub_1000102C0(v35, v36, &v94);
          *(_QWORD *)(v33 + 4) = v38;
          swift_bridgeObjectRelease(v37);
          sub_10000650C(&v95);
          sub_10001E18C((void *)&_mh_execute_header, v1, v32, "Found inference provider extension, but with invalid InferenceProviderIdentifier value: %s", (uint8_t *)v33);
          v19 = v87;
          v15 = v88;
          v39 = v92;
          v9 = v84;
          swift_arrayDestroy(v34, 1);
          v40 = v34;
          p_ivar_base_size = (_DWORD *)(&DaemonRequest + 8);
          sub_10001D790(v40);
          sub_10001D790(v33);

          sub_10000650C(&v97);
          v41 = *(uint64_t (**)(uint64_t, uint64_t))(v39 + 8);
        }
        else
        {

          sub_10000650C(&v95);
          sub_10000650C(&v97);
          v41 = *(uint64_t (**)(uint64_t, uint64_t))(v92 + 8);
        }
        sub_10004910C(v41);
      }
      else
      {
        sub_10002AD5C((uint64_t)&v95, &qword_1000FD100);
        v42 = v85;
        if (*((_QWORD *)p_ivar_base_size + 31) != -1)
          swift_once(&qword_1000FB0F8, sub_100044B80);
        v43 = sub_10001DD64();
        v1 = sub_100002FF8(v43, (uint64_t)qword_1000FCE40);
        v44 = (uint64_t)v88;
        v45 = sub_100049118(v42, (uint64_t)v88);
        v46 = Logger.logObject.getter(v45);
        v47 = static os_log_type_t.error.getter();
        if (sub_10002B3F8(v46))
        {
          v48 = sub_10001D8D4(12);
          v49 = sub_10001D8D4(32);
          *(_QWORD *)&v97 = v49;
          *(_DWORD *)v48 = v86;
          v50 = _AppExtensionIdentity.bundleIdentifier.getter();
          v1 = v51;
          sub_1000102C0(v50, v51, (uint64_t *)&v97);
          *(_QWORD *)(v48 + 4) = v52;
          sub_10001E034();
          sub_100049018();
          sub_10001E18C((void *)&_mh_execute_header, v46, v47, "Found inference provider extension %s, but it lacks an InferenceProviderIdentifier key", (uint8_t *)v48);
          swift_arrayDestroy(v49, 1);
          v53 = v49;
          p_ivar_base_size = (_DWORD *)(&DaemonRequest + 8);
          sub_10001D790(v53);
          sub_10001D790(v48);

        }
        else
        {

          sub_100049018();
        }
        ((void (*)(uint64_t, uint64_t))v1)(v44, v9);
        v15 = (char *)v44;
        v19 = v87;
      }
      ++v3;
      v20 = v89;
      if (v89 == v3)
      {
        sub_100048FD4(v19, 1);
        break;
      }
    }
    sub_1000490BC();
    sub_1000490D4();
    if ((v82 & 1) != 0)
      goto LABEL_34;
  }
  else
  {
    sub_10001E3E0();
    sub_100048FD4(v19, 1);
    sub_100049010();
    v9 = (uint64_t)v1;
  }
  if (*((_QWORD *)p_ivar_base_size + 31) != -1)
LABEL_40:
    swift_once(&qword_1000FB0F8, sub_100044B80);
  v61 = sub_10001DD64();
  sub_100002FF8(v61, (uint64_t)qword_1000FCE40);
  sub_1000490A8();
  v62 = sub_10001E9D0();
  if (os_log_type_enabled(v1, v62))
  {
    v63 = (uint8_t *)sub_10001D8D4(2);
    *(_WORD *)v63 = 0;
    sub_100044580((void *)&_mh_execute_header, v1, v62, "Query found no inference provider extensions", v63);
    sub_10001D790((uint64_t)v63);
  }

LABEL_34:
  *(_BYTE *)(v9 + 120) = 0;
  v64 = (_QWORD *)(v9 + 128);
  sub_10002B308(v9 + 128, (uint64_t)&v97, 1);
  v65 = *(_QWORD *)(v9 + 128);
  v66 = *(_QWORD *)(v65 + 16);
  if (v66)
  {
    v67 = v65 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v68 = *(_QWORD *)(v3 + 72);
    v69 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    swift_bridgeObjectRetain(v65);
    v70 = v91;
    do
    {
      v71 = v69(v6, v67, v70);
      CheckedContinuation.resume(returning:)(v71, v70);
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v6, v70);
      v67 += v68;
      --v66;
    }
    while (v66);
    sub_10001DA38();
  }
  *v64 = _swiftEmptyArrayStorage;
  sub_10001DA38();
  sub_100006A68();
}

void sub_10004704C()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *oslog;

  if (*(_BYTE *)(v0 + 120) == 1)
  {
    if (qword_1000FB0F8 != -1)
      swift_once(&qword_1000FB0F8, sub_100044B80);
    v1 = sub_10001DD64();
    sub_100002FF8(v1, (uint64_t)qword_1000FCE40);
    oslog = sub_1000490A8();
    v2 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      v3 = (uint8_t *)sub_10001D8D4(2);
      *(_WORD *)v3 = 0;
      sub_100044580((void *)&_mh_execute_header, oslog, v2, "Inference provider extension query is stalling! Still waiting to discover XPC inference providers.", v3);
      sub_10001D790((uint64_t)v3);
    }

  }
}

uint64_t sub_10004711C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  return sub_10001D948((uint64_t)sub_100047134, v2);
}

uint64_t sub_100047134()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD **)(v0 + 56);
  v3 = v1[20];
  v2 = v1[21];
  sub_10001C830(v1 + 17, v3);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to OSEligibilityChecking.isGreymatterEligible.getter[1]);
  *(_QWORD *)(v0 + 64) = v4;
  *v4 = v0;
  v4[1] = sub_1000471A8;
  return OSEligibilityChecking.isGreymatterEligible.getter(v3, v2);
}

uint64_t sub_1000471A8(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  *(_BYTE *)(*(_QWORD *)v1 + 80) = a1;
  swift_task_dealloc(v2);
  return sub_10001D674();
}

uint64_t sub_1000471FC()
{
  NSObject *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  _QWORD *v24;

  if ((*(_BYTE *)(v1 + 80) & 1) == 0)
  {
    v2 = *(_QWORD **)(*(_QWORD *)(v1 + 56) + 176);
    v3 = swift_bridgeObjectRetain(v2);
    v4 = InferenceProviderDescriptor.id.getter(v3);
    v0 = v5;
    v6 = sub_1000089DC(v4, v5, v2);
    sub_10001D8B4();
    sub_10001E034();
    if ((v6 & 1) != 0)
    {
      v7 = type metadata accessor for ModelManagerError(0);
      sub_100048EE0((unint64_t *)&qword_1000FB600, 255, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError, (uint64_t)&protocol conformance descriptor for ModelManagerError);
      swift_allocError(v7, v8, 0, 0);
      v10 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v9, enum case for ModelManagerError.deviceNotEligible(_:), v7);
      swift_willThrow(v10, v11, v12, v13, v14, v15, v16, v17);
      v18 = *(uint64_t (**)(void))(v1 + 8);
      return v18();
    }
  }
  v19 = *(_QWORD *)(v1 + 56);
  if (*(_BYTE *)(v19 + 120) != 1)
  {
    sub_100048FE0(v19);
    sub_100049050();
    swift_endAccess(v1 + 16);
    v18 = *(uint64_t (**)(void))(v1 + 8);
    return v18();
  }
  if (qword_1000FB0F8 != -1)
    swift_once(&qword_1000FB0F8, sub_100044B80);
  v20 = sub_10001DD64();
  sub_100002FF8(v20, (uint64_t)qword_1000FCE40);
  sub_1000490A8();
  v21 = sub_10001E9D0();
  if (os_log_type_enabled(v0, v21))
  {
    v22 = (uint8_t *)sub_10001D8D4(2);
    *(_WORD *)v22 = 0;
    sub_100044580((void *)&_mh_execute_header, v0, v21, "Waiting for first extension query to finish", v22);
    sub_10001D790((uint64_t)v22);
  }

  sub_100048EE0(&qword_1000FD0E0, v23, (uint64_t (*)(uint64_t))type metadata accessor for InferenceProviderManager, (uint64_t)&protocol conformance descriptor for InferenceProviderManager);
  v24 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v1 + 72) = v24;
  *v24 = v1;
  v24[1] = sub_100047438;
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t sub_100047438()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  sub_10001D788(*(_QWORD *)(v2 + 72), &v2);
  return sub_10001D674();
}

uint64_t sub_100047484()
{
  uint64_t v0;

  sub_100048FE0(*(_QWORD *)(v0 + 56));
  sub_100049050();
  swift_endAccess(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000474D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  swift_beginAccess(a2 + 128, v8, 33, 0);
  sub_1000BE87C();
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 128) + 16);
  sub_1000BE914(v4);
  v5 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(v5 + 16) = v4 + 1;
  v6 = sub_100002F78(&qword_1000FB818);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v5+ ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v6 - 8) + 72) * v4, a1, v6);
  return swift_endAccess(v8);
}

_QWORD *InferenceProviderManager.deinit()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[14]);
  swift_bridgeObjectRelease(v0[16]);
  sub_10000650C(v0 + 17);
  swift_bridgeObjectRelease(v0[22]);
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t InferenceProviderManager.__deallocating_deinit()
{
  uint64_t v0;

  InferenceProviderManager.deinit();
  return swift_defaultActor_deallocate(v0);
}

void (*sub_1000475D0(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  _QWORD *v3;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;

  v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[8] = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  swift_bridgeObjectRetain(a3);
  v7[9] = sub_100047870(v7);
  v7[10] = sub_1000476AC(v7 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_100047660;
}

void sub_100047660(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 72);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(*(_QWORD *)a1 + 32, 0);
  sub_10001E034();
  v2(v1, 0);
  free(v1);
}

void (*sub_1000476AC(_QWORD *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  _BOOL8 v17;
  Swift::Int v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*result)(uint64_t **);

  v5 = v4;
  v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[1] = a3;
  v10[2] = v4;
  *v10 = a2;
  v11 = sub_100002F78(&qword_1000FD0E8);
  v12 = malloc(*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  v10[3] = v12;
  v13 = *v4;
  v14 = sub_100010994(a2, a3);
  *((_BYTE *)v10 + 40) = v15 & 1;
  v16 = *(_QWORD *)(v13 + 16);
  v17 = (v15 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_10;
  }
  v19 = v14;
  v20 = v15;
  sub_100002F78(&qword_1000FD0F0);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v18))
  {
    v21 = sub_100010994(a2, a3);
    if ((v20 & 1) == (v22 & 1))
    {
      v19 = v21;
      goto LABEL_5;
    }
LABEL_10:
    result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }
LABEL_5:
  v10[4] = v19;
  if ((v20 & 1) != 0)
  {
    v23 = *(_QWORD *)(*v5 + 56);
    v24 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0);
    sub_100048D70(v23 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * v19, (uint64_t)v12);
    v25 = 0;
  }
  else
  {
    v24 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0);
    v25 = 1;
  }
  sub_100005630((uint64_t)v12, v25, 1, v24);
  return sub_100047824;
}

void sub_100047824(uint64_t **a1)
{
  uint64_t *v1;
  void *v2;

  v1 = *a1;
  v2 = (void *)(*a1)[3];
  sub_10004789C((uint64_t)v2, *((_BYTE *)*a1 + 40), (_QWORD *)(*a1)[2], (*a1)[4], **a1, (*a1)[1]);
  sub_10002AD5C((uint64_t)v2, &qword_1000FD0E8);
  free(v2);
  sub_10004902C(v1);
}

uint64_t (*sub_100047870(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_100047890;
}

uint64_t sub_100047890(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

void sub_10004789C(uint64_t a1, char a2, _QWORD *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v23 = a5;
  v24 = a6;
  v10 = sub_100002F78(&qword_1000FD0E8);
  __chkstk_darwin(v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v23 - v18;
  sub_100048DB4(a1, (uint64_t)v12, &qword_1000FD0E8);
  if (sub_100005700((uint64_t)v12, 1, v13) == 1)
  {
    sub_10002AD5C((uint64_t)v12, &qword_1000FD0E8);
    if ((a2 & 1) != 0)
    {
      swift_arrayDestroy(*(_QWORD *)(*a3 + 48) + 16 * a4, 1);
      _NativeDictionary._delete(at:)(a4, *a3, &type metadata for String, v13);
    }
  }
  else
  {
    sub_100048D70((uint64_t)v12, (uint64_t)v19);
    v20 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      sub_100048D70((uint64_t)v19, v20[7] + *(_QWORD *)(v14 + 72) * a4);
    }
    else
    {
      sub_100048D70((uint64_t)v19, (uint64_t)v17);
      v21 = a4;
      v22 = v24;
      sub_1000905FC(v21, v23, v24, (uint64_t)v17, v20);
      swift_bridgeObjectRetain(v22);
    }
  }
}

uint64_t sub_100047A54(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v11 = *(_QWORD *)(a5 - 8);
  __chkstk_darwin(a1);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for InferenceProviderManager();
  v15 = swift_allocObject(v14, 184, 15);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, a5);
  v16 = sub_100047BD8(a1, a2, (uint64_t)v13, v15, a5, a6);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a3, a5);
  return v16;
}

uint64_t sub_100047B24(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  _QWORD v9[5];

  v9[3] = type metadata accessor for OSEligibilityChecker(0);
  v9[4] = &protocol witness table for OSEligibilityChecker;
  v9[0] = a3;
  swift_defaultActor_initialize(a4);
  *(_QWORD *)(a4 + 128) = _swiftEmptyArrayStorage;
  *(_QWORD *)(a4 + 176) = &off_1000F2608;
  *(_QWORD *)(a4 + 112) = a1;
  *(_BYTE *)(a4 + 120) = a2;
  sub_100006694((uint64_t)v9, a4 + 136);
  sub_10001C830((_QWORD *)(a4 + 136), *(_QWORD *)(a4 + 160));
  OSEligibilityChecking.prewarmGreymatter()();
  sub_10000650C(v9);
  return a4;
}

uint64_t sub_100047BD8(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v11;
  _QWORD v13[5];

  v13[3] = a5;
  v13[4] = a6;
  v11 = sub_100048F1C(v13);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(v11, a3, a5);
  swift_defaultActor_initialize(a4);
  *(_QWORD *)(a4 + 128) = _swiftEmptyArrayStorage;
  *(_QWORD *)(a4 + 176) = &off_1000F26E0;
  *(_QWORD *)(a4 + 112) = a1;
  *(_BYTE *)(a4 + 120) = a2;
  sub_100006694((uint64_t)v13, a4 + 136);
  sub_10001C830((_QWORD *)(a4 + 136), *(_QWORD *)(a4 + 160));
  OSEligibilityChecking.prewarmGreymatter()();
  sub_10000650C(v13);
  return a4;
}

uint64_t type metadata accessor for InferenceProviderManager()
{
  return objc_opt_self(_TtC13modelmanagerd24InferenceProviderManager);
}

ValueMetadata *type metadata accessor for InferenceProviderManager.ConnectionCollection()
{
  return &type metadata for InferenceProviderManager.ConnectionCollection;
}

uint64_t *sub_100047CD4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
    return a1;
  }
  v7 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v7);
  if (EnumCaseMultiPayload == 1)
  {
    v14 = a2[1];
    *a1 = *a2;
    a1[1] = v14;
    swift_bridgeObjectRetain(v14);
    v15 = *(int *)(sub_100002F78(&qword_1000FCF98) + 48);
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for AppExtensionIdentity(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    v10 = a1;
    v11 = v7;
    v12 = 1;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
      goto LABEL_9;
    }
    v9 = type metadata accessor for BuiltInInferenceProvider(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    v10 = a1;
    v11 = v7;
    v12 = 0;
  }
  swift_storeEnumTagMultiPayload(v10, v11, v12);
LABEL_9:
  v19 = *(int *)(a3 + 20);
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *(uint64_t *)((char *)a2 + v19 + 24);
  if (v22)
  {
    v23 = *((_QWORD *)v21 + 4);
    *((_QWORD *)v20 + 3) = v22;
    *((_QWORD *)v20 + 4) = v23;
    (**(void (***)(void))(v22 - 8))();
  }
  else
  {
    v24 = *((_OWORD *)v21 + 1);
    *(_OWORD *)v20 = *(_OWORD *)v21;
    *((_OWORD *)v20 + 1) = v24;
    *((_QWORD *)v20 + 4) = *((_QWORD *)v21 + 4);
  }
  v25 = *(int *)(a3 + 24);
  v26 = *(uint64_t *)((char *)a2 + v25);
  *(uint64_t *)((char *)a1 + v25) = v26;
  swift_bridgeObjectRetain(v26);
  return a1;
}

uint64_t type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(uint64_t a1)
{
  return sub_100042760(a1, qword_1000FD0A8, (uint64_t)&nominal type descriptor for InferenceProviderManager.ConnectionCollection.Group.Prototype);
}

uint64_t sub_100047E58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, v4);
  if (EnumCaseMultiPayload == 1)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
    v7 = a1 + *(int *)(sub_100002F78(&qword_1000FCF98) + 48);
    v8 = type metadata accessor for AppExtensionIdentity(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  }
  else if (!EnumCaseMultiPayload)
  {
    v6 = type metadata accessor for BuiltInInferenceProvider(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  }
  v9 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  if (v9[3])
    sub_10000650C(v9);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24)));
}

_QWORD *sub_100047F10(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v6 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
  if (EnumCaseMultiPayload == 1)
  {
    v12 = a2[1];
    *a1 = *a2;
    a1[1] = v12;
    swift_bridgeObjectRetain(v12);
    v13 = *(int *)(sub_100002F78(&qword_1000FCF98) + 48);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for AppExtensionIdentity(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    v9 = a1;
    v10 = v6;
    v11 = 1;
    goto LABEL_5;
  }
  if (!EnumCaseMultiPayload)
  {
    v8 = type metadata accessor for BuiltInInferenceProvider(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    v9 = a1;
    v10 = v6;
    v11 = 0;
LABEL_5:
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    goto LABEL_7;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
LABEL_7:
  v17 = *(int *)(a3 + 20);
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = *(_QWORD *)((char *)a2 + v17 + 24);
  if (v20)
  {
    v21 = *((_QWORD *)v19 + 4);
    *((_QWORD *)v18 + 3) = v20;
    *((_QWORD *)v18 + 4) = v21;
    (**(void (***)(void))(v20 - 8))();
  }
  else
  {
    v22 = *((_OWORD *)v19 + 1);
    *(_OWORD *)v18 = *(_OWORD *)v19;
    *((_OWORD *)v18 + 1) = v22;
    *((_QWORD *)v18 + 4) = *((_QWORD *)v19 + 4);
  }
  v23 = *(int *)(a3 + 24);
  v24 = *(_QWORD *)((char *)a2 + v23);
  *(_QWORD *)((char *)a1 + v23) = v24;
  swift_bridgeObjectRetain(v24);
  return a1;
}

_QWORD *sub_100048054(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 != a2)
  {
    sub_10002ACC4((uint64_t)a1, type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype);
    v6 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      v12 = a2[1];
      a1[1] = v12;
      swift_bridgeObjectRetain(v12);
      v13 = *(int *)(sub_100002F78(&qword_1000FCF98) + 48);
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      v16 = type metadata accessor for AppExtensionIdentity(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
      v9 = a1;
      v10 = v6;
      v11 = 1;
      goto LABEL_6;
    }
    if (!EnumCaseMultiPayload)
    {
      v8 = type metadata accessor for BuiltInInferenceProvider(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v6;
      v11 = 0;
LABEL_6:
      swift_storeEnumTagMultiPayload(v9, v10, v11);
      goto LABEL_8;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
LABEL_8:
  v17 = *(int *)(a3 + 20);
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = *(_QWORD *)((char *)a2 + v17 + 24);
  if (!*(_QWORD *)((char *)a1 + v17 + 24))
  {
    if (v20)
    {
      *((_QWORD *)v18 + 3) = v20;
      *((_QWORD *)v18 + 4) = *((_QWORD *)v19 + 4);
      (**(void (***)(char *, char *))(v20 - 8))(v18, v19);
      goto LABEL_15;
    }
LABEL_14:
    v21 = *(_OWORD *)v19;
    v22 = *((_OWORD *)v19 + 1);
    *((_QWORD *)v18 + 4) = *((_QWORD *)v19 + 4);
    *(_OWORD *)v18 = v21;
    *((_OWORD *)v18 + 1) = v22;
    goto LABEL_15;
  }
  if (!v20)
  {
    sub_10000650C(v18);
    goto LABEL_14;
  }
  sub_1000481F4(v18, v19);
LABEL_15:
  v23 = *(int *)(a3 + 24);
  v24 = *(_QWORD *)((char *)a2 + v23);
  v25 = *(_QWORD *)((char *)a1 + v23);
  *(_QWORD *)((char *)a1 + v23) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  return a1;
}

_QWORD *sub_1000481F4(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

_OWORD *sub_10004835C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;

  v6 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
  if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    v12 = *(int *)(sub_100002F78(&qword_1000FCF98) + 48);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for AppExtensionIdentity(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
    v9 = a1;
    v10 = v6;
    v11 = 1;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      goto LABEL_7;
    }
    v8 = type metadata accessor for BuiltInInferenceProvider(0);
    (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    v9 = a1;
    v10 = v6;
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v10, v11);
LABEL_7:
  v16 = *(int *)(a3 + 20);
  v17 = *(int *)(a3 + 24);
  v18 = (char *)a1 + v16;
  v19 = (char *)a2 + v16;
  v20 = *((_OWORD *)v19 + 1);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v20;
  *((_QWORD *)v18 + 4) = *((_QWORD *)v19 + 4);
  *(_QWORD *)((char *)a1 + v17) = *(_QWORD *)((char *)a2 + v17);
  return a1;
}

_OWORD *sub_100048474(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 != a2)
  {
    sub_10002ACC4((uint64_t)a1, type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype);
    v6 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      v12 = *(int *)(sub_100002F78(&qword_1000FCF98) + 48);
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = type metadata accessor for AppExtensionIdentity(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
      v9 = a1;
      v10 = v6;
      v11 = 1;
      goto LABEL_6;
    }
    if (!EnumCaseMultiPayload)
    {
      v8 = type metadata accessor for BuiltInInferenceProvider(0);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      v9 = a1;
      v10 = v6;
      v11 = 0;
LABEL_6:
      swift_storeEnumTagMultiPayload(v9, v10, v11);
      goto LABEL_8;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
LABEL_8:
  v16 = *(int *)(a3 + 20);
  v17 = (char *)a1 + v16;
  if (*(_QWORD *)((char *)a1 + v16 + 24))
    sub_10000650C((_OWORD *)((char *)a1 + v16));
  v18 = *(_OWORD *)((char *)a2 + v16 + 16);
  *(_OWORD *)v17 = *(_OWORD *)((char *)a2 + v16);
  *((_OWORD *)v17 + 1) = v18;
  *((_QWORD *)v17 + 4) = *(_QWORD *)((char *)a2 + v16 + 32);
  v19 = *(int *)(a3 + 24);
  v20 = *(_QWORD *)((char *)a1 + v19);
  *(_QWORD *)((char *)a1 + v19) = *(_QWORD *)((char *)a2 + v19);
  swift_bridgeObjectRelease(v20);
  return a1;
}

uint64_t sub_1000485C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000485CC);
}

void sub_1000485CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(0);
  if (*(_DWORD *)(*(_QWORD *)(v4 - 8) + 84) == (_DWORD)a2)
    sub_100005700(a1, a2, v4);
  else
    sub_100049140();
}

uint64_t sub_10004863C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100048648);
}

void sub_100048648(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;

  v8 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(0);
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    sub_100005630(a1, a2, a2, v8);
  }
  else
  {
    *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
    sub_100049140();
  }
}

uint64_t type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(uint64_t a1)
{
  return sub_100042760(a1, qword_1000FCFF8, (uint64_t)&nominal type descriptor for InferenceProviderManager.ConnectionCollection.Group);
}

uint64_t sub_1000486C8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "(";
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_100048748(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      v14 = a2[1];
      *a1 = *a2;
      a1[1] = v14;
      swift_bridgeObjectRetain(v14);
      v15 = *(int *)(sub_100002F78(&qword_1000FCF98) + 48);
      v16 = (char *)a1 + v15;
      v17 = (char *)a2 + v15;
      v18 = type metadata accessor for AppExtensionIdentity(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
      v10 = a1;
      v11 = a3;
      v12 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        return a1;
      }
      v9 = type metadata accessor for BuiltInInferenceProvider(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v10 = a1;
      v11 = a3;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
  }
  return a1;
}

uint64_t sub_100048854(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = a1;
  result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 1)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 8));
    v2 += *(int *)(sub_100002F78(&qword_1000FCF98) + 48);
    v4 = type metadata accessor for AppExtensionIdentity(0);
  }
  else
  {
    if ((_DWORD)result)
      return result;
    v4 = type metadata accessor for BuiltInInferenceProvider(0);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2, v4);
}

_QWORD *sub_1000488CC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    v11 = a2[1];
    *a1 = *a2;
    a1[1] = v11;
    swift_bridgeObjectRetain(v11);
    v12 = *(int *)(sub_100002F78(&qword_1000FCF98) + 48);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for AppExtensionIdentity(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v8 = a1;
    v9 = a3;
    v10 = 1;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
    }
    v7 = type metadata accessor for BuiltInInferenceProvider(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = a3;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  return a1;
}

_QWORD *sub_1000489B0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  if (a1 != a2)
  {
    sub_10002ACC4((uint64_t)a1, type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      v11 = a2[1];
      a1[1] = v11;
      swift_bridgeObjectRetain(v11);
      v12 = *(int *)(sub_100002F78(&qword_1000FCF98) + 48);
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = type metadata accessor for AppExtensionIdentity(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
      v8 = a1;
      v9 = a3;
      v10 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
      }
      v7 = type metadata accessor for BuiltInInferenceProvider(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = a3;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

_OWORD *sub_100048AB4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    v11 = *(int *)(sub_100002F78(&qword_1000FCF98) + 48);
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for AppExtensionIdentity(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
    v8 = a1;
    v9 = a3;
    v10 = 1;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
    }
    v7 = type metadata accessor for BuiltInInferenceProvider(0);
    (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    v8 = a1;
    v9 = a3;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  return a1;
}

_OWORD *sub_100048B94(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  if (a1 != a2)
  {
    sub_10002ACC4((uint64_t)a1, type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      v11 = *(int *)(sub_100002F78(&qword_1000FCF98) + 48);
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      v14 = type metadata accessor for AppExtensionIdentity(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
      v8 = a1;
      v9 = a3;
      v10 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
      }
      v7 = type metadata accessor for BuiltInInferenceProvider(0);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = a1;
      v9 = a3;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

uint64_t sub_100048C8C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _BYTE v5[32];
  _QWORD v6[2];

  result = type metadata accessor for BuiltInInferenceProvider(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for AppExtensionIdentity(319);
    if (v4 <= 0x3F)
    {
      swift_getTupleTypeLayout2(v5, &unk_1000CC038, *(_QWORD *)(result - 8) + 64);
      v6[1] = v5;
      swift_initEnumMetadataMultiPayload(a1, 256, 2, v6);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100048D20(uint64_t a1)
{
  uint64_t v1;

  return sub_1000474D4(a1, v1);
}

uint64_t sub_100048D28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100002F78(&qword_1000FBEB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100048D70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100048DB4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_100049070(a1, a2, a3);
  sub_10002B9CC(v3);
  sub_100006C14();
}

_OWORD *sub_100048DD4(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100048DE8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (_QWORD *)swift_task_alloc(dword_1000FD10C);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100006AD8(v1);
  return sub_100046080(v2, v3, v4, v5);
}

uint64_t sub_100048E44()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (_QWORD *)swift_task_alloc(dword_1000FD11C);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100006AD8(v1);
  return sub_1000466F8(v2, v3, v4, v5);
}

uint64_t sub_100048E9C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v3 = *v0;
  v1 = *v0;
  sub_10001D788(*(_QWORD *)(v3 + 16), &v3);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_100048EE0(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v6;

  if (!*a1)
  {
    v6 = a3(a2);
    atomic_store(swift_getWitnessTable(a4, v6), a1);
  }
  sub_100006C14();
}

_QWORD *sub_100048F1C(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

void sub_100048F58(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = sub_100049070(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v3, v4, v5);
  sub_100006C14();
}

uint64_t sub_100048F8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100048FD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100005630(a1, a2, 1, v2);
}

uint64_t sub_100048FE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_beginAccess(a1 + 112, v1, 33, 0);
}

uint64_t sub_100048FF8()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[14] + 8))(v0[15], v0[13]);
}

uint64_t sub_100049010()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100049018()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 208) + 8))(v0, v1);
}

void sub_10004902C(void *a1)
{
  free(a1);
}

uint64_t sub_100049034()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100005630(v0, 1, 1, v1);
}

uint64_t sub_100049048()
{
  return type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0);
}

uint64_t sub_100049050()
{
  uint64_t v0;

  return sub_10004590C(v0);
}

uint64_t sub_100049060()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[11] + 8))(v0[12], v0[10]);
}

uint64_t sub_100049070(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_100002F78(a3);
}

uint64_t sub_100049080()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100049098(_QWORD *a1)
{
  uint64_t v1;

  a1[2] = 0;
  a1[3] = 0;
  a1[4] = v1;
  return swift_retain(v1);
}

uint64_t sub_1000490A8()
{
  return Logger.logObject.getter();
}

uint64_t sub_1000490B0()
{
  uint64_t v0;

  return swift_bridgeObjectRetain_n(v0, 2);
}

uint64_t sub_1000490BC()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 - 328));
}

uint64_t sub_1000490C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t (*v9)(uint64_t *, _QWORD);

  return v9(&a9, 0);
}

double sub_1000490E8@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_100044C70(v1, a1);
}

uint64_t sub_1000490F4()
{
  uint64_t v0;

  return sub_10000667C((__int128 *)(v0 - 144), v0 - 104);
}

uint64_t sub_100049100()
{
  uint64_t v0;

  return sub_10001C7F0(v0 - 120, v0 - 160);
}

uint64_t sub_10004910C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_100049118(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_100049120()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10004912C()
{
  uint64_t v0;

  return v0;
}

void sub_10004914C(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  Swift::String v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t *v84;
  uint64_t v85;
  unint64_t v86;
  Swift::String v87;
  Swift::String v88;

  v4 = v3;
  v83 = a2;
  v84 = a3;
  sub_100002F78(&qword_1000FBE88);
  sub_10001DD00();
  __chkstk_darwin(v6);
  sub_10002BD70();
  v77 = v7;
  v78 = type metadata accessor for InferenceError.Context(0);
  v76 = *(_QWORD *)(v78 - 8);
  sub_10001DD00();
  __chkstk_darwin(v8);
  sub_10002BD70();
  v74 = v9;
  v10 = type metadata accessor for InferenceError(0);
  v80 = *(_QWORD *)(v10 - 8);
  v81 = v10;
  sub_10001DD00();
  __chkstk_darwin(v11);
  sub_10001E684();
  v75 = v12 - v13;
  __chkstk_darwin(v14);
  v79 = (char *)&v73 - v15;
  sub_100002F78(&qword_1000FBE98);
  sub_10001DD00();
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin(v17);
  sub_10001E684();
  v23 = (char *)(v21 - v22);
  __chkstk_darwin(v24);
  v26 = (char *)&v73 - v25;
  v27 = type metadata accessor for ModelManagerError(0);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  sub_10001E684();
  v31 = (char *)(v29 - v30);
  __chkstk_darwin(v32);
  v34 = (char *)&v73 - v33;
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v82 = v4;
  v36 = v4;
  v38 = v37;
  v35(v26, v36, a1);
  if ((swift_dynamicCast(v19, v26, a1, v38, 6) & 1) == 0)
  {
    sub_10002BDD8((uint64_t)v19, 1);
    sub_1000399D8((uint64_t)v19, &qword_1000FBE98);
LABEL_7:
    v35(v23, v82, a1);
    v47 = (uint64_t)v83;
    v48 = _getErrorEmbeddedNSError<A>(_:)(v23, a1, v83);
    v49 = v84;
    if (v48)
    {
      v50 = v48;
      (*(void (**)(char *, uint64_t))(v20 + 8))(v23, a1);
    }
    else
    {
      v50 = sub_10002B560(a1, v47);
      (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v51, v23, a1);
    }
    v52 = (void *)_convertErrorToNSError(_:)(v50);
    swift_errorRelease(v50);
    sub_100049708(v52, v49);

    return;
  }
  sub_10002BDD8((uint64_t)v19, 0);
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v34, v19, v38);
  (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v31, v34, v38);
  if ((*(unsigned int (**)(char *, uint64_t))(v28 + 88))(v31, v38) != enum case for ModelManagerError.inferenceError(_:))
  {
    v46 = *(void (**)(char *, uint64_t))(v28 + 8);
    v46(v34, v38);
    v46(v31, v38);
    goto LABEL_7;
  }
  v83 = v34;
  (*(void (**)(char *, uint64_t))(v28 + 96))(v31, v38);
  v40 = v79;
  v39 = v80;
  v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v80 + 32);
  v42 = v81;
  v43 = v41(v79, (uint64_t)v31, v81);
  v44 = v77;
  InferenceError.context.getter(v43);
  v45 = v78;
  if (sub_100005700(v44, 1, v78) == 1)
  {
    sub_1000399D8(v44, &qword_1000FBE88);
  }
  else
  {
    v53 = v74;
    v54 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v76 + 32))(v74, v44, v45);
    v55 = InferenceError.Context.domain.getter(v54);
    v57 = v56;
    swift_bridgeObjectRelease(v56);
    v58 = HIBYTE(v57) & 0xF;
    if ((v57 & 0x2000000000000000) == 0)
      v58 = v55 & 0xFFFFFFFFFFFFLL;
    if (v58)
    {
      v85 = 0;
      v86 = 0xE000000000000000;
      _StringGuts.grow(_:)(20);
      v59 = swift_bridgeObjectRelease(v86);
      v85 = 0x636E657265666E49;
      v86 = 0xEF2E726F72724565;
      v87._countAndFlagsBits = InferenceError.caseName.getter(v59);
      sub_10004985C(v87);
      swift_bridgeObjectRelease(v55);
      v60._countAndFlagsBits = 46;
      v60._object = (void *)0xE100000000000000;
      String.append(_:)(v60);
      v88._countAndFlagsBits = InferenceError.Context.domain.getter(v61);
      sub_10004985C(v88);
      v62 = swift_bridgeObjectRelease(v55);
      v63 = v45;
      v64 = v85;
      v65 = v86;
      v66 = InferenceError.Context.code.getter(v62);
      sub_100049654(v64, v65, v66, v84);
      swift_bridgeObjectRelease(v65);
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v53, v63);
      sub_10004984C();
      sub_10004983C();
      return;
    }
    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v53, v45);
  }
  v67 = v84;
  v68 = v75;
  (*(void (**)(uint64_t, char *, uint64_t))(v39 + 16))(v75, v40, v42);
  v69 = sub_100049788();
  v70 = sub_10002B560(v42, v69);
  v41(v71, v68, v42);
  v72 = (void *)_convertErrorToNSError(_:)(v70);
  sub_100049708(v72, v67);

  sub_10004984C();
  sub_10004983C();
  swift_errorRelease(v70);
}

uint64_t sub_100049654@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[6];

  v8 = type metadata accessor for GenerativeFunctionsInstrumentationError.GenericError(0);
  v9 = swift_allocBox();
  v13[2] = a1;
  v13[3] = a2;
  v13[4] = a3;
  static Buildable.with(_:)(sub_100049820, v13, v8, &protocol witness table for GenerativeFunctionsInstrumentationError.GenericError);
  *a4 = v9;
  v10 = enum case for GenerativeFunctionsInstrumentationError.genericError(_:);
  v11 = type metadata accessor for GenerativeFunctionsInstrumentationError(0);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(a4, v10, v11);
}

uint64_t sub_100049708@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = objc_msgSend(a1, "domain");
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  sub_100049654(v5, v7, (uint64_t)objc_msgSend(a1, "code"), a2);
  return swift_bridgeObjectRelease(v7);
}

unint64_t sub_100049788()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000FC620;
  if (!qword_1000FC620)
  {
    v1 = type metadata accessor for InferenceError(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for InferenceError, v1);
    atomic_store(result, (unint64_t *)&qword_1000FC620);
  }
  return result;
}

uint64_t sub_1000497C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_bridgeObjectRetain(a3);
  GenerativeFunctionsInstrumentationError.GenericError.domain.setter(a2, a3);
  return GenerativeFunctionsInstrumentationError.GenericError.code.setter(a4, 0);
}

uint64_t sub_100049820(uint64_t a1)
{
  uint64_t *v1;

  return sub_1000497C8(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10004983C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 8))(*(_QWORD *)(v2 - 112), v0);
}

uint64_t sub_10004984C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

void sub_10004985C(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t AssetInferenceProvider.id.getter()
{
  sub_10001E338();
  return sub_10001EBDC();
}

uint64_t AssetInferenceProvider.instanceID.getter()
{
  sub_10001E338();
  return sub_10001EBDC();
}

void AssetInferenceProvider.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v1;
  v4 = *(_QWORD *)v2;
  sub_10001E3E0();
  sub_10004A8F8(a1, v4);
  sub_100049010();
  v5 = *(_QWORD *)(v2 + 24);
  if (v5)
  {
    v6 = *(_QWORD *)(v2 + 16);
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v5);
    String.hash(into:)(a1, v6, v5);
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(*(_BYTE *)(v2 + 32) & 1);
  sub_100049140();
}

uint64_t static AssetInferenceProvider.__derived_struct_equals(_:_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;

  v3 = sub_10004A8C8(a1);
  v7 = v7 && v4 == v6;
  if (!v7)
  {
    v8 = sub_10001DB04(v3, v4, v5, v6);
    v9 = 0;
    if ((v8 & 1) == 0)
      return v9 & 1;
  }
  v10 = *(_QWORD *)(v2 + 24);
  v11 = *(_QWORD *)(v1 + 24);
  if (!v10)
  {
    if (!v11)
    {
LABEL_16:
      v9 = ((*(_BYTE *)(v2 + 32) & 1) == 0) ^ *(_BYTE *)(v1 + 32);
      return v9 & 1;
    }
LABEL_15:
    v9 = 0;
    return v9 & 1;
  }
  if (!v11)
    goto LABEL_15;
  v12 = *(_QWORD *)(v2 + 16);
  v13 = *(_QWORD *)(v1 + 16);
  if (v12 == v13 && v10 == v11)
    goto LABEL_16;
  v15 = sub_10001DB04(v12, v10, v13, v11);
  v9 = 0;
  if ((v15 & 1) != 0)
    goto LABEL_16;
  return v9 & 1;
}

void AssetInferenceProvider.hashValue.getter(uint64_t a1)
{
  _BYTE v1[72];

  sub_10004A934(a1);
  AssetInferenceProvider.hash(into:)((uint64_t)v1);
  sub_10001DBF4();
  sub_1000449BC();
}

void sub_1000499E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = v1;
  sub_10001E3E0();
  v4 = sub_10001EBDC();
  sub_10004A8F8(v4, v5);
  sub_100049010();
  v6 = *(_QWORD *)(v1 + 16);
  sub_10001E338();
  v7 = sub_10001EBDC();
  sub_10004A494(v7, v8);
  swift_bridgeObjectRelease(v6);
  v9 = *(_QWORD *)(v2 + 24);
  sub_10001E338();
  v10 = sub_10001EBDC();
  sub_10004A3E4(v10, v11);
  swift_bridgeObjectRelease(v9);
  v12 = (int *)type metadata accessor for ModelCatalogAsset(0);
  v13 = sub_10004A92C();
  v14 = sub_100039A14(&qword_1000FB628, (uint64_t (*)(uint64_t))&type metadata accessor for AssetCost, (uint64_t)&protocol conformance descriptor for AssetCost);
  dispatch thunk of Hashable.hash(into:)(a1, v13, v14);
  Hasher._combine(_:)(*(_BYTE *)(v2 + v12[8]));
  Hasher._combine(_:)(*(_BYTE *)(v2 + v12[9]));
  Hasher._combine(_:)(*(_BYTE *)(v2 + v12[10]));
  sub_10001E7B4();
}

void sub_100049AC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  char v9;
  uint64_t v10;

  v3 = sub_10004A8C8(a1);
  v7 = v7 && v4 == v6;
  if (v7 || (sub_10001DB04(v3, v4, v5, v6) & 1) != 0)
  {
    sub_1000BDFDC(*(_QWORD **)(v2 + 16), *(_QWORD **)(v1 + 16));
    if ((v8 & 1) != 0)
    {
      sub_1000BE098();
      if ((v9 & 1) != 0)
      {
        v10 = type metadata accessor for ModelCatalogAsset(0);
        static AssetCost.== infix(_:_:)(v2 + *(int *)(v10 + 28), v1 + *(int *)(v10 + 28));
      }
    }
  }
  sub_100049140();
}

void sub_100049B80(uint64_t a1)
{
  _BYTE v1[72];

  sub_10004A934(a1);
  sub_1000499E4((uint64_t)v1);
  sub_10001DBF4();
  sub_1000449BC();
}

void sub_100049BB0(uint64_t a1)
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, a1);
  AssetInferenceProvider.hash(into:)((uint64_t)v1);
  sub_10001DBF4();
  sub_1000449BC();
}

unint64_t sub_100049BE0()
{
  unint64_t result;

  result = qword_1000FD138;
  if (!qword_1000FD138)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AssetInferenceProvider, &type metadata for AssetInferenceProvider);
    atomic_store(result, (unint64_t *)&qword_1000FD138);
  }
  return result;
}

void *sub_100049C1C()
{
  return &protocol witness table for String;
}

uint64_t sub_100049C28@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t destroy for AssetInferenceProvider(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for AssetInferenceProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for AssetInferenceProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for AssetInferenceProvider(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AssetInferenceProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetInferenceProvider(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 33))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AssetInferenceProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetInferenceProvider()
{
  return &type metadata for AssetInferenceProvider;
}

_QWORD *sub_100049E0C(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[2];
    v9 = a2[3];
    a1[2] = v8;
    a1[3] = v9;
    v10 = a3[7];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for AssetCost(0);
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    v14(v11, v12, v13);
    v15 = a3[9];
    *((_BYTE *)v4 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    *((_BYTE *)v4 + v15) = *((_BYTE *)a2 + v15);
    *((_BYTE *)v4 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  }
  return v4;
}

uint64_t sub_100049EF8(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[3]);
  v4 = (char *)a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for AssetCost(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_100049F50(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[2];
  v8 = a2[3];
  a1[2] = v7;
  a1[3] = v8;
  v9 = a3[7];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for AssetCost(0);
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  v13(v10, v11, v12);
  v14 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  return a1;
}

_QWORD *sub_10004A010(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[7];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for AssetCost(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  return a1;
}

_OWORD *sub_10004A0E8(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[7];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for AssetCost(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  return a1;
}

_QWORD *sub_10004A174(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v8);
  v9 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRelease(v9);
  v10 = a3[7];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for AssetCost(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  return a1;
}

uint64_t sub_10004A228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004A234);
}

void sub_10004A234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_10004A900();
    sub_100049140();
  }
  else
  {
    v6 = sub_10004A92C();
    sub_10004A8BC(a1 + *(int *)(a3 + 28), a2, v6);
  }
}

uint64_t sub_10004A284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004A290);
}

void sub_10004A290()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  sub_10004A918();
  if (v3)
  {
    *(_QWORD *)(v1 + 8) = (v0 - 1);
    sub_100049140();
  }
  else
  {
    v4 = v2;
    v5 = sub_10004A92C();
    sub_10001DBAC(v1 + *(int *)(v4 + 28), v0, v0, v5);
  }
}

uint64_t type metadata accessor for ModelCatalogAsset(uint64_t a1)
{
  return sub_100042760(a1, qword_1000FD198, (uint64_t)&nominal type descriptor for ModelCatalogAsset);
}

uint64_t sub_10004A2F0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_1000CC178;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for AssetCost(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = &unk_1000CC190;
    v4[5] = &unk_1000CC190;
    v4[6] = &unk_1000CC190;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_10004A388(uint64_t a1)
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, a1);
  sub_1000499E4((uint64_t)v1);
  sub_10001DBF4();
  sub_1000449BC();
}

uint64_t sub_10004A3B8()
{
  return sub_100039A14(&qword_1000FD1E8, type metadata accessor for ModelCatalogAsset, (uint64_t)&unk_1000CC1A8);
}

void sub_10004A3E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt8 v10;

  sub_10004A8E4(a1, a2);
  if (v2)
  {
    v5 = (Swift::UInt8 *)(v4 + 64);
    do
    {
      v7 = *((_QWORD *)v5 - 4);
      v6 = *((_QWORD *)v5 - 3);
      v9 = *((_QWORD *)v5 - 2);
      v8 = *((_QWORD *)v5 - 1);
      v10 = *v5;
      sub_10001E3E0();
      swift_bridgeObjectRetain(v6);
      String.hash(into:)(v3, v7, v6);
      if (v8)
      {
        Hasher._combine(_:)(1u);
        sub_10001E3E0();
        sub_10004A8F8(v3, v9);
        sub_100049010();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      v5 += 40;
      Hasher._combine(_:)(v10);
      sub_100049010();
      swift_bridgeObjectRelease(v6);
      --v2;
    }
    while (v2);
  }
}

void sub_10004A494(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10004A8E4(a1, a2);
  if (v2)
  {
    v5 = v4 + 40;
    do
    {
      v6 = *(_QWORD *)(v5 - 8);
      sub_10001E3E0();
      sub_10004A8F8(v3, v6);
      sub_100049010();
      v5 += 16;
      --v2;
    }
    while (v2);
  }
  sub_10001E7B4();
}

uint64_t *sub_10004A4E0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for FilePath(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_10004A57C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for FilePath(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_10004A5C4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for FilePath(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

_QWORD *sub_10004A634(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for FilePath(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

_OWORD *sub_10004A6B0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for FilePath(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *sub_10004A70C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for FilePath(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_10004A778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004A784);
}

void sub_10004A784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_10004A900();
    sub_100049140();
  }
  else
  {
    v6 = type metadata accessor for FilePath(0);
    sub_10004A8BC(a1 + *(int *)(a3 + 20), a2, v6);
  }
}

uint64_t sub_10004A7D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004A7E4);
}

void sub_10004A7E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  sub_10004A918();
  if (v3)
  {
    *(_QWORD *)(v1 + 8) = (v0 - 1);
    sub_100049140();
  }
  else
  {
    v4 = v2;
    v5 = type metadata accessor for FilePath(0);
    sub_10001DBAC(v1 + *(int *)(v4 + 20), v0, v0, v5);
  }
}

uint64_t type metadata accessor for ModelCatalogAssetVersionedData(uint64_t a1)
{
  return sub_100042760(a1, qword_1000FD248, (uint64_t)&nominal type descriptor for ModelCatalogAssetVersionedData);
}

uint64_t sub_10004A848(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1000CC178;
  result = type metadata accessor for FilePath(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10004A8BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100005700(a1, a2, a3);
}

uint64_t sub_10004A8C8(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void sub_10004A8E4(uint64_t a1, uint64_t a2)
{
  Hasher._combine(_:)(*(_QWORD *)(a2 + 16));
}

uint64_t sub_10004A8F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return String.hash(into:)(a1, a2, v2);
}

uint64_t sub_10004A900()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_10004A92C()
{
  return type metadata accessor for AssetCost(0);
}

_QWORD *sub_10004A934(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return Hasher.init(_seed:)((uint64_t *)va, 0);
}

uint64_t sub_10004A940()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_100002FB8(v0, qword_1000FD280);
  sub_100002FF8(v0, (uint64_t)qword_1000FD280);
  v1 = subsystemName.getter();
  return Logger.init(subsystem:category:)(v1);
}

uint64_t sub_10004A9B0()
{
  uint64_t v0;

  swift_defaultActor_initialize(v0);
  *(_QWORD *)(v0 + 112) = objc_msgSend((id)objc_opt_self(TRIClient), "clientWithIdentifier:", 328);
  return v0;
}

BOOL sub_10004A9F4()
{
  void *v0;
  void *v1;
  void *v2;
  NSString v3;
  id v4;

  v2 = objc_autoreleasePoolPush();
  v3 = sub_10004B3C0();
  v4 = objc_msgSend(v1, "experimentIdentifiersWithNamespaceName:", v3);

  if (v4)
  objc_autoreleasePoolPop(v0);
  return v4 != 0;
}

id sub_10004AA68()
{
  void *v0;
  void *v1;
  void *v2;
  NSString v3;
  NSString v4;
  id v5;
  id v6;

  v2 = objc_autoreleasePoolPush();
  v3 = sub_10004B3C0();
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v1, "levelForFactor:withNamespaceName:", v3, v4);

  if (v5)
  {
    v6 = objc_msgSend(v5, "longValue");

  }
  else
  {
    v6 = 0;
  }
  objc_autoreleasePoolPop(v0);
  return v6;
}

void sub_10004AB24(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17[2];

  v9 = objc_autoreleasePoolPush();
  sub_10004ACCC(v4, a1, a2, v4, a3, a4);
  objc_autoreleasePoolPop(v9);
  if (qword_1000FB100 != -1)
    swift_once(&qword_1000FB100, sub_10004A940);
  v10 = type metadata accessor for Logger(0);
  sub_100002FF8(v10, (uint64_t)qword_1000FD280);
  v11 = swift_bridgeObjectRetain_n(a2, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    sub_10004B3E4();
    v14 = sub_10004B3D4();
    v17[0] = v14;
    MEMORY[0] = 136315138;
    swift_bridgeObjectRetain(a2);
    sub_1000102C0(a1, a2, v17);
    v16 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, v17);
    swift_bridgeObjectRelease_n(a2, 3);
    sub_10002B290((void *)&_mh_execute_header, v12, v13, "Added update handler for namespace %s");
    swift_arrayDestroy(v14, 1);
    sub_10001D790(v14);
    sub_10001D790(0);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
}

void sub_10004ACCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v11;
  NSString v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  id v16;
  _QWORD v17[5];
  _QWORD *v18;

  v11 = *(void **)(a1 + 112);
  v12 = String._bridgeToObjectiveC()();
  v13 = (_QWORD *)swift_allocObject(&unk_1000F3C78, 56, 7);
  v13[2] = a2;
  v13[3] = a3;
  v13[4] = a4;
  v13[5] = a5;
  v13[6] = a6;
  v17[4] = sub_10004B2C8;
  v18 = v13;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  v17[2] = sub_10004B108;
  v17[3] = &unk_1000F3C90;
  v14 = _Block_copy(v17);
  v15 = v18;
  swift_bridgeObjectRetain(a3);
  swift_retain();
  swift_retain();
  v16 = objc_msgSend(v11, "addUpdateHandlerForNamespaceName:usingBlock:", v12, v14, swift_release(v15).n128_f64[0]);
  _Block_release(v14);
  swift_unknownObjectRelease(v16);

}

double sub_10004ADF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  double result;
  uint64_t v18;

  v11 = sub_100002F78(&qword_1000FB230);
  __chkstk_darwin(v11);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TaskPriority(0);
  sub_100005630((uint64_t)v13, 1, 1, v14);
  v15 = (_QWORD *)swift_allocObject(&unk_1000F3CC8, 72, 7);
  v15[2] = 0;
  v15[3] = 0;
  v15[4] = a2;
  v15[5] = a3;
  v15[6] = a4;
  v15[7] = a5;
  v15[8] = a6;
  swift_bridgeObjectRetain(a3);
  swift_retain();
  swift_retain();
  v16 = sub_100002CAC((uint64_t)v13, (uint64_t)&unk_1000FD388, (uint64_t)v15);
  *(_QWORD *)&result = swift_release(v16).n128_u64[0];
  return result;
}

uint64_t sub_10004AEE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[6] = a7;
  v8[7] = a8;
  v8[4] = a5;
  v8[5] = a6;
  v8[3] = a4;
  return swift_task_switch(sub_10004AF08, 0, 0);
}

uint64_t sub_10004AF08()
{
  _DWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (qword_1000FB100 != -1)
    swift_once(&qword_1000FB100, sub_10004A940);
  v2 = v1[4];
  v3 = type metadata accessor for Logger(0);
  sub_100002FF8(v3, (uint64_t)qword_1000FD280);
  v4 = swift_bridgeObjectRetain_n(v2, 2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = v1[4];
  if (v7)
  {
    v9 = v1[3];
    sub_10004B3E4();
    v10 = sub_10004B3D4();
    v13 = v10;
    *v0 = 136315138;
    swift_bridgeObjectRetain(v8);
    sub_1000102C0(v9, v8, &v13);
    v1[2] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 2, v1 + 3);
    swift_bridgeObjectRelease_n(v8, 3);
    sub_10002B290((void *)&_mh_execute_header, v5, v6, "Received update for namespace %s");
    swift_arrayDestroy(v10, 1);
    sub_10001D790(v10);
    sub_10001D790((uint64_t)v0);
  }
  else
  {
    swift_bridgeObjectRelease_n(v1[4], 2);
  }

  return swift_task_switch(sub_10004B0A0, v1[5], 0);
}

uint64_t sub_10004B0A0()
{
  _QWORD *v0;
  int *v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v1 = (int *)v0[6];
  objc_msgSend(*(id *)(v0[5] + 112), "refresh");
  v4 = (uint64_t (*)(void))((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc(v1[1]);
  v0[8] = v2;
  *v2 = v0;
  v2[1] = sub_10000EAD0;
  return v4();
}

uint64_t sub_10004B108(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

uint64_t sub_10004B150()
{
  uint64_t v0;

  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for TrialFrameworkProvider()
{
  return objc_opt_self(_TtC13modelmanagerd22TrialFrameworkProvider);
}

uint64_t sub_10004B194(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;

  v3[2] = a1;
  v3[3] = a2;
  v4 = *v2;
  v3[4] = *v2;
  return swift_task_switch(sub_10004B1B0, v4, 0);
}

uint64_t sub_10004B1B0()
{
  uint64_t v0;
  BOOL v1;

  v1 = sub_10004A9F4();
  return (*(uint64_t (**)(BOOL))(v0 + 8))(v1);
}

uint64_t sub_10004B1E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;

  v5[4] = a3;
  v5[5] = a4;
  v5[2] = a1;
  v5[3] = a2;
  v6 = *v4;
  v5[6] = *v4;
  return swift_task_switch(sub_10004B208, v6, 0);
}

uint64_t sub_10004B208()
{
  uint64_t v0;
  id v1;
  char v2;

  v1 = sub_10004AA68();
  return (*(uint64_t (**)(id, _QWORD))(v0 + 8))(v1, v2 & 1);
}

uint64_t sub_10004B244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;

  v5[4] = a3;
  v5[5] = a4;
  v5[2] = a1;
  v5[3] = a2;
  v6 = *v4;
  v5[6] = *v4;
  return swift_task_switch(sub_10004B264, v6, 0);
}

uint64_t sub_10004B264()
{
  uint64_t v0;

  sub_10004AB24(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10004B294()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

double sub_10004B2C8(uint64_t a1)
{
  uint64_t *v1;

  return sub_10004ADF4(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_10004B2D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B2E8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B2F0()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[6]);
  swift_release(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10004B32C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc(dword_1000FD384);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_10001CA84;
  return sub_10004AEE8(a1, v4, v5, v6, v7, v8, v9, v10);
}

NSString sub_10004B3C0()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_10004B3D4()
{
  return swift_slowAlloc(32, -1);
}

uint64_t sub_10004B3E4()
{
  return swift_slowAlloc(12, -1);
}

uint64_t sub_10004B3F0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  int64_t v29;
  int64_t v30;
  uint64_t v31;
  _QWORD v34[6];
  uint64_t v35;

  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = __CocoaSet.makeIterator()(v4);
    v6 = type metadata accessor for InferenceProviderAsset(0);
    sub_100006710(&qword_1000FB768, type metadata accessor for InferenceProviderAsset);
    result = Set.Iterator.init(_cocoa:)(v5, v6, v7);
    v3 = v34[1];
    v31 = v34[2];
    v9 = v34[3];
    v10 = v34[4];
    v11 = v34[5];
  }
  else
  {
    v12 = -1 << *(_BYTE *)(a1 + 32);
    v31 = a1 + 56;
    v13 = ~v12;
    v14 = -v12;
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v11 = v15 & *(_QWORD *)(a1 + 56);
    result = swift_bridgeObjectRetain(a1);
    v9 = v13;
    v10 = 0;
  }
  v30 = (unint64_t)(v9 + 64) >> 6;
  if (v3 < 0)
    goto LABEL_13;
LABEL_11:
  if (v11)
  {
    v16 = (v11 - 1) & v11;
    v17 = __clz(__rbit64(v11)) | (v10 << 6);
    goto LABEL_27;
  }
  v22 = v10;
  if (!__OFADD__(v10++, 1))
  {
    if (v10 < v30)
    {
      v24 = *(_QWORD *)(v31 + 8 * v10);
      if (v24)
      {
LABEL_26:
        v16 = (v24 - 1) & v24;
        v17 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_27:
        v21 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v17);
        swift_retain(v21);
        for (; v21; v16 = v11)
        {
          v26 = *a2;
          swift_retain(v21);
          swift_retain(a3);
          v27 = swift_bridgeObjectRetain(v26);
          v28 = sub_10004C888(v27, v21, a3);
          swift_bridgeObjectRelease(v26);
          if ((v28 & 1) != 0)
            break;
          result = swift_release(v21);
          v11 = v16;
          if ((v3 & 0x8000000000000000) == 0)
            goto LABEL_11;
LABEL_13:
          v18 = __CocoaSet.Iterator.next()(result);
          if (!v18)
            goto LABEL_39;
          v19 = v18;
          v34[0] = v18;
          v20 = type metadata accessor for InferenceProviderAsset(0);
          swift_unknownObjectRetain(v19);
          swift_dynamicCast(&v35, v34, (char *)&type metadata for Swift.AnyObject + 8, v20, 7);
          v21 = v35;
          swift_unknownObjectRelease(v19);
        }
        goto LABEL_38;
      }
      v25 = v10 + 1;
      if (v10 + 1 < v30)
      {
        v24 = *(_QWORD *)(v31 + 8 * v25);
        if (v24)
          goto LABEL_25;
        v25 = v10 + 2;
        if (v10 + 2 >= v30)
          goto LABEL_37;
        v24 = *(_QWORD *)(v31 + 8 * v25);
        if (v24)
        {
LABEL_25:
          v10 = v25;
          goto LABEL_26;
        }
        v25 = v10 + 3;
        if (v10 + 3 < v30)
        {
          v24 = *(_QWORD *)(v31 + 8 * v25);
          if (v24)
            goto LABEL_25;
          v10 += 4;
          if (v10 < v30)
          {
            v24 = *(_QWORD *)(v31 + 8 * v10);
            if (!v24)
            {
              v29 = v22 + 6;
              while (v29 < v30)
              {
                v24 = *(_QWORD *)(v31 + 8 * v29++);
                if (v24)
                {
                  v10 = v29 - 1;
                  goto LABEL_26;
                }
              }
LABEL_39:
              v21 = 0;
              goto LABEL_38;
            }
            goto LABEL_26;
          }
        }
      }
    }
LABEL_37:
    v21 = 0;
LABEL_38:
    sub_10001CD34(v3);
    swift_release(a3);
    return v21;
  }
  __break(1u);
  return result;
}

void sub_10004B728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  int64_t v36;
  uint64_t v37;
  int64_t v38;
  _QWORD v39[6];
  uint64_t v40;

  v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = __CocoaSet.makeIterator()(v6);
    v8 = type metadata accessor for InferenceProviderAsset(0);
    sub_100006710(&qword_1000FB768, type metadata accessor for InferenceProviderAsset);
    v10 = Set.Iterator.init(_cocoa:)(v7, v8, v9);
    v5 = v39[1];
    v37 = v39[2];
    v11 = v39[3];
    v12 = v39[4];
    v13 = v39[5];
  }
  else
  {
    v14 = -1 << *(_BYTE *)(a1 + 32);
    v37 = a1 + 56;
    v15 = ~v14;
    v16 = -v14;
    if (v16 < 64)
      v17 = ~(-1 << v16);
    else
      v17 = -1;
    v13 = v17 & *(_QWORD *)(a1 + 56);
    v10 = swift_bridgeObjectRetain(a1);
    v11 = v15;
    v12 = 0;
  }
  v36 = (unint64_t)(v11 + 64) >> 6;
  while (1)
  {
    v38 = v12;
    if ((v5 & 0x8000000000000000) == 0)
      break;
    v20 = __CocoaSet.Iterator.next()(v10);
    if (!v20)
      goto LABEL_43;
    v21 = v20;
    v39[0] = v20;
    v22 = type metadata accessor for InferenceProviderAsset(0);
    swift_unknownObjectRetain(v21);
    swift_dynamicCast(&v40, v39, (char *)&type metadata for Swift.AnyObject + 8, v22, 7);
    v23 = v40;
    v24 = swift_unknownObjectRelease(v21);
    v18 = v13;
    if (!v23)
      goto LABEL_43;
LABEL_34:
    v28 = InferenceProviderAssetDescriptor.identifier.getter(v24);
    if (v28 == a2 && v29 == a3)
    {
      swift_bridgeObjectRelease(a3);
      goto LABEL_43;
    }
    v31 = v29;
    v32 = a2;
    v33 = a2;
    v34 = a3;
    v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v29, v33, a3, 0);
    swift_bridgeObjectRelease(v31);
    if ((v35 & 1) != 0)
    {
      a3 = v34;
LABEL_43:
      sub_10001CD34(v5);
      swift_bridgeObjectRelease(a3);
      return;
    }
    swift_release(v23);
    v13 = v18;
    a3 = v34;
    a2 = v32;
  }
  if (v13)
  {
    v18 = (v13 - 1) & v13;
    v19 = __clz(__rbit64(v13)) | (v12 << 6);
LABEL_33:
    v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v19);
    v24 = swift_retain();
    if (!v23)
      goto LABEL_43;
    goto LABEL_34;
  }
  v25 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    if (v25 >= v36)
      goto LABEL_43;
    v26 = *(_QWORD *)(v37 + 8 * v25);
    ++v12;
    if (!v26)
    {
      v12 = v25 + 1;
      if (v25 + 1 >= v36)
        goto LABEL_43;
      v26 = *(_QWORD *)(v37 + 8 * v12);
      if (!v26)
      {
        v12 = v25 + 2;
        if (v25 + 2 >= v36)
          goto LABEL_43;
        v26 = *(_QWORD *)(v37 + 8 * v12);
        if (!v26)
        {
          v12 = v25 + 3;
          if (v25 + 3 >= v36)
            goto LABEL_43;
          v26 = *(_QWORD *)(v37 + 8 * v12);
          if (!v26)
          {
            v12 = v25 + 4;
            if (v25 + 4 >= v36)
              goto LABEL_43;
            v26 = *(_QWORD *)(v37 + 8 * v12);
            if (!v26)
            {
              v27 = v38 + 6;
              while (v27 < v36)
              {
                v26 = *(_QWORD *)(v37 + 8 * v27++);
                if (v26)
                {
                  v12 = v27 - 1;
                  goto LABEL_32;
                }
              }
              goto LABEL_43;
            }
          }
        }
      }
    }
LABEL_32:
    v18 = (v26 - 1) & v26;
    v19 = __clz(__rbit64(v26)) + (v12 << 6);
    goto LABEL_33;
  }
  __break(1u);
}

uint64_t sub_10004BA7C(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  int64_t i;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  int64_t v27;

  v26 = a1 + 56;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v27 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  i = 0;
  while (1)
  {
LABEL_4:
    if (v5)
    {
      v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v9 = v8 | (i << 6);
    }
    else
    {
      v10 = i + 1;
      if (__OFADD__(i, 1))
        goto LABEL_41;
      if (v10 >= v27)
      {
LABEL_39:
        swift_bridgeObjectRelease(a2);
        swift_release(a1);
        return 0;
      }
      v11 = *(_QWORD *)(v26 + 8 * v10);
      ++i;
      if (!v11)
      {
        i = v10 + 1;
        if (v10 + 1 >= v27)
          goto LABEL_39;
        v11 = *(_QWORD *)(v26 + 8 * i);
        if (!v11)
        {
          i = v10 + 2;
          if (v10 + 2 >= v27)
            goto LABEL_39;
          v11 = *(_QWORD *)(v26 + 8 * i);
          if (!v11)
          {
            i = v10 + 3;
            if (v10 + 3 >= v27)
              goto LABEL_39;
            v11 = *(_QWORD *)(v26 + 8 * i);
            if (!v11)
            {
              v12 = v10 + 4;
              if (v12 >= v27)
                goto LABEL_39;
              v11 = *(_QWORD *)(v26 + 8 * v12);
              for (i = v12; !v11; ++v12)
              {
                i = v12 + 1;
                if (__OFADD__(v12, 1))
                  goto LABEL_42;
                if (i >= v27)
                  goto LABEL_39;
                v11 = *(_QWORD *)(v26 + 8 * i);
              }
            }
          }
        }
      }
      v5 = (v11 - 1) & v11;
      v9 = __clz(__rbit64(v11)) + (i << 6);
    }
    v13 = a2[2];
    if (v13)
    {
      v14 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v9);
      v15 = *v14;
      v16 = v14[1];
      v17 = a2[4];
      v18 = a2[5];
      v19 = v17 == *v14 && v18 == v16;
      if (v19 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, *v14, v14[1], 0), (result & 1) != 0))
      {
LABEL_37:
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRelease(a2);
        swift_release(a1);
        return v15;
      }
      if (v13 != 1)
        break;
    }
  }
  v20 = a2 + 7;
  v21 = 1;
  while (1)
  {
    v22 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    v23 = *(v20 - 1);
    v24 = *v20;
    if (v23 == v15 && v24 == v16)
      goto LABEL_37;
    result = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v15, v16, 0);
    if ((result & 1) != 0)
      goto LABEL_37;
    v20 += 2;
    ++v21;
    if (v22 == v13)
      goto LABEL_4;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

#error "10004BEC4: call analysis failed (funcsize=150)"

BOOL sub_10004BF34(uint64_t a1)
{
  uint64_t v1;

  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v1 = __CocoaSet.count.getter(a1);
  }
  else
  {
    v1 = *(_QWORD *)(a1 + 16);
  }
  return v1 == 0;
}

uint64_t sub_10004BF6C(uint64_t a1, uint64_t (*a2)(char *, char *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  int64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(char *, char *);
  uint64_t v57;
  int v58;
  int64_t v59;
  uint64_t v60;
  _QWORD v61[3];
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;

  v4 = v3;
  v56 = a2;
  v57 = a3;
  v6 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v49 - v10;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v12 = a1;
    else
      v12 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v13 = __CocoaSet.makeIterator()(v12);
    v14 = type metadata accessor for InferenceProviderAsset(0);
    sub_100006710(&qword_1000FB768, type metadata accessor for InferenceProviderAsset);
    v16 = Set.Iterator.init(_cocoa:)(v13, v14, v15);
    a1 = v63;
    v54 = v64;
    v18 = v65;
    v17 = v66;
    v19 = v67;
    if (v63 < 0)
    {
      v59 = v66;
      v45 = __CocoaSet.Iterator.next()(v16);
      if (!v45)
        goto LABEL_63;
      v46 = v45;
      v50 = v18;
      v49 = v4;
      v61[0] = v45;
      swift_unknownObjectRetain(v45);
      swift_dynamicCast(v62, v61, (char *)&type metadata for Swift.AnyObject + 8, v14, 7);
      v23 = v62[0];
      v24 = swift_unknownObjectRelease(v46);
      v58 = 0;
      v22 = v59;
      v20 = v19;
      goto LABEL_9;
    }
    if (v67)
      goto LABEL_7;
  }
  else
  {
    v38 = -1 << *(_BYTE *)(a1 + 32);
    v39 = *(_QWORD *)(a1 + 56);
    v54 = a1 + 56;
    v18 = ~v38;
    v40 = -v38;
    if (v40 < 64)
      v41 = ~(-1 << v40);
    else
      v41 = -1;
    v19 = v41 & v39;
    swift_bridgeObjectRetain(a1);
    v17 = 0;
    if (v19)
    {
LABEL_7:
      v50 = v18;
      v49 = v4;
      v20 = (v19 - 1) & v19;
      v21 = __clz(__rbit64(v19)) | (v17 << 6);
      v22 = v17;
LABEL_8:
      v23 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v21);
      v24 = swift_retain();
      v58 = 1;
LABEL_9:
      v59 = v23;
      if (!v23)
        goto LABEL_63;
      v55 = a1;
      v53 = a1 & 0x7FFFFFFFFFFFFFFFLL;
      v51 = (unint64_t)(v50 + 64) >> 6;
      a1 = (uint64_t)type metadata accessor for InferenceProviderAsset.ManagerOwnedState;
      v52 = (char *)&type metadata for Swift.AnyObject + 8;
      while (1)
      {
        if (v58)
        {
          if (v20)
          {
            v25 = (v20 - 1) & v20;
            v26 = __clz(__rbit64(v20)) | (v22 << 6);
            v27 = v22;
          }
          else
          {
            v32 = v22 + 1;
            if (__OFADD__(v22, 1))
            {
              __break(1u);
LABEL_65:
              __break(1u);
              goto LABEL_63;
            }
            if (v32 >= v51)
              goto LABEL_50;
            v33 = *(_QWORD *)(v54 + 8 * v32);
            v27 = v22 + 1;
            if (!v33)
            {
              v27 = v22 + 2;
              if (v22 + 2 >= v51)
                goto LABEL_50;
              v33 = *(_QWORD *)(v54 + 8 * v27);
              if (!v33)
              {
                v27 = v22 + 3;
                if (v22 + 3 >= v51)
                  goto LABEL_50;
                v33 = *(_QWORD *)(v54 + 8 * v27);
                if (!v33)
                {
                  v27 = v22 + 4;
                  if (v22 + 4 >= v51)
                    goto LABEL_50;
                  v33 = *(_QWORD *)(v54 + 8 * v27);
                  if (!v33)
                  {
                    v27 = v22 + 5;
                    if (v22 + 5 >= v51)
                      goto LABEL_50;
                    v33 = *(_QWORD *)(v54 + 8 * v27);
                    if (!v33)
                    {
                      v34 = v22 + 6;
                      while (v34 < v51)
                      {
                        v33 = *(_QWORD *)(v54 + 8 * v34++);
                        if (v33)
                        {
                          v27 = v34 - 1;
                          goto LABEL_32;
                        }
                      }
LABEL_50:
                      sub_10001CD34(v55);
                      return v59;
                    }
                  }
                }
              }
            }
LABEL_32:
            v25 = (v33 - 1) & v33;
            v26 = __clz(__rbit64(v33)) + (v27 << 6);
          }
          v31 = *(_QWORD *)(*(_QWORD *)(v55 + 48) + 8 * v26);
          swift_retain();
          if (!v31)
            goto LABEL_50;
        }
        else
        {
          v28 = __CocoaSet.Iterator.next()(v24);
          if (!v28)
            goto LABEL_50;
          v29 = v28;
          v60 = v28;
          v30 = type metadata accessor for InferenceProviderAsset(0);
          swift_unknownObjectRetain(v29);
          swift_dynamicCast(&v68, &v60, v52, v30, 7);
          v31 = v68;
          swift_unknownObjectRelease(v29);
          v27 = v22;
          v25 = v20;
          if (!v31)
            goto LABEL_50;
        }
        v35 = v31 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
        swift_beginAccess(v31 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v62, 0, 0);
        sub_10002AC98(v35, (uint64_t)v11, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        v36 = v59;
        v37 = v59 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
        swift_beginAccess(v59 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v61, 0, 0);
        sub_10002AC98(v37, (uint64_t)v9, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        LOBYTE(v37) = v56(v11, v9);
        sub_10002ACC4((uint64_t)v9, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        sub_10002ACC4((uint64_t)v11, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        if ((v37 & 1) != 0)
        {
          swift_release(v36);
          v59 = v31;
        }
        else
        {
          swift_release(v31);
        }
        v22 = v27;
        v20 = v25;
      }
    }
  }
  v42 = v17 + 1;
  if (__OFADD__(v17, 1))
    goto LABEL_65;
  v43 = (unint64_t)(v18 + 64) >> 6;
  if (v42 < v43)
  {
    v44 = *(_QWORD *)(v54 + 8 * v42);
    v22 = v17 + 1;
    if (!v44)
    {
      v22 = v17 + 2;
      if (v17 + 2 >= v43)
        goto LABEL_63;
      v44 = *(_QWORD *)(v54 + 8 * v22);
      if (!v44)
      {
        v22 = v17 + 3;
        if (v17 + 3 >= v43)
          goto LABEL_63;
        v44 = *(_QWORD *)(v54 + 8 * v22);
        if (!v44)
        {
          v22 = v17 + 4;
          if (v17 + 4 >= v43)
            goto LABEL_63;
          v44 = *(_QWORD *)(v54 + 8 * v22);
          if (!v44)
          {
            v22 = v17 + 5;
            if (v17 + 5 >= v43)
              goto LABEL_63;
            v44 = *(_QWORD *)(v54 + 8 * v22);
            if (!v44)
            {
              v48 = v17 + 6;
              do
              {
                if (v48 >= v43)
                  goto LABEL_63;
                v44 = *(_QWORD *)(v54 + 8 * v48++);
              }
              while (!v44);
              v22 = v48 - 1;
            }
          }
        }
      }
    }
    v50 = v18;
    v49 = v4;
    v20 = (v44 - 1) & v44;
    v21 = __clz(__rbit64(v44)) + (v22 << 6);
    goto LABEL_8;
  }
LABEL_63:
  sub_10001CD34(a1);
  return 0;
}

uint64_t sub_10004C52C(uint64_t a1, uint64_t (*a2)(char *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  uint64_t v33;
  char *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t (*v38)(char *);
  uint64_t v39;
  uint64_t v40;
  char v41[24];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  uint64_t v47;

  v38 = a2;
  v39 = a3;
  v5 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  __chkstk_darwin(v5);
  v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = v3;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v9 = __CocoaSet.makeIterator()(v8);
    v10 = type metadata accessor for InferenceProviderAsset(0);
    sub_100006710(&qword_1000FB768, type metadata accessor for InferenceProviderAsset);
    result = Set.Iterator.init(_cocoa:)(v9, v10, v11);
    a1 = v42;
    v37 = v43;
    v13 = v44;
    v14 = v45;
    v15 = v46;
  }
  else
  {
    v16 = -1 << *(_BYTE *)(a1 + 32);
    v17 = *(_QWORD *)(a1 + 56);
    v37 = a1 + 56;
    v13 = ~v16;
    v18 = -v16;
    if (v18 < 64)
      v19 = ~(-1 << v18);
    else
      v19 = -1;
    v15 = v19 & v17;
    result = swift_bridgeObjectRetain(a1);
    v14 = 0;
  }
  v32[1] = v13;
  v35 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  v36 = (unint64_t)(v13 + 64) >> 6;
  v34 = (char *)&type metadata for Swift.AnyObject + 8;
  while (1)
  {
    v20 = v14;
    if (a1 < 0)
    {
      v23 = __CocoaSet.Iterator.next()(result);
      if (!v23)
        goto LABEL_36;
      v24 = v23;
      v40 = v23;
      v25 = type metadata accessor for InferenceProviderAsset(0);
      swift_unknownObjectRetain(v24);
      swift_dynamicCast(&v47, &v40, v34, v25, 7);
      v26 = v47;
      swift_unknownObjectRelease(v24);
      if (!v26)
        goto LABEL_36;
      goto LABEL_34;
    }
    if (!v15)
      break;
    v21 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    v22 = v21 | (v14 << 6);
LABEL_33:
    v26 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v22);
    swift_retain(v26);
    if (!v26)
      goto LABEL_36;
LABEL_34:
    v30 = v26 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess(v26 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v41, 0, 0);
    sub_10002AC98(v30, (uint64_t)v7, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    LOBYTE(v30) = v38(v7);
    sub_10002ACC4((uint64_t)v7, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    result = swift_release(v26);
    if ((v30 & 1) == 0)
    {
      v31 = 0;
      goto LABEL_37;
    }
  }
  v27 = v14 + 1;
  if (!__OFADD__(v14, 1))
  {
    if (v27 >= v36)
      goto LABEL_36;
    v28 = *(_QWORD *)(v37 + 8 * v27);
    ++v14;
    if (!v28)
    {
      v14 = v20 + 2;
      if (v20 + 2 >= v36)
        goto LABEL_36;
      v28 = *(_QWORD *)(v37 + 8 * v14);
      if (!v28)
      {
        v14 = v20 + 3;
        if (v20 + 3 >= v36)
          goto LABEL_36;
        v28 = *(_QWORD *)(v37 + 8 * v14);
        if (!v28)
        {
          v14 = v20 + 4;
          if (v20 + 4 >= v36)
            goto LABEL_36;
          v28 = *(_QWORD *)(v37 + 8 * v14);
          if (!v28)
          {
            v14 = v20 + 5;
            if (v20 + 5 >= v36)
              goto LABEL_36;
            v28 = *(_QWORD *)(v37 + 8 * v14);
            if (!v28)
            {
              v29 = v20 + 6;
              while (v29 < v36)
              {
                v28 = *(_QWORD *)(v37 + 8 * v29++);
                if (v28)
                {
                  v14 = v29 - 1;
                  goto LABEL_32;
                }
              }
LABEL_36:
              v31 = 1;
LABEL_37:
              sub_10001CD34(a1);
              return v31;
            }
          }
        }
      }
    }
LABEL_32:
    v15 = (v28 - 1) & v28;
    v22 = __clz(__rbit64(v28)) + (v14 << 6);
    goto LABEL_33;
  }
  __break(1u);
  return result;
}

uint64_t sub_10004C888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  _QWORD v31[6];
  uint64_t v32;

  v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = __CocoaSet.makeIterator()(v6);
    v8 = type metadata accessor for InferenceProviderAsset(0);
    sub_100006710(&qword_1000FB768, type metadata accessor for InferenceProviderAsset);
    result = Set.Iterator.init(_cocoa:)(v7, v8, v9);
    v5 = v31[1];
    v30 = v31[2];
    v11 = v31[3];
    v12 = v31[4];
    v13 = v31[5];
  }
  else
  {
    v14 = -1 << *(_BYTE *)(a1 + 32);
    v30 = a1 + 56;
    v11 = ~v14;
    v15 = -v14;
    if (v15 < 64)
      v16 = ~(-1 << v15);
    else
      v16 = -1;
    v13 = v16 & *(_QWORD *)(a1 + 56);
    result = swift_bridgeObjectRetain(a1);
    v12 = 0;
  }
  v29 = (unint64_t)(v11 + 64) >> 6;
  while (1)
  {
    v17 = v12;
    if (v5 < 0)
    {
      v20 = __CocoaSet.Iterator.next()(result);
      if (!v20)
        goto LABEL_36;
      v21 = v20;
      v31[0] = v20;
      v22 = type metadata accessor for InferenceProviderAsset(0);
      swift_unknownObjectRetain(v21);
      swift_dynamicCast(&v32, v31, (char *)&type metadata for Swift.AnyObject + 8, v22, 7);
      v23 = v32;
      swift_unknownObjectRelease(v21);
      if (!v23)
        goto LABEL_36;
      goto LABEL_34;
    }
    if (!v13)
      break;
    v18 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    v19 = v18 | (v12 << 6);
LABEL_33:
    v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v19);
    swift_retain(v23);
    if (!v23)
      goto LABEL_36;
LABEL_34:
    v27 = sub_100080448(v23);
    result = swift_release(v23);
    if ((v27 & 1) != 0)
    {
      v28 = 0;
      goto LABEL_37;
    }
  }
  v24 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    if (v24 >= v29)
      goto LABEL_36;
    v25 = *(_QWORD *)(v30 + 8 * v24);
    ++v12;
    if (!v25)
    {
      v12 = v17 + 2;
      if (v17 + 2 >= v29)
        goto LABEL_36;
      v25 = *(_QWORD *)(v30 + 8 * v12);
      if (!v25)
      {
        v12 = v17 + 3;
        if (v17 + 3 >= v29)
          goto LABEL_36;
        v25 = *(_QWORD *)(v30 + 8 * v12);
        if (!v25)
        {
          v12 = v17 + 4;
          if (v17 + 4 >= v29)
            goto LABEL_36;
          v25 = *(_QWORD *)(v30 + 8 * v12);
          if (!v25)
          {
            v12 = v17 + 5;
            if (v17 + 5 >= v29)
              goto LABEL_36;
            v25 = *(_QWORD *)(v30 + 8 * v12);
            if (!v25)
            {
              v26 = v17 + 6;
              while (v26 < v29)
              {
                v25 = *(_QWORD *)(v30 + 8 * v26++);
                if (v25)
                {
                  v12 = v26 - 1;
                  goto LABEL_32;
                }
              }
LABEL_36:
              v28 = 1;
LABEL_37:
              sub_10001CD34(v5);
              swift_release(a2);
              swift_release(a3);
              return v28;
            }
          }
        }
      }
    }
LABEL_32:
    v13 = (v25 - 1) & v25;
    v19 = __clz(__rbit64(v25)) + (v12 << 6);
    goto LABEL_33;
  }
  __break(1u);
  return result;
}

uint64_t sub_10004CB7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_10004CB98, 0, 0);
}

uint64_t sub_10004CB98()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  _QWORD *v3;

  v1 = sub_10007F040();
  *(_QWORD *)(v0 + 40) = v1;
  v2 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v1 + 16) = v0 + 16;
  *(_OWORD *)(v1 + 24) = v2;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 48) = v3;
  *v3 = v0;
  v3[1] = sub_10004CC10;
  sub_10007F4A4((uint64_t)&type metadata for ());
  sub_10007D5B8();
  return withTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_10004CC10()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 48));
  sub_10001E330();
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_10004CC48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  unint64_t v6;

  v5[18] = a4;
  v5[19] = a5;
  v5[16] = a2;
  v5[17] = a3;
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_100002F78(&qword_1000FB230) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[20] = swift_task_alloc(v6);
  v5[21] = swift_task_alloc(v6);
  return swift_task_switch(sub_10004CCB8, 0, 0);
}

void sub_10004CCB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t ObjectType;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  char *v55;

  v2 = *(_QWORD *)(v0 + 136);
  if ((v2 & 0xC000000000000001) != 0)
  {
    sub_10001D964();
    sub_10007EEDC();
    sub_10001E1D8();
    sub_100006710(&qword_1000FB768, type metadata accessor for InferenceProviderAsset);
    v3 = sub_10007F9BC();
    v6 = Set.Iterator.init(_cocoa:)(v3, v4, v5);
    v2 = *(_QWORD *)(v0 + 16);
    v52 = *(_QWORD *)(v0 + 24);
    v7 = *(_QWORD *)(v0 + 32);
    v8 = *(_QWORD *)(v0 + 40);
    v9 = *(_QWORD *)(v0 + 48);
  }
  else
  {
    v52 = v2 + 56;
    v10 = ~(-1 << *(_BYTE *)(v2 + 32));
    sub_10001E7F4();
    v9 = v11 & v12;
    v6 = sub_10001D964();
    v7 = v10;
    v8 = 0;
  }
  v51 = (unint64_t)(v7 + 64) >> 6;
  if (v2 < 0)
    goto LABEL_7;
  while (1)
  {
    if (v9)
    {
      v1 = (v9 - 1) & v9;
      v13 = __clz(__rbit64(v9)) | (v8 << 6);
      v14 = v8;
      goto LABEL_26;
    }
    v21 = v8 + 1;
    if (__OFADD__(v8, 1))
      break;
    if (v21 >= v51)
      goto LABEL_37;
    v14 = v8 + 1;
    if (!*(_QWORD *)(v52 + 8 * v21))
    {
      v14 = v8 + 2;
      if (v8 + 2 >= v51)
        goto LABEL_37;
      if (!*(_QWORD *)(v52 + 8 * v14))
      {
        v14 = v8 + 3;
        if (v8 + 3 >= v51)
          goto LABEL_37;
        if (!*(_QWORD *)(v52 + 8 * v14))
        {
          v14 = v8 + 4;
          if (v8 + 4 >= v51)
            goto LABEL_37;
          if (!*(_QWORD *)(v52 + 8 * v14))
          {
            v14 = v8 + 5;
            if (v8 + 5 >= v51)
              goto LABEL_37;
            if (!*(_QWORD *)(v52 + 8 * v14))
            {
              v22 = v8 + 6;
              while (v22 < v51)
              {
                if (*(_QWORD *)(v52 + 8 * v22++))
                {
                  v14 = v22 - 1;
                  goto LABEL_25;
                }
              }
LABEL_37:
              sub_10001CD34(v2);
              v55 = (char *)&dword_1000FD7F8 + dword_1000FD7F8;
              v50 = (_QWORD *)swift_task_alloc(unk_1000FD7FC);
              *(_QWORD *)(v0 + 176) = v50;
              *v50 = v0;
              v50[1] = sub_10004D10C;
              ((void (*)(_QWORD, _QWORD))v55)(0, 0);
              return;
            }
          }
        }
      }
    }
LABEL_25:
    sub_10007FF5C();
    v13 = v24 + (v14 << 6);
LABEL_26:
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v13);
    sub_10001E194();
    if (!v20)
      goto LABEL_37;
    while (1)
    {
      v53 = v1;
      v54 = v14;
      v25 = v2;
      v27 = *(_QWORD *)(v0 + 160);
      v26 = *(_QWORD *)(v0 + 168);
      v28 = *(_QWORD *)(v0 + 144);
      v29 = *(_QWORD *)(v0 + 152);
      v30 = sub_10001DBC0();
      sub_10007F8CC();
      sub_100005630(v31, v32, v33, v30);
      v34 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F3DC0, 56);
      v34[2] = 0;
      v35 = v34 + 2;
      v34[3] = 0;
      v34[4] = v28;
      v34[5] = v29;
      v34[6] = v20;
      sub_100048DB4(v26, v27, &qword_1000FB230);
      LODWORD(v26) = sub_100005700(v27, 1, v30);
      v36 = sub_10001D7EC();
      v37 = *(_QWORD *)(v0 + 160);
      if ((_DWORD)v26 == 1)
      {
        sub_10007E5D4();
        v38 = 0;
      }
      else
      {
        v39 = TaskPriority.rawValue.getter(v36);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v37, v30);
        v38 = v39;
      }
      v2 = v25;
      v1 = v53;
      v40 = *v35;
      if (*v35)
      {
        v41 = v34[3];
        ObjectType = swift_getObjectType(*v35);
        swift_unknownObjectRetain(v40);
        v43 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v41);
        v45 = v44;
        sub_10007FEFC();
      }
      else
      {
        v43 = 0;
        v45 = 0;
      }
      v8 = v54;
      v46 = **(_QWORD **)(v0 + 128);
      v47 = v45 | v43;
      if (v45 | v43)
      {
        v47 = v0 + 56;
        *(_QWORD *)(v0 + 56) = 0;
        *(_QWORD *)(v0 + 64) = 0;
        *(_QWORD *)(v0 + 72) = v43;
        *(_QWORD *)(v0 + 80) = v45;
      }
      v48 = *(_QWORD *)(v0 + 168);
      *(_QWORD *)(v0 + 88) = 1;
      *(_QWORD *)(v0 + 96) = v47;
      *(_QWORD *)(v0 + 104) = v46;
      v49 = swift_task_create(v38 | 0x3100, v0 + 88, (char *)&type metadata for () + 8, &unk_1000FD808, v34);
      swift_release(v49);
      sub_10002AD5C(v48, &qword_1000FB230);
      v9 = v53;
      if ((v2 & 0x8000000000000000) == 0)
        break;
LABEL_7:
      v15 = __CocoaSet.Iterator.next()(v6);
      if (v15)
      {
        v16 = v15;
        *(_QWORD *)(v0 + 120) = v15;
        v17 = sub_10001E1D8();
        swift_unknownObjectRetain(v16);
        v18 = sub_10007F3D8();
        sub_10002B4BC(v18, v19, (uint64_t)&type metadata for Swift.AnyObject + 8, v17);
        v20 = *(_QWORD *)(v0 + 112);
        swift_unknownObjectRelease(v16);
        v14 = v8;
        v1 = v9;
        if (v20)
          continue;
      }
      goto LABEL_37;
    }
  }
  __break(1u);
}

uint64_t sub_10004D10C()
{
  uint64_t v0;
  uint64_t v1;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v1 + 176));
  sub_10001D938();
  sub_10001EAC8();
  return sub_10002B7C0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10004D148(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t);

  *(_QWORD *)(v6 + 16) = a6;
  v9 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  v7 = (_QWORD *)swift_task_alloc(a4[1]);
  *(_QWORD *)(v6 + 24) = v7;
  *v7 = v6;
  v7[1] = sub_10004D1AC;
  return v9(v6 + 16);
}

uint64_t sub_10004D1AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *(_QWORD *)(*(_QWORD *)v1 + 32) = v0;
  swift_task_dealloc(v2);
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_10004D204()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004D210(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  if (a1)
  {
    ObjectType = swift_getObjectType(a1);
    v6 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, a2);
    v8 = v7;
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  v3[10] = v6;
  v3[11] = v8;
  return swift_task_switch(sub_10004D284, v6, v8);
}

uint64_t sub_10004D284()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  int v5;

  v1 = **(_QWORD **)(v0 + 72);
  v2 = sub_100002F78(&qword_1000FB5F8);
  *(_QWORD *)(v0 + 96) = v2;
  if ((ThrowingTaskGroup.isEmpty.getter(v1, (char *)&type metadata for () + 8, v2, &protocol self-conformance witness table for Error) & 1) != 0)
  {
    v3 = (uint64_t (*)(void))sub_10001E5D0();
    return sub_10002B7C0(v3);
  }
  else
  {
    v5 = sub_1000C8AD4(2, 18, 0, 0);
    *(_DWORD *)(v0 + 128) = v5;
    *(_QWORD *)(v0 + 104) = 0;
    if (v5)
    {
      *(_QWORD *)(v0 + 112) = swift_task_alloc(async function pointer to ThrowingTaskGroup.next(isolation:)[1]);
      sub_100002F78(&qword_1000FD818);
      sub_10007E7A0((uint64_t)sub_10004D358);
      return sub_10007DD4C();
    }
    else
    {
      sub_10007EDF0();
      return sub_10007DD3C();
    }
  }
}

uint64_t sub_10004D358()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_10001E0D8();
  sub_10001D788(*(_QWORD *)(v0 + 112), v2);
  if (v1)
    *(_QWORD *)(v0 + 120) = v1;
  else
    *(_BYTE *)(v0 + 134) = *(_BYTE *)(v0 + 132);
  return sub_10001D6DC();
}

uint64_t sub_10004D3B4()
{
  uint64_t v0;
  uint64_t v1;

  if (v0)
  {
    *(_QWORD *)(v1 + 120) = v0;
    return swift_task_switch(sub_10004D4A0, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88));
  }
  else
  {
    *(_BYTE *)(v1 + 134) = *(_BYTE *)(v1 + 133);
    return swift_task_switch(sub_10004D3E4, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88));
  }
}

uint64_t sub_10004D3E4()
{
  uint64_t v0;
  uint64_t v1;

  if ((*(_BYTE *)(v0 + 134) & 1) == 0)
    goto LABEL_7;
  v1 = *(_QWORD *)(v0 + 104);
  if ((ThrowingTaskGroup.isEmpty.getter(**(_QWORD **)(v0 + 72), (char *)&type metadata for () + 8, *(_QWORD *)(v0 + 96), &protocol self-conformance witness table for Error) & 1) == 0)
  {
    *(_QWORD *)(v0 + 104) = v1;
LABEL_7:
    if (*(_DWORD *)(v0 + 128))
    {
      *(_QWORD *)(v0 + 112) = swift_task_alloc(async function pointer to ThrowingTaskGroup.next(isolation:)[1]);
      sub_100002F78(&qword_1000FD818);
      sub_10007E7A0((uint64_t)sub_10004D358);
      return sub_10007DD4C();
    }
    else
    {
      sub_10007EDF0();
      return sub_10007DD3C();
    }
  }
  if (v1)
    sub_10007D88C();
  return sub_10002B7C0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10004D4A0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120);
  if (*(_QWORD *)(v0 + 104))
  {
    sub_10001EBB8();
    v1 = *(_QWORD *)(v0 + 104);
  }
  if ((ThrowingTaskGroup.isEmpty.getter(**(_QWORD **)(v0 + 72), (char *)&type metadata for () + 8, *(_QWORD *)(v0 + 96), &protocol self-conformance witness table for Error) & 1) != 0)
  {
    if (v1)
      sub_10007D88C();
    return sub_10002B7C0(*(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    *(_QWORD *)(v0 + 104) = v1;
    if (*(_DWORD *)(v0 + 128))
    {
      *(_QWORD *)(v0 + 112) = swift_task_alloc(async function pointer to ThrowingTaskGroup.next(isolation:)[1]);
      sub_100002F78(&qword_1000FD818);
      sub_10007E7A0((uint64_t)sub_10004D358);
      return sub_10007DD4C();
    }
    else
    {
      sub_10007EDF0();
      return sub_10007DD3C();
    }
  }
}

uint64_t sub_10004D568()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_100002FB8(v0, qword_1000FD390);
  sub_100002FF8(v0, (uint64_t)qword_1000FD390);
  v1 = subsystemName.getter();
  return Logger.init(subsystem:category:)(v1);
}

uint64_t sub_10004D5D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
    return a4 == 0;
  if (!a4)
    return 0;
  if (a1 == a3 && a2 == a4)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0);
}

uint64_t sub_10004D60C(uint64_t *a1, uint64_t *a2)
{
  return sub_10004D5D4(*a1, a1[1], *a2, a2[1]);
}

uint64_t sub_10004D620()
{
  char v0;
  uint64_t result;
  _QWORD v2[5];

  v2[3] = &type metadata for ModelManager;
  v2[4] = sub_100067330();
  LOBYTE(v2[0]) = 1;
  v0 = isFeatureEnabled(_:)(v2);
  result = sub_10000650C(v2);
  if ((v0 & 1) != 0)
    return static Policy.defaultAssetTransitionDelay.getter(result, 0.0);
  return result;
}

BOOL sub_10004D69C(uint64_t a1, uint64_t a2)
{
  int *v4;

  if ((sub_1000B22C8(a1, a2) & 1) != 0
    && (v4 = (int *)sub_10007E860(), *(_QWORD *)(a1 + v4[5]) == *(_QWORD *)(a2 + v4[5]))
    && *(double *)(a1 + v4[6]) == *(double *)(a2 + v4[6]))
  {
    return *(double *)(a1 + v4[7]) == *(double *)(a2 + v4[7]);
  }
  else
  {
    return 0;
  }
}

_QWORD *sub_10004D710()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *result;
  _BYTE v8[24];

  v1 = v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy;
  sub_10002B2E0(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy, (uint64_t)v8);
  v2 = sub_10007E860();
  v3 = *(_QWORD *)(v1 + *(int *)(v2 + 20));
  if (v3 == static Policy.defaultMemoryBudgetMarker.getter(v2))
  {
    v1 = *(_QWORD *)(*sub_10001C830((_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_modelCatalog), *(_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_modelCatalog + 24))+ 112);
    if ((v1 & 0x8000000000000000) == 0)
      return (_QWORD *)v1;
    __break(1u);
  }
  v1 = *(_QWORD *)(v1 + *(int *)(v2 + 20));
  v4 = (_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_modelCatalog);
  v5 = *(_QWORD *)(*sub_10001C830(v4, v4[3]) + 112);
  if (v1 < 1 || v5 >= v1)
    return (_QWORD *)v1;
  result = sub_10001C830(v4, v4[3]);
  v1 = *(_QWORD *)(*result + 112);
  if ((v1 & 0x8000000000000000) == 0)
    return (_QWORD *)v1;
  __break(1u);
  return result;
}

void sub_10004D7E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[9];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;

  sub_10001D810();
  v2 = v1;
  sub_10007DCE8();
  sub_10007FDD4();
  __chkstk_darwin(v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002B2E0(v1 + 120, (uint64_t)&v25);
  if ((*(_QWORD *)(v1 + 120) & 0xC000000000000001) == 0)
  {
    sub_10001DAE8();
    v15 = sub_10001E338();
    sub_10007E5B0(v15, v1, (uint64_t (*)(uint64_t))sub_10004DA40);
    goto LABEL_26;
  }
  v24 = _swiftEmptySetSingleton;
  sub_10001D834(v1);
  sub_10001E338();
  sub_10007EEDC();
  v6 = sub_10007DADC();
  if (!v6)
  {
LABEL_24:
    sub_10001EBB0(v2);
    sub_100044820();
LABEL_26:
    sub_100006A68();
    return;
  }
  v7 = v6;
  v17 = v2;
  v8 = sub_10001E1D8();
  v9 = enum case for LoadState.loaded(_:);
  while (1)
  {
    v18[0] = v7;
    sub_10002B4BC((uint64_t)&v23, (uint64_t)v18, (uint64_t)&type metadata for Swift.AnyObject + 8, v8);
    sub_10002B308(v23 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, (uint64_t)v18, 33);
    sub_10001DE08((uint64_t)v5, v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 104));
    sub_100006710(&qword_1000FD7E8, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState);
    sub_10007EBC8();
    sub_10007EBC8();
    v10 = v21 == v19 && v22 == v20;
    if (v10)
      break;
    v11 = sub_10001DB04(v21, v22, v19, v20);
    sub_10001E034();
    sub_10001E420();
    sub_10001EB58((uint64_t)v5, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
    sub_10007F740();
    if ((v11 & 1) != 0)
      goto LABEL_11;
    swift_release(v23);
LABEL_22:
    v7 = __CocoaSet.Iterator.next()(v12);
    if (!v7)
    {
      v2 = v17;
      goto LABEL_24;
    }
  }
  sub_10002BA68(v22);
  sub_10001EB58((uint64_t)v5, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  sub_10007F740();
LABEL_11:
  if (v24[3] <= v24[2])
    sub_10007DF48();
  sub_10007FD58();
  sub_10007FD88();
  Hasher._finalize()();
  sub_10007CEF0();
  if (!v10)
  {
    sub_10001E178();
LABEL_21:
    sub_10007DEAC(v13);
    goto LABEL_22;
  }
  sub_10001EB2C();
  while (1)
  {
    sub_10007DA8C();
    if (v10 && (v14 & 1) != 0)
      break;
    sub_10007DB48();
    sub_10001E62C();
    if (!v10)
    {
      sub_10001E154();
      goto LABEL_21;
    }
  }
  __break(1u);
}

void sub_10004DA40(uint64_t a1)
{
  sub_10005C770(a1, (unsigned int *)&enum case for LoadState.loaded(_:));
}

void sub_10004DA4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[9];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;

  sub_10001D810();
  v2 = v1;
  sub_10007DCE8();
  sub_10007FDD4();
  __chkstk_darwin(v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002B2E0(v1 + 120, (uint64_t)&v25);
  if ((*(_QWORD *)(v1 + 120) & 0xC000000000000001) == 0)
  {
    sub_10001DAE8();
    v15 = sub_10001E338();
    sub_10007E5B0(v15, v1, (uint64_t (*)(uint64_t))sub_10004DCA8);
    goto LABEL_26;
  }
  v24 = _swiftEmptySetSingleton;
  sub_10001D834(v1);
  sub_10001E338();
  sub_10007EEDC();
  v6 = sub_10007DADC();
  if (!v6)
  {
LABEL_24:
    sub_10001EBB0(v2);
    sub_100044820();
LABEL_26:
    sub_100006A68();
    return;
  }
  v7 = v6;
  v17 = v2;
  v8 = sub_10001E1D8();
  v9 = enum case for LoadState.dynamicMode(_:);
  while (1)
  {
    v18[0] = v7;
    sub_10002B4BC((uint64_t)&v23, (uint64_t)v18, (uint64_t)&type metadata for Swift.AnyObject + 8, v8);
    sub_10002B308(v23 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, (uint64_t)v18, 33);
    sub_10001DE08((uint64_t)v5, v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 104));
    sub_100006710(&qword_1000FD7E8, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState);
    sub_10007EBC8();
    sub_10007EBC8();
    v10 = v21 == v19 && v22 == v20;
    if (v10)
      break;
    v11 = sub_10001DB04(v21, v22, v19, v20);
    sub_10001E034();
    sub_10001E420();
    sub_10001EB58((uint64_t)v5, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
    sub_10007F740();
    if ((v11 & 1) != 0)
      goto LABEL_11;
    swift_release(v23);
LABEL_22:
    v7 = __CocoaSet.Iterator.next()(v12);
    if (!v7)
    {
      v2 = v17;
      goto LABEL_24;
    }
  }
  sub_10002BA68(v22);
  sub_10001EB58((uint64_t)v5, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  sub_10007F740();
LABEL_11:
  if (v24[3] <= v24[2])
    sub_10007DF48();
  sub_10007FD58();
  sub_10007FD88();
  Hasher._finalize()();
  sub_10007CEF0();
  if (!v10)
  {
    sub_10001E178();
LABEL_21:
    sub_10007DEAC(v13);
    goto LABEL_22;
  }
  sub_10001EB2C();
  while (1)
  {
    sub_10007DA8C();
    if (v10 && (v14 & 1) != 0)
      break;
    sub_10007DB48();
    sub_10001E62C();
    if (!v10)
    {
      sub_10001E154();
      goto LABEL_21;
    }
  }
  __break(1u);
}

void sub_10004DCA8(uint64_t a1)
{
  sub_10005C770(a1, (unsigned int *)&enum case for LoadState.dynamicMode(_:));
}

void sub_10004DCB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  char v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[9];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  sub_10001D810();
  v2 = 0;
  v44 = sub_10007D9D8();
  sub_10002BCBC();
  __chkstk_darwin(v3);
  sub_10001E2C0();
  __chkstk_darwin(v4);
  sub_10007FD38();
  v42 = v5;
  v6 = sub_10007DCE8();
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_10001EB18();
  v41 = v8;
  sub_10001E148();
  __chkstk_darwin(v9);
  v11 = (char *)&v35 - v10;
  sub_10002B2E0(v0 + 120, (uint64_t)&v52);
  v12 = *(_QWORD *)(v0 + 120);
  if ((v12 & 0xC000000000000001) != 0)
  {
    v37 = 0;
    sub_10007FD1C();
    v36 = v0;
    sub_10001D834(v13);
    sub_10001E3E0();
    v43 = sub_10007E814();
    v14 = sub_10007DADC();
    if (v14)
    {
      v15 = v14;
      v40 = sub_10001E1D8();
      v39 = enum case for LoadState.loaded(_:);
      v38 = (uint64_t)&type metadata for Swift.AnyObject + 8;
      v16 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState;
      while (1)
      {
        v45[0] = v15;
        sub_10002B4BC((uint64_t)&v50, (uint64_t)v45, v38, v40);
        v17 = v50 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
        sub_10002B308(v50 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, (uint64_t)v45, 33);
        sub_10001EB74((uint64_t)v11, v39, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 104));
        sub_100006710(&qword_1000FD7E8, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState);
        v19 = v18;
        sub_10007EBE0();
        sub_10007EBE0();
        v20 = sub_10007ED90();
        v22 = v22 && v11 == (char *)v12;
        if (v22)
          break;
        v23 = sub_10001DB04(v20, (uint64_t)v11, v21, v12);
        sub_10001E034();
        sub_100049010();
        sub_10007EE20();
        v24 = v16;
        sub_10001EB74(v41, (uint64_t)v11, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));
        if ((v23 & 1) != 0)
          goto LABEL_16;
        sub_10007EBE0();
        sub_10007EBE0();
        v19 = v49;
        if (v48 == v46 && v49 == v47)
        {
          sub_10002BA68(v49);
          v24 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState;
          goto LABEL_16;
        }
        v26 = v12;
        v12 = sub_10001DB04(v48, v49, v46, v47);
        sub_10001D8B4();
        sub_10001E034();
        sub_10007F67C();
        v16 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState;
        sub_10007E48C(v26);
        sub_1000801C4();
        sub_10007F27C(v17, v1);
        if ((v12 & 1) == 0)
        {
          sub_10007E48C(v1);
          sub_10007E670();
LABEL_18:
          v28 = sub_10007F664();
          goto LABEL_30;
        }
LABEL_17:
        v27 = sub_10007F68C();
        sub_10007E48C(v27);
        sub_10007E670();
        if (v19)
          goto LABEL_18;
        v29 = v51;
        sub_10007FC98();
        if (!(!v22 & v30))
        {
          sub_10007DF48();
          v29 = v51;
        }
        sub_10007F65C(*(_QWORD *)(v29 + 40));
        sub_10007FCC4();
        sub_10007F654();
        sub_10007CEF0();
        if (v22)
        {
          sub_10001EB2C();
          while (1)
          {
            sub_10007DA8C();
            if (v22 && (v32 & 1) != 0)
              break;
            sub_10007DB48();
            sub_10001E62C();
            if (!v22)
            {
              sub_10001E154();
              goto LABEL_29;
            }
          }
          __break(1u);
LABEL_38:
          sub_10007FC6C();
          __break(1u);
          return;
        }
        sub_10001E178();
LABEL_29:
        sub_10007DF14(v31);
LABEL_30:
        v15 = __CocoaSet.Iterator.next()(v28);
        if (!v15)
          goto LABEL_33;
      }
      sub_10002BA68((uint64_t)v11);
      sub_10007EE20();
      v24 = v16;
      sub_10001EB74(v41, (uint64_t)v11, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));
LABEL_16:
      sub_10007F67C();
      sub_10002ACC4(v12, v24);
      sub_1000801C4();
      sub_10002AC98(v17, v1, v24);
      v16 = v24;
      goto LABEL_17;
    }
LABEL_33:
    sub_10001EBB0(v36);
    swift_release(v43);
    v2 = v37;
  }
  else
  {
    sub_10001E194();
    v33 = sub_10001E3E0();
    sub_10007DF5C(v33, v34, (uint64_t (*)(uint64_t))sub_10004E0B0);
  }
  v45[0] = (uint64_t)sub_1000800B4();
  sub_10007E058(v45, (uint64_t (*)(uint64_t, uint64_t))sub_10004E1DC);
  if (v2)
    goto LABEL_38;
  sub_10001D930();
  sub_100006A68();
}

BOOL sub_10004E0B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t State;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  char v10;
  _BOOL8 v11;
  uint64_t v13;

  v2 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for LoadState(0);
  v6 = *(_QWORD *)(State - 8);
  __chkstk_darwin(State);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LoadState.loaded(_:), State);
  sub_100080244();
  v10 = v9;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, State);
  sub_10002AC98(a1, (uint64_t)v4, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  v11 = (v10 & 1) != 0 && *(_QWORD *)(*(_QWORD *)&v4[*(int *)(v2 + 48)] + 16) == 0;
  sub_10002ACC4((uint64_t)v4, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  return v11;
}

void sub_10004E1E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[9];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;

  sub_10001D810();
  v30 = sub_10007D9D8();
  sub_10002BCBC();
  __chkstk_darwin(v4);
  sub_10001E2C0();
  __chkstk_darwin(v5);
  sub_10007F6F0();
  v6 = sub_10007DCE8();
  sub_10007F624();
  __chkstk_darwin(v7);
  sub_10001E168();
  v10 = v9 - v8;
  sub_10002B2E0(v0 + 120, (uint64_t)&v38);
  v11 = *(_QWORD *)(v0 + 120);
  if ((v11 & 0xC000000000000001) == 0)
  {
    sub_10001E194();
    v25 = sub_10007F0CC();
    sub_100075108(v25, v0, (uint64_t (*)(uint64_t))sub_10004E550);
    goto LABEL_31;
  }
  v37 = &_swiftEmptySetSingleton;
  if (v11 < 0)
    v12 = v11;
  else
    v12 = v11 & 0xFFFFFFFFFFFFFF8;
  v26 = v0;
  sub_10001D834(v0);
  sub_10007F0CC();
  v29 = __CocoaSet.makeIterator()(v12);
  v13 = sub_10007DADC();
  if (!v13)
  {
LABEL_29:
    sub_10001EBB0(v26);
    swift_release(v29);
LABEL_31:
    v31[0] = (uint64_t)sub_1000800B4();
    sub_10007E058(v31, (uint64_t (*)(uint64_t, uint64_t))sub_10004E574);
    sub_10001D930();
    sub_100006A68();
    return;
  }
  v14 = v13;
  v28 = sub_10001E1D8();
  v27 = enum case for LoadState.loaded(_:);
  while (1)
  {
    v31[0] = v14;
    sub_10002B4BC((uint64_t)&v36, (uint64_t)v31, (uint64_t)&type metadata for Swift.AnyObject + 8, v28);
    v15 = v36 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    sub_10002B308(v36 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, (uint64_t)v31, 33);
    sub_10001EB74(v10, v27, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 104));
    sub_100006710(&qword_1000FD7E8, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState);
    sub_10007DE54(v6);
    sub_10007DE54(v6);
    v16 = v34 == v32 && v35 == v33;
    if (v16)
      break;
    v17 = sub_10001DB04(v34, v35, v32, v33);
    sub_10001E034();
    sub_10002B684();
    sub_10002BADC(v10, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    sub_10007E94C(v15, v3);
    if ((v17 & 1) != 0)
      goto LABEL_14;
    sub_10007ED88(v3);
    sub_10007E94C(v15, v2);
LABEL_15:
    sub_10007ED88(v2);
    sub_10007E670();
    v19 = sub_10007F664();
LABEL_16:
    v14 = __CocoaSet.Iterator.next()(v19);
    if (!v14)
      goto LABEL_29;
  }
  sub_10002BA68(v35);
  sub_10002BADC(v10, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_10007E94C(v15, v3);
LABEL_14:
  v18 = *(_QWORD *)(*(_QWORD *)(v3 + *(int *)(v30 + 44)) + 16);
  sub_10007ED88(v3);
  sub_10007E94C(v15, v2);
  if (v18)
    goto LABEL_15;
  v20 = sub_10007F68C();
  sub_10007ED88(v20);
  sub_10007E670();
  v21 = v37;
  sub_10007FC98();
  if (!(!v16 & v22))
  {
    sub_10007DF48();
    v21 = v37;
  }
  sub_10007F65C(v21[5]);
  sub_10007FCC4();
  sub_10007F654();
  sub_10007CEF0();
  if (!v16)
  {
    sub_10001E178();
LABEL_28:
    sub_10007DF14(v23);
    goto LABEL_16;
  }
  sub_10001EB2C();
  while (1)
  {
    sub_10007DA8C();
    if (v16 && (v24 & 1) != 0)
      break;
    sub_10007DB48();
    sub_10001E62C();
    if (!v16)
    {
      sub_10001E154();
      goto LABEL_28;
    }
  }
  __break(1u);
  sub_10007FC6C();
  __break(1u);
}

#error "10004E560: call analysis failed (funcsize=9)"

void sub_10004E578()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[9];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;

  sub_10001D810();
  v4 = 0;
  v53 = sub_10007D9D8();
  sub_10002BCBC();
  __chkstk_darwin(v5);
  sub_10001E2C0();
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v42 - v8;
  __chkstk_darwin(v7);
  v11 = (char *)&v42 - v10;
  v12 = sub_10007DCE8();
  v44 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_10007E1D8();
  __chkstk_darwin(v13);
  sub_10007FD38();
  v52 = v14;
  sub_10002B2E0(v1 + 120, (uint64_t)&v61);
  if ((*(_QWORD *)(v1 + 120) & 0xC000000000000001) != 0)
  {
    v50 = v0;
    v43 = 0;
    sub_10007FD1C();
    v42 = v1;
    sub_10001D834(v15);
    sub_10001E3E0();
    v51 = sub_10007E814();
    v16 = sub_10007DADC();
    if (v16)
    {
      v17 = v16;
      v48 = sub_10001E1D8();
      v47 = enum case for LoadState.loaded(_:);
      v46 = (uint64_t)&type metadata for Swift.AnyObject + 8;
      sub_10007F608();
      v49 = v2;
      while (1)
      {
        v54[0] = v17;
        sub_10002B4BC((uint64_t)&v59, (uint64_t)v54, v46, v48);
        v18 = v59 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
        sub_10002B308(v59 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, (uint64_t)v54, 33);
        v19 = v52;
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v52, v47, v12);
        sub_100006710(&qword_1000FD7E8, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState);
        v21 = v20;
        sub_10007E6A0(v12);
        sub_10007E6A0(v12);
        v22 = v57 == v55 && v58 == v56;
        if (v22)
          break;
        v45 = sub_10001DB04(v57, v58, v55, v56);
        sub_10001E034();
        sub_100006C48();
        v23 = (uint64_t)v11;
        sub_10007DD78(v18, (uint64_t)v11);
        v24 = v50;
        sub_100080044(v50, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
        v25 = v24;
        v11 = (char *)v23;
        if ((v45 & 1) != 0)
          goto LABEL_16;
        sub_10007E6A0(v12);
        sub_10007E6A0(v12);
        v26 = sub_10007ED90();
        if (v22 && v25 == v21)
        {
          sub_10002BA68(v25);
          sub_10007F608();
          v19 = v52;
          goto LABEL_16;
        }
        v29 = sub_10001DB04(v26, v25, v27, v21);
        sub_10001E034();
        sub_100049010();
        sub_10007F608();
        sub_100037ECC(v25);
        sub_10007DCD0(v23);
        sub_100037ECC(v52);
        sub_10007DD78(v18, (uint64_t)v9);
        if ((v29 & 1) == 0)
        {
          sub_10007DCD0((uint64_t)v9);
          v30 = v49;
          sub_10007DD78(v18, v49);
LABEL_18:
          sub_10007DCD0(v30);
          sub_10007E670();
LABEL_20:
          v34 = sub_10007F664();
          goto LABEL_21;
        }
LABEL_17:
        v32 = *(_QWORD *)(*(_QWORD *)&v9[*(int *)(v53 + 48)] + 16);
        sub_10007DCD0((uint64_t)v9);
        v30 = v49;
        sub_10007DD78(v18, v49);
        if (v32)
          goto LABEL_18;
        v33 = *(_QWORD *)(*(_QWORD *)(v30 + *(int *)(v53 + 44)) + 16);
        sub_10007DCD0(v30);
        sub_10007E670();
        if (v33)
          goto LABEL_20;
        v35 = v59;
        v36 = v60;
        if (v60[3] <= v60[2])
        {
          sub_10007DF48();
          v36 = v60;
        }
        sub_10007F65C(v36[5]);
        sub_10007ED80();
        sub_10007F654();
        sub_10007CEF0();
        if (v22)
        {
          sub_10001EB2C();
          while (1)
          {
            sub_10007DA8C();
            if (v22 && (v39 & 1) != 0)
              break;
            sub_10007DB48();
            sub_10001E62C();
            if (!v22)
            {
              sub_10001E154();
              goto LABEL_34;
            }
          }
          __break(1u);
LABEL_40:
          sub_10007FC6C();
          __break(1u);
          return;
        }
        sub_10001E178();
LABEL_34:
        *(_QWORD *)(v37 + ((v38 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v38;
        *(_QWORD *)(v36[6] + 8 * v38) = v35;
        ++v36[2];
        sub_10007F608();
LABEL_21:
        v17 = __CocoaSet.Iterator.next()(v34);
        if (!v17)
          goto LABEL_35;
      }
      sub_10002BA68(v58);
      sub_10007DD78(v18, (uint64_t)v11);
      v31 = v50;
      sub_100080044(v50, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
      v25 = v31;
LABEL_16:
      sub_100037ECC(v25);
      sub_10007DCD0((uint64_t)v11);
      sub_100037ECC(v19);
      sub_10007DD78(v18, (uint64_t)v9);
      goto LABEL_17;
    }
LABEL_35:
    sub_10001EBB0(v42);
    swift_release(v51);
    v4 = v43;
  }
  else
  {
    sub_10001E194();
    v40 = sub_10001E3E0();
    sub_10007DF5C(v40, v41, (uint64_t (*)(uint64_t))sub_10004EA8C);
  }
  v54[0] = (uint64_t)sub_1000800B4();
  sub_10007E058(v54, (uint64_t (*)(uint64_t, uint64_t))sub_10004E574);
  if (v4)
    goto LABEL_40;
  sub_10001D930();
  sub_100006A68();
}

BOOL sub_10004EA8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t State;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  char v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v17;

  v2 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v17 - v6;
  State = type metadata accessor for LoadState(0);
  v9 = *(_QWORD *)(State - 8);
  __chkstk_darwin(State);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for LoadState.loaded(_:), State);
  sub_100080244();
  v13 = v12;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, State);
  sub_10002AC98(a1, (uint64_t)v7, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  if ((v13 & 1) == 0)
  {
    sub_10002ACC4((uint64_t)v7, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    sub_10002AC98(a1, (uint64_t)v5, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    goto LABEL_5;
  }
  v14 = *(_QWORD *)(*(_QWORD *)&v7[*(int *)(v2 + 48)] + 16);
  sub_10002ACC4((uint64_t)v7, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  sub_10002AC98(a1, (uint64_t)v5, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  if (v14)
  {
LABEL_5:
    v15 = 0;
    goto LABEL_6;
  }
  v15 = *(_QWORD *)(*(_QWORD *)&v5[*(int *)(v2 + 44)] + 16) == 0;
LABEL_6:
  sub_10002ACC4((uint64_t)v5, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  return v15;
}

uint64_t sub_10004EC2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  sub_10001D810();
  v28 = v1;
  v29 = v2;
  v4 = v3;
  v6 = v5;
  v7 = sub_10007F428();
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_10007E1D8();
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - v10;
  v12 = sub_10007D9D8();
  v13 = v6 + *(int *)(v12 + 36);
  v14 = v6 + *(int *)(v12 + 32);
  sub_100006710(&qword_1000FD888, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  v15 = sub_10007F9B0();
  v17 = sub_10007FCA4(v15, v16);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  if ((v17 & 1) != 0)
    v19 = v14;
  else
    v19 = v13;
  v18(v11, v19, v7);
  v20 = v4 + *(int *)(v12 + 36);
  v21 = v4 + *(int *)(v12 + 32);
  if ((sub_10007FCA4(v21, v20) & 1) != 0)
    v22 = v21;
  else
    v22 = v20;
  v18((char *)v0, v22, v7);
  v23 = ((uint64_t (*)(char *, uint64_t))static Date.< infix(_:_:))(v11, v0);
  v24 = *(void (**)(uint64_t))(v8 + 8);
  sub_10007F758(v0);
  v25 = sub_10007E4F0();
  v24(v25);
  return v23 & 1;
}

uint64_t sub_10004ED50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[22] = a4;
  v5[23] = v4;
  v5[20] = a2;
  v5[21] = a3;
  v5[19] = a1;
  v6 = sub_10002BA0C();
  v5[24] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[25] = v7;
  v5[26] = sub_10001D800(v7);
  v8 = sub_100002F78(&qword_1000FB2D8);
  v5[27] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[28] = v9;
  v5[29] = sub_10001D800(v9);
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_10004EDBC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)swift_task_alloc(dword_1000FCE84);
  *(_QWORD *)(v0 + 240) = v1;
  v2 = sub_10007ED24(v1);
  return sub_10007DAB0(v2, v3);
}

uint64_t sub_10004EE0C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 248) = v1;
  swift_task_dealloc(v3);
  return sub_10001D6DC();
}

uint64_t sub_10004EE60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  sub_10002B628();
  sub_10007FDAC(v9 + 16, v10, &qword_1000FBEB0);
  if (*(_QWORD *)(v9 + 120))
  {
    v12 = (__int128 *)sub_10002BE5C();
    sub_10000667C(v12, v13);
    v14 = (_QWORD *)swift_task_alloc(dword_1000FD44C);
    *(_QWORD *)(v9 + 256) = v14;
    *v14 = v9;
    v14[1] = sub_10004F0AC;
    return sub_10007E1AC(*(_QWORD *)(v9 + 152), v9 + 56);
  }
  else
  {
    sub_10002BBF0(v11, &qword_1000FBEB0);
    if (qword_1000FB108 != -1)
      swift_once(&qword_1000FB108, sub_10004D568);
    v17 = *(_QWORD *)(v9 + 200);
    v16 = *(_QWORD *)(v9 + 208);
    v18 = *(_QWORD *)(v9 + 176);
    v19 = sub_10001DD64();
    v20 = sub_100002FF8(v19, (uint64_t)qword_1000FD390);
    sub_10001DE08(v16, v18, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 16));
    v21 = sub_10001E694();
    v22 = static os_log_type_t.error.getter();
    if (sub_10002B3F8(v21))
    {
      v20 = sub_10001D8D4(12);
      v42 = sub_10001D8D4(32);
      sub_10007FBCC(4.8149e-34);
      sub_100006710(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
      v24 = sub_10007E0E8(v23);
      sub_10007F158(v24, v25, v26, v27, v28);
      *(_QWORD *)(v9 + 136) = v29;
      sub_10001EB6C(v9 + 136, v9 + 144, a9);
      sub_10002B684();
      sub_10001E79C();
      sub_10001E18C((void *)&_mh_execute_header, v21, v22, "claimAssets attempted with unrecognized InferenceProvider %s", (uint8_t *)v20);
      sub_10001DBB8(v42);
      sub_10001D790(v42);
      sub_10001D790(v20);
    }
    else
    {
      sub_10001E79C();
    }

    v30 = sub_10002B8A0();
    sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_10002B560(v30, v31);
    *(_QWORD *)v20 = sub_100080204();
    *(_QWORD *)(v20 + 8) = v32;
    v33 = sub_10001DE08(v20, enum case for ModelManagerError.unrecognizedInferenceProvider(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 104));
    v41 = swift_willThrow(v33, v34, v35, v36, v37, v38, v39, v40);
    sub_10007DCF0(v41, &qword_1000FBEB0);
    sub_10007FBB8();
    sub_10001E330();
    return sub_100039E04(*(uint64_t (**)(void))(v9 + 8));
  }
}

uint64_t sub_10004F0AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;

  sub_10001E0D8();
  sub_10007EFB4();
  v0[33] = v3;
  v0[34] = v1;
  sub_10002BD30(v4);
  if (v1)
    return sub_10001D6DC();
  v6 = (_QWORD *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
  v0[35] = v6;
  *v6 = v2;
  v6[1] = sub_10004F138;
  return sub_10007E098();
}

uint64_t sub_10004F138()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 280));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_10004F170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(void);
  uint64_t v49;
  uint64_t v50;

  sub_10001E6D4();
  a25 = v27;
  a26 = v28;
  a24 = v26;
  if (*(_BYTE *)(v26 + 288))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v26 + 264));
    v29 = sub_10000650C((_QWORD *)(v26 + 56));
    sub_10007DCF0(v29, &qword_1000FBEB0);
  }
  else
  {
    if (qword_1000FB108 != -1)
      swift_once(&qword_1000FB108, sub_10004D568);
    v31 = *(_QWORD *)(v26 + 224);
    v30 = *(_QWORD *)(v26 + 232);
    v32 = *(NSObject **)(v26 + 216);
    v33 = *(_QWORD *)(v26 + 160);
    v34 = sub_10001DD64();
    sub_100002FF8(v34, (uint64_t)qword_1000FD390);
    sub_10001DE08(v30, v33, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 16));
    sub_100044AF0();
    v35 = sub_1000449A8();
    v36 = sub_10001E264(v32);
    v37 = *(_QWORD *)(v26 + 216);
    if (v36)
    {
      v49 = *(_QWORD *)(v26 + 224);
      v38 = (uint8_t *)sub_10001D8D4(12);
      v50 = sub_10001D8D4(32);
      a14 = v50;
      *(_DWORD *)v38 = 136315138;
      sub_100006744(&qword_1000FBE80, &qword_1000FB2D8);
      v40 = dispatch thunk of CustomStringConvertible.description.getter(v37, v39);
      sub_1000102C0(v40, v41, &a14);
      *(_QWORD *)(v26 + 144) = v42;
      sub_10007D824(v26 + 144, v26 + 152, (uint64_t)(v38 + 4));
      sub_10002B684();
      sub_10007F878(v49);
      sub_10001E18C((void *)&_mh_execute_header, v32, v35, "Session %s is foreground, marking assets as in use by the session", v38);
      sub_10001DBB8(v50);
      sub_10001D790(v50);
      sub_10001D790((uint64_t)v38);
    }
    else
    {
      sub_10007F878(*(_QWORD *)(v26 + 224));
    }

    v43 = *(_QWORD *)(v26 + 184);
    v44 = *(_QWORD *)(v26 + 160);
    v45 = sub_10007DB04();
    *(_QWORD *)(v45 + 16) = v43;
    *(_QWORD *)(v45 + 24) = v44;
    sub_10007FCBC((void (*)(uint64_t *))sub_10007CEA0, v45);
    sub_10002B504();
    v46 = sub_10000650C((_QWORD *)(v26 + 56));
    sub_10007DCF0(v46, &qword_1000FBEB0);
    sub_10001E034();
  }
  sub_10007FBB8();
  sub_10001E330();
  v47 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_10001DBC8(v47);
}

uint64_t sub_10004F368()
{
  uint64_t v0;

  sub_10007FBAC();
  sub_10001D938();
  return sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10004F398()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_10007F480();
  sub_10002BBF0(v1, &qword_1000FBEB0);
  sub_10007FBAC();
  sub_10001D938();
  return sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10004F3D8(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  int64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  _QWORD v32[6];
  uint64_t v33;

  v4 = v3;
  v5 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    if (a3 < 0)
      v7 = a3;
    else
      v7 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v8 = __CocoaSet.makeIterator()(v7);
    v9 = type metadata accessor for InferenceProviderAsset(0);
    sub_100006710(&qword_1000FB768, type metadata accessor for InferenceProviderAsset);
    result = Set.Iterator.init(_cocoa:)(v8, v9, v10);
    v5 = v32[1];
    v31 = v32[2];
    v12 = v32[3];
    v13 = v32[4];
    v14 = v32[5];
  }
  else
  {
    v15 = -1 << *(_BYTE *)(a3 + 32);
    v31 = a3 + 56;
    v16 = ~v15;
    v17 = -v15;
    if (v17 < 64)
      v18 = ~(-1 << v17);
    else
      v18 = -1;
    v14 = v18 & *(_QWORD *)(a3 + 56);
    result = swift_bridgeObjectRetain(a3);
    v12 = v16;
    v13 = 0;
  }
  v30 = (unint64_t)(v12 + 64) >> 6;
  if (v5 < 0)
    goto LABEL_13;
LABEL_11:
  if (v14)
  {
    v19 = (v14 - 1) & v14;
    v20 = __clz(__rbit64(v14)) | (v13 << 6);
    v21 = v13;
    goto LABEL_27;
  }
  v21 = v13 + 1;
  if (!__OFADD__(v13, 1))
  {
    if (v21 >= v30)
      goto LABEL_38;
    v26 = *(_QWORD *)(v31 + 8 * v21);
    if (!v26)
    {
      v27 = v13 + 2;
      if (v13 + 2 >= v30)
        goto LABEL_38;
      v26 = *(_QWORD *)(v31 + 8 * v27);
      if (v26)
        goto LABEL_25;
      v27 = v13 + 3;
      if (v13 + 3 >= v30)
        goto LABEL_38;
      v26 = *(_QWORD *)(v31 + 8 * v27);
      if (v26)
        goto LABEL_25;
      v27 = v13 + 4;
      if (v13 + 4 >= v30)
        goto LABEL_38;
      v26 = *(_QWORD *)(v31 + 8 * v27);
      if (v26)
      {
LABEL_25:
        v21 = v27;
      }
      else
      {
        v21 = v13 + 5;
        if (v13 + 5 >= v30)
          goto LABEL_38;
        v26 = *(_QWORD *)(v31 + 8 * v21);
        if (!v26)
        {
          v28 = v13 + 6;
          while (v28 < v30)
          {
            v26 = *(_QWORD *)(v31 + 8 * v28++);
            if (v26)
            {
              v21 = v28 - 1;
              goto LABEL_26;
            }
          }
          goto LABEL_38;
        }
      }
    }
LABEL_26:
    v19 = (v26 - 1) & v26;
    v20 = __clz(__rbit64(v26)) + (v21 << 6);
LABEL_27:
    v25 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
    swift_retain(v25);
    if (v25)
    {
      while (1)
      {
        v33 = v25;
        a1(&v33);
        result = swift_release(v25);
        if (v4)
          break;
        v13 = v21;
        v14 = v19;
        if ((v5 & 0x8000000000000000) == 0)
          goto LABEL_11;
LABEL_13:
        v22 = __CocoaSet.Iterator.next()(result);
        if (v22)
        {
          v23 = v22;
          v32[0] = v22;
          v24 = type metadata accessor for InferenceProviderAsset(0);
          swift_unknownObjectRetain(v23);
          swift_dynamicCast(&v33, v32, (char *)&type metadata for Swift.AnyObject + 8, v24, 7);
          v25 = v33;
          swift_unknownObjectRelease(v23);
          v21 = v13;
          v19 = v14;
          if (v25)
            continue;
        }
        goto LABEL_38;
      }
      v29 = v5;
      return sub_10001CD34(v29);
    }
LABEL_38:
    v29 = v5;
    return sub_10001CD34(v29);
  }
  __break(1u);
  return result;
}

uint64_t sub_10004F6D0(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v4 = v3;
  if ((unint64_t)a3 >> 62)
    goto LABEL_16;
  v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  if (!v7)
    return swift_bridgeObjectRelease(a3);
  while (1)
  {
    while (__OFSUB__(v7--, 1))
    {
      __break(1u);
LABEL_14:
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      if (a3 < 0)
        v11 = a3;
      else
        v11 = a3 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a3);
      v7 = _CocoaArrayWrapper.endIndex.getter(v11);
      if (!v7)
        return swift_bridgeObjectRelease(a3);
    }
    if ((a3 & 0xC000000000000001) != 0)
    {
      v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, a3);
      goto LABEL_9;
    }
    if ((v7 & 0x8000000000000000) != 0)
      goto LABEL_14;
    if (v7 >= *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_15;
    v9 = *(_QWORD *)(a3 + 32 + 8 * v7);
    swift_retain(v9);
LABEL_9:
    v12 = v9;
    a1(&v12);
    if (v4)
      break;
    swift_release(v9);
    if (!v7)
      return swift_bridgeObjectRelease(a3);
  }
  swift_bridgeObjectRelease(a3);
  return swift_release(v9);
}

void sub_10004F7F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t i;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[4];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v38 = a3;
  v37 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  v5 = __chkstk_darwin(v37);
  v36 = (uint64_t)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v31 - v7;
  v9 = *(_QWORD *)(a1 + 56);
  v34 = a1 + 56;
  v10 = 1 << *(_BYTE *)(a1 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v32 = a2;
  v13 = a2 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  v43 = a1;
  swift_bridgeObjectRetain(a1);
  swift_beginAccess(v13, v42, 0, 0);
  v14 = 0;
  v35 = (unint64_t)(v10 + 63) >> 6;
  v15 = v38;
  if (!v12)
    goto LABEL_5;
LABEL_4:
  v16 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v16 | (v14 << 6); ; i = __clz(__rbit64(v19)) + (v14 << 6))
  {
    v21 = (uint64_t *)(*(_QWORD *)(v43 + 48) + 16 * i);
    v23 = *v21;
    v22 = v21[1];
    sub_10002AC98(v13, (uint64_t)v8, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    swift_bridgeObjectRetain_n(v22, 2);
    swift_retain();
    sub_100012168((uint64_t)&v39, v23, v22, v24, v25, v26, v27, v28, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41,
      v42[0],
      v42[1],
      v42[2],
      v42[3],
      v43,
      v44,
      v45,
      v46,
      v47,
      v48,
      v49);
    v29 = v40;
    swift_release(v15);
    swift_bridgeObjectRelease(v29);
    v30 = v36;
    sub_10002AC98((uint64_t)v8, v36, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    swift_beginAccess(v13, &v39, 33, 0);
    sub_10007BDF8(v30, v13);
    swift_endAccess(&v39);
    sub_10002ACC4((uint64_t)v8, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    swift_bridgeObjectRelease(v22);
    if (v12)
      goto LABEL_4;
LABEL_5:
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v35)
      goto LABEL_23;
    v19 = *(_QWORD *)(v34 + 8 * v18);
    ++v14;
    if (!v19)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v35)
        goto LABEL_23;
      v19 = *(_QWORD *)(v34 + 8 * v14);
      if (!v19)
      {
        v14 = v18 + 2;
        if (v18 + 2 >= v35)
          goto LABEL_23;
        v19 = *(_QWORD *)(v34 + 8 * v14);
        if (!v19)
        {
          v14 = v18 + 3;
          if (v18 + 3 >= v35)
            goto LABEL_23;
          v19 = *(_QWORD *)(v34 + 8 * v14);
          if (!v19)
            break;
        }
      }
    }
LABEL_20:
    v12 = (v19 - 1) & v19;
  }
  v20 = v18 + 4;
  if (v20 >= v35)
  {
LABEL_23:
    swift_release(v32);
    swift_release(v43);
    swift_release(v38);
    return;
  }
  v19 = *(_QWORD *)(v34 + 8 * v20);
  if (v19)
  {
    v14 = v20;
    goto LABEL_20;
  }
  while (1)
  {
    v14 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v14 >= v35)
      goto LABEL_23;
    v19 = *(_QWORD *)(v34 + 8 * v14);
    ++v20;
    if (v19)
      goto LABEL_20;
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_10004FAE8(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v4 + 176) = a3;
  *(_QWORD *)(v4 + 184) = v3;
  *(_BYTE *)(v4 + 412) = a2;
  *(_QWORD *)(v4 + 168) = a1;
  v5 = sub_10002BA0C();
  *(_QWORD *)(v4 + 192) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 200) = v6;
  *(_QWORD *)(v4 + 208) = sub_10001D800(v6);
  v7 = sub_100002F78(&qword_1000FD7E0);
  *(_QWORD *)(v4 + 216) = sub_10002B1BC(*(_QWORD *)(v7 - 8));
  *(_QWORD *)(v4 + 224) = sub_10001E784();
  v8 = sub_100002F78(&qword_1000FD820);
  *(_QWORD *)(v4 + 232) = sub_10001D800(*(_QWORD *)(v8 - 8));
  v9 = sub_100002F78(&qword_1000FB920);
  *(_QWORD *)(v4 + 240) = sub_10001D800(*(_QWORD *)(v9 - 8));
  v10 = sub_10007D89C();
  *(_QWORD *)(v4 + 248) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v4 + 256) = v11;
  *(_QWORD *)(v4 + 264) = sub_10002B1BC(v11);
  *(_QWORD *)(v4 + 272) = sub_10001E784();
  sub_10001D7B8();
  return sub_10001D6DC();
}

uint64_t sub_10004FBA8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)swift_task_alloc(dword_1000FCE84);
  *(_QWORD *)(v0 + 280) = v1;
  v2 = sub_10007ED24(v1);
  return sub_10007DAB0(v2, v3);
}

uint64_t sub_10004FBF8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 288) = v1;
  swift_task_dealloc(v3);
  return sub_10001D6DC();
}

uint64_t sub_10004FC4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  os_log_type_t v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  sub_10002B628();
  a23 = v26;
  a24 = v27;
  a22 = v24;
  sub_10007FDAC(v24 + 16, v28, &qword_1000FBEB0);
  if (*(_QWORD *)(v24 + 120))
  {
    v30 = (__int128 *)sub_10007FB5C();
    sub_10000667C(v30, v31);
    if (qword_1000FB108 != -1)
      swift_once(&qword_1000FB108, sub_10004D568);
    v32 = *(NSObject **)(v24 + 168);
    v33 = sub_10001DD64();
    *(_QWORD *)(v24 + 296) = sub_100002FF8(v33, (uint64_t)qword_1000FD390);
    sub_10001EBA8((uint64_t)v32);
    sub_100037C24();
    v34 = sub_10001E9D0();
    v35 = sub_10007D4C8(v34);
    v36 = *(_QWORD *)(v24 + 168);
    if (v35)
    {
      v37 = sub_10001D8D4(22);
      v70 = sub_10001D8D4(32);
      a12 = v70;
      *(_DWORD *)v37 = 134218242;
      *(_QWORD *)(v24 + 152) = *(_QWORD *)(v36 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v24 + 152, v24 + 160, v37 + 4);
      *(_WORD *)(v37 + 12) = 2080;
      if (*(_QWORD *)(v36 + 16) == 1)
        v39 = 0;
      else
        v39 = 115;
      sub_10007D73C(v39, v38, &a12);
      *(_QWORD *)(v24 + 160) = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v24 + 160, v24 + 168, v37 + 14);
      sub_10002BA68(v36);
      sub_10001E8A8();
      sub_10002B4A0((void *)&_mh_execute_header, v32, v25, "Force loading in %ld asset%s", (uint8_t *)v37);
      sub_10001DBB8(v70);
      sub_10001D790(v70);
      sub_10001D790(v37);

    }
    else
    {

      sub_10002BA68(v36);
    }
    v55 = (_QWORD *)swift_task_alloc(dword_1000FD44C);
    *(_QWORD *)(v24 + 304) = v55;
    v56 = sub_10007FA1C(v55, (uint64_t)sub_100050008);
    return sub_10007E1AC(v56, v24 + 56);
  }
  else
  {
    sub_10002BBF0(v29, &qword_1000FBEB0);
    if (qword_1000FB108 != -1)
      swift_once(&qword_1000FB108, sub_10004D568);
    v42 = *(_QWORD *)(v24 + 200);
    v41 = *(_QWORD *)(v24 + 208);
    v43 = *(_QWORD *)(v24 + 176);
    v44 = sub_10001DD64();
    v45 = sub_100002FF8(v44, (uint64_t)qword_1000FD390);
    sub_10001DE08(v41, v43, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 16));
    v46 = sub_10001E694();
    v47 = static os_log_type_t.error.getter();
    if (sub_10002B3F8(v46))
    {
      v45 = sub_10001D8D4(12);
      v71 = sub_10001D8D4(32);
      a12 = v71;
      sub_10007FBCC(4.8149e-34);
      sub_100006710(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
      v49 = sub_10007E0E8(v48);
      sub_10007F158(v49, v50, v51, v52, v53);
      *(_QWORD *)(v24 + 136) = v54;
      sub_10001EB6C(v24 + 136, v24 + 144, a9);
      sub_10002B684();
      sub_10001E79C();
      sub_10001E18C((void *)&_mh_execute_header, v46, v47, "forceLoadInModels attempted with unrecognized InferenceProvider %s", (uint8_t *)v45);
      sub_10001DBB8(v71);
      sub_10001D790(v71);
      sub_10001D790(v45);
    }
    else
    {
      sub_10001E79C();
    }

    v58 = sub_10002B8A0();
    sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_10002B560(v58, v59);
    *(_QWORD *)v45 = sub_100080204();
    *(_QWORD *)(v45 + 8) = v60;
    v61 = sub_10001DE08(v45, enum case for ModelManagerError.unrecognizedInferenceProvider(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 104));
    v69 = swift_willThrow(v61, v62, v63, v64, v65, v66, v67, v68);
    sub_10007DCF0(v69, &qword_1000FBEB0);
    swift_task_dealloc(*(_QWORD *)(v24 + 272));
    sub_10001E330();
    sub_10001D938();
    sub_10001EAC8();
    sub_10002B504();
    sub_10002B528();
    sub_10002B4C4();
    return sub_100039E04(*(uint64_t (**)(void))(v24 + 8));
  }
}

uint64_t sub_100050008()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  sub_10007F0B0();
  sub_10001EA4C(v3);
  v2[39] = v1;
  swift_task_dealloc(v4);
  v5 = v2[23];
  if (v1)
  {
    v6 = sub_1000505C8;
  }
  else
  {
    v2[40] = v0;
    v6 = (uint64_t (*)())sub_100050060;
  }
  return sub_100037B58((uint64_t)v6, v5, 0);
}

#error "100050150: call analysis failed (funcsize=121)"

uint64_t sub_100050260()
{
  uint64_t v0;
  uint64_t v1;

  sub_10007E760();
  sub_10002BC38(*(_QWORD *)(v0 + 256));
  if (v1)
    sub_10001E034();
  return sub_10001D6DC();
}

#error "10005037C: call analysis failed (funcsize=106)"

uint64_t sub_100050494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)();
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  sub_10001DB50();
  a17 = v20;
  a18 = v21;
  a16 = v19;
  a16 = (_QWORD *)*v19;
  v22 = a16;
  sub_10001EA4C(&a16);
  v22[48] = v18;
  swift_task_dealloc(v23);
  v24 = v22[32];
  if (v18)
  {
    v25 = v22[28];
    v26 = v22[23];
    sub_10002AD5C(v25, &qword_1000FD7E0);
    sub_10007D78C(v27, &qword_1000FD820);
    sub_10007EC14(v28, &qword_1000FB920);
    sub_10007D04C(*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8));
    sub_10001E034();
    v29 = sub_100050828;
    v30 = v26;
  }
  else
  {
    v31 = v22[33];
    v32 = v22[23];
    sub_10002AD5C(v22[28], &qword_1000FD7E0);
    sub_10007EC14(v33, &qword_1000FD820);
    sub_10007DFD8(v34, &qword_1000FB920);
    sub_10007E7EC(v31, *(uint64_t (**)(uint64_t, uint64_t))(v24 + 8));
    v29 = (uint64_t (*)())sub_10007CEBC;
    v30 = v32;
  }
  return sub_10007D2A0((uint64_t)v29, v30, 0);
}

uint64_t sub_100050578()
{
  uint64_t v0;

  sub_10001DB50();
  sub_10007E4FC();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  return sub_100037D1C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000505C8()
{
  uint64_t v0;
  uint64_t v1;

  sub_10001DB50();
  v1 = sub_10007F480();
  sub_10002BBF0(v1, &qword_1000FBEB0);
  sub_10007E4FC();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  return sub_100037D1C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100050628()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10001DB38();
  v1 = *(_QWORD *)(v0 + 184);
  sub_10001D680(*(_QWORD *)(v0 + 400));
  v2 = sub_10001E034();
  sub_10007DCF0(v2, &qword_1000FD7E0);
  return sub_100037B58((uint64_t)sub_100050680, v1, 0);
}

uint64_t sub_100050680()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_10001DB50();
  swift_willThrow(v1, v2, v3, v4, v5, v6, v7, v8);
  v9 = sub_10002BF38();
  sub_10002BBF0(v9, &qword_1000FBEB0);
  sub_10007E4FC();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  return sub_100037D1C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000506F0()
{
  NSObject *v0;
  _QWORD *v1;
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  sub_10001DB68();
  sub_10007F92C();
  sub_10002B5D4();
  v2 = sub_10002B5D4();
  Logger.logObject.getter(v2);
  v3 = sub_10001E9D0();
  if (sub_10002B3F8(v0))
  {
    v4 = (uint8_t *)sub_10001D8D4(12);
    v5 = (_QWORD *)sub_10001D8D4(8);
    *(_DWORD *)v4 = 138412290;
    sub_10002B5D4();
    v6 = sub_100044ADC();
    v1[18] = v6;
    sub_10002B2B8((uint64_t)(v1 + 18), (uint64_t)(v1 + 19));
    *v5 = v6;
    sub_10002B498();
    sub_10002B498();
    sub_10001E18C((void *)&_mh_execute_header, v0, v3, "Failed acquiring assets: %@, releasing any assets that may have been acquired", v4);
    sub_100002F78(&qword_1000FB8E0);
    sub_10001DBB8((uint64_t)v5);
    sub_10001D790((uint64_t)v5);
    sub_10001D790((uint64_t)v4);
  }
  else
  {
    sub_10002B498();
    sub_10002B498();
  }
  v7 = v1[27];

  v8 = sub_10002BCD4();
  sub_10002B26C(v7, v9, v10, v8);
  v11 = (_QWORD *)swift_task_alloc(dword_1000FD48C);
  v1[50] = v11;
  *v11 = v1;
  v11[1] = sub_100050628;
  v12 = sub_10002BD0C(v1[41]);
  return sub_10007E510(v12, v13);
}

uint64_t sub_100050828()
{
  NSObject *v0;
  _QWORD *v1;
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  sub_10001DB68();
  sub_10007F92C();
  sub_10002B5D4();
  v2 = sub_10002B5D4();
  Logger.logObject.getter(v2);
  v3 = sub_10001E9D0();
  if (sub_10002B3F8(v0))
  {
    v4 = (uint8_t *)sub_10001D8D4(12);
    v5 = (_QWORD *)sub_10001D8D4(8);
    *(_DWORD *)v4 = 138412290;
    sub_10002B5D4();
    v6 = sub_100044ADC();
    v1[18] = v6;
    sub_10002B2B8((uint64_t)(v1 + 18), (uint64_t)(v1 + 19));
    *v5 = v6;
    sub_10002B498();
    sub_10002B498();
    sub_10001E18C((void *)&_mh_execute_header, v0, v3, "Failed acquiring assets: %@, releasing any assets that may have been acquired", v4);
    sub_100002F78(&qword_1000FB8E0);
    sub_10001DBB8((uint64_t)v5);
    sub_10001D790((uint64_t)v5);
    sub_10001D790((uint64_t)v4);
  }
  else
  {
    sub_10002B498();
    sub_10002B498();
  }
  v7 = v1[27];

  v8 = sub_10002BCD4();
  sub_10002B26C(v7, v9, v10, v8);
  v11 = (_QWORD *)swift_task_alloc(dword_1000FD48C);
  v1[50] = v11;
  *v11 = v1;
  v11[1] = sub_100050628;
  v12 = sub_10002BD0C(v1[41]);
  return sub_10007E510(v12, v13);
}

void sub_100050960()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  sub_10001D810();
  v2 = v0;
  sub_100002F78(&qword_1000FB230);
  sub_10002BCBC();
  __chkstk_darwin(v3);
  sub_10007F78C();
  v4 = sub_10007E860();
  sub_10002BCBC();
  __chkstk_darwin(v5);
  sub_10001E168();
  v8 = v7 - v6;
  v9 = v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy;
  sub_10002B2E0(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy, (uint64_t)&v31);
  sub_10002AC98(v9, v8, type metadata accessor for InferenceProviderAssetManagerPolicy);
  v10 = AssetPolicy.allowAssetTimerUse.getter();
  v11 = sub_10001EC20();
  sub_100037D5C(*(_QWORD *)(v11 - 8));
  if ((v10 & 1) != 0 && *(double *)(v9 + *(int *)(v4 + 24)) > 0.0)
  {
    v12 = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_purgeInactiveAssetsTask;
    if (!*(_QWORD *)(v2 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_purgeInactiveAssetsTask))
    {
      sub_10007FF98((uint64_t (*)(uint64_t))sub_10004DCB4, sub_10007C56C);
      if ((v13 & 1) != 0)
      {
        if (qword_1000FB108 != -1)
          swift_once(&qword_1000FB108, sub_10004D568);
        v14 = sub_10001DD64();
        v15 = sub_100002FF8(v14, (uint64_t)qword_1000FD390);
        v16 = sub_10002B400();
        Logger.logObject.getter(v16);
        v17 = sub_10001E9D0();
        if (sub_10007D4C8(v17))
        {
          v18 = (uint8_t *)sub_10001D8D4(12);
          *(_DWORD *)v18 = 134217984;
          v19 = sub_10007FF7C(*(double *)(v9 + *(int *)(v4 + 24)));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v19, v20, v21);
          sub_10001D930();
          sub_10001E18C((void *)&_mh_execute_header, v15, (os_log_type_t)v8, "Starting task to purge inactive assets after %f seconds", v18);
          sub_10001D790((uint64_t)v18);
        }
        else
        {
          sub_10001D930();
        }

        v22 = sub_10001DBC0();
        sub_10002B26C(v1, v23, v24, v22);
        v25 = sub_100006A80((uint64_t)&unk_1000F3E38, 24);
        sub_10007FA94(v25);
        v26 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F3EB0, 40);
        v27 = sub_10007F974(v26);
        v29 = sub_10007FFC0((uint64_t)v27, (uint64_t)&unk_1000FD8E0, v28);
        v30 = *(_QWORD *)(v2 + v12);
        *(_QWORD *)(v2 + v12) = v29;
        sub_10007FBF0(v30);
      }
    }
  }
  sub_100006A68();
}

uint64_t sub_100050B60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_BYTE *)(v7 + 344) = a6;
  *(_QWORD *)(v7 + 120) = a5;
  *(_QWORD *)(v7 + 128) = v6;
  *(_QWORD *)(v7 + 104) = a3;
  *(_QWORD *)(v7 + 112) = a4;
  *(_QWORD *)(v7 + 88) = a1;
  *(_QWORD *)(v7 + 96) = a2;
  v8 = *(_QWORD *)(sub_100002F78(&qword_1000FD7E0) - 8);
  *(_QWORD *)(v7 + 136) = v8;
  v9 = *(_QWORD *)(v8 + 64);
  *(_QWORD *)(v7 + 144) = v9;
  *(_QWORD *)(v7 + 152) = sub_10001D828(v9);
  v10 = *(_QWORD *)(sub_100002F78(&qword_1000FD820) - 8);
  *(_QWORD *)(v7 + 160) = v10;
  v11 = *(_QWORD *)(v10 + 64);
  *(_QWORD *)(v7 + 168) = v11;
  *(_QWORD *)(v7 + 176) = sub_10001D828(v11);
  v12 = *(_QWORD *)(sub_100002F78(&qword_1000FB920) - 8);
  *(_QWORD *)(v7 + 184) = v12;
  v13 = *(_QWORD *)(v12 + 64);
  *(_QWORD *)(v7 + 192) = v13;
  *(_QWORD *)(v7 + 200) = sub_10001D828(v13);
  v14 = sub_10007D89C();
  *(_QWORD *)(v7 + 208) = v14;
  v15 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v7 + 216) = v15;
  v16 = *(_QWORD *)(v15 + 64);
  *(_QWORD *)(v7 + 224) = v16;
  *(_QWORD *)(v7 + 232) = sub_10001D828(v16);
  sub_10001D7B8();
  return sub_10001D674();
}

#error "100050DC0: call analysis failed (funcsize=307)"

uint64_t sub_100051150()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 272) = v1;
  swift_task_dealloc(v3);
  if (v1)
    sub_10001EBB8();
  sub_10001E10C();
  return sub_10001D6DC();
}

#error "1000512F8: call analysis failed (funcsize=289)"

uint64_t sub_100051688()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)sub_10007F040();
  *(_QWORD *)(v0 + 296) = v1;
  sub_10007F7C4(v1, (uint64_t)&unk_1000FD9A0);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 304) = v2;
  *v2 = v0;
  v2[1] = sub_100051700;
  sub_10007F4A4((uint64_t)&type metadata for ());
  sub_10007D5B8();
  return sub_10007D520();
}

uint64_t sub_100051700()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 312) = v1;
  swift_task_dealloc(v3);
  if (!v1)
    swift_task_dealloc(*(_QWORD *)(v0 + 296));
  sub_100037A7C();
  return sub_10001D6DC();
}

uint64_t sub_100051758()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 280));
  sub_10001D9C0();
  sub_10001E10C();
  return sub_10001D6DC();
}

#error "100051C14: call analysis failed (funcsize=330)"

uint64_t sub_100051D18()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 288));
  sub_10001E330();
  sub_10001E10C();
  return sub_10001D6DC();
}

uint64_t sub_100051D54()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 280));
  sub_10007D5FC();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  return sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100051D9C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 336) = v1;
  swift_task_dealloc(v3);
  if (v1)
    swift_release(*(_QWORD *)(v0 + 320));
  return sub_10001D6DC();
}

uint64_t sub_100051E00()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  sub_10001EBB0(*(_QWORD *)(v0 + 320));
  sub_10007D8DC();
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  v1 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_10002B7C0(v1);
}

#error "100051F8C: call analysis failed (funcsize=289)"

uint64_t sub_10005231C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 320));
  sub_10007D5FC();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  return sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100052364(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;

  *(_BYTE *)(v8 + 96) = a8;
  *(_QWORD *)(v8 + 64) = a6;
  *(_QWORD *)(v8 + 72) = a7;
  *(_QWORD *)(v8 + 48) = a4;
  *(_QWORD *)(v8 + 56) = a5;
  *(_QWORD *)(v8 + 32) = a2;
  *(_QWORD *)(v8 + 40) = a3;
  *(_QWORD *)(v8 + 80) = *a1;
  return swift_task_switch(sub_100052390, 0, 0);
}

#error "100052458: call analysis failed (funcsize=103)"

uint64_t sub_100052544()
{
  uint64_t (**v0)(void);

  sub_10001D680(*((_QWORD *)*v0 + 11));
  return sub_100006A38(v0[1]);
}

uint64_t sub_100052578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v7[32] = a6;
  v7[33] = v6;
  v7[30] = a4;
  v7[31] = a5;
  v7[28] = a2;
  v7[29] = a3;
  v7[27] = a1;
  v8 = sub_10002BA0C();
  v7[34] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[35] = v9;
  v7[36] = sub_10001D800(v9);
  v10 = sub_100002F78(&qword_1000FD7E0);
  v7[37] = sub_10002B1BC(*(_QWORD *)(v10 - 8));
  v7[38] = sub_10001E784();
  v11 = sub_100002F78(&qword_1000FD820);
  v7[39] = sub_10001D800(*(_QWORD *)(v11 - 8));
  v12 = sub_100002F78(&qword_1000FB920);
  v7[40] = sub_10001D800(*(_QWORD *)(v12 - 8));
  v13 = sub_10001EC20();
  v7[41] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v7[42] = v14;
  v7[43] = sub_10001D800(v14);
  v15 = type metadata accessor for InferenceProviderAssetManagerPolicy(0);
  v7[44] = sub_10001D800(*(_QWORD *)(v15 - 8));
  v16 = *(_QWORD *)(sub_10007F430() - 8);
  v7[45] = v16;
  v7[46] = sub_10002B1BC(v16);
  v7[47] = sub_10001E784();
  v17 = sub_100002F78(&qword_1000FB2D8);
  v7[48] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v7[49] = v18;
  v7[50] = sub_10002B1BC(v18);
  v7[51] = sub_10001E784();
  v7[52] = sub_10001E784();
  v7[53] = sub_10001E784();
  sub_10001D7B8();
  return sub_10001D6DC();
}

uint64_t sub_10005269C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1000FCE84);
  *(_QWORD *)(v0 + 432) = v1;
  *v1 = v0;
  v1[1] = sub_1000526F8;
  return sub_10007DAB0(v0 + 16, *(_QWORD *)(v0 + 240));
}

uint64_t sub_1000526F8()
{
  sub_10007E740();
  return sub_10001D6DC();
}

uint64_t sub_10005273C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  int v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t);
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  _BOOL4 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t);
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(uint64_t);
  uint64_t v102;
  uint64_t v103;
  os_log_type_t v104;
  _WORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint8_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  NSObject *v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;

  sub_10007D3EC();
  v194 = v1;
  v195 = v2;
  v193 = v0;
  v3 = v0;
  v4 = v0 + 16;
  sub_10007FDAC(v4, v5, &qword_1000FBEB0);
  v189 = v3;
  v172 = v4;
  if (!*(_QWORD *)(v3 + 120))
  {
    sub_10002BBF0(v6, &qword_1000FBEB0);
    if (qword_1000FB108 != -1)
      swift_once(&qword_1000FB108, sub_10004D568);
    v45 = *(_QWORD *)(v3 + 408);
    v46 = *(_QWORD *)(v3 + 392);
    v47 = *(_QWORD *)(v3 + 232);
    v48 = sub_10001DD64();
    sub_100002FF8(v48, (uint64_t)qword_1000FD390);
    sub_10001E0E8(v45, v47, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 16));
    v49 = sub_10007F3D8();
    v52 = sub_10001EA84(v49, v50, v51);
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.error.getter();
    v55 = sub_10007E39C(v53);
    v56 = *(_QWORD *)(v3 + 392);
    v57 = *(_QWORD *)(v3 + 280);
    v58 = *(_QWORD *)(v3 + 288);
    v59 = *(_QWORD *)(v3 + 272);
    if (v55)
    {
      v175 = *(_QWORD *)(v3 + 280);
      v60 = sub_10001D8D4(22);
      v186 = sub_10001D8D4(64);
      v192 = (_QWORD *)v186;
      *(_DWORD *)v60 = 136315394;
      sub_100006744(&qword_1000FBE80, &qword_1000FB2D8);
      v62 = sub_10002B548(v61);
      sub_1000102C0(v62, v63, (uint64_t *)&v192);
      *(_QWORD *)(v3 + 168) = v64;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 + 168, v3 + 176, v60 + 4);
      sub_10001E420();
      sub_10007ECC4(*(uint64_t (**)(uint64_t, uint64_t))(v56 + 8));
      *(_WORD *)(v60 + 12) = 2080;
      sub_100006710(&qword_1000FBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
      v66 = dispatch thunk of CustomStringConvertible.description.getter(v59, v65);
      sub_10002B7E0(v66, v67);
      *(_QWORD *)(v3 + 160) = v68;
      sub_10007DE9C(v3 + 160, v3 + 168);
      sub_10001E034();
      sub_10002BADC(v58, *(uint64_t (**)(uint64_t, uint64_t))(v175 + 8));
      sub_10002B4A0((void *)&_mh_execute_header, v53, v54, "prewarmAssets for %s attempted with unrecognized InferenceProvider %s", (uint8_t *)v60);
      sub_10007DBD8();
      sub_10001D790(v186);
      sub_10001D790(v60);
    }
    else
    {
      sub_10007ECC4(*(uint64_t (**)(uint64_t, uint64_t))(v56 + 8));
      sub_10002BADC(v58, *(uint64_t (**)(uint64_t, uint64_t))(v57 + 8));
    }

    v72 = sub_10002B8A0();
    sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    v74 = sub_10002B560(v72, v73);
    v76 = (uint64_t)v75;
    *v75 = InferenceProviderDescriptor.description.getter();
    *(_QWORD *)(v76 + 8) = v77;
    v78 = sub_10001DE08(v76, enum case for ModelManagerError.unrecognizedInferenceProvider(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 104));
    v179 = v74;
    v86 = swift_willThrow(v78, v79, v80, v81, v82, v83, v84, v85);
    sub_10007DCF0(v86, &qword_1000FBEB0);
    goto LABEL_28;
  }
  v169 = v3 + 56;
  sub_10000667C((__int128 *)(v3 + 96), v3 + 56);
  if (qword_1000FB108 != -1)
    goto LABEL_33;
  while (1)
  {
    v7 = *(_QWORD *)(v3 + 216);
    v8 = *(_QWORD *)(v3 + 424);
    v9 = *(_QWORD *)(v3 + 392);
    v10 = *(NSObject **)(v3 + 232);
    v11 = sub_10001DD64();
    v12 = sub_100002FF8(v11, (uint64_t)qword_1000FD390);
    *(_QWORD *)(v3 + 448) = v12;
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    *(_QWORD *)(v3 + 456) = v13;
    sub_10001DE08(v8, (uint64_t)v10, v13);
    v14 = sub_10001EBA8(v7);
    v166 = (void *)v12;
    Logger.logObject.getter(v14);
    v15 = sub_10007FBA4();
    v16 = sub_10007FD64((os_log_type_t)v15);
    v185 = (uint64_t *)(v3 + 216);
    v17 = *(_QWORD *)(v3 + 216);
    if (!v16)
    {
      v69 = *(void (**)(uint64_t))(*(_QWORD *)(v3 + 392) + 8);
      v70 = sub_100037FBC();
      v69(v70);

      sub_10002BA68(v17);
      v71 = (_QWORD *)v169;
      goto LABEL_24;
    }
    HIDWORD(v160) = v15;
    v163 = v10;
    v18 = sub_10001D8D4(22);
    v154 = sub_10001D8D4(64);
    v191 = v154;
    *(_DWORD *)v18 = 136315394;
    sub_100006744(&qword_1000FBE80, &qword_1000FB2D8);
    v20 = sub_10007DBB8(v19);
    sub_1000102C0(v20, v21, &v191);
    *(_QWORD *)(v3 + 200) = v22;
    v148 = (_QWORD *)(v3 + 208);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 + 200, v3 + 208, v18 + 4);
    sub_10001E420();
    v23 = sub_100037FBC();
    v151 = (uint64_t)v24;
    v24(v23);
    v157 = (uint8_t *)v18;
    *(_WORD *)(v18 + 12) = 2080;
    v25 = *(_QWORD *)(v17 + 16);
    v26 = _swiftEmptyArrayStorage;
    if (!v25)
      break;
    v175 = *(_QWORD *)(v3 + 360);
    v178 = *(_QWORD *)(v3 + 368);
    v3 = *(_QWORD *)(v3 + 216);
    v192 = _swiftEmptyArrayStorage;
    sub_100011720(0, v25, 0);
    v27 = sub_10001C854(v3);
    v29 = v28;
    while ((v27 & 0x8000000000000000) == 0 && v27 < 1 << *(_BYTE *)(v3 + 32))
    {
      if (((*(_QWORD *)(v3 + 56 + (((unint64_t)v27 >> 3) & 0xFFFFFFFFFFFFF8)) >> v27) & 1) == 0)
        goto LABEL_31;
      if (*(_DWORD *)(v3 + 36) != v29)
        goto LABEL_32;
      v30 = *(uint64_t **)(v189 + 368);
      sub_10007E94C(*(_QWORD *)(v3 + 48) + *(_QWORD *)(v175 + 72) * v27, *(_QWORD *)(v189 + 376));
      v31 = sub_10007FB5C();
      sub_10001CB5C(v31, v32);
      v33 = *v30;
      v34 = *(_QWORD *)(v178 + 8);
      sub_10007F0CC();
      sub_10007ED88((uint64_t)v30);
      v26 = v192;
      if ((swift_isUniquelyReferenced_nonNull_native(v192) & 1) == 0)
      {
        sub_100011720(0, v26[2] + 1, 1);
        v26 = v192;
      }
      v36 = v26[2];
      v35 = v26[3];
      if (v36 >= v35 >> 1)
      {
        sub_100011720(v35 > 1, v36 + 1, 1);
        v26 = v192;
      }
      v26[2] = v36 + 1;
      v37 = &v26[2 * v36];
      v37[4] = v33;
      v37[5] = v34;
      v38 = sub_10002BF40();
      v27 = sub_10001C6FC(v38, v39, v40, v41);
      v29 = v42;
      v44 = v43 & 1;
      if (!--v25)
      {
        v87 = sub_10002BF40();
        sub_10001C7E4(v87, v88, v44);
        v3 = v189;
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    swift_once(&qword_1000FB108, sub_10004D568);
  }
LABEL_23:
  v71 = (_QWORD *)v169;
  v89 = *v185;
  v90 = Array.description.getter(v26, &type metadata for String);
  sub_10001E034();
  sub_10007E898(v90, v91, &v191);
  *v148 = v92;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v148, v185, v157 + 14);
  sub_10002BA68(v89);
  sub_10001E4C0();
  sub_10002B4A0((void *)&_mh_execute_header, v163, BYTE4(v160), "Session %s trying to prewarm assets %s", v157);
  swift_arrayDestroy(v154, 2);
  sub_10001D790(v154);
  sub_10001D790((uint64_t)v157);

  v69 = (void (*)(uint64_t))v151;
LABEL_24:
  *(_QWORD *)(v3 + 464) = v69;
  v94 = *(_QWORD *)(v3 + 344);
  v93 = *(_QWORD *)(v3 + 352);
  v95 = *(_QWORD *)(v3 + 328);
  v96 = *(_QWORD *)(v3 + 336);
  v97 = *(_QWORD *)(v3 + 264) + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy;
  sub_10002B2E0(v97, v3 + 136);
  sub_10002AC98(v97, v93, type metadata accessor for InferenceProviderAssetManagerPolicy);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v96 + 104))(v94, enum case for AssetPolicy.unloadCached(_:), v95);
  sub_100006710(&qword_1000FD990, (uint64_t (*)(uint64_t))&type metadata accessor for AssetPolicy);
  LOBYTE(v97) = sub_10007FEE4(v93, v99, v100, v98);
  v101 = *(void (**)(uint64_t))(v96 + 8);
  v102 = sub_10007E4F0();
  v101(v102);
  v103 = ((uint64_t (*)(uint64_t, uint64_t))v101)(v93, v95);
  if ((v97 & 1) != 0)
  {
    Logger.logObject.getter(v103);
    v104 = sub_10001E9D0();
    if (sub_100039E20(v104))
    {
      v105 = (_WORD *)sub_10001D8D4(2);
      sub_10004478C(v105);
      sub_100039E4C((void *)&_mh_execute_header, v106, v107, "Prewarm not allowed by current policy");
      sub_10001D790(v94);
    }

    v108 = sub_10002B8A0();
    sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    v110 = sub_10002B560(v108, v109);
    v112 = sub_10007EDCC(v110, v111);
    v113 = sub_100044964(v112, enum case for ModelManagerError.deniedDueToSystemState(_:));
    v179 = v94;
    v121 = swift_willThrow(v113, v114, v115, v116, v117, v118, v119, v120);
    sub_10007FFC8(v121, &qword_1000FBEB0);
    sub_10000650C(v71);
LABEL_28:
    v182 = *(_QWORD *)(v3 + 304);
    v187 = *(_QWORD *)(v3 + 296);
    v190 = *(_QWORD *)(v3 + 288);
    swift_task_dealloc(*(_QWORD *)(v3 + 424));
    sub_10001E330();
    sub_10001EAC8();
    sub_10001E490();
    sub_10002B504();
    sub_10002B528();
    sub_10002B4C4();
    sub_10002B70C();
    sub_10002BDF0();
    v122 = sub_10001D938();
    v130 = sub_10007DE5C(v122, v123, v124, v125, v126, v127, v128, v129, (uint64_t)v148, v151, v154, (uint64_t)v157, v160, (uint64_t)v163, (uint64_t)v166, v169, v172, v175, v179,
             v182);
    v138 = sub_10007DE4C(v130, v131, v132, v133, v134, v135, v136, v137, v149, v152, v155, v158, v161, v164, v167, v170, v173, v176, v180,
             v183,
             v187);
    sub_10007DEA4(v138, v139, v140, v141, v142, v143, v144, v145, v150, v153, v156, v159, v162, v165, v168, v171, v174, v177, v181,
      v184,
      v188,
      v190);
    return sub_10007CF10(*(uint64_t (**)(void))(v3 + 8));
  }
  v147 = (_QWORD *)swift_task_alloc(dword_1000FD44C);
  *(_QWORD *)(v3 + 472) = v147;
  *v147 = v3;
  v147[1] = sub_100052FC0;
  return sub_10005A4C8(*(_QWORD *)(v3 + 216), (uint64_t)v71);
}

uint64_t sub_100052FC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10007EFB4();
  *(_QWORD *)(v0 + 480) = v2;
  *(_QWORD *)(v0 + 488) = v1;
  sub_10002BD30(v3);
  return sub_10001D6DC();
}

uint64_t sub_100053014()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  sub_10001DD0C();
  v1 = v0[33];
  v2 = v0[29];
  v3 = sub_10007DB04();
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  sub_10007FCBC((void (*)(uint64_t *))sub_10007C984, v3);
  sub_10001D938();
  v4 = (_QWORD *)swift_task_alloc(dword_1000FD404);
  v0[62] = v4;
  *v4 = v0;
  v4[1] = sub_100053088;
  v5 = sub_10002BD0C(v0[60]);
  return sub_10007E65C(v5);
}

uint64_t sub_100053088()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 504) = v1;
  swift_task_dealloc(v3);
  if (v1)
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 480));
  return sub_10001D6DC();
}

uint64_t sub_1000530EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(NSObject *, uint64_t, uint64_t);
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(void);

  sub_10001DFE8();
  v13 = (unint64_t)sub_10005CE8C(v9[60]);
  v9[64] = v13;
  if (v13 >> 62)
  {
    sub_10001E140();
    v14 = sub_10007EC34();
    v13 = v9[64];
  }
  else
  {
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_10001E140();
  }
  v9[65] = v14;
  if (v14)
  {
    if ((v13 & 0xC000000000000001) != 0)
    {
      v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v13);
    }
    else
    {
      v15 = *(_QWORD *)(v13 + 32);
      sub_10001E69C();
    }
    v9[66] = v15;
    v9[67] = 1;
    sub_10007F1A8();
    v29 = sub_100002F78(&qword_1000FB2A0);
    sub_10007EB00(v29);
    sub_100005630(v10, 0, 1, v14);
    v30 = sub_10002BCD4();
    sub_10001E0E8(v11, v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16));
    sub_10007D54C(v11);
    v31 = (_QWORD *)swift_task_alloc(dword_1000FD3F4);
    v9[68] = v31;
    v32 = sub_10007EC3C(v31, (uint64_t)sub_100053318);
    return sub_10007D0D4(v32, v33, v34, v35, v36, v37);
  }
  else
  {
    v16 = (uint64_t (*)(NSObject *, uint64_t, uint64_t))v9[57];
    v17 = v9[52];
    v18 = v9[48];
    v19 = v9[29];
    sub_10001EADC();
    v20 = v16(v17, v19, v18);
    Logger.logObject.getter(v20);
    v21 = sub_10002B470();
    if (sub_100037B08(v17))
    {
      v22 = (uint8_t *)sub_10001D8D4(12);
      sub_10001D8D4(32);
      sub_10007F910();
      sub_10007E438(4.8149e-34);
      sub_100006744(&qword_1000FBE80, &qword_1000FB2D8);
      v24 = sub_10007D2B8(v23);
      sub_10007E654(v24, v25, v26, v27);
      v9[24] = v28;
      sub_100044654((uint64_t)(v9 + 24), (uint64_t)(v9 + 25), a9);
      sub_10001E420();
      sub_10007ECD0();
      sub_10001E18C((void *)&_mh_execute_header, v17, v21, "Successfully prewarmed assets for session %s", v22);
      sub_10001DBB8((uint64_t)v16);
      sub_10001D790((uint64_t)v16);
      sub_10001D790((uint64_t)v22);
    }
    else
    {
      sub_10007ECD0();
    }

    v39 = (_QWORD *)sub_10007E5EC();
    v9[70] = v39;
    v40 = sub_10007F010(v39, (uint64_t)sub_1000535E0);
    return sub_10007E30C(v40, v41, v42, v43);
  }
}

uint64_t sub_100053318()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10001E538();
  sub_10001EA4C(v2);
  *(_QWORD *)(v1 + 552) = v0;
  swift_task_dealloc(v3);
  sub_10002AD5C(*(_QWORD *)(v1 + 304), &qword_1000FD7E0);
  if (v0)
  {
    sub_10007DFD8(v4, &qword_1000FD820);
    sub_10007DCF0(v5, &qword_1000FB920);
    sub_10001E034();
  }
  else
  {
    sub_10007DCF0(v4, &qword_1000FD820);
    sub_10002BBF0(v6, &qword_1000FB920);
  }
  return sub_10001D6DC();
}

uint64_t sub_1000533E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  NSObject *v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(void);
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;

  sub_10001DFE8();
  v13 = v9[67];
  v14 = v9[65];
  swift_release(v9[66]);
  if (v13 == v14)
  {
    v16 = (uint64_t (*)(void))v9[57];
    v17 = v9[52];
    swift_bridgeObjectRelease(v9[64]);
    sub_10001E91C();
    v18 = v16();
    Logger.logObject.getter(v18);
    v19 = sub_10002B470();
    if (sub_100037B08(v17))
    {
      v20 = (uint8_t *)sub_10001D8D4(12);
      sub_10001D8D4(32);
      sub_10007F910();
      sub_10007E438(4.8149e-34);
      sub_100006744(&qword_1000FBE80, &qword_1000FB2D8);
      v22 = sub_10007D2B8(v21);
      sub_10007E654(v22, v23, v24, v25);
      v9[24] = v26;
      sub_100044654((uint64_t)(v9 + 24), (uint64_t)(v9 + 25), a9);
      sub_10001E420();
      sub_10007ECD0();
      sub_10001E18C((void *)&_mh_execute_header, v17, v19, "Successfully prewarmed assets for session %s", v20);
      sub_10001DBB8(v12);
      sub_10001D790(v12);
      sub_10001D790((uint64_t)v20);
    }
    else
    {
      sub_10007ECD0();
    }

    v31 = (_QWORD *)sub_10007E5EC();
    v9[70] = v31;
    v32 = sub_10007F010(v31, (uint64_t)sub_1000535E0);
    return sub_10007E30C(v32, v33, v34, v35);
  }
  else
  {
    v27 = v9[67];
    v28 = v9[64];
    if ((v28 & 0xC000000000000001) != 0)
    {
      result = sub_1000800A4(v15, v28);
      v30 = result;
    }
    else
    {
      v30 = *(_QWORD *)(v28 + 8 * v27 + 32);
      result = sub_10001E69C();
    }
    v9[66] = v30;
    v9[67] = v27 + 1;
    if (__OFADD__(v27, 1))
    {
      __break(1u);
    }
    else
    {
      sub_10007F1A8();
      v36 = sub_100002F78(&qword_1000FB2A0);
      sub_10007EB00(v36);
      sub_100005630(v10, 0, 1, v27);
      v37 = sub_10002BCD4();
      sub_10001E0E8(v11, v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 16));
      sub_10007D54C(v11);
      v38 = (_QWORD *)swift_task_alloc(dword_1000FD3F4);
      v9[68] = v38;
      v39 = sub_10007EC3C(v38, (uint64_t)sub_100053318);
      return sub_10007D0D4(v39, v40, v41, v42, v43, v44);
    }
  }
  return result;
}

uint64_t sub_1000535E0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 568) = v1;
  swift_task_dealloc(v3);
  if (!v1)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 480));
    sub_10001E034();
  }
  return sub_10001D6DC();
}

#error "1000536E0: call analysis failed (funcsize=46)"

#error "10005374C: call analysis failed (funcsize=24)"

#error "1000537C8: call analysis failed (funcsize=30)"

#error "100053844: call analysis failed (funcsize=30)"

uint64_t sub_100053860()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10001DB38();
  v1 = *(_QWORD *)(v0 + 264);
  sub_10001D680(*(_QWORD *)(v0 + 584));
  v2 = sub_10001E034();
  sub_10007DCF0(v2, &qword_1000FD7E0);
  return sub_100037B58((uint64_t)sub_1000538B8, v1, 0);
}

#error "10005394C: call analysis failed (funcsize=42)"

#error "100053A14: call analysis failed (funcsize=119)"

#error "100053C04: call analysis failed (funcsize=117)"

void sub_100053D4C()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(uint64_t, void (*)(uint64_t, uint64_t), uint64_t);
  uint64_t v20;
  void (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  os_log_t v42;
  os_log_type_t v43;
  const char *v44;
  uint64_t v45;
  void (*v46)(uint64_t, void (*)(uint64_t, uint64_t), uint64_t);
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  _QWORD v50[3];
  uint64_t v51;

  sub_10007F5A0();
  v3 = v2;
  v45 = v4;
  v6 = v5;
  v7 = sub_100002F78(&qword_1000FB2D8);
  sub_10007F590();
  __chkstk_darwin(v8);
  sub_10001EB18();
  v49 = v9;
  sub_10001E148();
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v45 - v12;
  __chkstk_darwin(v11);
  sub_10007D9D8();
  sub_10002BCBC();
  __chkstk_darwin(v14);
  sub_10007E1D8();
  __chkstk_darwin(v15);
  v17 = (char *)&v45 - v16;
  v47 = *v6;
  v18 = v47 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  sub_10002B2E0(v47 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, (uint64_t)&v51);
  sub_10002AC98(v18, (uint64_t)v17, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  v19 = *(void (**)(uint64_t, void (*)(uint64_t, uint64_t), uint64_t))(v1 + 16);
  v48 = v3;
  v46 = v19;
  v19((uint64_t)v13, v3, v7);
  v20 = v45;
  sub_10001E69C();
  sub_100080068();
  sub_100013A00();
  v21 = *(void (**)(uint64_t))(v1 + 8);
  v22 = v7;
  v23 = sub_10007F9B0();
  v21(v23);
  swift_release(v20);
  sub_10002AC98((uint64_t)v17, v0, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  sub_10002B308(v18, (uint64_t)v50, 33);
  sub_10007BDF8(v0, v18);
  swift_endAccess(v50);
  sub_10002ACC4((uint64_t)v17, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  if (qword_1000FB108 != -1)
    swift_once(&qword_1000FB108, sub_10004D568);
  v24 = sub_10001DD64();
  sub_100002FF8(v24, (uint64_t)qword_1000FD390);
  v25 = v49;
  v46(v49, v48, v7);
  v26 = v47;
  v27 = sub_10001D834(v47);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = sub_10001D8D4(22);
    v31 = sub_10001D8D4(64);
    v50[0] = v31;
    sub_10007F14C(4.8151e-34);
    sub_10001E900();
    sub_10008B1B0();
    v48 = (void (*)(uint64_t, uint64_t))v21;
    v33 = v32;
    swift_release(v26);
    v34 = sub_10007F54C();
    sub_1000102C0(v34, v35, v36);
    sub_10007F580();
    sub_10001EBB0(v26);
    swift_bridgeObjectRelease(v33);
    *(_WORD *)(v30 + 12) = 2080;
    sub_100006744(&qword_1000FBE80, &qword_1000FB2D8);
    v37 = v49;
    v39 = dispatch thunk of CustomStringConvertible.description.getter(v22, v38);
    sub_100080158(v39, v40);
    sub_10007F580();
    sub_10001E034();
    v48(v37, v22);
    sub_10007FD44();
    _os_log_impl(v41, v42, v43, v44, (uint8_t *)v30, 0x16u);
    swift_arrayDestroy(v31, 2);
    sub_10001D790(v31);
    sub_10001D790(v30);
  }
  else
  {
    sub_10001EBB0(v26);
    ((void (*)(uint64_t, uint64_t))v21)(v25, v7);
  }

  sub_10007EDD8();
}

void sub_1000540A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59[13];
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;

  sub_10001D810();
  v52 = v2;
  v4 = v3;
  v53 = sub_10007D9D8();
  sub_10002BCBC();
  __chkstk_darwin(v5);
  sub_10002BD70();
  v57 = v6;
  v7 = sub_10007DCE8();
  sub_10007F624();
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v47 - v12;
  sub_10004A92C();
  sub_10002BCBC();
  __chkstk_darwin(v14);
  sub_10002BD70();
  v51 = v15;
  sub_10002B2E0(v0 + 120, (uint64_t)&v62);
  v16 = *(_QWORD *)(v0 + 120);
  if ((v16 & 0xC000000000000001) == 0)
  {
    sub_10001E194();
    v36 = sub_10001E4D4();
    v17 = (_QWORD *)sub_100075108(v36, v0, (uint64_t (*)(uint64_t))sub_1000544C8);
    goto LABEL_36;
  }
  v50 = 0;
  v17 = _swiftEmptySetSingleton;
  v61 = _swiftEmptySetSingleton;
  if (v16 < 0)
    v18 = v16;
  else
    v18 = v16 & 0xFFFFFFFFFFFFFF8;
  v49 = v0;
  sub_10001D834(v0);
  sub_10001E4D4();
  v58 = __CocoaSet.makeIterator()(v18);
  v19 = sub_10007DADC();
  if (!v19)
  {
LABEL_34:
    sub_10001EBB0(v49);
    swift_release(v58);
LABEL_36:
    v37 = swift_bridgeObjectRetain(v52);
    sub_10000C748(v37, (uint64_t)v17, v38, v39, v40, v41, v42, v43, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57,
      v58,
      v59[0],
      v59[1],
      v59[2],
      v59[3],
      v59[4],
      v59[5],
      v59[6],
      v59[7],
      v59[8],
      v59[9]);
    AssetCost.init(onDeviceMemory:)(0);
    v44 = sub_10002BE5C();
    sub_100054564(v44, v45, v46);
    sub_10001D8B4();
    sub_100006A68();
    return;
  }
  v20 = v19;
  v48 = v4;
  v56 = sub_10001E1D8();
  HIDWORD(v55) = enum case for LoadState.loaded(_:);
  v54 = (uint64_t)&type metadata for Swift.AnyObject + 8;
  while (1)
  {
    v59[0] = v20;
    sub_10002B4BC((uint64_t)&v60, (uint64_t)v59, v54, v56);
    v21 = v60 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    sub_10002B308(v60 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, (uint64_t)v59, 33);
    (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v13, HIDWORD(v55), v7);
    sub_100006710(&qword_1000FD7E8, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState);
    sub_10007ECEC();
    sub_10007ECEC();
    v22 = sub_10007ED90();
    v24 = v24 && v13 == (char *)v18;
    if (v24)
    {
      sub_10002BA68((uint64_t)v13);
      v33 = v21;
      v27 = v57;
      sub_10007F218(v33, v57);
      sub_10007F124((uint64_t)v11, (uint64_t)v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
      goto LABEL_20;
    }
    v25 = sub_10001DB04(v22, (uint64_t)v13, v23, v18);
    sub_10001E034();
    sub_100049010();
    v26 = v21;
    v27 = v57;
    sub_10007F218(v26, v57);
    sub_10007F124((uint64_t)v11, (uint64_t)v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
    if ((v25 & 1) != 0)
      goto LABEL_20;
    sub_10007ECEC();
    sub_10007ECEC();
    v28 = sub_10007ED90();
    if (v24 && v11 == (char *)v18)
      break;
    v31 = sub_10001DB04(v28, (uint64_t)v11, v29, v18);
    sub_10001E034();
    sub_100049010();
    sub_100039EAC((uint64_t)v11);
    sub_10007F718(v27);
    sub_100039EAC((uint64_t)v13);
    sub_10007E670();
    if ((v31 & 1) != 0)
      goto LABEL_21;
    v32 = sub_10007F664();
LABEL_32:
    v20 = __CocoaSet.Iterator.next()(v32);
    if (!v20)
    {
      v17 = v61;
      goto LABEL_34;
    }
  }
  sub_10002BA68((uint64_t)v11);
LABEL_20:
  sub_100039EAC((uint64_t)v11);
  sub_10007F718(v27);
  sub_100039EAC((uint64_t)v13);
  sub_10007E670();
LABEL_21:
  v18 = (uint64_t)v61;
  if (v61[3] <= v61[2])
  {
    sub_10007DF48();
    v18 = (uint64_t)v61;
  }
  sub_10007F65C(*(_QWORD *)(v18 + 40));
  sub_10007FBE0();
  sub_10007F654();
  sub_10007CEF0();
  if (!v24)
  {
    sub_10001E178();
LABEL_31:
    sub_10007DEE0(v34);
    goto LABEL_32;
  }
  sub_10001EB2C();
  while (1)
  {
    sub_10007DA8C();
    if (v24 && (v35 & 1) != 0)
      break;
    sub_10007DB48();
    sub_10001E62C();
    if (!v24)
    {
      sub_10001E154();
      goto LABEL_31;
    }
  }
  __break(1u);
}

uint64_t sub_1000544C8()
{
  uint64_t State;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char v4;
  char v5;
  uint64_t v7;

  State = type metadata accessor for LoadState(0);
  v1 = *(_QWORD *)(State - 8);
  __chkstk_darwin(State);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LoadState.loaded(_:), State);
  sub_100080244();
  v5 = v4;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, State);
  return v5 & 1;
}

void sub_100054564(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  uint64_t v35;
  char *v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[6];
  uint64_t v43;

  v35 = a3;
  v5 = type metadata accessor for AssetCost(0);
  v40 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0)
      v8 = a2;
    else
      v8 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v9 = __CocoaSet.makeIterator()(v8);
    v10 = type metadata accessor for InferenceProviderAsset(0);
    sub_100006710(&qword_1000FB768, type metadata accessor for InferenceProviderAsset);
    v12 = Set.Iterator.init(_cocoa:)(v9, v10, v11);
    a2 = v42[1];
    v39 = v42[2];
    v13 = v42[3];
    v14 = v42[4];
    v15 = v42[5];
  }
  else
  {
    v16 = -1 << *(_BYTE *)(a2 + 32);
    v17 = *(_QWORD *)(a2 + 56);
    v39 = a2 + 56;
    v18 = ~v16;
    v19 = -v16;
    if (v19 < 64)
      v20 = ~(-1 << v19);
    else
      v20 = -1;
    v15 = v20 & v17;
    v12 = swift_bridgeObjectRetain(a2);
    v13 = v18;
    v14 = 0;
  }
  v34[1] = v13;
  v37 = a2 & 0x7FFFFFFFFFFFFFFFLL;
  v38 = (unint64_t)(v13 + 64) >> 6;
  v36 = (char *)&type metadata for Swift.AnyObject + 8;
  v41 = a2;
  if (a2 < 0)
    goto LABEL_13;
  while (1)
  {
    if (v15)
    {
      v21 = (v15 - 1) & v15;
      v22 = __clz(__rbit64(v15)) | (v14 << 6);
      v23 = v14;
      goto LABEL_32;
    }
    v28 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v28 >= v38)
      goto LABEL_35;
    v29 = *(_QWORD *)(v39 + 8 * v28);
    v23 = v14 + 1;
    if (!v29)
    {
      v23 = v14 + 2;
      if (v14 + 2 >= v38)
        goto LABEL_35;
      v29 = *(_QWORD *)(v39 + 8 * v23);
      if (!v29)
      {
        v23 = v14 + 3;
        if (v14 + 3 >= v38)
          goto LABEL_35;
        v29 = *(_QWORD *)(v39 + 8 * v23);
        if (!v29)
        {
          v23 = v14 + 4;
          if (v14 + 4 >= v38)
            goto LABEL_35;
          v29 = *(_QWORD *)(v39 + 8 * v23);
          if (!v29)
          {
            v23 = v14 + 5;
            if (v14 + 5 >= v38)
              goto LABEL_35;
            v29 = *(_QWORD *)(v39 + 8 * v23);
            if (!v29)
            {
              v30 = v14 + 6;
              while (v30 < v38)
              {
                v29 = *(_QWORD *)(v39 + 8 * v30++);
                if (v29)
                {
                  v23 = v30 - 1;
                  a2 = v41;
                  goto LABEL_31;
                }
              }
LABEL_35:
              sub_10001CD34(v41);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32))(v35, a1, v5);
              return;
            }
          }
        }
      }
    }
LABEL_31:
    v21 = (v29 - 1) & v29;
    v22 = __clz(__rbit64(v29)) + (v23 << 6);
LABEL_32:
    v27 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v22);
    swift_retain();
    if (!v27)
      goto LABEL_35;
    while (1)
    {
      v31 = v27 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_cost;
      sub_100006710(&qword_1000FD988, (uint64_t (*)(uint64_t))&type metadata accessor for AssetCost);
      dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)(a1, v31, v5, v32);
      v33 = v40;
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(a1, v5);
      (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(a1, v7, v5);
      swift_release(v27);
      v14 = v23;
      v15 = v21;
      a2 = v41;
      if ((v41 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v24 = __CocoaSet.Iterator.next()(v12);
      if (v24)
      {
        v25 = v24;
        v42[0] = v24;
        v26 = type metadata accessor for InferenceProviderAsset(0);
        swift_unknownObjectRetain(v25);
        swift_dynamicCast(&v43, v42, v36, v26, 7);
        v27 = v43;
        swift_unknownObjectRelease(v25);
        v23 = v14;
        v21 = v15;
        if (v27)
          continue;
      }
      goto LABEL_35;
    }
  }
  __break(1u);
}

uint64_t sub_1000548F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47[24];
  char v48[24];

  v3 = v1;
  v5 = (uint64_t *)(v1 + 120);
  sub_10002B2E0((uint64_t)v5, (uint64_t)v48);
  sub_10007E904();
  v6 = sub_10001E140();
  sub_100073E5C(v6, v3);
  sub_10004BCD4();
  sub_10007FB68();
  sub_10007E904();
  sub_10001D964();
  v7 = sub_10001E140();
  v8 = sub_1000743FC(v7, v3, a1);
  sub_10007E904();
  v9 = sub_100074A7C(v8, v3, v2);
  sub_10004BF6C(v9, (uint64_t (*)(char *, char *))sub_10004E1DC, 0);
  sub_10007FB68();
  if (v2 && (*(_BYTE *)(v2 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_dynamicModeAllowed) & 1) == 0)
  {
    sub_10007E904();
    sub_10007D280();
    v10 = sub_10001E140();
    sub_100074D50(v10, v3);
    v11 = (_QWORD *)sub_10004BCD4();
    sub_10001DEEC();
    v44 = v2;
    for (i = v2; ; i = v21)
    {
      v13 = i + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
      sub_10002B2E0(i + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, (uint64_t)v47);
      v14 = *(_QWORD *)(v13 + *(int *)(sub_10007D9D8() + 40));
      sub_10007DCD8();
      v15 = sub_10007F0CC();
      v2 = sub_10004BA7C(v15, v11);
      v17 = v16;
      swift_bridgeObjectRelease(v14);
      if (!v17)
      {
        sub_10001E420();
        swift_release(v44);
        return i;
      }
      v18 = *v5;
      sub_10001DBE4();
      v19 = swift_bridgeObjectRetain(v18);
      sub_10004B728(v19, v2, v17);
      v21 = v20;
      swift_bridgeObjectRelease(v18);
      if (!v21)
        break;
      sub_10001DA38();
      sub_10001DEEC();
    }
    sub_10001E420();
    if (qword_1000FB108 != -1)
      swift_once(&qword_1000FB108, sub_10004D568);
    v22 = sub_10001DD64();
    sub_100002FF8(v22, (uint64_t)qword_1000FD390);
    v23 = sub_10001DBE4();
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)sub_10001D8D4(12);
      v27 = sub_10001D8D4(32);
      v46 = v27;
      *(_DWORD *)v26 = 136315138;
      sub_10001DBE4();
      v28 = sub_10001E4C8();
      sub_1000102C0(v28, v29, v30);
      v45 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v26 + 4);
      swift_bridgeObjectRelease_n(v17, 3);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "nextAssetToUnloadToMakeRoom found dynamicBlocker but couldn't get asset for it %s", v26, 0xCu);
      swift_arrayDestroy(v27, 1);
      sub_10001D790(v27);
      sub_10001D790((uint64_t)v26);

    }
    else
    {

      swift_bridgeObjectRelease_n(v17, 2);
    }
    v32 = type metadata accessor for ModelManagerError(0);
    sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    swift_allocError(v32, v33, 0, 0);
    v35 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v34, enum case for ModelManagerError.internalError(_:), v32);
    swift_willThrow(v35, v36, v37, v38, v39, v40, v41, v42);
    swift_release(v44);
    sub_10001DEEC();
  }
  return v2;
}

uint64_t sub_100054C7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(int *)(sub_10007D9D8() + 32);
  return static Date.< infix(_:_:)(a1 + v4, a2 + v4);
}

uint64_t sub_100054CAC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2[10] = a1;
  v2[11] = v1;
  v3 = sub_100002F78(&qword_1000FD7E0);
  v2[12] = sub_10001D800(*(_QWORD *)(v3 - 8));
  v4 = sub_10007D89C();
  v2[13] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[14] = v5;
  v2[15] = sub_10002B1BC(v5);
  v2[16] = sub_10001E784();
  v6 = sub_10007DCE8();
  v2[17] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[18] = v7;
  v2[19] = sub_10002B1BC(v7);
  v2[20] = sub_10001E784();
  v8 = sub_10004A92C();
  v2[21] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[22] = v9;
  v2[23] = sub_10002B1BC(v9);
  v2[24] = sub_10001E784();
  sub_10001D7B8();
  return sub_10001D6DC();
}

uint64_t sub_100054D54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  unint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  unint64_t v33;
  uint64_t (*v34)(void);
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v51;
  os_log_type_t v52;
  float *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(_QWORD, _QWORD, _QWORD);
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  sub_10002B628();
  a23 = v26;
  a24 = v27;
  a22 = v24;
  v28 = *(_QWORD *)(v24 + 192);
  v29 = *(_QWORD *)(v24 + 176);
  v30 = *(NSObject **)(v24 + 88);
  sub_1000540A4();
  v31 = sub_10007F6D0();
  v32 = *(uint64_t (**)(uint64_t, uint64_t))(v29 + 8);
  *(_QWORD *)(v24 + 200) = v32;
  sub_10001E808(v28, v32);
  v33 = (unint64_t)sub_10007ED04();
  if ((v33 & 0x8000000000000000) == 0 && v33 >= v31)
  {
LABEL_3:
    sub_10007D9F4();
    sub_10001E330();
    sub_10001D938();
    sub_10001EAC8();
    sub_10001E490();
    sub_10002B504();
    sub_10002B528();
    v34 = (uint64_t (*)(void))sub_10001E5D0();
    return sub_100039E04(v34);
  }
  v35 = enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.memoryBudgetPressure(_:);
  *(_DWORD *)(v24 + 248) = enum case for LoadState.dynamicMode(_:);
  *(_DWORD *)(v24 + 252) = v35;
  v36 = sub_10007F4B8();
  v37 = sub_10007F6AC(v36);
  if (v28)
  {
LABEL_5:
    sub_10007D9E0();
    sub_10001D938();
    sub_10001EAC8();
    sub_10001E490();
    sub_10002B504();
    sub_10002B528();
    sub_10002B4C4();
    v34 = *(uint64_t (**)(void))(v24 + 8);
    return sub_100039E04(v34);
  }
  v39 = v37;
  if (!v37)
  {
    sub_10007DE00();
    v48 = sub_10007F6D0();
    sub_10007ECA0(0);
    v49 = (uint64_t)sub_10007ED04();
    if (v49 >= 1 && v48 < v49)
      goto LABEL_3;
    if (qword_1000FB108 != -1)
      swift_once(&qword_1000FB108, sub_10004D568);
    v51 = sub_10001DD64();
    sub_100037AC4(v51, (uint64_t)qword_1000FD390);
    v52 = sub_100037B50();
    if (sub_10001E6C4(v52))
    {
      v53 = (float *)sub_10001D8D4(12);
      sub_10007DD20(v53, 3.852e-34);
      sub_10001E18C((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "unloadIfNeededToMakeRoom couldn't unload enough assets to get under budget. Lowest was %lluKB.", (uint8_t *)v53);
      sub_10001D790((uint64_t)v53);
    }

    v54 = sub_10002B8A0();
    sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    v56 = sub_10002B560(v54, v55);
    v58 = sub_10007E0C4(v56, v57);
    sub_10007D1C8(v58, enum case for ModelManagerError.internalError(_:));
    sub_10007D88C();
    goto LABEL_5;
  }
  if (qword_1000FB108 != -1)
    swift_once(&qword_1000FB108, sub_10004D568);
  v40 = sub_10001DD64();
  v41 = sub_100002FF8(v40, (uint64_t)qword_1000FD390);
  v42 = sub_10001D834(v39);
  Logger.logObject.getter(v42);
  v43 = sub_1000449A8();
  if (sub_10007D3C0(v43))
  {
    v44 = (uint8_t *)sub_10001D8D4(12);
    v29 = sub_10001D8D4(32);
    a12 = v29;
    *(_DWORD *)v44 = 136315138;
    sub_10002B400();
    v41 = sub_10007FFA0();
    v25 = v45;
    sub_10001D930();
    sub_10007D650(v41, v46, &a12);
    *(_QWORD *)(v24 + 72) = v47;
    sub_10001EB6C(v24 + 72, v24 + 80, (uint64_t)(v44 + 4));
    sub_10001EBB0(v39);
    sub_10002B684();
    sub_10001E18C((void *)&_mh_execute_header, 0, (os_log_type_t)v30, "unloadIfNeededToMakeRoom unloading %s", v44);
    sub_10001DBB8(v29);
    sub_10001D790(v29);
    sub_10001D790((uint64_t)v44);

  }
  else
  {

    sub_10001EBB0(v39);
  }
  if ((*(_BYTE *)(v39 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_dynamicModeAllowed) & 1) != 0)
  {
    sub_10007E868();
    sub_10002B2E0(v39 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v59);
    sub_10007D794(0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 16));
    sub_10007D7E4(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 104));
    sub_100006710(&qword_1000FCD38, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState);
    v41 = sub_10007DFB0(v60);
    sub_10007D5F4(v24 + 80);
    sub_10007D5F4(0);
    v61 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v25 + 104);
    if ((v41 & 1) == 0)
    {
      sub_10007DDE0(v61);
      v62 = (_QWORD *)swift_task_alloc(dword_1000FD474);
      *(_QWORD *)(v24 + 216) = v62;
      *v62 = v24;
      v62[1] = sub_10005515C;
      v63 = sub_10001E2B4();
      return sub_10007D030(v63, v64);
    }
  }
  else
  {
    sub_10007F9E0();
  }
  sub_10007DDF0(v61);
  v65 = sub_10002BCD4();
  sub_10002B26C(v41, v66, v67, v65);
  v68 = (_QWORD *)swift_task_alloc(dword_1000FD484);
  *(_QWORD *)(v24 + 232) = v68;
  *v68 = v24;
  v68[1] = sub_100055590;
  v69 = sub_10001E2B4();
  return sub_10007D004(v69, v70, v71);
}

uint64_t sub_10005515C()
{
  uint64_t v0;

  sub_10007E780();
  sub_10002BC38(*(_QWORD *)(v0 + 112));
  sub_10001E10C();
  return sub_10001D6DC();
}

uint64_t sub_1000551AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22,uint64_t a23,uint64_t a24)
{
  _QWORD *v24;
  uint64_t v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t (*v34)(void);
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v51;
  os_log_type_t v52;
  float *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(_QWORD, _QWORD, _QWORD);
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  sub_10002B628();
  a23 = v29;
  a24 = v30;
  a22 = v24;
  swift_release(v24[26]);
  v31 = v24[28];
  sub_10007EF3C();
  v32 = AssetCost.onDeviceMemory.getter();
  sub_10007F710(v25);
  v33 = (unint64_t)sub_10007F738();
  if ((v33 & 0x8000000000000000) == 0 && v33 >= v32)
  {
LABEL_3:
    sub_10007D9F4();
    sub_10001E330();
    sub_10001D938();
    sub_10001EAC8();
    sub_10001E490();
    sub_10002B504();
    sub_10002B528();
    v34 = (uint64_t (*)(void))sub_10001E5D0();
    return sub_100039E04(v34);
  }
  v35 = v24[11];
  v36 = sub_1000548F8(v24[10]);
  v37 = sub_10007F6AC(v36);
  if (v31)
  {
LABEL_5:
    sub_10007D9E0();
    sub_10001D938();
    sub_10001EAC8();
    sub_10001E490();
    sub_10002B504();
    sub_10002B528();
    sub_10002B4C4();
    v34 = (uint64_t (*)(void))v24[1];
    return sub_100039E04(v34);
  }
  v39 = v37;
  if (!v37)
  {
    sub_10007DE00();
    v48 = sub_10007F6D0();
    sub_10007ECA0(0);
    v49 = (uint64_t)sub_10007ED04();
    if (v49 >= 1 && v48 < v49)
      goto LABEL_3;
    if (qword_1000FB108 != -1)
      swift_once(&qword_1000FB108, sub_10004D568);
    v51 = sub_10001DD64();
    sub_100037AC4(v51, (uint64_t)qword_1000FD390);
    v52 = sub_100037B50();
    if (sub_10001E6C4(v52))
    {
      v53 = (float *)sub_10001D8D4(12);
      sub_10007DD20(v53, 3.852e-34);
      sub_10001E18C((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "unloadIfNeededToMakeRoom couldn't unload enough assets to get under budget. Lowest was %lluKB.", (uint8_t *)v53);
      sub_10001D790((uint64_t)v53);
    }

    v54 = sub_10002B8A0();
    sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    v56 = sub_10002B560(v54, v55);
    v58 = sub_10007E0C4(v56, v57);
    sub_10007D1C8(v58, enum case for ModelManagerError.internalError(_:));
    sub_10007D88C();
    goto LABEL_5;
  }
  if (qword_1000FB108 != -1)
    swift_once(&qword_1000FB108, sub_10004D568);
  v40 = sub_10001DD64();
  v41 = sub_100002FF8(v40, (uint64_t)qword_1000FD390);
  v42 = sub_10001D834(v39);
  Logger.logObject.getter(v42);
  v43 = sub_1000449A8();
  if (sub_10007D3C0(v43))
  {
    v44 = (uint8_t *)sub_10001D8D4(12);
    v27 = sub_10001D8D4(32);
    a12 = v27;
    *(_DWORD *)v44 = 136315138;
    sub_10002B400();
    v41 = sub_10007FFA0();
    v28 = v45;
    sub_10001D930();
    sub_10007D650(v41, v46, &a12);
    v24[9] = v47;
    sub_10001EB6C((uint64_t)(v24 + 9), (uint64_t)(v24 + 10), (uint64_t)(v44 + 4));
    sub_10001EBB0(v39);
    sub_10002B684();
    sub_10001E18C((void *)&_mh_execute_header, 0, v26, "unloadIfNeededToMakeRoom unloading %s", v44);
    sub_10001DBB8(v27);
    sub_10001D790(v27);
    sub_10001D790((uint64_t)v44);

  }
  else
  {

    sub_10001EBB0(v39);
  }
  if ((*(_BYTE *)(v39 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_dynamicModeAllowed) & 1) != 0)
  {
    sub_10007E868();
    sub_10002B2E0(v39 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v59);
    sub_10007D794(0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 16));
    sub_10007D7E4(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 104));
    sub_100006710(&qword_1000FCD38, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState);
    v41 = sub_10007DFB0(v60);
    sub_10007D5F4((uint64_t)(v24 + 10));
    sub_10007D5F4(0);
    v61 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v28 + 104);
    if ((v41 & 1) == 0)
    {
      sub_10007DDE0(v61);
      v62 = (_QWORD *)swift_task_alloc(dword_1000FD474);
      v24[27] = v62;
      *v62 = v24;
      v62[1] = sub_10005515C;
      v63 = sub_10001E2B4();
      return sub_10007D030(v63, v64);
    }
  }
  else
  {
    sub_10007F9E0();
  }
  sub_10007DDF0(v61);
  v65 = sub_10002BCD4();
  sub_10002B26C(v41, v66, v67, v65);
  v68 = (_QWORD *)swift_task_alloc(dword_1000FD484);
  v24[29] = v68;
  *v68 = v24;
  v68[1] = sub_100055590;
  v69 = sub_10001E2B4();
  return sub_10007D004(v69, v70, v71);
}

uint64_t sub_100055590()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10001DD0C();
  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 240) = v1;
  swift_task_dealloc(v3);
  sub_10002AD5C(*(_QWORD *)(v0 + 96), &qword_1000FD7E0);
  sub_10007D53C();
  sub_10001E10C();
  return sub_10007D24C(v4, v5, v6);
}

uint64_t sub_1000555FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22,uint64_t a23,uint64_t a24)
{
  _QWORD *v24;
  uint64_t v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t (*v34)(void);
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v51;
  os_log_type_t v52;
  float *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(_QWORD, _QWORD, _QWORD);
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  sub_10002B628();
  a23 = v29;
  a24 = v30;
  a22 = v24;
  swift_release(v24[26]);
  v31 = v24[30];
  sub_10007EF3C();
  v32 = AssetCost.onDeviceMemory.getter();
  sub_10007F710(v25);
  v33 = (unint64_t)sub_10007F738();
  if ((v33 & 0x8000000000000000) == 0 && v33 >= v32)
  {
LABEL_3:
    sub_10007D9F4();
    sub_10001E330();
    sub_10001D938();
    sub_10001EAC8();
    sub_10001E490();
    sub_10002B504();
    sub_10002B528();
    v34 = (uint64_t (*)(void))sub_10001E5D0();
    return sub_100039E04(v34);
  }
  v35 = v24[11];
  v36 = sub_1000548F8(v24[10]);
  v37 = sub_10007F6AC(v36);
  if (v31)
  {
LABEL_5:
    sub_10007D9E0();
    sub_10001D938();
    sub_10001EAC8();
    sub_10001E490();
    sub_10002B504();
    sub_10002B528();
    sub_10002B4C4();
    v34 = (uint64_t (*)(void))v24[1];
    return sub_100039E04(v34);
  }
  v39 = v37;
  if (!v37)
  {
    sub_10007DE00();
    v48 = sub_10007F6D0();
    sub_10007ECA0(0);
    v49 = (uint64_t)sub_10007ED04();
    if (v49 >= 1 && v48 < v49)
      goto LABEL_3;
    if (qword_1000FB108 != -1)
      swift_once(&qword_1000FB108, sub_10004D568);
    v51 = sub_10001DD64();
    sub_100037AC4(v51, (uint64_t)qword_1000FD390);
    v52 = sub_100037B50();
    if (sub_10001E6C4(v52))
    {
      v53 = (float *)sub_10001D8D4(12);
      sub_10007DD20(v53, 3.852e-34);
      sub_10001E18C((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "unloadIfNeededToMakeRoom couldn't unload enough assets to get under budget. Lowest was %lluKB.", (uint8_t *)v53);
      sub_10001D790((uint64_t)v53);
    }

    v54 = sub_10002B8A0();
    sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    v56 = sub_10002B560(v54, v55);
    v58 = sub_10007E0C4(v56, v57);
    sub_10007D1C8(v58, enum case for ModelManagerError.internalError(_:));
    sub_10007D88C();
    goto LABEL_5;
  }
  if (qword_1000FB108 != -1)
    swift_once(&qword_1000FB108, sub_10004D568);
  v40 = sub_10001DD64();
  v41 = sub_100002FF8(v40, (uint64_t)qword_1000FD390);
  v42 = sub_10001D834(v39);
  Logger.logObject.getter(v42);
  v43 = sub_1000449A8();
  if (sub_10007D3C0(v43))
  {
    v44 = (uint8_t *)sub_10001D8D4(12);
    v27 = sub_10001D8D4(32);
    a12 = v27;
    *(_DWORD *)v44 = 136315138;
    sub_10002B400();
    v41 = sub_10007FFA0();
    v28 = v45;
    sub_10001D930();
    sub_10007D650(v41, v46, &a12);
    v24[9] = v47;
    sub_10001EB6C((uint64_t)(v24 + 9), (uint64_t)(v24 + 10), (uint64_t)(v44 + 4));
    sub_10001EBB0(v39);
    sub_10002B684();
    sub_10001E18C((void *)&_mh_execute_header, 0, v26, "unloadIfNeededToMakeRoom unloading %s", v44);
    sub_10001DBB8(v27);
    sub_10001D790(v27);
    sub_10001D790((uint64_t)v44);

  }
  else
  {

    sub_10001EBB0(v39);
  }
  if ((*(_BYTE *)(v39 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_dynamicModeAllowed) & 1) != 0)
  {
    sub_10007E868();
    sub_10002B2E0(v39 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v59);
    sub_10007D794(0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 16));
    sub_10007D7E4(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 104));
    sub_100006710(&qword_1000FCD38, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState);
    v41 = sub_10007DFB0(v60);
    sub_10007D5F4((uint64_t)(v24 + 10));
    sub_10007D5F4(0);
    v61 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v28 + 104);
    if ((v41 & 1) == 0)
    {
      sub_10007DDE0(v61);
      v62 = (_QWORD *)swift_task_alloc(dword_1000FD474);
      v24[27] = v62;
      *v62 = v24;
      v62[1] = sub_10005515C;
      v63 = sub_10001E2B4();
      return sub_10007D030(v63, v64);
    }
  }
  else
  {
    sub_10007F9E0();
  }
  sub_10007DDF0(v61);
  v65 = sub_10002BCD4();
  sub_10002B26C(v41, v66, v67, v65);
  v68 = (_QWORD *)swift_task_alloc(dword_1000FD484);
  v24[29] = v68;
  *v68 = v24;
  v68[1] = sub_100055590;
  v69 = sub_10001E2B4();
  return sub_10007D004(v69, v70, v71);
}

uint64_t sub_1000559E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22,uint64_t a23,uint64_t a24)
{
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(void);
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v53;
  os_log_type_t v54;
  float *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(_QWORD, _QWORD, _QWORD);
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  sub_10002B628();
  a23 = v28;
  a24 = v29;
  a22 = v24;
  v30 = v24[28];
  v24[8] = v30;
  sub_10001E764();
  v31 = sub_100002F78(&qword_1000FB5F8);
  if ((sub_10007DB90((uint64_t)(v24 + 5), v32, v31, (uint64_t)&type metadata for InferenceProviderAssetManagerInternalError) & 1) == 0)goto LABEL_4;
  v33 = v24[6];
  if (v33)
  {
    swift_bridgeObjectRelease(v33);
LABEL_4:
    sub_10007F96C();
    sub_10007D88C();
    sub_10001D930();
LABEL_5:
    sub_10007D9E0();
    sub_10001D938();
    sub_10001EAC8();
    sub_10001E490();
    sub_10002B504();
    sub_10002B528();
    sub_10002B4C4();
    v34 = (uint64_t (*)(void))v24[1];
    return sub_100039E04(v34);
  }
  sub_10001EBB8();
  sub_10001D9C8();
  sub_10007F96C();
  sub_10007E678();
  v36 = sub_10007F730();
  sub_10007F710(v25);
  v37 = (unint64_t)sub_10007F738();
  if ((v37 & 0x8000000000000000) == 0 && v37 >= v36)
  {
LABEL_9:
    sub_10007D9F4();
    sub_10001E330();
    sub_10001D938();
    sub_10001EAC8();
    sub_10001E490();
    sub_10002B504();
    sub_10002B528();
    v34 = (uint64_t (*)(void))sub_10001E5D0();
    return sub_100039E04(v34);
  }
  v38 = sub_10007F4B8();
  v39 = sub_10007F6AC(v38);
  if (v36)
    goto LABEL_5;
  v40 = v39;
  if (!v39)
  {
    sub_10007EC84();
    v50 = sub_10007F730();
    sub_10007ECA0(0);
    v51 = (uint64_t)sub_10007ED04();
    if (v51 < 1 || v50 >= v51)
    {
      if (qword_1000FB108 != -1)
        swift_once(&qword_1000FB108, sub_10004D568);
      v53 = sub_10001DD64();
      sub_100037AC4(v53, (uint64_t)qword_1000FD390);
      v54 = sub_100037B50();
      if (sub_10002B3F8(v30))
      {
        v55 = (float *)sub_10001D8D4(12);
        sub_10007EAE4(v55, 3.852e-34);
        sub_10001E18C((void *)&_mh_execute_header, v30, v54, "unloadIfNeededToMakeRoom couldn't unload enough assets to get under budget. Lowest was %lluKB.", (uint8_t *)v55);
        sub_10001D790((uint64_t)v55);
      }

      v56 = sub_10002B8A0();
      sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
      v58 = sub_10002B560(v56, v57);
      v60 = sub_10007E0C4(v58, v59);
      sub_10007D1C8(v60, enum case for ModelManagerError.internalError(_:));
      sub_10007D88C();
      goto LABEL_5;
    }
    goto LABEL_9;
  }
  if (qword_1000FB108 != -1)
    swift_once(&qword_1000FB108, sub_10004D568);
  v41 = sub_10001DD64();
  v42 = sub_100002FF8(v41, (uint64_t)qword_1000FD390);
  v43 = sub_10001D834(v40);
  Logger.logObject.getter(v43);
  v44 = sub_1000449A8();
  if (sub_10007F0A8(0))
  {
    v45 = (uint8_t *)sub_10001D8D4(12);
    v75 = sub_10001D8D4(32);
    a12 = v75;
    *(_DWORD *)v45 = 136315138;
    sub_10001E900();
    v46 = sub_10008B1B0();
    v27 = v47;
    sub_100044820();
    sub_10007D650(v46, v48, &a12);
    v24[9] = v49;
    sub_10007D824((uint64_t)(v24 + 9), v26, (uint64_t)(v45 + 4));
    sub_10001EBB0(v40);
    sub_10002B684();
    sub_10001E18C((void *)&_mh_execute_header, 0, (os_log_type_t)v44, "unloadIfNeededToMakeRoom unloading %s", v45);
    v42 = v75;
    sub_10001DBB8(v75);
    sub_10001D790(v75);
    sub_10001D790((uint64_t)v45);

  }
  else
  {

    sub_10001EBB0(v40);
  }
  if ((*(_BYTE *)(v40 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_dynamicModeAllowed) & 1) != 0)
  {
    sub_10007F93C();
    sub_10002B2E0(v40 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v61);
    sub_10007D794((uint64_t)(v24 + 8), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 16));
    sub_10007D810(0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 104));
    sub_100006710(&qword_1000FCD38, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState);
    v42 = sub_10007E37C((uint64_t)(v24 + 8), 0, v63, v62);
    sub_10007D5F4(0);
    sub_10007D5F4((uint64_t)(v24 + 8));
    v64 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v27 + 104);
    if ((v42 & 1) == 0)
    {
      sub_10007DDE0(v64);
      v65 = (_QWORD *)swift_task_alloc(dword_1000FD474);
      v24[27] = v65;
      v66 = sub_10007FA04(v65, (uint64_t)sub_10005515C);
      return sub_10007D030(v66, v67);
    }
  }
  else
  {
    sub_10007F9E0();
  }
  sub_10007DDF0(v64);
  v68 = sub_10002BCD4();
  sub_10002B26C(v42, v69, v70, v68);
  v71 = (_QWORD *)swift_task_alloc(dword_1000FD484);
  v72 = sub_10007F160(v71, (uint64_t)sub_100055590);
  return sub_10007D004(v72, v73, v74);
}

uint64_t sub_100055E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22,uint64_t a23,uint64_t a24)
{
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(void);
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v53;
  os_log_type_t v54;
  float *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(_QWORD, _QWORD, _QWORD);
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  sub_10002B628();
  a23 = v28;
  a24 = v29;
  a22 = v24;
  v30 = v24[30];
  v24[8] = v30;
  sub_10001E764();
  v31 = sub_100002F78(&qword_1000FB5F8);
  if ((sub_10007DB90((uint64_t)(v24 + 5), v32, v31, (uint64_t)&type metadata for InferenceProviderAssetManagerInternalError) & 1) == 0)goto LABEL_4;
  v33 = v24[6];
  if (v33)
  {
    swift_bridgeObjectRelease(v33);
LABEL_4:
    sub_10007F96C();
    sub_10007D88C();
    sub_10001D930();
LABEL_5:
    sub_10007D9E0();
    sub_10001D938();
    sub_10001EAC8();
    sub_10001E490();
    sub_10002B504();
    sub_10002B528();
    sub_10002B4C4();
    v34 = (uint64_t (*)(void))v24[1];
    return sub_100039E04(v34);
  }
  sub_10001EBB8();
  sub_10001D9C8();
  sub_10007F96C();
  sub_10007E678();
  v36 = sub_10007F730();
  sub_10007F710(v25);
  v37 = (unint64_t)sub_10007F738();
  if ((v37 & 0x8000000000000000) == 0 && v37 >= v36)
  {
LABEL_9:
    sub_10007D9F4();
    sub_10001E330();
    sub_10001D938();
    sub_10001EAC8();
    sub_10001E490();
    sub_10002B504();
    sub_10002B528();
    v34 = (uint64_t (*)(void))sub_10001E5D0();
    return sub_100039E04(v34);
  }
  v38 = sub_10007F4B8();
  v39 = sub_10007F6AC(v38);
  if (v36)
    goto LABEL_5;
  v40 = v39;
  if (!v39)
  {
    sub_10007EC84();
    v50 = sub_10007F730();
    sub_10007ECA0(0);
    v51 = (uint64_t)sub_10007ED04();
    if (v51 < 1 || v50 >= v51)
    {
      if (qword_1000FB108 != -1)
        swift_once(&qword_1000FB108, sub_10004D568);
      v53 = sub_10001DD64();
      sub_100037AC4(v53, (uint64_t)qword_1000FD390);
      v54 = sub_100037B50();
      if (sub_10002B3F8(v30))
      {
        v55 = (float *)sub_10001D8D4(12);
        sub_10007EAE4(v55, 3.852e-34);
        sub_10001E18C((void *)&_mh_execute_header, v30, v54, "unloadIfNeededToMakeRoom couldn't unload enough assets to get under budget. Lowest was %lluKB.", (uint8_t *)v55);
        sub_10001D790((uint64_t)v55);
      }

      v56 = sub_10002B8A0();
      sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
      v58 = sub_10002B560(v56, v57);
      v60 = sub_10007E0C4(v58, v59);
      sub_10007D1C8(v60, enum case for ModelManagerError.internalError(_:));
      sub_10007D88C();
      goto LABEL_5;
    }
    goto LABEL_9;
  }
  if (qword_1000FB108 != -1)
    swift_once(&qword_1000FB108, sub_10004D568);
  v41 = sub_10001DD64();
  v42 = sub_100002FF8(v41, (uint64_t)qword_1000FD390);
  v43 = sub_10001D834(v40);
  Logger.logObject.getter(v43);
  v44 = sub_1000449A8();
  if (sub_10007F0A8(0))
  {
    v45 = (uint8_t *)sub_10001D8D4(12);
    v75 = sub_10001D8D4(32);
    a12 = v75;
    *(_DWORD *)v45 = 136315138;
    sub_10001E900();
    v46 = sub_10008B1B0();
    v27 = v47;
    sub_100044820();
    sub_10007D650(v46, v48, &a12);
    v24[9] = v49;
    sub_10007D824((uint64_t)(v24 + 9), v26, (uint64_t)(v45 + 4));
    sub_10001EBB0(v40);
    sub_10002B684();
    sub_10001E18C((void *)&_mh_execute_header, 0, (os_log_type_t)v44, "unloadIfNeededToMakeRoom unloading %s", v45);
    v42 = v75;
    sub_10001DBB8(v75);
    sub_10001D790(v75);
    sub_10001D790((uint64_t)v45);

  }
  else
  {

    sub_10001EBB0(v40);
  }
  if ((*(_BYTE *)(v40 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_dynamicModeAllowed) & 1) != 0)
  {
    sub_10007F93C();
    sub_10002B2E0(v40 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v61);
    sub_10007D794((uint64_t)(v24 + 8), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 16));
    sub_10007D810(0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 104));
    sub_100006710(&qword_1000FCD38, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState);
    v42 = sub_10007E37C((uint64_t)(v24 + 8), 0, v63, v62);
    sub_10007D5F4(0);
    sub_10007D5F4((uint64_t)(v24 + 8));
    v64 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v27 + 104);
    if ((v42 & 1) == 0)
    {
      sub_10007DDE0(v64);
      v65 = (_QWORD *)swift_task_alloc(dword_1000FD474);
      v24[27] = v65;
      v66 = sub_10007FA04(v65, (uint64_t)sub_10005515C);
      return sub_10007D030(v66, v67);
    }
  }
  else
  {
    sub_10007F9E0();
  }
  sub_10007DDF0(v64);
  v68 = sub_10002BCD4();
  sub_10002B26C(v42, v69, v70, v68);
  v71 = (_QWORD *)swift_task_alloc(dword_1000FD484);
  v72 = sub_10007F160(v71, (uint64_t)sub_100055590);
  return sub_10007D004(v72, v73, v74);
}

uint64_t sub_100056248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v7[9] = a6;
  v7[10] = v6;
  v7[7] = a2;
  v7[8] = a4;
  v9 = sub_100002F78(&qword_1000FB2A0);
  v7[11] = v9;
  v7[12] = *(_QWORD *)(v9 - 8);
  v7[13] = sub_100080088();
  v7[14] = sub_100080088();
  v7[15] = sub_100080088();
  v10 = sub_100002F78(&qword_1000FD820);
  v7[16] = sub_10001D800(*(_QWORD *)(v10 - 8));
  v11 = sub_100002F78(&qword_1000FB920);
  v7[17] = sub_10001D800(*(_QWORD *)(v11 - 8));
  v12 = sub_10007D89C();
  v7[18] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v7[19] = v13;
  v7[20] = sub_10001D800(v13);
  v14 = (_QWORD *)swift_task_alloc(dword_1000FD44C);
  v7[21] = v14;
  *v14 = v7;
  v14[1] = sub_10005632C;
  v15 = sub_10007DBEC();
  return sub_10005A4C8(v15, a5);
}

uint64_t sub_10005632C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100037EFC();
  v2 = *v1;
  sub_10007EFB4();
  *(_QWORD *)(v2 + 176) = v3;
  *(_QWORD *)(v2 + 184) = v0;
  sub_10002BD30(v4);
  if (!v0)
    return sub_10001D6DC();
  swift_task_dealloc();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  return sub_10001D940((uint64_t (*)(void))v1[1]);
}

uint64_t sub_1000563C8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  sub_10001DD0C();
  v1 = v0[10];
  v2 = v0[7];
  v3 = sub_10007DB04();
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  sub_10007FCBC(sub_10007C96C, v3);
  sub_10001D938();
  v4 = (_QWORD *)swift_task_alloc(dword_1000FD404);
  v0[24] = v4;
  *v4 = v0;
  v4[1] = sub_10005643C;
  v5 = sub_10002BD0C(v0[22]);
  return sub_10007E65C(v5);
}

uint64_t sub_10005643C()
{
  sub_10007E720();
  return sub_10001D6DC();
}

uint64_t sub_100056480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t (*v43)(void);

  sub_10001DFE8();
  v15 = (unint64_t)sub_10007FFD0();
  *(_QWORD *)(v11 + 208) = v15;
  if (v15 >> 62)
  {
    sub_10007E4B0(v15);
    v16 = sub_100006B70();
    v9 = v16;
  }
  else
  {
    v16 = sub_10007F1A0(v15);
  }
  *(_QWORD *)(v11 + 216) = v9;
  if (v9)
  {
    *(_DWORD *)(v11 + 272) = enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.userInitiated(_:);
    v17 = *(_QWORD *)(v11 + 208);
    if ((v17 & 0xC000000000000001) != 0)
      sub_10007F420(v16, v17);
    else
      sub_10001E69C();
    sub_10007E2E4();
    v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    *(_QWORD *)(v11 + 240) = v33;
    sub_10007DB54(v10, v14, v33);
    sub_10007F3C4();
    v34 = sub_100002F78(&qword_1000FB2D8);
    sub_10001E0E8(v12, v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16));
    sub_10007D54C(v12);
    v35 = (_QWORD *)swift_task_alloc(dword_1000FD3F4);
    *(_QWORD *)(v11 + 248) = v35;
    v36 = sub_10007EFF0(v35, (uint64_t)sub_1000566E0);
    return sub_10007D0D4(v36, v37, v38, v39, v40, v41);
  }
  else
  {
    sub_10002BA68(*(_QWORD *)(v11 + 208));
    sub_10001E034();
    if (qword_1000FB108 != -1)
      swift_once(&qword_1000FB108, sub_10004D568);
    v18 = *(_QWORD *)(v11 + 120);
    v19 = *(NSObject **)(v11 + 88);
    v20 = *(_QWORD *)(v11 + 96);
    v21 = *(_QWORD *)(v11 + 56);
    v22 = sub_10001DD64();
    sub_100002FF8(v22, (uint64_t)qword_1000FD390);
    sub_10001E0E8(v18, v21, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 16));
    sub_100037C24();
    v23 = sub_10002B470();
    v24 = sub_100037B08(v19);
    v25 = *(_QWORD *)(v11 + 96);
    if (v24)
    {
      v26 = (uint8_t *)sub_10001D8D4(12);
      sub_10001D8D4(32);
      sub_10007F910();
      sub_10007E438(4.8149e-34);
      sub_100006744((unint64_t *)&qword_1000FBEA0, &qword_1000FB2A0);
      v28 = sub_10007D2B8(v27);
      sub_10007E654(v28, v29, v30, v31);
      *(_QWORD *)(v11 + 32) = v32;
      sub_100044654(v11 + 32, v11 + 40, a9);
      sub_10001E420();
      sub_10007DE2C(*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
      sub_10001E18C((void *)&_mh_execute_header, v19, v23, "Successfully acquired assets for request %s", v26);
      sub_10001DBB8(v13);
      sub_10001D790(v13);
      sub_10001D790((uint64_t)v26);
    }
    else
    {
      sub_10007DE2C(*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
    }

    sub_10007E4BC();
    sub_10001E330();
    sub_10001D938();
    sub_10001EAC8();
    sub_10001E490();
    sub_10002B504();
    v43 = (uint64_t (*)(void))sub_10001E5D0();
    return sub_10001D8DC(v43);
  }
}

uint64_t sub_1000566E0()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  sub_100037EFC();
  v11 = v2;
  v12 = v3;
  v10 = (uint64_t *)v1;
  v10 = *v1;
  v4 = v10;
  sub_10001EA4C(&v10);
  v4[32] = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_10002AD5C(v4[16], &qword_1000FD820);
    sub_10007EC14(v5, &qword_1000FB920);
    sub_10007D020();
    sub_10001E034();
  }
  else
  {
    v7 = v4[19];
    v6 = v4[20];
    sub_10002AD5C(v4[16], &qword_1000FD820);
    sub_10007DFD8(v8, &qword_1000FB920);
    sub_10007E7EC(v6, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  }
  return sub_10001D6DC();
}

uint64_t sub_1000567B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t (*v33)(void);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t);
  _QWORD *v42;

  sub_10001DFE8();
  v11 = v9[29];
  v12 = v9[27];
  swift_release();
  if (v11 == v12)
  {
    sub_10002BA68(v9[26]);
    sub_10001E034();
    if (qword_1000FB108 != -1)
      swift_once(&qword_1000FB108, sub_10004D568);
    v14 = v9[15];
    v15 = v9[11];
    v16 = v9[12];
    v17 = v9[7];
    v18 = sub_10001DD64();
    sub_100002FF8(v18, (uint64_t)qword_1000FD390);
    sub_10001E0E8(v14, v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 16));
    sub_100037C24();
    v19 = sub_10002B470();
    v20 = sub_100037B08(v15);
    v21 = v9[12];
    if (v20)
    {
      v22 = (uint8_t *)sub_10001D8D4(12);
      sub_10001D8D4(32);
      sub_10007F910();
      sub_10007E438(4.8149e-34);
      sub_100006744((unint64_t *)&qword_1000FBEA0, &qword_1000FB2A0);
      v24 = sub_10007D2B8(v23);
      sub_10007E654(v24, v25, v26, v27);
      v9[4] = v28;
      sub_100044654((uint64_t)(v9 + 4), (uint64_t)(v9 + 5), a9);
      sub_10001E420();
      sub_10007DE2C(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8));
      sub_10001E18C((void *)&_mh_execute_header, v15, v19, "Successfully acquired assets for request %s", v22);
      sub_10001DBB8(v10);
      sub_10001D790(v10);
      sub_10001D790((uint64_t)v22);
    }
    else
    {
      sub_10007DE2C(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8));
    }

    sub_10007E4BC();
    sub_10001E330();
    sub_10001D938();
    sub_10001EAC8();
    sub_10001E490();
    sub_10002B504();
    v33 = (uint64_t (*)(void))sub_10001E5D0();
    return sub_10001D8DC(v33);
  }
  else
  {
    v29 = v9[29];
    v30 = v9[26];
    if ((v30 & 0xC000000000000001) != 0)
    {
      result = sub_1000800A4(v13, v30);
      v32 = result;
    }
    else
    {
      v32 = *(_QWORD *)(v30 + 8 * v29 + 32);
      result = sub_10001E20C();
    }
    v9[28] = v32;
    v9[29] = v29 + 1;
    if (__OFADD__(v29, 1))
    {
      __break(1u);
    }
    else
    {
      v34 = v9[17];
      v35 = v9[16];
      v36 = v9[12];
      v37 = v9[7];
      sub_10002BAF8(v9[19]);
      v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 16);
      v9[30] = v38;
      sub_10001EA84(v34, v37, v38);
      sub_10007F444();
      sub_100002F78(&qword_1000FB2D8);
      v39 = sub_10007F3D8();
      sub_10001E0E8(v39, v40, v41);
      sub_10007D54C(v35);
      v42 = (_QWORD *)swift_task_alloc(dword_1000FD3F4);
      v9[31] = v42;
      *v42 = v9;
      v42[1] = sub_1000566E0;
      return sub_10007D0D4(v32, v9[20], v9[17], v9[16], v9[9], 1);
    }
  }
  return result;
}

uint64_t sub_100056A24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51[2];

  if (qword_1000FB108 != -1)
    swift_once(&qword_1000FB108, sub_10004D568);
  v50 = (_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = *(NSObject **)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 96);
  v49 = sub_10001DD64();
  v5 = sub_100002FF8(v49, (uint64_t)qword_1000FD390);
  sub_10001EA84((uint64_t)v3, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
  sub_10002B5D4();
  sub_10002B5D4();
  sub_100044AF0();
  v6 = sub_1000449A8();
  v7 = sub_10002B3F8(v3);
  v8 = *(_QWORD *)(v0 + 200);
  v9 = *(_QWORD *)(v0 + 112);
  v10 = *(_QWORD *)(v0 + 96);
  if (v7)
  {
    v5 = sub_10001D8D4(22);
    v47 = (_QWORD *)sub_10001D8D4(8);
    v48 = sub_10001D8D4(32);
    v51[0] = v48;
    *(_DWORD *)v5 = 136315394;
    sub_100006744((unint64_t *)&qword_1000FBEA0, &qword_1000FB2A0);
    v12 = sub_10001EC14(v11);
    sub_1000102C0(v12, v13, v51);
    *v50 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v50, v0 + 48);
    sub_10001EADC();
    sub_10007E164();
    *(_WORD *)(v5 + 12) = 2112;
    swift_errorRetain(v8);
    v15 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(_QWORD *)(v0 + 48) = v15;
    sub_10002B3F0(v0 + 48, v0 + 56);
    *v47 = v15;
    sub_10007FB94();
    sub_10007FB94();
    v2 = (uint64_t)v3;
    sub_10002B4A0((void *)&_mh_execute_header, v3, v6, "Failed to unloadIfNeededToMakeRoom for request %s: %@, releasing any assets", (uint8_t *)v5);
    sub_100002F78(&qword_1000FB8E0);
    sub_10001DBB8((uint64_t)v47);
    sub_10001D790((uint64_t)v47);
    v9 = v48;
    sub_10001DBB8(v48);
    sub_10001D790(v48);
    sub_10001D790(v5);

  }
  else
  {
    sub_10007E164();
    sub_10007FB94();
    sub_10007FB94();

  }
  sub_10007E1F4();
  v16 = *(_QWORD *)(v0 + 80);
  v17 = *(_QWORD *)(v0 + 56);
  v18 = sub_10007DB04();
  *(_QWORD *)(v18 + 16) = v16;
  *(_QWORD *)(v18 + 24) = v17;
  sub_10004F3D8((void (*)(uint64_t *))sub_10007CE78, v18, v2);
  sub_10001EBB8();
  sub_10001E490();
  v19 = (unint64_t)sub_10007FFD0();
  *(_QWORD *)(v0 + 208) = v19;
  if (v19 >> 62)
  {
    sub_10007E4B0(v19);
    v20 = sub_100006B70();
    v9 = v20;
  }
  else
  {
    v20 = sub_10007F1A0(v19);
  }
  *(_QWORD *)(v0 + 216) = v9;
  if (!v9)
  {
    sub_10002BA68(*(_QWORD *)(v0 + 208));
    sub_10001E034();
    if (qword_1000FB108 != -1)
      swift_once(&qword_1000FB108, sub_10004D568);
    v22 = *(_QWORD *)(v0 + 120);
    v23 = *(_QWORD *)(v0 + 96);
    v24 = *(NSObject **)(v0 + 56);
    sub_100002FF8(v49, (uint64_t)qword_1000FD390);
    sub_10001E0E8(v22, (uint64_t)v24, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 16));
    sub_100037C24();
    v25 = sub_1000449A8();
    v26 = sub_10002BBB8(v24);
    v27 = *(_QWORD *)(v0 + 96);
    if (v26)
    {
      v28 = (uint8_t *)sub_10001D8D4(12);
      v29 = sub_10001D8D4(32);
      v51[0] = v29;
      *(_DWORD *)v28 = 136315138;
      sub_100006744((unint64_t *)&qword_1000FBEA0, &qword_1000FB2A0);
      v31 = sub_10007D2B8(v30);
      sub_1000102C0(v31, v32, v51);
      v34 = sub_10007F1F8(v33, (_QWORD *)(v0 + 32));
      sub_100044654((uint64_t)v34, v35, (uint64_t)(v28 + 4));
      sub_10001E8A8();
      sub_10007DE2C(*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8));
      sub_10001E18C((void *)&_mh_execute_header, v24, v25, "Successfully acquired assets for request %s", v28);
      sub_10001DBB8(v29);
      sub_10001D790(v29);
      sub_10001D790((uint64_t)v28);
    }
    else
    {
      sub_10007DE2C(*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8));
    }

    sub_10007E4BC();
    sub_10001E330();
    sub_10001D938();
    sub_10001EAC8();
    sub_10001E490();
    sub_10002B504();
    sub_10001E5D0();
    sub_10002B848();
    __asm { BR              X0 }
  }
  *(_DWORD *)(v0 + 272) = enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.userInitiated(_:);
  v21 = *(_QWORD *)(v0 + 208);
  if ((v21 & 0xC000000000000001) != 0)
    sub_10007F420(v20, v21);
  else
    sub_10001E69C();
  sub_10007E2E4();
  v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  *(_QWORD *)(v0 + 240) = v36;
  sub_10007DB54(0, v10, v36);
  sub_10007F3C4();
  v37 = sub_100002F78(&qword_1000FB2D8);
  sub_10001E0E8(v18, v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 16));
  sub_10007D54C(v18);
  v38 = (_QWORD *)swift_task_alloc(dword_1000FD3F4);
  *(_QWORD *)(v0 + 248) = v38;
  sub_10007EFF0(v38, (uint64_t)sub_1000566E0);
  sub_10002B848();
  return sub_100050B60(v39, v40, v41, v42, v43, v44);
}

uint64_t sub_100056EE8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(void);
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;

  sub_10001E6D4();
  v27 = v1;
  v28 = v2;
  v26 = v0;
  swift_release();
  if (qword_1000FB108 != -1)
    swift_once(&qword_1000FB108, sub_10004D568);
  v3 = (void (*)(void))v0[30];
  v4 = v0[13];
  v5 = v0[7];
  v6 = sub_10001DD64();
  sub_100002FF8(v6, (uint64_t)qword_1000FD390);
  sub_10001E91C();
  v3();
  sub_10001E764();
  sub_10001E764();
  sub_10001E694();
  v7 = sub_10002B470();
  v8 = sub_10002B1AC(v7);
  v9 = v0[32];
  if (v8)
  {
    v10 = sub_10001D8D4(22);
    v23 = (_QWORD *)sub_10001D8D4(8);
    v24 = sub_10001D8D4(32);
    v25 = v24;
    *(_DWORD *)v10 = 136315394;
    sub_100006744((unint64_t *)&qword_1000FBEA0, &qword_1000FB2A0);
    v12 = sub_10001EC14(v11);
    sub_1000102C0(v12, v13, &v25);
    v0[2] = v14;
    sub_100080228((uint64_t)(v0 + 2), (uint64_t)(v0 + 3));
    sub_100006C48();
    sub_10007E164();
    *(_WORD *)(v10 + 12) = 2112;
    swift_errorRetain(v9);
    v15 = _swift_stdlib_bridgeErrorToNSError(v9);
    v0[3] = v15;
    sub_10002B3F0((uint64_t)(v0 + 3), (uint64_t)(v0 + 4));
    *v23 = v15;
    sub_10007FAC8();
    sub_10007FAC8();
    sub_10002B4A0((void *)&_mh_execute_header, v4, (os_log_type_t)v5, "Failed to acquire assets for request %s: %@, releasing any assets that may have been acquired", (uint8_t *)v10);
    sub_100002F78(&qword_1000FB8E0);
    sub_10001DBB8((uint64_t)v23);
    sub_10001D790((uint64_t)v23);
    sub_10001DBB8(v24);
    sub_10001D790(v24);
    sub_10001D790(v10);
  }
  else
  {
    sub_10007E164();
    sub_10007FAC8();
    sub_10007FAC8();
  }

  v16 = v0[10];
  v17 = v0[7];
  v18 = sub_10007DB04();
  *(_QWORD *)(v18 + 16) = v16;
  *(_QWORD *)(v18 + 24) = v17;
  sub_10007F1D8((void (*)(uint64_t *))sub_10007CE78, v18);
  sub_10001E034();
  sub_10001D938();
  v19 = (_QWORD *)swift_task_alloc(dword_1000FD48C);
  v0[33] = v19;
  *v19 = v0;
  v19[1] = sub_100057150;
  v20 = sub_10002BD0C(v0[26]);
  return sub_100066CF0(v20, v21);
}

uint64_t sub_100057150()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 264));
  sub_10001E034();
  sub_10001E10C();
  return sub_10001D6DC();
}

uint64_t sub_100057194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8);
  swift_task_dealloc();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  return sub_100037D1C(*(uint64_t (**)(void))(v8 + 8));
}

void sub_100057200(uint64_t *a1, uint64_t a2, void (*a3)(char *, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, void (*)(_QWORD, _QWORD), uint64_t);
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, void (*)(_QWORD, _QWORD), uint64_t);
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  uint64_t v46[3];
  _BYTE v47[24];
  uint64_t v48;
  uint64_t v49;

  v41 = a2;
  v5 = sub_100002F78(&qword_1000FB2A0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v45 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v41 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v41 - v12;
  v14 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v41 - v18;
  v43 = *a1;
  v20 = v43 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  swift_beginAccess(v43 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v47, 0, 0);
  sub_10002AC98(v20, (uint64_t)v19, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  v21 = *(void (**)(char *, void (*)(_QWORD, _QWORD), uint64_t))(v6 + 16);
  v44 = a3;
  v42 = v21;
  v21(v11, (void (*)(_QWORD, _QWORD))a3, v5);
  swift_retain();
  sub_1000137BC();
  v22 = *(void (**)(char *, uint64_t))(v6 + 8);
  v23 = v5;
  v22(v13, v5);
  swift_release();
  sub_10002AC98((uint64_t)v19, (uint64_t)v17, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  swift_beginAccess(v20, v46, 33, 0);
  sub_10007BDF8((uint64_t)v17, v20);
  swift_endAccess();
  sub_10002ACC4((uint64_t)v19, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  if (qword_1000FB108 != -1)
    swift_once(&qword_1000FB108, sub_10004D568);
  v24 = type metadata accessor for Logger(0);
  sub_100002FF8(v24, (uint64_t)qword_1000FD390);
  v25 = v45;
  v42(v45, (void (*)(_QWORD, _QWORD))v44, v5);
  v26 = v43;
  v27 = swift_retain_n(v43, 2);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.default.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    v30 = swift_slowAlloc(22, -1);
    v31 = swift_slowAlloc(64, -1);
    v46[0] = v31;
    *(_DWORD *)v30 = 136315394;
    swift_retain();
    v32 = sub_10008B1B0();
    v44 = v22;
    v34 = v33;
    swift_release();
    sub_1000102C0(v32, v34, v46);
    v48 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
    swift_release_n(v26, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 12) = 2080;
    sub_100006744((unint64_t *)&qword_1000FBEA0, &qword_1000FB2A0);
    v36 = v45;
    v38 = dispatch thunk of CustomStringConvertible.description.getter(v23, v37);
    sub_1000102C0(v38, v39, v46);
    v48 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
    swift_bridgeObjectRelease();
    v44(v36, v23);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Marked asset %s in use by request %s", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy(v31, 2);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v30, -1, -1);
  }
  else
  {
    swift_release_n(v26, 2);
    v22(v25, v5);
  }

}

uint64_t sub_100057620(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[12] = a1;
  v2[13] = v1;
  v3 = sub_10007D478();
  v2[14] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[15] = v4;
  v2[16] = sub_10001D800(v4);
  v5 = sub_100002F78(&qword_1000FB2D8);
  v2[17] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[18] = v6;
  v2[19] = sub_10002B1BC(v6);
  v2[20] = sub_10001E784();
  sub_10001D7B8();
  return sub_10001D6DC();
}

uint64_t sub_100057690()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  NSObject *v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  NSObject *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 v87;

  v1 = *(_QWORD *)(v0 + 96);
  sub_10002B2E0(*(_QWORD *)(v0 + 104) + 120, v0 + 48);
  *(_QWORD *)(sub_10007DB04() + 16) = v1;
  sub_10001E194();
  v2 = sub_10001D964();
  v4 = sub_10007F770(v2, v3, (uint64_t (*)(uint64_t))sub_10007C964);
  sub_10002B504();
  if (sub_10004BF34(v4))
  {
    sub_10001D9C0();
    sub_10007EABC();
    sub_10001E330();
    sub_10001D938();
    return sub_10002B208(*(uint64_t (**)(void))(v0 + 8));
  }
  v79 = v4;
  if (qword_1000FB108 != -1)
    goto LABEL_29;
  while (1)
  {
    v6 = *(_QWORD *)(v0 + 160);
    v7 = *(_QWORD **)(v0 + 144);
    v8 = *(_QWORD *)(v0 + 96);
    v9 = sub_10001DD64();
    v10 = sub_100002FF8(v9, (uint64_t)qword_1000FD390);
    *(_QWORD *)(v0 + 168) = v10;
    v11 = *(_QWORD *)(v9 - 8);
    v12 = sub_10001D828(*(_QWORD *)(v11 + 64));
    sub_10007F124(v12, v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16));
    v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v7[2];
    *(_QWORD *)(v0 + 176) = v13;
    sub_10001EA84(v6, v8, v13);
    v14 = v79;
    sub_10001D834(v79);
    sub_100044AF0();
    HIDWORD(v78) = sub_10002B470();
    v15 = sub_10007F250(BYTE4(v78));
    v16 = *(_QWORD *)(v0 + 160);
    if (!v15)
    {
      v32 = *(_QWORD *)(*(_QWORD *)(v0 + 144) + 8);
      sub_10007ECA0(*(_QWORD *)(v0 + 160));

      sub_10001EBB0(v79);
      sub_10007F8E8();
LABEL_27:
      *(_QWORD *)(v0 + 184) = v32;
      v63 = *(_QWORD *)(v0 + 96);
      v62 = *(_QWORD *)(v0 + 104);
      sub_10002B528();
      sub_10005CE8C(v14);
      sub_100044820();
      v64 = sub_10007DB04();
      *(_QWORD *)(v64 + 16) = v62;
      *(_QWORD *)(v64 + 24) = v63;
      sub_100080038((void (*)(uint64_t *))sub_10007CE8C);
      sub_10001D8B4();
      sub_10001E490();
      v65 = (_QWORD *)swift_task_alloc(dword_1000FD45C);
      *(_QWORD *)(v0 + 192) = v65;
      v66 = sub_100080114(v65, (uint64_t)sub_100057A70);
      return sub_10007E22C(v66);
    }
    v17 = (_DWORD *)sub_10007E44C();
    v69 = sub_10001D8D4(64);
    v83 = v69;
    *v17 = 136315394;
    sub_100006744(&qword_1000FBE80, &qword_1000FB2D8);
    v19 = sub_10007D2B8(v18);
    sub_10007FE64(v19, v20, v21, v22, v23, v24, v25, v26, v67, v68, v69, v71, v73, v74, v75, v76, v77);
    sub_10007EA54(v27);
    sub_10001E420();
    sub_10007F818();
    v28 = _swiftEmptyArrayStorage;
    v71 = v1;
    v73 = (uint64_t)v17;
    if (!sub_10007FB14())
    {
      v33 = v82;
LABEL_26:
      v51 = sub_10007F2E8();
      sub_10001E4C0();
      sub_10007EDA0(v51, v52, &v83);
      *(_QWORD *)(v0 + 88) = v53;
      sub_10002B3F0(v68, v77);
      sub_10001EBB0(v14);
      sub_100006C48();
      sub_10002B4A0((void *)&_mh_execute_header, v33, BYTE4(v78), "Session %s releasing assets %s", (uint8_t *)v9);
      sub_10007DBD8();
      sub_10001D790(v70);
      sub_10001D790(v9);

      sub_10007F748(v54, v55, v56, v57, v58, v59, v60, v61, v67, v68, v70, v71, v73, v74, v75);
      v32 = v72;
      goto LABEL_27;
    }
    sub_10007EB74();
    v81 = v79 & 0xC000000000000001;
    if ((v79 & 0xC000000000000001) != 0)
    {
      v29 = __CocoaSet.startIndex.getter(v79);
      v31 = 1;
    }
    else
    {
      v29 = sub_10001C854(v79);
      v31 = v34 & 1;
    }
    v85 = v29;
    v86 = v30;
    v87 = v31;
    if (v9 < 0)
      break;
    sub_10007FE3C();
    while (v9)
    {
      v35 = sub_10007E7B8();
      sub_10007DB54(v16, v35 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_descriptor, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
      sub_10001E098();
      if ((sub_10007FE24() & 1) == 0)
      {
        sub_10007ED48();
        v28 = v84;
      }
      v36 = v28[2];
      v33 = (v36 + 1);
      if (v36 >= v28[3] >> 1)
      {
        sub_10007F0A0();
        v28 = v84;
      }
      sub_10007E060();
      v84 = v28;
      v16 = v87;
      if (v81)
      {
        if ((v87 & 1) == 0)
          goto LABEL_31;
        v37 = sub_10007FEF0();
        if (v37)
          swift_isUniquelyReferenced_nonNull_native(v37);
        v33 = v82;
        v41 = sub_100002F78(&qword_1000FC510);
        v49 = sub_10007F520(v41, v42, v43, v44, v45, v46, v47, v48, v67, v68, v70, v71, v73, v74, v75, v76, v77, v78, v79,
                v80);
        sub_10007F4EC(v49, v50);
        sub_10007FF10();
      }
      else
      {
        v38 = sub_10007F338();
        sub_10007E3D4(v38, v39, v40);
      }
      if (!--v9)
      {
        sub_10007FDE8();
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_29:
    swift_once(&qword_1000FB108, sub_10004D568);
  }
  __break(1u);
LABEL_31:
  result = sub_100044820();
  __break(1u);
  return result;
}

uint64_t sub_100057A70()
{
  uint64_t v0;

  sub_10001D680(*(_QWORD *)(*(_QWORD *)v0 + 192));
  sub_10001D7B8();
  return sub_10001D674();
}

#error "100057B64: call analysis failed (funcsize=69)"

void sub_100057BD4()
{
  type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  sub_10002C5E4();
}

uint64_t sub_100057C08(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[12] = a1;
  v2[13] = v1;
  v3 = sub_10007D478();
  v2[14] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[15] = v4;
  v2[16] = sub_10001D800(v4);
  v5 = sub_100002F78(&qword_1000FB2A0);
  v2[17] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[18] = v6;
  v2[19] = sub_10002B1BC(v6);
  v2[20] = sub_10001E784();
  sub_10001D7B8();
  return sub_10001D6DC();
}

uint64_t sub_100057C78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  NSObject *v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  NSObject *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 v87;

  v1 = *(_QWORD *)(v0 + 96);
  sub_10002B2E0(*(_QWORD *)(v0 + 104) + 120, v0 + 48);
  *(_QWORD *)(sub_10007DB04() + 16) = v1;
  sub_10001E194();
  v2 = sub_10001D964();
  v4 = sub_10007F770(v2, v3, (uint64_t (*)(uint64_t))sub_10007C924);
  sub_10002B504();
  if (sub_10004BF34(v4))
  {
    sub_10001D9C0();
    sub_10007EABC();
    sub_10001E330();
    sub_10001D938();
    return sub_10002B208(*(uint64_t (**)(void))(v0 + 8));
  }
  v79 = v4;
  if (qword_1000FB108 != -1)
    goto LABEL_29;
  while (1)
  {
    v6 = *(_QWORD *)(v0 + 160);
    v7 = *(_QWORD **)(v0 + 144);
    v8 = *(_QWORD *)(v0 + 96);
    v9 = sub_10001DD64();
    v10 = sub_100002FF8(v9, (uint64_t)qword_1000FD390);
    *(_QWORD *)(v0 + 168) = v10;
    v11 = *(_QWORD *)(v9 - 8);
    v12 = sub_10001D828(*(_QWORD *)(v11 + 64));
    sub_10007F124(v12, v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16));
    v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v7[2];
    *(_QWORD *)(v0 + 176) = v13;
    sub_10001EA84(v6, v8, v13);
    v14 = v79;
    sub_10001D834(v79);
    sub_100044AF0();
    HIDWORD(v78) = sub_10002B470();
    v15 = sub_10007F250(BYTE4(v78));
    v16 = *(_QWORD *)(v0 + 160);
    if (!v15)
    {
      v32 = *(_QWORD *)(*(_QWORD *)(v0 + 144) + 8);
      sub_10007ECA0(*(_QWORD *)(v0 + 160));

      sub_10001EBB0(v79);
      sub_10007F8E8();
LABEL_27:
      *(_QWORD *)(v0 + 184) = v32;
      v63 = *(_QWORD *)(v0 + 96);
      v62 = *(_QWORD *)(v0 + 104);
      sub_10002B528();
      sub_10005CE8C(v14);
      sub_100044820();
      v64 = sub_10007DB04();
      *(_QWORD *)(v64 + 16) = v62;
      *(_QWORD *)(v64 + 24) = v63;
      sub_100080038((void (*)(uint64_t *))sub_10007C92C);
      sub_10001D8B4();
      sub_10001E490();
      v65 = (_QWORD *)swift_task_alloc(dword_1000FD45C);
      *(_QWORD *)(v0 + 192) = v65;
      v66 = sub_100080114(v65, (uint64_t)sub_100058058);
      return sub_10007E22C(v66);
    }
    v17 = (_DWORD *)sub_10007E44C();
    v69 = sub_10001D8D4(64);
    v83 = v69;
    *v17 = 136315394;
    sub_100006744((unint64_t *)&qword_1000FBEA0, &qword_1000FB2A0);
    v19 = sub_10007D2B8(v18);
    sub_10007FE64(v19, v20, v21, v22, v23, v24, v25, v26, v67, v68, v69, v71, v73, v74, v75, v76, v77);
    sub_10007EA54(v27);
    sub_10001E420();
    sub_10007F818();
    v28 = _swiftEmptyArrayStorage;
    v71 = v1;
    v73 = (uint64_t)v17;
    if (!sub_10007FB14())
    {
      v33 = v82;
LABEL_26:
      v51 = sub_10007F2E8();
      sub_10001E4C0();
      sub_10007EDA0(v51, v52, &v83);
      *(_QWORD *)(v0 + 88) = v53;
      sub_10002B3F0(v68, v77);
      sub_10001EBB0(v14);
      sub_100006C48();
      sub_10002B4A0((void *)&_mh_execute_header, v33, BYTE4(v78), "Request %s releasing assets %s", (uint8_t *)v9);
      sub_10007DBD8();
      sub_10001D790(v70);
      sub_10001D790(v9);

      sub_10007F748(v54, v55, v56, v57, v58, v59, v60, v61, v67, v68, v70, v71, v73, v74, v75);
      v32 = v72;
      goto LABEL_27;
    }
    sub_10007EB74();
    v81 = v79 & 0xC000000000000001;
    if ((v79 & 0xC000000000000001) != 0)
    {
      v29 = __CocoaSet.startIndex.getter(v79);
      v31 = 1;
    }
    else
    {
      v29 = sub_10001C854(v79);
      v31 = v34 & 1;
    }
    v85 = v29;
    v86 = v30;
    v87 = v31;
    if (v9 < 0)
      break;
    sub_10007FE3C();
    while (v9)
    {
      v35 = sub_10007E7B8();
      sub_10007DB54(v16, v35 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_descriptor, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
      sub_10001E098();
      if ((sub_10007FE24() & 1) == 0)
      {
        sub_10007ED48();
        v28 = v84;
      }
      v36 = v28[2];
      v33 = (v36 + 1);
      if (v36 >= v28[3] >> 1)
      {
        sub_10007F0A0();
        v28 = v84;
      }
      sub_10007E060();
      v84 = v28;
      v16 = v87;
      if (v81)
      {
        if ((v87 & 1) == 0)
          goto LABEL_31;
        v37 = sub_10007FEF0();
        if (v37)
          swift_isUniquelyReferenced_nonNull_native(v37);
        v33 = v82;
        v41 = sub_100002F78(&qword_1000FC510);
        v49 = sub_10007F520(v41, v42, v43, v44, v45, v46, v47, v48, v67, v68, v70, v71, v73, v74, v75, v76, v77, v78, v79,
                v80);
        sub_10007F4EC(v49, v50);
        sub_10007FF10();
      }
      else
      {
        v38 = sub_10007F338();
        sub_10007E3D4(v38, v39, v40);
      }
      if (!--v9)
      {
        sub_10007FDE8();
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_29:
    swift_once(&qword_1000FB108, sub_10004D568);
  }
  __break(1u);
LABEL_31:
  result = sub_100044820();
  __break(1u);
  return result;
}

uint64_t sub_100058058()
{
  uint64_t v0;

  sub_10001D680(*(_QWORD *)(*(_QWORD *)v0 + 192));
  sub_10001D7B8();
  return sub_10001D674();
}

#error "10005814C: call analysis failed (funcsize=69)"

void sub_1000581BC()
{
  type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  sub_10002C600();
}

void sub_1000581F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(_QWORD);
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  unint64_t *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69[3];
  uint64_t v70;

  sub_10007F5A0();
  a19 = v22;
  a20 = v23;
  v65 = v24;
  v66 = v25;
  v68 = v26;
  v28 = v27;
  v30 = v29;
  v64 = v31;
  v32 = sub_100002F78(v31);
  sub_10007F590();
  __chkstk_darwin(v33);
  sub_10001E168();
  v36 = v35 - v34;
  sub_10007D9D8();
  sub_10002BCBC();
  __chkstk_darwin(v37);
  sub_10007F284();
  __chkstk_darwin(v38);
  v40 = (char *)&v62 - v39;
  v41 = *v30;
  v42 = v41 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  sub_10002B2E0(v41 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, (uint64_t)&v70);
  sub_10007E94C(v42, (uint64_t)v40);
  v67 = v28;
  ((void (*)(uint64_t))v68)(v28);
  sub_10007E94C((uint64_t)v40, v21);
  sub_10002B308(v42, (uint64_t)v69, 33);
  sub_10007BDF8(v21, v42);
  swift_endAccess(v69);
  v43 = sub_10007F54C();
  sub_10002ACC4(v43, v44);
  if (qword_1000FB108 != -1)
    swift_once(&qword_1000FB108, sub_10004D568);
  v45 = sub_10001DD64();
  sub_100002FF8(v45, (uint64_t)qword_1000FD390);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v36, v67, v32);
  v46 = sub_10001D834(v41);
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.default.getter();
  v49 = v48;
  if (os_log_type_enabled(v47, v48))
  {
    v50 = sub_10001D8D4(22);
    v63 = v32;
    v68 = v20;
    v51 = v50;
    v52 = sub_10001D8D4(64);
    v69[0] = v52;
    *(_DWORD *)v51 = 136315394;
    sub_10001E69C();
    LODWORD(v67) = v49;
    v53 = sub_10008B1B0();
    v55 = v54;
    swift_release(v41);
    sub_1000102C0(v53, v55, v69);
    a10 = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&a10, &a11, v51 + 4);
    sub_10001EBB0(v41);
    swift_bridgeObjectRelease(v55);
    *(_WORD *)(v51 + 12) = 2080;
    sub_100006744(v65, v64);
    v57 = v63;
    v59 = dispatch thunk of CustomStringConvertible.description.getter(v63, v58);
    sub_100080158(v59, v60);
    a10 = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&a10, &a11, v51 + 14);
    sub_10001E034();
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v36, v57);
    _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v67, v66, (uint8_t *)v51, 0x16u);
    swift_arrayDestroy(v52, 2);
    sub_10001D790(v52);
    sub_10001D790(v51);
  }
  else
  {
    sub_10001EBB0(v41);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v36, v32);
  }

  sub_10007EDD8();
}

uint64_t sub_1000584D8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[9] = a1;
  v2[10] = v1;
  v3 = sub_10007E860();
  v2[11] = v3;
  v2[12] = sub_10002B1BC(*(_QWORD *)(v3 - 8));
  v2[13] = sub_10001E784();
  sub_10001D7B8();
  return sub_10001D6DC();
}

uint64_t sub_100058524()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;

  sub_10001DFE8();
  if (qword_1000FB108 != -1)
    swift_once(&qword_1000FB108, sub_10004D568);
  v2 = v0[9];
  v3 = v0[13];
  v4 = sub_10001DD64();
  v0[14] = sub_100002FF8(v4, (uint64_t)qword_1000FD390);
  v5 = sub_100037FBC();
  sub_10002AC98(v5, v6, v7);
  sub_100037C24();
  v8 = sub_10001E9D0();
  v9 = sub_10001E6C4(v8);
  v10 = v0[13];
  if (v9)
  {
    v11 = v0[12];
    v24 = v0[11];
    v12 = (uint8_t *)sub_10001D8D4(12);
    sub_10001D8D4(32);
    sub_10007F910();
    *(_DWORD *)v12 = 136315138;
    sub_10002AC98(v10, v11, type metadata accessor for InferenceProviderAssetManagerPolicy);
    v13 = String.init<A>(describing:)(v11, v24);
    sub_10007E654(v13, v14, v15, v16);
    v0[8] = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 8, v0 + 9, v12 + 4);
    sub_10002B684();
    sub_10002ACC4(v10, type metadata accessor for InferenceProviderAssetManagerPolicy);
    sub_10001E18C((void *)&_mh_execute_header, v2, (os_log_type_t)v3, "Processing policy change, new policy: %s", v12);
    sub_10001DBB8(v1);
    sub_10001D790(v1);
    sub_10001D790((uint64_t)v12);
  }
  else
  {
    sub_10002ACC4(v0[13], type metadata accessor for InferenceProviderAssetManagerPolicy);
  }

  v18 = sub_10007E4F0();
  sub_10002B308(v18, v19, 33);
  v20 = sub_10002BF40();
  sub_10007C854(v20, v21);
  sub_10007F558();
  v22 = (_QWORD *)swift_task_alloc(dword_1000FD954);
  v0[15] = v22;
  *v22 = v0;
  v22[1] = sub_1000586FC;
  sub_10002BC1C();
  return sub_100058938();
}

uint64_t sub_1000586FC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;

  v1 = *v0;
  v5 = v1;
  v2 = *v0;
  sub_10001D788(*(_QWORD *)(v1 + 120), &v5);
  v3 = (_QWORD *)swift_task_alloc(dword_1000FD95C);
  *(_QWORD *)(v1 + 128) = v3;
  *v3 = v2;
  v3[1] = sub_10005875C;
  return sub_100058A54();
}

uint64_t sub_10005875C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;

  v1 = *v0;
  v5 = v1;
  v2 = *v0;
  sub_10001D788(*(_QWORD *)(v1 + 128), &v5);
  v3 = (_QWORD *)swift_task_alloc(dword_1000FD45C);
  *(_QWORD *)(v1 + 136) = v3;
  *v3 = v2;
  v3[1] = sub_1000587C0;
  return sub_10005D018(1);
}

uint64_t sub_1000587C0()
{
  uint64_t v0;

  v0 = sub_1000800F4();
  sub_10001D680(v0);
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_1000587F4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  v1 = v0[10];
  sub_10002B2E0(v1 + 120, (uint64_t)(v0 + 5));
  v0[18] = *(_QWORD *)(v1 + 120);
  v2 = unk_1000FD974;
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1000FD970 + dword_1000FD970);
  sub_10001D964();
  sub_10001E194();
  v3 = (_QWORD *)swift_task_alloc(v2);
  v0[19] = v3;
  *v3 = v0;
  v3[1] = sub_100058884;
  v4 = sub_10001E2B4();
  return v8(v4, v5, v6);
}

uint64_t sub_100058884()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 152));
  sub_10001D930();
  sub_10001E034();
  sub_10001E10C();
  return sub_10001D6DC();
}

uint64_t sub_1000588C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(void **)(v2 + 112);
  Logger.logObject.getter(a1);
  v4 = sub_10001E9D0();
  if (sub_100039E20(v4))
  {
    v5 = (_WORD *)sub_10001D8D4(2);
    sub_10004478C(v5);
    sub_100039E4C((void *)&_mh_execute_header, v6, v7, "Completed policy change");
    sub_10001D790(v1);
  }

  sub_10001D938();
  sub_10001EAC8();
  return sub_10002B7C0(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_100058938()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_10001D948((uint64_t)sub_10005894C, v0);
}

uint64_t sub_10005894C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16)
                 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_purgeInactiveAssetsTask);
  *(_QWORD *)(v0 + 24) = v1;
  if (v1)
  {
    sub_10002B400();
    Task.cancel()();
    v2 = (_QWORD *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    *(_QWORD *)(v0 + 32) = v2;
    *v2 = v0;
    v2[1] = sub_1000589E4;
    sub_10007F888();
    return sub_10007E098();
  }
  else
  {
    sub_100050960();
    return sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_1000589E4()
{
  uint64_t v0;

  sub_10001D680(*(_QWORD *)(*(_QWORD *)v0 + 32));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_100058A24()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  sub_100050960();
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100058A54()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_10001D948((uint64_t)sub_100058A68, v0);
}

uint64_t sub_100058A68()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16)
                 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_delayedAssetTransitionTask);
  *(_QWORD *)(v0 + 24) = v1;
  if (v1)
  {
    sub_10002B400();
    Task.cancel()();
    v2 = (_QWORD *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    *(_QWORD *)(v0 + 32) = v2;
    *v2 = v0;
    v2[1] = sub_100058B00;
    sub_10007F888();
    return sub_10007E098();
  }
  else
  {
    sub_10005D5C0();
    return sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_100058B00()
{
  uint64_t v0;

  sub_10001D680(*(_QWORD *)(*(_QWORD *)v0 + 32));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_100058B40()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  sub_10005D5C0();
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100058B70(uint64_t *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2[5] = a2;
  v5 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  v2[6] = v5;
  v6 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a1;
  v2[7] = v6;
  v2[8] = v7;
  v8 = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  v2[9] = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  swift_beginAccess(v7 + v8, v2 + 2, 0, 0);
  return swift_task_switch(sub_100058C08, a2, 0);
}

uint64_t sub_100058C08()
{
  uint64_t *v0;

  sub_10002AC98(v0[8] + v0[9], v0[7], type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_100058C48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v1 + *(int *)(*(_QWORD *)(v0 + 48) + 28));
  sub_10001E194();
  sub_10002ACC4(v1, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  if (v2)
  {
    *(_QWORD *)(v0 + 80) = v2;
    v3 = (_QWORD *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    *(_QWORD *)(v0 + 88) = v3;
    sub_100002F78(&qword_1000FB5F8);
    *v3 = v0;
    v3[1] = sub_100058CF8;
    sub_10007DCBC();
    return Task.value.getter(v4, v5, v6, v4, v7);
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v0 + 56));
    return sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_100058CF8()
{
  uint64_t v0;
  uint64_t v1;

  sub_10001D680(*(_QWORD *)(*(_QWORD *)v1 + 88));
  if (v0)
    sub_10001EBB8();
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_100058D48()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 80));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_100058D7C()
{
  uint64_t *v0;

  sub_10002AC98(v0[8] + v0[9], v0[7], type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_100058DBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[5];
  _BYTE v8[24];

  sub_10002B2E0(v1 + 120, (uint64_t)v8);
  v3 = *(_QWORD *)(v1 + 120);
  v7[2] = a1;
  sub_10001E338();
  sub_10000805C((uint64_t (*)(uint64_t *))sub_10007C838, (uint64_t)v7, v3);
  v5 = v4;
  result = sub_10001E034();
  if (v5)
  {
    sub_1000AFA64();
    return sub_10001D930();
  }
  return result;
}

uint64_t sub_100058E50(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v3 = InferenceProviderAssetDescriptor.identifier.getter();
  v5 = v4;
  v6 = a2[1];
  if (v3 == *a2 && v4 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, *a2, v6, 0);
  swift_bridgeObjectRelease(v5);
  return v8 & 1;
}

uint64_t sub_100058ECC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[22] = a2;
  v3[23] = v2;
  v3[21] = a1;
  v4 = sub_10007D478();
  v3[24] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[25] = v5;
  v3[26] = sub_10001D800(v5);
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_100058F14()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)swift_task_alloc(dword_1000FCE84);
  *(_QWORD *)(v0 + 216) = v1;
  v2 = sub_10007ED24(v1);
  return sub_10007DAB0(v2, v3);
}

uint64_t sub_100058F64()
{
  sub_10007E780();
  return sub_10001D6DC();
}

uint64_t sub_100058FA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;

  sub_10007DFEC(a1, a2, &qword_1000FBEB0);
  if (!*(_QWORD *)(v2 + 120))
  {
    sub_10007E4D8();
    v7 = sub_10002B8A0();
    sub_100006710((unint64_t *)&qword_1000FB600, (uint64_t (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_10002B560(v7, v8);
    v10 = (uint64_t)v9;
    *v9 = InferenceProviderDescriptor.description.getter();
    *(_QWORD *)(v10 + 8) = v11;
    v12 = sub_10001DE08(v10, enum case for ModelManagerError.unrecognizedInferenceProvider(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104));
    swift_willThrow(v12, v13, v14, v15, v16, v17, v18, v19);
    v20 = sub_10007F9BC();
    sub_10002AD5C(v20, v21);
    sub_1000800D8();
    sub_10007F954();
    __asm { BR              X0 }
  }
  sub_10000667C((__int128 *)(v2 + 96), v2 + 56);
  v3 = (_QWORD *)swift_task_alloc(dword_1000FD44C);
  *(_QWORD *)(v2 + 232) = v3;
  sub_10007FA1C(v3, (uint64_t)sub_1000590C4);
  sub_10007F954();
  return sub_10005A4C8(v4, v5);
}

uint64_t sub_1000590C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10007EFB4();
  *(_QWORD *)(v0 + 240) = v2;
  *(_QWORD *)(v0 + 248) = v1;
  sub_10002BD30(v3);
  return sub_10001D6DC();
}

#error "100059324: call analysis failed (funcsize=170)"

uint64_t sub_1000593CC()
{
  uint64_t v0;

  sub_1000800D8();
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000593F4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_10007F480();
  sub_10002BBF0(v1, &qword_1000FBEB0);
  sub_1000800D8();
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10005942C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[2] = v0;
  v2 = sub_100002F78(&qword_1000FD7E0);
  v1[3] = sub_10001D800(*(_QWORD *)(v2 - 8));
  v3 = sub_10007D89C();
  v1[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[5] = v4;
  v1[6] = sub_10001D800(v4);
  sub_10001D7B8();
  return sub_10001D674();
}

void sub_100059488()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  _WORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t (*v27)(void);

  if (qword_1000FB108 != -1)
    swift_once(&qword_1000FB108, sub_10004D568);
  v3 = sub_10001DD64();
  *(_QWORD *)(v1 + 56) = sub_100002FF8(v3, (uint64_t)qword_1000FD390);
  sub_1000490A8();
  sub_10007FBA4();
  if (sub_10002BBB8(v2))
  {
    v4 = (_WORD *)sub_10001D8D4(2);
    sub_10004478C(v4);
    sub_10007CECC((void *)&_mh_execute_header, v2, v5, "Unloading assets for forced version change");
    sub_10001D790(v0);
  }

  sub_10004E1E0();
  sub_10000B83C(v6);
  v8 = v7;
  v9 = (unint64_t)sub_10005CE8C(v7);
  *(_QWORD *)(v1 + 64) = v9;
  sub_10001D8B4();
  if (v9 >> 62)
  {
    sub_10001E338();
    v8 = sub_10007EC34();
    v10 = sub_10001E034();
    if (v8)
    {
LABEL_7:
      *(_DWORD *)(v1 + 104) = enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.assetVersionChange(_:);
      *(_QWORD *)(v1 + 72) = v8 - 1;
      if (__OFSUB__(v8, 1))
      {
        __break(1u);
      }
      else
      {
        v12 = sub_10007D124(v10, v11, *(_QWORD *)(v1 + 64));
        *(_QWORD *)(v1 + 80) = sub_10007D8D4(v12, *(_QWORD *)(v1 + 64));
        v13 = *(_QWORD *)(v1 + 24);
        sub_10002BAF8(*(_QWORD *)(v1 + 40));
        v14 = sub_10002BCD4();
        sub_10002B26C(v13, v15, v16, v14);
        v17 = (_QWORD *)swift_task_alloc(dword_1000FD484);
        *(_QWORD *)(v1 + 88) = v17;
        *v17 = v1;
        v17[1] = sub_1000596B8;
        v18 = sub_10007DBEC();
        sub_10007EFD0(v18, v19, v20);
      }
      return;
    }
  }
  else
  {
    sub_100080134();
    if (v8)
      goto LABEL_7;
  }
  v21 = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 64));
  Logger.logObject.getter(v21);
  v22 = sub_10001E9D0();
  if (sub_100039E20(v22))
  {
    v23 = (_WORD *)sub_10001D8D4(2);
    sub_10004478C(v23);
    sub_100039E4C((void *)&_mh_execute_header, v24, v25, "Finished unloading assets for forced version change");
    sub_10001D790(v0);
  }
  sub_10007F6D8();
  v27 = (uint64_t (*)(void))((char *)&dword_1000FB7A8 + dword_1000FB7A8);
  sub_10002B400();
  v26 = (_QWORD *)sub_10001EBC0();
  *(_QWORD *)(v1 + 96) = v26;
  *v26 = v1;
  v26[1] = sub_100059898;
  sub_10007EFDC((uint64_t)&unk_1000FD948, *(_QWORD *)(v1 + 16), v27);
}

uint64_t sub_1000596B8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_100037EFC();
  sub_10001E538();
  v3 = sub_10001D788(*(_QWORD *)(v1 + 88), v2);
  if (v0)
    v3 = sub_10001EBB8();
  sub_10007D78C(v3, &qword_1000FD7E0);
  sub_10007D020();
  sub_10007E854();
  return sub_10001D6DC();
}

void sub_100059740()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  _WORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void (*v25)(uint64_t, uint64_t);

  v3 = v2[9];
  swift_release(v2[10]);
  if (v3)
  {
    v6 = v2[9];
    v7 = v6 - 1;
    v2[9] = v6 - 1;
    if (__OFSUB__(v6, 1))
    {
      __break(1u);
    }
    else
    {
      v8 = sub_10007D124(v4, v5, v2[8]);
      v9 = v2[8];
      if (v0)
      {
        v10 = sub_10007D8D4(v8, v9);
      }
      else
      {
        v10 = *(_QWORD *)(v9 + 8 * v7 + 32);
        sub_10001D7EC();
      }
      v2[10] = v10;
      v11 = v2[3];
      sub_10002BAF8(v2[5]);
      v12 = sub_10002BCD4();
      sub_10002B26C(v11, v13, v14, v12);
      v15 = (_QWORD *)swift_task_alloc(dword_1000FD484);
      v2[11] = v15;
      *v15 = v2;
      v15[1] = sub_1000596B8;
      v16 = sub_10007DBEC();
      sub_10007EB3C(v16, v17, v18);
    }
  }
  else
  {
    v19 = swift_bridgeObjectRelease(v2[8]);
    Logger.logObject.getter(v19);
    v20 = sub_10001E9D0();
    if (sub_100039E20(v20))
    {
      v21 = (_WORD *)sub_10001D8D4(2);
      sub_10004478C(v21);
      sub_100039E4C((void *)&_mh_execute_header, v22, v23, "Finished unloading assets for forced version change");
      sub_10001D790(v1);
    }
    sub_10007F6D8();
    v25 = (void (*)(uint64_t, uint64_t))((char *)&dword_1000FB7A8 + dword_1000FB7A8);
    sub_10002B400();
    v24 = (_QWORD *)sub_10001EBC0();
    v2[12] = v24;
    *v24 = v2;
    v24[1] = sub_100059898;
    v25((uint64_t)&unk_1000FD948, v2[2]);
  }
}

uint64_t sub_100059898(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1000800E0();
  sub_10001D680(v3);
  sub_100044820();
  sub_10001D938();
  sub_10001EAC8();
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(a1);
}

uint64_t sub_1000598EC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2[3] = a1;
  v2[4] = a2;
  v3 = (_QWORD *)swift_task_alloc(dword_1000FD454);
  v2[5] = v3;
  *v3 = v2;
  v3[1] = sub_100059938;
  return sub_10005B0BC();
}

uint64_t sub_100059938(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_BYTE *)(*(_QWORD *)v1 + 64) = a1;
  sub_10002BD30(v2);
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_100059984()
{
  uint64_t v0;
  _QWORD *v1;

  if (*(_BYTE *)(v0 + 64) == 1)
  {
    sub_10007DCF8(*(_QWORD *)(v0 + 32));
    v1 = (_QWORD *)swift_task_alloc(dword_1000FE7C4);
    *(_QWORD *)(v0 + 48) = v1;
    sub_10002BFB4(v1, (uint64_t)sub_1000599F0);
    return sub_10007EFC4();
  }
  else
  {
    **(_BYTE **)(v0 + 24) = 0;
    return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_1000599F0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 56) = v1;
  swift_task_dealloc(v3);
  return sub_10001D6DC();
}

uint64_t sub_100059A44()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000FB108 != -1)
    swift_once(&qword_1000FB108, sub_10004D568);
  v3 = sub_10001DD64();
  sub_100037AC4(v3, (uint64_t)qword_1000FD390);
  v4 = sub_10001E9D0();
  if (sub_100039E20(v4))
  {
    v5 = (_WORD *)sub_10001D8D4(2);
    sub_10004478C(v5);
    sub_100039E4C((void *)&_mh_execute_header, v6, v7, "Force switched asset versions");
    sub_10001D790(v1);
  }

  **(_BYTE **)(v2 + 24) = 1;
  return sub_10002B7C0(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_100059AE4()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  _QWORD *v5;
  uint64_t v6;

  sub_10001E6F0();
  if (qword_1000FB108 != -1)
    swift_once(&qword_1000FB108, sub_10004D568);
  v1 = sub_10001DD64();
  sub_100002FF8(v1, (uint64_t)qword_1000FD390);
  sub_10001E764();
  sub_10001E764();
  v2 = sub_10002B3CC();
  v3 = static os_log_type_t.error.getter();
  if (sub_10002B3F8(v2))
  {
    v4 = (uint8_t *)sub_10001D8D4(12);
    v5 = (_QWORD *)sub_10001D8D4(8);
    *(_DWORD *)v4 = 138412290;
    sub_10002B5D4();
    v6 = sub_100044ADC();
    *(_QWORD *)(v0 + 16) = v6;
    sub_10007DF54(v0 + 16, v0 + 24, (uint64_t)(v4 + 4));
    *v5 = v6;
    sub_10002B498();
    sub_10002B498();
    sub_10001E18C((void *)&_mh_execute_header, v2, v3, "Failed to force switch asset versions, failed to cycle asset lock: %@", v4);
    sub_100002F78(&qword_1000FB8E0);
    sub_10001DBB8((uint64_t)v5);
    sub_10001D790((uint64_t)v5);
    sub_10001D790((uint64_t)v4);

    sub_10002B498();
  }
  else
  {
    sub_10002B498();
    sub_10002B498();
    sub_10002B498();

  }
  **(_BYTE **)(v0 + 24) = 0;
  return sub_10002B160(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100059C3C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  return sub_10001D948((uint64_t)sub_100059C50, v0);
}

uint64_t sub_100059C50()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[3];
  v0[4] = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_modelCatalog;
  v0[5] = sub_10007DCF8(v1);
  return sub_10001D674();
}

uint64_t sub_100059C94()
{
  uint64_t v0;
  _QWORD *v1;

  if (*(_BYTE *)(**(_QWORD **)(v0 + 40) + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_assetsHaveUpdated) != 1)
    return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
  v1 = (_QWORD *)swift_task_alloc(dword_1000FD454);
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_100059D08;
  return sub_10005B0BC();
}

uint64_t sub_100059D08(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_BYTE *)(*(_QWORD *)v1 + 72) = a1;
  sub_10002BD30(v2);
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_100059D58()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  if (*(_BYTE *)(v0 + 72) != 1)
    return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
  v1 = (_QWORD *)(*(_QWORD *)(v0 + 24) + *(_QWORD *)(v0 + 32));
  sub_10001C830(v1, v1[3]);
  v2 = (_QWORD *)swift_task_alloc(dword_1000FE7C4);
  *(_QWORD *)(v0 + 56) = v2;
  sub_10002BFB4(v2, (uint64_t)sub_100059DBC);
  return sub_10007EFC4();
}

uint64_t sub_100059DBC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 64) = v1;
  swift_task_dealloc(v3);
  return sub_10001D6DC();
}

uint64_t sub_100059E10()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1000FB108 != -1)
    swift_once(&qword_1000FB108, sub_10004D568);
  v3 = sub_10001DD64();
  sub_100037AC4(v3, (uint64_t)qword_1000FD390);
  v4 = sub_10001E9D0();
  if (sub_100039E20(v4))
  {
    v5 = (_WORD *)sub_10001D8D4(2);
    sub_10004478C(v5);
    sub_100039E4C((void *)&_mh_execute_header, v6, v7, "Switched asset versions");
    sub_10001D790(v1);
  }

  return sub_10002B7C0(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_100059EA4()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  _QWORD *v5;
  uint64_t v6;

  sub_10001E6F0();
  if (qword_1000FB108 != -1)
    swift_once(&qword_1000FB108, sub_10004D568);
  v1 = sub_10001DD64();
  sub_100002FF8(v1, (uint64_t)qword_1000FD390);
  sub_10001E764();
  sub_10001E764();
  v2 = sub_10002B3CC();
  v3 = static os_log_type_t.error.getter();
  if (sub_10002B3F8(v2))
  {
    v4 = (uint8_t *)sub_10001D8D4(12);
    v5 = (_QWORD *)sub_10001D8D4(8);
    *(_DWORD *)v4 = 138412290;
    sub_10002B5D4();
    v6 = sub_100044ADC();
    *(_QWORD *)(v0 + 16) = v6;
    sub_10007DF54(v0 + 16, v0 + 24, (uint64_t)(v4 + 4));
    *v5 = v6;
    sub_10002B498();
    sub_10002B498();
    sub_10001E18C((void *)&_mh_execute_header, v2, v3, "Failed to switch asset versions, failed to cycle asset lock: %@", v4);
    sub_100002F78(&qword_1000FB8E0);
    sub_10001DBB8((uint64_t)v5);
    sub_10001D790((uint64_t)v5);
    sub_10001D790((uint64_t)v4);

    sub_10002B498();
  }
  else
  {
    sub_10002B498();
    sub_10002B498();
    sub_10002B498();

  }
  return sub_10002B160(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100059FF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[19] = a2;
  v3[20] = v2;
  v3[18] = a1;
  v4 = sub_10007F430();
  v3[21] = sub_10001D800(*(_QWORD *)(v4 - 8));
  v5 = type metadata accessor for ModelCatalogAssetVersionedData(0);
  v3[22] = v5;
  v3[23] = sub_10001D800(*(_QWORD *)(v5 - 8));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_10005A04C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v11;

  v1 = *(_QWORD *)(v0 + 160);
  v11 = *(_OWORD *)(v0 + 144);
  sub_10002B2E0(v1 + 120, v0 + 96);
  v2 = *(_QWORD *)(v1 + 120);
  v3 = sub_10007DB04();
  *(_OWORD *)(v3 + 16) = v11;
  sub_10001D964();
  sub_10000805C(sub_10007C7D8, v3, v2);
  v5 = v4;
  sub_10001D8B4();
  sub_10001E490();
  if (v5)
  {
    swift_task_dealloc(*(_QWORD *)(v0 + 184));
    sub_10001D938();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
  }
  else
  {
    v7 = *(uint64_t **)(v0 + 144);
    sub_10007DCF8(*(_QWORD *)(v0 + 160));
    v9 = *v7;
    v8 = v7[1];
    v10 = (_QWORD *)swift_task_alloc(dword_1000FE7D4);
    *(_QWORD *)(v0 + 192) = v10;
    *v10 = v0;
    v10[1] = sub_10005A158;
    return sub_1000A60BC(*(_QWORD *)(v0 + 184), v9, v8);
  }
}

uint64_t sub_10005A158()
{
  sub_10007E720();
  return sub_10001D6DC();
}

void sub_10005A19C()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = (uint64_t *)v0[23];
  v3 = v0[20];
  v2 = v0[21];
  v30 = sub_10001E1D8();
  v4 = sub_10007FB5C();
  sub_10002AC98(v4, v5, v6);
  v7 = v1[1];
  v29 = *v1;
  v8 = sub_10001DBE4();
  v28 = FilePath.string.getter(v8);
  v10 = v9;
  v11 = sub_1000801B8();
  sub_100006694(v11, v12);
  v13 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_providerManager);
  sub_100006694(v3 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_telemetryManager, (uint64_t)(v0 + 7));
  v14 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_neuralEngine);
  sub_10001E69C();
  sub_10007D280();
  sub_10001E8B0();
  v15 = sub_1000806EC(v2, v29, v7, v28, v10, (uint64_t)(v0 + 2), v13, (uint64_t)(v0 + 7), v14, v3);
  sub_10002B308(v3 + 120, (uint64_t)(v0 + 15), 33);
  sub_10001D7EC();
  sub_100012818(&v31, v15);
  v16 = sub_100080074();
  sub_10007EAC8(v16, v17, v18, v19, v20, v21, v22, v23, v25, v26, v27, v28, v29, v30, v3 + 120, (uint64_t)(v0 + 15), v31);
  sub_10002ACC4((uint64_t)v1, type metadata accessor for ModelCatalogAssetVersionedData);
  sub_10007FC60();
  sub_10001E330();
  sub_10002B848();
  __asm { BR              X1 }
}

uint64_t sub_10005A2F0()
{
  uint64_t v0;

  sub_10007FC60();
  sub_10001E330();
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10005A31C(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;

  v6 = type metadata accessor for InferenceProviderDescriptor(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v29[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v29[-1] - v12;
  v14 = *a1;
  v15 = InferenceProviderAssetDescriptor.identifier.getter(v11);
  v17 = v16;
  v18 = a2[1];
  if (v15 == *a2 && v16 == v18)
  {
    swift_bridgeObjectRelease(v16);
    sub_100006694(a3, (uint64_t)v29);
  }
  else
  {
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, *a2, v18, 0);
    swift_bridgeObjectRelease(v17);
    sub_100006694(a3, (uint64_t)v29);
    v21 = 0;
    if ((v20 & 1) == 0)
      goto LABEL_9;
  }
  v22 = *(_QWORD *)(v14 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
  v23 = *(_QWORD *)(v14 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
  sub_10001C830((_QWORD *)(v14 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection), v22);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
  v24 = v30;
  v25 = v31;
  sub_10001C830(v29, v30);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v25);
  v21 = static InferenceProviderDescriptor.== infix(_:_:)(v13, v10);
  v26 = *(void (**)(char *, uint64_t))(v7 + 8);
  v26(v10, v6);
  v26(v13, v6);
LABEL_9:
  sub_10000650C(v29);
  return v21 & 1;
}

uint64_t sub_10005A4C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  sub_10001D7B8();
  return swift_task_switch(v4, v5, v6);
}

uint64_t sub_10005A4E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v10)(void);

  sub_10001DD0C();
  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = sub_10005C934(v2);
  v4 = sub_10007E4F0();
  sub_100006694(v4, v5);
  v6 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F3ED8, 80);
  *(_QWORD *)(v0 + 80) = v6;
  v6[2] = v1;
  v6[3] = v2;
  sub_10000667C((__int128 *)(v0 + 16), (uint64_t)(v6 + 4));
  v6[9] = v3;
  v10 = (uint64_t (*)(void))((char *)&dword_1000FB770 + dword_1000FB770);
  sub_10002B400();
  sub_10001DBE4();
  v7 = (_QWORD *)sub_10001EBC0();
  *(_QWORD *)(v0 + 88) = v7;
  *v7 = v0;
  v7[1] = sub_10005A5A8;
  v8 = sub_10002BD0C((uint64_t)&unk_1000FD910);
  return sub_10007EFDC(v8, (uint64_t)v6, v10);
}

uint64_t sub_10005A5A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  sub_10007F0B0();
  sub_10001EA4C(v4);
  v2[12] = v1;
  swift_task_dealloc(v5);
  if (v1)
    return sub_100037B58((uint64_t)sub_10005A614, v2[9], 0);
  swift_release(v2[10]);
  return (*(uint64_t (**)(uint64_t))(v3 + 8))(v0);
}

uint64_t sub_10005A614()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 80));
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10005A640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;

  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  v6 = (_QWORD *)swift_task_alloc(dword_1000FD43C);
  v5[8] = v6;
  *v6 = v5;
  v6[1] = sub_10005A694;
  return sub_100059C3C();
}

uint64_t sub_10005A694()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 64));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_10005A6CC()
{
  int8x16_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int8x16_t *v4;
  int8x16_t **v5;

  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_100003010((unint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v1 = _swiftEmptySetSingleton;
  }
  v3 = v0[3].i64[0];
  v2 = v0[3].i64[1];
  v0[1].i64[0] = (uint64_t)v1;
  sub_10001E1D8();
  sub_100006710(&qword_1000FB728, type metadata accessor for InferenceProviderAssetManager);
  v4 = (int8x16_t *)swift_task_alloc(64);
  v0[4].i64[1] = (uint64_t)v4;
  v4[1] = vextq_s8(v0[2], v0[2], 8uLL);
  v4[2].i64[0] = v3;
  v4[2].i64[1] = (uint64_t)v0[1].i64;
  v4[3].i64[0] = v2;
  v5 = (int8x16_t **)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  v0[5].i64[0] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = (int8x16_t *)sub_10005A7E8;
  sub_10007F954();
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_10005A7E8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *v1;
  v2 = v5;
  sub_10001EA4C(&v5);
  *(_QWORD *)(v2 + 88) = v0;
  swift_task_dealloc(v3);
  if (!v0)
    swift_task_dealloc(*(_QWORD *)(v2 + 72));
  return sub_10001D6DC();
}

uint64_t sub_10005A854()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 24) = *(_QWORD *)(v0 + 16);
  return sub_1000447F4();
}

uint64_t sub_10005A860()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  sub_10007E928();
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10005A890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  v7[16] = a2;
  v7[17] = a3;
  v9 = sub_100002F78(&qword_1000FD928);
  v7[22] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[23] = v10;
  v7[24] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (*(_QWORD *)(*(_QWORD *)(sub_100002F78(&qword_1000FB230) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[25] = swift_task_alloc(v11);
  v7[26] = swift_task_alloc(v11);
  v12 = *(_QWORD *)(type metadata accessor for ModelCatalogAsset(0) - 8);
  v7[27] = v12;
  v13 = *(_QWORD *)(v12 + 64);
  v7[28] = v13;
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[29] = swift_task_alloc(v14);
  v7[30] = swift_task_alloc(v14);
  return swift_task_switch(sub_10005A96C, a4, 0);
}

void sub_10005A96C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  unint64_t i;
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t ObjectType;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 *v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;

  v49 = (__int128 *)(v0 + 16);
  v48 = *(_QWORD *)(v0 + 216);
  v1 = *(_QWORD *)(v0 + 136);
  v44 = v1 + 56;
  v2 = -1;
  v3 = -1 << *(_BYTE *)(v1 + 32);
  if (-v3 < 64)
    v2 = ~(-1 << -(char)v3);
  v4 = v2 & *(_QWORD *)(v1 + 56);
  v45 = (unint64_t)(63 - v3) >> 6;
  v46 = *(_QWORD *)(v0 + 224) + 7;
  v47 = *(_QWORD *)(v0 + 136);
  swift_bridgeObjectRetain(v1);
  v5 = 0;
  if (!v4)
    goto LABEL_5;
LABEL_4:
  v52 = (v4 - 1) & v4;
  v50 = v5;
  for (i = __clz(__rbit64(v4)) | (v5 << 6); ; i = __clz(__rbit64(v8)) + (v9 << 6))
  {
    v11 = *(_QWORD *)(v0 + 232);
    v12 = *(_QWORD *)(v0 + 240);
    v13 = *(_QWORD *)(v0 + 208);
    v51 = *(_QWORD *)(v0 + 200);
    v15 = *(_QWORD *)(v0 + 144);
    v14 = *(_QWORD *)(v0 + 152);
    sub_10002AC98(*(_QWORD *)(v47 + 48) + *(_QWORD *)(v48 + 72) * i, v12, type metadata accessor for ModelCatalogAsset);
    v16 = sub_10001DBC0();
    sub_10007F8CC();
    sub_100005630(v17, v18, v19, v16);
    sub_10001CB5C(v12, v11);
    sub_100006694(v14, (uint64_t)v49);
    v20 = *(unsigned __int8 *)(v48 + 80);
    v21 = (v20 + 40) & ~v20;
    v22 = (v46 + v21) & 0xFFFFFFFFFFFFFFF8;
    v23 = (_QWORD *)swift_allocObject(&unk_1000F3F00, v22 + 40, v20 | 7);
    v23[2] = 0;
    v24 = v23 + 2;
    v23[3] = 0;
    v23[4] = v15;
    sub_10001CB5C(v11, (uint64_t)v23 + v21);
    sub_10000667C(v49, (uint64_t)v23 + v22);
    sub_100048DB4(v13, v51, &qword_1000FB230);
    LODWORD(v11) = sub_100005700(v51, 1, v16);
    v25 = sub_10001DAE8();
    if ((_DWORD)v11 == 1)
    {
      sub_10007E5D4();
      v26 = 0;
    }
    else
    {
      v27 = TaskPriority.rawValue.getter(v25);
      sub_10007DE2C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8));
      v26 = v27;
    }
    v5 = v50;
    v28 = *v24;
    if (*v24)
    {
      v29 = v23[3];
      ObjectType = swift_getObjectType(*v24);
      swift_unknownObjectRetain(v28);
      v31 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v29);
      v33 = v32;
      swift_unknownObjectRelease(v28);
    }
    else
    {
      v31 = 0;
      v33 = 0;
    }
    v34 = **(_QWORD **)(v0 + 128);
    v35 = sub_10001E1D8();
    v36 = v33 | v31;
    if (v33 | v31)
    {
      v36 = v0 + 56;
      *(_QWORD *)(v0 + 56) = 0;
      *(_QWORD *)(v0 + 64) = 0;
      *(_QWORD *)(v0 + 72) = v31;
      *(_QWORD *)(v0 + 80) = v33;
    }
    *(_QWORD *)(v0 + 88) = 1;
    *(_QWORD *)(v0 + 96) = v36;
    *(_QWORD *)(v0 + 104) = v34;
    v37 = swift_task_create(v26 | 0x3100, v0 + 88, v35, &unk_1000FD938, v23);
    swift_release(v37);
    sub_10007E5D4();
    v4 = v52;
    if (v52)
      goto LABEL_4;
LABEL_5:
    v7 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v7 >= v45)
      goto LABEL_29;
    v8 = *(_QWORD *)(v44 + 8 * v7);
    v9 = v5 + 1;
    if (!v8)
    {
      v9 = v5 + 2;
      if (v5 + 2 >= v45)
        goto LABEL_29;
      v8 = *(_QWORD *)(v44 + 8 * v9);
      if (!v8)
      {
        v9 = v5 + 3;
        if (v5 + 3 >= v45)
          goto LABEL_29;
        v8 = *(_QWORD *)(v44 + 8 * v9);
        if (!v8)
          break;
      }
    }
LABEL_18:
    v52 = (v8 - 1) & v8;
    v50 = v9;
  }
  v10 = v5 + 4;
  if (v5 + 4 >= v45)
  {
LABEL_29:
    v38 = *(uint64_t **)(v0 + 128);
    swift_release(*(_QWORD *)(v0 + 136));
    v39 = *v38;
    v40 = sub_10001E1D8();
    v41 = sub_100002F78(&qword_1000FB5F8);
    ThrowingTaskGroup.makeAsyncIterator()(v39, v40, v41, &protocol self-conformance witness table for Error);
    sub_100006710(&qword_1000FB728, type metadata accessor for InferenceProviderAssetManager);
    *(_QWORD *)(v0 + 248) = v42;
    v43 = (_QWORD *)swift_task_alloc(_sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
    *(_QWORD *)(v0 + 256) = v43;
    *v43 = v0;
    v43[1] = sub_10005AD80;
    sub_10001E91C();
    _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF();
    return;
  }
  v8 = *(_QWORD *)(v44 + 8 * v10);
  if (v8)
  {
    v9 = v5 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    v9 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v9 >= v45)
      goto LABEL_29;
    v8 = *(_QWORD *)(v44 + 8 * v9);
    ++v10;
    if (v8)
      goto LABEL_18;
  }
LABEL_31:
  __break(1u);
}

uint64_t sub_10005AD80()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = v2;
  sub_10001D788(*(_QWORD *)(v2 + 256), &v4);
  if (!v0)
    *(_QWORD *)(v2 + 264) = 0;
  return sub_10001D6DC();
}

uint64_t sub_10005ADE0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v12)(void);
  uint64_t v13;

  v1 = v0[14];
  if (v1)
  {
    v2 = v0[21];
    sub_10001E900();
    sub_100012818(&v13, v1);
    swift_release(v13);
    v4 = InferenceProviderAssetDescriptor.identifier.getter(v3);
    if (*(_QWORD *)(v2 + 16) && (v6 = sub_100010994(v4, v5), (v7 & 1) != 0))
    {
      v8 = v0[18];
      v9 = *(_QWORD *)(*(_QWORD *)(v0[21] + 56) + 8 * v6);
      sub_10001E4D4();
      sub_10001E4C0();
      sub_10001E194();
      sub_10001E900();
      sub_10004F7F4(v9, v1, v8);
      sub_100044820();
      sub_100006C48();
    }
    else
    {
      sub_10001E4C0();
      sub_100044820();
    }
    v10 = (_QWORD *)swift_task_alloc(_sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
    v0[34] = v10;
    *v10 = v0;
    v10[1] = sub_10005AF40;
    sub_10007F954();
    return _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF();
  }
  else
  {
    sub_100037D5C(v0[23]);
    sub_10001E330();
    sub_10001D938();
    sub_10001EAC8();
    sub_10001E490();
    sub_10002B504();
    v12 = (uint64_t (*)(void))sub_10001E5D0();
    return sub_100037D1C(v12);
  }
}

uint64_t sub_10005AF40()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_10001E0D8();
  sub_10001D788(*(_QWORD *)(v0 + 272), v2);
  if (!v1)
    *(_QWORD *)(v0 + 264) = 0;
  return sub_10001D6DC();
}

uint64_t sub_10005AF98()
{
  uint64_t v0;

  sub_100037EFC();
  sub_100037D5C(*(_QWORD *)(v0 + 184));
  sub_10002B528();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  return sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10005AFF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v9;

  *(_QWORD *)(v6 + 16) = a1;
  v9 = (_QWORD *)swift_task_alloc(dword_1000FD444);
  *(_QWORD *)(v6 + 24) = v9;
  *v9 = v6;
  v9[1] = sub_10005B05C;
  return sub_100059FF4(a5, a6);
}

uint64_t sub_10005B05C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_10007F0B0();
  v4 = *v3;
  sub_10001D788(*(_QWORD *)(v2 + 24), v5);
  if (v1)
    return sub_10002B7C0(*(uint64_t (**)(void))(v4 + 8));
  *(_QWORD *)(v2 + 32) = v0;
  sub_100037A7C();
  return sub_100037B58(v7, v8, v9);
}

uint64_t sub_10005B0AC()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 32);
  return sub_1000447F4();
}

uint64_t sub_10005B0BC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1[30] = v0;
  v2 = sub_10007D9D8();
  v1[31] = v2;
  v1[32] = sub_10002B1BC(*(_QWORD *)(v2 - 8));
  v1[33] = sub_10001E784();
  v3 = sub_100002F78(&qword_1000FD7E0);
  v1[34] = sub_10001D800(*(_QWORD *)(v3 - 8));
  v4 = sub_10007D89C();
  v1[35] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[36] = v5;
  v1[37] = sub_10001D800(v5);
  v6 = sub_10007DCE8();
  v1[38] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[39] = v7;
  v1[40] = sub_10001D800(v7);
  sub_10001D7B8();
  return sub_10001D6DC();
}

uint64_t sub_10005B150()
{
  uint64_t v0;
  _QWORD *v1;
  NSObject *v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  os_log_type_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  _WORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t result;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  NSObject *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  NSObject *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  unint64_t v68;
  int64_t v69;
  uint64_t v70;
  os_log_type_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95[11];

  v1 = (_QWORD *)(*(_QWORD *)(v0 + 240) + 120);
  sub_10002B2E0((uint64_t)v1, v0 + 56);
  v2 = *v1;
  v3 = sub_10001E338();
  v4 = sub_10004BF34(v3);
  sub_10001E034();
  if (v4)
  {
    if (qword_1000FB108 != -1)
      goto LABEL_45;
    goto LABEL_3;
  }
  v2 = *v1;
  v9 = sub_10001E338();
  v10 = sub_10007F498(v9, (uint64_t (*)(char *))sub_10005C5B8);
  sub_10001E034();
  if ((v10 & 1) == 0)
  {
    if (qword_1000FB108 != -1)
      swift_once(&qword_1000FB108, sub_10004D568);
    v33 = sub_10001DD64();
    sub_100037AC4(v33, (uint64_t)qword_1000FD390);
    v6 = sub_10001E9D0();
    v7 = 0;
    if (sub_10007DB5C(v6))
    {
      v8 = "Not ready for asset version change: some assets are still loaded or transitioning";
      goto LABEL_37;
    }
    goto LABEL_38;
  }
  if (qword_1000FB108 != -1)
    swift_once(&qword_1000FB108, sub_10004D568);
  v11 = sub_10001DD64();
  *(_QWORD *)(v0 + 328) = sub_100002FF8(v11, (uint64_t)qword_1000FD390);
  sub_1000490A8();
  v12 = sub_10001E9D0();
  if (sub_10007D4C8(v12))
  {
    v13 = (_WORD *)sub_10001D8D4(2);
    sub_10007F108(v13);
    sub_100044580((void *)&_mh_execute_header, v2, (os_log_type_t)&DaemonRequest.ivar_base_size, "prepareForAssetVersionChange unloading assets", (uint8_t *)v10);
    sub_10001D790(v10);
  }

  v14 = *(_QWORD *)(v0 + 240);
  if ((*v1 & 0xC000000000000001) != 0)
  {
    v15 = _swiftEmptySetSingleton;
    sub_10001D834(v14);
    sub_10001E338();
    v93 = sub_10007EEDC();
    v16 = sub_10007DADC();
    if (!v16)
      goto LABEL_32;
    v17 = v16;
    v18 = (_QWORD *)(v0 + 208);
    v19 = *(_QWORD *)(v0 + 312);
    v91 = enum case for LoadState.dynamicMode(_:);
    v89 = sub_10001E1D8();
    while (1)
    {
      v20 = *(_QWORD *)(v0 + 320);
      v21 = *(_QWORD *)(v0 + 304);
      *(_QWORD *)(v0 + 216) = v17;
      sub_10002B4BC(v0 + 208, v0 + 216, (uint64_t)&type metadata for Swift.AnyObject + 8, v89);
      sub_10002B308(*(_QWORD *)(v0 + 208) + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v0 + 152, 33);
      sub_10001EB74(v20, v91, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 104));
      sub_100006710(&qword_1000FD7E8, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState);
      sub_10007DE54(v21);
      sub_10007DE54(v21);
      v22 = *(_QWORD *)(v0 + 192);
      v23 = *(_QWORD *)(v0 + 176);
      v24 = v22 == v23 && *(_QWORD *)(v0 + 200) == *(_QWORD *)(v0 + 184);
      if (v24)
      {
        sub_10002BA68(*(_QWORD *)(v0 + 200));
        sub_10007ECC4(*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8));
        sub_10007DBD0();
      }
      else
      {
        v25 = sub_10001DB04(v22, *(_QWORD *)(v0 + 200), v23, *(_QWORD *)(v0 + 184));
        sub_10001DA38();
        sub_100006C48();
        sub_10007ECC4(*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8));
        sub_10007DBD0();
        if ((v25 & 1) == 0)
        {
          swift_release(*v18);
          goto LABEL_31;
        }
      }
      v27 = *v18;
      sub_10007FC98();
      if (!(!v24 & v28))
      {
        sub_100014280();
        v15 = _swiftEmptySetSingleton;
      }
      Hasher.init(_seed:)(v95, _swiftEmptySetSingleton[5]);
      sub_10008B000();
      v2 = v95;
      Hasher._finalize()();
      sub_10007CEF0();
      if (!v24)
      {
        sub_10001E178();
        goto LABEL_30;
      }
      sub_10001EB2C();
      do
      {
        sub_10007DA8C();
        if (v24 && (v30 & 1) != 0)
        {
          __break(1u);
LABEL_45:
          swift_once(&qword_1000FB108, sub_10004D568);
LABEL_3:
          v5 = sub_10001DD64();
          sub_100037AC4(v5, (uint64_t)qword_1000FD390);
          v6 = sub_10001E9D0();
          v7 = 1;
          if (sub_10007DB5C(v6))
          {
            v8 = "Ready for asset version change";
            goto LABEL_37;
          }
          goto LABEL_38;
        }
        sub_10007DB48();
        sub_10001E62C();
      }
      while (v24);
      sub_10001E154();
LABEL_30:
      sub_10007E98C(v29);
      *(_QWORD *)(v31 + 8 * v32) = v27;
      ++_swiftEmptySetSingleton[2];
LABEL_31:
      v17 = __CocoaSet.Iterator.next()(v26);
      if (!v17)
      {
LABEL_32:
        sub_10001EBB0(*(_QWORD *)(v0 + 240));
        swift_release(v93);
        goto LABEL_40;
      }
    }
  }
  sub_10007D280();
  v36 = sub_10001E338();
  v15 = (_QWORD *)sub_10007E5A8(v36, v14, (uint64_t (*)(uint64_t))sub_10004DCA8);
LABEL_40:
  v37 = (unint64_t)sub_1000800AC();
  *(_QWORD *)(v0 + 336) = v37;
  sub_10001D930();
  if (v37 >> 62)
  {
    sub_10001E338();
    v15 = (_QWORD *)sub_10007EC34();
    v38 = sub_10001E034();
    if (v15)
      goto LABEL_42;
  }
  else
  {
    sub_100080134();
    if (v15)
    {
LABEL_42:
      *(_DWORD *)(v0 + 376) = enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.assetVersionChange(_:);
      v2 = ((char *)v15 - 1);
      *(_QWORD *)(v0 + 344) = (char *)v15 - 1;
      if (!__OFSUB__(v15, 1))
      {
        v40 = sub_10007D124(v38, v39, *(_QWORD *)(v0 + 336));
        *(_QWORD *)(v0 + 352) = sub_10007D8D4(v40, *(_QWORD *)(v0 + 336));
        v41 = *(_QWORD *)(v0 + 272);
        sub_10002BAF8(*(_QWORD *)(v0 + 288));
        v42 = sub_10002BCD4();
        sub_10002B26C(v41, v43, v44, v42);
        v45 = (_QWORD *)swift_task_alloc(dword_1000FD484);
        *(_QWORD *)(v0 + 360) = v45;
        *v45 = v0;
        v45[1] = sub_10005BB74;
        v46 = sub_10007DBEC();
        return sub_10007E08C(v46, v47, v48);
      }
      __break(1u);
LABEL_51:
      sub_10008016C();
      v6 = sub_10001E9D0();
      v7 = 0;
      if (sub_10007DB5C(v6))
      {
        v8 = "Not ready for asset version change: not all assets are unloaded";
        goto LABEL_37;
      }
      goto LABEL_38;
    }
  }
  sub_10007F534();
  v2 = *(NSObject **)(v37 + 120);
  v49 = sub_10001E338();
  v50 = sub_10004C52C(v49, (uint64_t (*)(char *))sub_10005C7E8, 0);
  sub_10001E034();
  if ((v50 & 1) == 0)
    goto LABEL_51;
  v90 = *(_QWORD *)(*(_QWORD *)(v0 + 240) + 120);
  if ((v90 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain(v90);
    sub_10007E814();
    sub_10001E1D8();
    sub_100006710(&qword_1000FB768, type metadata accessor for InferenceProviderAsset);
    result = sub_10007E528(v51);
    v90 = *(_QWORD *)(v0 + 16);
    v88 = *(_QWORD *)(v0 + 24);
    v52 = *(NSObject **)(v0 + 40);
    v86 = *(_QWORD *)(v0 + 32);
    v53 = *(_QWORD *)(v0 + 48);
  }
  else
  {
    v88 = v90 + 56;
    v86 = ~(-1 << *(_BYTE *)(v90 + 32));
    sub_10001E7F4();
    v53 = v54 & v55;
    result = swift_bridgeObjectRetain(v56);
    v52 = 0;
  }
  v92 = *(_QWORD *)(v0 + 248);
  v57 = v90;
  v87 = (unint64_t)(v86 + 64) >> 6;
  while (1)
  {
    v58 = v57;
    if ((v57 & 0x8000000000000000) == 0)
      break;
    v62 = __CocoaSet.Iterator.next()(result);
    if (!v62)
      goto LABEL_82;
    *(_QWORD *)(v0 + 232) = v62;
    v63 = sub_10001E1D8();
    sub_10007E5C4();
    v64 = sub_10002BF40();
    sub_10002B4BC(v64, v65, (uint64_t)&type metadata for Swift.AnyObject + 8, v63);
    v66 = *(_QWORD *)(v0 + 224);
    sub_10007E5CC();
    v61 = v52;
    v59 = v53;
LABEL_75:
    if (!v66)
      goto LABEL_82;
    v94 = v59;
    v70 = sub_10001D834(v66);
    Logger.logObject.getter(v70);
    v71 = sub_10007FBA4();
    if (sub_10007F0A8(v52))
    {
      v72 = sub_10001D8D4(12);
      v73 = sub_10001D8D4(32);
      v95[0] = v73;
      *(_DWORD *)v72 = 136315138;
      v74 = sub_10007D478();
      sub_100006710(&qword_1000FCD40, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
      v76 = dispatch thunk of CustomStringConvertible.description.getter(v74, v75);
      sub_1000102C0(v76, v77, v95);
      *(_QWORD *)(v72 + 4) = v78;
      sub_10001EBB0(v66);
      sub_10001E034();
      sub_10001E18C((void *)&_mh_execute_header, v52, v71, "Invalidating and removing asset for version change: %s", (uint8_t *)v72);
      swift_arrayDestroy(v73, 1);
      v57 = v90;
      sub_10001D790(v73);
      sub_10001D790(v72);

    }
    else
    {
      v57 = v58;

      sub_10001EBB0(v66);
    }
    v79 = *(_QWORD *)(v0 + 256);
    v80 = *(_QWORD *)(v0 + 264);
    v81 = *(_QWORD *)(v0 + 240) + 120;
    v82 = v66 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    sub_10002B2E0(v66 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v0 + 80);
    sub_10007D82C(v82, v80);
    *(_BYTE *)(v80 + *(int *)(v92 + 52)) = 1;
    v83 = sub_10002BE5C();
    sub_10007D82C(v83, v84);
    sub_10002B308(v82, v0 + 104, 33);
    sub_10007BDF8(v79, v82);
    sub_10007F0C4();
    sub_10007DBE4(v80);
    sub_10002B308(v81, v0 + 128, 33);
    sub_1000BFD38(v66);
    sub_10002BB48();
    sub_10001DBEC();
    result = sub_10001D9C0();
    v52 = v61;
    v53 = v94;
  }
  if (v53)
  {
    v59 = (v53 - 1) & v53;
    v60 = __clz(__rbit64(v53)) | ((_QWORD)v52 << 6);
    v61 = v52;
LABEL_74:
    v66 = *(_QWORD *)(*(_QWORD *)(v58 + 48) + 8 * v60);
    sub_10001DAE8();
    goto LABEL_75;
  }
  v67 = (int64_t)&v52->isa + 1;
  if (__OFADD__(v52, 1))
  {
    __break(1u);
    return result;
  }
  if (v67 >= v87)
    goto LABEL_82;
  v68 = *(_QWORD *)(v88 + 8 * v67);
  v61 = ((char *)&v52->isa + 1);
  if (v68)
    goto LABEL_73;
  v61 = ((char *)&v52->isa + 2);
  if ((uint64_t)&v52->isa + 2 >= v87)
    goto LABEL_82;
  v68 = *(_QWORD *)(v88 + 8 * (_QWORD)v61);
  if (v68)
    goto LABEL_73;
  v61 = ((char *)&v52->isa + 3);
  if ((uint64_t)&v52->isa + 3 >= v87)
    goto LABEL_81;
  v68 = *(_QWORD *)(v88 + 8 * (_QWORD)v61);
  v58 = v90;
  if (v68)
    goto LABEL_73;
  v61 = ((char *)&v52->isa + 4);
  if ((uint64_t)&v52->isa + 4 >= v87)
    goto LABEL_81;
  v68 = *(_QWORD *)(v88 + 8 * (_QWORD)v61);
  v58 = v90;
  if (v68)
  {
LABEL_73:
    v59 = (v68 - 1) & v68;
    v60 = __clz(__rbit64(v68)) + ((_QWORD)v61 << 6);
    goto LABEL_74;
  }
  v69 = (int64_t)&v52->isa + 5;
  while (v69 < v87)
  {
    v68 = *(_QWORD *)(v88 + 8 * v69++);
    if (v68)
    {
      v61 = (v69 - 1);
      v58 = v90;
      goto LABEL_73;
    }
  }
LABEL_81:
  v58 = v90;
LABEL_82:
  v2 = *(NSObject **)(v0 + 328);
  v85 = sub_10001CD34(v58);
  Logger.logObject.getter(v85);
  v6 = sub_10001E9D0();
  v7 = 1;
  if (!sub_10007DB5C(v6))
    goto LABEL_38;
  v8 = "Ready for asset version change, all assets have been unloaded, invalidated, and removed";
LABEL_37:
  v34 = (uint8_t *)sub_10001D8D4(2);
  *(_WORD *)v34 = 0;
  sub_100044580((void *)&_mh_execute_header, v2, v6, v8, v34);
  sub_10001D790((uint64_t)v34);
LABEL_38:

  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
}

uint64_t sub_10005BB74()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  sub_100037EFC();
  sub_10001E538();
  sub_10001EA4C(v2);
  *(_QWORD *)(v1 + 368) = v0;
  v4 = swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10001EBB8();
  sub_10007D78C(v4, &qword_1000FD7E0);
  sub_10007D020();
  sub_10007E854();
  return sub_10001D6DC();
}

#error "10005BEF4: call analysis failed (funcsize=298)"

#error "10005C3CC: call analysis failed (funcsize=296)"

uint64_t sub_10005C5B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t State;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v17;

  v2 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for LoadState(0);
  v6 = *(_QWORD *)(State - 8);
  v7 = __chkstk_darwin(State);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v17 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v17 - v10, a1, State);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for LoadState.loaded(_:), State);
  sub_100006710(&qword_1000FCD38, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState);
  v13 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v9, State, v12);
  v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v9, State);
  v14(v11, State);
  sub_10002AC98(a1, (uint64_t)v4, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  if ((v13 & 1) != 0)
  {
    sub_10002ACC4((uint64_t)v4, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    return 0;
  }
  v15 = *(_QWORD *)&v4[*(int *)(v2 + 28)];
  swift_retain();
  sub_10002ACC4((uint64_t)v4, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  if (v15)
  {
    swift_release(v15);
    return 0;
  }
  return 1;
}

void sub_10005C770(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sub_10007DCE8();
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10007F7A4();
  sub_10001DE08(v2, *a2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 104));
  v6 = sub_10007F54C();
  sub_1000B2390(v6, v7);
  sub_10001EB58(v2, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  sub_10001E7B4();
}

uint64_t sub_10005C7E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t State;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  uint64_t v12;

  v2 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for LoadState(0);
  v6 = *(_QWORD *)(State - 8);
  __chkstk_darwin(State);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LoadState.unloaded(_:), State);
  v9 = sub_1000B2390(a1, (uint64_t)v8);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, State);
  sub_10002AC98(a1, (uint64_t)v4, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  if ((v9 & 1) == 0)
  {
    sub_10002ACC4((uint64_t)v4, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    return 0;
  }
  v10 = *(_QWORD *)&v4[*(int *)(v2 + 28)];
  swift_retain();
  sub_10002ACC4((uint64_t)v4, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  if (v10)
  {
    swift_release(v10);
    return 0;
  }
  return 1;
}

#error "10005CC1C: call analysis failed (funcsize=213)"

uint64_t sub_10005CC98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_purgeInactiveAssetsTask;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_purgeInactiveAssetsTask))
  {
    sub_10002B400();
    Task.cancel()();
    sub_10001D930();
  }
  v2 = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_delayedAssetTransitionTask;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_delayedAssetTransitionTask))
  {
    sub_10002B400();
    Task.cancel()();
    sub_10001D930();
  }
  swift_release(*(_QWORD *)(v0 + 112));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  sub_10002ACC4(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy, type metadata accessor for InferenceProviderAssetManagerPolicy);
  swift_release(*(_QWORD *)(v0 + v1));
  swift_release(*(_QWORD *)(v0 + v2));
  sub_100037E2C(OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetVersionChangeUnloadTask);
  sub_10000650C((_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_modelCatalog));
  sub_100037E2C(OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_providerManager);
  sub_10000650C((_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_telemetryManager));
  sub_100037E2C(OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_neuralEngine);
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_10005CDB0()
{
  uint64_t v0;

  sub_10005CC98();
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for InferenceProviderAssetManager(uint64_t a1)
{
  return sub_100042760(a1, (uint64_t *)&unk_1000FD3D0, (uint64_t)&nominal type descriptor for InferenceProviderAssetManager);
}

uint64_t sub_10005CDDC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[11];

  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for InferenceProviderAssetManagerPolicy(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = &unk_1000CC358;
    v4[5] = &unk_1000CC358;
    v4[6] = &unk_1000CC358;
    v4[7] = &unk_1000CC370;
    v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[9] = &unk_1000CC370;
    v4[10] = (char *)&value witness table for Builtin.NativeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 11, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

_QWORD *sub_10005CE8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v2 = v1;
  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v4 = __CocoaSet.count.getter(a1);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 16);
  }
  if (!v4)
    return _swiftEmptyArrayStorage;
  if ((sub_10007F498(v3, (uint64_t (*)(char *))sub_10005CFE0) & 1) != 0)
  {
    v5 = sub_10001E338();
    v6 = sub_10001B1A0(v5);
    sub_10001E034();
    return v6;
  }
  v18 = v3;
  v8 = sub_10001E338();
  if (sub_10004BF34(v8))
  {
LABEL_14:
    sub_10001E034();
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    sub_10002B400();
    v9 = sub_10001E338();
    v10 = sub_10004B3F0(v9, &v18, v2);
    result = (_QWORD *)sub_10001E034();
    if (!v10)
      break;
    v11 = sub_10007E904();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
    v13 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    v12 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v13 >= v12 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
    v14 = sub_100080068();
    v15 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14);
    specialized Array._endMutation()(v15);
    sub_1000BFD38(v10);
    sub_10001DEEC();
    sub_10001D9C0();
    v16 = sub_10001E338();
    v17 = sub_10004BF34(v16);
    sub_10001E034();
    if (v17)
      goto LABEL_14;
  }
  __break(1u);
  return result;
}

BOOL sub_10005CFE0(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1
                               + *(int *)(type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0) + 40))
                   + 16) == 0;
}

uint64_t sub_10005D018(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v2 + 56) = v1;
  *(_BYTE *)(v2 + 144) = a1;
  v3 = sub_10001EC20();
  *(_QWORD *)(v2 + 64) = v3;
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 72) = v4;
  *(_QWORD *)(v2 + 80) = sub_10001D800(v4);
  v5 = type metadata accessor for InferenceProviderAssetManagerPolicy(0);
  *(_QWORD *)(v2 + 88) = sub_10001D800(*(_QWORD *)(v5 - 8));
  sub_10001D7B8();
  return sub_10001D674();
}

#error "10005D1E4: call analysis failed (funcsize=190)"

uint64_t sub_10005D38C()
{
  uint64_t v0;

  v0 = sub_1000800E0();
  sub_10001D680(v0);
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_10005D3C0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  sub_10001E330();
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10005D3EC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  sub_10001E0D8();
  v2 = *v1;
  sub_10001D788(v0[15], v3);
  sub_10001E034();
  v4 = (_QWORD *)swift_task_alloc(dword_1000FD47C);
  v0[16] = (uint64_t)v4;
  *v4 = v2;
  v4[1] = sub_10005D44C;
  v5 = sub_10002BD0C(v0[13]);
  return sub_100063CCC(v5);
}

uint64_t sub_10005D44C()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 128));
  sub_10001E034();
  sub_10001E10C();
  return sub_10001D6DC();
}

uint64_t sub_10005D490()
{
  uint64_t v0;
  _QWORD *v1;

  sub_100050960();
  v1 = (_QWORD *)swift_task_alloc(dword_1000FD85C);
  *(_QWORD *)(v0 + 136) = v1;
  sub_10007F030(v1, (uint64_t)sub_10005D4D8);
  return sub_10005D76C();
}

uint64_t sub_10005D4D8()
{
  uint64_t v0;

  v0 = sub_1000800F4();
  sub_10001D680(v0);
  sub_10001D7B8();
  return sub_10001D674();
}

void sub_10005D50C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];

  sub_10007E860();
  sub_10002BCBC();
  __chkstk_darwin(v1);
  sub_10001E168();
  v4 = v3 - v2;
  v5 = v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy;
  sub_10002B2E0(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy, (uint64_t)v7);
  sub_10007E94C(v5, v4);
  AssetPolicy.allowAssetTimerUse.getter();
  v6 = sub_10001EC20();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  sub_10001E7B4();
}

void sub_10005D5C0()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  sub_10001D810();
  v3 = v0;
  sub_100002F78(&qword_1000FB230);
  sub_10002BCBC();
  __chkstk_darwin(v4);
  sub_10007F78C();
  sub_10005D50C();
  if ((v5 & 1) != 0)
  {
    v6 = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_delayedAssetTransitionTask;
    if (!*(_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_delayedAssetTransitionTask))
    {
      sub_10007FF98((uint64_t (*)(uint64_t))sub_10006C4CC, sub_10007C404);
      if ((v7 & 1) != 0)
      {
        if (qword_1000FB108 != -1)
          swift_once(&qword_1000FB108, sub_10004D568);
        v8 = sub_10001DD64();
        v9 = sub_100002FF8(v8, (uint64_t)qword_1000FD390);
        v10 = sub_10002B400();
        Logger.logObject.getter(v10);
        v11 = sub_10001E9D0();
        if (sub_10007DA7C(v11))
        {
          v12 = (uint8_t *)sub_10001D8D4(12);
          *(_DWORD *)v12 = 134217984;
          v13 = v3 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy;
          sub_10002B2E0(v3 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy, (uint64_t)&v26);
          v14 = type metadata accessor for InferenceProviderAssetManagerPolicy(0);
          v15 = sub_10007FF7C(*(double *)(v13 + *(int *)(v14 + 28)));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v15, v16, v12 + 4);
          sub_10001D930();
          sub_10001E18C((void *)&_mh_execute_header, v9, v2, "Starting task to transition assets after %f seconds", v12);
          sub_10001D790((uint64_t)v12);
        }
        else
        {
          sub_10001D930();
        }

        v17 = sub_10001DBC0();
        sub_10002B26C(v1, v18, v19, v17);
        v20 = sub_100006A80((uint64_t)&unk_1000F3E38, 24);
        sub_10007FA94(v20);
        v21 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F3E60, 40);
        v22 = sub_10007F974(v21);
        v24 = sub_10007FFC0((uint64_t)v22, (uint64_t)&unk_1000FD868, v23);
        v25 = *(_QWORD *)(v3 + v6);
        *(_QWORD *)(v3 + v6) = v24;
        sub_10007FBF0(v25);
      }
    }
  }
  sub_100006A68();
}

uint64_t sub_10005D76C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v0;
  v2 = sub_100002F78(&qword_1000FB230);
  *(_QWORD *)(v1 + 24) = sub_10001D800(*(_QWORD *)(v2 - 8));
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_10005D7B0()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 32) = sub_10007DCF8(*(_QWORD *)(v0 + 16));
  return sub_10001D674();
}

uint64_t sub_10005D7F0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  *(_BYTE *)(v0 + 40) = *(_BYTE *)(**(_QWORD **)(v0 + 32)
                                 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_assetsHaveUpdated);
  return sub_10001D948((uint64_t)sub_10005D81C, v1);
}

uint64_t sub_10005D81C()
{
  NSObject *v0;
  os_log_type_t v1;
  uint64_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  os_log_type_t v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_10001DD0C();
  if (*(_BYTE *)(v2 + 40) == 1)
  {
    v4 = *(_QWORD *)(v2 + 16);
    v5 = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetVersionChangeUnloadTask;
    if (!*(_QWORD *)(v4 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetVersionChangeUnloadTask))
    {
      sub_10007FF98((uint64_t (*)(uint64_t))sub_10004E578, sub_10007C4B4);
      if ((v6 & 1) != 0)
      {
        if (qword_1000FB108 != -1)
          swift_once(&qword_1000FB108, sub_10004D568);
        v7 = sub_10001DD64();
        sub_100037AC4(v7, (uint64_t)qword_1000FD390);
        v8 = sub_10001E9D0();
        if (sub_10001E6C4(v8))
        {
          v9 = (_WORD *)sub_10001D8D4(2);
          sub_10007F108(v9);
          sub_100044580((void *)&_mh_execute_header, v0, v1, "Starting task to unload assets due to pending version change", v3);
          sub_10001D790((uint64_t)v3);
        }
        v11 = *(_QWORD *)(v2 + 16);
        v10 = *(_QWORD *)(v2 + 24);

        v12 = sub_10001DBC0();
        sub_10002B26C(v10, v13, v14, v12);
        v15 = sub_100006A80((uint64_t)&unk_1000F3E38, 24);
        swift_weakInit(v15 + 16, v11);
        v16 = (_QWORD *)sub_100006A80((uint64_t)&unk_1000F3E88, 40);
        v17 = sub_10007F974(v16);
        v19 = sub_10007FFC0((uint64_t)v17, (uint64_t)&unk_1000FD8A8, v18);
        v20 = *(_QWORD *)(v4 + v5);
        *(_QWORD *)(v4 + v5) = v19;
        sub_10007FBF0(v20);
      }
    }
  }
  swift_task_dealloc(*(_QWORD *)(v2 + 24));
  return sub_10001DE38(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_10005D95C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1[10] = v0;
  v2 = sub_100002F78(&qword_1000FD7E0);
  v1[11] = sub_10001D800(*(_QWORD *)(v2 - 8));
  v3 = sub_10007D89C();
  v1[12] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[13] = v4;
  v1[14] = sub_10001D800(v4);
  v5 = sub_10007D9D8();
  v1[15] = v5;
  v1[16] = sub_10001D800(*(_QWORD *)(v5 - 8));
  v6 = sub_10007DCE8();
  v1[17] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[18] = v7;
  v1[19] = sub_10001D800(v7);
  sub_10001D7B8();
  return sub_10001D674();
}

void sub_10005D9E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  os_log_type_t v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  void (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  os_log_type_t v58;
  _WORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[18];
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  sub_10007FA40();
  v73 = v4;
  v74 = v5;
  v72 = v2;
  v6 = (uint64_t (*)(uint64_t))(v2 + 16);
  if (qword_1000FB108 != -1)
    goto LABEL_32;
  while (1)
  {
    v7 = sub_10001DD64();
    *(_QWORD *)(v2 + 160) = sub_100002FF8(v7, (uint64_t)qword_1000FD390);
    sub_1000490A8();
    v8 = sub_10001E9D0();
    if (sub_10001E6C4(v8))
    {
      v9 = (_WORD *)sub_10001D8D4(2);
      sub_10007F108(v9);
      sub_100044580((void *)&_mh_execute_header, v0, (os_log_type_t)v1, "Unloading assets not in use by requests due to \"unload cached\" asset policy", v3);
      sub_10001D790((uint64_t)v3);
    }
    v10 = *(_QWORD *)(v2 + 80);

    sub_10002B2E0(v10 + 120, (uint64_t)v6);
    v11 = *(_QWORD *)(v10 + 120);
    v1 = *(_QWORD *)(v2 + 80);
    if ((v11 & 0xC000000000000001) == 0)
    {
      sub_10001D7EC();
      v35 = sub_10001E338();
      v36 = sub_10007E5B0(v35, v1, (uint64_t (*)(uint64_t))sub_10005DFD0);
      goto LABEL_27;
    }
    sub_10001D834(v1);
    sub_10001E338();
    v70 = sub_10007EEDC();
    v12 = sub_10007DADC();
    if (!v12)
      break;
    v13 = v12;
    v3 = (uint8_t *)(v2 + 40);
    v69 = v2 + 72;
    v14 = (uint64_t *)(v2 + 64);
    v15 = *(_QWORD *)(v2 + 144);
    v63 = *(_QWORD *)(v2 + 120);
    HIDWORD(v68) = enum case for LoadState.unloaded(_:);
    v67 = sub_10001E1D8();
    v64 = _swiftEmptySetSingleton;
    v66 = (char *)&type metadata for Swift.AnyObject + 8;
    v6 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState;
    while (1)
    {
      v1 = *(_QWORD *)(v2 + 152);
      v17 = *(_QWORD *)(v2 + 128);
      v16 = *(_QWORD *)(v2 + 136);
      *(_QWORD *)(v2 + 72) = v13;
      sub_10002B4BC(v2 + 64, v69, (uint64_t)v66, v67);
      v18 = *(_QWORD *)(v2 + 64) + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
      v19 = sub_10007EE38();
      sub_10002B308(v19, v20, 33);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v15 + 104))(v1, HIDWORD(v68), v16);
      sub_100006710(&qword_1000FCD38, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState);
      v24 = sub_10007FEE4(v18, v22, v23, v21);
      v25 = sub_10007E4F0();
      v26(v25);
      sub_10007DD78(v18, v17);
      v27 = *(_QWORD *)(v2 + 128);
      if ((v24 & 1) == 0)
        break;
      sub_10007DCD0(v27);
      sub_100080074();
LABEL_10:
      v29 = swift_release(*v14);
LABEL_11:
      v13 = __CocoaSet.Iterator.next()(v29);
      if (!v13)
        goto LABEL_26;
    }
    v28 = *(_QWORD *)(*(_QWORD *)(v27 + *(int *)(v63 + 48)) + 16);
    sub_10007DCD0(v27);
    sub_100080074();
    if (v28)
      goto LABEL_10;
    v1 = *v14;
    sub_10007EA38();
    if (!(!v32 & v31))
    {
      sub_100014280();
      v30 = _swiftEmptySetSingleton;
    }
    v64 = v30;
    Hasher.init(_seed:)(v71, v30[5]);
    sub_10007ED80();
    v0 = v71;
    Hasher._finalize()();
    sub_10007CEF0();
    if (!v32)
    {
      sub_10001E178();
LABEL_23:
      sub_10007D0F0(v33);
      goto LABEL_11;
    }
    sub_10001EB2C();
    while (1)
    {
      sub_10007DA8C();
      if (v32)
      {
        if ((v34 & 1) != 0)
          break;
      }
      sub_10007DB48();
      sub_10001E62C();
      if (!v32)
      {
        sub_10001E154();
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_32:
    swift_once(&qword_1000FB108, sub_10004D568);
  }
  v64 = _swiftEmptySetSingleton;
LABEL_26:
  v37 = sub_10001EBB0(*(_QWORD *)(v2 + 80));
  sub_10007F2D4(v37, v38, v39, v40, v41, v42, v43, v44, v62, v63, (uint64_t)v64, (uint64_t)v66, v67, v68, v69, v70);
  v36 = v65;
LABEL_27:
  v45 = (unint64_t)sub_1000800AC();
  *(_QWORD *)(v2 + 168) = v45;
  sub_10001D930();
  if (v45 >> 62)
  {
    sub_10001E338();
    v36 = sub_10007EC34();
    v46 = sub_10001E034();
    if (v36)
      goto LABEL_29;
  }
  else
  {
    sub_100080134();
    if (v36)
    {
LABEL_29:
      *(_DWORD *)(v2 + 200) = enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.policyChangeCriticalMemory(_:);
      *(_QWORD *)(v2 + 176) = v36 - 1;
      if (__OFSUB__(v36, 1))
      {
        __break(1u);
      }
      else
      {
        v48 = sub_10007D124(v46, v47, *(_QWORD *)(v2 + 168));
        *(_QWORD *)(v2 + 184) = sub_10007D8D4(v48, *(_QWORD *)(v2 + 168));
        v49 = *(_QWORD *)(v2 + 88);
        sub_10002BAF8(*(_QWORD *)(v2 + 104));
        v50 = sub_10002BCD4();
        sub_10002B26C(v49, v51, v52, v50);
        v53 = (_QWORD *)swift_task_alloc(dword_1000FD484);
        *(_QWORD *)(v2 + 192) = v53;
        *v53 = v2;
        v53[1] = sub_10005DE2C;
        v54 = sub_10007DBEC();
        sub_10007D7F4(v54, v55, v56);
      }
      return;
    }
  }
  v57 = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 168));
  Logger.logObject.getter(v57);
  v58 = sub_10001E9D0();
  if (sub_100039E20(v58))
  {
    v59 = (_WORD *)sub_10001D8D4(2);
    sub_10004478C(v59);
    sub_100039E4C((void *)&_mh_execute_header, v60, v61, "Finished unloading assets not in use by requests due to \"unload cached\" asset policy");
    sub_10001D790(v1);
  }
  sub_10007F2AC();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  (*(void (**)(void))(v2 + 8))();
}

uint64_t sub_10005DE2C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_100037EFC();
  sub_10001E538();
  v3 = sub_10001D788(*(_QWORD *)(v1 + 192), v2);
  if (v0)
    v3 = sub_10001EBB8();
  sub_10007D78C(v3, &qword_1000FD7E0);
  sub_10007D020();
  sub_10007E854();
  return sub_10001D6DC();
}

uint64_t sub_10005DEB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  _WORD *v21;
  uint64_t v22;
  uint64_t v23;

  sub_10001DD0C();
  v3 = *(_QWORD *)(v2 + 176);
  result = swift_release(*(_QWORD *)(v2 + 184));
  if (v3)
  {
    v6 = *(_QWORD *)(v2 + 176);
    v7 = v6 - 1;
    *(_QWORD *)(v2 + 176) = v6 - 1;
    if (__OFSUB__(v6, 1))
    {
      __break(1u);
    }
    else
    {
      v8 = sub_10007D124(result, v5, *(_QWORD *)(v2 + 168));
      v9 = *(_QWORD *)(v2 + 168);
      if (v0)
      {
        v10 = sub_10007D8D4(v8, v9);
      }
      else
      {
        v10 = *(_QWORD *)(v9 + 8 * v7 + 32);
        sub_10001D7EC();
      }
      *(_QWORD *)(v2 + 184) = v10;
      v11 = *(_QWORD *)(v2 + 88);
      sub_10002BAF8(*(_QWORD *)(v2 + 104));
      v12 = sub_10002BCD4();
      sub_10002B26C(v11, v13, v14, v12);
      v15 = (_QWORD *)swift_task_alloc(dword_1000FD484);
      *(_QWORD *)(v2 + 192) = v15;
      *v15 = v2;
      v15[1] = sub_10005DE2C;
      v16 = sub_10007DBEC();
      return sub_10007EFD0(v16, v17, v18);
    }
  }
  else
  {
    v19 = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 168));
    Logger.logObject.getter(v19);
    v20 = sub_10001E9D0();
    if (sub_100039E20(v20))
    {
      v21 = (_WORD *)sub_10001D8D4(2);
      sub_10004478C(v21);
      sub_100039E4C((void *)&_mh_execute_header, v22, v23, "Finished unloading assets not in use by requests due to \"unload cached\" asset policy");
      sub_10001D790(v1);
    }
    sub_10007F2AC();
    sub_10001D938();
    sub_10001EAC8();
    sub_10001E490();
    sub_10002B504();
    return sub_10001DE38(*(uint64_t (**)(void))(v2 + 8));
  }
  return result;
}

BOOL sub_10005DFD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t State;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  _BOOL8 v11;
  uint64_t v13;

  v2 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for LoadState(0);
  v6 = *(_QWORD *)(State - 8);
  __chkstk_darwin(State);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LoadState.unloaded(_:), State);
  sub_100006710(&qword_1000FCD38, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState);
  v10 = dispatch thunk of static Equatable.== infix(_:_:)(a1, v8, State, v9);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, State);
  sub_10002AC98(a1, (uint64_t)v4, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  v11 = (v10 & 1) == 0 && *(_QWORD *)(*(_QWORD *)&v4[*(int *)(v2 + 48)] + 16) == 0;
  sub_10002ACC4((uint64_t)v4, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  return v11;
}

uint64_t sub_10005E128(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_10007D89C();
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = sub_10001D800(v4);
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_10005E16C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  os_log_type_t v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  if (qword_1000FB108 != -1)
    swift_once(&qword_1000FB108, sub_10004D568);
  v4 = sub_10001DD64();
  *(_QWORD *)(v3 + 56) = sub_100002FF8(v4, (uint64_t)qword_1000FD390);
  sub_1000490A8();
  v5 = sub_10001E9D0();
  if (sub_100039E20(v5))
  {
    v6 = (_WORD *)sub_10001D8D4(2);
    sub_10004478C(v6);
    sub_100039E4C((void *)&_mh_execute_header, v7, v8, "Moving assets to dynamic mode that can be");
    sub_10001D790(v2);
  }
  sub_10007F6D8();
  v9 = *(_QWORD *)(v3 + 16);
  if (v0 >> 62)
  {
    sub_10007E4B0(v9);
    result = sub_100006B70();
    v1 = result;
  }
  else
  {
    result = sub_10007F1A0(v9);
  }
  *(_QWORD *)(v3 + 64) = v1;
  if (v1)
  {
    if (v1 < 1)
    {
      __break(1u);
    }
    else
    {
      v11 = *(_QWORD *)(v3 + 16);
      *(_DWORD *)(v3 + 96) = enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.userInitiated(_:);
      *(_QWORD *)(v3 + 72) = 0;
      if ((v11 & 0xC000000000000001) != 0)
      {
        v12 = sub_10007F420(result, v11);
      }
      else
      {
        v12 = *(_QWORD *)(v11 + 32);
        sub_10001D7EC();
      }
      *(_QWORD *)(v3 + 80) = v12;
      sub_10007E90C(*(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 40));
      v19 = (_QWORD *)swift_task_alloc(dword_1000FD474);
      *(_QWORD *)(v3 + 88) = v19;
      *v19 = v3;
      v19[1] = sub_10005E308;
      v20 = sub_10007DBEC();
      return sub_10007EB2C(v20, v21);
    }
  }
  else
  {
    v13 = *(void **)(v3 + 56);
    v14 = sub_10007E928();
    Logger.logObject.getter(v14);
    v15 = sub_10001E9D0();
    if (sub_100039E20(v15))
    {
      v16 = (_WORD *)sub_10001D8D4(2);
      sub_10004478C(v16);
      sub_100039E4C((void *)&_mh_execute_header, v17, v18, "Finished moving assets to dynamic mode");
      sub_10001D790(v2);
    }

    sub_10001D938();
    return sub_10002B7C0(*(uint64_t (**)(void))(v3 + 8));
  }
  return result;
}

uint64_t sub_10005E308()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10001DD0C();
  sub_10001E0D8();
  sub_10001D788(*(_QWORD *)(v0 + 88), v2);
  if (v1)
    sub_10001EBB8();
  sub_10007D53C();
  sub_10001E10C();
  return sub_10007D24C(v3, v4, v5);
}

uint64_t sub_10005E368()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  os_log_type_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(v1 + 72);
  v3 = *(_QWORD *)(v1 + 64);
  swift_release(*(_QWORD *)(v1 + 80));
  if (v2 + 1 == v3)
  {
    v4 = *(void **)(v1 + 56);
    v5 = sub_10007E928();
    Logger.logObject.getter(v5);
    v6 = sub_10001E9D0();
    if (sub_100039E20(v6))
    {
      v7 = (_WORD *)sub_10001D8D4(2);
      sub_10004478C(v7);
      sub_100039E4C((void *)&_mh_execute_header, v8, v9, "Finished moving assets to dynamic mode");
      sub_10001D790(v0);
    }

    sub_10001D938();
    return sub_10002B7C0(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    v11 = *(_QWORD *)(v1 + 72) + 1;
    *(_QWORD *)(v1 + 72) = v11;
    v12 = *(_QWORD *)(v1 + 16);
    if ((v12 & 0xC000000000000001) != 0)
    {
      v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v12);
    }
    else
    {
      v13 = *(_QWORD *)(v12 + 8 * v11 + 32);
      sub_10002B400();
    }
    *(_QWORD *)(v1 + 80) = v13;
    sub_10002BAF8(*(_QWORD *)(v1 + 40));
    v14 = (_QWORD *)swift_task_alloc(dword_1000FD474);
    *(_QWORD *)(v1 + 88) = v14;
    *v14 = v1;
    v14[1] = sub_10005E308;
    v15 = sub_10001E2B4();
    return sub_10007EB2C(v15, v16);
  }
}

uint64_t sub_10005E464(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3[31] = a2;
  v3[32] = v2;
  v3[30] = a1;
  v4 = sub_10007D9D8();
  v3[33] = v4;
  v3[34] = sub_10002B1BC(*(_QWORD *)(v4 - 8));
  v3[35] = sub_10001E784();
  v5 = sub_100002F78(&qword_1000FD7E0);
  v3[36] = sub_10001D800(*(_QWORD *)(v5 - 8));
  v6 = sub_100002F78(&qword_1000FD820);
  v3[37] = sub_10001D800(*(_QWORD *)(v6 - 8));
  v7 = sub_100002F78(&qword_1000FB920);
  v3[38] = sub_10001D800(*(_QWORD *)(v7 - 8));
  v8 = sub_10007DCE8();
  v3[39] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[40] = v9;
  v3[41] = sub_10002B1BC(v9);
  v3[42] = sub_10001E784();
  v3[43] = sub_10001E784();
  v3[44] = sub_10001E784();
  v10 = sub_10007D89C();
  v3[45] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[46] = v11;
  v3[47] = *(_QWORD *)(v11 + 64);
  v3[48] = sub_10001E784();
  v3[49] = sub_10001E784();
  sub_10001D7B8();
  return sub_10001D6DC();
}

#error "10005ED2C: call analysis failed (funcsize=834)"

uint64_t sub_10005F308()
{
  uint64_t v0;

  sub_10007E740();
  if (v0)
    sub_10001EBB8();
  sub_10001E10C();
  return sub_10001D6DC();
}

#error "10005F7A4: call analysis failed (funcsize=656)"

uint64_t sub_10005FE1C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)sub_10007F040();
  *(_QWORD *)(v0 + 464) = v1;
  sub_10007F7C4(v1, (uint64_t)&unk_1000FD830);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 472) = v2;
  *v2 = v0;
  v2[1] = sub_10005FE94;
  sub_10007F4A4((uint64_t)&type metadata for ());
  sub_10007D5B8();
  return sub_10007D520();
}

uint64_t sub_10005FE94()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 480) = v1;
  swift_task_dealloc(v3);
  if (!v1)
    swift_task_dealloc(*(_QWORD *)(v0 + 464));
  sub_100037A7C();
  return sub_10001D6DC();
}

uint64_t sub_10005FEEC()
{
  uint64_t v0;

  sub_10007F634(*(_QWORD *)(v0 + 448));
  sub_10001D9C0();
  sub_10001E10C();
  return sub_10001D6DC();
}

#error "1000601E4: call analysis failed (funcsize=656)"

uint64_t sub_1000609F0()
{
  uint64_t v0;

  sub_10007F634(*(_QWORD *)(v0 + 456));
  sub_10001E330();
  sub_10001E10C();
  return sub_10001D6DC();
}

#error "100060A74: call analysis failed (funcsize=23)"

uint64_t sub_100060A84()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)sub_10007F040();
  *(_QWORD *)(v0 + 504) = v1;
  sub_10007F7C4(v1, (uint64_t)&unk_1000FD848);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 512) = v2;
  *v2 = v0;
  v2[1] = sub_100060AFC;
  sub_10007F4A4((uint64_t)&type metadata for ());
  sub_10007D5B8();
  return sub_10007D520();
}

uint64_t sub_100060AFC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 520) = v1;
  swift_task_dealloc(v3);
  if (!v1)
    swift_task_dealloc(*(_QWORD *)(v0 + 504));
  sub_100037A7C();
  return sub_10001D6DC();
}

uint64_t sub_100060B54()
{
  uint64_t v0;

  sub_10007F634(*(_QWORD *)(v0 + 488));
  sub_10001D9C0();
  sub_10001E10C();
  return sub_10001D6DC();
}

#error "100060E54: call analysis failed (funcsize=681)"

uint64_t sub_1000616BC()
{
  uint64_t v0;

  sub_10007F634(*(_QWORD *)(v0 + 496));
  sub_10001E330();
  sub_10001E10C();
  return sub_10001D6DC();
}

#error "100061740: call analysis failed (funcsize=23)"

uint64_t sub_100061750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  sub_10001DB50();
  a17 = v20;
  a18 = v21;
  a16 = (uint64_t *)v19;
  a16 = *v19;
  v22 = a16;
  sub_10001EA4C(&a16);
  v22[67] = v18;
  swift_task_dealloc(v23);
  v24 = v22[48];
  v25 = v22[45];
  v26 = v22[46];
  sub_10002AD5C(v22[36], &qword_1000FD7E0);
  sub_10007FFC8(v27, &qword_1000FD820);
  sub_10007D78C(v28, &qword_1000FB920);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
  sub_10001E10C();
  return sub_10007D2A0(v29, v30, v31);
}

#error "100061CA0: call analysis failed (funcsize=703)"

uint64_t sub_100062378()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 560) = v1;
  swift_task_dealloc(v3);
  if (v1)
    swift_release(*(_QWORD *)(v0 + 544));
  return sub_10001D6DC();
}

#error "1000625D0: call analysis failed (funcsize=124)"

#error "100062A7C: call analysis failed (funcsize=647)"

#error "1000630CC: call analysis failed (funcsize=21)"

#error "100063378: call analysis failed (funcsize=177)"

uint64_t sub_1000633C4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4[5] = a3;
  v4[6] = a4;
  v4[4] = a2;
  v6 = sub_100002F78(&qword_1000FD7E0);
  v4[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100002F78(&qword_1000FD820);
  v4[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100002F78(&qword_1000FB920);
  v4[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason(0);
  v4[10] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[11] = v10;
  v11 = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a1;
  v4[12] = v11;
  v4[13] = v12;
  return swift_task_switch(sub_10006349C, 0, 0);
}

#error "100063564: call analysis failed (funcsize=145)"

uint64_t sub_100063708()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  sub_10001E538();
  v2 = *v0;
  sub_10001D788(*(_QWORD *)(v1 + 112), v3);
  swift_task_dealloc(*(_QWORD *)(v1 + 96));
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  return sub_10001D940(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_100063760()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v11)(void);
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  sub_10001DB68();
  v13 = v2;
  v14 = v3;
  v12 = v1;
  v4 = (_QWORD *)*v1;
  v12 = v4;
  v5 = v4[11];
  sub_10001EA4C(&v12);
  v4[16] = v0;
  v7 = swift_task_dealloc(v6);
  sub_10007FFC8(v7, &qword_1000FD7E0);
  sub_10007D78C(v8, &qword_1000FD820);
  sub_10007EC14(v9, &qword_1000FB920);
  sub_10007D04C(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  if (v0)
  {
    sub_100037A7C();
    return sub_10001D6DC();
  }
  else
  {
    swift_task_dealloc(v4[12]);
    sub_10001E330();
    sub_10001D938();
    sub_10001EAC8();
    v11 = (uint64_t (*)(void))sub_10001E5D0();
    return sub_10001D940(v11);
  }
}

uint64_t sub_10006382C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  return sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100063878(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3[4] = a2;
  v3[5] = a3;
  v5 = sub_100002F78(&qword_1000FD7E0);
  v3[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason(0);
  v3[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[8] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[9] = swift_task_alloc(v8);
  v9 = swift_task_alloc(v8);
  v10 = *a1;
  v3[10] = v9;
  v3[11] = v10;
  return swift_task_switch(sub_100063914, 0, 0);
}

#error "1000639DC: call analysis failed (funcsize=133)"

uint64_t sub_100063B48()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v9)(void);

  sub_10001DD0C();
  sub_10007FC4C();
  v2 = v1[8];
  sub_10001EA4C(v3);
  v1[13] = v0;
  swift_task_dealloc(v4);
  sub_10007D04C(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  if (v0)
  {
    sub_100037A7C();
    return sub_10007D24C(v5, v6, v7);
  }
  else
  {
    swift_task_dealloc(v1[10]);
    sub_10001E330();
    sub_10001D938();
    v9 = (uint64_t (*)(void))sub_10001E5D0();
    return v9();
  }
}

uint64_t sub_100063BC8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v8)(void);
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  sub_100037EFC();
  v10 = v2;
  v11 = v3;
  v9 = v1;
  v9 = (_QWORD *)*v1;
  v4 = v9;
  sub_10001EA4C(&v9);
  v4[15] = v0;
  v6 = swift_task_dealloc(v5);
  sub_10007EC14(v6, &qword_1000FD7E0);
  sub_10007D020();
  if (v0)
  {
    sub_100037A7C();
    return sub_10001D6DC();
  }
  else
  {
    swift_task_dealloc(v4[10]);
    sub_10001E330();
    sub_10001D938();
    v8 = (uint64_t (*)(void))sub_10001E5D0();
    return sub_10001D940(v8);
  }
}

uint64_t sub_100063C64()
{
  uint64_t v0;

  sub_10007FC04();
  sub_10001D938();
  sub_10001EAC8();
  return sub_10002B7C0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100063C98()
{
  uint64_t v0;

  sub_10007FC04();
  sub_10001D938();
  sub_10001EAC8();
  return sub_10002B7C0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100063CCC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_100002F78(&qword_1000FD7E0);
  v2[4] = sub_10001D800(*(_QWORD *)(v3 - 8));
  v4 = sub_10007D89C();
  v2[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[6] = v5;
  v2[7] = sub_10001D800(v5);
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_100063D28()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  _WORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  if (qword_1000FB108 != -1)
    swift_once(&qword_1000FB108, sub_10004D568);
  v4 = sub_10001DD64();
  *(_QWORD *)(v3 + 64) = sub_100002FF8(v4, (uint64_t)qword_1000FD390);
  sub_1000490A8();
  v5 = sub_10001E9D0();
  if (sub_100039E20(v5))
  {
    v6 = (_WORD *)sub_10001D8D4(2);
    sub_10004478C(v6);
    sub_100039E4C((void *)&_mh_execute_header, v7, v8, "Unloading unused non-cacheable assets");
    sub_10001D790(v2);
  }
  sub_10007F6D8();
  v9 = *(_QWORD *)(v3 + 16);
  if (v0 >> 62)
  {
    sub_10007E4B0(v9);
    result = sub_100006B70();
    v1 = result;
  }
  else
  {
    result = sub_10007F1A0(v9);
  }
  *(_QWORD *)(v3 + 72) = v1;
  if (v1)
  {
    if (v1 < 1)
    {
      __break(1u);
    }
    else
    {
      v11 = *(_QWORD *)(v3 + 16);
      *(_DWORD *)(v3 + 104) = enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.userInitiated(_:);
      *(_QWORD *)(v3 + 80) = 0;
      if ((v11 & 0xC000000000000001) != 0)
      {
        v12 = sub_10007F420(result, v11);
      }
      else
      {
        v12 = *(_QWORD *)(v11 + 32);
        sub_10001E900();
      }
      *(_QWORD *)(v3 + 88) = v12;
      v18 = *(_QWORD *)(v3 + 32);
      sub_10007E90C(*(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 48));
      v19 = sub_10002BCD4();
      sub_10002B26C(v18, v20, v21, v19);
      v22 = (_QWORD *)swift_task_alloc(dword_1000FD484);
      *(_QWORD *)(v3 + 96) = v22;
      *v22 = v3;
      v22[1] = sub_100063EE8;
      return sub_10007E568(v12, *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 32));
    }
  }
  else
  {
    v13 = sub_10007E928();
    Logger.logObject.getter(v13);
    v14 = sub_10001E9D0();
    if (sub_100039E20(v14))
    {
      v15 = (_WORD *)sub_10001D8D4(2);
      sub_10004478C(v15);
      sub_100039E4C((void *)&_mh_execute_header, v16, v17, "Finished unloading unused non-cacheable assets");
      sub_10001D790(v2);
    }
    sub_10007FC74();
    sub_10001D938();
    sub_10001EAC8();
    return sub_10001D940(*(uint64_t (**)(void))(v3 + 8));
  }
  return result;
}

uint64_t sub_100063EE8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_100037EFC();
  v1 = sub_10007FC4C();
  v3 = sub_10001D788(v1, v2);
  if (v0)
    v3 = sub_10001EBB8();
  sub_10007D78C(v3, &qword_1000FD7E0);
  sub_10007D020();
  sub_10007E854();
  return sub_10001D6DC();
}

uint64_t sub_100063F6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(_QWORD *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 72);
  swift_release(*(_QWORD *)(v1 + 88));
  if (v2 + 1 == v3)
  {
    v4 = sub_10007E928();
    Logger.logObject.getter(v4);
    v5 = sub_10001E9D0();
    if (sub_100039E20(v5))
    {
      v6 = (_WORD *)sub_10001D8D4(2);
      sub_10004478C(v6);
      sub_100039E4C((void *)&_mh_execute_header, v7, v8, "Finished unloading unused non-cacheable assets");
      sub_10001D790(v0);
    }
    sub_10007FC74();
    sub_10001D938();
    sub_10001EAC8();
    return sub_10002B7C0(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    v10 = *(_QWORD *)(v1 + 80) + 1;
    *(_QWORD *)(v1 + 80) = v10;
    v11 = *(_QWORD *)(v1 + 16);
    if ((v11 & 0xC000000000000001) != 0)
    {
      v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v11);
    }
    else
    {
      v12 = *(_QWORD *)(v11 + 8 * v10 + 32);
      sub_10001D7EC();
    }
    *(_QWORD *)(v1 + 88) = v12;
    v13 = *(_QWORD *)(v1 + 32);
    sub_10002BAF8(*(_QWORD *)(v1 + 48));
    v14 = sub_10002BCD4();
    sub_10002B26C(v13, v15, v16, v14);
    v17 = (_QWORD *)swift_task_alloc(dword_1000FD484);
    *(_QWORD *)(v1 + 96) = v17;
    *v17 = v1;
    v17[1] = sub_100063EE8;
    v18 = sub_10007DBEC();
    return sub_10007EB3C(v18, v19, v20);
  }
}

uint64_t sub_100064078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[24] = a3;
  v4[25] = v3;
  v4[22] = a1;
  v4[23] = a2;
  v5 = sub_10007D9D8();
  v4[26] = v5;
  v4[27] = sub_10002B1BC(*(_QWORD *)(v5 - 8));
  v4[28] = sub_10001E784();
  sub_10001D7B8();
  return sub_10001D6DC();
}

#error "1000646DC: call analysis failed (funcsize=376)"

uint64_t sub_100064718()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *v1;
  v2 = v5;
  sub_10001EA4C(&v5);
  *(_QWORD *)(v2 + 264) = v0;
  swift_task_dealloc(v3);
  if (v0)
    sub_10001EBB8();
  sub_10001E10C();
  return sub_10001D6DC();
}

#error "100064D5C: call analysis failed (funcsize=365)"

uint64_t sub_100064D98()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)sub_10007F040();
  *(_QWORD *)(v0 + 288) = v1;
  sub_10007F7C4(v1, (uint64_t)&unk_1000FD7A8);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 296) = v2;
  *v2 = v0;
  v2[1] = sub_100064E10;
  sub_10007F4A4((uint64_t)&type metadata for ());
  sub_10007D5B8();
  return sub_10007D520();
}

uint64_t sub_100064E10()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 304) = v1;
  swift_task_dealloc(v3);
  if (!v1)
    swift_task_dealloc(*(_QWORD *)(v0 + 288));
  sub_100037A7C();
  return sub_10001D6DC();
}

uint64_t sub_100064E68()
{
  uint64_t v0;

  sub_10007F810(*(_QWORD *)(v0 + 272));
  sub_10001D9C0();
  sub_10001E10C();
  return sub_10001D6DC();
}

#error "1000654B8: call analysis failed (funcsize=378)"

uint64_t sub_1000654F4()
{
  uint64_t v0;

  sub_10007F810(*(_QWORD *)(v0 + 280));
  sub_10001E330();
  sub_10001E10C();
  return sub_10001D6DC();
}

uint64_t sub_10006552C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 272));
  sub_10007E620();
  sub_10001D938();
  return sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100065564()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = sub_10007F040();
  v2 = (_QWORD *)sub_10007F500(v1);
  sub_10007F7C4(v2, (uint64_t)&unk_1000FD7C8);
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 336) = v3;
  *v3 = v0;
  v3[1] = sub_1000655D8;
  sub_10007F4A4((uint64_t)&type metadata for ());
  sub_10007D5B8();
  return sub_10007D520();
}

uint64_t sub_1000655D8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 344) = v1;
  swift_task_dealloc(v3);
  if (!v1)
    swift_task_dealloc(*(_QWORD *)(v0 + 328));
  sub_100037A7C();
  return sub_10001D6DC();
}

uint64_t sub_100065630()
{
  uint64_t v0;

  sub_10007F810(*(_QWORD *)(v0 + 312));
  sub_10001D9C0();
  sub_10001E10C();
  return sub_10001D6DC();
}

#error "100065C64: call analysis failed (funcsize=371)"

uint64_t sub_100065CA0()
{
  uint64_t v0;

  sub_10007F810(*(_QWORD *)(v0 + 320));
  sub_10001E330();
  sub_10001E10C();
  return sub_10001D6DC();
}

uint64_t sub_100065CD8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 312));
  sub_10007E620();
  sub_10001D938();
  return sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100065D10()
{
  uint64_t v0;
  uint64_t v1;

  sub_10007E760();
  if (v1)
    swift_release(*(_QWORD *)(v0 + 352));
  return sub_10001D6DC();
}

uint64_t sub_100065D64()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);

  sub_10001DB50();
  swift_release(v0[44]);
  v1 = v0[28];
  v3 = v0[26];
  v2 = v0[27];
  v4 = v0[22] + v0[29];
  v5 = sub_10007FAF0();
  sub_10007F218(v5, v6);
  *(_BYTE *)(v1 + *(int *)(v3 + 24)) = 0;
  sub_10007F218(v1, v2);
  sub_10002B308(v4, (uint64_t)(v0 + 11), 33);
  v7 = sub_10007F994();
  sub_10007BDF8(v7, v8);
  sub_10007F558();
  sub_10007F718(v1);
  sub_10001D930();
  sub_10007E918();
  sub_10001E330();
  v9 = (uint64_t (*)(void))sub_10001E5D0();
  return sub_100037D1C(v9);
}

#error "1000663EC: call analysis failed (funcsize=365)"

#error "1000666E8: call analysis failed (funcsize=177)"

uint64_t sub_10006671C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3[4] = a2;
  v3[5] = a3;
  v5 = sub_100002F78(&qword_1000FD7E0);
  v3[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason(0);
  v3[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[8] = v7;
  v8 = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  v3[9] = v8;
  v3[10] = v9;
  return swift_task_switch(sub_1000667A8, 0, 0);
}

#error "100066870: call analysis failed (funcsize=111)"

uint64_t sub_10006697C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v3)(void);

  sub_100037EFC();
  v1 = sub_10007E288();
  sub_10007EC14(v1, &qword_1000FD7E0);
  sub_10007D020();
  if (v0)
  {
    sub_100037A7C();
    return sub_10001D6DC();
  }
  else
  {
    sub_10008021C();
    sub_10001E330();
    v3 = (uint64_t (*)(void))sub_10001E5D0();
    return sub_10001D940(v3);
  }
}

uint64_t sub_1000669EC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  sub_10001E330();
  return sub_100006A38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100066A20(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3[4] = a2;
  v3[5] = a3;
  v5 = sub_100002F78(&qword_1000FD7E0);
  v3[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason(0);
  v3[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[8] = v7;
  v8 = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  v3[9] = v8;
  v3[10] = v9;
  return swift_task_switch(sub_100066AAC, 0, 0);
}

#error "100066B74: call analysis failed (funcsize=111)"

uint64_t sub_100066C80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v3)(void);

  sub_100037EFC();
  v1 = sub_10007E288();
  sub_10007EC14(v1, &qword_1000FD7E0);
  sub_10007D020();
  if (v0)
  {
    sub_100037A7C();
    return sub_10001D6DC();
  }
  else
  {
    sub_10008021C();
    sub_10001E330();
    v3 = (uint64_t (*)(void))sub_10001E5D0();
    return sub_10001D940(v3);
  }
}

uint64_t sub_100066CF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = sub_10007D89C();
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = sub_10001D800(v5);
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_100066D38()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(v1 + 16);
  if (!(v2 >> 62))
  {
    result = sub_10007F1A0(v2);
    if (v0)
      goto LABEL_3;
LABEL_9:
    sub_10007E928();
    sub_10001E330();
    return sub_10001D940(*(uint64_t (**)(void))(v1 + 8));
  }
  sub_10007E4B0(v2);
  result = sub_100006B70();
  v0 = result;
  if (!result)
    goto LABEL_9;
LABEL_3:
  v4 = *(_QWORD *)(v1 + 16);
  *(_DWORD *)(v1 + 88) = enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.acquisitionError(_:);
  v5 = __OFSUB__(v0, 1);
  v6 = v0 - 1;
  *(_QWORD *)(v1 + 64) = v6;
  if (v5)
  {
    __break(1u);
  }
  else
  {
    v7 = v4 & 0xC000000000000001;
    v8 = sub_1000BF908(v6, (v4 & 0xC000000000000001) == 0);
    v9 = *(_QWORD *)(v1 + 16);
    if (v7)
    {
      v10 = sub_10007D8D4(v8, v9);
    }
    else
    {
      v10 = *(_QWORD *)(v9 + 8 * v6 + 32);
      sub_10002B400();
    }
    *(_QWORD *)(v1 + 72) = v10;
    sub_10002BAF8(*(_QWORD *)(v1 + 48));
    v11 = (_QWORD *)swift_task_alloc(dword_1000FD484);
    *(_QWORD *)(v1 + 80) = v11;
    *v11 = v1;
    v11[1] = sub_100066E30;
    v12 = sub_10001E2B4();
    return sub_10007E568(v12, v13, v14);
  }
  return result;
}

uint64_t sub_100066E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  sub_10001DD0C();
  a15 = v18;
  a16 = v19;
  a14 = v17;
  a14 = (_QWORD *)*v17;
  sub_10001D788(a14[10], &a14);
  if (v16)
    sub_10001EBB8();
  sub_10007D53C();
  sub_10001E10C();
  return sub_10007D24C(v20, v21, v22);
}

void sub_100066E98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(v1 + 64);
  swift_release(*(_QWORD *)(v1 + 72));
  if (v2)
  {
    v5 = *(_QWORD *)(v1 + 64);
    v6 = v5 - 1;
    *(_QWORD *)(v1 + 64) = v5 - 1;
    if (__OFSUB__(v5, 1))
    {
      __break(1u);
    }
    else
    {
      v7 = sub_10007D124(v3, v4, *(_QWORD *)(v1 + 16));
      v8 = *(_QWORD *)(v1 + 16);
      if (v0)
      {
        v9 = sub_10007D8D4(v7, v8);
      }
      else
      {
        v9 = *(_QWORD *)(v8 + 8 * v6 + 32);
        sub_10002B400();
      }
      *(_QWORD *)(v1 + 72) = v9;
      sub_10002BAF8(*(_QWORD *)(v1 + 48));
      v10 = (_QWORD *)swift_task_alloc(dword_1000FD484);
      *(_QWORD *)(v1 + 80) = v10;
      *v10 = v1;
      v10[1] = sub_100066E30;
      v11 = sub_10001E2B4();
      sub_10007E568(v11, v12, v13);
    }
  }
  else
  {
    sub_10007E928();
    sub_10001E330();
    sub_10001D940(*(uint64_t (**)(void))(v1 + 8));
  }
}

uint64_t type metadata accessor for InferenceProviderAssetManagerPolicy(uint64_t a1)
{
  return sub_100042760(a1, qword_1000FD758, (uint64_t)&nominal type descriptor for InferenceProviderAssetManagerPolicy);
}

uint64_t *sub_100066F6C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v9);
  }
  else
  {
    v7 = type metadata accessor for AssetPolicy(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  }
  return a1;
}

uint64_t sub_100067008(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AssetPolicy(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_10006703C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for AssetPolicy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1000670AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;

  v6 = type metadata accessor for AssetPolicy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100067120(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for AssetPolicy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100067190(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for AssetPolicy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100067200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006720C);
}

uint64_t sub_10006720C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001EC20();
  return sub_100005700(a1, a2, v4);
}

uint64_t sub_10006723C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100067248);
}

uint64_t sub_100067248(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001EC20();
  return sub_100005630(a1, a2, a2, v4);
}

uint64_t sub_10006727C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for AssetPolicy(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_1000672F4(uint64_t a1)
{
  uint64_t v2;

  sub_100006710(&qword_1000FB728, type metadata accessor for InferenceProviderAssetManager);
  *(_QWORD *)(a1 + 8) = v2;
}

unint64_t sub_100067330()
{
  unint64_t result;

  result = qword_1000FD798;
  if (!qword_1000FD798)
  {
    result = swift_getWitnessTable(&unk_1000CCDE4, &type metadata for ModelManager);
    atomic_store(result, &qword_1000FD798);
  }
  return result;
}

uint64_t sub_10006736C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_BYTE *, uint64_t);
  uint64_t v18;
  char v19;
  _BYTE v21[24];
  _BYTE v22[24];

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = &v21[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v12 = &v21[-v11];
  v13 = *a1 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  swift_beginAccess(v13, v22, 0, 0);
  v14 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v10, v13 + *(int *)(v14 + 32), v6);
  v15 = a2 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy;
  swift_beginAccess(v15, v21, 0, 0);
  v16 = type metadata accessor for InferenceProviderAssetManagerPolicy(0);
  static Date.+ infix(_:_:)(v10, *(double *)(v15 + *(int *)(v16 + 24)));
  v17 = *(void (**)(_BYTE *, uint64_t))(v7 + 8);
  v17(v10, v6);
  sub_100006710(&qword_1000FD888, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  LOBYTE(a3) = dispatch thunk of static Comparable.< infix(_:_:)(v12, a3, v6, v18);
  v17(v12, v6);
  if ((a3 & 1) != 0)
    v19 = *(_BYTE *)(v13 + *(int *)(v14 + 24)) ^ 1;
  else
    v19 = 1;
  return v19 & 1;
}

void *sub_10006750C(uint64_t (*a1)(uint64_t *), void *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  char v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t *);
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v4 = a3;
  v25 = &_swiftEmptyArrayStorage;
  if (a3 >> 62)
    goto LABEL_18;
  v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      v8 = 0;
      v22 = v4 & 0xFFFFFFFFFFFFFF8;
      v23 = v4 & 0xC000000000000001;
      v21 = v4;
      while (v23)
      {
        v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v4);
LABEL_7:
        v10 = v8 + 1;
        if (__OFADD__(v8, 1))
          goto LABEL_17;
        v24 = v9;
        v11 = a2;
        v12 = a1(&v24);
        if (v3)
        {
          swift_bridgeObjectRelease(v4);
          swift_release(v9);
          swift_release(v25);
          return v11;
        }
        if ((v12 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          v13 = v7;
          v14 = a1;
          v15 = a2;
          v16 = v25[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
          v17 = v16;
          a2 = v15;
          a1 = v14;
          v7 = v13;
          v4 = v21;
          v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v9);
          specialized ContiguousArray._endMutation()(v18);
        }
        else
        {
          swift_release(v9);
        }
        ++v8;
        if (v10 == v7)
        {
          v11 = v25;
          goto LABEL_23;
        }
      }
      if (v8 < *(_QWORD *)(v22 + 16))
        break;
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      if (v4 < 0)
        v19 = v4;
      else
        v19 = v4 & 0xFFFFFFFFFFFFFF8;
      v7 = _CocoaArrayWrapper.endIndex.getter(v19);
      if (!v7)
        goto LABEL_22;
    }
    v9 = *(_QWORD *)(v4 + 8 * v8 + 32);
    swift_retain(v9);
    goto LABEL_7;
  }
LABEL_22:
  v11 = &_swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease(v4);
  return v11;
}

uint64_t sub_1000676BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v4[11] = a4;
  v5 = type metadata accessor for ContinuousClock(0);
  v4[12] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[13] = v6;
  v4[14] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ContinuousClock.Instant(0);
  v4[15] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[16] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[17] = swift_task_alloc(v9);
  v4[18] = swift_task_alloc(v9);
  v10 = sub_100002F78(&qword_1000FD870);
  v4[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  v4[20] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[21] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[22] = swift_task_alloc(v13);
  v4[23] = swift_task_alloc(v13);
  return swift_task_switch(sub_1000677B0, 0, 0);
}

uint64_t sub_1000677B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;

  sub_10001DB68();
  sub_10007E594();
  *(_QWORD *)(v2 + 192) = sub_1000446D4((uint64_t)"Purge Inactive Assets", 21);
  sub_10002B2E0(v1, v0);
  v3 = sub_10007D918();
  *(_QWORD *)(v2 + 200) = v3;
  if (v3)
  {
    v4 = swift_task_alloc(dword_1000FD8EC);
    v5 = (_QWORD *)sub_10007E648(v4);
    v6 = sub_10007DA44(v5);
    return sub_10007D9A8(v6);
  }
  else
  {
    v8 = sub_10007D380();
    sub_10002AD5C(v8, &qword_1000FD870);
    sub_10002B2E0(*(_QWORD *)(v2 + 88) + 16, v2 + 40);
    v9 = sub_10008009C();
    *(_QWORD *)(v2 + 240) = v9;
    if (v9)
    {
      return sub_10001D6DC();
    }
    else
    {
      if (qword_1000FB108 != -1)
        swift_once(&qword_1000FB108, sub_10004D568);
      v10 = sub_10001DD64();
      sub_100037AC4(v10, (uint64_t)qword_1000FD390);
      v11 = sub_10001E9D0();
      if (sub_100039E20(v11))
      {
        v12 = (_WORD *)sub_10001D8D4(2);
        sub_10004478C(v12);
        sub_100039E4C((void *)&_mh_execute_header, v13, v14, "Ending task to purge inactive assets");
        sub_10001D790(v1);
      }
      sub_10007CFEC();
      sub_10007DB9C();
      sub_10001D930();
      sub_10001EAC8();
      sub_10001E490();
      sub_10002B504();
      sub_10002B528();
      sub_10002B4C4();
      sub_10002B70C();
      return sub_10007CF2C(*(uint64_t (**)(void))(v2 + 8));
    }
  }
}

uint64_t sub_10006791C()
{
  uint64_t v0;

  sub_10001D680(*(_QWORD *)(*(_QWORD *)v0 + 208));
  sub_10001D9C0();
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_10006795C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  os_log_type_t v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;

  sub_10007F048();
  v2 = sub_10007E8A0();
  if (v3)
  {
    sub_10002BBF0(v2, &qword_1000FD870);
    sub_10002B2E0(*(_QWORD *)(v1 + 88) + 16, v1 + 40);
    v4 = sub_10007E5BC();
    *(_QWORD *)(v1 + 240) = v4;
    if (v4)
    {
      return sub_10007E0A4((uint64_t)sub_100067CF0, v4, 0);
    }
    else
    {
      if (qword_1000FB108 != -1)
        swift_once(&qword_1000FB108, sub_10004D568);
      v7 = sub_10001DD64();
      sub_100037AC4(v7, (uint64_t)qword_1000FD390);
      v8 = sub_10001E9D0();
      if (sub_100039E20(v8))
      {
        v9 = (_WORD *)sub_10001D8D4(2);
        sub_10004478C(v9);
        sub_100039E4C((void *)&_mh_execute_header, v10, v11, "Ending task to purge inactive assets");
        sub_10001D790(v0);
      }
      sub_10007CFEC();
      sub_10007DB9C();
      sub_10001D930();
      sub_10001EAC8();
      sub_10001E490();
      sub_10002B504();
      sub_10002B528();
      sub_10002B4C4();
      sub_10002B70C();
      return sub_10007D480(*(uint64_t (**)(void))(v1 + 8));
    }
  }
  else
  {
    sub_10007D294(*(_QWORD *)(v1 + 184), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 + 168) + 32));
    sub_100080174();
    sub_100080018();
    sub_10007F438();
    sub_10007DF98();
    sub_100080164();
    sub_10007F574();
    sub_10007E3A4();
    sub_10007E3C0((__n128)xmmword_1000CC2E0);
    v5 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep<A>(until:tolerance:clock:)[1]);
    *(_QWORD *)(v1 + 232) = v5;
    sub_100006710(&qword_1000FD880, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock);
    *v5 = v1;
    v5[1] = sub_100067B1C;
    sub_10007DCBC();
    return sub_10007D758();
  }
}

uint64_t sub_100067B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  sub_10001DB50();
  a17 = v20;
  a18 = v21;
  a16 = v19;
  v22 = (_QWORD *)*v19;
  a16 = v22;
  sub_10001D788(v22[29], &a16);
  if (v18)
  {
    v23 = v22[18];
    v24 = v22[14];
    v25 = v22[13];
    sub_10001EBB8();
    sub_10001E808(v24, *(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
    sub_10007DFC8(v23);
  }
  else
  {
    sub_10007E0D0();
    sub_10007F560();
  }
  sub_100037A7C();
  return sub_10007D2A0(v26, v27, v28);
}

uint64_t sub_100067BA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;

  sub_10001DB68();
  v1 = sub_10007DACC();
  sub_10007DA2C();
  if ((v1 & 1) == 0)
  {
    v2 = sub_10007D918();
    *(_QWORD *)(v0 + 200) = v2;
    if (v2)
    {
      v3 = swift_task_alloc(dword_1000FD8EC);
      v4 = (_QWORD *)sub_10007E648(v3);
      v5 = sub_10007DA44(v4);
      return sub_10007D9A8(v5);
    }
    v7 = sub_10007D380();
    sub_10002AD5C(v7, &qword_1000FD870);
  }
  sub_10002B2E0(*(_QWORD *)(v0 + 88) + 16, v0 + 40);
  v8 = sub_10007E5BC();
  *(_QWORD *)(v0 + 240) = v8;
  if (v8)
    return sub_10001D6DC();
  if (qword_1000FB108 != -1)
    swift_once(&qword_1000FB108, sub_10004D568);
  v9 = sub_10001DD64();
  sub_100037AC4(v9, (uint64_t)qword_1000FD390);
  v10 = sub_10001E9D0();
  if (sub_100039E20(v10))
  {
    v11 = (_WORD *)sub_10001D8D4(2);
    sub_10004478C(v11);
    sub_100039E4C((void *)&_mh_execute_header, v12, v13, "Ending task to purge inactive assets");
    sub_10001D790(v1);
  }
  sub_10007CFEC();
  sub_10007DB9C();
  sub_10001D930();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  sub_10002B70C();
  return sub_10007CF2C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100067CF0()
{
  sub_10006BA5C();
  sub_10001D9C0();
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_100067D24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;

  sub_10001DB68();
  if (qword_1000FB108 != -1)
    swift_once(&qword_1000FB108, sub_10004D568);
  v2 = sub_10001DD64();
  sub_100037AC4(v2, (uint64_t)qword_1000FD390);
  v3 = sub_10001E9D0();
  if (sub_100039E20(v3))
  {
    v4 = (_WORD *)sub_10001D8D4(2);
    sub_10004478C(v4);
    sub_100039E4C((void *)&_mh_execute_header, v5, v6, "Ending task to purge inactive assets");
    sub_10001D790(v0);
  }
  sub_10007CFEC();
  sub_10007DB9C();
  sub_10001D930();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  sub_10002B70C();
  return sub_10007CF2C(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_100067DD8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2[44] = a1;
  v2[45] = v1;
  v3 = sub_100002F78(&qword_1000FD870);
  v2[46] = sub_10002B1BC(*(_QWORD *)(v3 - 8));
  v2[47] = sub_10001E784();
  v2[48] = sub_10001E784();
  v4 = sub_10007D9D8();
  v2[49] = v4;
  v2[50] = sub_10002B1BC(*(_QWORD *)(v4 - 8));
  v2[51] = sub_10001E784();
  v5 = sub_10007DCE8();
  v2[52] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[53] = v6;
  v2[54] = sub_10002B1BC(v6);
  v2[55] = sub_10001E784();
  v2[56] = sub_10001E784();
  v2[57] = sub_10001E784();
  v7 = sub_100002F78(&qword_1000FD7E0);
  v2[58] = sub_10001D800(*(_QWORD *)(v7 - 8));
  v8 = sub_10007D89C();
  v2[59] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[60] = v9;
  v2[61] = sub_10002B1BC(v9);
  v2[62] = sub_10001E784();
  v10 = sub_10007F428();
  v2[63] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[64] = v11;
  v2[65] = sub_10002B1BC(v11);
  v2[66] = sub_10001E784();
  v2[67] = sub_10001E784();
  v2[68] = sub_10001E784();
  v2[69] = sub_10001E784();
  sub_10001D7B8();
  return sub_10001D6DC();
}

uint64_t sub_100067EEC()
{
  _QWORD *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t *v9;

  sub_10001E6F0();
  if (qword_1000FB108 != -1)
    swift_once(&qword_1000FB108, sub_10004D568);
  v1 = v0[45];
  v2 = sub_10001DD64();
  v0[70] = v2;
  v3 = sub_100002FF8(v2, (uint64_t)qword_1000FD390);
  v0[71] = v3;
  sub_10001E194();
  sub_10002B3CC();
  v4 = sub_10001E9D0();
  v5 = sub_100039E20(v4);
  v6 = v0[45];
  if (v5)
  {
    v7 = (uint8_t *)sub_10001D8D4(12);
    *(_DWORD *)v7 = 134217984;
    v8 = v6 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy;
    sub_10002B2E0(v6 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy, (uint64_t)(v0 + 2));
    v0[43] = *(_QWORD *)(v8 + *(int *)(sub_10007E860() + 24));
    sub_10007DF54((uint64_t)(v0 + 43), (uint64_t)(v0 + 44), (uint64_t)(v7 + 4));
    sub_10001D9C8();
    sub_10001E18C((void *)&_mh_execute_header, v1, (os_log_type_t)v3, "Purging inactive assets that haven't been used for at least %f seconds", v7);
    sub_10001D790((uint64_t)v7);
  }
  else
  {
    sub_10001D9C8();
  }

  v9 = sub_10007DCF8(v0[45]);
  v0[72] = v9;
  return sub_100037B34((uint64_t)sub_10006802C, *v9, 0);
}

uint64_t sub_10006802C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 360);
  *(_BYTE *)(v0 + 680) = *(_BYTE *)(**(_QWORD **)(v0 + 576)
                                  + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_assetsHaveUpdated);
  return sub_10001D948((uint64_t)sub_100068058, v1);
}

void sub_100068058()
{
  os_log_type_t v0;
  NSObject *v1;
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(_QWORD);
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  _WORD *v37;
  _QWORD *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t (*v64)(uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint8_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  NSObject *v134;
  os_log_type_t v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  os_log_type_t v162;
  _BOOL4 v163;
  uint8_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  os_log_type_t v177;
  uint64_t v178;
  uint64_t v179;
  uint8_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  os_log_type_t v240;
  _WORD *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  _QWORD *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  _QWORD *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  char *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  void (*v417)(NSObject *, uint64_t, NSObject *);
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t (*v450)(void);
  uint64_t (*v451)(uint64_t, uint64_t);
  uint64_t (*v452)(void);
  uint64_t v453[11];

  if (*(_BYTE *)(v2 + 680) == 1)
  {
    sub_10007EFE8();
    v3 = sub_10001E9D0();
    if (sub_100039E20(v3))
    {
      v4 = (uint8_t *)sub_10001D8D4(2);
      *(_WORD *)v4 = 0;
      sub_100044580((void *)&_mh_execute_header, v1, v0, "While purging inactive assets, unloading dynamic-capable assets due to pending asset update", v4);
      sub_10001D790((uint64_t)v4);
    }

  }
  v5 = *(_QWORD *)(v2 + 552);
  v6 = *(_QWORD *)(v2 + 544);
  v7 = *(_QWORD *)(v2 + 360);
  static Date.now.getter();
  *(_QWORD *)(v2 + 336) = _swiftEmptySetSingleton;
  v8 = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy;
  *(_QWORD *)(v2 + 584) = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy;
  v9 = v7 + v8;
  v10 = sub_10007EE38();
  sub_10002B2E0(v10, v11);
  v12 = sub_10007E860();
  *(_QWORD *)(v2 + 592) = v12;
  static Date.- infix(_:_:)(v5, *(double *)(v9 + *(int *)(v12 + 24)));
  sub_10002B2E0(v7 + 120, v2 + 64);
  *(_QWORD *)(sub_10007DB04() + 16) = v6;
  sub_10001E194();
  v13 = sub_10001E140();
  v14 = sub_100072B50(v13, v7, sub_10007C520);
  sub_10001E490();
  v15 = (uint64_t)sub_10005CE8C(v14);
  *(_QWORD *)(v2 + 600) = v15;
  v16 = sub_10002B88C();
  if ((unint64_t)v15 >> 62)
  {
    if (v15 < 0)
      v34 = v15;
    else
      v34 = v15 & 0xFFFFFFFFFFFFFF8;
    sub_10001E338();
    v18 = _CocoaArrayWrapper.endIndex.getter(v34);
    v16 = sub_10001E034();
  }
  else
  {
    v18 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v19 = (v2 + 680);
  if (v18)
  {
    *(_DWORD *)(v2 + 672) = enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.purgeInactiveAssets(_:);
    *(_DWORD *)(v2 + 676) = enum case for LoadState.loaded(_:);
    v15 = v18 - 1;
    *(_QWORD *)(v2 + 608) = v18 - 1;
    if (!__OFSUB__(v18, 1))
    {
      v20 = sub_10007D124(v16, v17, *(_QWORD *)(v2 + 600));
      v21 = *(_QWORD *)(v2 + 600);
      if (_swiftEmptySetSingleton)
      {
        v22 = sub_10007D8D4(v20, v21);
      }
      else
      {
        v22 = *(_QWORD *)(v21 + 8 * v15 + 32);
        sub_10002B400();
      }
      *(_QWORD *)(v2 + 616) = v22;
      sub_10007DE84();
      if (!v53 || ((uint64_t)v19->isa & 1) != 0)
      {
        sub_10007E940(v23);
        v27 = sub_10002BCD4();
        sub_10002B26C(v18 - 1, v28, v29, v27);
        v30 = (_QWORD *)swift_task_alloc(dword_1000FD484);
        *(_QWORD *)(v2 + 640) = v30;
        *v30 = v2;
        v30[1] = sub_100069918;
        sub_10001E2B4();
        sub_10007EF54();
        sub_100064078(v31, v32, v33);
      }
      else
      {
        sub_10007F9D8(v23);
        v24 = (_QWORD *)swift_task_alloc(dword_1000FD474);
        *(_QWORD *)(v2 + 624) = v24;
        *v24 = v2;
        v24[1] = sub_100068E1C;
        sub_10001E2B4();
        sub_10007EF54();
        sub_10005E464(v25, v26);
      }
      return;
    }
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 656) = 0;
    v35 = sub_10007EC08();
    Logger.logObject.getter(v35);
    v36 = sub_10001E9D0();
    if (sub_10001E6C4(v36))
    {
      v37 = (_WORD *)sub_10001D8D4(2);
      sub_10007F108(v37);
      sub_100044580((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Finished purging inactive assets", 0);
      sub_10001D790(0);
    }

    sub_100080128();
    if (v53)
    {
      sub_10001E194();
      v38 = (_QWORD *)sub_10001E784();
      *(_QWORD *)(v2 + 664) = v38;
      sub_100080108(v38, (uint64_t)sub_10006A438);
      sub_10007EF54();
      __asm { BR              X0 }
    }
  }
  sub_100080020();
  if (!v53)
  {
    sub_10001D834(v15);
    sub_10001DBE4();
    v438 = sub_10007E814();
    v40 = sub_10007DADC();
    if (!v40)
      goto LABEL_59;
    v41 = v40;
    v19 = (v2 + 160);
    v417 = (void (*)(NSObject *, uint64_t, NSObject *))(v2 + 264);
    v425 = v2 + 248;
    v42 = *(_QWORD *)(v2 + 424);
    v444 = *(_QWORD *)(v2 + 392);
    v308 = v2 + 280;
    v322 = v2 + 232;
    v406 = v2 + 296;
    LODWORD(v392) = enum case for LoadState.loaded(_:);
    v43 = v2 + 304;
    v378 = sub_10001E1D8();
    v350 = (_QWORD *)(v2 + 304);
    v364 = (char *)&type metadata for Swift.AnyObject + 8;
    v432 = v2 + 160;
LABEL_30:
    v44 = *(_QWORD *)(v2 + 440);
    v45 = *(_QWORD *)(v2 + 416);
    *(_QWORD *)(v2 + 296) = v41;
    sub_10002B4BC(v43, v406, (uint64_t)v364, v378);
    v46 = *(_QWORD *)(v2 + 304) + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    sub_10002B308(v46, (uint64_t)v19, 33);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v42 + 104))(v44, v392, v45);
    sub_100006710(&qword_1000FD7E8, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState);
    sub_10007DFE0();
    sub_10007DFE0();
    v47 = v42;
    v48 = *(_QWORD *)(v2 + 264);
    v49 = *(_QWORD *)(v2 + 272);
    v50 = *(_QWORD *)(v2 + 248);
    v51 = *(_QWORD *)(v2 + 256);
    v52 = *(_QWORD *)(v2 + 432);
    v449 = *(_QWORD *)(v2 + 440);
    v53 = v48 == v50 && v49 == v51;
    if (v53)
    {
      sub_10002BA68(v49);
      v65 = sub_10007EE38();
      sub_10007DA98(v65, v66);
      sub_10001DE08(v52, v449, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 16));
      v42 = v47;
    }
    else
    {
      LODWORD(v336) = sub_10001DB04(v48, v49, v50, v51);
      sub_10002B684();
      sub_10001E8A8();
      v54 = sub_10007EE38();
      sub_10007DA98(v54, v55);
      sub_10001DE08(v52, v449, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 16));
      v42 = v47;
      if ((v336 & 1) == 0)
      {
        v449 = v46;
        v56 = *(_QWORD *)(v2 + 432);
        sub_10007EE94();
        sub_10007DFE0();
        sub_10007DFE0();
        v57 = sub_10007E81C();
        if (!v53)
        {
          v61 = *(_QWORD *)(v2 + 432);
          v60 = *(_QWORD *)(v2 + 440);
          v62 = *(_QWORD *)(v2 + 408);
          v336 = *(_QWORD *)(v2 + 400);
          v63 = sub_10001DB04(v57, v56, v58, v56);
          sub_10001E034();
          sub_10001EADC();
          sub_10007E6A8(v61);
          v64 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState;
          sub_10007E48C(v62);
          sub_10007E6A8(v60);
          sub_10007F27C(v449, v336);
          if ((v63 & 1) == 0)
          {
            sub_10007E48C(*(_QWORD *)(v2 + 400));
            v19 = (v2 + 160);
            sub_10007D744();
LABEL_44:
            v43 = v2 + 304;
            swift_release(*v350);
            goto LABEL_56;
          }
LABEL_43:
          v71 = *(_QWORD *)(v2 + 400);
          v72 = *(_QWORD *)(*(_QWORD *)(v71 + *(int *)(v444 + 48)) + 16);
          sub_10007E48C(v71);
          v19 = (v2 + 160);
          sub_10007D744();
          if (v72)
            goto LABEL_44;
          v43 = v2 + 304;
          v74 = *v350;
          sub_10007FC98();
          if (!(!v53 & v75))
            sub_10007FD70();
          Hasher.init(_seed:)(v453, _swiftEmptySetSingleton[5]);
          sub_10007FBE0();
          Hasher._finalize()();
          sub_10007CEF0();
          if (!v53)
          {
            sub_10001E178();
            goto LABEL_55;
          }
          sub_10001EB2C();
          while (1)
          {
            sub_10007DA8C();
            if (v53 && (v77 & 1) != 0)
              break;
            sub_10007DB48();
            sub_10001E62C();
            if (!v53)
            {
              sub_10001E154();
LABEL_55:
              sub_10007E98C(v76);
              *(_QWORD *)(v78 + 8 * v79) = v74;
              ++_swiftEmptySetSingleton[2];
LABEL_56:
              v41 = __CocoaSet.Iterator.next()(v73);
              if (!v41)
              {
LABEL_59:
                v80 = sub_10001EBB0(*(_QWORD *)(v2 + 360));
                sub_10007F22C(v80, v81, v82, v83, v84, v85, v86, v87, v308, v322, v336, (uint64_t)v350, (uint64_t)v364, v378, v392, v406, (uint64_t)v417, v425, v432,
                  v438);
                v88 = *(_QWORD *)(v2 + 656);
                goto LABEL_61;
              }
              goto LABEL_30;
            }
          }
          __break(1u);
LABEL_88:
          __break(1u);
          goto LABEL_89;
        }
        sub_10002BA68(v56);
      }
    }
    v67 = *(_QWORD *)(v2 + 440);
    v68 = *(_QWORD *)(v2 + 408);
    sub_10007DFC8(*(_QWORD *)(v2 + 432));
    sub_10007E494(v68);
    sub_10007DFC8(v67);
    v69 = sub_10007FF48();
    sub_10007DA98(v69, v70);
    v64 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState;
    goto LABEL_43;
  }
  v88 = *(_QWORD *)(v2 + 656);
  sub_10001E194();
  v89 = sub_10001DBE4();
  sub_10007DF5C(v89, v90, (uint64_t (*)(uint64_t))sub_10004E0B0);
LABEL_61:
  v91 = sub_10001D964();
  v92 = sub_10001B1A0(v91);
  sub_10001D930();
  v453[0] = (uint64_t)v92;
  sub_10007E058(v453, (uint64_t (*)(uint64_t, uint64_t))sub_10004E1DC);
  if (v88)
  {
    sub_10007DFF8(v453[0]);
    return;
  }
  sub_10001D930();
  v64 = (uint64_t (*)(uint64_t))v453[0];
  if (v453[0] < 0 || (v453[0] & 0x4000000000000000) != 0)
  {
LABEL_89:
    v238 = sub_10001D7EC();
    v93 = _CocoaArrayWrapper.endIndex.getter(v238);
    sub_10001D9C8();
    if (!v93)
      goto LABEL_90;
LABEL_66:
    v364 = (char *)(v2 + 320);
    sub_10007F8F8();
    v378 = v2 + 336;
    v64 = *(uint64_t (**)(uint64_t))(v2 + 336);
    v94 = sub_10001E140();
    v406 = sub_10007EA04(v94);
    v96 = v95;
    sub_10001EADC();
    v392 = v96;
    v444 = *(_QWORD *)(v96 + 16);
    if (v444)
    {
      v322 = v2 + 184;
      v336 = v2 + 328;
      v350 = (_QWORD *)(v2 + 136);
      v432 = *(_QWORD *)(v2 + 512);
      v438 = v2 + 112;
      v425 = *(_QWORD *)(v2 + 392);
      sub_10002B26C(*(_QWORD *)(v2 + 384), v97, v98, *(_QWORD *)(v2 + 504));
      swift_retain();
      v99 = swift_retain();
      v100 = 0;
      while (1)
      {
        if (v100 >= *(_QWORD *)(v99 + 16))
          goto LABEL_88;
        v101 = *(_QWORD *)(v2 + 592);
        v449 = *(_QWORD *)(v2 + 552);
        v102 = *(_QWORD *)(v2 + 536);
        v19 = *(NSObject **)(v2 + 528);
        v103 = *(NSObject **)(v2 + 504);
        v104 = *(_QWORD *)(v2 + 360) + *(_QWORD *)(v2 + 584);
        v64 = (uint64_t (*)(uint64_t))v99;
        v105 = *(_QWORD *)(v99 + 8 * v100 + 32)
             + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
        sub_10002B2E0(v105, v438);
        v417 = *(void (**)(NSObject *, uint64_t, NSObject *))(v432 + 16);
        v417(v19, v105 + *(int *)(v425 + 32), v103);
        v106 = *(double *)(v104 + *(int *)(v101 + 24));
        sub_10001E69C();
        static Date.+ infix(_:_:)(v19, v106);
        v107 = *(_QWORD *)(v432 + 8);
        sub_10007FF24((uint64_t)v19);
        LOBYTE(v105) = static Date.> infix(_:_:)(v102, v449);
        sub_10002BA40();
        v108 = *(_QWORD *)(v2 + 536);
        if ((v105 & 1) != 0)
          break;
        ++v100;
        ((void (*)(_QWORD, _QWORD))v107)(*(_QWORD *)(v2 + 536), *(_QWORD *)(v2 + 504));
        v99 = (uint64_t)v64;
        if (v444 == v100)
        {
          v450 = (uint64_t (*)(void))v107;
          swift_release(v64);
          sub_10007F2D4(v109, v110, v111, v112, v113, v114, v115, v116, v308, v322, v336, (uint64_t)v350, (uint64_t)v364, v378, v392, v406);
          goto LABEL_76;
        }
      }
      v450 = (uint64_t (*)(void))v107;
      v107 = *(_QWORD *)(v2 + 512);
      v149 = *(_QWORD *)(v2 + 384);
      v150 = sub_10001D9C8();
      v158 = sub_10007F2D4(v150, v151, v152, v153, v154, v155, v156, v157, v308, v322, v336, (uint64_t)v350, (uint64_t)v364, v378, v392, v406);
      sub_10007DCF0(v158, &qword_1000FD870);
      sub_10001EA84(v149, v108, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v107 + 32));
      sub_10007F444();
LABEL_76:
      v159 = *(_QWORD *)(v2 + 504);
      v160 = *(_QWORD *)(v2 + 376);
      sub_10007D410(*(_QWORD *)(v2 + 384));
      LODWORD(v159) = sub_100005700(v160, 1, v159);
      sub_10007DCC8(v160);
      v161 = *(_QWORD *)(v2 + 568);
      if ((_DWORD)v159 == 1)
      {
        sub_10001D834(v407);
        sub_10001D834(v393);
        sub_100044AF0();
        v162 = sub_100037B50();
        v163 = sub_10002B3F8(v107);
        v439 = *(_QWORD *)(v2 + 504);
        v445 = *(_QWORD *)(v2 + 552);
        if (v163)
        {
          v164 = (uint8_t *)sub_10001D8D4(12);
          v165 = sub_10001D8D4(32);
          v453[0] = v165;
          *(_DWORD *)v164 = 136315138;
          v432 = (uint64_t)(v164 + 4);
          sub_10001E20C();
          sub_10001D7EC();
          v166 = sub_10007C1D4(v407, v393);
          sub_10001D9C8();
          sub_10001E098();
          sub_10007E898(v166, v167, v453);
          v169 = sub_10007F6E0(v168, v337);
          sub_10007EDC4((uint64_t)v169, v170, (uint64_t)(v164 + 4));
          sub_10001EBB0(v393);
          sub_10001EBB0(v407);
          sub_10001E4C0();
          sub_10001E18C((void *)&_mh_execute_header, v107, v162, "Remaining purge candidates %s generated task wake times in the past.  Ending inactive asset purge task", v164);
          sub_10001DBB8(v165);
          sub_10001D790(v165);
          sub_10001D790((uint64_t)v164);
          sub_10001D9C8();
          sub_10001E098();
        }
        else
        {
          sub_10007D408(v393);
          sub_10007D408(v407);
        }

        sub_10007FD50(v445, v439, v201, v202, v203, v204, v205, v206, v309, v323, (uint64_t)v337, v351, v365, v379, v393, v407, (uint64_t)v417, v425, v432,
          v439,
          v445,
          v450);
        sub_10007FD50(*(_QWORD *)(v2 + 544), *(_QWORD *)(v2 + 504), v207, v208, v209, v210, v211, v212, v312, v326, v340, v354, v368, v382, v396, v409, v419, v427, v434,
          v441,
          v447,
          v452);
      }
      else
      {
        v171 = *(_QWORD *)(v2 + 552);
        v172 = *(_QWORD *)(v2 + 520);
        v173 = *(_QWORD *)(v2 + 504);
        v174 = *(_QWORD *)(*(_QWORD *)(v2 + 560) - 8);
        v175 = sub_10001D828(*(_QWORD *)(v174 + 64));
        sub_10001E0E8(v175, v161, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v174 + 16));
        v176 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v417)(v172, v171, v173);
        Logger.logObject.getter(v176);
        v177 = sub_10007EE4C();
        if (os_log_type_enabled(v103, v177))
        {
          v178 = *(_QWORD *)(v2 + 384);
          v179 = *(_QWORD *)(v2 + 368);
          v180 = (uint8_t *)sub_10001D8D4(12);
          *(_DWORD *)v180 = 134217984;
          v181 = sub_10002B2E0(v178, v323);
          sub_10007DFEC(v181, v182, &qword_1000FD870);
          sub_10007D3D0(v179);
          if (v53)
          {
            sub_10002AD5C(*(_QWORD *)(v2 + 384), &qword_1000FD870);
            __break(1u);
            return;
          }
          v183 = sub_10007F46C();
          v185 = v184;
          sub_10007FB4C(v183, v186, v187, v188, v189, v190, v191, v192, v309, v323, (uint64_t)v337, v351, v365, v379, v393, v407, (uint64_t)v417, v425, v432,
            v438,
            v444,
            (uint64_t (*)(uint64_t, uint64_t))v450);
          *(_QWORD *)(v2 + 320) = v185;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v367, v339);
          sub_10007F474();
          sub_10001E18C((void *)&_mh_execute_header, v103, v177, "Additional inactive assets need purging, next task wake in %f seconds", v180);
          sub_10001D790((uint64_t)v180);

        }
        else
        {

          v213 = sub_10002BE5C();
          v193 = sub_10007FD50(v213, v214, v215, v216, v217, v218, v219, v220, v309, v323, (uint64_t)v337, v351, v365, v379, v393, v407, (uint64_t)v417, v425, v432,
                   v438,
                   v444,
                   v450);
        }
        v221 = sub_10007DBF8(v193, v194, v195, v196, v197, v198, v199, v200, v311, v325, v339, v353, v367, v381, v395);
        sub_10007F2D4(v221, v222, v223, v224, v225, v226, v227, v228, v313, v327, v341, v355, v369, v383, v397, v408);
        sub_10007FEBC();
        v229 = (*(uint64_t (**)(uint64_t))(v174 + 8))(v175);
        sub_10007FB4C(v229, v230, v231, v232, v233, v234, v235, v236, v314, v328, v342, v356, v370, v384, v398, v410, v418, v426, v433,
          v440,
          v446,
          v451);
        sub_10007F474();
        sub_10002B70C();
      }
      v237 = *(_QWORD *)(v2 + 384);
      sub_10002B2E0(v237, (uint64_t)v350);
      sub_10007D410(v237);
      sub_10007DA38();
      goto LABEL_94;
    }
    sub_10007EFE8();
    sub_10002BF4C();
    v117 = sub_10007E920(v19);
    v125 = *(_QWORD *)(v2 + 512);
    v444 = *(_QWORD *)(v2 + 504);
    v449 = *(_QWORD *)(v2 + 552);
    if ((_DWORD)v117)
    {
      v438 = v2 + 312;
      v126 = (uint8_t *)sub_10001D8D4(12);
      v127 = sub_10001D8D4(32);
      v453[0] = v127;
      *(_DWORD *)v126 = 136315138;
      v432 = (uint64_t)(v126 + 4);
      sub_10002B2E0(v378, v2 + 208);
      v128 = sub_10001E1D8();
      sub_100006710(&qword_1000FB768, type metadata accessor for InferenceProviderAsset);
      v129 = sub_10001DBE4();
      v130 = sub_10007ED78(v129, v128);
      sub_10001DA38();
      sub_10007D81C(v130, v131, v453);
      *(_QWORD *)(v2 + 312) = v132;
      sub_10001EB6C(v2 + 312, (uint64_t)v364, (uint64_t)(v126 + 4));
      sub_10001E420();
      sub_10007FD44();
      sub_10001E18C(v133, v134, v135, v136, v126);
      sub_10001DBB8(v127);
      sub_10001D790(v127);
      v117 = sub_10001D790((uint64_t)v126);
    }
    sub_10007DBF8(v117, v118, v119, v120, v121, v122, v123, v124, v308, v322, v336, (uint64_t)v350, (uint64_t)v364, v378, v392);

    sub_10007F2D4(v137, v138, v139, v140, v141, v142, v143, v144, v310, v324, v338, v352, v366, v380, v394, v406);
    (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v449, v444);
    sub_10007D924();
    v145 = sub_10007D8A4();
    goto LABEL_93;
  }
  v93 = *(_QWORD *)(v453[0] + 16);
  if (v93)
    goto LABEL_66;
LABEL_90:
  v239 = sub_10001D9C8();
  Logger.logObject.getter(v239);
  v240 = sub_10001E9D0();
  if (sub_100039E20(v240))
  {
    v241 = (_WORD *)sub_10001D8D4(2);
    sub_10004478C(v241);
    sub_100039E4C((void *)&_mh_execute_header, v242, v243, "No more inactive assets need purging");
    sub_10001D790((uint64_t)v64);
  }
  sub_10007D95C();
  sub_10007D784(v93);
  sub_10007D530();
  v145 = sub_10007D8C0();
LABEL_93:
  sub_100005630(v145, v146, v147, v148);
LABEL_94:
  sub_10007D6E8();
  sub_10002B528();
  sub_10002B4C4();
  sub_10002B70C();
  sub_10002BDF0();
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  v244 = sub_10002B504();
  v252 = sub_10007ED40(v244, v245, v246, v247, v248, v249, v250, v251, v308, v322, v336, (uint64_t)v350, (uint64_t)v364, v378, v392);
  v260 = sub_10007EDA8(v252, v253, v254, v255, v256, v257, v258, v259, v315, v329, v343, v357, v371, v385, v399, v406);
  v268 = sub_10007EAD0(v260, v261, v262, v263, v264, v265, v266, v267, v316, v330, v344, v358, v372, v386, v400, v411, (uint64_t)v417);
  v276 = sub_10007E470(v268, v269, v270, v271, v272, v273, v274, v275, v317, v331, v345, v359, v373, v387, v401, v412, v420, v425);
  v284 = sub_10007DE6C(v276, v277, v278, v279, v280, v281, v282, v283, v318, v332, v346, v360, v374, v388, v402, v413, v421, v428, v432);
  v292 = sub_10007DE5C(v284, v285, v286, v287, v288, v289, v290, v291, v319, v333, v347, v361, v375, v389, v403, v414, v422, v429, v435,
           v438);
  v300 = sub_10007DE4C(v292, v293, v294, v295, v296, v297, v298, v299, v320, v334, v348, v362, v376, v390, v404, v415, v423, v430, v436,
           v442,
           v444);
  sub_10007DEA4(v300, v301, v302, v303, v304, v305, v306, v307, v321, v335, v349, v363, v377, v391, v405, v416, v424, v431, v437,
    v443,
    v448,
    v449);
  sub_10007E018(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_100068E1C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10001DD0C();
  sub_10001E0D8();
  sub_10001EA4C(v2);
  *(_QWORD *)(v0 + 632) = v1;
  swift_task_dealloc(v3);
  if (v1)
    sub_10001EBB8();
  sub_10007D53C();
  sub_10001E10C();
  return sub_10007D24C(v4, v5, v6);
}

#error "100068EFC: call analysis failed (funcsize=646)"

uint64_t sub_100069918()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  sub_100037EFC();
  sub_10001E538();
  sub_10001EA4C(v2);
  *(_QWORD *)(v1 + 648) = v0;
  v4 = swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10001EBB8();
  sub_10007D78C(v4, &qword_1000FD7E0);
  sub_10007D020();
  sub_10007E854();
  return sub_10001D6DC();
}

#error "100069A1C: call analysis failed (funcsize=646)"

uint64_t sub_10006A438()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 664));
  sub_10001D9C0();
  sub_10001D7B8();
  return sub_10001D674();
}

void sub_10006A474()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  void (*v41)(uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  void (*v52)(_QWORD);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  uint64_t (*v87)(uint64_t, _QWORD *);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _BOOL4 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint8_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  NSObject *v122;
  os_log_type_t v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  NSObject *v147;
  os_log_type_t v148;
  _BOOL4 v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint8_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  os_log_type_t v175;
  uint64_t v176;
  uint64_t v177;
  uint8_t *v178;
  uint64_t v179;
  uint64_t v180;
  double v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  os_log_type_t v205;
  _WORD *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  char *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  _QWORD *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  _QWORD *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t (*v351)(uint64_t, uint64_t, uint64_t);
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  _QWORD *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  _QWORD *v382;
  uint64_t v383[11];

  v2 = v0[45];
  if ((*(_QWORD *)(v2 + 120) & 0xC000000000000001) == 0)
  {
    v66 = v0[82];
    sub_10001E900();
    v67 = sub_10001E338();
    v68 = sub_10007E5A8(v67, v2, (uint64_t (*)(uint64_t))sub_10004E0B0);
    goto LABEL_36;
  }
  sub_10001D834(v2);
  sub_10001E338();
  v371 = sub_10007E814();
  v3 = sub_10007DADC();
  if (!v3)
  {
    v376 = _swiftEmptySetSingleton;
    goto LABEL_35;
  }
  v11 = v3;
  v12 = (uint64_t)(v0 + 20);
  v351 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(v0 + 33);
  v359 = (uint64_t)(v0 + 31);
  v273 = (uint64_t)(v0 + 35);
  v284 = (uint64_t)(v0 + 29);
  v339 = (uint64_t)(v0 + 37);
  v13 = v0 + 38;
  v1 = v0[53];
  v380 = v0[49];
  LODWORD(v317) = enum case for LoadState.loaded(_:);
  v306 = (_QWORD *)sub_10001E1D8();
  v376 = _swiftEmptySetSingleton;
  v295 = (char *)&type metadata for Swift.AnyObject + 8;
  v365 = (uint64_t)(v0 + 20);
  v328 = v0 + 38;
  do
  {
    v14 = v0[55];
    v15 = v0[52];
    v0[37] = v11;
    sub_10002B4BC((uint64_t)v13, v339, (uint64_t)v295, (uint64_t)v306);
    v16 = v12;
    v17 = v0[38] + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    sub_10002B308(v17, v16, 33);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 104))(v14, v317, v15);
    sub_100006710(&qword_1000FD7E8, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState);
    v18 = v1;
    sub_10007DFE0();
    sub_10007DFE0();
    v19 = v0[33];
    v20 = v0[31];
    v21 = v0[54];
    v22 = v0[55];
    v23 = v19 == v20 && v0[34] == v0[32];
    if (v23)
    {
      sub_10002BA68(v0[34]);
      v46 = sub_10007F9BC();
      sub_10007DA98(v46, v47);
      v48 = sub_10007FB5C();
      sub_10001DE08(v48, v49, v50);
      v0 = v382;
    }
    else
    {
      v24 = sub_10001DB04(v19, v0[34], v20, v0[32]);
      v25 = v22;
      v26 = v17;
      v27 = v24;
      sub_10001E8A8();
      sub_10001E4C0();
      v28 = sub_10007EE38();
      sub_10007DA98(v28, v29);
      sub_10001DE08(v21, v25, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
      v0 = v382;
      if ((v27 & 1) == 0)
      {
        v30 = v382[54];
        v31 = v382[52];
        sub_10007EE94();
        sub_10007FFB4();
        v32 = v30;
        sub_10007FFB4();
        v33 = sub_10007E81C();
        if (!v23 || v30 != v31)
        {
          v36 = v382[55];
          v38 = v382[51];
          v37 = v382[52];
          v39 = v382[50];
          v40 = sub_10001DB04(v33, v32, v34, v31);
          sub_10001EADC();
          sub_10001E034();
          v41 = *(void (**)(uint64_t))(v18 + 8);
          v42 = sub_10007F994();
          v41(v42);
          v43 = v38;
          v1 = v18;
          v44 = (uint64_t)type metadata accessor for InferenceProviderAsset.ManagerOwnedState;
          sub_10007E48C(v43);
          ((void (*)(uint64_t, uint64_t))v41)(v36, v37);
          v45 = v39;
          v0 = v382;
          sub_10007F27C(v26, v45);
          if ((v40 & 1) == 0)
          {
            sub_10007E48C(v382[50]);
            v12 = v365;
            sub_10002BB48();
            v13 = v328;
LABEL_18:
            swift_release(*v13);
            goto LABEL_30;
          }
          goto LABEL_17;
        }
        sub_10002BA68(v30);
      }
    }
    v51 = v0[51];
    v52 = *(void (**)(_QWORD))(v1 + 8);
    ((void (*)(_QWORD, _QWORD))v52)(v0[54], v0[52]);
    sub_10007E494(v51);
    v53 = sub_10002BE5C();
    v52(v53);
    v54 = sub_10007EE38();
    sub_10007DA98(v54, v55);
    v44 = (uint64_t)type metadata accessor for InferenceProviderAsset.ManagerOwnedState;
LABEL_17:
    v56 = v0[50];
    v57 = *(_QWORD *)(*(_QWORD *)(v56 + *(int *)(v380 + 48)) + 16);
    sub_10007E48C(v56);
    v12 = v365;
    sub_10002BB48();
    v13 = v328;
    if (v57)
      goto LABEL_18;
    v59 = *v328;
    sub_10007EA38();
    if (!(!v23 & v61))
    {
      sub_10007FD70();
      v60 = _swiftEmptySetSingleton;
    }
    v376 = v60;
    Hasher.init(_seed:)(v383, v60[5]);
    sub_10008B000();
    Hasher._finalize()();
    sub_10007CEF0();
    if (!v23)
    {
      sub_10001E178();
      goto LABEL_29;
    }
    sub_10001EB2C();
    do
    {
      sub_10007DA8C();
      if (v23 && (v63 & 1) != 0)
      {
        __break(1u);
LABEL_64:
        __break(1u);
        goto LABEL_65;
      }
      sub_10007DB48();
      sub_10001E62C();
    }
    while (v23);
    sub_10001E154();
LABEL_29:
    sub_10007DC38(v62);
    *(_QWORD *)(v64 + 8 * v65) = v59;
    sub_10007DC88();
LABEL_30:
    v11 = __CocoaSet.Iterator.next()(v58);
  }
  while (v11);
LABEL_35:
  v69 = v0[45];
  sub_10007EAB4(0, v4, v5, v6, v7, v8, v9, v10, v273, v284, (uint64_t)v295, (uint64_t)v306, v317, (uint64_t)v328, v339, (uint64_t)v351, v359, v365, v371);
  sub_10001EBB0(v69);
  v66 = v0[82];
  v68 = (uint64_t)v376;
LABEL_36:
  v70 = swift_bridgeObjectRetain(v68);
  v71 = sub_10001B1A0(v70);
  sub_10001D930();
  v383[0] = (uint64_t)v71;
  sub_10007E058(v383, (uint64_t (*)(uint64_t, uint64_t))sub_10004E1DC);
  if (v66)
  {
    sub_10007DFF8(v383[0]);
    return;
  }
  sub_10001D930();
  v44 = v383[0];
  if (v383[0] < 0 || (v383[0] & 0x4000000000000000) != 0)
  {
LABEL_65:
    v203 = sub_10001D7EC();
    v72 = _CocoaArrayWrapper.endIndex.getter(v203);
    sub_10001D9C8();
    if (!v72)
      goto LABEL_66;
LABEL_41:
    sub_10007F8F8();
    v328 = v0 + 42;
    v73 = sub_10001DBE4();
    v74 = sub_10007EA04(v73);
    v76 = v75;
    sub_10001DA38();
    v376 = *(_QWORD **)(v76 + 16);
    if (!v376)
    {
      sub_10007EFE8();
      sub_10002BF4C();
      v105 = sub_10007E920(v1);
      v106 = v0[69];
      v108 = v0[63];
      v107 = v0[64];
      if (v105)
      {
        v377 = v0[63];
        v366 = (uint64_t)(v0 + 39);
        v340 = v74;
        v372 = v0[69];
        v109 = (uint8_t *)sub_10001D8D4(12);
        v110 = sub_10001D8D4(32);
        v383[0] = v110;
        *(_DWORD *)v109 = 136315138;
        sub_10002B2E0((uint64_t)v328, (uint64_t)(v0 + 26));
        v111 = sub_10001E1D8();
        sub_100006710(&qword_1000FB768, type metadata accessor for InferenceProviderAsset);
        v112 = v107;
        v114 = v113;
        v115 = sub_10001DBE4();
        v116 = Set.description.getter(v115, v111, v114);
        v118 = v117;
        sub_10001DA38();
        sub_10007D81C(v116, v119, v383);
        v0[39] = v120;
        sub_10001EB6C((uint64_t)(v0 + 39), (uint64_t)(v0 + 40), (uint64_t)(v109 + 4));
        v0 = v382;
        swift_bridgeObjectRelease(v118);
        sub_10007FD44();
        sub_10001E18C(v121, v122, v123, v124, v109);
        sub_10001DBB8(v110);
        sub_10001D790(v110);
        sub_10001D790((uint64_t)v109);

        v133 = sub_10007F66C(v125, v126, v127, v128, v129, v130, v131, v132, v273, v284, (uint64_t)v295, (uint64_t)v306, v317, (uint64_t)v328, v340, (uint64_t)v351, (uint64_t)(v109 + 4), v366, v372,
                 v377,
                 v76);
        sub_10007DBF8(v133, v134, v135, v136, v137, v138, v139, v140, v274, v285, v296, v307, v318, v329, v341);
        (*(void (**)(uint64_t, _QWORD *))(v112 + 8))(v371, v376);
      }
      else
      {

        sub_10007D970();
        sub_10001D930();
        (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v106, v108);
      }
      sub_10007D924();
      v190 = sub_10007D8A4();
      goto LABEL_69;
    }
    v284 = (uint64_t)(v0 + 40);
    v295 = (char *)(v0 + 23);
    v306 = v0 + 41;
    v317 = (uint64_t)(v0 + 17);
    v365 = v0[64];
    v371 = (uint64_t)(v0 + 14);
    v359 = v0[49];
    sub_10002B26C(v0[48], v77, v78, v0[63]);
    v339 = v74;
    sub_10002B400();
    sub_10001E8B0();
    v79 = 0;
    v380 = v76;
    v0 = v382;
    while (1)
    {
      if (v79 >= *(_QWORD *)(v76 + 16))
        goto LABEL_64;
      v80 = v382[74];
      v81 = v382[69];
      v82 = v382[67];
      v83 = v382[66];
      v1 = v382[63];
      v84 = v382[45] + v382[73];
      v85 = *(_QWORD *)(v76 + 8 * v79 + 32)
          + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
      sub_10002B2E0(v85, v371);
      v351 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v365 + 16);
      v351(v83, v85 + *(int *)(v359 + 32), v1);
      v86 = *(double *)(v84 + *(int *)(v80 + 24));
      sub_10001E8B0();
      static Date.+ infix(_:_:)(v83, v86);
      v87 = *(uint64_t (**)(uint64_t, _QWORD *))(v365 + 8);
      sub_10007E978(v83);
      v44 = static Date.> infix(_:_:)(v82, v81);
      v88 = sub_10007D970();
      v96 = v382[67];
      if ((v44 & 1) != 0)
        break;
      ++v79;
      v97 = v87(v382[67], (_QWORD *)v382[63]);
      v76 = v380;
      if (v376 == (_QWORD *)v79)
      {
        sub_10007DBF8(v97, v98, v99, v100, v101, v102, v103, v104, v273, v284, (uint64_t)v295, (uint64_t)v306, v317, (uint64_t)v328, v339);
        sub_10007D970();
        v0 = v382;
        goto LABEL_50;
      }
    }
    v80 = v382[63];
    v141 = v382[64];
    v44 = v382[48];
    sub_10007DBF8(v88, v89, v90, v91, v92, v93, v94, v95, v273, v284, (uint64_t)v295, (uint64_t)v306, v317, (uint64_t)v328, v339);
    v76 = v380;
    v142 = sub_10007D970();
    sub_10007DFD8(v142, &qword_1000FD870);
    sub_10007E954(v44, v96, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v141 + 32));
    sub_10007DABC(v44);
LABEL_50:
    v143 = sub_10007FF2C();
    sub_10007EB4C(v143);
    v144 = sub_100005700(v44, 1, v80);
    sub_10007E4D8();
    v145 = v0[71];
    if (v144 == 1)
    {
      sub_10001D834(v339);
      v146 = sub_10001D834(v76);
      v147 = Logger.logObject.getter(v146);
      v148 = static os_log_type_t.fault.getter();
      v149 = sub_10002B3F8(v147);
      v150 = v0[69];
      v151 = (_QWORD *)v0[63];
      if (v149)
      {
        v371 = v150;
        v376 = v151;
        v152 = v76;
        v153 = (uint8_t *)sub_10001D8D4(12);
        v154 = sub_10001D8D4(32);
        v383[0] = v154;
        sub_10007F91C(4.8149e-34);
        v365 = v155;
        sub_10001E69C();
        sub_10002B400();
        v156 = sub_10007FF38(v339);
        v158 = v157;
        sub_10002BA40();
        sub_10001D930();
        sub_1000102C0(v156, v158, v383);
        v160 = sub_10007F6E0(v159, v306);
        sub_10007E4D0((uint64_t)v160, v161, v365);
        sub_10001E034();
        sub_10001EBB0(v339);
        sub_10001EBB0(v152);
        sub_10001E18C((void *)&_mh_execute_header, v147, v148, "Remaining purge candidates %s generated task wake times in the past.  Ending inactive asset purge task", v153);
        sub_10001DBB8(v154);
        sub_10001D790(v154);
        sub_10001D790((uint64_t)v153);

        sub_10002BA40();
        sub_10001D930();
        v162 = v371;
        v163 = v376;
      }
      else
      {

        sub_10007D408(v339);
        sub_10007D408(v76);
        v162 = sub_10007F54C();
      }
      v87(v162, v163);
      v0 = v382;
      v87(v382[68], (_QWORD *)v382[63]);
    }
    else
    {
      v164 = *(_QWORD *)(v0[70] - 8);
      v165 = sub_10001D828(*(_QWORD *)(v164 + 64));
      v382 = (_QWORD *)v164;
      sub_10001DE08(v165, v145, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v164 + 16));
      v166 = sub_10001E4C8();
      v174 = sub_10007FD04(v166, v167, v168, v169, v170, v171, v172, v173, v273, v284, (uint64_t)v295, (uint64_t)v306, v317, (uint64_t)v328, v339, v351);
      Logger.logObject.getter(v174);
      v175 = sub_10002B470();
      if (sub_10007F250(v175))
      {
        v176 = v0[48];
        v177 = v0[46];
        v178 = (uint8_t *)sub_10001D8D4(12);
        *(_DWORD *)v178 = 134217984;
        sub_10002B2E0(v176, v297);
        sub_100048DB4(v176, v177, &qword_1000FD870);
        sub_10007D3D0(v177);
        if (v23)
        {
          sub_10002AD5C(v0[48], &qword_1000FD870);
          __break(1u);
          return;
        }
        v179 = v0[65];
        v180 = v0[46];
        v181 = Date.timeIntervalSince(_:)(v179);
        sub_10007E978(v180);
        *((double *)v0 + 40) = v181;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v286, v308);
        sub_10007E978(v179);
        sub_10001E18C((void *)&_mh_execute_header, v164, v175, "Additional inactive assets need purging, next task wake in %f seconds", v178);
        sub_10001D790((uint64_t)v178);

      }
      else
      {
        v180 = v0[65];

        v182 = sub_10007F330(v180);
      }
      v194 = sub_10007DBF8(v182, v183, v184, v185, v186, v187, v188, v189, v275, v286, v297, v308, v319, v330, v342);
      sub_10007F66C(v194, v195, v196, v197, v198, v199, v200, v201, v276, v287, v298, v309, v320, v331, v343, v352, v359, v365, v371,
        (uint64_t)v376,
        v380);
      sub_10007FEBC();
      (*(void (**)(uint64_t))(v164 + 8))(v165);
      sub_10007F330(v180);
      sub_10007F330(v164);
      sub_10002BDF0();
    }
    v202 = v0[48];
    sub_10002B2E0(v202, v317);
    sub_10007D410(v202);
    sub_10007DA38();
    goto LABEL_70;
  }
  v72 = *(_QWORD *)(v383[0] + 16);
  if (v72)
    goto LABEL_41;
LABEL_66:
  v204 = sub_10001D9C8();
  Logger.logObject.getter(v204);
  v205 = sub_10001E9D0();
  if (sub_100039E20(v205))
  {
    v206 = (_WORD *)sub_10001D8D4(2);
    sub_10004478C(v206);
    sub_100039E4C((void *)&_mh_execute_header, v207, v208, "No more inactive assets need purging");
    sub_10001D790(v44);
  }
  sub_10007D95C();
  sub_10007D784(v72);
  sub_10007D530();
  v190 = sub_10007D8C0();
LABEL_69:
  sub_100005630(v190, v191, v192, v193);
LABEL_70:
  sub_10007D6E8();
  sub_10002B528();
  sub_10002B4C4();
  sub_10002B70C();
  sub_10002BDF0();
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  v209 = sub_10002B504();
  v217 = sub_10007ED40(v209, v210, v211, v212, v213, v214, v215, v216, v273, v284, (uint64_t)v295, (uint64_t)v306, v317, (uint64_t)v328, v339);
  v225 = sub_10007EDA8(v217, v218, v219, v220, v221, v222, v223, v224, v277, v288, v299, v310, v321, v332, v344, (uint64_t)v351);
  v233 = sub_10007EAD0(v225, v226, v227, v228, v229, v230, v231, v232, v278, v289, v300, v311, v322, v333, v345, v353, v359);
  v241 = sub_10007E470(v233, v234, v235, v236, v237, v238, v239, v240, v279, v290, v301, v312, v323, v334, v346, v354, v360, v365);
  v249 = sub_10007DE6C(v241, v242, v243, v244, v245, v246, v247, v248, v280, v291, v302, v313, v324, v335, v347, v355, v361, v367, v371);
  v257 = sub_10007DE5C(v249, v250, v251, v252, v253, v254, v255, v256, v281, v292, v303, v314, v325, v336, v348, v356, v362, v368, v373,
           (uint64_t)v376);
  v265 = sub_10007DE4C(v257, v258, v259, v260, v261, v262, v263, v264, v282, v293, v304, v315, v326, v337, v349, v357, v363, v369, v374,
           v378,
           v380);
  sub_10007DEA4(v265, v266, v267, v268, v269, v270, v271, v272, v283, v294, v305, v316, v327, v338, v350, v358, v364, v370, v375,
    v379,
    v381,
    (uint64_t)v382);
  sub_10007E018((uint64_t (*)(void))v0[1]);
}

#error "10006B040: call analysis failed (funcsize=648)"

void sub_10006BA5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char isCancelled;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_purgeInactiveAssetsTask;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_purgeInactiveAssetsTask);
  if (v2)
  {
    v3 = swift_retain();
    isCancelled = swift_task_isCancelled(v3);
    swift_release(v2);
    v5 = *(_QWORD *)(v0 + v1);
    *(_QWORD *)(v0 + v1) = 0;
    swift_release(v5);
    if ((isCancelled & 1) == 0)
    {
      sub_10004DCB4();
      v7 = v6;
      if ((unint64_t)v6 >> 62)
      {
        if (v6 >= 0)
          v6 &= 0xFFFFFFFFFFFFFF8uLL;
        v8 = _CocoaArrayWrapper.endIndex.getter(v6);
      }
      else
      {
        v8 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease(v7);
      if (v8)
        sub_100050960();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10006BB04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  char v12;
  char *v13;
  uint64_t v14;
  char v15;
  uint64_t v17;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100080D70();
  v12 = v11;
  sub_10002AC98(a1, (uint64_t)v10, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  if ((v12 & 1) != 0)
  {
    v13 = &v10[*(int *)(v8 + 32)];
    sub_100006710(&qword_1000FD888, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    v15 = dispatch thunk of static Comparable.< infix(_:_:)(v7, v13, v4, v14) ^ 1;
  }
  else
  {
    v15 = 0;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_10002ACC4((uint64_t)v10, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  return v15 & 1;
}

uint64_t sub_10006BC5C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1000FD43C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10001D668;
  return sub_100059C3C();
}

uint64_t sub_10006BCA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  char *v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  void (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;

  sub_10001D810();
  v48 = v3;
  v49 = v4;
  v6 = v5;
  v7 = sub_10002BA0C();
  sub_10007F624();
  __chkstk_darwin(v8);
  sub_10001E2C0();
  __chkstk_darwin(v9);
  sub_10007F6F0();
  v10 = sub_10007A76C();
  result = sub_1000791EC(&v45, v6, 0, 1, v10);
  v12 = result;
  v13 = *(_QWORD *)(v6 + 16);
  v14 = v45;
  if (v45 == v13)
    return sub_10007F0D4();
  if ((v45 & 0x8000000000000000) != 0)
    goto LABEL_19;
  if (v13 >= v45)
  {
    v44 = (*(unsigned __int8 *)(v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80);
    sub_10007DCD8();
    sub_10001D7B8();
    v19 = sub_100079C44(v15, v16, v17, (2 * v14) | 1, v18);
    v46 = v12;
    v47 = v19;
    sub_1000C1034(v14, v6);
    v43 = v23;
    v24 = v12;
    if (v21 == v22 >> 1)
    {
      swift_unknownObjectRelease(v20);
      sub_10001E420();
      return sub_10007F0D4();
    }
    v25 = v21;
    v39 = v20;
    v40 = v24;
    v41 = v6;
    v26 = v22 >> 1;
    result = sub_10002B400();
    v42 = v26;
    while (1)
    {
      if (v25 >= v26)
      {
        __break(1u);
LABEL_19:
        __break(1u);
        break;
      }
      v27 = *(_QWORD *)(v0 + 72);
      v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 16);
      v28(v2, v43 + v27 * v25, v7);
      v29 = (char *)v47 + v44;
      v30 = v47[2];
      if (v46)
      {
        sub_10001E194();
        sub_1000C1208();
        v32 = v31;
        sub_10001D9C0();
        if ((v32 & 1) == 0)
          goto LABEL_15;
      }
      else if (v30)
      {
        do
        {
          v28(v1, (uint64_t)v29, v7);
          sub_100006710(&qword_1000FD9B0, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
          v33 = sub_10007F994();
          v36 = dispatch thunk of static Equatable.== infix(_:_:)(v33, v34, v7, v35);
          v37 = sub_100080068();
          v38(v37);
          if ((v36 & 1) != 0)
            goto LABEL_15;
          v29 += v27;
        }
        while (--v30);
      }
      sub_1000C1CFC();
LABEL_15:
      ++v25;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v7);
      v26 = v42;
      if (v25 == v42)
      {
        swift_unknownObjectRelease(v39);
        swift_bridgeObjectRelease(v41);
        swift_release(v40);
        return sub_10007F0D4();
      }
    }
  }
  __break(1u);
  return result;
}

void sub_10006BF00(uint64_t a1)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  __int128 v61;
  __int128 v62;
  unsigned __int8 v63;
  __int128 v64;

  sub_10007A76C();
  sub_10007E854();
  sub_1000795BC(v2, v3, v4, 1, v5);
  v7 = v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (v58 != v8)
  {
    if ((v58 & 0x8000000000000000) != 0)
      goto LABEL_39;
    if (v8 < v58)
    {
LABEL_40:
      __break(1u);
      return;
    }
    sub_10001DBE4();
    sub_10001D7B8();
    v13 = sub_100079C44(v9, v10, v11, (2 * v58) | 1, v12);
    v59 = v7;
    v60 = v13;
    v14 = sub_10007F9BC();
    sub_1000C109C(v14, v15);
    v55 = v18;
    if (v16 == v17 >> 1)
    {
      sub_10007FEFC();
      sub_10001DA38();
      return;
    }
    v19 = v16;
    v52 = a1;
    v53 = v7;
    v20 = v17 >> 1;
    sub_10007E904();
    v21 = v55;
    v56 = v20;
LABEL_7:
    if (v19 >= v20)
    {
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v22 = v21 + 40 * v19;
    v23 = *(_OWORD *)v22;
    v24 = *(_OWORD *)(v22 + 16);
    v63 = *(_BYTE *)(v22 + 32);
    v61 = v23;
    v62 = v24;
    v64 = *(_OWORD *)v22;
    v25 = *((_QWORD *)&v24 + 1);
    v26 = v13[2];
    if (v59)
    {
      sub_10007CC70((uint64_t)&v64);
      sub_10001E4D4();
      sub_10002B400();
      sub_1000C13C0((uint64_t)&v61, (uint64_t)(v13 + 4), v26, (_QWORD *)(v59 + 16), v59 + 32, v27, v28, v29);
      v31 = v30;
      v33 = v32;
      sub_10001D930();
      if ((v31 & 1) == 0)
      {
        sub_10007CC98((uint64_t)&v64);
        sub_100006C48();
        goto LABEL_34;
      }
      goto LABEL_32;
    }
    if (!v26)
    {
LABEL_31:
      sub_10007CC70((uint64_t)&v64);
      sub_10001E4D4();
      v33 = 0;
      v21 = v55;
LABEL_32:
      v20 = v56;
      sub_1000C1D20(&v61, v33);
      sub_10007CC98((uint64_t)&v64);
      sub_100006C48();
      v13 = v60;
      goto LABEL_35;
    }
    v34 = v62;
    v35 = v64;
    v54 = v13;
    v36 = (unsigned __int8 *)(v13 + 8);
    v57 = v63;
    while (1)
    {
      v37 = *((_QWORD *)v36 - 4);
      v38 = *((_QWORD *)v36 - 3);
      v40 = *((_QWORD *)v36 - 2);
      v39 = *((_QWORD *)v36 - 1);
      v41 = *v36;
      v42 = v37 == (_QWORD)v35 && v38 == *((_QWORD *)&v35 + 1);
      if (!v42 && (sub_10001DB04(v37, v38, v35, *((uint64_t *)&v35 + 1)) & 1) == 0)
        goto LABEL_30;
      if (!v39)
        break;
      if (!v25)
        goto LABEL_30;
      if (v40 != v34 || v39 != v25)
      {
        if ((sub_10001DB04(v40, v39, v34, v25) & 1) == 0)
          goto LABEL_30;
LABEL_27:
        if (((v41 ^ v57) & 1) == 0)
          goto LABEL_33;
        goto LABEL_30;
      }
      if (v41 == (v57 & 1))
      {
LABEL_33:
        v13 = v54;
        v21 = v55;
LABEL_34:
        v20 = v56;
LABEL_35:
        if (++v19 == v20)
        {
          sub_10007FEFC();
          v44 = swift_bridgeObjectRelease(v52);
          sub_10007F4B0(v44, v45, v46, v47, v48, v49, v50, v51, v52, v53);
          return;
        }
        goto LABEL_7;
      }
LABEL_30:
      v36 += 40;
      if (!--v26)
        goto LABEL_31;
    }
    if (v25)
      goto LABEL_30;
    goto LABEL_27;
  }
}

void sub_10006C19C(int64_t a1)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[3];

  v2 = (unint64_t *)sub_10007A76C();
  sub_100079834(v33, a1, 0, 1, v2);
  v4 = v3;
  v5 = (unint64_t)a1 >> 62;
  if (!((unint64_t)a1 >> 62))
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v7 = v33[0];
    if (v33[0] == v6)
    {
      swift_bridgeObjectRetain(a1);
LABEL_4:
      swift_bridgeObjectRelease(a1);
      return;
    }
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if ((v33[0] & 0x8000000000000000) == 0)
      goto LABEL_6;
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (a1 < 0)
    v31 = a1;
  else
    v31 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v6 = _CocoaArrayWrapper.endIndex.getter(v31);
  swift_bridgeObjectRelease(a1);
  v7 = v33[0];
  if (v33[0] == v6)
  {
    swift_bridgeObjectRetain(a1);
    sub_10001B668();
    swift_bridgeObjectRelease(a1);
    goto LABEL_4;
  }
  if ((v33[0] & 0x8000000000000000) != 0)
    goto LABEL_44;
  swift_bridgeObjectRetain(a1);
  v32 = _CocoaArrayWrapper.endIndex.getter(v31);
  swift_bridgeObjectRelease(a1);
  if (v32 < 0)
  {
LABEL_49:
    __break(1u);
    return;
  }
  swift_bridgeObjectRetain(a1);
  v8 = _CocoaArrayWrapper.endIndex.getter(v31);
  swift_bridgeObjectRelease(a1);
LABEL_6:
  if (v8 < v7)
  {
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if ((a1 & 0xC000000000000001) != 0 && v7)
  {
    type metadata accessor for InferenceProviderAsset(0);
    v9 = 0;
    do
    {
      v10 = v9 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v9);
      v9 = v10;
    }
    while (v7 != v10);
  }
  if (v5)
  {
    if (a1 < 0)
      v15 = a1;
    else
      v15 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v11 = _CocoaArrayWrapper.subscript.getter(0, v7, v15);
    v12 = v16;
    v14 = v17;
    v13 = v18;
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v11 = a1 & 0xFFFFFFFFFFFFFF8;
    v12 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
    v13 = (2 * v7) | 1;
    swift_bridgeObjectRetain(a1);
    v14 = 0;
  }
  v19 = sub_100079C44(v11, v12, v14, v13, (uint64_t (*)(uint64_t))sub_10001B76C);
  v33[1] = v4;
  v33[2] = v19;
  if (v6 < v7)
    goto LABEL_46;
  if (v5)
  {
    if (a1 < 0)
      v21 = a1;
    else
      v21 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    swift_retain();
    v20 = _CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v20 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
  }
  if (v20 < v6)
    goto LABEL_47;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (v7 < v6)
    {
      type metadata accessor for InferenceProviderAsset(0);
      v22 = v7;
      do
      {
        v23 = v22 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v22);
        v22 = v23;
      }
      while (v6 != v23);
      goto LABEL_29;
    }
    goto LABEL_48;
  }
LABEL_29:
  if (v5)
  {
    if (a1 < 0)
      v27 = a1;
    else
      v27 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v24 = _CocoaArrayWrapper.subscript.getter(v7, v6, v27);
    v25 = v28;
    v7 = v29;
    v26 = v30;
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v24 = a1 & 0xFFFFFFFFFFFFFF8;
    v25 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
    v26 = (2 * v6) | 1;
    swift_bridgeObjectRetain(a1);
  }
  sub_100079D24(v24, v25, v7, v26);
  swift_unknownObjectRelease(v24);
  swift_bridgeObjectRelease(a1);
  swift_release(v4);
}

void sub_10006C4CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_10004E578();
  v1 = v0;
  if ((unint64_t)v0 >> 62)
  {
    if (v0 >= 0)
      v0 &= 0xFFFFFFFFFFFFFF8uLL;
    v2 = _CocoaArrayWrapper.endIndex.getter(v0);
    if (v2)
      goto LABEL_3;
LABEL_17:
    sub_10001D8B4();
    return;
  }
  v2 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    goto LABEL_17;
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
  }
  else
  {
    for (i = 0; i != v2; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0)
      {
        v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v1);
        v5 = v4;
      }
      else
      {
        v5 = *(_QWORD *)(v1 + 8 * i + 32);
        v4 = sub_10001E900();
      }
      if ((*(_BYTE *)(v5 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_dynamicModeAllowed) & 1) != 0
        || (*(_BYTE *)(v5 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_isCacheable) & 1) == 0)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v4);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(_swiftEmptyArrayStorage[2]);
        v6 = sub_10001E4C8();
        v8 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v7);
        specialized ContiguousArray._endMutation()(v8);
      }
      else
      {
        sub_100044820();
      }
    }
    sub_10001D8B4();
  }
}

uint64_t sub_10006C608(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  char v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31[24];
  char v32[24];

  v29 = a2;
  v30 = a3;
  v4 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v27 - v12;
  v14 = *a1 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  swift_beginAccess(v14, v32, 0, 0);
  sub_10002AC98(v14, (uint64_t)v6, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  v16 = *(int *)(v4 + 32);
  v15 = *(int *)(v4 + 36);
  v28 = v4;
  v17 = &v6[v15];
  v18 = &v6[v16];
  sub_100006710(&qword_1000FD888, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  v20 = v19;
  if ((dispatch thunk of static Comparable.>= infix(_:_:)(v18, v17, v7, v19) & 1) != 0)
    v21 = v18;
  else
    v21 = v17;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v21, v7);
  sub_10002ACC4((uint64_t)v6, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  v22 = v29 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy;
  swift_beginAccess(v29 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy, v31, 0, 0);
  v23 = type metadata accessor for InferenceProviderAssetManagerPolicy(0);
  static Date.+ infix(_:_:)(v11, *(double *)(v22 + *(int *)(v23 + 28)));
  v24 = *(void (**)(char *, uint64_t))(v8 + 8);
  v24(v11, v7);
  LOBYTE(v22) = dispatch thunk of static Comparable.< infix(_:_:)(v13, v30, v7, v20);
  v24(v13, v7);
  if ((v22 & 1) != 0)
    v25 = *(_BYTE *)(v14 + *(int *)(v28 + 24)) ^ 1;
  else
    v25 = 1;
  return v25 & 1;
}

uint64_t sub_10006C828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v4[11] = a4;
  v5 = type metadata accessor for ContinuousClock(0);
  v4[12] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[13] = v6;
  v4[14] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ContinuousClock.Instant(0);
  v4[15] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[16] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[17] = swift_task_alloc(v9);
  v4[18] = swift_task_alloc(v9);
  v10 = sub_100002F78(&qword_1000FD870);
  v4[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  v4[20] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[21] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[22] = swift_task_alloc(v13);
  v4[23] = swift_task_alloc(v13);
  return swift_task_switch(sub_10006C91C, 0, 0);
}

uint64_t sub_10006C91C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;

  sub_10001DB68();
  sub_10007E594();
  *(_QWORD *)(v2 + 192) = sub_1000446D4((uint64_t)"Transition Assets", 17);
  sub_10002B2E0(v1, v0);
  v3 = sub_10007D918();
  *(_QWORD *)(v2 + 200) = v3;
  if (v3)
  {
    v4 = swift_task_alloc(dword_1000FD87C);
    v5 = (_QWORD *)sub_10007E648(v4);
    v6 = sub_10007DA44(v5);
    return sub_10007D990(v6);
  }
  else
  {
    v8 = sub_10007D380();
    sub_10002AD5C(v8, &qword_1000FD870);
    sub_10002B2E0(*(_QWORD *)(v2 + 88) + 16, v2 + 40);
    v9 = sub_10008009C();
    *(_QWORD *)(v2 + 240) = v9;
    if (v9)
    {
      return sub_10001D6DC();
    }
    else
    {
      if (qword_1000FB108 != -1)
        swift_once(&qword_1000FB108, sub_10004D568);
      v10 = sub_10001DD64();
      sub_100037AC4(v10, (uint64_t)qword_1000FD390);
      v11 = sub_10001E9D0();
      if (sub_100039E20(v11))
      {
        v12 = (_WORD *)sub_10001D8D4(2);
        sub_10004478C(v12);
        sub_100039E4C((void *)&_mh_execute_header, v13, v14, "Ending task to transition assets");
        sub_10001D790(v1);
      }
      sub_10007CFEC();
      sub_10007DB9C();
      sub_10001D930();
      sub_10001EAC8();
      sub_10001E490();
      sub_10002B504();
      sub_10002B528();
      sub_10002B4C4();
      sub_10002B70C();
      return sub_10007CF2C(*(uint64_t (**)(void))(v2 + 8));
    }
  }
}

uint64_t sub_10006CA88()
{
  uint64_t v0;

  sub_10001D680(*(_QWORD *)(*(_QWORD *)v0 + 208));
  sub_10001D9C0();
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_10006CAC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  os_log_type_t v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;

  sub_10007F048();
  v2 = sub_10007E8A0();
  if (v3)
  {
    sub_10002BBF0(v2, &qword_1000FD870);
    sub_10002B2E0(*(_QWORD *)(v1 + 88) + 16, v1 + 40);
    v4 = sub_10007E5BC();
    *(_QWORD *)(v1 + 240) = v4;
    if (v4)
    {
      return sub_10007E0A4((uint64_t)sub_10006CE5C, v4, 0);
    }
    else
    {
      if (qword_1000FB108 != -1)
        swift_once(&qword_1000FB108, sub_10004D568);
      v7 = sub_10001DD64();
      sub_100037AC4(v7, (uint64_t)qword_1000FD390);
      v8 = sub_10001E9D0();
      if (sub_100039E20(v8))
      {
        v9 = (_WORD *)sub_10001D8D4(2);
        sub_10004478C(v9);
        sub_100039E4C((void *)&_mh_execute_header, v10, v11, "Ending task to transition assets");
        sub_10001D790(v0);
      }
      sub_10007CFEC();
      sub_10007DB9C();
      sub_10001D930();
      sub_10001EAC8();
      sub_10001E490();
      sub_10002B504();
      sub_10002B528();
      sub_10002B4C4();
      sub_10002B70C();
      return sub_10007D480(*(uint64_t (**)(void))(v1 + 8));
    }
  }
  else
  {
    sub_10007D294(*(_QWORD *)(v1 + 184), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 + 168) + 32));
    sub_100080174();
    sub_100080018();
    sub_10007F438();
    sub_10007DF98();
    sub_100080164();
    sub_10007F574();
    sub_10007E3A4();
    sub_10007E3C0((__n128)xmmword_1000CC2E0);
    v5 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep<A>(until:tolerance:clock:)[1]);
    *(_QWORD *)(v1 + 232) = v5;
    sub_100006710(&qword_1000FD880, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock);
    *v5 = v1;
    v5[1] = sub_10006CC88;
    sub_10007DCBC();
    return sub_10007D758();
  }
}

uint64_t sub_10006CC88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  sub_10001DB50();
  a17 = v20;
  a18 = v21;
  a16 = v19;
  v22 = (_QWORD *)*v19;
  a16 = v22;
  sub_10001D788(v22[29], &a16);
  if (v18)
  {
    v23 = v22[18];
    v24 = v22[14];
    v25 = v22[13];
    sub_10001EBB8();
    sub_10001E808(v24, *(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
    sub_10007DFC8(v23);
  }
  else
  {
    sub_10007E0D0();
    sub_10007F560();
  }
  sub_100037A7C();
  return sub_10007D2A0(v26, v27, v28);
}

uint64_t sub_10006CD0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;

  sub_10001DB68();
  v1 = sub_10007DACC();
  sub_10007DA2C();
  if ((v1 & 1) == 0)
  {
    v2 = sub_10007D918();
    *(_QWORD *)(v0 + 200) = v2;
    if (v2)
    {
      v3 = swift_task_alloc(dword_1000FD87C);
      v4 = (_QWORD *)sub_10007E648(v3);
      v5 = sub_10007DA44(v4);
      return sub_10007D990(v5);
    }
    v7 = sub_10007D380();
    sub_10002AD5C(v7, &qword_1000FD870);
  }
  sub_10002B2E0(*(_QWORD *)(v0 + 88) + 16, v0 + 40);
  v8 = sub_10007E5BC();
  *(_QWORD *)(v0 + 240) = v8;
  if (v8)
    return sub_10001D6DC();
  if (qword_1000FB108 != -1)
    swift_once(&qword_1000FB108, sub_10004D568);
  v9 = sub_10001DD64();
  sub_100037AC4(v9, (uint64_t)qword_1000FD390);
  v10 = sub_10001E9D0();
  if (sub_100039E20(v10))
  {
    v11 = (_WORD *)sub_10001D8D4(2);
    sub_10004478C(v11);
    sub_100039E4C((void *)&_mh_execute_header, v12, v13, "Ending task to transition assets");
    sub_10001D790(v1);
  }
  sub_10007CFEC();
  sub_10007DB9C();
  sub_10001D930();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  sub_10002B70C();
  return sub_10007CF2C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10006CE5C()
{
  sub_10006F1FC();
  sub_10001D9C0();
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_10006CE90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;

  sub_10001DB68();
  if (qword_1000FB108 != -1)
    swift_once(&qword_1000FB108, sub_10004D568);
  v2 = sub_10001DD64();
  sub_100037AC4(v2, (uint64_t)qword_1000FD390);
  v3 = sub_10001E9D0();
  if (sub_100039E20(v3))
  {
    v4 = (_WORD *)sub_10001D8D4(2);
    sub_10004478C(v4);
    sub_100039E4C((void *)&_mh_execute_header, v5, v6, "Ending task to transition assets");
    sub_10001D790(v0);
  }
  sub_10007CFEC();
  sub_10007DB9C();
  sub_10001D930();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  sub_10002B70C();
  return sub_10007CF2C(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10006CF44(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2[31] = a1;
  v2[32] = v1;
  v3 = sub_100002F78(&qword_1000FD870);
  v2[33] = sub_10002B1BC(*(_QWORD *)(v3 - 8));
  v2[34] = sub_10001E784();
  v2[35] = sub_10001E784();
  v4 = sub_10007DCE8();
  v2[36] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[37] = v5;
  v2[38] = sub_10002B1BC(v5);
  v2[39] = sub_10001E784();
  v6 = sub_100002F78(&qword_1000FD7E0);
  v2[40] = sub_10002B1BC(*(_QWORD *)(v6 - 8));
  v2[41] = sub_10001E784();
  v7 = sub_10007D89C();
  v2[42] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[43] = v8;
  v2[44] = sub_10002B1BC(v8);
  v2[45] = sub_10001E784();
  v2[46] = sub_10001E784();
  v9 = sub_10007D9D8();
  v2[47] = v9;
  v2[48] = sub_10002B1BC(*(_QWORD *)(v9 - 8));
  v2[49] = sub_10001E784();
  v10 = sub_10007F428();
  v2[50] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[51] = v11;
  v2[52] = sub_10002B1BC(v11);
  v2[53] = sub_10001E784();
  v2[54] = sub_10001E784();
  v2[55] = sub_10001E784();
  v2[56] = sub_10001E784();
  sub_10001D7B8();
  return sub_10001D6DC();
}

uint64_t sub_10006D058()
{
  _QWORD *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t *v9;

  sub_10001E6F0();
  if (qword_1000FB108 != -1)
    swift_once(&qword_1000FB108, sub_10004D568);
  v1 = v0[32];
  v2 = sub_10001DD64();
  v0[57] = v2;
  v3 = sub_100002FF8(v2, (uint64_t)qword_1000FD390);
  v0[58] = v3;
  sub_10001E194();
  sub_10002B3CC();
  v4 = sub_10001E9D0();
  v5 = sub_100039E20(v4);
  v6 = v0[32];
  if (v5)
  {
    v7 = (uint8_t *)sub_10001D8D4(12);
    *(_DWORD *)v7 = 134217984;
    v8 = v6 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy;
    sub_10002B2E0(v6 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy, (uint64_t)(v0 + 2));
    v0[30] = *(_QWORD *)(v8 + *(int *)(type metadata accessor for InferenceProviderAssetManagerPolicy(0) + 28));
    sub_10007DF54((uint64_t)(v0 + 30), (uint64_t)(v0 + 31), (uint64_t)(v7 + 4));
    sub_10001D9C8();
    sub_10001E18C((void *)&_mh_execute_header, v1, (os_log_type_t)v3, "Transition assets that haven't been used for at least %f seconds", v7);
    sub_10001D790((uint64_t)v7);
  }
  else
  {
    sub_10001D9C8();
  }

  v9 = sub_10007DCF8(v0[32]);
  v0[59] = v9;
  return sub_100037B34((uint64_t)sub_10006D19C, *v9, 0);
}

uint64_t sub_10006D19C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 256);
  *(_BYTE *)(v0 + 560) = *(_BYTE *)(**(_QWORD **)(v0 + 472)
                                  + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_assetsHaveUpdated);
  return sub_10001D948((uint64_t)sub_10006D1C8, v1);
}

void sub_10006D1C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  void *v5;
  os_log_type_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  void (*v52)(_QWORD, uint64_t, uint64_t);
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  uint64_t v66;
  os_log_type_t v67;
  _WORD *v68;
  int v69;
  _QWORD *v70;
  unint64_t v72;
  int64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  NSObject *v83;
  uint64_t v84;
  Class v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t, NSObject *);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t);
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint8_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  void *v131;
  NSObject *v132;
  os_log_type_t v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(uint64_t, uint64_t);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  NSObject *v158;
  uint64_t v159;
  os_log_type_t v160;
  _BOOL4 v161;
  uint8_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  NSObject *v169;
  uint64_t v170;
  uint64_t v171;
  os_log_type_t v172;
  uint64_t v173;
  uint64_t v174;
  uint8_t *v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  NSObject *v205;
  uint64_t v206;
  os_log_type_t v207;
  _WORD *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  _QWORD *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t isa;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  _QWORD *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  unint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  _QWORD *v377;

  v4 = (_QWORD *)v2;
  if (*(_BYTE *)(v2 + 560) == 1)
  {
    v5 = *(void **)(v2 + 464);
    Logger.logObject.getter(a1);
    v6 = sub_10001E9D0();
    if (sub_100039E20(v6))
    {
      v7 = (_WORD *)sub_10001D8D4(2);
      sub_10004478C(v7);
      sub_100039E4C((void *)&_mh_execute_header, v8, v9, "While transitioning assets, unloading dynamic-capable assets due to pending asset update");
      sub_10001D790(v1);
    }

  }
  v11 = *(_QWORD *)(v2 + 440);
  v10 = *(_QWORD *)(v2 + 448);
  v12 = *(_QWORD *)(v2 + 256);
  static Date.now.getter();
  *(_QWORD *)(v2 + 232) = _swiftEmptySetSingleton;
  v13 = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy;
  *(_QWORD *)(v2 + 480) = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy;
  v14 = v12 + v13;
  v15 = sub_100080068();
  sub_10002B2E0(v15, v16);
  v17 = sub_10007E860();
  *(_QWORD *)(v2 + 488) = v17;
  static Date.- infix(_:_:)(v10, *(double *)(v14 + *(int *)(v17 + 28)));
  sub_10006C4CC();
  v19 = v18;
  v20 = sub_10007DB04();
  *(_QWORD *)(v20 + 16) = v11;
  v377 = _swiftEmptyArrayStorage;
  if (v19 >> 62)
    goto LABEL_20;
  for (i = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10); i; i = sub_10007F720())
  {
    isa = v20;
    v3 = 0;
    v358 = v4[47];
    v363 = (uint64_t)(v4 + 8);
    v373 = v19 & 0xC000000000000001;
    v368 = v19 & 0xFFFFFFFFFFFFFF8;
    v354 = v19;
    while (1)
    {
      if (v373)
      {
        v34 = sub_10001E4C8();
        v22 = specialized _ArrayBuffer._getElementSlowPath(_:)(v34, v35);
      }
      else
      {
        if (v3 >= *(_QWORD *)(v368 + 16))
          goto LABEL_19;
        v22 = *(_QWORD *)(v19 + 8 * v3 + 32);
        sub_10001E69C();
      }
      v20 = v3 + 1;
      if (__OFADD__(v3, 1))
        break;
      v23 = v4[55];
      v24 = v4;
      v27 = v4 + 49;
      v26 = v4[49];
      v25 = v27[1];
      v28 = v22 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
      sub_10002B2E0(v22 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v363);
      sub_10007F218(v28, v26);
      v29 = v26 + *(int *)(v358 + 32);
      sub_100006710(&qword_1000FD888, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
      LOBYTE(v25) = dispatch thunk of static Comparable.< infix(_:_:)(v23, v29, v25, v30);
      sub_10007F718(v26);
      if ((v25 & 1) != 0)
      {
        sub_10002BA40();
      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v31);
        v32 = v377[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v32);
        v33 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v22);
        specialized ContiguousArray._endMutation()(v33);
      }
      ++v3;
      v4 = v24;
      v19 = v354;
      if (v20 == i)
      {
        v36 = v377;
        v20 = isa;
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    ;
  }
  v36 = _swiftEmptyArrayStorage;
LABEL_22:
  sub_10001DA38();
  sub_10001D938();
  sub_10000B83C((uint64_t)v36);
  v38 = (unint64_t)sub_10005CE8C(v37);
  v4[62] = v38;
  sub_100049010();
  if (v38 >> 62)
  {
    sub_10001E338();
    v39 = sub_1000801FC();
    sub_10001E034();
  }
  else
  {
    v39 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v40 = v4 + 70;
  if (!v39)
  {
    v65 = v4[58];
    v66 = swift_bridgeObjectRelease(v4[62]);
    Logger.logObject.getter(v66);
    v67 = sub_10001E9D0();
    if (sub_10007DA7C(v67))
    {
      v68 = (_WORD *)sub_10001D8D4(2);
      sub_10007FAFC(v68);
      sub_100044580((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "Finished transitioning assets", (uint8_t *)v20);
      sub_10001D790(v20);
    }
    v69 = *v40;

    if (v69 == 1)
    {
      sub_10007F1E4(v4[32], &dword_1000FB720);
      v70 = (_QWORD *)sub_10001EBC0();
      v4[68] = v70;
      *v70 = v4;
      v70[1] = sub_10006DFF8;
      sub_10007E250();
      __asm { BR              X0 }
    }
LABEL_41:
    sub_10006C4CC();
    v73 = v72;
    if (v72 >> 62)
      goto LABEL_68;
    v74 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v74)
    {
      while (1)
      {
        v75 = (uint64_t)(v4 + 29);
        sub_10006C19C(v73);
        v77 = v76;
        v79 = v78;
        v73 = v4[29];
        v80 = sub_10001D964();
        v81 = sub_10007A058(v80, v77, v79);
        v83 = v82;
        v84 = sub_10001D8B4();
        isa = (uint64_t)v83[2].isa;
        v354 = (uint64_t)v83;
        v309 = v4 + 28;
        v319 = v81;
        if (!isa)
          break;
        v269 = (uint64_t)(v4 + 26);
        v279 = (uint64_t)(v4 + 23);
        v336 = v4[51];
        v343 = (uint64_t)(v4 + 14);
        v289 = v4 + 27;
        v299 = (uint64_t)(v4 + 17);
        v329 = v4[47];
        v359 = v4;
        sub_100005630(v4[35], 1, 1, v4[50]);
        sub_10001E194();
        sub_10001DAE8();
        v85 = 0;
        v3 = (unint64_t)v4;
        while (v85 < v83[2].isa)
        {
          v369 = *(_QWORD *)(v3 + 488);
          v86 = *(_QWORD *)(v3 + 424);
          v87 = *(_QWORD *)(v3 + 432);
          v88 = *(_QWORD *)(v3 + 384);
          v364 = *(_QWORD *)(v3 + 256) + *(_QWORD *)(v3 + 480);
          v73 = (int64_t)v83[(_QWORD)v85 + 4].isa;
          v89 = v73 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
          sub_10002B2E0(v73 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v343);
          sub_10002AC98(v89, v88, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          v90 = v88 + *(int *)(v329 + 36);
          v91 = (void (*)(uint64_t, uint64_t, NSObject *))(v88 + *(int *)(v329 + 32));
          sub_100006710(&qword_1000FD888, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
          sub_10002B400();
          v92 = sub_1000801B8();
          v4 = (_QWORD *)v336;
          if ((sub_10007F1CC(v92, v93) & 1) != 0)
            v94 = (uint64_t)v91;
          else
            v94 = v90;
          sub_10007FCB0(v86, v94, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v336 + 16));
          sub_10002ACC4(v88, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          sub_10007FDBC(*(double *)(v364 + *(int *)(v369 + 28)));
          v95 = *(void (**)(uint64_t))(v336 + 8);
          v96 = sub_10007E4F0();
          v95(v96);
          v97 = sub_10007FDFC(v87);
          v98 = sub_10001D930();
          if ((v97 & 1) != 0)
          {
            v86 = *(_QWORD *)(v3 + 408);
            v148 = *(_QWORD *)(v3 + 280);
            v149 = sub_10007EAB4(v98, v99, v100, v101, v102, v103, v104, v105, v269, v279, (uint64_t)v289, v299, (uint64_t)v309, v81, v329, v336, v343, isa, v354);
            v157 = sub_10007F5D8(v149, v150, v151, v152, v153, v154, v155, v156, v271, v281, v291, v301, v311, v321);
            sub_10007DCF0(v157, &qword_1000FD870);
            sub_10007EA10(v148, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v86 + 32));
            sub_10007F458();
LABEL_56:
            sub_10007E95C(v359[35]);
            sub_10007F0E0();
            v158 = v359[58];
            if ((_DWORD)v86 == 1)
            {
              sub_10001D834(v319);
              v159 = sub_10001D834(v354);
              Logger.logObject.getter(v159);
              v160 = sub_100037B50();
              v161 = sub_10007DC80(v158);
              v375 = v359[56];
              v371 = v359[50];
              if (v161)
              {
                v162 = (uint8_t *)sub_10001D8D4(12);
                v163 = sub_10001D8D4(32);
                sub_10007E364(v163);
                *(_DWORD *)v162 = 136315138;
                sub_10001E69C();
                sub_10002B400();
                v164 = sub_10007FF38(v319);
                sub_10001D930();
                sub_10002BA40();
                sub_10007D73C(v164, v165, (uint64_t *)&v377);
                *v289 = v166;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(v289, v309);
                sub_10001EBB0(v354);
                sub_10001EBB0(v319);
                sub_10001E8A8();
                sub_10001E18C((void *)&_mh_execute_header, v158, v160, "Remaining transition candidates %s generated task wake times in the past.  Ending asset transition task", v162);
                sub_10001DBB8(v3);
                sub_10001D790(v3);
                sub_10001D790((uint64_t)v162);
                sub_10001D930();
                sub_10002BA40();
              }
              else
              {
                sub_10007D408(v354);
                sub_10007D408(v319);
              }

              ((void (*)(uint64_t, uint64_t))v95)(v375, v371);
              v4 = v359;
              ((void (*)(_QWORD, _QWORD))v95)(v359[55], v359[50]);
LABEL_66:
              v203 = v4[35];
              sub_10002B2E0(v203, v299);
              sub_10007E95C(v203);
              sub_10007E5D4();
LABEL_76:
              sub_10007F184();
              v360 = v4[38];
              v366 = v4[35];
              v372 = v4[34];
              swift_bridgeObjectRelease(v4[29]);
              sub_10002B504();
              sub_10002B528();
              sub_10002B4C4();
              sub_10002B70C();
              sub_10002BDF0();
              sub_10001E330();
              sub_10001E490();
              sub_10001D938();
              v212 = sub_10001EAC8();
              v220 = sub_10007EDA8(v212, v213, v214, v215, v216, v217, v218, v219, v269, v279, (uint64_t)v289, v299, (uint64_t)v309, v319, v329, v336);
              v228 = sub_10007EAD0(v220, v221, v222, v223, v224, v225, v226, v227, v273, v283, v293, v303, v313, v323, v330, v337, v343);
              v236 = sub_10007E470(v228, v229, v230, v231, v232, v233, v234, v235, v274, v284, v294, v304, v314, v324, v331, v338, v344, isa);
              v244 = sub_10007DE6C(v236, v237, v238, v239, v240, v241, v242, v243, v275, v285, v295, v305, v315, v325, v332, v339, v345, v350, v354);
              v252 = sub_10007DE5C(v244, v245, v246, v247, v248, v249, v250, v251, v276, v286, v296, v306, v316, v326, v333, v340, v346, v351, v355,
                       v360);
              v260 = sub_10007DE4C(v252, v253, v254, v255, v256, v257, v258, v259, v277, v287, v297, v307, v317, v327, v334, v341, v347, v352, v356,
                       v361,
                       v366);
              sub_10007DEA4(v260, v261, v262, v263, v264, v265, v266, v267, v278, v288, v298, v308, v318, v328, v335, v342, v348, v353, v357,
                v362,
                v367,
                v372);
              sub_10007DB40();
              sub_10007E250();
              __asm { BR              X0 }
            }
            v167 = v359[56];
            v168 = v359[52];
            v169 = v359[50];
            v170 = *(_QWORD *)(v359[57] - 8);
            v171 = sub_10001D828(*(_QWORD *)(v170 + 64));
            v376 = v170;
            sub_10007EA10(v171, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v170 + 16));
            v91(v168, v167, v169);
            sub_10001E694();
            v172 = sub_10007FBA4();
            if (!sub_10007FD64(v172))
            {

              v191 = sub_10007F54C();
              v183 = ((uint64_t (*)(uint64_t))v95)(v191);
              goto LABEL_65;
            }
            v173 = v359[35];
            v174 = v359[33];
            v175 = (uint8_t *)sub_10001D8D4(12);
            *(_DWORD *)v175 = 134217984;
            v176 = sub_10002B2E0(v173, v279);
            sub_10007DFEC(v176, v177, &qword_1000FD870);
            sub_10007D3D0(v174);
            if (!v178)
            {
              v179 = v359[52];
              v180 = v359[33];
              sub_10007F46C();
              v182 = v181;
              sub_10007F330(v180);
              v359[26] = v182;
              sub_100080228(v269, (uint64_t)v289);
              sub_10007F330(v179);
              sub_10001E18C((void *)&_mh_execute_header, v169, v172, "Additional assets need transitioning, next task wake in %f seconds", v175);
              sub_10001D790((uint64_t)v175);

LABEL_65:
              v192 = sub_10007EAB4(v183, v184, v185, v186, v187, v188, v189, v190, v269, v279, (uint64_t)v289, v299, (uint64_t)v309, v319, v329, v336, v343, isa, v354);
              sub_10007F5D8(v192, v193, v194, v195, v196, v197, v198, v199, v272, v282, v292, v302, v312, v322);
              v4 = v359;
              v200 = v359[55];
              v201 = v359[50];
              sub_100037D5C(v376);
              v202 = sub_10002BE5C();
              v95(v202);
              ((void (*)(uint64_t, uint64_t))v95)(v200, v201);
              sub_10002B504();
              goto LABEL_66;
            }
            sub_10002AD5C(v359[35], &qword_1000FD870);
            __break(1u);
            return;
          }
          v85 = (Class)((char *)v85 + 1);
          ((void (*)(_QWORD, _QWORD))v95)(*(_QWORD *)(v3 + 432), *(_QWORD *)(v3 + 400));
          v83 = v354;
          if ((Class)isa == v85)
          {
            v106 = sub_10001DBEC();
            sub_10007F5D8(v106, v107, v108, v109, v110, v111, v112, v113, v269, v279, (uint64_t)v289, v299, (uint64_t)v309, v81);
            goto LABEL_56;
          }
        }
        __break(1u);
LABEL_68:
        if (v73 < 0)
          v74 = v73;
        else
          v74 = v73 & 0xFFFFFFFFFFFFFF8;
        sub_10001D964();
        sub_1000801FC();
        v204 = sub_10001E2B4();
        swift_bridgeObjectRelease(v204);
        if (!v74)
          goto LABEL_72;
      }
      Logger.logObject.getter(v84);
      sub_10002BF4C();
      v114 = sub_10007E920(v83);
      v374 = v4[56];
      v122 = v4;
      v365 = v4[51];
      v370 = v4[50];
      if ((_DWORD)v114)
      {
        v123 = (uint8_t *)sub_10001D8D4(12);
        v124 = sub_10001D8D4(32);
        sub_10007E364(v124);
        *(_DWORD *)v123 = 136315138;
        sub_10002B2E0(v75, (uint64_t)(v122 + 20));
        v125 = sub_10001E1D8();
        sub_100006710(&qword_1000FB768, type metadata accessor for InferenceProviderAsset);
        v127 = v126;
        v128 = sub_10001E3E0();
        Set.description.getter(v128, v125, v127);
        sub_100049010();
        sub_10007F828();
        v130 = sub_10007F1F8(v129, v309);
        sub_10007EDC4((uint64_t)v130, v75, (uint64_t)(v123 + 4));
        sub_10001DA38();
        sub_10007FD44();
        sub_10001E18C(v131, v132, v133, v134, v123);
        sub_10001DBB8(v3);
        sub_10001D790(v3);
        v114 = sub_10001D790((uint64_t)v123);
      }
      sub_10007EAB4(v114, v115, v116, v117, v118, v119, v120, v121, v269, v279, (uint64_t)v289, v299, (uint64_t)v309, v319, v329, v336, v343, 0, (uint64_t)v83);

      sub_10007F5D8(v135, v136, v137, v138, v139, v140, v141, v142, v270, v280, v290, v300, v310, v320);
      v143 = *(void (**)(uint64_t, uint64_t))(v365 + 8);
      v143(v374, v370);
      v4 = v122;
      v143(v122[55], v122[50]);
      v144 = sub_1000801E8();
    }
    else
    {
LABEL_72:
      v205 = v4[58];
      v206 = sub_10001D8B4();
      Logger.logObject.getter(v206);
      v207 = sub_10001E9D0();
      if (sub_10007DA7C(v207))
      {
        v208 = (_WORD *)sub_10001D8D4(2);
        sub_10007FAFC(v208);
        sub_100044580((void *)&_mh_execute_header, v205, (os_log_type_t)v74, "No more assets need to be transitioned", (uint8_t *)v73);
        sub_10001D790(v73);
      }
      v209 = v4[56];
      v210 = v4[50];
      v211 = v4[51];

      (*(void (**)(uint64_t, uint64_t))(v211 + 8))(v209, v210);
      sub_10007F474();
      sub_10007F8CC();
      v147 = v210;
    }
    sub_100005630(v144, v145, v146, v147);
    goto LABEL_76;
  }
  *((_DWORD *)v4 + 138) = enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.policyChangeBackgroundSession(_:);
  *((_DWORD *)v4 + 139) = enum case for LoadState.loaded(_:);
  v41 = v39 - 1;
  v4[63] = v39 - 1;
  if (__OFSUB__(v39, 1))
  {
    __break(1u);
    goto LABEL_41;
  }
  v42 = v4[62] & 0xC000000000000001;
  v43 = sub_10007D288();
  v44 = v4[62];
  if (v42)
  {
    v45 = sub_10007D8D4(v43, v44);
  }
  else
  {
    v45 = *(_QWORD *)(v44 + 8 * v41 + 32);
    sub_10002B400();
  }
  v4[64] = v45;
  if (*v40 == 1)
  {
    v46 = v4[41];
    sub_10002BAF8(v4[43]);
    v47 = sub_10002BCD4();
    sub_10002B26C(v46, v48, v49, v47);
    v50 = (_QWORD *)swift_task_alloc(dword_1000FD484);
    v4[65] = v50;
    *v50 = v4;
    v50[1] = sub_10006DE74;
  }
  else
  {
    v51 = v4[42];
    v52 = *(void (**)(_QWORD, uint64_t, uint64_t))(v4[43] + 104);
    v53 = *((unsigned int *)v4 + 138);
    if (*(_BYTE *)(v45 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_dynamicModeAllowed) == 1)
    {
      v52(v4[45], v53, v51);
      v54 = (_QWORD *)swift_task_alloc(dword_1000FD474);
      v4[66] = v54;
      *v54 = v4;
      v54[1] = sub_10006DF00;
      sub_10001E2B4();
      sub_10007E250();
      sub_10005E464(v55, v56);
      return;
    }
    v57 = v4[40];
    v52(v4[44], v53, v51);
    v58 = sub_10002BCD4();
    sub_10002B26C(v57, v59, v60, v58);
    v61 = (_QWORD *)swift_task_alloc(dword_1000FD484);
    v4[67] = v61;
    *v61 = v4;
    v61[1] = sub_10006DF6C;
  }
  sub_10001E2B4();
  sub_10007E250();
  sub_100064078(v62, v63, v64);
}

uint64_t sub_10006DE74()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_100037EFC();
  sub_10001E538();
  v3 = sub_10001D788(*(_QWORD *)(v1 + 520), v2);
  if (v0)
    v3 = sub_10001EBB8();
  sub_10007D78C(v3, &qword_1000FD7E0);
  sub_10007D020();
  sub_10007E854();
  return sub_10001D6DC();
}

uint64_t sub_10006DF00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  sub_10001DD0C();
  a15 = v18;
  a16 = v19;
  a14 = v17;
  a14 = (_QWORD *)*v17;
  sub_10001D788(a14[66], &a14);
  if (v16)
    sub_10001EBB8();
  sub_10007D53C();
  sub_10001E10C();
  return sub_10007D24C(v20, v21, v22);
}

uint64_t sub_10006DF6C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_100037EFC();
  sub_10001E538();
  v3 = sub_10001D788(*(_QWORD *)(v1 + 536), v2);
  if (v0)
    v3 = sub_10001EBB8();
  sub_10007D78C(v3, &qword_1000FD7E0);
  sub_10007D020();
  sub_10007E854();
  return sub_10001D6DC();
}

uint64_t sub_10006DFF8()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 544));
  sub_10001D9C0();
  sub_10001D7B8();
  return sub_10001D674();
}

void sub_10006E034()
{
  _QWORD *v0;
  NSObject *v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  _BOOL4 v76;
  uint64_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  os_log_type_t v97;
  uint64_t v98;
  uint64_t v99;
  uint8_t *v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(uint64_t, uint64_t);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  os_log_type_t v131;
  _WORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t (*v241)(uint64_t, uint64_t, uint64_t);
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  _QWORD *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;

  v2 = v0;
  sub_10006C4CC();
  v4 = v3;
  if (!(v3 >> 62))
  {
    if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_30:
    v129 = (void *)v2[58];
    v130 = sub_10001EADC();
    Logger.logObject.getter(v130);
    v131 = sub_10001E9D0();
    if (sub_100039E20(v131))
    {
      v132 = (_WORD *)sub_10001D8D4(2);
      sub_10004478C(v132);
      sub_100039E4C((void *)&_mh_execute_header, v133, v134, "No more assets need to be transitioned");
      sub_10001D790(v4);
    }
    v135 = v2[56];

    sub_10007D784(v135);
    sub_10007D530();
    v119 = sub_10007D8C0();
LABEL_33:
    sub_100005630(v119, v120, v121, v122);
LABEL_34:
    sub_10007DC00();
    sub_10002B528();
    sub_10002B4C4();
    sub_10002B504();
    sub_10002BDF0();
    sub_10001E330();
    sub_10001D938();
    sub_10001EAC8();
    sub_10001E490();
    v136 = sub_10002B70C();
    v144 = sub_10007E470(v136, v137, v138, v139, v140, v141, v142, v143, v184, v192, v200, v208, (uint64_t)v216, v224, v232, (uint64_t)v241, v247, v253);
    v152 = sub_10007DE6C(v144, v145, v146, v147, v148, v149, v150, v151, v187, v195, v203, v211, v219, v227, v236, v242, v248, v254, v259);
    v160 = sub_10007DE5C(v152, v153, v154, v155, v156, v157, v158, v159, v188, v196, v204, v212, v220, v228, v237, v243, v249, v255, v260,
             v264);
    v168 = sub_10007DE4C(v160, v161, v162, v163, v164, v165, v166, v167, v189, v197, v205, v213, v221, v229, v238, v244, v250, v256, v261,
             v266,
             v269);
    v176 = sub_10007DEA4(v168, v169, v170, v171, v172, v173, v174, v175, v190, v198, v206, v214, v222, v230, v239, v245, v251, v257, v262,
             v267,
             v271,
             (uint64_t)v273);
    sub_10007E700(v176, v177, v178, v179, v180, v181, v182, v183, v191, v199, v207, v215, v223, v231, v240, v246, v252, v258, v263,
      v268,
      v272,
      v274,
      v275);
    swift_task_dealloc(v276);
    sub_10007DB40();
    sub_10007E038((uint64_t (*)(void))v2[1]);
    return;
  }
LABEL_29:
  sub_10001E140();
  v128 = sub_10007EC34();
  sub_10001EADC();
  if (!v128)
    goto LABEL_30;
LABEL_3:
  v5 = v2 + 28;
  sub_10007F8F8();
  v4 = v2[29];
  v6 = sub_10001E140();
  v7 = sub_10007EA04(v6);
  v9 = v8;
  v10 = sub_10001EADC();
  v273 = v2;
  v264 = *(_QWORD *)(v9 + 16);
  if (!v264)
  {
    Logger.logObject.getter(v10);
    v39 = sub_10002BF4C();
    v40 = sub_10007E39C(v1);
    v41 = v2[50];
    v42 = v2[51];
    if (v40)
    {
      v276 = v2[56];
      v270 = v9;
      v43 = (uint8_t *)sub_10001D8D4(12);
      v44 = sub_10001D8D4(32);
      sub_10007E364(v44);
      v275 = v42;
      sub_10007F91C(4.8149e-34);
      v265 = v45;
      sub_10002B2E0((uint64_t)(v2 + 29), (uint64_t)(v2 + 20));
      v233 = v7;
      v46 = sub_10001E1D8();
      sub_100006710(&qword_1000FB768, type metadata accessor for InferenceProviderAsset);
      v47 = sub_10001D964();
      sub_10007ED78(v47, v46);
      sub_10001D8B4();
      sub_10007F828();
      *v5 = v48;
      v49 = sub_10007F0D4();
      sub_10007E4D0(v49, v50, v265);
      sub_10001DA38();
      sub_10001E18C((void *)&_mh_execute_header, v1, v39, "All remaining assets that need transitioning have failed to unload or move to dynamic, %s", v43);
      sub_10001DBB8((uint64_t)v5);
      sub_10001D790((uint64_t)v5);
      sub_10001D790((uint64_t)v43);

      v59 = sub_10007F66C(v51, v52, v53, v54, v55, v56, v57, v58, v184, v192, v200, v208, (uint64_t)v216, v224, v233, (uint64_t)v241, v247, v253, v259,
              v265,
              v270);
      sub_10007DBF8(v59, v60, v61, v62, v63, v64, v65, v66, v185, v193, v201, v209, v217, v225, v234);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v276, v41);
    }
    else
    {

      sub_10007D970();
      sub_100044820();
      v116 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
      v117 = sub_10002BE5C();
      v116(v117, v118);
    }
    sub_10007E3B8(v2[55]);
    v119 = sub_10007D8A4();
    goto LABEL_33;
  }
  v200 = (uint64_t)(v2 + 23);
  v208 = (uint64_t)(v2 + 28);
  v192 = (uint64_t)(v2 + 26);
  v253 = v2[51];
  v259 = (uint64_t)(v2 + 14);
  v216 = v2 + 27;
  v224 = (uint64_t)(v2 + 17);
  v247 = v2[47];
  sub_10002B26C(v2[35], v11, v12, v2[50]);
  v232 = v7;
  sub_10001E900();
  sub_10001E8B0();
  v13 = 0;
  v269 = v9;
  while (1)
  {
    if (v13 >= *(_QWORD *)(v9 + 16))
    {
      __break(1u);
      goto LABEL_29;
    }
    v276 = v2[61];
    v15 = v2[53];
    v14 = v2[54];
    v16 = v2[50];
    v1 = v2[48];
    v275 = v2[32] + v2[60];
    sub_10002B2E0(*(_QWORD *)(v9 + 8 * v13 + 32) + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v259);
    v17 = sub_1000801B8();
    sub_10007E94C(v17, v18);
    v19 = (char *)v1 + *(int *)(v247 + 36);
    v20 = (char *)v1 + *(int *)(v247 + 32);
    sub_100006710(&qword_1000FD888, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    sub_10002B400();
    v21 = (sub_10007F34C() & 1) != 0 ? v20 : v19;
    v2 = v273;
    v241 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v253 + 16);
    v241(v15, (uint64_t)v21, v16);
    sub_10007ED88((uint64_t)v1);
    static Date.+ infix(_:_:)(v15, *(double *)(v275 + *(int *)(v276 + 28)));
    v22 = *(uint64_t (**)(uint64_t, uint64_t))(v253 + 8);
    sub_10007F758(v15);
    v4 = sub_10007FDFC(v14);
    v23 = sub_10001D930();
    if ((v4 & 1) != 0)
      break;
    ++v13;
    v31 = v22(v273[54], v273[50]);
    v9 = v269;
    if (v264 == v13)
    {
      sub_10007DBF8(v31, v32, v33, v34, v35, v36, v37, v38, v184, v192, v200, v208, (uint64_t)v216, v224, v232);
      sub_10007D970();
      goto LABEL_15;
    }
  }
  v67 = v273[51];
  v68 = v273[35];
  sub_10007DBF8(v23, v24, v25, v26, v27, v28, v29, v30, v184, v192, v200, v208, (uint64_t)v216, v224, v232);
  v9 = v269;
  v69 = sub_10007D970();
  sub_10007DFD8(v69, &qword_1000FD870);
  sub_10007D294(v68, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v67 + 32));
  sub_10007D54C(v68);
LABEL_15:
  v70 = v273[50];
  v71 = v273[34];
  sub_10007D410(v273[35]);
  v72 = sub_100005700(v71, 1, v70);
  sub_10007DCC8(v71);
  if (v72 == 1)
  {
    sub_10001D834(v232);
    v73 = sub_10001D834(v9);
    v74 = Logger.logObject.getter(v73);
    v75 = static os_log_type_t.fault.getter();
    v76 = sub_10007DC80(v74);
    v77 = v273[50];
    if (v76)
    {
      v277 = v273[56];
      v78 = (uint8_t *)sub_10001D8D4(12);
      v275 = sub_10001D8D4(32);
      v278 = v275;
      v276 = v77;
      *(_DWORD *)v78 = 136315138;
      v264 = (uint64_t)(v78 + 4);
      sub_10007D280();
      sub_10001E8B0();
      v79 = v9;
      v80 = sub_10007FF1C(v232);
      v82 = v81;
      sub_10002B88C();
      sub_10001D9C8();
      v2 = v273;
      sub_1000102C0(v80, v82, &v278);
      *v216 = v83;
      sub_10007EDC4((uint64_t)v216, v208, (uint64_t)(v78 + 4));
      sub_10001E034();
      sub_10001EBB0(v232);
      sub_10001EBB0(v79);
      sub_10001E18C((void *)&_mh_execute_header, v74, v75, "Remaining transition candidates %s generated task wake times in the past.  Ending asset transition task", v78);
      sub_10001DBB8(v275);
      sub_10001D790(v275);
      sub_10001D790((uint64_t)v78);

      sub_10002B88C();
      sub_10001D9C8();
      v85 = v77;
      v84 = v277;
    }
    else
    {

      sub_10007D408(v232);
      sub_10007D408(v9);
      v84 = sub_10002BE5C();
    }
    v22(v84, v85);
    v22(v2[55], v2[50]);
    goto LABEL_27;
  }
  v86 = v273[56];
  v87 = v273[52];
  v88 = *(_QWORD *)(v273[57] - 8);
  v89 = sub_10001D828(*(_QWORD *)(v88 + 64));
  sub_10007D294(v89, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 16));
  sub_10007FD04(v87, v86, v90, v91, v92, v93, v94, v95, v184, v192, v200, v208, (uint64_t)v216, v224, v232, v241);
  v96 = sub_10001E694();
  v97 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v96, v97))
  {

    v108 = sub_10007DA2C();
    goto LABEL_26;
  }
  v98 = v273[35];
  v99 = v273[33];
  v100 = (uint8_t *)sub_10001D8D4(12);
  *(_DWORD *)v100 = 134217984;
  v101 = sub_10002B2E0(v98, v202);
  sub_10007DFEC(v101, v102, &qword_1000FD870);
  sub_10007D3D0(v99);
  if (!v103)
  {
    v104 = v273[52];
    v105 = v273[33];
    sub_10007F46C();
    v107 = v106;
    sub_10007E248(v105);
    v273[26] = v107;
    v2 = v273;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v194, v218);
    sub_10007E248(v104);
    sub_10001E18C((void *)&_mh_execute_header, v96, v97, "Additional assets need transitioning, next task wake in %f seconds", v100);
    sub_10001D790((uint64_t)v100);

LABEL_26:
    sub_10007DBF8(v108, v109, v110, v111, v112, v113, v114, v115, v186, v194, v202, v210, v218, v226, v235);
    sub_10007D970();
    v123 = v2[56];
    v124 = v2[55];
    sub_100037D5C(v88);
    sub_10007E248(v123);
    sub_10007E248(v124);
    sub_10002B504();
LABEL_27:
    v125 = v2[35];
    v126 = sub_100037FBC();
    sub_10002B2E0(v126, v127);
    sub_10007D410(v125);
    sub_10007DA38();
    goto LABEL_34;
  }
  sub_10002AD5C(v273[35], &qword_1000FD870);
  __break(1u);
}

void sub_10006E80C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void (*v22)(_QWORD, uint64_t, uint64_t);
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  os_log_type_t v37;
  _WORD *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _QWORD *v42;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  os_log_type_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  NSObject *v125;
  uint64_t v126;
  os_log_type_t v127;
  _BOOL4 v128;
  uint8_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  os_log_type_t v140;
  uint64_t v141;
  uint64_t v142;
  uint8_t *v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  os_log_type_t v173;
  _WORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;

  v1 = (void (*)(uint64_t, uint64_t))(v0 + 232);
  v3 = *(_QWORD *)(v0 + 304);
  v2 = *(_QWORD *)(v0 + 312);
  v4 = *(_QWORD *)(v0 + 296);
  sub_10002B2E0(*(_QWORD *)(v0 + 512) + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v0 + 88);
  sub_10007D794(v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
  sub_10007D810(v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104));
  v5 = sub_10002BF40();
  v7 = sub_1000B2390(v5, v6);
  sub_10007D5F4(v3);
  sub_10007D5F4(v2);
  if ((v7 & 1) != 0)
  {
    sub_100012818(&v326, *(_QWORD *)(v0 + 512));
    v8 = v326;
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 512);
  }
  swift_release(v8);
  v11 = *(_QWORD *)(v0 + 504);
  if (!v11)
  {
    v35 = *(void **)(v0 + 464);
    v36 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 496));
    Logger.logObject.getter(v36);
    v37 = sub_10001E9D0();
    if (sub_100039E20(v37))
    {
      v38 = (_WORD *)sub_10001D8D4(2);
      sub_10004478C(v38);
      sub_100039E4C((void *)&_mh_execute_header, v39, v40, "Finished transitioning assets");
      sub_10001D790(v3);
    }
    v41 = *(unsigned __int8 *)(v0 + 560);

    if (v41 == 1)
    {
      sub_10007F1E4(*(_QWORD *)(v0 + 256), &dword_1000FB720);
      v42 = (_QWORD *)sub_10001EBC0();
      *(_QWORD *)(v0 + 544) = v42;
      *v42 = v0;
      v42[1] = sub_10006DFF8;
      sub_10007EF94();
      __asm { BR              X0 }
    }
LABEL_20:
    sub_10006C4CC();
    v45 = v44;
    if (v44 >> 62)
    {
LABEL_47:
      sub_10001E140();
      v170 = sub_10007EC34();
      sub_10001EADC();
      if (v170)
        goto LABEL_22;
    }
    else if (*(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_22:
      sub_10007F8F8();
      v46 = sub_10001E140();
      v47 = sub_10007EA04(v46);
      v49 = v48;
      v50 = sub_10001EADC();
      v307 = *(_QWORD *)(v49 + 16);
      v312 = v49;
      v271 = (_QWORD *)(v0 + 224);
      v280 = v47;
      if (v307)
      {
        v235 = v0 + 208;
        v244 = v0 + 184;
        v295 = *(_QWORD *)(v0 + 408);
        v301 = v0 + 112;
        v253 = (_QWORD *)(v0 + 216);
        v262 = v0 + 136;
        v289 = *(_QWORD *)(v0 + 376);
        sub_100005630(*(_QWORD *)(v0 + 280), 1, 1, *(_QWORD *)(v0 + 400));
        sub_10001E194();
        sub_10001E8B0();
        v45 = 0;
        while (1)
        {
          if (v45 >= *(_QWORD *)(v49 + 16))
          {
            __break(1u);
            goto LABEL_47;
          }
          v323 = *(_QWORD *)(v0 + 488);
          v51 = *(_QWORD *)(v0 + 424);
          v52 = *(_QWORD *)(v0 + 384);
          v320 = *(_QWORD *)(v0 + 256) + *(_QWORD *)(v0 + 480);
          v322 = *(_QWORD *)(v0 + 432);
          v317 = *(_QWORD *)(v49 + 8 * v45 + 32);
          sub_10002B2E0(v317 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v301);
          v53 = sub_1000801B8();
          sub_10002AC98(v53, v54, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          v4 = v52 + *(int *)(v289 + 36);
          v55 = v52 + *(int *)(v289 + 32);
          sub_100006710(&qword_1000FD888, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
          sub_10002B400();
          v56 = (sub_10007F34C() & 1) != 0 ? v55 : v4;
          sub_10007FCB0(v51, v56, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v295 + 16));
          sub_10002ACC4(v52, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          static Date.+ infix(_:_:)(v51, *(double *)(v320 + *(int *)(v323 + 28)));
          v1 = *(void (**)(uint64_t, uint64_t))(v295 + 8);
          sub_10007F758(v51);
          v57 = sub_10007FDFC(v322);
          v58 = v57;
          v66 = sub_10007F66C(v57, v59, v60, v61, v62, v63, v64, v65, v226, v235, v244, (uint64_t)v253, v262, (uint64_t)v271, v280, v289, v295, v301, v307,
                  v312,
                  v317);
          if ((v58 & 1) != 0)
            break;
          ++v45;
          v1(*(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 400));
          v49 = v312;
          if (v307 == v45)
          {
            v74 = sub_10007D970();
            sub_10007DBF8(v74, v75, v76, v77, v78, v79, v80, v81, v226, v235, v244, (uint64_t)v253, v262, (uint64_t)v271, v280);
            goto LABEL_35;
          }
        }
        v111 = *(_QWORD *)(v0 + 408);
        v112 = *(_QWORD *)(v0 + 280);
        v113 = sub_10007F22C(v66, v67, v68, v69, v70, v71, v72, v73, v226, v235, v244, (uint64_t)v253, v262, (uint64_t)v271, v280, v289, v295, v301, v307,
                 v312);
        v121 = sub_10007DBF8(v113, v114, v115, v116, v117, v118, v119, v120, v228, v237, v246, v255, v264, v273, v282);
        sub_10007DFD8(v121, &qword_1000FD870);
        sub_10007D294(v112, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v111 + 32));
        sub_10007D54C(v112);
LABEL_35:
        v122 = *(_QWORD *)(v0 + 400);
        v123 = *(_QWORD *)(v0 + 272);
        sub_10007D410(*(_QWORD *)(v0 + 280));
        v124 = sub_100005700(v123, 1, v122);
        sub_10007DCC8(v123);
        v125 = *(NSObject **)(v0 + 464);
        if (v124 == 1)
        {
          sub_10001D834(v280);
          v126 = sub_10001D834(v312);
          Logger.logObject.getter(v126);
          v127 = sub_100037B50();
          v128 = sub_10007DC80(v125);
          v323 = *(_QWORD *)(v0 + 400);
          v325 = *(_QWORD *)(v0 + 448);
          if (v128)
          {
            v129 = (uint8_t *)sub_10001D8D4(12);
            v322 = sub_10001D8D4(32);
            v326 = v322;
            *(_DWORD *)v129 = 136315138;
            v320 = (uint64_t)(v129 + 4);
            sub_10001D7EC();
            sub_10007D280();
            v130 = sub_10007F3D8();
            sub_10007C1D4(v130, v131);
            sub_10002B88C();
            sub_10001D9C8();
            sub_10007D510();
            v133 = sub_10007F6E0(v132, v253);
            sub_10007EDC4((uint64_t)v133, v134, (uint64_t)(v129 + 4));
            sub_10001EBB0(v312);
            sub_10001EBB0(v280);
            sub_10001E420();
            sub_10001E18C((void *)&_mh_execute_header, v125, v127, "Remaining transition candidates %s generated task wake times in the past.  Ending asset transition task", v129);
            sub_10001DBB8(v322);
            sub_10001D790(v322);
            sub_10001D790((uint64_t)v129);
            sub_10002B88C();
            sub_10001D9C8();
          }
          else
          {
            sub_10007D408(v312);
            sub_10007D408(v280);
          }

          v1(v325, v323);
          v1(*(_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 400));
          goto LABEL_45;
        }
        v135 = *(_QWORD *)(v0 + 448);
        v136 = *(_QWORD *)(v0 + 416);
        v137 = *(_QWORD *)(v0 + 400);
        v138 = *(_QWORD *)(*(_QWORD *)(v0 + 456) - 8);
        v139 = sub_10001D828(*(_QWORD *)(v138 + 64));
        sub_10007D294(v139, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v138 + 16));
        ((void (*)(uint64_t, uint64_t, uint64_t))v4)(v136, v135, v137);
        sub_10001E694();
        v140 = sub_10007FF54();
        if (!sub_10007F25C(v140))
        {

          v151 = sub_10007DA2C();
          goto LABEL_44;
        }
        v141 = *(_QWORD *)(v0 + 280);
        v142 = *(_QWORD *)(v0 + 264);
        v143 = (uint8_t *)sub_10001D8D4(12);
        *(_DWORD *)v143 = 134217984;
        v144 = sub_10002B2E0(v141, v244);
        sub_10007DFEC(v144, v145, &qword_1000FD870);
        sub_10007D3D0(v142);
        if (!v146)
        {
          v147 = *(_QWORD *)(v0 + 416);
          v148 = *(_QWORD *)(v0 + 264);
          sub_10007F46C();
          v150 = v149;
          sub_10007E248(v148);
          *(_QWORD *)(v0 + 208) = v150;
          sub_10007FF40(v235, (uint64_t)v253);
          sub_10007E248(v147);
          sub_10001E18C((void *)&_mh_execute_header, v4, v140, "Additional assets need transitioning, next task wake in %f seconds", v143);
          sub_10001D790((uint64_t)v143);

LABEL_44:
          v159 = sub_10007F22C(v151, v152, v153, v154, v155, v156, v157, v158, v226, v235, v244, (uint64_t)v253, v262, (uint64_t)v271, v280, v289, v295, v301, v307,
                   v312);
          sub_10007DBF8(v159, v160, v161, v162, v163, v164, v165, v166, v229, v238, v247, v256, v265, v274, v283);
          v167 = *(_QWORD *)(v0 + 448);
          v168 = *(_QWORD *)(v0 + 440);
          sub_100037D5C(v138);
          sub_10007E248(v167);
          sub_10007E248(v168);
          sub_10002B504();
LABEL_45:
          v169 = *(_QWORD *)(v0 + 280);
          sub_10002B2E0(v169, v262);
          sub_10007D410(v169);
          sub_10007DA38();
          goto LABEL_52;
        }
        sub_10002AD5C(*(_QWORD *)(v0 + 280), &qword_1000FD870);
        __break(1u);
        return;
      }
      Logger.logObject.getter(v50);
      v82 = sub_10007F274();
      v83 = sub_10007E154(v82);
      v324 = *(_QWORD *)(v0 + 448);
      v322 = *(_QWORD *)(v0 + 408);
      v323 = *(_QWORD *)(v0 + 400);
      if ((_DWORD)v83)
      {
        v91 = (uint8_t *)sub_10001D8D4(12);
        v92 = sub_10001D8D4(32);
        sub_10007E364(v92);
        sub_10007F91C(4.8149e-34);
        v320 = v93;
        sub_10002B2E0((uint64_t)v1, v0 + 160);
        v94 = sub_10001E1D8();
        sub_100006710(&qword_1000FB768, type metadata accessor for InferenceProviderAsset);
        v95 = sub_10001D964();
        v96 = sub_10007ED78(v95, v94);
        sub_10001D8B4();
        sub_10007EDA0(v96, v97, &v326);
        *v271 = v98;
        sub_10007E4D0((uint64_t)v271, (uint64_t)v1, v320);
        sub_100006C48();
        sub_10001E18C((void *)&_mh_execute_header, &OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, (os_log_type_t)v4, "All remaining assets that need transitioning have failed to unload or move to dynamic, %s", v91);
        sub_10001DBB8(v0 + 224);
        sub_10001D790(v0 + 224);
        v83 = sub_10001D790((uint64_t)v91);
      }
      sub_10007F22C(v83, v84, v85, v86, v87, v88, v89, v90, v226, v235, v244, (uint64_t)v253, v262, (uint64_t)v271, v280, v289, v295, v301, 0,
        v312);

      sub_10007DBF8(v99, v100, v101, v102, v103, v104, v105, v106, v227, v236, v245, v254, v263, v272, v281);
      (*(void (**)(uint64_t, uint64_t))(v322 + 8))(v324, v323);
      sub_10007E3B8(*(_QWORD *)(v0 + 440));
      v107 = sub_10007D8A4();
LABEL_51:
      sub_100005630(v107, v108, v109, v110);
LABEL_52:
      sub_10007DC00();
      sub_10002B528();
      sub_10002B4C4();
      sub_10002B70C();
      sub_10002BDF0();
      sub_10001E330();
      sub_10001D938();
      sub_10001EAC8();
      sub_10001E490();
      v178 = sub_10002B504();
      v186 = sub_10007E470(v178, v179, v180, v181, v182, v183, v184, v185, v226, v235, v244, (uint64_t)v253, v262, (uint64_t)v271, v280, v289, v295, v301);
      v194 = sub_10007DE6C(v186, v187, v188, v189, v190, v191, v192, v193, v230, v239, v248, v257, v266, v275, v284, v290, v296, v302, v307);
      v202 = sub_10007DE5C(v194, v195, v196, v197, v198, v199, v200, v201, v231, v240, v249, v258, v267, v276, v285, v291, v297, v303, v308,
               v312);
      v210 = sub_10007DE4C(v202, v203, v204, v205, v206, v207, v208, v209, v232, v241, v250, v259, v268, v277, v286, v292, v298, v304, v309,
               v313,
               v316);
      v218 = sub_10007DEA4(v210, v211, v212, v213, v214, v215, v216, v217, v233, v242, v251, v260, v269, v278, v287, v293, v299, v305, v310,
               v314,
               v318,
               v320);
      sub_10007E700(v218, v219, v220, v221, v222, v223, v224, v225, v234, v243, v252, v261, v270, v279, v288, v294, v300, v306, v311,
        v315,
        v319,
        v321,
        v322);
      swift_task_dealloc(v323);
      sub_10007DB40();
      sub_10007E038(*(uint64_t (**)(void))(v0 + 8));
      return;
    }
    v171 = *(void **)(v0 + 464);
    v172 = sub_10001EADC();
    Logger.logObject.getter(v172);
    v173 = sub_10001E9D0();
    if (sub_100039E20(v173))
    {
      v174 = (_WORD *)sub_10001D8D4(2);
      sub_10004478C(v174);
      sub_100039E4C((void *)&_mh_execute_header, v175, v176, "No more assets need to be transitioned");
      sub_10001D790(v45);
    }
    v177 = *(_QWORD *)(v0 + 448);

    sub_10007D784(v177);
    sub_10007D530();
    v107 = sub_10007D8C0();
    goto LABEL_51;
  }
  v12 = v11 - 1;
  *(_QWORD *)(v0 + 504) = v11 - 1;
  if (__OFSUB__(v11, 1))
  {
    __break(1u);
    goto LABEL_20;
  }
  v13 = sub_10007D124(v9, v10, *(_QWORD *)(v0 + 496));
  v14 = *(_QWORD *)(v0 + 496);
  if (v2)
  {
    v15 = sub_10007D8D4(v13, v14);
  }
  else
  {
    v15 = *(_QWORD *)(v14 + 8 * v12 + 32);
    sub_10001D7EC();
  }
  *(_QWORD *)(v0 + 512) = v15;
  if (*(_BYTE *)(v0 + 560) == 1)
  {
    v16 = *(_QWORD *)(v0 + 328);
    sub_10002BAF8(*(_QWORD *)(v0 + 344));
    v17 = sub_10002BCD4();
    sub_10002B26C(v16, v18, v19, v17);
    v20 = (_QWORD *)swift_task_alloc(dword_1000FD484);
    *(_QWORD *)(v0 + 520) = v20;
    *v20 = v0;
    v20[1] = sub_10006DE74;
  }
  else
  {
    v21 = *(_QWORD *)(v0 + 336);
    v22 = *(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v0 + 344) + 104);
    v23 = *(unsigned int *)(v0 + 552);
    if (*(_BYTE *)(v15 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_dynamicModeAllowed) == 1)
    {
      v22(*(_QWORD *)(v0 + 360), v23, v21);
      v24 = (_QWORD *)swift_task_alloc(dword_1000FD474);
      *(_QWORD *)(v0 + 528) = v24;
      *v24 = v0;
      v24[1] = sub_10006DF00;
      sub_10007DBEC();
      sub_10007EF94();
      sub_10005E464(v25, v26);
      return;
    }
    v27 = *(_QWORD *)(v0 + 320);
    v22(*(_QWORD *)(v0 + 352), v23, v21);
    v28 = sub_10002BCD4();
    sub_10002B26C(v27, v29, v30, v28);
    v31 = (_QWORD *)swift_task_alloc(dword_1000FD484);
    *(_QWORD *)(v0 + 536) = v31;
    *v31 = v0;
    v31[1] = sub_10006DF6C;
  }
  sub_10007DBEC();
  sub_10007EF94();
  sub_100064078(v32, v33, v34);
}

void sub_10006F1FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char isCancelled;
  uint64_t v5;
  char v6;

  v1 = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_delayedAssetTransitionTask;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_delayedAssetTransitionTask);
  if (v2)
  {
    v3 = swift_retain();
    isCancelled = swift_task_isCancelled(v3);
    swift_release(v2);
    v5 = *(_QWORD *)(v0 + v1);
    *(_QWORD *)(v0 + v1) = 0;
    swift_release(v5);
    if ((isCancelled & 1) == 0)
    {
      sub_10006F280((uint64_t (*)(uint64_t))sub_10006C4CC, sub_10007C404);
      if ((v6 & 1) != 0)
        sub_10005D5C0();
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_10006F280(uint64_t (*a1)(uint64_t), uint64_t (*a2)(uint64_t *))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;

  sub_10007F428();
  sub_10007F590();
  __chkstk_darwin(v7);
  sub_10007F7A4();
  v8 = static Date.now.getter();
  v9 = a1(v8);
  v12 = v2;
  v13 = v3;
  v10 = (uint64_t)sub_10006750C(a2, v11, v9);
  if ((unint64_t)v10 >> 62)
  {
    if (v10 >= 0)
      v10 &= 0xFFFFFFFFFFFFFF8uLL;
    _CocoaArrayWrapper.endIndex.getter(v10);
  }
  sub_10001E034();
  sub_10007E7EC(v3, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_10001E7B4();
}

uint64_t sub_10006F334(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, uint64_t);
  char v23;
  char v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29[24];

  v28 = a3;
  v4 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v26 - v12;
  v14 = *a1 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  swift_beginAccess(v14, v29, 0, 0);
  sub_10002AC98(v14, (uint64_t)v6, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  v16 = *(int *)(v4 + 32);
  v15 = *(int *)(v4 + 36);
  v27 = v4;
  v17 = &v6[v15];
  v18 = &v6[v16];
  sub_100006710(&qword_1000FD888, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  v20 = v19;
  if ((dispatch thunk of static Comparable.>= infix(_:_:)(v18, v17, v7, v19) & 1) != 0)
    v21 = v18;
  else
    v21 = v17;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v21, v7);
  sub_10002ACC4((uint64_t)v6, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  static Date.+ infix(_:_:)(v11, 30.0);
  v22 = *(void (**)(char *, uint64_t))(v8 + 8);
  v22(v11, v7);
  v23 = dispatch thunk of static Comparable.< infix(_:_:)(v13, v28, v7, v20);
  v22(v13, v7);
  if ((v23 & 1) != 0)
    v24 = *(_BYTE *)(v14 + *(int *)(v27 + 24)) ^ 1;
  else
    v24 = 1;
  return v24 & 1;
}

uint64_t sub_10006F524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v4[11] = a4;
  v5 = type metadata accessor for ContinuousClock(0);
  v4[12] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[13] = v6;
  v4[14] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ContinuousClock.Instant(0);
  v4[15] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[16] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[17] = swift_task_alloc(v9);
  v4[18] = swift_task_alloc(v9);
  v10 = sub_100002F78(&qword_1000FD870);
  v4[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  v4[20] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[21] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[22] = swift_task_alloc(v13);
  v4[23] = swift_task_alloc(v13);
  return swift_task_switch(sub_10006F618, 0, 0);
}

uint64_t sub_10006F618()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  os_log_type_t v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;

  sub_10001DB68();
  sub_10007E594();
  *(_QWORD *)(v2 + 192) = sub_1000446D4((uint64_t)"Unload Assets For Version Change", 32);
  sub_10002B2E0(v1, v0);
  v3 = sub_10007D918();
  *(_QWORD *)(v2 + 200) = v3;
  if (v3)
  {
    v4 = swift_task_alloc(dword_1000FD8B4);
    v5 = (_QWORD *)sub_10007E648(v4);
    v6 = sub_10007DA44(v5);
    return sub_10007D9C0(v6);
  }
  else
  {
    v8 = sub_10007D380();
    sub_10002AD5C(v8, &qword_1000FD870);
    sub_10002B2E0(*(_QWORD *)(v2 + 88) + 16, v2 + 40);
    v9 = sub_10008009C();
    *(_QWORD *)(v2 + 240) = v9;
    if (v9)
    {
      v10 = (_QWORD *)swift_task_alloc(dword_1000FD8BC);
      *(_QWORD *)(v2 + 248) = v10;
      sub_10002BFB4(v10, (uint64_t)sub_10006FB84);
      return sub_10007D978();
    }
    else
    {
      if (qword_1000FB108 != -1)
        swift_once(&qword_1000FB108, sub_10004D568);
      v11 = sub_10001DD64();
      sub_100037AC4(v11, (uint64_t)qword_1000FD390);
      v12 = sub_10001E9D0();
      if (sub_100039E20(v12))
      {
        v13 = (_WORD *)sub_10001D8D4(2);
        sub_10004478C(v13);
        sub_100039E4C((void *)&_mh_execute_header, v14, v15, "Ending task to unload assets due to pending version change");
        sub_10001D790(v1);
      }
      sub_10007CFEC();
      sub_10007DB9C();
      sub_10001D930();
      sub_10001EAC8();
      sub_10001E490();
      sub_10002B504();
      sub_10002B528();
      sub_10002B4C4();
      sub_10002B70C();
      return sub_10007CF2C(*(uint64_t (**)(void))(v2 + 8));
    }
  }
}

uint64_t sub_10006F784()
{
  uint64_t v0;

  sub_10001D680(*(_QWORD *)(*(_QWORD *)v0 + 208));
  sub_10001D9C0();
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_10006F7C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  os_log_type_t v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;

  sub_10007F048();
  v2 = sub_10007E8A0();
  if (v3)
  {
    sub_10002BBF0(v2, &qword_1000FD870);
    sub_10002B2E0(*(_QWORD *)(v1 + 88) + 16, v1 + 40);
    v4 = sub_10007E5BC();
    *(_QWORD *)(v1 + 240) = v4;
    if (v4)
    {
      v5 = (_QWORD *)swift_task_alloc(dword_1000FD8BC);
      *(_QWORD *)(v1 + 248) = v5;
      sub_10002BFB4(v5, (uint64_t)sub_10006FB84);
      return sub_100072A4C();
    }
    else
    {
      if (qword_1000FB108 != -1)
        swift_once(&qword_1000FB108, sub_10004D568);
      v8 = sub_10001DD64();
      sub_100037AC4(v8, (uint64_t)qword_1000FD390);
      v9 = sub_10001E9D0();
      if (sub_100039E20(v9))
      {
        v10 = (_WORD *)sub_10001D8D4(2);
        sub_10004478C(v10);
        sub_100039E4C((void *)&_mh_execute_header, v11, v12, "Ending task to unload assets due to pending version change");
        sub_10001D790(v0);
      }
      sub_10007CFEC();
      sub_10007DB9C();
      sub_10001D930();
      sub_10001EAC8();
      sub_10001E490();
      sub_10002B504();
      sub_10002B528();
      sub_10002B4C4();
      sub_10002B70C();
      return sub_10007D480(*(uint64_t (**)(void))(v1 + 8));
    }
  }
  else
  {
    sub_10007D294(*(_QWORD *)(v1 + 184), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 + 168) + 32));
    sub_100080174();
    sub_100080018();
    sub_10007F438();
    sub_10007DF98();
    sub_100080164();
    sub_10007F574();
    sub_10007E3A4();
    sub_10007E3C0((__n128)xmmword_1000CC2E0);
    v6 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep<A>(until:tolerance:clock:)[1]);
    *(_QWORD *)(v1 + 232) = v6;
    sub_100006710(&qword_1000FD880, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock);
    *v6 = v1;
    v6[1] = sub_10006F9B0;
    sub_10007DCBC();
    return sub_10007D758();
  }
}

uint64_t sub_10006F9B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  sub_10001DB50();
  a17 = v20;
  a18 = v21;
  a16 = v19;
  v22 = (_QWORD *)*v19;
  a16 = v22;
  sub_10001D788(v22[29], &a16);
  if (v18)
  {
    v23 = v22[18];
    v24 = v22[14];
    v25 = v22[13];
    sub_10001EBB8();
    sub_10001E808(v24, *(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
    sub_10007DFC8(v23);
  }
  else
  {
    sub_10007E0D0();
    sub_10007F560();
  }
  sub_100037A7C();
  return sub_10007D2A0(v26, v27, v28);
}

uint64_t sub_10006FA34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  os_log_type_t v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;

  sub_10001DB68();
  v1 = sub_10007DACC();
  sub_10007DA2C();
  if ((v1 & 1) == 0)
  {
    v2 = sub_10007D918();
    *(_QWORD *)(v0 + 200) = v2;
    if (v2)
    {
      v3 = swift_task_alloc(dword_1000FD8B4);
      v4 = (_QWORD *)sub_10007E648(v3);
      v5 = sub_10007DA44(v4);
      return sub_10007D9C0(v5);
    }
    v7 = sub_10007D380();
    sub_10002AD5C(v7, &qword_1000FD870);
  }
  sub_10002B2E0(*(_QWORD *)(v0 + 88) + 16, v0 + 40);
  v8 = sub_10007E5BC();
  *(_QWORD *)(v0 + 240) = v8;
  if (v8)
  {
    v9 = (_QWORD *)swift_task_alloc(dword_1000FD8BC);
    *(_QWORD *)(v0 + 248) = v9;
    sub_10002BFB4(v9, (uint64_t)sub_10006FB84);
    return sub_10007D978();
  }
  else
  {
    if (qword_1000FB108 != -1)
      swift_once(&qword_1000FB108, sub_10004D568);
    v10 = sub_10001DD64();
    sub_100037AC4(v10, (uint64_t)qword_1000FD390);
    v11 = sub_10001E9D0();
    if (sub_100039E20(v11))
    {
      v12 = (_WORD *)sub_10001D8D4(2);
      sub_10004478C(v12);
      sub_100039E4C((void *)&_mh_execute_header, v13, v14, "Ending task to unload assets due to pending version change");
      sub_10001D790(v1);
    }
    sub_10007CFEC();
    sub_10007DB9C();
    sub_10001D930();
    sub_10001EAC8();
    sub_10001E490();
    sub_10002B504();
    sub_10002B528();
    sub_10002B4C4();
    sub_10002B70C();
    return sub_10007CF2C(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_10006FB84()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 248));
  sub_10001D9C0();
  sub_100037A7C();
  return sub_10001D674();
}

uint64_t sub_10006FBBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;

  sub_10001DB68();
  if (qword_1000FB108 != -1)
    swift_once(&qword_1000FB108, sub_10004D568);
  v2 = sub_10001DD64();
  sub_100037AC4(v2, (uint64_t)qword_1000FD390);
  v3 = sub_10001E9D0();
  if (sub_100039E20(v3))
  {
    v4 = (_WORD *)sub_10001D8D4(2);
    sub_10004478C(v4);
    sub_100039E4C((void *)&_mh_execute_header, v5, v6, "Ending task to unload assets due to pending version change");
    sub_10001D790(v0);
  }
  sub_10007CFEC();
  sub_10007DB9C();
  sub_10001D930();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  sub_10002B4C4();
  sub_10002B70C();
  return sub_10007CF2C(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10006FC70(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2[37] = a1;
  v2[38] = v1;
  v3 = sub_100002F78(&qword_1000FD870);
  v2[39] = sub_10002B1BC(*(_QWORD *)(v3 - 8));
  v2[40] = sub_10001E784();
  v2[41] = sub_10001E784();
  v4 = sub_10007DCE8();
  v2[42] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[43] = v5;
  v2[44] = sub_10002B1BC(v5);
  v2[45] = sub_10001E784();
  v2[46] = sub_10001E784();
  v2[47] = sub_10001E784();
  v6 = sub_100002F78(&qword_1000FD7E0);
  v2[48] = sub_10001D800(*(_QWORD *)(v6 - 8));
  v7 = sub_10007D89C();
  v2[49] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[50] = v8;
  v2[51] = sub_10001D800(v8);
  v9 = sub_10007D9D8();
  v2[52] = v9;
  v2[53] = sub_10002B1BC(*(_QWORD *)(v9 - 8));
  v2[54] = sub_10001E784();
  v2[55] = sub_10001E784();
  v2[56] = sub_10001E784();
  v2[57] = sub_10001E784();
  v10 = sub_10007F428();
  v2[58] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[59] = v11;
  v2[60] = sub_10002B1BC(v11);
  v2[61] = sub_10001E784();
  v2[62] = sub_10001E784();
  v2[63] = sub_10001E784();
  v2[64] = sub_10001E784();
  v2[65] = sub_10001E784();
  sub_10001D7B8();
  return sub_10001D6DC();
}

uint64_t sub_10006FD9C()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 528) = sub_10007DCF8(*(_QWORD *)(v0 + 304));
  return sub_10001D674();
}

uint64_t sub_10006FDDC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 304);
  *(_BYTE *)(v0 + 608) = *(_BYTE *)(**(_QWORD **)(v0 + 528)
                                  + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_assetsHaveUpdated);
  return sub_10001D948((uint64_t)sub_10006FE08, v1);
}

void sub_10006FE08()
{
  uint8_t *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  os_log_type_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  _WORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  os_log_type_t v145;
  _WORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  BOOL v165;
  uint64_t v166;
  uint64_t (*v167)(uint64_t);
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v175;
  uint64_t v176;
  char v177;
  void (*v178)(uint64_t);
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char v204;
  uint64_t v205;
  char v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  NSObject *v242;
  void (*v243)(uint64_t);
  uint64_t v244;
  char v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  NSObject *v262;
  uint64_t v263;
  os_log_type_t v264;
  _BOOL4 v265;
  uint8_t *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  NSObject *v283;
  uint64_t v284;
  os_log_type_t v285;
  _BOOL4 v286;
  uint8_t *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  _QWORD *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  os_log_type_t v308;
  uint64_t v309;
  uint64_t v310;
  uint8_t *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  void (*v326)(uint64_t, uint64_t);
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  NSObject *v342;
  uint64_t v343;
  uint64_t v344;
  os_log_type_t v345;
  _WORD *v346;
  _QWORD *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  char *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  _QWORD *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  _QWORD *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  _QWORD *v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  _QWORD *v497;
  uint64_t v498[11];

  v4 = (_QWORD *)v3;
  if (*(_BYTE *)(v3 + 608) != 1)
  {
    if (qword_1000FB108 != -1)
      swift_once(&qword_1000FB108, sub_10004D568);
    v32 = sub_10001DD64();
    sub_100037AC4(v32, (uint64_t)qword_1000FD390);
    v33 = sub_10001E9D0();
    if (sub_10007DA7C(v33))
    {
      v34 = (_WORD *)sub_10001D8D4(2);
      sub_10007FAFC(v34);
      sub_100044580((void *)&_mh_execute_header, v1, (os_log_type_t)v3, "While unloading assets for pending version change: version change is no longer pending, not unloading", v0);
      sub_10001D790((uint64_t)v0);
    }
    v35 = *(_QWORD *)(v3 + 464);

    sub_10007F8CC();
    v39 = v35;
LABEL_26:
    sub_100005630(v36, v37, v38, v39);
LABEL_27:
    v409 = v4[53];
    v425 = v4[51];
    sub_10008005C();
    v439 = v41;
    v452 = v40;
    sub_100080050();
    v464 = v43;
    v472 = v42;
    v479 = v4[44];
    v486 = v4[41];
    sub_10007F5F8(v44);
    sub_10002B4C4();
    sub_10002B70C();
    sub_10002BDF0();
    sub_10001E330();
    sub_10002B528();
    sub_10001D938();
    sub_10001EAC8();
    sub_10001E490();
    v45 = sub_10002B504();
    v53 = sub_10007FC24(v45, v46, v47, v48, v49, v50, v51, v52, v348, v360, v372, v384, (uint64_t)v396, v409);
    v61 = sub_10007ED40(v53, v54, v55, v56, v57, v58, v59, v60, v349, v361, v373, v385, v397, v410, v425);
    v69 = sub_10007EDA8(v61, v62, v63, v64, v65, v66, v67, v68, v350, v362, v374, v386, v398, v411, v426, v439);
    v77 = sub_10007EAD0(v69, v70, v71, v72, v73, v74, v75, v76, v351, v363, v375, v387, v399, v412, v427, v440, v452);
    v85 = sub_10007E470(v77, v78, v79, v80, v81, v82, v83, v84, v352, v364, v376, v388, v400, v413, v428, v441, v453, v464);
    v93 = sub_10007DE6C(v85, v86, v87, v88, v89, v90, v91, v92, v353, v365, v377, v389, v401, v414, v429, v442, v454, v465, v472);
    v101 = sub_10007DE5C(v93, v94, v95, v96, v97, v98, v99, v100, v354, v366, v378, v390, v402, v415, v430, v443, v455, v466, v473,
             v479);
    v109 = sub_10007DE4C(v101, v102, v103, v104, v105, v106, v107, v108, v355, v367, v379, v391, v403, v416, v431, v444, v456, v467, v474,
             v480,
             v486);
    v117 = sub_10007E700(v109, v110, v111, v112, v113, v114, v115, v116, v356, v368, v380, v392, v404, v417, v432, v445, v457, v468, v475,
             v481,
             v487,
             (uint64_t)v492,
             v494);
    sub_10007EE54(v117, v118, v119, v120, v121, v122, v123, v124, v357, v369, v381, v393, v405, v418, v433, v446, v458, v469, v476,
      v482,
      v488,
      v493,
      v495,
      v496);
    sub_10007E134((uint64_t (*)(void))v4[1]);
    return;
  }
  if (qword_1000FB108 != -1)
    goto LABEL_30;
  while (1)
  {
    v5 = sub_10001DD64();
    v4[67] = v5;
    v4[68] = sub_100002FF8(v5, (uint64_t)qword_1000FD390);
    sub_1000490A8();
    v6 = sub_1000449A8();
    if (sub_10007E39C(v2))
    {
      v7 = (_WORD *)sub_10001D8D4(2);
      sub_10007FAFC(v7);
      sub_100044580((void *)&_mh_execute_header, v2, v6, "Unloading assets for pending version change", v0);
      sub_10001D790((uint64_t)v0);
    }
    v8 = v4[65];
    v0 = (uint8_t *)v4[64];

    v408 = _swiftEmptySetSingleton;
    v4[34] = _swiftEmptySetSingleton;
    static Date.now.getter();
    static Date.- infix(_:_:)(v8, 30.0);
    sub_10004E578();
    v2 = v9;
    v10 = sub_10007DB04();
    *(_QWORD *)(v10 + 16) = v0;
    v498[0] = (uint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v2 >> 62)
      break;
    v11 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v11)
      goto LABEL_35;
LABEL_7:
    v12 = 0;
    v451 = v4[59];
    v463 = (uint64_t)(v4 + 5);
    v424 = v10;
    v438 = v4[52];
    v492 = v4;
    v494 = v2 & 0xC000000000000001;
    v478 = v2;
    v485 = v2 & 0xFFFFFFFFFFFFFF8;
    v471 = v11;
    while (1)
    {
      if (v494)
      {
        v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v2);
      }
      else
      {
        if (v12 >= *(_QWORD *)(v485 + 16))
          goto LABEL_29;
        v13 = *(_QWORD *)(v2 + 8 * v12 + 32);
        sub_10001E8B0();
      }
      v14 = v12 + 1;
      if (__OFADD__(v12, 1))
        break;
      v0 = (uint8_t *)v4[63];
      v496 = v4[64];
      v16 = v4[57];
      v15 = v4[58];
      v17 = v13 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
      sub_10002B2E0(v13 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v463);
      sub_10002AC98(v17, v16, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v18 = v16 + *(int *)(v438 + 36);
      v19 = v16 + *(int *)(v438 + 32);
      sub_100006710(&qword_1000FD888, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
      v21 = v20;
      v22 = sub_10007FAF0();
      if ((dispatch thunk of static Comparable.>= infix(_:_:)(v22, v23, v15, v21) & 1) != 0)
        v24 = v19;
      else
        v24 = v18;
      sub_10007E954((uint64_t)v0, v24, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v451 + 16));
      sub_10007F888();
      v28 = dispatch thunk of static Comparable.< infix(_:_:)(v25, v26, v27, v21);
      (*(void (**)(uint8_t *, uint64_t))(v451 + 8))(v0, v15);
      sub_10002ACC4(v16, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      if ((v28 & 1) != 0)
      {
        sub_10007D970();
      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v29);
        v30 = *(_QWORD *)(v498[0] + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v30);
        v31 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30, v13);
        specialized ContiguousArray._endMutation()(v31);
      }
      v2 = v478;
      ++v12;
      v4 = v492;
      if (v14 == v471)
      {
        v125 = (_QWORD *)v498[0];
        goto LABEL_36;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    swift_once(&qword_1000FB108, sub_10004D568);
  }
  if (v2 < 0)
    v126 = v2;
  else
    v126 = v2 & 0xFFFFFFFFFFFFFF8;
  v11 = _CocoaArrayWrapper.endIndex.getter(v126);
  if (v11)
    goto LABEL_7;
LABEL_35:
  v125 = _swiftEmptyArrayStorage;
LABEL_36:
  sub_10001EADC();
  sub_10001E490();
  sub_10000B83C((uint64_t)v125);
  v128 = (unint64_t)sub_10005CE8C(v127);
  v4[69] = v128;
  sub_100049010();
  if (v128 >> 62)
  {
    sub_10001E338();
    v129 = sub_1000801FC();
    sub_10001E034();
  }
  else
  {
    v129 = *(_QWORD *)((v128 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v129)
  {
    v143 = (void *)v4[68];
    v144 = swift_bridgeObjectRelease(v4[69]);
    Logger.logObject.getter(v144);
    v145 = sub_10001E9D0();
    if (sub_100039E20(v145))
    {
      v146 = (_WORD *)sub_10001D8D4(2);
      sub_10004478C(v146);
      sub_100039E4C((void *)&_mh_execute_header, v147, v148, "Finished unloading assets for version change");
      sub_10001D790(v2);
    }
    v149 = v4[38];

    sub_10002B2E0(v149 + 120, (uint64_t)(v4 + 11));
    v150 = v4[38];
    if ((*(_QWORD *)(v149 + 120) & 0xC000000000000001) == 0)
    {
      sub_10007E904();
      v218 = sub_10001E338();
      v217 = sub_10007E5B0(v218, v150, (uint64_t (*)(uint64_t))sub_10004EA8C);
LABEL_84:
      v219 = swift_bridgeObjectRetain(v217);
      v220 = sub_10001B1A0(v219);
      sub_10001DEEC();
      v498[0] = (uint64_t)v220;
      sub_10007E058(v498, (uint64_t (*)(uint64_t, uint64_t))sub_10004E574);
      if (v2)
      {
        sub_10007E114(v498[0]);
        return;
      }
      v492 = v4;
      sub_10001DEEC();
      v167 = (uint64_t (*)(uint64_t))v498[0];
      if ((v498[0] & 0x8000000000000000) == 0 && (v498[0] & 0x4000000000000000) == 0)
      {
        if (!*(_QWORD *)(v498[0] + 16))
        {
LABEL_117:
          v342 = v492[68];
          v343 = v492[34];
          sub_10001D930();
          v344 = sub_100049010();
          Logger.logObject.getter(v344);
          v345 = sub_10001E9D0();
          if (sub_10007DA7C(v345))
          {
            v346 = (_WORD *)sub_10001D8D4(2);
            sub_10007FAFC(v346);
            sub_100044580((void *)&_mh_execute_header, v342, (os_log_type_t)v343, "While unloading assets for pending version change: no more assets can be unloaded, attempting version switch", (uint8_t *)v167);
            sub_10001D790((uint64_t)v167);
          }

          sub_10007FCF0(&dword_1000FB720);
          sub_10007E904();
          v347 = (_QWORD *)sub_10001EBC0();
          v492[74] = v347;
          *v347 = v492;
          v347[1] = sub_100071C80;
          sub_10007E134((uint64_t (*)(void))v496);
          return;
        }
        goto LABEL_89;
      }
LABEL_116:
      v340 = sub_10002B400();
      v341 = _CocoaArrayWrapper.endIndex.getter(v340);
      sub_10001D930();
      if (!v341)
        goto LABEL_117;
LABEL_89:
      sub_10006C19C((int64_t)v167);
      v459 = sub_10007A058(v492[34], v221, v222);
      v224 = v223;
      sub_10001E034();
      v494 = v224;
      v489 = *(_QWORD *)(v224 + 16);
      if (v489)
      {
        v396 = (char *)(v492 + 20);
        v434 = (uint64_t)(v492 + 36);
        v447 = (uint64_t)(v492 + 2);
        v477 = v492[59];
        v483 = (uint64_t)(v492 + 14);
        v420 = (uint64_t)(v492 + 35);
        v470 = v492[52];
        sub_10002B26C(v492[41], v225, v226, v492[58]);
        v227 = v224;
        sub_10007D280();
        swift_retain();
        v228 = 0;
        v167 = (uint64_t (*)(uint64_t))v492;
        while (1)
        {
          if (v228 >= *(_QWORD *)(v227 + 16))
            goto LABEL_115;
          v496 = v492[65];
          v229 = v492[61];
          v230 = v492[62];
          v231 = v492[58];
          v232 = v492[53];
          sub_10002B2E0(*(_QWORD *)(v227 + 8 * v228 + 32)+ OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v483);
          v233 = sub_10001E4C8();
          sub_10002AC98(v233, v234, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          v235 = v232 + *(int *)(v470 + 36);
          v236 = v232 + *(int *)(v470 + 32);
          sub_100006710(&qword_1000FD888, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
          v238 = v237;
          sub_10001DAE8();
          v239 = sub_10007FF48();
          v241 = (dispatch thunk of static Comparable.>= infix(_:_:)(v239, v240, v231, v238) & 1) != 0 ? v236 : v235;
          v242 = *(NSObject **)(v477 + 16);
          ((void (*)(uint64_t, uint64_t, uint64_t))v242)(v229, v241, v231);
          sub_10002ACC4(v232, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          sub_10007FDBC(30.0);
          v243 = *(void (**)(uint64_t))(v477 + 8);
          v244 = sub_10007E4F0();
          v243(v244);
          v245 = static Date.> infix(_:_:)(v230, v496);
          v246 = sub_10001DBEC();
          if ((v245 & 1) != 0)
            break;
          ++v228;
          ((void (*)(_QWORD, _QWORD))v243)(v492[62], v492[58]);
          v227 = v494;
          if (v489 == v228)
          {
            v254 = sub_10002B88C();
            sub_10007EAC8(v254, v255, v256, v257, v258, v259, v260, v261, v348, v360, v372, v384, (uint64_t)v396, v420, v434, v447, v459);
            goto LABEL_101;
          }
        }
        v229 = v492[59];
        v273 = v492[41];
        v274 = sub_10007F7E0(v246, v247, v248, v249, v250, v251, v252, v253, v348, v360, v372, v384, (uint64_t)v396, v420, v434, v447, v459, v470, v477,
                 v483,
                 v489,
                 (uint64_t)v492,
                 v494);
        v282 = sub_10007EAC8(v274, v275, v276, v277, v278, v279, v280, v281, v358, v370, v382, v394, v406, v422, v436, v449, v461);
        sub_10007DCF0(v282, &qword_1000FD870);
        sub_10007EA10(v273, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v229 + 32));
        sub_10007F458();
LABEL_101:
        sub_10007E95C(v492[41]);
        sub_10007F0E0();
        v283 = v492[68];
        if ((_DWORD)v229 == 1)
        {
          sub_10001D834(v494);
          v284 = sub_10001D834(v460);
          Logger.logObject.getter(v284);
          v285 = sub_100037B50();
          v286 = sub_10002B3F8(v283);
          v496 = v492[65];
          v491 = v492[58];
          if (v286)
          {
            v287 = (uint8_t *)sub_10001D8D4(12);
            v288 = sub_10001D8D4(32);
            v498[0] = v288;
            *(_DWORD *)v287 = 136315138;
            sub_10001D7EC();
            v289 = sub_10001E20C();
            v290 = sub_10007C1D4(v289, v494);
            sub_10001D9C8();
            sub_10001E098();
            sub_10007D73C(v290, v291, v498);
            v300 = sub_10007FED0(v292, v293, v294, v295, v296, v297, v298, v299, v348, v360, v372, v384, (uint64_t)v396, v421);
            sub_10007EDC4((uint64_t)v300, v301, v302);
            sub_10001EBB0(v494);
            sub_10001EBB0(v460);
            sub_10001E8A8();
            sub_10001E18C((void *)&_mh_execute_header, v283, v285, "While unloading assets for pending version change: remaining candidates %s generated task wake times in the past.  Ending task", v287);
            sub_10001DBB8(v288);
            sub_10001D790(v288);
            sub_10001D790((uint64_t)v287);
            sub_10001D9C8();
            sub_10001E098();
          }
          else
          {
            sub_10007D408(v494);
            sub_10007D408(v460);
          }

          ((void (*)(uint64_t, uint64_t))v243)(v496, v491);
          ((void (*)(_QWORD, _QWORD))v243)(v492[64], v492[58]);
        }
        else
        {
          v303 = v492[65];
          v304 = v492[60];
          v305 = v492[58];
          v306 = *(_QWORD *)(v492[67] - 8);
          v307 = sub_10001D828(*(_QWORD *)(v306 + 64));
          v496 = v306;
          sub_10007EA10(v307, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v306 + 16));
          ((void (*)(uint64_t, uint64_t, uint64_t))v242)(v304, v303, v305);
          sub_100044AF0();
          v308 = sub_10007F274();
          if (os_log_type_enabled(v242, v308))
          {
            v309 = v492[41];
            v310 = v492[39];
            v311 = (uint8_t *)sub_10001D8D4(12);
            *(_DWORD *)v311 = 134217984;
            v312 = sub_10002B2E0(v309, (uint64_t)v396);
            sub_10007DFEC(v312, v313, &qword_1000FD870);
            sub_10007D3D0(v310);
            if (v165)
            {
              sub_10002AD5C(v492[41], &qword_1000FD870);
              __break(1u);
              return;
            }
            sub_10007F46C();
            v315 = v314;
            v316 = sub_100037FBC();
            v243(v316);
            v492[36] = v315;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v435, v492 + 37);
            v317 = sub_10002BF40();
            v243(v317);
            sub_10001E18C((void *)&_mh_execute_header, v242, v308, "While unloading assets for pending version change: additional assets need unloading, next task wake in %f seconds", v311);
            sub_10001D790((uint64_t)v311);

          }
          else
          {

            v327 = sub_10007F54C();
            v318 = ((uint64_t (*)(uint64_t))v243)(v327);
          }
          v328 = sub_10007F7E0(v318, v319, v320, v321, v322, v323, v324, v325, v348, v360, v372, v384, (uint64_t)v396, (uint64_t)v421, v435, v448, v460, v470, v477,
                   v483,
                   v489,
                   (uint64_t)v492,
                   v494);
          sub_10007EAC8(v328, v329, v330, v331, v332, v333, v334, v335, v359, v371, v383, v395, v407, v423, v437, v450, v462);
          v336 = v492[64];
          v337 = v492[58];
          sub_10007F374(v306);
          v338 = sub_10002BE5C();
          v243(v338);
          ((void (*)(uint64_t, uint64_t))v243)(v336, v337);
          sub_10002B528();
        }
        v4 = v492;
        v339 = v492[41];
        sub_10002B2E0(v339, v448);
        sub_10007E95C(v339);
        sub_10007E5D4();
        goto LABEL_27;
      }
      v262 = v492[68];
      sub_10001D834(v459);
      v263 = sub_10001D834(v224);
      Logger.logObject.getter(v263);
      v264 = sub_10001E9D0();
      v265 = sub_10007DA7C(v264);
      v496 = v492[65];
      v484 = v492[59];
      v490 = v492[58];
      if (v265)
      {
        v266 = (uint8_t *)sub_10001D8D4(12);
        v267 = sub_10001D8D4(32);
        v498[0] = v267;
        *(_DWORD *)v266 = 136315138;
        sub_10001E8B0();
        sub_10002B400();
        v268 = sub_10007FF38(v459);
        sub_10001D930();
        sub_10007D970();
        sub_10007E898(v268, v269, v498);
        v271 = sub_10007F1F8(v270, v492 + 33);
        sub_10007E4D0((uint64_t)v271, (uint64_t)(v492 + 34), v272);
        sub_10001EBB0(v224);
        sub_10001EBB0(v459);
        sub_10001E4C0();
        sub_10001E18C((void *)&_mh_execute_header, v262, (os_log_type_t)v224, "While unloading assets for pending version change: all remaining assets failed to unload, %s", v266);
        sub_10001DBB8(v267);
        sub_10001D790(v267);
        sub_10001D790((uint64_t)v266);
        sub_10001D930();
        sub_10007D970();
      }
      else
      {
        sub_10007D408(v224);
        sub_10007D408(v459);
      }

      v326 = *(void (**)(uint64_t, uint64_t))(v484 + 8);
      v326(v496, v490);
      v4 = v492;
      v326(v492[64], v492[58]);
      v36 = sub_1000801E8();
      goto LABEL_26;
    }
    v497 = _swiftEmptySetSingleton;
    sub_10001D834(v150);
    sub_10001E338();
    v494 = sub_1000800BC();
    v151 = sub_10007DADC();
    if (!v151)
      goto LABEL_82;
    v152 = v151;
    v153 = (uint64_t)(v4 + 17);
    v471 = (uint64_t)(v4 + 27);
    v478 = (uint64_t)(v4 + 25);
    v496 = v4[52];
    v154 = v4[43];
    v360 = (uint64_t)(v4 + 29);
    v372 = (uint64_t)(v4 + 23);
    v463 = (uint64_t)(v4 + 31);
    LODWORD(v451) = enum case for LoadState.loaded(_:);
    v155 = v4 + 32;
    v424 = sub_10001E1D8();
    v408 = _swiftEmptySetSingleton;
    v396 = (char *)&type metadata for Swift.AnyObject + 8;
    v485 = (uint64_t)(v4 + 17);
    v492 = v4;
    v438 = (uint64_t)(v4 + 32);
LABEL_50:
    v156 = v4[45];
    v157 = v4[42];
    v4[31] = v152;
    sub_10002B4BC((uint64_t)v155, v463, (uint64_t)v396, v424);
    v158 = v4[32] + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    sub_10002B308(v158, v153, 33);
    sub_10001DE08(v156, v451, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v154 + 104));
    sub_100006710(&qword_1000FD7E8, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState);
    sub_10007E6A0(v157);
    sub_10007E6A0(v157);
    v159 = v4;
    v160 = v4[27];
    v161 = v4[28];
    v162 = v159[25];
    v164 = v159[44];
    v163 = v159[45];
    v165 = v160 == v162 && v161 == v159[26];
    if (v165)
    {
      sub_10002BA68(v161);
      v184 = sub_10007FAF0();
      v167 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState;
      sub_10007DD78(v184, v185);
      sub_10007F124(v164, v163, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v154 + 16));
      v4 = v492;
    }
    else
    {
      HIDWORD(v384) = sub_10001DB04(v160, v161, v162, v159[26]);
      sub_10001E420();
      sub_10001DA38();
      v166 = sub_10007FAF0();
      v167 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState;
      sub_10007DD78(v166, v168);
      sub_10007F124(v164, v163, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v154 + 16));
      v4 = v492;
      if ((v384 & 0x100000000) == 0)
      {
        v169 = v492[42];
        sub_10007E6A0(v169);
        sub_10007E6A0(v169);
        v170 = v492[23];
        v171 = v492[24];
        v172 = v492[29];
        v173 = v492[30];
        if (v170 != v172 || v171 != v173)
        {
          v175 = v492[56];
          v176 = v492[44];
          v177 = sub_10001DB04(v170, v171, v172, v173);
          sub_10001E034();
          sub_100049010();
          v178 = *(void (**)(uint64_t))(v154 + 8);
          sub_100037ECC(v176);
          v179 = v175;
          v167 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState;
          sub_10007DCD0(v179);
          v180 = sub_10007F9B0();
          v4 = v492;
          v178(v180);
          v181 = sub_10007FAF0();
          sub_10007DD78(v181, v182);
          if ((v177 & 1) == 0)
          {
            v183 = v492[54];
            sub_10007DCD0(v492[55]);
            sub_10007DD78(v158, v183);
            v155 = (_QWORD *)v438;
LABEL_64:
            sub_10007DCD0(v4[54]);
            v153 = v485;
            sub_10007D744();
LABEL_66:
            swift_release(*v155);
            goto LABEL_67;
          }
LABEL_63:
          v190 = v4[54];
          v189 = v4[55];
          v191 = *(_QWORD *)(*(_QWORD *)(v189 + *(int *)(v496 + 48)) + 16);
          sub_10007DCD0(v189);
          sub_10007DD78(v158, v190);
          v155 = (_QWORD *)v438;
          if (v191)
            goto LABEL_64;
          sub_10007F614();
          sub_10007DCD0(v192);
          v153 = v485;
          sub_10007D744();
          if (v190)
            goto LABEL_66;
          v194 = *(_QWORD *)v438;
          sub_10007EA38();
          if (!(!v165 & v204))
          {
            sub_10007FD7C();
            v203 = (uint64_t)v497;
          }
          sub_10007FDC8(v195, v196, v197, v198, v199, v200, v201, v202, v348, v360, v372, v384, (uint64_t)v396, v203, v424, v438, v451, v463, v471,
            v478,
            v485,
            (uint64_t)v492,
            v494,
            v496,
            (uint64_t)v497,
            v498[0]);
          sub_10008B000();
          Hasher._finalize()();
          sub_10007CEF0();
          if (!v165)
          {
            sub_10001E178();
            goto LABEL_80;
          }
          sub_10001EB2C();
          while (1)
          {
            sub_10007DA8C();
            if (v165 && (v206 & 1) != 0)
              break;
            sub_10007DB48();
            sub_10001E62C();
            if (!v165)
            {
              sub_10001E154();
LABEL_80:
              sub_10007DC38(v205);
              *(_QWORD *)(v207 + 8 * v208) = v194;
              sub_10007DC88();
LABEL_67:
              v152 = __CocoaSet.Iterator.next()(v193);
              if (!v152)
              {
LABEL_82:
                v209 = sub_10001EBB0(v4[38]);
                sub_10007F7E0(v209, v210, v211, v212, v213, v214, v215, v216, v348, v360, v372, v384, (uint64_t)v396, (uint64_t)v408, v424, v438, v451, v463, v471,
                  v478,
                  v485,
                  (uint64_t)v492,
                  v494);
                v2 = 0;
                v217 = v419;
                goto LABEL_84;
              }
              goto LABEL_50;
            }
          }
          __break(1u);
LABEL_115:
          __break(1u);
          goto LABEL_116;
        }
        sub_10002BA68(v492[24]);
        v167 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState;
      }
    }
    v187 = v4[55];
    v186 = v4[56];
    v188 = v4[45];
    sub_10007E248(v4[44]);
    sub_10007DCD0(v186);
    sub_10007E248(v188);
    sub_10007DD78(v158, v187);
    goto LABEL_63;
  }
  *((_DWORD *)v4 + 150) = enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.assetVersionChange(_:);
  *((_DWORD *)v4 + 151) = enum case for LoadState.loaded(_:);
  v130 = v129 - 1;
  v4[70] = v129 - 1;
  if (__OFSUB__(v129, 1))
  {
    __break(1u);
    goto LABEL_82;
  }
  v131 = v4[69] & 0xC000000000000001;
  v132 = sub_10007D288();
  v133 = v4[69];
  if (v131)
  {
    v134 = sub_10007D8D4(v132, v133);
  }
  else
  {
    v134 = *(_QWORD *)(v133 + 8 * v130 + 32);
    sub_10002B400();
  }
  v4[71] = v134;
  v135 = v4[48];
  sub_10002BAF8(v4[50]);
  v136 = sub_10002BCD4();
  sub_10002B26C(v135, v137, v138, v136);
  v139 = (_QWORD *)swift_task_alloc(dword_1000FD484);
  v4[72] = v139;
  *v139 = v4;
  v139[1] = sub_100070F44;
  v140 = sub_10001E2B4();
  sub_10007E08C(v140, v141, v142);
}

uint64_t sub_100070F44()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  sub_100037EFC();
  sub_10001E538();
  sub_10001EA4C(v2);
  *(_QWORD *)(v1 + 584) = v0;
  v4 = swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10001EBB8();
  sub_10007D78C(v4, &qword_1000FD7E0);
  sub_10007D020();
  sub_10007E854();
  return sub_10001D6DC();
}

#error "100071060: call analysis failed (funcsize=782)"

uint64_t sub_100071C80()
{
  uint64_t v0;

  sub_10001DB38();
  sub_10001D680(*(_QWORD *)(v0 + 592));
  sub_10001D9C0();
  sub_10001D7B8();
  return sub_10001D674();
}

uint64_t sub_100071CBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;

  v1 = *(_QWORD *)(v0 + 464);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 472) + 8))(*(_QWORD *)(v0 + 520), v1);
  sub_10007DA2C();
  sub_10007F8CC();
  sub_100005630(v2, v3, v4, v1);
  sub_10007DC98();
  v94 = v6;
  v103 = v5;
  sub_10008005C();
  v111 = v8;
  v118 = v7;
  sub_100080050();
  v124 = v10;
  v130 = v9;
  sub_10007F184();
  swift_task_dealloc(v11);
  sub_10002B70C();
  sub_10002BDF0();
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  v12 = sub_10002B4C4();
  v20 = sub_1000446EC(v12, v13, v14, v15, v16, v17, v18, v19, v85, v94);
  v28 = sub_1000449D4(v20, v21, v22, v23, v24, v25, v26, v27, v86, v95, v103);
  sub_10007F17C(v28, v29, v30, v31, v32, v33, v34, v35, v87, v96, v104, v111);
  v36 = swift_task_dealloc(v118);
  v44 = sub_10007FC24(v36, v37, v38, v39, v40, v41, v42, v43, v88, v97, v105, v112, v118, v124);
  v52 = sub_10007ED40(v44, v45, v46, v47, v48, v49, v50, v51, v89, v98, v106, v113, v119, v125, v130);
  v60 = sub_10007EDA8(v52, v53, v54, v55, v56, v57, v58, v59, v90, v99, v107, v114, v120, v126, v131, v135);
  v68 = sub_10007EAD0(v60, v61, v62, v63, v64, v65, v66, v67, v91, v100, v108, v115, v121, v127, v132, v136, v139);
  v76 = sub_10007E470(v68, v69, v70, v71, v72, v73, v74, v75, v92, v101, v109, v116, v122, v128, v133, v137, v140, v142);
  sub_10007DE6C(v76, v77, v78, v79, v80, v81, v82, v83, v93, v102, v110, v117, v123, v129, v134, v138, v141, v143, v144);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100071DA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  void (*v102)(uint64_t, uint64_t);
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  NSObject *v112;
  uint64_t v113;
  os_log_type_t v114;
  _BOOL4 v115;
  uint8_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  NSObject *v133;
  uint64_t v134;
  os_log_type_t v135;
  _BOOL4 v136;
  uint8_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint8_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  void *v266;
  uint64_t v267;
  os_log_type_t v268;
  _WORD *v269;
  uint64_t v270;
  uint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  _QWORD *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  _QWORD *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  _QWORD *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t (*v433)(void);
  uint64_t v434;
  _QWORD *v435;
  uint64_t v436[11];

  v3 = *(_QWORD *)(v0 + 368);
  v2 = *(_QWORD *)(v0 + 376);
  v4 = *(_QWORD *)(v0 + 336);
  v5 = *(_QWORD *)(v0 + 344);
  sub_10002B2E0(*(_QWORD *)(v0 + 568) + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v0 + 64);
  sub_10007D794(v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
  sub_10007D7E4(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 104));
  v6 = sub_10007EBB0();
  v7 = *(_QWORD *)(v5 + 8);
  sub_10007D5F4(v3);
  sub_10007D5F4(v2);
  if ((v6 & 1) != 0)
  {
    v6 = v0 + 272;
    sub_100012818(v436, *(_QWORD *)(v0 + 568));
    v8 = v436[0];
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 568);
  }
  swift_release(v8);
  v11 = *(_QWORD *)(v0 + 560);
  if (v11)
  {
    v12 = v11 - 1;
    *(_QWORD *)(v0 + 560) = v11 - 1;
    if (__OFSUB__(v11, 1))
    {
      __break(1u);
      goto LABEL_47;
    }
    v13 = sub_10007D124(v9, v10, *(_QWORD *)(v0 + 552));
    v14 = *(_QWORD *)(v0 + 552);
    if (v0 == -272)
    {
      v15 = *(_QWORD *)(v14 + 8 * v12 + 32);
      sub_10001D7EC();
    }
    else
    {
      v15 = sub_10007D8D4(v13, v14);
    }
    *(_QWORD *)(v0 + 568) = v15;
    v16 = *(_QWORD *)(v0 + 384);
    sub_10002BAF8(*(_QWORD *)(v0 + 400));
    v17 = sub_10002BCD4();
    sub_10002B26C(v16, v18, v19, v17);
    v20 = (_QWORD *)swift_task_alloc(dword_1000FD484);
    *(_QWORD *)(v0 + 576) = v20;
    *v20 = v0;
    v20[1] = sub_100070F44;
    v21 = sub_10007DBEC();
    sub_10007E08C(v21, v22, v23);
    return;
  }
  v24 = sub_10007FE9C();
  Logger.logObject.getter(v24);
  v25 = sub_10001E9D0();
  if (sub_10002B3F8(v6))
  {
    v4 = sub_10001D8D4(2);
    *(_WORD *)v4 = 0;
    sub_100044580((void *)&_mh_execute_header, v6, v25, "Finished unloading assets for version change", (uint8_t *)v4);
    sub_10001D790(v4);
  }
  v26 = *(_QWORD *)(v0 + 304);

  sub_10002B2E0(v26 + 120, v0 + 88);
  v27 = *(_QWORD *)(v26 + 120);
  v28 = *(_QWORD *)(v0 + 304);
  if ((v27 & 0xC000000000000001) != 0)
  {
    v297 = _swiftEmptySetSingleton;
    v435 = _swiftEmptySetSingleton;
    sub_10001D834(v28);
    sub_10001E338();
    v406 = sub_10007EEDC();
    if (!sub_10007DADC())
      goto LABEL_47;
    sub_10007FAB0();
    v387 = v29;
    v397 = v30;
    v273 = v0 + 232;
    v285 = v31;
    v374 = v0 + 248;
    v430 = (_QWORD *)(v0 + 256);
    v415 = *(_QWORD *)(v0 + 416);
    v32 = *(_QWORD *)(v0 + 344);
    LODWORD(v360) = enum case for LoadState.loaded(_:);
    v345 = sub_10001E1D8();
    v297 = _swiftEmptySetSingleton;
    v321 = v7;
    v333 = (_QWORD *)((char *)&type metadata for Swift.AnyObject + 8);
LABEL_15:
    v33 = *(_QWORD *)(v0 + 360);
    *(_QWORD *)(v0 + 248) = v27;
    sub_10002B4BC((uint64_t)v430, v374, (uint64_t)v333, v345);
    v34 = *(_QWORD *)(v0 + 256) + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    sub_10002B308(v34, v7, 33);
    sub_10007DB54(v33, v360, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 104));
    sub_100006710(&qword_1000FD7E8, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState);
    v433 = (uint64_t (*)(void))v34;
    sub_10007D35C();
    sub_10007D35C();
    v35 = *(_QWORD *)(v0 + 216);
    v36 = *(_QWORD *)(v0 + 224);
    v37 = v32;
    v38 = *(_QWORD *)(v0 + 200);
    v39 = *(_QWORD *)(v0 + 208);
    v40 = *(_QWORD *)(v0 + 448);
    v41 = *(_QWORD *)(v0 + 352);
    v424 = *(_QWORD *)(v0 + 360);
    v42 = v35 == v38 && v36 == v39;
    if (v42)
    {
      sub_10002BA68(v36);
      sub_10007DA98((uint64_t)v433, v40);
      sub_10001EB74(v41, v424, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 16));
      v32 = v37;
    }
    else
    {
      LODWORD(v309) = sub_10001DB04(v35, v36, v38, v39);
      sub_10001E8A8();
      sub_10001E420();
      sub_10007DA98((uint64_t)v433, v40);
      sub_10001EB74(v41, v424, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 16));
      v32 = v37;
      if ((v309 & 1) == 0)
      {
        sub_10007EE94();
        sub_10007D35C();
        sub_10007D35C();
        v43 = *(_QWORD *)(v0 + 184);
        v44 = *(_QWORD *)(v0 + 192);
        v45 = *(_QWORD *)(v0 + 232);
        v46 = *(_QWORD *)(v0 + 240);
        if (v43 != v45 || v44 != v46)
        {
          v48 = *(_QWORD *)(v0 + 448);
          v424 = *(_QWORD *)(v0 + 440);
          v49 = *(_QWORD *)(v0 + 352);
          v309 = *(_QWORD *)(v0 + 360);
          v50 = *(_QWORD *)(v0 + 336);
          v4 = sub_10001DB04(v43, v44, v45, v46);
          sub_10001E034();
          sub_10001EADC();
          v51 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
          sub_10007FF24(v49);
          sub_10002ACC4(v48, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          v51(v309, v50);
          v52 = (uint64_t)v433;
          sub_10007DA98((uint64_t)v433, v424);
          if ((v4 & 1) == 0)
          {
            v53 = *(_QWORD *)(v0 + 432);
            sub_10007E494(*(_QWORD *)(v0 + 440));
            sub_10007DA98((uint64_t)v433, v53);
            v7 = v321;
LABEL_30:
            sub_10007E494(*(_QWORD *)(v0 + 432));
            sub_10007D744();
LABEL_32:
            swift_release(*v430);
            goto LABEL_33;
          }
LABEL_29:
          v58 = *(_QWORD *)(v0 + 432);
          v57 = *(_QWORD *)(v0 + 440);
          v59 = *(_QWORD *)(*(_QWORD *)(v57 + *(int *)(v415 + 48)) + 16);
          sub_10007E494(v57);
          sub_10007DA98(v52, v58);
          v7 = v321;
          if (v59)
            goto LABEL_30;
          sub_10007F614();
          sub_10007E494(v60);
          sub_10007D744();
          if (v58)
            goto LABEL_32;
          sub_10007EA38();
          if (!(!v42 & v71))
          {
            sub_10007FD7C();
            v70 = (uint64_t)v435;
          }
          sub_10007FDC8(v62, v63, v64, v65, v66, v67, v68, v69, v273, v285, v70, v309, v321, (uint64_t)v333, v345, v360, v374, v387, v397,
            v406,
            v415,
            v424,
            (uint64_t)v430,
            (uint64_t)v433,
            (uint64_t)v435,
            v436[0]);
          sub_10007ED80();
          Hasher._finalize()();
          sub_10007CEF0();
          if (!v42)
          {
            sub_10001E178();
            goto LABEL_45;
          }
          sub_10001EB2C();
          while (1)
          {
            sub_10007DA8C();
            if (v42 && (v73 & 1) != 0)
              break;
            sub_10007DB48();
            sub_10001E62C();
            if (!v42)
            {
              sub_10001E154();
LABEL_45:
              sub_10007D0F0(v72);
LABEL_33:
              v27 = __CocoaSet.Iterator.next()(v61);
              if (!v27)
              {
LABEL_47:
                v74 = sub_10001EBB0(*(_QWORD *)(v0 + 304));
                sub_10007F22C(v74, v75, v76, v77, v78, v79, v80, v81, v273, v285, (uint64_t)v297, v309, v321, (uint64_t)v333, v345, v360, v374, v387, v397,
                  v406);
                v28 = 0;
                v82 = (uint64_t)v297;
                goto LABEL_49;
              }
              goto LABEL_15;
            }
          }
          __break(1u);
LABEL_76:
          __break(1u);
          goto LABEL_77;
        }
        sub_10002BA68(*(_QWORD *)(v0 + 192));
      }
    }
    v55 = *(_QWORD *)(v0 + 440);
    v54 = *(_QWORD *)(v0 + 448);
    v56 = *(_QWORD *)(v0 + 360);
    v4 = *(_QWORD *)(v0 + 336);
    sub_10007D5F4(*(_QWORD *)(v0 + 352));
    sub_10007E494(v54);
    sub_10007D5F4(v56);
    v52 = (uint64_t)v433;
    sub_10007DA98((uint64_t)v433, v55);
    goto LABEL_29;
  }
  sub_10001D7EC();
  v83 = sub_10001E338();
  v82 = sub_10007E5B0(v83, v28, (uint64_t (*)(uint64_t))sub_10004EA8C);
LABEL_49:
  v84 = sub_10007F56C(v82);
  v85 = sub_10001B1A0(v84);
  sub_100044820();
  v436[0] = (uint64_t)v85;
  sub_10007E058(v436, (uint64_t (*)(uint64_t, uint64_t))sub_10004E574);
  if (v28)
  {
    sub_10007E114(v436[0]);
    return;
  }
  sub_100044820();
  v52 = v436[0];
  if (v436[0] < 0 || (v436[0] & 0x4000000000000000) != 0)
  {
LABEL_77:
    v265 = sub_10001E900();
    v86 = _CocoaArrayWrapper.endIndex.getter(v265);
    sub_100044820();
    if (!v86)
      goto LABEL_78;
    goto LABEL_54;
  }
  v86 = *(_QWORD *)(v436[0] + 16);
  if (!v86)
  {
LABEL_78:
    v266 = *(void **)(v0 + 544);
    sub_100044820();
    v267 = sub_10001D8B4();
    Logger.logObject.getter(v267);
    v268 = sub_10001E9D0();
    if (sub_100039E20(v268))
    {
      v269 = (_WORD *)sub_10001D8D4(2);
      sub_10004478C(v269);
      sub_100039E4C((void *)&_mh_execute_header, v270, v271, "While unloading assets for pending version change: no more assets can be unloaded, attempting version switch");
      sub_10001D790(v86);
    }

    sub_10007FCF0(&dword_1000FB720);
    sub_10002B400();
    v272 = (_QWORD *)sub_10001EBC0();
    *(_QWORD *)(v0 + 592) = v272;
    *v272 = v0;
    v272[1] = sub_100071C80;
    sub_10007E134(v433);
    return;
  }
LABEL_54:
  sub_10006C19C(v52);
  v89 = sub_10007EBEC(v87, v88);
  v91 = v90;
  sub_10001E034();
  v416 = *(_QWORD *)(v91 + 16);
  v425 = v91;
  if (v416)
  {
    sub_10007FC10();
    v346 = v92;
    v361 = v93;
    v398 = *(_QWORD *)(v0 + 472);
    v407 = v94;
    v321 = v95;
    v333 = (_QWORD *)(v0 + 280);
    v388 = *(_QWORD *)(v0 + 416);
    sub_100005630(*(_QWORD *)(v0 + 328), 1, 1, *(_QWORD *)(v0 + 464));
    sub_10001DAE8();
    v375 = v89;
    sub_10001E900();
    v52 = 0;
    while (1)
    {
      if (!*(_QWORD *)(v91 + 16))
        goto LABEL_76;
      v431 = *(_QWORD *)(v0 + 496);
      v433 = *(uint64_t (**)(void))(v0 + 520);
      v96 = sub_10007EF04();
      sub_10002B2E0(v96, v407);
      v97 = sub_10007FF48();
      sub_10002AC98(v97, v98, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v99 = v4 + *(int *)(v388 + 36);
      v100 = v4 + *(int *)(v388 + 32);
      sub_100006710(&qword_1000FD888, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
      sub_10001D7EC();
      v101 = sub_10007F1CC(v100, v99);
      v102 = (void (*)(uint64_t, uint64_t))v398;
      sub_10007EA8C(v101);
      sub_10002ACC4(v4, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v4 = v431;
      sub_100080210(30.0);
      sub_10007F7E8();
      v103 = static Date.> infix(_:_:)(v431, v433);
      v104 = sub_10001D9C8();
      if ((v103 & 1) != 0)
        break;
      sub_10007F7D0();
      v91 = v425;
    }
    v120 = *(_QWORD *)(v0 + 472);
    v121 = *(_QWORD *)(v0 + 328);
    v122 = sub_10007F1C4(v104, v105, v106, v107, v108, v109, v110, v111, v273, v285, (uint64_t)v297, v309, v321, (uint64_t)v333, v346, v361, v375, v388, v398,
             v407,
             v416,
             v425);
    v130 = sub_10007EAC8(v122, v123, v124, v125, v126, v127, v128, v129, v274, v286, v298, v310, v322, v334, v347, v362, v376);
    sub_10007DFD8(v130, &qword_1000FD870);
    sub_10007D294(v121, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v120 + 32));
    sub_10007D54C(v121);
    v131 = *(_QWORD *)(v0 + 464);
    v132 = *(_QWORD *)(v0 + 320);
    sub_10007D410(*(_QWORD *)(v0 + 328));
    LODWORD(v120) = sub_100005700(v132, 1, v131);
    sub_10007DCC8(v132);
    v133 = *(NSObject **)(v0 + 544);
    if ((_DWORD)v120 == 1)
    {
      sub_10001D834(v426);
      v134 = sub_10001D834(v377);
      Logger.logObject.getter(v134);
      v135 = sub_100037B50();
      v136 = sub_10007D4C8(v135);
      v431 = *(_QWORD *)(v0 + 464);
      v434 = *(_QWORD *)(v0 + 520);
      if (v136)
      {
        v137 = (uint8_t *)sub_10001D8D4(12);
        v419 = sub_10001D8D4(32);
        v436[0] = v419;
        *(_DWORD *)v137 = 136315138;
        sub_10001E69C();
        v138 = sub_10001E900();
        v139 = sub_10007C1D4(v138, v426);
        sub_10002BA40();
        sub_100044820();
        sub_10007D81C(v139, v140, v436);
        v149 = sub_10007FED0(v141, v142, v143, v144, v145, v146, v147, v148, v273, v285, (uint64_t)v297, v309, v321, v333);
        sub_10007E4D0((uint64_t)v149, v150, v151);
        sub_10001EBB0(v426);
        sub_10001EBB0(v377);
        sub_10001E420();
        sub_10001E18C((void *)&_mh_execute_header, v133, (os_log_type_t)v4, "While unloading assets for pending version change: remaining candidates %s generated task wake times in the past.  Ending task", v137);
        sub_10001DBB8(v419);
        sub_10001D790(v419);
        sub_10001D790((uint64_t)v137);
        sub_10002BA40();
        sub_100044820();
      }
      else
      {
        sub_10007D408(v426);
        sub_10007D408(v377);
      }

      v102(v434, v431);
      sub_10007FC2C();
    }
    else
    {
      v152 = *(_QWORD *)(*(_QWORD *)(v0 + 536) - 8);
      v153 = sub_10001D828(*(_QWORD *)(v152 + 64));
      v434 = v152;
      sub_10007D294(v153, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v152 + 16));
      sub_10007F9A0();
      sub_100044AF0();
      v154 = sub_10007FF54();
      if (sub_10007F25C((os_log_type_t)v154))
      {
        v133 = *(NSObject **)(v0 + 464);
        v155 = *(_QWORD *)(v0 + 328);
        v156 = *(_QWORD *)(v0 + 312);
        v157 = (uint8_t *)sub_10001D8D4(12);
        *(_DWORD *)v157 = 134217984;
        v158 = sub_10002B2E0(v155, v321);
        sub_10007E4E4(v158, v159, &qword_1000FD870);
        sub_10007D3D0(v156);
        if (v42)
        {
          sub_10002AD5C(*(_QWORD *)(v0 + 328), &qword_1000FD870);
          __break(1u);
          return;
        }
        sub_10007ED60();
        sub_10007F800();
        *(_QWORD *)(v0 + 288) = v1;
        sub_10007DE9C(v348, v0 + 296);
        sub_10007FFA8();
        sub_10001E18C((void *)&_mh_execute_header, v152, (os_log_type_t)v154, "While unloading assets for pending version change: additional assets need unloading, next task wake in %f seconds", v157);
        sub_10001D790((uint64_t)v157);

      }
      else
      {
        sub_10007FBF8();
        v160 = sub_100080188();
      }
      v169 = sub_10007F1C4(v160, v161, v162, v163, v164, v165, v166, v167, v273, v285, (uint64_t)v297, v309, v321, (uint64_t)v333, v348, v363, v377, v389, v399,
               v409,
               v418,
               v426);
      sub_10007EAC8(v169, v170, v171, v172, v173, v174, v175, v176, v275, v287, v299, v311, v323, v335, v349, v364, v378);
      sub_10007FE04();
      sub_10007F374(v152);
      sub_10007F860((uint64_t)v133);
      sub_10007F860(v154);
      sub_10002B528();
    }
    v177 = *(_QWORD *)(v0 + 328);
    sub_10002B2E0(v177, v363);
    sub_10007D410(v177);
    sub_10007DA38();
    goto LABEL_74;
  }
  v112 = *(NSObject **)(v0 + 544);
  sub_10001D834(v89);
  v113 = sub_10001D834(v91);
  Logger.logObject.getter(v113);
  v114 = sub_10001E9D0();
  v115 = sub_10007F0A8(v112);
  v417 = *(_QWORD *)(v0 + 472);
  v431 = *(_QWORD *)(v0 + 464);
  v434 = *(_QWORD *)(v0 + 520);
  if (v115)
  {
    v116 = (uint8_t *)sub_10001D8D4(12);
    v408 = sub_10001D8D4(32);
    v436[0] = v408;
    *(_DWORD *)v116 = 136315138;
    sub_10001D7EC();
    sub_10001E8B0();
    v117 = sub_10007FF1C(v89);
    sub_10007D970();
    sub_10001D9C8();
    sub_10007E898(v117, v118, v436);
    sub_10007F204(v119, (uint64_t)(v116 + 4), (_QWORD *)(v0 + 264));
    sub_10001EBB0(v425);
    sub_10001EBB0(v89);
    sub_10001E4C0();
    sub_10001E18C((void *)&_mh_execute_header, v112, v114, "While unloading assets for pending version change: all remaining assets failed to unload, %s", v116);
    sub_10001DBB8(v408);
    sub_10001D790(v408);
    sub_10001D790((uint64_t)v116);
    sub_10007D970();
    sub_10001D9C8();
  }
  else
  {
    sub_10007D408(v91);
    sub_10007D408(v89);
  }

  (*(void (**)(uint64_t, uint64_t))(v417 + 8))(v434, v431);
  v168 = *(_QWORD *)(v0 + 296);
  sub_10007E3B8(*(_QWORD *)(v0 + 512));
  sub_10007DBC4(v168, 1);
LABEL_74:
  sub_10007DC98();
  v350 = v179;
  v365 = v178;
  sub_10008005C();
  v379 = v181;
  v390 = v180;
  sub_100080050();
  v400 = v183;
  v410 = v182;
  v420 = *(_QWORD *)(v0 + 352);
  v427 = *(_QWORD *)(v0 + 328);
  sub_10007F5F8(v184);
  sub_10002B70C();
  sub_10002BDF0();
  sub_10001E330();
  sub_10001D938();
  sub_10001EAC8();
  sub_10001E490();
  sub_10002B504();
  sub_10002B528();
  v185 = sub_10002B4C4();
  v193 = sub_10007ED40(v185, v186, v187, v188, v189, v190, v191, v192, v273, v285, (uint64_t)v297, v309, v321, (uint64_t)v333, v350);
  v201 = sub_10007EDA8(v193, v194, v195, v196, v197, v198, v199, v200, v276, v288, v300, v312, v324, v336, v351, v365);
  v209 = sub_10007EAD0(v201, v202, v203, v204, v205, v206, v207, v208, v277, v289, v301, v313, v325, v337, v352, v366, v379);
  v217 = sub_10007E470(v209, v210, v211, v212, v213, v214, v215, v216, v278, v290, v302, v314, v326, v338, v353, v367, v380, v390);
  v225 = sub_10007DE6C(v217, v218, v219, v220, v221, v222, v223, v224, v279, v291, v303, v315, v327, v339, v354, v368, v381, v391, v400);
  v233 = sub_10007DE5C(v225, v226, v227, v228, v229, v230, v231, v232, v280, v292, v304, v316, v328, v340, v355, v369, v382, v392, v401,
           v410);
  v241 = sub_10007DE4C(v233, v234, v235, v236, v237, v238, v239, v240, v281, v293, v305, v317, v329, v341, v356, v370, v383, v393, v402,
           v411,
           v420);
  v249 = sub_10007DEA4(v241, v242, v243, v244, v245, v246, v247, v248, v282, v294, v306, v318, v330, v342, v357, v371, v384, v394, v403,
           v412,
           v421,
           v427);
  v257 = sub_10007E700(v249, v250, v251, v252, v253, v254, v255, v256, v283, v295, v307, v319, v331, v343, v358, v372, v385, v395, v404,
           v413,
           v422,
           v428,
           v431);
  sub_10007EE54(v257, v258, v259, v260, v261, v262, v263, v264, v284, v296, v308, v320, v332, v344, v359, v373, v386, v396, v405,
    v414,
    v423,
    v429,
    v432,
    v434);
  sub_10007E134(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100072A4C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_100072A64, v0, 0);
}

void sub_100072A64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char isCancelled;
  uint64_t v5;
  char v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetVersionChangeUnloadTask;
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetVersionChangeUnloadTask))
  {
    v3 = sub_10001E194();
    isCancelled = swift_task_isCancelled(v3);
    sub_10001D9C0();
    v5 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = 0;
    swift_release(v5);
    if ((isCancelled & 1) != 0
      || (sub_10006F280((uint64_t (*)(uint64_t))sub_10004E578, sub_10007C4B4), (v6 & 1) == 0))
    {
      sub_10001D940(*(uint64_t (**)(void))(v0 + 8));
    }
    else
    {
      v7 = (_QWORD *)swift_task_alloc(dword_1000FD85C);
      *(_QWORD *)(v0 + 24) = v7;
      *v7 = v0;
      v7[1] = sub_100072B1C;
      sub_10005D76C();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100072B1C()
{
  uint64_t (**v0)(void);

  sub_10001D680(*((_QWORD *)*v0 + 3));
  return sub_100006A38(v0[1]);
}

Swift::Int sub_100072B50(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  Swift::Int result;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[9];
  uint64_t v26;
  _QWORD *v27;

  v5 = a1;
  if ((a1 & 0xC000000000000001) == 0)
  {
    swift_retain(a2);
    v24 = sub_100075108(v5, a2, a3);
    swift_release(a2);
    return v24;
  }
  v6 = _swiftEmptySetSingleton;
  v27 = _swiftEmptySetSingleton;
  if (a1 >= 0)
    v5 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_retain(a2);
  v7 = __CocoaSet.makeIterator()(v5);
  v8 = __CocoaSet.Iterator.next()(v7);
  if (!v8)
  {
LABEL_22:
    swift_release_n(a2, 2);
    swift_release(v7);
    return (Swift::Int)v6;
  }
  v9 = v8;
  v10 = type metadata accessor for InferenceProviderAsset(0);
  while (1)
  {
    v25[0] = v9;
    swift_dynamicCast(&v26, v25, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
    v11 = v26 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess(v26 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v25, 33, 0);
    LOBYTE(v11) = a3(v11);
    swift_endAccess(v25);
    v12 = v26;
    if ((v11 & 1) != 0)
      break;
    result = swift_release(v26);
LABEL_20:
    v9 = __CocoaSet.Iterator.next()(result);
    if (!v9)
    {
      v6 = v27;
      goto LABEL_22;
    }
  }
  v13 = v27;
  if (v27[3] <= v27[2])
  {
    sub_100014280();
    v13 = v27;
  }
  Hasher.init(_seed:)(v25, v13[5]);
  sub_10008B000();
  result = Hasher._finalize()();
  v15 = v13 + 7;
  v16 = -1 << *((_BYTE *)v13 + 32);
  v17 = result & ~v16;
  v18 = v17 >> 6;
  if (((-1 << v17) & ~v13[(v17 >> 6) + 7]) != 0)
  {
    v19 = __clz(__rbit64((-1 << v17) & ~v13[(v17 >> 6) + 7])) | v17 & 0x7FFFFFFFFFFFFFC0;
LABEL_19:
    *(_QWORD *)((char *)v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(_QWORD *)(v13[6] + 8 * v19) = v12;
    ++v13[2];
    goto LABEL_20;
  }
  v20 = 0;
  v21 = (unint64_t)(63 - v16) >> 6;
  while (++v18 != v21 || (v20 & 1) == 0)
  {
    v22 = v18 == v21;
    if (v18 == v21)
      v18 = 0;
    v20 |= v22;
    v23 = v15[v18];
    if (v23 != -1)
    {
      v19 = __clz(__rbit64(~v23)) + (v18 << 6);
      goto LABEL_19;
    }
  }
  __break(1u);
  return result;
}

Swift::Int sub_100072DE0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t State;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  _QWORD *v40;
  Swift::Int result;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void (*v47)(char *, uint64_t);
  char v48;
  unint64_t v49;
  BOOL v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD v53[2];
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  unsigned int v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70[24];
  uint64_t v71;
  _QWORD *v72;

  v4 = v3;
  v5 = a3;
  v62 = *a3;
  State = type metadata accessor for LoadState(0);
  v64 = *(_QWORD *)(State - 8);
  v9 = __chkstk_darwin(State);
  v61 = (char *)v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)v53 - v11;
  v56 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  v13 = __chkstk_darwin(v56);
  v60 = (uint64_t)v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)v53 - v15;
  if ((a1 & 0xC000000000000001) == 0)
  {
    swift_retain(v5);
    swift_retain(a2);
    sub_100075428();
    if (v3)
    {
      swift_release(v5);
      swift_release(a2);
      return (Swift::Int)v4;
    }
    v4 = v52;
    swift_release(a2);
LABEL_37:
    swift_release(v5);
    return (Swift::Int)v4;
  }
  v53[1] = v3;
  v4 = _swiftEmptySetSingleton;
  v72 = _swiftEmptySetSingleton;
  if (a1 < 0)
    v17 = a1;
  else
    v17 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_retain(v5);
  swift_retain(a2);
  v63 = __CocoaSet.makeIterator()(v17);
  v18 = __CocoaSet.Iterator.next()(v63);
  if (!v18)
  {
LABEL_36:
    swift_release(v5);
    swift_release_n(a2, 2);
    swift_release(v63);
    goto LABEL_37;
  }
  v54 = a2;
  v55 = v5;
  v59 = enum case for LoadState.loaded(_:);
  v58 = (char *)&type metadata for Swift.AnyObject + 8;
  v19 = v64;
  v57 = v16;
  while (1)
  {
    v66 = v18;
    swift_dynamicCast(&v71, &v66, v58, v62, 7);
    v20 = v71;
    v21 = v71 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess(v71 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v70, 0, 0);
    sub_10002AC98(v21, (uint64_t)v16, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    (*(void (**)(char *, _QWORD, uint64_t))(v19 + 104))(v12, v59, State);
    sub_100006710(&qword_1000FD7E8, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState);
    v23 = v22;
    dispatch thunk of RawRepresentable.rawValue.getter(State, v22);
    dispatch thunk of RawRepresentable.rawValue.getter(State, v23);
    v24 = v67;
    v25 = v69;
    v26 = v66 == v68 && v67 == v69;
    v65 = v20;
    if (!v26)
      break;
    swift_bridgeObjectRelease_n(v67, 2);
    v32 = (uint64_t)v16;
    v29 = v60;
    sub_10002AC98(v32, v60, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    v30 = v61;
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v61, v12, State);
LABEL_14:
    dispatch thunk of RawRepresentable.rawValue.getter(State, v23);
    dispatch thunk of RawRepresentable.rawValue.getter(State, v23);
    v33 = v67;
    v34 = v30;
    v35 = v69;
    if (v66 == v68 && v67 == v69)
    {
      swift_bridgeObjectRelease_n(v67, 2);
      v19 = v64;
      v47 = *(void (**)(char *, uint64_t))(v64 + 8);
      v47(v34, State);
      sub_10002ACC4(v29, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v47(v12, State);
      v16 = v57;
      sub_10002ACC4((uint64_t)v57, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      goto LABEL_25;
    }
    v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v66, v67, v68, v69, 0);
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(v35);
    v19 = v64;
    v38 = *(void (**)(char *, uint64_t))(v64 + 8);
    v38(v34, State);
    sub_10002ACC4(v29, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    v38(v12, State);
    v16 = v57;
    sub_10002ACC4((uint64_t)v57, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    if ((v37 & 1) == 0)
      goto LABEL_19;
LABEL_25:
    result = swift_release(v71);
LABEL_34:
    v18 = __CocoaSet.Iterator.next()(result);
    if (!v18)
    {
      v4 = v72;
      v5 = v55;
      a2 = v54;
      goto LABEL_36;
    }
  }
  v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v66, v67, v68, v69, 0);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v25);
  v28 = (uint64_t)v16;
  v29 = v60;
  sub_10002AC98(v28, v60, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  v30 = v61;
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v61, v12, State);
  if ((v27 & 1) != 0)
    goto LABEL_14;
  v19 = v64;
  v31 = *(void (**)(char *, uint64_t))(v64 + 8);
  v31(v30, State);
  sub_10002ACC4(v29, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  v31(v12, State);
  v16 = v57;
  sub_10002ACC4((uint64_t)v57, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
LABEL_19:
  if ((sub_100080448(v65) & 1) == 0)
    goto LABEL_25;
  v39 = v71;
  v40 = v72;
  if (v72[3] <= v72[2])
  {
    sub_100014280();
    v40 = v72;
  }
  Hasher.init(_seed:)(&v66, v40[5]);
  sub_10008B000();
  result = Hasher._finalize()();
  v42 = v40 + 7;
  v43 = -1 << *((_BYTE *)v40 + 32);
  v44 = result & ~v43;
  v45 = v44 >> 6;
  if (((-1 << v44) & ~v40[(v44 >> 6) + 7]) != 0)
  {
    v46 = __clz(__rbit64((-1 << v44) & ~v40[(v44 >> 6) + 7])) | v44 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)((char *)v42 + ((v46 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v46;
    *(_QWORD *)(v40[6] + 8 * v46) = v39;
    ++v40[2];
    v19 = v64;
    goto LABEL_34;
  }
  v48 = 0;
  v49 = (unint64_t)(63 - v43) >> 6;
  while (++v45 != v49 || (v48 & 1) == 0)
  {
    v50 = v45 == v49;
    if (v45 == v49)
      v45 = 0;
    v48 |= v50;
    v51 = v42[v45];
    if (v51 != -1)
    {
      v46 = __clz(__rbit64(~v51)) + (v45 << 6);
      goto LABEL_33;
    }
  }
  __break(1u);
  return result;
}

Swift::Int sub_10007341C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char v32;
  void (*v33)(char *, uint64_t);
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  char *v36;
  Swift::Int result;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t State;
  int v53;
  _QWORD *v54;
  char *v55;
  char *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67[24];
  uint64_t v68;
  char *v69;

  v4 = v3;
  v5 = a3;
  v60 = a2;
  v58 = *a3;
  State = type metadata accessor for LoadState(0);
  v51 = *(_QWORD *)(State - 8);
  v7 = __chkstk_darwin(State);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v49 - v10;
  v50 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  v12 = __chkstk_darwin(v50);
  v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v49 - v15;
  if ((a1 & 0xC000000000000001) == 0)
  {
    swift_retain(v5);
    swift_retain(v60);
    sub_100075428();
    if (v3)
    {
      swift_release(v5);
      swift_release(v60);
      return (Swift::Int)v11;
    }
    v11 = v47;
    v48 = v60;
LABEL_40:
    swift_release(v48);
    swift_release(v5);
    return (Swift::Int)v11;
  }
  v61 = v11;
  v11 = (char *)_swiftEmptySetSingleton;
  v69 = (char *)_swiftEmptySetSingleton;
  if (a1 < 0)
    v17 = a1;
  else
    v17 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_retain(v5);
  swift_retain(v60);
  v59 = __CocoaSet.makeIterator()(v17);
  v18 = __CocoaSet.Iterator.next()(v59);
  if (!v18)
  {
LABEL_39:
    swift_release(v5);
    swift_release_n(v60, 2);
    v48 = v59;
    goto LABEL_40;
  }
  v54 = v5;
  v49 = v4;
  v57 = enum case for LoadState.unloaded(_:);
  v56 = (char *)&type metadata for Swift.AnyObject + 8;
  v19 = v51;
  v20 = v61;
  v21 = State;
  v55 = v9;
  while (1)
  {
    v63 = v18;
    swift_dynamicCast(&v68, &v63, v56, v58, 7);
    v62 = v68;
    v22 = v68 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess(v68 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v67, 0, 0);
    sub_10002AC98(v22, (uint64_t)v16, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    (*(void (**)(char *, _QWORD, uint64_t))(v19 + 104))(v20, v57, v21);
    sub_100006710(&qword_1000FD7E8, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState);
    v24 = v23;
    dispatch thunk of RawRepresentable.rawValue.getter(v21, v23);
    dispatch thunk of RawRepresentable.rawValue.getter(v21, v24);
    v25 = v64;
    v26 = v66;
    if (v63 == v65 && v64 == v66)
    {
      swift_bridgeObjectRelease_n(v64, 2);
      sub_10002AC98((uint64_t)v16, (uint64_t)v14, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v28 = v55;
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v55, v20, v21);
LABEL_19:
      v34 = *(void (**)(char *, uint64_t))(v19 + 8);
      v34(v28, v21);
      sub_10002ACC4((uint64_t)v14, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v34(v20, v21);
      sub_10002ACC4((uint64_t)v16, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      goto LABEL_20;
    }
    v53 = _stringCompareWithSmolCheck(_:_:expecting:)(v63, v64, v65, v66, 0);
    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(v26);
    sub_10002AC98((uint64_t)v16, (uint64_t)v14, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    v28 = v55;
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v55, v20, v21);
    if ((v53 & 1) != 0)
      goto LABEL_19;
    dispatch thunk of RawRepresentable.rawValue.getter(v21, v24);
    dispatch thunk of RawRepresentable.rawValue.getter(v21, v24);
    v29 = v64;
    v30 = v66;
    if (v63 == v65 && v64 == v66)
    {
      swift_bridgeObjectRelease_n(v64, 2);
      v19 = v51;
      v20 = v61;
      goto LABEL_19;
    }
    v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v63, v64, v65, v66, 0);
    swift_bridgeObjectRelease(v29);
    swift_bridgeObjectRelease(v30);
    v19 = v51;
    v33 = *(void (**)(char *, uint64_t))(v51 + 8);
    v33(v28, v21);
    sub_10002ACC4((uint64_t)v14, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    v33(v61, v21);
    sub_10002ACC4((uint64_t)v16, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    if ((v32 & 1) == 0)
      goto LABEL_25;
LABEL_20:
    if ((sub_100080448(v62) & 1) != 0)
      break;
LABEL_25:
    result = swift_release(v68);
LABEL_34:
    v18 = __CocoaSet.Iterator.next()(result);
    v20 = v61;
    if (!v18)
    {
      v11 = v69;
      v5 = v54;
      goto LABEL_39;
    }
  }
  v35 = v68;
  v36 = v69;
  if (*((_QWORD *)v69 + 3) <= *((_QWORD *)v69 + 2))
  {
    sub_100014280();
    v36 = v69;
  }
  Hasher.init(_seed:)(&v63, *((_QWORD *)v36 + 5));
  sub_10008B000();
  result = Hasher._finalize()();
  v38 = v36 + 56;
  v39 = -1 << v36[32];
  v40 = result & ~v39;
  v41 = v40 >> 6;
  if (((-1 << v40) & ~*(_QWORD *)&v36[8 * (v40 >> 6) + 56]) != 0)
  {
    v42 = __clz(__rbit64((-1 << v40) & ~*(_QWORD *)&v36[8 * (v40 >> 6) + 56])) | v40 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)((char *)v38 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v42;
    *(_QWORD *)(*((_QWORD *)v36 + 6) + 8 * v42) = v35;
    ++*((_QWORD *)v36 + 2);
    v21 = State;
    goto LABEL_34;
  }
  v43 = 0;
  v44 = (unint64_t)(63 - v39) >> 6;
  while (++v41 != v44 || (v43 & 1) == 0)
  {
    v45 = v41 == v44;
    if (v41 == v44)
      v41 = 0;
    v43 |= v45;
    v46 = v38[v41];
    if (v46 != -1)
    {
      v42 = __clz(__rbit64(~v46)) + (v41 << 6);
      goto LABEL_33;
    }
  }
  __break(1u);
  return result;
}

void sub_100073A0C()
{
  uint64_t v0;
  unsigned int *v1;
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t State;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  _QWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  char *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  sub_10007F5A0();
  v2 = v1;
  v3 = v0;
  v44 = v4;
  v45 = v5;
  v7 = v6;
  v42 = *v5;
  State = type metadata accessor for LoadState(0);
  v9 = *(_QWORD *)(State - 8);
  v10 = __chkstk_darwin(State);
  v12 = (char *)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  sub_10007FD38();
  v46 = v13;
  v35[1] = sub_10007D9D8();
  sub_10002BCBC();
  __chkstk_darwin(v14);
  sub_10001EB18();
  v37 = v15;
  sub_10001E148();
  __chkstk_darwin(v16);
  v18 = (char *)v35 - v17;
  if ((v7 & 0xC000000000000001) == 0)
  {
    sub_10001D7EC();
    sub_10002B400();
    sub_1000752F0();
    if (v0)
    {
      sub_10007FDB4();
      swift_release(v44);
LABEL_40:
      sub_10007EDD8();
      return;
    }
    v34 = v44;
LABEL_39:
    swift_release(v34);
    sub_10007FDB4();
    goto LABEL_40;
  }
  v36 = v9;
  if (v7 < 0)
    v19 = v7;
  else
    v19 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_retain(v45);
  swift_retain(v44);
  v43 = __CocoaSet.makeIterator()(v19);
  v20 = __CocoaSet.Iterator.next()(v43);
  if (!v20)
  {
LABEL_38:
    sub_10007FDB4();
    sub_10001EBB0(v44);
    v34 = v43;
    goto LABEL_39;
  }
  v35[0] = v3;
  v41 = *v2;
  v40 = (char *)&type metadata for Swift.AnyObject + 8;
  v21 = v36;
  v22 = v46;
  v23 = v37;
  v39 = v12;
  while (1)
  {
    v48 = v20;
    swift_dynamicCast(&v53, &v48, v40, v42, 7);
    v47 = v53;
    sub_10002B2E0(v53 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, (uint64_t)&v52);
    v24 = sub_10002BE5C();
    sub_10002AC98(v24, v25, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v21 + 104))(v22, v41, State);
    sub_100006710(&qword_1000FD7E8, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState);
    sub_10007EBD4();
    sub_10007EBD4();
    v26 = v51;
    v27 = v48 == v50 && v49 == v51;
    if (v27)
    {
      sub_10007E108();
      sub_10007F9C8();
      sub_10007EA70();
LABEL_19:
      sub_10007E6A8(v26);
      sub_10007F6A4(v23);
      sub_10007E6A8(v22);
      sub_10007F6A4((uint64_t)v18);
      goto LABEL_20;
    }
    v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v48, v49, v50, v51, 0);
    sub_10001E034();
    sub_10001E420();
    sub_10007F9C8();
    sub_10007EA70();
    if ((v38 & 1) != 0)
      goto LABEL_19;
    sub_10007EBD4();
    sub_10007EBD4();
    if (v48 == v50 && v49 == v51)
    {
      sub_10007E108();
      v21 = v36;
      v22 = v46;
      goto LABEL_19;
    }
    v30 = sub_10007F760(v48, v28, v50);
    sub_10001E034();
    sub_10001DA38();
    v21 = v36;
    sub_10007E6A8(v26);
    sub_10007F6A4(v23);
    sub_10007E6A8(v46);
    sub_10007F6A4((uint64_t)v18);
    if ((v30 & 1) == 0)
      goto LABEL_25;
LABEL_20:
    if ((sub_100080448((uint64_t)v45) & 1) != 0)
      break;
LABEL_25:
    v32 = swift_release(v53);
LABEL_33:
    v20 = __CocoaSet.Iterator.next()(v32);
    v22 = v46;
    if (!v20)
    {
      sub_10007F608();
      goto LABEL_38;
    }
  }
  if (_swiftEmptySetSingleton[3] <= _swiftEmptySetSingleton[2])
    sub_100014280();
  Hasher.init(_seed:)(&v48, _swiftEmptySetSingleton[5]);
  sub_10008B000();
  Hasher._finalize()();
  sub_10007CEF0();
  if (!v27)
  {
    sub_10001E178();
LABEL_32:
    sub_10007DEE0(v31);
    v23 = v37;
    goto LABEL_33;
  }
  sub_10001EB2C();
  while (1)
  {
    sub_10007DA8C();
    if (v27 && (v33 & 1) != 0)
      break;
    sub_10001E62C();
    if (!v27)
    {
      sub_10001E154();
      goto LABEL_32;
    }
  }
  __break(1u);
}

Swift::Int sub_100073E5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t State;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  char v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char v32;
  void (*v33)(char *, uint64_t);
  void (*v34)(char *, uint64_t);
  Swift::Int result;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63[24];
  uint64_t v64;
  _QWORD *v65;

  State = type metadata accessor for LoadState(0);
  v6 = *(_QWORD *)(State - 8);
  v7 = __chkstk_darwin(State);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v47 - v10;
  v55 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  v12 = __chkstk_darwin(v55);
  v58 = (uint64_t)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v56 = (uint64_t)&v47 - v14;
  if ((a1 & 0xC000000000000001) == 0)
  {
    swift_retain();
    v15 = (_QWORD *)sub_100075694(a1, a2);
    swift_release(a2);
    return (Swift::Int)v15;
  }
  v49 = v2;
  v15 = _swiftEmptySetSingleton;
  v65 = _swiftEmptySetSingleton;
  if (a1 < 0)
    v16 = a1;
  else
    v16 = a1 & 0xFFFFFFFFFFFFFF8;
  v48 = a2;
  swift_retain();
  v54 = __CocoaSet.makeIterator()(v16);
  v17 = __CocoaSet.Iterator.next()(v54);
  if (!v17)
  {
LABEL_38:
    swift_release_n(v48, 2);
    swift_release(v54);
    return (Swift::Int)v15;
  }
  v18 = v17;
  v53 = type metadata accessor for InferenceProviderAsset(0);
  v52 = enum case for LoadState.loaded(_:);
  v51 = (char *)&type metadata for Swift.AnyObject + 8;
  v19 = v56;
  v50 = v9;
  while (1)
  {
    v59 = v18;
    swift_dynamicCast(&v64, &v59, v51, v53, 7);
    v20 = v64 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess(v64 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v63, 0, 0);
    sub_10002AC98(v20, v19, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v11, v52, State);
    sub_100006710(&qword_1000FD7E8, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState);
    v22 = v21;
    dispatch thunk of RawRepresentable.rawValue.getter(State, v21);
    dispatch thunk of RawRepresentable.rawValue.getter(State, v22);
    v23 = v60;
    v24 = v62;
    v25 = v59 == v61 && v60 == v62;
    v57 = v20;
    if (v25)
    {
      swift_bridgeObjectRelease_n(v60, 2);
      sub_10002AC98(v19, v58, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v27 = v50;
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v50, v11, State);
LABEL_19:
      v34 = *(void (**)(char *, uint64_t))(v6 + 8);
      v34(v27, State);
      sub_10002ACC4(v58, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v34(v11, State);
      sub_10002ACC4(v19, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      goto LABEL_20;
    }
    v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v59, v60, v61, v62, 0);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v24);
    sub_10002AC98(v19, v58, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    v27 = v50;
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v50, v11, State);
    if ((v26 & 1) != 0)
      goto LABEL_19;
    dispatch thunk of RawRepresentable.rawValue.getter(State, v22);
    dispatch thunk of RawRepresentable.rawValue.getter(State, v22);
    v28 = v60;
    v29 = v27;
    v30 = v62;
    if (v59 == v61 && v60 == v62)
    {
      swift_bridgeObjectRelease_n(v60, 2);
      v27 = v29;
      v19 = v56;
      goto LABEL_19;
    }
    v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v59, v60, v61, v62, 0);
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(v30);
    v33 = *(void (**)(char *, uint64_t))(v6 + 8);
    v33(v29, State);
    sub_10002ACC4(v58, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    v33(v11, State);
    sub_10002ACC4(v56, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    if ((v32 & 1) == 0)
      goto LABEL_21;
LABEL_20:
    if ((*(_BYTE *)(v57 + *(int *)(v55 + 24)) & 1) == 0)
      break;
LABEL_21:
    swift_release(v64);
LABEL_34:
    v18 = __CocoaSet.Iterator.next()(result);
    v19 = v56;
    if (!v18)
    {
      v15 = v65;
      goto LABEL_38;
    }
  }
  v36 = v64;
  v37 = v65;
  if (v65[3] <= v65[2])
  {
    sub_100014280();
    v37 = v65;
  }
  Hasher.init(_seed:)(&v59, v37[5]);
  sub_10008B000();
  result = Hasher._finalize()();
  v38 = v37 + 7;
  v39 = -1 << *((_BYTE *)v37 + 32);
  v40 = result & ~v39;
  v41 = v40 >> 6;
  if (((-1 << v40) & ~v37[(v40 >> 6) + 7]) != 0)
  {
    v42 = __clz(__rbit64((-1 << v40) & ~v37[(v40 >> 6) + 7])) | v40 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)((char *)v38 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v42;
    *(_QWORD *)(v37[6] + 8 * v42) = v36;
    ++v37[2];
    goto LABEL_34;
  }
  v43 = 0;
  v44 = (unint64_t)(63 - v39) >> 6;
  while (++v41 != v44 || (v43 & 1) == 0)
  {
    v45 = v41 == v44;
    if (v41 == v44)
      v41 = 0;
    v43 |= v45;
    v46 = v38[v41];
    if (v46 != -1)
    {
      v42 = __clz(__rbit64(~v46)) + (v41 << 6);
      goto LABEL_33;
    }
  }
  __break(1u);
  return result;
}

Swift::Int sub_1000743FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t State;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  char *v40;
  char v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  Swift::Int result;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79[24];
  uint64_t v80;
  _QWORD *v81;

  v5 = v3;
  v70 = a3;
  State = type metadata accessor for LoadState(0);
  v69 = *(_QWORD *)(State - 8);
  v9 = __chkstk_darwin(State);
  v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v71 = (char *)&v59 - v12;
  v13 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  v14 = __chkstk_darwin(v13);
  v68 = (uint64_t)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v62 = (uint64_t)&v59 - v17;
  __chkstk_darwin(v16);
  v19 = (char *)&v59 - v18;
  if ((a1 & 0xC000000000000001) == 0)
  {
    swift_bridgeObjectRetain(v70);
    swift_retain();
    sub_100075560();
    if (v3)
    {
      swift_bridgeObjectRelease(v70);
      swift_release(a2);
      return (Swift::Int)v4;
    }
    v4 = v58;
    v57 = a2;
LABEL_39:
    swift_release(v57);
    swift_bridgeObjectRelease(v70);
    return (Swift::Int)v4;
  }
  v4 = _swiftEmptySetSingleton;
  v81 = _swiftEmptySetSingleton;
  if (a1 < 0)
    v20 = a1;
  else
    v20 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v70);
  swift_retain();
  v74 = __CocoaSet.makeIterator()(v20);
  v21 = __CocoaSet.Iterator.next()(v74);
  if (!v21)
  {
LABEL_38:
    swift_bridgeObjectRelease(v70);
    swift_release_n(a2, 2);
    v57 = v74;
    goto LABEL_39;
  }
  v22 = v21;
  v60 = a2;
  v61 = v5;
  v73 = type metadata accessor for InferenceProviderAsset(0);
  v67 = enum case for LoadState.loaded(_:);
  v72 = (char *)&type metadata for Swift.AnyObject + 8;
  v23 = v62;
  v64 = v19;
  v66 = v13;
  v65 = v11;
  while (1)
  {
    v75 = v22;
    swift_dynamicCast(&v80, &v75, v72, v73, 7);
    v24 = v80;
    v25 = v80 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess(v80 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v79, 0, 0);
    sub_10002AC98(v25, (uint64_t)v19, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    v26 = *(_QWORD *)(*(_QWORD *)&v19[*(int *)(v13 + 48)] + 16);
    sub_10002ACC4((uint64_t)v19, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    if (!v26)
      break;
LABEL_22:
    swift_release(v80);
LABEL_23:
    v22 = __CocoaSet.Iterator.next()(result);
    if (!v22)
    {
      v4 = v81;
      a2 = v60;
      goto LABEL_38;
    }
  }
  v27 = v71;
  sub_10002AC98(v25, v23, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  v28 = v69;
  (*(void (**)(char *, _QWORD, uint64_t))(v69 + 104))(v27, v67, State);
  sub_100006710(&qword_1000FD7E8, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState);
  v30 = v29;
  dispatch thunk of RawRepresentable.rawValue.getter(State, v29);
  dispatch thunk of RawRepresentable.rawValue.getter(State, v30);
  v31 = v76;
  v32 = v78;
  if (v75 == v77 && v76 == v78)
  {
    swift_bridgeObjectRelease_n(v76, 2);
    v34 = v68;
    sub_10002AC98(v23, v68, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    v35 = v65;
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v65, v27, State);
    v13 = v66;
    goto LABEL_20;
  }
  v63 = _stringCompareWithSmolCheck(_:_:expecting:)(v75, v76, v77, v78, 0);
  swift_bridgeObjectRelease(v31);
  swift_bridgeObjectRelease(v32);
  v34 = v68;
  sub_10002AC98(v23, v68, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  v35 = v65;
  (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v65, v27, State);
  v13 = v66;
  if ((v63 & 1) != 0)
  {
LABEL_20:
    v43 = v34;
    v44 = *(void (**)(char *, uint64_t))(v28 + 8);
    v44(v35, State);
    sub_10002ACC4(v43, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    v44(v71, State);
    sub_10002ACC4(v23, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    v19 = v64;
    goto LABEL_21;
  }
  v36 = v34;
  dispatch thunk of RawRepresentable.rawValue.getter(State, v30);
  dispatch thunk of RawRepresentable.rawValue.getter(State, v30);
  v37 = v76;
  v38 = v78;
  v39 = v75 == v77 && v76 == v78;
  v40 = v35;
  if (v39)
  {
    swift_bridgeObjectRelease_n(v76, 2);
    v28 = v69;
    v34 = v36;
    v23 = v62;
    goto LABEL_20;
  }
  v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v75, v76, v77, v78, 0);
  swift_bridgeObjectRelease(v37);
  swift_bridgeObjectRelease(v38);
  v42 = *(void (**)(char *, uint64_t))(v69 + 8);
  v42(v40, State);
  sub_10002ACC4(v36, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  v42(v71, State);
  v23 = v62;
  sub_10002ACC4(v62, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  v19 = v64;
  if ((v41 & 1) == 0)
    goto LABEL_22;
LABEL_21:
  if ((sub_10002C4B0(v24, v70) & 1) != 0)
    goto LABEL_22;
  v46 = v80;
  v47 = v81;
  if (v81[3] <= v81[2])
  {
    sub_100014280();
    v47 = v81;
  }
  Hasher.init(_seed:)(&v75, v47[5]);
  sub_10008B000();
  result = Hasher._finalize()();
  v48 = v47 + 7;
  v49 = -1 << *((_BYTE *)v47 + 32);
  v50 = result & ~v49;
  v51 = v50 >> 6;
  if (((-1 << v50) & ~v47[(v50 >> 6) + 7]) != 0)
  {
    v52 = __clz(__rbit64((-1 << v50) & ~v47[(v50 >> 6) + 7])) | v50 & 0x7FFFFFFFFFFFFFC0;
LABEL_36:
    *(_QWORD *)((char *)v48 + ((v52 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v52;
    *(_QWORD *)(v47[6] + 8 * v52) = v46;
    ++v47[2];
    goto LABEL_23;
  }
  v53 = 0;
  v54 = (unint64_t)(63 - v49) >> 6;
  while (++v51 != v54 || (v53 & 1) == 0)
  {
    v55 = v51 == v54;
    if (v51 == v54)
      v51 = 0;
    v53 |= v55;
    v56 = v48[v51];
    if (v56 != -1)
    {
      v52 = __clz(__rbit64(~v56)) + (v51 << 6);
      goto LABEL_36;
    }
  }
  __break(1u);
  return result;
}

Swift::Int sub_100074A7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  Swift::Int result;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD v30[9];
  char v31[24];
  uint64_t v32;
  _QWORD *v33;

  v5 = v3;
  v8 = a1;
  if ((a1 & 0xC000000000000001) == 0)
  {
    swift_bridgeObjectRetain(a3);
    swift_retain();
    sub_100075560();
    if (v5)
    {
      swift_bridgeObjectRelease(a3);
      swift_release(a2);
      return (Swift::Int)v4;
    }
    v4 = v29;
    v28 = a2;
LABEL_23:
    swift_release(v28);
    swift_bridgeObjectRelease(a3);
    return (Swift::Int)v4;
  }
  v4 = _swiftEmptySetSingleton;
  v33 = _swiftEmptySetSingleton;
  if (a1 >= 0)
    v8 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a3);
  swift_retain();
  v9 = __CocoaSet.makeIterator()(v8);
  v10 = __CocoaSet.Iterator.next()(v9);
  if (!v10)
  {
LABEL_22:
    swift_bridgeObjectRelease(a3);
    swift_release_n(a2, 2);
    v28 = v9;
    goto LABEL_23;
  }
  v11 = v10;
  v12 = type metadata accessor for InferenceProviderAsset(0);
  while (1)
  {
    v30[0] = v11;
    swift_dynamicCast(&v32, v30, (char *)&type metadata for Swift.AnyObject + 8, v12, 7);
    v13 = v32 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess(v32 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v31, 0, 0);
    v14 = *(_QWORD *)(v13 + *(int *)(type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0) + 40));
    swift_bridgeObjectRetain(v14);
    v15 = sub_100079064(a3, v14);
    swift_bridgeObjectRelease(v14);
    v16 = v32;
    if ((v15 & 1) != 0)
      break;
    swift_release(v32);
LABEL_20:
    v11 = __CocoaSet.Iterator.next()(result);
    if (!v11)
    {
      v4 = v33;
      goto LABEL_22;
    }
  }
  v17 = v33;
  if (v33[3] <= v33[2])
  {
    sub_100014280();
    v17 = v33;
  }
  Hasher.init(_seed:)(v30, v17[5]);
  sub_10008B000();
  result = Hasher._finalize()();
  v19 = v17 + 7;
  v20 = -1 << *((_BYTE *)v17 + 32);
  v21 = result & ~v20;
  v22 = v21 >> 6;
  if (((-1 << v21) & ~v17[(v21 >> 6) + 7]) != 0)
  {
    v23 = __clz(__rbit64((-1 << v21) & ~v17[(v21 >> 6) + 7])) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_19:
    *(_QWORD *)((char *)v19 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(_QWORD *)(v17[6] + 8 * v23) = v16;
    ++v17[2];
    goto LABEL_20;
  }
  v24 = 0;
  v25 = (unint64_t)(63 - v20) >> 6;
  while (++v22 != v25 || (v24 & 1) == 0)
  {
    v26 = v22 == v25;
    if (v22 == v25)
      v22 = 0;
    v24 |= v26;
    v27 = v19[v22];
    if (v27 != -1)
    {
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
      goto LABEL_19;
    }
  }
  __break(1u);
  return result;
}

Swift::Int sub_100074D50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t State;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  void (*v25)(char *, uint64_t);
  Swift::Int result;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48[24];
  uint64_t v49;
  _QWORD *v50;

  v3 = v2;
  State = type metadata accessor for LoadState(0);
  v7 = *(_QWORD *)(State - 8);
  v8 = __chkstk_darwin(State);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v39 - v11;
  if ((a1 & 0xC000000000000001) == 0)
  {
    swift_retain();
    v13 = (_QWORD *)sub_100075694(a1, a2);
    swift_release(a2);
    return (Swift::Int)v13;
  }
  v13 = _swiftEmptySetSingleton;
  v50 = _swiftEmptySetSingleton;
  if (a1 < 0)
    v14 = a1;
  else
    v14 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_retain();
  v43 = __CocoaSet.makeIterator()(v14);
  v15 = __CocoaSet.Iterator.next()(v43);
  if (!v15)
  {
LABEL_28:
    swift_release_n(a2, 2);
    swift_release(v43);
    return (Swift::Int)v13;
  }
  v16 = v15;
  v40 = a2;
  v41 = v3;
  v42 = type metadata accessor for InferenceProviderAsset(0);
  v17 = enum case for LoadState.dynamicMode(_:);
  while (1)
  {
    v44 = v16;
    swift_dynamicCast(&v49, &v44, (char *)&type metadata for Swift.AnyObject + 8, v42, 7);
    v18 = v49 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess(v49 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v48, 0, 0);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v12, v18, State);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 104))(v10, v17, State);
    sub_100006710(&qword_1000FD7E8, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState);
    v20 = v19;
    dispatch thunk of RawRepresentable.rawValue.getter(State, v19);
    dispatch thunk of RawRepresentable.rawValue.getter(State, v20);
    v21 = v45;
    v22 = v47;
    if (v44 == v46 && v45 == v47)
      break;
    v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v44, v45, v46, v47, 0);
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v22);
    v25 = *(void (**)(char *, uint64_t))(v7 + 8);
    v25(v10, State);
    v25(v12, State);
    if ((v24 & 1) != 0)
      goto LABEL_14;
    swift_release(v49);
LABEL_26:
    v16 = __CocoaSet.Iterator.next()(result);
    if (!v16)
    {
      v13 = v50;
      a2 = v40;
      goto LABEL_28;
    }
  }
  swift_bridgeObjectRelease_n(v45, 2);
  v27 = *(void (**)(char *, uint64_t))(v7 + 8);
  v27(v10, State);
  v27(v12, State);
LABEL_14:
  v28 = v49;
  v29 = v50;
  if (v50[3] <= v50[2])
  {
    sub_100014280();
    v29 = v50;
  }
  Hasher.init(_seed:)(&v44, v29[5]);
  sub_10008B000();
  result = Hasher._finalize()();
  v30 = v29 + 7;
  v31 = -1 << *((_BYTE *)v29 + 32);
  v32 = result & ~v31;
  v33 = v32 >> 6;
  if (((-1 << v32) & ~v29[(v32 >> 6) + 7]) != 0)
  {
    v34 = __clz(__rbit64((-1 << v32) & ~v29[(v32 >> 6) + 7])) | v32 & 0x7FFFFFFFFFFFFFC0;
LABEL_25:
    *(_QWORD *)((char *)v30 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v34;
    *(_QWORD *)(v29[6] + 8 * v34) = v28;
    ++v29[2];
    goto LABEL_26;
  }
  v35 = 0;
  v36 = (unint64_t)(63 - v31) >> 6;
  while (++v33 != v36 || (v35 & 1) == 0)
  {
    v37 = v33 == v36;
    if (v33 == v36)
      v33 = 0;
    v35 |= v37;
    v38 = v30[v33];
    if (v38 != -1)
    {
      v34 = __clz(__rbit64(~v38)) + (v33 << 6);
      goto LABEL_25;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100075108(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t isStackAllocationSafe;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD v25[6];

  v4 = v3;
  v8 = *(_BYTE *)(a1 + 32);
  v9 = v8 & 0x3F;
  v10 = (unint64_t)((1 << v8) + 63) >> 6;
  v11 = 8 * v10;
  isStackAllocationSafe = swift_retain_n(a2, 2);
  if (v9 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v11, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    v13 = (_QWORD *)((char *)v25 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_100011704(0, v10, v13);
    swift_retain(a2);
    v14 = sub_1000757F8((uint64_t)v13, v10, a1, a2, a3);
    v15 = swift_release(a1);
    if (v4)
      swift_willThrow(v15, v16, v17, v18, v19, v20, v21, v22, v25[0], v25[1], v25[2], v25[3], v25[4], v25[5]);
    swift_release(a2);
  }
  else
  {
    v23 = (_QWORD *)swift_slowAlloc(v11, -1);
    sub_100011704(0, v10, v23);
    swift_retain(a2);
    v14 = sub_1000757F8((uint64_t)v23, v10, a1, a2, a3);
    swift_release(a1);
    swift_slowDealloc(v23, -1, -1);
    swift_release(a2);
  }
  swift_release_n(a2, 2);
  return v14;
}

void sub_1000752F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  sub_10007E6C0();
  v4 = *(_BYTE *)(v3 + 32);
  v5 = v4 & 0x3F;
  v6 = 8 * ((unint64_t)((1 << v4) + 63) >> 6);
  sub_10001D834(v7);
  v8 = sub_10001D834(v1);
  if (v5 <= 0xD || (v8 = sub_10007F3AC(), (v8 & 1) != 0))
  {
    v9 = __chkstk_darwin(v8);
    sub_10007D938(v9, v10, v11, v12, v13, v14, v15, v16, v26);
    sub_10002B400();
    sub_10001E194();
    sub_10007E7F4();
    v17 = sub_10007DAF4();
    if (v2)
      sub_10007FBC4(v17, v18, v19, v20, v21, v22, v23, v24, v27, v28, v29, v30, v31, v32);
    sub_10001D9C0();
    sub_10001D930();
  }
  else
  {
    v25 = sub_10001D8D4(v6);
    sub_10007DAA0();
    sub_10002B400();
    sub_10001E194();
    sub_10007E7F4();
    sub_10007DAF4();
    sub_10001D790(v25);
    sub_10001D9C0();
    sub_10001D930();
  }
  sub_10001EBB0(v1);
  sub_10001EBB0(v0);
  sub_10007FAE0();
  sub_10007E410();
}

void sub_100075428()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  sub_10007E6C0();
  v4 = *(_BYTE *)(v3 + 32);
  v5 = v4 & 0x3F;
  v6 = 8 * ((unint64_t)((1 << v4) + 63) >> 6);
  sub_10001D834(v7);
  v8 = sub_10001D834(v1);
  if (v5 <= 0xD || (v8 = sub_10007F3AC(), (v8 & 1) != 0))
  {
    v9 = __chkstk_darwin(v8);
    sub_10007D938(v9, v10, v11, v12, v13, v14, v15, v16, v26);
    sub_10002B400();
    sub_10001E194();
    sub_10007D7C8();
    v17 = sub_10007DAF4();
    if (v2)
      sub_10007FBC4(v17, v18, v19, v20, v21, v22, v23, v24, v27, v28, v29, v30, v31, v32);
    sub_10001D9C0();
    sub_10001D930();
  }
  else
  {
    v25 = sub_10001D8D4(v6);
    sub_10007DAA0();
    sub_10002B400();
    sub_10001E194();
    sub_10007D7C8();
    sub_10007DAF4();
    sub_10001D790(v25);
    sub_10001D9C0();
    sub_10001D930();
  }
  sub_10001EBB0(v1);
  sub_10001EBB0(v0);
  sub_10007FAE0();
  sub_10007E410();
}

void sub_100075560()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  sub_10007E6C0();
  v4 = *(_BYTE *)(v3 + 32);
  v5 = v4 & 0x3F;
  v6 = 8 * ((unint64_t)((1 << v4) + 63) >> 6);
  sub_10001D834(v7);
  v8 = swift_bridgeObjectRetain_n(v1, 2);
  if (v5 <= 0xD || (v8 = sub_10007F3AC(), (v8 & 1) != 0))
  {
    v9 = __chkstk_darwin(v8);
    sub_10007D938(v9, v10, v11, v12, v13, v14, v15, v16, v26);
    sub_10002B400();
    sub_10001E338();
    sub_10007D7C8();
    v17 = sub_10007DAF4();
    if (v2)
      sub_10007FBC4(v17, v18, v19, v20, v21, v22, v23, v24, v27, v28, v29, v30, v31, v32);
    sub_10001E034();
    sub_10001D930();
  }
  else
  {
    v25 = sub_10001D8D4(v6);
    sub_10007DAA0();
    sub_10002B400();
    sub_10001E338();
    sub_10007D7C8();
    sub_10007DAF4();
    sub_10001D790(v25);
    sub_10001E034();
    sub_10001D930();
  }
  sub_10007E108();
  sub_10001EBB0(v0);
  sub_10007FAE0();
  sub_10007E410();
}

uint64_t sub_100075694(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t isStackAllocationSafe;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(_BYTE *)(a1 + 32);
  v4 = v3 & 0x3F;
  v5 = 8 * ((unint64_t)((1 << v3) + 63) >> 6);
  isStackAllocationSafe = sub_10001D834(a2);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v5, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    sub_10007F984();
    sub_10002B400();
    v7 = sub_10007EE5C();
    v8 = sub_10001D9C0();
    if (v4)
      swift_willThrow(v8, v9, v10, v11, v12, v13, v14, v15);
    sub_10001EBB0(a2);
  }
  else
  {
    v16 = sub_10001D8D4(v5);
    sub_10007F984();
    sub_10002B400();
    v7 = sub_10007EE5C();
    sub_10001D9C0();
    sub_10001D790(v16);
    sub_10001EBB0(a2);
  }
  sub_10001D930();
  return v7;
}

uint64_t sub_1000757F8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[24];
  uint64_t v26;

  v23 = result;
  v24 = 0;
  v7 = 0;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a3 + 56);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v7 << 6);
      goto LABEL_20;
    }
    v14 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v11)
      goto LABEL_24;
    v15 = *(_QWORD *)(v26 + 8 * v14);
    ++v7;
    if (!v15)
    {
      v7 = v14 + 1;
      if (v14 + 1 >= v11)
        goto LABEL_24;
      v15 = *(_QWORD *)(v26 + 8 * v7);
      if (!v15)
      {
        v7 = v14 + 2;
        if (v14 + 2 >= v11)
          goto LABEL_24;
        v15 = *(_QWORD *)(v26 + 8 * v7);
        if (!v15)
          break;
      }
    }
LABEL_19:
    v10 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v7 << 6);
LABEL_20:
    v17 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v13);
    v18 = v17 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess(v17 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v25, 33, 0);
    swift_retain(v17);
    LOBYTE(v18) = a5(v18);
    swift_endAccess(v25);
    result = swift_release(v17);
    if ((v18 & 1) != 0)
    {
      *(_QWORD *)(v23 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v24++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain(a3);
        sub_10001AA9C();
        v21 = v20;
        swift_release(a4);
        return v21;
      }
    }
  }
  v16 = v14 + 3;
  if (v16 >= v11)
    goto LABEL_24;
  v15 = *(_QWORD *)(v26 + 8 * v16);
  if (v15)
  {
    v7 = v16;
    goto LABEL_19;
  }
  while (1)
  {
    v7 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v7 >= v11)
      goto LABEL_24;
    v15 = *(_QWORD *)(v26 + 8 * v7);
    ++v16;
    if (v15)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100075A00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t State;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  char *v18;
  int64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  char v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71[32];
  int64_t v72;

  v53 = a5;
  v54 = a4;
  v50[0] = a2;
  v51 = a1;
  State = type metadata accessor for LoadState(0);
  v7 = *(_QWORD *)(State - 8);
  v8 = __chkstk_darwin(State);
  v10 = (char *)v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)v50 - v11;
  v57 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  v13 = __chkstk_darwin(v57);
  v15 = (char *)v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v13);
  v18 = (char *)v50 - v17;
  v52 = 0;
  v19 = 0;
  v64 = a3;
  v20 = a3;
  v21 = v12;
  v22 = *(_QWORD *)(v20 + 56);
  v55 = v20 + 56;
  v23 = 1 << *(_BYTE *)(v20 + 32);
  v24 = -1;
  if (v23 < 64)
    v24 = ~(-1 << v23);
  v25 = v24 & v22;
  v56 = (unint64_t)(v23 + 63) >> 6;
  v63 = enum case for LoadState.loaded(_:);
  v61 = v12;
  v62 = v7;
  v60 = v18;
  while (v25)
  {
    v66 = (v25 - 1) & v25;
    v72 = v19;
    v26 = __clz(__rbit64(v25)) | (v19 << 6);
LABEL_17:
    v31 = *(_QWORD *)(v64 + 48);
    v59 = v26;
    v32 = *(_QWORD *)(v31 + 8 * v26);
    v33 = v32 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess(v32 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v71, 0, 0);
    sub_10002AC98(v33, (uint64_t)v18, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v21, v63, State);
    sub_100006710(&qword_1000FD7E8, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState);
    v35 = v34;
    v65 = v32;
    swift_retain(v32);
    dispatch thunk of RawRepresentable.rawValue.getter(State, v35);
    dispatch thunk of RawRepresentable.rawValue.getter(State, v35);
    v36 = v70;
    v37 = v68;
    if (v69 == v67 && v70 == v68)
    {
      swift_bridgeObjectRelease_n(v70, 2);
      sub_10002AC98((uint64_t)v18, (uint64_t)v15, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v21, State);
    }
    else
    {
      v58 = _stringCompareWithSmolCheck(_:_:expecting:)(v69, v70, v67, v68, 0);
      swift_bridgeObjectRelease(v36);
      swift_bridgeObjectRelease(v37);
      sub_10002AC98((uint64_t)v18, (uint64_t)v15, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v21, State);
      if ((v58 & 1) == 0)
      {
        v7 = v62;
        v39 = *(void (**)(char *, uint64_t))(v62 + 8);
        v39(v10, State);
        sub_10002ACC4((uint64_t)v15, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        v21 = v61;
        v39(v61, State);
        v18 = v60;
        sub_10002ACC4((uint64_t)v60, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        goto LABEL_29;
      }
    }
    dispatch thunk of RawRepresentable.rawValue.getter(State, v35);
    dispatch thunk of RawRepresentable.rawValue.getter(State, v35);
    v40 = v70;
    v41 = v68;
    if (v69 == v67 && v70 == v68)
    {
      swift_bridgeObjectRelease_n(v70, 2);
      v7 = v62;
      v47 = *(void (**)(char *, uint64_t))(v62 + 8);
      v47(v10, State);
      sub_10002ACC4((uint64_t)v15, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v21 = v61;
      v47(v61, State);
      v18 = v60;
      sub_10002ACC4((uint64_t)v60, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
LABEL_34:
      result = swift_release(v65);
      v19 = v72;
      v25 = v66;
    }
    else
    {
      v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v69, v70, v67, v68, 0);
      swift_bridgeObjectRelease(v40);
      swift_bridgeObjectRelease(v41);
      v7 = v62;
      v44 = *(void (**)(char *, uint64_t))(v62 + 8);
      v44(v10, State);
      sub_10002ACC4((uint64_t)v15, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v21 = v61;
      v44(v61, State);
      v18 = v60;
      sub_10002ACC4((uint64_t)v60, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      if ((v43 & 1) != 0)
        goto LABEL_34;
LABEL_29:
      v45 = v65;
      v46 = sub_100080448(v65);
      result = swift_release(v45);
      v19 = v72;
      v25 = v66;
      if ((v46 & 1) != 0)
      {
        *(_QWORD *)(v51 + ((v59 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v59;
        v27 = __OFADD__(v52++, 1);
        if (v27)
          goto LABEL_42;
      }
    }
  }
  v27 = __OFADD__(v19, 1);
  v28 = v19 + 1;
  if (v27)
  {
    __break(1u);
    goto LABEL_41;
  }
  if (v28 >= v56)
    goto LABEL_39;
  v29 = *(_QWORD *)(v55 + 8 * v28);
  if (v29)
  {
LABEL_16:
    v66 = (v29 - 1) & v29;
    v72 = v28;
    v26 = __clz(__rbit64(v29)) + (v28 << 6);
    goto LABEL_17;
  }
  v30 = v28 + 1;
  if (v28 + 1 >= v56)
    goto LABEL_39;
  v29 = *(_QWORD *)(v55 + 8 * v30);
  if (v29)
    goto LABEL_15;
  v30 = v28 + 2;
  if (v28 + 2 >= v56)
    goto LABEL_39;
  v29 = *(_QWORD *)(v55 + 8 * v30);
  if (v29)
    goto LABEL_15;
  v30 = v28 + 3;
  if (v28 + 3 >= v56)
  {
LABEL_39:
    swift_retain(v64);
    sub_10001AA9C();
    v49 = v48;
    swift_release(v53);
    swift_release(v54);
    return v49;
  }
  v29 = *(_QWORD *)(v55 + 8 * v30);
  if (v29)
  {
LABEL_15:
    v28 = v30;
    goto LABEL_16;
  }
  while (1)
  {
    v28 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v28 >= v56)
      goto LABEL_39;
    v29 = *(_QWORD *)(v55 + 8 * v28);
    ++v30;
    if (v29)
      goto LABEL_16;
  }
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

void sub_100075FD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t State;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  unint64_t v27;
  BOOL v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t);
  uint64_t v42;
  uint64_t v43;
  char v45;
  uint64_t v46;
  uint64_t (*v47)(_QWORD);
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  sub_10007F5A0();
  v4 = v3;
  v50 = v0;
  v57 = v6;
  v58 = v5;
  v8 = v7;
  v49 = v9;
  v51 = v10;
  State = type metadata accessor for LoadState(0);
  v12 = *(_QWORD *)(State - 8);
  __chkstk_darwin(State);
  sub_10001EB18();
  v63 = v13;
  sub_10001E148();
  __chkstk_darwin(v14);
  v16 = (char *)&v49 - v15;
  v53 = sub_10007D9D8();
  sub_10002BCBC();
  __chkstk_darwin(v17);
  sub_10007F284();
  __chkstk_darwin(v18);
  sub_10007F6F0();
  v52 = 0;
  v62 = v8;
  v19 = v8;
  v20 = (uint64_t)v16;
  v54 = v19 + 56;
  sub_10007F308();
  v24 = v23 & v22;
  v55 = (unint64_t)(v25 + 63) >> 6;
  v60 = *v4;
  v26 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState;
  while (1)
  {
    if (v24)
    {
      v64 = (v24 - 1) & v24;
      v65 = v21;
      v27 = __clz(__rbit64(v24)) | (v21 << 6);
      goto LABEL_15;
    }
    v28 = __OFADD__(v21, 1);
    v29 = v21 + 1;
    if (v28)
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v29 >= v55)
      goto LABEL_37;
    v30 = *(_QWORD *)(v54 + 8 * v29);
    if (!v30)
      break;
LABEL_14:
    v64 = (v30 - 1) & v30;
    v65 = v29;
    v27 = __clz(__rbit64(v30)) + (v29 << 6);
LABEL_15:
    v32 = *(_QWORD *)(v62 + 48);
    v61 = v27;
    v33 = *(_QWORD *)(v32 + 8 * v27);
    v34 = v33 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    sub_10002B2E0(v33 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, (uint64_t)&v70);
    sub_10007E94C(v34, v1);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v12 + 104))(v20, v60, State);
    sub_100006710(&qword_1000FD7E8, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState);
    v36 = v35;
    v71 = v33;
    sub_10001E900();
    sub_1000801DC();
    sub_1000801DC();
    if (v68 == v66 && v69 == v67)
    {
      sub_10007E108();
      sub_10007E94C(v1, v2);
      v40 = v63;
      sub_10007F8A4(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16));
      goto LABEL_27;
    }
    v56 = v36;
    v39 = sub_10007F760(v68, v37, v66);
    v40 = v63;
    v59 = v39;
    sub_10001E034();
    sub_10001DA38();
    sub_10007E94C(v1, v2);
    sub_10007F8A4(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16));
    if ((v59 & 1) != 0)
    {
LABEL_27:
      sub_100039EAC(v40);
      sub_10002ACC4(v2, v26);
      sub_100039EAC(v20);
      sub_10002ACC4(v1, v26);
      v24 = v64;
LABEL_28:
      v48 = sub_100080448(v57);
      sub_10001D9C0();
      v21 = v65;
      if ((v48 & 1) != 0)
      {
        *(_QWORD *)(v51 + ((v61 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v61;
        v28 = __OFADD__(v52++, 1);
        if (v28)
          goto LABEL_40;
      }
    }
    else
    {
      v41 = v26;
      v42 = v56;
      dispatch thunk of RawRepresentable.rawValue.getter(State, v56);
      dispatch thunk of RawRepresentable.rawValue.getter(State, v42);
      v43 = v67;
      if (v68 == v66 && v69 == v67)
      {
        sub_10007E108();
        v40 = v63;
        v26 = v41;
        goto LABEL_27;
      }
      v45 = _stringCompareWithSmolCheck(_:_:expecting:)(v68, v69, v66, v67, 0);
      sub_10001E034();
      swift_bridgeObjectRelease(v43);
      sub_100039EAC(v63);
      v26 = v41;
      sub_10002ACC4(v2, v41);
      sub_100039EAC(v20);
      v46 = sub_10001E4C8();
      sub_10002ACC4(v46, v47);
      v24 = v64;
      if ((v45 & 1) != 0)
        goto LABEL_28;
      swift_release(v71);
      v21 = v65;
    }
  }
  v31 = v29 + 1;
  if (v29 + 1 >= v55)
    goto LABEL_37;
  v30 = *(_QWORD *)(v54 + 8 * v31);
  if (v30)
    goto LABEL_13;
  v31 = v29 + 2;
  if (v29 + 2 >= v55)
    goto LABEL_37;
  v30 = *(_QWORD *)(v54 + 8 * v31);
  if (v30)
    goto LABEL_13;
  v31 = v29 + 3;
  if (v29 + 3 >= v55)
  {
LABEL_37:
    sub_10001D7EC();
    sub_10001AA9C();
    swift_release(v57);
    swift_release(v58);
    sub_10007EDD8();
    return;
  }
  v30 = *(_QWORD *)(v54 + 8 * v31);
  if (v30)
  {
LABEL_13:
    v29 = v31;
    goto LABEL_14;
  }
  while (1)
  {
    v29 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v29 >= v55)
      goto LABEL_37;
    v30 = *(_QWORD *)(v54 + 8 * v29);
    ++v31;
    if (v30)
      goto LABEL_14;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
}

uint64_t sub_100076430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t State;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  char *v17;
  int64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  char v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71[32];
  uint64_t v72;

  v57 = a5;
  v58 = a4;
  v51[0] = a2;
  v52 = a1;
  State = type metadata accessor for LoadState(0);
  v7 = *(_QWORD *)(State - 8);
  v8 = __chkstk_darwin(State);
  v64 = (char *)v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)v51 - v10;
  v54 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  v12 = __chkstk_darwin(v54);
  v14 = (char *)v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v12);
  v17 = (char *)v51 - v16;
  v53 = 0;
  v18 = 0;
  v62 = a3;
  v19 = a3;
  v20 = v11;
  v21 = *(_QWORD *)(v19 + 56);
  v55 = v19 + 56;
  v22 = 1 << *(_BYTE *)(v19 + 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v24 = v23 & v21;
  v56 = (unint64_t)(v22 + 63) >> 6;
  v60 = enum case for LoadState.unloaded(_:);
  while (1)
  {
    if (v24)
    {
      v72 = (v24 - 1) & v24;
      v65 = v18;
      v25 = __clz(__rbit64(v24)) | (v18 << 6);
      goto LABEL_17;
    }
    v26 = __OFADD__(v18, 1);
    v27 = v18 + 1;
    if (v26)
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v27 >= v56)
      goto LABEL_39;
    v28 = *(_QWORD *)(v55 + 8 * v27);
    if (!v28)
      break;
LABEL_16:
    v72 = (v28 - 1) & v28;
    v65 = v27;
    v25 = __clz(__rbit64(v28)) + (v27 << 6);
LABEL_17:
    v30 = *(_QWORD *)(v62 + 48);
    v61 = v25;
    v31 = *(_QWORD *)(v30 + 8 * v25);
    v32 = v31 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess(v31 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v71, 0, 0);
    sub_10002AC98(v32, (uint64_t)v17, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v20, v60, State);
    sub_100006710(&qword_1000FD7E8, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState);
    v34 = v33;
    v66 = v31;
    swift_retain(v31);
    dispatch thunk of RawRepresentable.rawValue.getter(State, v34);
    v63 = v34;
    dispatch thunk of RawRepresentable.rawValue.getter(State, v34);
    v35 = v70;
    v36 = v68;
    if (v69 == v67 && v70 == v68)
    {
      swift_bridgeObjectRelease_n(v70, 2);
      sub_10002AC98((uint64_t)v17, (uint64_t)v14, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v39 = v64;
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v64, v20, State);
      goto LABEL_29;
    }
    v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v69, v70, v67, v68, 0);
    v39 = v64;
    v59 = v38;
    swift_bridgeObjectRelease(v35);
    swift_bridgeObjectRelease(v36);
    sub_10002AC98((uint64_t)v17, (uint64_t)v14, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v39, v20, State);
    if ((v59 & 1) != 0)
    {
LABEL_29:
      v47 = *(void (**)(char *, uint64_t))(v7 + 8);
      v47(v39, State);
      sub_10002ACC4((uint64_t)v14, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v47(v20, State);
      sub_10002ACC4((uint64_t)v17, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v18 = v65;
      v46 = v66;
LABEL_30:
      v48 = sub_100080448(v46);
      result = swift_release(v46);
      v24 = v72;
      if ((v48 & 1) != 0)
      {
        *(_QWORD *)(v52 + ((v61 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v61;
        v26 = __OFADD__(v53++, 1);
        if (v26)
          goto LABEL_42;
      }
    }
    else
    {
      v40 = v63;
      dispatch thunk of RawRepresentable.rawValue.getter(State, v63);
      dispatch thunk of RawRepresentable.rawValue.getter(State, v40);
      v41 = v70;
      v42 = v68;
      if (v69 == v67 && v70 == v68)
      {
        swift_bridgeObjectRelease_n(v70, 2);
        v39 = v64;
        goto LABEL_29;
      }
      v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v69, v70, v67, v68, 0);
      swift_bridgeObjectRelease(v41);
      swift_bridgeObjectRelease(v42);
      v45 = *(void (**)(char *, uint64_t))(v7 + 8);
      v45(v64, State);
      sub_10002ACC4((uint64_t)v14, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v45(v20, State);
      sub_10002ACC4((uint64_t)v17, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v18 = v65;
      v46 = v66;
      if ((v44 & 1) != 0)
        goto LABEL_30;
      result = swift_release(v66);
      v24 = v72;
    }
  }
  v29 = v27 + 1;
  if (v27 + 1 >= v56)
    goto LABEL_39;
  v28 = *(_QWORD *)(v55 + 8 * v29);
  if (v28)
    goto LABEL_15;
  v29 = v27 + 2;
  if (v27 + 2 >= v56)
    goto LABEL_39;
  v28 = *(_QWORD *)(v55 + 8 * v29);
  if (v28)
    goto LABEL_15;
  v29 = v27 + 3;
  if (v27 + 3 >= v56)
  {
LABEL_39:
    swift_retain(v62);
    sub_10001AA9C();
    v50 = v49;
    swift_release(v57);
    swift_release(v58);
    return v50;
  }
  v28 = *(_QWORD *)(v55 + 8 * v29);
  if (v28)
  {
LABEL_15:
    v27 = v29;
    goto LABEL_16;
  }
  while (1)
  {
    v27 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v27 >= v56)
      goto LABEL_39;
    v28 = *(_QWORD *)(v55 + 8 * v27);
    ++v29;
    if (v28)
      goto LABEL_16;
  }
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

void sub_100076998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v33;
  void (*v34)(char *, uint64_t);
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  BOOL v37;
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t State;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54[32];
  int64_t v55;

  v39 = a4;
  v38[1] = a2;
  v40 = a1;
  State = type metadata accessor for LoadState(0);
  v5 = *(_QWORD *)(State - 8);
  v6 = __chkstk_darwin(State);
  v48 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v47 = (char *)v38 - v8;
  v9 = 0;
  v10 = 0;
  v45 = a3;
  v13 = *(_QWORD *)(a3 + 56);
  v12 = a3 + 56;
  v11 = v13;
  v14 = 1 << *(_BYTE *)(v12 - 24);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v11;
  v42 = v12;
  v43 = (unint64_t)(v14 + 63) >> 6;
  v44 = enum case for LoadState.dynamicMode(_:);
LABEL_4:
  v41 = v9;
  while (1)
  {
    if (v16)
    {
      v49 = (v16 - 1) & v16;
      v55 = v10;
      v17 = __clz(__rbit64(v16)) | (v10 << 6);
      v18 = v47;
      v19 = v48;
      v20 = State;
      goto LABEL_21;
    }
    v21 = v10 + 1;
    v18 = v47;
    v19 = v48;
    v20 = State;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v21 >= v43)
      goto LABEL_31;
    v22 = *(_QWORD *)(v42 + 8 * v21);
    v23 = v10 + 1;
    if (!v22)
    {
      v23 = v10 + 2;
      if (v10 + 2 >= v43)
        goto LABEL_31;
      v22 = *(_QWORD *)(v42 + 8 * v23);
      if (!v22)
      {
        v23 = v10 + 3;
        if (v10 + 3 >= v43)
          goto LABEL_31;
        v22 = *(_QWORD *)(v42 + 8 * v23);
        if (!v22)
          break;
      }
    }
LABEL_20:
    v49 = (v22 - 1) & v22;
    v55 = v23;
    v17 = __clz(__rbit64(v22)) + (v23 << 6);
LABEL_21:
    v25 = v17;
    v26 = *(_QWORD *)(*(_QWORD *)(v45 + 48) + 8 * v17);
    v27 = v26 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess(v26 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v54, 0, 0);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v18, v27, v20);
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v19, v44, v20);
    sub_100006710(&qword_1000FD7E8, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState);
    v29 = v28;
    swift_retain();
    dispatch thunk of RawRepresentable.rawValue.getter(v20, v29);
    dispatch thunk of RawRepresentable.rawValue.getter(v20, v29);
    v30 = v53;
    v31 = v51;
    if (v52 == v50 && v53 == v51)
    {
      swift_bridgeObjectRelease_n(v53, 2);
      v35 = *(void (**)(char *, uint64_t))(v5 + 8);
      v35(v19, v20);
      v35(v18, v20);
      swift_release(v26);
      v10 = v55;
      v16 = v49;
LABEL_28:
      v36 = v41;
      *(_QWORD *)(v40 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
      v37 = __OFADD__(v36, 1);
      v9 = v36 + 1;
      if (!v37)
        goto LABEL_4;
      __break(1u);
LABEL_31:
      swift_retain();
      sub_10001AA9C();
      swift_release(v39);
      return;
    }
    v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v52, v53, v50, v51, 0);
    swift_bridgeObjectRelease(v30);
    swift_bridgeObjectRelease(v31);
    v34 = *(void (**)(char *, uint64_t))(v5 + 8);
    v34(v19, v20);
    v34(v18, v20);
    swift_release(v26);
    v10 = v55;
    v16 = v49;
    if ((v33 & 1) != 0)
      goto LABEL_28;
  }
  v24 = v10 + 4;
  if (v10 + 4 >= v43)
    goto LABEL_31;
  v22 = *(_QWORD *)(v42 + 8 * v24);
  if (v22)
  {
    v23 = v10 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    v23 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v23 >= v43)
      goto LABEL_31;
    v22 = *(_QWORD *)(v42 + 8 * v23);
    ++v24;
    if (v22)
      goto LABEL_20;
  }
LABEL_33:
  __break(1u);
}

uint64_t sub_100076D3C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[24];
  int64_t v28;

  v25 = result;
  v26 = 0;
  v7 = 0;
  v8 = a3 + 56;
  v9 = 1 << *(_BYTE *)(a3 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a3 + 56);
  v28 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v12 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v13 = v12 | (v7 << 6);
      goto LABEL_20;
    }
    v14 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v28)
      goto LABEL_24;
    v15 = *(_QWORD *)(v8 + 8 * v14);
    ++v7;
    if (!v15)
    {
      v7 = v14 + 1;
      if (v14 + 1 >= v28)
        goto LABEL_24;
      v15 = *(_QWORD *)(v8 + 8 * v7);
      if (!v15)
      {
        v7 = v14 + 2;
        if (v14 + 2 >= v28)
          goto LABEL_24;
        v15 = *(_QWORD *)(v8 + 8 * v7);
        if (!v15)
          break;
      }
    }
LABEL_19:
    v11 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v7 << 6);
LABEL_20:
    v17 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v13);
    v18 = v17 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess(v17 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v27, 0, 0);
    v19 = *(_QWORD *)(v18 + *(int *)(type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0) + 40));
    swift_retain();
    swift_bridgeObjectRetain(v19);
    v20 = sub_100079064(a5, v19);
    swift_release(v17);
    result = swift_bridgeObjectRelease(v19);
    if ((v20 & 1) != 0)
    {
      *(_QWORD *)(v25 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v26++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        sub_10001AA9C();
        v23 = v22;
        swift_bridgeObjectRelease(a5);
        swift_release(a4);
        return v23;
      }
    }
  }
  v16 = v14 + 3;
  if (v16 >= v28)
    goto LABEL_24;
  v15 = *(_QWORD *)(v8 + 8 * v16);
  if (v15)
  {
    v7 = v16;
    goto LABEL_19;
  }
  while (1)
  {
    v7 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v7 >= v28)
      goto LABEL_24;
    v15 = *(_QWORD *)(v8 + 8 * v7);
    ++v16;
    if (v15)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
  return result;
}

void sub_100076F68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v46)(char *, uint64_t);
  char *v47;
  void (*v48)(char *, uint64_t);
  char *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  _QWORD v53[2];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  int v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  int64_t v66;
  int64_t v67;
  uint64_t State;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75[32];
  uint64_t v76;

  v59 = a5;
  v54 = a4;
  v53[1] = a2;
  v55 = a1;
  State = type metadata accessor for LoadState(0);
  v6 = *(_QWORD *)(State - 8);
  v7 = __chkstk_darwin(State);
  v64 = (char *)v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)v53 - v9;
  v70 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  v11 = __chkstk_darwin(v70);
  v63 = (uint64_t)v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)v53 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)v53 - v16;
  v56 = 0;
  v18 = 0;
  v19 = *(_QWORD *)(a3 + 56);
  v65 = a3 + 56;
  v20 = 1 << *(_BYTE *)(a3 + 32);
  v21 = -1;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  v22 = v21 & v19;
  v66 = (unint64_t)(v20 + 63) >> 6;
  v62 = enum case for LoadState.loaded(_:);
  v60 = v17;
  v61 = a3;
  v57 = v10;
  while (1)
  {
    if (v22)
    {
      v76 = (v22 - 1) & v22;
      v23 = __clz(__rbit64(v22)) | (v18 << 6);
      goto LABEL_17;
    }
    v24 = __OFADD__(v18++, 1);
    if (v24)
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v18 >= v66)
      goto LABEL_41;
    v25 = *(_QWORD *)(v65 + 8 * v18);
    if (!v25)
      break;
LABEL_16:
    v76 = (v25 - 1) & v25;
    v23 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_17:
    v27 = *(_QWORD *)(a3 + 48);
    v69 = v23;
    v28 = *(_QWORD *)(v27 + 8 * v23);
    v29 = v28 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess(v28 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v75, 0, 0);
    sub_10002AC98(v29, (uint64_t)v17, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    v30 = *(_QWORD *)(*(_QWORD *)&v17[*(int *)(v70 + 48)] + 16);
    swift_retain();
    sub_10002ACC4((uint64_t)v17, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    if (v30)
      goto LABEL_18;
    v67 = v18;
    sub_10002AC98(v29, (uint64_t)v15, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    v31 = State;
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v10, v62, State);
    sub_100006710(&qword_1000FD7E8, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState);
    v33 = v32;
    dispatch thunk of RawRepresentable.rawValue.getter(v31, v32);
    dispatch thunk of RawRepresentable.rawValue.getter(v31, v33);
    v34 = v74;
    v35 = (uint64_t)v15;
    v36 = v72;
    if (v73 == v71 && v74 == v72)
    {
      swift_bridgeObjectRelease_n(v74, 2);
      v38 = v63;
      sub_10002AC98(v35, v63, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v39 = v64;
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v64, v10, v31);
LABEL_31:
      v48 = *(void (**)(char *, uint64_t))(v6 + 8);
      v49 = v39;
      v50 = State;
      v48(v49, State);
      sub_10002ACC4(v38, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v48(v10, v50);
      sub_10002ACC4(v35, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v15 = (char *)v35;
      v17 = v60;
      a3 = v61;
      v18 = v67;
      goto LABEL_32;
    }
    v58 = _stringCompareWithSmolCheck(_:_:expecting:)(v73, v74, v71, v72, 0);
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(v36);
    v38 = v63;
    sub_10002AC98(v35, v63, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    v39 = v64;
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v64, v10, v31);
    if ((v58 & 1) != 0)
      goto LABEL_31;
    v40 = v6;
    v41 = v39;
    v42 = State;
    dispatch thunk of RawRepresentable.rawValue.getter(State, v33);
    dispatch thunk of RawRepresentable.rawValue.getter(v42, v33);
    v43 = v74;
    v44 = v72;
    if (v73 == v71 && v74 == v72)
    {
      swift_bridgeObjectRelease_n(v74, 2);
      v6 = v40;
      v39 = v41;
      v10 = v57;
      goto LABEL_31;
    }
    v58 = _stringCompareWithSmolCheck(_:_:expecting:)(v73, v74, v71, v72, 0);
    swift_bridgeObjectRelease(v43);
    swift_bridgeObjectRelease(v44);
    v46 = *(void (**)(char *, uint64_t))(v40 + 8);
    v46(v41, v42);
    sub_10002ACC4(v38, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    v47 = v57;
    v46(v57, v42);
    v15 = (char *)v35;
    sub_10002ACC4(v35, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    v17 = v60;
    a3 = v61;
    v6 = v40;
    v10 = v47;
    v18 = v67;
    if ((v58 & 1) != 0)
    {
LABEL_32:
      v51 = sub_10002C4B0(v28, v59);
      swift_release(v28);
      v22 = v76;
      if ((v51 & 1) == 0)
      {
        *(_QWORD *)(v55 + ((v69 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v69;
        v24 = __OFADD__(v56++, 1);
        if (v24)
          goto LABEL_44;
      }
    }
    else
    {
LABEL_18:
      swift_release(v28);
      v22 = v76;
    }
  }
  v26 = v18 + 1;
  if (v18 + 1 >= v66)
    goto LABEL_41;
  v25 = *(_QWORD *)(v65 + 8 * v26);
  if (v25)
    goto LABEL_15;
  v26 = v18 + 2;
  if (v18 + 2 >= v66)
    goto LABEL_41;
  v25 = *(_QWORD *)(v65 + 8 * v26);
  if (v25)
    goto LABEL_15;
  v26 = v18 + 3;
  if (v18 + 3 >= v66)
  {
LABEL_41:
    v52 = v54;
    swift_retain();
    sub_10001AA9C();
    swift_bridgeObjectRelease(v59);
    swift_release(v52);
    return;
  }
  v25 = *(_QWORD *)(v65 + 8 * v26);
  if (v25)
  {
LABEL_15:
    v18 = v26;
    goto LABEL_16;
  }
  while (1)
  {
    v18 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v18 >= v66)
      goto LABEL_41;
    v25 = *(_QWORD *)(v65 + 8 * v18);
    ++v26;
    if (v25)
      goto LABEL_16;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
}

void sub_100077580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t State;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68[32];
  uint64_t v69;

  v49 = a4;
  v48 = a2;
  v50 = a1;
  State = type metadata accessor for LoadState(0);
  v6 = *(_QWORD *)(State - 8);
  v7 = __chkstk_darwin(State);
  v57 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v48 - v9;
  v60 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  v11 = __chkstk_darwin(v60);
  v56 = (uint64_t)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v48 - v13;
  v15 = 0;
  v16 = 0;
  v59 = a3;
  v17 = a3;
  v18 = (uint64_t)v14;
  v19 = *(_QWORD *)(v17 + 56);
  v52 = v17 + 56;
  v20 = 1 << *(_BYTE *)(v17 + 32);
  v21 = -1;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  v22 = v21 & v19;
  v53 = (unint64_t)(v20 + 63) >> 6;
  v55 = enum case for LoadState.loaded(_:);
LABEL_4:
  v51 = v15;
  while (1)
  {
    if (v22)
    {
      v62 = (v22 - 1) & v22;
      v63 = v16;
      v23 = __clz(__rbit64(v22)) | (v16 << 6);
      goto LABEL_18;
    }
    v24 = __OFADD__(v16, 1);
    v25 = v16 + 1;
    if (v24)
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v25 >= v53)
      goto LABEL_41;
    v26 = *(_QWORD *)(v52 + 8 * v25);
    if (!v26)
      break;
LABEL_17:
    v62 = (v26 - 1) & v26;
    v63 = v25;
    v23 = __clz(__rbit64(v26)) + (v25 << 6);
LABEL_18:
    v28 = *(_QWORD *)(v59 + 48);
    v58 = v23;
    v29 = *(_QWORD *)(v28 + 8 * v23);
    v30 = v29 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess(v29 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v68, 0, 0);
    v61 = v30;
    sub_10002AC98(v30, v18, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v10, v55, State);
    sub_100006710(&qword_1000FD7E8, (uint64_t (*)(uint64_t))&type metadata accessor for LoadState);
    v32 = v31;
    v69 = v29;
    swift_retain();
    dispatch thunk of RawRepresentable.rawValue.getter(State, v32);
    dispatch thunk of RawRepresentable.rawValue.getter(State, v32);
    v33 = v67;
    v34 = v65;
    if (v66 == v64 && v67 == v65)
    {
      swift_bridgeObjectRelease_n(v67, 2);
      v36 = v56;
      sub_10002AC98(v18, v56, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v37 = v57;
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v57, v10, State);
LABEL_30:
      v44 = *(void (**)(char *, uint64_t))(v6 + 8);
      v44(v37, State);
      sub_10002ACC4(v36, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v44(v10, State);
      sub_10002ACC4(v18, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v22 = v62;
      v16 = v63;
      v43 = v69;
      goto LABEL_31;
    }
    v54 = _stringCompareWithSmolCheck(_:_:expecting:)(v66, v67, v64, v65, 0);
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(v34);
    v36 = v56;
    sub_10002AC98(v18, v56, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    v37 = v57;
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v57, v10, State);
    if ((v54 & 1) != 0)
      goto LABEL_30;
    dispatch thunk of RawRepresentable.rawValue.getter(State, v32);
    dispatch thunk of RawRepresentable.rawValue.getter(State, v32);
    v38 = v67;
    v39 = v65;
    if (v66 == v64 && v67 == v65)
    {
      swift_bridgeObjectRelease_n(v67, 2);
      goto LABEL_30;
    }
    v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v66, v67, v64, v65, 0);
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease(v39);
    v42 = *(void (**)(char *, uint64_t))(v6 + 8);
    v42(v37, State);
    sub_10002ACC4(v36, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    v42(v10, State);
    sub_10002ACC4(v18, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    v22 = v62;
    v16 = v63;
    v43 = v69;
    if ((v41 & 1) != 0)
    {
LABEL_31:
      v45 = *(_BYTE *)(v61 + *(int *)(v60 + 24));
      swift_release(v43);
      if ((v45 & 1) == 0)
      {
        v46 = v51;
        *(_QWORD *)(v50 + ((v58 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v58;
        v24 = __OFADD__(v46, 1);
        v15 = v46 + 1;
        if (!v24)
          goto LABEL_4;
        __break(1u);
LABEL_41:
        v47 = v49;
        swift_retain();
        sub_10001AA9C();
        swift_release(v47);
        return;
      }
    }
    else
    {
      swift_release(v69);
    }
  }
  v27 = v25 + 1;
  if (v25 + 1 >= v53)
    goto LABEL_41;
  v26 = *(_QWORD *)(v52 + 8 * v27);
  if (v26)
    goto LABEL_16;
  v27 = v25 + 2;
  if (v25 + 2 >= v53)
    goto LABEL_41;
  v26 = *(_QWORD *)(v52 + 8 * v27);
  if (v26)
    goto LABEL_16;
  v27 = v25 + 3;
  if (v25 + 3 >= v53)
    goto LABEL_41;
  v26 = *(_QWORD *)(v52 + 8 * v27);
  if (v26)
  {
LABEL_16:
    v25 = v27;
    goto LABEL_17;
  }
  while (1)
  {
    v25 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v25 >= v53)
      goto LABEL_41;
    v26 = *(_QWORD *)(v52 + 8 * v25);
    ++v27;
    if (v26)
      goto LABEL_17;
  }
LABEL_43:
  __break(1u);
}

uint64_t sub_100077ABC(uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  char *v8;
  Swift::Int v9;
  char *v11[2];

  v6 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v6 = sub_1000C3B1C(v6);
    *a1 = v6;
  }
  v8 = *(char **)(v6 + 16);
  v11[0] = (char *)(v6 + 32);
  v11[1] = v8;
  v9 = sub_100077B4C(v11, a2, a3);
  return specialized ContiguousArray._endMutation()(v9);
}

Swift::Int sub_100077B4C(char **a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  Swift::Int result;
  Swift::Int v12;
  char *v13;
  uint64_t v14;
  Swift::Int v15;
  char *v16;
  char *v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Int v36;
  uint64_t *v37;
  Swift::Int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  Swift::Int v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  char v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  BOOL v111;
  char *v112;
  BOOL v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  BOOL v135;
  char *v136;
  BOOL v137;
  uint64_t v139;
  BOOL v140;
  int64_t v141;
  unint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char **v162;
  Swift::Int v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  unint64_t v171;
  int64_t v172;
  uint64_t v173;
  uint64_t v174;
  Swift::Int v175;
  char *v176;
  char *v177;
  unint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t (*v184)(uint64_t, uint64_t);
  char *v185;
  char v186[24];
  char v187[24];
  char v188[16];
  char v189[8];
  char v190[8];
  char v191[8];
  char v192[8];
  char v193[8];
  char v194[8];
  char v195[8];
  uint64_t v196;

  v183 = a3;
  v184 = a2;
  v6 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  v7 = __chkstk_darwin(v6);
  v182 = (uint64_t)&v161 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v181 = (uint64_t)&v161 - v9;
  v10 = (Swift::Int)a1[1];
  result = _minimumMergeRunLength(_:)(v10);
  v166 = (char *)v10;
  if (result >= v10)
  {
    if (v10 < 0)
      goto LABEL_200;
    if ((unint64_t)v10 >= 2)
    {
      v164 = v3;
      v143 = *a1;
      v144 = -1;
      v145 = 1;
      v185 = *a1;
      v146 = v181;
      do
      {
        v179 = (char *)v145;
        v147 = *(_QWORD *)&v185[8 * v145];
        v180 = (char *)v144;
        v178 = (unint64_t)v143;
        do
        {
          v148 = *(_QWORD *)v143;
          v149 = v147 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
          swift_beginAccess(v147 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v195, 0, 0);
          sub_10002AC98(v149, v146, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          v150 = v148 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
          swift_beginAccess(v148 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v194, 0, 0);
          v151 = v182;
          sub_10002AC98(v150, v182, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          swift_retain(v147);
          swift_retain(v148);
          LOBYTE(v150) = v184(v146, v151);
          sub_10002ACC4(v151, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          sub_10002ACC4(v146, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          swift_release(v147);
          result = swift_release(v148);
          if ((v150 & 1) == 0)
            break;
          if (!v185)
            goto LABEL_202;
          v152 = *(_QWORD *)v143;
          v147 = *((_QWORD *)v143 + 1);
          *(_QWORD *)v143 = v147;
          *((_QWORD *)v143 + 1) = v152;
          v143 -= 8;
          v111 = __CFADD__(v144++, 1);
        }
        while (!v111);
        v145 = (uint64_t)(v179 + 1);
        v143 = (char *)(v178 + 8);
        v144 = (uint64_t)(v180 - 1);
      }
      while (v179 + 1 != v166);
    }
    return result;
  }
  v12 = result;
  v164 = v3;
  sub_100002F00(v10 / 2);
  v177 = v13;
  v196 = v14;
  v162 = a1;
  if (v10 > 0)
  {
    v163 = v12;
    v15 = 0;
    v16 = *a1;
    v165 = (uint64_t)(*a1 - 8);
    v17 = (char *)_swiftEmptyArrayStorage;
    v176 = v16;
    while (1)
    {
      v4 = v15;
      v18 = v15 + 1;
      v180 = (char *)v15;
      if (v15 + 1 < v10)
      {
        v19 = *(_QWORD *)&v16[8 * v18];
        v20 = *(_QWORD *)&v16[8 * v15];
        v21 = v17;
        v22 = v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
        swift_beginAccess(v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v189, 0, 0);
        v23 = v181;
        sub_10002AC98(v22, v181, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        v24 = v20 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
        swift_beginAccess(v20 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v188, 0, 0);
        v25 = v182;
        sub_10002AC98(v24, v182, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        swift_retain(v19);
        swift_retain(v20);
        LODWORD(v185) = v184(v23, v25);
        v26 = v25;
        v17 = v21;
        v4 = (uint64_t)v180;
        sub_10002ACC4(v26, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        sub_10002ACC4(v23, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        swift_release(v19);
        swift_release(v20);
        v18 = v4 + 2;
        if (v4 + 2 < v10)
        {
          v168 = v17;
          v27 = v4;
          while (1)
          {
            v28 = v10;
            v29 = &v16[8 * v27];
            v30 = *((_QWORD *)v29 + 1);
            v31 = *((_QWORD *)v29 + 2);
            v32 = v31 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
            swift_beginAccess(v31 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v187, 0, 0);
            v33 = v181;
            sub_10002AC98(v32, v181, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
            v34 = v30 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
            swift_beginAccess(v30 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v186, 0, 0);
            v35 = v182;
            sub_10002AC98(v34, v182, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
            swift_retain(v31);
            swift_retain(v30);
            LODWORD(v34) = v184(v33, v35);
            sub_10002ACC4(v35, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
            sub_10002ACC4(v33, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
            swift_release(v31);
            swift_release(v30);
            if (((v185 ^ v34) & 1) != 0)
              break;
            v36 = v27 + 3;
            ++v27;
            v10 = v28;
            v16 = v176;
            if (v36 >= v28)
            {
              v18 = v28;
              v17 = v168;
              goto LABEL_11;
            }
          }
          v18 = v27 + 2;
          v17 = v168;
          v16 = v176;
          v10 = v28;
LABEL_11:
          v4 = (uint64_t)v180;
        }
        if ((v185 & 1) != 0)
        {
          if (v18 < v4)
            goto LABEL_197;
          if (v4 < v18)
          {
            v37 = (uint64_t *)(v165 + 8 * v18);
            v38 = v18;
            v39 = v4;
            v40 = (uint64_t *)&v16[8 * v4];
            do
            {
              if (v39 != --v38)
              {
                if (!v16)
                  goto LABEL_205;
                v41 = *v40;
                *v40 = *v37;
                *v37 = v41;
              }
              ++v39;
              --v37;
              ++v40;
            }
            while (v39 < v38);
          }
        }
      }
      if (v18 < v10)
      {
        if (__OFSUB__(v18, v4))
          goto LABEL_196;
        if (v18 - v4 < v163)
        {
          if (__OFADD__(v4, v163))
            goto LABEL_198;
          if (v4 + v163 >= v10)
            v42 = (char *)v10;
          else
            v42 = (char *)(v4 + v163);
          if ((uint64_t)v42 < v4)
            goto LABEL_199;
          if ((char *)v18 != v42)
          {
            v168 = v17;
            v43 = (char *)(v165 + 8 * v18);
            v179 = v42;
            do
            {
              v44 = *(_QWORD *)&v16[8 * v18];
              v185 = v43;
              v175 = v18;
              do
              {
                v45 = *(_QWORD *)v43;
                v46 = v44 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
                swift_beginAccess(v44 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v191, 0, 0);
                v47 = v181;
                sub_10002AC98(v46, v181, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
                v48 = v45 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
                swift_beginAccess(v45 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v190, 0, 0);
                v49 = v182;
                sub_10002AC98(v48, v182, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
                swift_retain(v44);
                swift_retain(v45);
                LOBYTE(v48) = v184(v47, v49);
                v50 = v49;
                v16 = v176;
                sub_10002ACC4(v50, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
                sub_10002ACC4(v47, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
                swift_release(v44);
                v51 = v45;
                v52 = (char *)v175;
                swift_release(v51);
                if ((v48 & 1) == 0)
                  break;
                if (!v16)
                  goto LABEL_201;
                v53 = *(_QWORD *)v43;
                v44 = *((_QWORD *)v43 + 1);
                *(_QWORD *)v43 = v44;
                *((_QWORD *)v43 + 1) = v53;
                v43 -= 8;
                ++v4;
              }
              while (v52 != (char *)v4);
              v18 = (Swift::Int)(v52 + 1);
              v43 = v185 + 8;
              v4 = (uint64_t)v180;
            }
            while ((char *)v18 != v179);
            v18 = (Swift::Int)v179;
            v10 = (Swift::Int)v166;
            v17 = v168;
          }
        }
      }
      if (v18 < v4)
        goto LABEL_191;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
      v175 = v18;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        v17 = sub_100078F64(0, *((_QWORD *)v17 + 2) + 1, 1, v17);
      v56 = *((_QWORD *)v17 + 2);
      v55 = *((_QWORD *)v17 + 3);
      v57 = v56 + 1;
      if (v56 >= v55 >> 1)
        v17 = sub_100078F64((char *)(v55 > 1), v56 + 1, 1, v17);
      *((_QWORD *)v17 + 2) = v57;
      v58 = v17 + 32;
      v59 = &v17[16 * v56 + 32];
      v60 = v175;
      *(_QWORD *)v59 = v4;
      *((_QWORD *)v59 + 1) = v60;
      if (v56)
        break;
      v57 = 1;
LABEL_147:
      v15 = v175;
      if (v175 >= v10)
        goto LABEL_160;
    }
    v168 = v17;
    v167 = v17 + 32;
    while (1)
    {
      v61 = v57 - 1;
      if (v57 >= 4)
      {
        v66 = &v58[16 * v57];
        v67 = *((_QWORD *)v66 - 8);
        v68 = *((_QWORD *)v66 - 7);
        v72 = __OFSUB__(v68, v67);
        v69 = v68 - v67;
        if (v72)
          goto LABEL_180;
        v71 = *((_QWORD *)v66 - 6);
        v70 = *((_QWORD *)v66 - 5);
        v72 = __OFSUB__(v70, v71);
        v64 = v70 - v71;
        v65 = v72;
        if (v72)
          goto LABEL_181;
        v73 = v57 - 2;
        v74 = &v58[16 * v57 - 32];
        v76 = *(_QWORD *)v74;
        v75 = *((_QWORD *)v74 + 1);
        v72 = __OFSUB__(v75, v76);
        v77 = v75 - v76;
        if (v72)
          goto LABEL_183;
        v72 = __OFADD__(v64, v77);
        v78 = v64 + v77;
        if (v72)
          goto LABEL_186;
        if (v78 >= v69)
        {
          v96 = &v58[16 * v61];
          v98 = *(_QWORD *)v96;
          v97 = *((_QWORD *)v96 + 1);
          v72 = __OFSUB__(v97, v98);
          v99 = v97 - v98;
          if (v72)
            goto LABEL_190;
          v89 = v64 < v99;
          goto LABEL_74;
        }
      }
      else
      {
        if (v57 != 3)
        {
          v90 = *((_QWORD *)v17 + 4);
          v91 = *((_QWORD *)v17 + 5);
          v72 = __OFSUB__(v91, v90);
          v83 = v91 - v90;
          v84 = v72;
          goto LABEL_68;
        }
        v63 = *((_QWORD *)v17 + 4);
        v62 = *((_QWORD *)v17 + 5);
        v72 = __OFSUB__(v62, v63);
        v64 = v62 - v63;
        v65 = v72;
      }
      if ((v65 & 1) != 0)
        goto LABEL_182;
      v73 = v57 - 2;
      v79 = &v58[16 * v57 - 32];
      v81 = *(_QWORD *)v79;
      v80 = *((_QWORD *)v79 + 1);
      v82 = __OFSUB__(v80, v81);
      v83 = v80 - v81;
      v84 = v82;
      if (v82)
        goto LABEL_185;
      v85 = &v58[16 * v61];
      v87 = *(_QWORD *)v85;
      v86 = *((_QWORD *)v85 + 1);
      v72 = __OFSUB__(v86, v87);
      v88 = v86 - v87;
      if (v72)
        goto LABEL_188;
      if (__OFADD__(v83, v88))
        goto LABEL_189;
      if (v83 + v88 >= v64)
      {
        v89 = v64 < v88;
LABEL_74:
        if (v89)
          v61 = v73;
        goto LABEL_76;
      }
LABEL_68:
      if ((v84 & 1) != 0)
        goto LABEL_184;
      v92 = &v58[16 * v61];
      v94 = *(_QWORD *)v92;
      v93 = *((_QWORD *)v92 + 1);
      v72 = __OFSUB__(v93, v94);
      v95 = v93 - v94;
      if (v72)
        goto LABEL_187;
      if (v95 < v83)
        goto LABEL_147;
LABEL_76:
      if (v61 - 1 >= v57)
      {
        __break(1u);
LABEL_177:
        __break(1u);
LABEL_178:
        __break(1u);
LABEL_179:
        __break(1u);
LABEL_180:
        __break(1u);
LABEL_181:
        __break(1u);
LABEL_182:
        __break(1u);
LABEL_183:
        __break(1u);
LABEL_184:
        __break(1u);
LABEL_185:
        __break(1u);
LABEL_186:
        __break(1u);
LABEL_187:
        __break(1u);
LABEL_188:
        __break(1u);
LABEL_189:
        __break(1u);
LABEL_190:
        __break(1u);
LABEL_191:
        __break(1u);
LABEL_192:
        __break(1u);
LABEL_193:
        __break(1u);
LABEL_194:
        __break(1u);
LABEL_195:
        __break(1u);
LABEL_196:
        __break(1u);
LABEL_197:
        __break(1u);
LABEL_198:
        __break(1u);
LABEL_199:
        __break(1u);
LABEL_200:
        __break(1u);
LABEL_201:
        __break(1u);
LABEL_202:
        __break(1u);
LABEL_203:
        __break(1u);
LABEL_204:
        __break(1u);
LABEL_205:
        __break(1u);
LABEL_206:
        __break(1u);
LABEL_207:
        result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
        __break(1u);
        return result;
      }
      if (!v16)
        goto LABEL_203;
      v4 = v10;
      v170 = &v58[16 * v61 - 16];
      v100 = *(_QWORD *)v170;
      v172 = v61;
      v101 = &v58[16 * v61];
      v103 = *(_QWORD *)v101;
      v102 = *((_QWORD *)v101 + 1);
      v173 = v100;
      v104 = &v16[8 * v100];
      v105 = &v16[8 * v103];
      v106 = v105 - v104;
      v107 = (v105 - v104) / 8;
      v178 = (unint64_t)&v16[8 * v102];
      v108 = v178 - (_QWORD)v105;
      v109 = (uint64_t)(v178 - (_QWORD)v105) / 8;
      v110 = v177;
      v174 = v102;
      v185 = v104;
      v169 = v101;
      v171 = v61 - 1;
      if (v107 >= v109)
      {
        if (v108 <= -8)
          goto LABEL_207;
        if ((unint64_t)v177 >= v178 || v177 != v105)
        {
          memmove(v177, v105, 8 * v109);
          v105 = &v16[8 * v103];
          v102 = v174;
        }
        v112 = &v110[8 * v109];
        if (v173 >= v103 || v108 < 8)
        {
          v126 = v173;
          v17 = v168;
          v10 = v4;
          goto LABEL_134;
        }
        v4 = v165 + 8 * v102;
        while (2)
        {
          v180 = v112;
          v179 = v105;
          v128 = v112 - 8;
          v127 = *((_QWORD *)v112 - 1);
          v178 = v4 + 8;
          v130 = v105 - 8;
          v129 = *((_QWORD *)v105 - 1);
          v131 = v127 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
          swift_beginAccess(v127 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v195, 0, 0);
          v132 = v181;
          sub_10002AC98(v131, v181, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          v133 = v129 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
          swift_beginAccess(v129 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v194, 0, 0);
          v134 = v182;
          sub_10002AC98(v133, v182, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          swift_retain(v127);
          swift_retain(v129);
          LOBYTE(v133) = v184(v132, v134);
          sub_10002ACC4(v134, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          sub_10002ACC4(v132, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          swift_release(v127);
          swift_release(v129);
          if ((v133 & 1) != 0)
          {
            v135 = (char *)v178 != v179 || v4 >= (unint64_t)v179;
            v105 = v130;
            v110 = v177;
            v136 = v185;
            v112 = v180;
            if (!v135)
              goto LABEL_127;
          }
          else
          {
            v137 = (char *)v178 != v180 || v4 >= (unint64_t)v180;
            v130 = v128;
            v112 = v128;
            v110 = v177;
            v105 = v179;
            v136 = v185;
            if (!v137)
            {
LABEL_127:
              v4 -= 8;
              if (v136 >= v105 || v110 >= v112)
              {
                v10 = (Swift::Int)v166;
                v17 = v168;
                goto LABEL_133;
              }
              continue;
            }
          }
          break;
        }
        *(_QWORD *)v4 = *(_QWORD *)v130;
        goto LABEL_127;
      }
      if (v106 <= -8)
        goto LABEL_207;
      v111 = v177 != v104 || v177 >= v105;
      if (v111)
      {
        memmove(v177, v185, 8 * v107);
        v104 = v185;
        v105 = &v16[8 * v103];
        v102 = v174;
      }
      v112 = &v110[8 * v107];
      v113 = v103 >= v102 || v106 < 8;
      v180 = &v110[8 * v107];
      if (!v113)
      {
        while (1)
        {
          v179 = v110;
          v185 = v104;
          v114 = *(_QWORD *)v105;
          v115 = *(_QWORD *)v110;
          v116 = *(_QWORD *)v105 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
          v117 = v105;
          swift_beginAccess(v116, v193, 0, 0);
          v118 = v181;
          sub_10002AC98(v116, v181, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          v119 = v115 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
          swift_beginAccess(v115 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v192, 0, 0);
          v120 = v182;
          sub_10002AC98(v119, v182, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          swift_retain(v114);
          swift_retain(v115);
          v4 = v184(v118, v120);
          sub_10002ACC4(v120, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          sub_10002ACC4(v118, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          swift_release(v114);
          swift_release(v115);
          if ((v4 & 1) != 0)
            break;
          v121 = v179;
          v110 = v179 + 8;
          v122 = v185;
          v105 = v117;
          v112 = v180;
          if (v185 != v179)
            goto LABEL_96;
LABEL_97:
          v104 = v122 + 8;
          if (v110 >= v112 || (unint64_t)v105 >= v178)
            goto LABEL_102;
        }
        v121 = v117;
        v105 = v117 + 8;
        v122 = v185;
        v112 = v180;
        v110 = v179;
        if (v185 == v117)
          goto LABEL_97;
LABEL_96:
        *(_QWORD *)v122 = *(_QWORD *)v121;
        goto LABEL_97;
      }
      v110 = v177;
LABEL_102:
      v105 = v104;
      v10 = (Swift::Int)v166;
      v17 = v168;
LABEL_133:
      v126 = v173;
      v102 = v174;
LABEL_134:
      if (v112 - v110 <= -8)
        goto LABEL_207;
      v139 = (v112 - v110) / 8;
      v140 = v105 != v110 || v105 >= &v110[8 * v139];
      v16 = v176;
      if (v140)
      {
        memmove(v105, v110, 8 * v139);
        v102 = v174;
      }
      if (v102 < v126)
        goto LABEL_177;
      v141 = v172;
      if (v172 > *((_QWORD *)v17 + 2))
        goto LABEL_178;
      *(_QWORD *)v170 = v126;
      v58 = v167;
      *(_QWORD *)&v167[16 * v171 + 8] = v102;
      v142 = *((_QWORD *)v17 + 2);
      if (v141 >= (uint64_t)v142)
        goto LABEL_179;
      v57 = v142 - 1;
      memmove(v169, v169 + 16, 16 * (v142 - 1 - v141));
      *((_QWORD *)v17 + 2) = v142 - 1;
      if (v142 <= 2)
        goto LABEL_147;
    }
  }
  v17 = (char *)_swiftEmptyArrayStorage;
  v57 = _swiftEmptyArrayStorage[2];
LABEL_160:
  if (v57 >= 2)
  {
    v153 = *v162;
    do
    {
      v154 = v57 - 2;
      if (v57 < 2)
        goto LABEL_192;
      if (!v153)
        goto LABEL_206;
      v4 = (uint64_t)v17;
      v155 = *(_QWORD *)&v17[16 * v154 + 32];
      v156 = *(_QWORD *)&v17[16 * v57 + 24];
      v157 = v164;
      sub_100078B88(&v153[8 * v155], &v153[8 * *(_QWORD *)&v17[16 * v57 + 16]], (unint64_t)&v153[8 * v156], v177, v184, v183);
      v164 = v157;
      if (v157)
        goto LABEL_173;
      if (v156 < v155)
        goto LABEL_193;
      if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
        v4 = (uint64_t)sub_100079050((uint64_t)v17);
      if (v154 >= *(_QWORD *)(v4 + 16))
        goto LABEL_194;
      v158 = (char *)(v4 + 32 + 16 * v154);
      *(_QWORD *)v158 = v155;
      *((_QWORD *)v158 + 1) = v156;
      v159 = *(_QWORD *)(v4 + 16);
      if (v57 > v159)
        goto LABEL_195;
      memmove((void *)(v4 + 32 + 16 * (v57 - 1)), (const void *)(v4 + 32 + 16 * v57), 16 * (v159 - v57));
      *(_QWORD *)(v4 + 16) = v159 - 1;
      v57 = v159 - 1;
      v17 = (char *)v4;
    }
    while (v159 > 2);
  }
  v160 = swift_bridgeObjectRelease(v17);
  if (v10 < -1)
  {
    __break(1u);
LABEL_173:
    v160 = swift_bridgeObjectRelease(v4);
    if (v10 < -1)
      goto LABEL_204;
  }
  *(_QWORD *)((v196 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
  specialized Array._endMutation()(v160);
  return swift_bridgeObjectRelease(v196);
}

uint64_t sub_100078B88(char *a1, char *a2, unint64_t a3, char *a4, uint64_t (*a5)(uint64_t, uint64_t), uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  BOOL v28;
  unint64_t v29;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  char *v42;
  unint64_t v43;
  char *v44;
  BOOL v45;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t);
  unint64_t v56;
  _BYTE v57[24];
  _BYTE v58[24];
  char *v59;

  v52 = a6;
  v55 = a5;
  v10 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  v11 = __chkstk_darwin(v10);
  v54 = (uint64_t)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v53 = (uint64_t)&v48 - v13;
  v14 = a2 - a1;
  v15 = (a2 - a1) / 8;
  v16 = a2;
  v17 = a3 - (_QWORD)a2;
  if (v15 >= v17 / 8)
  {
    sub_10000FB88(v16, v17 / 8, a4);
    v59 = a4;
    v18 = (unint64_t)&a4[8 * (v17 / 8)];
    if (v17 < 8 || a1 >= v16)
    {
      v20 = v59;
      goto LABEL_42;
    }
    v32 = (char *)(a3 - 8);
    v49 = a1;
    while (1)
    {
      v56 = v18;
      v33 = (char *)(v18 - 8);
      v34 = *(_QWORD *)(v18 - 8);
      v35 = v16;
      v36 = *((_QWORD *)v16 - 1);
      v50 = v16 - 8;
      v51 = v32 + 8;
      v37 = v34 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
      swift_beginAccess(v34 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v58, 0, 0);
      v38 = v53;
      sub_10002AC98(v37, v53, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v39 = v36 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
      swift_beginAccess(v36 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v57, 0, 0);
      v40 = v54;
      sub_10002AC98(v39, v54, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      swift_retain(v34);
      swift_retain(v36);
      LOBYTE(v39) = v55(v38, v40);
      sub_10002ACC4(v40, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      sub_10002ACC4(v38, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      swift_release(v34);
      swift_release(v36);
      if ((v39 & 1) != 0)
      {
        v41 = v51 != v35 || v32 >= v35;
        v43 = (unint64_t)v49;
        v42 = v50;
        v16 = v50;
        v44 = v59;
        v18 = v56;
        if (!v41)
          goto LABEL_37;
      }
      else
      {
        v45 = v51 != (char *)v56 || (unint64_t)v32 >= v56;
        v42 = v33;
        v18 = (unint64_t)v33;
        v44 = v59;
        v16 = v35;
        v43 = (unint64_t)v49;
        if (!v45)
          goto LABEL_37;
      }
      *(_QWORD *)v32 = *(_QWORD *)v42;
LABEL_37:
      v32 -= 8;
      if (v18 <= (unint64_t)v44 || (unint64_t)v16 <= v43)
      {
        v20 = v59;
        goto LABEL_42;
      }
    }
  }
  sub_10000FB88(a1, v15, a4);
  v18 = (unint64_t)&a4[8 * v15];
  v19 = v14 < 8 || (unint64_t)v16 >= a3;
  v20 = a4;
  if (!v19)
  {
    v56 = (unint64_t)&a4[8 * v15];
    v51 = (char *)a3;
    v21 = v53;
    while (1)
    {
      v59 = v20;
      v22 = *(_QWORD *)v16;
      v23 = *(_QWORD *)v20;
      v24 = *(_QWORD *)v16 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
      swift_beginAccess(v24, v58, 0, 0);
      sub_10002AC98(v24, v21, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v25 = v23 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
      swift_beginAccess(v23 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v57, 0, 0);
      v26 = v54;
      sub_10002AC98(v25, v54, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      swift_retain(v22);
      swift_retain(v23);
      LOBYTE(v25) = v55(v21, v26);
      sub_10002ACC4(v26, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      sub_10002ACC4(v21, type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      swift_release(v22);
      swift_release(v23);
      if ((v25 & 1) != 0)
        break;
      v27 = v59;
      v20 = v59 + 8;
      v18 = v56;
      v29 = (unint64_t)v51;
      if (a1 != v59)
        goto LABEL_12;
LABEL_13:
      a1 += 8;
      if ((unint64_t)v20 >= v18 || (unint64_t)v16 >= v29)
        goto LABEL_18;
    }
    v27 = v16;
    v28 = a1 == v16;
    v16 += 8;
    v18 = v56;
    v29 = (unint64_t)v51;
    v20 = v59;
    if (v28)
      goto LABEL_13;
LABEL_12:
    *(_QWORD *)a1 = *(_QWORD *)v27;
    goto LABEL_13;
  }
LABEL_18:
  v16 = a1;
LABEL_42:
  sub_10000FB88(v20, (uint64_t)(v18 - (_QWORD)v20) / 8, v16);
  return 1;
}

char *sub_100078F64(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100002F78(&qword_1000FD8D0);
    v11 = (char *)sub_100006A80(v10, 16 * v9 + 32);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 16);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || &v14[16 * v8] <= v13)
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  sub_10001D8B4();
  return v11;
}

char *sub_100079050(uint64_t a1)
{
  return sub_100078F64(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100079064(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t i;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v25;
  _QWORD v26[9];

  if (!*(_QWORD *)(a2 + 16))
    return 1;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 1;
  v25 = a1 + 32;
  v4 = a2 + 56;
  swift_bridgeObjectRetain(a1);
  v5 = 0;
  while (!*(_QWORD *)(a2 + 16))
  {
LABEL_20:
    if (++v5 == v2)
    {
      v22 = 1;
      v7 = a1;
      goto LABEL_24;
    }
  }
  v6 = (uint64_t *)(v25 + 16 * v5);
  v8 = *v6;
  v7 = v6[1];
  Hasher.init(_seed:)(v26, *(_QWORD *)(a2 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v26, v8, v7);
  v9 = Hasher._finalize()();
  v10 = -1 << *(_BYTE *)(a2 + 32);
  v11 = v9 & ~v10;
  if (((*(_QWORD *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
  {
LABEL_19:
    swift_bridgeObjectRelease(v7);
    goto LABEL_20;
  }
  v12 = *(_QWORD *)(a2 + 48);
  v13 = (_QWORD *)(v12 + 16 * v11);
  v14 = v13[1];
  v15 = *v13 == v8 && v14 == v7;
  if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v13, v14, v8, v7, 0) & 1) == 0)
  {
    v16 = ~v10;
    for (i = v11 + 1; ; i = v18 + 1)
    {
      v18 = i & v16;
      if (((*(_QWORD *)(v4 + (((i & v16) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v16)) & 1) == 0)
        break;
      v19 = (_QWORD *)(v12 + 16 * v18);
      v20 = v19[1];
      v21 = *v19 == v8 && v20 == v7;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, v8, v7, 0) & 1) != 0)
        goto LABEL_23;
    }
    goto LABEL_19;
  }
LABEL_23:
  swift_bridgeObjectRelease(a1);
  v22 = 0;
LABEL_24:
  swift_bridgeObjectRelease(v7);
  return v22;
}

uint64_t sub_1000791EC(unint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  unint64_t v53;

  v10 = type metadata accessor for InferenceProviderDescriptor(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v48 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v42 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v42 - v17;
  v19 = *(_QWORD *)(a2 + 16);
  v20 = static _HashTable.scale(forCapacity:)(v19);
  if ((a4 & 1) != 0)
    v21 = 0;
  else
    v21 = a3;
  if (v21 <= v20)
    v21 = v20;
  if (v21 <= a5)
    v22 = a5;
  else
    v22 = v21;
  if (v22 > 4)
  {
    v23 = _HashTable.init(scale:reservedScale:)();
    sub_10007AF28(&v53, a2, (_QWORD *)(v23 + 16), v23 + 32);
    *a1 = v53;
  }
  else
  {
    if (v19 >= 2)
    {
      result = sub_1000BEA08();
      v25 = result;
      v26 = 0;
      v27 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
      v46 = v19;
      v47 = a2 + v27;
      v28 = *(_QWORD *)(v11 + 72);
      v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16);
      v50 = v27;
      v51 = v29;
      v52 = v28;
      v43 = a1;
      v44 = v28 + v27;
      v30 = v48;
      v42 = v11;
      while (1)
      {
        if (v26 == v19)
          goto LABEL_36;
        v29(v18, v47 + v52 * v26, v10);
        v31 = *(_QWORD *)(v25 + 16);
        if (v31)
        {
          v29(v16, v25 + v50, v10);
          sub_100006710(&qword_1000FD9B0, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
          v33 = v32;
          v49 = v25;
          swift_bridgeObjectRetain(v25);
          v34 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v18, v10, v33);
          v35 = *(void (**)(char *, uint64_t))(v11 + 8);
          v35(v16, v10);
          if ((v34 & 1) != 0)
          {
            v41 = v49;
            swift_bridgeObjectRelease(v49);
LABEL_32:
            v35(v18, v10);
            swift_bridgeObjectRelease(v41);
            v23 = 0;
            *a1 = v26;
            return v23;
          }
          if (v31 != 1)
          {
            v45 = v26;
            v36 = v49 + v44;
            v37 = 1;
            while (1)
            {
              result = v51(v16, v36, v10);
              v38 = v37 + 1;
              if (__OFADD__(v37, 1))
                break;
              v39 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v18, v10, v33);
              v35(v16, v10);
              if ((v39 & 1) != 0)
              {
                v41 = v49;
                swift_bridgeObjectRelease(v49);
                a1 = v43;
                v26 = v45;
                goto LABEL_32;
              }
              ++v37;
              v36 += v52;
              if (v38 == v31)
              {
                v25 = v49;
                swift_bridgeObjectRelease(v49);
                v11 = v42;
                a1 = v43;
                v30 = v48;
                v26 = v45;
                goto LABEL_24;
              }
            }
            __break(1u);
LABEL_36:
            __break(1u);
            return result;
          }
          v25 = v49;
          swift_bridgeObjectRelease(v49);
          v30 = v48;
LABEL_24:
          v29 = v51;
        }
        v29(v30, (uint64_t)v18, v10);
        if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) == 0)
          v25 = sub_1000BEA08();
        v40 = *(_QWORD *)(v25 + 16);
        if (v40 >= *(_QWORD *)(v25 + 24) >> 1)
          v25 = sub_1000BEA08();
        ++v26;
        *(_QWORD *)(v25 + 16) = v40 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v25 + v50 + v40 * v52, v30, v10);
        result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v18, v10);
        v19 = v46;
        v29 = v51;
        if (v26 == v46)
        {
          swift_bridgeObjectRelease(v25);
          break;
        }
      }
    }
    v23 = 0;
    *a1 = v19;
  }
  return v23;
}

void sub_1000795BC(unint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;

  v10 = *(_QWORD *)(a2 + 16);
  v11 = static _HashTable.scale(forCapacity:)(v10);
  if ((a4 & 1) != 0)
    v12 = 0;
  else
    v12 = a3;
  if (v12 <= v11)
    v12 = v11;
  if (v12 <= a5)
    v13 = a5;
  else
    v13 = v12;
  if (v13 > 4)
  {
    v14 = _HashTable.init(scale:reservedScale:)();
    sub_10007B134(&v44, a2, (_QWORD *)(v14 + 16), v14 + 32);
    *a1 = v44;
    return;
  }
  if (v10 < 2)
  {
LABEL_11:
    *a1 = v10;
    return;
  }
  sub_1000BEA24(0, v10, 0, (uint64_t)_swiftEmptyArrayStorage);
  v16 = v15;
  v17 = 0;
  v40 = a1;
  v41 = a2 + 32;
  v39 = v10;
  while (v17 != v10)
  {
    v42 = v17;
    v43 = v16;
    v18 = v41 + 40 * v17;
    v20 = *(_QWORD *)v18;
    v19 = *(_QWORD *)(v18 + 8);
    v22 = *(_QWORD *)(v18 + 16);
    v21 = *(_QWORD *)(v18 + 24);
    v23 = *(unsigned __int8 *)(v18 + 32);
    v24 = *(_QWORD *)(v16 + 16);
    if (v24)
    {
      v25 = (unsigned __int8 *)(v16 + 64);
      while (1)
      {
        v26 = *((_QWORD *)v25 - 4);
        v27 = *((_QWORD *)v25 - 3);
        v29 = *((_QWORD *)v25 - 2);
        v28 = *((_QWORD *)v25 - 1);
        v30 = *v25;
        v31 = v26 == v20 && v27 == v19;
        if (!v31 && (_stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, v20, v19, 0) & 1) == 0)
          goto LABEL_34;
        if (!v28)
          break;
        if (!v21)
          goto LABEL_34;
        if (v29 != v22 || v28 != v21)
        {
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(v29, v28, v22, v21, 0) & 1) == 0)
            goto LABEL_34;
LABEL_31:
          if (((v23 ^ v30) & 1) == 0)
            goto LABEL_41;
          goto LABEL_34;
        }
        if (v23 == v30)
        {
LABEL_41:
          swift_bridgeObjectRelease(v43);
          *v40 = v42;
          return;
        }
LABEL_34:
        v25 += 40;
        if (!--v24)
        {
          v33 = v19;
          v34 = v21;
          v10 = v39;
          a1 = v40;
          goto LABEL_37;
        }
      }
      if (v21)
        goto LABEL_34;
      goto LABEL_31;
    }
    v33 = *(_QWORD *)(v18 + 24);
    v34 = *(_QWORD *)(v18 + 8);
LABEL_37:
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v34);
    v35 = *(_QWORD *)(v43 + 16);
    v36 = *(_QWORD *)(v43 + 24);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v21);
    if (v35 >= v36 >> 1)
    {
      sub_1000BEA24(v36 > 1, v35 + 1, 1, v43);
      v43 = v38;
    }
    v17 = v42 + 1;
    *(_QWORD *)(v43 + 16) = v35 + 1;
    v16 = v43;
    v37 = v43 + 40 * v35;
    *(_QWORD *)(v37 + 32) = v20;
    *(_QWORD *)(v37 + 40) = v19;
    *(_QWORD *)(v37 + 48) = v22;
    *(_QWORD *)(v37 + 56) = v21;
    *(_BYTE *)(v37 + 64) = v23;
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v19);
    if (v42 + 1 == v10)
    {
      swift_bridgeObjectRelease(v43);
      goto LABEL_11;
    }
  }
  __break(1u);
}

void sub_100079834(_QWORD *a1, unint64_t a2, unint64_t a3, char a4, unint64_t *a5)
{
  uint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  unint64_t v39;

  LOBYTE(v6) = a4;
  v8 = a2;
  v9 = a2 >> 62;
  if (a2 >> 62)
  {
LABEL_66:
    if (v8 < 0)
      v32 = v8;
    else
      v32 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
    v10 = _CocoaArrayWrapper.endIndex.getter(v32);
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    v10 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v11 = static _HashTable.scale(forCapacity:)(v10);
  if ((v6 & 1) != 0)
    v12 = 0;
  else
    v12 = a3;
  if (v12 <= v11)
    v12 = v11;
  if (v12 <= (uint64_t)a5)
    v13 = (uint64_t)a5;
  else
    v13 = v12;
  if (v13 > 4)
  {
    v15 = _HashTable.init(scale:reservedScale:)();
    sub_10007B37C((uint64_t *)&v39, v8, (_QWORD *)(v15 + 16), v15 + 32);
    *a1 = v39;
    return;
  }
  if (v10 >= 2)
  {
    v39 = (unint64_t)_swiftEmptyArrayStorage;
    v16 = sub_10007B618(v10, 0);
    a5 = &v39;
    specialized Array._endMutation()(v16);
    if (v9)
    {
      if (v8 < 0)
        a5 = (unint64_t *)v8;
      else
        a5 = (unint64_t *)(v8 & 0xFFFFFFFFFFFFFF8);
      swift_bridgeObjectRetain(v8);
      v9 = _CocoaArrayWrapper.endIndex.getter(a5);
      swift_bridgeObjectRelease(v8);
      if (v9 < 0)
      {
LABEL_71:
        __break(1u);
        return;
      }
    }
    else
    {
      v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (!v9)
    {
LABEL_62:
      swift_bridgeObjectRelease(v39);
      *a1 = v9;
      return;
    }
    a3 = 0;
    v36 = v8;
    v37 = v8 & 0xC000000000000001;
    v33 = v8 + 32;
    v34 = v8 & 0xFFFFFFFFFFFFFF8;
    v35 = v9;
    while (1)
    {
      if (a3 == v9)
        goto LABEL_65;
      if (v37)
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(a3, v8);
      }
      else
      {
        if (a3 >= *(_QWORD *)(v34 + 16))
        {
          __break(1u);
          goto LABEL_71;
        }
        v6 = *(_QWORD *)(v33 + 8 * a3);
        swift_retain();
      }
      v18 = v39;
      if (v39 >> 62)
      {
        if ((v39 & 0x8000000000000000) != 0)
          v31 = v39;
        else
          v31 = v39 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n(v39, 2);
        v19 = _CocoaArrayWrapper.endIndex.getter(v31);
        swift_bridgeObjectRelease(v18);
        if (!v19)
          goto LABEL_52;
      }
      else
      {
        v19 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v39);
        if (!v19)
          goto LABEL_52;
      }
      v9 = v18 & 0xC000000000000001;
      if ((v18 & 0xC000000000000001) != 0)
      {
        v20 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v18);
      }
      else
      {
        v20 = *(_QWORD *)(v18 + 32);
        swift_retain();
      }
      a5 = (unint64_t *)type metadata accessor for InferenceProviderAsset(0);
      v21 = sub_10008AE98();
      swift_release(v20);
      if ((v21 & 1) != 0)
      {
LABEL_63:
        swift_release(v6);
        swift_bridgeObjectRelease_n(v18, 2);
        *a1 = a3;
        return;
      }
      if (v19 != 1)
      {
        if (v9)
        {
          v22 = specialized _ArrayBuffer._getElementSlowPath(_:)(1, v18);
        }
        else
        {
          v22 = *(_QWORD *)(v18 + 40);
          swift_retain();
        }
        v23 = sub_10008AE98();
        swift_release(v22);
        if ((v23 & 1) != 0)
          goto LABEL_63;
        if (v19 != 2)
        {
          v24 = 6;
          while (1)
          {
            if (v9)
            {
              v25 = specialized _ArrayBuffer._getElementSlowPath(_:)(v24 - 4, v18);
            }
            else
            {
              v25 = *(_QWORD *)(v18 + 8 * v24);
              swift_retain();
            }
            v8 = v24 - 3;
            if (__OFADD__(v24 - 4, 1))
              break;
            v26 = sub_10008AE98();
            swift_release(v25);
            if ((v26 & 1) != 0)
              goto LABEL_63;
            ++v24;
            if (v8 == v19)
              goto LABEL_52;
          }
          __break(1u);
LABEL_65:
          __break(1u);
          goto LABEL_66;
        }
      }
LABEL_52:
      swift_bridgeObjectRelease(v18);
      v27 = swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v27);
      v29 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v28 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v29 >= v28 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
      ++a3;
      v30 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29);
      a5 = &v39;
      specialized Array._endMutation()(v30);
      swift_release(v6);
      v9 = v35;
      v8 = v36;
      if (a3 == v35)
        goto LABEL_62;
    }
  }
  if (v9)
  {
    if (v8 < 0)
      v17 = v8;
    else
      v17 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
    v14 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    v14 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *a1 = v14;
}

_QWORD *sub_100079C44(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if ((a4 & 1) == 0)
    goto LABEL_2;
  v11 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v12 = swift_unknownObjectRetain_n(a1, 2);
  v13 = (_QWORD *)swift_dynamicCastClass(v12, v11);
  if (!v13)
  {
    sub_10001EBD4();
    v13 = _swiftEmptyArrayStorage;
  }
  v14 = v13[2];
  v15 = swift_release(v13);
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  v15 = a1;
  if (v14 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease(v15);
LABEL_2:
    v9 = sub_10007F9BC();
    v10 = (_QWORD *)a5(v9);
    goto LABEL_9;
  }
  v10 = (_QWORD *)swift_dynamicCastClass(a1, v11);
  if (!v10)
  {
    sub_10001EBD4();
    v10 = _swiftEmptyArrayStorage;
  }
LABEL_9:
  sub_10001EBD4();
  return v10;
}

void sub_100079D24(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t *v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int isUniquelyReferenced_native;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  char v45;
  char v48[24];

  v5 = a4 >> 1;
  if (a4 >> 1 == a3)
    return;
  v6 = v4;
  v7 = a3;
  v8 = v4 + 1;
  swift_unknownObjectRetain(a1);
  while (v7 < v5)
  {
    v9 = *(_QWORD *)(a2 + 8 * v7);
    v10 = *v6;
    v11 = (_QWORD *)v6[1];
    v12 = v11[2];
    if (*v6)
    {
      swift_retain();
      swift_retain();
      sub_1000C16B8(v9, (uint64_t)(v11 + 4), v12, (_QWORD *)(v10 + 16), v10 + 32, v13, v14, v15);
      v17 = v16;
      v12 = v18;
      swift_release(v10);
      if ((v17 & 1) == 0)
        goto LABEL_35;
    }
    else if (v12)
    {
      type metadata accessor for InferenceProviderAsset(0);
      v19 = v11[4];
      swift_retain();
      swift_retain();
      v20 = sub_10008AE98();
      swift_release(v19);
      if ((v20 & 1) != 0)
        goto LABEL_35;
      if (v12 != 1)
      {
        v21 = v11[5];
        swift_retain();
        v22 = sub_10008AE98();
        swift_release(v21);
        if ((v22 & 1) != 0)
          goto LABEL_35;
        if (v12 != 2)
        {
          v23 = v11[6];
          swift_retain();
          v24 = sub_10008AE98();
          swift_release(v23);
          if ((v24 & 1) != 0)
            goto LABEL_35;
          if (v12 != 3)
          {
            v40 = v11[7];
            swift_retain();
            v41 = sub_10008AE98();
            swift_release(v40);
            if ((v41 & 1) != 0)
              goto LABEL_35;
            v42 = v12 - 4;
            v43 = v11 + 8;
            while (v42)
            {
              v44 = *v43++;
              swift_retain();
              v45 = sub_10008AE98();
              swift_release(v44);
              --v42;
              if ((v45 & 1) != 0)
                goto LABEL_35;
            }
          }
        }
      }
      v12 = 0;
    }
    else
    {
      swift_retain();
    }
    v25 = swift_retain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v25);
    v26 = *(_QWORD *)(v6[1] + 16);
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v26);
    v27 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v26, v9);
    specialized ContiguousArray._endMutation()(v27);
    v29 = *v6;
    v28 = v6[1];
    v30 = *(_QWORD *)(v28 + 16);
    if (*v6)
    {
      swift_beginAccess(v29 + 16, v48, 0, 0);
      if (static _HashTable.maximumCapacity(forScale:)(*(_QWORD *)(v29 + 16) & 0x3FLL) >= (uint64_t)v30)
      {
        isUniquelyReferenced_native = swift_isUniquelyReferenced_native(*v6);
        v38 = *v6;
        if (!isUniquelyReferenced_native)
        {
          if (!v38)
            goto LABEL_45;
          v38 = _HashTable.copy()(*v6);
          swift_release(*v6);
          *v6 = v38;
        }
        if (!v38)
          goto LABEL_44;
        v39 = *(_QWORD *)(*v8 + 16) + ~(*(uint64_t *)(v38 + 24) >> 6);
        _HashTable.UnsafeHandle.subscript.setter((-1 << *(_QWORD *)(v38 + 16)) ^ ~(((v39 >> 63) & ~(-1 << *(_QWORD *)(v38 + 16))) + v39), v12, v38 + 16, v38 + 32);
      }
      else
      {
        v31 = *(_QWORD *)(v29 + 24) & 0x3FLL;
        if (v30 > 0xF || v31 != 0)
          goto LABEL_26;
        swift_release(v29);
        *v6 = 0;
      }
    }
    else if (v30 > 0xF)
    {
      v31 = 0;
LABEL_26:
      v33 = static _HashTable.scale(forCapacity:)(v30);
      if (v31 <= v33)
        v34 = v33;
      else
        v34 = v31;
      sub_1000C1960(v28, v34, 0, v31);
      v36 = v35;
      swift_release(*v6);
      *v6 = v36;
    }
LABEL_35:
    ++v7;
    swift_release(v9);
    if (v7 == v5)
    {
      swift_unknownObjectRelease(a1);
      return;
    }
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
}

uint64_t sub_10007A058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  if (v5)
  {
    v7 = 0;
    static _UnsafeBitSet._withTemporaryBitSet(wordCount:run:)((unint64_t)(v5 + 63) >> 6, sub_10007C3B8);
    __break(1u);
    result = sub_10007C3D4(0, v7);
    __break(1u);
  }
  else
  {
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0)
      sub_10001B668();
    swift_release(a3);
    swift_release(a2);
    return 0;
  }
  return result;
}

uint64_t sub_10007A194(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::UInt v31;
  Swift::UInt v32;
  char v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v49;
  uint64_t v50;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t *v57;
  uint64_t v58;
  Swift::UInt v59;
  _QWORD v60[7];
  uint64_t v61;
  __int128 v62;

  v59 = a3[2];
  _UnsafeBitSet.insertAll(upTo:)(v59);
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a4 < 0)
      v7 = a4;
    else
      v7 = a4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a4);
    v8 = __CocoaSet.makeIterator()(v7);
    v9 = type metadata accessor for InferenceProviderAsset(0);
    sub_100006710(&qword_1000FB768, type metadata accessor for InferenceProviderAsset);
    v11 = Set.Iterator.init(_cocoa:)(v8, v9, v10);
    a4 = v60[1];
    v54 = v60[2];
    v12 = v60[3];
    v13 = v60[4];
    v14 = v60[5];
  }
  else
  {
    v15 = -1 << *(_BYTE *)(a4 + 32);
    v54 = a4 + 56;
    v12 = ~v15;
    v16 = -v15;
    if (v16 < 64)
      v17 = ~(-1 << v16);
    else
      v17 = -1;
    v14 = v17 & *(_QWORD *)(a4 + 56);
    v11 = swift_bridgeObjectRetain(a4);
    v13 = 0;
  }
  v53 = (unint64_t)(v12 + 64) >> 6;
  v56 = (_QWORD *)(a2 + 16);
  v57 = a3 + 4;
  v58 = a2;
  v55 = a2 + 32;
  v50 = v59;
  while (1)
  {
    v18 = v13;
    if (a4 < 0)
    {
      v22 = __CocoaSet.Iterator.next()(v11);
      if (!v22)
      {
        v21 = v58;
LABEL_59:
        sub_10001CD34(a4);
        v45 = *a1;
        v46 = a1[1];
        v47 = sub_10007A76C();
        swift_retain();
        swift_retain();
        *(_QWORD *)&v62 = v45;
        *((_QWORD *)&v62 + 1) = v46;
        return sub_10007A774(v62, v50, 0, v47, v21, (uint64_t)a3);
      }
      v23 = v22;
      v60[0] = v22;
      v24 = type metadata accessor for InferenceProviderAsset(0);
      swift_unknownObjectRetain(v23);
      swift_dynamicCast(&v61, v60, (char *)&type metadata for Swift.AnyObject + 8, v24, 7);
      v4 = v61;
      swift_unknownObjectRelease(v23);
      v21 = v58;
      if (!v4)
        goto LABEL_59;
    }
    else
    {
      if (v14)
      {
        v19 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        v20 = v19 | (v13 << 6);
        v21 = v58;
      }
      else
      {
        v25 = v13 + 1;
        v21 = v58;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
          goto LABEL_63;
        }
        if (v25 >= v53)
          goto LABEL_59;
        v26 = *(_QWORD *)(v54 + 8 * v25);
        ++v13;
        if (!v26)
        {
          v13 = v18 + 2;
          if (v18 + 2 >= v53)
            goto LABEL_59;
          v26 = *(_QWORD *)(v54 + 8 * v13);
          if (!v26)
          {
            v13 = v18 + 3;
            if (v18 + 3 >= v53)
              goto LABEL_59;
            v26 = *(_QWORD *)(v54 + 8 * v13);
            if (!v26)
            {
              v13 = v18 + 4;
              if (v18 + 4 >= v53)
                goto LABEL_59;
              v26 = *(_QWORD *)(v54 + 8 * v13);
              if (!v26)
              {
                v13 = v18 + 5;
                if (v18 + 5 >= v53)
                  goto LABEL_59;
                v26 = *(_QWORD *)(v54 + 8 * v13);
                if (!v26)
                {
                  v27 = v18 + 6;
                  while (v27 < v53)
                  {
                    v26 = *(_QWORD *)(v54 + 8 * v27++);
                    if (v26)
                    {
                      v13 = v27 - 1;
                      goto LABEL_32;
                    }
                  }
                  goto LABEL_59;
                }
              }
            }
          }
        }
LABEL_32:
        v14 = (v26 - 1) & v26;
        v20 = __clz(__rbit64(v26)) + (v13 << 6);
      }
      v4 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v20);
      swift_retain();
      if (!v4)
        goto LABEL_59;
    }
    a2 = a4;
    if (!v21)
      break;
    swift_retain();
    sub_1000C16B8(v4, (uint64_t)v57, v59, v56, v55, v28, v29, v30);
    v32 = v31;
    v34 = v33;
    swift_release(v21);
    if ((v34 & 1) == 0 && (v32 & 0x8000000000000000) == 0)
      goto LABEL_53;
LABEL_54:
    swift_release(v4);
    a4 = a2;
  }
  if (!v59)
    goto LABEL_54;
  type metadata accessor for InferenceProviderAsset(0);
  v35 = *v57;
  swift_retain();
  v36 = sub_10008AE98();
  swift_release(v35);
  v32 = 0;
  if ((v36 & 1) != 0)
    goto LABEL_53;
  if (v59 == 1)
    goto LABEL_54;
  v37 = a3[5];
  swift_retain();
  v38 = sub_10008AE98();
  swift_release(v37);
  if ((v38 & 1) != 0)
  {
    v32 = 1;
    goto LABEL_53;
  }
  if (v59 == 2)
    goto LABEL_54;
  v39 = a3[6];
  swift_retain();
  v40 = sub_10008AE98();
  swift_release(v39);
  if ((v40 & 1) != 0)
  {
    v32 = 2;
    goto LABEL_53;
  }
  if (v59 == 3)
    goto LABEL_54;
  v41 = a3[7];
  swift_retain();
  v42 = sub_10008AE98();
  swift_release(v41);
  if ((v42 & 1) == 0)
  {
    v43 = 0;
    while (v59 - 4 != v43)
    {
      v44 = a3[v43 + 8];
      swift_retain();
      v49 = sub_10008AE98();
      swift_release(v44);
      ++v43;
      if ((v49 & 1) != 0)
      {
        v32 = v43 + 3;
        if (v43 + 3 < 0)
          goto LABEL_54;
        goto LABEL_53;
      }
    }
    goto LABEL_54;
  }
  v32 = 3;
LABEL_53:
  if (!_UnsafeBitSet.remove(_:)(v32))
    goto LABEL_54;
  if (v50 != 1)
  {
    --v50;
    goto LABEL_54;
  }
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
  {
    swift_release(v4);
    sub_10001CD34(a2);
    return 0;
  }
LABEL_63:
  sub_10001B668();
  swift_release(v4);
  sub_10001CD34(a2);
  return 0;
}

_QWORD *sub_10007A718(uint64_t a1, uint64_t *a2, _QWORD *(*a3)(_QWORD *__return_ptr))
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  result = a3(v8);
  if (!v3)
  {
    v6 = v8[0];
    v7 = v8[1];
    result = (_QWORD *)sub_10007C3D4(*a2, a2[1]);
    *a2 = v6;
    a2[1] = v7;
  }
  return result;
}

uint64_t sub_10007A76C()
{
  return 0;
}

uint64_t sub_10007A774(__int128 a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int8x8_t *v13;
  uint8x8_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[4];
  uint64_t v24;
  uint64_t v25;

  v7 = a5;
  v10 = *((_QWORD *)&a1 + 1);
  v11 = (uint64_t *)a1;
  if ((a3 & 1) != 0)
  {
    if ((_QWORD)a1 && *((_QWORD *)&a1 + 1))
    {
      a2 = 0;
      v12 = 8 * *((_QWORD *)&a1 + 1);
      v13 = (int8x8_t *)a1;
      while (1)
      {
        v14 = (uint8x8_t)vcnt_s8(*v13);
        v14.i16[0] = vaddlv_u8(v14);
        v15 = __OFADD__(a2, v14.u32[0]);
        a2 += v14.u32[0];
        if (v15)
          break;
        ++v13;
        v12 -= 8;
        if (!v12)
          goto LABEL_7;
      }
      __break(1u);
      goto LABEL_29;
    }
    goto LABEL_11;
  }
LABEL_7:
  if (!a2)
  {
LABEL_11:
    v16 = sub_10007A958(a4, 0);
    swift_release(a6);
    swift_release(v7);
    v7 = v16;
    goto LABEL_27;
  }
  if (a2 == *(_QWORD *)(a6 + 16))
  {
    if (a5)
    {
      swift_beginAccess(a5 + 16, v23, 0, 0);
      *(_QWORD *)&a1 = static _HashTable.maximumCapacity(forScale:)(*(_QWORD *)(v7 + 16) & 0x3FLL);
    }
    else
    {
      *(_QWORD *)&a1 = 15;
    }
    if (__OFSUB__((_QWORD)a1, a2))
      goto LABEL_32;
    if ((uint64_t)a1 - a2 < a4)
    {
      v24 = v7;
      v25 = a6;
      *(_QWORD *)&a1 = a2 + a4;
      if (__OFADD__(a2, a4))
      {
LABEL_33:
        __break(1u);
        return a1;
      }
      sub_10007AC54(a1, 0);
      v7 = v24;
    }
  }
  else
  {
    *(_QWORD *)&a1 = a2 + a4;
    if (__OFADD__(a2, a4))
    {
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    v17 = sub_10007A958(a1, 0);
    v24 = v17;
    v25 = v18;
    if (v10 <= 0)
      v19 = 0;
    else
      v19 = *v11;
    v23[0] = v11;
    v23[1] = v10;
    v23[2] = 0;
    v23[3] = v19;
    *(Swift::UInt_optional *)&a1 = _UnsafeBitSet.Iterator.next()();
    if ((BYTE8(a1) & 1) == 0)
    {
      while ((a1 & 0x8000000000000000) == 0)
      {
        if ((unint64_t)a1 >= *(_QWORD *)(a6 + 16))
          goto LABEL_30;
        v20 = *(_QWORD *)(a6 + 32 + 8 * a1);
        v21 = swift_retain();
        sub_10007AB30(v21);
        swift_release(v20);
        *(Swift::UInt_optional *)&a1 = _UnsafeBitSet.Iterator.next()();
        if ((BYTE8(a1) & 1) != 0)
        {
          v17 = v24;
          goto LABEL_26;
        }
      }
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
LABEL_26:
    swift_release(a6);
    swift_release(v7);
    v7 = v17;
  }
LABEL_27:
  *(_QWORD *)&a1 = v7;
  return a1;
}

uint64_t sub_10007A958(uint64_t a1, char a2)
{
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0)
    sub_10001B668();
  sub_10007AC54(a1, a2 & 1);
  return 0;
}

void sub_10007A9B0(__int128 *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE v19[16];
  __int128 v20;

  v2 = v1;
  v20 = *a1;
  sub_100048F58((uint64_t)(a1 + 1), (uint64_t)v19, &qword_1000FD9C0);
  v6 = v1[1];
  v4 = v1 + 1;
  v5 = v6;
  sub_10007CC70((uint64_t)&v20);
  sub_10007CC70((uint64_t)v19);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
  *v4 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_100011794(0, *(_QWORD *)(v5 + 16) + 1, 1);
    v5 = *v4;
  }
  v9 = *(_QWORD *)(v5 + 16);
  v8 = *(_QWORD *)(v5 + 24);
  if (v9 >= v8 >> 1)
  {
    sub_100011794((char *)(v8 > 1), v9 + 1, 1);
    v5 = *v4;
  }
  *(_QWORD *)(v5 + 16) = v9 + 1;
  v10 = v5 + 40 * v9;
  v11 = *a1;
  v12 = a1[1];
  *(_BYTE *)(v10 + 64) = *((_BYTE *)a1 + 32);
  *(_OWORD *)(v10 + 32) = v11;
  *(_OWORD *)(v10 + 48) = v12;
  v2[1] = v5;
  v13 = *(_QWORD *)(v5 + 16);
  v14 = *v2;
  if (*v2)
  {
    sub_10002B2E0(v14 + 16, (uint64_t)v18);
    if (static _HashTable.maximumCapacity(forScale:)(*(_QWORD *)(v14 + 16) & 0x3FLL) < (uint64_t)v13)
    {
      if (v13 <= 0xF && (*(_QWORD *)(v14 + 24) & 0x3FLL) == 0)
      {
        sub_10001DEEC();
        *v2 = 0;
        return;
      }
      goto LABEL_11;
    }
    sub_1000C179C();
    if (*v2)
    {
      sub_10001E194();
      sub_10001E91C();
      sub_10007AD90(v15, v16, v17, (uint64_t)v2);
      sub_10001D9C0();
    }
    else
    {
      __break(1u);
    }
  }
  else if (v13 > 0xF)
  {
LABEL_11:
    static _HashTable.scale(forCapacity:)(v13);
    sub_1000C17DC();
  }
}

void sub_10007AB30(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  _BYTE v11[24];

  v2 = v1;
  v4 = swift_retain();
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v4);
  v5 = *(_QWORD *)(v1[1] + 16);
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v5);
  v6 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v5, a1);
  specialized ContiguousArray._endMutation()(v6);
  v7 = *v1;
  v8 = *(_QWORD *)(v1[1] + 16);
  if (*v2)
  {
    swift_beginAccess(v7 + 16, v11, 0, 0);
    if (static _HashTable.maximumCapacity(forScale:)(*(_QWORD *)(v7 + 16) & 0x3FLL) < (uint64_t)v8)
    {
      if (v8 <= 0xF && (*(_QWORD *)(v7 + 24) & 0x3FLL) == 0)
      {
        swift_release(v7);
        *v2 = 0;
        return;
      }
      goto LABEL_10;
    }
    sub_1000C179C();
    v10 = *v2;
    if (*v2)
    {
      swift_retain();
      sub_10007AE5C((_QWORD *)(v10 + 16), v10 + 32, a1, (uint64_t)v2);
      swift_release(v10);
    }
    else
    {
      __break(1u);
    }
  }
  else if (v8 > 0xF)
  {
LABEL_10:
    static _HashTable.scale(forCapacity:)(v8);
    sub_1000C1814();
  }
}

void sub_10007AC54(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE v15[24];
  _BYTE v16[24];

  if (a1 < 0)
    goto LABEL_24;
  v3 = v2;
  specialized ContiguousArray.reserveCapacity(_:)(a1);
  v7 = *v2;
  v6 = v2[1];
  if (*v2)
  {
    swift_beginAccess(v7 + 16, v14, 0, 0);
    v8 = *(_QWORD *)(v7 + 16) & 0x3FLL;
  }
  else
  {
    v8 = 0;
  }
  v9 = static _HashTable.scale(forCapacity:)(a1);
  v10 = v9;
  if ((a2 & 1) != 0)
    v11 = v9;
  else
    v11 = 0;
  if (v7 && (a2 & 1) == 0)
  {
    swift_beginAccess(v7 + 16, v15, 0, 0);
    v11 = *(_QWORD *)(v7 + 24) & 0x3FLL;
  }
  if (v8 < v10)
    goto LABEL_17;
  if (v11 > v10)
    v10 = v11;
  v12 = static _HashTable.scale(forCapacity:)(*(_QWORD *)(v6 + 16));
  if (v12 <= v10)
    v12 = v10;
  if (v12 < v8)
  {
LABEL_17:
    sub_1000C1814();
    return;
  }
  sub_1000C179C();
  v13 = *v3;
  if (!v13)
  {
    if (!v11)
      return;
    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  swift_beginAccess(v13 + 16, v16, 1, 0);
  if ((*(_QWORD *)(v13 + 24) & 0x3FLL) != v11)
    *(_QWORD *)(v13 + 24) = *(_QWORD *)(v13 + 24) & 0xFFFFFFFFFFFFFFC0 | v11 & 0x3F;
}

Swift::Int sub_10007AD90(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::Int result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  Hasher.init(_seed:)(v15, *a1);
  AssetInferenceProvider.hash(into:)((uint64_t)v15);
  result = Hasher._finalize()();
  v8 = 1 << *a1;
  v9 = __OFSUB__(v8, 1);
  v10 = v8 - 1;
  if (v9)
  {
    __break(1u);
  }
  else
  {
    v11 = v10 & result;
    v12 = _HashTable.UnsafeHandle._startIterator(bucket:)(v10 & result, a1, a2);
    v15[0] = a1;
    v15[1] = a2;
    v15[2] = v11;
    v16 = v12;
    v17 = v13;
    v18 = v14;
    v19 = 0;
    while (v16)
      _HashTable.BucketIterator.advance()();
    return _HashTable.BucketIterator.currentValue.setter(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 16) - 1, 0);
  }
  return result;
}

Swift::Int sub_10007AE5C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::Int result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  Hasher.init(_seed:)(v15, *a1);
  sub_10008B000();
  result = Hasher._finalize()();
  v8 = 1 << *a1;
  v9 = __OFSUB__(v8, 1);
  v10 = v8 - 1;
  if (v9)
  {
    __break(1u);
  }
  else
  {
    v11 = v10 & result;
    v12 = _HashTable.UnsafeHandle._startIterator(bucket:)(v10 & result, a1, a2);
    v15[0] = a1;
    v15[1] = a2;
    v15[2] = v11;
    v16 = v12;
    v17 = v13;
    v18 = v14;
    v19 = 0;
    while (v16)
      _HashTable.BucketIterator.advance()();
    return _HashTable.BucketIterator.currentValue.setter(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 16) - 1, 0);
  }
  return result;
}

unint64_t sub_10007AF28(unint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t result;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  __int128 v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 i;

  v35 = a4;
  v31 = a1;
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
  {
LABEL_10:
    *v31 = v4;
    return 1;
  }
  v7 = type metadata accessor for InferenceProviderDescriptor(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = a2 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  v10 = *(_QWORD *)(v8 + 72);
  sub_100006710(&qword_1000FD9B8, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
  v34 = v11;
  v12 = 0;
  v32 = a3;
  v33 = v10;
  while (2)
  {
    v36 = v12;
    v13 = v9 + v10 * v12;
    result = dispatch thunk of Hashable._rawHashValue(seed:)(*a3, v7, v34);
    v15 = 1 << *a3;
    v16 = __OFSUB__(v15, 1);
    v17 = v15 - 1;
    if (!v16)
    {
      v18 = v17 & result;
      v19 = _HashTable.UnsafeHandle._startIterator(bucket:)(v17 & result, a3, v35);
      *(_QWORD *)&v37 = a3;
      *((_QWORD *)&v37 + 1) = v35;
      v10 = v33;
      v38 = v18;
      v39 = v19;
      v40 = v20;
      v41 = v21;
      LOBYTE(v42) = 0;
      for (i = v37; ; i = v37)
      {
        result = _HashTable.BucketIterator.currentValue.getter(v19, v20, v21, v22, v23, v24, v25, v26, v30, v31, v32, v33, v34, v35, v36, v37, *((_QWORD *)&v37 + 1), v38, v39,
                   v40,
                   v41,
                   v42,
                   i,
                   *((_QWORD *)&i + 1));
        if ((v27 & 1) != 0)
          break;
        if (result >= v4)
        {
          __break(1u);
          goto LABEL_14;
        }
        v28 = v9 + result * v10;
        sub_100006710(&qword_1000FD9B0, (uint64_t (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
        if ((dispatch thunk of static Equatable.== infix(_:_:)(v28, v13, v7, v29) & 1) != 0)
        {
          result = 0;
          *v31 = v36;
          return result;
        }
        _HashTable.BucketIterator.advance()();
      }
      _HashTable.BucketIterator.currentValue.setter(v36, 0);
      v12 = v36 + 1;
      a3 = v32;
      if (v36 + 1 != v4)
        continue;
      goto LABEL_10;
    }
    break;
  }
LABEL_14:
  __break(1u);
  return result;
}

unint64_t sub_10007B134(unint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  unint64_t *v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  char v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;

  v56 = a4;
  v53 = a1;
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
  {
LABEL_25:
    *v53 = v4;
    return 1;
  }
  v5 = a3;
  v6 = 0;
  v7 = a2 + 32;
  v54 = a3;
  v55 = *(_QWORD *)(a2 + 16);
  while (1)
  {
    v8 = (uint64_t *)(v7 + 40 * v6);
    v9 = v8[1];
    v10 = v8[2];
    v11 = v8[3];
    v12 = *((_BYTE *)v8 + 32);
    v76 = *v8;
    v77 = v9;
    v78 = v10;
    v79 = v11;
    v80 = v12;
    Hasher.init(_seed:)(&v59, *v5);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v9);
    AssetInferenceProvider.hash(into:)((uint64_t)&v59);
    result = Hasher._finalize()();
    v14 = 1 << *v5;
    v15 = __OFSUB__(v14, 1);
    v16 = v14 - 1;
    if (v15)
      goto LABEL_29;
    v57 = v6;
    v17 = v16 & result;
    v18 = _HashTable.UnsafeHandle._startIterator(bucket:)(v16 & result, v5, v56);
    v20 = v19;
    v22 = v21;
    swift_bridgeObjectRelease(v11);
    v23 = swift_bridgeObjectRelease(v9);
    *(_QWORD *)&v68 = v5;
    *((_QWORD *)&v68 + 1) = v56;
    v4 = v55;
    *(_QWORD *)&v69 = v17;
    *((_QWORD *)&v69 + 1) = v18;
    *(_QWORD *)&v70 = v20;
    *((_QWORD *)&v70 + 1) = v22;
    v71 = 0;
    v75 = 0;
    v72 = v68;
    v73 = v69;
    v74 = v70;
    result = _HashTable.BucketIterator.currentValue.getter(v23, v24, v25, v26, v27, v28, v29, v30, v52, v53, v54, v55, v56, v57, v59, v60, v61, v62, v63,
               v64,
               v65,
               v66,
               v67,
               v5);
    if ((v31 & 1) == 0)
      break;
LABEL_24:
    _HashTable.BucketIterator.currentValue.setter(v58, 0);
    v6 = v58 + 1;
    v5 = v54;
    if (v58 + 1 == v4)
      goto LABEL_25;
  }
  while (result < v4)
  {
    v32 = v7 + 40 * result;
    v33 = *(_QWORD *)(v32 + 8);
    v35 = *(_QWORD *)(v32 + 16);
    v34 = *(_QWORD *)(v32 + 24);
    v36 = *(unsigned __int8 *)(v32 + 32);
    v37 = v8[1];
    v39 = v8[2];
    v38 = v8[3];
    v40 = *((unsigned __int8 *)v8 + 32);
    v41 = *(_QWORD *)v32 == *v8 && v33 == v37;
    if (!v41 && (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v32, v33, *v8, v37, 0) & 1) == 0)
      goto LABEL_23;
    if (!v34)
    {
      if (v38)
        goto LABEL_23;
      goto LABEL_20;
    }
    if (!v38)
      goto LABEL_23;
    if (v35 != v39 || v34 != v38)
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(v35, v34, v39, v38, 0) & 1) == 0)
        goto LABEL_23;
LABEL_20:
      if (((v36 ^ v40) & 1) == 0)
        goto LABEL_26;
      goto LABEL_23;
    }
    if (v36 == v40)
    {
LABEL_26:
      result = 0;
      *v53 = v58;
      return result;
    }
LABEL_23:
    _HashTable.BucketIterator.advance()();
    v72 = v68;
    v73 = v69;
    v74 = v70;
    v75 = v71;
    result = _HashTable.BucketIterator.currentValue.getter(v43, v44, v45, v46, v47, v48, v49, v50, v52, v53, v54, v55, v56, v58, v59, v60, v61, v62, v63,
               v64,
               v65,
               v66,
               v67,
               v68);
    if ((v51 & 1) != 0)
      goto LABEL_24;
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_10007B37C(uint64_t *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[9];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char v54;

  v44 = a4;
  v5 = a2;
  v41 = a1;
  if (a2 >> 62)
    goto LABEL_26;
  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  do
  {
    if (!v6)
      goto LABEL_20;
    v7 = 0;
    v8 = v5 & 0xC000000000000001;
    v45 = v5 + 32;
    v9 = v5 & 0xFFFFFFFFFFFFFF8;
    v42 = v6;
    v43 = a3;
    while (2)
    {
      if (v7 == v6)
      {
LABEL_24:
        __break(1u);
      }
      else
      {
        sub_1000BF908(v7, v8 == 0);
        if (v8)
        {
          v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
        }
        else
        {
          v10 = *(_QWORD *)(v45 + 8 * v7);
          swift_retain();
        }
        Hasher.init(_seed:)(v46, *a3);
        sub_10008B000();
        v11 = Hasher._finalize()();
        v12 = 1 << *a3;
        v13 = __OFSUB__(v12, 1);
        v14 = v12 - 1;
        if (!v13)
        {
          v15 = v14 & v11;
          v16 = _HashTable.UnsafeHandle._startIterator(bucket:)(v14 & v11, a3, v44);
          v17 = v10;
          v18 = v5;
          v19 = v9;
          v21 = v20;
          v22 = v8;
          v24 = v23;
          swift_release(v17);
          *(_QWORD *)&v47 = a3;
          *((_QWORD *)&v47 + 1) = v44;
          *(_QWORD *)&v48 = v15;
          *((_QWORD *)&v48 + 1) = v16;
          *(_QWORD *)&v49 = v21;
          *((_QWORD *)&v49 + 1) = v24;
          v9 = v19;
          v5 = v18;
          v8 = v22;
          v50 = 0;
          v54 = 0;
          v51 = v47;
          v52 = v48;
          v53 = v49;
          while (1)
          {
            v33 = _HashTable.BucketIterator.currentValue.getter(v25, v26, v27, v28, v29, v30, v31, v32, v40, v41, v42, v43, v44, v45, v46[0], v46[1], v46[2], v46[3], v46[4],
                    v46[5],
                    v46[6],
                    v46[7],
                    v46[8],
                    v47);
            if ((v34 & 1) != 0)
              break;
            if (v8)
            {
              v35 = specialized _ArrayBuffer._getElementSlowPath(_:)(v33, v18);
              v36 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v18);
            }
            else
            {
              if ((v33 & 0x8000000000000000) != 0)
              {
                __break(1u);
LABEL_23:
                __break(1u);
                goto LABEL_24;
              }
              if (v33 >= *(_QWORD *)(v9 + 16))
                goto LABEL_23;
              v35 = *(_QWORD *)(v45 + 8 * v33);
              v36 = *(_QWORD *)(v45 + 8 * v7);
              swift_retain();
              swift_retain();
            }
            type metadata accessor for InferenceProviderAsset(0);
            v37 = sub_10008AE98();
            swift_release(v35);
            swift_release(v36);
            if ((v37 & 1) != 0)
            {
              result = 0;
              *v41 = v7;
              return result;
            }
            _HashTable.BucketIterator.advance()();
            v51 = v47;
            v52 = v48;
            v53 = v49;
            v54 = v50;
          }
          _HashTable.BucketIterator.currentValue.setter(v7++, 0);
          v6 = v42;
          a3 = v43;
          if (v7 != v42)
            continue;
LABEL_20:
          *v41 = v6;
          return 1;
        }
      }
      break;
    }
    __break(1u);
LABEL_26:
    if (v5 < 0)
      v39 = v5;
    else
      v39 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v6 = _CocoaArrayWrapper.endIndex.getter(v39);
    result = swift_bridgeObjectRelease(v5);
  }
  while ((v6 & 0x8000000000000000) == 0);
  __break(1u);
  return result;
}

