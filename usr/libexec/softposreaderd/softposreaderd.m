int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  void **v35;
  NSString *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  NSString v44;
  id v45;
  NSObject *v46;
  void *v47;
  uint64_t v48;
  void *v49;
  char *v50;
  char *v51;
  id *v52;
  void (*v53)(void (*)(), _QWORD);
  id v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  id v60;
  void *v61;
  unint64_t v62;
  Class isa;
  void *v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  __CFNotificationCenter *v73;
  __CFString *v74;
  char v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint8_t *v79;
  __CFNotificationCenter *v80;
  __CFString *v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v84;
  int result;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  void **aBlock;
  uint64_t v97;
  void *v98;
  ValueMetadata *v99;
  unint64_t v100;
  uint64_t v101;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v91 = *(_QWORD *)(v3 - 8);
  v92 = v3;
  __chkstk_darwin(v3);
  v90 = (char *)&v86 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v5);
  v87 = (char *)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v88 = *(_QWORD *)(v7 - 8);
  v89 = v7;
  __chkstk_darwin(v7);
  v94 = (char *)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS.QoSClass(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Logger(0);
  sub_1000039D4(v17, qword_1001AC630);
  v18 = sub_100003A14(v17, (uint64_t)qword_1001AC630);
  v19 = SPRLogger.xpcServer.unsafeMutableAddressor();
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v18, v19, v17);
  v93 = v18;
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "***** Starting daemon softposreaderd *****", v23, 2u);
    swift_slowDealloc(v23, -1, -1);
  }

  sub_100005E24(0, (unint64_t *)&qword_1001B1240, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v9);
  v24 = static OS_dispatch_queue.global(qos:)(v12);
  v25 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v26 = v94;
  static DispatchQoS.unspecified.getter(v25);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v27 = sub_100005F1C((unint64_t *)&qword_1001AE3E0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v28 = sub_100003A2C((uint64_t *)&unk_1001B1250);
  v29 = sub_100005F5C((unint64_t *)&qword_1001AE3F0, (uint64_t *)&unk_1001B1250);
  v30 = v87;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v28, v29, v5, v27);
  qword_1001B4A80 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000018, 0x80000001001648F0, v26, v30, v16, v24);
  v31 = _set_user_dir_suffix("com.apple.softposreaderd");
  if ((_DWORD)v31)
  {
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = (void **)swift_slowAlloc(32, -1);
      aBlock = v35;
      *(_DWORD *)v34 = 136315138;
      v36 = NSTemporaryDirectory();
      v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
      v39 = v38;

      v95 = sub_1000056EC(v37, v39, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &aBlock, v34 + 4, v34 + 12);
      swift_bridgeObjectRelease(v39);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Using temporary directory: %s", v34, 0xCu);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);
    }

    v40 = objc_msgSend((id)objc_opt_self(SPRServiceXPC), "machServiceName");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
    v42 = v41;

    v43 = objc_allocWithZone((Class)NSXPCListener);
    v44 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v42);
    v45 = objc_msgSend(v43, "initWithMachServiceName:", v44);

    qword_1001B4A88 = (uint64_t)v45;
    qword_1001B4A90 = (uint64_t)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SPRRemoteService()), "init");
    objc_msgSend((id)qword_1001B4A88, "setDelegate:", qword_1001B4A90);
    v46 = qword_1001B4A80;
    v100 = (unint64_t)sub_100003AB0;
    v101 = 0;
    aBlock = _NSConcreteStackBlock;
    v97 = 1107296256;
    v98 = sub_10000434C;
    v99 = (ValueMetadata *)&unk_100196258;
    v47 = _Block_copy(&aBlock);
    xpc_set_event_stream_handler("com.apple.notifyd.matching", v46, v47);
    _Block_release(v47);
    sub_100005E24(0, &qword_1001AC658, OS_dispatch_source_ptr);
    qword_1001B4A98 = static OS_dispatch_source.makeSignalSource(signal:queue:)(15, qword_1001B4A80);
    v48 = ((uint64_t (*)(void))swift_getObjectType)();
    v100 = (unint64_t)sub_1000043AC;
    v101 = 0;
    aBlock = _NSConcreteStackBlock;
    v97 = 1107296256;
    v98 = sub_1000043B8;
    v99 = (ValueMetadata *)&unk_100196280;
    v49 = _Block_copy(&aBlock);
    v50 = v94;
    static DispatchQoS.unspecified.getter(v49);
    v51 = v90;
    sub_1000043E4();
    OS_dispatch_source.setEventHandler(qos:flags:handler:)(v50, v51, v49, v48);
    _Block_release(v49);
    (*(void (**)(char *, uint64_t))(v91 + 8))(v51, v92);
    (*(void (**)(char *, uint64_t))(v88 + 8))(v50, v89);
    swift_getObjectType(qword_1001B4A98);
    OS_dispatch_source.activate()();
    v52 = (id *)PrimaryAccountWatcher.shared.unsafeMutableAddressor();
    v53 = *(void (**)(void (*)(), _QWORD))((swift_isaMask & *(_QWORD *)*v52) + 0xB0);
    v54 = *v52;
    v53(sub_100004490, 0);

    v55 = *GlobalState.shared.unsafeMutableAddressor();
    swift_retain(v55);
    LOBYTE(v53) = GlobalState.isPANPresent.getter();
    v56 = swift_release(v55);
    if ((v53 & 1) != 0)
    {
      v57 = Logger.logObject.getter(v56);
      v58 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v57, v58))
      {
        v59 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v59 = 0;
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "PAN present in NVM upon daemon launch. Clearing PAN now.", v59, 2u);
        swift_slowDealloc(v59, -1, -1);
      }

      v60 = objc_msgSend((id)objc_opt_self(NFHardwareManager), "sharedHardwareManager");
      if (!v60)
        __break(1u);
      v61 = v60;
      v62 = sub_10000459C((uint64_t)_swiftEmptyArrayStorage);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v62);
      v100 = (unint64_t)sub_100004930;
      v101 = 0;
      aBlock = _NSConcreteStackBlock;
      v97 = 1107296256;
      v98 = sub_100004C68;
      v99 = (ValueMetadata *)&unk_1001962A8;
      v64 = _Block_copy(&aBlock);
      v65 = objc_msgSend(v61, "startSecureElementManagerSessionWithAttributes:completion:", isa, v64);
      _Block_release(v64);
      swift_unknownObjectRelease(v65);

    }
    sub_100004164();
    v66 = *CADailyLogger.shared.unsafeMutableAddressor();
    v67 = qword_1001B4A80;
    swift_retain(v66);
    CADailyLogger.registerBGSystemTask(queue:)(v67);
    swift_release(v66);
    v99 = &type metadata for SPRFeatures;
    v68 = sub_100004558();
    v100 = v68;
    LOBYTE(aBlock) = 0;
    LOBYTE(v67) = isFeatureEnabled(_:)(&aBlock);
    v69 = sub_100005D3C(&aBlock);
    if ((v67 & 1) != 0)
    {
      v70 = Logger.logObject.getter(v69);
      v71 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v70, v71))
      {
        v72 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v72 = 0;
        _os_log_impl((void *)&_mh_execute_header, v70, v71, "Feature Flag Enabled: Manual Post CA Daily", v72, 2u);
        swift_slowDealloc(v72, -1, -1);
      }

      v73 = CFNotificationCenterGetDarwinNotifyCenter();
      v74 = (__CFString *)String._bridgeToObjectiveC()();
      CFNotificationCenterAddObserver(v73, 0, (CFNotificationCallback)sub_100004DA4, v74, 0, CFNotificationSuspensionBehaviorDeliverImmediately);

    }
    v99 = &type metadata for SPRFeatures;
    v100 = v68;
    LOBYTE(aBlock) = 1;
    v75 = isFeatureEnabled(_:)(&aBlock);
    v76 = sub_100005D3C(&aBlock);
    if ((v75 & 1) != 0)
    {
      v77 = Logger.logObject.getter(v76);
      v78 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v77, v78))
      {
        v79 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v79 = 0;
        _os_log_impl((void *)&_mh_execute_header, v77, v78, "Feature Flag Enabled: Manual Send Monitoring Logs", v79, 2u);
        swift_slowDealloc(v79, -1, -1);
      }

      v80 = CFNotificationCenterGetDarwinNotifyCenter();
      v81 = (__CFString *)String._bridgeToObjectiveC()();
      CFNotificationCenterAddObserver(v80, 0, (CFNotificationCallback)sub_100005040, v81, 0, CFNotificationSuspensionBehaviorDeliverImmediately);

    }
    v82 = Logger.logObject.getter(v76);
    v83 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v82, v83))
    {
      v84 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v84 = 0;
      _os_log_impl((void *)&_mh_execute_header, v82, v83, "Ready to accept connections", v84, 2u);
      swift_slowDealloc(v84, -1, -1);
    }

    objc_msgSend((id)qword_1001B4A88, "resume");
    dispatch_main();
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001ELL, 0x8000000100164930, "softposreaderd/main.swift", 25, 2, 28, 0);
  __break(1u);
  return result;
}

uint64_t *sub_1000039D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_100003A14(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_100003A2C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100003A6C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

void sub_100003AB0(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const char *string;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  char v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  void (*v29)(uint64_t *__return_ptr, uint64_t);
  uint64_t v30;
  void *v31;
  void (*v32)(void *, uint64_t);
  unint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  NSObject *oslog;
  uint64_t aBlock[3];
  void *v44;
  void (*v45)(void *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v2 = type metadata accessor for Logger(0);
  sub_100003A14(v2, (uint64_t)&unk_1001AC630);
  if (!TMRTCResetNotification)
  {
    __break(1u);
    goto LABEL_34;
  }
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(TMRTCResetNotification);
  v5 = v4;
  string = xpc_dictionary_get_string(a1, _xpc_event_key_name);
  if (!string)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v8 = String.init(cString:)(string);
  v9 = v7;
  if (v8 == 0xD00000000000001ALL)
  {
    v10 = 0x8000000100164C60;
    if (v7 == 0x8000000100164C60)
      goto LABEL_7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x8000000100164C60, v8, v7, 0) & 1) != 0)
  {
    v10 = v9;
LABEL_7:
    swift_bridgeObjectRelease(v10);
    v11 = swift_bridgeObjectRelease(v5);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Received MFD event notification", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

    v15 = *GlobalState.shared.unsafeMutableAddressor();
    swift_retain(v15);
    GlobalState.updateMFDEventTimestamp()();
    swift_release(v15);
    v16 = objc_msgSend((id)objc_opt_self(NFHardwareManager), "sharedHardwareManager");
    if (v16)
    {
      v17 = v16;
      v45 = sub_1000050C4;
      v46 = 0;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100004C68;
      v44 = &unk_100196418;
      v18 = _Block_copy(aBlock);
      v19 = objc_msgSend(v17, "startSecureElementManagerSession:", v18);
      _Block_release(v18);
      swift_unknownObjectRelease(v19);

      return;
    }
LABEL_35:
    __break(1u);
    return;
  }
  if (v3 == v8 && v5 == v9)
  {
    swift_bridgeObjectRelease(v5);
    goto LABEL_19;
  }
  v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v8, v9, 0);
  swift_bridgeObjectRelease(v5);
  if ((v21 & 1) != 0)
  {
    v5 = v9;
LABEL_19:
    v22 = swift_bridgeObjectRelease(v5);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Received TM RTC reset notification", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    v26 = *GlobalState.shared.unsafeMutableAddressor();
    swift_retain(v26);
    GlobalState.receiveTMRTCResetNotification()();
    swift_release(v26);
    v27 = Primer.shared.unsafeMutableAddressor();
    v28 = *v27;
    v29 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)*v27 + 192);
    v30 = swift_retain(*v27);
    v29(aBlock, v30);
    swift_release(v28);
    v31 = v44;
    v32 = v45;
    sub_100005EF8(aBlock, (uint64_t)v44);
    (*((void (**)(void *, _QWORD))v32 + 3))(v31, v32);
    sub_100005D3C(aBlock);
    return;
  }
  if (v8 == 0xD00000000000002CLL && v9 == 0x8000000100164C80)
  {
    v33 = 0x8000000100164C80;
  }
  else
  {
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002CLL, 0x8000000100164C80, v8, v9, 0) & 1) == 0)
    {
      v38 = swift_bridgeObjectRetain(v9);
      oslog = Logger.logObject.getter(v38);
      v39 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(oslog, v39))
      {
        v40 = (uint8_t *)swift_slowAlloc(12, -1);
        v41 = swift_slowAlloc(32, -1);
        aBlock[0] = v41;
        *(_DWORD *)v40 = 136315138;
        swift_bridgeObjectRetain(v9);
        v47 = sub_1000056EC(v8, v9, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v40 + 4, v40 + 12);
        swift_bridgeObjectRelease_n(v9, 3);
        _os_log_impl((void *)&_mh_execute_header, oslog, v39, "Ignoring unexpected event: %s", v40, 0xCu);
        swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v41, -1, -1);
        swift_slowDealloc(v40, -1, -1);

      }
      else
      {
        swift_bridgeObjectRelease_n(v9, 2);

      }
      return;
    }
    v33 = v9;
  }
  v34 = swift_bridgeObjectRelease(v33);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Received ApplicationsChanged notification", v37, 2u);
    swift_slowDealloc(v37, -1, -1);
  }

  sub_100004164();
}

void sub_100004164()
{
  uint64_t v0;
  uint64_t v1;
  Swift::tuple_previous_Int_optional_current_Int_optional *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  void **v20;
  _QWORD v21[5];

  v0 = type metadata accessor for Logger(0);
  sub_100003A14(v0, (uint64_t)&unk_1001AC630);
  v1 = *GlobalState.shared.unsafeMutableAddressor();
  swift_retain(v1);
  GlobalState.updateNumberOfDeletableClients()(v2);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = swift_release(v1);
  if (((v6 | v10) & 1) == 0 && v4 >= 1 && v8 == 0)
  {
    v13 = Logger.logObject.getter(v11);
    v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = swift_slowAlloc(22, -1);
      *(_DWORD *)v15 = 134218240;
      v20 = (void **)v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, v21, v15 + 4, v15 + 12);
      *(_WORD *)(v15 + 12) = 2048;
      v20 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, v21, v15 + 14, v15 + 22);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Number of clients changed from %ld to %ld, removing applets now...", (uint8_t *)v15, 0x16u);
      swift_slowDealloc(v15, -1, -1);
    }

    v16 = objc_msgSend((id)objc_opt_self(NFHardwareManager), "sharedHardwareManager");
    if (v16)
    {
      v17 = v16;
      v21[3] = sub_1000050C4;
      v21[4] = 0;
      v20 = _NSConcreteStackBlock;
      v21[0] = 1107296256;
      v21[1] = sub_100004C68;
      v21[2] = &unk_1001963C8;
      v18 = _Block_copy(&v20);
      v19 = objc_msgSend(v17, "startSecureElementManagerSession:", v18);
      _Block_release(v18);
      swift_unknownObjectRelease(v19);

    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_10000434C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

uint64_t sub_100004394(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000043A4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000043AC()
{
  sub_10000449C("Stopping daemon: Caught SIGTERM");
}

uint64_t sub_1000043B8(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_1000043E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = _swiftEmptyArrayStorage;
  v1 = sub_100005F1C((unint64_t *)&qword_1001B1260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v2 = sub_100003A2C((uint64_t *)&unk_1001AE400);
  v3 = sub_100005F5C((unint64_t *)&qword_1001B1270, (uint64_t *)&unk_1001AE400);
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

void sub_100004490()
{
  sub_10000449C("Stopping daemon: primary account changed");
}

void sub_10000449C(const char *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  v2 = type metadata accessor for Logger(0);
  v3 = sub_100003A14(v2, (uint64_t)&unk_1001AC630);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, a1, v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  objc_msgSend((id)qword_1001B4A88, "invalidate");
  usleep(0x7A120u);
  _exit(0);
}

unint64_t sub_100004558()
{
  unint64_t result;

  result = qword_1001AC660;
  if (!qword_1001AC660)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SPRFeatures, &type metadata for SPRFeatures);
    atomic_store(result, (unint64_t *)&qword_1001AC660);
  }
  return result;
}

unint64_t sub_10000459C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003A2C(&qword_1001AC688);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100005EB4(v7, (uint64_t)v16, &qword_1001AC690);
    result = sub_10000AD94((uint64_t)v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v10 = v4[6] + 40 * result;
    v11 = v16[0];
    v12 = v16[1];
    *(_QWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    result = (unint64_t)sub_100005D2C(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 72;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000046DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003A2C((uint64_t *)&unk_1001ACD40);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v10 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_10000ADC4(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (_QWORD *)(v4[7] + 16 * result);
    *v14 = v10;
    v14[1] = v9;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000047FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003A2C(&qword_1001AC668);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100005EB4(v7, (uint64_t)&v16, &qword_1001AC670);
    v8 = v16;
    v9 = v17;
    result = sub_10000ADC4(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_100005D2C(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void sub_100004930(void *a1, uint64_t a2)
{
  uint64_t v4;
  id v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  NSObject *oslog;
  uint64_t aBlock[7];
  _QWORD v20[3];
  _BYTE v21[8];
  uint64_t v22;
  uint64_t v23;

  v4 = type metadata accessor for Logger(0);
  sub_100003A14(v4, (uint64_t)&unk_1001AC630);
  if (a1)
  {
    v5 = a1;
    v6 = AID_PIN_APPLET.unsafeMutableAddressor();
    v7 = *v6;
    v8 = v6[1];
    sub_100005D9C(*v6, v8);
    NFSecureElementManagerSession.select(_:)(v7, v8);
    sub_100005DE0(v7, v8);
    aBlock[0] = (uint64_t)v5;
    sub_100005E24(0, (unint64_t *)&qword_1001B36C0, NFSecureElementManagerSession_ptr);
    sub_100005E5C();
    SecureElementTransceiver.cancelPIN()();
    v16 = *GlobalState.shared.unsafeMutableAddressor();
    swift_retain(v16);
    GlobalState.isPANPresent.setter(0);
    swift_release(v16);
    aBlock[4] = (uint64_t)sub_1000052F8;
    aBlock[5] = 0;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000043B8;
    aBlock[3] = (uint64_t)&unk_1001963A0;
    v17 = _Block_copy(aBlock);
    objc_msgSend(v5, "endSessionWithCompletion:", v17);
    _Block_release(v17);

  }
  else
  {
    swift_errorRetain(a2);
    v9 = swift_errorRetain(a2);
    oslog = Logger.logObject.getter(v9);
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      aBlock[0] = v12;
      *(_DWORD *)v11 = 136315138;
      if (a2)
      {
        swift_getErrorValue(a2, v21, v20);
        v13 = Error.localizedDescription.getter(v20[1], v20[2]);
        v15 = v14;
      }
      else
      {
        v15 = 0xE300000000000000;
        v13 = 7104878;
      }
      v22 = sub_1000056EC(v13, v15, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease(v15);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, oslog, v10, "Could not start SecureElementManagerSession to clear PAN: %s", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);

    }
  }
}

void sub_100004C68(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

uint64_t sub_100004CDC()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;

  v0 = type metadata accessor for Logger(0);
  v1 = sub_100003A14(v0, (uint64_t)&unk_1001AC630);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Received CFNotification to post the CA daily event now", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  v5 = *CADailyLogger.shared.unsafeMutableAddressor();
  swift_retain(v5);
  CADailyLogger.postDailyEvents()();
  return swift_release(v5);
}

void sub_100004DA4(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  sub_10000504C(a1, a2, a3, a4, a5, (void (*)(void))sub_100004CDC);
}

void sub_100004DB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  void (*v8)(uint64_t *__return_ptr, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = type metadata accessor for Logger(0);
  v2 = sub_100003A14(v1, (uint64_t)&unk_1001AC630);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Received notification to send the monitoring logs now", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = Primer.shared.unsafeMutableAddressor();
  v7 = *v6;
  v8 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)*v6 + 192);
  v9 = swift_retain(*v6);
  v8(&v19, v9);
  if (v0)
  {
    swift_release(v7);
    swift_errorRetain(v0);
    v12 = swift_errorRetain(v0);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v15 = 138412290;
      swift_errorRetain(v0);
      v17 = _swift_stdlib_bridgeErrorToNSError(v0);
      v19 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v15 + 4, v15 + 12);
      *v16 = v17;
      swift_errorRelease(v0);
      swift_errorRelease(v0);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Error when sending logs: %@", v15, 0xCu);
      v18 = sub_100003A2C((uint64_t *)&unk_1001AE430);
      swift_arrayDestroy(v16, 1, v18);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
      swift_errorRelease(v0);

    }
    else
    {
      swift_errorRelease(v0);

      swift_errorRelease(v0);
      swift_errorRelease(v0);
    }
  }
  else
  {
    swift_release(v7);
    v10 = v21;
    v11 = v22;
    sub_100005EF8(&v19, v21);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
    sub_100005D3C(&v19);
  }
}

void sub_100005040(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  sub_10000504C(a1, a2, a3, a4, a5, sub_100004DB0);
}

void sub_10000504C(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void (*a6)(void))
{
  id v9;
  id v10;
  void *v11;
  id v12;

  v9 = a1;
  v10 = a3;
  v12 = a5;
  v11 = objc_autoreleasePoolPush();
  a6();
  objc_autoreleasePoolPop(v11);

}

void sub_1000050C4(void *a1, uint64_t a2)
{
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  NSObject *oslog;
  uint64_t aBlock[6];
  _QWORD v16[3];
  _BYTE v17[8];
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for Logger(0);
  sub_100003A14(v4, (uint64_t)&unk_1001AC630);
  if (a1)
  {
    v5 = a1;
    NFSecureElementManagerSession.performCleanupScript()();
    aBlock[4] = (uint64_t)sub_100005304;
    aBlock[5] = 0;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000043B8;
    aBlock[3] = (uint64_t)&unk_1001963F0;
    v6 = _Block_copy(aBlock);
    objc_msgSend(v5, "endSessionWithCompletion:", v6);
    _Block_release(v6);

  }
  else
  {
    swift_errorRetain(a2);
    v7 = swift_errorRetain(a2);
    oslog = Logger.logObject.getter(v7);
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      aBlock[0] = v10;
      *(_DWORD *)v9 = 136315138;
      if (a2)
      {
        swift_getErrorValue(a2, v17, v16);
        v11 = Error.localizedDescription.getter(v16[1], v16[2]);
        v13 = v12;
      }
      else
      {
        v13 = 0xE300000000000000;
        v11 = 7104878;
      }
      v18 = sub_1000056EC(v11, v13, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v9 + 4, v9 + 12);
      swift_bridgeObjectRelease(v13);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, oslog, v8, "session not available to remove applets: %s", v9, 0xCu);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);

    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);

    }
  }
}

void sub_1000052F8()
{
  sub_100005310("softposreaderd main: SecureElementManagerSession ended");
}

void sub_100005304()
{
  sub_100005310("session ended for remove applets");
}

void sub_100005310(const char *a1)
{
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  NSObject *oslog;

  v2 = type metadata accessor for Logger(0);
  sub_100003A14(v2, (uint64_t)&unk_1001AC630);
  oslog = Logger.logObject.getter();
  v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(oslog, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v3, a1, v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

}

uint64_t sub_1000053BC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AC6B0, (uint64_t (*)(uint64_t))type metadata accessor for SecurityError, (uint64_t)&unk_10015A450);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000053FC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AC6B0, (uint64_t (*)(uint64_t))type metadata accessor for SecurityError, (uint64_t)&unk_10015A450);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100005440(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C((unint64_t *)&qword_1001AC6E8, (uint64_t (*)(uint64_t))type metadata accessor for SecurityError, (uint64_t)&unk_10015BE48);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

id sub_100005480()
{
  id *v0;

  return *v0;
}

uint64_t sub_100005488@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_100005490()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(kSPRErrorDomain);
}

uint64_t sub_1000054A0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C((unint64_t *)&qword_1001AC6E8, (uint64_t (*)(uint64_t))type metadata accessor for SecurityError, (uint64_t)&unk_10015BE48);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000054E0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C((unint64_t *)&qword_1001AC6E8, (uint64_t (*)(uint64_t))type metadata accessor for SecurityError, (uint64_t)&unk_10015BE48);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100005520(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F1C((unint64_t *)&qword_1001AC6E8, (uint64_t (*)(uint64_t))type metadata accessor for SecurityError, (uint64_t)&unk_10015BE48);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100005584()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_1000055B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F1C((unint64_t *)&qword_1001AC6E8, (uint64_t (*)(uint64_t))type metadata accessor for SecurityError, (uint64_t)&unk_10015BE48);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_100005608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD v7[10];

  v7[9] = *v3;
  Hasher.init(_seed:)(v7);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

_QWORD *sub_100005664@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_100005674(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_100005680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100005F1C((unint64_t *)&qword_1001AC6E8, (uint64_t (*)(uint64_t))type metadata accessor for SecurityError, (uint64_t)&unk_10015BE48);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

BOOL sub_1000056D8(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1000056EC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_1000057BC(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_100005D5C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_100005D5C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_100005D3C(v12);
  return v7;
}

uint64_t sub_1000057BC(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_100005974(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_100005974(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_100005A08(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_100005BE0(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_100005BE0(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_100005A08(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_100005B7C(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_100005B7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_100003A2C(&qword_1001AC678);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_100005BE0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003A2C(&qword_1001AC678);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

_OWORD *sub_100005D2C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100005D3C(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100005D5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100005D9C(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100005DE0(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100005E24(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_100005E5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001AC680;
  if (!qword_1001AC680)
  {
    v1 = sub_100005E24(255, (unint64_t *)&qword_1001B36C0, NFSecureElementManagerSession_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NFSecureElementManagerSession, v1);
    atomic_store(result, (unint64_t *)&qword_1001AC680);
  }
  return result;
}

uint64_t sub_100005EB4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100003A2C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

_QWORD *sub_100005EF8(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_100005F1C(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100005F5C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100003A6C(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for SecurityError(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001AC698, (uint64_t)&unk_100196450);
}

uint64_t sub_100005FB0()
{
  return sub_100005F1C(&qword_1001AC6A0, (uint64_t (*)(uint64_t))type metadata accessor for SecurityError, (uint64_t)&unk_10015A3D8);
}

uint64_t sub_100005FDC()
{
  return sub_100005F1C(&qword_1001AC6A8, (uint64_t (*)(uint64_t))type metadata accessor for SecurityError, (uint64_t)&unk_10015B4B8);
}

uint64_t sub_100006008()
{
  return sub_100005F1C(&qword_1001AC6B0, (uint64_t (*)(uint64_t))type metadata accessor for SecurityError, (uint64_t)&unk_10015A450);
}

uint64_t sub_100006034()
{
  return sub_100005F1C(&qword_1001AC6B8, (uint64_t (*)(uint64_t))type metadata accessor for SecurityError, (uint64_t)&unk_10015B500);
}

uint64_t sub_100006060()
{
  return sub_100005F1C(&qword_1001AC6C0, (uint64_t (*)(uint64_t))type metadata accessor for SecurityError, (uint64_t)&unk_10015A408);
}

uint64_t sub_10000608C()
{
  return sub_100005F1C(&qword_1001AC6C8, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_10015BEC0);
}

void type metadata accessor for Code(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001AC6F0, (uint64_t)&unk_100196478);
}

void sub_1000060CC(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_100006110()
{
  return sub_100005F1C(&qword_1001AC6D0, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_10015A4A0);
}

unint64_t sub_100006140()
{
  unint64_t result;

  result = qword_1001AC6D8;
  if (!qword_1001AC6D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1001AC6D8);
  }
  return result;
}

uint64_t sub_100006184()
{
  return sub_100005F1C(&qword_1001AC6E0, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_10015A4E8);
}

uint64_t sub_1000061B0()
{
  return sub_100005F1C((unint64_t *)&qword_1001AC6E8, (uint64_t (*)(uint64_t))type metadata accessor for SecurityError, (uint64_t)&unk_10015BE48);
}

void sub_10000645C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  if (a2)
    v5 = _convertErrorToNSError(_:)(a2);
  else
    v5 = 0;
  v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);

}

id sub_1000064E0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RemoteOasisRreader();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RemoteOasisRreader()
{
  return objc_opt_self(_TtC14softposreaderd18RemoteOasisRreader);
}

uint64_t sub_100006540()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100006564(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10000645C(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_100006584()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001AC788);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001AC788);
  v2 = SPRLogger.xpcServer.unsafeMutableAddressor();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1000065E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007A5C(v3, (uint64_t)v10);
  if (swift_getEnumCaseMultiPayload(v10, a1) != 1)
    return *(_QWORD *)v10;
  v11 = (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 32))(v8, v10, v4);
  v12 = UUID.uuidString.getter(v11);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v12;
}

uint64_t sub_10000672C()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  void *object;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  Swift::String v28;
  uint64_t v29;
  Swift::String v30;
  void *v31;
  Swift::String v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ClientID(0);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v36 = 0;
  v37 = 0xE000000000000000;
  _StringGuts.grow(_:)(64);
  v9 = objc_msgSend(v0, "description");
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v12);
  v14._countAndFlagsBits = 0x65636F7270207B20;
  v14._object = (void *)0xEE00203A44497373;
  String.append(_:)(v14);
  LODWORD(v35) = *(_DWORD *)&v1[OBJC_IVAR____TtC14softposreaderd10ClientInfo_processID];
  v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
  object = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(object);
  v17._countAndFlagsBits = 0x746E65696C63202CLL;
  v17._object = (void *)0xEC000000203A4449;
  String.append(_:)(v17);
  sub_100007A5C((uint64_t)&v1[OBJC_IVAR____TtC14softposreaderd10ClientInfo_clientID], (uint64_t)v8);
  if (swift_getEnumCaseMultiPayload(v8, v6) == 1)
  {
    v18 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v3 + 32))(v5, v8, v2);
    v19 = UUID.uuidString.getter(v18);
    v21 = v20;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    v19 = *v8;
    v21 = (void *)v8[1];
  }
  v22._countAndFlagsBits = v19;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(v21);
  v23._countAndFlagsBits = 0x746E65696C63202CLL;
  v23._object = (void *)0xEE00203A65707954;
  String.append(_:)(v23);
  v24 = *(_QWORD *)&v1[OBJC_IVAR____TtC14softposreaderd10ClientInfo_clientType];
  if (v24 == 2)
  {
    v25 = 0xE700000000000000;
    v26 = 0x746E656D796150;
  }
  else if (v24 == 1)
  {
    v25 = 0xE90000000000006ELL;
    v26 = 0x6F697369766F7250;
  }
  else
  {
    v25 = 0xE700000000000000;
    v26 = 0x6E776F6E6B6E55;
  }
  v27 = v25;
  String.append(_:)(*(Swift::String *)&v26);
  swift_bridgeObjectRelease(v25);
  v28._countAndFlagsBits = 0x76654C697061202CLL;
  v28._object = (void *)0xEC000000203A6C65;
  String.append(_:)(v28);
  v29 = 1;
  if (v1[OBJC_IVAR____TtC14softposreaderd10ClientInfo_apiLevel])
    v29 = 2;
  v35 = v29;
  v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v31 = v30._object;
  String.append(_:)(v30);
  swift_bridgeObjectRelease(v31);
  v32._countAndFlagsBits = 32032;
  v32._object = (void *)0xE200000000000000;
  String.append(_:)(v32);
  return v36;
}

_QWORD *sub_100006A4C(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  unsigned int v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  NSString v13;
  id v14;
  uint64_t v15;
  int v16;
  NSString v17;
  id v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  objc_class *v30;
  _QWORD v32[2];
  objc_super v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v3 = type metadata accessor for ClientID(0);
  __chkstk_darwin(v3);
  v5 = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v1;
  v7 = objc_msgSend(a1, "processIdentifier");
  *(_DWORD *)((char *)v6 + OBJC_IVAR____TtC14softposreaderd10ClientInfo_processID) = v7;
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(a1, "valueForEntitlement:", v8);

  if (v9)
  {
    _bridgeAnyObjectToAny(_:)(&v34, v9);
    swift_unknownObjectRelease(v9);
  }
  else
  {
    v34 = 0u;
    v35 = 0u;
  }
  sub_100007AE8((uint64_t)&v34, (uint64_t)&v36);
  if (v37)
  {
    v10 = swift_dynamicCast(v32, &v36, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    if ((v10 & 1) != 0)
    {
      v11 = v32[1];
      v12 = (_QWORD *)((char *)v6 + OBJC_IVAR____TtC14softposreaderd10ClientInfo_clientID);
      *v12 = v32[0];
      v12[1] = v11;
      swift_storeEnumTagMultiPayload(v12, v3, 0);
      goto LABEL_9;
    }
  }
  else
  {
    v10 = sub_100007B30((uint64_t)&v36);
  }
  UUID.init()(v10);
  swift_storeEnumTagMultiPayload(v5, v3, 1);
  sub_100007B70((uint64_t)v5, (uint64_t)v6 + OBJC_IVAR____TtC14softposreaderd10ClientInfo_clientID);
LABEL_9:
  v13 = String._bridgeToObjectiveC()();
  v14 = objc_msgSend(a1, "valueForEntitlement:", v13);

  if (v14)
  {
    _bridgeAnyObjectToAny(_:)(&v34, v14);
    swift_unknownObjectRelease(v14);
    sub_100005D2C(&v34, &v36);
    sub_100005D5C((uint64_t)&v36, (uint64_t)&v34);
    if ((swift_dynamicCast(v32, &v34, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) != 0)
    {
      v15 = v32[0];
      if (v32[0] == 1)
      {
        v16 = 0;
      }
      else
      {
        if (v32[0] != 2)
        {
          type metadata accessor for SecurityError(0);
          v26 = v25;
          v32[0] = 10003;
          v27 = sub_100007AA0();
          v28 = NamedError.init(_:reason:error:)((uint64_t)v32, 0x6D656C7469746E65, (void *)0xEB00000000746E65, 0, v26, v27, &v34);
          swift_willThrow(v28);

          sub_100005D3C(&v36);
          goto LABEL_36;
        }
        v16 = 1;
        v15 = 1;
      }
    }
    else
    {
      sub_100005D5C((uint64_t)&v36, (uint64_t)&v34);
      if ((swift_dynamicCast(v32, &v34, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
      {
        v15 = LOBYTE(v32[0]);
        if (LOBYTE(v32[0]))
          v16 = 0;
        else
          v16 = 2;
      }
      else
      {
        v15 = 0;
        v16 = 2;
      }
    }
    sub_100005D3C(&v36);
  }
  else
  {
    v15 = 0;
    v16 = 2;
  }
  v17 = String._bridgeToObjectiveC()();
  v18 = objc_msgSend(a1, "valueForEntitlement:", v17);

  if (v18)
  {
    _bridgeAnyObjectToAny(_:)(&v34, v18);
    swift_unknownObjectRelease(v18);
  }
  else
  {
    v34 = 0u;
    v35 = 0u;
  }
  sub_100007AE8((uint64_t)&v34, (uint64_t)&v36);
  if (v37)
  {
    if ((swift_dynamicCast(v32, &v36, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) != 0)
    {
      if (v32[0] == 1)
      {
        v19 = 0;
        goto LABEL_38;
      }
      if (v32[0] == 2)
      {
        v19 = 1;
LABEL_38:
        v20 = v15 | 2;
        goto LABEL_39;
      }
      goto LABEL_34;
    }
  }
  else
  {
    sub_100007B30((uint64_t)&v36);
  }
  v19 = v16 != 0;
  if (v16 != 2 && v15)
  {
    v20 = 1;
LABEL_39:
    *(_QWORD *)((char *)v6 + OBJC_IVAR____TtC14softposreaderd10ClientInfo_clientType) = v20;
    *((_BYTE *)v6 + OBJC_IVAR____TtC14softposreaderd10ClientInfo_apiLevel) = v19;

    v30 = (objc_class *)type metadata accessor for ClientInfo(0);
    v33.receiver = v6;
    v33.super_class = v30;
    v6 = objc_msgSendSuper2(&v33, "init");

    return v6;
  }
LABEL_34:
  type metadata accessor for SecurityError(0);
  v22 = v21;
  *(_QWORD *)&v34 = 10003;
  v23 = sub_100007AA0();
  v24 = NamedError.init(_:reason:error:)((uint64_t)&v34, 0x6D656C7469746E65, (void *)0xEB00000000746E65, 0, v22, v23, &v36);
  swift_willThrow(v24);

LABEL_36:
  sub_100007858((uint64_t)v6 + OBJC_IVAR____TtC14softposreaderd10ClientInfo_clientID);

  v29 = type metadata accessor for ClientInfo(0);
  swift_deallocPartialClassInstance(v6, v29, *(unsigned int *)((swift_isaMask & *v6) + 0x30), *(unsigned __int16 *)((swift_isaMask & *v6) + 0x34));
  return v6;
}

uint64_t sub_100006F58(uint64_t result, uint64_t a2, unint64_t a3)
{
  _BYTE *v3;
  unint64_t v4;
  uint64_t v7;
  _BYTE *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = 1;
  if (v3[OBJC_IVAR____TtC14softposreaderd10ClientInfo_apiLevel])
    v4 = 2;
  if (v4 < (result & 1) + 1)
  {
    if (qword_1001AC648 != -1)
      swift_once(&qword_1001AC648, sub_100006584);
    v7 = type metadata accessor for Logger(0);
    sub_100003A14(v7, (uint64_t)qword_1001AC788);
    swift_bridgeObjectRetain_n(a3, 2);
    v8 = v3;
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = swift_slowAlloc(22, -1);
      v20 = swift_slowAlloc(64, -1);
      v23 = v20;
      *(_DWORD *)v11 = 136315394;
      swift_bridgeObjectRetain(a3);
      v21 = sub_1000056EC(a2, a3, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease_n(a3, 3);
      *(_WORD *)(v11 + 12) = 2080;
      v12 = objc_msgSend(v8, "debugDescription");
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v15 = v14;

      v21 = sub_1000056EC(v13, v15, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v11 + 14, v11 + 22);

      swift_bridgeObjectRelease(v15);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Client not authorized to call %s: %s", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy(v20, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v11, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
    type metadata accessor for SecurityError(0);
    v17 = v16;
    v21 = 10003;
    v18 = sub_100007AA0();
    v19 = NamedError.init(_:reason:error:)((uint64_t)&v21, 0x6D656C7469746E65, (void *)0xEB00000000746E65, 0, v17, v18, &v23);
    return swift_willThrow(v19);
  }
  return result;
}

uint64_t sub_10000720C(uint64_t result, uint64_t a2, unint64_t a3)
{
  char *v3;
  uint64_t v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if ((result & ~*(_QWORD *)&v3[OBJC_IVAR____TtC14softposreaderd10ClientInfo_clientType]) != 0)
  {
    if (qword_1001AC648 != -1)
      swift_once(&qword_1001AC648, sub_100006584);
    v6 = type metadata accessor for Logger(0);
    sub_100003A14(v6, (uint64_t)qword_1001AC788);
    swift_bridgeObjectRetain_n(a3, 2);
    v7 = v3;
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = swift_slowAlloc(22, -1);
      v19 = swift_slowAlloc(64, -1);
      v22 = v19;
      *(_DWORD *)v10 = 136315394;
      swift_bridgeObjectRetain(a3);
      v20 = sub_1000056EC(a2, a3, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease_n(a3, 3);
      *(_WORD *)(v10 + 12) = 2080;
      v11 = objc_msgSend(v7, "debugDescription");
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v14 = v13;

      v20 = sub_1000056EC(v12, v14, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v10 + 14, v10 + 22);

      swift_bridgeObjectRelease(v14);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Client not authorized to call %s: %s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v10, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
    type metadata accessor for SecurityError(0);
    v16 = v15;
    v20 = 10003;
    v17 = sub_100007AA0();
    v18 = NamedError.init(_:reason:error:)((uint64_t)&v20, 0x6D656C7469746E65, (void *)0xEB00000000746E65, 0, v16, v17, &v22);
    return swift_willThrow(v18);
  }
  return result;
}

id sub_1000074D8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClientInfo(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10000751C()
{
  return type metadata accessor for ClientInfo(0);
}

uint64_t type metadata accessor for ClientInfo(uint64_t a1)
{
  return sub_1000075E0(a1, (uint64_t *)&unk_1001AC7D0, (uint64_t)&nominal type descriptor for ClientInfo);
}

uint64_t sub_100007538(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.Int32 + 64;
  result = type metadata accessor for ClientID(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_10015A588;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for ClientID(uint64_t a1)
{
  return sub_1000075E0(a1, qword_1001AC850, (uint64_t)&nominal type descriptor for ClientID);
}

uint64_t sub_1000075E0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t *sub_100007614(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v7 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = a3;
      v10 = 1;
    }
    else
    {
      v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      swift_bridgeObjectRetain();
      v8 = a1;
      v9 = a3;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

uint64_t sub_1000076D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (swift_getEnumCaseMultiPayload(a1, a2) != 1)
    return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v3 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

_QWORD *sub_100007720(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    v7 = a1;
    v8 = a3;
    v9 = 1;
  }
  else
  {
    v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    swift_bridgeObjectRetain();
    v7 = a1;
    v8 = a3;
    v9 = 0;
  }
  swift_storeEnumTagMultiPayload(v7, v8, v9);
  return a1;
}

_QWORD *sub_1000077B0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sub_100007858((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for UUID(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = a1;
      v8 = a3;
      v9 = 1;
    }
    else
    {
      *a1 = *a2;
      v10 = a2[1];
      a1[1] = v10;
      swift_bridgeObjectRetain(v10);
      v7 = a1;
      v8 = a3;
      v9 = 0;
    }
    swift_storeEnumTagMultiPayload(v7, v8, v9);
  }
  return a1;
}

uint64_t sub_100007858(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ClientID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_100007894(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for UUID(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_100007920(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_100007858((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for UUID(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000079BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_1000079C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_1000079DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_1000079EC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_10015A5B0;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
    return 0;
  }
  return result;
}

uint64_t sub_100007A5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ClientID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100007AA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001AC888;
  if (!qword_1001AC888)
  {
    type metadata accessor for SecurityError(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for related decl 'e' for SPRSecurityErrorCode, v1);
    atomic_store(result, (unint64_t *)&qword_1001AC888);
  }
  return result;
}

uint64_t sub_100007AE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003A2C(&qword_1001B12E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100007B30(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003A2C(&qword_1001B12E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100007B70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ClientID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id sub_100007EC8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RemoteConfigurator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RemoteConfigurator()
{
  return objc_opt_self(_TtC14softposreaderd18RemoteConfigurator);
}

uint64_t sub_100007F28()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100007F4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10000645C(a1, a2, *(_QWORD *)(v2 + 16));
}

void sub_100007F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t inited;
  unint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  Class isa;
  _BYTE v25[72];

  v11 = *(_QWORD *)(a5 + OBJC_IVAR____TtC14softposreaderd18RemoteConfigurator_instance + 24);
  v12 = *(_QWORD *)(a5 + OBJC_IVAR____TtC14softposreaderd18RemoteConfigurator_instance + 32);
  sub_100005EF8((_QWORD *)(a5 + OBJC_IVAR____TtC14softposreaderd18RemoteConfigurator_instance), v11);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 8))(a1, a2, a3, a4, v11, v12);
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v20 = sub_100003A2C(&qword_1001AC920);
  inited = swift_initStackObject(v20, v25);
  *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
  *(_QWORD *)(inited + 32) = 0x6E656B6F74;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  *(_QWORD *)(inited + 48) = v13;
  *(_QWORD *)(inited + 56) = v15;
  swift_bridgeObjectRetain(v15);
  v22 = sub_1000046DC(inited);
  swift_bridgeObjectRelease(v15);
  if (v19)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v22);
    sub_10000B5EC(v17, v19, 0xD000000000000013, 0x8000000100164EF0, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class, _QWORD))(a6 + 16))(a6, isa, 0);
  swift_bridgeObjectRelease(v22);

}

id sub_100008208()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RemoteMonitor();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RemoteMonitor()
{
  return objc_opt_self(_TtC14softposreaderd13RemoteMonitor);
}

uint64_t sub_100008268(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t);
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  sub_100008390(a5 + OBJC_IVAR____TtC14softposreaderd13RemoteMonitor_instance, (uint64_t)v16);
  v11 = v17;
  v12 = v18;
  sub_100005EF8(v16, v17);
  if (a4)
    v13 = a4;
  else
    v13 = sub_1000046DC((uint64_t)_swiftEmptyArrayStorage);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v12 + 8);
  swift_bridgeObjectRetain(a4);
  v14(a1, a2, a3, v13, v11, v12);
  swift_bridgeObjectRelease(v13);
  sub_100005D3C(v16);
  return (*(uint64_t (**)(uint64_t, _QWORD))(a6 + 16))(a6, 0);
}

uint64_t sub_100008390(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

id sub_100008958()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RemotePINController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RemotePINController()
{
  return objc_opt_self(_TtC14softposreaderd19RemotePINController);
}

uint64_t sub_1000089E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Class isa;
  Class v18;

  v6 = *(_QWORD *)(a2 + OBJC_IVAR____TtC14softposreaderd19RemotePINController_instance + 24);
  v7 = *(_QWORD *)(a2 + OBJC_IVAR____TtC14softposreaderd19RemotePINController_instance + 32);
  sub_100005EF8((_QWORD *)(a2 + OBJC_IVAR____TtC14softposreaderd19RemotePINController_instance), v6);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 8))(a1, v6, v7);
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v15 = os_transaction_create("PINCapture");
  v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC14softposreaderd19RemotePINController_captureInProgress);
  *(_QWORD *)(a2 + OBJC_IVAR____TtC14softposreaderd19RemotePINController_captureInProgress) = v15;
  swift_unknownObjectRelease(v16);
  sub_100005D9C(v8, v10);
  sub_100005D9C(v12, v14);
  sub_100005DE0(v12, v14);
  sub_100005D9C(v8, v10);
  sub_100005D9C(v12, v14);
  sub_100005DE0(v8, v10);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v18 = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class, Class, _QWORD))(a3 + 16))(a3, isa, v18, 0);

  sub_100005DE0(v12, v14);
  sub_100005DE0(v8, v10);
  sub_100005DE0(v8, v10);
  return sub_100005DE0(v12, v14);
}

uint64_t sub_100008BA0(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v4 = (_QWORD *)(a1 + OBJC_IVAR____TtC14softposreaderd19RemotePINController_instance);
  v5 = v4[3];
  v6 = v4[4];
  sub_100005EF8(v4, v5);
  v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  (*(void (**)(uint64_t, void *, _QWORD))(a2 + 16))(a2, v7, 0);

  v8 = *(_QWORD *)(a1 + OBJC_IVAR____TtC14softposreaderd19RemotePINController_captureInProgress);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC14softposreaderd19RemotePINController_captureInProgress) = 0;
  return swift_unknownObjectRelease(v8);
}

id sub_100008C88()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  objc_super v4;

  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC14softposreaderd12RemotePrimer_instance + 24];
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC14softposreaderd12RemotePrimer_instance + 32];
  sub_100005EF8(&v0[OBJC_IVAR____TtC14softposreaderd12RemotePrimer_instance], v1);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(v0[OBJC_IVAR____TtC14softposreaderd12RemotePrimer_isPOS], v1, v2);
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for RemotePrimer();
  return objc_msgSendSuper2(&v4, "dealloc");
}

void sub_100008EAC(void *a1, int a2, void *aBlock, void (*a4)(void))
{
  void *v6;
  id v7;

  v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  v7 = a1;
  a4();
  _Block_release(v6);
  _Block_release(v6);

}

uint64_t type metadata accessor for RemotePrimer()
{
  return objc_opt_self(_TtC14softposreaderd12RemotePrimer);
}

void sub_100008F5C(uint64_t a1, void (**a2)(_QWORD, _QWORD))
{
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Class isa;

  v4 = type metadata accessor for Logger(0);
  __chkstk_darwin(v4);
  v5 = objc_msgSend((id)objc_opt_self(NSXPCConnection), "currentConnection");
  if (v5)
  {
    v6 = v5;
    v7 = objc_msgSend(v5, "userInfo");

    if (v7)
    {
      v8 = type metadata accessor for ClientInfo(0);
      swift_dynamicCastClassUnconditional(v7, v8, 0, 0, 0);
      sub_100006F58(1, 0xD000000000000019, 0x8000000100165080);
      swift_unknownObjectRelease(v7);
      v9 = *(_QWORD *)(a1 + OBJC_IVAR____TtC14softposreaderd12RemotePrimer_instance + 24);
      v10 = *(_QWORD *)(a1 + OBJC_IVAR____TtC14softposreaderd12RemotePrimer_instance + 32);
      sub_100005EF8((_QWORD *)(a1 + OBJC_IVAR____TtC14softposreaderd12RemotePrimer_instance), v9);
      v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      ((void (**)(_QWORD, Class))a2)[2](a2, isa);
      swift_bridgeObjectRelease(v11);

      return;
    }
  }
  else
  {
    _Block_release(a2);
    __break(1u);
  }
  _Block_release(a2);
  __break(1u);
}

void sub_1000092B4(uint64_t a1, const void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  objc_class *v24;
  id v25;
  id v26;
  const void *v27;
  _QWORD v28[2];
  _QWORD v29[2];
  objc_super v30;
  _QWORD v31[6];
  _QWORD v32[5];

  v27 = a2;
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v28[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ClientID(0);
  __chkstk_darwin(v7);
  v9 = (_QWORD *)((char *)&v28[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(_QWORD *)(a1 + OBJC_IVAR____TtC14softposreaderd12RemotePrimer_instance + 24);
  v11 = *(_QWORD *)(a1 + OBJC_IVAR____TtC14softposreaderd12RemotePrimer_instance + 32);
  sub_100005EF8((_QWORD *)(a1 + OBJC_IVAR____TtC14softposreaderd12RemotePrimer_instance), v10);
  v12 = objc_msgSend((id)objc_opt_self(NSXPCConnection), "currentConnection");
  if (!v12)
  {
    _Block_release(v27);
    __break(1u);
    goto LABEL_8;
  }
  v13 = v12;
  v14 = objc_msgSend(v12, "userInfo");

  if (!v14)
  {
LABEL_8:
    _Block_release(v27);
    __break(1u);
    return;
  }
  v15 = type metadata accessor for ClientInfo(0);
  v16 = swift_dynamicCastClassUnconditional(v14, v15, 0, 0, 0);
  sub_100007A5C(v16 + OBJC_IVAR____TtC14softposreaderd10ClientInfo_clientID, (uint64_t)v9);
  if (swift_getEnumCaseMultiPayload(v9, v7) == 1)
  {
    v17 = (*(uint64_t (**)(char *, _QWORD *, uint64_t))(v4 + 32))(v6, v9, v3);
    v18 = UUID.uuidString.getter(v17);
    v20 = v19;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_unknownObjectRelease(v14);
  }
  else
  {
    v21 = v9[1];
    v31[0] = *v9;
    v31[1] = v21;
    v29[0] = 95;
    v29[1] = 0xE100000000000000;
    v28[0] = 45;
    v28[1] = 0xE100000000000000;
    v22 = sub_1000095D0();
    v18 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v29, v28, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v22, v22, v22);
    v20 = v23;
    swift_unknownObjectRelease(v14);
    swift_bridgeObjectRelease(v21);
  }
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 48))(v32, v18, v20, v10, v11);
  swift_bridgeObjectRelease(v20);
  sub_100008390((uint64_t)v32, (uint64_t)v31);
  v24 = (objc_class *)type metadata accessor for RemoteSecureChannel();
  v25 = objc_allocWithZone(v24);
  sub_100008390((uint64_t)v31, (uint64_t)v25 + OBJC_IVAR____TtC14softposreaderd19RemoteSecureChannel_instance);
  v30.receiver = v25;
  v30.super_class = v24;
  v26 = objc_msgSendSuper2(&v30, "init");
  sub_100005D3C(v31);
  (*((void (**)(const void *, id, _QWORD))v27 + 2))(v27, v26, 0);

  sub_100005D3C(v32);
}

unint64_t sub_1000095D0()
{
  unint64_t result;

  result = qword_1001B12C0;
  if (!qword_1001B12C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1001B12C0);
  }
  return result;
}

id sub_10000967C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RemoteProvider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RemoteProvider()
{
  return objc_opt_self(_TtC14softposreaderd14RemoteProvider);
}

void sub_1000096DC(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  objc_class *v11;
  id v12;
  id v13;
  objc_super v14;
  _QWORD v15[6];

  v4 = objc_msgSend((id)objc_opt_self(NSXPCConnection), "currentConnection");
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(v4, "userInfo");

    if (v6)
    {
      v7 = type metadata accessor for ClientInfo(0);
      swift_dynamicCastClassUnconditional(v6, v7, 0, 0, 0);
      sub_10000720C(2, 0xD000000000000019, 0x8000000100165170);
      swift_unknownObjectRelease(v6);
      v8 = (_QWORD *)(a1 + OBJC_IVAR____TtC14softposreaderd14RemoteProvider_instance);
      v9 = *(_QWORD *)(a1 + OBJC_IVAR____TtC14softposreaderd14RemoteProvider_instance + 24);
      v10 = v8[4];
      sub_100005EF8(v8, v9);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v10 + 8))(v15, v9, v10);
      v11 = (objc_class *)type metadata accessor for RemoteConfigurator();
      v12 = objc_allocWithZone(v11);
      sub_100008390((uint64_t)v15, (uint64_t)v12 + OBJC_IVAR____TtC14softposreaderd18RemoteConfigurator_instance);
      v14.receiver = v12;
      v14.super_class = v11;
      v13 = objc_msgSendSuper2(&v14, "init");
      sub_100005D3C(v15);
      (*(void (**)(uint64_t, id, _QWORD))(a2 + 16))(a2, v13, 0);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_1000098A0(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  objc_class *v11;
  id v12;
  id v13;
  objc_super v14;
  _QWORD v15[6];

  v4 = objc_msgSend((id)objc_opt_self(NSXPCConnection), "currentConnection");
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(v4, "userInfo");

    if (v6)
    {
      v7 = type metadata accessor for ClientInfo(0);
      swift_dynamicCastClassUnconditional(v6, v7, 0, 0, 0);
      sub_10000720C(2, 0xD000000000000014, 0x8000000100165150);
      swift_unknownObjectRelease(v6);
      v8 = (_QWORD *)(a1 + OBJC_IVAR____TtC14softposreaderd14RemoteProvider_instance);
      v9 = *(_QWORD *)(a1 + OBJC_IVAR____TtC14softposreaderd14RemoteProvider_instance + 24);
      v10 = v8[4];
      sub_100005EF8(v8, v9);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v10 + 16))(v15, v9, v10);
      v11 = (objc_class *)type metadata accessor for RemoteMonitor();
      v12 = objc_allocWithZone(v11);
      sub_100008390((uint64_t)v15, (uint64_t)v12 + OBJC_IVAR____TtC14softposreaderd13RemoteMonitor_instance);
      v14.receiver = v12;
      v14.super_class = v11;
      v13 = objc_msgSendSuper2(&v14, "init");
      sub_100005D3C(v15);
      (*(void (**)(uint64_t, id, _QWORD))(a2 + 16))(a2, v13, 0);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_100009A64(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  objc_class *v11;
  id v12;
  id v13;
  objc_super v14;
  _QWORD v15[6];

  v4 = objc_msgSend((id)objc_opt_self(NSXPCConnection), "currentConnection");
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(v4, "userInfo");

    if (v6)
    {
      v7 = type metadata accessor for ClientInfo(0);
      swift_dynamicCastClassUnconditional(v6, v7, 0, 0, 0);
      sub_10000720C(2, 0xD000000000000013, 0x8000000100165130);
      swift_unknownObjectRelease(v6);
      v8 = (_QWORD *)(a1 + OBJC_IVAR____TtC14softposreaderd14RemoteProvider_instance);
      v9 = *(_QWORD *)(a1 + OBJC_IVAR____TtC14softposreaderd14RemoteProvider_instance + 24);
      v10 = v8[4];
      sub_100005EF8(v8, v9);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v10 + 24))(v15, v9, v10);
      v11 = (objc_class *)type metadata accessor for RemoteReader();
      v12 = objc_allocWithZone(v11);
      sub_100008390((uint64_t)v15, (uint64_t)v12 + OBJC_IVAR____TtC14softposreaderd12RemoteReader_instance);
      v14.receiver = v12;
      v14.super_class = v11;
      v13 = objc_msgSendSuper2(&v14, "init");
      sub_100005D3C(v15);
      (*(void (**)(uint64_t, id, _QWORD))(a2 + 16))(a2, v13, 0);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_100009C28(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  objc_class *v11;
  char *v12;
  id v13;
  objc_super v14;
  _QWORD v15[6];

  v4 = objc_msgSend((id)objc_opt_self(NSXPCConnection), "currentConnection");
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(v4, "userInfo");

    if (v6)
    {
      v7 = type metadata accessor for ClientInfo(0);
      swift_dynamicCastClassUnconditional(v6, v7, 0, 0, 0);
      sub_10000720C(2, 0xD00000000000001ALL, 0x8000000100165110);
      swift_unknownObjectRelease(v6);
      v8 = (_QWORD *)(a1 + OBJC_IVAR____TtC14softposreaderd14RemoteProvider_instance);
      v9 = *(_QWORD *)(a1 + OBJC_IVAR____TtC14softposreaderd14RemoteProvider_instance + 24);
      v10 = v8[4];
      sub_100005EF8(v8, v9);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v10 + 32))(v15, v9, v10);
      v11 = (objc_class *)type metadata accessor for RemotePINController();
      v12 = (char *)objc_allocWithZone(v11);
      *(_QWORD *)&v12[OBJC_IVAR____TtC14softposreaderd19RemotePINController_captureInProgress] = 0;
      sub_100008390((uint64_t)v15, (uint64_t)&v12[OBJC_IVAR____TtC14softposreaderd19RemotePINController_instance]);
      v14.receiver = v12;
      v14.super_class = v11;
      v13 = objc_msgSendSuper2(&v14, "init");
      sub_100005D3C(v15);
      (*(void (**)(uint64_t, id, _QWORD))(a2 + 16))(a2, v13, 0);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_100009DFC(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  objc_class *v11;
  id v12;
  id v13;
  objc_super v14;
  _QWORD v15[6];

  v4 = objc_msgSend((id)objc_opt_self(NSXPCConnection), "currentConnection");
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(v4, "userInfo");

    if (v6)
    {
      v7 = type metadata accessor for ClientInfo(0);
      swift_dynamicCastClassUnconditional(v6, v7, 0, 0, 0);
      sub_10000720C(1, 0xD000000000000018, 0x80000001001650F0);
      swift_unknownObjectRelease(v6);
      v8 = (_QWORD *)(a1 + OBJC_IVAR____TtC14softposreaderd14RemoteProvider_instance);
      v9 = *(_QWORD *)(a1 + OBJC_IVAR____TtC14softposreaderd14RemoteProvider_instance + 24);
      v10 = v8[4];
      sub_100005EF8(v8, v9);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v10 + 40))(v15, v9, v10);
      v11 = (objc_class *)type metadata accessor for RemoteOasisRreader();
      v12 = objc_allocWithZone(v11);
      sub_100008390((uint64_t)v15, (uint64_t)v12 + OBJC_IVAR____TtC14softposreaderd18RemoteOasisRreader_instance);
      v14.receiver = v12;
      v14.super_class = v11;
      v13 = objc_msgSendSuper2(&v14, "init");
      sub_100005D3C(v15);
      (*(void (**)(uint64_t, id, _QWORD))(a2 + 16))(a2, v13, 0);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

id sub_10000A914()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RemoteReader();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RemoteReader()
{
  return objc_opt_self(_TtC14softposreaderd12RemoteReader);
}

unint64_t sub_10000A974()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001ACC08;
  if (!qword_1001ACC08)
  {
    v1 = objc_opt_self(SPRTransactionDigest);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001ACC08);
  }
  return result;
}

uint64_t sub_10000A9B0(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100005DE0(result, a2);
  return result;
}

uint64_t sub_10000A9C4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

id SPRRemoteService.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

uint64_t sub_10000AA08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001ACC10);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001ACC10);
  v2 = SPRLogger.xpcServer.unsafeMutableAddressor();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_10000AC70()
{
  return sub_10000AD64(type metadata accessor for RemoteService);
}

Swift::Bool __swiftcall SPRRemoteService.listener(_:shouldAcceptNewConnection:)(NSXPCListener _, NSXPCConnection shouldAcceptNewConnection)
{
  return sub_10000C5EC(shouldAcceptNewConnection.super.isa);
}

id SPRRemoteService.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SPRRemoteService();
  return objc_msgSendSuper2(&v2, "init");
}

id sub_10000AD1C(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  objc_super v4;

  v4.receiver = a1;
  v4.super_class = (Class)a3();
  return objc_msgSendSuper2(&v4, "init");
}

id SPRRemoteService.__deallocating_deinit()
{
  return sub_10000AD64(type metadata accessor for SPRRemoteService);
}

id sub_10000AD64(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

unint64_t sub_10000AD94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_10000AE28(a1, v4);
}

unint64_t sub_10000ADC4(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  String.hash(into:)(v6, a1, a2);
  v4 = Hasher._finalize()();
  return sub_10000AEEC(a1, a2, v4);
}

unint64_t sub_10000AE28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_10000CA70(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_10000CAAC((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_10000AEEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

Swift::Int sub_10000AFCC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003A2C((uint64_t *)&unk_1001ACD40);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v42 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v40 = v3;
  v41 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }
    v24 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v41)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v42 + 8 * v24);
    ++v14;
    if (!v26)
    {
      v14 = v24 + 1;
      if (v24 + 1 >= v41)
        goto LABEL_36;
      v26 = *(_QWORD *)(v42 + 8 * v14);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v5);
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v14 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v14 >= v41)
              goto LABEL_36;
            v26 = *(_QWORD *)(v42 + 8 * v14);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v14 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    v32 = 16 * v23;
    v33 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v32);
    v35 = *v33;
    v34 = v33[1];
    v36 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v32);
    v37 = *v36;
    v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v33[1]);
      swift_bridgeObjectRetain(v38);
    }
    Hasher.init(_seed:)(v44);
    String.hash(into:)(v44, v35, v34);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v17 == v29;
        if (v17 == v29)
          v17 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 16 * v18;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
    *v20 = v35;
    v20[1] = v34;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 56) + v19);
    *v21 = v37;
    v21[1] = v38;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v40;
  v25 = (_QWORD *)(v5 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_10000B2F0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  _QWORD v37[9];
  _OWORD v38[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003A2C(&qword_1001AC668);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain(v5);
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v14 << 6);
      }
      else
      {
        v19 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        if (v19 >= v35)
          goto LABEL_37;
        v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          v14 = v19 + 1;
          if (v19 + 1 >= v35)
            goto LABEL_37;
          v20 = v36[v14];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              v3 = v34;
              if ((a2 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                v14 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_44;
                if (v14 >= v35)
                  goto LABEL_37;
                v20 = v36[v14];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v14 = v21;
          }
        }
LABEL_24:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }
      v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
      v24 = *v22;
      v23 = v22[1];
      v25 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
      {
        sub_100005D2C(v25, v38);
      }
      else
      {
        sub_100005D5C((uint64_t)v25, (uint64_t)v38);
        swift_bridgeObjectRetain(v23);
      }
      Hasher.init(_seed:)(v37);
      String.hash(into:)(v37, v24, v23);
      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
      *v16 = v24;
      v16[1] = v23;
      result = (uint64_t)sub_100005D2C(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_10000B5EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v6 = v5;
  v12 = *v5;
  v14 = sub_10000ADC4(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_10000B8F8();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = (_QWORD *)(v20[7] + 16 * v14);
      result = swift_bridgeObjectRelease(v21[1]);
      *v21 = a1;
      v21[1] = a2;
      return result;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v25 = (uint64_t *)(v20[6] + 16 * v14);
    *v25 = a3;
    v25[1] = a4;
    v26 = (_QWORD *)(v20[7] + 16 * v14);
    *v26 = a1;
    v26[1] = a2;
    v27 = v20[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      v20[2] = v29;
      return swift_bridgeObjectRetain(a4);
    }
    goto LABEL_14;
  }
  sub_10000AFCC(v17, a5 & 1);
  v23 = sub_10000ADC4(a3, a4);
  if ((v18 & 1) == (v24 & 1))
  {
    v14 = v23;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

_OWORD *sub_10000B760(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_10000ADC4(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(v18[7] + 32 * v12);
        sub_100005D3C(v19);
        return sub_100005D2C(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10000BAB0();
      goto LABEL_7;
    }
    sub_10000B2F0(v15, a4 & 1);
    v21 = sub_10000ADC4(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10000B890(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain(a3);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

_OWORD *sub_10000B890(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_100005D2C(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

void *sub_10000B8F8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  sub_100003A2C((uint64_t *)&unk_1001ACD40);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain(v18);
    result = (void *)swift_bridgeObjectRetain(v22);
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10000BAB0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  sub_100003A2C(&qword_1001AC668);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release(v2);
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_100005D5C(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_100005D2C(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_10000BC94(void (**a1)(_QWORD, _QWORD))
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  objc_class *v15;
  id v16;
  _BYTE *v17;
  id v18;
  uint64_t v19;
  objc_super v20;
  uint64_t v21[5];

  if (qword_1001AC650 != -1)
    swift_once(&qword_1001AC650, sub_10000AA08);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100003A14(v2, (uint64_t)qword_1001ACC10);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v21[0] = v7;
    *(_DWORD *)v6 = 136315138;
    v19 = sub_1000056EC(0xD000000000000019, 0x80000001001652F0, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v6 + 4, v6 + 12);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "RemoteService.%s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }

  v8 = objc_msgSend((id)objc_opt_self(NSXPCConnection), "currentConnection");
  if (v8)
  {
    v9 = v8;
    v10 = objc_msgSend(v8, "userInfo");

    if (v10)
    {
      v11 = type metadata accessor for ClientInfo(0);
      v12 = *(_QWORD *)(swift_dynamicCastClassUnconditional(v10, v11, 0, 0, 0)
                      + OBJC_IVAR____TtC14softposreaderd10ClientInfo_clientType);
      swift_unknownObjectRelease(v10);
      v13 = (v12 >> 1) & 1;
      v14 = *Primer.shared.unsafeMutableAddressor();
      v21[3] = type metadata accessor for Primer();
      v21[4] = (uint64_t)&protocol witness table for Primer;
      v21[0] = v14;
      v15 = (objc_class *)type metadata accessor for RemotePrimer();
      v16 = objc_allocWithZone(v15);
      swift_retain_n(v14, 2);
      v17 = v16;
      sub_1000E7C7C(v13);
      sub_100008390((uint64_t)v21, (uint64_t)&v17[OBJC_IVAR____TtC14softposreaderd12RemotePrimer_instance]);
      v17[OBJC_IVAR____TtC14softposreaderd12RemotePrimer_isPOS] = v13;

      v20.receiver = v17;
      v20.super_class = v15;
      v18 = objc_msgSendSuper2(&v20, "init");
      sub_100005D3C(v21);
      swift_release(v14);
      ((void (**)(_QWORD, id))a1)[2](a1, v18);

      return;
    }
  }
  else
  {
    _Block_release(a1);
    __break(1u);
  }
  _Block_release(a1);
  __break(1u);
}

void sub_10000BF78(uint64_t a1, void (**a2)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  const char *v18;
  unint64_t v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  _TtC14softposreaderd12RemoteReader *v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  id v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  unsigned __int8 v51;
  uint64_t v52;
  _TtC14softposreaderd12RemoteReader *v53;
  _TtC14softposreaderd12RemoteReader *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char v59;
  _TtC14softposreaderd12RemoteReader *v60;
  char v61;
  SEL v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  const char *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  char isUniquelyReferenced_nonNull_native;
  SEL v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  unint64_t v84;
  objc_class *v85;
  id v86;
  _BYTE *v87;
  id v88;
  _TtC14softposreaderd12RemoteReader *v89;
  Class isa;
  SEL v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  _TtC14softposreaderd12RemoteReader *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  void (**v103)(_QWORD, _QWORD, _QWORD, _QWORD);
  objc_super v104;
  __int128 v105;
  void *v106;
  _UNKNOWN **v107;
  unint64_t v108;
  _OWORD v109[3];
  Swift::OpaquePointer_optional v110;

  v4 = type metadata accessor for Settings(0);
  v101 = *(_QWORD *)(v4 - 8);
  v102 = v4;
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v98 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v98 - v8;
  if (qword_1001AC650 != -1)
    swift_once(&qword_1001AC650, sub_10000AA08);
  v10 = type metadata accessor for Logger(0);
  sub_100003A14(v10, (uint64_t)qword_1001ACC10);
  v11 = swift_bridgeObjectRetain_n(a1, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(22, -1);
    v99 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v105 = v99;
    *(_DWORD *)v14 = 136315394;
    *(_QWORD *)&v109[0] = sub_1000056EC(0xD000000000000021, 0x80000001001652A0, (uint64_t *)&v105);
    v100 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v109, (char *)v109 + 8, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2080;
    v15 = swift_bridgeObjectRetain();
    v103 = a2;
    v16 = Dictionary.description.getter(v15, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    v17 = v7;
    v19 = (unint64_t)v18;
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, v18, v20, v21, v22, v23, v24, v25);
    *(_QWORD *)&v109[0] = sub_1000056EC(v16, v19, (uint64_t *)&v105);
    v9 = v100;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v109, (char *)v109 + 8, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease_n(a1, 2);
    v26 = (_TtC14softposreaderd12RemoteReader *)v19;
    v7 = v17;
    swift_bridgeObjectRelease(v26, v27, v28, v29, v30, v31, v32, v33);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "RemoteService.%s configuration: %s", (uint8_t *)v14, 0x16u);
    v34 = v99;
    a2 = v103;
    swift_arrayDestroy(v99, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
  v35 = objc_msgSend((id)objc_opt_self(NSXPCConnection), "currentConnection");
  if (v35)
  {
    v36 = v35;
    v37 = objc_msgSend(v35, "userInfo");

    if (v37)
    {
      v38 = type metadata accessor for ClientInfo(0);
      v39 = swift_dynamicCastClassUnconditional(v37, v38, 0, 0, 0);
      sub_100006F58(1, 0xD000000000000021, 0x80000001001652A0);
      v40 = *(_QWORD *)(v39 + OBJC_IVAR____TtC14softposreaderd10ClientInfo_clientType);
      v110.value._rawValue = (void *)swift_bridgeObjectRetain();
      Settings.init(dictionary:)(v110);
      if (v41)
      {
        swift_unknownObjectRelease(v37);
        swift_errorRetain();
        v42 = (void *)_convertErrorToNSError(_:)(v41);
        ((void (**)(_QWORD, _QWORD, _QWORD, void *))a2)[2](a2, 0, 0, v42);

        swift_errorRelease();
        swift_errorRelease();
        return;
      }
      v99 = v40 & 2;
      v43 = type metadata accessor for Primer();
      v44 = *(void (**)(char *, char *, uint64_t))(v101 + 16);
      v100 = v9;
      v44(v7, v9, v102);
      v45 = (void *)v43;
      v46 = Primer.__allocating_init(settings:)((uint64_t)v7);
      v47 = (*(uint64_t (**)(void))(*(_QWORD *)v46 + 144))();
      v49 = v48;
      v51 = v50;
      v52 = StorageSetting.description.getter(v47, v48, v50);
      v54 = v53;
      sub_10000CA58(v47, v49, v51);
      v55 = sub_1000047FC((uint64_t)&_swiftEmptyArrayStorage);
      v56 = *(_QWORD *)(a1 + 16);
      v103 = a2;
      if (v56)
      {
        v57 = v55;
        v58 = sub_10000ADC4(0xD000000000000015, 0x80000001001652D0);
        if ((v59 & 1) != 0)
        {
          sub_100005D5C(*(_QWORD *)(a1 + 56) + 32 * v58, (uint64_t)&v105);
          if (swift_dynamicCast(v109, &v105, (char *)&type metadata for Any + 8, &type metadata for String, 6))
          {
            v60 = (_TtC14softposreaderd12RemoteReader *)*((_QWORD *)&v109[0] + 1);
            if (v109[0] == __PAIR128__((unint64_t)v54, v52))
            {
              swift_bridgeObjectRelease_n(v54, 2);
              v98 = (_TtC14softposreaderd12RemoteReader *)v57;
LABEL_18:
              v84 = v99;
              v106 = v45;
              v107 = &protocol witness table for Primer;
              *(_QWORD *)&v105 = v46;
              v85 = (objc_class *)type metadata accessor for RemotePrimer();
              v86 = objc_allocWithZone(v85);
              swift_retain();
              v87 = v86;
              sub_1000E7C7C(v84 != 0);
              sub_100008390((uint64_t)&v105, (uint64_t)&v87[OBJC_IVAR____TtC14softposreaderd12RemotePrimer_instance]);
              v87[OBJC_IVAR____TtC14softposreaderd12RemotePrimer_isPOS] = v84 >> 1;

              v104.receiver = v87;
              v104.super_class = v85;
              v88 = objc_msgSendSuper2(&v104, "init");
              sub_100005D3C(&v105);
              v89 = v98;
              isa = Dictionary._bridgeToObjectiveC()().super.isa;
              ((void (**)(_QWORD, id, Class, _QWORD))v103)[2](v103, v88, isa, 0);
              swift_release(v46);
              swift_unknownObjectRelease(v37);

              swift_bridgeObjectRelease(v89, v91, v92, v93, v94, v95, v96, v97);
              (*(void (**)(char *, uint64_t))(v101 + 8))(v100, v102);
              return;
            }
            v61 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)&v109[0], *((_QWORD *)&v109[0] + 1), v52, v54, 0);
            swift_bridgeObjectRelease(v60, v62, v63, v64, v65, v66, v67, v68);
            v55 = v57;
            if ((v61 & 1) != 0)
            {
              swift_bridgeObjectRelease(v54, v69, v70, v71, v72, v73, v74, v75);
              v98 = (_TtC14softposreaderd12RemoteReader *)v57;
              goto LABEL_18;
            }
          }
        }
      }
      v106 = &type metadata for String;
      *(_QWORD *)&v105 = v52;
      *((_QWORD *)&v105 + 1) = v54;
      sub_100005D2C(&v105, v109);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v55);
      v108 = v55;
      sub_10000B760(v109, 0xD000000000000015, 0x80000001001652D0, isUniquelyReferenced_nonNull_native);
      v98 = (_TtC14softposreaderd12RemoteReader *)v108;
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)0x8000000000000000, v77, v78, v79, v80, v81, v82, v83);
      goto LABEL_18;
    }
  }
  else
  {
    _Block_release(a2);
    __break(1u);
  }
  _Block_release(a2);
  __break(1u);
}

uint64_t sub_10000C5EC(void *a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  id v12;
  uint64_t v13;
  _TtC14softposreaderd12RemoteReader *v14;
  _TtC14softposreaderd12RemoteReader *v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[2];

  v2 = objc_msgSend((id)objc_opt_self(SPRServiceXPC), "interface");
  objc_msgSend(a1, "setExportedInterface:", v2);

  v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RemoteService()), "init");
  objc_msgSend(a1, "setExportedObject:", v3);

  v4 = objc_allocWithZone((Class)type metadata accessor for ClientInfo(0));
  v5 = a1;
  v6 = sub_100006A4C(v5);
  if (qword_1001AC650 != -1)
    swift_once(&qword_1001AC650, sub_10000AA08);
  v7 = type metadata accessor for Logger(0);
  sub_100003A14(v7, (uint64_t)qword_1001ACC10);
  v8 = v6;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    v26[0] = v24;
    *(_DWORD *)v11 = 136315138;
    v12 = objc_msgSend(v8, "debugDescription");
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v15 = v14;

    v25 = sub_1000056EC(v13, (unint64_t)v15, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v11 + 4, v11 + 12);

    swift_bridgeObjectRelease(v15, v16, v17, v18, v19, v20, v21, v22);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "SPRRemoteService new client information: %s", v11, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

  }
  objc_msgSend(v5, "setUserInfo:", v8);
  objc_msgSend(v5, "resume");

  return 1;
}

uint64_t type metadata accessor for SPRRemoteService()
{
  return objc_opt_self(_TtC14softposreaderd16SPRRemoteService);
}

uint64_t type metadata accessor for RemoteService()
{
  return objc_opt_self(_TtC14softposreaderd13RemoteService);
}

uint64_t sub_10000CA58(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t sub_10000CA70(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_10000CAAC(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

id sub_10000CBD8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RemoteSecureChannel();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RemoteSecureChannel()
{
  return objc_opt_self(_TtC14softposreaderd19RemoteSecureChannel);
}

uint64_t sub_10000CC38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Class isa;
  _BYTE v21[16];

  v6 = sub_100003A2C(&qword_1001ACE40);
  v7 = __chkstk_darwin(v6);
  v8 = __chkstk_darwin(v7);
  v9 = __chkstk_darwin(v8);
  v11 = &v21[-v10];
  __chkstk_darwin(v9);
  v13 = &v21[-v12];
  v14 = (_QWORD *)(a2 + OBJC_IVAR____TtC14softposreaderd19RemoteSecureChannel_instance);
  v15 = *(_QWORD *)(a2 + OBJC_IVAR____TtC14softposreaderd19RemoteSecureChannel_instance + 24);
  v16 = v14[4];
  sub_100005EF8(v14, v15);
  SecureChannelProtocol.securingRequest(_:contentType:)(a1, 0, v15, v16);
  v17 = type metadata accessor for URLRequest(0);
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v13, 0, 1, v17);
  sub_10000CE90((uint64_t)v13, (uint64_t)v11);
  isa = 0;
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v18 + 48))(v11, 1, v17) != 1)
  {
    isa = URLRequest._bridgeToObjectiveC()().super.isa;
    (*(void (**)(_BYTE *, uint64_t))(v18 + 8))(v11, v17);
  }
  (*(void (**)(uint64_t, Class, _QWORD))(a3 + 16))(a3, isa, 0);

  return sub_10000CED8((uint64_t)v13);
}

uint64_t sub_10000CE90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003A2C(&qword_1001ACE40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000CED8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003A2C(&qword_1001ACE40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000CF18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001ACE50);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001ACE50);
  if (qword_1001AD140 != -1)
    swift_once(&qword_1001AD140, sub_1000CC2E4);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4DB0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_10000CFA8(char *a1@<X8>)
{
  uint64_t v1;
  _TtC14softposreaderd12RemoteReader *v3;
  const char *v4;
  _TtC14softposreaderd12RemoteReader *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  char v16;
  _TtC14softposreaderd12RemoteReader *v17;
  _TtC14softposreaderd12RemoteReader *v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  os_log_type_t v35;
  uint8_t *v36;

  v3 = sub_10000E594();
  if (v1)
  {
    if (qword_1001ACE48 != -1)
      swift_once(&qword_1001ACE48, sub_10000CF18);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_100003A14(v11, (uint64_t)qword_1001ACE50);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "certificates are revoked", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }
    swift_errorRelease();
    v16 = 1;
  }
  else
  {
    v17 = v3;
    v18 = (_TtC14softposreaderd12RemoteReader *)v4;
    swift_bridgeObjectRelease(v5, v4, v5, v6, v7, v8, v9, v10);
    swift_bridgeObjectRelease(v18, v19, v20, v21, v22, v23, v24, v25);
    swift_bridgeObjectRelease(v17, v26, v27, v28, v29, v30, v31, v32);
    if (qword_1001ACE48 != -1)
      swift_once(&qword_1001ACE48, sub_10000CF18);
    v33 = type metadata accessor for Logger(0);
    v34 = sub_100003A14(v33, (uint64_t)qword_1001ACE50);
    v13 = Logger.logObject.getter(v34);
    v35 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v35, "certificates are not revoked", v36, 2u);
      swift_slowDealloc(v36, -1, -1);
    }
    v16 = 0;
  }

  *a1 = v16;
}

void sub_10000D178(uint64_t a1@<X0>, BOOL *a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  _TtC14softposreaderd12RemoteReader *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (**v26)();
  uint64_t v27;
  BOOL *v28;
  _TtC14softposreaderd12RemoteReader *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  const char *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  _TtC14softposreaderd12RemoteReader *v41;
  int64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  _TtC14softposreaderd12RemoteReader *v46;
  unint64_t v47;
  unint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  _QWORD *v56;
  char *v57;
  SEL v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  uint64_t (*v65)(char *, uint64_t, uint64_t);
  int v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  unint64_t v74;
  _BYTE *v75;
  void (*v76)(char *, char *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v84;
  unint64_t v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  uint8_t *v91;
  _TtC14softposreaderd12RemoteReader **v92;
  _TtC14softposreaderd12RemoteReader *v93;
  uint64_t v94;
  BOOL v95;
  char *v96;
  double v97;
  void (*v98)(char *, uint64_t);
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  BOOL *v107;
  uint64_t v108;
  uint64_t v109;
  char v110[40];
  _TtC14softposreaderd12RemoteReader *v111;
  uint64_t v112;

  v107 = a2;
  v6 = sub_100003A2C(&qword_1001AD9E0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v99 - v10;
  v13 = type metadata accessor for Date(0, v12);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v99 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v99 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v99 - v21;
  v23 = sub_10000E594();
  v26 = &off_1001AC000;
  if (v3)
  {
    v27 = v3;
    v28 = v107;
  }
  else
  {
    v29 = v23;
    v102 = v13;
    v103 = v11;
    v104 = 0;
    v105 = a1;
    v100 = v17;
    v101 = v9;
    v108 = v14;
    v106 = v22;
    v30 = v25;
    v31 = v24;
    v32 = sub_100003A2C(&qword_1001AD9E8);
    inited = swift_initStackObject(v32, v110);
    *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
    *(_QWORD *)(inited + 32) = v29;
    v111 = (_TtC14softposreaderd12RemoteReader *)inited;
    sub_100014EA4(v31);
    sub_100014EA4(v30);
    v41 = v111;
    v42 = *(_QWORD *)&v111->instance[8];
    if (v42)
    {
      v43 = v102;
      v111 = &_swiftEmptyArrayStorage;
      sub_100091C7C(0, v42, 0);
      v45 = 0;
      v46 = v111;
      do
      {
        v109 = *(_QWORD *)&v41->instance[8 * v45 + 24];
        sub_10000D848(&v109, (uint64_t)v44, (uint64_t)v20);
        v111 = v46;
        v48 = *(_QWORD *)&v46->instance[8];
        v47 = *(_QWORD *)&v46->instance[16];
        if (v48 >= v47 >> 1)
        {
          sub_100091C7C(v47 > 1, v48 + 1, 1);
          v46 = v111;
        }
        ++v45;
        *(_QWORD *)&v46->instance[8] = v48 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v108 + 32))((unint64_t)v46+ ((*(unsigned __int8 *)(v108 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80))+ *(_QWORD *)(v108 + 72) * v48, v20, v43);
      }
      while (v42 != v45);
      swift_bridgeObjectRelease(v41, v44, v49, v50, v51, v52, v53, v54);
      v55 = v43;
      v28 = v107;
      v56 = (_QWORD *)v108;
    }
    else
    {
      swift_bridgeObjectRelease(v111, v34, v35, v36, v37, v38, v39, v40);
      v46 = &_swiftEmptyArrayStorage;
      v28 = v107;
      v56 = (_QWORD *)v108;
      v55 = v102;
    }
    v57 = v103;
    sub_10000DCC0((uint64_t)v46, v103);
    swift_bridgeObjectRelease(v46, v58, v59, v60, v61, v62, v63, v64);
    v65 = (uint64_t (*)(char *, uint64_t, uint64_t))v56[6];
    v66 = v65(v57, 1, v55);
    v67 = v105;
    v68 = v106;
    if (v66 == 1)
    {
      sub_10001A448((uint64_t)v57);
      if (qword_1001ACE48 != -1)
        swift_once(&qword_1001ACE48, sub_10000CF18);
      v69 = type metadata accessor for Logger(0);
      v70 = sub_100003A14(v69, (uint64_t)qword_1001ACE50);
      v71 = Logger.logObject.getter(v70);
      v72 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v71, v72))
      {
        v73 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v73 = 0;
        _os_log_impl((void *)&_mh_execute_header, v71, v72, "Could not get the minimum expiration date", v73, 2u);
        swift_slowDealloc(v73, -1, -1);
      }

      v74 = sub_10001A488();
      v27 = swift_allocError(&type metadata for CertificateManagerError, v74, 0, 0);
      *v75 = 5;
      swift_willThrow(v27);
    }
    else
    {
      v76 = (void (*)(char *, char *, uint64_t))v56[4];
      v76(v106, v57, v55);
      sub_100005EF8((_QWORD *)(v67 + 72), *(_QWORD *)(v67 + 96));
      v77 = (uint64_t)v101;
      sub_10001E61C((uint64_t)v101);
      v78 = v77;
      if (v65((char *)v77, 1, v55) != 1)
      {
        v96 = v100;
        v76(v100, (char *)v78, v55);
        v97 = Date.timeIntervalSince(_:)(v96);
        v98 = (void (*)(char *, uint64_t))v56[1];
        v98(v96, v55);
        v98(v68, v55);
        v95 = v97 > a3;
        goto LABEL_29;
      }
      sub_10001A448(v77);
      if (qword_1001ACE48 != -1)
        swift_once(&qword_1001ACE48, sub_10000CF18);
      v79 = v55;
      v80 = type metadata accessor for Logger(0);
      v81 = sub_100003A14(v80, (uint64_t)qword_1001ACE50);
      v82 = Logger.logObject.getter(v81);
      v83 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v82, v83))
      {
        v84 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v84 = 0;
        _os_log_impl((void *)&_mh_execute_header, v82, v83, "Could not calculate secure now", v84, 2u);
        swift_slowDealloc(v84, -1, -1);
      }

      v85 = sub_10001A488();
      v27 = swift_allocError(&type metadata for CertificateManagerError, v85, 0, 0);
      *v86 = 6;
      swift_willThrow(v27);
      ((void (*)(char *, uint64_t))v56[1])(v68, v79);
    }
    v26 = &off_1001AC000;
  }
  if (v26[457] != (uint64_t (*)())-1)
    swift_once(&qword_1001ACE48, sub_10000CF18);
  v87 = type metadata accessor for Logger(0);
  sub_100003A14(v87, (uint64_t)qword_1001ACE50);
  swift_errorRetain();
  v88 = swift_errorRetain();
  v89 = Logger.logObject.getter(v88);
  v90 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v89, v90))
  {
    v91 = (uint8_t *)swift_slowAlloc(12, -1);
    v92 = (_TtC14softposreaderd12RemoteReader **)swift_slowAlloc(8, -1);
    *(_DWORD *)v91 = 138412290;
    swift_errorRetain();
    v93 = (_TtC14softposreaderd12RemoteReader *)_swift_stdlib_bridgeErrorToNSError(v27);
    v111 = v93;
    v28 = v107;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112, v91 + 4, v91 + 12);
    *v92 = v93;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v89, v90, "Certificate(s) invalid or not found: %@", v91, 0xCu);
    v94 = sub_100003A2C((uint64_t *)&unk_1001AE430);
    swift_arrayDestroy(v92, 1, v94);
    swift_slowDealloc(v92, -1, -1);
    swift_slowDealloc(v91, -1, -1);

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

  }
  v95 = 0;
LABEL_29:
  *v28 = v95;
}

void sub_10000D848(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _TtC14softposreaderd12RemoteReader **v3;
  _TtC14softposreaderd12RemoteReader **v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id i;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _TtC14softposreaderd12RemoteReader *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  const char *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  const char *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  void *v48;
  CFStringRef v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  _TtC14softposreaderd12RemoteReader *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  _TtC14softposreaderd12RemoteReader *v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  SEL v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  os_log_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  os_log_t v83;
  uint64_t v84;
  int v85;
  _TtC14softposreaderd12RemoteReader **v86;
  char *v87;
  uint64_t v88;
  _TtC14softposreaderd12RemoteReader *v89;
  uint64_t v90;

  v4 = v3;
  v7 = type metadata accessor for Date(0, a2);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v88 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v87 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  if ((v13 & 0xC000000000000001) != 0)
    goto LABEL_19;
  if (!*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_21;
  }
  for (i = *(id *)(v13 + 32); ; i = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v13))
  {
    v15 = i;
    v86 = v4;
    SecCertificateNotValidAfter(i);

    Date.init(timeIntervalSinceReferenceDate:)(v16);
    if (qword_1001ACE48 != -1)
LABEL_21:
      swift_once(&qword_1001ACE48, sub_10000CF18);
    v17 = sub_100003A14(v11, (uint64_t)qword_1001ACE50);
    v18 = v87;
    v19 = v88;
    (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v87, v17, v11);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a3, v7);
    v20 = swift_bridgeObjectRetain_n(v13, 2);
    v21 = Logger.logObject.getter(v20);
    v85 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v21, (os_log_type_t)v85))
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);

      swift_bridgeObjectRelease_n(v13, 2);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v18, v11);
      return;
    }
    v83 = v21;
    v84 = v11;
    a3 = swift_slowAlloc(22, -1);
    v82 = swift_slowAlloc(64, -1);
    v90 = v82;
    *(_DWORD *)a3 = 136315394;
    v11 = a3 + 4;
    v22 = sub_100005F1C((unint64_t *)&qword_1001ADA00, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v7, v22);
    v25 = (_TtC14softposreaderd12RemoteReader *)v24;
    v89 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(v23, v24, &v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90, a3 + 4, a3 + 12);
    swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    *(_WORD *)(a3 + 12) = 2080;
    if ((unint64_t)v13 >> 62)
      break;
    v7 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v7)
      goto LABEL_26;
LABEL_8:
    v89 = &_swiftEmptyArrayStorage;
    v4 = &v89;
    specialized ContiguousArray.reserveCapacity(_:)(v7);
    if (v7 < 0)
    {
      __break(1u);
LABEL_29:
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v13, v40, v41, v42, v43, v44, v45, v46);
      __break(1u);
      return;
    }
    v10 = 0;
    while ((char *)v7 != v10)
    {
      if ((v13 & 0xC000000000000001) != 0)
        v47 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v13);
      else
        v47 = *(id *)(v13 + 8 * (_QWORD)v10 + 32);
      v48 = v47;
      v49 = CFCopyDescription(v47);
      if (!v49)
        goto LABEL_29;
      v11 = (uint64_t)v49;
      ++v10;

      v4 = &v89;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v50);
      v51 = *(_QWORD *)&v89->instance[8];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v51);
      v52 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v51, v11);
      specialized ContiguousArray._endMutation()(v52);
      if ((char *)v7 == v10)
      {
        v60 = v89;
        swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v13, v53, v54, v55, v56, v57, v58, v59);
        goto LABEL_27;
      }
    }
    __break(1u);
LABEL_19:
    ;
  }
  if (v13 < 0)
    v61 = v13;
  else
    v61 = v13 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter(v61);
  if (v7)
    goto LABEL_8;
LABEL_26:
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v13, v33, v34, v35, v36, v37, v38, v39);
  v60 = &_swiftEmptyArrayStorage;
LABEL_27:
  type metadata accessor for CFString(0);
  v63 = Array.description.getter(v60, v62);
  v65 = (_TtC14softposreaderd12RemoteReader *)v64;
  swift_bridgeObjectRelease(v60, v64, v66, v67, v68, v69, v70, v71);
  v89 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(v63, (unint64_t)v65, &v90);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90, a3 + 14, a3 + 22);
  swift_bridgeObjectRelease_n(v13, 2);
  swift_bridgeObjectRelease(v65, v72, v73, v74, v75, v76, v77, v78);
  v79 = v83;
  _os_log_impl((void *)&_mh_execute_header, v83, (os_log_type_t)v85, "Expiration date is: %s for certificate with description:\n%s", (uint8_t *)a3, 0x16u);
  v80 = v82;
  swift_arrayDestroy(v82, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v80, -1, -1);
  swift_slowDealloc(a3, -1, -1);

  (*(void (**)(char *, uint64_t))(v88 + 8))(v87, v84);
}

uint64_t sub_10000DCC0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  const char *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v34;
  uint64_t v35;
  char v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  char *v39;
  unint64_t v40;
  _TtC14softposreaderd12RemoteReader *v41;
  uint64_t v42;
  void (*v43)(char *, unint64_t, uint64_t);

  v4 = sub_100003A2C(&qword_1001AD9E0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v38 - v8;
  v11 = type metadata accessor for Date(0, v10);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v38 - v16;
  v18 = *(_QWORD *)(a1 + 16);
  if (!v18)
  {
    v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
    v19(v9, 1, 1, v11);
    goto LABEL_7;
  }
  v40 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v43 = *(void (**)(char *, unint64_t, uint64_t))(v12 + 16);
  v43(v9, a1 + v40, v11);
  v41 = (_TtC14softposreaderd12RemoteReader *)a1;
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  v19(v9, 0, 1, v11);
  v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v20(v9, 1, v11) == 1)
  {
LABEL_7:
    sub_10001A448((uint64_t)v9);
    v31 = a2;
    v32 = 1;
    return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v19)(v31, v32, 1, v11);
  }
  v39 = a2;
  v21 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v21(v17, v9, v11);
  swift_bridgeObjectRetain();
  v22 = v18 - 1;
  if (v22)
  {
    v42 = *(_QWORD *)(v12 + 72);
    v34 = (char *)v41 + v42 + v40;
    while (1)
    {
      v43(v7, (unint64_t)v34, v11);
      v19(v7, 0, 1, v11);
      if (v20(v7, 1, v11) == 1)
        break;
      v21(v15, v7, v11);
      v35 = sub_100005F1C(&qword_1001AD9F8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v36 = dispatch thunk of static Comparable.< infix(_:_:)(v15, v17, v11, v35);
      v37 = *(void (**)(char *, uint64_t))(v12 + 8);
      if ((v36 & 1) != 0)
      {
        v37(v17, v11);
        v21(v17, v15, v11);
      }
      else
      {
        v37(v15, v11);
      }
      v34 += v42;
      if (!--v22)
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    v19(v7, 1, 1, v11);
  }
  swift_bridgeObjectRelease(v41, v23, v24, v25, v26, v27, v28, v29);
  sub_10001A448((uint64_t)v7);
  v30 = v39;
  v21(v39, v17, v11);
  v31 = v30;
  v32 = 0;
  return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v19)(v31, v32, 1, v11);
}

void sub_10000DF98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _TtC14softposreaderd12RemoteReader *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _TtC14softposreaderd12RemoteReader *v12;
  uint64_t v13;
  uint64_t v14;
  _TtC14softposreaderd12RemoteReader *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  _TtC14softposreaderd12RemoteReader *v26;
  unint64_t v27;
  unint64_t v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  SEL v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  _QWORD v43[2];
  uint64_t v44;

  v4 = type metadata accessor for Date(0, a2);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (_TtC14softposreaderd12RemoteReader *)((char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v10 = (char *)v43 - v9;
  sub_1000108F4(v8, v11);
  if (!v2)
  {
    v15 = v12;
    v16 = v13;
    v17 = v14;
    v43[1] = a1;
    (*(void (**)(char *, _TtC14softposreaderd12RemoteReader *, uint64_t))(v5 + 32))(v10, v8, v4);
    v44 = v16;
    sub_100014EA4(v17);
    v18 = v44;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v26 = (_TtC14softposreaderd12RemoteReader *)v18;
    if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
      v26 = sub_10009104C(0, *(_QWORD *)(v18 + 16) + 1, 1, v18, v22, v23, v24, v25);
    v28 = *(_QWORD *)&v26->instance[8];
    v27 = *(_QWORD *)&v26->instance[16];
    if (v28 >= v27 >> 1)
      v26 = sub_10009104C((_TtC14softposreaderd12RemoteReader *)(v27 > 1), v28 + 1, 1, (uint64_t)v26, v22, v23, v24, v25);
    *(_QWORD *)&v26->instance[8] = v28 + 1;
    *(_QWORD *)&v26->instance[8 * v28 + 24] = v15;
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v18, v19, v20, v21, v22, v23, v24, v25);
    swift_bridgeObjectRelease(v15, v29, v30, v31, v32, v33, v34, v35);
    sub_10000F784(v10, (uint64_t)v26);
    swift_bridgeObjectRelease(v26, v36, v37, v38, v39, v40, v41, v42);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
}

void sub_10000E13C(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  sub_10000E870((const char *)0xC8, (void *)0x702D657275636573, (_TtC14softposreaderd12RemoteReader *)0xEE0064616F6C7961);
  if (!v1)
    *a1 = v3;
}

uint64_t sub_10000E18C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _TtC14softposreaderd12RemoteReader *v16;
  _QWORD aBlock[5];
  uint64_t v18;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v0 + 200);
  aBlock[4] = sub_10001A608;
  v18 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000043B8;
  aBlock[3] = &unk_1001999F8;
  v9 = _Block_copy(aBlock);
  v10 = swift_retain(v0);
  static DispatchQoS.unspecified.getter(v10);
  v16 = &_swiftEmptyArrayStorage;
  v11 = sub_100005F1C((unint64_t *)&qword_1001B1260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v12 = sub_100003A2C((uint64_t *)&unk_1001AE400);
  v13 = sub_100005F5C((unint64_t *)&qword_1001B1270, (uint64_t *)&unk_1001AE400);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v1, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v9);
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release(v18);
}

uint64_t sub_10000E358()
{
  return sub_10000F15C();
}

_TtC14softposreaderd12RemoteReader *sub_10000E594()
{
  _TtC14softposreaderd12RemoteReader *v0;
  _TtC14softposreaderd12RemoteReader *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _TtC14softposreaderd12RemoteReader *v7;
  _TtC14softposreaderd12RemoteReader *v8;
  const char *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _TtC14softposreaderd12RemoteReader *v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  const char *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  _TtC14softposreaderd12RemoteReader *v27;
  uint64_t v29;
  SEL v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  _TtC14softposreaderd12RemoteReader *v37;
  const char *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  _TtC14softposreaderd12RemoteReader *v45;
  unint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  SEL v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  SEL v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;

  v1 = v0;
  if (qword_1001ACE48 != -1)
    swift_once(&qword_1001ACE48, sub_10000CF18);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100003A14(v2, (uint64_t)qword_1001ACE50);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "loadAllValidCertificates()", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  sub_10000E870((const char *)0xC8, (void *)0x702D657275636573, (_TtC14softposreaderd12RemoteReader *)0xEE0064616F6C7961);
  if (!v0)
  {
    v1 = v7;
    v8 = sub_1000136C8(300, 7596553831663430000, 0xEE006E6F69746164);
    if (v8)
    {
      v16 = v8;
      if (*(_QWORD *)&v8->instance[8])
      {
        v29 = sub_10000E990((uint64_t)v8, (const char *)0x12C, (void *)0x696C61762D6E6970, (_TtC14softposreaderd12RemoteReader *)0xEE006E6F69746164);
        swift_bridgeObjectRelease(v16, v30, v31, v32, v33, v34, v35, v36);
        v37 = sub_1000136C8(301, 0x696C61762D666173, 0xEE006E6F69746164);
        if (v37)
        {
          v45 = v37;
          if (*(_QWORD *)&v37->instance[8])
          {
            sub_10000E990((uint64_t)v37, (const char *)0x12D, (void *)0x696C61762D666173, (_TtC14softposreaderd12RemoteReader *)0xEE006E6F69746164);
            swift_bridgeObjectRelease(v45, v56, v57, v58, v59, v60, v61, v62);
            return v1;
          }
          swift_bridgeObjectRelease(v37, v38, v39, v40, v41, v42, v43, v44);
        }
        v46 = sub_10001A488();
        v47 = swift_allocError(&type metadata for CertificateManagerError, v46, 0, 0);
        *v48 = 1;
        swift_willThrow(v47);
        swift_bridgeObjectRelease(v1, v49, v50, v51, v52, v53, v54, v55);
        v27 = (_TtC14softposreaderd12RemoteReader *)v29;
        goto LABEL_10;
      }
      swift_bridgeObjectRelease(v8, v9, v10, v11, v12, v13, v14, v15);
    }
    v17 = sub_10001A488();
    v18 = swift_allocError(&type metadata for CertificateManagerError, v17, 0, 0);
    *v19 = 1;
    swift_willThrow(v18);
    v27 = v1;
LABEL_10:
    swift_bridgeObjectRelease(v27, v20, v21, v22, v23, v24, v25, v26);
  }
  return v1;
}

void sub_10000E870(const char *a1, void *a2, _TtC14softposreaderd12RemoteReader *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  const char *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE v29[40];

  v7 = sub_100013310((uint64_t)a1, (uint64_t)a2, (unint64_t)a3);
  if (v7)
  {
    v8 = v7;
    v9 = sub_100003A2C(&qword_1001AD9E8);
    inited = swift_initStackObject(v9, v29);
    *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
    *(_QWORD *)(inited + 32) = v8;
    v11 = sub_10000E990(inited, a1, a2, a3);
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), &type metadata for SPRCertificate);
    if (!v3)
    {
      if (*(_QWORD *)(v11 + 16))
      {
        swift_bridgeObjectRetain(*(_QWORD *)(v11 + 32));
        swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v11, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v11, v12, v13, v14, v15, v16, v17, v18);
        __break(1u);
      }
    }
  }
  else
  {
    v26 = sub_10001A488();
    v27 = swift_allocError(&type metadata for CertificateManagerError, v26, 0, 0);
    *v28 = 1;
    swift_willThrow(v27);
  }
}

uint64_t sub_10000E990(uint64_t a1, const char *a2, void *a3, _TtC14softposreaderd12RemoteReader *a4)
{
  _QWORD *v4;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  const char *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _TtC14softposreaderd12RemoteReader *v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  unint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  swift_bridgeObjectRetain(a4);
  swift_retain(v4);
  v9 = swift_bridgeObjectRetain(a1);
  sub_100019D8C(v9, a2, a3, a4, v4, v10, v11, v12);
  v14 = v13;
  swift_bridgeObjectRelease(a4, v15, v16, v17, v18, v19, v20, v21);
  swift_release(v4);
  if (*(_QWORD *)(v14 + 16))
  {
    if (qword_1001ACE48 != -1)
      swift_once(&qword_1001ACE48, sub_10000CF18);
    v29 = type metadata accessor for Logger(0);
    sub_100003A14(v29, (uint64_t)qword_1001ACE50);
    v30 = swift_bridgeObjectRetain_n(v14, 2);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(12, -1);
      v34 = swift_slowAlloc(32, -1);
      v56 = v34;
      *(_DWORD *)v33 = 136315138;
      v35 = Array.debugDescription.getter(v14, &type metadata for SPRCertificate);
      v37 = (_TtC14softposreaderd12RemoteReader *)v36;
      v54 = sub_1000056EC(v35, v36, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v33 + 4, v33 + 12);
      swift_bridgeObjectRelease_n(v14, 2);
      swift_bridgeObjectRelease(v37, v38, v39, v40, v41, v42, v43, v44);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Valid certificates: %s", v33, 0xCu);
      swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v33, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v14, 2);
    }
  }
  else
  {
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v14, v22, v23, v24, v25, v26, v27, v28);
    if (qword_1001ACE48 != -1)
      swift_once(&qword_1001ACE48, sub_10000CF18);
    v45 = type metadata accessor for Logger(0);
    v46 = sub_100003A14(v45, (uint64_t)qword_1001ACE50);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "No valid certificates", v49, 2u);
      swift_slowDealloc(v49, -1, -1);
    }

    v50 = sub_10001A488();
    v51 = swift_allocError(&type metadata for CertificateManagerError, v50, 0, 0);
    *v52 = 0;
    swift_willThrow(v51);
  }
  return v14;
}

uint64_t sub_10000EC80(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _TtC14softposreaderd12RemoteReader *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  CFStringRef v31;
  unint64_t v32;
  _TtC14softposreaderd12RemoteReader *v33;
  SEL v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v9 = *a1;
  if (a2 == 200)
  {
    if (a3 == 0x702D657275636573 && a4 == 0xEE0064616F6C7961
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x702D657275636573, 0xEE0064616F6C7961, a3, a4, 0) & 1) != 0)
    {
      v11 = a5 + 14;
      v12 = a5[17];
      v13 = a5[18];
      goto LABEL_16;
    }
  }
  else
  {
    if (a2 == 301)
    {
      if (a3 == 0x696C61762D666173 && a4 == 0xEE006E6F69746164)
        goto LABEL_15;
      v10 = 761684339;
    }
    else
    {
      if (a2 != 300)
        goto LABEL_21;
      if (a3 == 7596553831663430000 && a4 == 0xEE006E6F69746164)
        goto LABEL_15;
      v10 = 762210672;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v10 | 0x696C617600000000, 0xEE006E6F69746164, a3, a4, 0) & 1) != 0)
    {
LABEL_15:
      v11 = a5 + 19;
      v12 = a5[22];
      v13 = a5[23];
LABEL_16:
      sub_100005EF8(v11, v12);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v9, v12, v13);
      if (!v5)
        return 1;
      if (qword_1001ACE48 != -1)
        swift_once(&qword_1001ACE48, sub_10000CF18);
      v14 = type metadata accessor for Logger(0);
      sub_100003A14(v14, (uint64_t)qword_1001ACE50);
      swift_bridgeObjectRetain(a4);
      swift_errorRetain(v5);
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(a4);
      swift_errorRetain(v5);
      v15 = swift_bridgeObjectRetain(v9);
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v16, v17))
      {
        v18 = swift_slowAlloc(32, -1);
        v19 = swift_slowAlloc(96, -1);
        v49 = v19;
        *(_DWORD *)v18 = 136315650;
        swift_bridgeObjectRetain(a4);
        v47 = sub_1000056EC(a3, a4, &v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v18 + 4, v18 + 12);
        swift_bridgeObjectRelease_n(a4, 3);
        *(_WORD *)(v18 + 12) = 2080;
        v47 = v5;
        swift_errorRetain(v5);
        v20 = sub_100003A2C((uint64_t *)&unk_1001B1280);
        v21 = String.init<A>(describing:)(&v47, v20);
        v23 = (_TtC14softposreaderd12RemoteReader *)v22;
        v47 = sub_1000056EC(v21, v22, &v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v18 + 14, v18 + 22);
        swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
        swift_errorRelease(v5);
        swift_errorRelease(v5);
        *(_WORD *)(v18 + 22) = 2080;
        v31 = sub_100118CA4(v9);
        v33 = (_TtC14softposreaderd12RemoteReader *)v32;
        v47 = sub_1000056EC((uint64_t)v31, v32, &v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v18 + 24, v18 + 32);
        swift_bridgeObjectRelease_n(v9, 2);
        swift_bridgeObjectRelease(v33, v34, v35, v36, v37, v38, v39, v40);
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Certificate for %s failed verification: %s\nCertificate description: %s", (uint8_t *)v18, 0x20u);
        swift_arrayDestroy(v19, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v19, -1, -1);
        swift_slowDealloc(v18, -1, -1);

        swift_errorRelease(v5);
      }
      else
      {
        swift_errorRelease(v5);
        swift_bridgeObjectRelease_n(a4, 2);
        swift_errorRelease(v5);
        swift_errorRelease(v5);

        swift_bridgeObjectRelease_n(v9, 2);
      }
      return 0;
    }
  }
LABEL_21:
  if (qword_1001ACE48 != -1)
    swift_once(&qword_1001ACE48, sub_10000CF18);
  v41 = type metadata accessor for Logger(0);
  v42 = sub_100003A14(v41, (uint64_t)qword_1001ACE50);
  v43 = Logger.logObject.getter(v42);
  v44 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v43, v44))
  {
    v45 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v45 = 0;
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "Unexpected CertificateRole", v45, 2u);
    swift_slowDealloc(v45, -1, -1);
  }

  return 0;
}

uint64_t sub_10000F15C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint8_t *v22;
  _TtC14softposreaderd12RemoteReader *v23;
  _TtC14softposreaderd12RemoteReader *v24;
  _TtC14softposreaderd12RemoteReader *v25;
  _TtC14softposreaderd12RemoteReader *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  _TtC14softposreaderd12RemoteReader *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  int v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  unint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  _TtC14softposreaderd12RemoteReader *v43;
  _TtC14softposreaderd12RemoteReader *v44;
  _TtC14softposreaderd12RemoteReader *v45;
  _TtC14softposreaderd12RemoteReader *v46;
  _TtC14softposreaderd12RemoteReader *v47;
  _TtC14softposreaderd12RemoteReader *v48;
  const char *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  SEL v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  SEL v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  void (*v70)(char *, _TtC14softposreaderd12RemoteReader *, uint64_t);
  char *v71;
  uint64_t v72;
  _TtC14softposreaderd12RemoteReader *v73;
  _TtC14softposreaderd12RemoteReader *v74;
  uint64_t v75;
  uint64_t (*v76)(char *, char *, uint64_t);
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  char *v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v84;
  uint64_t v85;
  const char *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  _TtC14softposreaderd12RemoteReader *v93;
  unint64_t v94;
  unint64_t v95;
  SEL v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  SEL v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  _TtC14softposreaderd12RemoteReader *v111;
  uint64_t v112;
  char *v113;
  _TtC14softposreaderd12RemoteReader *v114;
  _TtC14softposreaderd12RemoteReader *v115;
  uint64_t v116;
  _TtC14softposreaderd12RemoteReader *v117;
  uint64_t v118;
  _TtC14softposreaderd12RemoteReader *v119;

  v2 = v0;
  v3 = sub_100003A2C(&qword_1001AD9E0);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v111 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v111 - v7;
  v116 = type metadata accessor for Date(0, v9);
  v10 = *(_QWORD *)(v116 - 8);
  v11 = __chkstk_darwin(v116);
  v117 = (_TtC14softposreaderd12RemoteReader *)((char *)&v111 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v111 - v14;
  __chkstk_darwin(v13);
  v113 = (char *)&v111 - v16;
  if (qword_1001ACE48 != -1)
    swift_once(&qword_1001ACE48, sub_10000CF18);
  v17 = type metadata accessor for Logger(0);
  v18 = sub_100003A14(v17, (uint64_t)qword_1001ACE50);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.debug.getter();
  v21 = os_log_type_enabled(v19, v20);
  v118 = v2;
  if (v21)
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "refreshInBackground()", v22, 2u);
    swift_slowDealloc(v22, -1, -1);
  }

  v23 = sub_10000E594();
  v24 = v23;
  v114 = v25;
  v115 = v26;
  if (v1)
    goto LABEL_6;
  v111 = v23;
  v32 = v118;
  sub_100013080();
  v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v34 = v116;
  v35 = v33(v8, 1, v116);
  v112 = v10;
  if (v35 == 1)
  {
    sub_10001A448((uint64_t)v8);
    sub_100005EF8((_QWORD *)(v32 + 72), *(_QWORD *)(v32 + 96));
    sub_10001E61C((uint64_t)v6);
    if (v33(v6, 1, v34) == 1)
    {
      v36 = sub_10001A448((uint64_t)v6);
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, v38))
      {
        v39 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v39 = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Could not calculate secure now", v39, 2u);
        swift_slowDealloc(v39, -1, -1);
      }

      v40 = sub_10001A488();
      v41 = swift_allocError(&type metadata for CertificateManagerError, v40, 0, 0);
      *v42 = 4;
      v23 = (_TtC14softposreaderd12RemoteReader *)swift_willThrow(v41);
      v24 = v111;
      v10 = v112;
LABEL_6:
      v27 = Logger.logObject.getter(v23);
      v28 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v27, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "certififcates are not valid, renew...", v29, 2u);
        swift_slowDealloc(v29, -1, -1);
      }

      v30 = v117;
      sub_1000108F4(v117, v31);
      v44 = v43;
      v46 = v45;
      v48 = v47;
      swift_errorRelease();
      if (!v1)
      {
        swift_bridgeObjectRelease(v115, v49, v50, v51, v52, v53, v54, v55);
        swift_bridgeObjectRelease(v114, v56, v57, v58, v59, v60, v61, v62);
        swift_bridgeObjectRelease(v24, v63, v64, v65, v66, v67, v68, v69);
      }
      v112 = v10;
      v70 = *(void (**)(char *, _TtC14softposreaderd12RemoteReader *, uint64_t))(v10 + 32);
      v71 = v113;
      v72 = v116;
      v70(v113, v30, v116);
      v73 = v48;
      v74 = v44;
      goto LABEL_24;
    }
    v76 = *(uint64_t (**)(char *, char *, uint64_t))(v112 + 32);
    v77 = v76(v15, v6, v34);
    v78 = Logger.logObject.getter(v77);
    v79 = static os_log_type_t.default.getter();
    v72 = v34;
    if (os_log_type_enabled(v78, v79))
    {
      v80 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v80 = 0;
      _os_log_impl((void *)&_mh_execute_header, v78, v79, "Could not load certificate rotation date, using secure now", v80, 2u);
      swift_slowDealloc(v80, -1, -1);
    }

    v81 = v113;
    v75 = v76(v113, v15, v34);
    v71 = v81;
  }
  else
  {
    v71 = v113;
    v75 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v113, v8, v34);
    v72 = v34;
  }
  v74 = v111;
  v82 = Logger.logObject.getter(v75);
  v83 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v82, v83))
  {
    v84 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v84 = 0;
    _os_log_impl((void *)&_mh_execute_header, v82, v83, "all certififcates are valid", v84, 2u);
    swift_slowDealloc(v84, -1, -1);
  }

  v46 = v114;
  v73 = v115;
LABEL_24:
  v119 = v46;
  sub_100014EA4((uint64_t)v73);
  v85 = (uint64_t)v119;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v93 = (_TtC14softposreaderd12RemoteReader *)v85;
  if ((swift_isUniquelyReferenced_nonNull_native(v85) & 1) == 0)
    v93 = sub_10009104C(0, *(_QWORD *)(v85 + 16) + 1, 1, v85, v89, v90, v91, v92);
  v95 = *(_QWORD *)&v93->instance[8];
  v94 = *(_QWORD *)&v93->instance[16];
  if (v95 >= v94 >> 1)
    v93 = sub_10009104C((_TtC14softposreaderd12RemoteReader *)(v94 > 1), v95 + 1, 1, (uint64_t)v93, v89, v90, v91, v92);
  *(_QWORD *)&v93->instance[8] = v95 + 1;
  *(_QWORD *)&v93->instance[8 * v95 + 24] = v74;
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v85, v86, v87, v88, v89, v90, v91, v92);
  swift_bridgeObjectRelease(v74, v96, v97, v98, v99, v100, v101, v102);
  sub_10000F784(v71, (uint64_t)v93);
  swift_bridgeObjectRelease(v93, v103, v104, v105, v106, v107, v108, v109);
  return (*(uint64_t (**)(char *, uint64_t))(v112 + 8))(v71, v72);
}

uint64_t sub_10000F784(char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint64_t v26;
  uint8_t *v27;
  _TtC14softposreaderd12RemoteReader *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _TtC14softposreaderd12RemoteReader *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint8_t *v40;
  int64_t v41;
  _TtC14softposreaderd12RemoteReader *v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  SEL v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  uint64_t result;
  char *v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  char v59;
  char *v60;
  char *v61;
  char *v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  _TtC14softposreaderd12RemoteReader *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _TtC14softposreaderd12RemoteReader *v72;
  SEL v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t (*v85)(char *, char *, uint64_t);
  char *v86;
  char *v87;
  void (*v88)(char *, uint64_t);
  uint64_t v89;
  _TtC14softposreaderd12RemoteReader *v90;

  v3 = v2;
  v6 = sub_100003A2C(&qword_1001AD9E0);
  __chkstk_darwin(v6);
  v86 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0, v8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v83 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v80 - v14;
  v16 = __chkstk_darwin(v13);
  v87 = (char *)&v80 - v17;
  __chkstk_darwin(v16);
  v19 = (char *)&v80 - v18;
  if (qword_1001ACE48 != -1)
    swift_once(&qword_1001ACE48, sub_10000CF18);
  v20 = type metadata accessor for Logger(0);
  v21 = sub_100003A14(v20, (uint64_t)qword_1001ACE50);
  v85 = *(uint64_t (**)(char *, char *, uint64_t))(v10 + 16);
  v22 = v85(v19, a1, v9);
  v82 = v21;
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.debug.getter();
  v25 = os_log_type_enabled(v23, v24);
  v84 = v3;
  if (v25)
  {
    v26 = swift_slowAlloc(12, -1);
    v80 = a2;
    v27 = (uint8_t *)v26;
    v28 = (_TtC14softposreaderd12RemoteReader *)swift_slowAlloc(32, -1);
    v90 = v28;
    v81 = a1;
    *(_DWORD *)v27 = 136315138;
    v88 = (void (*)(char *, uint64_t))(v27 + 4);
    v29 = sub_100005F1C((unint64_t *)&qword_1001ADA00, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v30 = dispatch thunk of CustomStringConvertible.description.getter(v9, v29);
    v32 = (_TtC14softposreaderd12RemoteReader *)v31;
    v89 = sub_1000056EC(v30, v31, (uint64_t *)&v90);
    a1 = v81;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90, v88, v27 + 12);
    swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
    v88 = *(void (**)(char *, uint64_t))(v10 + 8);
    v88(v19, v9);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "scheduleCertsRenewal(rotationDate: %s)", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    v40 = v27;
    a2 = v80;
    swift_slowDealloc(v40, -1, -1);
  }
  else
  {
    v88 = *(void (**)(char *, uint64_t))(v10 + 8);
    v88(v19, v9);
  }

  v41 = *(_QWORD *)(a2 + 16);
  v42 = &_swiftEmptyArrayStorage;
  if (v41)
  {
    v90 = &_swiftEmptyArrayStorage;
    sub_100091C7C(0, v41, 0);
    v42 = v90;
    v44 = (uint64_t *)(a2 + 32);
    do
    {
      v89 = *v44;
      sub_10000FD1C(&v89, v43, (uint64_t)v15);
      v90 = v42;
      v46 = *(_QWORD *)&v42->instance[8];
      v45 = *(_QWORD *)&v42->instance[16];
      if (v46 >= v45 >> 1)
      {
        sub_100091C7C(v45 > 1, v46 + 1, 1);
        v42 = v90;
      }
      *(_QWORD *)&v42->instance[8] = v46 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))((unint64_t)v42+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v46, v15, v9);
      ++v44;
      --v41;
    }
    while (v41);
  }
  v47 = v86;
  sub_10000DCC0((uint64_t)v42, v86);
  swift_bridgeObjectRelease(v42, v48, v49, v50, v51, v52, v53, v54);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v47, 1, v9);
  v56 = v87;
  v57 = (void (*)(char *, char *, uint64_t))v85;
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v58 = sub_100005F1C(&qword_1001AD9F8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v59 = dispatch thunk of static Comparable.< infix(_:_:)(v47, a1, v9, v58);
    v60 = v83;
    if ((v59 & 1) != 0)
    {
      v61 = v56;
      v62 = v47;
    }
    else
    {
      v61 = v56;
      v62 = a1;
    }
    v57(v61, v62, v9);
    v63 = v88;
    v88(v47, v9);
    v64 = ((uint64_t (*)(char *, char *, uint64_t))v57)(v60, v56, v9);
    v65 = Logger.logObject.getter(v64);
    v66 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v65, v66))
    {
      v67 = (uint8_t *)swift_slowAlloc(12, -1);
      v68 = (_TtC14softposreaderd12RemoteReader *)swift_slowAlloc(32, -1);
      v90 = v68;
      *(_DWORD *)v67 = 136315138;
      v69 = sub_100005F1C((unint64_t *)&qword_1001ADA00, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v70 = dispatch thunk of CustomStringConvertible.description.getter(v9, v69);
      v72 = (_TtC14softposreaderd12RemoteReader *)v71;
      v89 = sub_1000056EC(v70, v71, (uint64_t *)&v90);
      v63 = v88;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90, v67 + 4, v67 + 12);
      swift_bridgeObjectRelease(v72, v73, v74, v75, v76, v77, v78, v79);
      v63(v60, v9);
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "renewalDate is min(rotationDate, expirationDates): %s", v67, 0xCu);
      swift_arrayDestroy(v68, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v68, -1, -1);
      swift_slowDealloc(v67, -1, -1);
    }
    else
    {
      v63(v60, v9);
    }

    sub_100010004();
    return ((uint64_t (*)(char *, uint64_t))v63)(v56, v9);
  }
  return result;
}

void sub_10000FD1C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _TtC14softposreaderd12RemoteReader *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  CFStringRef v31;
  unint64_t v32;
  _TtC14softposreaderd12RemoteReader *v33;
  SEL v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v6 = type metadata accessor for Date(0, a2);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  if ((v10 & 0xC000000000000001) != 0)
  {
    v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v10);
LABEL_4:
    v12 = v11;
    SecCertificateNotValidAfter(v11);

    Date.init(timeIntervalSinceReferenceDate:)(v13);
    if (qword_1001ACE48 == -1)
      goto LABEL_5;
    goto LABEL_10;
  }
  if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v11 = *(id *)(v10 + 32);
    goto LABEL_4;
  }
  __break(1u);
LABEL_10:
  swift_once(&qword_1001ACE48, sub_10000CF18);
LABEL_5:
  v14 = type metadata accessor for Logger(0);
  sub_100003A14(v14, (uint64_t)qword_1001ACE50);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
  v15 = swift_bridgeObjectRetain_n(v10, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(22, -1);
    v45 = v3;
    v19 = v18;
    v44 = swift_slowAlloc(64, -1);
    v47 = v44;
    *(_DWORD *)v19 = 136315394;
    v43 = v19 + 4;
    v20 = sub_100005F1C((unint64_t *)&qword_1001ADA00, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v21 = dispatch thunk of CustomStringConvertible.description.getter(v6, v20);
    v23 = (_TtC14softposreaderd12RemoteReader *)v22;
    v46 = sub_1000056EC(v21, v22, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v43, v19 + 12);
    swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *(_WORD *)(v19 + 12) = 2080;
    v31 = sub_100118CA4(v10);
    v33 = (_TtC14softposreaderd12RemoteReader *)v32;
    v46 = sub_1000056EC((uint64_t)v31, v32, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease_n(v10, 2);
    swift_bridgeObjectRelease(v33, v34, v35, v36, v37, v38, v39, v40);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Expiration date is: %s for certificate with description:\n%s", (uint8_t *)v19, 0x16u);
    v41 = v44;
    swift_arrayDestroy(v44, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v19, -1, -1);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);

    swift_bridgeObjectRelease_n(v10, 2);
  }
}

void sub_100010004()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint8_t *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  void (*v27)(char *, char *, uint64_t);
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _TtC14softposreaderd12RemoteReader *v60;
  _QWORD aBlock[5];
  uint64_t v62;

  v1 = v0;
  v2 = type metadata accessor for DispatchTime(0);
  v57 = *(_QWORD *)(v2 - 8);
  v58 = v2;
  v3 = __chkstk_darwin(v2);
  v59 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v54 = (char *)&v51 - v5;
  v55 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v55);
  v56 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003A2C(&qword_1001AD9E0);
  __chkstk_darwin(v7);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0, v10);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001ACE48 != -1)
    swift_once(&qword_1001ACE48, sub_10000CF18);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_100003A14(v15, (uint64_t)qword_1001ACE50);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = v12;
    v20 = v11;
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "scheduleCertsRenewal(renewalDate:)", v21, 2u);
    v22 = v21;
    v11 = v20;
    v12 = v19;
    swift_slowDealloc(v22, -1, -1);
  }

  sub_100005EF8(v1 + 9, v1[12]);
  sub_10001E61C((uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11) == 1)
  {
    v23 = sub_10001A448((uint64_t)v9);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Failed to schedule renewal. Could not calculate secure now", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }

  }
  else
  {
    v27 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v53 = v14;
    v27(v14, v9, v11);
    v28 = Date.timeIntervalSince(_:)(v14);
    v29 = v1[24];
    v30 = swift_retain(v29);
    dispatch thunk of DispatchWorkItem.cancel()(v30);
    swift_release(v29);
    v31 = swift_allocObject(&unk_100199990, 24, 7);
    swift_weakInit(v31 + 16, v1);
    v32 = swift_allocObject(&unk_1001999B8, 32, 7);
    *(_QWORD *)(v32 + 16) = v31;
    *(double *)(v32 + 24) = v28;
    aBlock[4] = sub_10001A5E4;
    v62 = v32;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000043B8;
    aBlock[3] = &unk_1001999D0;
    v33 = _Block_copy(aBlock);
    v60 = &_swiftEmptyArrayStorage;
    v34 = sub_100005F1C((unint64_t *)&qword_1001B1260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v52 = v11;
    v35 = v34;
    swift_retain(v31);
    v36 = sub_100003A2C((uint64_t *)&unk_1001AE400);
    v37 = v54;
    v38 = v58;
    v51 = v12;
    v39 = v36;
    v40 = sub_100005F5C((unint64_t *)&qword_1001B1270, (uint64_t *)&unk_1001AE400);
    v41 = v56;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v60, v39, v40, v55, v35);
    v42 = type metadata accessor for DispatchWorkItem(0);
    swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
    v43 = DispatchWorkItem.init(flags:block:)(v41, v33);
    v44 = v62;
    swift_release(v31);
    swift_release(v44);
    v45 = v1[24];
    v1[24] = v43;
    swift_release(v45);
    v47 = v1[12];
    v46 = v1[13];
    sub_100005EF8(v1 + 9, v47);
    v48 = v59;
    (*(void (**)(uint64_t))(*(_QWORD *)(v46 + 8) + 16))(v47);
    + infix(_:_:)(v48);
    v49 = *(void (**)(char *, uint64_t))(v57 + 8);
    v49(v48, v38);
    v50 = v1[24];
    swift_retain(v50);
    OS_dispatch_queue.asyncAfter(deadline:execute:)(v37, v50);
    swift_release(v50);
    v49(v37, v38);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v53, v52);
  }
}

uint64_t sub_1000104FC(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _TtC14softposreaderd12RemoteReader *v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  const char *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint32_t v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  uint64_t v27;
  _TtC14softposreaderd12RemoteReader *v28;
  _TtC14softposreaderd12RemoteReader *v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  _TtC14softposreaderd12RemoteReader *v42;
  unint64_t v43;
  unint64_t v44;
  SEL v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  SEL v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  char v62[24];

  v5 = type metadata accessor for Date(0, a2);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (_TtC14softposreaderd12RemoteReader *)((char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v11 = (char *)&v59 - v10;
  a1 += 16;
  swift_beginAccess(a1, v62, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (!result)
    return result;
  v13 = result;
  if (a3 <= 0.0)
  {
    if (qword_1001ACE48 != -1)
      swift_once(&qword_1001ACE48, sub_10000CF18);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_100003A14(v24, (uint64_t)qword_1001ACE50);
    v16 = Logger.logObject.getter(v25);
    v26 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v16, v26))
      goto LABEL_12;
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    v19 = "Renewing certificates now";
    v20 = v16;
    v21 = v26;
    v22 = v18;
    v23 = 2;
  }
  else
  {
    if (qword_1001ACE48 != -1)
      swift_once(&qword_1001ACE48, sub_10000CF18);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_100003A14(v14, (uint64_t)qword_1001ACE50);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v16, v17))
      goto LABEL_12;
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v18 = 134217984;
    v60 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v18 + 4, v18 + 12);
    v19 = "Will renew certificates after %f s";
    v20 = v16;
    v21 = v17;
    v22 = v18;
    v23 = 12;
  }
  _os_log_impl((void *)&_mh_execute_header, v20, v21, v19, v22, v23);
  swift_slowDealloc(v18, -1, -1);
LABEL_12:

  sub_1000108F4(v9, v27);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  (*(void (**)(char *, _TtC14softposreaderd12RemoteReader *, uint64_t))(v6 + 32))(v11, v9, v5);
  v60 = v31;
  sub_100014EA4(v33);
  v34 = *(_QWORD *)&v60;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v42 = (_TtC14softposreaderd12RemoteReader *)v34;
  if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0)
    v42 = sub_10009104C(0, *(_QWORD *)(v34 + 16) + 1, 1, v34, v38, v39, v40, v41);
  v44 = *(_QWORD *)&v42->instance[8];
  v43 = *(_QWORD *)&v42->instance[16];
  if (v44 >= v43 >> 1)
    v42 = sub_10009104C((_TtC14softposreaderd12RemoteReader *)(v43 > 1), v44 + 1, 1, (uint64_t)v42, v38, v39, v40, v41);
  *(_QWORD *)&v42->instance[8] = v44 + 1;
  *(_QWORD *)&v42->instance[8 * v44 + 24] = v29;
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v34, v35, v36, v37, v38, v39, v40, v41);
  swift_bridgeObjectRelease(v29, v45, v46, v47, v48, v49, v50, v51);
  sub_10000F784(v11, v42);
  swift_release(v13);
  swift_bridgeObjectRelease(v42, v52, v53, v54, v55, v56, v57, v58);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
}

void sub_1000108F4(_TtC14softposreaderd12RemoteReader *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  _TtC14softposreaderd12RemoteReader *v17;
  _TtC14softposreaderd12RemoteReader *v18;
  _TtC14softposreaderd12RemoteReader *v19;
  uint64_t v20;
  uint64_t v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *v31;
  uint64_t inited;
  _TtC14softposreaderd12RemoteReader *v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  Swift::String v40;
  _TtC14softposreaderd12RemoteReader *v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  _TtC14softposreaderd12RemoteReader *v49;
  uint64_t v50;
  const char *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  _TtC14softposreaderd12RemoteReader *v58;
  const char *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  uint64_t v69;
  _QWORD *v70;
  void *v71;
  id v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  Swift::String v77;
  _TtC14softposreaderd12RemoteReader *v78;
  SEL v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  SEL v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  _TtC14softposreaderd12RemoteReader *v93;
  char isUniquelyReferenced_nonNull_native;
  const char *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  unint64_t v102;
  unint64_t v103;
  const char *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  __int128 *v111;
  int64_t v112;
  _TtC14softposreaderd12RemoteReader *v113;
  _TtC14softposreaderd12RemoteReader *v114;
  void *v115;
  id v116;
  void *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  Swift::String v121;
  SEL v122;
  id v123;
  id v124;
  id v125;
  id v126;
  id v127;
  id v128;
  const char *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  unint64_t v136;
  unint64_t v137;
  const char *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  _QWORD *v145;
  unsigned __int8 *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char v157;
  uint64_t *v158;
  uint64_t v159;
  BOOL v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  char v165;
  uint64_t *v166;
  const char *v167;
  void *v168;
  void *v169;
  void *v170;
  void *v171;
  void *v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  _TtC14softposreaderd12RemoteReader *v176;
  _TtC14softposreaderd12RemoteReader *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  char v183;
  char v184;
  char v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  __int128 *v189;
  _QWORD *v190;
  void *v191;
  id v192;
  void *v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  Swift::String v197;
  _TtC14softposreaderd12RemoteReader *v198;
  SEL v199;
  id v200;
  id v201;
  id v202;
  id v203;
  id v204;
  id v205;
  SEL v206;
  id v207;
  id v208;
  id v209;
  id v210;
  id v211;
  id v212;
  uint64_t v213;
  uint64_t v214;
  _TtC14softposreaderd12RemoteReader *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _TtC14softposreaderd12RemoteReader *v219;
  __int128 v220;
  uint64_t v221;
  _TtC14softposreaderd12RemoteReader *v222;
  _TtC14softposreaderd12RemoteReader *v223;
  uint64_t v224;
  __int128 v225;
  uint64_t v226;
  _QWORD *v227;
  _QWORD *v228;
  _TtC14softposreaderd12RemoteReader *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unsigned __int8 v237;
  char v238;

  v4 = (unint64_t)v3;
  v5 = v2;
  v219 = a1;
  v6 = type metadata accessor for Date(0, a2);
  v217 = *(_QWORD *)(v6 - 8);
  v218 = v6;
  __chkstk_darwin(v6);
  *(_QWORD *)&v220 = (char *)&v214 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001ACE48 != -1)
    goto LABEL_68;
  while (1)
  {
    v8 = type metadata accessor for Logger(0);
    v9 = sub_100003A14(v8, (uint64_t)qword_1001ACE50);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "renewCertificates()", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    v13 = *(_QWORD *)(v5 + 248);
    LOBYTE(v233) = 5;
    v14 = *(os_unfair_lock_s **)(v13 + 56);
    v15 = (uint64_t)&v14[4];
    v16 = (uint64_t)&v14[8];
    os_unfair_lock_lock(v14 + 8);
    sub_1000935A0(v15, (unsigned __int8 *)&v233);
    if (v4)
      goto LABEL_73;
    os_unfair_lock_unlock((os_unfair_lock_t)v16);
    v238 = 0;
    v17 = (_TtC14softposreaderd12RemoteReader *)sub_1000117B8();
    v19 = v18;
    v21 = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100012394((uint64_t)v17, 200, 0x702D657275636573, 0xEE0064616F6C7961);
    v224 = v5;
    v223 = 0;
    v16 = 0x747365676964;
    swift_bridgeObjectRelease(v17, v22, v23, v24, v25, v26, v27, v28);
    v29 = *(_QWORD *)(v5 + 232);
    v30 = *(_QWORD *)(v5 + 240);
    v227 = (_QWORD *)(v5 + 208);
    v31 = (__int128 *)sub_100005EF8((_QWORD *)(v5 + 208), v29);
    v226 = sub_100003A2C(&qword_1001ADA18);
    inited = swift_initStackObject(v226, &v232);
    v33 = v17;
    v34 = inited;
    v225 = xmmword_10015A6C0;
    *(_OWORD *)(inited + 16) = xmmword_10015A6C0;
    *(_QWORD *)(inited + 32) = 1701605234;
    *(_QWORD *)(inited + 40) = 0xE400000000000000;
    *(_QWORD *)(inited + 72) = &type metadata for Int;
    *(_QWORD *)(inited + 80) = &protocol witness table for Int;
    *(_QWORD *)(inited + 48) = 200;
    *(_QWORD *)(inited + 88) = 0x747365676964;
    *(_QWORD *)(inited + 96) = 0xE600000000000000;
    v215 = v33;
    v216 = v21;
    v229 = (_TtC14softposreaderd12RemoteReader *)v31;
    if (((unint64_t)v33 & 0xC000000000000001) != 0)
    {
      v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v33);
      goto LABEL_8;
    }
    if (!*(_QWORD *)(((unint64_t)v33 & 0xFFFFFFFFFFFFF8) + 0x10))
      break;
    v35 = *(id *)&v33->instance[24];
LABEL_8:
    v36 = v35;
    v37 = SecCertificateRef.fingerprint.getter();
    v39 = v38;

    v40 = Data.base64EncodedString(options:)(0);
    sub_100005DE0(v37, v39);
    *(_QWORD *)(v34 + 128) = &type metadata for String;
    *(_QWORD *)(v34 + 136) = &protocol witness table for String;
    *(Swift::String *)(v34 + 104) = v40;
    v41 = (_TtC14softposreaderd12RemoteReader *)sub_1000E84EC(v34);
    sub_100115684(9, (uint64_t)v41, v29, v30);
    swift_bridgeObjectRelease(v41, v42, v43, v44, v45, v46, v47, v48);
    v49 = v223;
    v50 = v224;
    sub_100012824((uint64_t)v19, 300, 7596553831663430000, 0xEE006E6F69746164);
    v58 = v49;
    if (v49)
    {
      swift_bridgeObjectRelease(v19, v51, v52, v53, v54, v55, v56, v57);
      v66 = v216;
LABEL_19:
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v66, v59, v60, v61, v62, v63, v64, v65);
      goto LABEL_20;
    }
    swift_bridgeObjectRelease(v19, v51, v52, v53, v54, v55, v56, v57);
    v221 = *(_QWORD *)&v19->instance[8];
    v222 = v19;
    if (v221)
    {
      v223 = 0;
      swift_bridgeObjectRetain_n(v19, 2);
      v67 = 0;
      do
      {
        v4 = *(_QWORD *)&v19->instance[8 * v67 + 24];
        v69 = *(_QWORD *)(v50 + 232);
        v68 = *(__int128 **)(v50 + 240);
        v70 = sub_100005EF8(v227, v69);
        v5 = swift_initStackObject(v226, &v231);
        *(_OWORD *)(v5 + 16) = v225;
        *(_QWORD *)(v5 + 32) = 1701605234;
        *(_QWORD *)(v5 + 40) = 0xE400000000000000;
        *(_QWORD *)(v5 + 72) = &type metadata for Int;
        *(_QWORD *)(v5 + 48) = 300;
        *(_QWORD *)(v5 + 80) = &protocol witness table for Int;
        *(_QWORD *)(v5 + 88) = 0x747365676964;
        *(_QWORD *)(v5 + 96) = 0xE600000000000000;
        v228 = v70;
        v229 = (_TtC14softposreaderd12RemoteReader *)v68;
        if ((v4 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          v72 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v4);
        }
        else
        {
          if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_67;
          v71 = *(void **)(v4 + 32);
          swift_bridgeObjectRetain();
          v72 = v71;
        }
        v73 = v72;
        ++v67;
        v74 = SecCertificateRef.fingerprint.getter();
        v76 = v75;

        v77 = Data.base64EncodedString(options:)(0);
        sub_100005DE0(v74, v76);
        *(_QWORD *)(v5 + 128) = &type metadata for String;
        *(_QWORD *)(v5 + 136) = &protocol witness table for String;
        *(Swift::String *)(v5 + 104) = v77;
        v78 = (_TtC14softposreaderd12RemoteReader *)sub_1000E84EC(v5);
        sub_100115684(9, (uint64_t)v78, v69, (uint64_t)v229);
        swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v4, v79, v80, v81, v82, v83, v84, v85);
        swift_bridgeObjectRelease(v78, v86, v87, v88, v89, v90, v91, v92);
        v19 = v222;
        v50 = v224;
      }
      while (v221 != v67);
      swift_bridgeObjectRelease_n(v222, 2);
      v58 = v223;
    }
    v66 = v216;
    sub_100012824(v216, 301, 0x696C61762D666173, 0xEE006E6F69746164);
    if (v58)
      goto LABEL_19;
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v66, v59, v60, v61, v62, v63, v64, v65);
    v221 = *(_QWORD *)(v66 + 16);
    if (!v221)
    {
LABEL_62:
      v213 = v220;
      sub_100012D98(v220);
      if (!v58)
      {
        (*(void (**)(_TtC14softposreaderd12RemoteReader *, uint64_t, uint64_t))(v217 + 32))(v219, v213, v218);
        sub_100011698(v50, &v238);
        return;
      }
LABEL_20:
      v93 = v215;
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
      v223 = v58;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        goto LABEL_70;
      goto LABEL_21;
    }
    v223 = 0;
    swift_bridgeObjectRetain_n(v66, 2);
    v93 = 0;
    while (1)
    {
      v188 = *(_QWORD *)(v66 + 8 * (_QWORD)v93 + 32);
      v66 = *(_QWORD *)(v50 + 232);
      v189 = *(__int128 **)(v50 + 240);
      v190 = sub_100005EF8(v227, v66);
      v50 = swift_initStackObject(v226, &v230);
      *(_OWORD *)(v50 + 16) = v225;
      *(_QWORD *)(v50 + 32) = 1701605234;
      *(_QWORD *)(v50 + 40) = 0xE400000000000000;
      *(_QWORD *)(v50 + 72) = &type metadata for Int;
      *(_QWORD *)(v50 + 48) = 301;
      *(_QWORD *)(v50 + 80) = &protocol witness table for Int;
      *(_QWORD *)(v50 + 88) = 0x747365676964;
      *(_QWORD *)(v50 + 96) = 0xE600000000000000;
      v228 = v190;
      v229 = (_TtC14softposreaderd12RemoteReader *)v189;
      if ((v188 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        v192 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v188);
        goto LABEL_59;
      }
      if (!*(_QWORD *)((v188 & 0xFFFFFFFFFFFFF8) + 0x10))
        break;
      v191 = *(void **)(v188 + 32);
      swift_bridgeObjectRetain();
      v192 = v191;
LABEL_59:
      v193 = v192;
      v93 = (_TtC14softposreaderd12RemoteReader *)((char *)v93 + 1);
      v194 = SecCertificateRef.fingerprint.getter();
      v196 = v195;

      v197 = Data.base64EncodedString(options:)(0);
      sub_100005DE0(v194, v196);
      *(_QWORD *)(v50 + 128) = &type metadata for String;
      *(_QWORD *)(v50 + 136) = &protocol witness table for String;
      *(Swift::String *)(v50 + 104) = v197;
      v198 = (_TtC14softposreaderd12RemoteReader *)sub_1000E84EC(v50);
      sub_100115684(9, (uint64_t)v198, v66, (uint64_t)v229);
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v188, v199, v200, v201, v202, v203, v204, v205);
      swift_bridgeObjectRelease(v198, v206, v207, v208, v209, v210, v211, v212);
      v19 = v222;
      v50 = v224;
      v66 = v216;
      if ((_TtC14softposreaderd12RemoteReader *)v221 == v93)
      {
        swift_bridgeObjectRelease_n(v216, 2);
        v58 = v223;
        goto LABEL_62;
      }
    }
    __break(1u);
LABEL_70:
    v19 = sub_10009104C(0, *(_QWORD *)&v19->instance[8] + 1, 1, (uint64_t)v19, v98, v99, v100, v101);
LABEL_21:
    v103 = *(_QWORD *)&v19->instance[8];
    v102 = *(_QWORD *)&v19->instance[16];
    if (v103 >= v102 >> 1)
      v19 = sub_10009104C((_TtC14softposreaderd12RemoteReader *)(v102 > 1), v103 + 1, 1, (uint64_t)v19, v98, v99, v100, v101);
    *(_QWORD *)&v19->instance[8] = v103 + 1;
    *(_QWORD *)&v19->instance[8 * v103 + 24] = v93;
    swift_bridgeObjectRelease(v93, v95, v96, v97, v98, v99, v100, v101);
    v233 = (uint64_t)v19;
    sub_100014EA4(v66);
    v111 = (__int128 *)v233;
    v112 = *(_QWORD *)(v233 + 16);
    if (!v112)
    {
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v233, v104, v105, v106, v107, v108, v109, v110);
      v113 = &_swiftEmptyArrayStorage;
      v145 = *(_QWORD **)&_swiftEmptyArrayStorage.instance[8];
      if (v145)
        goto LABEL_34;
LABEL_42:
      v176 = v113;
LABEL_43:
      swift_bridgeObjectRelease(v176, v138, v139, v140, v141, v142, v143, v144);
      v177 = v223;
      _s3__C4CodeOMa_11(0);
      v179 = v178;
      v233 = 2034;
      swift_errorRetain();
      v180 = sub_100005F1C(&qword_1001AD738, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_11, (uint64_t)&unk_10015BCD0);
      v181 = static _ErrorCodeProtocol.~= infix(_:_:)(&v233, v177, v179, v180);
      v182 = swift_errorRelease();
      if ((v181 & 1) != 0)
      {
        v183 = 4;
LABEL_53:
        v238 = v183;
        swift_willThrow(v182);
        sub_100011698(v50, &v238);
        return;
      }
      v233 = 2000;
      swift_errorRetain();
      v184 = static _ErrorCodeProtocol.~= infix(_:_:)(&v233, v177, v179, v180);
      v182 = swift_errorRelease();
      if ((v184 & 1) != 0)
      {
        v183 = 1;
        goto LABEL_53;
      }
      v233 = 2025;
      swift_errorRetain();
      v185 = static _ErrorCodeProtocol.~= infix(_:_:)(&v233, v177, v179, v180);
      v182 = swift_errorRelease();
      if ((v185 & 1) == 0)
      {
        v233 = (uint64_t)v177;
        swift_errorRetain();
        v186 = sub_100003A2C((uint64_t *)&unk_1001B1280);
        if (swift_dynamicCast(&v237, &v233, v186, &type metadata for CertificateManagerError, 0))
        {
          v187 = v237;
          v182 = swift_errorRelease();
          if (v187 == 2)
            goto LABEL_50;
        }
        else
        {
          v182 = swift_errorRelease();
        }
        v183 = 3;
        goto LABEL_53;
      }
LABEL_50:
      v183 = 2;
      goto LABEL_53;
    }
    v233 = (uint64_t)&_swiftEmptyArrayStorage;
    sub_100091C44(0, v112, 0);
    v4 = 0;
    v113 = (_TtC14softposreaderd12RemoteReader *)v233;
    v228 = (_QWORD *)v112;
    v229 = (_TtC14softposreaderd12RemoteReader *)v111;
    do
    {
      v5 = *((_QWORD *)v111 + v4 + 4);
      if ((v5 & 0xC000000000000001) != 0)
      {
        v114 = v113;
        swift_bridgeObjectRetain();
        v116 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v5);
      }
      else
      {
        if (!*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_66;
        v114 = v113;
        v115 = *(void **)(v5 + 32);
        swift_bridgeObjectRetain();
        v116 = v115;
      }
      v117 = v116;
      v118 = SecCertificateRef.fingerprint.getter();
      v120 = v119;

      v121 = Data.base64EncodedString(options:)(0);
      sub_100005DE0(v118, v120);
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v5, v122, v123, v124, v125, v126, v127, v128);
      v113 = v114;
      v233 = (uint64_t)v114;
      v137 = *(_QWORD *)&v114->instance[8];
      v136 = *(_QWORD *)&v114->instance[16];
      if (v137 >= v136 >> 1)
      {
        sub_100091C44(v136 > 1, v137 + 1, 1);
        v113 = (_TtC14softposreaderd12RemoteReader *)v233;
      }
      ++v4;
      *(_QWORD *)&v113->instance[8] = v137 + 1;
      *(Swift::String *)&v113->instance[16 * v137 + 24] = v121;
      v111 = (__int128 *)v229;
    }
    while (v228 != (_QWORD *)v4);
    swift_bridgeObjectRelease(v229, v129, v130, v131, v132, v133, v134, v135);
    v50 = v224;
    v145 = *(_QWORD **)&v113->instance[8];
    if (!v145)
      goto LABEL_42;
LABEL_34:
    v222 = (_TtC14softposreaderd12RemoteReader *)(v50 + 208);
    v221 = sub_100003A2C(&qword_1001ADA20);
    v229 = (_TtC14softposreaderd12RemoteReader *)&v235;
    v219 = v113;
    v146 = &v113->instance[32];
    v220 = xmmword_10015A6C0;
    while (1)
    {
      v228 = v145;
      v4 = *((_QWORD *)v146 - 1);
      v147 = *(_QWORD *)v146;
      v148 = *(_QWORD **)(v50 + 232);
      v226 = *(_QWORD *)(v50 + 240);
      v227 = v148;
      *(_QWORD *)&v225 = sub_100005EF8(v222, (uint64_t)v148);
      v149 = sub_100003A2C(&qword_1001ADA18);
      v5 = swift_initStackObject(v149, &v236);
      *(_OWORD *)(v5 + 16) = v220;
      *(_QWORD *)(v5 + 32) = 0x747365676964;
      *(_QWORD *)(v5 + 72) = &type metadata for String;
      *(_QWORD *)(v5 + 80) = &protocol witness table for String;
      *(_QWORD *)(v5 + 40) = 0xE600000000000000;
      *(_QWORD *)(v5 + 48) = v4;
      *(_QWORD *)(v5 + 56) = v147;
      *(_QWORD *)(v5 + 88) = 0x726F727265;
      *(_QWORD *)(v5 + 96) = 0xE500000000000000;
      v233 = (uint64_t)v223;
      swift_bridgeObjectRetain();
      swift_errorRetain();
      v150 = sub_100003A2C((uint64_t *)&unk_1001B1280);
      v151 = String.init<A>(describing:)(&v233, v150);
      *(_QWORD *)(v5 + 128) = &type metadata for String;
      *(_QWORD *)(v5 + 136) = &protocol witness table for String;
      *(_QWORD *)(v5 + 104) = v151;
      *(_QWORD *)(v5 + 112) = v152;
      v153 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(2);
      sub_10001A554(v5 + 32, (uint64_t)&v233);
      v154 = v233;
      v155 = v234;
      v156 = sub_10000ADC4(v233, v234);
      if ((v157 & 1) != 0)
        break;
      v4 = (unint64_t)(v153 + 8);
      *(_QWORD *)((char *)v153 + ((v156 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v156;
      v158 = (uint64_t *)(v153[6] + 16 * v156);
      *v158 = v154;
      v158[1] = v155;
      sub_10001A674((__int128 *)v229, v153[7] + 40 * v156);
      v159 = v153[2];
      v160 = __OFADD__(v159, 1);
      v161 = v159 + 1;
      if (v160)
        goto LABEL_65;
      v153[2] = v161;
      sub_10001A554(v5 + 88, (uint64_t)&v233);
      v162 = v233;
      v163 = v234;
      v164 = sub_10000ADC4(v233, v234);
      if ((v165 & 1) != 0)
        break;
      *(_QWORD *)(v4 + ((v164 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v164;
      v166 = (uint64_t *)(v153[6] + 16 * v164);
      *v166 = v162;
      v166[1] = v163;
      sub_10001A674((__int128 *)v229, v153[7] + 40 * v164);
      v174 = v153[2];
      v160 = __OFADD__(v174, 1);
      v175 = v174 + 1;
      if (v160)
        goto LABEL_65;
      v146 += 16;
      v153[2] = v175;
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v5, v167, v168, v169, v170, v171, v172, v173);
      sub_100115684(10, (uint64_t)v153, (uint64_t)v227, v226);
      swift_release(v153);
      v145 = (_QWORD *)((char *)v228 - 1);
      v50 = v224;
      if (v228 == (_QWORD *)1)
      {
        v176 = v219;
        goto LABEL_43;
      }
    }
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    swift_once(&qword_1001ACE48, sub_10000CF18);
  }
  __break(1u);
LABEL_73:
  os_unfair_lock_unlock((os_unfair_lock_t)v16);
  __break(1u);
}

void sub_100011698(uint64_t a1, char *a2)
{
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _TtC14softposreaderd12RemoteReader *v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  os_unfair_lock_s *v28;
  _TtC14softposreaderd12RemoteReader **v29;
  os_unfair_lock_s *v30;
  _BYTE v31[87];
  unsigned __int8 v32;

  v3 = *(_QWORD *)(a1 + 248);
  v32 = 5;
  v4 = *(os_unfair_lock_s **)(v3 + 56);
  v5 = (uint64_t)&v4[4];
  v6 = v4 + 8;
  os_unfair_lock_lock(v4 + 8);
  sub_100093588(v5, &v32);
  os_unfair_lock_unlock(v6);
  v7 = sub_100003A2C(&qword_1001ADA30);
  inited = swift_initStackObject(v7, v31);
  *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
  *(_BYTE *)(inited + 32) = 19;
  v9 = qword_10015DEA8[*a2];
  *(_QWORD *)(inited + 64) = &type metadata for Int;
  *(_QWORD *)(inited + 40) = v9;
  v17 = (_TtC14softposreaderd12RemoteReader *)sub_1000E862C(inited, v10, v11, v12, v13, v14, v15, v16);
  v18 = *(os_unfair_lock_s **)(v3 + 56);
  v19 = (uint64_t)&v18[4];
  v20 = v18 + 8;
  os_unfair_lock_lock(v18 + 8);
  sub_10005F610(v19, (uint64_t)v17);
  os_unfair_lock_unlock(v20);
  swift_bridgeObjectRelease(v17, v21, v22, v23, v24, v25, v26, v27);
  v28 = *(os_unfair_lock_s **)(v3 + 56);
  v29 = (_TtC14softposreaderd12RemoteReader **)&v28[4];
  v30 = v28 + 8;
  os_unfair_lock_lock(v28 + 8);
  sub_100060D00(v29, v3, 3);
  os_unfair_lock_unlock(v30);
}

uint64_t sub_1000117B8()
{
  _TtC14softposreaderd12RemoteReader *v0;
  uint64_t v1;
  _TtC14softposreaderd12RemoteReader *countAndFlagsBits;
  uint64_t v3;
  Class isa;
  uint64_t result;
  _TtC14softposreaderd12RemoteReader *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  _TtC14softposreaderd12RemoteReader *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t inited;
  SEL v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  const char *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  _TtC14softposreaderd12RemoteReader **v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  Swift::String v36;
  _TtC14softposreaderd12RemoteReader *v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  const char *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  _TtC14softposreaderd12RemoteReader *v52;
  _TtC14softposreaderd12RemoteReader **v53;
  _TtC14softposreaderd12RemoteReader *v54;
  const char *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  _TtC14softposreaderd12RemoteReader *v63;
  uint64_t v64;
  SEL v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  SEL v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  const char *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  _TtC14softposreaderd12RemoteReader *v90;
  uint64_t v91;
  const char *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  int64_t v99;
  void *v100;
  _TtC14softposreaderd12RemoteReader **v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  Swift::String v105;
  SEL v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  unint64_t v113;
  unint64_t v114;
  unsigned __int8 *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _TtC14softposreaderd12RemoteReader **v119;
  uint64_t v120;
  unint64_t v121;
  char v122;
  _TtC14softposreaderd12RemoteReader **v123;
  _TtC14softposreaderd12RemoteReader *v124;
  BOOL v125;
  _TtC14softposreaderd12RemoteReader *v126;
  unint64_t v127;
  char v128;
  uint64_t *v129;
  const char *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  _TtC14softposreaderd12RemoteReader *v137;
  _TtC14softposreaderd12RemoteReader *v138;
  const char *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  _TtC14softposreaderd12RemoteReader *v146;
  _TtC14softposreaderd12RemoteReader *v147;
  const char *v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  void *v153;
  void *v154;
  uint64_t v155;
  _TtC14softposreaderd12RemoteReader *v156;
  uint64_t v157;
  SEL v158;
  id v159;
  id v160;
  id v161;
  id v162;
  id v163;
  id v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  SEL v169;
  id v170;
  id v171;
  id v172;
  id v173;
  id v174;
  id v175;
  const char *v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  int64_t v183;
  _TtC14softposreaderd12RemoteReader *v184;
  void *v185;
  _TtC14softposreaderd12RemoteReader **v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  Swift::String v190;
  SEL v191;
  id v192;
  id v193;
  id v194;
  id v195;
  id v196;
  id v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _TtC14softposreaderd12RemoteReader **v204;
  uint64_t v205;
  unint64_t v206;
  char v207;
  _TtC14softposreaderd12RemoteReader **v208;
  _TtC14softposreaderd12RemoteReader *v209;
  _TtC14softposreaderd12RemoteReader *v210;
  unint64_t v211;
  char v212;
  uint64_t *v213;
  const char *v214;
  void *v215;
  void *v216;
  void *v217;
  void *v218;
  void *v219;
  void *v220;
  _TtC14softposreaderd12RemoteReader *v221;
  _TtC14softposreaderd12RemoteReader *v222;
  uint64_t v223;
  uint64_t v224;
  SEL v225;
  id v226;
  id v227;
  id v228;
  id v229;
  id v230;
  id v231;
  SEL v232;
  id v233;
  id v234;
  id v235;
  id v236;
  id v237;
  id v238;
  uint64_t v239;
  uint64_t v240;
  NSObject *v241;
  os_log_type_t v242;
  uint8_t *v243;
  unint64_t v244;
  uint64_t v245;
  _BYTE *v246;
  _TtC14softposreaderd12RemoteReader *v247;
  uint64_t v248;
  _TtC14softposreaderd12RemoteReader *v249;
  uint64_t v250;
  uint64_t v251;
  unsigned __int8 *v252;
  _TtC14softposreaderd12RemoteReader *v253;
  uint64_t v254;
  uint64_t v255;
  unsigned __int8 *v256;
  unint64_t v257;
  char v258[144];
  _TtC14softposreaderd12RemoteReader *v259;
  _TtC14softposreaderd12RemoteReader *v260;
  _BYTE v261[40];
  char v262[144];
  char v263[152];
  __int128 *v264;

  countAndFlagsBits = v0;
  v3 = *(_QWORD *)&v0[5].instance[32];
  isa = v0[6].super.isa;
  sub_100005EF8(&v0[5].instance[8], v3);
  result = (*((uint64_t (**)(uint64_t, Class))isa + 1))(v3, isa);
  if (!v1)
  {
    v9 = result;
    v10 = v6;
    v11 = v7;
    v12 = v8;
    type metadata accessor for SecCertificate(0);
    inited = (uint64_t)static SecCertificateRef.parseList(pemRepresentation:)(v9, v10);
    swift_bridgeObjectRelease(v10, v14, v15, v16, v17, v18, v19, v20);
    if (inited)
    {
      v28 = (_TtC14softposreaderd12RemoteReader **)(inited & 0xFFFFFFFFFFFFFF8);
      if ((unint64_t)inited >> 62)
        goto LABEL_90;
      if (*(_QWORD *)((inited & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        do
        {
          v250 = v12;
          v29 = *(_QWORD *)&countAndFlagsBits[4].instance[32];
          v253 = countAndFlagsBits;
          v264 = (__int128 *)countAndFlagsBits[5].super.isa;
          v252 = &countAndFlagsBits[4].instance[8];
          sub_100005EF8(&countAndFlagsBits[4].instance[8], v29);
          v251 = sub_100003A2C(&qword_1001ADA18);
          result = swift_initStackObject(v251, v263);
          v30 = result;
          *(_OWORD *)(result + 16) = xmmword_10015A6C0;
          *(_QWORD *)(result + 32) = 1701605234;
          *(_QWORD *)(result + 40) = 0xE400000000000000;
          *(_QWORD *)(result + 72) = &type metadata for Int;
          *(_QWORD *)(result + 80) = &protocol witness table for Int;
          *(_QWORD *)(result + 48) = 200;
          *(_QWORD *)(result + 88) = 0x747365676964;
          *(_QWORD *)(result + 96) = 0xE600000000000000;
          v248 = inited;
          if ((inited & 0xC000000000000001) != 0)
          {
            v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, inited);
          }
          else
          {
            if (!v28[2])
            {
              __break(1u);
              return result;
            }
            v31 = *(id *)(inited + 32);
          }
          v32 = v31;
          v33 = SecCertificateRef.fingerprint.getter();
          v35 = v34;

          v36 = Data.base64EncodedString(options:)(0);
          sub_100005DE0(v33, v35);
          *(_QWORD *)(v30 + 128) = &type metadata for String;
          *(_QWORD *)(v30 + 136) = &protocol witness table for String;
          *(Swift::String *)(v30 + 104) = v36;
          v37 = (_TtC14softposreaderd12RemoteReader *)sub_1000E84EC(v30);
          sub_100115684(8, (uint64_t)v37, v29, (uint64_t)v264);
          swift_bridgeObjectRelease(v37, v38, v39, v40, v41, v42, v43, v44);
          countAndFlagsBits = (_TtC14softposreaderd12RemoteReader *)*((_QWORD *)v11 + 2);
          v52 = &_swiftEmptyArrayStorage;
          if (countAndFlagsBits)
          {
            swift_bridgeObjectRetain();
            v53 = (_TtC14softposreaderd12RemoteReader **)(v11 + 40);
            v54 = &_swiftEmptyArrayStorage;
            while (1)
            {
              v62 = (uint64_t)*(v53 - 1);
              v63 = *v53;
              swift_bridgeObjectRetain();
              v64 = (uint64_t)static SecCertificateRef.parseList(pemRepresentation:)(v62, v63);
              swift_bridgeObjectRelease(v63, v65, v66, v67, v68, v69, v70, v71);
              if (v64)
              {
                if ((unint64_t)v64 >> 62)
                {
                  if (v64 >= 0)
                    v74 = v64 & 0xFFFFFFFFFFFFFF8;
                  else
                    v74 = v64;
                  swift_bridgeObjectRetain();
                  v75 = _CocoaArrayWrapper.endIndex.getter(v74);
                  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v64, v76, v77, v78, v79, v80, v81, v82);
                  if (v75)
                  {
LABEL_15:
                    if ((swift_isUniquelyReferenced_nonNull_native(v54) & 1) == 0)
                      v54 = sub_10009104C(0, *(_QWORD *)&v54->instance[8] + 1, 1, (uint64_t)v54, v58, v59, v60, v61);
                    v73 = *(_QWORD *)&v54->instance[8];
                    v72 = *(_QWORD *)&v54->instance[16];
                    if (v73 >= v72 >> 1)
                      v54 = sub_10009104C((_TtC14softposreaderd12RemoteReader *)(v72 > 1), v73 + 1, 1, (uint64_t)v54, v58, v59, v60, v61);
                    *(_QWORD *)&v54->instance[8] = v73 + 1;
                    *(_QWORD *)&v54->instance[8 * v73 + 24] = v64;
                    v52 = &_swiftEmptyArrayStorage;
                    goto LABEL_11;
                  }
                }
                else if (*(_QWORD *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x10))
                {
                  goto LABEL_15;
                }
                swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v64, v55, v56, v57, v58, v59, v60, v61);
              }
LABEL_11:
              v53 += 2;
              countAndFlagsBits = (_TtC14softposreaderd12RemoteReader *)((char *)countAndFlagsBits - 1);
              if (!countAndFlagsBits)
              {
                swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v11, v55, v56, v57, v58, v59, v60, v61);
                goto LABEL_28;
              }
            }
          }
          v54 = &_swiftEmptyArrayStorage;
LABEL_28:
          v91 = v250;
          swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v11, v45, v46, v47, v48, v49, v50, v51);
          v99 = *(_QWORD *)&v54->instance[8];
          if (v99)
          {
            v259 = &_swiftEmptyArrayStorage;
            v28 = &v259;
            sub_100091C44(0, v99, 0);
            v52 = v259;
            inited = (uint64_t)&v54->instance[24];
            do
            {
              v12 = *(_QWORD *)inited;
              if ((*(_QWORD *)inited & 0xC000000000000001) != 0)
              {
                swift_bridgeObjectRetain();
                v101 = (_TtC14softposreaderd12RemoteReader **)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v12);
              }
              else
              {
                if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
                  goto LABEL_88;
                v100 = *(void **)(v12 + 32);
                swift_bridgeObjectRetain();
                v101 = v100;
              }
              v28 = v101;
              v102 = SecCertificateRef.fingerprint.getter();
              v104 = v103;

              v105 = Data.base64EncodedString(options:)(0);
              countAndFlagsBits = (_TtC14softposreaderd12RemoteReader *)v105._countAndFlagsBits;
              sub_100005DE0(v102, v104);
              swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v12, v106, v107, v108, v109, v110, v111, v112);
              v259 = v52;
              v114 = *(_QWORD *)&v52->instance[8];
              v113 = *(_QWORD *)&v52->instance[16];
              v11 = (unsigned __int8 *)(v114 + 1);
              if (v114 >= v113 >> 1)
              {
                v28 = &v259;
                sub_100091C44(v113 > 1, v114 + 1, 1);
                v52 = v259;
              }
              *(_QWORD *)&v52->instance[8] = v11;
              *(Swift::String *)&v52->instance[16 * v114 + 24] = v105;
              inited += 8;
              --v99;
            }
            while (v99);
          }
          else
          {
            v11 = *(unsigned __int8 **)&_swiftEmptyArrayStorage.instance[8];
            if (!v11)
              goto LABEL_46;
          }
          sub_100003A2C(&qword_1001ADA20);
          v264 = (__int128 *)v261;
          v247 = v52;
          v115 = &v52->instance[32];
          do
          {
            v116 = *((_QWORD *)v115 - 1);
            v117 = *(_QWORD *)v115;
            v118 = *(_QWORD *)&v253[4].instance[32];
            v254 = (uint64_t)v253[5].super.isa;
            v256 = v11;
            sub_100005EF8(v252, v118);
            inited = swift_initStackObject(v251, v262);
            *(_OWORD *)(inited + 16) = xmmword_10015A6C0;
            *(_QWORD *)(inited + 32) = 1701605234;
            *(_QWORD *)(inited + 72) = &type metadata for Int;
            *(_QWORD *)(inited + 80) = &protocol witness table for Int;
            *(_QWORD *)(inited + 88) = 0x747365676964;
            v12 = inited + 88;
            *(_QWORD *)(inited + 40) = 0xE400000000000000;
            *(_QWORD *)(inited + 48) = 300;
            *(_QWORD *)(inited + 128) = &type metadata for String;
            *(_QWORD *)(inited + 136) = &protocol witness table for String;
            *(_QWORD *)(inited + 96) = 0xE600000000000000;
            *(_QWORD *)(inited + 104) = v116;
            *(_QWORD *)(inited + 112) = v117;
            v119 = (_TtC14softposreaderd12RemoteReader **)static _DictionaryStorage.allocate(capacity:)(2);
            swift_bridgeObjectRetain();
            sub_10001A554(inited + 32, (uint64_t)&v259);
            countAndFlagsBits = v259;
            v120 = (uint64_t)v260;
            v28 = v119;
            v121 = sub_10000ADC4((uint64_t)v259, (uint64_t)v260);
            if ((v122 & 1) != 0)
              goto LABEL_84;
            v11 = (unsigned __int8 *)(v119 + 8);
            *(_TtC14softposreaderd12RemoteReader **)((char *)v119 + ((v121 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) = (_TtC14softposreaderd12RemoteReader *)(*(unint64_t *)((char *)v119 + ((v121 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) | (1 << v121));
            v123 = (_TtC14softposreaderd12RemoteReader **)((char *)v119[6] + 16 * v121);
            *v123 = countAndFlagsBits;
            v123[1] = (_TtC14softposreaderd12RemoteReader *)v120;
            sub_10001A674(v264, (uint64_t)v119[7] + 40 * v121);
            v124 = v119[2];
            v125 = __OFADD__(v124, 1);
            v126 = (_TtC14softposreaderd12RemoteReader *)((char *)&v124->super.isa + 1);
            if (v125)
              goto LABEL_85;
            v119[2] = v126;
            sub_10001A554(v12, (uint64_t)&v259);
            v12 = (uint64_t)v259;
            countAndFlagsBits = v260;
            v28 = v119;
            v127 = sub_10000ADC4((uint64_t)v259, (uint64_t)v260);
            if ((v128 & 1) != 0)
            {
LABEL_84:
              __break(1u);
LABEL_85:
              __break(1u);
              goto LABEL_86;
            }
            *(_QWORD *)&v11[(v127 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v127;
            v129 = (uint64_t *)((char *)v119[6] + 16 * v127);
            *v129 = v12;
            v129[1] = (uint64_t)countAndFlagsBits;
            sub_10001A674(v264, (uint64_t)v119[7] + 40 * v127);
            v137 = v119[2];
            v125 = __OFADD__(v137, 1);
            v138 = (_TtC14softposreaderd12RemoteReader *)((char *)&v137->super.isa + 1);
            if (v125)
              goto LABEL_85;
            v115 += 16;
            v119[2] = v138;
            swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)inited, v130, v131, v132, v133, v134, v135, v136);
            sub_100115684(8, (uint64_t)v119, v118, v254);
            swift_release(v119);
            v11 = v256 - 1;
          }
          while (v256 != (unsigned __int8 *)1);
          v91 = v250;
          v52 = v247;
LABEL_46:
          swift_bridgeObjectRelease(v52, v92, v93, v94, v95, v96, v97, v98);
          v11 = *(unsigned __int8 **)(v91 + 16);
          v146 = &_swiftEmptyArrayStorage;
          if (v11)
          {
            swift_bridgeObjectRetain();
            countAndFlagsBits = (_TtC14softposreaderd12RemoteReader *)(v91 + 40);
            v147 = &_swiftEmptyArrayStorage;
            while (1)
            {
              v155 = *(_QWORD *)&countAndFlagsBits[-1].instance[32];
              v156 = (_TtC14softposreaderd12RemoteReader *)countAndFlagsBits->super.isa;
              swift_bridgeObjectRetain();
              v157 = (uint64_t)static SecCertificateRef.parseList(pemRepresentation:)(v155, v156);
              swift_bridgeObjectRelease(v156, v158, v159, v160, v161, v162, v163, v164);
              if (v157)
              {
                if ((unint64_t)v157 >> 62)
                {
                  if (v157 >= 0)
                    v167 = v157 & 0xFFFFFFFFFFFFFF8;
                  else
                    v167 = v157;
                  swift_bridgeObjectRetain();
                  v168 = _CocoaArrayWrapper.endIndex.getter(v167);
                  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v157, v169, v170, v171, v172, v173, v174, v175);
                  if (v168)
                  {
LABEL_53:
                    if ((swift_isUniquelyReferenced_nonNull_native(v147) & 1) == 0)
                      v147 = sub_10009104C(0, *(_QWORD *)&v147->instance[8] + 1, 1, (uint64_t)v147, v151, v152, v153, v154);
                    v166 = *(_QWORD *)&v147->instance[8];
                    v165 = *(_QWORD *)&v147->instance[16];
                    if (v166 >= v165 >> 1)
                      v147 = sub_10009104C((_TtC14softposreaderd12RemoteReader *)(v165 > 1), v166 + 1, 1, (uint64_t)v147, v151, v152, v153, v154);
                    *(_QWORD *)&v147->instance[8] = v166 + 1;
                    *(_QWORD *)&v147->instance[8 * v166 + 24] = v157;
                    goto LABEL_49;
                  }
                }
                else if (*(_QWORD *)((v157 & 0xFFFFFFFFFFFFFF8) + 0x10))
                {
                  goto LABEL_53;
                }
                swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v157, v148, v149, v150, v151, v152, v153, v154);
              }
LABEL_49:
              countAndFlagsBits = (_TtC14softposreaderd12RemoteReader *)((char *)countAndFlagsBits + 16);
              if (!--v11)
              {
                swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v91, v148, v149, v150, v151, v152, v153, v154);
                goto LABEL_65;
              }
            }
          }
          v147 = &_swiftEmptyArrayStorage;
LABEL_65:
          swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v91, v139, v140, v141, v142, v143, v144, v145);
          v183 = *(_QWORD *)&v147->instance[8];
          if (v183)
          {
            v259 = &_swiftEmptyArrayStorage;
            v28 = &v259;
            sub_100091C44(0, v183, 0);
            v146 = v259;
            inited = (uint64_t)&v147->instance[24];
            do
            {
              v12 = *(_QWORD *)inited;
              if ((*(_QWORD *)inited & 0xC000000000000001) != 0)
              {
                v184 = v146;
                swift_bridgeObjectRetain();
                v186 = (_TtC14softposreaderd12RemoteReader **)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v12);
              }
              else
              {
                if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
                  goto LABEL_89;
                v184 = v146;
                v185 = *(void **)(v12 + 32);
                swift_bridgeObjectRetain();
                v186 = v185;
              }
              v28 = v186;
              v187 = SecCertificateRef.fingerprint.getter();
              v189 = v188;

              v190 = Data.base64EncodedString(options:)(0);
              v11 = (unsigned __int8 *)v190._countAndFlagsBits;
              countAndFlagsBits = (_TtC14softposreaderd12RemoteReader *)v190._object;
              sub_100005DE0(v187, v189);
              swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v12, v191, v192, v193, v194, v195, v196, v197);
              v146 = v184;
              v259 = v184;
              v199 = *(_QWORD *)&v184->instance[8];
              v198 = *(_QWORD *)&v184->instance[16];
              v200 = v199 + 1;
              if (v199 >= v198 >> 1)
              {
                v28 = &v259;
                sub_100091C44(v198 > 1, v199 + 1, 1);
                v146 = v259;
              }
              *(_QWORD *)&v146->instance[8] = v200;
              *(Swift::String *)&v146->instance[16 * v199 + 24] = v190;
              inited += 8;
              --v183;
            }
            while (v183);
          }
          else
          {
            v200 = *(_QWORD *)&_swiftEmptyArrayStorage.instance[8];
            if (!v200)
            {
LABEL_83:
              swift_bridgeObjectRelease(v146, v176, v177, v178, v179, v180, v181, v182);
              return v248;
            }
          }
          sub_100003A2C(&qword_1001ADA20);
          v264 = (__int128 *)v261;
          v249 = v146;
          v11 = &v146->instance[32];
          while (1)
          {
            v257 = v200;
            v201 = *((_QWORD *)v11 - 1);
            v202 = *(_QWORD *)v11;
            v203 = *(_QWORD *)&v253[4].instance[32];
            v255 = (uint64_t)v253[5].super.isa;
            sub_100005EF8(v252, v203);
            inited = swift_initStackObject(v251, v258);
            *(_OWORD *)(inited + 16) = xmmword_10015A6C0;
            *(_QWORD *)(inited + 32) = 1701605234;
            *(_QWORD *)(inited + 72) = &type metadata for Int;
            *(_QWORD *)(inited + 80) = &protocol witness table for Int;
            *(_QWORD *)(inited + 88) = 0x747365676964;
            v12 = inited + 88;
            *(_QWORD *)(inited + 40) = 0xE400000000000000;
            *(_QWORD *)(inited + 48) = 301;
            *(_QWORD *)(inited + 128) = &type metadata for String;
            *(_QWORD *)(inited + 136) = &protocol witness table for String;
            *(_QWORD *)(inited + 96) = 0xE600000000000000;
            *(_QWORD *)(inited + 104) = v201;
            *(_QWORD *)(inited + 112) = v202;
            v204 = (_TtC14softposreaderd12RemoteReader **)static _DictionaryStorage.allocate(capacity:)(2);
            swift_bridgeObjectRetain();
            sub_10001A554(inited + 32, (uint64_t)&v259);
            countAndFlagsBits = v259;
            v205 = (uint64_t)v260;
            v28 = v204;
            v206 = sub_10000ADC4((uint64_t)v259, (uint64_t)v260);
            if ((v207 & 1) != 0)
              break;
            *(_TtC14softposreaderd12RemoteReader **)((char *)v204 + ((v206 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) = (_TtC14softposreaderd12RemoteReader *)(*(unint64_t *)((char *)v204 + ((v206 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) | (1 << v206));
            v208 = (_TtC14softposreaderd12RemoteReader **)((char *)v204[6] + 16 * v206);
            *v208 = countAndFlagsBits;
            v208[1] = (_TtC14softposreaderd12RemoteReader *)v205;
            sub_10001A674(v264, (uint64_t)v204[7] + 40 * v206);
            v209 = v204[2];
            v125 = __OFADD__(v209, 1);
            v210 = (_TtC14softposreaderd12RemoteReader *)((char *)&v209->super.isa + 1);
            if (v125)
              goto LABEL_87;
            v204[2] = v210;
            sub_10001A554(v12, (uint64_t)&v259);
            v12 = (uint64_t)v259;
            countAndFlagsBits = v260;
            v28 = v204;
            v211 = sub_10000ADC4((uint64_t)v259, (uint64_t)v260);
            if ((v212 & 1) != 0)
              break;
            *(_TtC14softposreaderd12RemoteReader **)((char *)v204 + ((v211 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) = (_TtC14softposreaderd12RemoteReader *)(*(unint64_t *)((char *)v204 + ((v211 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) | (1 << v211));
            v213 = (uint64_t *)((char *)v204[6] + 16 * v211);
            *v213 = v12;
            v213[1] = (uint64_t)countAndFlagsBits;
            sub_10001A674(v264, (uint64_t)v204[7] + 40 * v211);
            v221 = v204[2];
            v125 = __OFADD__(v221, 1);
            v222 = (_TtC14softposreaderd12RemoteReader *)((char *)&v221->super.isa + 1);
            if (v125)
              goto LABEL_87;
            v11 += 16;
            v204[2] = v222;
            swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)inited, v214, v215, v216, v217, v218, v219, v220);
            sub_100115684(8, (uint64_t)v204, v203, v255);
            swift_release(v204);
            v200 = v257 - 1;
            if (v257 == 1)
            {
              v146 = v249;
              goto LABEL_83;
            }
          }
LABEL_86:
          __break(1u);
LABEL_87:
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          if (inited >= 0)
            v223 = (uint64_t)v28;
          else
            v223 = inited;
          swift_bridgeObjectRetain();
          v224 = _CocoaArrayWrapper.endIndex.getter(v223);
          swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)inited, v225, v226, v227, v228, v229, v230, v231);
        }
        while (v224);
      }
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v12, v21, v22, v23, v24, v25, v26, v27);
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v11, v232, v233, v234, v235, v236, v237, v238);
      v90 = (_TtC14softposreaderd12RemoteReader *)inited;
    }
    else
    {
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v12, v21, v22, v23, v24, v25, v26, v27);
      v90 = (_TtC14softposreaderd12RemoteReader *)v11;
    }
    swift_bridgeObjectRelease(v90, v83, v84, v85, v86, v87, v88, v89);
    if (qword_1001ACE48 != -1)
      swift_once(&qword_1001ACE48, sub_10000CF18);
    v239 = type metadata accessor for Logger(0);
    v240 = sub_100003A14(v239, (uint64_t)qword_1001ACE50);
    v241 = Logger.logObject.getter(v240);
    v242 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v241, v242))
    {
      v243 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v243 = 0;
      _os_log_impl((void *)&_mh_execute_header, v241, v242, "Certificate for encrypting payloads is not in PEM representation", v243, 2u);
      swift_slowDealloc(v243, -1, -1);
    }

    v244 = sub_10001A488();
    v245 = swift_allocError(&type metadata for CertificateManagerError, v244, 0, 0);
    *v246 = 2;
    return swift_willThrow(v245);
  }
  return result;
}

void sub_100012394(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _TtC14softposreaderd12RemoteReader *v17;
  const char *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _TtC14softposreaderd12RemoteReader *v34;
  SEL v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  CFStringRef v48;
  unint64_t v49;
  _TtC14softposreaderd12RemoteReader *v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v11 = v4[7];
  v10 = v4[8];
  sub_100005EF8(v4 + 4, v11);
  v59 = a3;
  v12 = sub_100140284(a2, a3, a4);
  v14 = v13;
  v15 = sub_100118E70(a1);
  v17 = (_TtC14softposreaderd12RemoteReader *)v16;
  sub_1000BBE78(v12, v14, v15, v16, v11, v10);
  if (v5)
  {
    swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
    sub_100005DE0(v12, v14);
    if (qword_1001ACE48 != -1)
      swift_once(&qword_1001ACE48, sub_10000CF18);
    v25 = type metadata accessor for Logger(0);
    sub_100003A14(v25, (uint64_t)qword_1001ACE50);
    swift_bridgeObjectRetain();
    swift_errorRetain(v5);
    swift_bridgeObjectRetain();
    v26 = swift_errorRetain(v5);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc(22, -1);
      v30 = swift_slowAlloc(64, -1);
      v62 = v30;
      *(_DWORD *)v29 = 136315394;
      swift_bridgeObjectRetain();
      v60 = sub_1000056EC(v59, a4, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v29 + 4, v29 + 12);
      swift_bridgeObjectRelease_n(a4, 3);
      *(_WORD *)(v29 + 12) = 2080;
      v60 = v5;
      swift_errorRetain(v5);
      v31 = sub_100003A2C((uint64_t *)&unk_1001B1280);
      v32 = String.init<A>(describing:)(&v60, v31);
      v34 = (_TtC14softposreaderd12RemoteReader *)v33;
      v60 = sub_1000056EC(v32, v33, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v29 + 14, v29 + 22);
      swift_bridgeObjectRelease(v34, v35, v36, v37, v38, v39, v40, v41);
      swift_errorRelease(v5);
      swift_errorRelease(v5);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "error persisting %s certificate: %s", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy(v30, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a4, 2);
      swift_errorRelease(v5);
      swift_errorRelease(v5);
    }

    swift_willThrow(v58);
  }
  else
  {
    swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
    sub_100005DE0(v12, v14);
    if (qword_1001ACE48 != -1)
      swift_once(&qword_1001ACE48, sub_10000CF18);
    v42 = type metadata accessor for Logger(0);
    sub_100003A14(v42, (uint64_t)qword_1001ACE50);
    swift_bridgeObjectRetain_n(a4, 2);
    v43 = swift_bridgeObjectRetain_n(a1, 2);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = swift_slowAlloc(22, -1);
      v47 = swift_slowAlloc(64, -1);
      v62 = v47;
      *(_DWORD *)v46 = 136315394;
      swift_bridgeObjectRetain();
      v60 = sub_1000056EC(v59, a4, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v46 + 4, v46 + 12);
      swift_bridgeObjectRelease_n(a4, 3);
      *(_WORD *)(v46 + 12) = 2080;
      v48 = sub_100118CA4(a1);
      v50 = (_TtC14softposreaderd12RemoteReader *)v49;
      v60 = sub_1000056EC((uint64_t)v48, v49, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v46 + 14, v46 + 22);
      swift_bridgeObjectRelease_n(a1, 2);
      swift_bridgeObjectRelease(v50, v51, v52, v53, v54, v55, v56, v57);
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Saved %s certificate: %s", (uint8_t *)v46, 0x16u);
      swift_arrayDestroy(v47, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v46, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a1, 2);
      swift_bridgeObjectRelease_n(a4, 2);
    }
  }
}

void sub_100012824(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  _TtC14softposreaderd12RemoteReader *v9;
  _TtC14softposreaderd12RemoteReader **v11;
  _TtC14softposreaderd12RemoteReader *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  _TtC14softposreaderd12RemoteReader *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _TtC14softposreaderd12RemoteReader *v49;
  SEL v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  SEL v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _TtC14softposreaderd12RemoteReader *v71;
  SEL v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  uint64_t v79;
  uint64_t v83;
  _TtC14softposreaderd12RemoteReader *v84;
  uint64_t v86;
  uint64_t v87;
  _TtC14softposreaderd12RemoteReader *v88;

  v5 = v4;
  v6 = a4;
  v7 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = &_swiftEmptyArrayStorage;
  if (v8)
  {
    v88 = &_swiftEmptyArrayStorage;
    sub_100091C44(0, v8, 0);
    v9 = &_swiftEmptyArrayStorage;
    v11 = (_TtC14softposreaderd12RemoteReader **)(a1 + 32);
    do
    {
      v12 = *v11;
      v13 = swift_bridgeObjectRetain();
      v14 = sub_100118E70(v13);
      v16 = v15;
      swift_bridgeObjectRelease(v12, v15, v17, v18, v19, v20, v21, v22);
      v88 = v9;
      v24 = *(_QWORD *)&v9->instance[8];
      v23 = *(_QWORD *)&v9->instance[16];
      if (v24 >= v23 >> 1)
      {
        sub_100091C44(v23 > 1, v24 + 1, 1);
        v9 = v88;
      }
      *(_QWORD *)&v9->instance[8] = v24 + 1;
      v25 = (char *)v9 + 16 * v24;
      *((_QWORD *)v25 + 4) = v14;
      *((_QWORD *)v25 + 5) = v16;
      ++v11;
      --v8;
    }
    while (v8);
    v7 = a2;
    v6 = a4;
  }
  v26 = *(_QWORD *)(v4 + 56);
  v27 = *(_QWORD *)(v4 + 64);
  sub_100005EF8((_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 56));
  v28 = sub_100140284(v7, a3, v6);
  v30 = v29;
  v88 = v9;
  v31 = sub_100003A2C((uint64_t *)&unk_1001AE460);
  v32 = sub_10001A4F4(&qword_1001ADA10, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  sub_1000BBFB0(v28, v30, (uint64_t)&v88, v26, v31, v27, v32);
  if (v83)
  {
    sub_100005DE0(v28, v30);
    swift_bridgeObjectRelease(v9, v33, v34, v35, v36, v37, v38, v39);
    if (qword_1001ACE48 != -1)
      swift_once(&qword_1001ACE48, sub_10000CF18);
    v40 = type metadata accessor for Logger(0);
    sub_100003A14(v40, (uint64_t)qword_1001ACE50);
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    v41 = swift_errorRetain();
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = swift_slowAlloc(22, -1);
      v45 = (_TtC14softposreaderd12RemoteReader *)swift_slowAlloc(64, -1);
      v88 = v45;
      *(_DWORD *)v44 = 136315394;
      swift_bridgeObjectRetain();
      v86 = sub_1000056EC(a3, v6, (uint64_t *)&v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v44 + 4, v44 + 12);
      swift_bridgeObjectRelease_n(v6, 3);
      *(_WORD *)(v44 + 12) = 2080;
      v86 = v83;
      swift_errorRetain();
      v46 = sub_100003A2C((uint64_t *)&unk_1001B1280);
      v47 = String.init<A>(describing:)(&v86, v46);
      v49 = (_TtC14softposreaderd12RemoteReader *)v48;
      v86 = sub_1000056EC(v47, v48, (uint64_t *)&v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v44 + 14, v44 + 22);
      swift_bridgeObjectRelease(v49, v50, v51, v52, v53, v54, v55, v56);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "error persisting %s certificates: %s", (uint8_t *)v44, 0x16u);
      swift_arrayDestroy(v45, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v44, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v6, 2);
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_willThrow(v79);
  }
  else
  {
    sub_100005DE0(v28, v30);
    swift_bridgeObjectRelease(v9, v57, v58, v59, v60, v61, v62, v63);
    if (qword_1001ACE48 != -1)
      swift_once(&qword_1001ACE48, sub_10000CF18);
    v64 = type metadata accessor for Logger(0);
    sub_100003A14(v64, (uint64_t)qword_1001ACE50);
    swift_bridgeObjectRetain_n(v6, 2);
    v65 = swift_bridgeObjectRetain_n(a1, 2);
    v66 = Logger.logObject.getter(v65);
    v67 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v66, v67))
    {
      v68 = swift_slowAlloc(22, -1);
      v84 = (_TtC14softposreaderd12RemoteReader *)swift_slowAlloc(64, -1);
      v88 = v84;
      *(_DWORD *)v68 = 136315394;
      swift_bridgeObjectRetain();
      v86 = sub_1000056EC(a3, v6, (uint64_t *)&v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v68 + 4, v68 + 12);
      swift_bridgeObjectRelease_n(v6, 3);
      *(_WORD *)(v68 + 12) = 2080;
      v69 = Array.debugDescription.getter(a1, &type metadata for SPRCertificate);
      v71 = (_TtC14softposreaderd12RemoteReader *)v70;
      v86 = sub_1000056EC(v69, v70, (uint64_t *)&v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v68 + 14, v68 + 22);
      swift_bridgeObjectRelease_n(a1, 2);
      swift_bridgeObjectRelease(v71, v72, v73, v74, v75, v76, v77, v78);
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "Saved %s certificates: %s", (uint8_t *)v68, 0x16u);
      swift_arrayDestroy(v84, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v84, -1, -1);
      swift_slowDealloc(v68, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a1, 2);
      swift_bridgeObjectRelease_n(v6, 2);
    }
  }
}

uint64_t sub_100012D98@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;

  v4 = sub_100003A2C(&qword_1001AD9E0);
  __chkstk_darwin(v4);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0, v7);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005EF8(v1 + 9, v1[12]);
  sub_10001E61C((uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) == 1)
  {
    sub_10001A448((uint64_t)v6);
    if (qword_1001ACE48 != -1)
      swift_once(&qword_1001ACE48, sub_10000CF18);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_100003A14(v12, (uint64_t)qword_1001ACE50);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to schedule renewal. Could not calculate secure now", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

    v17 = sub_10001A488();
    v18 = swift_allocError(&type metadata for CertificateManagerError, v17, 0, 0);
    *v19 = 6;
    return swift_willThrow(v18);
  }
  else
  {
    v30 = a1;
    v21 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v11, v6, v8);
    v32 = Date.timeIntervalSinceReferenceDate.getter(v21) + 604800.0;
    v22 = sub_1000FA728((uint64_t)&v32, (uint64_t)&v33);
    v31 = v2;
    v23 = v22;
    v25 = v24;
    v27 = v1[7];
    v26 = v1[8];
    sub_100005EF8(v1 + 4, v27);
    v28 = v31;
    v29 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t))(v26 + 40))(v1[2], v1[3], v23, v25, v27, v26);
    if (v28)
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      return sub_100005DE0(v23, v25);
    }
    else
    {
      Date.init(timeIntervalSinceReferenceDate:)(v29);
      sub_100005DE0(v23, v25);
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
  }
}

void sub_100013080()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[7];
  v2 = v0[8];
  sub_100005EF8(v0 + 4, v1);
  (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(v2 + 32))(v0[2], v0[3], v1, v2);
  __asm { BR              X10 }
}

uint64_t sub_100013310(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _TtC14softposreaderd12RemoteReader *v19;
  _TtC14softposreaderd12RemoteReader *v20;
  uint64_t v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  const char *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v51;

  v7 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v3[8];
  sub_100005EF8(v3 + 4, v3[7]);
  v11 = sub_100140284(a1, a2, a3);
  v13 = v12;
  v14 = (*(uint64_t (**)(void))(v10 + 32))();
  v16 = v15;
  sub_100005DE0(v11, v13);
  v17 = sub_100005D9C(v14, v16);
  static String.Encoding.utf8.getter(v17);
  v18 = String.init(data:encoding:)(v14, v16, v9);
  v20 = v19;
  sub_100005DE0(v14, v16);
  if (v20)
  {
    type metadata accessor for SecCertificate(0);
    v21 = (uint64_t)static SecCertificateRef.parseList(pemRepresentation:)(v18, v20);
    swift_bridgeObjectRelease(v20, v22, v23, v24, v25, v26, v27, v28);
    if (v21)
    {
      if ((unint64_t)v21 >> 62)
      {
        if (v21 >= 0)
          v36 = v21 & 0xFFFFFFFFFFFFFF8;
        else
          v36 = v21;
        swift_bridgeObjectRetain(v21);
        v37 = _CocoaArrayWrapper.endIndex.getter(v36);
        swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v21, v38, v39, v40, v41, v42, v43, v44);
        if (v37)
          goto LABEL_5;
      }
      else if (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_5:
        sub_100005DE0(v14, v16);
        return v21;
      }
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v21, v29, v30, v31, v32, v33, v34, v35);
    }
  }
  if (qword_1001ACE48 != -1)
    swift_once(&qword_1001ACE48, sub_10000CF18);
  v45 = type metadata accessor for Logger(0);
  v46 = sub_100003A14(v45, (uint64_t)qword_1001ACE50);
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v47, v48))
  {
    v49 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v49 = 0;
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "malformed certificate", v49, 2u);
    swift_slowDealloc(v49, -1, -1);
  }
  sub_100005DE0(v14, v16);

  return 0;
}

_TtC14softposreaderd12RemoteReader *sub_1000136C8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  _TtC14softposreaderd12RemoteReader **v23;
  _TtC14softposreaderd12RemoteReader *v24;
  const char *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  _TtC14softposreaderd12RemoteReader *v33;
  uint64_t v34;
  SEL v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  SEL v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  uint64_t v54;

  v7 = v3 + 4;
  v9 = v3[7];
  v8 = v3[8];
  sub_100005EF8(v7, v9);
  v10 = sub_100140284(a1, a2, a3);
  v12 = v11;
  v13 = sub_100003A2C((uint64_t *)&unk_1001AE460);
  v14 = sub_10001A4F4(&qword_1001ADA08, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  sub_1000BC0E8(v10, v12, v9, v13, v8, v14);
  sub_100005DE0(v10, v12);
  v22 = *(_QWORD *)(v54 + 16);
  if (!v22)
  {
    v24 = &_swiftEmptyArrayStorage;
    goto LABEL_20;
  }
  type metadata accessor for SecCertificate(0);
  swift_bridgeObjectRetain();
  v23 = (_TtC14softposreaderd12RemoteReader **)(v54 + 40);
  v24 = &_swiftEmptyArrayStorage;
  do
  {
    v32 = (uint64_t)*(v23 - 1);
    v33 = *v23;
    swift_bridgeObjectRetain();
    v34 = (uint64_t)static SecCertificateRef.parseList(pemRepresentation:)(v32, v33);
    swift_bridgeObjectRelease(v33, v35, v36, v37, v38, v39, v40, v41);
    if (v34)
    {
      if ((unint64_t)v34 >> 62)
      {
        if (v34 >= 0)
          v44 = v34 & 0xFFFFFFFFFFFFFF8;
        else
          v44 = v34;
        swift_bridgeObjectRetain();
        v45 = _CocoaArrayWrapper.endIndex.getter(v44);
        swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v34, v46, v47, v48, v49, v50, v51, v52);
        if (!v45)
        {
LABEL_3:
          swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v34, v25, v26, v27, v28, v29, v30, v31);
          goto LABEL_4;
        }
      }
      else if (!*(_QWORD *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_3;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v24) & 1) == 0)
        v24 = sub_10009104C(0, *(_QWORD *)&v24->instance[8] + 1, 1, (uint64_t)v24, v28, v29, v30, v31);
      v43 = *(_QWORD *)&v24->instance[8];
      v42 = *(_QWORD *)&v24->instance[16];
      if (v43 >= v42 >> 1)
        v24 = sub_10009104C((_TtC14softposreaderd12RemoteReader *)(v42 > 1), v43 + 1, 1, (uint64_t)v24, v28, v29, v30, v31);
      *(_QWORD *)&v24->instance[8] = v43 + 1;
      *(_QWORD *)&v24->instance[8 * v43 + 24] = v34;
    }
LABEL_4:
    v23 += 2;
    --v22;
  }
  while (v22);
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v54, v25, v26, v27, v28, v29, v30, v31);
LABEL_20:
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v54, v15, v16, v17, v18, v19, v20, v21);
  return v24;
}

uint64_t sub_100013A48(const char *a1, uint64_t a2, _TtC14softposreaderd12RemoteReader *a3, uint64_t a4, _TtC14softposreaderd12RemoteReader *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t result;
  unint64_t v21;
  __SecKey *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __SecKey *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  __SecKey *v32;
  const __CFData *isa;
  const __CFData *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  const char *v41;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v8 = v7;
  if (qword_1001ACE48 != -1)
    swift_once(&qword_1001ACE48, sub_10000CF18);
  v13 = type metadata accessor for Logger(0);
  sub_100003A14(v13, (uint64_t)qword_1001ACE50);
  v14 = swift_bridgeObjectRetain_n(a3, 2);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v41 = a1;
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v49 = v18;
    *(_DWORD *)v17 = 136315138;
    swift_bridgeObjectRetain();
    v47 = sub_1000056EC(a2, (unint64_t)a3, &v49);
    v8 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease_n(a3, 3);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "CertificateManager.verifySignature for %s certificate", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    v19 = v17;
    a1 = v41;
    swift_slowDealloc(v19, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
  }
  swift_bridgeObjectRetain();
  result = sub_100019F00(a4, a5);
  if (!v8)
  {
    v24 = result;
    v25 = v21;
    v26 = v23;
    v27 = v22;
    Data.sha256Digest.getter(a6, a7);
    v44 = v28;
    v30 = v29;
    v31 = (void *)a2;
    v46 = v26;
    v32 = sub_100013E3C(a1, v31, a3, v24, v25, v27, v26);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v34 = Data._bridgeToObjectiveC()().super.isa;
    LODWORD(v26) = SecKeyVerifySignature(v32, kSecKeyAlgorithmECDSASignatureDigestX962SHA256, isa, v34, 0);

    if ((_DWORD)v26)
    {

      v36 = v44;
    }
    else
    {
      v37 = Logger.logObject.getter(v35);
      v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, v38))
      {
        v39 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v39 = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Signature verification failed", v39, 2u);
        swift_slowDealloc(v39, -1, -1);
      }

      v40 = sub_10002460C(10009, 0xD00000000000001CLL, (void *)0x8000000100168540, 0);
      swift_willThrow(v40);

      v36 = v44;
    }
    sub_100005DE0(v36, v30);
    sub_100005DE0(v24, v25);
    return sub_100005DE0((uint64_t)v27, v46);
  }
  return result;
}

__SecKey *sub_100013E3C(const char *a1, void *a2, _TtC14softposreaderd12RemoteReader *a3, uint64_t a4, unint64_t a5, __SecKey *a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  Swift::String v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  _TtC14softposreaderd12RemoteReader *v27;
  const char *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  _TtC14softposreaderd12RemoteReader *v35;
  uint64_t v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  const char *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  char v54;
  uint64_t v56;
  void *v57;
  id v58;
  void *v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  const char *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  CFDataRef v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  const char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v90;
  uint64_t __s2;
  char v92;
  uint64_t __s1;

  v8 = v7;
  if (qword_1001ACE48 != -1)
    swift_once(&qword_1001ACE48, sub_10000CF18);
  v14 = type metadata accessor for Logger(0);
  sub_100003A14(v14, (uint64_t)qword_1001ACE50);
  sub_100005D9C(a4, a5);
  sub_100005D9C((uint64_t)a6, a7);
  sub_100005D9C(a4, a5);
  v15 = sub_100005D9C((uint64_t)a6, a7);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v90 = a7;
    v18 = swift_slowAlloc(22, -1);
    v87 = swift_slowAlloc(64, -1);
    __s1 = v87;
    *(_DWORD *)v18 = 136315394;
    __s2 = sub_1000056EC(0xD000000000000021, 0x8000000100168600, &__s1);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&__s2, &v92, v18 + 4, v18 + 12);
    *(_WORD *)(v18 + 12) = 2080;
    v19 = Data.hexString()();
    __s2 = sub_1000056EC(v19._countAndFlagsBits, (unint64_t)v19._object, &__s1);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&__s2, &v92, v18 + 14, v18 + 22);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v19._object, v20, v21, v22, v23, v24, v25, v26);
    sub_100005DE0(a4, a5);
    sub_100005DE0((uint64_t)a6, v90);
    sub_100005DE0(a4, a5);
    sub_100005DE0((uint64_t)a6, v90);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s token.keyIdentifier: %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v87, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v87, -1, -1);
    v8 = v7;
    swift_slowDealloc(v18, -1, -1);
  }
  else
  {
    sub_100005DE0(a4, a5);
    sub_100005DE0((uint64_t)a6, a7);
    sub_100005DE0(a4, a5);
    sub_100005DE0((uint64_t)a6, a7);
  }

  v27 = sub_1000136C8((uint64_t)a1, (uint64_t)a2, (unint64_t)a3);
  if (!v27)
    goto LABEL_12;
  v35 = v27;
  if (!*(_QWORD *)&v27->instance[8])
  {
    swift_bridgeObjectRelease(v27, v28, v29, v30, v31, v32, v33, v34);
LABEL_12:
    v51 = sub_10001A488();
    v52 = swift_allocError(&type metadata for CertificateManagerError, v51, 0, 0);
    v54 = 1;
LABEL_13:
    *v53 = v54;
    swift_willThrow(v52);
    return a6;
  }
  v36 = sub_10000E990((uint64_t)v27, a1, a2, a3);
  swift_bridgeObjectRelease(v35, v37, v38, v39, v40, v41, v42, v43);
  if (!v8)
  {
    if (*(_QWORD *)(v36 + 16))
    {
      v56 = *(_QWORD *)(v36 + 32);
      if ((v56 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        v58 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v56);
      }
      else
      {
        if (!*(_QWORD *)((v56 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          JUMPOUT(0x100014B34);
        }
        v57 = *(void **)(v56 + 32);
        swift_bridgeObjectRetain();
        v58 = v57;
      }
      v59 = v58;
      a6 = SecCertificateRef.publicKey.getter();
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v56, v60, v61, v62, v63, v64, v65, v66);

      if (a6)
      {
        v74 = SecKeyCopyExternalRepresentation(a6, 0);
        if (v74)
        {
          v75 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v74);
          v77 = v76;
          Data.sha256Digest.getter(v75, v76);
          v79 = v78;
          sub_100005DE0(v75, v77);
          __asm { BR              X10 }
        }

      }
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v36, v67, v68, v69, v70, v71, v72, v73);
      v81 = Logger.logObject.getter(v85);
      v82 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v81, v82))
        goto LABEL_28;
      v83 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v83 = 0;
      v84 = "Could not get public key from certificate";
    }
    else
    {
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v36, v44, v45, v46, v47, v48, v49, v50);
      v81 = Logger.logObject.getter(v80);
      v82 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v81, v82))
      {
LABEL_28:

        v86 = sub_10001A488();
        v52 = swift_allocError(&type metadata for CertificateManagerError, v86, 0, 0);
        v54 = 3;
        goto LABEL_13;
      }
      v83 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v83 = 0;
      v84 = "No stored public key matches input token keyIdentifier";
    }
    _os_log_impl((void *)&_mh_execute_header, v81, v82, v84, v83, 2u);
    swift_slowDealloc(v83, -1, -1);
    goto LABEL_28;
  }
  return a6;
}

BOOL sub_100014C04(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_100014C1C()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100014C60()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100014C88()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_100014CC8()
{
  _BYTE *v0;

  if (*v0)
    return 0x746E65644979656BLL;
  else
    return 0x727574616E676973;
}

uint64_t sub_100014D14@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10001B288(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100014D38()
{
  return 0;
}

void sub_100014D44(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_100014D50(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001B554();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100014D78(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001B554();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100014DA0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_10001B3A8(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_100014DCC()
{
  uint64_t v0;

  sub_100005DE0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_100005D3C((_QWORD *)(v0 + 32));
  sub_100005D3C((_QWORD *)(v0 + 72));
  sub_100005D3C((_QWORD *)(v0 + 112));
  sub_100005D3C((_QWORD *)(v0 + 152));
  swift_release(*(_QWORD *)(v0 + 192));

  sub_100005D3C((_QWORD *)(v0 + 208));
  swift_release(*(_QWORD *)(v0 + 248));
  sub_100005D3C((_QWORD *)(v0 + 256));
  return v0;
}

uint64_t sub_100014E30()
{
  uint64_t v0;

  sub_100014DCC();
  return swift_deallocClassInstance(v0, 296, 7);
}

BOOL sub_100014E50(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t default argument 0 of IteratorProtocol<>.nextInteger(tag:)()
{
  return 2;
}

uint64_t variable initialization expression of CADailyLogger.lockedState()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_100003A2C(&qword_1001AD398);
  result = swift_allocObject(v0, 20, 7);
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_100014EA4(uint64_t a1)
{
  _TtC14softposreaderd12RemoteReader **v1;
  uint64_t v2;
  _TtC14softposreaderd12RemoteReader *v3;
  int64_t v4;
  int64_t v5;
  _TtC14softposreaderd12RemoteReader *isUniquelyReferenced_nonNull_native;
  const char *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  int64_t v21;
  char v22;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)&(*v1)->instance[8];
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_TtC14softposreaderd12RemoteReader *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)&v3->instance[16] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v21 = v4 + v2;
  else
    v21 = v4;
  v3 = sub_10009104C(isUniquelyReferenced_nonNull_native, v21, 1, (uint64_t)v3, v11, v12, v13, v14);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v15 = *(_QWORD *)&v3->instance[8];
  if ((*(_QWORD *)&v3->instance[16] >> 1) - v15 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v16 = (unint64_t)&v3->instance[8 * v15 + 24];
  if (a1 + 32 < v16 + 8 * v2 && v16 < a1 + 32 + 8 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v16);
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, v8, v9, v10, v11, v12, v13, v14);
    *v1 = v3;
    return;
  }
  v18 = *(_QWORD *)&v3->instance[8];
  v19 = __OFADD__(v18, v2);
  v20 = v18 + v2;
  if (!v19)
  {
    *(_QWORD *)&v3->instance[8] = v20;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v22 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v22, 1092, 0);
  __break(1u);
}

char *sub_100014FF4(char *result, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8)
{
  uint64_t *v8;
  char *v9;
  char *v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  BOOL v22;
  int64_t v23;
  char *v24;
  char v25;
  char v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;

  v11 = a2 - result;
  if (result)
    v12 = a2 - result;
  else
    v12 = 0;
  v13 = *v8;
  v14 = *(_QWORD *)(*v8 + 16);
  v15 = v14 + v12;
  if (__OFADD__(v14, v12))
  {
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v9 = a2;
  v10 = result;
  result = (char *)swift_isUniquelyReferenced_nonNull_native(*v8);
  if (!(_DWORD)result || (v16 = *(_QWORD *)(v13 + 24) >> 1, v16 < v15))
  {
    if (v14 <= v15)
      v17 = v14 + v12;
    else
      v17 = v14;
    result = (char *)sub_10009137C((_TtC14softposreaderd12RemoteReader *)result, v17, 1, v13, a5, a6, a7, a8);
    v13 = (uint64_t)result;
    v16 = *((_QWORD *)result + 3) >> 1;
  }
  v18 = *(_QWORD *)(v13 + 16);
  v19 = v16 - v18;
  v20 = 0;
  if (v10 && v9 && v10 < v9 && v16 != v18)
  {
    if (v11 >= v19)
      v20 = v16 - v18;
    else
      v20 = v11;
    if (v20 < 0)
    {
      __break(1u);
      return result;
    }
    result = (char *)memmove((void *)(v13 + v18 + 32), v10, v20);
    v10 += v20;
  }
  if (v20 < v12)
    goto LABEL_27;
  if (v20)
  {
    v21 = *(_QWORD *)(v13 + 16);
    v22 = __OFADD__(v21, v20);
    v23 = v21 + v20;
    if (v22)
    {
      __break(1u);
      goto LABEL_33;
    }
    *(_QWORD *)(v13 + 16) = v23;
  }
  if (v20 != v19)
    goto LABEL_25;
LABEL_28:
  v23 = *(_QWORD *)(v13 + 16);
  if (!v10)
  {
LABEL_33:
    if (!v9)
      goto LABEL_25;
    v10 = 0;
    goto LABEL_35;
  }
  if (!v9 || v10 != v9)
  {
LABEL_35:
    v26 = *v10;
    v24 = v10 + 1;
    v25 = v26;
    while (1)
    {
      while (1)
      {
        v27 = *(_QWORD *)(v13 + 24);
        v28 = v27 >> 1;
        v29 = v23 + 1;
        if ((uint64_t)(v27 >> 1) >= v23 + 1)
          break;
        v32 = v13;
        v33 = v23;
        result = (char *)sub_10009137C((_TtC14softposreaderd12RemoteReader *)(v27 > 1), v23 + 1, 1, v32, a5, a6, a7, a8);
        v23 = v33;
        v13 = (uint64_t)result;
        v28 = *((_QWORD *)result + 3) >> 1;
        if (v23 < v28)
          goto LABEL_39;
LABEL_36:
        *(_QWORD *)(v13 + 16) = v23;
      }
      if (v23 >= v28)
        goto LABEL_36;
LABEL_39:
      *(_BYTE *)(v13 + v23 + 32) = v25;
      if (v9 && v9 == v24)
      {
LABEL_49:
        *(_QWORD *)(v13 + 16) = v29;
        break;
      }
      v30 = 0;
      while (1)
      {
        v31 = (uint64_t)&v24[v30 + 1];
        v25 = v24[v30];
        if (~v23 + v28 == v30)
          break;
        *(_BYTE *)(v13 + v23 + 33 + v30++) = v25;
        if (v9 && (char *)v31 == v9)
        {
          v29 = v23 + v30 + 1;
          goto LABEL_49;
        }
      }
      v24 += v30 + 1;
      v23 = v28;
      *(_QWORD *)(v13 + 16) = v28;
    }
  }
LABEL_25:
  *v8 = v13;
  return result;
}

void sub_1000151F8(uint64_t a1)
{
  _TtC14softposreaderd12RemoteReader **v1;
  uint64_t v2;
  _TtC14softposreaderd12RemoteReader *v3;
  int64_t v4;
  int64_t v5;
  _TtC14softposreaderd12RemoteReader *isUniquelyReferenced_nonNull_native;
  const char *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  int64_t v21;
  char v22;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)&(*v1)->instance[8];
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_TtC14softposreaderd12RemoteReader *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)&v3->instance[16] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v21 = v4 + v2;
  else
    v21 = v4;
  v3 = sub_1000915A4(isUniquelyReferenced_nonNull_native, v21, 1, (uint64_t)v3, v11, v12, v13, v14);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v15 = *(_QWORD *)&v3->instance[8];
  if ((*(_QWORD *)&v3->instance[16] >> 1) - v15 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v16 = (unint64_t)&v3->instance[16 * v15 + 24];
  if (a1 + 32 < v16 + 16 * v2 && v16 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v16);
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, v8, v9, v10, v11, v12, v13, v14);
    *v1 = v3;
    return;
  }
  v18 = *(_QWORD *)&v3->instance[8];
  v19 = __OFADD__(v18, v2);
  v20 = v18 + v2;
  if (!v19)
  {
    *(_QWORD *)&v3->instance[8] = v20;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v22 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v22, 1092, 0);
  __break(1u);
}

void sub_100015348(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  const char *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  int64_t v30;
  char v31;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v30 = v4 + v2;
  else
    v30 = v4;
  v3 = sub_100091C24(isUniquelyReferenced_nonNull_native, v30, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v15 = *(_QWORD *)(v3 + 16);
  v16 = (*(_QWORD *)(v3 + 24) >> 1) - v15;
  v17 = type metadata accessor for KernelTokenHostConfigurationMapping(0);
  if (v16 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v18 = *(_QWORD *)(v17 - 8);
  v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v20 = *(_QWORD *)(v18 + 72);
  v21 = v3 + v19 + v20 * v15;
  v22 = a1 + v19;
  v23 = v20 * v2;
  v24 = v21 + v23;
  v25 = v22 + v23;
  if (v22 < v24 && v21 < v25)
    goto LABEL_24;
  swift_arrayInitWithCopy(v21);
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, v8, v9, v10, v11, v12, v13, v14);
    *v1 = v3;
    return;
  }
  v27 = *(_QWORD *)(v3 + 16);
  v28 = __OFADD__(v27, v2);
  v29 = v27 + v2;
  if (!v28)
  {
    *(_QWORD *)(v3 + 16) = v29;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v31 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v31, 1092, 0);
  __break(1u);
}

uint64_t variable initialization expression of Primer.lockedAttachCount()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_100003A2C(&qword_1001AD3A0);
  result = swift_allocObject(v0, 28, 7);
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

id variable initialization expression of GlobalState.condition()
{
  return objc_msgSend(objc_allocWithZone((Class)NSCondition), "init");
}

uint64_t variable initialization expression of PrimaryAccountWatcher.isSandboxAccount()
{
  return 0;
}

uint64_t variable initialization expression of PrimaryAccountWatcher.store()
{
  return 0;
}

uint64_t variable initialization expression of PrimaryAccountWatcher.changeHandler()
{
  return 0;
}

uint64_t type metadata accessor for CertificateManager()
{
  return objc_opt_self(_TtC9SPREngine18CertificateManager);
}

void type metadata accessor for DepotError(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001AD560, (uint64_t)&unk_100199720);
}

void type metadata accessor for SecureChannelError(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001AD568, (uint64_t)&unk_100199748);
}

void type metadata accessor for ConfigurationError(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001AD570, (uint64_t)&unk_100199770);
}

void type metadata accessor for JSONError(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001AD578, (uint64_t)&unk_100199798);
}

void type metadata accessor for ProviderError(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001AD580, (uint64_t)&unk_1001997C0);
}

void type metadata accessor for PersistenceError(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001AD588, (uint64_t)&unk_1001997E8);
}

void type metadata accessor for AttestationError(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001AD590, (uint64_t)&unk_100199810);
}

void type metadata accessor for PINControllerError(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001AD598, (uint64_t)&unk_100199838);
}

void type metadata accessor for ReadError(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001AD5A0, (uint64_t)&unk_100199860);
}

void type metadata accessor for ORError(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001AD5A8, (uint64_t)&unk_100199888);
}

void type metadata accessor for MonitorError(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001AD5B0, (uint64_t)&unk_1001998B0);
}

void type metadata accessor for PINAppletProxyError(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001AD5B8, (uint64_t)&unk_1001998D8);
}

void type metadata accessor for PrimerError(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001AD5C0, (uint64_t)&unk_100199900);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001AD5C8, (uint64_t)&unk_100199928);
}

uint64_t sub_100015658(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AD870, (uint64_t (*)(uint64_t))type metadata accessor for ReadError, (uint64_t)&unk_10015AFB8);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100015698(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AD870, (uint64_t (*)(uint64_t))type metadata accessor for ReadError, (uint64_t)&unk_10015AFB8);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000156D8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C((unint64_t *)&qword_1001B12D0, (uint64_t (*)(uint64_t))type metadata accessor for ReadError, (uint64_t)&unk_10015C348);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100015718(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AD8A0, (uint64_t (*)(uint64_t))type metadata accessor for ORError, (uint64_t)&unk_10015AE8C);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100015758(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AD8A0, (uint64_t (*)(uint64_t))type metadata accessor for ORError, (uint64_t)&unk_10015AE8C);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100015798(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C((unint64_t *)&qword_1001AE4B0, (uint64_t (*)(uint64_t))type metadata accessor for ORError, (uint64_t)&unk_10015C458);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

unsigned __int8 *sub_1000157D8@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_1000157E8(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

void sub_1000157FC()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t sub_100015824(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AD838, (uint64_t (*)(uint64_t))type metadata accessor for PINControllerError, (uint64_t)&unk_10015B0E4);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100015864(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AD838, (uint64_t (*)(uint64_t))type metadata accessor for PINControllerError, (uint64_t)&unk_10015B0E4);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000158A4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C((unint64_t *)&qword_1001AD868, (uint64_t (*)(uint64_t))type metadata accessor for PINControllerError, (uint64_t)&unk_10015C238);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_1000158E4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AD908, (uint64_t (*)(uint64_t))type metadata accessor for PINAppletProxyError, (uint64_t)&unk_10015AC34);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100015924(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AD908, (uint64_t (*)(uint64_t))type metadata accessor for PINAppletProxyError, (uint64_t)&unk_10015AC34);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100015964(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C((unint64_t *)&qword_1001AD938, (uint64_t (*)(uint64_t))type metadata accessor for PINAppletProxyError, (uint64_t)&unk_10015C678);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_1000159A4(uint64_t a1, uint64_t a2)
{
  return sub_100019444(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_1000159BC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AD720, (uint64_t (*)(uint64_t))type metadata accessor for ConfigurationError, (uint64_t)&unk_10015B74C);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000159FC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AD720, (uint64_t (*)(uint64_t))type metadata accessor for ConfigurationError, (uint64_t)&unk_10015B74C);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100015A3C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C((unint64_t *)&qword_1001AD750, (uint64_t (*)(uint64_t))type metadata accessor for ConfigurationError, (uint64_t)&unk_10015BC28);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100015A7C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AD758, (uint64_t (*)(uint64_t))type metadata accessor for JSONError, (uint64_t)&unk_10015B620);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100015ABC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AD758, (uint64_t (*)(uint64_t))type metadata accessor for JSONError, (uint64_t)&unk_10015B620);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100015AFC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C((unint64_t *)&qword_1001AD788, (uint64_t (*)(uint64_t))type metadata accessor for JSONError, (uint64_t)&unk_10015BD38);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100015B44(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AD6E8, (uint64_t (*)(uint64_t))type metadata accessor for SecureChannelError, (uint64_t)&unk_10015B878);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100015B84(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AD6E8, (uint64_t (*)(uint64_t))type metadata accessor for SecureChannelError, (uint64_t)&unk_10015B878);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100015BC4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C((unint64_t *)&qword_1001AD718, (uint64_t (*)(uint64_t))type metadata accessor for SecureChannelError, (uint64_t)&unk_10015BB18);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100015C04(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001ADBF8, (uint64_t (*)(uint64_t))type metadata accessor for SPRHTTPError, (uint64_t)&unk_10015D248);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100015C44(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001ADBF8, (uint64_t (*)(uint64_t))type metadata accessor for SPRHTTPError, (uint64_t)&unk_10015D248);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100015C84(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001ADBE0, (uint64_t (*)(uint64_t))type metadata accessor for SPRHTTPError, (uint64_t)&unk_10015DC70);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100015CC4(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_100015D38(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_100015DB4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5;
  return result;
}

uint64_t sub_100015DF4(uint64_t a1, uint64_t a2)
{
  return sub_100019444(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100015E00(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10015D998, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_100015E3C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10015D998, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_100015E84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000193E4(a1, a2, a3, (uint64_t)&unk_10015D998);
}

uint64_t sub_100015E90(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AD7C8, (uint64_t (*)(uint64_t))type metadata accessor for PersistenceError, (uint64_t)&unk_10015B33C);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100015ED0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AD7C8, (uint64_t (*)(uint64_t))type metadata accessor for PersistenceError, (uint64_t)&unk_10015B33C);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100015F10(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C((unint64_t *)&qword_1001AD7F8, (uint64_t (*)(uint64_t))type metadata accessor for PersistenceError, (uint64_t)&unk_10015C018);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100015F50(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AD6B0, (uint64_t (*)(uint64_t))type metadata accessor for DepotError, (uint64_t)&unk_10015B9A4);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100015F90(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AD6B0, (uint64_t (*)(uint64_t))type metadata accessor for DepotError, (uint64_t)&unk_10015B9A4);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100015FD0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C((unint64_t *)&qword_1001AD6E0, (uint64_t (*)(uint64_t))type metadata accessor for DepotError, (uint64_t)&unk_10015BA08);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100016010(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AD8D0, (uint64_t (*)(uint64_t))type metadata accessor for MonitorError, (uint64_t)&unk_10015AD60);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100016050(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AD8D0, (uint64_t (*)(uint64_t))type metadata accessor for MonitorError, (uint64_t)&unk_10015AD60);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100016090(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C((unint64_t *)&qword_1001AD900, (uint64_t (*)(uint64_t))type metadata accessor for MonitorError, (uint64_t)&unk_10015C568);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

Swift::Int sub_1000160D0()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_100016114()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_100016154(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;

  v4 = *a1;
  v5 = *a2;
  WitnessTable = swift_getWitnessTable(&unk_10015D998, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_1000161A0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;

  v4 = *a1;
  v5 = *a2;
  WitnessTable = swift_getWitnessTable(&unk_10015D17C, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_1000161EC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C((unint64_t *)&qword_1001AD750, (uint64_t (*)(uint64_t))type metadata accessor for ConfigurationError, (uint64_t)&unk_10015BC28);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10001622C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C((unint64_t *)&qword_1001AD750, (uint64_t (*)(uint64_t))type metadata accessor for ConfigurationError, (uint64_t)&unk_10015BC28);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10001626C(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F1C((unint64_t *)&qword_1001AD750, (uint64_t (*)(uint64_t))type metadata accessor for ConfigurationError, (uint64_t)&unk_10015BC28);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_1000162D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F1C((unint64_t *)&qword_1001AD750, (uint64_t (*)(uint64_t))type metadata accessor for ConfigurationError, (uint64_t)&unk_10015BC28);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100016324(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C((unint64_t *)&qword_1001B12D0, (uint64_t (*)(uint64_t))type metadata accessor for ReadError, (uint64_t)&unk_10015C348);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100016364(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C((unint64_t *)&qword_1001B12D0, (uint64_t (*)(uint64_t))type metadata accessor for ReadError, (uint64_t)&unk_10015C348);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000163A4(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F1C((unint64_t *)&qword_1001B12D0, (uint64_t (*)(uint64_t))type metadata accessor for ReadError, (uint64_t)&unk_10015C348);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100016408(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F1C((unint64_t *)&qword_1001B12D0, (uint64_t (*)(uint64_t))type metadata accessor for ReadError, (uint64_t)&unk_10015C348);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100016458(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C((unint64_t *)&qword_1001AD7F8, (uint64_t (*)(uint64_t))type metadata accessor for PersistenceError, (uint64_t)&unk_10015C018);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100016498(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C((unint64_t *)&qword_1001AD7F8, (uint64_t (*)(uint64_t))type metadata accessor for PersistenceError, (uint64_t)&unk_10015C018);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000164D8(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F1C((unint64_t *)&qword_1001AD7F8, (uint64_t (*)(uint64_t))type metadata accessor for PersistenceError, (uint64_t)&unk_10015C018);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_10001653C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F1C((unint64_t *)&qword_1001AD7F8, (uint64_t (*)(uint64_t))type metadata accessor for PersistenceError, (uint64_t)&unk_10015C018);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_10001658C()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(kORErrorDomain);
}

uint64_t sub_10001659C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C((unint64_t *)&qword_1001AE4B0, (uint64_t (*)(uint64_t))type metadata accessor for ORError, (uint64_t)&unk_10015C458);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000165DC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C((unint64_t *)&qword_1001AE4B0, (uint64_t (*)(uint64_t))type metadata accessor for ORError, (uint64_t)&unk_10015C458);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10001661C(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F1C((unint64_t *)&qword_1001AE4B0, (uint64_t (*)(uint64_t))type metadata accessor for ORError, (uint64_t)&unk_10015C458);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100016680(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F1C((unint64_t *)&qword_1001AE4B0, (uint64_t (*)(uint64_t))type metadata accessor for ORError, (uint64_t)&unk_10015C458);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000166D0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AD970, (uint64_t (*)(uint64_t))type metadata accessor for PrimerError, (uint64_t)&unk_10015C788);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100016710(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AD970, (uint64_t (*)(uint64_t))type metadata accessor for PrimerError, (uint64_t)&unk_10015C788);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100016750(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F1C(&qword_1001AD970, (uint64_t (*)(uint64_t))type metadata accessor for PrimerError, (uint64_t)&unk_10015C788);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_1000167B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F1C(&qword_1001AD970, (uint64_t (*)(uint64_t))type metadata accessor for PrimerError, (uint64_t)&unk_10015C788);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100016804(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C((unint64_t *)&qword_1001AD938, (uint64_t (*)(uint64_t))type metadata accessor for PINAppletProxyError, (uint64_t)&unk_10015C678);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100016844(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C((unint64_t *)&qword_1001AD938, (uint64_t (*)(uint64_t))type metadata accessor for PINAppletProxyError, (uint64_t)&unk_10015C678);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100016884(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F1C((unint64_t *)&qword_1001AD938, (uint64_t (*)(uint64_t))type metadata accessor for PINAppletProxyError, (uint64_t)&unk_10015C678);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_1000168E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F1C((unint64_t *)&qword_1001AD938, (uint64_t (*)(uint64_t))type metadata accessor for PINAppletProxyError, (uint64_t)&unk_10015C678);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100016938(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C((unint64_t *)&qword_1001AD900, (uint64_t (*)(uint64_t))type metadata accessor for MonitorError, (uint64_t)&unk_10015C568);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100016978(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C((unint64_t *)&qword_1001AD900, (uint64_t (*)(uint64_t))type metadata accessor for MonitorError, (uint64_t)&unk_10015C568);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000169B8(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F1C((unint64_t *)&qword_1001AD900, (uint64_t (*)(uint64_t))type metadata accessor for MonitorError, (uint64_t)&unk_10015C568);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100016A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F1C((unint64_t *)&qword_1001AD900, (uint64_t (*)(uint64_t))type metadata accessor for MonitorError, (uint64_t)&unk_10015C568);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100016A6C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C((unint64_t *)&qword_1001AD868, (uint64_t (*)(uint64_t))type metadata accessor for PINControllerError, (uint64_t)&unk_10015C238);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100016AAC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C((unint64_t *)&qword_1001AD868, (uint64_t (*)(uint64_t))type metadata accessor for PINControllerError, (uint64_t)&unk_10015C238);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100016AEC(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F1C((unint64_t *)&qword_1001AD868, (uint64_t (*)(uint64_t))type metadata accessor for PINControllerError, (uint64_t)&unk_10015C238);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100016B50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F1C((unint64_t *)&qword_1001AD868, (uint64_t (*)(uint64_t))type metadata accessor for PINControllerError, (uint64_t)&unk_10015C238);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100016BA0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AD830, (uint64_t (*)(uint64_t))type metadata accessor for AttestationError, (uint64_t)&unk_10015C128);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100016BE0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AD830, (uint64_t (*)(uint64_t))type metadata accessor for AttestationError, (uint64_t)&unk_10015C128);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100016C20(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F1C(&qword_1001AD830, (uint64_t (*)(uint64_t))type metadata accessor for AttestationError, (uint64_t)&unk_10015C128);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100016C84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F1C(&qword_1001AD830, (uint64_t (*)(uint64_t))type metadata accessor for AttestationError, (uint64_t)&unk_10015C128);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100016CD4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C((unint64_t *)&qword_1001AD788, (uint64_t (*)(uint64_t))type metadata accessor for JSONError, (uint64_t)&unk_10015BD38);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100016D14(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C((unint64_t *)&qword_1001AD788, (uint64_t (*)(uint64_t))type metadata accessor for JSONError, (uint64_t)&unk_10015BD38);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100016D54(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F1C((unint64_t *)&qword_1001AD788, (uint64_t (*)(uint64_t))type metadata accessor for JSONError, (uint64_t)&unk_10015BD38);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100016DB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F1C((unint64_t *)&qword_1001AD788, (uint64_t (*)(uint64_t))type metadata accessor for JSONError, (uint64_t)&unk_10015BD38);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100016E0C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C((unint64_t *)&qword_1001AD718, (uint64_t (*)(uint64_t))type metadata accessor for SecureChannelError, (uint64_t)&unk_10015BB18);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100016E4C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C((unint64_t *)&qword_1001AD718, (uint64_t (*)(uint64_t))type metadata accessor for SecureChannelError, (uint64_t)&unk_10015BB18);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100016E8C(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F1C((unint64_t *)&qword_1001AD718, (uint64_t (*)(uint64_t))type metadata accessor for SecureChannelError, (uint64_t)&unk_10015BB18);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100016EF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F1C((unint64_t *)&qword_1001AD718, (uint64_t (*)(uint64_t))type metadata accessor for SecureChannelError, (uint64_t)&unk_10015BB18);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100016F40()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(SPRHTTPErrorDomain);
}

uint64_t sub_100016F50(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001ADBE0, (uint64_t (*)(uint64_t))type metadata accessor for SPRHTTPError, (uint64_t)&unk_10015DC70);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100016F90(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001ADBE0, (uint64_t (*)(uint64_t))type metadata accessor for SPRHTTPError, (uint64_t)&unk_10015DC70);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100016FD0(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F1C(&qword_1001ADBE0, (uint64_t (*)(uint64_t))type metadata accessor for SPRHTTPError, (uint64_t)&unk_10015DC70);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100017034(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F1C(&qword_1001ADBE0, (uint64_t (*)(uint64_t))type metadata accessor for SPRHTTPError, (uint64_t)&unk_10015DC70);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100017084(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C((unint64_t *)&qword_1001AD6E0, (uint64_t (*)(uint64_t))type metadata accessor for DepotError, (uint64_t)&unk_10015BA08);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000170C4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C((unint64_t *)&qword_1001AD6E0, (uint64_t (*)(uint64_t))type metadata accessor for DepotError, (uint64_t)&unk_10015BA08);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100017104(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F1C((unint64_t *)&qword_1001AD6E0, (uint64_t (*)(uint64_t))type metadata accessor for DepotError, (uint64_t)&unk_10015BA08);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100017168(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F1C((unint64_t *)&qword_1001AD6E0, (uint64_t (*)(uint64_t))type metadata accessor for DepotError, (uint64_t)&unk_10015BA08);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000171B8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AD7C0, (uint64_t (*)(uint64_t))type metadata accessor for ProviderError, (uint64_t)&unk_10015BF08);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000171F8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AD7C0, (uint64_t (*)(uint64_t))type metadata accessor for ProviderError, (uint64_t)&unk_10015BF08);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100017238(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F1C(&qword_1001AD7C0, (uint64_t (*)(uint64_t))type metadata accessor for ProviderError, (uint64_t)&unk_10015BF08);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_10001729C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F1C(&qword_1001AD7C0, (uint64_t (*)(uint64_t))type metadata accessor for ProviderError, (uint64_t)&unk_10015BF08);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000172F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100005F1C(&qword_1001ADC50, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_10015D474);
  v3 = sub_100005F1C(&qword_1001ADC58, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_10015D414);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100017374(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10015DE2C, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_1000173B0(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10015DE2C, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_1000173F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000193E4(a1, a2, a3, (uint64_t)&unk_10015DE2C);
}

uint64_t sub_100017404(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10015DC04, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_100017440(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10015DC04, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_100017488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000193E4(a1, a2, a3, (uint64_t)&unk_10015DC04);
}

uint64_t sub_100017494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100005F1C((unint64_t *)&qword_1001AD750, (uint64_t (*)(uint64_t))type metadata accessor for ConfigurationError, (uint64_t)&unk_10015BC28);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_1000174EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100005F1C((unint64_t *)&qword_1001B12D0, (uint64_t (*)(uint64_t))type metadata accessor for ReadError, (uint64_t)&unk_10015C348);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100017544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100005F1C((unint64_t *)&qword_1001AD7F8, (uint64_t (*)(uint64_t))type metadata accessor for PersistenceError, (uint64_t)&unk_10015C018);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10001759C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100005F1C((unint64_t *)&qword_1001AE4B0, (uint64_t (*)(uint64_t))type metadata accessor for ORError, (uint64_t)&unk_10015C458);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_1000175F4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AD940, (uint64_t (*)(uint64_t))type metadata accessor for PrimerError, (uint64_t)&unk_10015AB08);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100017634(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AD940, (uint64_t (*)(uint64_t))type metadata accessor for PrimerError, (uint64_t)&unk_10015AB08);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100017674(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AD970, (uint64_t (*)(uint64_t))type metadata accessor for PrimerError, (uint64_t)&unk_10015C788);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_1000176B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100005F1C(&qword_1001AD970, (uint64_t (*)(uint64_t))type metadata accessor for PrimerError, (uint64_t)&unk_10015C788);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10001770C()
{
  return sub_100005F1C(&qword_1001AD5D0, (uint64_t (*)(uint64_t))type metadata accessor for PrimerError, (uint64_t)&unk_10015AA20);
}

uint64_t sub_100017738()
{
  return sub_100005F1C(&qword_1001AD5D8, (uint64_t (*)(uint64_t))type metadata accessor for PrimerError, (uint64_t)&unk_10015AA4C);
}

uint64_t sub_100017764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100005F1C((unint64_t *)&qword_1001AD938, (uint64_t (*)(uint64_t))type metadata accessor for PINAppletProxyError, (uint64_t)&unk_10015C678);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_1000177BC()
{
  return sub_100005F1C(&qword_1001AD5E0, (uint64_t (*)(uint64_t))type metadata accessor for PINAppletProxyError, (uint64_t)&unk_10015AB4C);
}

uint64_t sub_1000177E8()
{
  return sub_100005F1C(&qword_1001AD5E8, (uint64_t (*)(uint64_t))type metadata accessor for PINAppletProxyError, (uint64_t)&unk_10015AB78);
}

uint64_t sub_100017814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100005F1C((unint64_t *)&qword_1001AD900, (uint64_t (*)(uint64_t))type metadata accessor for MonitorError, (uint64_t)&unk_10015C568);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10001786C()
{
  return sub_100005F1C(&qword_1001AD5F0, (uint64_t (*)(uint64_t))type metadata accessor for MonitorError, (uint64_t)&unk_10015AC78);
}

uint64_t sub_100017898()
{
  return sub_100005F1C(&qword_1001AD5F8, (uint64_t (*)(uint64_t))type metadata accessor for MonitorError, (uint64_t)&unk_10015ACA4);
}

uint64_t sub_1000178C4()
{
  return sub_100005F1C(&qword_1001AD600, (uint64_t (*)(uint64_t))type metadata accessor for ORError, (uint64_t)&unk_10015ADA4);
}

uint64_t sub_1000178F0()
{
  return sub_100005F1C(&qword_1001AD608, (uint64_t (*)(uint64_t))type metadata accessor for ORError, (uint64_t)&unk_10015ADD0);
}

uint64_t sub_10001791C()
{
  return sub_100005F1C(&qword_1001AD610, (uint64_t (*)(uint64_t))type metadata accessor for ReadError, (uint64_t)&unk_10015AED0);
}

uint64_t sub_100017948()
{
  return sub_100005F1C(&qword_1001B1320, (uint64_t (*)(uint64_t))type metadata accessor for ReadError, (uint64_t)&unk_10015AEFC);
}

uint64_t sub_100017974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100005F1C((unint64_t *)&qword_1001AD868, (uint64_t (*)(uint64_t))type metadata accessor for PINControllerError, (uint64_t)&unk_10015C238);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_1000179CC()
{
  return sub_100005F1C(&qword_1001AD618, (uint64_t (*)(uint64_t))type metadata accessor for PINControllerError, (uint64_t)&unk_10015AFFC);
}

uint64_t sub_1000179F8()
{
  return sub_100005F1C(&qword_1001AD620, (uint64_t (*)(uint64_t))type metadata accessor for PINControllerError, (uint64_t)&unk_10015B028);
}

uint64_t sub_100017A24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100005F1C(&qword_1001ADC30, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_10015DA8C);
  v3 = sub_100005F1C(&qword_1001ADC38, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_10015DA2C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100017AA8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AD800, (uint64_t (*)(uint64_t))type metadata accessor for AttestationError, (uint64_t)&unk_10015B210);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100017AE8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AD800, (uint64_t (*)(uint64_t))type metadata accessor for AttestationError, (uint64_t)&unk_10015B210);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100017B28(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AD830, (uint64_t (*)(uint64_t))type metadata accessor for AttestationError, (uint64_t)&unk_10015C128);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100017B68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100005F1C(&qword_1001AD830, (uint64_t (*)(uint64_t))type metadata accessor for AttestationError, (uint64_t)&unk_10015C128);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100017BC0()
{
  return sub_100005F1C(&qword_1001AD628, (uint64_t (*)(uint64_t))type metadata accessor for AttestationError, (uint64_t)&unk_10015B128);
}

uint64_t sub_100017BEC()
{
  return sub_100005F1C(&qword_1001AD630, (uint64_t (*)(uint64_t))type metadata accessor for AttestationError, (uint64_t)&unk_10015B154);
}

uint64_t sub_100017C18()
{
  return sub_100005F1C(&qword_1001AD638, (uint64_t (*)(uint64_t))type metadata accessor for PersistenceError, (uint64_t)&unk_10015B254);
}

uint64_t sub_100017C44()
{
  return sub_100005F1C(&qword_1001AD640, (uint64_t (*)(uint64_t))type metadata accessor for PersistenceError, (uint64_t)&unk_10015B280);
}

uint64_t sub_100017C70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100005F1C((unint64_t *)&qword_1001AD788, (uint64_t (*)(uint64_t))type metadata accessor for JSONError, (uint64_t)&unk_10015BD38);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100017CC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100005F1C(&qword_1001ADC40, (uint64_t (*)(uint64_t))type metadata accessor for SPRConfigurationStatusKey, (uint64_t)&unk_10015D820);
  v3 = sub_100005F1C(&qword_1001ADC48, (uint64_t (*)(uint64_t))type metadata accessor for SPRConfigurationStatusKey, (uint64_t)&unk_10015D7C0);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100017D4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100005F1C((unint64_t *)&qword_1001AD718, (uint64_t (*)(uint64_t))type metadata accessor for SecureChannelError, (uint64_t)&unk_10015BB18);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100017DA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100005F1C(&qword_1001ADBE0, (uint64_t (*)(uint64_t))type metadata accessor for SPRHTTPError, (uint64_t)&unk_10015DC70);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100017DFC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_100017E40@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100017E68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100005F1C(&qword_1001ADC60, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_10015DC2C);
  v3 = sub_100005F1C(&qword_1001ADC68, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_10015D300);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100017EEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100005F1C((unint64_t *)&qword_1001AD6E0, (uint64_t (*)(uint64_t))type metadata accessor for DepotError, (uint64_t)&unk_10015BA08);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100017F44(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AD790, (uint64_t (*)(uint64_t))type metadata accessor for ProviderError, (uint64_t)&unk_10015B468);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100017F84(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AD790, (uint64_t (*)(uint64_t))type metadata accessor for ProviderError, (uint64_t)&unk_10015B468);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100017FC4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F1C(&qword_1001AD7C0, (uint64_t (*)(uint64_t))type metadata accessor for ProviderError, (uint64_t)&unk_10015BF08);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100018004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100005F1C(&qword_1001AD7C0, (uint64_t (*)(uint64_t))type metadata accessor for ProviderError, (uint64_t)&unk_10015BF08);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10001805C()
{
  return sub_100005F1C(&qword_1001AD648, (uint64_t (*)(uint64_t))type metadata accessor for ProviderError, (uint64_t)&unk_10015B380);
}

uint64_t sub_100018088()
{
  return sub_100005F1C(&qword_1001AD650, (uint64_t (*)(uint64_t))type metadata accessor for ProviderError, (uint64_t)&unk_10015B3AC);
}

uint64_t sub_1000180B4()
{
  return sub_100005F1C(&qword_1001AD658, (uint64_t (*)(uint64_t))type metadata accessor for JSONError, (uint64_t)&unk_10015B538);
}

uint64_t sub_1000180E0()
{
  return sub_100005F1C(&qword_1001AD660, (uint64_t (*)(uint64_t))type metadata accessor for JSONError, (uint64_t)&unk_10015B564);
}

uint64_t sub_10001810C()
{
  return sub_100005F1C(&qword_1001AD668, (uint64_t (*)(uint64_t))type metadata accessor for ConfigurationError, (uint64_t)&unk_10015B664);
}

uint64_t sub_100018138()
{
  return sub_100005F1C(&qword_1001AD670, (uint64_t (*)(uint64_t))type metadata accessor for ConfigurationError, (uint64_t)&unk_10015B690);
}

uint64_t sub_100018164()
{
  return sub_100005F1C(&qword_1001AD678, (uint64_t (*)(uint64_t))type metadata accessor for SecureChannelError, (uint64_t)&unk_10015B790);
}

uint64_t sub_100018190()
{
  return sub_100005F1C(&qword_1001AD680, (uint64_t (*)(uint64_t))type metadata accessor for SecureChannelError, (uint64_t)&unk_10015B7BC);
}

uint64_t sub_1000181BC()
{
  return sub_100005F1C(&qword_1001AD688, (uint64_t (*)(uint64_t))type metadata accessor for DepotError, (uint64_t)&unk_10015B8BC);
}

uint64_t sub_1000181E8()
{
  return sub_100005F1C(&qword_1001AD690, (uint64_t (*)(uint64_t))type metadata accessor for DepotError, (uint64_t)&unk_10015B8E8);
}

uint64_t sub_100018214()
{
  return sub_100005F1C(&qword_1001AD6B0, (uint64_t (*)(uint64_t))type metadata accessor for DepotError, (uint64_t)&unk_10015B9A4);
}

uint64_t sub_100018240()
{
  return sub_100005F1C(&qword_1001AD6B8, (uint64_t (*)(uint64_t))type metadata accessor for DepotError, (uint64_t)&unk_10015B970);
}

uint64_t sub_10001826C()
{
  return sub_100005F1C(&qword_1001AD6C0, (uint64_t (*)(uint64_t))type metadata accessor for DepotError, (uint64_t)&unk_10015B92C);
}

uint64_t sub_100018298()
{
  return sub_100005F1C(&qword_1001AD6C8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_13, (uint64_t)&unk_10015BAB0);
}

void _s3__C4CodeOMa_13(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001ADB38, (uint64_t)&unk_10019A050);
}

uint64_t sub_1000182D8()
{
  return sub_100005F1C(&qword_1001AD6D0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_13, (uint64_t)&unk_10015BA74);
}

uint64_t sub_100018304()
{
  return sub_100005F1C(&qword_1001AD6D8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_13, (uint64_t)&unk_10015BAEC);
}

uint64_t sub_100018330()
{
  return sub_100005F1C((unint64_t *)&qword_1001AD6E0, (uint64_t (*)(uint64_t))type metadata accessor for DepotError, (uint64_t)&unk_10015BA08);
}

uint64_t sub_10001835C()
{
  return sub_100005F1C(&qword_1001AD6E8, (uint64_t (*)(uint64_t))type metadata accessor for SecureChannelError, (uint64_t)&unk_10015B878);
}

uint64_t sub_100018388()
{
  return sub_100005F1C(&qword_1001AD6F0, (uint64_t (*)(uint64_t))type metadata accessor for SecureChannelError, (uint64_t)&unk_10015B844);
}

uint64_t sub_1000183B4()
{
  return sub_100005F1C(&qword_1001AD6F8, (uint64_t (*)(uint64_t))type metadata accessor for SecureChannelError, (uint64_t)&unk_10015B800);
}

uint64_t sub_1000183E0()
{
  return sub_100005F1C(&qword_1001AD700, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_12, (uint64_t)&unk_10015BBC0);
}

void _s3__C4CodeOMa_12(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001ADB30, (uint64_t)&unk_10019A030);
}

uint64_t sub_100018420()
{
  return sub_100005F1C(&qword_1001AD708, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_12, (uint64_t)&unk_10015BB84);
}

uint64_t sub_10001844C()
{
  return sub_100005F1C(&qword_1001AD710, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_12, (uint64_t)&unk_10015BBFC);
}

uint64_t sub_100018478()
{
  return sub_100005F1C((unint64_t *)&qword_1001AD718, (uint64_t (*)(uint64_t))type metadata accessor for SecureChannelError, (uint64_t)&unk_10015BB18);
}

uint64_t sub_1000184A4()
{
  return sub_100005F1C(&qword_1001AD720, (uint64_t (*)(uint64_t))type metadata accessor for ConfigurationError, (uint64_t)&unk_10015B74C);
}

uint64_t sub_1000184D0()
{
  return sub_100005F1C(&qword_1001AD728, (uint64_t (*)(uint64_t))type metadata accessor for ConfigurationError, (uint64_t)&unk_10015B718);
}

uint64_t sub_1000184FC()
{
  return sub_100005F1C(&qword_1001AD730, (uint64_t (*)(uint64_t))type metadata accessor for ConfigurationError, (uint64_t)&unk_10015B6D4);
}

uint64_t sub_100018528()
{
  return sub_100005F1C(&qword_1001AD738, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_11, (uint64_t)&unk_10015BCD0);
}

void _s3__C4CodeOMa_11(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001ADB28, (uint64_t)&unk_10019A010);
}

uint64_t sub_100018568()
{
  return sub_100005F1C(&qword_1001AD740, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_11, (uint64_t)&unk_10015BC94);
}

uint64_t sub_100018594()
{
  return sub_100005F1C(&qword_1001AD748, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_11, (uint64_t)&unk_10015BD0C);
}

uint64_t sub_1000185C0()
{
  return sub_100005F1C((unint64_t *)&qword_1001AD750, (uint64_t (*)(uint64_t))type metadata accessor for ConfigurationError, (uint64_t)&unk_10015BC28);
}

uint64_t sub_1000185EC()
{
  return sub_100005F1C(&qword_1001AD758, (uint64_t (*)(uint64_t))type metadata accessor for JSONError, (uint64_t)&unk_10015B620);
}

uint64_t sub_100018618()
{
  return sub_100005F1C(&qword_1001AD760, (uint64_t (*)(uint64_t))type metadata accessor for JSONError, (uint64_t)&unk_10015B5EC);
}

uint64_t sub_100018644()
{
  return sub_100005F1C(&qword_1001AD768, (uint64_t (*)(uint64_t))type metadata accessor for JSONError, (uint64_t)&unk_10015B5A8);
}

uint64_t sub_100018670()
{
  return sub_100005F1C(&qword_1001AD770, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_10, (uint64_t)&unk_10015BDE0);
}

void _s3__C4CodeOMa_10(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001ADB20, (uint64_t)&unk_100199FF0);
}

uint64_t sub_1000186B0()
{
  return sub_100005F1C(&qword_1001AD778, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_10, (uint64_t)&unk_10015BDA4);
}

uint64_t sub_1000186DC()
{
  return sub_100005F1C(&qword_1001AD780, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_10, (uint64_t)&unk_10015BE1C);
}

uint64_t sub_100018708()
{
  return sub_100005F1C((unint64_t *)&qword_1001AD788, (uint64_t (*)(uint64_t))type metadata accessor for JSONError, (uint64_t)&unk_10015BD38);
}

uint64_t sub_100018734()
{
  return sub_100005F1C(&qword_1001AD790, (uint64_t (*)(uint64_t))type metadata accessor for ProviderError, (uint64_t)&unk_10015B468);
}

uint64_t sub_100018760()
{
  return sub_100005F1C(&qword_1001AD798, (uint64_t (*)(uint64_t))type metadata accessor for ProviderError, (uint64_t)&unk_10015B434);
}

uint64_t sub_10001878C()
{
  return sub_100005F1C(&qword_1001AD7A0, (uint64_t (*)(uint64_t))type metadata accessor for ProviderError, (uint64_t)&unk_10015B3F0);
}

uint64_t sub_1000187B8()
{
  return sub_100005F1C(&qword_1001AD7A8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_9, (uint64_t)&unk_10015BFB0);
}

void _s3__C4CodeOMa_9(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001ADB18, (uint64_t)&unk_100199FD0);
}

uint64_t sub_1000187F8()
{
  return sub_100005F1C(&qword_1001AD7B0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_9, (uint64_t)&unk_10015BF74);
}

uint64_t sub_100018824()
{
  return sub_100005F1C(&qword_1001AD7B8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_9, (uint64_t)&unk_10015BFEC);
}

uint64_t sub_100018850()
{
  return sub_100005F1C(&qword_1001AD7C0, (uint64_t (*)(uint64_t))type metadata accessor for ProviderError, (uint64_t)&unk_10015BF08);
}

uint64_t sub_10001887C()
{
  return sub_100005F1C(&qword_1001AD7C8, (uint64_t (*)(uint64_t))type metadata accessor for PersistenceError, (uint64_t)&unk_10015B33C);
}

uint64_t sub_1000188A8()
{
  return sub_100005F1C(&qword_1001AD7D0, (uint64_t (*)(uint64_t))type metadata accessor for PersistenceError, (uint64_t)&unk_10015B308);
}

uint64_t sub_1000188D4()
{
  return sub_100005F1C(&qword_1001AD7D8, (uint64_t (*)(uint64_t))type metadata accessor for PersistenceError, (uint64_t)&unk_10015B2C4);
}

uint64_t sub_100018900()
{
  return sub_100005F1C((unint64_t *)&qword_1001AD7E0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_8, (uint64_t)&unk_10015C0C0);
}

void _s3__C4CodeOMa_8(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001ADB10, (uint64_t)&unk_100199FB0);
}

uint64_t sub_100018940()
{
  return sub_100005F1C(&qword_1001AD7E8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_8, (uint64_t)&unk_10015C084);
}

uint64_t sub_10001896C()
{
  return sub_100005F1C(&qword_1001AD7F0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_8, (uint64_t)&unk_10015C0FC);
}

uint64_t sub_100018998()
{
  return sub_100005F1C((unint64_t *)&qword_1001AD7F8, (uint64_t (*)(uint64_t))type metadata accessor for PersistenceError, (uint64_t)&unk_10015C018);
}

uint64_t sub_1000189C4()
{
  return sub_100005F1C(&qword_1001AD800, (uint64_t (*)(uint64_t))type metadata accessor for AttestationError, (uint64_t)&unk_10015B210);
}

uint64_t sub_1000189F0()
{
  return sub_100005F1C(&qword_1001AD808, (uint64_t (*)(uint64_t))type metadata accessor for AttestationError, (uint64_t)&unk_10015B1DC);
}

uint64_t sub_100018A1C()
{
  return sub_100005F1C(&qword_1001AD810, (uint64_t (*)(uint64_t))type metadata accessor for AttestationError, (uint64_t)&unk_10015B198);
}

uint64_t sub_100018A48()
{
  return sub_100005F1C(&qword_1001AD818, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_7, (uint64_t)&unk_10015C1D0);
}

void _s3__C4CodeOMa_7(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001ADB08, (uint64_t)&unk_100199F90);
}

uint64_t sub_100018A88()
{
  return sub_100005F1C(&qword_1001AD820, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_7, (uint64_t)&unk_10015C194);
}

uint64_t sub_100018AB4()
{
  return sub_100005F1C(&qword_1001AD828, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_7, (uint64_t)&unk_10015C20C);
}

uint64_t sub_100018AE0()
{
  return sub_100005F1C(&qword_1001AD830, (uint64_t (*)(uint64_t))type metadata accessor for AttestationError, (uint64_t)&unk_10015C128);
}

uint64_t sub_100018B0C()
{
  return sub_100005F1C(&qword_1001AD838, (uint64_t (*)(uint64_t))type metadata accessor for PINControllerError, (uint64_t)&unk_10015B0E4);
}

uint64_t sub_100018B38()
{
  return sub_100005F1C(&qword_1001AD840, (uint64_t (*)(uint64_t))type metadata accessor for PINControllerError, (uint64_t)&unk_10015B0B0);
}

uint64_t sub_100018B64()
{
  return sub_100005F1C(&qword_1001AD848, (uint64_t (*)(uint64_t))type metadata accessor for PINControllerError, (uint64_t)&unk_10015B06C);
}

uint64_t sub_100018B90()
{
  return sub_100005F1C(&qword_1001AD850, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_6, (uint64_t)&unk_10015C2E0);
}

void _s3__C4CodeOMa_6(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001ADB00, (uint64_t)&unk_100199F70);
}

uint64_t sub_100018BD0()
{
  return sub_100005F1C(&qword_1001AD858, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_6, (uint64_t)&unk_10015C2A4);
}

uint64_t sub_100018BFC()
{
  return sub_100005F1C(&qword_1001AD860, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_6, (uint64_t)&unk_10015C31C);
}

uint64_t sub_100018C28()
{
  return sub_100005F1C((unint64_t *)&qword_1001AD868, (uint64_t (*)(uint64_t))type metadata accessor for PINControllerError, (uint64_t)&unk_10015C238);
}

uint64_t sub_100018C54()
{
  return sub_100005F1C(&qword_1001AD870, (uint64_t (*)(uint64_t))type metadata accessor for ReadError, (uint64_t)&unk_10015AFB8);
}

uint64_t sub_100018C80()
{
  return sub_100005F1C(&qword_1001AD878, (uint64_t (*)(uint64_t))type metadata accessor for ReadError, (uint64_t)&unk_10015AF84);
}

uint64_t sub_100018CAC()
{
  return sub_100005F1C(&qword_1001AD880, (uint64_t (*)(uint64_t))type metadata accessor for ReadError, (uint64_t)&unk_10015AF40);
}

uint64_t sub_100018CD8()
{
  return sub_100005F1C(&qword_1001AD888, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_5, (uint64_t)&unk_10015C3F0);
}

void _s3__C4CodeOMa_5(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001ADAF8, (uint64_t)&unk_100199F50);
}

uint64_t sub_100018D18()
{
  return sub_100005F1C(&qword_1001AD890, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_5, (uint64_t)&unk_10015C3B4);
}

uint64_t sub_100018D44()
{
  return sub_100005F1C(&qword_1001AD898, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_5, (uint64_t)&unk_10015C42C);
}

uint64_t sub_100018D70()
{
  return sub_100005F1C((unint64_t *)&qword_1001B12D0, (uint64_t (*)(uint64_t))type metadata accessor for ReadError, (uint64_t)&unk_10015C348);
}

uint64_t sub_100018D9C()
{
  return sub_100005F1C(&qword_1001AD8A0, (uint64_t (*)(uint64_t))type metadata accessor for ORError, (uint64_t)&unk_10015AE8C);
}

uint64_t sub_100018DC8()
{
  return sub_100005F1C(&qword_1001AD8A8, (uint64_t (*)(uint64_t))type metadata accessor for ORError, (uint64_t)&unk_10015AE58);
}

uint64_t sub_100018DF4()
{
  return sub_100005F1C(&qword_1001AD8B0, (uint64_t (*)(uint64_t))type metadata accessor for ORError, (uint64_t)&unk_10015AE14);
}

uint64_t sub_100018E20()
{
  return sub_100005F1C(&qword_1001AD8B8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_4, (uint64_t)&unk_10015C500);
}

void _s3__C4CodeOMa_4(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001ADAF0, (uint64_t)&unk_100199F30);
}

uint64_t sub_100018E60()
{
  return sub_100005F1C(&qword_1001AD8C0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_4, (uint64_t)&unk_10015C4C4);
}

uint64_t sub_100018E8C()
{
  return sub_100005F1C(&qword_1001AD8C8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_4, (uint64_t)&unk_10015C53C);
}

uint64_t sub_100018EB8()
{
  return sub_100005F1C((unint64_t *)&qword_1001AE4B0, (uint64_t (*)(uint64_t))type metadata accessor for ORError, (uint64_t)&unk_10015C458);
}

uint64_t sub_100018EE4()
{
  return sub_100005F1C(&qword_1001AD8D0, (uint64_t (*)(uint64_t))type metadata accessor for MonitorError, (uint64_t)&unk_10015AD60);
}

uint64_t sub_100018F10()
{
  return sub_100005F1C(&qword_1001AD8D8, (uint64_t (*)(uint64_t))type metadata accessor for MonitorError, (uint64_t)&unk_10015AD2C);
}

uint64_t sub_100018F3C()
{
  return sub_100005F1C(&qword_1001AD8E0, (uint64_t (*)(uint64_t))type metadata accessor for MonitorError, (uint64_t)&unk_10015ACE8);
}

uint64_t sub_100018F68()
{
  return sub_100005F1C(&qword_1001AD8E8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_3, (uint64_t)&unk_10015C610);
}

void _s3__C4CodeOMa_3(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001ADAE8, (uint64_t)&unk_100199F10);
}

uint64_t sub_100018FA8()
{
  return sub_100005F1C(&qword_1001AD8F0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_3, (uint64_t)&unk_10015C5D4);
}

uint64_t sub_100018FD4()
{
  return sub_100005F1C(&qword_1001AD8F8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_3, (uint64_t)&unk_10015C64C);
}

uint64_t sub_100019000()
{
  return sub_100005F1C((unint64_t *)&qword_1001AD900, (uint64_t (*)(uint64_t))type metadata accessor for MonitorError, (uint64_t)&unk_10015C568);
}

uint64_t sub_10001902C()
{
  return sub_100005F1C(&qword_1001AD908, (uint64_t (*)(uint64_t))type metadata accessor for PINAppletProxyError, (uint64_t)&unk_10015AC34);
}

uint64_t sub_100019058()
{
  return sub_100005F1C(&qword_1001AD910, (uint64_t (*)(uint64_t))type metadata accessor for PINAppletProxyError, (uint64_t)&unk_10015AC00);
}

uint64_t sub_100019084()
{
  return sub_100005F1C(&qword_1001AD918, (uint64_t (*)(uint64_t))type metadata accessor for PINAppletProxyError, (uint64_t)&unk_10015ABBC);
}

uint64_t sub_1000190B0()
{
  return sub_100005F1C(&qword_1001AD920, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_2, (uint64_t)&unk_10015C720);
}

void _s3__C4CodeOMa_2(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001ADAE0, (uint64_t)&unk_100199EF0);
}

uint64_t sub_1000190F0()
{
  return sub_100005F1C(&qword_1001AD928, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_2, (uint64_t)&unk_10015C6E4);
}

uint64_t sub_10001911C()
{
  return sub_100005F1C(&qword_1001AD930, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_2, (uint64_t)&unk_10015C75C);
}

uint64_t sub_100019148()
{
  return sub_100005F1C((unint64_t *)&qword_1001AD938, (uint64_t (*)(uint64_t))type metadata accessor for PINAppletProxyError, (uint64_t)&unk_10015C678);
}

uint64_t sub_100019174()
{
  return sub_100005F1C(&qword_1001AD940, (uint64_t (*)(uint64_t))type metadata accessor for PrimerError, (uint64_t)&unk_10015AB08);
}

uint64_t sub_1000191A0()
{
  return sub_100005F1C(&qword_1001AD948, (uint64_t (*)(uint64_t))type metadata accessor for PrimerError, (uint64_t)&unk_10015AAD4);
}

uint64_t sub_1000191CC()
{
  return sub_100005F1C(&qword_1001AD950, (uint64_t (*)(uint64_t))type metadata accessor for PrimerError, (uint64_t)&unk_10015AA90);
}

uint64_t sub_1000191F8()
{
  return sub_100005F1C(&qword_1001AD958, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_1, (uint64_t)&unk_10015C830);
}

void _s3__C4CodeOMa_1(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001ADAD8, (uint64_t)&unk_100199ED0);
}

uint64_t sub_100019238()
{
  return sub_100005F1C(&qword_1001AD960, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_1, (uint64_t)&unk_10015C7F4);
}

uint64_t sub_100019264()
{
  return sub_100005F1C(&qword_1001AD968, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_1, (uint64_t)&unk_10015C86C);
}

uint64_t sub_100019290()
{
  return sub_100005F1C(&qword_1001AD970, (uint64_t (*)(uint64_t))type metadata accessor for PrimerError, (uint64_t)&unk_10015C788);
}

uint64_t sub_1000192BC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;

  v4 = *a1;
  v5 = *a2;
  WitnessTable = swift_getWitnessTable(&unk_10015DE2C, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_100019308(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;

  v4 = *a1;
  v5 = *a2;
  WitnessTable = swift_getWitnessTable(&unk_10015DC04, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_100019354(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10015D17C, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_100019390(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10015D17C, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_1000193D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000193E4(a1, a2, a3, (uint64_t)&unk_10015D17C);
}

Swift::Int sub_1000193E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8);
  WitnessTable = swift_getWitnessTable(a4, a2);
  _CFObject.hash(into:)(v8, a2, WitnessTable);
  return Hasher._finalize()();
}

uint64_t sub_100019444(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100019480(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000194C0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;
  _QWORD v6[9];

  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v0);
  v3 = v2;
  Hasher.init(_seed:)(v6);
  String.hash(into:)(v6, v1, v3);
  v4 = Hasher._finalize()();
  swift_bridgeObjectRelease(v3);
  return v4;
}

uint64_t sub_100019530(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_1000195B8(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4, __int128 *a5, uint64_t a6, __int128 *a7, uint64_t a8, _QWORD *a9)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  __int128 *v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD aBlock[6];
  __int128 v36;
  uint64_t v37;
  _UNKNOWN **v38;

  v32 = a7;
  v33 = a8;
  v30 = a5;
  v31 = a6;
  v13 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.Encoding(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for DefaultSecureTimeKeeper();
  v38 = &off_10019C0A0;
  *(_QWORD *)&v36 = a4;
  static String.Encoding.utf8.getter(v37);
  v20 = String.data(using:allowLossyConversion:)(v19, 0, 0xD00000000000001DLL, 0x8000000100168670);
  v22 = v21;
  result = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  if (v22 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    a9[2] = v20;
    a9[3] = v22;
    aBlock[4] = BitString.init(data:unusedBits:);
    aBlock[5] = 0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000043B8;
    aBlock[3] = &unk_100199A20;
    v24 = _Block_copy(aBlock);
    v34 = _swiftEmptyArrayStorage;
    v25 = sub_100005F1C((unint64_t *)&qword_1001B1260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v26 = sub_100003A2C((uint64_t *)&unk_1001AE400);
    v27 = sub_100005F5C((unint64_t *)&qword_1001B1270, (uint64_t *)&unk_1001AE400);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v26, v27, v13, v25);
    v28 = type metadata accessor for DispatchWorkItem(0);
    swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
    a9[24] = DispatchWorkItem.init(flags:block:)(v15, v24);
    sub_10001A674(a1, (uint64_t)(a9 + 4));
    sub_10001A674(a2, (uint64_t)(a9 + 14));
    sub_10001A674(a3, (uint64_t)(a9 + 19));
    sub_10001A674(&v36, (uint64_t)(a9 + 9));
    sub_10001A674(v30, (uint64_t)(a9 + 26));
    v29 = v32;
    a9[31] = v31;
    sub_10001A674(v29, (uint64_t)(a9 + 32));
    a9[25] = v33;
    return (uint64_t)a9;
  }
  return result;
}

uint64_t sub_100019824(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD v51[5];
  __int128 v52[2];
  __int128 v53;
  _QWORD v54[5];
  __int128 v55[2];
  __int128 v56[2];
  __int128 v57[3];
  _QWORD *v58;

  v49 = a6;
  v47 = a5;
  v58 = a4;
  v50 = a3;
  v45 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v45);
  v46 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v44 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[3];
  v17 = a1[4];
  v48 = a1;
  v18 = sub_100005EF8(a1, v16);
  v19 = v16;
  v20 = (uint64_t)v18;
  sub_10001CA88(v19, v17);
  if (v6)
  {
    swift_release(v47);
    sub_100005D3C(v49);
    sub_100005D3C(v50);
    sub_100005D3C(v58);
    sub_100005D3C(a2);
  }
  else
  {
    sub_100005EF8(a2, a2[3]);
    sub_100030E44((uint64_t)v56);
    v42 = a2;
    sub_100005EF8(a2, a2[3]);
    sub_1000310D4((uint64_t)v55);
    sub_100008390((uint64_t)v50, (uint64_t)v54);
    v43 = 0;
    sub_100005EF8(v58, v58[3]);
    sub_100113BC0(1);
    sub_100008390((uint64_t)v49, (uint64_t)v52);
    v21 = sub_10001A610();
    static DispatchQoS.background.getter(v21);
    v22 = v44;
    (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v44, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v10);
    v51[0] = _swiftEmptyArrayStorage;
    v23 = sub_100005F1C((unint64_t *)&qword_1001AE3E0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    v24 = sub_100003A2C((uint64_t *)&unk_1001B1250);
    v25 = sub_100005F5C((unint64_t *)&qword_1001AE3F0, (uint64_t *)&unk_1001B1250);
    v26 = v46;
    dispatch thunk of SetAlgebra.init<A>(_:)(v51, v24, v25, v45, v23);
    v27 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000013, 0x8000000100168650, v15, v26, v22, 0);
    v28 = sub_10001A64C((uint64_t)v54, v54[3]);
    __chkstk_darwin(v28);
    v30 = (uint64_t *)((char *)&v41 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v31 + 16))(v30);
    v32 = *v30;
    v33 = type metadata accessor for DefaultSecureTimeKeeper();
    v51[3] = v33;
    v51[4] = &off_10019C0A0;
    v51[0] = v32;
    v34 = type metadata accessor for CertificateManager();
    v35 = (_QWORD *)swift_allocObject(v34, 296, 7);
    v36 = sub_10001A64C((uint64_t)v51, v33);
    __chkstk_darwin(v36);
    v38 = (uint64_t *)((char *)&v41 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v39 + 16))(v38);
    v20 = sub_1000195B8(v57, v56, v55, *v38, &v53, v47, v52, v27, v35);
    sub_100005D3C(v51);
    sub_100005D3C(v54);
    sub_100005D3C(v49);
    sub_100005D3C(v50);
    sub_100005D3C(v58);
    sub_100005D3C(v42);
  }
  sub_100005D3C(v48);
  return v20;
}

uint64_t sub_100019C44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD v6[5];
  _QWORD v7[5];
  _QWORD v8[5];
  _QWORD v9[5];
  _QWORD v10[5];

  sub_1000DBA54();
  if (v1)
  {
    swift_release(a1);
  }
  else
  {
    sub_1000DBF84();
    sub_1000DC4B4();
    sub_1000DC9E4();
    v4 = sub_1000DCF14();
    sub_1000DD41C();
    v2 = sub_100019824(v10, v9, v8, v7, v4, v6);
    swift_release(a1);
  }
  return v2;
}

void sub_100019D8C(uint64_t a1, const char *a2, void *a3, void *a4, _QWORD *a5, void *a6, void *a7, void *a8)
{
  uint64_t v8;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v14;
  _TtC14softposreaderd12RemoteReader *v15;
  _TtC14softposreaderd12RemoteReader *v16;
  char v17;
  const char *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  _TtC14softposreaderd12RemoteReader *v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  _TtC14softposreaderd12RemoteReader *v39;
  _TtC14softposreaderd12RemoteReader *v40;

  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    v11 = a5;
    v12 = (unint64_t)a4;
    v14 = 0;
    v15 = &_swiftEmptyArrayStorage;
    while (v14 < *(_QWORD *)(a1 + 16))
    {
      v16 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 8 * v14 + 32);
      v39 = v16;
      swift_bridgeObjectRetain(v16);
      v17 = sub_10000EC80((uint64_t *)&v39, (uint64_t)a2, (uint64_t)a3, v12, v11);
      if (v8)
      {
        swift_release(v15);
        swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, v29, v30, v31, v32, v33, v34, v35);
        v28 = v16;
        goto LABEL_15;
      }
      if ((v17 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v15);
        v40 = v15;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_100091C60(0, *(_QWORD *)&v15->instance[8] + 1, 1);
          v15 = v40;
        }
        v27 = *(_QWORD *)&v15->instance[8];
        v26 = *(_QWORD *)&v15->instance[16];
        if (v27 >= v26 >> 1)
        {
          sub_100091C60(v26 > 1, v27 + 1, 1);
          v15 = v40;
        }
        *(_QWORD *)&v15->instance[8] = v27 + 1;
        *(_QWORD *)&v15->instance[8 * v27 + 24] = v16;
        v12 = (unint64_t)a4;
        v11 = a5;
      }
      else
      {
        swift_bridgeObjectRelease(v16, v18, v19, v20, v21, v22, v23, v24);
      }
      if (v10 == ++v14)
        goto LABEL_13;
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    v28 = (_TtC14softposreaderd12RemoteReader *)a1;
LABEL_15:
    swift_bridgeObjectRelease(v28, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_100019F00(uint64_t a1, _TtC14softposreaderd12RemoteReader *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  const char *v6;
  unint64_t v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  unint64_t v20;
  _TtC14softposreaderd12RemoteReader *v21;
  const char *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  unint64_t v65;
  const char *v66;
  const char *v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  SEL v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint8_t *v85;
  uint64_t v86;
  _TtC14softposreaderd12RemoteReader *v87;
  _TtC14softposreaderd12RemoteReader *v88;

  v3 = v2;
  v5 = Data.init(base64Encoded:options:)(a1);
  v7 = (unint64_t)v6;
  swift_bridgeObjectRelease(a2, v6, v8, v9, v10, v11, v12, v13);
  if (v7 >> 60 != 15)
  {
    type metadata accessor for JSONDecoder(0);
    v20 = sub_10001A404();
    v21 = (_TtC14softposreaderd12RemoteReader *)default argument 2 of static JSONDecoder.decodeClean<A>(_:from:userInfo:)();
    static JSONDecoder.decodeClean<A>(_:from:userInfo:)((uint64_t)&type metadata for CertificateManager.RawValidationToken, v5, v7, (uint64_t)v21, (uint64_t)&type metadata for CertificateManager.RawValidationToken, v20);
    if (v2)
    {
      swift_errorRelease();
      swift_bridgeObjectRelease(v21, v29, v30, v31, v32, v33, v34, v35);
      if (qword_1001ACE48 != -1)
        swift_once(&qword_1001ACE48, sub_10000CF18);
      v36 = type metadata accessor for Logger(0);
      v37 = sub_100003A14(v36, (uint64_t)qword_1001ACE50);
      v38 = Logger.logObject.getter(v37);
      v39 = static os_log_type_t.error.getter();
      v3 = v39;
      if (os_log_type_enabled(v38, v39))
      {
        v40 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v40 = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v3, "ValidationToken.init: Input not decodable to JSON", v40, 2u);
        swift_slowDealloc(v40, -1, -1);
      }

      v41 = (void *)0x8000000100168580;
      v42 = 0xD00000000000001BLL;
    }
    else
    {
      swift_bridgeObjectRelease(v21, v22, v23, v24, v25, v26, v27, v28);
      swift_bridgeObjectRetain();
      v43 = Data.init(hexString:)();
      if (v44 >> 60 != 15)
      {
        v3 = v43;
        v65 = v44;
        swift_bridgeObjectRetain();
        Data.init(hexString:)();
        v67 = v66;
        swift_bridgeObjectRelease(v88, v66, v68, v69, v70, v71, v72, v73);
        swift_bridgeObjectRelease(v87, v74, v75, v76, v77, v78, v79, v80);
        if ((unint64_t)v67 >> 60 == 15)
        {
          if (qword_1001ACE48 != -1)
            swift_once(&qword_1001ACE48, sub_10000CF18);
          v81 = type metadata accessor for Logger(0);
          v82 = sub_100003A14(v81, (uint64_t)qword_1001ACE50);
          v83 = Logger.logObject.getter(v82);
          v84 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v83, v84))
          {
            v85 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v85 = 0;
            _os_log_impl((void *)&_mh_execute_header, v83, v84, "ValidationToken.init: keyIdentifier not decodable from hexString", v85, 2u);
            swift_slowDealloc(v85, -1, -1);
          }

          v86 = sub_10002460C(10005, 0xD00000000000002ALL, (void *)0x80000001001685D0, 0);
          swift_willThrow(v86);
          sub_10000A9B0(v3, v65);
        }
        goto LABEL_20;
      }
      swift_bridgeObjectRelease(v88, (SEL)v44, v45, v46, v47, v48, v49, v50);
      swift_bridgeObjectRelease(v87, v51, v52, v53, v54, v55, v56, v57);
      if (qword_1001ACE48 != -1)
        swift_once(&qword_1001ACE48, sub_10000CF18);
      v58 = type metadata accessor for Logger(0);
      v59 = sub_100003A14(v58, (uint64_t)qword_1001ACE50);
      v60 = Logger.logObject.getter(v59);
      v61 = static os_log_type_t.error.getter();
      v3 = v61;
      if (os_log_type_enabled(v60, v61))
      {
        v62 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v62 = 0;
        _os_log_impl((void *)&_mh_execute_header, v60, (os_log_type_t)v3, "ValidationToken.init: signature not decodable from hexString", v62, 2u);
        swift_slowDealloc(v62, -1, -1);
      }

      v42 = 0xD000000000000026;
      v41 = (void *)0x80000001001685A0;
    }
    v63 = sub_10002460C(10005, v42, v41, 0);
    swift_willThrow(v63);
LABEL_20:
    sub_10000A9B0(v5, v7);
    return v3;
  }
  if (qword_1001ACE48 != -1)
    swift_once(&qword_1001ACE48, sub_10000CF18);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_100003A14(v14, (uint64_t)qword_1001ACE50);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "ValidationToken.init: Input not decodable from Base64", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  v19 = sub_10002460C(10005, 0xD00000000000001FLL, (void *)0x8000000100168560, 0);
  swift_willThrow(v19);
  return v3;
}

unint64_t sub_10001A404()
{
  unint64_t result;

  result = qword_1001AD9D8;
  if (!qword_1001AD9D8)
  {
    result = swift_getWitnessTable(&unk_10015DBDC, &type metadata for CertificateManager.RawValidationToken);
    atomic_store(result, (unint64_t *)&qword_1001AD9D8);
  }
  return result;
}

uint64_t sub_10001A448(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003A2C(&qword_1001AD9E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10001A488()
{
  unint64_t result;

  result = qword_1001AD9F0;
  if (!qword_1001AD9F0)
  {
    result = swift_getWitnessTable(&unk_10015DB1C, &type metadata for CertificateManagerError);
    atomic_store(result, (unint64_t *)&qword_1001AD9F0);
  }
  return result;
}

void type metadata accessor for CFString(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001ADA48, (uint64_t)&unk_100199AB0);
}

void type metadata accessor for SecCertificate(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001ADAD0, (uint64_t)&unk_100199EA0);
}

uint64_t sub_10001A4F4(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100003A6C((uint64_t *)&unk_1001AE460);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001A554(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003A2C(&qword_1001ADA28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001A59C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10001A5C0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10001A5E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000104FC(*(_QWORD *)(v2 + 16), a2, *(double *)(v2 + 24));
}

uint64_t sub_10001A5F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001A600(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001A608()
{
  return sub_10000E358();
}

unint64_t sub_10001A610()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001B1240;
  if (!qword_1001B1240)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001B1240);
  }
  return result;
}

uint64_t sub_10001A64C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_10001A674(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void type metadata accessor for SecPolicy(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001ADA38, (uint64_t)&unk_100199A58);
}

void type metadata accessor for Name(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001ADA40, (uint64_t)&unk_100199A88);
}

_BYTE *initializeBufferWithCopyOfBuffer for CertificateManagerError(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CertificateManagerError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CertificateManagerError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_10001A7A0 + 4 * byte_10015A6E5[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10001A7D4 + 4 * byte_10015A6E0[v4]))();
}

uint64_t sub_10001A7D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001A7DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10001A7E4);
  return result;
}

uint64_t sub_10001A7F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001A7F8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_10001A7FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001A804(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001A810(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_10001A818(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CertificateManagerError()
{
  return &type metadata for CertificateManagerError;
}

void type metadata accessor for SPRConfigurationStatusKey(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001ADA50, (uint64_t)&unk_100199B70);
}

void _s3__C4CodeOMa_0(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001ADA58, (uint64_t)&unk_100199B98);
}

__n128 sub_10001A858(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t sub_10001A86C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 20))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10001A88C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 20) = v3;
  return result;
}

void type metadata accessor for Decimal(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001ADA60, (uint64_t)&unk_100199C10);
}

void type metadata accessor for SPRTransactionOutcomeStatus(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001ADA68, (uint64_t)&unk_100199C38);
}

void type metadata accessor for SPRTransactionMessage(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001ADA70, (uint64_t)&unk_100199C58);
}

void type metadata accessor for SPRTransactionCVMType(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001ADA78, (uint64_t)&unk_100199C78);
}

void type metadata accessor for SPRCardExpirationState(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001ADA80, (uint64_t)&unk_100199C98);
}

void type metadata accessor for SPRCardEffectiveState(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001ADA88, (uint64_t)&unk_100199CB8);
}

void type metadata accessor for SPRPayAppletStatus(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001ADA90, (uint64_t)&unk_100199CD8);
}

void type metadata accessor for SPRReaderMode(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001ADA98, (uint64_t)&unk_100199CF8);
}

uint64_t initializeBufferWithCopyOfBuffer for CertificateManager.RawValidationToken(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for CertificateManager.RawValidationToken(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

_QWORD *initializeWithCopy for CertificateManager.RawValidationToken(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  ((void (*)(void))swift_bridgeObjectRetain)();
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for CertificateManager.RawValidationToken(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for CertificateManager.RawValidationToken(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_QWORD *assignWithTake for CertificateManager.RawValidationToken(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for CertificateManager.RawValidationToken(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CertificateManager.RawValidationToken(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CertificateManager.RawValidationToken()
{
  return &type metadata for CertificateManager.RawValidationToken;
}

void type metadata accessor for SecKey(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001ADAA0, (uint64_t)&unk_100199D98);
}

void type metadata accessor for CFError(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001ADAA8, (uint64_t)&unk_100199DC8);
}

void type metadata accessor for SecAccessControl(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001ADAB0, (uint64_t)&unk_100199DF8);
}

void type metadata accessor for FileProtectionType(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001ADAB8, (uint64_t)&unk_100199E28);
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001ADAC0, (uint64_t)&unk_100199E50);
}

void type metadata accessor for SPRHTTPError(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001ADAC8, (uint64_t)&unk_100199E78);
}

uint64_t sub_10001ABB8()
{
  return sub_100005F1C(&qword_1001AD6D8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_13, (uint64_t)&unk_10015BAEC);
}

uint64_t sub_10001ABE4()
{
  return sub_100005F1C(&qword_1001AD710, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_12, (uint64_t)&unk_10015BBFC);
}

uint64_t sub_10001AC10()
{
  return sub_100005F1C(&qword_1001AD748, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_11, (uint64_t)&unk_10015BD0C);
}

uint64_t sub_10001AC3C()
{
  return sub_100005F1C(&qword_1001AD780, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_10, (uint64_t)&unk_10015BE1C);
}

uint64_t sub_10001AC68()
{
  return sub_100005F1C(&qword_1001AC6E0, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_10015A4E8);
}

uint64_t sub_10001AC94()
{
  return sub_100005F1C(&qword_1001AD7B8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_9, (uint64_t)&unk_10015BFEC);
}

uint64_t sub_10001ACC0()
{
  return sub_100005F1C(&qword_1001AD7F0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_8, (uint64_t)&unk_10015C0FC);
}

uint64_t sub_10001ACEC()
{
  return sub_100005F1C(&qword_1001AD828, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_7, (uint64_t)&unk_10015C20C);
}

uint64_t sub_10001AD18()
{
  return sub_100005F1C(&qword_1001AD860, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_6, (uint64_t)&unk_10015C31C);
}

uint64_t sub_10001AD44()
{
  return sub_100005F1C(&qword_1001AD898, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_5, (uint64_t)&unk_10015C42C);
}

uint64_t sub_10001AD70()
{
  return sub_100005F1C(&qword_1001AD8C8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_4, (uint64_t)&unk_10015C53C);
}

uint64_t sub_10001AD9C()
{
  return sub_100005F1C(&qword_1001ADB40, (uint64_t (*)(uint64_t))type metadata accessor for SecCertificate, (uint64_t)&unk_10015D114);
}

uint64_t sub_10001ADC8()
{
  return sub_100005F1C(&qword_1001ADB48, (uint64_t (*)(uint64_t))type metadata accessor for SecCertificate, (uint64_t)&unk_10015D13C);
}

uint64_t sub_10001ADF4()
{
  return sub_100005F1C(&qword_1001ADB50, (uint64_t (*)(uint64_t))type metadata accessor for SPRHTTPError, (uint64_t)&unk_10015D1A4);
}

uint64_t sub_10001AE20()
{
  return sub_100005F1C(&qword_1001ADB58, (uint64_t (*)(uint64_t))type metadata accessor for SPRHTTPError, (uint64_t)&unk_10015DB98);
}

uint64_t sub_10001AE4C()
{
  return sub_100005F1C(&qword_1001ADB60, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_10015D2C4);
}

uint64_t sub_10001AE78()
{
  return sub_100005F1C(&qword_1001ADB68, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_10015D298);
}

uint64_t sub_10001AEA4()
{
  return sub_100005F1C(&qword_1001ADB70, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_10015D3D8);
}

uint64_t sub_10001AED0()
{
  return sub_100005F1C(&qword_1001ADB78, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_10015D3AC);
}

uint64_t sub_10001AEFC()
{
  return sub_100005F1C(&qword_1001ADB80, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_10015D448);
}

uint64_t sub_10001AF28()
{
  return sub_100005F1C(&qword_1001ADB88, (uint64_t (*)(uint64_t))type metadata accessor for SecKey, (uint64_t)&unk_10015D504);
}

uint64_t sub_10001AF54()
{
  return sub_100005F1C(&qword_1001ADB90, (uint64_t (*)(uint64_t))type metadata accessor for SPRConfigurationStatusKey, (uint64_t)&unk_10015D784);
}

uint64_t sub_10001AF80()
{
  return sub_100005F1C(&qword_1001ADB98, (uint64_t (*)(uint64_t))type metadata accessor for SPRConfigurationStatusKey, (uint64_t)&unk_10015D758);
}

uint64_t sub_10001AFAC()
{
  return sub_100005F1C(&qword_1001ADBA0, (uint64_t (*)(uint64_t))type metadata accessor for SPRConfigurationStatusKey, (uint64_t)&unk_10015D7F4);
}

unint64_t sub_10001AFDC()
{
  unint64_t result;

  result = qword_1001ADBA8;
  if (!qword_1001ADBA8)
  {
    result = swift_getWitnessTable(&unk_10015D8F0, &type metadata for CertificateManagerError);
    atomic_store(result, (unint64_t *)&qword_1001ADBA8);
  }
  return result;
}

uint64_t sub_10001B020()
{
  return sub_100005F1C(&qword_1001ADBB0, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_10015D928);
}

uint64_t sub_10001B04C()
{
  return sub_100005F1C(&qword_1001ADBB8, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_10015D954);
}

uint64_t sub_10001B078()
{
  return sub_100005F1C(&qword_1001ADBC0, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_10015D9F0);
}

uint64_t sub_10001B0A4()
{
  return sub_100005F1C(&qword_1001ADBC8, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_10015D9C4);
}

uint64_t sub_10001B0D0()
{
  return sub_100005F1C(&qword_1001ADBD0, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_10015DA60);
}

uint64_t sub_10001B0FC()
{
  return sub_100005F1C(&qword_1001ADBD8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_10015D6F0);
}

uint64_t sub_10001B128()
{
  return sub_100005F1C(&qword_1001ADBE0, (uint64_t (*)(uint64_t))type metadata accessor for SPRHTTPError, (uint64_t)&unk_10015DC70);
}

uint64_t sub_10001B154()
{
  return sub_100005F1C(&qword_1001ADBE8, (uint64_t (*)(uint64_t))type metadata accessor for SecKey, (uint64_t)&unk_10015D52C);
}

uint64_t sub_10001B180()
{
  return sub_100005F1C(&qword_1001ADBF0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_10015D334);
}

uint64_t sub_10001B1AC()
{
  return sub_100005F1C(&qword_1001ADBF8, (uint64_t (*)(uint64_t))type metadata accessor for SPRHTTPError, (uint64_t)&unk_10015D248);
}

uint64_t sub_10001B1D8()
{
  return sub_100005F1C(&qword_1001ADC00, (uint64_t (*)(uint64_t))type metadata accessor for SPRHTTPError, (uint64_t)&unk_10015D214);
}

uint64_t sub_10001B204()
{
  return sub_100005F1C(&qword_1001ADC08, (uint64_t (*)(uint64_t))type metadata accessor for SPRHTTPError, (uint64_t)&unk_10015D1D0);
}

uint64_t sub_10001B230()
{
  return sub_100005F1C(&qword_1001ADC10, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_10015DB5C);
}

uint64_t sub_10001B25C()
{
  return sub_100005F1C(&qword_1001ADC18, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_10015D71C);
}

uint64_t sub_10001B288(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x727574616E676973 && a2 == 0xE900000000000065)
  {
    v5 = 0xE900000000000065;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x727574616E676973, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x746E65644979656BLL && a2 == 0xED00007265696669)
  {
    swift_bridgeObjectRelease(0xED00007265696669);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746E65644979656BLL, 0xED00007265696669, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10001B3A8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _TtC14softposreaderd12RemoteReader *v11;
  _TtC14softposreaderd12RemoteReader *v12;
  _TtC14softposreaderd12RemoteReader *v13;
  _TtC14softposreaderd12RemoteReader *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  char v30;
  char v31;

  v3 = sub_100003A2C(&qword_1001ADC20);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_100005EF8(a1, v7);
  v9 = sub_10001B554();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CertificateManager.RawValidationToken.CodingKeys, &type metadata for CertificateManager.RawValidationToken.CodingKeys, v9, v7, v8);
  if (v1)
  {
    sub_100005D3C(a1);
  }
  else
  {
    v31 = 0;
    v8 = KeyedDecodingContainer.decode(_:forKey:)(&v31, v3);
    v12 = v11;
    v30 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)(&v30, v3);
    v14 = v13;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    sub_100005D3C(a1);
    swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
    swift_bridgeObjectRelease(v12, v22, v23, v24, v25, v26, v27, v28);
  }
  return v8;
}

unint64_t sub_10001B554()
{
  unint64_t result;

  result = qword_1001ADC28;
  if (!qword_1001ADC28)
  {
    result = swift_getWitnessTable(&unk_10015DE58, &type metadata for CertificateManager.RawValidationToken.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001ADC28);
  }
  return result;
}

void type metadata accessor for CFData(uint64_t a1)
{
  sub_1000060CC(a1, &qword_1001ADC70, (uint64_t)&unk_10019A070);
}

uint64_t getEnumTagSinglePayload for CertificateManager.RawValidationToken.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CertificateManager.RawValidationToken.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10001B688 + 4 * byte_10015A6EF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10001B6BC + 4 * byte_10015A6EA[v4]))();
}

uint64_t sub_10001B6BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001B6C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10001B6CCLL);
  return result;
}

uint64_t sub_10001B6D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001B6E0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10001B6E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001B6EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_10001B6F8(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for CertificateManager.RawValidationToken.CodingKeys()
{
  return &type metadata for CertificateManager.RawValidationToken.CodingKeys;
}

unint64_t sub_10001B718()
{
  unint64_t result;

  result = qword_1001ADC78;
  if (!qword_1001ADC78)
  {
    result = swift_getWitnessTable(&unk_10015DD94, &type metadata for CertificateManager.RawValidationToken.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001ADC78);
  }
  return result;
}

uint64_t sub_10001B75C()
{
  return sub_100005F1C(&qword_1001ADC80, (uint64_t (*)(uint64_t))type metadata accessor for CFData, (uint64_t)&unk_10015DDBC);
}

uint64_t sub_10001B788()
{
  return sub_100005F1C(&qword_1001ADC88, (uint64_t (*)(uint64_t))type metadata accessor for CFData, (uint64_t)&unk_10015DDE8);
}

unint64_t sub_10001B7B8()
{
  unint64_t result;

  result = qword_1001ADC90;
  if (!qword_1001ADC90)
  {
    result = swift_getWitnessTable(&unk_10015DD04, &type metadata for CertificateManager.RawValidationToken.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001ADC90);
  }
  return result;
}

unint64_t sub_10001B800()
{
  unint64_t result;

  result = qword_1001ADC98;
  if (!qword_1001ADC98)
  {
    result = swift_getWitnessTable(&unk_10015DD2C, &type metadata for CertificateManager.RawValidationToken.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001ADC98);
  }
  return result;
}

_TtC14softposreaderd12RemoteReader *sub_10001B880(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _TtC14softposreaderd12RemoteReader *result;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _TtC14softposreaderd12RemoteReader *v13;
  uint64_t *v14;
  _TtC14softposreaderd12RemoteReader *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  SEL v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  result = &_swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    v4 = sub_10006DAA4(v1);
    v6 = v5;
    v7 = v1 + 64;
    result = (_TtC14softposreaderd12RemoteReader *)type metadata accessor for TLV();
    v8 = 0;
    v46 = v1 + 80;
    v49 = v1;
    v47 = v6;
    v48 = v1 + 64;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(_BYTE *)(v1 + 32))
    {
      v10 = (unint64_t)v4 >> 6;
      if ((*(_QWORD *)(v7 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4)) == 0)
        goto LABEL_22;
      if (*(_DWORD *)(v1 + 36) != v6)
        goto LABEL_23;
      v50 = v8;
      v11 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v4);
      v12 = *v11;
      v13 = (_TtC14softposreaderd12RemoteReader *)v11[1];
      v14 = (uint64_t *)(*(_QWORD *)(v1 + 56) + 16 * v4);
      v15 = (_TtC14softposreaderd12RemoteReader *)v14[1];
      v51 = *v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v52 = *(_QWORD *)TLVTag.asn1Sequence.unsafeMutableAddressor();
      v16 = sub_100003A2C((uint64_t *)&unk_1001AE490);
      v17 = swift_allocObject(v16, 48, 7);
      *(_OWORD *)(v17 + 16) = xmmword_10015DF20;
      v18 = (uint64_t *)TLVTag.asn1IA5String.unsafeMutableAddressor();
      v19 = *v18;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v17 + 32) = TLV.__allocating_init(tag:string:)(v19, v12, v13);
      v20 = *v18;
      swift_bridgeObjectRetain();
      v21 = TLV.__allocating_init(tag:string:)(v20, v51, v15);
      *(_QWORD *)(v17 + 40) = v21;
      specialized Array._endMutation()(v21);
      v22 = TLV.__allocating_init(tag:children:)(v52, v17);
      swift_bridgeObjectRelease(v15, v23, v24, v25, v26, v27, v28, v29);
      swift_bridgeObjectRelease(v13, v30, v31, v32, v33, v34, v35, v36);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v37);
      v38 = *(_QWORD *)&_swiftEmptyArrayStorage.instance[8];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v38);
      v39 = v38;
      v1 = v49;
      v40 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v39, v22);
      result = (_TtC14softposreaderd12RemoteReader *)specialized ContiguousArray._endMutation()(v40);
      v9 = 1 << *(_BYTE *)(v49 + 32);
      if (v4 >= v9)
        goto LABEL_24;
      v7 = v48;
      v41 = *(_QWORD *)(v48 + 8 * v10);
      if ((v41 & (1 << v4)) == 0)
        goto LABEL_25;
      v6 = v47;
      if (*(_DWORD *)(v49 + 36) != v47)
        goto LABEL_26;
      v42 = v41 & (-2 << (v4 & 0x3F));
      if (v42)
      {
        v9 = __clz(__rbit64(v42)) | v4 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        v43 = v10 + 1;
        v44 = (unint64_t)(v9 + 63) >> 6;
        if (v10 + 1 < v44)
        {
          v45 = *(_QWORD *)(v48 + 8 * v43);
          if (v45)
          {
LABEL_18:
            v9 = __clz(__rbit64(v45)) + (v43 << 6);
          }
          else
          {
            while (v44 - 2 != v10)
            {
              v45 = *(_QWORD *)(v46 + 8 * v10++);
              if (v45)
              {
                v43 = v10 + 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
      v8 = v50 + 1;
      v4 = v9;
      if (v50 + 1 == v2)
        return &_swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  return result;
}

uint64_t sub_10001BB50(unsigned int a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _TtC14softposreaderd12RemoteReader *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24[3];

  v4 = v3;
  v7 = sub_10001B880(a3);
  type metadata accessor for TLV();
  v23 = *(_QWORD *)TLVTag.asn1Sequence.unsafeMutableAddressor();
  v8 = sub_100003A2C((uint64_t *)&unk_1001AE490);
  v9 = swift_allocObject(v8, 64, 7);
  *(_OWORD *)(v9 + 16) = xmmword_10015DF30;
  v24[0] = a1;
  v10 = sub_100006140();
  sub_10001CA44();
  v11 = default argument 0 of IteratorProtocol<>.nextInteger(tag:)();
  *(_QWORD *)(v9 + 32) = TLV.__allocating_init<A>(tag:integer:)(v11, (uint64_t)v24, (uint64_t)&type metadata for Int, v10);
  v24[0] = 0;
  v12 = default argument 0 of IteratorProtocol<>.nextInteger(tag:)();
  *(_QWORD *)(v9 + 40) = TLV.__allocating_init<A>(tag:integer:)(v12, (uint64_t)v24, (uint64_t)&type metadata for Int, v10);
  v13 = (uint64_t *)TLVTag.asn1OctetString.unsafeMutableAddressor();
  *(_QWORD *)(v9 + 48) = TLV.__allocating_init(tag:uint64:)(*v13, a2);
  v14 = (uint64_t *)TLVTag.asn1Set.unsafeMutableAddressor();
  v15 = TLV.__allocating_init(tag:children:)(*v14, (uint64_t)v7);
  *(_QWORD *)(v9 + 56) = v15;
  v24[0] = v9;
  specialized Array._endMutation()(v15);
  v16 = TLV.__allocating_init(tag:children:)(v23, v24[0]);
  swift_beginAccess(v4 + 16, v24, 33, 0);
  v17 = swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v17);
  v18 = *(_QWORD *)(v4 + 16) & 0xFFFFFFFFFFFFFF8;
  v20 = *(_QWORD *)(v18 + 0x10);
  v19 = *(_QWORD *)(v18 + 24);
  if (v20 >= v19 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
  v21 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v16);
  specialized Array._endMutation()(v21);
  swift_endAccess(v24);
  return swift_release(v16);
}

_QWORD *sub_10001BD24()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SEL v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  _BYTE v25[24];

  v1 = (uint64_t *)(v0 + 16);
  swift_beginAccess(v0 + 16, v25, 0, 0);
  v2 = *(_QWORD *)(v0 + 16);
  if (!((unint64_t)v2 >> 62))
  {
    if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
    return 0;
  }
  if (v2 < 0)
    v7 = v2;
  else
    v7 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v8 = _CocoaArrayWrapper.endIndex.getter(v7);
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v2, v9, v10, v11, v12, v13, v14, v15);
  if (!v8)
    return 0;
LABEL_3:
  type metadata accessor for TLV();
  v3 = *(_QWORD *)TLVTag.asn1Sequence.unsafeMutableAddressor();
  v4 = *v1;
  swift_bridgeObjectRetain();
  v5 = TLV.__allocating_init(tag:children:)(v3, v4);
  v6 = *v1;
  if ((unint64_t)*v1 >> 62)
  {
    if (v6 < 0)
      v17 = *v1;
    else
      v17 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v6, v18, v19, v20, v21, v22, v23, v24);
  }
  return v5;
}

uint64_t sub_10001BE34()
{
  uint64_t v0;
  _TtC14softposreaderd12RemoteReader **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD *v34;
  _TtC14softposreaderd12RemoteReader *v35;
  SEL v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  __int128 v48;
  _BYTE v49[24];
  uint64_t v50;

  v1 = (_TtC14softposreaderd12RemoteReader **)(v0 + 16);
  swift_beginAccess(v0 + 16, v49, 1, 0);
  v2 = *(_QWORD *)(v0 + 16);
  v48 = xmmword_10015DF40;
  if ((unint64_t)v2 >> 62)
  {
    if (v2 < 0)
      v11 = v2;
    else
      v11 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v2, 2);
    result = _CocoaArrayWrapper.endIndex.getter(v11);
    v3 = result;
    if (result)
      goto LABEL_3;
LABEL_14:
    swift_bridgeObjectRelease_n(v2, 2);
    v50 = 0;
    v10 = 0xC000000000000000;
    goto LABEL_15;
  }
  v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain_n(v2, 2);
  if (!v3)
    goto LABEL_14;
LABEL_3:
  if (v3 < 1)
  {
    __break(1u);
    return result;
  }
  v5 = 0;
  do
  {
    if ((v2 & 0xC000000000000001) != 0)
    {
      v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v2);
    }
    else
    {
      v6 = *(_QWORD *)(v2 + 8 * v5 + 32);
      swift_retain();
    }
    ++v5;
    v7 = (*(uint64_t (**)(void))(*(_QWORD *)v6 + 168))();
    v9 = v8;
    Data.append(_:)();
    sub_100005DE0(v7, v9);
    swift_release(v6);
  }
  while (v3 != v5);
  swift_bridgeObjectRelease_n(v2, 2);
  v10 = *((_QWORD *)&v48 + 1);
  v50 = v48;
LABEL_15:
  v47 = v10;
  v12 = sub_100003A2C((uint64_t *)&unk_1001AE490);
  v13 = swift_allocObject(v12, 48, 7);
  *(_OWORD *)(v13 + 16) = xmmword_10015DF20;
  type metadata accessor for TLV();
  v14 = (uint64_t *)TLVTag.asn1Sequence.unsafeMutableAddressor();
  v15 = *v14;
  v16 = swift_allocObject(v12, 48, 7);
  *(_OWORD *)(v16 + 16) = xmmword_10015DF20;
  v17 = (uint64_t *)TLVTag.asn1IA5String.unsafeMutableAddressor();
  *(_QWORD *)(v16 + 32) = TLV.__allocating_init(tag:string:)(*v17, 0x65736142656D6974, (_TtC14softposreaderd12RemoteReader *)0xE800000000000000);
  v18 = TLV.__allocating_init(tag:string:)(*v17, 48, (_TtC14softposreaderd12RemoteReader *)0xE100000000000000);
  *(_QWORD *)(v16 + 40) = v18;
  *(_QWORD *)&v48 = v16;
  specialized Array._endMutation()(v18);
  *(_QWORD *)(v13 + 32) = TLV.__allocating_init(tag:children:)(v15, v16);
  v19 = *v14;
  v20 = swift_allocObject(v12, 48, 7);
  *(_OWORD *)(v20 + 16) = xmmword_10015DF20;
  *(_QWORD *)(v20 + 32) = TLV.__allocating_init(tag:string:)(*v17, 0x73656972746E65, (_TtC14softposreaderd12RemoteReader *)0xE700000000000000);
  v21 = *v17;
  v22 = Data.base64EncodedString(options:)(0);
  v23 = TLV.__allocating_init(tag:string:)(v21, v22._countAndFlagsBits, (_TtC14softposreaderd12RemoteReader *)v22._object);
  *(_QWORD *)(v20 + 40) = v23;
  specialized Array._endMutation()(v23);
  v24 = TLV.__allocating_init(tag:children:)(v19, v20);
  *(_QWORD *)(v13 + 40) = v24;
  *(_QWORD *)&v48 = v13;
  specialized Array._endMutation()(v24);
  v25 = v13;
  v26 = *v14;
  v27 = swift_allocObject(v12, 64, 7);
  *(_OWORD *)(v27 + 16) = xmmword_10015DF30;
  *(_QWORD *)&v48 = 4064001;
  v28 = sub_100006140();
  sub_10001CA44();
  v29 = default argument 0 of IteratorProtocol<>.nextInteger(tag:)();
  *(_QWORD *)(v27 + 32) = TLV.__allocating_init<A>(tag:integer:)(v29, (uint64_t)&v48, (uint64_t)&type metadata for Int, v28);
  *(_QWORD *)&v48 = 0;
  v30 = default argument 0 of IteratorProtocol<>.nextInteger(tag:)();
  *(_QWORD *)(v27 + 40) = TLV.__allocating_init<A>(tag:integer:)(v30, (uint64_t)&v48, (uint64_t)&type metadata for Int, v28);
  v31 = (uint64_t *)TLVTag.asn1OctetString.unsafeMutableAddressor();
  *(_QWORD *)(v27 + 48) = TLV.__allocating_init(tag:uint64:)(*v31, 0);
  v32 = (uint64_t *)TLVTag.asn1Set.unsafeMutableAddressor();
  v33 = TLV.__allocating_init(tag:children:)(*v32, v25);
  *(_QWORD *)(v27 + 56) = v33;
  *(_QWORD *)&v48 = v27;
  specialized Array._endMutation()(v33);
  v34 = TLV.__allocating_init(tag:children:)(v26, v48);
  v35 = *v1;
  *v1 = &_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v35, v36, v37, v38, v39, v40, v41, v42);
  swift_beginAccess(v1, &v48, 33, 0);
  v43 = swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v43);
  v45 = *(_QWORD *)(((unint64_t)*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v44 = *(_QWORD *)(((unint64_t)*v1 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v45 >= v44 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1);
  v46 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v45, v34);
  specialized Array._endMutation()(v46);
  swift_endAccess(&v48);
  swift_release(v34);
  return sub_100005DE0(v50, v47);
}

uint64_t sub_10001C28C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for MPOCVolatileMonitorLogger()
{
  return objc_opt_self(_TtC9SPREngine25MPOCVolatileMonitorLogger);
}

uint64_t sub_10001C2D0(unsigned int a1, unint64_t a2, uint64_t a3)
{
  return sub_10001BB50(a1, a2, a3);
}

_QWORD *sub_10001C2F0()
{
  return sub_10001BD24();
}

void sub_10001C310(uint64_t a1, uint64_t a2)
{
  sub_10001C6A0(a2);
}

uint64_t sub_10001C334()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = *v0;
  swift_beginAccess(v1 + 16, v4, 1, 0);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = &_swiftEmptyArrayStorage;
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10001C388()
{
  return sub_10001BE34();
}

uint64_t sub_10001C3A8(_TtC14softposreaderd12RemoteReader *a1, _TtC14softposreaderd12RemoteReader *a2)
{
  uint64_t v2;
  uint64_t *v3;
  _TtC14softposreaderd12RemoteReader *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _TtC14softposreaderd12RemoteReader *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t result;
  uint64_t v33;
  SEL v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  SEL v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  SEL v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  char v75;

  if (((unint64_t)a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v2 = (uint64_t)a2;
    v4 = a1;
    v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v7 >= (uint64_t)a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v5 < 0)
    v33 = v5;
  else
    v33 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter(v33);
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v5, v34, v35, v36, v37, v38, v39, v40);
  if (v7 < v2)
    goto LABEL_34;
LABEL_4:
  v5 = v2 - (_QWORD)v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v6 = (char *)v4 - v2;
  if (__OFSUB__(0, v5))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v7 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = v8 - v5;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v7 < 0)
      v49 = v7;
    else
      v49 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter(v49);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v7, v50, v51, v52, v53, v54, v55, v56);
    v7 = *v3;
    goto LABEL_15;
  }
LABEL_37:
  if (v7 < 0)
    v41 = v7;
  else
    v41 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v8 = _CocoaArrayWrapper.endIndex.getter(v41);
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v7, v42, v43, v44, v45, v46, v47, v48);
  v9 = (uint64_t)&v6[v8];
  if (__OFADD__(v8, v6))
    goto LABEL_42;
LABEL_8:
  v7 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *v3 = v7;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v11 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v8 = 1;
  }
  if ((unint64_t)v7 >> 62)
    goto LABEL_43;
  v12 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9)
    v12 = v9;
  swift_bridgeObjectRetain();
  v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1, v7);
  v14 = (_TtC14softposreaderd12RemoteReader *)*v3;
  *v3 = v13;
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  v11 = *v3 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v22 = v11 + 32;
  v23 = (char *)(v11 + 32 + 8 * (_QWORD)v4);
  v24 = type metadata accessor for TLV();
  v25 = (void *)swift_arrayDestroy(v23, v5, v24);
  if (!v6)
    return specialized Array._endMutation()(v25);
  v26 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v27 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
    v28 = v27 - v2;
    if (!__OFSUB__(v27, v2))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v26 < 0)
    v57 = *v3;
  else
    v57 = v26 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v58 = _CocoaArrayWrapper.endIndex.getter(v57);
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v26, v59, v60, v61, v62, v63, v64, v65);
  v28 = v58 - v2;
  if (__OFSUB__(v58, v2))
    goto LABEL_52;
LABEL_21:
  if ((v28 & 0x8000000000000000) == 0)
  {
    v29 = (char *)(v22 + 8 * v2);
    if (v4 != (_TtC14softposreaderd12RemoteReader *)v2 || v23 >= &v29[8 * v28])
      v25 = memmove(v23, v29, 8 * v28);
    v2 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v30 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
      v31 = &v6[v30];
      if (!__OFADD__(v30, v6))
      {
LABEL_27:
        *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10) = v31;
        return specialized Array._endMutation()(v25);
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v2 < 0)
      v66 = v2;
    else
      v66 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v67 = _CocoaArrayWrapper.endIndex.getter(v66);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v2, v68, v69, v70, v71, v72, v73, v74);
    v31 = &v6[v67];
    if (!__OFADD__(v67, v6))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  v75 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v75, 1046, 0);
  __break(1u);
  return result;
}

void sub_10001C6A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _TtC14softposreaderd12RemoteReader **v4;
  uint64_t v5;
  uint64_t v6;
  SEL v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  _BYTE v14[24];

  v4 = (_TtC14softposreaderd12RemoteReader **)(v1 + 16);
  swift_beginAccess(v4, v14, 33, 0);
  if (!a1)
    goto LABEL_7;
  if (a1 < 0)
  {
    __break(1u);
LABEL_9:
    if (v2 < 0)
      v6 = v2;
    else
      v6 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter(v6);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v2, v7, v8, v9, v10, v11, v12, v13);
    if (v5 < 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v2 = (uint64_t)*v4;
  if ((unint64_t)*v4 >> 62)
    goto LABEL_9;
  v5 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v5 < 0)
  {
LABEL_6:
    sub_10001C3A8(0, (_TtC14softposreaderd12RemoteReader *)a1);
LABEL_7:
    swift_endAccess(v14);
    return;
  }
LABEL_5:
  if (v5 >= a1)
    goto LABEL_6;
  __break(1u);
}

void *sub_10001C768(uint64_t a1, int64_t a2)
{
  _TtC14softposreaderd12RemoteReader **v2;
  _TtC14softposreaderd12RemoteReader *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _TtC14softposreaderd12RemoteReader *isUniquelyReferenced_nonNull_native;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int64_t v15;
  void *result;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *v2;
  v5 = *(_QWORD *)&(*v2)->instance[8];
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_TtC14softposreaderd12RemoteReader *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *(_QWORD *)&v4->instance[16] >> 1)
  {
    if (v5 <= v9)
      v15 = v5 + v8;
    else
      v15 = v5;
    v4 = sub_1000915A4(isUniquelyReferenced_nonNull_native, v15, 1, (uint64_t)v4, v11, v12, v13, v14);
  }
  result = (void *)swift_arrayDestroy(&v4->instance[16 * a1 + 24], v7, &type metadata for String);
  if (!v7)
    goto LABEL_20;
  v17 = *(_QWORD *)&v4->instance[8];
  v18 = __OFSUB__(v17, a2);
  v19 = v17 - a2;
  if (v18)
    goto LABEL_26;
  if ((v19 & 0x8000000000000000) == 0)
  {
    v20 = &v4->instance[16 * a2 + 24];
    if (a1 != a2 || &v4->instance[16 * a1 + 24] >= &v20[16 * v19])
      result = memmove(&v4->instance[16 * a1 + 24], v20, 16 * v19);
    v21 = *(_QWORD *)&v4->instance[8];
    v18 = __OFADD__(v21, v8);
    v22 = v21 - v7;
    if (!v18)
    {
      *(_QWORD *)&v4->instance[8] = v22;
LABEL_20:
      *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v23 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v23, 1046, 0);
  __break(1u);
  return result;
}

void *sub_10001C8D0(uint64_t a1, int64_t a2)
{
  _TtC14softposreaderd12RemoteReader **v2;
  _TtC14softposreaderd12RemoteReader *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _TtC14softposreaderd12RemoteReader *isUniquelyReferenced_nonNull_native;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int64_t v15;
  void *result;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *v2;
  v5 = *(_QWORD *)&(*v2)->instance[8];
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_TtC14softposreaderd12RemoteReader *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *(_QWORD *)&v4->instance[16] >> 1)
  {
    if (v5 <= v9)
      v15 = v5 + v8;
    else
      v15 = v5;
    v4 = sub_100091B04(isUniquelyReferenced_nonNull_native, v15, 1, (uint64_t)v4, v11, v12, v13, v14);
  }
  result = (void *)swift_arrayDestroy(&v4->instance[40 * a1 + 24], v7, &type metadata for ProfileKernelTokenMapping);
  if (!v7)
    goto LABEL_20;
  v17 = *(_QWORD *)&v4->instance[8];
  v18 = __OFSUB__(v17, a2);
  v19 = v17 - a2;
  if (v18)
    goto LABEL_26;
  if ((v19 & 0x8000000000000000) == 0)
  {
    v20 = &v4->instance[40 * a2 + 24];
    if (a1 != a2 || &v4->instance[40 * a1 + 24] >= &v20[40 * v19])
      result = memmove(&v4->instance[40 * a1 + 24], v20, 40 * v19);
    v21 = *(_QWORD *)&v4->instance[8];
    v18 = __OFADD__(v21, v8);
    v22 = v21 - v7;
    if (!v18)
    {
      *(_QWORD *)&v4->instance[8] = v22;
LABEL_20:
      *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v23 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v23, 1046, 0);
  __break(1u);
  return result;
}

unint64_t sub_10001CA44()
{
  unint64_t result;

  result = qword_1001ADD98;
  if (!qword_1001ADD98)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1001ADD98);
  }
  return result;
}

uint64_t sub_10001CA88(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(1, a1);
}

const char *SPRFeatures.domain.getter()
{
  return "SoftPOSReader";
}

const char *SPRFeatures.feature.getter(char a1)
{
  if ((a1 & 1) != 0)
    return "ManualSendMonitoringLogs";
  else
    return "ManualPostCADaily";
}

BOOL static SPRFeatures.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void SPRFeatures.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int SPRFeatures.hashValue.getter(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

unint64_t sub_10001CB68()
{
  unint64_t result;

  result = qword_1001ADDA0;
  if (!qword_1001ADDA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SPRFeatures, &type metadata for SPRFeatures);
    atomic_store(result, (unint64_t *)&qword_1001ADDA0);
  }
  return result;
}

const char *sub_10001CBAC()
{
  _BYTE *v0;

  if (*v0)
    return "ManualSendMonitoringLogs";
  else
    return "ManualPostCADaily";
}

uint64_t storeEnumTagSinglePayload for SPRFeatures(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10001CC28 + 4 * byte_10015DFD1[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10001CC5C + 4 * asc_10015DFCC[v4]))();
}

uint64_t sub_10001CC5C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001CC64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10001CC6CLL);
  return result;
}

uint64_t sub_10001CC78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001CC80);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10001CC84(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001CC8C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SPRFeatures()
{
  return &type metadata for SPRFeatures;
}

uint64_t sub_10001CCA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001ADDA8);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001ADDA8);
  if (qword_1001AD138 != -1)
    swift_once(&qword_1001AD138, sub_1000CC224);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4D98);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_10001CD38(_TtC14softposreaderd12RemoteReader *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  id v8;
  id v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  const char *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  unint64_t v24;
  const char *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  _TtC14softposreaderd12RemoteReader *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  SEL v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  SEL v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  SEL v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  const char *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  _TtC14softposreaderd12RemoteReader *v92;
  SEL v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  SEL v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  unint64_t v107;
  char v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  char v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char v116;
  _TtC14softposreaderd12RemoteReader *v117;
  NSString v118;
  SEL v119;
  id v120;
  id v121;
  id v122;
  id v123;
  id v124;
  id v125;
  unint64_t v126;
  char v127;
  uint64_t v128;
  unint64_t v129;
  char v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char v134;
  uint64_t v135;
  char v136;
  unint64_t v137;
  char v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  char v144;
  unint64_t v145;
  char v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  char v150;
  Class isa;
  unint64_t v152;
  char v153;
  uint64_t v154;
  unint64_t v155;
  NSString v156;
  SEL v157;
  id v158;
  id v159;
  id v160;
  id v161;
  id v162;
  id v163;
  unint64_t v164;
  char v165;
  _TtC14softposreaderd12RemoteReader *v166;
  SEL v167;
  id v168;
  id v169;
  id v170;
  id v171;
  id v172;
  id v173;
  unint64_t v174;
  char v175;
  unint64_t v176;
  char v177;
  uint64_t v178;
  unint64_t v179;
  SEL v180;
  id v181;
  id v182;
  id v183;
  id v184;
  id v185;
  id v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  char v191;
  uint64_t v192;
  unint64_t v193;
  char v194;
  unint64_t v195;
  char v196;
  unint64_t v197;
  char v198;
  uint64_t v199;
  unint64_t v200;
  NSString v201;
  SEL v202;
  id v203;
  id v204;
  id v205;
  id v206;
  id v207;
  id v208;
  unint64_t v209;
  char v210;
  unint64_t v211;
  char v212;
  uint64_t v213;
  unint64_t v214;
  char v215;
  _TtC14softposreaderd12RemoteReader *v216;
  unint64_t v217;
  char v218;
  uint64_t v219;
  NSString v220;
  SEL v221;
  id v222;
  id v223;
  id v224;
  id v225;
  id v226;
  id v227;
  const char *v228;
  void *v229;
  void *v230;
  void *v231;
  void *v232;
  void *v233;
  void *v234;
  unint64_t v235;
  char v236;
  char v237;
  Class v238;
  char v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char v246;
  char v247;
  char v248;
  char v249;
  char v250;
  char v251;
  char v252;
  char v253;
  char v254;
  char v255;
  char v256;
  unsigned int v257;
  _TtC14softposreaderd12RemoteReader *object;
  uint64_t v259;
  NSData v260;
  void *v261;
  NSData v262;
  NSData v263;
  NSArray v264;
  _TtC14softposreaderd12RemoteReader *v265;
  void *v266;
  NSString v267;
  NSData v268;
  NSData v269;
  NSData v270;
  unint64_t v271;
  Class v272;
  NSData v273;
  void *v274;
  id v275;
  uint64_t v276;
  NSData v277;
  _TtC14softposreaderd12RemoteReader *v278;
  NSString v279;
  __int128 v280;
  unint64_t v281;
  int v282;
  __int128 v283;
  _BYTE v284[20];
  __int128 v285;
  __int128 v286;
  _OWORD v287[2];
  uint64_t v288;
  unint64_t v289;

  if (!*(_QWORD *)(a2 + 16)
    || (v12 = v8, v8 = (id)a2, v13 = sub_10000ADC4(0xD00000000000001CLL, 0x8000000100168760), (a2 & 1) == 0)
    || (sub_100005D5C(*(_QWORD *)(a2 + 56) + 32 * v13, (uint64_t)&v285),
        (swift_dynamicCast(v287, &v285, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) == 0))
  {
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a2, (SEL)a2, a3, a4, a5, a6, a7, a8);
    swift_bridgeObjectRelease(a1, v42, v43, v44, v45, v46, v47, v48);
    v49 = sub_100024764(4012, 0xD000000000000020, (void *)0x8000000100168780, 0);
    swift_willThrow(v49);

    return v8;
  }
  v8 = (id)*((_QWORD *)&v287[0] + 1);
  v14 = *(_QWORD *)&v287[0];
  if (!*(_QWORD *)(a2 + 16)
    || (v281 = *((_QWORD *)&v287[0] + 1), v15 = sub_10000ADC4(0xD000000000000010, 0x80000001001687B0), (a2 & 1) == 0)
    || (sub_100005D5C(*(_QWORD *)(a2 + 56) + 32 * v15, (uint64_t)&v285),
        (swift_dynamicCast(v287, &v285, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) == 0))
  {
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a2, (SEL)a2, a3, a4, a5, a6, a7, a8);
    swift_bridgeObjectRelease(a1, v51, v52, v53, v54, v55, v56, v57);
    v58 = sub_100024764(4012, 0xD000000000000016, (void *)0x80000001001687D0, 0);
    swift_willThrow(v58);

    v59 = v14;
    v60 = (unint64_t)v8;
LABEL_20:
    sub_100005DE0(v59, v60);
    return v8;
  }
  v280 = v287[0];
  if (!*(_QWORD *)(a2 + 16))
    goto LABEL_21;
  v16 = sub_10000ADC4(0x61486B654B787274, 0xEA00000000006873);
  if ((v17 & 1) == 0)
  {
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a2, v17, v18, v19, v20, v21, v22, v23);
    swift_bridgeObjectRelease(a1, v68, v69, v70, v71, v72, v73, v74);
    v8 = (id)v281;
    goto LABEL_23;
  }
  sub_100005D5C(*(_QWORD *)(a2 + 56) + 32 * v16, (uint64_t)&v285);
  v8 = (id)v281;
  if ((swift_dynamicCast(v287, &v285, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
LABEL_21:
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a2, (SEL)a2, a3, a4, a5, a6, a7, a8);
    swift_bridgeObjectRelease(a1, v61, v62, v63, v64, v65, v66, v67);
LABEL_23:
    v75 = 0x61486B654B787274;
    v76 = (void *)0xEE006C696E206873;
LABEL_24:
    v77 = sub_100024764(4012, v75, v76, 0);
    swift_willThrow(v77);

    sub_100005DE0(v14, (unint64_t)v8);
    v60 = *((_QWORD *)&v280 + 1);
    v59 = v280;
    goto LABEL_20;
  }
  v278 = (_TtC14softposreaderd12RemoteReader *)*((_QWORD *)&v287[0] + 1);
  if (!*(_QWORD *)(a2 + 16)
    || (v24 = sub_10000ADC4(0x746361736E617274, 0xED000064496E6F69), v8 = (id)v281, (a2 & 1) == 0))
  {
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a2, (SEL)a2, a3, a4, a5, a6, a7, a8);
    swift_bridgeObjectRelease(a1, v78, v79, v80, v81, v82, v83, v84);
    v92 = v278;
LABEL_26:
    swift_bridgeObjectRelease(v92, v85, v86, v87, v88, v89, v90, v91);
    v75 = 0xD000000000000011;
    v76 = (void *)0x80000001001687F0;
    goto LABEL_24;
  }
  sub_100005D5C(*(_QWORD *)(a2 + 56) + 32 * v24, (uint64_t)&v285);
  if ((swift_dynamicCast(v287, &v285, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
    swift_bridgeObjectRelease(v278, v25, v26, v27, v28, v29, v30, v31);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a2, v93, v94, v95, v96, v97, v98, v99);
    v92 = a1;
    goto LABEL_26;
  }
  v32 = (_TtC14softposreaderd12RemoteReader *)*((_QWORD *)&v287[0] + 1);
  v33 = Data.init(hexString:)();
  if (v34 >> 60 == 15)
  {
    __break(1u);
    JUMPOUT(0x10001E28CLL);
  }
  v265 = v32;
  v288 = v33;
  v289 = v34;
  if (*(_QWORD *)(a2 + 16))
  {
    v35 = sub_10000ADC4(0x6B6361626C6C6166, 0xEE00746E756F6D41);
    if ((v36 & 1) != 0)
    {
      sub_100005D5C(*(_QWORD *)(a2 + 56) + 32 * v35, (uint64_t)&v285);
      sub_100005D2C(&v285, v287);
      sub_100005D5C((uint64_t)v287, (uint64_t)&v285);
      type metadata accessor for Decimal(0);
      swift_dynamicCast(v284, &v285, (char *)&type metadata for Any + 8, v37, 7);
      v282 = *(_DWORD *)v284;
      v283 = *(_OWORD *)&v284[4];
      v38 = objc_msgSend(objc_allocWithZone((Class)NSDecimalNumber), "initWithDecimal:", &v282);
      v275 = objc_msgSend(v38, "integerValue");

      v276 = sub_100055440((uint64_t)v275);
      v271 = v39;
      sub_10005570C(v276, v39);
      v41 = v40;
      sub_100005DE0(v276, v271);
      __asm { BR              X10 }
    }
  }
  sub_10001E54C();
  v264.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1, v100, v101, v102, v103, v104, v105, v106);
  if (*(_QWORD *)(a2 + 16)
    && (v107 = sub_10000ADC4(0x6568706943787274, 0xED0000626F6C4272), (v108 & 1) != 0)
    && (sub_100005D5C(*(_QWORD *)(a2 + 56) + 32 * v107, (uint64_t)&v285),
        swift_dynamicCast(v287, &v285, (char *)&type metadata for Any + 8, &type metadata for Data, 6)))
  {
    v110 = *((_QWORD *)&v287[0] + 1);
    v109 = *(_QWORD *)&v287[0];
  }
  else
  {
    v109 = 0;
    v110 = 0xC000000000000000;
  }
  v263.super.isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100005DE0(v109, v110);
  if (*(_QWORD *)(a2 + 16)
    && (v111 = sub_10000ADC4(0x6C4279654B787274, 0xEA0000000000626FLL), (v112 & 1) != 0)
    && (sub_100005D5C(*(_QWORD *)(a2 + 56) + 32 * v111, (uint64_t)&v285),
        swift_dynamicCast(v287, &v285, (char *)&type metadata for Any + 8, &type metadata for Data, 6)))
  {
    v114 = *((_QWORD *)&v287[0] + 1);
    v113 = *(_QWORD *)&v287[0];
  }
  else
  {
    v113 = 0;
    v114 = 0xC000000000000000;
  }
  v262.super.isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100005DE0(v113, v114);
  if (*(_QWORD *)(a2 + 16)
    && (v115 = sub_10000ADC4(0x6B726F7774656ELL, 0xE700000000000000), (v116 & 1) != 0)
    && (sub_100005D5C(*(_QWORD *)(a2 + 56) + 32 * v115, (uint64_t)&v285),
        swift_dynamicCast(v287, &v285, (char *)&type metadata for Any + 8, &type metadata for String, 6)))
  {
    v117 = (_TtC14softposreaderd12RemoteReader *)*((_QWORD *)&v287[0] + 1);
  }
  else
  {
    v117 = (_TtC14softposreaderd12RemoteReader *)0xE000000000000000;
  }
  v118 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v117, v119, v120, v121, v122, v123, v124, v125);
  v261 = v118;
  if (*(_QWORD *)(a2 + 16))
  {
    v126 = sub_10000ADC4(0x53656D6F6374756FLL, 0xED00007375746174);
    if ((v127 & 1) != 0
      && (sub_100005D5C(*(_QWORD *)(a2 + 56) + 32 * v126, (uint64_t)&v285),
          type metadata accessor for SPRTransactionOutcomeStatus(0),
          swift_dynamicCast(v287, &v285, (char *)&type metadata for Any + 8, v128, 6)))
    {
      v257 = LOBYTE(v287[0]);
    }
    else
    {
      v257 = 0;
    }
    if (*(_QWORD *)(a2 + 16))
    {
      v129 = sub_10000ADC4(0xD000000000000019, 0x8000000100168810);
      if ((v130 & 1) != 0)
      {
        sub_100005D5C(*(_QWORD *)(a2 + 56) + 32 * v129, (uint64_t)&v285);
        if (swift_dynamicCast(v287, &v285, (char *)&type metadata for Any + 8, &type metadata for Data, 6))
        {
          v132 = *((_QWORD *)&v287[0] + 1);
          v131 = *(_QWORD *)&v287[0];
          goto LABEL_54;
        }
      }
    }
  }
  else
  {
    v257 = 0;
  }
  v131 = 0;
  v132 = 0xC000000000000000;
LABEL_54:
  v260.super.isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100005DE0(v131, v132);
  if (!*(_QWORD *)(a2 + 16))
  {
    v256 = 0;
LABEL_64:
    v141 = 0;
    v142 = 0xC000000000000000;
    v255 = -1;
    goto LABEL_71;
  }
  v133 = sub_10000ADC4(0xD000000000000019, 0x8000000100168830);
  if ((v134 & 1) != 0
    && (sub_100005D5C(*(_QWORD *)(a2 + 56) + 32 * v133, (uint64_t)&v285),
        type metadata accessor for SPRTransactionMessage(0),
        swift_dynamicCast(v287, &v285, (char *)&type metadata for Any + 8, v135, 6)))
  {
    v136 = v287[0];
  }
  else
  {
    v136 = 0;
  }
  v256 = v136;
  if (!*(_QWORD *)(a2 + 16))
    goto LABEL_64;
  v137 = sub_10000ADC4(0x657079546D7663, 0xE700000000000000);
  if ((v138 & 1) != 0
    && (sub_100005D5C(*(_QWORD *)(a2 + 56) + 32 * v137, (uint64_t)&v285),
        type metadata accessor for SPRTransactionCVMType(0),
        swift_dynamicCast(v287, &v285, (char *)&type metadata for Any + 8, v139, 6)))
  {
    v140 = v287[0];
  }
  else
  {
    v140 = -1;
  }
  v255 = v140;
  if (*(_QWORD *)(a2 + 16)
    && (v143 = sub_10000ADC4(0x6C757365526D7663, 0xE900000000000074), (v144 & 1) != 0)
    && (sub_100005D5C(*(_QWORD *)(a2 + 56) + 32 * v143, (uint64_t)&v285),
        swift_dynamicCast(v287, &v285, (char *)&type metadata for Any + 8, &type metadata for Data, 6)))
  {
    v142 = *((_QWORD *)&v287[0] + 1);
    v141 = *(_QWORD *)&v287[0];
  }
  else
  {
    v141 = 0;
    v142 = 0xC000000000000000;
  }
LABEL_71:
  v277.super.isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100005DE0(v141, v142);
  if (*(_QWORD *)(a2 + 16)
    && (v145 = sub_10000ADC4(0xD000000000000014, 0x8000000100168850), (v146 & 1) != 0)
    && (sub_100005D5C(*(_QWORD *)(a2 + 56) + 32 * v145, (uint64_t)&v285),
        swift_dynamicCast(v287, &v285, (char *)&type metadata for Any + 8, &type metadata for Data, 6)))
  {
    v148 = *((_QWORD *)&v287[0] + 1);
    v147 = *(_QWORD *)&v287[0];
  }
  else
  {
    v147 = 0;
    v148 = 0xC000000000000000;
  }
  v273.super.isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100005DE0(v147, v148);
  if (*(_QWORD *)(a2 + 16) && (v149 = sub_10000ADC4(0x69757165526E6970, 0xEB00000000646572), (v150 & 1) != 0))
  {
    sub_100005D5C(*(_QWORD *)(a2 + 56) + 32 * v149, (uint64_t)&v285);
    if (swift_dynamicCast(v287, &v285, (char *)&type metadata for Any + 8, &type metadata for Bool, 6))
      v254 = v287[0];
    else
      v254 = 0;
  }
  else
  {
    v254 = 0;
  }
  isa = Data._bridgeToObjectiveC()().super.isa;
  v270.super.isa = Data._bridgeToObjectiveC()().super.isa;
  v272 = isa;
  if (*(_QWORD *)(a2 + 16)
    && (v152 = sub_10000ADC4(0xD000000000000015, 0x8000000100168870), (v153 & 1) != 0)
    && (sub_100005D5C(*(_QWORD *)(a2 + 56) + 32 * v152, (uint64_t)&v285),
        swift_dynamicCast(v287, &v285, (char *)&type metadata for Any + 8, &type metadata for Data, 6)))
  {
    v155 = *((_QWORD *)&v287[0] + 1);
    v154 = *(_QWORD *)&v287[0];
  }
  else
  {
    v154 = 0;
    v155 = 0xC000000000000000;
  }
  v269.super.isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100005DE0(v154, v155);
  v156 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v278, v157, v158, v159, v160, v161, v162, v163);
  if (*(_QWORD *)(a2 + 16)
    && (v164 = sub_10000ADC4(0x61486B654B6E6970, 0xEA00000000006873), (v165 & 1) != 0)
    && (sub_100005D5C(*(_QWORD *)(a2 + 56) + 32 * v164, (uint64_t)&v285),
        swift_dynamicCast(v287, &v285, (char *)&type metadata for Any + 8, &type metadata for String, 6)))
  {
    v166 = (_TtC14softposreaderd12RemoteReader *)*((_QWORD *)&v287[0] + 1);
  }
  else
  {
    v166 = (_TtC14softposreaderd12RemoteReader *)0xE000000000000000;
  }
  v279 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v166, v167, v168, v169, v170, v171, v172, v173);
  v274 = v156;
  if (*(_QWORD *)(a2 + 16))
  {
    v174 = sub_10000ADC4(0x7075536E69507369, 0xEE00646574726F70);
    if ((v175 & 1) != 0
      && (sub_100005D5C(*(_QWORD *)(a2 + 56) + 32 * v174, (uint64_t)&v285),
          swift_dynamicCast(v287, &v285, (char *)&type metadata for Any + 8, &type metadata for Bool, 6)))
    {
      v253 = v287[0];
    }
    else
    {
      v253 = 0;
    }
    if (*(_QWORD *)(a2 + 16))
    {
      v176 = sub_10000ADC4(0xD000000000000012, 0x8000000100168890);
      if ((v177 & 1) != 0)
      {
        sub_100005D5C(*(_QWORD *)(a2 + 56) + 32 * v176, (uint64_t)&v285);
        if (swift_dynamicCast(v287, &v285, (char *)&type metadata for Any + 8, &type metadata for Data, 6))
        {
          v179 = *((_QWORD *)&v287[0] + 1);
          v178 = *(_QWORD *)&v287[0];
          goto LABEL_102;
        }
      }
    }
  }
  else
  {
    v253 = 0;
  }
  v178 = 0;
  v179 = 0xC000000000000000;
LABEL_102:
  v268.super.isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100005DE0(v178, v179);
  v267 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v265, v180, v181, v182, v183, v184, v185, v186);
  *(_QWORD *)&v285 = a3;
  type metadata accessor for ReadError(0);
  v188 = v187;
  v189 = sub_10001E588();
  _BridgedStoredNSError.code.getter(v284, v188, v189);
  v259 = *(_QWORD *)v284;
  if (!*(_QWORD *)(a2 + 16))
  {
    v252 = 0;
LABEL_112:
    v251 = 0;
    goto LABEL_113;
  }
  v190 = sub_10000ADC4(0xD000000000000014, 0x80000001001688B0);
  if ((v191 & 1) != 0
    && (sub_100005D5C(*(_QWORD *)(a2 + 56) + 32 * v190, (uint64_t)&v285),
        type metadata accessor for SPRPayAppletStatus(0),
        swift_dynamicCast(v287, &v285, (char *)&type metadata for Any + 8, v192, 6)))
  {
    v252 = v287[0];
  }
  else
  {
    v252 = 0;
  }
  if (!*(_QWORD *)(a2 + 16))
    goto LABEL_112;
  v193 = sub_10000ADC4(0xD000000000000012, 0x80000001001688D0);
  if ((v194 & 1) != 0
    && (sub_100005D5C(*(_QWORD *)(a2 + 56) + 32 * v193, (uint64_t)&v285),
        swift_dynamicCast(v287, &v285, (char *)&type metadata for Any + 8, &type metadata for Bool, 6)))
  {
    v251 = v287[0];
  }
  else
  {
    v251 = 0;
  }
  if (!*(_QWORD *)(a2 + 16))
  {
    v247 = 0;
    goto LABEL_125;
  }
  v197 = sub_10000ADC4(0xD000000000000012, 0x80000001001688F0);
  if ((v198 & 1) == 0
    || (sub_100005D5C(*(_QWORD *)(a2 + 56) + 32 * v197, (uint64_t)&v285),
        !swift_dynamicCast(v287, &v285, (char *)&type metadata for Any + 8, &type metadata for Bool, 6)))
  {
LABEL_113:
    v247 = 0;
    if (!*(_QWORD *)(a2 + 16))
      goto LABEL_125;
    goto LABEL_114;
  }
  v247 = v287[0];
  if (!*(_QWORD *)(a2 + 16))
    goto LABEL_125;
LABEL_114:
  v195 = sub_10000ADC4(0x626C6C6146726F66, 0xEB000000006B6361);
  if ((v196 & 1) != 0)
  {
    sub_100005D5C(*(_QWORD *)(a2 + 56) + 32 * v195, (uint64_t)&v285);
    if (swift_dynamicCast(v287, &v285, (char *)&type metadata for Any + 8, &type metadata for Bool, 6))
    {
      v250 = v287[0];
      goto LABEL_126;
    }
  }
LABEL_125:
  v250 = 0;
LABEL_126:
  v199 = v288;
  v200 = v289;
  sub_100005D9C(v288, v289);
  object = (_TtC14softposreaderd12RemoteReader *)Data.hexString()()._object;
  sub_100005DE0(v199, v200);
  v201 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object, v202, v203, v204, v205, v206, v207, v208);
  v266 = v201;
  if (!*(_QWORD *)(a2 + 16))
  {
    v249 = 0;
LABEL_136:
    v248 = 0;
    goto LABEL_137;
  }
  v209 = sub_10000ADC4(0xD00000000000001DLL, 0x8000000100168910);
  if ((v210 & 1) != 0
    && (sub_100005D5C(*(_QWORD *)(a2 + 56) + 32 * v209, (uint64_t)&v285),
        swift_dynamicCast(v287, &v285, (char *)&type metadata for Any + 8, &type metadata for Bool, 6)))
  {
    v249 = v287[0];
  }
  else
  {
    v249 = 0;
  }
  if (!*(_QWORD *)(a2 + 16))
    goto LABEL_136;
  v211 = sub_10000ADC4(0xD000000000000013, 0x8000000100168930);
  if ((v212 & 1) != 0
    && (sub_100005D5C(*(_QWORD *)(a2 + 56) + 32 * v211, (uint64_t)&v285),
        type metadata accessor for SPRCardExpirationState(0),
        swift_dynamicCast(v287, &v285, (char *)&type metadata for Any + 8, v213, 6)))
  {
    v248 = v287[0];
  }
  else
  {
    v248 = 0;
  }
  if (!*(_QWORD *)(a2 + 16))
  {
    v246 = 0;
    goto LABEL_148;
  }
  v217 = sub_10000ADC4(0xD000000000000012, 0x8000000100168950);
  if ((v218 & 1) == 0
    || (sub_100005D5C(*(_QWORD *)(a2 + 56) + 32 * v217, (uint64_t)&v285),
        type metadata accessor for SPRCardEffectiveState(0),
        !swift_dynamicCast(v287, &v285, (char *)&type metadata for Any + 8, v219, 6)))
  {
LABEL_137:
    v246 = 0;
    if (!*(_QWORD *)(a2 + 16))
      goto LABEL_148;
    goto LABEL_138;
  }
  v246 = v287[0];
  if (!*(_QWORD *)(a2 + 16))
    goto LABEL_148;
LABEL_138:
  v214 = sub_10000ADC4(0x7954707041796170, 0xEA00000000006570);
  if ((v215 & 1) != 0)
  {
    sub_100005D5C(*(_QWORD *)(a2 + 56) + 32 * v214, (uint64_t)&v285);
    if (swift_dynamicCast(v287, &v285, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    {
      v216 = (_TtC14softposreaderd12RemoteReader *)*((_QWORD *)&v287[0] + 1);
      goto LABEL_149;
    }
  }
LABEL_148:
  v216 = (_TtC14softposreaderd12RemoteReader *)0xE000000000000000;
LABEL_149:
  v220 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v216, v221, v222, v223, v224, v225, v226, v227);
  if (*(_QWORD *)(a2 + 16)
    && (v235 = sub_10000ADC4(0x4641537369, 0xE500000000000000), (v228 & 1) != 0))
  {
    sub_100005D5C(*(_QWORD *)(a2 + 56) + 32 * v235, (uint64_t)&v285);
  }
  else
  {
    v285 = 0u;
    v286 = 0u;
  }
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a2, v228, v229, v230, v231, v232, v233, v234);
  if (*((_QWORD *)&v286 + 1))
  {
    v236 = v253;
    if (swift_dynamicCast(v287, &v285, (char *)&type metadata for Any + 8, &type metadata for Bool, 6))
      v237 = v287[0];
    else
      v237 = 0;
    v238 = v264.super.isa;
    v239 = v254;
  }
  else
  {
    sub_100007B30((uint64_t)&v285);
    v237 = 0;
    v238 = v264.super.isa;
    v236 = v253;
    v239 = v254;
  }
  LOBYTE(v245) = v237;
  BYTE2(v244) = v246;
  BYTE1(v244) = v248;
  LOBYTE(v244) = v249;
  BYTE3(v243) = v250;
  BYTE2(v243) = v247;
  BYTE1(v243) = v251;
  LOBYTE(v243) = v252;
  LOBYTE(v242) = v236;
  LOBYTE(v241) = v239;
  BYTE1(v240) = v255;
  LOBYTE(v240) = v256;
  v8 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v12)), "initWithVasResponses:transactionCipherBlob:transactionKeyBlob:network:outcomeStatus:errorIndicationStatusWord:errorIndicationMsgOnError:cvmType:cvmResult:merchantCategoryCode:pinRequired:kernelIdentityKeyAttestation:ecdsaCertificate:transactionResultData:kekId:pinKekId:isPinSupported:languagePreference:transactionId:readError:payAppletFinalStatus:isPINBypassEnabled:isPINBypassAllowed:forFallback:fallbackAmount:switchInterfaceOrNoCVMSuccess:cardExpirationState:cardEffectiveState:payAppType:isSAF:", v238, v263.super.isa, v262.super.isa, v261, v257, v260.super.isa, v240, v277.super.isa, v273.super.isa, v241, v272, v270.super.isa, v269.super.isa,
         v274,
         v279,
         v242,
         v268.super.isa,
         v267,
         v259,
         v243,
         v266,
         v244,
         v220,
         v245);

  sub_100005DE0(v14, v281);
  sub_100005DE0(v280, *((unint64_t *)&v280 + 1));

  sub_100005DE0(v288, v289);
  return v8;
}

id sub_10001E2AC(_TtC14softposreaderd12RemoteReader *a1, void *a2)
{
  uint64_t v2;
  SEL v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  Class v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  NSString v16;
  NSString v17;
  id v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Class v26;
  Class v27;
  NSString v28;
  NSString v29;
  Class v30;
  NSString v31;
  Class v32;
  Class v33;
  NSString v34;
  Class v35;
  Class v37;
  Class isa;
  id v39;
  Class v40;
  uint64_t v41;

  v39 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  sub_10001E54C();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1, v4, v5, v6, v7, v8, v9, v10);
  v37 = Data._bridgeToObjectiveC()().super.isa;
  v35 = Data._bridgeToObjectiveC()().super.isa;
  v34 = String._bridgeToObjectiveC()();
  v33 = Data._bridgeToObjectiveC()().super.isa;
  v32 = Data._bridgeToObjectiveC()().super.isa;
  v40 = Data._bridgeToObjectiveC()().super.isa;
  v11 = Data._bridgeToObjectiveC()().super.isa;
  v26 = Data._bridgeToObjectiveC()().super.isa;
  v27 = Data._bridgeToObjectiveC()().super.isa;
  v28 = String._bridgeToObjectiveC()();
  v29 = String._bridgeToObjectiveC()();
  v30 = Data._bridgeToObjectiveC()().super.isa;
  v31 = String._bridgeToObjectiveC()();
  type metadata accessor for ReadError(0);
  v13 = v12;
  v14 = sub_10001E588();
  _BridgedStoredNSError.code.getter(&v41, v13, v14);
  v15 = v41;
  v16 = String._bridgeToObjectiveC()();
  v17 = String._bridgeToObjectiveC()();
  LOBYTE(v25) = 0;
  BYTE2(v24) = 0;
  LOWORD(v24) = 0;
  LODWORD(v23) = 0;
  LOBYTE(v22) = 0;
  LOBYTE(v21) = 0;
  LOWORD(v20) = -256;
  v18 = objc_msgSend(v39, "initWithVasResponses:transactionCipherBlob:transactionKeyBlob:network:outcomeStatus:errorIndicationStatusWord:errorIndicationMsgOnError:cvmType:cvmResult:merchantCategoryCode:pinRequired:kernelIdentityKeyAttestation:ecdsaCertificate:transactionResultData:kekId:pinKekId:isPinSupported:languagePreference:transactionId:readError:payAppletFinalStatus:isPINBypassEnabled:isPINBypassAllowed:forFallback:fallbackAmount:switchInterfaceOrNoCVMSuccess:cardExpirationState:cardEffectiveState:payAppType:isSAF:", isa, v37, v35, v34, 0, v33, v20, v32, v40, v21, v11, v26, v27,
          v28,
          v29,
          v22,
          v30,
          v31,
          v15,
          v23,
          v16,
          v24,
          v17,
          v25);

  return v18;
}

unint64_t sub_10001E54C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001ADDC0;
  if (!qword_1001ADDC0)
  {
    v1 = objc_opt_self(SPRVASResponse);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001ADDC0);
  }
  return result;
}

unint64_t sub_10001E588()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001B12D0;
  if (!qword_1001B12D0)
  {
    type metadata accessor for ReadError(255);
    result = swift_getWitnessTable(&unk_10015C348, v1);
    atomic_store(result, (unint64_t *)&qword_1001B12D0);
  }
  return result;
}

unint64_t sub_10001E5D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001B12A0;
  if (!qword_1001B12A0)
  {
    v1 = sub_100003A6C((uint64_t *)&unk_1001AE4A0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> CollectionOfOne<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001B12A0);
  }
  return result;
}

uint64_t sub_10001E61C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[272];
  _BYTE __src[272];
  _OWORD __dst[17];

  sub_100053484((uint64_t)v13);
  sub_100024374((uint64_t)v13, (uint64_t)__src, &qword_1001AE028);
  if (sub_1000240E0((uint64_t)__src) == 1)
  {
    if (qword_1001ACFA8 != -1)
      swift_once(&qword_1001ACFA8, sub_100059398);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_100003A14(v3, (uint64_t)qword_1001B01F8);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No time token", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

    v12 = type metadata accessor for Date(0, v11);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a1, 1, 1, v12);
  }
  else
  {
    memcpy(__dst, __src, sizeof(__dst));
    sub_100023E10(__dst, (_QWORD *)(v1 + 64));
    sub_1000240F8((uint64_t)v13);
    v9 = type metadata accessor for Date(0, v8);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a1, 0, 1, v9);
  }
}

uint64_t sub_10001E934()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001ADDC8);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001ADDC8);
  if (qword_1001AD168 != -1)
    swift_once(&qword_1001AD168, sub_1000CC6D0);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4E28);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

unint64_t sub_10001E9C4()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  void *v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;

  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease(0xE000000000000000);
  v1 = v0[2];
  v2 = (void *)v0[3];
  swift_bridgeObjectRetain(v2);
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v2);
  v4._countAndFlagsBits = 0x203A656C6F72202CLL;
  v4._object = (void *)0xE800000000000000;
  String.append(_:)(v4);
  v6 = v0[5];
  v5 = (void *)v0[6];
  swift_bridgeObjectRetain(v5);
  v7._countAndFlagsBits = v6;
  v7._object = v5;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v5);
  v8._countAndFlagsBits = 41;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return 0xD000000000000011;
}

uint64_t sub_10001EAA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v41;
  uint64_t v42;

  v1 = v0;
  if (qword_1001ACE70 != -1)
    swift_once(&qword_1001ACE70, sub_10001E934);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100003A14(v2, (uint64_t)qword_1001ADDC8);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v42 = v7;
    *(_DWORD *)v6 = 136315138;
    v41 = sub_1000056EC(0x656E676953534553, 0xE900000000000072, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v6 + 4, v6 + 12);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s deinit", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }

  v8 = *(_QWORD *)(v1 + 352);
  v9 = swift_retain();
  dispatch thunk of DispatchWorkItem.cancel()(v9);
  swift_release(v8);
  v10 = *(_QWORD *)(v1 + 88);
  v11 = *(_QWORD *)(v1 + 96);
  sub_100005EF8((_QWORD *)(v1 + 64), v10);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11) & 1) != 0)
    sub_100021184();
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(v1 + 24), v12, v13, v14, v15, v16, v17, v18);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(v1 + 48), v19, v20, v21, v22, v23, v24, v25);
  swift_release(*(_QWORD *)(v1 + 56));
  sub_100005D3C((_QWORD *)(v1 + 64));
  sub_100005D3C((_QWORD *)(v1 + 104));

  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(v1 + 160), v26, v27, v28, v29, v30, v31, v32);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(v1 + 176), v33, v34, v35, v36, v37, v38, v39);
  sub_100005D3C((_QWORD *)(v1 + 184));
  sub_100005D3C((_QWORD *)(v1 + 224));
  sub_100005D3C((_QWORD *)(v1 + 264));
  swift_release(*(_QWORD *)(v1 + 304));
  sub_100005D3C((_QWORD *)(v1 + 312));
  swift_release(*(_QWORD *)(v1 + 352));
  return v1;
}

uint64_t sub_10001ECDC()
{
  uint64_t v0;

  sub_10001EAA0();
  return swift_deallocClassInstance(v0, 368, 7);
}

uint64_t type metadata accessor for SESSigner()
{
  return objc_opt_self(_TtC9SPREngine9SESSigner);
}

void sub_10001ED1C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t (*a6)(_QWORD, _QWORD, _QWORD)@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v14;
  uint64_t (*v15)(_QWORD, _QWORD, _QWORD);
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v40;

  v9 = v7;
  v14 = *(_QWORD *)(a1 + 56);
  if (v14)
  {
    swift_retain();
    if ((sub_100125FB0() & 1) != 0)
    {
      v37 = a7;
      v38 = a4;
      v15 = a6;
      v16 = *(_QWORD *)(v14 + 24);
      v17 = *(_QWORD *)(v14 + 32);
      sub_100005D9C(v16, v17);
      v18 = sub_100022B48();
      sub_100005DE0(v16, v17);
      if ((v18 & 1) != 0)
      {
        a6 = v15;
        v19 = v15(a2, a3, v38);
        if (!v7)
        {
          *v37 = v19;
          v37[1] = v20;
          v37[2] = v14;
          return;
        }
        type metadata accessor for Code(0);
        v22 = v21;
        v40 = 10004;
        swift_errorRetain();
        v23 = sub_100005F1C(&qword_1001AC6C8, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_10015BEC0);
        LOBYTE(v22) = static _ErrorCodeProtocol.~= infix(_:_:)(&v40, v7, v22, v23);
        swift_errorRelease();
        if ((v22 & 1) == 0 || (a5 & 1) == 0)
        {
          swift_release(v14);
          return;
        }
        swift_errorRelease();
        if (qword_1001ACE70 != -1)
          swift_once(&qword_1001ACE70, sub_10001E934);
        v24 = type metadata accessor for Logger(0);
        v25 = sub_100003A14(v24, (uint64_t)qword_1001ADDC8);
        v26 = Logger.logObject.getter(v25);
        v27 = static os_log_type_t.error.getter();
        a4 = v38;
        if (os_log_type_enabled(v26, v27))
        {
          v28 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v28 = 0;
          _os_log_impl((void *)&_mh_execute_header, v26, v27, "Recoverable signature failure", v28, 2u);
          swift_slowDealloc(v28, -1, -1);
        }

        v9 = 0;
        a7 = v37;
      }
      else
      {
        a6 = v15;
        a7 = v37;
        a4 = v38;
      }
      sub_100021184();
    }
    swift_release(v14);
  }
  if ((a5 & 1) != 0)
  {
    v29 = sub_10001FB18();
    if (!v9)
    {
      v30 = v29;
      v31 = a7;
      v32 = a6(a2, a3, a4);
      v34 = v33;
      sub_100020B60(v30);
      sub_1000215EC(v30, v36);
      *v31 = v32;
      v31[1] = v34;
      v31[2] = v30;
    }
  }
  else
  {
    v35 = sub_100024400(10006, 0, 0, 0, (uint64_t (*)(void))_sSC20SPRSecurityErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0, (uint64_t (*)(uint64_t))type metadata accessor for SecurityError, (unint64_t *)&qword_1001AC6E8, (uint64_t)&unk_10015BE48);
    swift_willThrow(v35);
  }
}

void sub_10001F030(_QWORD *a1@<X0>, BOOL *a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __SecCertificate *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  SecCertificateRef v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _TtC14softposreaderd12RemoteReader *v35;
  SEL v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  BOOL v43;
  SecCertificateRef v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  SecCertificateRef v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  double v54;
  void (*v55)(char *, SecCertificateRef);
  uint64_t v56;
  char *v57;
  uint64_t v58;
  SecCertificateRef v59;
  BOOL *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v7 = sub_100003A2C(&qword_1001AD9E0);
  __chkstk_darwin(v7);
  v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0, v10);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (__SecCertificate *)__chkstk_darwin(v12);
  v18 = (char *)&v56 - v17;
  v19 = a1[7];
  if (!v19)
    goto LABEL_10;
  v58 = v16;
  v59 = v15;
  swift_retain();
  if ((sub_100125FB0() & 1) == 0)
    goto LABEL_9;
  type metadata accessor for SecCertificate(0);
  v60 = a2;
  v20 = *(_QWORD *)(v19 + 24);
  v21 = *(_QWORD *)(v19 + 32);
  sub_100005D9C(v20, v21);
  v22 = static SecCertificateRef.parse(derRepresentation:)();
  v23 = v20;
  a2 = v60;
  sub_100005DE0(v23, v21);
  if (!v22)
  {
LABEL_9:
    swift_release(v19);
LABEL_10:
    v43 = 0;
    goto LABEL_11;
  }
  v57 = v18;
  v24 = a1[36];
  v25 = a1[37];
  sub_100005EF8(a1 + 33, v24);
  (*(void (**)(SecCertificateRef, uint64_t, uint64_t))(v25 + 8))(v22, v24, v25);
  if (v3)
  {
    v59 = v22;
    if (qword_1001ACE70 != -1)
      swift_once(&qword_1001ACE70, sub_10001E934);
    v26 = type metadata accessor for Logger(0);
    sub_100003A14(v26, (uint64_t)qword_1001ADDC8);
    swift_errorRetain();
    v27 = swift_errorRetain();
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      v63 = v31;
      *(_DWORD *)v30 = 136315138;
      v61 = v3;
      swift_errorRetain();
      v32 = sub_100003A2C((uint64_t *)&unk_1001B1280);
      v33 = String.init<A>(describing:)(&v61, v32);
      v35 = (_TtC14softposreaderd12RemoteReader *)v34;
      v61 = sub_1000056EC(v33, v34, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v30 + 4, v30 + 12);
      swift_bridgeObjectRelease(v35, v36, v37, v38, v39, v40, v41, v42);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Certificate verification failed: %s", v30, 0xCu);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);

      swift_release(v19);
      swift_errorRelease();
    }
    else
    {

      swift_release(v19);
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

    }
    v43 = 0;
    a2 = v60;
  }
  else
  {
    v44 = v22;
    SecCertificateNotValidAfter(v22);
    v45 = v57;
    Date.init(timeIntervalSinceReferenceDate:)(v46);
    sub_100005EF8(a1 + 28, a1[31]);
    sub_10001E61C((uint64_t)v9);
    v47 = v58;
    v48 = v59;
    if ((*(unsigned int (**)(char *, uint64_t, SecCertificateRef))(v58 + 48))(v9, 1, v59) == 1)
    {
      sub_10001A448((uint64_t)v9);
      if (qword_1001ACE70 != -1)
        swift_once(&qword_1001ACE70, sub_10001E934);
      v49 = type metadata accessor for Logger(0);
      v50 = sub_100003A14(v49, (uint64_t)qword_1001ADDC8);
      v51 = Logger.logObject.getter(v50);
      v52 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v51, v52))
      {
        v53 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v53 = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "Could not calculate secure now", v53, 2u);
        swift_slowDealloc(v53, -1, -1);
      }

      swift_release(v19);
      (*(void (**)(char *, SecCertificateRef))(v58 + 8))(v45, v59);
      v43 = 0;
      a2 = v60;
    }
    else
    {
      (*(void (**)(char *, char *, SecCertificateRef))(v47 + 32))(v14, v9, v48);
      v54 = Date.timeIntervalSince(_:)(v14);

      swift_release(v19);
      v55 = *(void (**)(char *, SecCertificateRef))(v47 + 8);
      v55(v14, v48);
      v55(v45, v48);
      v43 = v54 > a3;
      a2 = v60;
    }
  }
LABEL_11:
  *a2 = v43;
}

void sub_10001F528(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _TtC14softposreaderd12RemoteReader *v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _QWORD v47[3];
  char v48[8];
  uint64_t v49;

  v2 = v1;
  v4 = sub_100003A2C(&qword_1001AD9E0);
  __chkstk_darwin(v4);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0, v7);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v45 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001ACE70 != -1)
    swift_once(&qword_1001ACE70, sub_10001E934);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_100003A14(v11, (uint64_t)qword_1001ADDC8);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v43 = v9;
    v15 = swift_slowAlloc(12, -1);
    v42 = v6;
    v16 = (uint8_t *)v15;
    v17 = swift_slowAlloc(32, -1);
    v44 = v12;
    v18 = v17;
    v49 = v17;
    *(_DWORD *)v16 = 136315138;
    v46 = sub_1000056EC(0x656E676953534553, 0xE900000000000072, &v49);
    v9 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v16 + 4, v16 + 12);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s.renewImmediately()", v16, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    v19 = v18;
    v2 = v1;
    swift_slowDealloc(v19, -1, -1);
    v20 = v16;
    v6 = v42;
    swift_slowDealloc(v20, -1, -1);
  }

  v21 = a1[7];
  if (v21)
  {
    swift_retain();
    if ((sub_100125FB0() & 1) != 0)
    {
      sub_100005EF8(a1 + 28, a1[31]);
      sub_10001E61C((uint64_t)v6);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
      {
        v39 = (uint64_t)v45;
        (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v45, v6, v8);
        sub_1000219CC(*(void ***)(v21 + 16), v39, 0);
        swift_release(v21);
        (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v39, v8);
        return;
      }
      swift_release(v21);
      sub_10001A448((uint64_t)v6);
    }
    else
    {
      swift_release(v21);
    }
  }
  sub_100021184();
  v22 = sub_10001FB18();
  if (v2)
  {
    swift_errorRetain();
    v23 = swift_errorRetain();
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      v49 = v27;
      *(_DWORD *)v26 = 136315138;
      swift_getErrorValue(v2, v48, v47);
      v28 = Error.localizedDescription.getter(v47[1], v47[2]);
      v30 = (_TtC14softposreaderd12RemoteReader *)v29;
      v46 = sub_1000056EC(v28, v29, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease(v30, v31, v32, v33, v34, v35, v36, v37);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Error creating identity: %s", v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

    }
  }
  else
  {
    v38 = v22;
    sub_100020B60(v22);
    sub_1000215EC(v38, v40);
    swift_release(v38);
  }
}

uint64_t sub_10001FB18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  _TtC14softposreaderd12RemoteReader *v11;
  _TtC14softposreaderd12RemoteReader *v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  _TtC14softposreaderd12RemoteReader *v21;
  Swift::String v22;
  _TtC14softposreaderd12RemoteReader *v23;
  uint64_t v24;
  Swift::String v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  _TtC14softposreaderd12RemoteReader *v34;
  uint32_t *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _TtC14softposreaderd12RemoteReader *v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  uint64_t v61;
  _QWORD *v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  NSObject *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t inited;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  Swift::String v79;
  _TtC14softposreaderd12RemoteReader *v80;
  SEL v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  void *v91;
  id v92;
  uint64_t v93;
  _TtC14softposreaderd12RemoteReader *v94;
  _TtC14softposreaderd12RemoteReader *v95;
  _TtC14softposreaderd12RemoteReader *v96;
  uint64_t v97;
  _TtC14softposreaderd12RemoteReader *v98;
  char v99;
  SEL v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  SEL v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  uint64_t v114;
  void *v115;
  unint64_t v116;
  uint64_t v117;
  NSObject *v118;
  os_log_type_t v119;
  uint8_t *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t result;
  uint64_t v126;
  char v127[144];
  char v128[144];
  uint64_t v129;
  _TtC14softposreaderd12RemoteReader *v130;
  uint64_t v131;
  uint64_t v132;

  v2 = v1;
  v3 = v0;
  if (qword_1001ACE70 != -1)
    swift_once(&qword_1001ACE70, sub_10001E934);
  v4 = type metadata accessor for Logger(0);
  sub_100003A14(v4, (uint64_t)qword_1001ADDC8);
  v5 = swift_retain_n(v0, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v129 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_retain();
    v10 = sub_10001E9C4();
    v12 = v11;
    swift_release(v3);
    v131 = sub_1000056EC(v10, (unint64_t)v12, &v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, &v132, v8 + 4, v8 + 12);
    swift_release_n(v3, 2);
    swift_bridgeObjectRelease(v12, v13, v14, v15, v16, v17, v18, v19);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s.createIdentity()", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    v20 = v9;
    v2 = v1;
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_release_n(v0, 2);
  }
  v21 = *(_TtC14softposreaderd12RemoteReader **)(v3 + 24);
  v129 = *(_QWORD *)(v3 + 16);
  v130 = v21;
  swift_bridgeObjectRetain();
  v22._countAndFlagsBits = 58;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  v24 = *(_QWORD *)(v3 + 40);
  v23 = *(_TtC14softposreaderd12RemoteReader **)(v3 + 48);
  swift_bridgeObjectRetain();
  v25._countAndFlagsBits = v24;
  v25._object = v23;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(v23, v26, v27, v28, v29, v30, v31, v32);
  v33 = v129;
  v34 = v130;
  v35 = *(uint32_t **)(v3 + 160);
  v36 = *(id *)(v3 + 152);
  swift_bridgeObjectRetain();
  v37 = static Data.randomBytes(count:)(0x10uLL);
  v38 = v2;
  v40 = sub_100128D1C(v33, v34, (uint64_t)v36, v35, v37, v39);
  v41 = v40;
  if (!v2)
  {
    v67 = *(_QWORD *)(v40 + 24);
    v68 = *(_QWORD *)(v40 + 32);
    sub_100005D9C(v67, v68);
    sub_100022E9C(v67, v68);
    sub_100005DE0(v67, v68);
    v69 = *(_QWORD *)(v3 + 128);
    v126 = *(_QWORD *)(v3 + 136);
    sub_100005EF8((_QWORD *)(v3 + 104), v69);
    v70 = sub_100003A2C(&qword_1001ADA18);
    inited = swift_initStackObject(v70, v127);
    *(_OWORD *)(inited + 16) = xmmword_10015A6C0;
    *(_QWORD *)(inited + 32) = 1701605234;
    *(_QWORD *)(inited + 40) = 0xE400000000000000;
    v72 = *(_QWORD *)(v3 + 32);
    *(_QWORD *)(inited + 72) = &type metadata for Int;
    *(_QWORD *)(inited + 80) = &protocol witness table for Int;
    *(_QWORD *)(inited + 48) = v72;
    *(_QWORD *)(inited + 88) = 0x747365676964;
    *(_QWORD *)(inited + 96) = 0xE600000000000000;
    v73 = *(_QWORD *)(v41 + 24);
    v74 = *(_QWORD *)(v41 + 32);
    swift_retain();
    sub_100005D9C(v73, v74);
    Data.sha256Digest.getter(v73, v74);
    v76 = v75;
    v78 = v77;
    sub_100005DE0(v73, v74);
    v79 = Data.base64EncodedString(options:)(0);
    sub_100005DE0(v76, v78);
    swift_release(v41);
    *(_QWORD *)(inited + 128) = &type metadata for String;
    *(_QWORD *)(inited + 136) = &protocol witness table for String;
    *(Swift::String *)(inited + 104) = v79;
    v80 = (_TtC14softposreaderd12RemoteReader *)sub_1000E84EC(inited);
    sub_100115684(8, (uint64_t)v80, v69, v126);
    swift_bridgeObjectRelease(v80, v81, v82, v83, v84, v85, v86, v87);
    return v41;
  }
  v42 = *(_QWORD *)(v3 + 128);
  v43 = *(_QWORD *)(v3 + 136);
  sub_100005EF8((_QWORD *)(v3 + 104), v42);
  v44 = sub_100003A2C(&qword_1001ADA18);
  v45 = swift_initStackObject(v44, v128);
  *(_OWORD *)(v45 + 16) = xmmword_10015A6C0;
  *(_QWORD *)(v45 + 32) = 1701605234;
  *(_QWORD *)(v45 + 40) = 0xE400000000000000;
  v46 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v45 + 72) = &type metadata for Int;
  *(_QWORD *)(v45 + 80) = &protocol witness table for Int;
  *(_QWORD *)(v45 + 48) = v46;
  *(_QWORD *)(v45 + 88) = 0x726F727265;
  *(_QWORD *)(v45 + 96) = 0xE500000000000000;
  v129 = v2;
  swift_errorRetain();
  v47 = sub_100003A2C((uint64_t *)&unk_1001B1280);
  v48 = String.init<A>(describing:)(&v129, v47);
  *(_QWORD *)(v45 + 128) = &type metadata for String;
  *(_QWORD *)(v45 + 136) = &protocol witness table for String;
  *(_QWORD *)(v45 + 104) = v48;
  *(_QWORD *)(v45 + 112) = v49;
  v50 = (_TtC14softposreaderd12RemoteReader *)sub_1000E84EC(v45);
  sub_100115684(10, (uint64_t)v50, v42, v43);
  swift_bridgeObjectRelease(v50, v51, v52, v53, v54, v55, v56, v57);
  v129 = v38;
  swift_errorRetain();
  type metadata accessor for SecurityError(0);
  v59 = v58;
  if ((swift_dynamicCast(&v131, &v129, v47, v58, 6) & 1) != 0)
  {
    v60 = v131;
    v61 = sub_100005F1C((unint64_t *)&qword_1001AC6E8, (uint64_t (*)(uint64_t))type metadata accessor for SecurityError, (uint64_t)&unk_10015BE48);
    v62 = _BridgedStoredNSError.code.getter(&v129, v59, v61);
    if (v129 == 10002)
    {
      v63 = Logger.logObject.getter(v62);
      v64 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v63, v64))
      {
        v65 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v65 = 0;
        _os_log_impl((void *)&_mh_execute_header, v63, v64, "seabaas certificate creation failed, increase validity for next attempt", v65, 2u);
        swift_slowDealloc(v65, -1, -1);
        v66 = v60;
      }
      else
      {
        v66 = v63;
        v63 = v60;
      }

      v88 = *(_QWORD *)(v3 + 360);
      v89 = __OFADD__(v88, 86400);
      v90 = v88 + 86400;
      if (v89)
      {
        __break(1u);
LABEL_31:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
        goto LABEL_33;
      }
      if (v90 <= 600000)
        *(_QWORD *)(v3 + 360) = v90;
    }
    else
    {

    }
  }
  v91 = (void *)_convertErrorToNSError(_:)(v38);
  v92 = objc_msgSend(v91, "domain");

  v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
  v95 = v94;

  v97 = String.init(cString:)("nfcd");
  v98 = v96;
  if (v93 == v97 && v95 == v96)
  {
    swift_bridgeObjectRelease_n(v95, 2);
  }
  else
  {
    v99 = _stringCompareWithSmolCheck(_:_:expecting:)(v93, v95, v97, v96, 0);
    swift_bridgeObjectRelease(v95, v100, v101, v102, v103, v104, v105, v106);
    swift_bridgeObjectRelease(v98, v107, v108, v109, v110, v111, v112, v113);
    if ((v99 & 1) == 0)
    {
LABEL_26:
      swift_willThrow(v114);
      return v41;
    }
  }
  v115 = (void *)_convertErrorToNSError(_:)(v38);
  v116 = (unint64_t)objc_msgSend(v115, "code");

  if ((v116 & 0x8000000000000000) != 0)
    goto LABEL_31;
  if (!HIDWORD(v116))
  {
    if (v116 == 8)
    {
      swift_errorRetain();
      v117 = swift_errorRetain();
      v118 = Logger.logObject.getter(v117);
      v119 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v118, v119))
      {
        v120 = (uint8_t *)swift_slowAlloc(12, -1);
        v121 = (uint64_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v120 = 138412290;
        swift_errorRetain();
        v122 = _swift_stdlib_bridgeErrorToNSError(v38);
        v129 = v122;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, &v130, v120 + 4, v120 + 12);
        *v121 = v122;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v118, v119, "security violation in hardware: %@", v120, 0xCu);
        v123 = sub_100003A2C((uint64_t *)&unk_1001AE430);
        swift_arrayDestroy(v121, 1, v123);
        swift_slowDealloc(v121, -1, -1);
        swift_slowDealloc(v120, -1, -1);
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      v124 = sub_100024400(10017, 0, 0, 0, (uint64_t (*)(void))_sSC20SPRSecurityErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0, (uint64_t (*)(uint64_t))type metadata accessor for SecurityError, (unint64_t *)&qword_1001AC6E8, (uint64_t)&unk_10015BE48);
      swift_willThrow(v124);
      swift_errorRelease();
      return v41;
    }
    goto LABEL_26;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_1000203C4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint8_t *v10;
  uint64_t v11;
  unint64_t v12;
  _TtC14softposreaderd12RemoteReader *v13;
  _TtC14softposreaderd12RemoteReader *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  _TtC14softposreaderd12RemoteReader *v23;
  Swift::String v24;
  uint64_t v25;
  _TtC14softposreaderd12RemoteReader *v26;
  Swift::String v27;
  SEL v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  _TtC14softposreaderd12RemoteReader *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  unint64_t v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  uint64_t result;
  uint64_t v49;
  unint64_t v50;
  _QWORD v51[4];
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _TtC14softposreaderd12RemoteReader *v57;
  uint64_t v58;
  uint64_t v59;

  v1 = v0;
  v55 = type metadata accessor for String.Encoding(0);
  v2 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v54 = (char *)v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001ACE70 != -1)
    swift_once(&qword_1001ACE70, sub_10001E934);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100003A14(v4, (uint64_t)qword_1001ADDC8);
  v6 = swift_retain_n(v1, 2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.debug.getter();
  v9 = os_log_type_enabled(v7, v8);
  v51[3] = v5;
  v53 = v2;
  if (v9)
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v56 = v11;
    *(_DWORD *)v10 = 136315138;
    swift_retain();
    v12 = sub_10001E9C4();
    v14 = v13;
    swift_release(v1);
    v58 = sub_1000056EC(v12, (unint64_t)v14, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v10 + 4, v10 + 12);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s.loadIdentity()", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_release_n(v1, 2);
  }
  v22 = v1[11];
  v52 = v1[12];
  v51[1] = v1 + 8;
  sub_100005EF8(v1 + 8, v22);
  v23 = (_TtC14softposreaderd12RemoteReader *)v1[3];
  v51[0] = v1[2];
  v56 = v51[0];
  v57 = v23;
  swift_bridgeObjectRetain();
  v24._countAndFlagsBits = 58;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  v25 = v1[5];
  v26 = (_TtC14softposreaderd12RemoteReader *)v1[6];
  swift_bridgeObjectRetain();
  v51[2] = v25;
  v27._countAndFlagsBits = v25;
  v27._object = v26;
  String.append(_:)(v27);
  swift_bridgeObjectRelease(v26, v28, v29, v30, v31, v32, v33, v34);
  v35 = v56;
  v36 = v57;
  v37 = v54;
  static String.Encoding.utf8.getter(v38);
  v39 = String.data(using:allowLossyConversion:)(v37, 0, v35, v36);
  v41 = (unint64_t)v40;
  swift_bridgeObjectRelease(v36, v40, v42, v43, v44, v45, v46, v47);
  result = (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v37, v55);
  if (v41 >> 60 == 15)
  {
    __break(1u);
    __break(1u);
  }
  else
  {
    v49 = sub_100003A2C(&qword_1001AE060);
    v50 = sub_1000249FC();
    sub_1000BC0E8(v39, v41, v22, v49, v52, v50);
    sub_10000A9B0(v39, v41);
    return v58;
  }
  return result;
}

uint64_t sub_100020B60(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _TtC14softposreaderd12RemoteReader *v18;
  _TtC14softposreaderd12RemoteReader *v19;
  _QWORD *v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  _TtC14softposreaderd12RemoteReader *v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t result;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _TtC14softposreaderd12RemoteReader *v51;
  Swift::String v52;
  _TtC14softposreaderd12RemoteReader *v53;
  uint64_t v54;
  Swift::String v55;
  SEL v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  uint64_t v63;
  _TtC14softposreaderd12RemoteReader *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  const char *v69;
  unint64_t v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t inited;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  Swift::String v89;
  _TtC14softposreaderd12RemoteReader *v90;
  SEL v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  unint64_t v105;
  char v106[144];
  uint64_t v107;
  _TtC14softposreaderd12RemoteReader *v108;
  uint64_t v109;
  uint64_t v110;

  v2 = v1;
  v4 = type metadata accessor for String.Encoding(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = (_QWORD *)type metadata accessor for JSONEncoder.OutputFormatting(0);
  v103 = *(v104 - 1);
  __chkstk_darwin(v104);
  v9 = (char *)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001ACE70 != -1)
    swift_once(&qword_1001ACE70, sub_10001E934);
  v10 = type metadata accessor for Logger(0);
  sub_100003A14(v10, (uint64_t)qword_1001ADDC8);
  swift_retain_n(v1, 2);
  v11 = swift_retain_n(a1, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter();
  v14 = os_log_type_enabled(v12, v13);
  v102 = (_QWORD *)v4;
  v101 = v5;
  if (v14)
  {
    v15 = swift_slowAlloc(22, -1);
    v100 = v7;
    v16 = v15;
    v99 = swift_slowAlloc(64, -1);
    v107 = v99;
    *(_DWORD *)v16 = 136315394;
    swift_retain();
    v17 = sub_10001E9C4();
    v19 = v18;
    swift_release(v2);
    v109 = sub_1000056EC(v17, (unint64_t)v19, &v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, &v110, v16 + 4, v16 + 12);
    v20 = v2;
    swift_release_n(v2, 2);
    swift_bridgeObjectRelease(v19, v21, v22, v23, v24, v25, v26, v27);
    *(_WORD *)(v16 + 12) = 2080;
    v28 = sub_100126BA4();
    v30 = (_TtC14softposreaderd12RemoteReader *)v29;
    v109 = sub_1000056EC(v28, v29, &v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, &v110, v16 + 14, v16 + 22);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v30, v31, v32, v33, v34, v35, v36, v37);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s.saveIdentity(identity: %s)", (uint8_t *)v16, 0x16u);
    v38 = v99;
    swift_arrayDestroy(v99, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    v39 = v16;
    v7 = v100;
    swift_slowDealloc(v39, -1, -1);

  }
  else
  {

    swift_release_n(a1, 2);
    v20 = v1;
    swift_release_n(v1, 2);
  }
  type metadata accessor for JSONEncoder(0);
  v107 = a1;
  v40 = type metadata accessor for SESSigningIdentity();
  v41 = sub_100005F1C(&qword_1001AE058, (uint64_t (*)(uint64_t))type metadata accessor for SESSigningIdentity, (uint64_t)&unk_100162E94);
  default argument 1 of static JSONEncoder.encodeClean<A>(_:outputFormatting:)();
  v42 = v105;
  static JSONEncoder.encodeClean<A>(_:outputFormatting:)((uint64_t)&v107, (uint64_t)v9, v40, v41);
  if (v42)
    return (*(uint64_t (**)(char *, _QWORD *))(v103 + 8))(v9, v104);
  v46 = v43;
  v105 = v44;
  v100 = (char *)a1;
  (*(void (**)(char *, _QWORD *))(v103 + 8))(v9, v104);
  v47 = v20;
  v48 = v20 + 8;
  v49 = v20[11];
  v50 = v47[12];
  sub_100005EF8(v48, v49);
  v51 = (_TtC14softposreaderd12RemoteReader *)v47[3];
  v107 = v47[2];
  v108 = v51;
  swift_bridgeObjectRetain();
  v52._countAndFlagsBits = 58;
  v52._object = (void *)0xE100000000000000;
  String.append(_:)(v52);
  v104 = v47;
  v54 = v47[5];
  v53 = (_TtC14softposreaderd12RemoteReader *)v47[6];
  swift_bridgeObjectRetain();
  v55._countAndFlagsBits = v54;
  v55._object = v53;
  String.append(_:)(v55);
  swift_bridgeObjectRelease(v53, v56, v57, v58, v59, v60, v61, v62);
  v63 = v107;
  v64 = v108;
  static String.Encoding.utf8.getter(v65);
  v66 = String.data(using:allowLossyConversion:)(v7, 0, v63, v64);
  v67 = v7;
  v68 = v66;
  v70 = (unint64_t)v69;
  swift_bridgeObjectRelease(v64, v69, v71, v72, v73, v74, v75, v76);
  result = (*(uint64_t (**)(char *, _QWORD *))(v101 + 8))(v67, v102);
  if (v70 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v50 + 40))(v68, v70, v46, v105, v49, v50);
    sub_10000A9B0(v68, v70);
    v77 = v104;
    v78 = v104[16];
    v103 = v104[17];
    v102 = sub_100005EF8(v104 + 13, v78);
    v79 = sub_100003A2C(&qword_1001ADA18);
    inited = swift_initStackObject(v79, v106);
    *(_OWORD *)(inited + 16) = xmmword_10015A6C0;
    *(_QWORD *)(inited + 32) = 1701605234;
    *(_QWORD *)(inited + 40) = 0xE400000000000000;
    v81 = v77[4];
    *(_QWORD *)(inited + 72) = &type metadata for Int;
    *(_QWORD *)(inited + 80) = &protocol witness table for Int;
    *(_QWORD *)(inited + 48) = v81;
    *(_QWORD *)(inited + 88) = 0x747365676964;
    *(_QWORD *)(inited + 96) = 0xE600000000000000;
    v82 = v100;
    v101 = v46;
    v83 = *((_QWORD *)v100 + 3);
    v84 = *((_QWORD *)v100 + 4);
    swift_retain();
    sub_100005D9C(v83, v84);
    Data.sha256Digest.getter(v83, v84);
    v86 = v85;
    v88 = v87;
    sub_100005DE0(v83, v84);
    v89 = Data.base64EncodedString(options:)(0);
    sub_100005DE0(v86, v88);
    swift_release(v82);
    *(_QWORD *)(inited + 128) = &type metadata for String;
    *(_QWORD *)(inited + 136) = &protocol witness table for String;
    *(Swift::String *)(inited + 104) = v89;
    v90 = (_TtC14softposreaderd12RemoteReader *)sub_1000E84EC(inited);
    sub_100115684(9, (uint64_t)v90, v78, v103);
    sub_100005DE0(v101, v105);
    swift_bridgeObjectRelease(v90, v91, v92, v93, v94, v95, v96, v97);
    v98 = v77[7];
    v77[7] = v82;
    swift_retain();
    return swift_release(v98);
  }
  return result;
}

void sub_100021184()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  unint64_t v12;
  _TtC14softposreaderd12RemoteReader *v13;
  _TtC14softposreaderd12RemoteReader *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _TtC14softposreaderd12RemoteReader *v25;
  Swift::String v26;
  uint64_t v27;
  _TtC14softposreaderd12RemoteReader *v28;
  Swift::String v29;
  SEL v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  _TtC14softposreaderd12RemoteReader *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  unint64_t v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  _QWORD v50[2];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _TtC14softposreaderd12RemoteReader *v56;

  v1 = v0;
  v2 = type metadata accessor for String.Encoding(0);
  v51 = *(_QWORD *)(v2 - 8);
  v52 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001ACE70 != -1)
    swift_once(&qword_1001ACE70, sub_10001E934);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_100003A14(v5, (uint64_t)qword_1001ADDC8);
  v7 = swift_retain_n(v1, 2);
  v50[1] = v6;
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v55 = v11;
    *(_DWORD *)v10 = 136315138;
    swift_retain();
    v12 = sub_10001E9C4();
    v14 = v13;
    swift_release(v1);
    v53 = sub_1000056EC(v12, (unint64_t)v14, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v10 + 4, v10 + 12);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s.deleteIdentity()", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    v22 = v1[7];
    if (!v22)
      return;
  }
  else
  {

    swift_release_n(v1, 2);
    v22 = v1[7];
    if (!v22)
      return;
  }
  v23 = v1[11];
  v24 = v1[12];
  sub_100005EF8(v1 + 8, v23);
  v25 = (_TtC14softposreaderd12RemoteReader *)v1[3];
  v55 = v1[2];
  v56 = v25;
  swift_retain();
  swift_bridgeObjectRetain();
  v26._countAndFlagsBits = 58;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  v27 = v1[5];
  v28 = (_TtC14softposreaderd12RemoteReader *)v1[6];
  swift_bridgeObjectRetain();
  v29._countAndFlagsBits = v27;
  v29._object = v28;
  String.append(_:)(v29);
  swift_bridgeObjectRelease(v28, v30, v31, v32, v33, v34, v35, v36);
  v37 = v55;
  v38 = v56;
  static String.Encoding.utf8.getter(v39);
  v40 = String.data(using:allowLossyConversion:)(v4, 0, v37, v38);
  v42 = (unint64_t)v41;
  swift_bridgeObjectRelease(v38, v41, v43, v44, v45, v46, v47, v48);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v4, v52);
  if (v42 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v24 + 48))(v40, v42, v23, v24);
    sub_10000A9B0(v40, v42);
    sub_1001264E8();
    swift_release(v22);
    v49 = v1[7];
    v1[7] = 0;
    swift_release(v49);
  }
}

void sub_1000215EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _TtC14softposreaderd12RemoteReader *v18;
  uint64_t v19;
  uint64_t v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  SecCertificateRef v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _TtC14softposreaderd12RemoteReader *v40;
  SEL v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v3 = v2;
  v5 = type metadata accessor for Date(0, a2);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001ACE70 != -1)
    swift_once(&qword_1001ACE70, sub_10001E934);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_100003A14(v9, (uint64_t)qword_1001ADDC8);
  v11 = swift_retain();
  v51 = v10;
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(22, -1);
    v15 = swift_slowAlloc(64, -1);
    v50 = a1;
    v48 = v15;
    v53 = v15;
    *(_DWORD *)v14 = 136315394;
    v49 = v8;
    v52 = sub_1000056EC(0x656E676953534553, 0xE900000000000072, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2080;
    v16 = v6;
    v17 = v5;
    v19 = *(_QWORD *)(v3 + 40);
    v18 = *(_TtC14softposreaderd12RemoteReader **)(v3 + 48);
    swift_bridgeObjectRetain();
    v20 = v19;
    v5 = v17;
    v6 = v16;
    v52 = sub_1000056EC(v20, (unint64_t)v18, &v53);
    v8 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v14 + 14, v14 + 22);
    swift_release(v3);
    swift_bridgeObjectRelease(v18, v21, v22, v23, v24, v25, v26, v27);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "scheduleRenewal of %s for %s", (uint8_t *)v14, 0x16u);
    v28 = v48;
    swift_arrayDestroy(v48, 2, (char *)&type metadata for Any + 8);
    a1 = v50;
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

    swift_release(v3);
  }
  type metadata accessor for SecCertificate(0);
  v29 = *(_QWORD *)(a1 + 24);
  v30 = *(_QWORD *)(a1 + 32);
  sub_100005D9C(v29, v30);
  v31 = static SecCertificateRef.parse(derRepresentation:)();
  sub_100005DE0(v29, v30);
  if (v31)
  {
    SecCertificateNotValidAfter(v31);
    Date.init(timeIntervalSinceReferenceDate:)(v32);
    sub_1000219CC(*(void ***)(a1 + 16), (uint64_t)v8, 0);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  else
  {
    v33 = swift_retain_n(a1, 2);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v37 = swift_slowAlloc(32, -1);
      v53 = v37;
      *(_DWORD *)v36 = 136315138;
      v38 = sub_100126BA4();
      v40 = (_TtC14softposreaderd12RemoteReader *)v39;
      v52 = sub_1000056EC(v38, v39, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v36 + 4, v36 + 12);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease(v40, v41, v42, v43, v44, v45, v46, v47);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Invalid X.509 format (SEABAAS). Not renewing: %s", v36, 0xCu);
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);

    }
    else
    {

      swift_release_n(a1, 2);
    }
  }
}

void sub_1000219CC(void **a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  void **v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _TtC14softposreaderd12RemoteReader *v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  void **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  void (*v56)(char *, uint64_t, uint64_t);
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  double v63;
  char *v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint64_t v68;
  void **v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  _TtC14softposreaderd12RemoteReader *v73;
  SEL v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  _TtC14softposreaderd12RemoteReader *v85;
  SEL v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  char *v93;
  void (*v94)(char *, uint64_t);
  void **v95;
  char *v96;
  uint64_t v97;
  NSObject *v98;
  os_log_type_t v99;
  uint8_t *v100;
  void **v101;
  uint64_t v102;
  _TtC14softposreaderd12RemoteReader *v103;
  SEL v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  double *v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  double *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  void (*v130)(char *, uint64_t);
  char *v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(char *, char *, uint64_t);
  uint64_t v135;
  _QWORD *v136;
  void (*v137)(char *, void **);
  uint64_t v138;
  char *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t (*v148)(char *, uint64_t, uint64_t);
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  void **v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void **aBlock;
  _QWORD v158[4];
  double *v159;

  v4 = v3;
  v140 = a3;
  v145 = type metadata accessor for DispatchTime(0);
  v143 = *(_QWORD *)(v145 - 8);
  v7 = __chkstk_darwin(v145);
  v142 = (char *)&v134 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v144 = (char *)&v134 - v9;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v10);
  v141 = (char *)&v134 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003A2C(&qword_1001AD9E0);
  __chkstk_darwin(v12);
  v151 = (uint64_t)&v134 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Date(0, v14);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v139 = (char *)&v134 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v146 = (char *)&v134 - v20;
  v21 = __chkstk_darwin(v19);
  v147 = (char *)&v134 - v22;
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v134 - v24;
  v138 = v26;
  __chkstk_darwin(v23);
  v28 = (char *)&v134 - v27;
  if (qword_1001ACE70 != -1)
    swift_once(&qword_1001ACE70, sub_10001E934);
  v29 = type metadata accessor for Logger(0);
  v30 = sub_100003A14(v29, (uint64_t)qword_1001ADDC8);
  v148 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v31 = v148(v28, a2, v15);
  v149 = v30;
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.info.getter();
  v34 = os_log_type_enabled(v32, v33);
  v150 = v25;
  v152 = a2;
  if (v34)
  {
    v35 = swift_slowAlloc(22, -1);
    v136 = v4;
    v153 = (void **)v15;
    v36 = v35;
    v37 = (void **)swift_slowAlloc(64, -1);
    aBlock = v37;
    *(_DWORD *)v36 = 136315394;
    v154 = sub_1000056EC(0x656E676953534553, 0xE900000000000072, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, &v155, v36 + 4, v36 + 12);
    *(_WORD *)(v36 + 12) = 2080;
    v38 = sub_100005F1C((unint64_t *)&qword_1001ADA00, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v39 = dispatch thunk of CustomStringConvertible.description.getter(v153, v38);
    v41 = (_TtC14softposreaderd12RemoteReader *)v40;
    v154 = sub_1000056EC(v39, v40, (uint64_t *)&aBlock);
    a2 = v152;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, &v155, v36 + 14, v36 + 22);
    swift_bridgeObjectRelease(v41, v42, v43, v44, v45, v46, v47, v48);
    v137 = *(void (**)(char *, void **))(v16 + 8);
    v137(v28, v153);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "%s.scheduleRenewal using expirationDate: %s", (uint8_t *)v36, 0x16u);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    v49 = v37;
    v25 = v150;
    swift_slowDealloc(v49, -1, -1);
    v50 = v36;
    v15 = (uint64_t)v153;
    v4 = v136;
    swift_slowDealloc(v50, -1, -1);
  }
  else
  {
    v137 = *(void (**)(char *, void **))(v16 + 8);
    v137(v28, (void **)v15);
  }

  sub_100005EF8(v4 + 28, v4[31]);
  v51 = v151;
  sub_10001E61C(v151);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v51, 1, v15) == 1)
  {
    v52 = sub_10001A448(v51);
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      v55 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v55 = 134217984;
      aBlock = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v158, v55 + 4, v55 + 12);
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Aborting identity #%lld renewal. Could not calculate secure now", v55, 0xCu);
      swift_slowDealloc(v55, -1, -1);
    }

    return;
  }
  v56 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 32);
  v56(v25, v51, v15);
  v57 = Date.timeIntervalSince(_:)(v25);
  if ((~*(_QWORD *)&v57 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  if (v57 <= -9.22337204e18)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v57 >= 9.22337204e18)
  {
LABEL_26:
    __break(1u);
    return;
  }
  v58 = 86400;
  v135 = v16;
  v136 = v4 + 28;
  v134 = (void (*)(char *, char *, uint64_t))v56;
  if ((uint64_t)v57 <= 86400 && (v58 = (uint64_t)v57, (uint64_t)v57 < 301))
  {
    v153 = (void **)v15;
    v97 = swift_retain();
    v98 = Logger.logObject.getter(v97);
    v99 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v98, v99))
    {
      v100 = (uint8_t *)swift_slowAlloc(12, -1);
      v101 = (void **)swift_slowAlloc(32, -1);
      aBlock = v101;
      *(_DWORD *)v100 = 136315138;
      v102 = v4[5];
      v103 = (_TtC14softposreaderd12RemoteReader *)v4[6];
      swift_bridgeObjectRetain();
      v154 = sub_1000056EC(v102, (unint64_t)v103, (uint64_t *)&aBlock);
      a2 = v152;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, &v155, v100 + 4, v100 + 12);
      swift_release(v4);
      swift_bridgeObjectRelease(v103, v104, v105, v106, v107, v108, v109, v110);
      _os_log_impl((void *)&_mh_execute_header, v98, v99, "Certificate for %s will be renewed immediately", v100, 0xCu);
      swift_arrayDestroy(v101, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v101, -1, -1);
      swift_slowDealloc(v100, -1, -1);

    }
    else
    {

      swift_release(v4);
    }
    v63 = 0.0;
    v15 = (uint64_t)v153;
    v94 = (void (*)(char *, uint64_t))v137;
  }
  else
  {
    v154 = 300;
    v155 = v58;
    swift_beginAccess(v4 + 23, &aBlock, 33, 0);
    v59 = sub_10001A64C((uint64_t)(v4 + 23), v4[26]);
    sub_100006140();
    v60 = v59;
    a2 = v152;
    static FixedWidthInteger.random<A>(in:using:)(&v156, &v154, v60);
    v61 = swift_endAccess(&aBlock);
    v62 = v147;
    Date.addingTimeInterval(_:)(v61, -(double)v156);
    v63 = Date.timeIntervalSince(_:)(v25);
    v64 = v146;
    v148(v146, (uint64_t)v62, v15);
    v65 = swift_retain_n(v4, 2);
    v66 = Logger.logObject.getter(v65);
    v67 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v66, v67))
    {
      v68 = swift_slowAlloc(32, -1);
      v153 = (void **)swift_slowAlloc(64, -1);
      aBlock = v153;
      *(_DWORD *)v68 = 136315650;
      v69 = a1;
      v70 = v15;
      v71 = v4[5];
      v72 = v4[6];
      swift_bridgeObjectRetain();
      v154 = sub_1000056EC(v71, v72, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, &v155, v68 + 4, v68 + 12);
      swift_release_n(v4, 2);
      v73 = (_TtC14softposreaderd12RemoteReader *)v72;
      v15 = v70;
      a1 = v69;
      swift_bridgeObjectRelease(v73, v74, v75, v76, v77, v78, v79, v80);
      *(_WORD *)(v68 + 12) = 2080;
      v81 = sub_100005F1C((unint64_t *)&qword_1001ADA00, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v82 = v146;
      v83 = dispatch thunk of CustomStringConvertible.description.getter(v15, v81);
      v85 = (_TtC14softposreaderd12RemoteReader *)v84;
      v154 = sub_1000056EC(v83, v84, (uint64_t *)&aBlock);
      a2 = v152;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, &v155, v68 + 14, v68 + 22);
      swift_bridgeObjectRelease(v85, v86, v87, v88, v89, v90, v91, v92);
      v93 = v82;
      v94 = (void (*)(char *, uint64_t))v137;
      v137(v93, (void **)v15);
      *(_WORD *)(v68 + 22) = 2048;
      v154 = *(_QWORD *)&v63;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, &v155, v68 + 24, v68 + 32);
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "Certificate for %s will be renewed on %s (in %f seconds)", (uint8_t *)v68, 0x20u);
      v95 = v153;
      swift_arrayDestroy(v153, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v95, -1, -1);
      swift_slowDealloc(v68, -1, -1);

      v96 = v147;
    }
    else
    {

      v94 = (void (*)(char *, uint64_t))v137;
      v137(v64, (void **)v15);
      swift_release_n(v4, 2);
      v96 = v62;
    }
    v94(v96, v15);
  }
  v111 = v4[44];
  v112 = swift_retain();
  dispatch thunk of DispatchWorkItem.cancel()(v112);
  v113 = swift_release(v111);
  v114 = v141;
  static DispatchWorkItemFlags.barrier.getter(v113);
  v115 = swift_allocObject(&unk_10019A458, 24, 7);
  swift_weakInit(v115 + 16, v4);
  v116 = v139;
  v148(v139, a2, v15);
  v117 = *(unsigned __int8 *)(v135 + 80);
  v118 = (v117 + 48) & ~v117;
  v119 = (double *)swift_allocObject(&unk_10019A480, v118 + v138, v117 | 7);
  *((_QWORD *)v119 + 2) = v115;
  *((_QWORD *)v119 + 3) = a1;
  v119[4] = v63;
  *((_QWORD *)v119 + 5) = v140;
  v134((char *)v119 + v118, v116, v15);
  v158[3] = sub_1000249AC;
  v159 = v119;
  aBlock = _NSConcreteStackBlock;
  v158[0] = 1107296256;
  v158[1] = sub_1000043B8;
  v158[2] = &unk_10019A498;
  v120 = _Block_copy(&aBlock);
  v121 = type metadata accessor for DispatchWorkItem(0);
  swift_allocObject(v121, *(unsigned int *)(v121 + 48), *(unsigned __int16 *)(v121 + 52));
  swift_retain();
  v122 = DispatchWorkItem.init(flags:block:)(v114, v120);
  v123 = v159;
  swift_release(v115);
  swift_release(v123);
  v124 = v4[44];
  v4[44] = v122;
  swift_release(v124);
  v126 = v4[31];
  v125 = v4[32];
  sub_100005EF8(v136, v126);
  v127 = v15;
  v128 = v142;
  (*(void (**)(uint64_t))(*(_QWORD *)(v125 + 8) + 16))(v126);
  v129 = v144;
  + infix(_:_:)(v128);
  v130 = *(void (**)(char *, uint64_t))(v143 + 8);
  v131 = v128;
  v132 = v145;
  v130(v131, v145);
  v133 = v4[44];
  swift_retain();
  OS_dispatch_queue.asyncAfter(deadline:execute:)(v129, v133);
  swift_release(v133);
  v130(v129, v132);
  v94(v150, v127);
}

void sub_100022548(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  double v20;
  uint64_t v21;
  _BYTE v22[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v22, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    v7 = Strong;
    v8 = *(_QWORD *)(Strong + 56);
    if (v8 && *(_QWORD *)(v8 + 16) == a2)
    {
      if (qword_1001ACE70 != -1)
        swift_once(&qword_1001ACE70, sub_10001E934);
      v9 = type metadata accessor for Logger(0);
      v10 = sub_100003A14(v9, (uint64_t)qword_1001ADDC8);
      v11 = Logger.logObject.getter(v10);
      v12 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v11, v12))
      {
        v13 = swift_slowAlloc(22, -1);
        *(_DWORD *)v13 = 134218240;
        v20 = *(double *)&a2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v13 + 4, v13 + 12);
        *(_WORD *)(v13 + 12) = 2048;
        v20 = a3;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v13 + 14, v13 + 22);
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "renew identity #%lld after %fs", (uint8_t *)v13, 0x16u);
        swift_slowDealloc(v13, -1, -1);
      }

      sub_100021184();
      v14 = sub_10001FB18();
      sub_100020B60(v14);
      sub_1000215EC(v14);
      swift_release(v14);
      swift_release(v7);
      return;
    }
    swift_release(Strong);
  }
  if (qword_1001ACE70 != -1)
    swift_once(&qword_1001ACE70, sub_10001E934);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_100003A14(v15, (uint64_t)qword_1001ADDC8);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "identity mismatch, abort renewal", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

}

uint64_t sub_100022B48()
{
  _QWORD *v0;
  SecCertificateRef v1;
  SecCertificateRef v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _TtC14softposreaderd12RemoteReader *v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  uint64_t v30;
  uint64_t v31[2];

  type metadata accessor for SecCertificate(0);
  v1 = static SecCertificateRef.parse(derRepresentation:)();
  if (v1)
  {
    v2 = v1;
    v3 = sub_10002388C();
    if (!v3)
    {
      v10 = v0[36];
      v11 = v0[37];
      sub_100005EF8(v0 + 33, v10);
      (*(void (**)(SecCertificateRef, uint64_t, uint64_t))(v11 + 8))(v2, v10, v11);

      return 1;
    }
    v4 = v3;
    swift_willThrow(v3);

  }
  else
  {
    if (qword_1001ACE70 != -1)
      swift_once(&qword_1001ACE70, sub_10001E934);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_100003A14(v5, (uint64_t)qword_1001ADDC8);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Invalid X.509 format (SEABAAS)", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    v4 = sub_100024400(10005, 0, 0, 0, (uint64_t (*)(void))_sSC20SPRSecurityErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0, (uint64_t (*)(uint64_t))type metadata accessor for SecurityError, (unint64_t *)&qword_1001AC6E8, (uint64_t)&unk_10015BE48);
    swift_willThrow(v4);
  }
  if (qword_1001ACE70 != -1)
    swift_once(&qword_1001ACE70, sub_10001E934);
  v12 = type metadata accessor for Logger(0);
  sub_100003A14(v12, (uint64_t)qword_1001ADDC8);
  swift_errorRetain();
  v13 = swift_errorRetain();
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(32, -1);
    v30 = v4;
    v31[0] = v17;
    *(_DWORD *)v16 = 136315138;
    swift_errorRetain();
    v18 = sub_100003A2C((uint64_t *)&unk_1001B1280);
    v19 = String.init<A>(describing:)(&v30, v18);
    v21 = (_TtC14softposreaderd12RemoteReader *)v20;
    v30 = sub_1000056EC(v19, v20, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease(v21, v22, v23, v24, v25, v26, v27, v28);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Certificate verification failed: %s", v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

  }
  return 0;
}

void sub_100022E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __SecCertificate *v6;
  __SecCertificate *v7;
  __SecKey *v8;
  __SecKey *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _TtC14softposreaderd12RemoteReader *v34;
  uint64_t v35;
  _TtC14softposreaderd12RemoteReader *v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  const char *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  _TtC14softposreaderd12RemoteReader *v58;
  uint64_t v59;
  uint64_t v60;
  _TtC14softposreaderd12RemoteReader *v61;
  uint64_t v62;
  SEL v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  Swift::String v70;
  SEL v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  Swift::String v78;
  Swift::String v79;
  SEL v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  SEL v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  Swift::String v104;
  _TtC14softposreaderd12RemoteReader *object;
  SEL v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  Swift::String v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  SEL v118;
  id v119;
  id v120;
  id v121;
  id v122;
  id v123;
  id v124;
  Swift::String v125;
  _TtC14softposreaderd12RemoteReader *v126;
  SEL v127;
  id v128;
  id v129;
  id v130;
  id v131;
  id v132;
  id v133;
  Swift::String v134;
  uint64_t v135;
  _TtC14softposreaderd12RemoteReader *v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  SEL v142;
  id v143;
  id v144;
  id v145;
  id v146;
  id v147;
  id v148;
  uint64_t v149;
  _TtC14softposreaderd12RemoteReader *v150;
  _TtC14softposreaderd12RemoteReader *v151;
  uint64_t v152;
  _TtC14softposreaderd12RemoteReader *v153;
  _TtC14softposreaderd12RemoteReader *v154;

  v3 = v2;
  v154 = &_swiftEmptyArrayStorage;
  type metadata accessor for SecCertificate(0);
  v6 = static SecCertificateRef.parse(derRepresentation:)();
  if (v6)
  {
    v7 = v6;
    v8 = SecCertificateCopyKey(v6);
    if (v8)
    {
      v9 = v8;
      if (!SecKeyIsAlgorithmSupported(v8, kSecKeyOperationTypeVerify, kSecKeyAlgorithmECDSASignatureMessageX962SHA1))
      {
        v10 = sub_100024400(10005, 0xD00000000000001CLL, (void *)0x8000000100168BE0, 0, (uint64_t (*)(void))_sSC20SPRSecurityErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0, (uint64_t (*)(uint64_t))type metadata accessor for SecurityError, (unint64_t *)&qword_1001AC6E8, (uint64_t)&unk_10015BE48);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v10);
        v12 = *(_QWORD *)&v154->instance[8];
        v11 = *(_QWORD *)&v154->instance[16];
        if (v12 >= v11 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        v13 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v10);
        specialized Array._endMutation()(v13);
      }

    }
    else
    {
      v25 = sub_100024400(10005, 0x696C627570206F4ELL, (void *)0xED000079656B2063, 0, (uint64_t (*)(void))_sSC20SPRSecurityErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0, (uint64_t (*)(uint64_t))type metadata accessor for SecurityError, (unint64_t *)&qword_1001AC6E8, (uint64_t)&unk_10015BE48);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v25);
      v27 = *(_QWORD *)&v154->instance[8];
      v26 = *(_QWORD *)&v154->instance[16];
      if (v27 >= v26 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
      v28 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v25);
      specialized Array._endMutation()(v28);
    }
    v29 = (void *)sub_10002388C();
    if (v29)
    {
      v30 = v29;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v30);
      v32 = *(_QWORD *)&v154->instance[8];
      v31 = *(_QWORD *)&v154->instance[16];
      if (v32 >= v31 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
      v33 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v30);
      specialized Array._endMutation()(v33);

    }
    sub_100099A80(&v149);
    v34 = v150;
    v35 = v152;
    v36 = v153;
    swift_bridgeObjectRelease(v151, v37, v38, v39, v40, v41, v42, v43);
    swift_bridgeObjectRelease(v34, v44, v45, v46, v47, v48, v49, v50);
    if (v36)
    {
      v59 = *(_QWORD *)(v3 + 168);
      v58 = *(_TtC14softposreaderd12RemoteReader **)(v3 + 176);
      if (v35 == v59 && v36 == v58
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v35, v36, *(_QWORD *)(v3 + 168), *(_QWORD *)(v3 + 176), 0) & 1) != 0)
      {
        swift_bridgeObjectRelease(v36, v51, v52, v53, v54, v55, v56, v57);
        goto LABEL_28;
      }
      v149 = 0;
      v150 = (_TtC14softposreaderd12RemoteReader *)0xE000000000000000;
      _StringGuts.grow(_:)(33);
      swift_bridgeObjectRelease(v150, v63, v64, v65, v66, v67, v68, v69);
      v149 = 0xD000000000000015;
      v150 = (_TtC14softposreaderd12RemoteReader *)0x8000000100168BC0;
      v70._countAndFlagsBits = v35;
      v70._object = v36;
      String.append(_:)(v70);
      swift_bridgeObjectRelease(v36, v71, v72, v73, v74, v75, v76, v77);
      v78._countAndFlagsBits = 0x203A64696573202CLL;
      v78._object = (void *)0xE800000000000000;
      String.append(_:)(v78);
      swift_bridgeObjectRetain();
      v79._countAndFlagsBits = v59;
      v79._object = v58;
      String.append(_:)(v79);
      swift_bridgeObjectRelease(v58, v80, v81, v82, v83, v84, v85, v86);
      v60 = v149;
      v61 = v150;
      v62 = 10010;
    }
    else
    {
      v60 = 0xD00000000000001ELL;
      v61 = (_TtC14softposreaderd12RemoteReader *)0x8000000100168B30;
      v62 = 10005;
    }
    v87 = sub_100024400(v62, v60, v61, 0, (uint64_t (*)(void))_sSC20SPRSecurityErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0, (uint64_t (*)(uint64_t))type metadata accessor for SecurityError, (unint64_t *)&qword_1001AC6E8, (uint64_t)&unk_10015BE48);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v87);
    v89 = *(_QWORD *)&v154->instance[8];
    v88 = *(_QWORD *)&v154->instance[16];
    if (v89 >= v88 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v88 > 1, v89 + 1, 1);
    v90 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v89, v87);
    specialized Array._endMutation()(v90);
LABEL_28:
    v91 = sub_100099EE4();
    if ((v92 & 1) != 0 || (v93 = v91, sub_100099EE4(), (v95 & 1) != 0))
    {
      v136 = (_TtC14softposreaderd12RemoteReader *)0x8000000100168B50;
      v137 = 10005;
      v135 = 0xD00000000000001ALL;
    }
    else
    {
      v96 = v94;
      if (v93)
      {
        v149 = 0;
        v150 = (_TtC14softposreaderd12RemoteReader *)0xE000000000000000;
        _StringGuts.grow(_:)(49);
        swift_bridgeObjectRelease(v150, v97, v98, v99, v100, v101, v102, v103);
        v149 = 0xD000000000000022;
        v150 = (_TtC14softposreaderd12RemoteReader *)0x8000000100168B70;
        v104._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        object = (_TtC14softposreaderd12RemoteReader *)v104._object;
        String.append(_:)(v104);
        swift_bridgeObjectRelease(object, v106, v107, v108, v109, v110, v111, v112);
        v113._countAndFlagsBits = 0x746365707865202CLL;
        v113._object = (void *)0xED000030203A6465;
        String.append(_:)(v113);
        v114 = sub_100024400(10010, v149, v150, 0, (uint64_t (*)(void))_sSC20SPRSecurityErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0, (uint64_t (*)(uint64_t))type metadata accessor for SecurityError, (unint64_t *)&qword_1001AC6E8, (uint64_t)&unk_10015BE48);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v114);
        v116 = *(_QWORD *)&v154->instance[8];
        v115 = *(_QWORD *)&v154->instance[16];
        if (v116 >= v115 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v115 > 1, v116 + 1, 1);
        v117 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v116, v114);
        specialized Array._endMutation()(v117);
      }
      if (v96 == 1)
        goto LABEL_40;
      v149 = 0;
      v150 = (_TtC14softposreaderd12RemoteReader *)0xE000000000000000;
      _StringGuts.grow(_:)(44);
      swift_bridgeObjectRelease(v150, v118, v119, v120, v121, v122, v123, v124);
      v149 = 0xD00000000000001DLL;
      v150 = (_TtC14softposreaderd12RemoteReader *)0x8000000100168BA0;
      v125._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v126 = (_TtC14softposreaderd12RemoteReader *)v125._object;
      String.append(_:)(v125);
      swift_bridgeObjectRelease(v126, v127, v128, v129, v130, v131, v132, v133);
      v134._countAndFlagsBits = 0x746365707865202CLL;
      v134._object = (void *)0xED000031203A6465;
      String.append(_:)(v134);
      v135 = v149;
      v136 = v150;
      v137 = 10010;
    }
    v138 = sub_100024400(v137, v135, v136, 0, (uint64_t (*)(void))_sSC20SPRSecurityErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0, (uint64_t (*)(uint64_t))type metadata accessor for SecurityError, (unint64_t *)&qword_1001AC6E8, (uint64_t)&unk_10015BE48);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v138);
    v140 = *(_QWORD *)&v154->instance[8];
    v139 = *(_QWORD *)&v154->instance[16];
    if (v140 >= v139 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v139 > 1, v140 + 1, 1);
    v141 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v140, v138);
    specialized Array._endMutation()(v141);
LABEL_40:

    sub_1000235F4((uint64_t)&v154, v3, a1, a2);
    swift_bridgeObjectRelease(v154, v142, v143, v144, v145, v146, v147, v148);
    return;
  }
  v14 = sub_100024400(10005, 0xD00000000000001ALL, (void *)0x8000000100168B10, 0, (uint64_t (*)(void))_sSC20SPRSecurityErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0, (uint64_t (*)(uint64_t))type metadata accessor for SecurityError, (unint64_t *)&qword_1001AC6E8, (uint64_t)&unk_10015BE48);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v14);
  v16 = *(_QWORD *)&v154->instance[8];
  v15 = *(_QWORD *)&v154->instance[16];
  if (v16 >= v15 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
  v17 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v14);
  specialized Array._endMutation()(v17);
  sub_1000235F4((uint64_t)&v154, v2, a1, a2);
  swift_bridgeObjectRelease(v154, v18, v19, v20, v21, v22, v23, v24);
}

uint64_t sub_1000235F4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _TtC14softposreaderd12RemoteReader **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _TtC14softposreaderd12RemoteReader *v18;
  int64_t v19;
  _TtC14softposreaderd12RemoteReader *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  _TtC14softposreaderd12RemoteReader *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  const char *v40;
  const char *v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  _TtC14softposreaderd12RemoteReader *v48;
  SEL v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _TtC14softposreaderd12RemoteReader *v60;
  unint64_t v61;
  _TtC14softposreaderd12RemoteReader *v62;
  char v63[200];
  _QWORD v64[3];
  uint64_t v65;
  uint64_t v66;

  if (*(_QWORD *)(*(_QWORD *)result + 16))
  {
    v7 = (_TtC14softposreaderd12RemoteReader **)result;
    sub_100008390(a2 + 104, (uint64_t)v64);
    v8 = v65;
    v9 = v66;
    sub_100005EF8(v64, v65);
    v10 = sub_100003A2C(&qword_1001ADA18);
    inited = swift_initStackObject(v10, v63);
    *(_OWORD *)(inited + 16) = xmmword_10015E090;
    *(_QWORD *)(inited + 32) = 1701605234;
    *(_QWORD *)(inited + 40) = 0xE400000000000000;
    v12 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(inited + 72) = &type metadata for Int;
    *(_QWORD *)(inited + 80) = &protocol witness table for Int;
    *(_QWORD *)(inited + 48) = v12;
    *(_QWORD *)(inited + 88) = 0x747365676964;
    *(_QWORD *)(inited + 96) = 0xE600000000000000;
    Data.sha256Digest.getter(a3, a4);
    v14 = v13;
    v16 = v15;
    *(_QWORD *)(inited + 128) = &type metadata for Data;
    v17 = sub_100024884();
    *(_QWORD *)(inited + 104) = v14;
    *(_QWORD *)(inited + 112) = v16;
    *(_QWORD *)(inited + 136) = v17;
    *(_QWORD *)(inited + 144) = 0x73726F727265;
    v58 = (_QWORD *)inited;
    *(_QWORD *)(inited + 152) = 0xE600000000000000;
    v18 = *v7;
    v19 = *(_QWORD *)&(*v7)->instance[8];
    v20 = &_swiftEmptyArrayStorage;
    if (v19)
    {
      v56 = v9;
      v57 = v8;
      v62 = &_swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_100091C44(0, v19, 0);
      v20 = &_swiftEmptyArrayStorage;
      type metadata accessor for SecurityError(0);
      v22 = v21;
      v23 = 0;
      do
      {
        v24 = *(_QWORD *)&v18->instance[8 * v23 + 24];
        v60 = 0;
        v61 = 0xE000000000000000;
        v59 = v24;
        _print_unlocked<A, B>(_:_:)(&v59, &v60, v22, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v32 = v60;
        v33 = v61;
        v62 = v20;
        v35 = *(_QWORD *)&v20->instance[8];
        v34 = *(_QWORD *)&v20->instance[16];
        if (v35 >= v34 >> 1)
        {
          sub_100091C44(v34 > 1, v35 + 1, 1);
          v20 = v62;
        }
        ++v23;
        *(_QWORD *)&v20->instance[8] = v35 + 1;
        v36 = (char *)v20 + 16 * v35;
        *((_QWORD *)v36 + 4) = v32;
        *((_QWORD *)v36 + 5) = v33;
      }
      while (v19 != v23);
      swift_bridgeObjectRelease(v18, v25, v26, v27, v28, v29, v30, v31);
      v9 = v56;
      v8 = v57;
    }
    v60 = v20;
    v37 = sub_100003A2C((uint64_t *)&unk_1001AE460);
    v38 = sub_1000248C8();
    v39 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v37, v38);
    v41 = v40;
    swift_bridgeObjectRelease(v20, v40, v42, v43, v44, v45, v46, v47);
    v58[23] = &type metadata for String;
    v58[24] = &protocol witness table for String;
    v58[20] = v39;
    v58[21] = v41;
    v48 = (_TtC14softposreaderd12RemoteReader *)sub_1000E84EC((uint64_t)v58);
    sub_100115684(41, (uint64_t)v48, v8, v9);
    swift_bridgeObjectRelease(v48, v49, v50, v51, v52, v53, v54, v55);
    return sub_100005D3C(v64);
  }
  return result;
}

uint64_t sub_10002388C()
{
  uint64_t v0;
  uint64_t v1;
  _TtC14softposreaderd12RemoteReader *v2;
  uint64_t v3;
  _TtC14softposreaderd12RemoteReader *v4;
  SEL v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  SEL v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  Swift::String v33;
  Swift::String v34;
  _TtC14softposreaderd12RemoteReader *object;
  SEL v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  Swift::String v43;
  _QWORD *v44;
  Swift::String v45;
  _TtC14softposreaderd12RemoteReader *v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  Swift::String v54;
  uint64_t v55;
  _TtC14softposreaderd12RemoteReader *v56;
  uint64_t v57;
  SEL v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  Swift::String v65;
  SEL v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  unint64_t v74;
  _TtC14softposreaderd12RemoteReader *v75;
  _TtC14softposreaderd12RemoteReader *v76;
  _TtC14softposreaderd12RemoteReader *v77;

  v1 = v0;
  sub_10009A2C0((uint64_t)&v74);
  v3 = v74;
  v2 = v75;
  v4 = v76;
  swift_bridgeObjectRelease(v77, v5, v6, v7, v8, v9, v10, v11);
  swift_bridgeObjectRelease(v4, v12, v13, v14, v15, v16, v17, v18);
  if (!v2)
  {
    v55 = 0xD00000000000001DLL;
    v56 = (_TtC14softposreaderd12RemoteReader *)0x8000000100168A70;
LABEL_13:
    v57 = 10005;
    return sub_100024400(v57, v55, v56, 0, (uint64_t (*)(void))_sSC20SPRSecurityErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0, (uint64_t (*)(uint64_t))type metadata accessor for SecurityError, (unint64_t *)&qword_1001AC6E8, (uint64_t)&unk_10015BE48);
  }
  swift_bridgeObjectRetain();
  v19 = sub_10007E718(v3, (unint64_t)v2);
  if ((v22 & 1) != 0)
  {
    v74 = 0;
    v75 = (_TtC14softposreaderd12RemoteReader *)0xE000000000000000;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease(v75, v58, v59, v60, v61, v62, v63, v64);
    v74 = 0xD000000000000020;
    v75 = (_TtC14softposreaderd12RemoteReader *)0x8000000100168A90;
    v65._countAndFlagsBits = v3;
    v65._object = v2;
    String.append(_:)(v65);
    swift_bridgeObjectRelease(v2, v66, v67, v68, v69, v70, v71, v72);
    v55 = v74;
    v56 = v75;
    goto LABEL_13;
  }
  v27 = v19;
  v28 = (uint64_t)v20;
  v29 = (uint64_t)v21;
  swift_bridgeObjectRelease(v2, v20, v21, v22, v23, v24, v25, v26);
  v30 = sub_100005EF8((_QWORD *)(v1 + 312), *(_QWORD *)(v1 + 336));
  if (v27 == *(_QWORD *)(*v30 + 16) && v28 == *(_QWORD *)(*v30 + 24) && v29 == *(_QWORD *)(*v30 + 32))
    return 0;
  v74 = 0;
  v75 = (_TtC14softposreaderd12RemoteReader *)0xE000000000000000;
  _StringGuts.grow(_:)(69);
  v33._countAndFlagsBits = 0xD00000000000002CLL;
  v33._object = (void *)0x8000000100168AC0;
  String.append(_:)(v33);
  v34._countAndFlagsBits = sub_10007CBF0(v27, v28, v29);
  object = (_TtC14softposreaderd12RemoteReader *)v34._object;
  String.append(_:)(v34);
  swift_bridgeObjectRelease(object, v36, v37, v38, v39, v40, v41, v42);
  v43._object = (void *)0x8000000100168AF0;
  v43._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v43);
  v44 = sub_100005EF8((_QWORD *)(v1 + 312), *(_QWORD *)(v1 + 336));
  v45._countAndFlagsBits = sub_10007CBF0(*(_QWORD *)(*v44 + 16), *(_QWORD *)(*v44 + 24), *(_QWORD *)(*v44 + 32));
  v46 = (_TtC14softposreaderd12RemoteReader *)v45._object;
  String.append(_:)(v45);
  swift_bridgeObjectRelease(v46, v47, v48, v49, v50, v51, v52, v53);
  v54._countAndFlagsBits = 46;
  v54._object = (void *)0xE100000000000000;
  String.append(_:)(v54);
  v55 = v74;
  v56 = v75;
  v57 = 10010;
  return sub_100024400(v57, v55, v56, 0, (uint64_t (*)(void))_sSC20SPRSecurityErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0, (uint64_t (*)(uint64_t))type metadata accessor for SecurityError, (unint64_t *)&qword_1001AC6E8, (uint64_t)&unk_10015BE48);
}

uint64_t sub_100023AE8(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_100023B20(a1, a2, a3, a4, a5, a6, a7, (uint64_t)sub_100024724);
}

uint64_t sub_100023B04(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_100023B20(a1, a2, a3, a4, a5, a6, a7, (uint64_t)sub_100024708);
}

uint64_t sub_100023B20(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  _QWORD *v21;
  uint64_t v22;
  _BYTE v23[16];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  _QWORD v29[5];

  v21 = a1;
  v22 = a8;
  v13 = type metadata accessor for DispatchWorkItemFlags(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchWorkItemFlags.barrier.getter(v15);
  v24 = v8;
  v25 = a2;
  v26 = a3;
  v27 = a5;
  v28 = a4;
  v18 = sub_100003A2C(&qword_1001AE048);
  v19 = v29[4];
  OS_dispatch_queue.sync<A>(flags:execute:)(v29, v17, v22, v23, v18);
  if (v19)
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  result = v29[0];
  *v21 = v29[2];
  return result;
}

uint64_t sub_100023C34(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v9[16];
  uint64_t v10;
  double v11;
  uint64_t v12;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static DispatchWorkItemFlags.barrier.getter(v5);
  v10 = v1;
  v11 = a1;
  OS_dispatch_queue.sync<A>(flags:execute:)(&v12, v7, sub_1000246EC, v9, &type metadata for Bool);
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v7, v3);
  return v12;
}

uint64_t sub_100023CF8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];
  _QWORD *v9;
  uint64_t v10;

  v1 = *v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static DispatchWorkItemFlags.barrier.getter(v4);
  v9 = v0;
  v10 = v1;
  OS_dispatch_queue.sync<A>(flags:execute:)(&type metadata for (), v6, sub_100023DF8, v8, &type metadata for () + 1);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8))(v6, v2);
}

unint64_t sub_100023DAC()
{
  return sub_10001E9C4();
}

uint64_t sub_100023DCC()
{
  return sub_100005F1C(&qword_1001ADFE0, (uint64_t (*)(uint64_t))type metadata accessor for SESSigningIdentity, (uint64_t)&unk_100162F34);
}

void sub_100023DF8()
{
  uint64_t v0;

  sub_10001F528(*(_QWORD **)(v0 + 16));
}

uint64_t sub_100023E10(_OWORD *a1, _QWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  char v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  _QWORD v23[4];
  _QWORD v24[2];
  char v25;
  double v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[2];
  _BYTE v38[16];
  uint64_t v39;
  uint64_t v40;

  v3 = a1[12];
  v35 = a1[11];
  v36 = v3;
  v4 = a1[14];
  v37[0] = a1[13];
  v37[1] = v4;
  v5 = a1[8];
  v31 = a1[7];
  v32 = v5;
  v6 = a1[10];
  v33 = a1[9];
  v34 = v6;
  v7 = a1[4];
  v27 = a1[3];
  v28 = v7;
  v8 = a1[6];
  v29 = a1[5];
  v30 = v8;
  sub_100024374((uint64_t)v37, (uint64_t)v38, &qword_1001AE030);
  v9 = sub_100024374((uint64_t)v38, (uint64_t)&v39, &qword_1001AE030);
  v10 = v40;
  if (!v40)
    goto LABEL_14;
  v11 = v39;
  v26 = 0.0;
  __chkstk_darwin(v9);
  v23[2] = &v26;
  if ((v10 & 0x1000000000000000) != 0 || !(v10 & 0x2000000000000000 | v11 & 0x1000000000000000))
  {
    sub_10002469C((uint64_t)v38);
    _StringGuts._slowWithCString<A>(_:)(&v25, sub_100024630, v23, v11, v10, &type metadata for Bool);
    sub_1000246C4((uint64_t)v38);
    if ((v25 & 1) != 0)
      goto LABEL_9;
    goto LABEL_14;
  }
  if ((v10 & 0x2000000000000000) != 0)
  {
    v24[0] = v11;
    v24[1] = v10 & 0xFFFFFFFFFFFFFFLL;
    if (v11 <= 0x20u && ((1 << v11) & 0x100003E01) != 0)
    {
      sub_10002469C((uint64_t)v38);
    }
    else
    {
      sub_10002469C((uint64_t)v38);
      v21 = (unsigned __int8 *)_swift_stdlib_strtod_clocale(v24, &v26);
      if (v21)
      {
        v22 = *v21;
        sub_1000246C4((uint64_t)v38);
        if (!v22)
          goto LABEL_9;
        goto LABEL_14;
      }
    }
    sub_1000246C4((uint64_t)v38);
    goto LABEL_14;
  }
  if ((v11 & 0x1000000000000000) != 0)
  {
    v12 = (v10 & 0xFFFFFFFFFFFFFFFLL) + 32;
    sub_10002469C((uint64_t)v38);
LABEL_7:
    v13 = (_BYTE *)v12;
    goto LABEL_8;
  }
  v12 = _StringObject.sharedUTF8.getter(v11, v10);
  sub_10002469C((uint64_t)v38);
  if (v12)
    goto LABEL_7;
  v13 = 0;
LABEL_8:
  sub_100024630(v13, (BOOL *)v24);
  v14 = v24[0];
  sub_1000246C4((uint64_t)v38);
  if ((v14 & 1) != 0)
  {
LABEL_9:
    v15 = (double)(unint64_t)v30 - v26;
    v16 = a2[3];
    v17 = a2[4];
    sub_100005EF8(a2, v16);
    v18 = (*(double (**)(uint64_t, uint64_t))(v17 + 24))(v16, v17);
    return Date.init(timeIntervalSince1970:)(v15 + v18);
  }
LABEL_14:
  v20 = sub_100024400(10007, 0xD000000000000022, (void *)0x8000000100168A40, 0, (uint64_t (*)(void))_sSC20SPRSecurityErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0, (uint64_t (*)(uint64_t))type metadata accessor for SecurityError, (unint64_t *)&qword_1001AC6E8, (uint64_t)&unk_10015BE48);
  return swift_willThrow(v20);
}

uint64_t sub_1000240E0(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_1000240F8(uint64_t a1)
{
  __int128 v3;
  __int128 v4;

  v3 = *(_OWORD *)(a1 + 224);
  v4 = *(_OWORD *)(a1 + 240);
  sub_100024170(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((unint64_t *)&v4 + 1),
    *(_QWORD *)(a1 + 256),
    *(_QWORD *)(a1 + 264));
  return a1;
}

uint64_t sub_100024170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,unint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a8);
    swift_bridgeObjectRelease(a10);
    swift_bridgeObjectRelease(a12);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a18);
    swift_bridgeObjectRelease(a20);
    swift_bridgeObjectRelease(a22);
    swift_bridgeObjectRelease(a24);
    swift_bridgeObjectRelease(a26);
    swift_bridgeObjectRelease(a28);
    swift_bridgeObjectRelease(a30);
    sub_100005DE0(a31, a32);
    return swift_bridgeObjectRelease(a34);
  }
  return result;
}

_BYTE *sub_10002427C@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t sub_1000242E4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  uint64_t v3;
  char v4;
  uint64_t var2;

  if (a1)
  {
    a3(&var2);
    if (!v3)
      v4 = var2;
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, _QWORD, _QWORD))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3)
      v4 = BYTE1(var2);
  }
  return v4 & 1;
}

_QWORD *sub_100024338@<X0>(_QWORD *(*a1)(uint64_t *__return_ptr)@<X2>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = a1(&v5);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_100024374(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100003A2C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000243B8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_100024400(a1, a2, a3, a4, (uint64_t (*)(void))_sSC23SPRPersistenceErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0, (uint64_t (*)(uint64_t))type metadata accessor for PersistenceError, (unint64_t *)&qword_1001AD7F8, (uint64_t)&unk_10015C018);
}

uint64_t sub_1000243DC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_100024400(a1, a2, a3, a4, (uint64_t (*)(void))_sSC17SPRDepotErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0, (uint64_t (*)(uint64_t))type metadata accessor for DepotError, (unint64_t *)&qword_1001AD6E0, (uint64_t)&unk_10015BA08);
}

uint64_t sub_100024400(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t inited;
  uint64_t v21;
  NSString v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  uint64_t v30;
  _OWORD v32[2];
  __int128 v33;
  uint64_t v34;
  _BYTE v35[80];
  uint64_t v36;
  uint64_t v37;

  v36 = a5();
  v37 = v15;
  if (a3)
  {
    *(_QWORD *)&v33 = 8250;
    *((_QWORD *)&v33 + 1) = 0xE200000000000000;
    v16._countAndFlagsBits = a2;
    v16._object = a3;
    String.append(_:)(v16);
    swift_bridgeObjectRelease(a3);
    v17._countAndFlagsBits = 8250;
    v17._object = (void *)0xE200000000000000;
    String.append(_:)(v17);
    swift_bridgeObjectRelease(0xE200000000000000);
    v18 = v37;
  }
  else
  {
    v18 = v15;
  }
  v19 = sub_100003A2C(&qword_1001AE038);
  inited = swift_initStackObject(v19, v35);
  *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(_QWORD *)(inited + 40) = v21;
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v18);
  *(_QWORD *)(inited + 72) = sub_100005E24(0, &qword_1001AE040, NSString_ptr);
  *(_QWORD *)(inited + 48) = v22;
  v23 = sub_1000047FC(inited);
  if (a4)
  {
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
    v26 = v25;
    swift_errorRetain(a4);
    v27 = _convertErrorToNSError(_:)(a4);
    v34 = sub_100005E24(0, (unint64_t *)&qword_1001AE420, NSError_ptr);
    *(_QWORD *)&v33 = v27;
    sub_100005D2C(&v33, v32);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v23);
    sub_10000B760(v32, v24, v26, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRelease(0x8000000000000000);
    swift_errorRelease(a4);
  }
  v29 = a6(0);
  *(_QWORD *)&v32[0] = a1;
  v30 = sub_100005F1C(a7, a6, a8);
  _BridgedStoredNSError.init(_:userInfo:)(&v33, v32, v23, v29, v30);
  return v33;
}

uint64_t sub_10002460C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_100024400(a1, a2, a3, a4, (uint64_t (*)(void))_sSC20SPRSecurityErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0, (uint64_t (*)(uint64_t))type metadata accessor for SecurityError, (unint64_t *)&qword_1001AC6E8, (uint64_t)&unk_10015BE48);
}

_BYTE *sub_100024630@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t sub_10002469C(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_1000246C4(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

void sub_1000246EC(BOOL *a1@<X8>)
{
  uint64_t v1;

  sub_10001F030(*(_QWORD **)(v1 + 16), a1, *(double *)(v1 + 24));
}

void sub_100024708(uint64_t *a1@<X8>)
{
  sub_100024740(sub_100126944, a1);
}

void sub_100024724(uint64_t *a1@<X8>)
{
  sub_100024740(sub_1001266E8, a1);
}

void sub_100024740(uint64_t (*a1)(_QWORD, _QWORD, _QWORD)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  sub_10001ED1C(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_BYTE *)(v2 + 48), a1, a2);
}

uint64_t sub_100024764(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_100024400(a1, a2, a3, a4, (uint64_t (*)(void))_sSC16SPRReadErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0, (uint64_t (*)(uint64_t))type metadata accessor for ReadError, (unint64_t *)&qword_1001B12D0, (uint64_t)&unk_10015C348);
}

uint64_t sub_100024788(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_100024400(a1, a2, a3, a4, (uint64_t (*)(void))_sSC25SPRSecureChannelErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0, (uint64_t (*)(uint64_t))type metadata accessor for SecureChannelError, (unint64_t *)&qword_1001AD718, (uint64_t)&unk_10015BB18);
}

uint64_t sub_1000247AC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_100024400(a1, a2, a3, a4, (uint64_t (*)(void))_sSC25SPRConfigurationErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0, (uint64_t (*)(uint64_t))type metadata accessor for ConfigurationError, (unint64_t *)&qword_1001AD750, (uint64_t)&unk_10015BC28);
}

uint64_t sub_1000247D0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_100024400(a1, a2, a3, a4, (uint64_t (*)(void))_sSC11ORErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0, (uint64_t (*)(uint64_t))type metadata accessor for ORError, (unint64_t *)&qword_1001AE4B0, (uint64_t)&unk_10015C458);
}

uint64_t sub_1000247F4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_100024400(a1, a2, a3, a4, (uint64_t (*)(void))_sSC21SPRPINControllerErrorLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0, (uint64_t (*)(uint64_t))type metadata accessor for PINControllerError, (unint64_t *)&qword_1001AD868, (uint64_t)&unk_10015C238);
}

uint64_t sub_100024818(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_100024400(a1, a2, a3, a4, (uint64_t (*)(void))_sSC22SPRPINAppletProxyErrorLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0, (uint64_t (*)(uint64_t))type metadata accessor for PINAppletProxyError, (unint64_t *)&qword_1001AD938, (uint64_t)&unk_10015C678);
}

uint64_t sub_10002483C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_100024400(a1, a2, a3, a4, (uint64_t (*)(void))_sSC16SPRJSONErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0, (uint64_t (*)(uint64_t))type metadata accessor for JSONError, (unint64_t *)&qword_1001AD788, (uint64_t)&unk_10015BD38);
}

uint64_t sub_100024860(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_100024400(a1, a2, a3, a4, (uint64_t (*)(void))_sSC19SPRMonitorErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0, (uint64_t (*)(uint64_t))type metadata accessor for MonitorError, (unint64_t *)&qword_1001AD900, (uint64_t)&unk_10015C568);
}

unint64_t sub_100024884()
{
  unint64_t result;

  result = qword_1001AE050;
  if (!qword_1001AE050)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1001AE050);
  }
  return result;
}

unint64_t sub_1000248C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001B12B0;
  if (!qword_1001B12B0)
  {
    v1 = sub_100003A6C((uint64_t *)&unk_1001AE460);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001B12B0);
  }
  return result;
}

uint64_t sub_100024914()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100024938(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = type metadata accessor for Date(0, a2);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 48) & ~v5;
  v7 = v6 + *(_QWORD *)(v4 + 64);
  v8 = v5 | 7;
  swift_release(*(_QWORD *)(v2 + 16));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2 + v6, v3);
  return swift_deallocObject(v2, v7, v8);
}

void sub_1000249AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  type metadata accessor for Date(0, a2);
  sub_100022548(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(double *)(v2 + 32));
}

uint64_t sub_1000249E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000249F4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1000249FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001AE068;
  if (!qword_1001AE068)
  {
    v1 = sub_100003A6C(&qword_1001AE060);
    sub_100005F1C(&qword_1001AE070, (uint64_t (*)(uint64_t))type metadata accessor for SESSigningIdentity, (uint64_t)&unk_100162EBC);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1001AE068);
  }
  return result;
}

uint64_t sub_100024A78(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100024AB4 + 4 * byte_10015E170[a1]))(0xD000000000000015, 0x80000001001676F0);
}

uint64_t sub_100024AB4()
{
  uint64_t v0;

  return v0 - 3;
}

uint64_t sub_100024CA8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  _TtC14softposreaderd12RemoteReader *v4;
  _TtC14softposreaderd12RemoteReader *v5;
  uint64_t v6;
  const char *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _TtC14softposreaderd12RemoteReader *v15;
  char v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;

  v2 = *a2;
  v3 = sub_100024A78(*a1);
  v5 = v4;
  v6 = sub_100024A78(v2);
  if (v3 == v6 && v5 == (_TtC14softposreaderd12RemoteReader *)v7)
  {
    v16 = 1;
    v15 = v5;
  }
  else
  {
    v15 = (_TtC14softposreaderd12RemoteReader *)v7;
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5, v7, v8, v9, v10, v11, v12, v13);
  swift_bridgeObjectRelease(v15, v17, v18, v19, v20, v21, v22, v23);
  return v16 & 1;
}

Swift::Int sub_100024D30()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  _TtC14softposreaderd12RemoteReader *v3;
  _TtC14softposreaderd12RemoteReader *v4;
  SEL v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  _QWORD v13[9];

  v1 = *v0;
  Hasher.init(_seed:)(v13);
  v2 = sub_100024A78(v1);
  v4 = v3;
  String.hash(into:)(v13, v2, v3);
  swift_bridgeObjectRelease(v4, v5, v6, v7, v8, v9, v10, v11);
  return Hasher._finalize()();
}

void sub_100024D90(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  _TtC14softposreaderd12RemoteReader *v4;
  _TtC14softposreaderd12RemoteReader *v5;
  SEL v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v3 = sub_100024A78(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v5, v6, v7, v8, v9, v10, v11, v12);
}

Swift::Int sub_100024DD0()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  _TtC14softposreaderd12RemoteReader *v3;
  _TtC14softposreaderd12RemoteReader *v4;
  SEL v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  _QWORD v13[9];

  v1 = *v0;
  Hasher.init(_seed:)(v13);
  v2 = sub_100024A78(v1);
  v4 = v3;
  String.hash(into:)(v13, v2, v3);
  swift_bridgeObjectRelease(v4, v5, v6, v7, v8, v9, v10, v11);
  return Hasher._finalize()();
}

uint64_t sub_100024E2C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100025748(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_100024E58@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100024A78(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100024E80(_QWORD *a1@<X8>)
{
  *a1 = &off_100197A38;
}

void sub_100024E90(char *a1)
{
  sub_10003D3D0(*a1);
}

void sub_100024E9C()
{
  char *v0;

  sub_10003D7C4(*v0);
}

void sub_100024EA4()
{
  __asm { BR              X10 }
}

uint64_t sub_100024EE4(uint64_t a1)
{
  String.hash(into:)(a1, 0x656D695464616572, 0xEB00000000564D45);
  return swift_bridgeObjectRelease(0xEB00000000564D45);
}

void sub_100024F58(uint64_t a1)
{
  char *v1;

  sub_10003DD50(a1, *v1);
}

unint64_t sub_100024F60@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100025798(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100024F8C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_100024FC0 + 4 * byte_10015E18A[*v0]))();
}

void sub_100024FC0(_QWORD *a1@<X8>)
{
  *a1 = 0x656D695464616572;
  a1[1] = 0xEB00000000564D45;
}

void sub_100024FE4(_QWORD *a1@<X8>)
{
  *a1 = 0x6D69546C61746F74;
  a1[1] = 0xE900000000000065;
}

void sub_100025004(char *a1@<X8>)
{
  strcpy(a1, "pollingTimeVAS");
  a1[15] = -18;
}

void sub_10002502C(_QWORD *a1@<X8>)
{
  *a1 = &off_100197AF0;
}

uint64_t sub_10002503C(unsigned int a1)
{
  if (a1 != 2)
  {
    sub_1000257E0();
    if ((a1 & 1) != 0)
      UnsignedInteger.setBit(_:)(0);
    else
      UnsignedInteger.clearBit(_:)(0);
  }
  if ((a1 & 0xFF00) != 0x200)
  {
    sub_1000257E0();
    if ((a1 & 0x100) != 0)
      UnsignedInteger.setBit(_:)(1);
    else
      UnsignedInteger.clearBit(_:)(1);
  }
  if ((a1 & 0xFF0000) != 0x20000)
  {
    sub_1000257E0();
    if ((a1 & 0x10000) != 0)
      UnsignedInteger.setBit(_:)(2);
    else
      UnsignedInteger.clearBit(_:)(2);
  }
  if (HIBYTE(a1) != 2)
  {
    sub_1000257E0();
    if ((a1 & 0x1000000) != 0)
      UnsignedInteger.setBit(_:)(3);
    else
      UnsignedInteger.clearBit(_:)(3);
  }
  return 0;
}

void sub_100025138(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t inited;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _TtC14softposreaderd12RemoteReader *v13;
  os_unfair_lock_s *v14;
  _TtC14softposreaderd12RemoteReader **v15;
  os_unfair_lock_s *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  _BYTE v24[72];

  v3 = sub_100003A2C(&qword_1001AE238);
  inited = swift_initStackObject(v3, v24);
  *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
  *(_BYTE *)(inited + 32) = 21;
  v5 = sub_10002503C(*(_DWORD *)(v1 + 64));
  *(_QWORD *)(inited + 64) = &type metadata for UInt8;
  *(_BYTE *)(inited + 40) = v5;
  v13 = (_TtC14softposreaderd12RemoteReader *)sub_1000E8B30(inited, v6, v7, v8, v9, v10, v11, v12);
  v14 = *(os_unfair_lock_s **)(v1 + 56);
  v15 = (_TtC14softposreaderd12RemoteReader **)&v14[4];
  v16 = v14 + 8;
  os_unfair_lock_lock(v14 + 8);
  sub_10005FDB8((uint64_t)v15, (uint64_t)v13);
  os_unfair_lock_unlock(v16);
  swift_bridgeObjectRelease(v13, v17, v18, v19, v20, v21, v22, v23);
  os_unfair_lock_lock(v16);
  sub_100060D00(v15, v1, a1);
  os_unfair_lock_unlock(v16);
  *(_DWORD *)(v1 + 64) = 33686018;
}

uint64_t sub_100025218()
{
  uint64_t v0;

  sub_100005D3C((_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocClassInstance(v0, 68, 7);
}

uint64_t type metadata accessor for ProvisionAnalytics(uint64_t a1)
{
  uint64_t result;

  result = qword_1001AE0A0;
  if (!qword_1001AE0A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ProvisionAnalytics);
  return result;
}

uint64_t sub_100025280(uint64_t a1)
{
  void *v2;

  v2 = &unk_10015E1C8;
  return swift_initClassMetadata2(a1, 256, 1, &v2, a1 + 264);
}

uint64_t getEnumTagSinglePayload for ProvisionAnalytics.PerformanceField(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ProvisionAnalytics.PerformanceField(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10002539C + 4 * byte_10015E193[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000253D0 + 4 * byte_10015E18E[v4]))();
}

uint64_t sub_1000253D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000253D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000253E0);
  return result;
}

uint64_t sub_1000253EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000253F4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000253F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100025400(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ProvisionAnalytics.PerformanceField()
{
  return &type metadata for ProvisionAnalytics.PerformanceField;
}

uint64_t getEnumTagSinglePayload for ProvisionAnalytics.AnalyticsField(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEB)
    goto LABEL_17;
  if (a2 + 21 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 21) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 21;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 21;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 21;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x16;
  v8 = v6 - 22;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ProvisionAnalytics.AnalyticsField(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 21 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 21) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEA)
    return ((uint64_t (*)(void))((char *)&loc_1000254F8 + 4 * byte_10015E19D[v4]))();
  *a1 = a2 + 21;
  return ((uint64_t (*)(void))((char *)sub_10002552C + 4 * byte_10015E198[v4]))();
}

uint64_t sub_10002552C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100025534(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10002553CLL);
  return result;
}

uint64_t sub_100025548(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100025550);
  *(_BYTE *)result = a2 + 21;
  return result;
}

uint64_t sub_100025554(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002555C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ProvisionAnalytics.AnalyticsField()
{
  return &type metadata for ProvisionAnalytics.AnalyticsField;
}

uint64_t sub_100025578()
{
  return sub_100025608(&qword_1001AE1F0, &qword_1001AE1F8);
}

unint64_t sub_1000255A0()
{
  unint64_t result;

  result = qword_1001AE200;
  if (!qword_1001AE200)
  {
    result = swift_getWitnessTable(&unk_10015E2B0, &type metadata for ProvisionAnalytics.AnalyticsField);
    atomic_store(result, (unint64_t *)&qword_1001AE200);
  }
  return result;
}

uint64_t sub_1000255E4()
{
  return sub_100025608(&qword_1001AE208, &qword_1001AE210);
}

uint64_t sub_100025608(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100003A6C(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10002564C()
{
  unint64_t result;

  result = qword_1001AE218;
  if (!qword_1001AE218)
  {
    result = swift_getWitnessTable(&unk_10015E388, &type metadata for ProvisionAnalytics.PerformanceField);
    atomic_store(result, (unint64_t *)&qword_1001AE218);
  }
  return result;
}

uint64_t sub_100025690(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9[2];
  _QWORD v10[5];

  v10[3] = type metadata accessor for CALogger();
  v10[4] = &off_10019AEF0;
  v10[0] = a1;
  *(_DWORD *)(a2 + 64) = 33686018;
  sub_100008390((uint64_t)v10, (uint64_t)v9);
  v4 = sub_1000E8880((uint64_t)_swiftEmptyArrayStorage);
  v5 = sub_1000E8998((uint64_t)_swiftEmptyArrayStorage);
  v6 = sub_100003A2C(&qword_1001AE248);
  v7 = swift_allocObject(v6, 36, 7);
  *(_DWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 16) = v4;
  *(_QWORD *)(v7 + 24) = v5;
  *(_QWORD *)(a2 + 56) = v7;
  sub_10001A674(v9, a2 + 16);
  sub_100005D3C(v10);
  return a2;
}

uint64_t sub_100025748(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_100197808, a1, a2, &unk_1001AD358);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x16)
    return 22;
  else
    return v3;
}

unint64_t sub_100025798(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100197A70, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

unint64_t sub_1000257E0()
{
  unint64_t result;

  result = qword_1001AE240;
  if (!qword_1001AE240)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt8, &type metadata for UInt8);
    atomic_store(result, (unint64_t *)&qword_1001AE240);
  }
  return result;
}

uint64_t sub_100025824(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD v16[5];
  _QWORD v17[5];

  sub_1000DD94C();
  if (!v1)
  {
    v3 = sub_10001A64C((uint64_t)v17, v17[3]);
    __chkstk_darwin(v3);
    v5 = (_QWORD *)((char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v6 + 16))(v5);
    v7 = *v5;
    v8 = type metadata accessor for CALogger();
    v16[3] = v8;
    v16[4] = &off_10019AEF0;
    v16[0] = v7;
    v9 = type metadata accessor for ProvisionAnalytics(0);
    v10 = swift_allocObject(v9, 68, 7);
    v11 = sub_10001A64C((uint64_t)v16, v8);
    __chkstk_darwin(v11);
    v13 = (_QWORD *)((char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v14 + 16))(v13);
    a1 = sub_100025690(*v13, v10);
    sub_100005D3C(v16);
    sub_100005D3C(v17);
  }
  return a1;
}

uint64_t sub_100025980()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001AE250);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001AE250);
  if (qword_1001AD190 != -1)
    swift_once(&qword_1001AD190, sub_1000CCB8C);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4EA0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100025A10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for OSSignposter(0);
  sub_1000039D4(v0, qword_1001AE268);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001AE268);
  if (qword_1001ACF20 != -1)
    swift_once(&qword_1001ACF20, sub_10003BA28);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4B58);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_100025CF0(char *a1, void *a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _BYTE *v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  id v25;
  char *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  Class v47;
  SEL v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  unsigned int v55;
  _TtC14softposreaderd12RemoteReader *v56;
  uint64_t v57;
  uint64_t v58;
  _TtC14softposreaderd12RemoteReader *v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t *v65;
  _TtC14softposreaderd12RemoteReader *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  Swift::String v71;
  NSObject *v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  BOOL v76;
  uint8_t *v77;
  _TtC14softposreaderd12RemoteReader *v78;
  _TtC14softposreaderd12RemoteReader *v79;
  uint64_t v80;
  _TtC14softposreaderd12RemoteReader *v81;
  _TtC14softposreaderd12RemoteReader *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  os_unfair_lock_s *v88;
  id v89;
  uint64_t v90;
  _TtC14softposreaderd12RemoteReader *v91;
  _TtC14softposreaderd12RemoteReader *v92;
  _TtC14softposreaderd12RemoteReader *v93;
  uint64_t v94;
  _TtC14softposreaderd12RemoteReader *v95;
  char v96;
  SEL v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  SEL v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  unint64_t v111;
  uint64_t v112;
  SEL v113;
  id v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  Swift::String v120;
  _TtC14softposreaderd12RemoteReader *object;
  SEL v122;
  id v123;
  id v124;
  id v125;
  id v126;
  id v127;
  id v128;
  uint64_t v129;
  NSObject *v130;
  os_log_type_t v131;
  uint8_t *v132;
  uint64_t *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  SEL v137;
  id v138;
  id v139;
  id v140;
  id v141;
  id v142;
  id v143;
  uint64_t v144;
  Swift::String v145;
  _TtC14softposreaderd12RemoteReader *v146;
  SEL v147;
  id v148;
  id v149;
  id v150;
  id v151;
  id v152;
  id v153;
  uint64_t v154;
  _BYTE *v155;
  SEL v156;
  id v157;
  id v158;
  id v159;
  id v160;
  id v161;
  id v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  NSObject *v168;
  os_log_type_t v169;
  BOOL v170;
  uint64_t v171;
  uint8_t *v172;
  Swift::String v173;
  SEL v174;
  id v175;
  id v176;
  id v177;
  id v178;
  id v179;
  id v180;
  os_log_t v181;
  _TtC14softposreaderd12RemoteReader *v182;
  void *v183;
  uint64_t v184;
  uint64_t inited;
  Swift::String v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  void *v190;
  void *v191;
  void *v192;
  _TtC14softposreaderd12RemoteReader *v193;
  os_unfair_lock_s *v194;
  uint64_t v195;
  os_unfair_lock_s *v196;
  SEL v197;
  id v198;
  id v199;
  id v200;
  id v201;
  id v202;
  id v203;
  objc_class *v204;
  _TtC14softposreaderd12RemoteReader *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _BYTE *v215;
  Class isa;
  os_log_t v217;
  char *v218;
  uint64_t countAndFlagsBits;
  void *v220;
  unint64_t v221;
  _TtC14softposreaderd12RemoteReader *v222;
  id v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  objc_super v228;
  _TtC14softposreaderd12RemoteReader *v229;
  _BYTE v230[48];
  _TtC14softposreaderd12RemoteReader *aBlock;
  unint64_t v232;
  uint64_t (*v233)(uint64_t);
  void *v234;
  uint64_t (*v235)(_QWORD);
  uint64_t v236;

  v225 = a6;
  v223 = a2;
  v218 = a1;
  v222 = (_TtC14softposreaderd12RemoteReader *)type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v222);
  v221 = (unint64_t)&v205 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v220 = (void *)type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v220);
  countAndFlagsBits = (uint64_t)&v205 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v217 = (os_log_t)type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  isa = v217[-1].isa;
  __chkstk_darwin(v217);
  v15 = (char *)&v205 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v205 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = OBJC_IVAR____TtC9SPREngine15ORReadOperation_lockedState;
  v20 = sub_100003A2C((uint64_t *)&unk_1001AE3D0);
  v21 = swift_allocObject(v20, 24, 7);
  *(_DWORD *)(v21 + 20) = 0;
  v212 = v19;
  *(_QWORD *)&v7[v19] = v21;
  *(_WORD *)(v21 + 16) = 0;
  v7[OBJC_IVAR____TtC9SPREngine15ORReadOperation__isFinished] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC9SPREngine15ORReadOperation_pollingState] = 0;
  v22 = OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionReadResult;
  v23 = v7;
  v24 = sub_1000047FC((uint64_t)&_swiftEmptyArrayStorage);
  v215 = v7;
  v214 = v22;
  *(_QWORD *)&v7[v22] = v24;
  v213 = OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError;
  *(_QWORD *)&v23[OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError] = 0;
  v208 = OBJC_IVAR____TtC9SPREngine15ORReadOperation_nfSEReaderSession;
  v25 = v218;
  *(_QWORD *)&v23[OBJC_IVAR____TtC9SPREngine15ORReadOperation_nfSEReaderSession] = v218;
  v210 = OBJC_IVAR____TtC9SPREngine15ORReadOperation_delegate;
  *(_QWORD *)&v23[OBJC_IVAR____TtC9SPREngine15ORReadOperation_delegate] = a3;
  v226 = a4;
  v211 = &v23[OBJC_IVAR____TtC9SPREngine15ORReadOperation_managedData];
  sub_100008390((uint64_t)a4, (uint64_t)&v23[OBJC_IVAR____TtC9SPREngine15ORReadOperation_managedData]);
  v26 = &v23[OBJC_IVAR____TtC9SPREngine15ORReadOperation_completion];
  *(_QWORD *)v26 = v225;
  *((_QWORD *)v26 + 1) = a7;
  v206 = v26;
  v207 = OBJC_IVAR____TtC9SPREngine15ORReadOperation_parameters;
  v27 = v223;
  *(_QWORD *)&v23[OBJC_IVAR____TtC9SPREngine15ORReadOperation_parameters] = v223;
  v209 = OBJC_IVAR____TtC9SPREngine15ORReadOperation_analytics;
  *(_QWORD *)&v23[OBJC_IVAR____TtC9SPREngine15ORReadOperation_analytics] = a5;
  sub_100005E24(0, (unint64_t *)&qword_1001B1240, OS_dispatch_queue_ptr);
  v224 = a3;
  swift_unknownObjectRetain(a3);
  v225 = a7;
  swift_retain();
  v223 = v27;
  v227 = a5;
  swift_retain();
  v218 = (char *)v25;
  static DispatchQoS.userInteractive.getter();
  (*((void (**)(char *, _QWORD, os_log_t))isa + 13))(v15, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v217);
  aBlock = &_swiftEmptyArrayStorage;
  v28 = sub_100005F1C((unint64_t *)&qword_1001AE3E0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v29 = sub_100003A2C((uint64_t *)&unk_1001B1250);
  v30 = sub_100030828((unint64_t *)&qword_1001AE3F0, (uint64_t *)&unk_1001B1250, (uint64_t)&protocol conformance descriptor for [A]);
  v31 = countAndFlagsBits;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v29, v30, v220, v28);
  v32 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001ELL, 0x8000000100168EC0, v18, v31, v15, 0);
  v33 = OBJC_IVAR____TtC9SPREngine15ORReadOperation_queue;
  *(_QWORD *)&v23[OBJC_IVAR____TtC9SPREngine15ORReadOperation_queue] = v32;
  v235 = BitString.init(data:unusedBits:);
  v236 = 0;
  aBlock = (_TtC14softposreaderd12RemoteReader *)_NSConcreteStackBlock;
  v232 = 1107296256;
  v233 = sub_1000043B8;
  v234 = &unk_10019A708;
  v34 = _Block_copy(&aBlock);
  v229 = &_swiftEmptyArrayStorage;
  v35 = sub_100005F1C((unint64_t *)&qword_1001B1260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v36 = sub_100003A2C((uint64_t *)&unk_1001AE400);
  v37 = sub_100030828((unint64_t *)&qword_1001B1270, (uint64_t *)&unk_1001AE400, (uint64_t)&protocol conformance descriptor for [A]);
  v38 = v221;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v229, v36, v37, v222, v35);
  v39 = type metadata accessor for DispatchWorkItem(0);
  swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
  v40 = DispatchWorkItem.init(flags:block:)(v38, v34);
  v41 = OBJC_IVAR____TtC9SPREngine15ORReadOperation_timeoutWorkItem;
  *(_QWORD *)&v23[OBJC_IVAR____TtC9SPREngine15ORReadOperation_timeoutWorkItem] = v40;
  if (qword_1001ACE80 != -1)
    swift_once(&qword_1001ACE80, sub_100025A10);
  v42 = type metadata accessor for OSSignposter(0);
  sub_100003A14(v42, (uint64_t)qword_1001AE268);
  v43 = v218;
  sub_10003AD24("ttp-preprocessing", 17, 2, (uint64_t)v43, 0xD000000000000017, 0x8000000100168F00);

  v44 = sub_100003A2C((uint64_t *)&unk_1001AE410);
  v45 = swift_allocObject(v44, 48, 7);
  *(_OWORD *)(v45 + 16) = xmmword_10015A5F0;
  if (qword_1001AD260 != -1)
    swift_once(&qword_1001AD260, sub_100116374);
  v46 = *((_QWORD *)&xmmword_1001B4F90 + 1);
  *(_QWORD *)(v45 + 32) = xmmword_1001B4F90;
  *(_QWORD *)(v45 + 40) = v46;
  swift_bridgeObjectRetain();
  v47 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v45, v48, v49, v50, v51, v52, v53, v54);
  aBlock = 0;
  v55 = objc_msgSend(v43, "selectApplets:error:", v47, &aBlock);

  v56 = aBlock;
  v57 = v227;
  if (!v55)
  {
    v81 = aBlock;
    v82 = (_TtC14softposreaderd12RemoteReader *)_convertNSErrorToError(_:)(v56);

    swift_willThrow(v83);
    aBlock = v82;
    swift_errorRetain();
    v84 = sub_100003A2C((uint64_t *)&unk_1001B1280);
    v85 = sub_100005E24(0, (unint64_t *)&qword_1001AE420, NSError_ptr);
    if ((swift_dynamicCast(&v229, &aBlock, v84, v85, 0) & 1) == 0)
    {
LABEL_25:
      swift_errorRelease();
      aBlock = 0;
      v232 = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v232, v113, v114, v115, v116, v117, v118, v119);
      aBlock = (_TtC14softposreaderd12RemoteReader *)0xD00000000000001DLL;
      v232 = 0x8000000100168F20;
      v229 = v82;
      swift_errorRetain();
      v120._countAndFlagsBits = String.init<A>(describing:)(&v229, v84);
      object = (_TtC14softposreaderd12RemoteReader *)v120._object;
      String.append(_:)(v120);
      swift_bridgeObjectRelease(object, v122, v123, v124, v125, v126, v127, v128);
      v129 = sub_1000247D0(20002, (uint64_t)aBlock, (void *)v232, 0);
      swift_willThrow(v129);

      swift_unknownObjectRelease(v224);
      swift_release(v57);
      swift_release(v225);
      swift_errorRelease();
      sub_100005D3C(v226);
      goto LABEL_31;
    }
    v221 = v41;
    v86 = v33;
    v87 = v23;
    v88 = (os_unfair_lock_s *)v229;
    v89 = -[RemoteReader domain](v229, "domain");
    v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
    v92 = v91;

    v94 = String.init(cString:)("nfcd");
    v95 = v93;
    if (v90 == v94 && v92 == v93)
    {
      swift_bridgeObjectRelease_n(v92, 2);
      v23 = v87;
      v33 = v86;
      v57 = v227;
    }
    else
    {
      v96 = _stringCompareWithSmolCheck(_:_:expecting:)(v90, v92, v94, v93, 0);
      swift_bridgeObjectRelease(v92, v97, v98, v99, v100, v101, v102, v103);
      swift_bridgeObjectRelease(v95, v104, v105, v106, v107, v108, v109, v110);
      v23 = v87;
      v33 = v86;
      v57 = v227;
      if ((v96 & 1) == 0)
      {
LABEL_24:

        v41 = v221;
        goto LABEL_25;
      }
    }
    v111 = (unint64_t)-[os_unfair_lock_s code](v88, "code");
    if ((v111 & 0x8000000000000000) != 0)
    {
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    }
    else
    {
      if (!HIDWORD(v111))
      {
        if (v111 == 64)
        {
          swift_errorRelease();
          v112 = sub_1000247D0(20005, 0xD000000000000051, (void *)0x8000000100168F40, 0);
          swift_willThrow(v112);

          swift_unknownObjectRelease(v224);
          swift_release(v57);
          swift_release(v225);

          sub_100005D3C(v226);
          swift_errorRelease();
          v41 = v221;
LABEL_31:
          v155 = v215;
          swift_release(*(_QWORD *)&v215[v212]);

          swift_unknownObjectRelease(*(_QWORD *)&v23[v210]);
          swift_release(*((_QWORD *)v206 + 1));
          sub_100005D3C(v211);

          swift_release(*(_QWORD *)&v23[v209]);
          swift_release(*(_QWORD *)&v23[v41]);
          swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)&v155[v214], v156, v157, v158, v159, v160, v161, v162);
          v163 = *(void **)&v23[v213];

          v164 = type metadata accessor for ORReadOperation();
          swift_deallocPartialClassInstance(v23, v164, 152, 7);
          return;
        }
        goto LABEL_24;
      }
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
    }
    __break(1u);
    os_unfair_lock_unlock(v88);
    __break(1u);
    return;
  }
  v222 = (_TtC14softposreaderd12RemoteReader *)v33;
  v58 = qword_1001AD2C8;
  v59 = aBlock;
  if (v58 != -1)
    swift_once(&qword_1001AD2C8, sub_10012B690);
  v60 = type metadata accessor for Logger(0);
  v61 = sub_100003A14(v60, (uint64_t)qword_1001B3A10);
  v62 = Logger.logObject.getter(v61);
  v63 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v62, v63))
  {
    v64 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v64 = 0;
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "getProvisionVersion()", v64, 2u);
    swift_slowDealloc(v64, -1, -1);
  }

  v65 = (uint64_t *)TLVTag.provisionAppletVersionInfo.unsafeMutableAddressor();
  v66 = v205;
  v67 = sub_100080EB8(*v65);
  if (v66)
  {
    aBlock = 0;
    v232 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v232, v137, v138, v139, v140, v141, v142, v143);
    aBlock = (_TtC14softposreaderd12RemoteReader *)0xD00000000000002CLL;
    v232 = 0x8000000100168FA0;
    v229 = v66;
    swift_errorRetain();
    v144 = sub_100003A2C((uint64_t *)&unk_1001B1280);
    v145._countAndFlagsBits = String.init<A>(describing:)(&v229, v144);
    v146 = (_TtC14softposreaderd12RemoteReader *)v145._object;
    String.append(_:)(v145);
    swift_bridgeObjectRelease(v146, v147, v148, v149, v150, v151, v152, v153);
    v154 = sub_1000247D0(20003, (uint64_t)aBlock, (void *)v232, 0);
    swift_willThrow(v154);

    swift_unknownObjectRelease(v224);
    swift_release(v57);
    swift_release(v225);
    swift_errorRelease();
    sub_100005D3C(v226);
    v33 = (uint64_t)v222;
    goto LABEL_31;
  }
  v69 = v67;
  v70 = v68;
  v71 = Data.hexString()();
  countAndFlagsBits = v71._countAndFlagsBits;
  sub_100005DE0(v69, v70);
  if (qword_1001ACE78 != -1)
    swift_once(&qword_1001ACE78, sub_100025980);
  v72 = sub_100003A14(v60, (uint64_t)qword_1001AE250);
  v73 = swift_bridgeObjectRetain_n(v71._object, 2);
  v217 = v72;
  v74 = Logger.logObject.getter(v73);
  v75 = static os_log_type_t.default.getter();
  v76 = os_log_type_enabled(v74, v75);
  v220 = v71._object;
  if (v76)
  {
    v77 = (uint8_t *)swift_slowAlloc(12, -1);
    v78 = (_TtC14softposreaderd12RemoteReader *)swift_slowAlloc(32, -1);
    v221 = v41;
    v79 = v78;
    aBlock = v78;
    v218 = v23;
    *(_DWORD *)v77 = 136315138;
    isa = (Class)(v77 + 4);
    swift_bridgeObjectRetain();
    v229 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(countAndFlagsBits, (unint64_t)v71._object, (uint64_t *)&aBlock);
    v23 = v218;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v230, isa, v77 + 12);
    swift_bridgeObjectRelease_n(v71._object, 3);
    _os_log_impl((void *)&_mh_execute_header, v74, v75, "applet version: %s", v77, 0xCu);
    swift_arrayDestroy(v79, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v79, -1, -1);
    swift_slowDealloc(v77, -1, -1);

  }
  else
  {

    v80 = swift_bridgeObjectRelease_n(v71._object, 2);
  }
  v130 = Logger.logObject.getter(v80);
  v131 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v130, v131))
  {
    v132 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v132 = 0;
    _os_log_impl((void *)&_mh_execute_header, v130, v131, "getProvisionConfigID()", v132, 2u);
    swift_slowDealloc(v132, -1, -1);
  }

  v133 = (uint64_t *)TLVTag.provisionAppletConfigID.unsafeMutableAddressor();
  v134 = sub_100080EB8(*v133);
  v136 = v227;
  v165 = v134;
  v166 = v135;

  sub_100005D9C(v165, v166);
  v167 = sub_100005D9C(v165, v166);
  v168 = Logger.logObject.getter(v167);
  v169 = static os_log_type_t.default.getter();
  v170 = os_log_type_enabled(v168, v169);
  v221 = v166;
  if (v170)
  {
    v171 = swift_slowAlloc(12, -1);
    v217 = v168;
    v172 = (uint8_t *)v171;
    v222 = (_TtC14softposreaderd12RemoteReader *)swift_slowAlloc(32, -1);
    aBlock = v222;
    v218 = v23;
    *(_DWORD *)v172 = 136315138;
    v173 = Data.hexString()();
    v229 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(v173._countAndFlagsBits, (unint64_t)v173._object, (uint64_t *)&aBlock);
    v136 = v227;
    v23 = v218;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v230, v172 + 4, v172 + 12);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v173._object, v174, v175, v176, v177, v178, v179, v180);
    sub_100005DE0(v165, v166);
    sub_100005DE0(v165, v166);
    v181 = v217;
    _os_log_impl((void *)&_mh_execute_header, v217, v169, "Config ID: %s", v172, 0xCu);
    v182 = v222;
    swift_arrayDestroy(v222, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v182, -1, -1);
    swift_slowDealloc(v172, -1, -1);

  }
  else
  {
    sub_100005DE0(v165, v166);
    sub_100005DE0(v165, v166);

  }
  v183 = v220;
  v184 = sub_100003A2C(&qword_1001AE238);
  inited = swift_initStackObject(v184, v230);
  *(_OWORD *)(inited + 16) = xmmword_10015A6C0;
  *(_BYTE *)(inited + 32) = 3;
  v186 = Data.hexString()();
  *(_QWORD *)(inited + 64) = &type metadata for String;
  *(Swift::String *)(inited + 40) = v186;
  *(_BYTE *)(inited + 72) = 15;
  *(_QWORD *)(inited + 104) = &type metadata for String;
  *(_QWORD *)(inited + 80) = countAndFlagsBits;
  *(_QWORD *)(inited + 88) = v183;
  v193 = (_TtC14softposreaderd12RemoteReader *)sub_1000E8B30(inited, (uint64_t)v186._object, v187, v188, v189, v190, v191, v192);
  v194 = *(os_unfair_lock_s **)(v136 + 56);
  v195 = (uint64_t)&v194[4];
  v196 = v194 + 8;
  os_unfair_lock_lock(v194 + 8);
  sub_10005FDB8(v195, (uint64_t)v193);
  os_unfair_lock_unlock(v196);
  swift_bridgeObjectRelease(v193, v197, v198, v199, v200, v201, v202, v203);
  sub_100005DE0(v165, v221);
  v204 = (objc_class *)type metadata accessor for ORReadOperation();
  v228.receiver = v23;
  v228.super_class = v204;
  objc_msgSendSuper2(&v228, "init");

  swift_unknownObjectRelease(v224);
  swift_release(v136);
  swift_release(v225);
  sub_100005D3C(v226);
}

uint64_t sub_100026E6C(void *a1, id a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _TtC14softposreaderd12RemoteReader *v27;
  SEL v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  _QWORD v35[2];
  uint64_t v36[3];
  uint64_t v37;
  uint64_t v38;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 == 0) == (a2 == 0))
  {
    __break(1u);
LABEL_15:
    swift_once(&qword_1001ACE78, sub_100025980);
LABEL_4:
    v13 = sub_100003A14(v8, (uint64_t)qword_1001AE250);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "NFSecureElementReaderSession started", v16, 2u);
      swift_slowDealloc(v16, -1, -1);

    }
    else
    {

    }
    return OS_dispatch_semaphore.signal()();
  }
  if (a1)
  {
    swift_beginAccess(a3 + 16, v36, 1, 0);
    v12 = *(void **)(a3 + 16);
    *(_QWORD *)(a3 + 16) = a1;
    a2 = a1;

    if (qword_1001ACE78 == -1)
      goto LABEL_4;
    goto LABEL_15;
  }
  if (qword_1001ACE78 != -1)
    swift_once(&qword_1001ACE78, sub_100025980);
  v17 = sub_100003A14(v8, (uint64_t)qword_1001AE250);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v17, v8);
  swift_errorRetain();
  v18 = swift_errorRetain();
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v19, v20))
  {
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return OS_dispatch_semaphore.signal()();
  }
  v35[1] = a4;
  v21 = (uint8_t *)swift_slowAlloc(12, -1);
  result = swift_slowAlloc(32, -1);
  v36[0] = result;
  *(_DWORD *)v21 = 136315138;
  if (a2)
  {
    v23 = result;
    v37 = (uint64_t)a2;
    swift_errorRetain();
    v24 = sub_100003A2C((uint64_t *)&unk_1001B1280);
    v25 = String.init<A>(describing:)(&v37, v24);
    v27 = (_TtC14softposreaderd12RemoteReader *)v26;
    v37 = sub_1000056EC(v25, v26, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease(v27, v28, v29, v30, v31, v32, v33, v34);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Error from startSecureElementReaderSession: %s", v21, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v21, -1, -1);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return OS_dispatch_semaphore.signal()();
  }
  __break(1u);
  return result;
}

id sub_1000271C4()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  objc_super v10;

  v1 = v0;
  if (qword_1001ACE78 != -1)
    swift_once(&qword_1001ACE78, sub_100025980);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100003A14(v2, (uint64_t)qword_1001AE250);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "ORReadOperation deinit", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = *(_QWORD *)&v1[OBJC_IVAR____TtC9SPREngine15ORReadOperation_timeoutWorkItem];
  v8 = swift_retain();
  dispatch thunk of DispatchWorkItem.cancel()(v8);
  swift_release(v7);
  v10.receiver = v1;
  v10.super_class = (Class)type metadata accessor for ORReadOperation();
  return objc_msgSendSuper2(&v10, "dealloc");
}

uint64_t sub_1000273C4()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  objc_class *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _TtC14softposreaderd12RemoteReader *v17;
  _QWORD aBlock[5];
  uint64_t v19;
  objc_super v20;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (objc_class *)type metadata accessor for ORReadOperation();
  v20.receiver = v0;
  v20.super_class = v9;
  objc_msgSendSuper2(&v20, "cancel");
  v16 = *(_QWORD *)&v0[OBJC_IVAR____TtC9SPREngine15ORReadOperation_queue];
  v10 = swift_allocObject(&unk_10019AA88, 24, 7);
  *(_QWORD *)(v10 + 16) = v0;
  aBlock[4] = sub_100030868;
  v19 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000043B8;
  aBlock[3] = &unk_10019AAA0;
  v11 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v0);
  v17 = &_swiftEmptyArrayStorage;
  v12 = sub_100005F1C((unint64_t *)&qword_1001B1260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v13 = sub_100003A2C((uint64_t *)&unk_1001AE400);
  v14 = sub_100030828((unint64_t *)&qword_1001B1270, (uint64_t *)&unk_1001AE400, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v13, v14, v1, v12);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v11);
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release(v19);
}

uint64_t sub_1000275C8(uint64_t a1)
{
  void *v2;
  uint64_t (**v3)();
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  _TtC14softposreaderd12RemoteReader *v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  void *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t inited;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  _TtC14softposreaderd12RemoteReader *v54;
  os_unfair_lock_s *v55;
  uint64_t v56;
  os_unfair_lock_s *v57;
  SEL v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  void (*v65)(_QWORD, uint64_t);
  _QWORD v66[3];
  char v67;
  uint64_t v68;
  _BYTE v69[72];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72[4];

  v2 = *(void **)(a1 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError);
  v3 = &off_1001AC000;
  if (v2)
  {
    v4 = qword_1001ACE78;
    v5 = v2;
    if (v4 != -1)
      swift_once(&qword_1001ACE78, sub_100025980);
    v6 = type metadata accessor for Logger(0);
    sub_100003A14(v6, (uint64_t)qword_1001AE250);
    v7 = v5;
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v72[0] = v11;
      *(_DWORD *)v10 = 136315138;
      v70 = (uint64_t)v7;
      type metadata accessor for ORError(0);
      v13 = v12;
      v14 = v7;
      v15 = String.init<A>(describing:)(&v70, v13);
      v17 = (_TtC14softposreaderd12RemoteReader *)v16;
      v70 = sub_1000056EC(v15, v16, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v10 + 4, v10 + 12);

      swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      v25 = v11;
      v3 = &off_1001AC000;
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v10, -1, -1);

    }
    else
    {

    }
  }
  if (v3[463] != (uint64_t (*)())-1)
    swift_once(&qword_1001ACE78, sub_100025980);
  v26 = type metadata accessor for Logger(0);
  v27 = sub_100003A14(v26, (uint64_t)qword_1001AE250);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "ORReadOperation onUpdate(with: .cancelled)", v30, 2u);
    swift_slowDealloc(v30, -1, -1);
  }

  v31 = *(void **)(a1 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_delegate);
  if (v31)
    objc_msgSend(v31, "onUpdateWithEvent:", 2);
  sub_100027ABC();
  v32 = sub_100005EF8((_QWORD *)(a1 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_managedData), *(_QWORD *)(a1 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_managedData + 24));
  __chkstk_darwin(v32);
  v66[2] = v33;
  v67 = 1;
  v34 = sub_100003A2C(&qword_1001B12E0);
  OS_dispatch_queue.sync<A>(execute:)(v72, sub_100030870, v66, v34);
  if (!v72[3])
    return sub_100007B30((uint64_t)v72);
  v35 = sub_100003A2C((uint64_t *)&unk_1001B1280);
  result = swift_dynamicCast(&v70, v72, (char *)&type metadata for Any + 8, v35, 6);
  if ((result & 1) != 0)
  {
    v37 = v70;
    v38 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_analytics);
    v39 = sub_100003A2C(&qword_1001AE238);
    inited = swift_initStackObject(v39, v69);
    *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
    *(_BYTE *)(inited + 32) = 7;
    v72[0] = v37;
    swift_errorRetain();
    type metadata accessor for ORError(0);
    v42 = v41;
    if (swift_dynamicCast(&v70, v72, v35, v41, 6))
    {
      v50 = (void *)v70;
      v68 = v70;
      v51 = sub_100005F1C((unint64_t *)&qword_1001AE4B0, (uint64_t (*)(uint64_t))type metadata accessor for ORError, (uint64_t)&unk_10015C458);
      _BridgedStoredNSError.code.getter(&v70, v42, v51);

      v52 = v70;
      v53 = &type metadata for Int;
    }
    else
    {
      v53 = 0;
      v52 = 0;
      *(_QWORD *)(inited + 48) = 0;
      *(_QWORD *)(inited + 56) = 0;
    }
    *(_QWORD *)(inited + 64) = v53;
    *(_QWORD *)(inited + 40) = v52;
    v54 = (_TtC14softposreaderd12RemoteReader *)sub_1000E8B30(inited, v43, v44, v45, v46, v47, v48, v49);
    v55 = *(os_unfair_lock_s **)(v38 + 56);
    v56 = (uint64_t)&v55[4];
    v57 = v55 + 8;
    os_unfair_lock_lock(v55 + 8);
    sub_10005FDB8(v56, (uint64_t)v54);
    os_unfair_lock_unlock(v57);
    swift_bridgeObjectRelease(v54, v58, v59, v60, v61, v62, v63, v64);
    sub_100025138(5);
    v65 = *(void (**)(_QWORD, uint64_t))(a1 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_completion);
    swift_errorRetain();
    v65(0, v37);
    swift_errorRelease();
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_100027ABC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;

  if (qword_1001ACE78 != -1)
    swift_once(&qword_1001ACE78, sub_100025980);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100003A14(v1, (uint64_t)qword_1001AE250);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "ORReadOperation internalCancel()", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = objc_msgSend(v0, "isExecuting");
  if (!(_DWORD)v6)
    return sub_1000287D0();
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "ORReadOperation isExecuting", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  return sub_100027C2C(0);
}

uint64_t sub_100027C2C(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  void *v8;
  unsigned int v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _TtC14softposreaderd12RemoteReader *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v32;
  uint64_t v33;
  id v34;

  if (qword_1001ACE78 != -1)
    swift_once(&qword_1001ACE78, sub_100025980);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_100003A14(v3, (uint64_t)qword_1001AE250);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "ORReadOperation closeReadingEMV()", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = *(void **)(v1 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_nfSEReaderSession);
  v34 = 0;
  v9 = objc_msgSend(v8, "stop:", &v34);
  v10 = v34;
  if (v9)
  {
    v11 = v34;
    if ((a1 & 1) != 0)
      return sub_100027F14();
    return sub_1000287D0();
  }
  v12 = v34;
  v13 = _convertNSErrorToError(_:)(v10);

  swift_willThrow(v14);
  swift_errorRetain();
  v15 = swift_errorRetain();
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = (void *)swift_slowAlloc(32, -1);
    v34 = v19;
    *(_DWORD *)v18 = 136315138;
    v32 = v13;
    swift_errorRetain();
    v20 = sub_100003A2C((uint64_t *)&unk_1001B1280);
    v21 = String.init<A>(describing:)(&v32, v20);
    v23 = (_TtC14softposreaderd12RemoteReader *)v22;
    v32 = sub_1000056EC(v21, v22, (uint64_t *)&v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Error from NFSecureElementReaderSession.stop(): %s", v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    swift_errorRelease();
    if ((a1 & 1) == 0)
      return sub_1000287D0();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    if ((a1 & 1) == 0)
      return sub_1000287D0();
  }
  return sub_100027F14();
}

uint64_t sub_100027F14()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _TtC14softposreaderd12RemoteReader *v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001ACE78 != -1)
    swift_once(&qword_1001ACE78, sub_100025980);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100003A14(v8, (uint64_t)qword_1001AE250);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "clearDataAndCompleteOperation()", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  v13 = swift_allocObject(&unk_10019A9C0, 24, 7);
  *(_QWORD *)(v13 + 16) = v1;
  aBlock[4] = sub_1000306C0;
  v24 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000043B8;
  aBlock[3] = &unk_10019A9D8;
  v14 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v1);
  v22 = &_swiftEmptyArrayStorage;
  v15 = sub_100005F1C((unint64_t *)&qword_1001B1260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = sub_100003A2C((uint64_t *)&unk_1001AE400);
  v17 = sub_100030828((unint64_t *)&qword_1001B1270, (uint64_t *)&unk_1001AE400, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v16, v17, v2, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v20);
  swift_release(v24);
  return sub_1000287D0();
}

uint64_t sub_1000281BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_signpost_type_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint8_t *v20;
  os_signpost_id_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  NSObject *v34;
  char *v35;
  uint64_t v36;
  os_signpost_type_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint8_t *v44;
  os_signpost_id_t v45;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;

  v2 = type metadata accessor for OSSignpostError(0);
  v48 = *(_QWORD *)(v2 - 8);
  v49 = v2;
  __chkstk_darwin(v2);
  v47 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OSSignpostID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v50 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v46 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v46 - v11;
  if (qword_1001ACE80 != -1)
    swift_once(&qword_1001ACE80, sub_100025A10);
  v13 = type metadata accessor for OSSignposter(0);
  v14 = sub_100003A14(v13, (uint64_t)qword_1001AE268);
  v15 = static OSSignpostID.exclusive.getter();
  v16 = OSSignposter.logHandle.getter(v15);
  v17 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v46 = (void (*)(char *, char *, uint64_t))v14;
    v18 = a1;
    v19 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v19(v10, v12, v4);
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    v21 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, v17, v21, "ttp-clear-data", "begin ttp clear data", v20, 2u);
    swift_slowDealloc(v20, -1, -1);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    v22 = v19;
    a1 = v18;
  }
  else
  {

    v22 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  }
  v46 = v22;
  v22(v10, v12, v4);
  v23 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  v24 = OSSignpostIntervalState.init(id:isOpen:)(v10, 1);
  v25 = *(void (**)(char *, uint64_t))(v5 + 8);
  v25(v12, v4);
  v26 = qword_1001AD2C8;
  v27 = *(id *)(a1 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_nfSEReaderSession);
  if (v26 != -1)
    swift_once(&qword_1001AD2C8, sub_10012B690);
  v28 = type metadata accessor for Logger(0);
  v29 = sub_100003A14(v28, (uint64_t)qword_1001B3A10);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "clearProvisionData()", v32, 2u);
    swift_slowDealloc(v32, -1, -1);
  }

  sub_10002F3B4(1u, 0, 0xF000000000000000);
  v34 = OSSignposter.logHandle.getter(v33);
  v35 = v50;
  v36 = OSSignpostIntervalState.signpostID.getter();
  v37 = static os_signpost_type_t.end.getter(v36);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v38 = swift_retain();
    v39 = v47;
    checkForErrorAndConsumeState(state:)(v38);
    swift_release(v24);
    v41 = v48;
    v40 = v49;
    if ((*(unsigned int (**)(char *, uint64_t))(v48 + 88))(v39, v49) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v42 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v41 + 8))(v39, v40);
      v42 = "end ttp clear data";
    }
    v46(v10, v35, v4);
    v44 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v44 = 0;
    v45 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v34, v37, v45, "ttp-clear-data", v42, v44, 2u);
    swift_slowDealloc(v44, -1, -1);

    v25(v35, v4);
    swift_release(v24);
    return ((uint64_t (*)(char *, uint64_t))v25)(v10, v4);
  }
  else
  {

    v25(v35, v4);
    return swift_release(v24);
  }
}

uint64_t sub_1000287D0()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _TtC14softposreaderd12RemoteReader *v21;
  _QWORD aBlock[5];
  uint64_t v23;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v20 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001ACE78 != -1)
    swift_once(&qword_1001ACE78, sub_100025980);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_100003A14(v9, (uint64_t)qword_1001AE250);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "completeOperation()", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  objc_msgSend(v1, "setExecuting:", 0);
  objc_msgSend(v1, "setFinished:", 1);
  v14 = swift_allocObject(&unk_10019A920, 24, 7);
  *(_QWORD *)(v14 + 16) = v1;
  aBlock[4] = sub_1000306B0;
  v23 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000043B8;
  aBlock[3] = &unk_10019A938;
  v15 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v1);
  v21 = &_swiftEmptyArrayStorage;
  v16 = sub_100005F1C((unint64_t *)&qword_1001B1260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_100003A2C((uint64_t *)&unk_1001AE400);
  v18 = sub_100030828((unint64_t *)&qword_1001B1270, (uint64_t *)&unk_1001AE400, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v17, v18, v2, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release(v23);
}

void sub_100028A94(char *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char *v6;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *(void **)&a1[OBJC_IVAR____TtC9SPREngine15ORReadOperation_nfSEReaderSession];
  v3 = swift_allocObject(&unk_10019A970, 24, 7);
  *(_QWORD *)(v3 + 16) = a1;
  v7[4] = sub_1000306B8;
  v8 = v3;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_1000043B8;
  v7[3] = &unk_10019A988;
  v4 = _Block_copy(v7);
  v5 = v8;
  v6 = a1;
  swift_release(v5);
  objc_msgSend(v2, "endSessionWithCompletion:", v4);
  _Block_release(v4);
}

id sub_100028B54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  id result;

  if (qword_1001ACE78 != -1)
    swift_once(&qword_1001ACE78, sub_100025980);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100003A14(v2, (uint64_t)qword_1001AE250);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "NF SE Reader Session ended, onUpdate(with: .closed)", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  result = *(id *)(a1 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_delegate);
  if (result)
    return objc_msgSend(result, "onUpdateWithEvent:", 3);
  return result;
}

uint64_t sub_100028C50()
{
  char *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t result;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  os_unfair_lock_s **v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  _DWORD *v27;
  _DWORD *v28;
  char *v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  id v52;
  _TtC14softposreaderd12RemoteReader *v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  id v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  id v63;
  id v64;
  uint64_t v65;
  uint64_t inited;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  _TtC14softposreaderd12RemoteReader *v74;
  os_unfair_lock_s *v75;
  uint64_t v76;
  os_unfair_lock_s *v77;
  SEL v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  unsigned int v85;
  _TtC14softposreaderd12RemoteReader *v86;
  _TtC14softposreaderd12RemoteReader *v87;
  char *v88;
  uint64_t v89;
  os_log_type_t v90;
  uint8_t *v91;
  _TtC14softposreaderd12RemoteReader *v92;
  _TtC14softposreaderd12RemoteReader *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  _QWORD *v98;
  id v99;
  id v100;
  uint64_t v101;
  _TtC14softposreaderd12RemoteReader *v102;
  _TtC14softposreaderd12RemoteReader *v103;
  _TtC14softposreaderd12RemoteReader *v104;
  uint64_t v105;
  _TtC14softposreaderd12RemoteReader *v106;
  char v107;
  SEL v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  id v114;
  SEL v115;
  id v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  unint64_t v122;
  uint64_t v123;
  void *v124;
  Swift::String v125;
  Swift::String v126;
  _TtC14softposreaderd12RemoteReader *object;
  SEL v128;
  id v129;
  id v130;
  id v131;
  id v132;
  id v133;
  id v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  os_unfair_lock_s **v139;
  uint64_t v140;
  id v141;
  char *v142;
  char *v143;
  uint64_t v144;
  char *v145;
  id v146[2];
  double v147;
  _TtC14softposreaderd12RemoteReader *v148;
  void *v149;
  int v150;
  uint64_t v151;
  uint64_t aBlock;
  _QWORD v153[4];
  uint64_t v154;

  v1 = v0;
  v2 = type metadata accessor for DispatchTime(0);
  v3 = *(char **)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v137 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v137 - v7;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v137 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void **)&v1[OBJC_IVAR____TtC9SPREngine15ORReadOperation_nfSEReaderSession];
  objc_msgSend(v12, "setDelegate:", v1);
  objc_msgSend(v12, "setSessionDelegate:", v1);
  if ((objc_msgSend(v1, "isCancelled") & 1) != 0)
  {
    if (qword_1001ACE78 != -1)
      swift_once(&qword_1001ACE78, sub_100025980);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_100003A14(v13, (uint64_t)qword_1001AE250);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "ORReadOperation cancelled before start()", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }
LABEL_6:

    return sub_100027ABC();
  }
  v143 = v8;
  v144 = v2;
  if (qword_1001ACE78 != -1)
    swift_once(&qword_1001ACE78, sub_100025980);
  v141 = v12;
  v145 = v3;
  v19 = type metadata accessor for Logger(0);
  v138 = sub_100003A14(v19, (uint64_t)qword_1001AE250);
  v20 = Logger.logObject.getter(v138);
  v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "ORReadOperation start()", v22, 2u);
    swift_slowDealloc(v22, -1, -1);
  }
  v140 = v9;
  v142 = v6;

  v23 = *(os_unfair_lock_s ***)&v1[OBJC_IVAR____TtC9SPREngine15ORReadOperation_parameters];
  v147 = (double)(uint64_t)objc_msgSend(v23, "provisionReadTimeout");
  if ((uint64_t)objc_msgSend(v23, "provisionReadTimeout") < 1
    || (uint64_t)objc_msgSend(v23, "provisionReadTimeout") >= 41)
  {
    v24 = v1;
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (_DWORD *)swift_slowAlloc(22, -1);
      v139 = v23;
      v28 = v27;
      *v27 = 134218240;
      v29 = v1;
      v30 = v27 + 1;
      aBlock = (uint64_t)objc_msgSend(v139, "provisionReadTimeout");
      v31 = v30;
      v1 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v153, v31, v28 + 3);

      *((_WORD *)v28 + 6) = 2048;
      aBlock = 40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v153, (char *)v28 + 14, (char *)v28 + 22);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Input provisionReadTimeout of %ld was invalid. Using maxPollingTime of %ld.", (uint8_t *)v28, 0x16u);
      v23 = v139;
      swift_slowDealloc(v28, -1, -1);

    }
    else
    {

    }
    v147 = 40.0;
  }
  v139 = *(os_unfair_lock_s ***)&v1[OBJC_IVAR____TtC9SPREngine15ORReadOperation_analytics];
  *((_BYTE *)v139 + 64) = 0;
  v32 = OBJC_IVAR____TtC9SPREngine15ORReadOperation_timeoutWorkItem;
  v33 = *(_QWORD *)&v1[OBJC_IVAR____TtC9SPREngine15ORReadOperation_timeoutWorkItem];
  v34 = swift_retain();
  dispatch thunk of DispatchWorkItem.cancel()(v34);
  swift_release(v33);
  v35 = swift_allocObject(&unk_10019AA10, 24, 7);
  swift_unknownObjectWeakInit(v35 + 16, v1);
  v36 = v147;
  v37 = swift_allocObject(&unk_10019AA38, 32, 7);
  *(_QWORD *)(v37 + 16) = v35;
  *(double *)(v37 + 24) = v36;
  v153[3] = sub_10003081C;
  v154 = v37;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v153[0] = 1107296256;
  v153[1] = sub_1000043B8;
  v153[2] = &unk_10019AA50;
  v38 = _Block_copy(&aBlock);
  v148 = &_swiftEmptyArrayStorage;
  v39 = sub_100005F1C((unint64_t *)&qword_1001B1260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  swift_retain();
  v40 = sub_100003A2C((uint64_t *)&unk_1001AE400);
  v41 = sub_100030828((unint64_t *)&qword_1001B1270, (uint64_t *)&unk_1001AE400, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v148, v40, v41, v140, v39);
  v42 = type metadata accessor for DispatchWorkItem(0);
  swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
  v43 = DispatchWorkItem.init(flags:block:)(v11, v38);
  v44 = v154;
  swift_release(v35);
  swift_release(v44);
  v45 = *(_QWORD *)&v1[v32];
  *(_QWORD *)&v1[v32] = v43;
  v46 = swift_release(v45);
  v47 = v142;
  static DispatchTime.now()(v46);
  swift_beginAccess(&v147, &aBlock, 0, 0);
  v48 = v143;
  + infix(_:_:)(v47);
  v49 = v144;
  v50 = (void (*)(char *, uint64_t))*((_QWORD *)v145 + 1);
  v50(v47, v144);
  v145 = v1;
  v51 = *(_QWORD *)&v1[v32];
  swift_retain();
  OS_dispatch_queue.asyncAfter(deadline:execute:)(v48, v51);
  swift_release(v51);
  v50(v48, v49);
  v52 = v141;
  objc_msgSend(v23, "amount");
  LODWORD(v144) = v150;
  v53 = v148;
  v54 = (uint64_t)v149;
  v55 = objc_msgSend(v23, "transactionId");
  v56 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v55);
  v58 = v57;

  v59 = objc_msgSend(v23, "unpredictableNumber");
  v60 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v59);
  v62 = v61;

  v63 = objc_msgSend(v23, "currencyCode");
  v64 = objc_msgSend(v23, "countryCode");
  sub_100029C14((uint64_t)v53, v54, v144, v56, v58, v60, v62, (uint64_t)v63, (uint64_t)v64);
  sub_100005DE0(v60, v62);
  sub_100005DE0(v56, v58);

  v65 = sub_100003A2C(&qword_1001AE238);
  inited = swift_initStackObject(v65, &v151);
  *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
  *(_BYTE *)(inited + 32) = 17;
  *(_QWORD *)(inited + 64) = &type metadata for UInt16;
  *(_WORD *)(inited + 40) = -28672;
  v74 = (_TtC14softposreaderd12RemoteReader *)sub_1000E8B30(inited, v67, v68, v69, v70, v71, v72, v73);
  v75 = v139[7];
  v76 = (uint64_t)&v75[4];
  v77 = v75 + 8;
  os_unfair_lock_lock(v75 + 8);
  sub_10005FDB8(v76, (uint64_t)v74);
  os_unfair_lock_unlock(v77);
  swift_bridgeObjectRelease(v74, v78, v79, v80, v81, v82, v83, v84);
  v148 = 0;
  v85 = objc_msgSend(v52, "start:", &v148);
  v86 = v148;
  if (!v85)
  {
    v92 = v148;
    v93 = (_TtC14softposreaderd12RemoteReader *)_convertNSErrorToError(_:)(v86);

    swift_willThrow(v94);
    v148 = v93;
    swift_errorRetain();
    v95 = sub_100003A2C((uint64_t *)&unk_1001B1280);
    v96 = sub_100005E24(0, (unint64_t *)&qword_1001AE420, NSError_ptr);
    v97 = swift_dynamicCast(v146, &v148, v95, v96, 0);
    v98 = v145;
    if (!v97)
    {
LABEL_34:
      swift_errorRelease();
      v148 = 0;
      v149 = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(51);
      v125._countAndFlagsBits = 0xD000000000000031;
      v125._object = (void *)0x8000000100169260;
      String.append(_:)(v125);
      v146[0] = v93;
      swift_errorRetain();
      v126._countAndFlagsBits = String.init<A>(describing:)(v146, v95);
      object = (_TtC14softposreaderd12RemoteReader *)v126._object;
      String.append(_:)(v126);
      swift_bridgeObjectRelease(object, v128, v129, v130, v131, v132, v133, v134);
      v135 = sub_1000247D0(20001, (uint64_t)v148, v149, 0);
      v136 = *(void **)((char *)v98 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError);
      *(_QWORD *)((char *)v98 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError) = v135;

      sub_100027ABC();
      return swift_errorRelease();
    }
    v99 = v146[0];
    v100 = objc_msgSend(v146[0], "domain");
    v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
    v103 = v102;

    v105 = String.init(cString:)("nfcd");
    v106 = v104;
    if (v101 == v105 && v103 == v104)
    {
      swift_bridgeObjectRelease_n(v103, 2);
    }
    else
    {
      v107 = _stringCompareWithSmolCheck(_:_:expecting:)(v101, v103, v105, v104, 0);
      swift_bridgeObjectRelease(v103, v108, v109, v110, v111, v112, v113, v114);
      swift_bridgeObjectRelease(v106, v115, v116, v117, v118, v119, v120, v121);
      if ((v107 & 1) == 0)
      {
LABEL_33:

        goto LABEL_34;
      }
    }
    v122 = (unint64_t)objc_msgSend(v99, "code");
    if ((v122 & 0x8000000000000000) != 0)
    {
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    }
    else
    {
      if (!HIDWORD(v122))
      {
        if (v122 == 47)
        {
          swift_errorRelease();
          v123 = sub_1000247D0(20006, 0xD000000000000044, (void *)0x80000001001692A0, 0);
          v124 = *(void **)((char *)v98 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError);
          *(_QWORD *)((char *)v98 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError) = v123;

          sub_100027ABC();
          return swift_errorRelease();
        }
        goto LABEL_33;
      }
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
    }
    __break(1u);
    return result;
  }
  v87 = v148;
  v88 = v145;
  objc_msgSend(v145, "setExecuting:", 1);
  if (qword_1001ACE80 != -1)
    swift_once(&qword_1001ACE80, sub_100025A10);
  v89 = type metadata accessor for OSSignposter(0);
  sub_100003A14(v89, (uint64_t)qword_1001AE268);
  sub_10003AFE8("ttp-preprocessing", 17, 2, (uint64_t)v52, 0xD000000000000015, 0x80000001001692F0);
  result = (uint64_t)objc_msgSend(v88, "isCancelled");
  if ((result & 1) != 0)
  {
    v15 = Logger.logObject.getter(result);
    v90 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v90))
    {
      v91 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v91 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v90, "ORReadOperation is cancelled after start()", v91, 2u);
      swift_slowDealloc(v91, -1, -1);
    }
    goto LABEL_6;
  }
  return result;
}

void sub_100029AC8(uint64_t a1, double a2)
{
  uint64_t v3;
  char *Strong;
  char *v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  char v12[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v12, 0, 0);
  Strong = (char *)swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    if ((objc_msgSend(Strong, "isCancelled") & 1) == 0
      && (objc_msgSend(v5, "isFinished") & 1) == 0)
    {
      if (objc_msgSend(v5, "isExecuting"))
      {
        v10 = 0;
        v11 = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(34);
        v6._object = (void *)0x8000000100169310;
        v6._countAndFlagsBits = 0xD000000000000018;
        String.append(_:)(v6);
        Double.write<A>(to:)(&v10, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, a2);
        v7._countAndFlagsBits = 0x64657370616C6520;
        v7._object = (void *)0xE800000000000000;
        String.append(_:)(v7);
        v8 = sub_1000247D0(20004, v10, v11, 0);
        v9 = *(void **)&v5[OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError];
        *(_QWORD *)&v5[OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError] = v8;

        *(_BYTE *)(*(_QWORD *)&v5[OBJC_IVAR____TtC9SPREngine15ORReadOperation_analytics] + 64) = 1;
        objc_msgSend(v5, "cancel");
      }
    }

  }
}

void sub_100029C14(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[12];
  uint64_t v34;
  char *v35;
  _QWORD v36[2];
  __int16 v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;

  v33[2] = a8;
  v33[6] = a7;
  v33[5] = a6;
  v33[4] = a5;
  v33[3] = a4;
  v12 = type metadata accessor for Locale(0);
  v33[10] = *(_QWORD *)(v12 - 8);
  v33[11] = v12;
  __chkstk_darwin(v12);
  v33[9] = (char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Date(0, v14);
  v33[7] = *(_QWORD *)(v15 - 8);
  v33[8] = v15;
  __chkstk_darwin(v15);
  v17 = (char *)v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001AD2C8 != -1)
    swift_once(&qword_1001AD2C8, sub_10012B690);
  v35 = v17;
  v33[1] = a9;
  v18 = type metadata accessor for Logger(0);
  v19 = sub_100003A14(v18, (uint64_t)qword_1001B3A10);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "startProvision(amount:transactionID:unpredictableNumber:currencyCode:countryCode:)", v22, 2u);
    swift_slowDealloc(v22, -1, -1);
  }
  LODWORD(v34) = HIWORD(a3);

  v23 = objc_allocWithZone((Class)NSDecimalNumber);
  v36[0] = a1;
  v36[1] = a2;
  v37 = a3;
  v38 = v34;
  v24 = objc_msgSend(v23, "initWithDecimal:", v36);
  v25 = objc_msgSend(v24, "integerValue");

  v26 = sub_100055440((uint64_t)v25);
  v28 = v27;
  sub_10005570C(v26, v27);
  v30 = v29;
  v32 = v31;
  sub_100005DE0(v26, v28);
  v39 = v30;
  v40 = v32;
  __asm { BR              X9 }
}

uint64_t sub_10002A804()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  _QWORD aBlock[5];
  uint64_t v21;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001ACE78 != -1)
    swift_once(&qword_1001ACE78, sub_100025980);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_100003A14(v10, (uint64_t)qword_1001AE250);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "handleSessionReachedTimeLimit()", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  v15 = static DispatchQoS.userInitiated.getter();
  static DispatchWorkItemFlags.enforceQoS.getter(v15);
  v16 = swift_allocObject(&unk_10019A8D0, 24, 7);
  *(_QWORD *)(v16 + 16) = v1;
  aBlock[4] = sub_100030690;
  v21 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000043B8;
  aBlock[3] = &unk_10019A8E8;
  v17 = _Block_copy(aBlock);
  v18 = v1;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release(v21);
}

uint64_t sub_10002AA58(uint64_t a1, char a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char *v27;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[5];
  uint64_t v32;

  v3 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005E24(0, (unint64_t *)&qword_1001AE470, NSObject_ptr);
  if ((static NSObject.== infix(_:_:)(a1, *(_QWORD *)&v3[OBJC_IVAR____TtC9SPREngine15ORReadOperation_nfSEReaderSession]) & 1) != 0)
  {
    if (qword_1001ACE78 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1001ACE78, sub_100025980);
LABEL_3:
  v14 = type metadata accessor for Logger(0);
  v15 = sub_100003A14(v14, (uint64_t)qword_1001AE250);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(8, -1);
    v30 = v11;
    v19 = v10;
    v20 = v7;
    v21 = v6;
    v22 = v18;
    *(_DWORD *)v18 = 67109120;
    LODWORD(aBlock[0]) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(aBlock, (char *)aBlock + 4, v18 + 4, v18 + 8);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "didReceiveThermalIndication %{BOOL}d", v22, 8u);
    v23 = v22;
    v6 = v21;
    v7 = v20;
    v10 = v19;
    v11 = v30;
    swift_slowDealloc(v23, -1, -1);
  }

  v24 = static DispatchQoS.userInitiated.getter();
  static DispatchWorkItemFlags.enforceQoS.getter(v24);
  v25 = swift_allocObject(&unk_10019A880, 25, 7);
  *(_QWORD *)(v25 + 16) = v3;
  *(_BYTE *)(v25 + 24) = a2 & 1;
  aBlock[4] = sub_100030668;
  v32 = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000043B8;
  aBlock[3] = &unk_10019A898;
  v26 = _Block_copy(aBlock);
  v27 = v3;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v26);
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release(v32);
}

void sub_10002AD6C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  NSObject *oslog;
  unsigned __int8 v14;

  if ((a1 & 1) != 0)
  {
    v2 = sub_1000247D0(20006, 0xD00000000000001ELL, (void *)0x80000001001670E0, 0);
    v3 = *(void **)(v1 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError);
    *(_QWORD *)(v1 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError) = v2;

    if (qword_1001ACE80 != -1)
      swift_once(&qword_1001ACE80, sub_100025A10);
    v4 = type metadata accessor for OSSignposter(0);
    sub_100003A14(v4, (uint64_t)qword_1001AE268);
    sub_10003AFE8("ttp-reader-mode-polling", 23, 2, *(_QWORD *)(v1 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_nfSEReaderSession), 0xD000000000000027, 0x80000001001691B0);
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_analytics);
    v14 = 3;
    v6 = *(os_unfair_lock_s **)(v5 + 56);
    v7 = (uint64_t)&v6[4];
    v8 = v6 + 8;
    os_unfair_lock_lock(v6 + 8);
    sub_100037168(v7, &v14);
    os_unfair_lock_unlock(v8);
    sub_1000287D0();
  }
  else
  {
    if (qword_1001ACE78 != -1)
      swift_once(&qword_1001ACE78, sub_100025980);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_100003A14(v9, (uint64_t)qword_1001AE250);
    oslog = Logger.logObject.getter(v10);
    v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v11, "Reader Mode may be restarted", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

  }
}

uint64_t sub_10002AF64(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char *v20;
  _QWORD aBlock[5];
  uint64_t v23;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005E24(0, (unint64_t *)&qword_1001AE470, NSObject_ptr);
  if ((static NSObject.== infix(_:_:)(a1, *(_QWORD *)&v2[OBJC_IVAR____TtC9SPREngine15ORReadOperation_nfSEReaderSession]) & 1) != 0)
  {
    if (qword_1001ACE78 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1001ACE78, sub_100025980);
LABEL_3:
  v12 = type metadata accessor for Logger(0);
  v13 = sub_100003A14(v12, (uint64_t)qword_1001AE250);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "secureElementReaderSessionDidEndUnexpectedly()", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  v17 = static DispatchQoS.userInitiated.getter();
  static DispatchWorkItemFlags.enforceQoS.getter(v17);
  v18 = swift_allocObject(&unk_10019A830, 24, 7);
  *(_QWORD *)(v18 + 16) = v2;
  aBlock[4] = sub_100030A10;
  v23 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000043B8;
  aBlock[3] = &unk_10019A848;
  v19 = _Block_copy(aBlock);
  v20 = v2;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return swift_release(v23);
}

uint64_t sub_10002B218()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _TtC14softposreaderd12RemoteReader *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  void *v26;
  id v28;
  uint64_t v29;

  v1 = sub_1000247D0(20001, 0xD00000000000002FLL, (void *)0x8000000100169180, 0);
  v2 = OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError;
  v3 = *(void **)&v0[OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError];
  *(_QWORD *)&v0[OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError] = v1;

  if (qword_1001ACE78 != -1)
    swift_once(&qword_1001ACE78, sub_100025980);
  v4 = type metadata accessor for Logger(0);
  sub_100003A14(v4, (uint64_t)qword_1001AE250);
  v5 = v0;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    *(_DWORD *)v8 = 136315138;
    v28 = *(id *)&v0[v2];
    v29 = v9;
    v10 = v28;
    v11 = sub_100003A2C(&qword_1001AE478);
    v12 = String.init<A>(describing:)(&v28, v11);
    v14 = (_TtC14softposreaderd12RemoteReader *)v13;
    v28 = (id)sub_1000056EC(v12, v13, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v8 + 4, v8 + 12);

    swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "ORReadOperation onUpdate(with: .closed)", v25, 2u);
    swift_slowDealloc(v25, -1, -1);
  }

  v26 = *(void **)&v5[OBJC_IVAR____TtC9SPREngine15ORReadOperation_delegate];
  if (v26)
    objc_msgSend(v26, "onUpdateWithEvent:", 3);
  return sub_1000287D0();
}

uint64_t sub_10002B498(uint64_t a1, uint64_t a2)
{
  return sub_10002BB70(a1, a2, (uint64_t)&unk_10019A7E0, (uint64_t)sub_100030620, (uint64_t)&unk_10019A7F8);
}

void sub_10002B4C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  char v5;
  const char *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _TtC14softposreaderd12RemoteReader *v13;
  uint64_t v14;
  _TtC14softposreaderd12RemoteReader *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  unsigned int *v21;
  unsigned int v22;
  char v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  _DWORD *v36;
  unsigned int *v37;
  unsigned int v38;
  _DWORD *v39;
  int v40;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  void *v47;
  void *v48;
  os_unfair_lock_s *v49;
  _TtC14softposreaderd12RemoteReader **v50;
  os_unfair_lock_s *v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  id v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  os_unfair_lock_s *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD v67[5];
  __int128 v68;
  __int128 v69;

  v2 = v1;
  v65 = 0x676E696C6C6F50;
  v66 = 0xE700000000000000;
  AnyHashable.init<A>(_:)(v67, &v65, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v4 = sub_10000AD94((uint64_t)v67), (v5 & 1) != 0))
  {
    sub_100005D5C(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v68);
  }
  else
  {
    v68 = 0u;
    v69 = 0u;
  }
  sub_10000CAAC((uint64_t)v67);
  if (!*((_QWORD *)&v69 + 1))
  {
    sub_100007B30((uint64_t)&v68);
    goto LABEL_31;
  }
  if ((swift_dynamicCast(&v65, &v68, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    goto LABEL_31;
  v14 = v65;
  v13 = (_TtC14softposreaderd12RemoteReader *)v66;
  if (v65 == 65 && v66 == 0xE100000000000000)
  {
    v15 = (_TtC14softposreaderd12RemoteReader *)0xE100000000000000;
LABEL_13:
    swift_bridgeObjectRelease(v15, v6, v7, v8, v9, v10, v11, v12);
    if (qword_1001ACE78 != -1)
      swift_once(&qword_1001ACE78, sub_100025980);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_100003A14(v16, (uint64_t)qword_1001AE250);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Type A polling didStart", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    v21 = (unsigned int *)(v2 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_pollingState);
    swift_beginAccess(v2 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_pollingState, v67, 33, 0);
    if ((int)v21[1] >= (int)*v21)
    {
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    goto LABEL_30;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(65, 0xE100000000000000, v65, v66, 0) & 1) != 0)
  {
    v15 = v13;
    goto LABEL_13;
  }
  if (v14 == 66 && v13 == (_TtC14softposreaderd12RemoteReader *)0xE100000000000000)
  {
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)0xE100000000000000, v6, v7, v8, v9, v10, v11, v12);
  }
  else
  {
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)(66, 0xE100000000000000, v14, v13, 0);
    swift_bridgeObjectRelease(v13, v24, v25, v26, v27, v28, v29, v30);
    if ((v23 & 1) == 0)
      goto LABEL_31;
  }
  if (qword_1001ACE78 != -1)
    swift_once(&qword_1001ACE78, sub_100025980);
  v31 = type metadata accessor for Logger(0);
  v32 = sub_100003A14(v31, (uint64_t)qword_1001AE250);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v35 = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Type B polling didStart", v35, 2u);
    swift_slowDealloc(v35, -1, -1);
  }

  v36 = (_DWORD *)(v2 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_pollingState);
  swift_beginAccess(v2 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_pollingState, v67, 33, 0);
  v37 = v36 + 1;
  if (*v36 >= v36[1])
  {
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
LABEL_30:
  swift_endAccess(v67);
LABEL_31:
  v39 = (_DWORD *)(v2 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_pollingState);
  swift_beginAccess(v2 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_pollingState, v67, 0, 0);
  v40 = v39[1];
  if (*v39 == 1 && v40 == 1)
  {
    if (qword_1001ACE78 != -1)
      swift_once(&qword_1001ACE78, sub_100025980);
    v52 = type metadata accessor for Logger(0);
    v53 = sub_100003A14(v52, (uint64_t)qword_1001AE250);
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v56 = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "ORReadOperation onUpdate(with: .ready)", v56, 2u);
      swift_slowDealloc(v56, -1, -1);
    }

    v57 = *(id *)(v2 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_delegate);
    if (v57)
      v57 = objc_msgSend(v57, "onUpdateWithEvent:", 0);
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v58, v59))
    {
      v60 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "--- --- ---> EMV-type polling started, tap a card to provision", v60, 2u);
      swift_slowDealloc(v60, -1, -1);
    }

    if (qword_1001ACE80 != -1)
      swift_once(&qword_1001ACE80, sub_100025A10);
    v61 = type metadata accessor for OSSignposter(0);
    sub_100003A14(v61, (uint64_t)qword_1001AE268);
    sub_10003AD24("ttp-reader-mode-polling", 23, 2, *(_QWORD *)(v2 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_nfSEReaderSession), 0xD000000000000011, 0x8000000100169160);
    v62 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_analytics);
    LOBYTE(v68) = 3;
    v63 = *(os_unfair_lock_s **)(v62 + 56);
    v64 = (uint64_t)&v63[4];
    v51 = v63 + 8;
    os_unfair_lock_lock(v63 + 8);
    sub_100037180(v64, (unsigned __int8 *)&v68);
  }
  else
  {
    if (*v39 != v40)
      return;
    if (qword_1001ACE78 != -1)
      swift_once(&qword_1001ACE78, sub_100025980);
    v42 = type metadata accessor for Logger(0);
    v43 = sub_100003A14(v42, (uint64_t)qword_1001AE250);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "ORReadOperation onUpdate(with: .cardTear)", v46, 2u);
      swift_slowDealloc(v46, -1, -1);
    }

    v47 = *(void **)(v2 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_delegate);
    if (v47)
      objc_msgSend(v47, "onUpdateWithEvent:", 5);
    v48 = *(void **)(v2 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError);
    *(_QWORD *)(v2 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError) = 0;

    v49 = *(os_unfair_lock_s **)(*(_QWORD *)(v2 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_analytics) + 56);
    v50 = (_TtC14softposreaderd12RemoteReader **)&v49[4];
    v51 = v49 + 8;
    os_unfair_lock_lock(v49 + 8);
    sub_10009B8C0(v50, 13, 1);
  }
  os_unfair_lock_unlock(v51);
}

uint64_t sub_10002BB54(uint64_t a1, uint64_t a2)
{
  return sub_10002BB70(a1, a2, (uint64_t)&unk_10019A790, (uint64_t)sub_100030354, (uint64_t)&unk_10019A7A8);
}

uint64_t sub_10002BB70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[5];
  uint64_t v26;

  v23 = a4;
  v24 = a5;
  v7 = v5;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005E24(0, (unint64_t *)&qword_1001AE470, NSObject_ptr);
  result = static NSObject.== infix(_:_:)(a1, *(_QWORD *)&v7[OBJC_IVAR____TtC9SPREngine15ORReadOperation_nfSEReaderSession]);
  if ((result & 1) != 0)
  {
    v19 = static DispatchQoS.userInitiated.getter();
    static DispatchWorkItemFlags.enforceQoS.getter(v19);
    v20 = swift_allocObject(a3, 32, 7);
    *(_QWORD *)(v20 + 16) = v7;
    *(_QWORD *)(v20 + 24) = a2;
    aBlock[4] = v23;
    v26 = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000043B8;
    aBlock[3] = v24;
    v21 = _Block_copy(aBlock);
    v22 = v7;
    swift_bridgeObjectRetain();
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v13, v21);
    _Block_release(v21);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    return swift_release(v26);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10002BD38(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(id, uint64_t))
{
  uint64_t v8;
  id v9;
  id v10;

  v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a4, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  v9 = a3;
  v10 = a1;
  a5(v9, v8);

  return swift_bridgeObjectRelease(v8);
}

uint64_t sub_10002BDC0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[5];
  _QWORD *v27;

  v6 = v5;
  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v12 - 8);
  v25 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005E24(0, (unint64_t *)&qword_1001AE470, NSObject_ptr);
  result = static NSObject.== infix(_:_:)(a1, *(_QWORD *)&v6[OBJC_IVAR____TtC9SPREngine15ORReadOperation_nfSEReaderSession]);
  if ((result & 1) != 0)
  {
    v20 = static DispatchQoS.userInitiated.getter();
    static DispatchWorkItemFlags.enforceQoS.getter(v20);
    v21 = (_QWORD *)swift_allocObject(&unk_10019A740, 56, 7);
    v21[2] = v6;
    v21[3] = a2;
    v21[4] = a3;
    v21[5] = a4;
    v21[6] = a5;
    aBlock[4] = sub_100030324;
    v27 = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000043B8;
    aBlock[3] = &unk_10019A758;
    v22 = _Block_copy(aBlock);
    v23 = v6;
    sub_100005D9C(a2, a3);
    swift_bridgeObjectRetain();
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v18, v14, v22);
    _Block_release(v22);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v25);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    return swift_release(v27);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10002C05C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10002E110(char a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  os_unfair_lock_s *v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  void *v23;
  uint64_t v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint8_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  uint8_t *v53;
  _TtC14softposreaderd12RemoteReader *v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _TtC14softposreaderd12RemoteReader *v63;
  _TtC14softposreaderd12RemoteReader *v64;
  uint64_t v65;
  uint64_t inited;
  uint64_t v67;
  uint64_t v68;
  _TtC14softposreaderd12RemoteReader *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  _TtC14softposreaderd12RemoteReader *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  SEL v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  _TtC14softposreaderd12RemoteReader *v90;
  _TtC14softposreaderd12RemoteReader *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  __int16 v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  SEL v115;
  id v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  uint64_t *v129;
  uint64_t v130;
  SEL v131;
  id v132;
  id v133;
  id v134;
  id v135;
  id v136;
  id v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  NSObject *v141;
  os_log_type_t v142;
  uint8_t *v143;
  uint64_t v144;
  _TtC14softposreaderd12RemoteReader *v145;
  os_unfair_lock_s *v146;
  uint64_t v147;
  os_unfair_lock_s *v148;
  SEL v149;
  id v150;
  id v151;
  id v152;
  id v153;
  id v154;
  id v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  SEL v160;
  id v161;
  id v162;
  id v163;
  id v164;
  id v165;
  id v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  void *v175;
  void *v176;
  void *v177;
  _TtC14softposreaderd12RemoteReader *v178;
  os_unfair_lock_s *v179;
  uint64_t v180;
  os_unfair_lock_s *v181;
  SEL v182;
  id v183;
  id v184;
  id v185;
  id v186;
  id v187;
  id v188;
  unint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char v198[232];
  char v199[112];
  _QWORD v200[3];
  __int128 v201;
  void *v202;

  v2 = v1;
  v4 = *(_QWORD *)&v1[OBJC_IVAR____TtC9SPREngine15ORReadOperation_analytics];
  v5 = *(os_unfair_lock_s **)(v4 + 56);
  v6 = v5 + 8;
  v7 = (uint64_t)&v5[4];
  LOBYTE(v201) = 1;
  os_unfair_lock_lock(v5 + 8);
  sub_100037168(v7, (unsigned __int8 *)&v201);
  os_unfair_lock_unlock(v6);
  if (qword_1001ACE80 != -1)
    swift_once(&qword_1001ACE80, sub_100025A10);
  v8 = type metadata accessor for OSSignposter(0);
  sub_100003A14(v8, (uint64_t)qword_1001AE268);
  v9 = *(void **)&v2[OBJC_IVAR____TtC9SPREngine15ORReadOperation_nfSEReaderSession];
  sub_10003B3B4("ttp-postprocessing", 18, 2, 0xD000000000000019, 0x8000000100168FF0, (unint64_t)"ttp-reader-mode-reading", 23, 2, 0x2070747420646E65uLL, 0xEC00000064616572, (uint64_t)v9);
  v10 = *(os_unfair_lock_s **)(v4 + 56);
  v11 = v10 + 8;
  v12 = (uint64_t)&v10[4];
  LOBYTE(v201) = 0;
  os_unfair_lock_lock(v10 + 8);
  sub_100037180(v12, (unsigned __int8 *)&v201);
  os_unfair_lock_unlock(v11);
  *(_BYTE *)(v4 + 66) = a1 == 6;
  *(_BYTE *)(v4 + 67) = a1 == 7;
  if ((objc_msgSend(v2, "isCancelled") & 1) != 0)
  {
    if (qword_1001ACE78 != -1)
      swift_once(&qword_1001ACE78, sub_100025980);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_100003A14(v13, (uint64_t)qword_1001AE250);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "ORReadOperation cancelled before postProvisionReadProcessing", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    return sub_100027ABC();
  }
  else
  {
    if (qword_1001ACE78 != -1)
      swift_once(&qword_1001ACE78, sub_100025980);
    v19 = type metadata accessor for Logger(0);
    v197 = sub_100003A14(v19, (uint64_t)qword_1001AE250);
    v20 = Logger.logObject.getter(v197);
    v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "ORReadOperation onUpdate(with: .complete)", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    v23 = *(void **)&v2[OBJC_IVAR____TtC9SPREngine15ORReadOperation_delegate];
    if (v23)
      objc_msgSend(v23, "onUpdateWithEvent:", 9);
    v24 = qword_1001AD2C8;
    v25 = v9;
    if (v24 != -1)
      swift_once(&qword_1001AD2C8, sub_10012B690);
    v195 = sub_100003A14(v19, (uint64_t)qword_1001B3A10);
    v26 = Logger.logObject.getter(v195);
    v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "getAnalyticsData()", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    v29 = (uint64_t *)TLVTag.provisionAppletAnalytics.unsafeMutableAddressor();
    v30 = sub_100080EB8(*v29);
    v32 = v31;
    v193 = v30;

    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "analyticsData received", v36, 2u);
      swift_slowDealloc(v36, -1, -1);
    }

    type metadata accessor for TLV();
    static TLV.decode(from:)(v193, v32);
    v64 = v63;
    v189 = v32;
    v191 = v2;
    v65 = sub_100003A2C(&qword_1001AE238);
    inited = swift_initStackObject(v65, v198);
    *(_OWORD *)(inited + 16) = xmmword_10015E3E0;
    *(_BYTE *)(inited + 32) = 0;
    *(_QWORD *)&v201 = v64;
    v67 = *(_QWORD *)TLVTag.applicationIdentifier.unsafeMutableAddressor();
    v190 = sub_100003A2C((uint64_t *)&unk_1001B36D0);
    v192 = sub_100030828((unint64_t *)&qword_1001AE440, (uint64_t *)&unk_1001B36D0, (uint64_t)&protocol conformance descriptor for [A]);
    v68 = Collection<>.first(tag:)(v67, v190, v192);
    v69 = v64;
    if (v68)
    {
      v70 = v68;
      v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v68 + 152))(v68);
      v73 = v72;
      swift_release(v70);
      v74 = &type metadata for String;
    }
    else
    {
      v71 = 0;
      v73 = 0;
      v74 = 0;
      *(_QWORD *)(inited + 56) = 0;
    }
    *(_QWORD *)(inited + 40) = v71;
    *(_QWORD *)(inited + 48) = v73;
    *(_QWORD *)(inited + 64) = v74;
    *(_BYTE *)(inited + 72) = 1;
    *(_QWORD *)&v201 = v69;
    v92 = (uint64_t *)TLVTag.applicationLabel.unsafeMutableAddressor();
    v93 = Collection<>.first(tag:)(*v92, v190, v192);
    if (v93
      && (v94 = v93,
          v95 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v93 + 296))(v93),
          v97 = v96,
          swift_release(v94),
          v97))
    {
      *(_QWORD *)(inited + 104) = &type metadata for String;
      *(_QWORD *)(inited + 80) = v95;
      *(_QWORD *)(inited + 88) = v97;
    }
    else
    {
      *(_OWORD *)(inited + 80) = 0u;
      *(_OWORD *)(inited + 96) = 0u;
    }
    *(_BYTE *)(inited + 112) = 4;
    *(_QWORD *)&v201 = v69;
    v98 = (uint64_t *)TLVTag.cryptogramInformationData.unsafeMutableAddressor();
    v99 = Collection<>.first(tag:)(*v98, v190, v192);
    if (!v99
      || (v100 = v99,
          v101 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v99 + 216))(v99),
          swift_release(v100),
          (v101 & 0x100) != 0))
    {
      *(_OWORD *)(inited + 120) = 0u;
      *(_OWORD *)(inited + 136) = 0u;
    }
    else
    {
      *(_QWORD *)(inited + 144) = &type metadata for UInt8;
      *(_BYTE *)(inited + 120) = v101;
    }
    *(_BYTE *)(inited + 152) = 10;
    *(_QWORD *)&v201 = v69;
    v102 = (uint64_t *)TLVTag.issuerApplicationData.unsafeMutableAddressor();
    v103 = Collection<>.first(tag:)(*v102, v190, v192);
    if (v103)
    {
      v104 = v103;
      v105 = (*(uint64_t (**)(void))(*(_QWORD *)v103 + 152))();
      v107 = v106;
      swift_release(v104);
      v108 = &type metadata for String;
    }
    else
    {
      v105 = 0;
      v107 = 0;
      v108 = 0;
      *(_QWORD *)(inited + 176) = 0;
    }
    *(_QWORD *)(inited + 160) = v105;
    *(_QWORD *)(inited + 168) = v107;
    *(_QWORD *)(inited + 184) = v108;
    *(_BYTE *)(inited + 192) = 9;
    *(_QWORD *)&v201 = v69;
    v109 = (uint64_t *)TLVTag.thirdPartyData.unsafeMutableAddressor();
    v110 = Collection<>.first(tag:)(*v109, v190, v192);
    if (v110)
    {
      v111 = v110;
      v112 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v110 + 152))(v110);
      v114 = v113;
      swift_release(v111);
      v202 = &type metadata for String;
      swift_bridgeObjectRelease(v69, v115, v116, v117, v118, v119, v120, v121);
      *(_QWORD *)&v201 = v112;
      *((_QWORD *)&v201 + 1) = v114;
      sub_100005D2C(&v201, (_OWORD *)(inited + 200));
    }
    else
    {
      *(_QWORD *)&v201 = v69;
      v129 = (uint64_t *)TLVTag.cardInterfaceCapabilities.unsafeMutableAddressor();
      v130 = Collection<>.first(tag:)(*v129, v190, v192);
      swift_bridgeObjectRelease(v69, v131, v132, v133, v134, v135, v136, v137);
      if (v130)
      {
        v138 = (*(uint64_t (**)(void))(*(_QWORD *)v130 + 152))();
        v140 = v139;
        swift_release(v130);
        *(_QWORD *)(inited + 224) = &type metadata for String;
        *(_QWORD *)(inited + 200) = v138;
        *(_QWORD *)(inited + 208) = v140;
      }
      else
      {
        *(_OWORD *)(inited + 200) = 0u;
        *(_OWORD *)(inited + 216) = 0u;
      }
    }
    v145 = (_TtC14softposreaderd12RemoteReader *)sub_1000E8B30(inited, v122, v123, v124, v125, v126, v127, v128);
    v146 = *(os_unfair_lock_s **)(v4 + 56);
    v147 = (uint64_t)&v146[4];
    v148 = v146 + 8;
    os_unfair_lock_lock(v146 + 8);
    sub_10005FDB8(v147, (uint64_t)v145);
    os_unfair_lock_unlock(v148);
    swift_bridgeObjectRelease(v145, v149, v150, v151, v152, v153, v154, v155);
    sub_100005DE0(v193, v189);
    v37 = v25;
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.info.getter();
    v40 = os_log_type_enabled(v38, v39);
    if (a1 == 7)
    {
      if (v40)
      {
        v41 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "getProvisionTrackError()", v41, 2u);
        swift_slowDealloc(v41, -1, -1);
      }

      v42 = (uint64_t *)TLVTag.provisionAppletTrackError.unsafeMutableAddressor();
      sub_100080EB8(*v42);
      v44 = v43;

      __asm { BR              X10 }
    }
    if (v40)
    {
      v45 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "getProvisionDataBlob()", v45, 2u);
      swift_slowDealloc(v45, -1, -1);
    }

    v46 = (uint64_t *)TLVTag.provisionAppletDataBlob.unsafeMutableAddressor();
    v47 = sub_100080EB8(*v46);
    v49 = v48;

    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v51, (os_log_type_t)v52))
    {
      v53 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, (os_log_type_t)v52, "provisionDataBlob received", v53, 2u);
      swift_slowDealloc(v53, -1, -1);
    }

    v202 = &type metadata for Data;
    *(_QWORD *)&v201 = v47;
    *((_QWORD *)&v201 + 1) = v49;
    swift_beginAccess(&v191[OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionReadResult], v200, 33, 0);
    sub_100005D9C(v47, v49);
    sub_1000E91C4((uint64_t)&v201, 0xD000000000000011, (_TtC14softposreaderd12RemoteReader *)0x8000000100169060);
    swift_endAccess(v200);
    type metadata accessor for TLV();
    static TLV.decode(from:)(v47, v49);
    v75 = v54;
    *(_QWORD *)&v201 = v54;
    v76 = *(_QWORD *)TLVTag.blobDefinition.unsafeMutableAddressor();
    v77 = sub_100003A2C((uint64_t *)&unk_1001B36D0);
    v196 = sub_100030828((unint64_t *)&qword_1001AE440, (uint64_t *)&unk_1001B36D0, (uint64_t)&protocol conformance descriptor for [A]);
    v78 = Collection<>.first(tag:)(v76, v77, v196);
    swift_bridgeObjectRelease(v75, v79, v80, v81, v82, v83, v84, v85);
    if (v78)
    {
      v194 = v77;
      v87 = (*(uint64_t (**)(void))(*(_QWORD *)v78 + 144))();
      v89 = v88;
      static TLV.decode(from:)(v87, v88);
      v91 = v90;
      sub_100005DE0(v87, v89);
      v156 = sub_100003A2C(&qword_1001AE238);
      v157 = swift_initStackObject(v156, v199);
      *(_OWORD *)(v157 + 16) = xmmword_10015A6C0;
      *(_BYTE *)(v157 + 32) = 2;
      *(_QWORD *)&v201 = v91;
      v158 = (uint64_t *)TLVTag.provisionDataCipherText.unsafeMutableAddressor();
      v159 = Collection<>.first(tag:)(*v158, v194, v196);
      swift_bridgeObjectRelease(v91, v160, v161, v162, v163, v164, v165, v166);
      if (v159)
      {
        v168 = (*(uint64_t (**)(void))(*(_QWORD *)v159 + 128))();
        v167 = swift_release(v159);
        v169 = &type metadata for Int;
      }
      else
      {
        v168 = 0;
        v169 = 0;
        *(_QWORD *)(v157 + 48) = 0;
        *(_QWORD *)(v157 + 56) = 0;
      }
      *(_QWORD *)(v157 + 40) = v168;
      *(_QWORD *)(v157 + 64) = v169;
      *(_BYTE *)(v157 + 72) = 16;
      v170 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 128))(v167);
      *(_QWORD *)(v157 + 104) = &type metadata for Int;
      *(_QWORD *)(v157 + 80) = v170;
      v178 = (_TtC14softposreaderd12RemoteReader *)sub_1000E8B30(v157, v171, v172, v173, v174, v175, v176, v177);
      v179 = *(os_unfair_lock_s **)(v4 + 56);
      v180 = (uint64_t)&v179[4];
      v181 = v179 + 8;
      os_unfair_lock_lock(v179 + 8);
      sub_10005FDB8(v180, (uint64_t)v178);
      os_unfair_lock_unlock(v181);
      sub_100005DE0(v47, v49);
      swift_release(v78);
      swift_bridgeObjectRelease(v178, v182, v183, v184, v185, v186, v187, v188);
    }
    else
    {
      v141 = Logger.logObject.getter(v86);
      v142 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v141, v142))
      {
        v143 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v143 = 0;
        _os_log_impl((void *)&_mh_execute_header, v141, v142, "cannot parse provisionDataBlob for analytics", v143, 2u);
        swift_slowDealloc(v143, -1, -1);
      }

      v144 = sub_1000247D0(20008, 0xD00000000000002CLL, (void *)0x8000000100169080, 0);
      swift_willThrow(v144);
      swift_errorRetain();
      v55 = swift_errorRetain();
      v56 = Logger.logObject.getter(v55);
      v57 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v56, v57))
      {
        v58 = (uint8_t *)swift_slowAlloc(12, -1);
        v59 = (uint64_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v58 = 138412290;
        swift_errorRetain();
        v60 = v49;
        v61 = _swift_stdlib_bridgeErrorToNSError(v144);
        *(_QWORD *)&v201 = v61;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, (char *)&v201 + 8, v58 + 4, v58 + 12);
        *v59 = v61;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "cannot parse provisionDataBlob for analytics. %@", v58, 0xCu);
        v62 = sub_100003A2C((uint64_t *)&unk_1001AE430);
        swift_arrayDestroy(v59, 1, v62);
        swift_slowDealloc(v59, -1, -1);
        swift_slowDealloc(v58, -1, -1);

        swift_errorRelease();
        sub_100005DE0(v47, v60);
      }
      else
      {
        sub_100005DE0(v47, v49);
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();

      }
    }
    return sub_100027C2C(1);
  }
}

uint64_t type metadata accessor for ORReadOperation()
{
  return objc_opt_self(_TtC9SPREngine15ORReadOperation);
}

uint64_t sub_10002F3B4(unsigned __int8 a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  _TtC14softposreaderd12RemoteReader *v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  Swift::String v31;
  uint64_t v32;
  unint64_t v33;
  SEL v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  uint8_t *v50;
  uint8_t *v51;
  unint64_t v52;
  uint64_t v53;
  _WORD *v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  Swift::String v60;
  SEL v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  unint64_t v68;
  uint64_t v69;
  _WORD *v70;
  NSObject *log;
  os_log_type_t type;
  uint64_t v74;
  int v75;
  uint64_t v76;
  _QWORD v77[5];
  char v78[8];
  unint64_t v79;
  unsigned __int16 v80;
  uint64_t v81;

  sub_1000306C8(a2, a3);
  v6 = sub_10005EC78(0xA0u, 0x72u, a1, 0, a2, a3);
  v8 = v7;
  v10 = v9;
  if (qword_1001AD2C8 != -1)
    swift_once(&qword_1001AD2C8, sub_10012B690);
  v11 = type metadata accessor for Logger(0);
  sub_100003A14(v11, (uint64_t)qword_1001B3A10);
  sub_100005D9C(v8, v10);
  v12 = sub_100005D9C(v8, v10);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    type = v14;
    v15 = swift_slowAlloc(22, -1);
    v74 = swift_slowAlloc(64, -1);
    v81 = v74;
    *(_DWORD *)v15 = 136315394;
    if (a1)
      v16 = 0;
    else
      v16 = 0x41545320524F4620;
    if (a1)
      v17 = (_TtC14softposreaderd12RemoteReader *)0xE000000000000000;
    else
      v17 = (_TtC14softposreaderd12RemoteReader *)0xEA00000000005452;
    v76 = sub_1000056EC(v16, (unint64_t)v17, &v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
    *(_WORD *)(v15 + 12) = 2080;
    sub_10005E7B4(v6 & 0xFFFFFFFFFFFFLL, v8, v10);
    log = v13;
    v25 = v8;
    v27 = v26;
    v28 = v10;
    v30 = v29;
    v31 = Data.hexString()();
    v32 = v27;
    v8 = v25;
    v33 = v30;
    v10 = v28;
    sub_100005DE0(v32, v33);
    v76 = sub_1000056EC(v31._countAndFlagsBits, (unint64_t)v31._object, &v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v31._object, v34, v35, v36, v37, v38, v39, v40);
    sub_100005DE0(v25, v28);
    sub_100005DE0(v25, v28);
    _os_log_impl((void *)&_mh_execute_header, log, type, "CAPDU (MANAGE TAP)%s: %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v74, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v74, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    v41 = v6 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    sub_100005DE0(v8, v10);
    sub_100005DE0(v8, v10);

    v41 = v6 & 0xFFFFFFFFFFFFLL;
  }
  sub_1000D8FF0(v41, v8, v10, 1, (uint64_t)v77);
  v42 = v77[0];
  v43 = v77[1];
  v44 = v77[3];
  v45 = v77[4];
  v46 = sub_1000306DC((uint64_t)v77, (uint64_t)v78);
  if (v79 >> 60 == 15)
  {
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = v8;
      v50 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Error from transceive", v50, 2u);
      v51 = v50;
      v8 = v49;
      swift_slowDealloc(v51, -1, -1);
    }

    v52 = sub_100030724();
    v53 = swift_allocError(&type metadata for APDUSW, v52, 0, 0);
    *v54 = 0;
    swift_willThrow(v53);
  }
  else
  {
    v75 = v80;
    sub_100005D9C(v42, v43);
    sub_100005D9C(v44, v45);
    sub_100005D9C(v42, v43);
    v55 = sub_100005D9C(v44, v45);
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc(12, -1);
      v59 = swift_slowAlloc(32, -1);
      v81 = v59;
      *(_DWORD *)v58 = 136315138;
      v60 = Data.hexString()();
      v76 = sub_1000056EC(v60._countAndFlagsBits, (unint64_t)v60._object, &v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77, v58 + 4, v58 + 12);
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v60._object, v61, v62, v63, v64, v65, v66, v67);
      sub_100030768((uint64_t)v77);
      sub_100030768((uint64_t)v77);
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "RAPDU: %s", v58, 0xCu);
      swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v58, -1, -1);
    }
    else
    {
      sub_100030768((uint64_t)v77);
      sub_100030768((uint64_t)v77);
    }

    if (v75 != 36864)
    {
      v68 = sub_100030724();
      v69 = swift_allocError(&type metadata for APDUSW, v68, 0, 0);
      *v70 = v75;
      swift_willThrow(v69);
    }
    sub_100030768((uint64_t)v77);
  }
  return sub_100005DE0(v8, v10);
}

uint64_t sub_10002F944(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *v2 = v5;
  v7 = 0;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    if (a1 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1)
      return result;
    v7 = 1;
  }
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v10 = v5;
    else
      v10 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v8 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 <= a1)
    v9 = a1;
  else
    v9 = v8;
  result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v9, a2 & 1, v5);
  *v2 = result;
  return result;
}

void sub_10002FA00(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_signpost_type_t v27;
  char v28;
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  uint8_t *v31;
  os_signpost_id_t v32;
  uint8_t *v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  id v38;
  void *v39;
  uint64_t v40;
  dispatch_semaphore_t v41;
  void *v42;
  uint64_t v43;
  NSObject *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  char v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  void **v58;
  void *v59;
  char *v60;
  NSObject *v61;
  uint64_t v62;
  os_signpost_type_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  _QWORD *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint8_t *v73;
  os_signpost_id_t v74;
  void (*v75)(char *, uint64_t);
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(char *, char *, uint64_t);
  uint64_t v85;
  void (*v86)(char *, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  void **v97;
  char *v98;
  uint64_t v99;
  char *v100;
  dispatch_semaphore_t v101;
  uint64_t v102;
  char v103[24];
  _QWORD aBlock[5];
  uint64_t v105;
  uint64_t v106;

  v93 = a6;
  v88 = a5;
  v91 = a2;
  v92 = a4;
  v94 = (_QWORD *)a3;
  v90 = a1;
  v85 = type metadata accessor for OSSignpostError(0);
  v99 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v98 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchTime(0);
  v95 = *(_QWORD *)(v7 - 8);
  v96 = v7;
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v83 - v11;
  v13 = type metadata accessor for OSSignpostID(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v100 = (char *)&v83 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v83 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v83 - v20;
  v101 = dispatch_semaphore_create(0);
  v22 = swift_allocObject(&unk_10019A6A0, 24, 7);
  v106 = v22;
  *(_QWORD *)(v22 + 16) = 0;
  v97 = (void **)(v22 + 16);
  if (qword_1001ACE80 != -1)
    swift_once(&qword_1001ACE80, sub_100025A10);
  v23 = type metadata accessor for OSSignposter(0);
  v24 = sub_100003A14(v23, (uint64_t)qword_1001AE268);
  v25 = static OSSignpostID.exclusive.getter();
  v87 = v24;
  v26 = OSSignposter.logHandle.getter(v25);
  v27 = static os_signpost_type_t.begin.getter();
  v28 = OS_os_log.signpostsEnabled.getter();
  v102 = v13;
  if ((v28 & 1) != 0)
  {
    v29 = v19;
    v30 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
    v30(v29, v21, v13);
    v31 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v31 = 0;
    v32 = OSSignpostID.rawValue.getter(v31);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v26, v27, v32, "ttp-session-start", "begin pending session for ttp", v31, 2u);
    v33 = v31;
    v13 = v102;
    swift_slowDealloc(v33, -1, -1);

    (*(void (**)(char *, uint64_t))(v14 + 8))(v29, v13);
    v34 = v30;
    v19 = v29;
  }
  else
  {

    v34 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  }
  v84 = v34;
  v34(v19, v21, v13);
  v35 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
  v36 = OSSignpostIntervalState.init(id:isOpen:)(v19, 1);
  v37 = *(void (**)(char *, uint64_t))(v14 + 8);
  v37(v21, v13);
  v38 = objc_msgSend((id)objc_opt_self(NFHardwareManager), "sharedHardwareManager");
  if (!v38)
  {
    __break(1u);
    goto LABEL_27;
  }
  v39 = v38;
  v86 = v37;
  v40 = swift_allocObject(&unk_10019A6C8, 32, 7);
  v41 = v101;
  *(_QWORD *)(v40 + 16) = v106;
  *(_QWORD *)(v40 + 24) = v41;
  aBlock[4] = sub_10003028C;
  v105 = v40;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100004C68;
  aBlock[3] = &unk_10019A6E0;
  v42 = _Block_copy(aBlock);
  v43 = v105;
  swift_retain();
  v44 = v41;
  swift_release(v43);
  v45 = objc_msgSend(v39, "startSecureElementReaderSession:", v42);
  _Block_release(v42);

  if (!v45)
  {
LABEL_27:
    __break(1u);
    return;
  }
  static DispatchTime.now()(v46);
  + infix(_:_:)(v10);
  v47 = v96;
  v48 = *(void (**)(char *, uint64_t))(v95 + 8);
  v48(v10, v96);
  v49 = OS_dispatch_semaphore.wait(timeout:)(v12) & 1;
  v48(v12, v47);
  v50 = static DispatchTimeoutResult.== infix(_:_:)(v49, 1);
  v52 = v98;
  v51 = v99;
  if ((v50 & 1) != 0)
  {
    if (qword_1001ACE78 != -1)
      swift_once(&qword_1001ACE78, sub_100025980);
    v53 = type metadata accessor for Logger(0);
    v54 = sub_100003A14(v53, (uint64_t)qword_1001AE250);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "startSecureElementReaderSession() TIMED OUT", v57, 2u);
      swift_slowDealloc(v57, -1, -1);
    }

    objc_msgSend(v45, "endSession");
  }
  v58 = v97;
  swift_beginAccess(v97, v103, 0, 0);
  v59 = *v58;
  v60 = v100;
  if (!*v58)
  {
    v68 = sub_1000247D0(20001, 0xD000000000000029, (void *)0x8000000100168E70, 0);
    swift_willThrow(v68);

    swift_unknownObjectRelease(v45);
    swift_release(v36);

    swift_release(v92);
    swift_release(v93);
    swift_unknownObjectRelease(v91);
    v69 = v94;
LABEL_24:
    sub_100005D3C(v69);
    swift_release(v106);
    return;
  }
  v101 = v44;
  v97 = v59;
  v61 = OSSignposter.logHandle.getter(v97);
  v62 = OSSignpostIntervalState.signpostID.getter();
  v63 = static os_signpost_type_t.end.getter(v62);
  v64 = OS_os_log.signpostsEnabled.getter();
  v83 = v36;
  if ((v64 & 1) != 0)
  {
    v65 = swift_retain();
    checkForErrorAndConsumeState(state:)(v65);
    swift_release(v36);
    v66 = v85;
    if ((*(unsigned int (**)(char *, uint64_t))(v51 + 88))(v52, v85) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v67 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v66);
      v67 = "end obtained session for ttp";
    }
    v70 = v60;
    v71 = v60;
    v72 = v102;
    v84(v19, v70, v102);
    v73 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v73 = 0;
    v74 = OSSignpostID.rawValue.getter(v73);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v61, v63, v74, "ttp-session-start", v67, v73, 2u);
    swift_slowDealloc(v73, -1, -1);

    v75 = v86;
    v86(v71, v72);
    v75(v19, v72);
  }
  else
  {

    v86(v60, v102);
  }
  v69 = v94;
  sub_100008390((uint64_t)v94, (uint64_t)aBlock);
  v76 = objc_allocWithZone((Class)type metadata accessor for ORReadOperation());
  v77 = v91;
  swift_unknownObjectRetain(v91);
  v78 = v92;
  swift_retain();
  v79 = v93;
  swift_retain();
  v80 = v97;
  v81 = v90;
  v82 = v89;
  sub_100025CF0(v80, v81, v77, aBlock, v78, v88, v79);
  if (v82)
  {
    swift_willThrow(objc_msgSend(v80, "endSession"));

    swift_unknownObjectRelease(v45);
    swift_release(v83);

    swift_unknownObjectRelease(v77);
    swift_release(v78);
    swift_release(v79);
    goto LABEL_24;
  }

  swift_unknownObjectRelease(v77);
  swift_release(v78);
  swift_release(v79);

  swift_unknownObjectRelease(v45);
  swift_release(v83);

  sub_100005D3C(v69);
  swift_release(v106);
}

uint64_t sub_10003023C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100030260()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10003028C(void *a1, void *a2)
{
  uint64_t v2;

  return sub_100026E6C(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_100030294(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000302A4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1000302AC()
{
  unint64_t result;

  result = qword_1001AE450;
  if (!qword_1001AE450)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TLVTag, &type metadata for TLVTag);
    atomic_store(result, (unint64_t *)&qword_1001AE450);
  }
  return result;
}

uint64_t sub_1000302F0()
{
  uint64_t v0;
  SEL v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;

  sub_100005DE0(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(v0 + 48), v1, v2, v3, v4, v5, v6, v7);
  return swift_deallocObject(v0, 56, 7);
}

void sub_100030324()
{
  uint64_t v0;

  sub_10002C05C(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

void sub_100030354()
{
  uint64_t v0;

  sub_10003035C(*(_QWORD *)(v0 + 24));
}

void sub_10003035C(uint64_t a1)
{
  unint64_t v2;
  char v3;
  const char *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _TtC14softposreaderd12RemoteReader *v11;
  uint64_t v12;
  _TtC14softposreaderd12RemoteReader *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  const char *v19;
  char v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD v32[5];
  __int128 v33;
  __int128 v34;

  v30 = 0x676E696C6C6F50;
  v31 = 0xE700000000000000;
  AnyHashable.init<A>(_:)(v32, &v30, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v2 = sub_10000AD94((uint64_t)v32), (v3 & 1) != 0))
  {
    sub_100005D5C(*(_QWORD *)(a1 + 56) + 32 * v2, (uint64_t)&v33);
  }
  else
  {
    v33 = 0u;
    v34 = 0u;
  }
  sub_10000CAAC((uint64_t)v32);
  if (!*((_QWORD *)&v34 + 1))
  {
    sub_100007B30((uint64_t)&v33);
    return;
  }
  if ((swift_dynamicCast(&v30, &v33, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    return;
  v12 = v30;
  v11 = (_TtC14softposreaderd12RemoteReader *)v31;
  if (v30 == 65 && v31 == 0xE100000000000000)
  {
    v13 = (_TtC14softposreaderd12RemoteReader *)0xE100000000000000;
LABEL_13:
    swift_bridgeObjectRelease(v13, v4, v5, v6, v7, v8, v9, v10);
    if (qword_1001ACE78 != -1)
      swift_once(&qword_1001ACE78, sub_100025980);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_100003A14(v14, (uint64_t)qword_1001AE250);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v16, v17))
      goto LABEL_26;
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    v19 = "Type A polling didEnd";
    goto LABEL_25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(65, 0xE100000000000000, v30, v31, 0) & 1) != 0)
  {
    v13 = v11;
    goto LABEL_13;
  }
  if (v12 == 66 && v11 == (_TtC14softposreaderd12RemoteReader *)0xE100000000000000)
  {
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)0xE100000000000000, v4, v5, v6, v7, v8, v9, v10);
  }
  else
  {
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)(66, 0xE100000000000000, v12, v11, 0);
    swift_bridgeObjectRelease(v11, v21, v22, v23, v24, v25, v26, v27);
    if ((v20 & 1) == 0)
      return;
  }
  if (qword_1001ACE78 != -1)
    swift_once(&qword_1001ACE78, sub_100025980);
  v28 = type metadata accessor for Logger(0);
  v29 = sub_100003A14(v28, (uint64_t)qword_1001AE250);
  v16 = Logger.logObject.getter(v29);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    v19 = "Type B polling didEnd";
LABEL_25:
    _os_log_impl((void *)&_mh_execute_header, v16, v17, v19, v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }
LABEL_26:

}

uint64_t sub_1000305F4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100030620()
{
  uint64_t v0;

  sub_10002B4C0(*(_QWORD *)(v0 + 24));
}

uint64_t sub_100030644()
{
  uint64_t v0;

  return swift_deallocObject(v0, 25, 7);
}

void sub_100030668()
{
  uint64_t v0;

  sub_10002AD6C(*(_BYTE *)(v0 + 24));
}

uint64_t sub_100030690()
{
  return sub_10002B218();
}

void sub_1000306B0()
{
  uint64_t v0;

  sub_100028A94(*(char **)(v0 + 16));
}

id sub_1000306B8()
{
  uint64_t v0;

  return sub_100028B54(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000306C0()
{
  uint64_t v0;

  return sub_1000281BC(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000306C8(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100005D9C(result, a2);
  return result;
}

uint64_t sub_1000306DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003A2C((uint64_t *)&unk_1001AE480);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100030724()
{
  unint64_t result;

  result = qword_1001B36E0;
  if (!qword_1001B36E0)
  {
    result = swift_getWitnessTable(&unk_10015FB58, &type metadata for APDUSW);
    atomic_store(result, (unint64_t *)&qword_1001B36E0);
  }
  return result;
}

uint64_t sub_100030768(uint64_t a1)
{
  sub_100030798(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  return a1;
}

uint64_t sub_100030798(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a2 >> 60 != 15)
  {
    sub_100005DE0(result, a2);
    return sub_100005DE0(a4, a5);
  }
  return result;
}

uint64_t sub_1000307D4()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000307F8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10003081C()
{
  uint64_t v0;

  sub_100029AC8(*(_QWORD *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t sub_100030828(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100003A6C(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100030868()
{
  uint64_t v0;

  return sub_1000275C8(*(_QWORD *)(v0 + 16));
}

double sub_100030870@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1000B5BF0(*(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), a1);
}

_WORD *initializeBufferWithCopyOfBuffer for ORReadOperation.State(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ORReadOperation.State(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ORReadOperation.State(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100030988 + 4 * byte_10015E3FD[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_1000309BC + 4 * byte_10015E3F8[v4]))();
}

uint64_t sub_1000309BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1000309C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x1000309CCLL);
  return result;
}

uint64_t sub_1000309D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x1000309E0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000309E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1000309EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ORReadOperation.State()
{
  return &type metadata for ORReadOperation.State;
}

uint64_t sub_100030A84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001AE4C0);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001AE4C0);
  if (qword_1001AD150 != -1)
    swift_once(&qword_1001AD150, sub_1000CC47C);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4DE0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100030B14()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for NullAuditor()
{
  return objc_opt_self(_TtC9SPREngine11NullAuditor);
}

uint64_t type metadata accessor for NullAuditorFactory()
{
  return objc_opt_self(_TtC9SPREngine18NullAuditorFactory);
}

uint64_t sub_100030B68@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for NullAuditor();
  result = swift_initStaticObject(v2, &unk_1001AD348);
  a1[3] = v2;
  a1[4] = (uint64_t)&off_10019AB58;
  *a1 = result;
  return result;
}

void sub_100030BA8(char a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _TtC14softposreaderd12RemoteReader *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;

  if (qword_1001ACE88 != -1)
    swift_once(&qword_1001ACE88, sub_100030A84);
  v6 = type metadata accessor for Logger(0);
  sub_100003A14(v6, (uint64_t)qword_1001AE4C0);
  v7 = swift_bridgeObjectRetain_n(a3, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(19, -1);
    v11 = swift_slowAlloc(32, -1);
    v23 = v11;
    *(_DWORD *)v10 = 33555202;
    LOWORD(v22) = word_10015E484[a1];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, (char *)&v22 + 2, v10 + 4, v10 + 6);
    *(_WORD *)(v10 + 6) = 256;
    LOBYTE(v22) = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, (char *)&v22 + 1, v10 + 8, v10 + 9);
    *(_WORD *)(v10 + 9) = 2080;
    v12 = Dictionary.description.getter(a3, &type metadata for String, &type metadata for String, &protocol witness table for String);
    v14 = (_TtC14softposreaderd12RemoteReader *)v13;
    v22 = sub_1000056EC(v12, v13, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v10 + 11, v10 + 19);
    swift_bridgeObjectRelease_n(a3, 2);
    swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "NullAuditor.audit(event: %hu, attestationOptions: %hhu, userInfo: %s)", (uint8_t *)v10, 0x13u);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
  }
}

uint64_t sub_100030DAC()
{
  uint64_t v0;
  uint64_t v1;
  SecPolicyRef Revocation;
  Class isa;
  uint64_t result;

  v0 = sub_100003A2C(&qword_1001AE7A8);
  v1 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v1 + 16) = xmmword_10015A6C0;
  *(_QWORD *)(v1 + 32) = SecPolicyCreateBasicX509();
  Revocation = SecPolicyCreateRevocation(3uLL);
  *(_QWORD *)(v1 + 40) = Revocation;
  specialized Array._endMutation()(Revocation);
  sub_100003A2C(&qword_1001AE7B0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  result = swift_bridgeObjectRelease(v1);
  qword_1001B4AB8 = (uint64_t)isa;
  return result;
}

void sub_100030E44(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  NSString v4;
  NSString v5;
  NSString v6;
  uint64_t ApplePinned;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _OWORD *v13;
  void *v14;
  uint64_t v15;
  id v16;
  _QWORD *v17;
  _BYTE v18[24];
  __int128 v19[2];
  __int128 v20;
  ValueMetadata *v21;
  _UNKNOWN **v22;
  _BYTE v23[24];

  v3 = v1 + 56;
  swift_beginAccess(v1 + 56, v23, 0, 0);
  sub_100031688(v1 + 56, (uint64_t)&v20);
  if (v21)
  {
LABEL_13:
    sub_10001A674(&v20, a1);
    return;
  }
  sub_1000316D0((uint64_t)&v20);
  sub_100008390(v1 + 232, (uint64_t)v19);
  v4 = String._bridgeToObjectiveC()();
  v5 = String._bridgeToObjectiveC()();
  v6 = String._bridgeToObjectiveC()();
  ApplePinned = SecPolicyCreateApplePinned(v4, v5, v6);

  if (ApplePinned)
  {
    v8 = *(unsigned __int8 *)(v1 + 272);
    v9 = sub_100003A2C((uint64_t *)&unk_1001AE490);
    if (v8 == 1)
    {
      v10 = swift_allocObject(v9, 48, 7);
      *(_OWORD *)(v10 + 16) = xmmword_10015DF20;
      if (qword_1001ACEA0 != -1)
        swift_once(&qword_1001ACEA0, sub_100031580);
      v11 = (void *)qword_1001B4AC8;
      *(_QWORD *)(v10 + 32) = qword_1001B4AC8;
      v12 = qword_1001ACE98;
      v13 = v11;
      if (v12 != -1)
        v13 = (_OWORD *)swift_once(&qword_1001ACE98, sub_10003155C);
      v14 = (void *)qword_1001B4AC0;
      *(_QWORD *)(v10 + 40) = qword_1001B4AC0;
    }
    else
    {
      v13 = (_OWORD *)swift_allocObject(v9, 40, 7);
      v10 = (uint64_t)v13;
      v13[1] = xmmword_10015E4E0;
      if (qword_1001ACE98 != -1)
        v13 = (_OWORD *)swift_once(&qword_1001ACE98, sub_10003155C);
      v14 = (void *)qword_1001B4AC0;
      *(_QWORD *)(v10 + 32) = qword_1001B4AC0;
    }
    *(_QWORD *)&v20 = v10;
    specialized Array._endMutation()(v13);
    v15 = v20;
    v16 = v14;
    v21 = &type metadata for CertificateTrustVerifier;
    v22 = &off_1001A07A8;
    v17 = (_QWORD *)swift_allocObject(&unk_10019ABE8, 80, 7);
    *(_QWORD *)&v20 = v17;
    sub_10001A674(v19, (uint64_t)(v17 + 2));
    v17[7] = ApplePinned;
    v17[8] = v15;
    v17[9] = 0;
    sub_100008390((uint64_t)&v20, (uint64_t)v19);
    swift_beginAccess(v3, v18, 33, 0);
    sub_100031734((uint64_t)v19, v3);
    swift_endAccess(v18);
    goto LABEL_13;
  }
  __break(1u);
}

uint64_t sub_1000310D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  _QWORD *v23;
  _BYTE v25[24];
  __int128 v26[2];
  __int128 v27;
  ValueMetadata *v28;
  _UNKNOWN **v29;
  _BYTE v30[24];

  v3 = v1 + 96;
  swift_beginAccess(v1 + 96, v30, 0, 0);
  sub_100031688(v1 + 96, (uint64_t)&v27);
  if (!v28)
  {
    sub_1000316D0((uint64_t)&v27);
    sub_100008390(v1 + 232, (uint64_t)v26);
    if (qword_1001ACE90 != -1)
      swift_once(&qword_1001ACE90, sub_100030DAC);
    v4 = (void *)qword_1001B4AB8;
    v5 = *(unsigned __int8 *)(v1 + 272);
    v6 = sub_100003A2C((uint64_t *)&unk_1001AE490);
    if (v5 == 1)
    {
      v7 = swift_allocObject(v6, 56, 7);
      *(_OWORD *)(v7 + 16) = xmmword_10015E4F0;
      v8 = qword_1001ACEA0;
      v9 = v4;
      if (v8 != -1)
        swift_once(&qword_1001ACEA0, sub_100031580);
      v10 = (void *)qword_1001B4AC8;
      *(_QWORD *)(v7 + 32) = qword_1001B4AC8;
      v11 = qword_1001ACEA8;
      v12 = v10;
      if (v11 != -1)
        swift_once(&qword_1001ACEA8, sub_1000315A4);
      v13 = (void *)qword_1001B4AD0;
      *(_QWORD *)(v7 + 40) = qword_1001B4AD0;
      v14 = qword_1001ACE98;
      v15 = v13;
      if (v14 != -1)
        v15 = (id)swift_once(&qword_1001ACE98, sub_10003155C);
      v16 = (void *)qword_1001B4AC0;
      *(_QWORD *)(v7 + 48) = qword_1001B4AC0;
    }
    else
    {
      v7 = swift_allocObject(v6, 48, 7);
      *(_OWORD *)(v7 + 16) = xmmword_10015DF20;
      v17 = qword_1001ACEA8;
      v18 = v4;
      if (v17 != -1)
        swift_once(&qword_1001ACEA8, sub_1000315A4);
      v19 = (void *)qword_1001B4AD0;
      *(_QWORD *)(v7 + 32) = qword_1001B4AD0;
      v20 = qword_1001ACE98;
      v15 = v19;
      if (v20 != -1)
        v15 = (id)swift_once(&qword_1001ACE98, sub_10003155C);
      v16 = (void *)qword_1001B4AC0;
      *(_QWORD *)(v7 + 40) = qword_1001B4AC0;
    }
    *(_QWORD *)&v27 = v7;
    specialized Array._endMutation()(v15);
    v21 = v27;
    v22 = v16;
    v28 = &type metadata for CertificateTrustVerifier;
    v29 = &off_1001A07A8;
    v23 = (_QWORD *)swift_allocObject(&unk_10019ABE8, 80, 7);
    *(_QWORD *)&v27 = v23;
    sub_10001A674(v26, (uint64_t)(v23 + 2));
    v23[7] = v4;
    v23[8] = v21;
    v23[9] = 0;
    sub_100008390((uint64_t)&v27, (uint64_t)v26);
    swift_beginAccess(v3, v25, 33, 0);
    sub_100031734((uint64_t)v26, v3);
    swift_endAccess(v25);
  }
  return sub_10001A674(&v27, a1);
}

uint64_t sub_10003137C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];
  _BYTE v6[40];
  __int128 v7;
  ValueMetadata *v8;
  _UNKNOWN **v9;
  _BYTE v10[24];

  swift_beginAccess(v1 + 136, v10, 0, 0);
  sub_100031688(v1 + 136, (uint64_t)&v7);
  if (!v8)
  {
    sub_1000316D0((uint64_t)&v7);
    v8 = &type metadata for CertificateTimeVerifier;
    v9 = &off_1001A07C0;
    v3 = swift_allocObject(&unk_10019ABC0, 64, 7);
    *(_QWORD *)&v7 = v3;
    sub_100008390(v1 + 232, v3 + 24);
    *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 216);
    sub_100008390((uint64_t)&v7, (uint64_t)v6);
    swift_beginAccess(v1 + 136, v5, 33, 0);
    sub_100031734((uint64_t)v6, v1 + 136);
    swift_endAccess(v5);
  }
  return sub_10001A674(&v7, a1);
}

uint64_t sub_10003146C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];
  _BYTE v6[40];
  __int128 v7;
  ValueMetadata *v8;
  _UNKNOWN **v9;
  _BYTE v10[24];

  swift_beginAccess(v1 + 176, v10, 0, 0);
  sub_100031688(v1 + 176, (uint64_t)&v7);
  if (!v8)
  {
    sub_1000316D0((uint64_t)&v7);
    v8 = &type metadata for CertificateTimeVerifier;
    v9 = &off_1001A07C0;
    v3 = swift_allocObject(&unk_10019ABC0, 64, 7);
    *(_QWORD *)&v7 = v3;
    sub_100008390(v1 + 232, v3 + 24);
    *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 224);
    sub_100008390((uint64_t)&v7, (uint64_t)v6);
    swift_beginAccess(v1 + 176, v5, 33, 0);
    sub_100031734((uint64_t)v6, v1 + 176);
    swift_endAccess(v5);
  }
  return sub_10001A674(&v7, a1);
}

SecCertificateRef sub_10003155C(uint64_t a1)
{
  return sub_1000315C8(a1, 0xD000000000000318, 0x8000000100169800, (SecCertificateRef *)&qword_1001B4AC0);
}

SecCertificateRef sub_100031580(uint64_t a1)
{
  return sub_1000315C8(a1, 0xD000000000000324, 0x80000001001694D0, (SecCertificateRef *)&qword_1001B4AC8);
}

SecCertificateRef sub_1000315A4(uint64_t a1)
{
  return sub_1000315C8(a1, 0xD000000000000318, 0x8000000100169B20, (SecCertificateRef *)&qword_1001B4AD0);
}

SecCertificateRef sub_1000315C8(uint64_t a1, uint64_t a2, uint64_t a3, SecCertificateRef *a4)
{
  SecCertificateRef result;

  type metadata accessor for SecCertificate(0);
  result = static SecCertificateRef.parse(base64Encoded:)(a2);
  if (result)
    *a4 = result;
  else
    __break(1u);
  return result;
}

uint64_t sub_10003161C()
{
  uint64_t v0;

  sub_1000316D0(v0 + 16);
  sub_1000316D0(v0 + 56);
  sub_1000316D0(v0 + 96);
  sub_1000316D0(v0 + 136);
  sub_1000316D0(v0 + 176);
  sub_100005D3C((_QWORD *)(v0 + 232));
  return swift_deallocClassInstance(v0, 273, 7);
}

uint64_t type metadata accessor for CertificateVerifierFactory()
{
  return objc_opt_self(_TtC9SPREngine26CertificateVerifierFactory);
}

uint64_t sub_100031688(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003A2C(&qword_1001AE7A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000316D0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003A2C(&qword_1001AE7A0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100031710()
{
  uint64_t v0;

  sub_100005D3C((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100031734(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003A2C(&qword_1001AE7A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003177C()
{
  uint64_t v0;
  SEL v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;

  sub_100005D3C((_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(v0 + 64), v1, v2, v3, v4, v5, v6, v7);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1000317B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  int *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[5];
  _QWORD v22[5];

  sub_1000DC4B4();
  if (!v1)
  {
    v3 = a1 + OBJC_IVAR____TtC9SPREngine5Depot_settings;
    v4 = (int *)type metadata accessor for Settings(0);
    v5 = *(_BYTE *)(v3 + v4[7]);
    v6 = *(_QWORD *)(v3 + v4[11]);
    v7 = *(_QWORD *)(v3 + v4[12]);
    v8 = sub_10001A64C((uint64_t)v22, v22[3]);
    __chkstk_darwin(v8);
    v10 = (_QWORD *)((char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v11 + 16))(v10);
    v12 = *v10;
    v13 = type metadata accessor for DefaultSecureTimeKeeper();
    v21[3] = v13;
    v21[4] = &off_10019C0A0;
    v21[0] = v12;
    v14 = type metadata accessor for CertificateVerifierFactory();
    a1 = swift_allocObject(v14, 273, 7);
    v15 = sub_10001A64C((uint64_t)v21, v13);
    __chkstk_darwin(v15);
    v17 = (_QWORD *)((char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v18 + 16))(v17);
    v19 = *v17;
    *(_QWORD *)(a1 + 256) = v13;
    *(_QWORD *)(a1 + 264) = &off_10019C0A0;
    *(_QWORD *)(a1 + 232) = v19;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_QWORD *)(a1 + 208) = 0;
    *(_BYTE *)(a1 + 272) = (v5 & 1) == 0;
    *(_QWORD *)(a1 + 216) = v6;
    *(_QWORD *)(a1 + 224) = v7;
    sub_100005D3C(v21);
    sub_100005D3C(v22);
  }
  return a1;
}

uint64_t type metadata accessor for DefaultTimeKeeper()
{
  return objc_opt_self(_TtC9SPREngine17DefaultTimeKeeper);
}

id sub_10003199C()
{
  uint64_t v0;
  id result;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (qword_1001AD308 != -1)
    swift_once(&qword_1001AD308, sub_10013E994);
  v0 = static GlobalState.shared;
  result = objc_msgSend(*(id *)(static GlobalState.shared + 72), "lock");
  while (*(uint64_t *)(v0 + 96) > 0 || *(_BYTE *)(v0 + 80) == 1)
    result = objc_msgSend(*(id *)(v0 + 72), "wait");
  v2 = *(_QWORD *)(v0 + 88);
  v3 = __OFADD__(v2, 1);
  v4 = v2 + 1;
  if (v3)
  {
    __break(1u);
    goto LABEL_16;
  }
  *(_QWORD *)(v0 + 88) = v4;
  objc_msgSend(*(id *)(v0 + 72), "unlock");
  v5 = *(_DWORD *)(v0 + 52);
  v6 = *(unsigned __int8 *)(v0 + 56);
  result = objc_msgSend(*(id *)(v0 + 72), "lock");
  v7 = *(_QWORD *)(v0 + 88);
  v3 = __OFSUB__(v7, 1);
  v8 = v7 - 1;
  if (v3)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  *(_QWORD *)(v0 + 88) = v8;
  if (!v8)
    objc_msgSend(*(id *)(v0 + 72), "broadcast");
  if (v6)
    v9 = 0;
  else
    v9 = v5;
  objc_msgSend(*(id *)(v0 + 72), "unlock");
  return (id)v9;
}

uint64_t sub_100031AAC()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = sub_1000EDA9C(&off_100197598);
  v1 = sub_100003A2C(&qword_1001AE888);
  result = swift_arrayDestroy(&unk_1001975B8, 8, v1);
  qword_1001B4AD8 = v0;
  return result;
}

unint64_t sub_100031B00(uint64_t *a1)
{
  return _sSC22SPRPINAppletProxyErrorLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(*a1);
}

unint64_t _sSC22SPRPINAppletProxyErrorLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  SEL v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  Swift::String v13;
  _TtC14softposreaderd12RemoteReader *object;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;

  if (qword_1001ACEB0 != -1)
    swift_once(&qword_1001ACEB0, sub_100031AAC);
  v2 = qword_1001B4AD8;
  if (*(_QWORD *)(qword_1001B4AD8 + 16) && (v3 = sub_10013A38C(a1), (v4 & 1) != 0))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 16 * v3);
    swift_bridgeObjectRetain();
  }
  else
  {
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)0xE000000000000000, v6, v7, v8, v9, v10, v11, v12);
    v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = (_TtC14softposreaderd12RemoteReader *)v13._object;
    String.append(_:)(v13);
    swift_bridgeObjectRelease(object, v15, v16, v17, v18, v19, v20, v21);
    return 0xD000000000000014;
  }
  return v5;
}

unint64_t sub_100031BFC(uint64_t a1)
{
  unint64_t result;

  result = sub_100031C20();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100031C20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001AD938;
  if (!qword_1001AD938)
  {
    type metadata accessor for PINAppletProxyError(255);
    result = swift_getWitnessTable(&unk_10015C678, v1);
    atomic_store(result, (unint64_t *)&qword_1001AD938);
  }
  return result;
}

uint64_t sub_100031C68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001AE890);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001AE890);
  if (qword_1001AD140 != -1)
    swift_once(&qword_1001AD140, sub_1000CC2E4);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4DB0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void *sub_100031CF8()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 16);
  v2 = v1;
  if (v1 == (void *)1)
  {
    sub_100031D54(v0);
    v2 = v3;
    v4 = *(void **)(v0 + 16);
    *(_QWORD *)(v0 + 16) = v3;
    v5 = v3;
    sub_1000339F0(v4);
  }
  sub_100033A00(v1);
  return v2;
}

void sub_100031D54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  dispatch_semaphore_t v8;
  uint64_t v9;
  void **v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  id v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  void **aBlock;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;

  v30 = a1;
  v1 = type metadata accessor for DispatchTime(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v29 - v6;
  v8 = dispatch_semaphore_create(0);
  v9 = swift_allocObject(&unk_10019AC68, 24, 7);
  *(_QWORD *)(v9 + 16) = 0;
  v10 = (void **)(v9 + 16);
  v11 = objc_msgSend((id)objc_opt_self(NFHardwareManager), "sharedHardwareManager");
  if (!v11)
  {
    __break(1u);
    goto LABEL_14;
  }
  v12 = v11;
  v13 = swift_allocObject(&unk_10019AC90, 32, 7);
  *(_QWORD *)(v13 + 16) = v8;
  *(_QWORD *)(v13 + 24) = v9;
  v35 = sub_100033A60;
  v36 = v13;
  aBlock = _NSConcreteStackBlock;
  v32 = 1107296256;
  v33 = sub_100004C68;
  v34 = &unk_10019ACA8;
  v14 = _Block_copy(&aBlock);
  v15 = v36;
  v16 = v8;
  swift_retain();
  swift_release(v15);
  v17 = objc_msgSend(v12, "startSecureElementManagerSession:", v14);
  _Block_release(v14);

  if (!v17)
  {
LABEL_14:
    __break(1u);
    return;
  }
  static DispatchTime.now()(v18);
  + infix(_:_:)(v5);
  v19 = *(void (**)(char *, uint64_t))(v2 + 8);
  v19(v5, v1);
  v20 = OS_dispatch_semaphore.wait(timeout:)(v7) & 1;
  v19(v7, v1);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v20, 1) & 1) != 0)
  {
    if (qword_1001ACEB8 != -1)
      swift_once(&qword_1001ACEB8, sub_100031C68);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_100003A14(v21, (uint64_t)qword_1001AE890);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "timeout to get session for status inspector", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    v35 = sub_1000322B8;
    v36 = 0;
    aBlock = _NSConcreteStackBlock;
    v32 = 1107296256;
    v33 = sub_1000043B8;
    v34 = &unk_10019ACD0;
    v26 = _Block_copy(&aBlock);
    objc_msgSend(v17, "endSessionWithCompletion:", v26);
    swift_unknownObjectRelease(v17);

    _Block_release(v26);
  }
  else
  {
    swift_unknownObjectRelease(v17);

  }
  swift_beginAccess(v10, &aBlock, 0, 0);
  v27 = *v10;
  if (*v10)
  {
    *(_BYTE *)(v30 + 32) = 1;
    v28 = v27;
  }
  swift_release(v9);
}

Swift::Int sub_1000320A4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  id v7;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  _TtC14softposreaderd12RemoteReader *v16;
  _TtC14softposreaderd12RemoteReader *v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v26[3];
  _QWORD v27[3];
  _BYTE v28[8];
  uint64_t v29;
  uint64_t v30;

  if (a1)
  {
    swift_beginAccess(a4 + 16, v26, 1, 0);
    v6 = *(void **)(a4 + 16);
    *(_QWORD *)(a4 + 16) = a1;
    v7 = a1;

  }
  else
  {
    if (qword_1001ACEB8 != -1)
      swift_once(&qword_1001ACEB8, sub_100031C68);
    v9 = type metadata accessor for Logger(0);
    sub_100003A14(v9, (uint64_t)qword_1001AE890);
    swift_errorRetain();
    v10 = swift_errorRetain();
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v26[0] = v14;
      *(_DWORD *)v13 = 136315138;
      if (a2)
      {
        swift_getErrorValue(a2, v28, v27);
        v15 = Error.localizedDescription.getter(v27[1], v27[2]);
        v17 = v16;
      }
      else
      {
        v17 = (_TtC14softposreaderd12RemoteReader *)0xE900000000000072;
        v15 = 0x6F727265206C696ELL;
      }
      v29 = sub_1000056EC(v15, (unint64_t)v17, v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v13 + 4, v13 + 12);
      swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "failed to obtain session %s", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

  }
  return OS_dispatch_semaphore.signal()();
}

void sub_1000322B8()
{
  sub_10003257C((uint64_t (*)(void))&static os_log_type_t.error.getter);
}

void *sub_1000322C4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *(void **)(v0 + 24);
  v2 = v1;
  if (v1 == (void *)1)
  {
    v2 = sub_100032320();
    v3 = *(void **)(v0 + 24);
    *(_QWORD *)(v0 + 24) = v2;
    v4 = v2;
    sub_1000339F0(v3);
  }
  sub_100033A00(v1);
  return v2;
}

void *sub_100032320()
{
  void *v0;
  void *v1;

  v0 = sub_100031CF8();
  if (v0)
  {
    v1 = v0;
    if (qword_1001AD238 != -1)
      swift_once(&qword_1001AD238, sub_100116254);
    NFSecureElementManagerSession.select(_:)(AID_PAY_APPLET, *(unint64_t *)algn_1001B4F48);

  }
  return sub_100031CF8();
}

void sub_100032570()
{
  sub_10003257C((uint64_t (*)(void))&static os_log_type_t.info.getter);
}

void sub_10003257C(uint64_t (*a1)(void))
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  NSObject *oslog;

  if (qword_1001ACEB8 != -1)
    swift_once(&qword_1001ACEB8, sub_100031C68);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100003A14(v2, (uint64_t)qword_1001AE890);
  oslog = Logger.logObject.getter(v3);
  v4 = a1();
  if (os_log_type_enabled(oslog, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, "session ended in status inspector", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

}

uint64_t sub_10003264C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  _QWORD v5[6];

  if (*(_BYTE *)(v0 + 32) == 1)
  {
    *(_BYTE *)(v0 + 32) = 0;
    v1 = sub_100031CF8();
    if (v1)
    {
      v2 = v1;
      v5[4] = sub_100032570;
      v5[5] = 0;
      v5[0] = _NSConcreteStackBlock;
      v5[1] = 1107296256;
      v5[2] = sub_1000043B8;
      v5[3] = &unk_10019ACF8;
      v3 = _Block_copy(v5);
      objc_msgSend(v2, "endSessionWithCompletion:", v3);
      _Block_release(v3);

    }
  }
  sub_1000339F0(*(id *)(v0 + 16));
  sub_1000339F0(*(id *)(v0 + 24));
  sub_10003398C(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  sub_10003396C(*(_QWORD *)(v0 + 56));
  sub_10003398C(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  sub_10003396C(*(_QWORD *)(v0 + 80));
  return v0;
}

uint64_t sub_100032728()
{
  uint64_t v0;

  sub_10003264C();
  return swift_deallocClassInstance(v0, 89, 7);
}

uint64_t type metadata accessor for StatusInspector()
{
  return objc_opt_self(_TtC9SPREngine15StatusInspector);
}

uint64_t sub_100032768()
{
  uint64_t v0;
  int v1;
  char v2;

  v1 = *(unsigned __int8 *)(v0 + 35);
  if (v1 == 2)
  {
    v2 = sub_1000327A0();
    *(_BYTE *)(v0 + 35) = v2 & 1;
  }
  else
  {
    v2 = v1 & 1;
  }
  return v2 & 1;
}

uint64_t sub_1000327A0()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  char v7;

  v0 = sub_100031CF8();
  if (v0)
  {
    v1 = v0;
    v7 = sub_1000D8634();

  }
  else
  {
    if (qword_1001ACEB8 != -1)
      swift_once(&qword_1001ACEB8, sub_100031C68);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_100003A14(v2, (uint64_t)qword_1001AE890);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "can't validate SE-SEP Pairing, check it next time.", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

    v7 = 1;
  }
  return v7 & 1;
}

uint64_t sub_100032C9C()
{
  uint64_t v0;
  uint64_t result;
  void *v2;
  void *v3;

  result = *(unsigned __int8 *)(v0 + 36);
  if ((_DWORD)result == 3)
  {
    if ((sub_100032768() & 1) != 0)
    {
      if (*(_BYTE *)(v0 + 32) == 1)
      {
        v2 = sub_1000322C4();
        v3 = v2;
        if (v2)

        result = v3 == 0;
      }
      else
      {
        result = 2;
      }
    }
    else
    {
      result = 1;
    }
    *(_BYTE *)(v0 + 36) = result;
  }
  return result;
}

uint8_t *sub_100032D00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = (uint8_t *)v1;
  if (v2 == 1)
  {
    v3 = sub_100032D84();
    v4 = *(_QWORD *)(v0 + 40);
    v5 = *(_QWORD *)(v0 + 48);
    *(_QWORD *)(v0 + 40) = v3;
    *(_QWORD *)(v0 + 48) = v6;
    swift_bridgeObjectRetain();
    sub_10003398C(v4, v5);
  }
  sub_1000339A0(v1, v2);
  return v3;
}

uint8_t *sub_100032D84()
{
  uint8_t *v0;
  void *v1;
  void *v2;

  v0 = 0;
  if ((sub_100032768() & 1) != 0)
  {
    v1 = sub_1000322C4();
    if (v1)
    {
      v2 = v1;
      v0 = sub_10007EC20();

    }
    else
    {
      return 0;
    }
  }
  return v0;
}

_TtC14softposreaderd12RemoteReader *sub_100032FAC()
{
  uint64_t v0;
  uint64_t v1;
  _TtC14softposreaderd12RemoteReader *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = (_TtC14softposreaderd12RemoteReader *)v1;
  if (v1 == 1)
  {
    v2 = sub_100033008();
    v3 = *(_QWORD *)(v0 + 56);
    *(_QWORD *)(v0 + 56) = v2;
    swift_bridgeObjectRetain();
    sub_10003396C(v3);
  }
  sub_10003397C(v1);
  return v2;
}

_TtC14softposreaderd12RemoteReader *sub_100033008()
{
  _TtC14softposreaderd12RemoteReader *v0;
  void *v1;
  void *v2;

  v0 = 0;
  if ((sub_100032768() & 1) != 0)
  {
    v1 = sub_1000322C4();
    if (v1)
    {
      v2 = v1;
      v0 = sub_10007F4E0();

    }
    else
    {
      return 0;
    }
  }
  return v0;
}

uint64_t sub_10003321C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = v1;
  if (v2 == 1)
  {
    v3 = sub_1000332A0();
    v4 = *(_QWORD *)(v0 + 64);
    v5 = *(_QWORD *)(v0 + 72);
    *(_QWORD *)(v0 + 64) = v3;
    *(_QWORD *)(v0 + 72) = v6;
    swift_bridgeObjectRetain();
    sub_10003398C(v4, v5);
  }
  sub_1000339A0(v1, v2);
  return v3;
}

uint64_t sub_1000332A0()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v0 = 0;
  if ((sub_100032768() & 1) != 0)
  {
    v1 = sub_1000322C4();
    if (v1)
    {
      v2 = v1;
      v0 = sub_10009B77C();

    }
    else
    {
      return 0;
    }
  }
  return v0;
}

uint64_t sub_1000335E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = v1;
  if (v1 == 1)
  {
    v2 = sub_10003363C();
    v3 = *(_QWORD *)(v0 + 80);
    *(_QWORD *)(v0 + 80) = v2;
    swift_bridgeObjectRetain();
    sub_10003396C(v3);
  }
  sub_10003397C(v1);
  return v2;
}

uint64_t sub_10003363C()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  const char *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  SEL v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

  v0 = sub_100031CF8();
  if (!v0
    || (v1 = v0, v2 = objc_msgSend(v0, "stateInformation"), v1, !v2))
  {
    v21 = 0u;
    v22 = 0u;
    goto LABEL_10;
  }
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, (char *)&type metadata for Any + 8);

  if (!*(_QWORD *)(v3 + 16))
  {
    v21 = 0u;
    v22 = 0u;
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v3, v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_10;
  }
  sub_100005D5C(v3 + 32, (uint64_t)&v21);
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v3, v11, v12, v13, v14, v15, v16, v17);
  if (!*((_QWORD *)&v22 + 1))
  {
LABEL_10:
    sub_100007B30((uint64_t)&v21);
    return 0;
  }
  v18 = sub_100003A2C(&qword_1001AEAC8);
  if (swift_dynamicCast(&v20, &v21, (char *)&type metadata for Any + 8, v18, 6))
    return v20;
  else
    return 0;
}

uint64_t sub_100033730()
{
  uint64_t v0;
  uint64_t result;

  result = *(unsigned __int8 *)(v0 + 88);
  if ((_DWORD)result == 3)
  {
    result = sub_100033758();
    *(_BYTE *)(v0 + 88) = result;
  }
  return result;
}

uint64_t sub_100033758()
{
  void *v0;
  void *v1;

  if ((sub_100032768() & 1) == 0)
    return 1;
  v0 = sub_100031CF8();
  if (!v0)
    return 2;
  v1 = v0;
  if (qword_1001AD248 != -1)
    swift_once(&qword_1001AD248, sub_1001162D0);
  NFSecureElementManagerSession.select(_:)(AID_PIN_APPLET, *(unint64_t *)algn_1001B4F68);

  return 0;
}

int64x2_t sub_100033928()
{
  uint64_t v0;
  int64x2_t result;

  result = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v0 + 16) = result;
  *(_DWORD *)(v0 + 32) = 0x2000000;
  *(_BYTE *)(v0 + 36) = 3;
  *(_OWORD *)(v0 + 40) = xmmword_10015E620;
  *(_OWORD *)(v0 + 56) = xmmword_10015E630;
  *(int64x2_t *)(v0 + 72) = result;
  *(_BYTE *)(v0 + 88) = 3;
  return result;
}

uint64_t sub_10003396C(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_10003397C(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRetain(result);
  return result;
}

uint64_t sub_10003398C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t sub_1000339A0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRetain(a2);
  return result;
}

unint64_t sub_1000339B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001AE420;
  if (!qword_1001AE420)
  {
    v1 = objc_opt_self(NSError);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001AE420);
  }
  return result;
}

void sub_1000339F0(id a1)
{
  if (a1 != (id)1)

}

id sub_100033A00(id result)
{
  if (result != (id)1)
    return result;
  return result;
}

uint64_t sub_100033A10()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100033A34()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

Swift::Int sub_100033A60(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000320A4(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_100033A68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100033A78(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100033A90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001AEAD0);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001AEAD0);
  if (qword_1001AD190 != -1)
    swift_once(&qword_1001AD190, sub_1000CCB8C);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4EA0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100033B20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for OSSignposter(0);
  sub_1000039D4(v0, qword_1001AEAE8);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001AEAE8);
  if (qword_1001ACF20 != -1)
    swift_once(&qword_1001ACF20, sub_10003BA28);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4B58);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100033BB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[16];
  _QWORD v21[4];

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v20[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1001ACEC0 != -1)
    swift_once(&qword_1001ACEC0, sub_100033A90);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100003A14(v6, (uint64_t)qword_1001AEAD0);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "deinit", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = (uint64_t)objc_msgSend(*(id *)(v0 + 96), "operationCount");
  if (v11 >= 1)
  {
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "ORReader deinit but operation in progress: client must have crashed", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

    v15 = sub_100005EF8((_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 80));
    type metadata accessor for ORError(0);
    v21[3] = v16;
    v21[0] = sub_1000247D0(20902, 0, 0, 0);
    v17 = *v15;
    v18 = static DispatchWorkItemFlags.barrier.getter(v21[0]);
    __chkstk_darwin(v18);
    *(_QWORD *)&v20[-48] = v17;
    v20[-40] = 1;
    *(_QWORD *)&v20[-32] = v21;
    *(_QWORD *)&v20[-24] = 0;
    *(_QWORD *)&v20[-16] = 0;
    *(_QWORD *)&v20[-8] = 0;
    OS_dispatch_queue.sync<A>(flags:execute:)(&type metadata for (), v5, sub_100037FB0, &v20[-64], &type metadata for () + 1);
    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
    sub_100005D3C(v21);
    objc_msgSend(*(id *)(v1 + 96), "cancelAllOperations");
  }
  sub_100005D3C((_QWORD *)(v1 + 16));
  sub_100005D3C((_QWORD *)(v1 + 56));

  swift_release(*(_QWORD *)(v1 + 104));
  return v1;
}

uint64_t sub_100033E40()
{
  uint64_t v0;

  sub_100033BB0();
  return swift_deallocClassInstance(v0, 112, 7);
}

uint64_t type metadata accessor for ORReader()
{
  return objc_opt_self(_TtC9SPREngine8ORReader);
}

void sub_100033E80(void *a1, NSObject *a2, void (*a3)(_QWORD, _QWORD), uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  int v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  _QWORD *v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _TtC14softposreaderd12RemoteReader *v34;
  SEL v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  void **v42;
  void *v43;
  NSObject *v44;
  NSObject *v45;
  os_log_type_t v46;
  _BOOL4 v47;
  NSObject *v48;
  uint8_t *v49;
  void ***v50;
  NSObject *v51;
  void **v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t inited;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void **v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  _TtC14softposreaderd12RemoteReader *v69;
  os_unfair_lock_s *v70;
  uint64_t v71;
  os_unfair_lock_s *v72;
  SEL v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  NSObject *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  int v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(char *, uint64_t, uint64_t);
  char *v90;
  uint8_t *v91;
  os_signpost_id_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  os_unfair_lock_s *v96;
  uint64_t v97;
  os_unfair_lock_s *v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void **v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  void *v112;
  unsigned __int16 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  _TtC14softposreaderd12RemoteReader *v121;
  os_unfair_lock_s *v122;
  uint64_t v123;
  os_unfair_lock_s *v124;
  SEL v125;
  id v126;
  id v127;
  id v128;
  id v129;
  id v130;
  id v131;
  uint64_t *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void **v141;
  uint64_t v142;
  id v143;
  id v144;
  NSString v145;
  uint32_t *p_align;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  NSObject *v150;
  os_log_type_t v151;
  uint8_t *v152;
  void **v153;
  id v154;
  void *v155;
  uint64_t v156;
  _TtC14softposreaderd12RemoteReader *v157;
  _TtC14softposreaderd12RemoteReader *v158;
  SEL v159;
  id v160;
  id v161;
  id v162;
  id v163;
  id v164;
  id v165;
  uint64_t v166;
  _QWORD *v167;
  char *v168;
  void *v169;
  void *v170;
  id v171;
  _QWORD *v172;
  id v173;
  NSString v174;
  uint64_t v175;
  void **v176;
  _TtC14softposreaderd12RemoteReader *v177;
  id v178;
  Class isa;
  SEL v180;
  id v181;
  id v182;
  id v183;
  id v184;
  id v185;
  id v186;
  uint64_t v187;
  uint64_t v188;
  id v189;
  void **v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  __int128 v197;
  char *v198;
  uint64_t v199;
  _QWORD *v200;
  NSObject *v201;
  uint64_t v202;
  void (*v203)(_QWORD, _QWORD);
  uint64_t v204;
  void **v205;
  _QWORD v206[4];
  _QWORD *v207;
  uint64_t v208;
  char v209[72];
  uint64_t v210;
  _BYTE v211[88];

  v5 = v4;
  v204 = a4;
  v201 = a2;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v187 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v199 = *(_QWORD *)(v12 - 8);
  v200 = (_QWORD *)v12;
  __chkstk_darwin(v12);
  v198 = (char *)&v187 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for OSSignpostID(0);
  v196 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)&v197 = v14;
  v15 = __chkstk_darwin(v14);
  v194 = (char *)&v187 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v187 - v17;
  if (qword_1001ACEC0 != -1)
    swift_once(&qword_1001ACEC0, sub_100033A90);
  v193 = v8;
  v19 = sub_100003A14(v8, (uint64_t)qword_1001AEAD0);
  v20 = a1;
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter();
  v23 = v22;
  v24 = os_log_type_enabled(v21, v22);
  v191 = v11;
  v192 = v9;
  v195 = (uint64_t)v18;
  if (v24)
  {
    v25 = swift_slowAlloc(22, -1);
    LODWORD(v189) = v23;
    v26 = v25;
    v190 = (void **)swift_slowAlloc(64, -1);
    v205 = v190;
    *(_DWORD *)v26 = 136315394;
    v203 = a3;
    v210 = sub_1000056EC(0xD00000000000002ELL, 0x800000010016A320, (uint64_t *)&v205);
    v202 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v210, v211, v26 + 4, v26 + 12);
    *(_WORD *)(v26 + 12) = 2080;
    v188 = v26 + 14;
    v27 = v20;
    v28 = v20;
    v29 = v5;
    v30 = objc_msgSend(v27, "description");
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v33 = v32;

    v5 = v29;
    v20 = v28;
    v210 = sub_1000056EC(v31, v33, (uint64_t *)&v205);
    v19 = v202;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v210, v211, v188, v26 + 22);

    v34 = (_TtC14softposreaderd12RemoteReader *)v33;
    a3 = v203;
    swift_bridgeObjectRelease(v34, v35, v36, v37, v38, v39, v40, v41);
    _os_log_impl((void *)&_mh_execute_header, v21, (os_log_type_t)v189, "%s, ORProvisionParameters: %s", (uint8_t *)v26, 0x16u);
    v42 = v190;
    swift_arrayDestroy(v190, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v26, -1, -1);

  }
  else
  {

  }
  sub_100037580();
  v43 = (void *)v5[12];
  if (objc_msgSend(v43, "operationCount"))
  {
    v44 = (id)sub_1000247D0(20010, 0xD000000000000021, (void *)0x800000010016A290, 0);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.error.getter();
    v47 = os_log_type_enabled(v45, v46);
    v201 = v44;
    if (v47)
    {
      v48 = v44;
      v49 = (uint8_t *)swift_slowAlloc(12, -1);
      v50 = (void ***)swift_slowAlloc(8, -1);
      v203 = a3;
      *(_DWORD *)v49 = 138412290;
      v200 = v5;
      v51 = v48;
      v52 = (void **)_swift_stdlib_bridgeErrorToNSError(v51);
      v205 = v52;
      v5 = v200;
      a3 = v203;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v205, v206, v49 + 4, v49 + 12);
      *v50 = v52;

      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Error: %@", v49, 0xCu);
      v53 = sub_100003A2C((uint64_t *)&unk_1001AE430);
      swift_arrayDestroy(v50, 1, v53);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v49, -1, -1);
    }
    else
    {

      v45 = v44;
    }

    v54 = v5[13];
    v55 = sub_100003A2C(&qword_1001AE238);
    inited = swift_initStackObject(v55, v209);
    *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
    *(_BYTE *)(inited + 32) = 7;
    v57 = v201;
    v210 = (uint64_t)v201;
    type metadata accessor for ORError(0);
    v59 = v58;
    v60 = sub_100037878();
    _BridgedStoredNSError.code.getter(&v205, v59, v60);
    v61 = v205;
    *(_QWORD *)(inited + 64) = &type metadata for Int;
    *(_QWORD *)(inited + 40) = v61;
    v69 = (_TtC14softposreaderd12RemoteReader *)sub_1000E8B30(inited, v62, v63, v64, v65, v66, v67, v68);
    v70 = *(os_unfair_lock_s **)(v54 + 56);
    v71 = (uint64_t)&v70[4];
    v72 = v70 + 8;
    os_unfair_lock_lock(v70 + 8);
    sub_10005FDB8(v71, (uint64_t)v69);
    os_unfair_lock_unlock(v72);
    swift_bridgeObjectRelease(v69, v73, v74, v75, v76, v77, v78, v79);
    sub_100025138(5);
    v80 = v57;
    a3(0, v57);

    goto LABEL_12;
  }
  sub_1000378C0(v20);
  sub_100037C0C();
  v190 = (void **)v20;
  if (qword_1001ACEC8 != -1)
    swift_once(&qword_1001ACEC8, sub_100033B20);
  v81 = type metadata accessor for OSSignposter(0);
  sub_100003A14(v81, (uint64_t)qword_1001AEAE8);
  v82 = v195;
  v83 = static OSSignpostID.exclusive.getter();
  v84 = OSSignposter.logHandle.getter(v83);
  v85 = static os_signpost_type_t.begin.getter();
  v86 = OS_os_log.signpostsEnabled.getter();
  v202 = v19;
  v203 = a3;
  v189 = v43;
  if ((v86 & 1) != 0)
  {
    v88 = v196;
    v87 = v197;
    LODWORD(v188) = v85;
    v89 = *(void (**)(char *, uint64_t, uint64_t))(v196 + 16);
    v90 = v194;
    v89(v194, v82, v197);
    v91 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v91 = 0;
    v92 = OSSignpostID.rawValue.getter(v91);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v84, (os_signpost_type_t)v188, v92, "ttp-total-time", "begin total time for ttp", v91, 2u);
    swift_slowDealloc(v91, -1, -1);

    v93 = v90;
    (*(void (**)(char *, uint64_t))(v88 + 8))(v90, v87);
  }
  else
  {

    v88 = v196;
    v87 = v197;
    v89 = *(void (**)(char *, uint64_t, uint64_t))(v196 + 16);
    v93 = v194;
  }
  v89(v93, v82, v87);
  v94 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v94, *(unsigned int *)(v94 + 48), *(unsigned __int16 *)(v94 + 52));
  v194 = (char *)OSSignpostIntervalState.init(id:isOpen:)(v93, 1);
  (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v82, v87);
  v95 = v5[13];
  v96 = *(os_unfair_lock_s **)(v95 + 56);
  v97 = (uint64_t)&v96[4];
  v98 = v96 + 8;
  os_unfair_lock_lock(v96 + 8);
  v99 = 0;
  sub_10007FB24(v97, 2);
  os_unfair_lock_unlock(v98);
  v195 = sub_100003A2C(&qword_1001AE238);
  v100 = swift_initStackObject(v195, &v208);
  *(_OWORD *)(v100 + 16) = xmmword_10015E090;
  *(_BYTE *)(v100 + 32) = 5;
  v101 = sub_100003A2C((uint64_t *)&unk_1001B1300);
  v102 = swift_allocObject(v101, 72, 7);
  v197 = xmmword_10015A5F0;
  *(_OWORD *)(v102 + 16) = xmmword_10015A5F0;
  v103 = v190;
  v104 = objc_msgSend(v190, "currencyCode");
  *(_QWORD *)(v102 + 56) = &type metadata for Int;
  *(_QWORD *)(v102 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v102 + 32) = v104;
  v105 = String.init(format:_:)(0x646C343025, 0xE500000000000000, v102);
  *(_QWORD *)(v100 + 64) = &type metadata for String;
  *(_QWORD *)(v100 + 40) = v105;
  *(_QWORD *)(v100 + 48) = v106;
  *(_BYTE *)(v100 + 72) = 19;
  v107 = swift_allocObject(v101, 72, 7);
  *(_OWORD *)(v107 + 16) = v197;
  v108 = objc_msgSend(v103, "countryCode");
  *(_QWORD *)(v107 + 56) = &type metadata for Int;
  *(_QWORD *)(v107 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v107 + 32) = v108;
  v109 = String.init(format:_:)(0x646C343025, 0xE500000000000000, v107);
  *(_QWORD *)(v100 + 104) = &type metadata for String;
  *(_QWORD *)(v100 + 80) = v109;
  *(_QWORD *)(v100 + 88) = v110;
  *(_BYTE *)(v100 + 112) = 11;
  v111 = objc_msgSend(*(id *)(*sub_100005EF8(v5 + 2, v5[5]) + 24), "sequenceCounter");
  if (v111)
  {
    v112 = v111;
    v113 = (unsigned __int16)objc_msgSend(v111, "unsignedShortValue");

    *(_QWORD *)(v100 + 144) = &type metadata for UInt16;
    *(_WORD *)(v100 + 120) = v113;
    v121 = (_TtC14softposreaderd12RemoteReader *)sub_1000E8B30(v100, v114, v115, v116, v117, v118, v119, v120);
    v122 = *(os_unfair_lock_s **)(v95 + 56);
    v123 = (uint64_t)&v122[4];
    v124 = v122 + 8;
    os_unfair_lock_lock(v122 + 8);
    sub_10005FDB8(v123, (uint64_t)v121);
    os_unfair_lock_unlock(v124);
    swift_bridgeObjectRelease(v121, v125, v126, v127, v128, v129, v130, v131);
    v132 = sub_100005EF8(v5 + 7, v5[10]);
    v133 = *v132;
    v196 = v95;
    v134 = v198;
    v135 = static DispatchWorkItemFlags.barrier.getter(v132);
    __chkstk_darwin(v135);
    *((_BYTE *)&v187 - 16) = 1;
    *(&v187 - 1) = v133;
    v136 = sub_100003A2C(&qword_1001B12E0);
    OS_dispatch_queue.sync<A>(flags:execute:)(&v205, v134, sub_100037FC4, &v187 - 4, v136);
    v137 = v134;
    v138 = v196;
    (*(void (**)(char *, _QWORD *))(v199 + 8))(v137, v200);
    sub_100007B30((uint64_t)&v205);
    sub_100008390((uint64_t)(v5 + 7), (uint64_t)&v205);
    v139 = (uint64_t)v201;
    swift_unknownObjectRetain(v201);
    swift_retain();
    v140 = v204;
    swift_retain();
    v141 = v103;
    v142 = (uint64_t)v203;
    sub_10002FA00(v141, v139, (uint64_t)&v205, v138, (uint64_t)v203, v140);
    v200 = v5;
    v144 = v143;
    v145 = String._bridgeToObjectiveC()();
    p_align = &stru_1001A9FE8.align;
    objc_msgSend(v144, "setName:", v145);

    v148 = v191;
    v147 = v192;
    v149 = v193;
    (*(void (**)(char *, uint64_t, uint64_t))(v192 + 16))(v191, v202, v193);
    v99 = v144;
    v150 = Logger.logObject.getter(v99);
    v151 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v150, v151))
    {

      (*(void (**)(char *, uint64_t))(v147 + 8))(v148, v149);
      goto LABEL_23;
    }
    v152 = (uint8_t *)swift_slowAlloc(12, -1);
    v153 = (void **)swift_slowAlloc(32, -1);
    v205 = v153;
    *(_DWORD *)v152 = 136315138;
    v154 = objc_msgSend(v99, "name");
    if (v154)
    {
      v155 = v154;
      v156 = static String._unconditionallyBridgeFromObjectiveC(_:)(v154);
      v158 = v157;

      v210 = sub_1000056EC(v156, (unint64_t)v158, (uint64_t *)&v205);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v210, v211, v152 + 4, v152 + 12);

      swift_bridgeObjectRelease(v158, v159, v160, v161, v162, v163, v164, v165);
      _os_log_impl((void *)&_mh_execute_header, v150, v151, "%s", v152, 0xCu);
      swift_arrayDestroy(v153, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v153, -1, -1);
      swift_slowDealloc(v152, -1, -1);

      (*(void (**)(char *, uint64_t))(v192 + 8))(v191, v193);
      v142 = (uint64_t)v203;
      p_align = (_DWORD *)(&stru_1001A9FE8 + 24);
LABEL_23:
      v166 = swift_allocObject(&unk_10019AE40, 24, 7);
      swift_weakInit(v166 + 16, v200);
      v167 = (_QWORD *)swift_allocObject(&unk_10019AE68, 56, 7);
      v167[2] = v166;
      v167[3] = v99;
      v168 = v194;
      v167[4] = v194;
      v167[5] = v142;
      v167[6] = v204;
      v206[3] = sub_100038040;
      v207 = v167;
      v205 = _NSConcreteStackBlock;
      v206[0] = 1107296256;
      v206[1] = sub_1000043B8;
      v206[2] = &unk_10019AE80;
      v169 = _Block_copy(&v205);
      v170 = (void *)objc_opt_self(NSBlockOperation);
      swift_retain();
      v80 = v99;
      swift_retain();
      swift_retain();
      v171 = objc_msgSend(v170, "blockOperationWithBlock:", v169);
      _Block_release(v169);
      v172 = v207;
      swift_release(v166);
      swift_release(v172);
      v173 = v171;
      v174 = String._bridgeToObjectiveC()();
      objc_msgSend(v173, *((SEL *)p_align + 292), v174);

      objc_msgSend(v173, "addDependency:", v80);
      v175 = sub_100003A2C((uint64_t *)&unk_1001AE490);
      v176 = (void **)swift_allocObject(v175, 48, 7);
      *((_OWORD *)v176 + 1) = xmmword_10015DF20;
      v176[4] = v80;
      v176[5] = v173;
      v205 = v176;
      specialized Array._endMutation()(v176);
      v177 = (_TtC14softposreaderd12RemoteReader *)v205;
      sub_100005E24(0, &qword_1001AEBE8, NSOperation_ptr);
      v178 = v173;
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v177, v180, v181, v182, v183, v184, v185, v186);
      objc_msgSend(v189, "addOperations:waitUntilFinished:", isa, 0);

      swift_release(v168);
LABEL_12:

      return;
    }
  }
  else
  {
    __break(1u);
  }

  __break(1u);
}

void sub_1000351F0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD, void *))
{
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  NSObject *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t *v29;
  NSObject *v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t inited;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  _TtC14softposreaderd12RemoteReader *v50;
  os_unfair_lock_s *v51;
  uint64_t v52;
  os_unfair_lock_s *v53;
  SEL v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  NSObject *v61;
  NSObject *v62;
  uint64_t v63;
  NSObject *v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  void (*v68)(_QWORD, void *);
  NSObject *v69;
  uint64_t v70;
  uint64_t v71;
  NSObject **v72;
  uint64_t v73;
  void (*v74)(_QWORD, void *);
  char v76[72];
  _QWORD v77[3];
  __int128 v78;
  __int128 v79;
  char v80[40];

  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v80, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (Strong)
  {
    v8 = Strong;
    v9 = objc_msgSend(*(id *)(*sub_100005EF8((_QWORD *)(Strong + 16), *(_QWORD *)(Strong + 40)) + 24), "ecdsaCertificate");
    if (v9)
    {
      v10 = v9;
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v13 = v12;

      v14 = Data.init(hexString:)(v11, v13);
      if (v15 >> 60 == 15)
      {
        v78 = 0u;
        v79 = 0u;
      }
      else
      {
        *((_QWORD *)&v79 + 1) = &type metadata for Data;
        *(_QWORD *)&v78 = v14;
        *((_QWORD *)&v78 + 1) = v15;
      }
      swift_beginAccess(a2 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionReadResult, v77, 33, 0);
      sub_1000E91C4((uint64_t)&v78, 0x7472654364736163, (_TtC14softposreaderd12RemoteReader *)0xEF65746163696669);
      swift_endAccess(v77);
      v21 = *(void **)(a2 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError);
      if (v21)
      {
        v22 = qword_1001ACEC0;
        v23 = v21;
        if (v22 != -1)
          swift_once(&qword_1001ACEC0, sub_100033A90);
        v24 = type metadata accessor for Logger(0);
        sub_100003A14(v24, (uint64_t)qword_1001AEAD0);
        v25 = v23;
        v26 = Logger.logObject.getter(v25);
        v27 = static os_log_type_t.error.getter();
        v74 = a4;
        if (os_log_type_enabled(v26, v27))
        {
          v71 = a2;
          v28 = (uint8_t *)swift_slowAlloc(12, -1);
          v29 = (uint64_t *)swift_slowAlloc(8, -1);
          *(_DWORD *)v28 = 138412290;
          v30 = v25;
          v31 = v25;
          v32 = _swift_stdlib_bridgeErrorToNSError(v30);
          *(_QWORD *)&v78 = v32;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, (char *)&v78 + 8, v28 + 4, v28 + 12);
          *v29 = v32;
          v25 = v31;

          _os_log_impl((void *)&_mh_execute_header, v26, v27, "Error: %@", v28, 0xCu);
          v33 = sub_100003A2C((uint64_t *)&unk_1001AE430);
          swift_arrayDestroy(v29, 1, v33);
          swift_slowDealloc(v29, -1, -1);
          v34 = v28;
          a2 = v71;
          swift_slowDealloc(v34, -1, -1);
        }
        else
        {

          v26 = v25;
        }

        v36 = *(_QWORD *)(v8 + 104);
        v37 = sub_100003A2C(&qword_1001AE238);
        inited = swift_initStackObject(v37, v76);
        *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
        *(_BYTE *)(inited + 32) = 7;
        v77[0] = v25;
        type metadata accessor for ORError(0);
        v40 = v39;
        v41 = sub_100037878();
        swift_retain();
        _BridgedStoredNSError.code.getter(&v78, v40, v41);
        v42 = v78;
        *(_QWORD *)(inited + 64) = &type metadata for Int;
        *(_QWORD *)(inited + 40) = v42;
        v50 = (_TtC14softposreaderd12RemoteReader *)sub_1000E8B30(inited, v43, v44, v45, v46, v47, v48, v49);
        v51 = *(os_unfair_lock_s **)(v36 + 56);
        v52 = (uint64_t)&v51[4];
        v53 = v51 + 8;
        os_unfair_lock_lock(v51 + 8);
        sub_10005FDB8(v52, (uint64_t)v50);
        os_unfair_lock_unlock(v53);
        swift_release(v36);
        swift_bridgeObjectRelease(v50, v54, v55, v56, v57, v58, v59, v60);
        v61 = v25;
        v74(0, v21);
      }
      else
      {
        v73 = v8;
        sub_100005E24(0, &qword_1001AEBF0, ORProvisionResult_ptr);
        v35 = swift_bridgeObjectRetain();
        v62 = sub_100038248(v35);
        if (qword_1001ACEC0 != -1)
          swift_once(&qword_1001ACEC0, sub_100033A90);
        v63 = type metadata accessor for Logger(0);
        sub_100003A14(v63, (uint64_t)qword_1001AEAD0);
        v64 = v62;
        v65 = Logger.logObject.getter(v64);
        v66 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v65, v66))
        {
          v67 = (uint8_t *)swift_slowAlloc(12, -1);
          v72 = (NSObject **)swift_slowAlloc(8, -1);
          *(_DWORD *)v67 = 138412290;
          *(_QWORD *)&v78 = v64;
          v68 = a4;
          v69 = v64;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, (char *)&v78 + 8, v67 + 4, v67 + 12);
          *v72 = v64;

          a4 = v68;
          _os_log_impl((void *)&_mh_execute_header, v65, v66, "ORProvisionResult: %@", v67, 0xCu);
          v70 = sub_100003A2C((uint64_t *)&unk_1001AE430);
          swift_arrayDestroy(v72, 1, v70);
          swift_slowDealloc(v72, -1, -1);
          swift_slowDealloc(v67, -1, -1);

        }
        else
        {

        }
        v8 = v73;
        v61 = v64;
        a4(v64, 0);
      }

      sub_100035B00(a2, a3, v8);
      swift_release(v8);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_1001ACEC0 != -1)
      swift_once(&qword_1001ACEC0, sub_100033A90);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_100003A14(v16, (uint64_t)qword_1001AEAD0);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "ORReader deinit before start afterProvisionReadOperation", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

  }
}

void sub_100035B00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint8_t *v23;
  os_signpost_id_t v24;
  void (*v25)(_BYTE *, uint64_t);
  os_unfair_lock_s *v26;
  os_unfair_lock_s *v27;
  uint64_t v28;
  _BYTE v29[12];
  int v30;
  uint64_t v31;

  v31 = a3;
  v5 = type metadata accessor for OSSignpostError(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v29[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for OSSignpostID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = &v29[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  v15 = &v29[-v14];
  if (qword_1001ACEC8 != -1)
    swift_once(&qword_1001ACEC8, sub_100033B20);
  v16 = type metadata accessor for OSSignposter(0);
  sub_100003A14(v16, (uint64_t)qword_1001AEAE8);
  v17 = sub_10003AFE8("ttp-postprocessing", 18, 2, *(_QWORD *)(a1 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_nfSEReaderSession), 0xD000000000000017, 0x800000010016A350);
  v18 = OSSignposter.logHandle.getter(v17);
  v19 = OSSignpostIntervalState.signpostID.getter();
  v30 = static os_signpost_type_t.end.getter(v19);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v20 = swift_retain();
    checkForErrorAndConsumeState(state:)(v20);
    swift_release(a2);
    if ((*(unsigned int (**)(_BYTE *, uint64_t))(v6 + 88))(v8, v5) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v21 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
      v21 = "end ttp total time";
    }
    v22 = v31;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v13, v15, v9);
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    v24 = OSSignpostID.rawValue.getter(v23);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, (os_signpost_type_t)v30, v24, "ttp-total-time", v21, v23, 2u);
    swift_slowDealloc(v23, -1, -1);

    v25 = *(void (**)(_BYTE *, uint64_t))(v10 + 8);
    v25(v15, v9);
    v25(v13, v9);
  }
  else
  {

    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v15, v9);
    v22 = v31;
  }
  v26 = *(os_unfair_lock_s **)(*(_QWORD *)(v22 + 104) + 56);
  v27 = v26 + 8;
  v28 = (uint64_t)&v26[4];
  os_unfair_lock_lock(v26 + 8);
  sub_1000806E4(v28, 2);
  os_unfair_lock_unlock(v27);
  os_unfair_lock_lock(v27);
  sub_1000806E4(v28, 0);
  os_unfair_lock_unlock(v27);
  sub_100025138(5);
}

void sub_100035E14()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  os_log_type_t v20;
  uint8_t *v21;
  _QWORD v22[4];

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001ACEC0 != -1)
    swift_once(&qword_1001ACEC0, sub_100033A90);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100003A14(v6, (uint64_t)qword_1001AEAD0);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "ORReader.cancelProvision()", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = (void *)v1[12];
  v12 = (uint64_t)objc_msgSend(v11, "operationCount");
  if (v12 < 1)
  {
    v17 = Logger.logObject.getter(v12);
    v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v20, "No Operation to cancel", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }
  }
  else
  {
    v13 = sub_100005EF8(v1 + 7, v1[10]);
    type metadata accessor for ORError(0);
    v22[3] = v14;
    v22[0] = sub_1000247D0(20009, 0, 0, 0);
    v15 = *v13;
    v16 = static DispatchWorkItemFlags.barrier.getter(v22[0]);
    __chkstk_darwin(v16);
    v22[-6] = v15;
    LOBYTE(v22[-5]) = 1;
    v22[-4] = v22;
    v22[-3] = 0;
    v22[-2] = 0;
    v22[-1] = 0;
    OS_dispatch_queue.sync<A>(flags:execute:)(&type metadata for (), v5, sub_100037FB0, &v22[-8], &type metadata for () + 1);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    sub_100005D3C(v22);
    *(_BYTE *)(v1[13] + 65) = 1;
    objc_msgSend(v11, "cancelAllOperations");
    v17 = Logger.logObject.getter(objc_msgSend(v11, "waitUntilAllOperationsAreFinished"));
    v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "All Operations are cancelled", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }
  }

}

void sub_100036130(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  void *v20;
  _QWORD aBlock[5];
  uint64_t v22;

  if (qword_1001ACEC0 != -1)
    swift_once(&qword_1001ACEC0, sub_100033A90);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100003A14(v4, (uint64_t)qword_1001AEAD0);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "checkStatus(completion:)", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  sub_100037580();
  sub_100037C0C();
  v9 = objc_msgSend((id)objc_opt_self(NFHardwareManager), "sharedHardwareManager");
  if (!v9)
  {
    __break(1u);
    goto LABEL_15;
  }
  v10 = v9;
  v11 = swift_allocObject(&unk_10019AD50, 32, 7);
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = a2;
  aBlock[4] = sub_100037F90;
  v22 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100004C68;
  aBlock[3] = &unk_10019AD68;
  v12 = _Block_copy(aBlock);
  v13 = v22;
  swift_retain();
  swift_release(v13);
  v14 = objc_msgSend(v10, "startSecureElementManagerSession:", v12);
  _Block_release(v12);

  if (!v14)
  {
LABEL_15:
    __break(1u);
    return;
  }
  v15 = objc_msgSend(v14, "isFirstInQueue");
  if ((v15 & 1) == 0)
  {
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "waiting for NFSession ...", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

  }
  v19 = objc_opt_self(NFSession);
  v20 = (void *)swift_dynamicCastObjCClass(v14, v19);
  if (v20)
    objc_msgSend(v20, "setSessionTimeLimit:", 7.0);
  swift_unknownObjectRelease(v14);
}

void sub_10003657C(void *a1, uint64_t a2, void (*a3)(id, _QWORD), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint8_t *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  Swift::String v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  id v39;
  NSString v40;
  SEL v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  void *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(id, _QWORD);
  uint64_t aBlock[7];
  uint64_t v55;
  uint64_t v56;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v12 = qword_1001AD258;
    v13 = a1;
    if (v12 != -1)
      swift_once(&qword_1001AD258, sub_10011634C);
    NFSecureElementManagerSession.select(_:)(qword_1001B4F80, *(unint64_t *)algn_1001B4F88);
    if (qword_1001AD2C8 != -1)
      swift_once(&qword_1001AD2C8, sub_10012B690);
    v23 = sub_100003A14(v8, (uint64_t)qword_1001B3A10);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = a4;
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "getProvisionVersion()", v27, 2u);
      v28 = v27;
      a4 = v26;
      swift_slowDealloc(v28, -1, -1);
    }

    v29 = (uint64_t *)TLVTag.provisionAppletVersionInfo.unsafeMutableAddressor();
    v30 = sub_100080ED4(*v29);
    v32 = v31;
    v52 = a4;
    v53 = a3;
    v33 = Data.hexString()();
    sub_100005DE0(v30, v32);
    if (qword_1001ACEC0 != -1)
      swift_once(&qword_1001ACEC0, sub_100033A90);
    sub_100003A14(v8, (uint64_t)qword_1001AEAD0);
    v34 = swift_bridgeObjectRetain_n(v33._object, 2);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(12, -1);
      v38 = swift_slowAlloc(32, -1);
      aBlock[0] = v38;
      *(_DWORD *)v37 = 136315138;
      swift_bridgeObjectRetain();
      v55 = sub_1000056EC(v33._countAndFlagsBits, (unint64_t)v33._object, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v37 + 4, v37 + 12);
      swift_bridgeObjectRelease_n(v33._object, 3);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "applet version: %s", v37, 0xCu);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v37, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v33._object, 2);
    }
    v39 = objc_allocWithZone((Class)ORProvisionAppletData);
    v40 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v33._object, v41, v42, v43, v44, v45, v46, v47);
    v48 = objc_msgSend(v39, "initWithProvisionAppletVersion:", v40);

    v53(v48, 0);
    aBlock[4] = (uint64_t)sub_10003709C;
    aBlock[5] = 0;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000043B8;
    aBlock[3] = (uint64_t)&unk_10019AE08;
    v49 = _Block_copy(aBlock);
    objc_msgSend(v13, "endSessionWithCompletion:", v49);
    _Block_release(v49);
    goto LABEL_23;
  }
  if (qword_1001ACEC0 != -1)
    swift_once(&qword_1001ACEC0, sub_100033A90);
  v14 = sub_100003A14(v8, (uint64_t)qword_1001AEAD0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v14, v8);
  swift_errorRetain();
  v15 = swift_errorRetain();
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v16, v17))
  {
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    goto LABEL_16;
  }
  v52 = a4;
  v53 = a3;
  v18 = swift_slowAlloc(22, -1);
  v50 = (uint64_t *)swift_slowAlloc(8, -1);
  v51 = swift_slowAlloc(32, -1);
  aBlock[0] = v51;
  *(_DWORD *)v18 = 136315394;
  v55 = sub_1000056EC(0xD000000000000018, 0x800000010016A170, aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v18 + 4, v18 + 12);
  *(_WORD *)(v18 + 12) = 2112;
  if (a2)
  {
    swift_errorRetain();
    v19 = _swift_stdlib_bridgeErrorToNSError(a2);
    v55 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v18 + 14, v18 + 22);
    v20 = v50;
    *v50 = v19;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "no session in %s: %@", (uint8_t *)v18, 0x16u);
    v21 = sub_100003A2C((uint64_t *)&unk_1001AE430);
    swift_arrayDestroy(v20, 1, v21);
    swift_slowDealloc(v20, -1, -1);
    v22 = v51;
    swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    a3 = v53;
LABEL_16:
    v13 = (id)sub_1000247D0(20001, 0xD000000000000017, (void *)0x800000010016A150, 0);
    a3(0, v13);
LABEL_23:

    return;
  }
  __break(1u);
}

void sub_10003703C(void *a1, NSObject *a2, void (*a3)(_QWORD, _QWORD), uint64_t a4)
{
  sub_100033E80(a1, a2, a3, a4);
}

void sub_10003705C()
{
  sub_100035E14();
}

void sub_10003707C(uint64_t a1, uint64_t a2)
{
  sub_100036130(a1, a2);
}

void sub_10003709C()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *oslog;

  if (qword_1001ACEC0 != -1)
    swift_once(&qword_1001ACEC0, sub_100033A90);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001AEAD0);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Session ended", v3, 2u);
    swift_slowDealloc(v3, -1, -1);
  }

}

void sub_100037168(uint64_t a1, unsigned __int8 *a2)
{
  sub_1000806E4(a1, *a2);
}

void sub_100037180(uint64_t a1, unsigned __int8 *a2)
{
  sub_10007FB24(a1, *a2);
}

_QWORD *sub_100037198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[3];
  uint64_t v24;
  _UNKNOWN **v25;
  _QWORD v26[5];

  v8 = type metadata accessor for SecureElement();
  v26[3] = v8;
  v26[4] = &off_1001A11A8;
  v26[0] = a1;
  v9 = type metadata accessor for DefaultManagedDictionary();
  v24 = v9;
  v25 = &off_10019D700;
  v23[0] = a2;
  v10 = type metadata accessor for ORReader();
  v11 = (_QWORD *)swift_allocObject(v10, 112, 7);
  v12 = sub_10001A64C((uint64_t)v26, v8);
  __chkstk_darwin(v12);
  v14 = (_QWORD *)((char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v15 + 16))(v14);
  v16 = sub_10001A64C((uint64_t)v23, v24);
  __chkstk_darwin(v16);
  v18 = (_QWORD *)((char *)v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v19 + 16))(v18);
  v20 = *v14;
  v21 = *v18;
  v11[5] = v8;
  v11[6] = &off_1001A11A8;
  v11[2] = v20;
  v11[10] = v9;
  v11[11] = &off_10019D700;
  v11[7] = v21;
  v11[12] = a4;
  v11[13] = a3;
  sub_100005D3C(v23);
  sub_100005D3C(v26);
  return v11;
}

void *sub_100037300(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  int v4;
  uint64_t v5;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD v17[5];
  _QWORD v18[5];

  v3 = String._bridgeToObjectiveC()();
  v4 = MGGetSInt32Answer(v3, 0xFFFFFFFFLL);

  if (v4 != 1)
  {
    v5 = sub_1000247D0(20903, 0, 0, 0);
    swift_willThrow(v5);
    goto LABEL_5;
  }
  sub_1000DDE7C();
  if (v1)
  {
LABEL_5:
    swift_release(a1);
    return v3;
  }
  sub_1000DE3AC();
  v7 = sub_1000DE8DC();
  v8 = objc_msgSend(objc_allocWithZone((Class)NSOperationQueue), "init");
  objc_msgSend(v8, "setMaxConcurrentOperationCount:", 1);
  objc_msgSend(v8, "setQualityOfService:", 33);
  v9 = sub_10001A64C((uint64_t)v18, v18[3]);
  __chkstk_darwin(v9);
  v11 = (_QWORD *)((char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v12 + 16))(v11);
  v13 = sub_10001A64C((uint64_t)v17, v17[3]);
  __chkstk_darwin(v13);
  v15 = (_QWORD *)((char *)v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  v3 = sub_100037198(*v11, *v15, v7, (uint64_t)v8);
  sub_100005D3C(v17);
  sub_100005D3C(v18);
  swift_release(a1);
  return v3;
}

uint64_t sub_100037538(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  v2 = result;
  v3 = *(unsigned __int8 *)(result + 32);
  result += 32;
  if (v3)
  {
    v4 = 0;
    v5 = v1 - 1;
    v6 = v2 + 33;
    while (v5 != v4)
    {
      if (!*(unsigned __int8 *)(v6 + v4++))
        return static String._fromUTF8Repairing(_:)(result, v4);
    }
    __break(1u);
    goto LABEL_9;
  }
  v4 = 0;
  return static String._fromUTF8Repairing(_:)(result, v4);
}

void sub_100037580()
{
  size_t v0;
  _TtC14softposreaderd12RemoteReader *v1;
  uint64_t v2;
  const char *v3;
  _TtC14softposreaderd12RemoteReader *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  const char *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;

  v26 = 0;
  sysctlbyname("hw.machine", 0, &v26, 0, 0);
  v0 = v26;
  if ((v26 & 0x8000000000000000) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
  }
  else
  {
    if (v26)
    {
      v1 = (_TtC14softposreaderd12RemoteReader *)static Array._allocateBufferUninitialized(minimumCapacity:)(v26, &type metadata for Int8);
      *(_QWORD *)&v1->instance[8] = v0;
      bzero(&v1->instance[24], v0);
    }
    else
    {
      v1 = &_swiftEmptyArrayStorage;
    }
    sysctlbyname("hw.machine", &v1->instance[24], &v26, 0, 0);
    v2 = sub_100037538((uint64_t)v1);
    v4 = (_TtC14softposreaderd12RemoteReader *)v3;
    swift_bridgeObjectRelease(v1, v3, v5, v6, v7, v8, v9, v10);
    if ((sub_10009B618(0x656E6F685069, 0xE600000000000000, v2, (uint64_t)v4) & 1) != 0)
    {
      swift_bridgeObjectRelease(v4, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      if (qword_1001ACEC0 != -1)
        swift_once(&qword_1001ACEC0, sub_100033A90);
      v18 = type metadata accessor for Logger(0);
      sub_100003A14(v18, (uint64_t)qword_1001AEAD0);
      v19 = swift_bridgeObjectRetain();
      v20 = Logger.logObject.getter(v19);
      v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc(12, -1);
        v23 = swift_slowAlloc(32, -1);
        v27 = v23;
        *(_DWORD *)v22 = 136315138;
        swift_bridgeObjectRetain();
        v25 = sub_1000056EC(v2, (unint64_t)v4, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v22 + 4, v22 + 12);
        swift_bridgeObjectRelease_n(v4, 3);
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Invalid platform: (%s)", v22, 0xCu);
        swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v23, -1, -1);
        swift_slowDealloc(v22, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v4, 2);
      }
      v24 = sub_1000247D0(20903, 0xD000000000000017, (void *)0x8000000100167200, 0);
      swift_willThrow(v24);
    }
  }
}

unint64_t sub_100037878()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001AE4B0;
  if (!qword_1001AE4B0)
  {
    type metadata accessor for ORError(255);
    result = swift_getWitnessTable(&unk_10015C458, v1);
    atomic_store(result, (unint64_t *)&qword_1001AE4B0);
  }
  return result;
}

uint64_t sub_1000378C0(void *a1)
{
  NSDecimal *v2;
  NSDecimal *v3;
  Swift::Int v4;
  NSDecimal *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;

  objc_msgSend(a1, "amount");
  if ((NSDecimal.isSignMinus.getter(v14, v15, v16) & 1) == 0)
  {
    objc_msgSend(a1, "amount");
    NSDecimal.init(integerLiteral:)(v2, 10);
    pow(_:_:)(v5, v3, v4);
    if ((static NSDecimal.< infix(_:_:)(v14, v15, v16, v6, v7, v8) & 1) != 0)
    {
      objc_msgSend(a1, "amount");
      if ((NSDecimal.exponent.getter(v14, v15, v16) & 0x8000000000000000) == 0)
      {
        v9 = objc_msgSend(a1, "unpredictableNumber");
        static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
        v11 = v10;

        __asm { BR              X10 }
      }
    }
  }
  v12 = sub_1000247D0(20000, 0xD00000000000003BLL, (void *)0x800000010016A370, 0);
  return swift_willThrow(v12);
}

void sub_100037A24()
{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;

  sub_100005DE0(v2, v1);
  if (!__OFSUB__(HIDWORD(v2), (_DWORD)v2))
  {
    if (HIDWORD(v2) - (_DWORD)v2 == *(_QWORD *)TLVTag.TAG_9F37_LENGTH.unsafeMutableAddressor())
    {
      v3 = objc_msgSend(v0, "transactionId");
      static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
      v5 = v4;

      __asm { BR              X10 }
    }
    JUMPOUT(0x100037ADCLL);
  }
  __break(1u);
  JUMPOUT(0x100037BE4);
}

void sub_100037A44()
{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  sub_100005DE0(v2, v1);
  if (__OFSUB__(v3, v4))
    __break(1u);
  if (v3 - v4 == *(_QWORD *)TLVTag.TAG_9F37_LENGTH.unsafeMutableAddressor())
  {
    v5 = objc_msgSend(v0, "transactionId");
    static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v7 = v6;

    __asm { BR              X10 }
  }
  JUMPOUT(0x100037ADCLL);
}

void sub_100037A60()
{
  unint64_t v0;
  uint64_t v1;

  sub_100005DE0(v1, v0);
  JUMPOUT(0x100037A70);
}

void sub_100037AC8()
{
  void *v0;
  unint64_t v1;
  uint64_t v2;

  sub_100005DE0(v2, v1);
  if (BYTE6(v1) != 16
    || ((unint64_t)objc_msgSend(v0, "currencyCode") & 0x8000000000000000) != 0
    || (uint64_t)objc_msgSend(v0, "currencyCode") > 999)
  {
    JUMPOUT(0x1000379E8);
  }
  if (((unint64_t)objc_msgSend(v0, "countryCode") & 0x8000000000000000) == 0
    && (uint64_t)objc_msgSend(v0, "countryCode") <= 999)
  {
    JUMPOUT(0x100037A08);
  }
  JUMPOUT(0x1000379F4);
}

void sub_100037AF4()
{
  void *v0;
  unint64_t v1;
  uint64_t v2;

  sub_100005DE0(v2, v1);
  if (!__OFSUB__(HIDWORD(v2), (_DWORD)v2))
  {
    if (HIDWORD(v2) - (_DWORD)v2 == 16)
    {
      if (((unint64_t)objc_msgSend(v0, "currencyCode") & 0x8000000000000000) == 0
        && (uint64_t)objc_msgSend(v0, "currencyCode") <= 999)
      {
        JUMPOUT(0x100037B98);
      }
      JUMPOUT(0x1000379E8);
    }
    JUMPOUT(0x100037B80);
  }
  __break(1u);
  JUMPOUT(0x100037BE8);
}

void sub_100037B14()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  sub_100005DE0(v1, v0);
  if (__OFSUB__(v2, v3))
  {
    __break(1u);
    JUMPOUT(0x100037BECLL);
  }
  JUMPOUT(0x100037B2CLL);
}

void sub_100037B74()
{
  unint64_t v0;
  uint64_t v1;

  sub_100005DE0(v1, v0);
  JUMPOUT(0x100037B80);
}

void sub_100037C0C()
{
  id v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _TtC14softposreaderd12RemoteReader *v13;
  SEL v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v29 = 0;
  v0 = objc_msgSend((id)objc_opt_self(NFHardwareManager), "sharedHardwareManager");
  if (!v0)
    __break(1u);
  v1 = v0;
  v2 = objc_msgSend(v0, "getRadioEnabledState:", &v29);

  if (v2)
  {
    if (qword_1001ACEC0 != -1)
      swift_once(&qword_1001ACEC0, sub_100033A90);
    v3 = type metadata accessor for Logger(0);
    sub_100003A14(v3, (uint64_t)qword_1001AEAD0);
    v4 = v2;
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      v30 = v8;
      *(_DWORD *)v7 = 136315138;
      v28 = (uint64_t)v4;
      v9 = v4;
      v10 = sub_100003A2C((uint64_t *)&unk_1001B1280);
      v11 = String.init<A>(describing:)(&v28, v10);
      v13 = (_TtC14softposreaderd12RemoteReader *)v12;
      v28 = sub_1000056EC(v11, v12, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v7 + 4, v7 + 12);

      swift_bridgeObjectRelease(v13, v14, v15, v16, v17, v18, v19, v20);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "getRadioEnabledState failed: %s", v7, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);

    }
    else
    {

    }
    v27 = sub_1000247D0(20904, 0xD00000000000001BLL, (void *)0x800000010016A210, 0);
    swift_willThrow(v27);

  }
  else if (v29 != 1)
  {
    if (qword_1001ACEC0 != -1)
      swift_once(&qword_1001ACEC0, sub_100033A90);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_100003A14(v21, (uint64_t)qword_1001AEAD0);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "NFRadioState .disabled", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    v26 = sub_1000247D0(20904, 0xD000000000000016, (void *)0x800000010016A1F0, 0);
    swift_willThrow(v26);
  }
}

uint64_t sub_100037F6C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100037F90(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_10003657C(a1, a2, *(void (**)(id, _QWORD))(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_100037F98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100037FA8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_100037FB0()
{
  sub_100038050();
}

uint64_t sub_100037FC4@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1000B67E8(*(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100037FE0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100038004()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void sub_100038040()
{
  uint64_t v0;

  sub_1000351F0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void (**)(_QWORD, void *))(v0 + 40));
}

void sub_100038050()
{
  uint64_t v0;

  sub_1000B5C74(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(double *)(v0 + 40));
}

uint64_t sub_1000380A0()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = sub_1000EDA74(&off_1001976B0);
  v1 = sub_100003A2C(&qword_1001AEBF8);
  result = swift_arrayDestroy(&unk_1001976D0, 13, v1);
  qword_1001B4AE0 = v0;
  return result;
}

uint64_t sub_1000380F4(uint64_t *a1)
{
  return _sSC19SPRMonitorErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(*a1);
}

uint64_t _sSC19SPRMonitorErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  Swift::String v6;
  _TtC14softposreaderd12RemoteReader *object;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  _QWORD v16[2];

  if (qword_1001ACED0 != -1)
    swift_once(&qword_1001ACED0, sub_1000380A0);
  v2 = qword_1001B4AE0;
  if (*(_QWORD *)(qword_1001B4AE0 + 16) && (v3 = sub_10013A38C(a1), (v4 & 1) != 0))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 16 * v3);
    swift_bridgeObjectRetain();
  }
  else
  {
    strcpy((char *)v16, "MonitorError#");
    HIWORD(v16[1]) = -4864;
    v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = (_TtC14softposreaderd12RemoteReader *)v6._object;
    String.append(_:)(v6);
    swift_bridgeObjectRelease(object, v8, v9, v10, v11, v12, v13, v14);
    return v16[0];
  }
  return v5;
}

unint64_t sub_1000381DC(uint64_t a1)
{
  unint64_t result;

  result = sub_100038200();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100038200()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001AD900;
  if (!qword_1001AD900)
  {
    type metadata accessor for MonitorError(255);
    result = swift_getWitnessTable(&unk_10015C568, v1);
    atomic_store(result, (unint64_t *)&qword_1001AD900);
  }
  return result;
}

NSObject *sub_100038248(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  const char *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  NSData v20;
  NSData v21;
  NSData v22;
  NSData v23;
  NSData v24;
  NSData v25;
  NSData v26;
  NSData v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  unint64_t v32;
  id v33;
  Class isa;
  uint64_t v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;

  v2 = v1;
  if (qword_1001ACED8 != -1)
    swift_once(&qword_1001ACED8, sub_100038594);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100003A14(v4, (uint64_t)qword_1001AEC00);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v37 = v9;
    *(_DWORD *)v8 = 136315138;
    v35 = sub_1000056EC(0xD00000000000001ALL, 0x800000010016A470, (uint64_t *)&v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v8 + 4, v8 + 12);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "ORProvisionResult %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  if (*(_QWORD *)(a1 + 16))
  {
    v6 = a1;
    v17 = sub_10000ADC4(0xD000000000000011, 0x8000000100169060);
    if ((v10 & 1) != 0)
    {
      sub_100005D5C(*(_QWORD *)(a1 + 56) + 32 * v17, (uint64_t)&v37);
      if ((swift_dynamicCast(&v35, &v37, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
      {
        v18 = v35;
        v19 = v36;
        v27.super.isa = Data._bridgeToObjectiveC()().super.isa;
        if (*(_QWORD *)(a1 + 16)
          && (v28 = sub_10000ADC4(0x7472654364736163, 0xEF65746163696669), ((uint64_t)v20.super.isa & 1) != 0))
        {
          sub_100005D5C(*(_QWORD *)(a1 + 56) + 32 * v28, (uint64_t)&v37);
        }
        else
        {
          v37 = 0u;
          v38 = 0u;
        }
        swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, (SEL)v20.super.isa, v21.super.isa, v22.super.isa, v23.super.isa, v24.super.isa, v25.super.isa, v26.super.isa);
        if (*((_QWORD *)&v38 + 1))
        {
          if (swift_dynamicCast(&v35, &v37, (char *)&type metadata for Any + 8, &type metadata for Data, 6))
          {
            v31 = v35;
            v32 = v36;
LABEL_19:
            v33 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
            isa = Data._bridgeToObjectiveC()().super.isa;
            sub_100005DE0(v31, v32);
            v6 = objc_msgSend(v33, "initWithProvisionDataBlob:casdCertificate:", v27.super.isa, isa);
            sub_100005DE0(v18, v19);

            return v6;
          }
        }
        else
        {
          sub_100007B30((uint64_t)&v37);
        }
        v31 = 0;
        v32 = 0xC000000000000000;
        goto LABEL_19;
      }
    }
  }
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, v10, v11, v12, v13, v14, v15, v16);
  v29 = sub_1000247D0(20008, 0xD00000000000002BLL, (void *)0x800000010016A440, 0);
  swift_willThrow(v29);
  return v6;
}

uint64_t sub_100038594()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001AEC00);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001AEC00);
  if (qword_1001AD190 != -1)
    swift_once(&qword_1001AD190, sub_1000CCB8C);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4EA0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100038624()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = sub_1000EDA4C(&off_100197270);
  v1 = sub_100003A2C(&qword_1001AEC18);
  result = swift_arrayDestroy(&unk_100197290, 17, v1);
  qword_1001B4AE8 = v0;
  return result;
}

uint64_t sub_100038678(uint64_t *a1)
{
  return _sSC11ORErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(*a1);
}

uint64_t _sSC11ORErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  Swift::String v6;
  _TtC14softposreaderd12RemoteReader *object;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;

  if (qword_1001ACEE0 != -1)
    swift_once(&qword_1001ACEE0, sub_100038624);
  v2 = qword_1001B4AE8;
  if (*(_QWORD *)(qword_1001B4AE8 + 16) && (v3 = sub_10013A38C(a1), (v4 & 1) != 0))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 16 * v3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = (_TtC14softposreaderd12RemoteReader *)v6._object;
    String.append(_:)(v6);
    swift_bridgeObjectRelease(object, v8, v9, v10, v11, v12, v13, v14);
    return 0x23726F727245524FLL;
  }
  return v5;
}

unint64_t sub_100038754(uint64_t a1)
{
  unint64_t result;

  result = sub_100037878();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100038778()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  SEL v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  _TtC14softposreaderd12RemoteReader *v12;
  Swift::String v13;
  _TtC14softposreaderd12RemoteReader *object;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  Swift::String v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _TtC14softposreaderd12RemoteReader *v35;
  _TtC14softposreaderd12RemoteReader *v36;
  uint64_t v37;
  _TtC14softposreaderd12RemoteReader *v38;
  _TtC14softposreaderd12RemoteReader *v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  uint64_t v48;
  _TtC14softposreaderd12RemoteReader *v49;

  v0 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v48 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = 0;
  v49 = (_TtC14softposreaderd12RemoteReader *)0xE000000000000000;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease(v49, v3, v4, v5, v6, v7, v8, v9);
  v48 = 0x3A73726564616568;
  v49 = (_TtC14softposreaderd12RemoteReader *)0xE900000000000020;
  v11 = URLRequest.allHTTPHeaderFields.getter(v10);
  if (!v11)
    v11 = sub_1000046DC((uint64_t)&_swiftEmptyArrayStorage);
  v12 = (_TtC14softposreaderd12RemoteReader *)v11;
  v13._countAndFlagsBits = Dictionary.description.getter(v11, &type metadata for String, &type metadata for String, &protocol witness table for String);
  object = (_TtC14softposreaderd12RemoteReader *)v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v12, v15, v16, v17, v18, v19, v20, v21);
  swift_bridgeObjectRelease(object, v22, v23, v24, v25, v26, v27, v28);
  v29._countAndFlagsBits = 0x203A79646F620ALL;
  v29._object = (void *)0xE700000000000000;
  String.append(_:)(v29);
  v30 = URLRequest.httpBody.getter();
  if (v31 >> 60 == 15)
    v32 = 0;
  else
    v32 = v30;
  if (v31 >> 60 == 15)
    v33 = 0xC000000000000000;
  else
    v33 = v31;
  static String.Encoding.utf8.getter(v30);
  v34 = String.init(data:encoding:)(v32, v33, v2);
  v36 = v35;
  sub_100005DE0(v32, v33);
  if (v36)
    v37 = v34;
  else
    v37 = 0x64696C61766E693CLL;
  if (v36)
    v38 = v36;
  else
    v38 = (_TtC14softposreaderd12RemoteReader *)0xEE003E79646F625FLL;
  v39 = v38;
  String.append(_:)(*(Swift::String *)&v37);
  swift_bridgeObjectRelease(v38, v40, v41, v42, v43, v44, v45, v46);
  return v48;
}

uint64_t sub_10003890C()
{
  Swift::Int v0;
  uint64_t result;

  v0 = sub_100144F68((uint64_t)&off_100196DE8);
  result = swift_arrayDestroy(&unk_100196E08, 2, &type metadata for String);
  qword_1001B4AF0 = v0;
  return result;
}

uint64_t sub_100038954()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001AEC20);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001AEC20);
  if (qword_1001AD160 != -1)
    swift_once(&qword_1001AD160, sub_1000CC600);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4E10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1000389E4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100038A20 + 4 * byte_10015E738[a1]))(0x65526C65636E6143, 0xEA00000000006461);
}

uint64_t sub_100038A20()
{
  return 0x54746E656D796150;
}

uint64_t sub_100038A84()
{
  return 0x6573616863727550;
}

uint64_t sub_100038AA4()
{
  return 0x7254646E75666552;
}

uint64_t sub_100038AC0()
{
  return 0x546E776F6E6B6E55;
}

uint64_t sub_100038ADC()
{
  return 0x64616552796150;
}

uint64_t sub_100038B04()
{
  return 0x526C696146736156;
}

unint64_t sub_100038B30()
{
  return 0xD000000000000012;
}

uint64_t sub_100038E14(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  _TtC14softposreaderd12RemoteReader *v4;
  _TtC14softposreaderd12RemoteReader *v5;
  uint64_t v6;
  const char *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _TtC14softposreaderd12RemoteReader *v15;
  char v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;

  v2 = *a2;
  v3 = sub_1000389E4(*a1);
  v5 = v4;
  v6 = sub_1000389E4(v2);
  if (v3 == v6 && v5 == (_TtC14softposreaderd12RemoteReader *)v7)
  {
    v16 = 1;
    v15 = v5;
  }
  else
  {
    v15 = (_TtC14softposreaderd12RemoteReader *)v7;
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5, v7, v8, v9, v10, v11, v12, v13);
  swift_bridgeObjectRelease(v15, v17, v18, v19, v20, v21, v22, v23);
  return v16 & 1;
}

Swift::Int sub_100038E9C()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  _TtC14softposreaderd12RemoteReader *v3;
  _TtC14softposreaderd12RemoteReader *v4;
  SEL v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  _QWORD v13[9];

  v1 = *v0;
  Hasher.init(_seed:)(v13);
  v2 = sub_1000389E4(v1);
  v4 = v3;
  String.hash(into:)(v13, v2, v3);
  swift_bridgeObjectRelease(v4, v5, v6, v7, v8, v9, v10, v11);
  return Hasher._finalize()();
}

void sub_100038EFC(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  _TtC14softposreaderd12RemoteReader *v4;
  _TtC14softposreaderd12RemoteReader *v5;
  SEL v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v3 = sub_1000389E4(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v5, v6, v7, v8, v9, v10, v11, v12);
}

Swift::Int sub_100038F3C()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  _TtC14softposreaderd12RemoteReader *v3;
  _TtC14softposreaderd12RemoteReader *v4;
  SEL v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  _QWORD v13[9];

  v1 = *v0;
  Hasher.init(_seed:)(v13);
  v2 = sub_1000389E4(v1);
  v4 = v3;
  String.hash(into:)(v13, v2, v3);
  swift_bridgeObjectRelease(v4, v5, v6, v7, v8, v9, v10, v11);
  return Hasher._finalize()();
}

uint64_t sub_100038F98@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100039BD8(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_100038FC4@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1000389E4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100038FEC(_QWORD *a1@<X8>)
{
  *a1 = &off_100198098;
}

void sub_100038FFC(char a1, uint64_t a2)
{
  uint64_t v4;
  Class isa;
  char isUniquelyReferenced_nonNull_native;
  SEL v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _DWORD *v18;

  v4 = swift_allocObject(&unk_10019AF20, 24, 7);
  *(_QWORD *)(v4 + 16) = a2;
  swift_bridgeObjectRetain();
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
  *(_QWORD *)(v4 + 16) = 0x8000000000000000;
  sub_1000EB9EC((uint64_t)isa, 0xD000000000000017, 0x800000010016A4F0, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v4 + 16) = a2;
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)0x8000000000000000, v7, v8, v9, v10, v11, v12, v13);
  if (qword_1001ACEF0 != -1)
    swift_once(&qword_1001ACEF0, sub_100038954);
  v14 = type metadata accessor for Logger(0);
  sub_100003A14(v14, (uint64_t)qword_1001AEC20);
  v15 = swift_retain_n(v4, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (_DWORD *)swift_slowAlloc(22, -1);
    swift_slowAlloc(64, -1);
    *v18 = 136315394;
    __asm { BR              X10 }
  }

  swift_release_n(v4, 2);
  __asm { BR              X10 }
}

void sub_10003964C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  NSObject *oslog;

  if (*(_BYTE *)(v1 + 17) == 1)
  {
    if (qword_1001ACFA0 != -1)
      swift_once(&qword_1001ACFA0, sub_100056A90);
    sub_100056274(a1, *(unsigned __int8 *)(v1 + 16));
  }
  else
  {
    if (qword_1001ACEF0 != -1)
      swift_once(&qword_1001ACEF0, sub_100038954);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_100003A14(v3, (uint64_t)qword_1001AEC20);
    oslog = Logger.logObject.getter(v4);
    v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v5, "CALogger.incrementEventCount - daily collection disabled", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

  }
}

void sub_10003977C(unsigned __int8 a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  NSObject *oslog;

  if (*(_BYTE *)(v3 + 17) == 1)
  {
    if (qword_1001ACFA0 != -1)
      swift_once(&qword_1001ACFA0, sub_100056A90);
    sub_1000567A0(a1, a2, a3, *(unsigned __int8 *)(v3 + 16));
  }
  else
  {
    if (qword_1001ACEF0 != -1)
      swift_once(&qword_1001ACEF0, sub_100038954);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_100003A14(v7, (uint64_t)qword_1001AEC20);
    oslog = Logger.logObject.getter(v8);
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v9, "CALogger.cumulateEvent - daily collection disabled", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

  }
}

uint64_t sub_1000398C8()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 18, 7);
}

uint64_t type metadata accessor for CALogger()
{
  return objc_opt_self(_TtC9SPREngine8CALogger);
}

uint64_t sub_1000398F8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003991C()
{
  uint64_t v0;

  sub_100039C28(v0);
  return swift_bridgeObjectRetain();
}

uint64_t sub_100039934(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100039944(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_10003994C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001AE470;
  if (!qword_1001AE470)
  {
    v1 = objc_opt_self(NSObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001AE470);
  }
  return result;
}

uint64_t sub_100039988(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  int v16;
  _QWORD v17[3];
  uint64_t v18;
  _UNKNOWN **v19;

  v18 = type metadata accessor for Environment(0);
  v19 = &off_10019CC18;
  v17[0] = a1;
  *(_BYTE *)(a3 + 16) = *(_BYTE *)(*sub_100005EF8(v17, v18)
                                 + OBJC_IVAR____TtC9SPREngine11Environment_isProductionEnvironment);
  *(_BYTE *)(a3 + 17) = *(_BYTE *)(a2 + *(int *)(type metadata accessor for Settings(0) + 64));
  if (qword_1001ACEF0 != -1)
    swift_once(&qword_1001ACEF0, sub_100038954);
  v6 = type metadata accessor for Logger(0);
  sub_100003A14(v6, (uint64_t)qword_1001AEC20);
  v7 = swift_retain(a3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 67109120;
    v16 = *(unsigned __int8 *)(a3 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, v17, v10 + 4, v10 + 8);
    swift_release(a3);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "isProductionAnalytics: %{BOOL}d", v10, 8u);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_release(a3);
  }
  v11 = swift_retain(a3);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v14 = 67109120;
    v16 = *(unsigned __int8 *)(a3 + 17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, v17, v14 + 4, v14 + 8);
    swift_release(a3);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "isDailyCollectionEnabled: %{BOOL}d", v14, 8u);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    swift_release(a3);
  }

  sub_100039F0C(a2);
  sub_100005D3C(v17);
  return a3;
}

uint64_t sub_100039BD8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_100197C70, a1, a2, &unk_1001AD368);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x2B)
    return 43;
  else
    return v3;
}

uint64_t sub_100039C28(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _BYTE v8[24];

  if (qword_1001ACEF0 != -1)
    swift_once(&qword_1001ACEF0, sub_100038954);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100003A14(v2, (uint64_t)qword_1001AEC20);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "post CA event", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  swift_beginAccess(a1 + 16, v8, 0, 0);
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_100039D18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD v19[5];
  _QWORD v20[5];

  v3 = type metadata accessor for Settings(0);
  __chkstk_darwin(v3);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000DEDE4();
  if (!v1)
  {
    sub_100039EC8(a1 + OBJC_IVAR____TtC9SPREngine5Depot_settings, (uint64_t)v5);
    v6 = sub_10001A64C((uint64_t)v20, v20[3]);
    __chkstk_darwin(v6);
    v8 = (_QWORD *)((char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v9 + 16))(v8);
    v10 = *v8;
    v11 = type metadata accessor for Environment(0);
    v19[3] = v11;
    v19[4] = &off_10019CC18;
    v19[0] = v10;
    v12 = type metadata accessor for CALogger();
    v13 = swift_allocObject(v12, 18, 7);
    v14 = sub_10001A64C((uint64_t)v19, v11);
    __chkstk_darwin(v14);
    v16 = (_QWORD *)((char *)v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v17 + 16))(v16);
    a1 = sub_100039988(*v16, (uint64_t)v5, v13);
    sub_100005D3C(v19);
    sub_100005D3C(v20);
  }
  return a1;
}

uint64_t sub_100039EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Settings(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100039F0C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Settings(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t getEnumTagSinglePayload for CADailyEvent(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xD6)
    goto LABEL_17;
  if (a2 + 42 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 42) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 42;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 42;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 42;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x2B;
  v8 = v6 - 43;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CADailyEvent(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 42 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 42) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xD6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xD5)
    return ((uint64_t (*)(void))((char *)&loc_10003A024 + 4 * byte_10015E780[v4]))();
  *a1 = a2 + 42;
  return ((uint64_t (*)(void))((char *)sub_10003A058 + 4 * byte_10015E77B[v4]))();
}

uint64_t sub_10003A058(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003A060(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003A068);
  return result;
}

uint64_t sub_10003A074(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003A07CLL);
  *(_BYTE *)result = a2 + 42;
  return result;
}

uint64_t sub_10003A080(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003A088(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CADailyEvent()
{
  return &type metadata for CADailyEvent;
}

unint64_t sub_10003A0A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001AED10;
  if (!qword_1001AED10)
  {
    v1 = sub_100003A6C(&qword_1001AED18);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001AED10);
  }
  return result;
}

unint64_t sub_10003A0F8()
{
  unint64_t result;

  result = qword_1001AED20;
  if (!qword_1001AED20)
  {
    result = swift_getWitnessTable(&unk_10015E8A4, &type metadata for CADailyEvent);
    atomic_store(result, (unint64_t *)&qword_1001AED20);
  }
  return result;
}

uint64_t sub_10003A13C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001AED28);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001AED28);
  if (qword_1001AD140 != -1)
    swift_once(&qword_1001AD140, sub_1000CC2E4);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4DB0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10003A1CC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  SEL v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _TtC14softposreaderd12RemoteReader *v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  void *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  os_log_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  _TtC14softposreaderd12RemoteReader *v72;
  uint64_t aBlock[5];
  _QWORD *v74;

  v9 = v8;
  v65 = a1;
  v66 = a7;
  v16 = type metadata accessor for DispatchWorkItemFlags(0);
  v71 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v70 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchQoS(0);
  v68 = *(_QWORD *)(v18 - 8);
  v69 = v18;
  __chkstk_darwin(v18);
  v67 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v20);
  v22 = (char *)&v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001ACEF8 != -1)
    swift_once(&qword_1001ACEF8, sub_10003A13C);
  v23 = type metadata accessor for Logger(0);
  sub_100003A14(v23, (uint64_t)qword_1001AED28);
  swift_bridgeObjectRetain();
  sub_100005D9C(a3, a4);
  swift_bridgeObjectRetain();
  v24 = sub_100005D9C(a3, a4);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.info.getter();
  v64 = v26;
  if (os_log_type_enabled(v25, v26))
  {
    v27 = swift_slowAlloc(22, -1);
    v63 = v16;
    v28 = v27;
    v61 = swift_slowAlloc(64, -1);
    aBlock[0] = v61;
    *(_DWORD *)v28 = 136315394;
    v62 = a8;
    v29 = String.redactedToken()();
    v60 = v25;
    v72 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(v29._countAndFlagsBits, (unint64_t)v29._object, aBlock);
    v65 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, aBlock, v28 + 4, v28 + 12);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v29._object, v30, v31, v32, v33, v34, v35, v36);
    *(_WORD *)(v28 + 12) = 2080;
    static String.Encoding.utf8.getter(v37);
    v38 = String.init(data:encoding:)(a3, a4, v22);
    if (v39)
    {
      v40 = v39;
    }
    else
    {
      v38 = 4271950;
      v40 = 0xE300000000000000;
    }
    v72 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(v38, v40, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, aBlock, v28 + 14, v28 + 22);
    v41 = (_TtC14softposreaderd12RemoteReader *)v40;
    a8 = v62;
    swift_bridgeObjectRelease(v41, v42, v43, v44, v45, v46, v47, v48);
    sub_100005DE0(a3, a4);
    sub_100005DE0(a3, a4);
    v25 = v60;
    _os_log_impl((void *)&_mh_execute_header, v60, (os_log_type_t)v64, "OfflineConfiguratorBackend.postOTA(token: %s, payload: %s, progressHandler: <block>, completion: <block>)", (uint8_t *)v28, 0x16u);
    v49 = v61;
    swift_arrayDestroy(v61, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1, -1);
    v50 = v28;
    v16 = v63;
    swift_slowDealloc(v50, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(a2, 2);
    sub_100005DE0(a3, a4);
    sub_100005DE0(a3, a4);
  }

  v51 = (_QWORD *)swift_allocObject(&unk_10019B098, 48, 7);
  v51[2] = a5;
  v51[3] = a6;
  v51[4] = v66;
  v51[5] = a8;
  aBlock[4] = (uint64_t)sub_10003AB44;
  v74 = v51;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000043B8;
  aBlock[3] = (uint64_t)&unk_10019B0B0;
  v52 = _Block_copy(aBlock);
  sub_10003AB68(a5, a6);
  v53 = swift_retain();
  v54 = v67;
  static DispatchQoS.unspecified.getter(v53);
  v72 = &_swiftEmptyArrayStorage;
  v55 = sub_100005F1C((unint64_t *)&qword_1001B1260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v56 = sub_100003A2C((uint64_t *)&unk_1001AE400);
  v57 = sub_100005F5C((unint64_t *)&qword_1001B1270, (uint64_t *)&unk_1001AE400);
  v58 = v70;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v72, v56, v57, v16, v55);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v54, v58, v52);
  _Block_release(v52);
  (*(void (**)(char *, uint64_t))(v71 + 8))(v58, v16);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v54, v69);
  return swift_release(v74);
}

uint64_t sub_10003A668(void (*a1)(uint64_t), uint64_t a2, uint64_t (*a3)(_BYTE *, _QWORD))
{
  __int128 v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _BYTE v20[176];

  if (a1)
  {
    a1(33);
    a1(66);
    a1(100);
  }
  v6 = xmmword_10015E900;
  v7 = 0x6C61626F6C67;
  v8 = 0xE600000000000000;
  v9 = xmmword_10015E900;
  v10 = 0x72656E74726170;
  v11 = 0xE700000000000000;
  v12 = xmmword_10015E900;
  v13 = 1;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0;
  BitString.init(data:unusedBits:)(&v6);
  sub_10003AB78((uint64_t)&v6, (uint64_t)v20);
  return a3(v20, 0);
}

uint64_t sub_10003A750()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for OfflineConfiguratorBackend()
{
  return objc_opt_self(_TtC9SPREngine26OfflineConfiguratorBackend);
}

uint64_t sub_10003A794()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  _QWORD *v23;

  v0 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v22 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS.QoSClass(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A610();
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchQoS.QoSClass.background(_:), v6);
  v14 = static OS_dispatch_queue.global(qos:)(v9);
  v15 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  static DispatchQoS.unspecified.getter(v15);
  v23 = _swiftEmptyArrayStorage;
  v16 = sub_100005F1C((unint64_t *)&qword_1001AE3E0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v17 = sub_100003A2C((uint64_t *)&unk_1001B1250);
  v18 = sub_100005F5C((unint64_t *)&qword_1001AE3F0, (uint64_t *)&unk_1001B1250);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v17, v18, v0, v16);
  v19 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001ALL, 0x800000010015E900, v5, v2, v13, v14);
  v20 = v22;
  *(_QWORD *)(v22 + 16) = v19;
  return v20;
}

unint64_t sub_10003A9CC()
{
  uint64_t v0;
  unint64_t result;
  uint64_t v2;

  result = sub_10003AA14();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_10003A9F4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_10003A1CC(a1, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t sub_10003AA14()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  if (qword_1001ACEF8 != -1)
    swift_once(&qword_1001ACEF8, sub_10003A13C);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001AED28);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "OfflineConfiguratorBackend.getCertificates()", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  return 0xD0000000000009E5;
}

uint64_t sub_10003AB10()
{
  _QWORD *v0;

  if (v0[2])
    swift_release(v0[3]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10003AB44()
{
  uint64_t v0;

  return sub_10003A668(*(void (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t (**)(_BYTE *, _QWORD))(v0 + 32));
}

uint64_t sub_10003AB50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10003AB60(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10003AB68(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_10003AB78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003A2C(&qword_1001AEE08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t (*sub_10003ABC0(uint64_t a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;

  v5 = swift_allocObject(&unk_10019B0F8, 24, 7);
  *(_QWORD *)(v5 + 16) = -1;
  v6 = (_QWORD *)swift_allocObject(&unk_10019B120, 48, 7);
  v6[2] = a2;
  v6[3] = v5;
  v6[4] = v2;
  v6[5] = a1;
  swift_unknownObjectRetain(v2);
  return sub_10003AD18;
}

uint64_t sub_10003AC48()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003AC58(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t result;
  uint64_t v10;
  _BYTE v11[24];

  v8 = (uint64_t *)(a2 + 16);
  result = swift_beginAccess(a2 + 16, v11, 0, 0);
  if (*(_QWORD *)(a2 + 16) < a1)
  {
    objc_msgSend(a3, "onUpdateWithEvent:progress:", a4, a1);
    result = swift_beginAccess(v8, &v10, 1, 0);
    *v8 = a1;
  }
  return result;
}

uint64_t sub_10003ACEC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10003AD18(uint64_t a1)
{
  uint64_t v1;

  return sub_10003AC58(a1, *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_10003AD24(const char *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  int v21;
  void (*v22)(char *, char *, uint64_t);
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  os_signpost_id_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;

  v34 = a5;
  v10 = type metadata accessor for OSSignpostID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v30 - v16;
  v18 = OSSignposter.logHandle.getter(v15);
  swift_unknownObjectRetain(a4);
  OSSignpostID.init(log:object:)(v18, a4);
  v19 = swift_bridgeObjectRetain_n(a6, 2);
  v20 = OSSignposter.logHandle.getter(v19);
  v21 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
    swift_bridgeObjectRelease_n(a6, 2);

    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v17, v10);
LABEL_11:
    v27 = type metadata accessor for OSSignpostIntervalState(0);
    swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
    v28 = OSSignpostIntervalState.init(id:isOpen:)(v14, 1);
    swift_release(v28);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v17, v10);
  }
  v33 = v21;
  if ((a3 & 1) != 0)
  {
    if ((unint64_t)a1 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (a1 >> 11 == 27)
      {
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }
      if (a1 >> 16 <= 0x10)
      {
        v31 = &v37;
        goto LABEL_10;
      }
    }
    __break(1u);
    goto LABEL_14;
  }
  if (a1)
  {
    v31 = a1;
LABEL_10:
    v22 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v22(v14, v17, v10);
    v32 = v11;
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    v36 = v24;
    *(_DWORD *)v23 = 136315138;
    swift_bridgeObjectRetain();
    v35 = sub_1000056EC(v34, a6, &v36);
    v11 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v23 + 4, v23 + 12);
    v25 = swift_bridgeObjectRelease_n(a6, 3);
    v26 = OSSignpostID.rawValue.getter(v25);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, (os_signpost_type_t)v33, v26, v31, "%s", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    v22(v14, v17, v10);
    goto LABEL_11;
  }
LABEL_15:
  result = swift_bridgeObjectRelease_n(a6, 2);
  __break(1u);
  return result;
}

uint64_t sub_10003AFE8(const char *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  const char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_BYTE *, uint64_t);
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  int v29;
  uint64_t result;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  os_signpost_id_t v40;
  _BYTE v41[4];
  int v42;
  void (*v43)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;

  v46 = a5;
  LODWORD(v47) = a3;
  v48 = (char *)a1;
  v8 = (const char *)type metadata accessor for OSSignpostError(0);
  v44 = *((_QWORD *)v8 - 1);
  v45 = v8;
  __chkstk_darwin(v8);
  v10 = &v41[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for OSSignpostID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = &v41[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = __chkstk_darwin(v13);
  v18 = &v41[-v17];
  v19 = __chkstk_darwin(v16);
  v21 = &v41[-v20];
  v22 = OSSignposter.logHandle.getter(v19);
  swift_unknownObjectRetain(a4);
  OSSignpostID.init(log:object:)(v22, a4);
  v43 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 16);
  v43(v18, v21, v11);
  v23 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  v24 = OSSignpostIntervalState.init(id:isOpen:)(v18, 1);
  v25 = *(void (**)(_BYTE *, uint64_t))(v12 + 8);
  v25(v21, v11);
  v26 = swift_bridgeObjectRetain_n(a6, 2);
  v27 = OSSignposter.logHandle.getter(v26);
  v28 = OSSignpostIntervalState.signpostID.getter();
  v29 = static os_signpost_type_t.end.getter(v28);
  result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0)
    goto LABEL_5;
  v42 = v29;
  if ((v47 & 1) == 0)
  {
    if (!v48)
    {
      swift_bridgeObjectRelease_n(a6, 2);
      __break(1u);
LABEL_5:

      swift_bridgeObjectRelease_n(a6, 2);
      v25(v15, v11);
      return swift_release(v24);
    }
    goto LABEL_10;
  }
  if ((unint64_t)v48 >> 32)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v48 >> 11 == 27)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  if (v48 >> 16 > 0x10)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v48 = &v51;
LABEL_10:
  v47 = a6;
  v31 = swift_retain();
  checkForErrorAndConsumeState(state:)(v31);
  swift_release(v24);
  v33 = v44;
  v32 = v45;
  if ((*(unsigned int (**)(_BYTE *, const char *))(v44 + 88))(v10, v45) == enum case for OSSignpostError.doubleEnd(_:))
  {
    v34 = 0;
    v35 = 0;
    v45 = "[Error] Interval already ended";
  }
  else
  {
    (*(void (**)(_BYTE *, const char *))(v33 + 8))(v10, v32);
    v45 = "%s";
    v35 = 2;
    v34 = 1;
  }
  v43(v21, v15, v11);
  v36 = swift_slowAlloc(12, -1);
  v37 = swift_slowAlloc(32, -1);
  v50 = v37;
  *(_BYTE *)v36 = v35;
  *(_BYTE *)(v36 + 1) = v34;
  *(_WORD *)(v36 + 2) = 2080;
  v38 = v47;
  swift_bridgeObjectRetain();
  v49 = sub_1000056EC(v46, v38, &v50);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v36 + 4, v36 + 12);
  v39 = swift_bridgeObjectRelease_n(v38, 3);
  v40 = OSSignpostID.rawValue.getter(v39);
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v27, (os_signpost_type_t)v42, v40, v48, v45, (uint8_t *)v36, 0xCu);
  swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v37, -1, -1);
  swift_slowDealloc(v36, -1, -1);

  v25(v15, v11);
  swift_release(v24);
  return ((uint64_t (*)(_BYTE *, uint64_t))v25)(v21, v11);
}

uint64_t sub_10003B3B4(const char *a1, uint64_t a2, int a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, int a8, unint64_t a9, unint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  void (*v28)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  int v36;
  uint64_t result;
  const char *v38;
  void (*v39)(_BYTE *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  os_signpost_id_t v49;
  unint64_t v50;
  uint64_t v51;
  NSObject *v52;
  int v53;
  _BYTE *v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  os_signpost_id_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE v64[4];
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  const char *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  _BYTE *v77;
  unint64_t v78;
  void (*v79)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  char v82;
  char v83;

  v12 = v11;
  v70 = a3;
  LODWORD(v71) = a8;
  v72 = a6;
  v78 = a5;
  v67 = a4;
  v75 = (char *)a1;
  v13 = type metadata accessor for OSSignpostError(0);
  v68 = *(_QWORD *)(v13 - 8);
  v69 = v13;
  __chkstk_darwin(v13);
  v15 = &v64[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = type metadata accessor for OSSignpostID(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = &v64[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = __chkstk_darwin(v18);
  v23 = &v64[-v22];
  v24 = __chkstk_darwin(v21);
  v26 = &v64[-v25];
  v27 = OSSignposter.logHandle.getter(v24);
  swift_unknownObjectRetain(a11);
  OSSignpostID.init(log:object:)(v27, a11);
  v28 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v17 + 16);
  v77 = v26;
  v79 = v28;
  v28(v23, v26, v16);
  v29 = type metadata accessor for OSSignpostIntervalState(0);
  v30 = *(unsigned int *)(v29 + 48);
  v31 = *(unsigned __int16 *)(v29 + 52);
  v73 = v29;
  swift_allocObject(v29, v30, v31);
  v32 = OSSignpostIntervalState.init(id:isOpen:)(v23, 1);
  v33 = swift_bridgeObjectRetain_n(a10, 2);
  v74 = v12;
  v34 = OSSignposter.logHandle.getter(v33);
  v76 = v32;
  v35 = OSSignpostIntervalState.signpostID.getter();
  v36 = static os_signpost_type_t.end.getter(v35);
  result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0)
    goto LABEL_5;
  v66 = v17;
  v65 = v36;
  if ((v71 & 1) != 0)
  {
    if (HIDWORD(v72))
    {
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    if (v72 >> 11 == 27)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    if (WORD1(v72) > 0x10u)
      goto LABEL_27;
    v38 = &v82;
  }
  else
  {
    v38 = (const char *)v72;
    if (!v72)
    {
      swift_bridgeObjectRelease_n(a10, 2);
      __break(1u);
LABEL_5:

      swift_bridgeObjectRelease_n(a10, 2);
      v39 = *(void (**)(_BYTE *, uint64_t))(v17 + 8);
      v39(v20, v16);
      goto LABEL_14;
    }
  }
  v72 = a9;
  v40 = v76;
  v41 = swift_retain();
  checkForErrorAndConsumeState(state:)(v41);
  swift_release(v40);
  v43 = v68;
  v42 = v69;
  if ((*(unsigned int (**)(_BYTE *, uint64_t))(v68 + 88))(v15, v69) == enum case for OSSignpostError.doubleEnd(_:))
  {
    v44 = 0;
    v45 = 0;
    v71 = "[Error] Interval already ended";
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v43 + 8))(v15, v42);
    v71 = "%s";
    v45 = 2;
    v44 = 1;
  }
  v79(v23, v20, v16);
  v46 = swift_slowAlloc(12, -1);
  v47 = swift_slowAlloc(32, -1);
  v81 = v47;
  *(_BYTE *)v46 = v45;
  *(_BYTE *)(v46 + 1) = v44;
  *(_WORD *)(v46 + 2) = 2080;
  swift_bridgeObjectRetain();
  v80 = sub_1000056EC(v72, a10, &v81);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v46 + 4, v46 + 12);
  v48 = swift_bridgeObjectRelease_n(a10, 3);
  v49 = OSSignpostID.rawValue.getter(v48);
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v34, (os_signpost_type_t)v65, v49, v38, v71, (uint8_t *)v46, 0xCu);
  swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v47, -1, -1);
  swift_slowDealloc(v46, -1, -1);

  v39 = *(void (**)(_BYTE *, uint64_t))(v66 + 8);
  v39(v20, v16);
  v39(v23, v16);
LABEL_14:
  v50 = v78;
  v51 = swift_bridgeObjectRetain_n(v78, 2);
  v52 = OSSignposter.logHandle.getter(v51);
  v53 = static os_signpost_type_t.begin.getter();
  result = OS_os_log.signpostsEnabled.getter();
  v54 = v77;
  if ((result & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease_n(v50, 2);

LABEL_24:
    v62 = v73;
    v79(v23, v54, v16);
    swift_allocObject(v62, *(unsigned int *)(v62 + 48), *(unsigned __int16 *)(v62 + 52));
    v63 = OSSignpostIntervalState.init(id:isOpen:)(v23, 1);
    swift_release(v76);
    swift_release(v63);
    return ((uint64_t (*)(_BYTE *, uint64_t))v39)(v54, v16);
  }
  LODWORD(v74) = v53;
  if ((v70 & 1) == 0)
  {
    if (!v75)
    {
      swift_bridgeObjectRelease_n(v78, 2);
      __break(1u);
      goto LABEL_18;
    }
LABEL_23:
    v79(v23, v77, v16);
    v55 = (uint8_t *)swift_slowAlloc(12, -1);
    v56 = swift_slowAlloc(32, -1);
    v81 = v56;
    *(_DWORD *)v55 = 136315138;
    v57 = v16;
    v54 = v77;
    v58 = v78;
    swift_bridgeObjectRetain();
    v80 = sub_1000056EC(v67, v58, &v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v55 + 4, v55 + 12);
    v59 = v58;
    v16 = v57;
    v60 = swift_bridgeObjectRelease_n(v59, 3);
    v61 = OSSignpostID.rawValue.getter(v60);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v52, (os_signpost_type_t)v74, v61, v75, "%s", v55, 0xCu);
    swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1, -1);
    swift_slowDealloc(v55, -1, -1);

    v39(v23, v57);
    goto LABEL_24;
  }
  if ((unint64_t)v75 >> 32)
    goto LABEL_26;
  if (v75 >> 11 != 27)
  {
    if (v75 >> 16 <= 0x10)
    {
      v75 = &v83;
      goto LABEL_23;
    }
    goto LABEL_28;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_10003B998(uint64_t a1)
{
  return sub_10003BA4C(a1, qword_1001B4AF8, &qword_1001AD138, (uint64_t)qword_1001B4D98, (uint64_t)sub_1000CC224);
}

uint64_t sub_10003B9BC(uint64_t a1)
{
  return sub_10003BA4C(a1, qword_1001B4B10, &qword_1001AD140, (uint64_t)qword_1001B4DB0, (uint64_t)sub_1000CC2E4);
}

uint64_t sub_10003B9E0(uint64_t a1)
{
  return sub_10003BA4C(a1, qword_1001B4B28, &qword_1001AD170, (uint64_t)qword_1001B4E40, (uint64_t)sub_1000CC794);
}

uint64_t sub_10003BA04(uint64_t a1)
{
  return sub_10003BA4C(a1, qword_1001B4B40, &qword_1001AD150, (uint64_t)qword_1001B4DE0, (uint64_t)sub_1000CC47C);
}

uint64_t sub_10003BA28(uint64_t a1)
{
  return sub_10003BA4C(a1, qword_1001B4B58, &qword_1001AD190, (uint64_t)qword_1001B4EA0, (uint64_t)sub_1000CCB8C);
}

uint64_t sub_10003BA4C(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OSSignposter(0);
  sub_1000039D4(v13, a2);
  sub_100003A14(v13, (uint64_t)a2);
  if (*a3 != -1)
    swift_once(a3, a5);
  v14 = sub_100003A14(v9, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v14, v9);
  return OSSignposter.init(logger:)(v12);
}

uint64_t sub_10003BB34(_TtC14softposreaderd12RemoteReader *a1, uint64_t a2, unint64_t a3, const char *a4, uint64_t a5, int a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  os_signpost_type_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  os_signpost_id_t v48;
  const char *v49;
  uint64_t v50;
  _BYTE *v51;
  __int128 v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  const char *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  const char *v62;
  char v63;
  uint64_t v64;
  NSObject *v65;
  os_signpost_type_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  os_signpost_id_t v70;
  uint64_t v71;
  uint64_t result;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _TtC14softposreaderd12RemoteReader *v79;
  char *v80;
  __int128 v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, char *, uint64_t);
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;

  v10 = v9;
  v75 = a7;
  LODWORD(v80) = a6;
  v83 = (char *)a4;
  v84 = a3;
  v82 = a2;
  v79 = a1;
  v12 = type metadata accessor for OSSignpostError(0);
  v76 = *(_QWORD *)(v12 - 8);
  v77 = v12;
  __chkstk_darwin(v12);
  *(_QWORD *)&v81 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for OSSignpostID(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v73 - v20;
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v73 - v23;
  v25 = OSSignposter.logHandle.getter(v22);
  swift_unknownObjectRetain(a9);
  OSSignpostID.init(log:object:)(v25, a9);
  v26 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v89 = v24;
  v90 = v14;
  v27 = v24;
  v28 = a8;
  v87 = v26;
  v26(v21, v27, v14);
  v29 = type metadata accessor for OSSignpostIntervalState(0);
  v30 = *(unsigned int *)(v29 + 48);
  v31 = *(unsigned __int16 *)(v29 + 52);
  v85 = v29;
  swift_allocObject(v29, v30, v31);
  v32 = OSSignpostIntervalState.init(id:isOpen:)(v21, 1);
  v33 = swift_bridgeObjectRetain_n(a8, 2);
  v86 = v10;
  v34 = OSSignposter.logHandle.getter(v33);
  v35 = OSSignpostIntervalState.signpostID.getter();
  v36 = static os_signpost_type_t.end.getter(v35);
  v37 = OS_os_log.signpostsEnabled.getter();
  v88 = v21;
  v78 = v32;
  if ((v37 & 1) != 0)
  {
    v74 = v15;
    if ((v80 & 1) != 0)
    {
      v38 = v81;
      if ((unint64_t)v83 >> 32)
        goto LABEL_32;
      if (v83 >> 11 == 27)
        goto LABEL_34;
      v40 = v76;
      v39 = v77;
      if (v83 >> 16 > 0x10)
        goto LABEL_33;
      v83 = &v94;
    }
    else
    {
      v38 = v81;
      if (!v83)
        goto LABEL_36;
      v40 = v76;
      v39 = v77;
    }
    v41 = swift_retain();
    checkForErrorAndConsumeState(state:)(v41);
    swift_release(v32);
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v40 + 88))(v38, v39) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v42 = 0;
      v43 = 0;
      *(_QWORD *)&v81 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v38, v39);
      *(_QWORD *)&v81 = "%s";
      v43 = 2;
      v42 = 1;
    }
    v44 = v90;
    v87(v21, v18, v90);
    v45 = swift_slowAlloc(12, -1);
    v46 = swift_slowAlloc(32, -1);
    v92 = v46;
    *(_BYTE *)v45 = v43;
    *(_BYTE *)(v45 + 1) = v42;
    *(_WORD *)(v45 + 2) = 2080;
    swift_bridgeObjectRetain();
    v91 = sub_1000056EC(v75, v28, &v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92, v45 + 4, v45 + 12);
    v47 = swift_bridgeObjectRelease_n(v28, 3);
    v48 = OSSignpostID.rawValue.getter(v47);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v34, v36, v48, v83, (const char *)v81, (uint8_t *)v45, 0xCu);
    swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1, -1);
    v21 = v88;
    swift_slowDealloc(v45, -1, -1);

    v49 = *(const char **)(v74 + 8);
    ((void (*)(char *, uint64_t))v49)(v18, v44);
    v83 = (char *)v49;
    ((void (*)(char *, uint64_t))v49)(v21, v44);
  }
  else
  {

    swift_bridgeObjectRelease_n(a8, 2);
    v83 = *(char **)(v15 + 8);
    ((void (*)(char *, uint64_t))v83)(v18, v90);
  }
  v50 = *(_QWORD *)&v79->instance[8];
  v28 = v84;
  if (!v50)
  {
LABEL_28:
    swift_release(v78);
    return ((uint64_t (*)(char *, uint64_t))v83)(v89, v90);
  }
  v51 = (_BYTE *)(swift_bridgeObjectRetain() + 48);
  *(_QWORD *)&v52 = 136315138;
  v81 = v52;
  v80 = (char *)&type metadata for Any + 8;
  while (1)
  {
    v62 = (const char *)*((_QWORD *)v51 - 2);
    v63 = *v51;
    v64 = swift_bridgeObjectRetain_n(v28, 2);
    v65 = OSSignposter.logHandle.getter(v64);
    v66 = static os_signpost_type_t.begin.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      break;
    swift_bridgeObjectRelease_n(v28, 2);

    v53 = v87;
LABEL_17:
    v51 += 24;
    v53(v21, v89, v90);
    swift_allocObject(v85, *(unsigned int *)(v85 + 48), *(unsigned __int16 *)(v85 + 52));
    v54 = OSSignpostIntervalState.init(id:isOpen:)(v21, 1);
    swift_release(v54);
    if (!--v50)
    {
      swift_bridgeObjectRelease(v79, v55, v56, v57, v58, v59, v60, v61);
      goto LABEL_28;
    }
  }
  if ((v63 & 1) == 0)
  {
    if (!v62)
      goto LABEL_35;
LABEL_26:
    v53 = v87;
    v87(v21, v89, v90);
    v67 = swift_slowAlloc(12, -1);
    v68 = swift_slowAlloc(32, -1);
    v92 = v68;
    *(_DWORD *)v67 = v81;
    v28 = v84;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v67 + 4) = sub_1000056EC(v82, v28, &v92);
    v69 = swift_bridgeObjectRelease_n(v28, 3);
    v70 = OSSignpostID.rawValue.getter(v69);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v65, v66, v70, v62, "%s", (uint8_t *)v67, 0xCu);
    swift_arrayDestroy(v68, 1, v80);
    v71 = v68;
    v21 = v88;
    swift_slowDealloc(v71, -1, -1);
    swift_slowDealloc(v67, -1, -1);

    ((void (*)(char *, uint64_t))v83)(v21, v90);
    goto LABEL_17;
  }
  if (!((unint64_t)v62 >> 32))
  {
    if (v62 >> 11 == 27)
      goto LABEL_31;
    if (v62 > 0x10FFFF)
      goto LABEL_30;
    v62 = &v93;
    goto LABEL_26;
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  swift_bridgeObjectRelease_n(v84, 2);
  __break(1u);
LABEL_36:
  result = swift_bridgeObjectRelease_n(v28, 2);
  __break(1u);
  return result;
}

uint64_t sub_10003C138(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10003C178 + 4 * byte_10015E980[a1]))(0x4C536C656E72654BLL, 0xEE00657A69534D41);
}

uint64_t sub_10003C178()
{
  return 0x53656C69666F7250;
}

unint64_t sub_10003C19C()
{
  return 0xD000000000000014;
}

uint64_t sub_10003C310()
{
  return 0x654E6C656E72654BLL;
}

unint64_t sub_10003C330()
{
  return 0xD000000000000012;
}

uint64_t sub_10003C37C()
{
  return 0x5374736575716552;
}

uint64_t sub_10003C3A0()
{
  return 0x726F727245464153;
}

uint64_t sub_10003C3C0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10003C400 + 4 * byte_10015E995[a1]))(0x637465464D414C53, 0xED0000656D695468);
}

unint64_t sub_10003C400()
{
  return 0xD000000000000012;
}

unint64_t sub_10003C450()
{
  return 0xD000000000000011;
}

uint64_t sub_10003C46C()
{
  return 0x5474736575716552;
}

uint64_t sub_10003C4BC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  _TtC14softposreaderd12RemoteReader *v4;
  _TtC14softposreaderd12RemoteReader *v5;
  uint64_t v6;
  const char *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _TtC14softposreaderd12RemoteReader *v15;
  char v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;

  v2 = *a2;
  v3 = sub_10003C138(*a1);
  v5 = v4;
  v6 = sub_10003C138(v2);
  if (v3 == v6 && v5 == (_TtC14softposreaderd12RemoteReader *)v7)
  {
    v16 = 1;
    v15 = v5;
  }
  else
  {
    v15 = (_TtC14softposreaderd12RemoteReader *)v7;
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5, v7, v8, v9, v10, v11, v12, v13);
  swift_bridgeObjectRelease(v15, v17, v18, v19, v20, v21, v22, v23);
  return v16 & 1;
}

Swift::Int sub_10003C544()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  _TtC14softposreaderd12RemoteReader *v3;
  _TtC14softposreaderd12RemoteReader *v4;
  SEL v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  _QWORD v13[9];

  v1 = *v0;
  Hasher.init(_seed:)(v13);
  v2 = sub_10003C138(v1);
  v4 = v3;
  String.hash(into:)(v13, v2, v3);
  swift_bridgeObjectRelease(v4, v5, v6, v7, v8, v9, v10, v11);
  return Hasher._finalize()();
}

void sub_10003C5A4(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  _TtC14softposreaderd12RemoteReader *v4;
  _TtC14softposreaderd12RemoteReader *v5;
  SEL v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v3 = sub_10003C138(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v5, v6, v7, v8, v9, v10, v11, v12);
}

Swift::Int sub_10003C5E4()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  _TtC14softposreaderd12RemoteReader *v3;
  _TtC14softposreaderd12RemoteReader *v4;
  SEL v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  _QWORD v13[9];

  v1 = *v0;
  Hasher.init(_seed:)(v13);
  v2 = sub_10003C138(v1);
  v4 = v3;
  String.hash(into:)(v13, v2, v3);
  swift_bridgeObjectRelease(v4, v5, v6, v7, v8, v9, v10, v11);
  return Hasher._finalize()();
}

uint64_t sub_10003C640@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10003CB28(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_10003C66C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10003C138(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_10003C694(char *a1)
{
  sub_10003D184(*a1);
}

void sub_10003C6A0()
{
  char *v0;

  sub_10003DC14(0, *v0);
}

void sub_10003C6AC(uint64_t a1)
{
  char *v1;

  sub_10003DA20(a1, *v1);
}

void sub_10003C6B4(uint64_t a1)
{
  char *v1;

  sub_10003DC14(a1, *v1);
}

unint64_t sub_10003C6BC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10003CB78(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10003C6E8@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10003C3C0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_10003C710@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10003CF14(*a1);
  *a2 = result;
  return result;
}

void sub_10003C738(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t sub_10003C744()
{
  uint64_t v0;

  sub_100005D3C((_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for ConfiguratorAnalytics(uint64_t a1)
{
  uint64_t result;

  result = qword_1001AEE38;
  if (!qword_1001AEE38)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ConfiguratorAnalytics);
  return result;
}

uint64_t sub_10003C7AC(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 256, 0, v2, a1 + 264);
}

uint64_t getEnumTagSinglePayload for ConfiguratorAnalytics.PerformanceField(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfiguratorAnalytics.PerformanceField(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_10003C8BC + 4 * byte_10015E9A2[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_10003C8F0 + 4 * byte_10015E99D[v4]))();
}

uint64_t sub_10003C8F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003C8F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003C900);
  return result;
}

uint64_t sub_10003C90C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003C914);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_10003C918(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003C920(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConfiguratorAnalytics.PerformanceField()
{
  return &type metadata for ConfiguratorAnalytics.PerformanceField;
}

uint64_t getEnumTagSinglePayload for ConfiguratorAnalytics.AnalyticsField(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEC)
    goto LABEL_17;
  if (a2 + 20 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 20) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 20;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 20;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 20;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x15;
  v8 = v6 - 21;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfiguratorAnalytics.AnalyticsField(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 20 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 20) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEB)
    return ((uint64_t (*)(void))((char *)&loc_10003CA18 + 4 * byte_10015E9AC[v4]))();
  *a1 = a2 + 20;
  return ((uint64_t (*)(void))((char *)sub_10003CA4C + 4 * byte_10015E9A7[v4]))();
}

uint64_t sub_10003CA4C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003CA54(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003CA5CLL);
  return result;
}

uint64_t sub_10003CA68(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003CA70);
  *(_BYTE *)result = a2 + 20;
  return result;
}

uint64_t sub_10003CA74(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003CA7C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConfiguratorAnalytics.AnalyticsField()
{
  return &type metadata for ConfiguratorAnalytics.AnalyticsField;
}

unint64_t sub_10003CA9C()
{
  unint64_t result;

  result = qword_1001AEF70;
  if (!qword_1001AEF70)
  {
    result = swift_getWitnessTable(&unk_10015EA78, &type metadata for ConfiguratorAnalytics.AnalyticsField);
    atomic_store(result, (unint64_t *)&qword_1001AEF70);
  }
  return result;
}

unint64_t sub_10003CAE4()
{
  unint64_t result;

  result = qword_1001AEF78;
  if (!qword_1001AEF78)
  {
    result = swift_getWitnessTable(&unk_10015EB18, &type metadata for ConfiguratorAnalytics.PerformanceField);
    atomic_store(result, (unint64_t *)&qword_1001AEF78);
  }
  return result;
}

uint64_t sub_10003CB28(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_1001980E8, a1, a2, &unk_1001AD378);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x15)
    return 21;
  else
    return v3;
}

unint64_t sub_10003CB78(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100198300, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 8)
    return 8;
  else
    return v3;
}

uint64_t sub_10003CBC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v21[5];
  _QWORD v22[5];
  _QWORD v23[5];

  sub_1000DD94C();
  if (!v1)
  {
    v3 = sub_10001A64C((uint64_t)v23, v23[3]);
    __chkstk_darwin(v3);
    v5 = (_QWORD *)((char *)&v21[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v6 + 16))(v5);
    v7 = *v5;
    v8 = type metadata accessor for CALogger();
    v22[3] = v8;
    v22[4] = &off_10019AEF0;
    v22[0] = v7;
    v9 = type metadata accessor for ConfiguratorAnalytics(0);
    a1 = swift_allocObject(v9, 64, 7);
    v10 = sub_10001A64C((uint64_t)v22, v8);
    __chkstk_darwin(v10);
    v12 = (_QWORD *)((char *)&v21[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v13 + 16))(v12);
    v14 = *v12;
    v21[3] = v8;
    v21[4] = &off_10019AEF0;
    v21[0] = v14;
    sub_100008390((uint64_t)v21, a1 + 16);
    v15 = sub_1000E8880((uint64_t)_swiftEmptyArrayStorage);
    v16 = sub_1000E8998((uint64_t)_swiftEmptyArrayStorage);
    v17 = sub_100003A2C(&qword_1001AEF98);
    v18 = swift_allocObject(v17, 36, 7);
    *(_DWORD *)(v18 + 32) = 0;
    *(_QWORD *)(v18 + 16) = v15;
    *(_QWORD *)(v18 + 24) = v16;
    *(_QWORD *)(a1 + 56) = v18;
    sub_100005D3C(v21);
    sub_100005D3C(v22);
    sub_100005D3C(v23);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfiguratorAnalytics.LoadStatus(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfiguratorAnalytics.LoadStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10003CE4C + 4 * byte_10015E9B6[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10003CE80 + 4 * byte_10015E9B1[v4]))();
}

uint64_t sub_10003CE80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003CE88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003CE90);
  return result;
}

uint64_t sub_10003CE9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003CEA4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10003CEA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003CEB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConfiguratorAnalytics.LoadStatus()
{
  return &type metadata for ConfiguratorAnalytics.LoadStatus;
}

unint64_t sub_10003CED0()
{
  unint64_t result;

  result = qword_1001AEFA0;
  if (!qword_1001AEFA0)
  {
    result = swift_getWitnessTable(&unk_10015EBD4, &type metadata for ConfiguratorAnalytics.LoadStatus);
    atomic_store(result, (unint64_t *)&qword_1001AEFA0);
  }
  return result;
}

unint64_t sub_10003CF14(unint64_t result)
{
  if (result >= 5)
    return 5;
  return result;
}

uint64_t sub_10003CF24()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = sub_1000EDA10(&off_100196948);
  v1 = sub_100003A2C(&qword_1001AEFA8);
  result = swift_arrayDestroy(&unk_100196968, 48, v1);
  qword_1001B4B70 = v0;
  return result;
}

uint64_t sub_10003CF78(uint64_t *a1)
{
  return _sSC16SPRReadErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(*a1);
}

uint64_t _sSC16SPRReadErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  Swift::String v6;
  _TtC14softposreaderd12RemoteReader *object;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;

  if (qword_1001ACF28 != -1)
    swift_once(&qword_1001ACF28, sub_10003CF24);
  v2 = qword_1001B4B70;
  if (*(_QWORD *)(qword_1001B4B70 + 16) && (v3 = sub_10013A38C(a1), (v4 & 1) != 0))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 16 * v3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = (_TtC14softposreaderd12RemoteReader *)v6._object;
    String.append(_:)(v6);
    swift_bridgeObjectRelease(object, v8, v9, v10, v11, v12, v13, v14);
    return 0x6F72724564616552;
  }
  return v5;
}

unint64_t sub_10003D058(uint64_t a1)
{
  unint64_t result;

  result = sub_10001E588();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10003D07C(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((a2 & 1) != 0)
    __asm { BR              X9 }
  type metadata accessor for ReadError(0);
  v4 = v3;
  v11 = 4049;
  v5 = sub_100003A2C(&qword_1001AE038);
  inited = swift_initStackObject(v5, &v10);
  *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
  *(_QWORD *)(inited + 32) = 0xD000000000000011;
  *(_QWORD *)(inited + 40) = 0x800000010016B110;
  *(_QWORD *)(inited + 72) = &type metadata for Double;
  *(_QWORD *)(inited + 48) = a1;
  v7 = sub_1000047FC(inited);
  v8 = sub_10001E588();
  _BridgedStoredNSError.init(_:userInfo:)(&v12, &v11, v7, v4, v8);
  return v12;
}

uint64_t sub_10003D144()
{
  return sub_100024764(4053, 0, 0, 0);
}

void sub_10003D164()
{
  JUMPOUT(0x10003D148);
}

void sub_10003D16C()
{
  JUMPOUT(0x10003D148);
}

void sub_10003D174()
{
  JUMPOUT(0x10003D148);
}

void sub_10003D17C()
{
  JUMPOUT(0x10003D148);
}

void sub_10003D184(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10003D1F0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10003D2C4 + 4 * byte_10015EC38[a2]))(0xD000000000000012);
}

uint64_t sub_10003D2C4(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  char v3;

  v2 = 0x8000000100167E40;
  if (a1 == 0xD000000000000012 && v1 == 0x8000000100167E40)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0xD000000000000012, 0x8000000100167E40, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

void sub_10003D3D0(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_10003D41C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10003D498 + 4 * byte_10015EC44[a2]))(0x656D695464616572);
}

uint64_t sub_10003D498(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x656D695464616572 && v1 == 0xEB00000000564D45)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x656D695464616572, 0xEB00000000564D45, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEB00000000564D45);
  return v2 & 1;
}

void sub_10003D558(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10003D598(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10003D640 + 4 * byte_10015EC4E[a2]))(0x746942746E657645);
}

uint64_t sub_10003D640(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x746942746E657645 && v1 == 0xEB0000000070616DLL)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x746942746E657645, 0xEB0000000070616DLL, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEB0000000070616DLL);
  return v2 & 1;
}

uint64_t sub_10003D71C(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000018;
  else
    v3 = 0xD000000000000010;
  if (v2)
    v4 = 0x80000001001683F0;
  else
    v4 = 0x8000000100168410;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000018;
  else
    v5 = 0xD000000000000010;
  if ((a2 & 1) != 0)
    v6 = 0x8000000100168410;
  else
    v6 = 0x80000001001683F0;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_10003D7C4(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  __asm { BR              X10 }
}

Swift::Int sub_10003D818()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x656D695464616572, 0xEB00000000564D45);
  swift_bridgeObjectRelease(0xEB00000000564D45);
  return Hasher._finalize()();
}

void sub_10003D8A0(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  __asm { BR              X10 }
}

Swift::Int sub_10003D8E8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x746942746E657645, 0xEB0000000070616DLL);
  swift_bridgeObjectRelease(0xEB0000000070616DLL);
  return Hasher._finalize()();
}

Swift::Int sub_10003D99C(char a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  if ((a1 & 1) != 0)
    v2 = 0xD000000000000018;
  else
    v2 = 0xD000000000000010;
  if ((a1 & 1) != 0)
    v3 = 0x8000000100168410;
  else
    v3 = 0x80000001001683F0;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_10003DA20(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10003DA6C(uint64_t a1)
{
  String.hash(into:)(a1, 0xD000000000000012, 0x8000000100167E40);
  return swift_bridgeObjectRelease(0x8000000100167E40);
}

void sub_10003DB3C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10003DB74(uint64_t a1)
{
  String.hash(into:)(a1, 0x746942746E657645, 0xEB0000000070616DLL);
  return swift_bridgeObjectRelease(0xEB0000000070616DLL);
}

void sub_10003DC14(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_10003DC6C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000012, 0x8000000100167E40);
  swift_bridgeObjectRelease(0x8000000100167E40);
  return Hasher._finalize()();
}

void sub_10003DD50(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_10003DDA0()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x656D695464616572, 0xEB00000000564D45);
  swift_bridgeObjectRelease(0xEB00000000564D45);
  return Hasher._finalize()();
}

void sub_10003DE28(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_10003DE6C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x746942746E657645, 0xEB0000000070616DLL);
  swift_bridgeObjectRelease(0xEB0000000070616DLL);
  return Hasher._finalize()();
}

Swift::Int sub_10003DF20(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  if ((a2 & 1) != 0)
    v3 = 0xD000000000000018;
  else
    v3 = 0xD000000000000010;
  if ((a2 & 1) != 0)
    v4 = 0x8000000100168410;
  else
    v4 = 0x80000001001683F0;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10003DFA0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10003DFCC + 4 * byte_10015EC7E[a1]))(1701080909, 0xE400000000000000);
}

uint64_t sub_10003DFCC()
{
  return 0x746942746E657645;
}

unint64_t sub_10003DFEC()
{
  return 0xD000000000000011;
}

unint64_t sub_10003E008()
{
  return 0xD000000000000018;
}

uint64_t sub_10003E028()
{
  return 0x7A69536863746142;
}

void sub_10003E058(char *a1)
{
  sub_10003D558(*a1);
}

void sub_10003E064()
{
  char *v0;

  sub_10003D8A0(*v0);
}

void sub_10003E06C(uint64_t a1)
{
  char *v1;

  sub_10003DB3C(a1, *v1);
}

void sub_10003E074(uint64_t a1)
{
  char *v1;

  sub_10003DE28(a1, *v1);
}

unint64_t sub_10003E07C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10003E984(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10003E0A8@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10003DFA0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t default argument 0 of IteratorProtocol<>.nextBoolean(tag:)()
{
  return 1;
}

Swift::Int sub_10003E0D8()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0xD000000000000015, 0x8000000100167F40);
  return Hasher._finalize()();
}

uint64_t sub_10003E12C(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD000000000000015, 0x8000000100167F40);
}

Swift::Int sub_10003E148()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0xD000000000000015, 0x8000000100167F40);
  return Hasher._finalize()();
}

uint64_t sub_10003E198@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100198490, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_10003E1E8(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000015;
  a1[1] = 0x8000000100167F40;
}

void sub_10003E208(int a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t inited;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _TtC14softposreaderd12RemoteReader *v17;
  os_unfair_lock_s *v18;
  _TtC14softposreaderd12RemoteReader **v19;
  os_unfair_lock_s *v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  _BYTE v28[192];

  v7 = sub_100003A2C(&qword_1001AF168);
  inited = swift_initStackObject(v7, v28);
  *(_OWORD *)(inited + 16) = xmmword_10015EE30;
  *(_BYTE *)(inited + 32) = 0;
  v9 = *(_BYTE *)(v3 + 64);
  *(_QWORD *)(inited + 64) = &type metadata for UInt8;
  *(_BYTE *)(inited + 40) = v9;
  *(_BYTE *)(inited + 72) = 1;
  *(_QWORD *)(inited + 104) = &type metadata for UInt32;
  *(_DWORD *)(inited + 80) = a1;
  *(_BYTE *)(inited + 112) = 2;
  *(_QWORD *)(inited + 144) = &type metadata for UInt64;
  *(_QWORD *)(inited + 120) = a2;
  *(_BYTE *)(inited + 152) = 3;
  *(_QWORD *)(inited + 184) = &type metadata for UInt8;
  *(_BYTE *)(inited + 160) = a3;
  v17 = (_TtC14softposreaderd12RemoteReader *)sub_1000E84D0(inited, v10, v11, v12, v13, v14, v15, v16);
  v18 = *(os_unfair_lock_s **)(v3 + 56);
  v19 = (_TtC14softposreaderd12RemoteReader **)&v18[4];
  v20 = v18 + 8;
  os_unfair_lock_lock(v18 + 8);
  sub_10005F0D4((uint64_t)v19, (uint64_t)v17);
  os_unfair_lock_unlock(v20);
  swift_bridgeObjectRelease(v17, v21, v22, v23, v24, v25, v26, v27);
  os_unfair_lock_lock(v20);
  sub_100060D00(v19, v3, 6);
  os_unfair_lock_unlock(v20);
}

void sub_10003E318(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _TtC14softposreaderd12RemoteReader *v14;
  os_unfair_lock_s *v15;
  _TtC14softposreaderd12RemoteReader **v16;
  os_unfair_lock_s *v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  _BYTE v25[112];

  v5 = sub_100003A2C(&qword_1001AF168);
  inited = swift_initStackObject(v5, v25);
  *(_OWORD *)(inited + 16) = xmmword_10015A6C0;
  *(_BYTE *)(inited + 32) = 4;
  *(_QWORD *)(inited + 64) = &type metadata for Int;
  *(_QWORD *)(inited + 40) = a1;
  *(_BYTE *)(inited + 72) = 5;
  *(_QWORD *)(inited + 104) = &type metadata for Int;
  *(_QWORD *)(inited + 80) = a2;
  v14 = (_TtC14softposreaderd12RemoteReader *)sub_1000E84D0(inited, v7, v8, v9, v10, v11, v12, v13);
  v15 = *(os_unfair_lock_s **)(v2 + 56);
  v16 = (_TtC14softposreaderd12RemoteReader **)&v15[4];
  v17 = v15 + 8;
  os_unfair_lock_lock(v15 + 8);
  sub_10005F0D4((uint64_t)v16, (uint64_t)v14);
  os_unfair_lock_unlock(v17);
  swift_bridgeObjectRelease(v14, v18, v19, v20, v21, v22, v23, v24);
  os_unfair_lock_lock(v17);
  sub_100060D00(v16, v2, 7);
  os_unfair_lock_unlock(v17);
}

uint64_t sub_10003E3F4()
{
  uint64_t v0;

  sub_100005D3C((_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocClassInstance(v0, 65, 7);
}

uint64_t type metadata accessor for MonitorAnalytics(uint64_t a1)
{
  uint64_t result;

  result = qword_1001AEFD8;
  if (!qword_1001AEFD8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MonitorAnalytics);
  return result;
}

uint64_t sub_10003E45C(uint64_t a1)
{
  char *v2;

  v2 = (char *)&value witness table for Builtin.Int8 + 64;
  return swift_initClassMetadata2(a1, 256, 1, &v2, a1 + 264);
}

uint64_t getEnumTagSinglePayload for MonitorAnalytics.PerformanceField(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for MonitorAnalytics.PerformanceField(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10003E534 + 4 * byte_10015EC84[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10003E554 + 4 * byte_10015EC89[v4]))();
}

_BYTE *sub_10003E534(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10003E554(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10003E55C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10003E564(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10003E56C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10003E574(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MonitorAnalytics.PerformanceField()
{
  return &type metadata for MonitorAnalytics.PerformanceField;
}

uint64_t getEnumTagSinglePayload for MonitorAnalytics.AnalyticsField(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MonitorAnalytics.AnalyticsField(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10003E66C + 4 * byte_10015EC93[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10003E6A0 + 4 * byte_10015EC8E[v4]))();
}

uint64_t sub_10003E6A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003E6A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003E6B0);
  return result;
}

uint64_t sub_10003E6BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003E6C4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10003E6C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003E6D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MonitorAnalytics.AnalyticsField()
{
  return &type metadata for MonitorAnalytics.AnalyticsField;
}

unint64_t sub_10003E6F0()
{
  unint64_t result;

  result = qword_1001AF140;
  if (!qword_1001AF140)
  {
    result = swift_getWitnessTable(&unk_10015ED58, &type metadata for MonitorAnalytics.AnalyticsField);
    atomic_store(result, (unint64_t *)&qword_1001AF140);
  }
  return result;
}

unint64_t sub_10003E738()
{
  unint64_t result;

  result = qword_1001AF148;
  if (!qword_1001AF148)
  {
    result = swift_getWitnessTable(&unk_10015EDF8, &type metadata for MonitorAnalytics.PerformanceField);
    atomic_store(result, (unint64_t *)&qword_1001AF148);
  }
  return result;
}

uint64_t sub_10003E77C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9[2];
  _QWORD v10[5];

  v10[3] = type metadata accessor for CALogger();
  v10[4] = &off_10019AEF0;
  v10[0] = a1;
  *(_BYTE *)(a2 + 64) = 0;
  sub_100008390((uint64_t)v10, (uint64_t)v9);
  v4 = sub_1000E8880((uint64_t)_swiftEmptyArrayStorage);
  v5 = sub_1000E8998((uint64_t)_swiftEmptyArrayStorage);
  v6 = sub_100003A2C(&qword_1001AF170);
  v7 = swift_allocObject(v6, 36, 7);
  *(_DWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 16) = v4;
  *(_QWORD *)(v7 + 24) = v5;
  *(_QWORD *)(a2 + 56) = v7;
  sub_10001A674(v9, a2 + 16);
  sub_100005D3C(v10);
  return a2;
}

uint64_t sub_10003E830(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD v16[5];
  _QWORD v17[5];

  sub_1000DD94C();
  if (!v1)
  {
    v3 = sub_10001A64C((uint64_t)v17, v17[3]);
    __chkstk_darwin(v3);
    v5 = (_QWORD *)((char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v6 + 16))(v5);
    v7 = *v5;
    v8 = type metadata accessor for CALogger();
    v16[3] = v8;
    v16[4] = &off_10019AEF0;
    v16[0] = v7;
    v9 = type metadata accessor for MonitorAnalytics(0);
    v10 = swift_allocObject(v9, 65, 7);
    v11 = sub_10001A64C((uint64_t)v16, v8);
    __chkstk_darwin(v11);
    v13 = (_QWORD *)((char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v14 + 16))(v13);
    a1 = sub_10003E77C(*v13, v10);
    sub_100005D3C(v16);
    sub_100005D3C(v17);
  }
  return a1;
}

unint64_t sub_10003E984(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001983E0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

uint64_t sub_10003E9CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001AF178);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001AF178);
  if (qword_1001AD168 != -1)
    swift_once(&qword_1001AD168, sub_1000CC6D0);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4E28);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10003EA5C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _BYTE v4[24];
  __int128 v5;
  uint64_t v6;
  _BYTE v7[24];

  swift_beginAccess(v1 + 184, v7, 0, 0);
  sub_10003F30C(v1 + 184, (uint64_t)&v5);
  if (v6)
    return sub_10001A674(&v5, (uint64_t)a1);
  sub_10003F354((uint64_t)&v5);
  sub_10003EC1C(0xD000000000000017, 0x800000010016B220, (_QWORD *)(v1 + 136), a1);
  sub_100008390((uint64_t)a1, (uint64_t)&v5);
  swift_beginAccess(v1 + 184, v4, 33, 0);
  sub_10003F394((uint64_t)&v5, v1 + 184);
  return swift_endAccess(v4);
}

uint64_t sub_10003EB24@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v4;
  uint64_t inited;
  _BYTE v6[24];
  __int128 v7;
  uint64_t v8;
  _UNKNOWN **v9;
  _BYTE v10[24];

  swift_beginAccess(v1 + 224, v10, 0, 0);
  sub_10003F30C(v1 + 224, (uint64_t)&v7);
  if (v8)
    return sub_10001A674(&v7, (uint64_t)a1);
  sub_10003F354((uint64_t)&v7);
  v4 = type metadata accessor for NullAuditor();
  inited = swift_initStaticObject(v4, &unk_1001AD348);
  v8 = v4;
  v9 = &off_10019AB58;
  *(_QWORD *)&v7 = inited;
  sub_10003EC1C(0xD000000000000017, 0x800000010016B220, &v7, a1);
  sub_100005D3C(&v7);
  sub_100008390((uint64_t)a1, (uint64_t)&v7);
  swift_beginAccess(v1 + 224, v6, 33, 0);
  sub_10003F394((uint64_t)&v7, v1 + 224);
  return swift_endAccess(v6);
}

uint64_t sub_10003EC1C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  os_unfair_lock_s *v13;
  os_unfair_lock_s *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t result;
  _QWORD v33[5];
  __int128 v34;
  uint64_t v35;

  v5 = v4;
  v10 = a3[3];
  v11 = a3[4];
  sub_100005EF8(a3, v10);
  sub_10011571C(1, v10, v11);
  v12 = *(os_unfair_lock_s **)(v5 + 176);
  v13 = v12 + 4;
  v14 = v12 + 6;
  os_unfair_lock_lock(v12 + 6);
  sub_10003EE28(v13, a1, a2, v5, a3, &v34);
  os_unfair_lock_unlock(v14);
  v15 = v34;
  sub_100008390(v5 + 56, (uint64_t)&v34);
  v16 = sub_10001A64C((uint64_t)&v34, v35);
  __chkstk_darwin(v16);
  v18 = (_QWORD *)((char *)&v33[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v19 + 16))(v18);
  v20 = *v18;
  v21 = type metadata accessor for DefaultSecureTimeKeeper();
  v33[3] = v21;
  v33[4] = &off_10019C0A0;
  v33[0] = v20;
  v22 = type metadata accessor for SecureChannel();
  v23 = (_QWORD *)swift_allocObject(v22, 80, 7);
  v24 = sub_10001A64C((uint64_t)v33, v21);
  __chkstk_darwin(v24);
  v26 = (_QWORD *)((char *)&v33[-1] - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v27 + 16))(v26);
  v28 = *v26;
  v29 = swift_unknownObjectRetain(v15);
  v30 = sub_10003F6F8(v29, *((uint64_t *)&v15 + 1), v28, v23, 600.0);
  swift_unknownObjectRelease(v15);
  sub_100005D3C(v33);
  sub_100005D3C(&v34);
  a4[3] = v22;
  a4[4] = &off_10019C8E8;
  result = swift_unknownObjectRelease(v15);
  *a4 = v30;
  return result;
}

void sub_10003EE28(_QWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v12 = *a1;
  if (*(_QWORD *)(*a1 + 16))
  {
    swift_bridgeObjectRetain(a3);
    v13 = sub_10000ADC4(a2, a3);
    if ((v14 & 1) != 0)
    {
      v39 = *(_OWORD *)(*(_QWORD *)(v12 + 56) + 16 * v13);
      swift_unknownObjectRetain(*(_QWORD *)(*(_QWORD *)(v12 + 56) + 16 * v13));
      swift_bridgeObjectRelease(a3);
      if (qword_1001ACF30 != -1)
        swift_once(&qword_1001ACF30, sub_10003E9CC);
      v15 = type metadata accessor for Logger(0);
      sub_100003A14(v15, (uint64_t)qword_1001AF178);
      v16 = swift_bridgeObjectRetain_n(a3, 2);
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc(12, -1);
        v20 = swift_slowAlloc(32, -1);
        v42 = v20;
        *(_DWORD *)v19 = 136315138;
        swift_bridgeObjectRetain(a3);
        v40 = sub_1000056EC(a2, a3, &v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v19 + 4, v19 + 12);
        swift_bridgeObjectRelease_n(a3, 3);
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Reusing signer for %s", v19, 0xCu);
        swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v20, -1, -1);
        swift_slowDealloc(v19, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a3, 2);
      }
      v21 = v39;
      goto LABEL_15;
    }
    swift_bridgeObjectRelease(a3);
  }
  if (qword_1001ACF30 != -1)
    swift_once(&qword_1001ACF30, sub_10003E9CC);
  v22 = type metadata accessor for Logger(0);
  sub_100003A14(v22, (uint64_t)qword_1001AF178);
  v23 = swift_bridgeObjectRetain_n(a3, 2);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v38 = a4;
    v27 = swift_slowAlloc(32, -1);
    v42 = v27;
    *(_DWORD *)v26 = 136315138;
    swift_bridgeObjectRetain(a3);
    v40 = sub_1000056EC(a2, a3, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v26 + 4, v26 + 12);
    swift_bridgeObjectRelease_n(a3, 3);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Creating new signer for %s", v26, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    v28 = v27;
    a4 = v38;
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v26, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
  }
  v29 = (_QWORD *)*sub_100005EF8((_QWORD *)(a4 + 96), *(_QWORD *)(a4 + 120));
  v30 = a5[3];
  v31 = a5[4];
  v32 = sub_100005EF8(a5, v30);
  v33 = sub_10011D65C(a2, a3, 400, 0x632D657275636573, 0xEE006C656E6E6168, (uint64_t)v32, v29, v30, v31);
  v35 = v34;
  swift_bridgeObjectRetain(a3);
  swift_unknownObjectRetain(v33);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  v42 = *a1;
  *a1 = 0x8000000000000000;
  sub_1000EBC7C((uint64_t)v33, v35, a2, a3, isUniquelyReferenced_nonNull_native);
  v37 = *a1;
  *a1 = v42;
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(v37);
  *(_QWORD *)&v21 = v33;
  *((_QWORD *)&v21 + 1) = v35;
LABEL_15:
  *a6 = v21;
}

uint64_t sub_10003F298()
{
  _QWORD *v0;

  sub_100005D3C(v0 + 2);
  sub_100005D3C(v0 + 7);
  sub_100005D3C(v0 + 12);
  sub_100005D3C(v0 + 17);
  swift_release(v0[22]);
  sub_10003F354((uint64_t)(v0 + 23));
  sub_10003F354((uint64_t)(v0 + 28));
  return swift_deallocClassInstance(v0, 264, 7);
}

uint64_t type metadata accessor for SecureChannelFactory()
{
  return objc_opt_self(_TtC9SPREngine20SecureChannelFactory);
}

uint64_t sub_10003F30C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003A2C(&qword_1001AF2B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003F354(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003A2C(&qword_1001AF2B8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10003F394(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003A2C(&qword_1001AF2B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003F3DC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  _QWORD v15[5];
  _QWORD v16[5];
  _QWORD v17[5];

  v17[3] = type metadata accessor for SystemInfo();
  v17[4] = &off_10019F8A0;
  v17[0] = a1;
  v16[3] = type metadata accessor for DefaultSecureTimeKeeper();
  v16[4] = &off_10019C0A0;
  v16[0] = a2;
  v15[3] = type metadata accessor for SignerFactory();
  v15[4] = &off_10019FF20;
  v15[0] = a3;
  v10 = sub_1000E8B4C((uint64_t)_swiftEmptyArrayStorage);
  v11 = sub_100003A2C(&qword_1001AF2D0);
  v12 = swift_allocObject(v11, 28, 7);
  *(_DWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 16) = v10;
  *(_QWORD *)(a5 + 176) = v12;
  *(_OWORD *)(a5 + 184) = 0u;
  *(_OWORD *)(a5 + 200) = 0u;
  *(_OWORD *)(a5 + 216) = 0u;
  *(_OWORD *)(a5 + 232) = 0u;
  *(_OWORD *)(a5 + 248) = 0u;
  sub_100008390((uint64_t)v17, a5 + 16);
  sub_100008390((uint64_t)v16, a5 + 56);
  sub_100008390((uint64_t)v15, a5 + 96);
  sub_100005EF8(a4, a4[3]);
  sub_100113BC0(5);
  sub_100005D3C(v15);
  sub_100005D3C(v16);
  sub_100005D3C(v17);
  sub_10001A674(&v14, a5 + 136);
  sub_100005D3C(a4);
  return a5;
}

uint64_t sub_10003F534(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v25[3];
  uint64_t v26;
  _UNKNOWN **v27;
  _QWORD v28[3];
  uint64_t v29;
  _UNKNOWN **v30;
  _QWORD v31[3];
  uint64_t v32;
  _UNKNOWN **v33;

  v32 = type metadata accessor for SystemInfo();
  v33 = &off_10019F8A0;
  v31[0] = a1;
  v29 = type metadata accessor for DefaultSecureTimeKeeper();
  v30 = &off_10019C0A0;
  v28[0] = a2;
  v26 = type metadata accessor for SignerFactory();
  v27 = &off_10019FF20;
  v25[0] = a3;
  v8 = type metadata accessor for SecureChannelFactory();
  v9 = swift_allocObject(v8, 264, 7);
  v10 = sub_10001A64C((uint64_t)v31, v32);
  __chkstk_darwin(v10);
  v12 = (_QWORD *)((char *)&v25[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v13 + 16))(v12);
  v14 = sub_10001A64C((uint64_t)v28, v29);
  __chkstk_darwin(v14);
  v16 = (_QWORD *)((char *)&v25[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v17 + 16))(v16);
  v18 = sub_10001A64C((uint64_t)v25, v26);
  __chkstk_darwin(v18);
  v20 = (_QWORD *)((char *)&v25[-1] - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  v22 = sub_10003F3DC(*v12, *v16, *v20, a4, v9);
  sub_100005D3C(v25);
  sub_100005D3C(v28);
  sub_100005D3C(v31);
  return v22;
}

_QWORD *sub_10003F6F8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v28;
  _QWORD v29[4];
  uint64_t v30;
  _QWORD v31[5];
  _QWORD v32[5];

  v32[3] = type metadata accessor for DefaultSecureTimeKeeper();
  v32[4] = &off_10019C0A0;
  v32[0] = a3;
  if (qword_1001ACFE0 != -1)
    swift_once(&qword_1001ACFE0, sub_100072418);
  v10 = type metadata accessor for Logger(0);
  sub_100003A14(v10, (uint64_t)qword_1001B09F8);
  sub_100008390((uint64_t)v32, (uint64_t)v31);
  v11 = swift_unknownObjectRetain_n(a1, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(22, -1);
    v15 = swift_slowAlloc(64, -1);
    v30 = v15;
    *(_DWORD *)v14 = 136315394;
    v28 = a1;
    v29[0] = a2;
    swift_unknownObjectRetain(a1);
    v16 = sub_100003A2C(&qword_1001AF2C0);
    v17 = String.init<A>(describing:)(&v28, v16);
    v19 = v18;
    v28 = sub_1000056EC(v17, v18, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v14 + 4, v14 + 12);
    swift_unknownObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v19);
    *(_WORD *)(v14 + 12) = 2080;
    sub_100008390((uint64_t)v31, (uint64_t)&v28);
    v20 = sub_100003A2C(&qword_1001AF2C8);
    v21 = String.init<A>(describing:)(&v28, v20);
    v23 = v22;
    v28 = sub_1000056EC(v21, v22, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease(v23);
    sub_100005D3C(v31);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "SecureChannel.init(signer: %s, secureTimeKeeper: %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    swift_unknownObjectRelease_n(a1, 2);
    sub_100005D3C(v31);
  }

  a4[2] = a1;
  a4[3] = a2;
  sub_100008390((uint64_t)v32, (uint64_t)(a4 + 4));
  v24 = (void *)objc_opt_self(NSURLSessionConfiguration);
  swift_unknownObjectRetain(a1);
  v25 = objc_msgSend(v24, "ephemeralSessionConfiguration");
  objc_msgSend(v25, "setTimeoutIntervalForResource:", a5);
  objc_msgSend(v25, "setTLSMinimumSupportedProtocolVersion:", 771);
  v26 = objc_msgSend((id)objc_opt_self(NSURLSession), "sessionWithConfiguration:", v25);

  sub_100005D3C(v32);
  a4[9] = v26;
  return a4;
}

uint64_t sub_10003F9FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD v17[5];
  _QWORD v18[5];
  _QWORD v19[5];
  _QWORD v20[5];

  sub_1000DF314();
  if (v1)
  {
    swift_release(a1);
  }
  else
  {
    sub_1000DC4B4();
    sub_1000DF844();
    sub_1000DC9E4();
    v5 = sub_10001A64C((uint64_t)v20, v20[3]);
    __chkstk_darwin(v5);
    v7 = (_QWORD *)((char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v8 + 16))(v7);
    v9 = sub_10001A64C((uint64_t)v19, v19[3]);
    __chkstk_darwin(v9);
    v11 = (_QWORD *)((char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v12 + 16))(v11);
    v13 = sub_10001A64C((uint64_t)v18, v18[3]);
    __chkstk_darwin(v13);
    v15 = (_QWORD *)((char *)v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v16 + 16))(v15);
    v2 = sub_10003F534(*v7, *v11, *v15, v17);
    sub_100005D3C(v18);
    sub_100005D3C(v19);
    sub_100005D3C(v20);
    swift_release(a1);
  }
  return v2;
}

uint64_t sub_10003FC1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001AF2D8);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001AF2D8);
  if (qword_1001AD140 != -1)
    swift_once(&qword_1001AD140, sub_1000CC2E4);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4DB0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

Swift::Int sub_10003FCAC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _TtC14softposreaderd12RemoteReader *v13;
  SEL v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v23;
  id v24;
  uint64_t v26;
  uint64_t v27[3];

  if (a2)
  {
    if (qword_1001ACF38 != -1)
      swift_once(&qword_1001ACF38, sub_10003FC1C);
    v4 = type metadata accessor for Logger(0);
    sub_100003A14(v4, (uint64_t)qword_1001AF2D8);
    swift_errorRetain();
    v5 = swift_errorRetain();
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v27[0] = v9;
      *(_DWORD *)v8 = 136315138;
      v10 = sub_100003A2C(&qword_1001AF388);
      v11 = Optional.debugDescription.getter(v10);
      v13 = (_TtC14softposreaderd12RemoteReader *)v12;
      v26 = sub_1000056EC(v11, v12, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v8 + 4, v8 + 12);
      swift_bridgeObjectRelease(v13, v14, v15, v16, v17, v18, v19, v20);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error creating SEManagerSession: %s", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

  }
  else
  {
    swift_beginAccess(a4 + 16, v27, 1, 0);
    v23 = *(void **)(a4 + 16);
    *(_QWORD *)(a4 + 16) = a1;
    v24 = a1;

  }
  return OS_dispatch_semaphore.signal()();
}

uint64_t type metadata accessor for NFSESessionBlock()
{
  return objc_opt_self(_TtC9SPREngine16NFSESessionBlock);
}

void sub_10003FEC4()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *oslog;

  if (qword_1001ACF38 != -1)
    swift_once(&qword_1001ACF38, sub_10003FC1C);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001AF2D8);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "NF SE Manager Session ended in runWithManagerBlock()", v3, 2u);
    swift_slowDealloc(v3, -1, -1);
  }

}

void sub_10003FF90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  dispatch_semaphore_t v7;
  uint64_t v8;
  id *v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  void *v42;
  char v47[24];
  void **aBlock;
  uint64_t v49;
  void *v50;
  void *v51;
  void (*v52)();
  uint64_t v53;

  v7 = dispatch_semaphore_create(0);
  v8 = swift_allocObject(&unk_10019B540, 24, 7);
  *(_QWORD *)(v8 + 16) = 0;
  v9 = (id *)(v8 + 16);
  v10 = objc_msgSend((id)objc_opt_self(NFHardwareManager), "sharedHardwareManager");
  if (!v10)
  {
    __break(1u);
    goto LABEL_31;
  }
  v11 = v10;
  v12 = swift_allocObject(&unk_10019B658, 32, 7);
  *(_QWORD *)(v12 + 16) = v7;
  *(_QWORD *)(v12 + 24) = v8;
  v52 = (void (*)())sub_100041EFC;
  v53 = v12;
  aBlock = _NSConcreteStackBlock;
  v49 = 1107296256;
  v50 = sub_100004C68;
  v51 = &unk_10019B670;
  v13 = _Block_copy(&aBlock);
  v14 = v53;
  v15 = v7;
  swift_retain();
  swift_release(v14);
  v16 = objc_msgSend(v11, "startSecureElementManagerSession:", v13);
  _Block_release(v13);

  if (!v16)
  {
LABEL_31:
    __break(1u);
    return;
  }
  if ((objc_msgSend(v16, "isFirstInQueue") & 1) == 0)
  {
    if (qword_1001ACF38 != -1)
      swift_once(&qword_1001ACF38, sub_10003FC1C);
    v17 = type metadata accessor for Logger(0);
    v18 = sub_100003A14(v17, (uint64_t)qword_1001AF2D8);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "waiting for NFSecureElementManagerSession ...", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

  }
  v22 = OS_dispatch_semaphore.wait(timeout:)(a1);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v22 & 1, 1) & 1) != 0)
  {
    if (qword_1001ACF38 != -1)
      swift_once(&qword_1001ACF38, sub_10003FC1C);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_100003A14(v23, (uint64_t)qword_1001AF2D8);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "timeout, fail to obtain manager session", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

    v52 = sub_10003FEC4;
    v53 = 0;
    aBlock = _NSConcreteStackBlock;
    v49 = 1107296256;
    v28 = &unk_10019B710;
LABEL_28:
    v50 = sub_1000043B8;
    v51 = v28;
    v42 = _Block_copy(&aBlock);
    objc_msgSend(v16, "endSessionWithCompletion:", v42);
    _Block_release(v42);

    swift_release(v8);
    swift_unknownObjectRelease(v16);
    return;
  }
  swift_beginAccess(v9, v47, 0, 0);
  if (!*v9)
  {
    if (qword_1001ACF38 != -1)
      swift_once(&qword_1001ACF38, sub_10003FC1C);
    v37 = type metadata accessor for Logger(0);
    v38 = sub_100003A14(v37, (uint64_t)qword_1001AF2D8);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "SE Manager Session fails", v41, 2u);
      swift_slowDealloc(v41, -1, -1);
    }

    v52 = sub_10003FEC4;
    v53 = 0;
    aBlock = _NSConcreteStackBlock;
    v49 = 1107296256;
    v28 = &unk_10019B698;
    goto LABEL_28;
  }
  v29 = qword_1001ACF38;
  v30 = *v9;
  if (v29 != -1)
    swift_once(&qword_1001ACF38, sub_10003FC1C);
  v31 = type metadata accessor for Logger(0);
  v32 = sub_100003A14(v31, (uint64_t)qword_1001AF2D8);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v35 = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "NF SE Manager Session started from runWithManagerBlock()", v35, 2u);
    swift_slowDealloc(v35, -1, -1);
  }

  sub_100127124((uint64_t)v30, a2, a3, a4, a5);
  if (v5)
  {

    v52 = sub_10003FEC4;
    v53 = 0;
    aBlock = _NSConcreteStackBlock;
    v49 = 1107296256;
    v50 = sub_1000043B8;
    v51 = &unk_10019B6C0;
  }
  else
  {

    v52 = sub_10003FEC4;
    v53 = 0;
    aBlock = _NSConcreteStackBlock;
    v49 = 1107296256;
    v50 = sub_1000043B8;
    v51 = &unk_10019B6E8;
  }
  v36 = _Block_copy(&aBlock);
  objc_msgSend(v16, "endSessionWithCompletion:", v36);
  _Block_release(v36);

  swift_release(v8);
  swift_unknownObjectRelease(v16);
}

void sub_1000405A0(uint64_t a1)
{
  uint64_t v1;
  dispatch_semaphore_t v3;
  uint64_t v4;
  id *v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  void *v38;
  char v39[24];
  void **aBlock;
  uint64_t v41;
  void *v42;
  void *v43;
  void (*v44)();
  uint64_t v45;

  v3 = dispatch_semaphore_create(0);
  v4 = swift_allocObject(&unk_10019B540, 24, 7);
  *(_QWORD *)(v4 + 16) = 0;
  v5 = (id *)(v4 + 16);
  v6 = objc_msgSend((id)objc_opt_self(NFHardwareManager), "sharedHardwareManager");
  if (!v6)
  {
    __break(1u);
    goto LABEL_31;
  }
  v7 = v6;
  v8 = swift_allocObject(&unk_10019B928, 32, 7);
  *(_QWORD *)(v8 + 16) = v3;
  *(_QWORD *)(v8 + 24) = v4;
  v44 = (void (*)())sub_100041EFC;
  v45 = v8;
  aBlock = _NSConcreteStackBlock;
  v41 = 1107296256;
  v42 = sub_100004C68;
  v43 = &unk_10019B940;
  v9 = _Block_copy(&aBlock);
  v10 = v45;
  v11 = v3;
  swift_retain(v4);
  swift_release(v10);
  v12 = objc_msgSend(v7, "startSecureElementManagerSession:", v9);
  _Block_release(v9);

  if (!v12)
  {
LABEL_31:
    __break(1u);
    return;
  }
  if ((objc_msgSend(v12, "isFirstInQueue") & 1) == 0)
  {
    if (qword_1001ACF38 != -1)
      swift_once(&qword_1001ACF38, sub_10003FC1C);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_100003A14(v13, (uint64_t)qword_1001AF2D8);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "waiting for NFSecureElementManagerSession ...", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

  }
  v18 = OS_dispatch_semaphore.wait(timeout:)(a1);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v18 & 1, 1) & 1) != 0)
  {
    if (qword_1001ACF38 != -1)
      swift_once(&qword_1001ACF38, sub_10003FC1C);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_100003A14(v19, (uint64_t)qword_1001AF2D8);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "timeout, fail to obtain manager session", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    v44 = sub_10003FEC4;
    v45 = 0;
    aBlock = _NSConcreteStackBlock;
    v41 = 1107296256;
    v24 = &unk_10019B9E0;
LABEL_28:
    v42 = sub_1000043B8;
    v43 = v24;
    v38 = _Block_copy(&aBlock);
    objc_msgSend(v12, "endSessionWithCompletion:", v38);
    _Block_release(v38);

    swift_release(v4);
    swift_unknownObjectRelease(v12);
    return;
  }
  swift_beginAccess(v5, v39, 0, 0);
  if (!*v5)
  {
    if (qword_1001ACF38 != -1)
      swift_once(&qword_1001ACF38, sub_10003FC1C);
    v33 = type metadata accessor for Logger(0);
    v34 = sub_100003A14(v33, (uint64_t)qword_1001AF2D8);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "SE Manager Session fails", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }

    v44 = sub_10003FEC4;
    v45 = 0;
    aBlock = _NSConcreteStackBlock;
    v41 = 1107296256;
    v24 = &unk_10019B968;
    goto LABEL_28;
  }
  v25 = qword_1001ACF38;
  v26 = *v5;
  if (v25 != -1)
    swift_once(&qword_1001ACF38, sub_10003FC1C);
  v27 = type metadata accessor for Logger(0);
  v28 = sub_100003A14(v27, (uint64_t)qword_1001AF2D8);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "NF SE Manager Session started from runWithManagerBlock()", v31, 2u);
    swift_slowDealloc(v31, -1, -1);
  }

  sub_10009B264();
  if (v1)
  {

    v44 = sub_10003FEC4;
    v45 = 0;
    aBlock = _NSConcreteStackBlock;
    v41 = 1107296256;
    v42 = sub_1000043B8;
    v43 = &unk_10019B990;
  }
  else
  {

    v44 = sub_10003FEC4;
    v45 = 0;
    aBlock = _NSConcreteStackBlock;
    v41 = 1107296256;
    v42 = sub_1000043B8;
    v43 = &unk_10019B9B8;
  }
  v32 = _Block_copy(&aBlock);
  objc_msgSend(v12, "endSessionWithCompletion:", v32);
  _Block_release(v32);

  swift_release(v4);
  swift_unknownObjectRelease(v12);
}

void sub_100040BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  dispatch_semaphore_t v7;
  uint64_t v8;
  id *v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  void *v42;
  char v47[24];
  void **aBlock;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;

  v7 = dispatch_semaphore_create(0);
  v8 = swift_allocObject(&unk_10019B540, 24, 7);
  *(_QWORD *)(v8 + 16) = 0;
  v9 = (id *)(v8 + 16);
  v10 = objc_msgSend((id)objc_opt_self(NFHardwareManager), "sharedHardwareManager");
  if (!v10)
  {
    __break(1u);
    goto LABEL_31;
  }
  v11 = v10;
  v12 = swift_allocObject(&unk_10019B568, 32, 7);
  *(_QWORD *)(v12 + 16) = v7;
  *(_QWORD *)(v12 + 24) = v8;
  v52 = sub_1000411D8;
  v53 = v12;
  aBlock = _NSConcreteStackBlock;
  v49 = 1107296256;
  v50 = sub_100004C68;
  v51 = &unk_10019B580;
  v13 = _Block_copy(&aBlock);
  v14 = v53;
  v15 = v7;
  swift_retain();
  swift_release(v14);
  v16 = objc_msgSend(v11, "startSecureElementManagerSession:", v13);
  _Block_release(v13);

  if (!v16)
  {
LABEL_31:
    __break(1u);
    return;
  }
  if ((objc_msgSend(v16, "isFirstInQueue") & 1) == 0)
  {
    if (qword_1001ACF38 != -1)
      swift_once(&qword_1001ACF38, sub_10003FC1C);
    v17 = type metadata accessor for Logger(0);
    v18 = sub_100003A14(v17, (uint64_t)qword_1001AF2D8);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "waiting for NFSecureElementManagerSession ...", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

  }
  v22 = OS_dispatch_semaphore.wait(timeout:)(a1);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v22 & 1, 1) & 1) != 0)
  {
    if (qword_1001ACF38 != -1)
      swift_once(&qword_1001ACF38, sub_10003FC1C);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_100003A14(v23, (uint64_t)qword_1001AF2D8);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "timeout, fail to obtain manager session", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

    v52 = sub_10003FEC4;
    v53 = 0;
    aBlock = _NSConcreteStackBlock;
    v49 = 1107296256;
    v28 = &unk_10019B620;
LABEL_28:
    v50 = sub_1000043B8;
    v51 = v28;
    v42 = _Block_copy(&aBlock);
    objc_msgSend(v16, "endSessionWithCompletion:", v42);
    _Block_release(v42);

    swift_release(v8);
    swift_unknownObjectRelease(v16);
    return;
  }
  swift_beginAccess(v9, v47, 0, 0);
  if (!*v9)
  {
    if (qword_1001ACF38 != -1)
      swift_once(&qword_1001ACF38, sub_10003FC1C);
    v37 = type metadata accessor for Logger(0);
    v38 = sub_100003A14(v37, (uint64_t)qword_1001AF2D8);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "SE Manager Session fails", v41, 2u);
      swift_slowDealloc(v41, -1, -1);
    }

    v52 = sub_10003FEC4;
    v53 = 0;
    aBlock = _NSConcreteStackBlock;
    v49 = 1107296256;
    v28 = &unk_10019B5A8;
    goto LABEL_28;
  }
  v29 = qword_1001ACF38;
  v30 = *v9;
  if (v29 != -1)
    swift_once(&qword_1001ACF38, sub_10003FC1C);
  v31 = type metadata accessor for Logger(0);
  v32 = sub_100003A14(v31, (uint64_t)qword_1001AF2D8);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v35 = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "NF SE Manager Session started from runWithManagerBlock()", v35, 2u);
    swift_slowDealloc(v35, -1, -1);
  }

  sub_100127194((uint64_t)v30, a2, a3, a4, a5);
  if (v5)
  {

    v52 = sub_10003FEC4;
    v53 = 0;
    aBlock = _NSConcreteStackBlock;
    v49 = 1107296256;
    v50 = sub_1000043B8;
    v51 = &unk_10019B5D0;
  }
  else
  {

    v52 = sub_10003FEC4;
    v53 = 0;
    aBlock = _NSConcreteStackBlock;
    v49 = 1107296256;
    v50 = sub_1000043B8;
    v51 = &unk_10019B5F8;
  }
  v36 = _Block_copy(&aBlock);
  objc_msgSend(v16, "endSessionWithCompletion:", v36);
  _Block_release(v36);

  swift_release(v8);
  swift_unknownObjectRelease(v16);
}

uint64_t sub_1000411B0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

Swift::Int sub_1000411D8(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10003FCAC(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1000411E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000411F0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000411FC(uint64_t a1)
{
  uint64_t v1;
  dispatch_semaphore_t v3;
  uint64_t v4;
  id *v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  void *v38;
  char v39[24];
  void **aBlock;
  uint64_t v41;
  void *v42;
  void *v43;
  void (*v44)();
  uint64_t v45;

  v3 = dispatch_semaphore_create(0);
  v4 = swift_allocObject(&unk_10019B540, 24, 7);
  *(_QWORD *)(v4 + 16) = 0;
  v5 = (id *)(v4 + 16);
  v6 = objc_msgSend((id)objc_opt_self(NFHardwareManager), "sharedHardwareManager");
  if (!v6)
  {
    __break(1u);
    goto LABEL_31;
  }
  v7 = v6;
  v8 = swift_allocObject(&unk_10019B838, 32, 7);
  *(_QWORD *)(v8 + 16) = v3;
  *(_QWORD *)(v8 + 24) = v4;
  v44 = (void (*)())sub_100041EFC;
  v45 = v8;
  aBlock = _NSConcreteStackBlock;
  v41 = 1107296256;
  v42 = sub_100004C68;
  v43 = &unk_10019B850;
  v9 = _Block_copy(&aBlock);
  v10 = v45;
  v11 = v3;
  swift_retain();
  swift_release(v10);
  v12 = objc_msgSend(v7, "startSecureElementManagerSession:", v9);
  _Block_release(v9);

  if (!v12)
  {
LABEL_31:
    __break(1u);
    return;
  }
  if ((objc_msgSend(v12, "isFirstInQueue") & 1) == 0)
  {
    if (qword_1001ACF38 != -1)
      swift_once(&qword_1001ACF38, sub_10003FC1C);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_100003A14(v13, (uint64_t)qword_1001AF2D8);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "waiting for NFSecureElementManagerSession ...", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

  }
  v18 = OS_dispatch_semaphore.wait(timeout:)(a1);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v18 & 1, 1) & 1) != 0)
  {
    if (qword_1001ACF38 != -1)
      swift_once(&qword_1001ACF38, sub_10003FC1C);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_100003A14(v19, (uint64_t)qword_1001AF2D8);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "timeout, fail to obtain manager session", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    v44 = sub_10003FEC4;
    v45 = 0;
    aBlock = _NSConcreteStackBlock;
    v41 = 1107296256;
    v24 = &unk_10019B8F0;
LABEL_28:
    v42 = sub_1000043B8;
    v43 = v24;
    v38 = _Block_copy(&aBlock);
    objc_msgSend(v12, "endSessionWithCompletion:", v38);
    _Block_release(v38);

    swift_release(v4);
    swift_unknownObjectRelease(v12);
    return;
  }
  swift_beginAccess(v5, v39, 0, 0);
  if (!*v5)
  {
    if (qword_1001ACF38 != -1)
      swift_once(&qword_1001ACF38, sub_10003FC1C);
    v33 = type metadata accessor for Logger(0);
    v34 = sub_100003A14(v33, (uint64_t)qword_1001AF2D8);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.error.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "SE Manager Session fails", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }

    v44 = sub_10003FEC4;
    v45 = 0;
    aBlock = _NSConcreteStackBlock;
    v41 = 1107296256;
    v24 = &unk_10019B878;
    goto LABEL_28;
  }
  v25 = qword_1001ACF38;
  v26 = *v5;
  if (v25 != -1)
    swift_once(&qword_1001ACF38, sub_10003FC1C);
  v27 = type metadata accessor for Logger(0);
  v28 = sub_100003A14(v27, (uint64_t)qword_1001AF2D8);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "NF SE Manager Session started from runWithManagerBlock()", v31, 2u);
    swift_slowDealloc(v31, -1, -1);
  }

  sub_10010C2F8();
  if (v1)
  {

    v44 = sub_10003FEC4;
    v45 = 0;
    aBlock = _NSConcreteStackBlock;
    v41 = 1107296256;
    v42 = sub_1000043B8;
    v43 = &unk_10019B8A0;
  }
  else
  {

    v44 = sub_10003FEC4;
    v45 = 0;
    aBlock = _NSConcreteStackBlock;
    v41 = 1107296256;
    v42 = sub_1000043B8;
    v43 = &unk_10019B8C8;
  }
  v32 = _Block_copy(&aBlock);
  objc_msgSend(v12, "endSessionWithCompletion:", v32);
  _Block_release(v32);

  swift_release(v4);
  swift_unknownObjectRelease(v12);
}

void sub_1000417FC(uint64_t a1, void (*a2)(id))
{
  uint64_t v2;
  dispatch_semaphore_t v4;
  uint64_t v5;
  id *v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  void *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  void *v39;
  char v41[24];
  void **aBlock;
  uint64_t v43;
  void *v44;
  void *v45;
  void (*v46)();
  uint64_t v47;

  v4 = dispatch_semaphore_create(0);
  v5 = swift_allocObject(&unk_10019B540, 24, 7);
  *(_QWORD *)(v5 + 16) = 0;
  v6 = (id *)(v5 + 16);
  v7 = objc_msgSend((id)objc_opt_self(NFHardwareManager), "sharedHardwareManager");
  if (!v7)
  {
    __break(1u);
    goto LABEL_31;
  }
  v8 = v7;
  v9 = swift_allocObject(&unk_10019B748, 32, 7);
  *(_QWORD *)(v9 + 16) = v4;
  *(_QWORD *)(v9 + 24) = v5;
  v46 = (void (*)())sub_100041EFC;
  v47 = v9;
  aBlock = _NSConcreteStackBlock;
  v43 = 1107296256;
  v44 = sub_100004C68;
  v45 = &unk_10019B760;
  v10 = _Block_copy(&aBlock);
  v11 = v47;
  v12 = v4;
  swift_retain();
  swift_release(v11);
  v13 = objc_msgSend(v8, "startSecureElementManagerSession:", v10);
  _Block_release(v10);

  if (!v13)
  {
LABEL_31:
    __break(1u);
    return;
  }
  if ((objc_msgSend(v13, "isFirstInQueue") & 1) == 0)
  {
    if (qword_1001ACF38 != -1)
      swift_once(&qword_1001ACF38, sub_10003FC1C);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_100003A14(v14, (uint64_t)qword_1001AF2D8);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "waiting for NFSecureElementManagerSession ...", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

  }
  v19 = OS_dispatch_semaphore.wait(timeout:)(a1);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v19 & 1, 1) & 1) != 0)
  {
    if (qword_1001ACF38 != -1)
      swift_once(&qword_1001ACF38, sub_10003FC1C);
    v20 = type metadata accessor for Logger(0);
    v21 = sub_100003A14(v20, (uint64_t)qword_1001AF2D8);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "timeout, fail to obtain manager session", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    v46 = sub_10003FEC4;
    v47 = 0;
    aBlock = _NSConcreteStackBlock;
    v43 = 1107296256;
    v25 = &unk_10019B800;
LABEL_28:
    v44 = sub_1000043B8;
    v45 = v25;
    v39 = _Block_copy(&aBlock);
    objc_msgSend(v13, "endSessionWithCompletion:", v39);
    _Block_release(v39);

    swift_release(v5);
    swift_unknownObjectRelease(v13);
    return;
  }
  swift_beginAccess(v6, v41, 0, 0);
  if (!*v6)
  {
    if (qword_1001ACF38 != -1)
      swift_once(&qword_1001ACF38, sub_10003FC1C);
    v34 = type metadata accessor for Logger(0);
    v35 = sub_100003A14(v34, (uint64_t)qword_1001AF2D8);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "SE Manager Session fails", v38, 2u);
      swift_slowDealloc(v38, -1, -1);
    }

    v46 = sub_10003FEC4;
    v47 = 0;
    aBlock = _NSConcreteStackBlock;
    v43 = 1107296256;
    v25 = &unk_10019B788;
    goto LABEL_28;
  }
  v26 = qword_1001ACF38;
  v27 = *v6;
  if (v26 != -1)
    swift_once(&qword_1001ACF38, sub_10003FC1C);
  v28 = type metadata accessor for Logger(0);
  v29 = sub_100003A14(v28, (uint64_t)qword_1001AF2D8);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "NF SE Manager Session started from runWithManagerBlock()", v32, 2u);
    swift_slowDealloc(v32, -1, -1);
  }

  a2(v27);
  if (v2)
  {

    v46 = sub_10003FEC4;
    v47 = 0;
    aBlock = _NSConcreteStackBlock;
    v43 = 1107296256;
    v44 = sub_1000043B8;
    v45 = &unk_10019B7B0;
  }
  else
  {

    v46 = sub_10003FEC4;
    v47 = 0;
    aBlock = _NSConcreteStackBlock;
    v43 = 1107296256;
    v44 = sub_1000043B8;
    v45 = &unk_10019B7D8;
  }
  v33 = _Block_copy(&aBlock);
  objc_msgSend(v13, "endSessionWithCompletion:", v33);
  _Block_release(v33);

  swift_release(v5);
  swift_unknownObjectRelease(v13);
}

uint64_t sub_100041E10()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100041F00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001AF390);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001AF390);
  if (qword_1001AD170 != -1)
    swift_once(&qword_1001AD170, sub_1000CC794);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4E40);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100041F90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for OSSignposter(0);
  sub_1000039D4(v0, qword_1001AF3A8);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001AF3A8);
  if (qword_1001ACF10 != -1)
    swift_once(&qword_1001ACF10, sub_10003B9E0);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4B28);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100042020()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t ObjectType;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v0 + 264);
  ObjectType = swift_getObjectType(v10);
  aBlock[4] = BitString.init(data:unusedBits:);
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000043B8;
  aBlock[3] = &unk_10019BB60;
  v12 = _Block_copy(aBlock);
  swift_unknownObjectRetain(v10);
  j___s8Dispatch0A3QoSV11unspecifiedACvgZ(ObjectType);
  sub_1000043E4();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v9, v5, v12, ObjectType);
  _Block_release(v12);
  swift_unknownObjectRelease(v10);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v13 = *(_QWORD *)(v1 + 264);
  swift_getObjectType(v13);
  swift_unknownObjectRetain(v13);
  OS_dispatch_source.cancel()();
  swift_unknownObjectRelease(v13);
  if ((*(_BYTE *)(v1 + 272) & 1) == 0)
  {
    v14 = *(_QWORD *)(v1 + 264);
    swift_getObjectType(v14);
    swift_unknownObjectRetain(v14);
    OS_dispatch_source.resume()();
    swift_unknownObjectRelease(v14);
  }
  sub_100048DA8();
  sub_10004B64C();
  v15 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v16 = AVSystemController_RecordingStateDidChangeNotification;
  v17 = objc_msgSend((id)objc_opt_self(AVSystemController), "sharedInstance");
  objc_msgSend(v15, "removeObserver:name:object:", v1, v16, v17);

  sub_100005D3C((_QWORD *)(v1 + 16));
  sub_10004B514(*(_QWORD *)(v1 + 56), *(const char **)(v1 + 64), *(_TtC14softposreaderd12RemoteReader **)(v1 + 72), *(void **)(v1 + 80), *(void **)(v1 + 88), *(void **)(v1 + 96), *(void **)(v1 + 104), *(void **)(v1 + 112), *(_QWORD *)(v1 + 120), *(_QWORD *)(v1 + 128));
  sub_10000A9B0(*(_QWORD *)(v1 + 136), *(_QWORD *)(v1 + 144));
  sub_100005D3C((_QWORD *)(v1 + 160));
  sub_100005D3C((_QWORD *)(v1 + 200));
  sub_10004B5D0(*(_QWORD *)(v1 + 248), *(_QWORD *)(v1 + 256));
  swift_unknownObjectRelease(*(_QWORD *)(v1 + 264));
  swift_release(*(_QWORD *)(v1 + 280));

  swift_release(*(_QWORD *)(v1 + 296));
  sub_100005D3C((_QWORD *)(v1 + 304));
  sub_100005D3C((_QWORD *)(v1 + 344));
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(v1 + 392), v18, v19, v20, v21, v22, v23, v24);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(v1 + 408), v25, v26, v27, v28, v29, v30, v31);
  return v1;
}

uint64_t sub_1000422F8()
{
  uint64_t v0;

  sub_100042020();
  return swift_deallocClassInstance(v0, 416, 7);
}

void sub_100042318(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  NSObject *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  uint64_t v46;
  uint8_t *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint8_t *v60;
  uint64_t v61;
  NSObject *v62;
  os_signpost_type_t v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  uint8_t *v67;
  os_signpost_id_t v68;
  os_signpost_type_t v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, char *, uint64_t);
  char v79;
  os_log_t v80;
  _TtC14softposreaderd12RemoteReader *v81;
  uint64_t v82;
  NSObject *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  char *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  _TtC14softposreaderd12RemoteReader *v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  uint64_t v108;
  os_signpost_type_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  const char *v115;
  char *v116;
  os_log_t v117;
  uint8_t *v118;
  os_signpost_id_t v119;
  void (*v120)(char *, uint64_t);
  uint64_t v121;
  uint8_t *v122;
  uint64_t v123;
  NSObject *v124;
  os_signpost_type_t v125;
  char v126;
  uint64_t v127;
  char *v128;
  void (*v129)(char *, uint8_t *, uint64_t);
  uint8_t *v130;
  os_signpost_id_t v131;
  uint8_t *v132;
  uint64_t v133;
  NSObject *v134;
  os_log_type_t v135;
  _BOOL4 v136;
  uint64_t v137;
  uint8_t *v138;
  uint64_t v139;
  SEL v140;
  id v141;
  id v142;
  id v143;
  id v144;
  id v145;
  id v146;
  uint64_t v147;
  NSObject *v148;
  char *v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  const char *v155;
  int v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  void *v160;
  id v161;
  id v162;
  char v163;
  char *v164;
  os_unfair_lock_s *v165;
  os_unfair_lock_s *v166;
  _TtC14softposreaderd12RemoteReader **v167;
  uint64_t v168;
  os_unfair_lock_s *v169;
  os_unfair_lock_s *v170;
  uint64_t v171;
  char *v172;
  char v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t inited;
  _TtC14softposreaderd12RemoteReader *v192;
  unint64_t v193;
  _TtC14softposreaderd12RemoteReader *v194;
  _QWORD *v195;
  SEL v196;
  id v197;
  id v198;
  id v199;
  id v200;
  id v201;
  id v202;
  uint64_t v203;
  unint64_t v204;
  os_unfair_lock_s *v205;
  _TtC14softposreaderd12RemoteReader **v206;
  os_unfair_lock_s *v207;
  uint64_t v208;
  SEL v209;
  id v210;
  id v211;
  id v212;
  id v213;
  id v214;
  id v215;
  uint64_t v216;
  NSObject *v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  const char *v224;
  const char *v225;
  const char *v226;
  char *v227;
  uint64_t v228;
  uint8_t *v229;
  os_signpost_id_t v230;
  void (*v231)(char *, uint64_t);
  char *v232;
  uint64_t v233;
  _QWORD *v234;
  NSObject *v235;
  os_log_type_t v236;
  int v237;
  uint8_t *v238;
  uint8_t *v239;
  uint8_t *v240;
  _QWORD *v241;
  uint64_t v242;
  unint64_t v243;
  _TtC14softposreaderd12RemoteReader *v244;
  SEL v245;
  id v246;
  id v247;
  id v248;
  id v249;
  id v250;
  id v251;
  uint8_t *v252;
  _QWORD *v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  SEL v257;
  id v258;
  id v259;
  id v260;
  id v261;
  id v262;
  id v263;
  uint64_t v264;
  void (*v265)(char *, uint64_t);
  uint64_t v266;
  NSObject *v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  os_signpost_type_t v271;
  uint64_t v272;
  char *v273;
  uint64_t v274;
  const char *v275;
  const char *v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  _QWORD *v280;
  SEL v281;
  id v282;
  id v283;
  id v284;
  id v285;
  id v286;
  id v287;
  uint64_t v288;
  NSObject *v289;
  uint64_t v290;
  uint64_t v291;
  int v292;
  uint64_t v293;
  char *v294;
  uint64_t v295;
  const char *v296;
  int v297;
  const char *v298;
  char *v299;
  char *v300;
  uint64_t v301;
  uint8_t *v302;
  os_signpost_id_t v303;
  char *v304;
  uint8_t *v305;
  os_signpost_id_t v306;
  char *v307;
  uint8_t *v308;
  os_signpost_id_t v309;
  os_log_t v310;
  uint8_t *v311;
  uint64_t v312;
  void (*v313)(char *, uint64_t);
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  void *v319;
  void *v320;
  void *v321;
  void *v322;
  void *v323;
  _TtC14softposreaderd12RemoteReader *v324;
  const char *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  unint64_t v331;
  _TtC14softposreaderd12RemoteReader *v332;
  _QWORD *v333;
  uint64_t v334;
  char *v335;
  char *v336;
  char *v337;
  char *v338;
  char *v339;
  char *v340;
  char *v341;
  uint64_t v342;
  uint64_t v343;
  char *v344;
  char *v345;
  char *v346;
  uint8_t *v347;
  char *v348;
  uint8_t *v349;
  uint64_t v350;
  _QWORD *v351;
  uint64_t v352;
  const char *v353;
  uint64_t v354;
  uint64_t v355;
  void (*v356)(char *, char *, uint64_t);
  os_log_t v357;
  uint64_t *v358;
  char *v359;
  char *v360;
  _QWORD *v361;
  uint64_t v362;
  uint64_t v363;
  _QWORD *v364;
  _QWORD v365[6];
  unsigned __int8 v366;
  uint64_t v367;
  unint64_t v368;
  _QWORD v369[5];
  _QWORD *v370;

  v2 = v1;
  v4 = type metadata accessor for OSSignpostError(0);
  v5 = *(const char **)(v4 - 8);
  v352 = v4;
  v353 = v5;
  v6 = __chkstk_darwin(v4);
  v340 = (char *)&v316 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v346 = (char *)&v316 - v9;
  v10 = __chkstk_darwin(v8);
  v337 = (char *)&v316 - v11;
  v12 = __chkstk_darwin(v10);
  v350 = (uint64_t)&v316 - v13;
  v14 = __chkstk_darwin(v12);
  v336 = (char *)&v316 - v15;
  __chkstk_darwin(v14);
  v335 = (char *)&v316 - v16;
  v17 = type metadata accessor for DispatchWorkItemFlags(0);
  v342 = *(_QWORD *)(v17 - 8);
  v343 = v17;
  __chkstk_darwin(v17);
  v341 = (char *)&v316 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for OSSignpostID(0);
  v355 = *(_QWORD *)(v19 - 8);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v316 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v20);
  v348 = (char *)&v316 - v24;
  v25 = __chkstk_darwin(v23);
  v339 = (char *)&v316 - v26;
  v27 = __chkstk_darwin(v25);
  v357 = (os_log_t)((char *)&v316 - v28);
  v29 = __chkstk_darwin(v27);
  v338 = (char *)&v316 - v30;
  v31 = __chkstk_darwin(v29);
  v344 = (char *)&v316 - v32;
  v33 = __chkstk_darwin(v31);
  v35 = (uint8_t *)&v316 - v34;
  v36 = __chkstk_darwin(v33);
  v38 = (char *)&v316 - v37;
  __chkstk_darwin(v36);
  v360 = (char *)&v316 - v39;
  if (qword_1001ACF40 != -1)
    swift_once(&qword_1001ACF40, sub_100041F00);
  v40 = type metadata accessor for Logger(0);
  v41 = sub_100003A14(v40, (uint64_t)qword_1001AF390);
  v42 = a1;
  v358 = (uint64_t *)v41;
  v43 = Logger.logObject.getter(v42);
  v44 = static os_log_type_t.default.getter();
  v45 = os_log_type_enabled(v43, v44);
  v361 = v2;
  v349 = v35;
  v359 = v38;
  v345 = v22;
  v351 = v42;
  if (v45)
  {
    v46 = swift_slowAlloc(12, -1);
    v354 = v19;
    v47 = (uint8_t *)v46;
    v48 = (_QWORD *)swift_slowAlloc(8, -1);
    v347 = v47;
    *(_DWORD *)v47 = 138412290;
    v364 = v42;
    v49 = v42;
    v38 = v359;
    v2 = v361;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v364, v365, v47 + 4, v47 + 12);
    *v48 = v42;

    v50 = v347;
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "capturePIN(parameters: %@)", v347, 0xCu);
    v51 = sub_100003A2C((uint64_t *)&unk_1001AE430);
    swift_arrayDestroy(v48, 1, v51);
    swift_slowDealloc(v48, -1, -1);
    v52 = v354;
    swift_slowDealloc(v50, -1, -1);

  }
  else
  {
    v52 = v19;

  }
  v54 = v360;
  if ((v2[19] & 1) != 0)
  {
    v55 = Logger.logObject.getter(v53);
    v56 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "PIN capture in progress", v57, 2u);
      swift_slowDealloc(v57, -1, -1);
    }

    v58 = sub_1000247F4(11004, 0xD00000000000001FLL, (void *)0x800000010016B870, 0);
    swift_willThrow(v58);
    return;
  }
  if (qword_1001ACF48 != -1)
    swift_once(&qword_1001ACF48, sub_100041F90);
  v59 = type metadata accessor for OSSignposter(0);
  v60 = (uint8_t *)sub_100003A14(v59, (uint64_t)qword_1001AF3A8);
  v61 = static OSSignpostID.exclusive.getter();
  v347 = v60;
  v62 = OSSignposter.logHandle.getter(v61);
  v63 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v64 = v38;
    v65 = v355;
    v66 = *(void (**)(char *, char *, uint64_t))(v355 + 16);
    v66(v64, v54, v52);
    v67 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v67 = 0;
    v68 = OSSignpostID.rawValue.getter(v67);
    v69 = v63;
    v70 = v65;
    v38 = v64;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v62, v69, v68, "pin-captureStart", "begin capture pin initialization", v67, 2u);
    swift_slowDealloc(v67, -1, -1);

    (*(void (**)(char *, uint64_t))(v70 + 8))(v64, v52);
  }
  else
  {

    v70 = v355;
    v66 = *(void (**)(char *, char *, uint64_t))(v355 + 16);
  }
  v71 = v356;
  v356 = v66;
  v66(v38, v54, v52);
  v72 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v72, *(unsigned int *)(v72 + 48), *(unsigned __int16 *)(v72 + 52));
  v73 = OSSignpostIntervalState.init(id:isOpen:)(v38, 1);
  v360 = *(char **)(v70 + 8);
  ((void (*)(char *, uint64_t))v360)(v54, v52);
  v74 = v361[41];
  v333 = v361 + 38;
  v75 = sub_100005EF8(v361 + 38, v74);
  __chkstk_darwin(v75);
  v314 = v76;
  LOBYTE(v315) = 0;
  v334 = sub_100003A2C(&qword_1001B12E0);
  OS_dispatch_queue.sync<A>(execute:)(v369, sub_10004B9E0, &v316 - 4, v334);
  v77 = v52;
  if (!v369[3])
  {
    sub_100007B30((uint64_t)v369);
    v104 = v353;
    v80 = v357;
LABEL_24:
    v105 = sub_1000247F4(11004, 0xD00000000000002BLL, (void *)0x800000010016B420, 0);
    v106 = swift_willThrow(v105);
    v107 = OSSignposter.logHandle.getter(v106);
    v108 = OSSignpostIntervalState.signpostID.getter();
    v109 = static os_signpost_type_t.end.getter(v108);
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {

      ((void (*)(os_log_t, uint64_t))v360)(v80, v77);
      v114 = v73;
LABEL_31:
      swift_release(v114);
      return;
    }
    v358 = (uint64_t *)v105;
    v110 = swift_retain();
    v111 = v350;
    checkForErrorAndConsumeState(state:)(v110);
    swift_release(v73);
    v112 = v352;
    v113 = (*((uint64_t (**)(uint64_t, uint64_t))v104 + 11))(v111, v352);
    v355 = v73;
    if (v113 == enum case for OSSignpostError.doubleEnd(_:))
    {
      v115 = "[Error] Interval already ended";
    }
    else
    {
      (*((void (**)(uint64_t, uint64_t))v104 + 1))(v111, v112);
      v115 = "end capture pin initialization";
    }
    v116 = v359;
    v356(v359, (char *)v80, v77);
    v117 = v80;
    v118 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v118 = 0;
    v119 = OSSignpostID.rawValue.getter(v118);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v107, v109, v119, "pin-captureStart", v115, v118, 2u);
    swift_slowDealloc(v118, -1, -1);

    v120 = (void (*)(char *, uint64_t))v360;
    ((void (*)(os_log_t, uint64_t))v360)(v117, v77);
    v120(v116, v77);
LABEL_30:
    v114 = v355;
    goto LABEL_31;
  }
  v78 = v71;
  v79 = swift_dynamicCast(&v364, v369, (char *)&type metadata for Any + 8, &type metadata for InternalTransactionData, 6);
  v80 = v357;
  if ((v79 & 1) == 0)
  {
    v104 = v353;
    goto LABEL_24;
  }
  v354 = v77;
  v355 = v73;
  v82 = v365[0];
  v81 = (_TtC14softposreaderd12RemoteReader *)v365[1];
  v84 = v365[2];
  v83 = v365[3];
  v85 = v365[4];
  v86 = v365[5];
  v87 = v366;
  v89 = v367;
  v88 = v368;
  v327 = (uint64_t)v78;
  v90 = v361;
  v326 = v361[7];
  v325 = (const char *)v361[8];
  v324 = (_TtC14softposreaderd12RemoteReader *)v361[9];
  v323 = (void *)v361[10];
  v322 = (void *)v361[11];
  v321 = (void *)v361[12];
  v320 = (void *)v361[13];
  v319 = (void *)v361[14];
  v91 = v361[15];
  v92 = v361[16];
  v317 = v365[0];
  v318 = v91;
  v361[7] = v364;
  v90[8] = v82;
  v90[9] = v81;
  v90[10] = v84;
  v90[11] = v83;
  v90[12] = v85;
  v90[13] = v86;
  v90[14] = v87;
  v90[15] = v89;
  v90[16] = v88;
  v332 = v81;
  swift_bridgeObjectRetain();
  v350 = v84;
  v357 = v83;
  sub_100005D9C(v84, (unint64_t)v83);
  v328 = v85;
  v329 = v86;
  sub_100005D9C(v85, v86);
  v330 = v89;
  v331 = v88;
  sub_100005D9C(v89, v88);
  sub_10004B514(v326, v325, v324, v323, v322, v321, v320, v319, v318, v92);
  v93 = v327;
  sub_100043EA8(v351);
  if (v93)
  {
    v364 = (_QWORD *)v93;
    swift_errorRetain();
    v95 = sub_100003A2C((uint64_t *)&unk_1001B1280);
    type metadata accessor for PINControllerError(0);
    v97 = v96;
    v98 = swift_dynamicCast(v369, &v364, v95, v96, 0);
    v99 = v359;
    if (v98)
    {
      v100 = (_QWORD *)v369[0];
      v370 = (_QWORD *)v369[0];
      v101 = sub_100005F1C((unint64_t *)&qword_1001AD868, (uint64_t (*)(uint64_t))type metadata accessor for PINControllerError, (uint64_t)&unk_10015C238);
      v102 = _BridgedStoredNSError.errorCode.getter(v97, v101);
      v103 = v332;
      if (v102 >= 11000)
      {
        v370 = v100;
        if (_BridgedStoredNSError.errorCode.getter(v97, v101) <= 11999)
        {
          swift_errorRelease();
          v234 = v100;
          v235 = Logger.logObject.getter(v234);
          v236 = static os_log_type_t.error.getter();
          v237 = v236;
          if (os_log_type_enabled(v235, v236))
          {
            LODWORD(v358) = v237;
            v238 = (uint8_t *)swift_slowAlloc(12, -1);
            v351 = (_QWORD *)swift_slowAlloc(32, -1);
            v370 = v351;
            v349 = v238;
            *(_DWORD *)v238 = 136315138;
            v239 = v238 + 12;
            v240 = v238 + 4;
            v363 = (uint64_t)v234;
            v241 = v234;
            v242 = String.init<A>(describing:)(&v363, v97);
            v244 = (_TtC14softposreaderd12RemoteReader *)v243;
            v363 = sub_1000056EC(v242, v243, (uint64_t *)&v370);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v363, &v364, v240, v239);

            v99 = v359;
            swift_bridgeObjectRelease(v244, v245, v246, v247, v248, v249, v250, v251);
            v252 = v349;
            _os_log_impl((void *)&_mh_execute_header, v235, (os_log_type_t)v358, "validation failed: %s", v349, 0xCu);
            v253 = v351;
            swift_arrayDestroy(v351, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v253, -1, -1);
            swift_slowDealloc(v252, -1, -1);

          }
          else
          {

          }
          v277 = v339;
          v278 = v361[37];
          v370 = v234;
          v279 = _BridgedStoredNSError.errorCode.getter(v97, v101);
          *(_BYTE *)(v278 + 120) = 0;
          *(_QWORD *)(v278 + 152) = v279;
          v280 = v234;
          swift_willThrow(v280);
          swift_bridgeObjectRelease(v332, v281, v282, v283, v284, v285, v286, v287);
          sub_100005DE0(v350, (unint64_t)v357);
          sub_100005DE0(v328, v329);
          sub_100005DE0(v330, v331);

          v288 = swift_errorRelease();
          v289 = OSSignposter.logHandle.getter(v288);
          v290 = v355;
          v291 = OSSignpostIntervalState.signpostID.getter();
          v292 = static os_signpost_type_t.end.getter(v291);
          if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
          {

            ((void (*)(char *, uint64_t))v360)(v277, v354);
            v114 = v290;
            goto LABEL_31;
          }
          v293 = swift_retain();
          v294 = v337;
          checkForErrorAndConsumeState(state:)(v293);
          swift_release(v290);
          v295 = v352;
          v296 = v353;
          v297 = (*((uint64_t (**)(char *, uint64_t))v353 + 11))(v294, v352);
          LODWORD(v361) = v292;
          if (v297 == enum case for OSSignpostError.doubleEnd(_:))
          {
            v298 = "[Error] Interval already ended";
          }
          else
          {
            (*((void (**)(char *, uint64_t))v296 + 1))(v294, v295);
            v298 = "end capture pin initialization";
          }
          v299 = v99;
          v300 = v99;
          v301 = v354;
          v356(v300, v277, v354);
          v302 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v302 = 0;
          v303 = OSSignpostID.rawValue.getter(v302);
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v289, (os_signpost_type_t)v361, v303, "pin-captureStart", v298, v302, 2u);
          swift_slowDealloc(v302, -1, -1);

          v231 = (void (*)(char *, uint64_t))v360;
          ((void (*)(char *, uint64_t))v360)(v277, v301);
          v232 = v299;
          v233 = v301;
          goto LABEL_53;
        }
      }

    }
    else
    {
      v103 = v332;
    }
    v133 = swift_errorRelease();
    v134 = Logger.logObject.getter(v133);
    v135 = static os_log_type_t.error.getter();
    v136 = os_log_type_enabled(v134, v135);
    v137 = v355;
    if (v136)
    {
      v138 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v138 = 0;
      _os_log_impl((void *)&_mh_execute_header, v134, v135, "throwing non PINControllerError?", v138, 2u);
      swift_slowDealloc(v138, -1, -1);
    }

    swift_errorRetain();
    sub_1000247F4(11004, 0, 0, v93);
    v139 = swift_errorRelease();
    swift_willThrow(v139);
    swift_errorRelease();
    swift_bridgeObjectRelease(v103, v140, v141, v142, v143, v144, v145, v146);
    sub_100005DE0(v350, (unint64_t)v357);
    sub_100005DE0(v328, v329);
    v147 = sub_100005DE0(v330, v331);
    v148 = OSSignposter.logHandle.getter(v147);
    v149 = v348;
    v150 = OSSignpostIntervalState.signpostID.getter();
    v151 = static os_signpost_type_t.end.getter(v150);
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {

      ((void (*)(char *, uint64_t))v360)(v149, v354);
      swift_release(v137);
      return;
    }
    v152 = swift_retain();
    v153 = v346;
    checkForErrorAndConsumeState(state:)(v152);
    swift_release(v137);
    v154 = v352;
    v155 = v353;
    v156 = (*((uint64_t (**)(char *, uint64_t))v353 + 11))(v153, v352);
    LODWORD(v361) = v151;
    if (v156 == enum case for OSSignpostError.doubleEnd(_:))
    {
      v226 = "[Error] Interval already ended";
    }
    else
    {
      (*((void (**)(char *, uint64_t))v155 + 1))(v153, v154);
      v226 = "end capture pin initialization";
    }
    v227 = v348;
    v228 = v354;
    v356(v99, v348, v354);
    v229 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v229 = 0;
    v230 = OSSignpostID.rawValue.getter(v229);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v148, (os_signpost_type_t)v361, v230, "pin-captureStart", v226, v229, 2u);
    swift_slowDealloc(v229, -1, -1);

    v231 = (void (*)(char *, uint64_t))v360;
    ((void (*)(char *, uint64_t))v360)(v227, v228);
    v232 = v99;
    v233 = v228;
LABEL_53:
    v231(v232, v233);
    v114 = v355;
    goto LABEL_31;
  }
  v121 = OSSignposter.logHandle.getter(v94);
  v122 = v349;
  v123 = OSSignpostID.init(log:)(v121);
  v124 = OSSignposter.logHandle.getter(v123);
  v125 = static os_signpost_type_t.begin.getter();
  v126 = OS_os_log.signpostsEnabled.getter();
  v127 = v354;
  v128 = v359;
  if ((v126 & 1) != 0)
  {
    v129 = (void (*)(char *, uint8_t *, uint64_t))v356;
    v356(v359, (char *)v122, v354);
    v130 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v130 = 0;
    v131 = OSSignpostID.rawValue.getter(v130);
    v127 = v354;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v124, v125, v131, "pin-totalCaptureTime", "begin pin capture", v130, 2u);
    v132 = v130;
    v122 = v349;
    swift_slowDealloc(v132, -1, -1);

    ((void (*)(char *, uint64_t))v360)(v128, v127);
  }
  else
  {

    v129 = (void (*)(char *, uint8_t *, uint64_t))v356;
  }
  v129(v128, v122, v127);
  swift_allocObject(v72, *(unsigned int *)(v72 + 48), *(unsigned __int16 *)(v72 + 52));
  v157 = OSSignpostIntervalState.init(id:isOpen:)(v128, 1);
  v158 = v361;
  v159 = v361[35];
  v361[35] = v157;
  swift_release(v159);
  v160 = v351;
  v161 = objc_msgSend(v351, "pinToken");
  v162 = v161;
  if (v161)

  v163 = v162 != 0;
  v164 = (char *)v158[37];
  v164[123] = v163;
  sub_10004CEF4(v163);
  v165 = (os_unfair_lock_s *)*((_QWORD *)v164 + 7);
  v166 = v165 + 8;
  v167 = (_TtC14softposreaderd12RemoteReader **)&v165[4];
  LOBYTE(v364) = 13;
  os_unfair_lock_lock(v165 + 8);
  sub_10010CC54(v167, (unsigned __int8 *)&v364);
  os_unfair_lock_unlock(v166);
  v168 = 2;
  v169 = (os_unfair_lock_s *)*((_QWORD *)v164 + 7);
  v170 = v169 + 8;
  v171 = (uint64_t)&v169[4];
  v172 = &byte_100198570;
  do
  {
    v173 = *v172++;
    LOBYTE(v364) = v173;
    os_unfair_lock_lock(v170);
    sub_10010CC6C(v171, (unsigned __int8 *)&v364);
    os_unfair_lock_unlock(v170);
    --v168;
  }
  while (v168);
  v348 = v164;
  objc_msgSend(v160, "transactionDataLifetime");
  v174 = v361;
  v361[30] = v175;
  sub_1000482F0();
  sub_100047C94();
  v176 = v174[23];
  v177 = v174[24];
  sub_100005EF8(v174 + 20, v176);
  v178 = (*(uint64_t (**)(uint64_t, os_log_t, uint64_t, uint64_t))(v177 + 8))(v350, v357, v176, v177);
  v180 = v179;
  v182 = v181;
  v184 = v183;
  v351 = v174 + 20;
  v185 = *sub_100005EF8(v333, v174[41]);
  v186 = sub_100005D9C(v182, v184);
  v187 = v341;
  v188 = static DispatchWorkItemFlags.barrier.getter(v186);
  v358 = &v316;
  __chkstk_darwin(v188);
  LOBYTE(v314) = 0;
  v315 = v185;
  OS_dispatch_queue.sync<A>(flags:execute:)(&v364, v187, sub_100037FC4, &v316 - 4, v334);
  v346 = 0;
  (*(void (**)(char *, uint64_t))(v342 + 8))(v187, v343);
  sub_100007B30((uint64_t)&v364);
  v189 = v361[28];
  v358 = (uint64_t *)v361[29];
  sub_100005EF8(v361 + 25, v189);
  v190 = sub_100003A2C(&qword_1001ADA18);
  inited = swift_initStackObject(v190, &v362);
  *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
  strcpy((char *)(inited + 32), "transactionId");
  *(_WORD *)(inited + 46) = -4864;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 80) = &protocol witness table for String;
  v192 = v332;
  *(_QWORD *)(inited + 48) = v317;
  *(_QWORD *)(inited + 56) = v192;
  swift_bridgeObjectRetain();
  v193 = sub_1000E84EC(inited);
  sub_100115684(24, v193, v189, (uint64_t)v358);
  v194 = (_TtC14softposreaderd12RemoteReader *)v193;
  v195 = v361;
  swift_bridgeObjectRelease(v194, v196, v197, v198, v199, v200, v201, v202);
  v203 = v195[17];
  v204 = v195[18];
  v195[17] = v182;
  v195[18] = v184;
  sub_10000A9B0(v203, v204);
  sub_10004B64C();
  if ((sub_10004906C() & 1) == 0)
  {
    v254 = v348;
    v348[120] = 0;
    *((_QWORD *)v254 + 19) = 11013;
    sub_10004C650();
    v255 = v195[23];
    v256 = v195[24];
    sub_100005EF8(v351, v255);
    (*(void (**)(uint64_t, uint64_t))(v256 + 40))(v255, v256);
    v358 = (uint64_t *)sub_1000247F4(11013, 0xD000000000000019, (void *)0x800000010016B850, 0);
    swift_willThrow(v358);
    swift_bridgeObjectRelease(v192, v257, v258, v259, v260, v261, v262, v263);
    sub_100005DE0(v350, (unint64_t)v357);
    sub_100005DE0(v328, v329);
    sub_100005DE0(v330, v331);
    sub_100005DE0(v178, v180);
    sub_100005DE0(v182, v184);
    v264 = v354;
    v265 = (void (*)(char *, uint64_t))v360;
    v266 = ((uint64_t (*)(uint8_t *, uint64_t))v360)(v349, v354);
    v267 = OSSignposter.logHandle.getter(v266);
    v268 = v338;
    v269 = v355;
    v270 = OSSignpostIntervalState.signpostID.getter();
    v271 = static os_signpost_type_t.end.getter(v270);
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {

      v265(v268, v264);
      v114 = v269;
      goto LABEL_31;
    }
    v272 = swift_retain();
    v273 = v336;
    checkForErrorAndConsumeState(state:)(v272);
    swift_release(v269);
    v274 = v352;
    v275 = v353;
    if ((*((unsigned int (**)(char *, uint64_t))v353 + 11))(v273, v352) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v276 = "[Error] Interval already ended";
    }
    else
    {
      (*((void (**)(char *, uint64_t))v275 + 1))(v273, v274);
      v276 = "end capture pin initialization";
    }
    v304 = v359;
    v356(v359, v268, v264);
    v305 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v305 = 0;
    v306 = OSSignpostID.rawValue.getter(v305);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v267, v271, v306, "pin-captureStart", v276, v305, 2u);
    swift_slowDealloc(v305, -1, -1);

    v265(v268, v264);
    v265(v304, v264);
    goto LABEL_30;
  }
  LOBYTE(v364) = 8;
  v205 = (os_unfair_lock_s *)*((_QWORD *)v348 + 7);
  v206 = (_TtC14softposreaderd12RemoteReader **)&v205[4];
  v207 = v205 + 8;
  os_unfair_lock_lock(v205 + 8);
  v208 = (uint64_t)v346;
  sub_10010CC54(v206, (unsigned __int8 *)&v364);
  v358 = (uint64_t *)v208;
  if (v208)
  {
    os_unfair_lock_unlock(v207);
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock(v207);
    swift_bridgeObjectRelease(v332, v209, v210, v211, v212, v213, v214, v215);
    sub_100005DE0(v350, (unint64_t)v357);
    sub_100005DE0(v328, v329);
    sub_100005DE0(v330, v331);
    v216 = ((uint64_t (*)(uint8_t *, uint64_t))v360)(v349, v354);
    *((_BYTE *)v195 + 152) = 1;
    v217 = OSSignposter.logHandle.getter(v216);
    v218 = v344;
    v219 = v355;
    v220 = OSSignpostIntervalState.signpostID.getter();
    LODWORD(v361) = static os_signpost_type_t.end.getter(v220);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v357 = v217;
      v221 = swift_retain();
      v222 = v335;
      checkForErrorAndConsumeState(state:)(v221);
      swift_release(v219);
      v223 = v352;
      v224 = v353;
      if ((*((unsigned int (**)(char *, uint64_t))v353 + 11))(v222, v352) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v225 = "[Error] Interval already ended";
      }
      else
      {
        (*((void (**)(char *, uint64_t))v224 + 1))(v222, v223);
        v225 = "end capture pin initialization";
      }
      v353 = v225;
      v307 = v359;
      v356(v359, v344, v354);
      v308 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v308 = 0;
      v309 = OSSignpostID.rawValue.getter(v308);
      v310 = v357;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v357, (os_signpost_type_t)v361, v309, "pin-captureStart", v353, v308, 2u);
      v311 = v308;
      v312 = v354;
      swift_slowDealloc(v311, -1, -1);

      v313 = (void (*)(char *, uint64_t))v360;
      ((void (*)(char *, uint64_t))v360)(v344, v312);
      v313(v307, v312);
    }
    else
    {

      ((void (*)(char *, uint64_t))v360)(v218, v354);
    }
    swift_release(v355);
  }
}

void sub_100043EA8(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  _TtC14softposreaderd12RemoteReader *object;
  SEL v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  double v38;
  double v39;
  Swift::String v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t inited;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _TtC14softposreaderd12RemoteReader *v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  id v61;
  void *v62;
  uint64_t v63;
  _TtC14softposreaderd12RemoteReader *v64;
  _TtC14softposreaderd12RemoteReader *v65;
  const char *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  SEL v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  unint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  uint64_t v84;
  const char *v85;
  _TtC14softposreaderd12RemoteReader *v86;
  uint64_t v87;
  uint64_t v89;
  void *v90;
  _QWORD v91[3];
  _BYTE v92[96];
  _BYTE v93[8];

  v3 = v1;
  if (qword_1001ACF40 != -1)
    swift_once(&qword_1001ACF40, sub_100041F00);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100003A14(v4, (uint64_t)qword_1001AF390);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "DefaultPINController.validatePINParameters()", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  if (!v1[9])
  {
    v27 = sub_1000247F4(11004, 0xD000000000000037, (void *)0x800000010016B6A0, 0);
    goto LABEL_21;
  }
  v81 = v2;
  v84 = v1[7];
  v85 = (const char *)v1[8];
  v10 = (void *)v1[10];
  v9 = (void *)v1[11];
  v12 = (void *)v1[12];
  v11 = (void *)v1[13];
  v13 = v1[15];
  v83 = (void *)v1[14];
  v14 = v1[16];
  v86 = (_TtC14softposreaderd12RemoteReader *)v1[9];
  swift_bridgeObjectRetain();
  sub_100005D9C((uint64_t)v10, (unint64_t)v9);
  sub_100005D9C((uint64_t)v12, (unint64_t)v11);
  v87 = v13;
  v15 = sub_100005D9C(v13, v14);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  v82 = v9;
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v18 = 67109120;
    LODWORD(v89) = v84 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, (char *)&v89 + 4, v18 + 4, v18 + 8);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "internalTransactionData.pinRequired: %{BOOL}d", v18, 8u);
    swift_slowDealloc(v18, -1, -1);
  }

  v19 = objc_msgSend(a1, "digest");
  v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v22 = v21;

  sub_1001288E0(v20, v22);
  LOBYTE(v19) = v23;
  sub_100005DE0(v20, v22);
  if ((v19 & 1) == 0)
  {
    v89 = 0;
    v90 = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(138);
    v28._countAndFlagsBits = 0xD000000000000088;
    v28._object = (void *)0x800000010016B6E0;
    String.append(_:)(v28);
    v29 = Data.hexString()();
    object = (_TtC14softposreaderd12RemoteReader *)v29._object;
    String.append(_:)(v29);
    swift_bridgeObjectRelease(object, v31, v32, v33, v34, v35, v36, v37);
    v27 = sub_1000247F4(11004, v89, v90, 0);
    sub_10004B514(v84, v85, v86, v10, v82, v12, v11, v83, v87, v14);
    goto LABEL_21;
  }
  v24 = objc_msgSend(a1, "pinToken");
  if (v24)
  {

    if ((v84 & 1) != 0)
    {
      v27 = sub_1000247F4(11004, 0xD000000000000027, (void *)0x800000010016B800, 0);
      sub_10004B514(v84, v85, v86, v10, v82, v12, v11, v83, v87, v14);
      goto LABEL_21;
    }
  }
  v25 = objc_msgSend(a1, "pinToken");
  if (!v25)
  {
    v26 = v84 & 1;
    if ((v84 & 1) != 0)
      goto LABEL_18;
    v27 = sub_1000247F4(11004, 0xD00000000000003BLL, (void *)0x800000010016B770, 0);
    sub_10004B514(v84, v85, v86, v10, v82, v12, v11, v83, v87, v14);
LABEL_21:
    v41 = v3 + 25;
    v43 = v3[28];
    v42 = v3[29];
    sub_100005EF8(v41, v43);
    v44 = sub_100003A2C(&qword_1001ADA18);
    inited = swift_initStackObject(v44, v92);
    *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
    *(_QWORD *)(inited + 32) = 0xD000000000000010;
    *(_QWORD *)(inited + 40) = 0x800000010016B450;
    swift_getErrorValue(v27, v93, v91);
    v46 = v91[1];
    v47 = v91[2];
    swift_errorRetain();
    v48 = Error.localizedDescription.getter(v46, v47);
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 80) = &protocol witness table for String;
    *(_QWORD *)(inited + 48) = v48;
    *(_QWORD *)(inited + 56) = v49;
    v50 = (_TtC14softposreaderd12RemoteReader *)sub_1000E84EC(inited);
    sub_100115684(27, (uint64_t)v50, v43, v42);
    swift_bridgeObjectRelease(v50, v51, v52, v53, v54, v55, v56, v57);
    swift_willThrow(v58);
    swift_errorRelease();
    return;
  }

  v26 = v84 & 1;
LABEL_18:
  objc_msgSend(a1, "transactionDataLifetime");
  if (v38 <= 0.0 || (objc_msgSend(a1, "transactionDataLifetime"), v39 > 300.0))
  {
    v89 = 0;
    v90 = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(69);
    v40._countAndFlagsBits = 0xD000000000000043;
    v40._object = (void *)0x800000010016B7B0;
    String.append(_:)(v40);
    Double.write<A>(to:)(&v89, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, 300.0);
    v27 = sub_1000247F4(11010, v89, v90, 0);
    sub_10004B514(v84, v85, v86, v10, v82, v12, v11, v83, v87, v14);
    goto LABEL_21;
  }
  v59 = objc_msgSend(a1, "pinToken");
  if (!v59)
  {
    sub_10004B514(v84, v85, v86, v10, v9, v12, v11, v83, v87, v14);
    return;
  }

  v60 = v87;
  if (v26)
  {
    v80 = v14;
    goto LABEL_29;
  }
  v61 = objc_msgSend(a1, "pinToken");
  if (v61)
  {
    v62 = v61;
    v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
    v65 = v64;

    sub_10004860C(v63, (uint64_t)v65);
    if (v81)
    {
      swift_bridgeObjectRelease(v65, v66, v67, v68, v69, v70, v71, v72);
      v80 = v14;
      v60 = v87;
LABEL_29:
      sub_10004B514(v84, v85, v86, v10, v9, v12, v11, v83, v60, v80);
      return;
    }
    sub_10004B514(v84, v85, v86, v10, v9, v12, v11, v83, v87, v14);
    swift_bridgeObjectRelease(v65, v73, v74, v75, v76, v77, v78, v79);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000444F8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint8_t *v34;
  uint64_t v35;
  Swift::String v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  unint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_signpost_type_t v52;
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  char *v55;
  uint64_t v56;
  uint8_t *v57;
  os_signpost_id_t v58;
  os_signpost_type_t v59;
  char *v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  _QWORD *v69;
  void (*v70)(char *, char *, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  char *v86;
  uint64_t v87;
  os_signpost_type_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  char *v105;
  uint64_t v106;
  os_signpost_type_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  const char *v113;
  NSObject *v114;
  char *v115;
  uint64_t v116;
  os_signpost_type_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  NSObject *v125;
  os_log_type_t v126;
  uint8_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  _TtC14softposreaderd12RemoteReader *v132;
  void (*v133)(char *, uint64_t);
  SEL v134;
  id v135;
  id v136;
  id v137;
  id v138;
  id v139;
  id v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  NSObject *v145;
  char *v146;
  uint64_t v147;
  os_signpost_type_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  const char *v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint8_t *v158;
  os_signpost_id_t v159;
  void (*v160)(char *, uint64_t);
  char *v161;
  uint64_t v162;
  uint8_t *v163;
  os_signpost_id_t v164;
  void (*v165)(char *, uint64_t);
  const char *v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint8_t *v170;
  os_signpost_id_t v171;
  void (*v172)(char *, uint64_t);
  char *v173;
  char *v174;
  uint64_t v175;
  uint8_t *v176;
  os_signpost_id_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  char *v182;
  char *v183;
  char *v184;
  char *v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  char *v195;
  void (*v196)(char *, char *, uint64_t);
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;

  v4 = type metadata accessor for OSSignpostError(0);
  v189 = *(_QWORD *)(v4 - 8);
  v190 = v4;
  v5 = __chkstk_darwin(v4);
  v181 = (char *)&v178 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v178 - v8;
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v178 - v11;
  __chkstk_darwin(v10);
  v14 = (char *)&v178 - v13;
  v197 = type metadata accessor for OSSignpostID(0);
  v194 = *(_QWORD *)(v197 - 8);
  v15 = __chkstk_darwin(v197);
  v186 = (char *)&v178 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v178 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v178 - v21;
  v23 = __chkstk_darwin(v20);
  v184 = (char *)&v178 - v24;
  v25 = __chkstk_darwin(v23);
  v193 = (char *)&v178 - v26;
  __chkstk_darwin(v25);
  v195 = (char *)&v178 - v27;
  if (qword_1001ACF40 != -1)
    swift_once(&qword_1001ACF40, sub_100041F00);
  v28 = type metadata accessor for Logger(0);
  v29 = sub_100003A14(v28, (uint64_t)qword_1001AF390);
  sub_100005D9C(a1, a2);
  v30 = sub_100005D9C(a1, a2);
  v188 = v29;
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.info.getter();
  v33 = os_log_type_enabled(v31, v32);
  v185 = v19;
  v180 = v9;
  v187 = v22;
  v182 = v14;
  v183 = v12;
  v191 = a1;
  if (v33)
  {
    v34 = (uint8_t *)swift_slowAlloc(12, -1);
    v35 = swift_slowAlloc(32, -1);
    v200 = v35;
    *(_DWORD *)v34 = 136315138;
    v36 = Data.hexString()();
    v198 = sub_1000056EC(v36._countAndFlagsBits, (unint64_t)v36._object, &v200);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v198, &v199, v34 + 4, v34 + 12);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v36._object, v37, v38, v39, v40, v41, v42, v43);
    sub_100005DE0(a1, a2);
    v44 = a2;
    sub_100005DE0(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "DefaultPINController.addDigit(cipher: %s", v34, 0xCu);
    swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v34, -1, -1);
  }
  else
  {
    sub_100005DE0(a1, a2);
    v44 = a2;
    sub_100005DE0(a1, a2);
  }

  v46 = v195;
  v45 = v196;
  v47 = v194;
  if (*((_BYTE *)v196 + 152) != 1)
  {
    v63 = sub_1000247F4(11004, 0xD00000000000001BLL, (void *)0x800000010016B500, 0);
    return swift_willThrow(v63);
  }
  if (qword_1001ACF48 != -1)
    swift_once(&qword_1001ACF48, sub_100041F90);
  v48 = type metadata accessor for OSSignposter(0);
  v49 = sub_100003A14(v48, (uint64_t)qword_1001AF3A8);
  v50 = static OSSignpostID.exclusive.getter();
  v51 = OSSignposter.logHandle.getter(v50);
  v52 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v53 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
    v54 = v193;
    v55 = v46;
    v56 = v197;
    v53(v193, v55, v197);
    v57 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v57 = 0;
    v58 = OSSignpostID.rawValue.getter(v57);
    v59 = v52;
    v60 = v54;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v51, v59, v58, "pin-addDigit", "begin add digit daemon", v57, 2u);
    v61 = v57;
    v45 = v196;
    swift_slowDealloc(v61, -1, -1);

    v62 = v56;
    v46 = v195;
    (*(void (**)(char *, uint64_t))(v47 + 8))(v54, v62);
  }
  else
  {

    v53 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
    v60 = v193;
  }
  v65 = v197;
  v196 = v53;
  v53(v60, v46, v197);
  v66 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v66, *(unsigned int *)(v66 + 48), *(unsigned __int16 *)(v66 + 52));
  v67 = OSSignpostIntervalState.init(id:isOpen:)(v60, 1);
  v68 = *(void (**)(char *, uint64_t))(v47 + 8);
  v68(v46, v65);
  if (*((_QWORD *)v45 + 9))
  {
    sub_10004CA08();
    v69 = (_QWORD *)((char *)v45 + 160);
    v70 = v45;
    v71 = *((_QWORD *)v45 + 23);
    v72 = *((_QWORD *)v45 + 24);
    sub_100005EF8(v69, v71);
    v73 = v192;
    v74 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v72 + 16))(v191, v44, v71, v72);
    if (!v73)
    {
      *((_BYTE *)v70 + 273) = 0;
      v114 = OSSignposter.logHandle.getter(v74);
      v115 = v184;
      v116 = OSSignpostIntervalState.signpostID.getter();
      v117 = static os_signpost_type_t.end.getter(v116);
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v195 = (char *)v68;
        v118 = swift_retain();
        v119 = v182;
        checkForErrorAndConsumeState(state:)(v118);
        swift_release(v67);
        v121 = v189;
        v120 = v190;
        if ((*(unsigned int (**)(char *, uint64_t))(v189 + 88))(v119, v190) == enum case for OSSignpostError.doubleEnd(_:))
        {
          v122 = v67;
          v123 = "[Error] Interval already ended";
        }
        else
        {
          v161 = v119;
          v122 = v67;
          (*(void (**)(char *, uint64_t))(v121 + 8))(v161, v120);
          v123 = "end add digit daemon";
        }
        v142 = v193;
        v162 = v197;
        v196(v193, v115, v197);
        v163 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v163 = 0;
        v164 = OSSignpostID.rawValue.getter(v163);
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v114, v117, v164, "pin-addDigit", v123, v163, 2u);
        swift_slowDealloc(v163, -1, -1);

        v165 = (void (*)(char *, uint64_t))v195;
        ((void (*)(char *, uint64_t))v195)(v115, v162);
        v67 = v122;
        v68 = v165;
      }
      else
      {

        v142 = v115;
      }
      v141 = v142;
      goto LABEL_43;
    }
    v194 = v49;
    _s3__C4CodeOMa_2(0);
    v76 = v75;
    v200 = 12006;
    swift_errorRetain();
    v77 = sub_100005F1C(&qword_1001AD920, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_2, (uint64_t)&unk_10015C720);
    v78 = static _ErrorCodeProtocol.~= infix(_:_:)(&v200, v73, v76, v77);
    swift_errorRelease();
    if ((v78 & 1) != 0)
    {
      v79 = swift_errorRelease();
      v80 = Logger.logObject.getter(v79);
      v81 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v80, v81))
      {
        v82 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v82 = 0;
        _os_log_impl((void *)&_mh_execute_header, v80, v81, "Maximum Applet PIN length exceeded", v82, 2u);
        swift_slowDealloc(v82, -1, -1);
      }

      v83 = sub_1000247F4(11007, 0, 0, 0);
      v84 = swift_willThrow(v83);
      v85 = OSSignposter.logHandle.getter(v84);
      v86 = v185;
      v87 = OSSignpostIntervalState.signpostID.getter();
      v88 = static os_signpost_type_t.end.getter(v87);
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v195 = (char *)v68;
        v89 = swift_retain();
        v90 = v180;
        checkForErrorAndConsumeState(state:)(v89);
        swift_release(v67);
        v92 = v189;
        v91 = v190;
        v93 = (*(uint64_t (**)(char *, uint64_t))(v189 + 88))(v90, v190);
        v179 = v67;
        if (v93 == enum case for OSSignpostError.doubleEnd(_:))
        {
          v166 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v92 + 8))(v90, v91);
          v166 = "end add digit daemon";
        }
        v167 = v193;
        v168 = v185;
        v169 = v197;
        v196(v193, v185, v197);
        v170 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v170 = 0;
        v171 = OSSignpostID.rawValue.getter(v170);
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v85, v88, v171, "pin-addDigit", v166, v170, 2u);
        swift_slowDealloc(v170, -1, -1);

        v172 = (void (*)(char *, uint64_t))v195;
        ((void (*)(char *, uint64_t))v195)(v168, v169);
        v172(v167, v169);
        return swift_release(v179);
      }

      v141 = v86;
LABEL_43:
      v68(v141, v197);
      return swift_release(v67);
    }
    swift_errorRetain();
    v124 = swift_errorRetain();
    v125 = Logger.logObject.getter(v124);
    v126 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v125, v126))
    {
      v127 = (uint8_t *)swift_slowAlloc(12, -1);
      v128 = swift_slowAlloc(32, -1);
      v200 = v128;
      v195 = (char *)v68;
      *(_DWORD *)v127 = 136315138;
      v198 = v73;
      swift_errorRetain();
      v129 = sub_100003A2C((uint64_t *)&unk_1001B1280);
      v130 = String.init<A>(describing:)(&v198, v129);
      v132 = (_TtC14softposreaderd12RemoteReader *)v131;
      v198 = sub_1000056EC(v130, v131, &v200);
      v133 = (void (*)(char *, uint64_t))v195;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v198, &v199, v127 + 4, v127 + 12);
      swift_bridgeObjectRelease(v132, v134, v135, v136, v137, v138, v139, v140);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v125, v126, "Error adding digit: %s", v127, 0xCu);
      swift_arrayDestroy(v128, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v128, -1, -1);
      swift_slowDealloc(v127, -1, -1);
    }
    else
    {
      v133 = v68;
      swift_errorRelease();
      swift_errorRelease();
    }

    v143 = sub_1000247F4(11006, 0xD000000000000029, (void *)0x800000010016B670, 0);
    swift_willThrow(v143);
    v144 = swift_errorRelease();
    v145 = OSSignposter.logHandle.getter(v144);
    v146 = v186;
    v147 = OSSignpostIntervalState.signpostID.getter();
    v148 = static os_signpost_type_t.end.getter(v147);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v149 = swift_retain();
      v150 = v181;
      checkForErrorAndConsumeState(state:)(v149);
      v179 = v67;
      swift_release(v67);
      v152 = v189;
      v151 = v190;
      if ((*(unsigned int (**)(char *, uint64_t))(v189 + 88))(v150, v190) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v153 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v152 + 8))(v150, v151);
        v153 = "end add digit daemon";
      }
      v173 = v193;
      v174 = v186;
      v175 = v197;
      v196(v193, v186, v197);
      v176 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v176 = 0;
      v177 = OSSignpostID.rawValue.getter(v176);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v145, v148, v177, "pin-addDigit", v153, v176, 2u);
      swift_slowDealloc(v176, -1, -1);

      v133(v174, v175);
      v133(v173, v175);
      v154 = v179;
    }
    else
    {

      v133(v146, v197);
      v154 = v67;
    }
    return swift_release(v154);
  }
  else
  {
    v94 = sub_1000247F4(11004, 0xD000000000000013, (void *)0x800000010016B520, 0);
    v95 = *((_QWORD *)v45 + 37);
    v200 = v94;
    type metadata accessor for PINControllerError(0);
    v97 = v96;
    v98 = sub_100005F1C((unint64_t *)&qword_1001AD868, (uint64_t (*)(uint64_t))type metadata accessor for PINControllerError, (uint64_t)&unk_10015C238);
    v99 = _BridgedStoredNSError.errorCode.getter(v97, v98);
    *(_BYTE *)(v95 + 120) = 0;
    *(_QWORD *)(v95 + 152) = v99;
    sub_10004C650();
    v100 = *((_QWORD *)v45 + 23);
    v101 = *((_QWORD *)v45 + 24);
    sub_100005EF8((_QWORD *)v45 + 20, v100);
    v102 = (*(uint64_t (**)(uint64_t, uint64_t))(v101 + 40))(v100, v101);
    *((_BYTE *)v45 + 152) = 0;
    v103 = swift_willThrow(v102);
    v104 = OSSignposter.logHandle.getter(v103);
    v105 = v187;
    v106 = OSSignpostIntervalState.signpostID.getter();
    v107 = static os_signpost_type_t.end.getter(v106);
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {

      v141 = v105;
      goto LABEL_43;
    }
    v195 = (char *)v68;
    v108 = swift_retain();
    v109 = v183;
    checkForErrorAndConsumeState(state:)(v108);
    swift_release(v67);
    v111 = v189;
    v110 = v190;
    if ((*(unsigned int (**)(char *, uint64_t))(v189 + 88))(v109, v190) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v112 = v67;
      v113 = "[Error] Interval already ended";
    }
    else
    {
      v155 = v109;
      v112 = v67;
      (*(void (**)(char *, uint64_t))(v111 + 8))(v155, v110);
      v113 = "end add digit daemon";
    }
    v156 = v193;
    v157 = v197;
    v196(v193, v105, v197);
    v158 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v158 = 0;
    v159 = OSSignpostID.rawValue.getter(v158);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v104, v107, v159, "pin-addDigit", v113, v158, 2u);
    swift_slowDealloc(v158, -1, -1);

    v160 = (void (*)(char *, uint64_t))v195;
    ((void (*)(char *, uint64_t))v195)(v105, v157);
    v160(v156, v157);
    return swift_release(v112);
  }
}

void sub_1000452C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  char *v27;
  uint8_t *v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_signpost_type_t v34;
  char v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  uint8_t *v38;
  os_signpost_id_t v39;
  os_signpost_type_t v40;
  char *v41;
  uint8_t *v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  os_unfair_lock_s *v49;
  _TtC14softposreaderd12RemoteReader **v50;
  os_unfair_lock_s *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  char *v66;
  uint64_t v67;
  os_signpost_type_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  NSObject *v79;
  uint64_t v80;
  os_signpost_type_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  const char *v86;
  uint8_t *v87;
  os_signpost_id_t v88;
  uint8_t *v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t);
  const char *v92;
  char *v93;
  uint8_t *v94;
  os_signpost_id_t v95;
  void (*v96)(char *, uint64_t);
  _QWORD v97[2];
  char *v98;
  void (*v99)(char *, char *, uint64_t);
  void (*v100)(char *, uint64_t);
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;

  v2 = v1;
  v3 = v0;
  v106 = type metadata accessor for OSSignpostError(0);
  v108 = *(_QWORD *)(v106 - 8);
  v4 = __chkstk_darwin(v106);
  v102 = (char *)v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v103 = (char *)v97 - v7;
  __chkstk_darwin(v6);
  v9 = (char *)v97 - v8;
  v10 = type metadata accessor for OSSignpostID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)v97 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v104 = (char *)v97 - v16;
  v17 = __chkstk_darwin(v15);
  v107 = (char *)v97 - v18;
  v19 = __chkstk_darwin(v17);
  v109 = (char *)v97 - v20;
  __chkstk_darwin(v19);
  v22 = (char *)v97 - v21;
  if (qword_1001ACF40 != -1)
    swift_once(&qword_1001ACF40, sub_100041F00);
  v23 = type metadata accessor for Logger(0);
  v105 = sub_100003A14(v23, (uint64_t)qword_1001AF390);
  v24 = Logger.logObject.getter(v105);
  v25 = static os_log_type_t.info.getter();
  v26 = os_log_type_enabled(v24, v25);
  v110 = v10;
  if (v26)
  {
    v27 = v9;
    v28 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "_removeLastDigit()", v28, 2u);
    v29 = v28;
    v9 = v27;
    v2 = v1;
    v10 = v110;
    swift_slowDealloc(v29, -1, -1);
  }

  if (*(_BYTE *)(v3 + 152) != 1)
  {
    v44 = sub_1000247F4(11004, 0xD00000000000001BLL, (void *)0x800000010016B500, 0);
    swift_willThrow(v44);
    return;
  }
  v98 = v9;
  if (qword_1001ACF48 != -1)
    swift_once(&qword_1001ACF48, sub_100041F90);
  v30 = type metadata accessor for OSSignposter(0);
  v31 = sub_100003A14(v30, (uint64_t)qword_1001AF3A8);
  v32 = static OSSignpostID.exclusive.getter();
  v101 = v31;
  v33 = OSSignposter.logHandle.getter(v32);
  v34 = static os_signpost_type_t.begin.getter();
  v35 = OS_os_log.signpostsEnabled.getter();
  v97[1] = v14;
  if ((v35 & 1) != 0)
  {
    v36 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v37 = v109;
    v36(v109, v22, v10);
    v38 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v38 = 0;
    v39 = OSSignpostID.rawValue.getter(v38);
    v40 = v34;
    v41 = v37;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v33, v40, v39, "pin-removeDigit", "begin remove pin digit", v38, 2u);
    v42 = v38;
    v10 = v110;
    swift_slowDealloc(v42, -1, -1);

    (*(void (**)(char *, uint64_t))(v11 + 8))(v37, v10);
    v43 = v36;
  }
  else
  {

    v43 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v41 = v109;
  }
  v99 = v43;
  v43(v41, v22, v10);
  v45 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
  v46 = OSSignpostIntervalState.init(id:isOpen:)(v41, 1);
  v47 = *(void (**)(char *, uint64_t))(v11 + 8);
  v47(v22, v10);
  if (*(_QWORD *)(v3 + 72))
  {
    v48 = *(_QWORD *)(v3 + 296);
    LOBYTE(v111) = 27;
    v49 = *(os_unfair_lock_s **)(v48 + 56);
    v50 = (_TtC14softposreaderd12RemoteReader **)&v49[4];
    v51 = v49 + 8;
    os_unfair_lock_lock(v49 + 8);
    sub_1000AECF0(v50, (unsigned __int8 *)&v111, 1);
    if (!v2)
    {
      v100 = v47;
      os_unfair_lock_unlock(v51);
      v52 = *(_QWORD *)(v3 + 184);
      v53 = *(_QWORD *)(v3 + 192);
      sub_100005EF8((_QWORD *)(v3 + 160), v52);
      v54 = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 24))(v52, v53);
      v76 = v109;
      v75 = v110;
      v78 = v107;
      v77 = v108;
      v79 = OSSignposter.logHandle.getter(v54);
      v80 = OSSignpostIntervalState.signpostID.getter();
      v81 = static os_signpost_type_t.end.getter(v80);
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        swift_retain();
        v82 = v46;
        v83 = v77;
        v84 = v98;
        checkForErrorAndConsumeState(state:)(v82);
        v97[0] = v82;
        swift_release(v82);
        v85 = v106;
        if ((*(unsigned int (**)(char *, uint64_t))(v83 + 88))(v84, v106) == enum case for OSSignpostError.doubleEnd(_:))
        {
          v86 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v83 + 8))(v84, v85);
          v86 = "end remove pin digit";
        }
        v99(v76, v78, v75);
        v87 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v87 = 0;
        v88 = OSSignpostID.rawValue.getter(v87);
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v79, v81, v88, "pin-removeDigit", v86, v87, 2u);
        v89 = v87;
        v90 = v110;
        swift_slowDealloc(v89, -1, -1);

        v91 = v100;
        v100(v78, v90);
        v46 = v97[0];
        v91(v76, v90);
      }
      else
      {

        v100(v78, v75);
      }
      goto LABEL_26;
    }
    os_unfair_lock_unlock(v51);
    __break(1u);
  }
  else
  {
    v55 = sub_1000247F4(11004, 0xD000000000000013, (void *)0x800000010016B520, 0);
    v56 = *(_QWORD *)(v3 + 296);
    v111 = v55;
    type metadata accessor for PINControllerError(0);
    v58 = v57;
    v59 = sub_100005F1C((unint64_t *)&qword_1001AD868, (uint64_t (*)(uint64_t))type metadata accessor for PINControllerError, (uint64_t)&unk_10015C238);
    v60 = _BridgedStoredNSError.errorCode.getter(v58, v59);
    *(_BYTE *)(v56 + 120) = 0;
    *(_QWORD *)(v56 + 152) = v60;
    sub_10004C650();
    v61 = *(_QWORD *)(v3 + 184);
    v62 = *(_QWORD *)(v3 + 192);
    sub_100005EF8((_QWORD *)(v3 + 160), v61);
    v63 = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 40))(v61, v62);
    *(_BYTE *)(v3 + 152) = 0;
    v64 = swift_willThrow(v63);
    v65 = OSSignposter.logHandle.getter(v64);
    v66 = v104;
    v67 = OSSignpostIntervalState.signpostID.getter();
    v68 = static os_signpost_type_t.end.getter(v67);
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {

      v47(v66, v110);
LABEL_26:
      swift_release(v46);
      return;
    }
    v100 = v47;
    v69 = swift_retain();
    v70 = v103;
    checkForErrorAndConsumeState(state:)(v69);
    swift_release(v46);
    v71 = v108;
    v72 = v106;
    v73 = (*(uint64_t (**)(char *, uint64_t))(v108 + 88))(v70, v106);
    v74 = v110;
    v97[0] = v46;
    if (v73 == enum case for OSSignpostError.doubleEnd(_:))
    {
      v92 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v71 + 8))(v70, v72);
      v92 = "end remove pin digit";
    }
    v93 = v109;
    v99(v109, v66, v74);
    v94 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v94 = 0;
    v95 = OSSignpostID.rawValue.getter(v94);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v65, v68, v95, "pin-removeDigit", v92, v94, 2u);
    swift_slowDealloc(v94, -1, -1);

    v96 = v100;
    v100(v66, v74);
    v96(v93, v74);
    swift_release(v97[0]);
  }
}

void sub_100045E84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_signpost_type_t v17;
  char v18;
  void (*v19)(char *, char *, uint64_t);
  uint8_t *v20;
  os_signpost_id_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  os_unfair_lock_s *v61;
  unint64_t v62;
  os_unfair_lock_s *v63;
  os_unfair_lock_s *v64;
  os_unfair_lock_s *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t inited;
  _TtC14softposreaderd12RemoteReader *v73;
  SEL v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  os_unfair_lock_s *v81;
  os_unfair_lock_s *v82;
  _TtC14softposreaderd12RemoteReader **v83;
  char v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _TtC14softposreaderd12RemoteReader *v95;
  void *v96;
  SEL v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _TtC14softposreaderd12RemoteReader *v112;
  SEL v113;
  id v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char v134;
  unint64_t v135;
  os_unfair_lock_s *v136;
  uint64_t v137;
  os_unfair_lock_s *v138;
  const char *v139;
  _TtC14softposreaderd12RemoteReader *v140;
  void *v141;
  void *v142;
  uint64_t v143;
  NSObject *v144;
  uint64_t v145;
  uint64_t v146;
  SEL v147;
  id v148;
  id v149;
  id v150;
  id v151;
  id v152;
  id v153;
  os_log_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  NSObject *v162;
  char v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  Class isa;
  Class v173;
  Class v174;
  uint64_t v175;
  unint64_t v176;
  Class v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  id v185;
  Class v186;
  Class v187;
  Class v188;
  Class v189;
  unint64_t v190;
  unsigned int v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  NSObject *v198;
  uint64_t v199;
  uint64_t v200;
  void *v201;
  const char *v202;
  uint64_t v203;
  void *v204;
  os_log_t v205;
  unint64_t v206;
  void *v207;
  void *v208;
  void *v209;
  _TtC14softposreaderd12RemoteReader *v210;
  _QWORD *v211;
  uint64_t v212;
  _BYTE v213[32];
  _BYTE v214[8];
  uint64_t v215[6];
  unsigned __int8 v216;
  uint64_t v217;
  uint64_t v218;

  v1 = v0;
  v2 = type metadata accessor for OSSignpostID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v185 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v185 - v7;
  if (qword_1001ACF40 != -1)
    swift_once(&qword_1001ACF40, sub_100041F00);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_100003A14(v9, (uint64_t)qword_1001AF390);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "_generatePINBlock()", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  if (*(_BYTE *)(v1 + 152) != 1)
  {
    v22 = sub_1000247F4(11004, 0xD00000000000001BLL, (void *)0x800000010016B500, 0);
    swift_willThrow(v22);
    return;
  }
  if (qword_1001ACF48 != -1)
    swift_once(&qword_1001ACF48, sub_100041F90);
  v211 = (_QWORD *)v1;
  v14 = type metadata accessor for OSSignposter(0);
  sub_100003A14(v14, (uint64_t)qword_1001AF3A8);
  v15 = static OSSignpostID.exclusive.getter();
  v16 = OSSignposter.logHandle.getter(v15);
  v17 = static os_signpost_type_t.begin.getter();
  v18 = OS_os_log.signpostsEnabled.getter();
  v205 = v10;
  if ((v18 & 1) != 0)
  {
    v19 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    v19(v6, v8, v2);
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    v21 = OSSignpostID.rawValue.getter(v20);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, v17, v21, "pin-generateBlock", "begin generate pin block", v20, 2u);
    swift_slowDealloc(v20, -1, -1);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  else
  {

    v19 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  }
  v19(v6, v8, v2);
  v23 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  v24 = OSSignpostIntervalState.init(id:isOpen:)(v6, 1);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  v25 = v211;
  v26 = v211[9];
  if (!v26)
  {
    v49 = sub_1000247F4(11004, 0xD000000000000013, (void *)0x800000010016B520, 0);
    v50 = v25[37];
    v215[0] = v49;
    type metadata accessor for PINControllerError(0);
    v52 = v51;
    v53 = sub_100005F1C((unint64_t *)&qword_1001AD868, (uint64_t (*)(uint64_t))type metadata accessor for PINControllerError, (uint64_t)&unk_10015C238);
    v54 = _BridgedStoredNSError.errorCode.getter(v52, v53);
    *(_BYTE *)(v50 + 120) = 0;
    *(_QWORD *)(v50 + 152) = v54;
    sub_10004C650();
    v55 = v25[23];
    v56 = v25[24];
    sub_100005EF8(v25 + 20, v55);
    v57 = (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 40))(v55, v56);
    swift_willThrow(v57);
    goto LABEL_16;
  }
  v27 = v211[7];
  v28 = (const char *)v211[8];
  v30 = (void *)v211[10];
  v29 = (void *)v211[11];
  v31 = (void *)v211[12];
  v32 = (void *)v211[13];
  v33 = (void *)v211[14];
  v34 = v211[15];
  v35 = v211[16];
  v36 = v211[18];
  v210 = (_TtC14softposreaderd12RemoteReader *)v211[9];
  v208 = v32;
  v209 = v31;
  v207 = v29;
  v204 = v30;
  v203 = v34;
  v206 = v35;
  if (v36 >> 60 == 15)
  {
    v184 = v34;
    v37 = v27;
    v38 = (uint64_t)v30;
    v39 = v33;
    sub_10004B5E0(v27, (uint64_t)v28, v26, v38, (unint64_t)v29, (uint64_t)v31, (unint64_t)v32, (uint64_t)v33, v184, v35);
    v40 = sub_1000247F4(11009, 0xD000000000000054, (void *)0x800000010016B540, 0);
    v41 = v25[37];
    v215[0] = v40;
    type metadata accessor for PINControllerError(0);
    v43 = v42;
    v44 = sub_100005F1C((unint64_t *)&qword_1001AD868, (uint64_t (*)(uint64_t))type metadata accessor for PINControllerError, (uint64_t)&unk_10015C238);
    v45 = _BridgedStoredNSError.errorCode.getter(v43, v44);
    *(_BYTE *)(v41 + 120) = 0;
    *(_QWORD *)(v41 + 152) = v45;
    sub_10004C650();
    v46 = v25[23];
    v47 = v25[24];
    sub_100005EF8(v25 + 20, v46);
    v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 40))(v46, v47);
    swift_willThrow(v48);
    sub_10004B514(v37, v28, v210, v204, v207, v209, v208, v39, v203, v206);
LABEL_16:
    sub_1000471C4((uint64_t)v25, v24);
    v58 = v24;
LABEL_26:
    swift_release(v58);
    return;
  }
  v196 = v24;
  v59 = v36;
  v60 = v211;
  v61 = (os_unfair_lock_s *)v211[17];
  v62 = v211[37];
  LOBYTE(v215[0]) = 9;
  v199 = v62;
  v63 = *(os_unfair_lock_s **)(v62 + 56);
  v64 = v63 + 4;
  v65 = v63 + 8;
  v200 = v27;
  v202 = v28;
  v201 = v33;
  sub_10004B5E0(v27, (uint64_t)v28, v26, (uint64_t)v30, (unint64_t)v29, (uint64_t)v31, (unint64_t)v32, (uint64_t)v33, v34, v35);
  v198 = v61;
  v197 = v59;
  sub_1000306C8((uint64_t)v61, v59);
  os_unfair_lock_lock(v65);
  v66 = v212;
  sub_10010CC6C((uint64_t)v64, (unsigned __int8 *)v215);
  if (v66)
  {
    os_unfair_lock_unlock(v65);
    __break(1u);
    os_unfair_lock_unlock(v64);
    __break(1u);
    os_unfair_lock_unlock(v61);
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock(v65);
    v67 = v25[23];
    v68 = v25[24];
    sub_100005EF8(v25 + 20, v67);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v68 + 32))(v215, v67, v68);
    v193 = v215[0];
    v194 = v215[1];
    v212 = v215[2];
    v195 = v215[3];
    v192 = v215[4];
    v190 = v215[5];
    v191 = v216;
    v69 = v60[28];
    v70 = v60[29];
    sub_100005EF8(v60 + 25, v69);
    v71 = sub_100003A2C(&qword_1001ADA18);
    inited = swift_initStackObject(v71, v213);
    *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
    strcpy((char *)(inited + 32), "transactionId");
    *(_WORD *)(inited + 46) = -4864;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 80) = &protocol witness table for String;
    *(_QWORD *)(inited + 48) = v202;
    *(_QWORD *)(inited + 56) = v210;
    swift_bridgeObjectRetain();
    v73 = (_TtC14softposreaderd12RemoteReader *)sub_1000E84EC(inited);
    sub_100115684(26, (uint64_t)v73, v69, v70);
    swift_bridgeObjectRelease(v73, v74, v75, v76, v77, v78, v79, v80);
    sub_1000482F0();
    v81 = *(os_unfair_lock_s **)(v199 + 56);
    v82 = v81 + 8;
    v83 = (_TtC14softposreaderd12RemoteReader **)&v81[4];
    LOBYTE(v215[0]) = 9;
    os_unfair_lock_lock(v81 + 8);
    sub_10010CC54(v83, (unsigned __int8 *)v215);
    os_unfair_lock_unlock(v82);
    LOBYTE(v215[0]) = 10;
    os_unfair_lock_lock(v82);
    sub_10010CC54(v83, (unsigned __int8 *)v215);
    os_unfair_lock_unlock(v82);
    if ((v201 & 1) != 0)
      v84 = 0;
    else
      v84 = v191;
    if ((v84 & 1) != 0)
    {
      v85 = sub_1000247F4(11014, 0xD00000000000003ALL, (void *)0x800000010016B5C0, 0);
      swift_willThrow(v85);
      sub_100005DE0(v193, v194);
      sub_100005DE0(v212, v195);
      sub_100005DE0(v192, v190);
      v86 = v211;
      swift_errorRetain();
      v87 = swift_errorRetain();
      v88 = Logger.logObject.getter(v87);
      v89 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v88, v89))
      {
        v90 = (uint8_t *)swift_slowAlloc(12, -1);
        v91 = swift_slowAlloc(32, -1);
        v215[0] = v91;
        *(_DWORD *)v90 = 136315138;
        v217 = v85;
        swift_errorRetain();
        v92 = sub_100003A2C((uint64_t *)&unk_1001B1280);
        v93 = String.init<A>(describing:)(&v217, v92);
        v95 = (_TtC14softposreaderd12RemoteReader *)v94;
        v217 = sub_1000056EC(v93, v94, v215);
        v86 = v211;
        v96 = v208;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218, v90 + 4, v90 + 12);
        swift_bridgeObjectRelease(v95, v97, v98, v99, v100, v101, v102, v103);
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v88, v89, "Error from generatePINBlock: %s", v90, 0xCu);
        swift_arrayDestroy(v91, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v91, -1, -1);
        swift_slowDealloc(v90, -1, -1);

        v104 = v202;
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();

        v104 = v202;
        v96 = v208;
      }
      v105 = v86[28];
      v106 = v86[29];
      sub_100005EF8(v86 + 25, v105);
      v107 = sub_100003A2C(&qword_1001ADA18);
      v108 = swift_initStackObject(v107, v214);
      *(_OWORD *)(v108 + 16) = xmmword_10015A5F0;
      *(_QWORD *)(v108 + 32) = 0xD000000000000010;
      *(_QWORD *)(v108 + 40) = 0x800000010016B450;
      v215[0] = v85;
      swift_errorRetain();
      v109 = sub_100003A2C((uint64_t *)&unk_1001B1280);
      v110 = String.init<A>(describing:)(v215, v109);
      *(_QWORD *)(v108 + 72) = &type metadata for String;
      *(_QWORD *)(v108 + 80) = &protocol witness table for String;
      *(_QWORD *)(v108 + 48) = v110;
      *(_QWORD *)(v108 + 56) = v111;
      v112 = (_TtC14softposreaderd12RemoteReader *)sub_1000E84EC(v108);
      sub_100115684(27, (uint64_t)v112, v105, v106);
      swift_bridgeObjectRelease(v112, v113, v114, v115, v116, v117, v118, v119);
      v215[0] = sub_10004B78C(v85);
      type metadata accessor for PINControllerError(0);
      v121 = v120;
      v122 = sub_100005F1C((unint64_t *)&qword_1001AD868, (uint64_t (*)(uint64_t))type metadata accessor for PINControllerError, (uint64_t)&unk_10015C238);
      v123 = _BridgedStoredNSError.errorCode.getter(v121, v122);
      v124 = v199;
      *(_BYTE *)(v199 + 120) = 0;
      *(_QWORD *)(v124 + 152) = v123;
      sub_10004C650();
      swift_willThrow(v125);
      swift_errorRelease();
      sub_10000A9B0((uint64_t)v198, v197);
      sub_10004B514(v200, v104, v210, v204, v207, v209, v96, v201, v203, v206);
      v126 = (uint64_t)v86;
      v127 = v196;
      sub_1000471C4(v126, v196);
      v58 = v127;
      goto LABEL_26;
    }
    v128 = v193;
    v129 = v194;
    sub_100005D9C(v193, v194);
    v130 = v212;
    v131 = v195;
    sub_100005D9C(v212, v195);
    v132 = v192;
    v133 = v190;
    sub_100005D9C(v192, v190);
    sub_100005DE0(v132, v133);
    sub_100005DE0(v130, v131);
    sub_100005DE0(v128, v129);
    if (v191)
      v134 = 2;
    else
      v134 = 1;
    v135 = v199;
    *(_BYTE *)(v199 + 120) = v134;
    LOBYTE(v215[0]) = 12;
    v136 = *(os_unfair_lock_s **)(v135 + 56);
    v137 = (uint64_t)&v136[4];
    v138 = v136 + 8;
    os_unfair_lock_lock(v136 + 8);
    sub_10010CC6C(v137, (unsigned __int8 *)v215);
    v139 = v202;
    os_unfair_lock_unlock(v138);
    v140 = v210;
    v141 = v208;
    v142 = v201;
    v143 = sub_10004B5E0(v200, (uint64_t)v139, (uint64_t)v210, (uint64_t)v30, (unint64_t)v207, (uint64_t)v209, (unint64_t)v208, (uint64_t)v201, v34, v206);
    v144 = Logger.logObject.getter(v143);
    v145 = static os_log_type_t.info.getter();
    v205 = v144;
    if (os_log_type_enabled(v144, (os_log_type_t)v145))
    {
      v146 = swift_slowAlloc(22, -1);
      v199 = swift_slowAlloc(64, -1);
      v215[0] = v199;
      *(_DWORD *)v146 = 136315394;
      v217 = sub_1000056EC(0xD000000000000013, 0x800000010016B5A0, v215);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218, v146 + 4, v146 + 12);
      *(_WORD *)(v146 + 12) = 2080;
      swift_bridgeObjectRetain();
      v217 = sub_1000056EC((uint64_t)v202, (unint64_t)v140, v215);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218, v146 + 14, v146 + 22);
      swift_bridgeObjectRelease(v140, v147, v148, v149, v150, v151, v152, v153);
      sub_10004B514(v200, v202, v140, v30, v207, v209, v208, v142, v34, v206);
      v154 = v205;
      _os_log_impl((void *)&_mh_execute_header, v205, (os_log_type_t)v145, "%s using internalTransactionData with transactionId: %s", (uint8_t *)v146, 0x16u);
      v155 = v199;
      swift_arrayDestroy(v199, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v155, -1, -1);
      v141 = v208;
      swift_slowDealloc(v146, -1, -1);

    }
    else
    {
      sub_10004B514(v200, v139, v140, v30, v207, v209, v141, v142, v34, v206);

    }
    v156 = v190;
    v157 = v193;
    v158 = v194;
    sub_100005D9C(v193, v194);
    v159 = v212;
    v160 = v195;
    sub_100005D9C(v212, v195);
    v161 = v192;
    sub_100005D9C(v192, v156);
    sub_100005DE0(v161, v156);
    sub_100005DE0(v159, v160);
    sub_100005D9C(v157, v158);
    sub_100005D9C(v159, v160);
    sub_100005D9C(v161, v156);
    sub_100005DE0(v161, v156);
    sub_100005DE0(v157, v158);
    sub_100005D9C(v157, v158);
    sub_100005D9C(v159, v160);
    sub_100005D9C(v161, v156);
    sub_100005DE0(v161, v156);
    sub_100005DE0(v159, v160);
    sub_100005DE0(v157, v158);
    v162 = v198;
    v163 = v191;
    if ((v191 & 1) != 0)
    {
      v205 = 0;
      v199 = 0xC000000000000000;
    }
    else
    {
      v164 = v197;
      sub_100005D9C((uint64_t)v198, v197);
      v205 = v162;
      v199 = v164;
    }
    v165 = v193;
    v166 = v194;
    sub_100005D9C(v193, v194);
    v167 = v212;
    v168 = v195;
    sub_100005D9C(v212, v195);
    v169 = v192;
    sub_100005D9C(v192, v156);
    sub_100005DE0(v167, v168);
    sub_100005DE0(v165, v166);
    sub_100005D9C(v165, v166);
    sub_100005D9C(v167, v168);
    sub_100005D9C(v169, v156);
    sub_100005DE0(v169, v156);
    sub_100005DE0(v167, v168);
    sub_100005DE0(v165, v166);
    if ((v163 & 1) != 0)
    {
      v170 = 0;
      v171 = 0xC000000000000000;
    }
    else
    {
      v170 = (uint64_t)v209;
      sub_100005D9C((uint64_t)v209, (unint64_t)v141);
      v171 = (unint64_t)v141;
    }
    v185 = objc_allocWithZone((Class)SPRPINData);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v186 = isa;
    v173 = Data._bridgeToObjectiveC()().super.isa;
    v174 = Data._bridgeToObjectiveC()().super.isa;
    v187 = v174;
    v175 = v192;
    v176 = v190;
    v177 = Data._bridgeToObjectiveC()().super.isa;
    v188 = v177;
    v189 = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v185, "initWithPinCipherBlob:pinKeyBlob:casd:pinAppletAttestationData:pinKEKHash:isPinBypass:", isa, v173, v174, v177, v189, v191);
    sub_100005DE0(v170, v171);
    v178 = v176;
    sub_100005DE0(v175, v176);
    sub_100005DE0((uint64_t)v205, v199);
    v179 = v195;
    sub_100005DE0(v212, v195);
    v180 = v193;
    v181 = v194;
    sub_100005DE0(v193, v194);

    v182 = (uint64_t)v211;
    sub_100048DA8();
    sub_100005DE0(v180, v181);
    sub_100005DE0(v212, v179);
    sub_100005DE0(v175, v178);
    sub_10000A9B0((uint64_t)v198, v197);
    sub_10004B514(v200, v202, v210, v204, v207, v209, v208, v201, v203, v206);
    v183 = v196;
    sub_1000471C4(v182, v196);
    swift_release(v183);
  }
}

uint64_t sub_1000471C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  os_signpost_type_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t result;
  uint64_t v25;
  uint8_t *v26;
  os_signpost_id_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;

  v29 = type metadata accessor for OSSignpostError(0);
  v4 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OSSignpostID(0);
  v30 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v29 - v11;
  sub_10004B64C();
  v13 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v14 = AVSystemController_RecordingStateDidChangeNotification;
  v15 = objc_msgSend((id)objc_opt_self(AVSystemController), "sharedInstance");
  objc_msgSend(v13, "removeObserver:name:object:", a1, v14, v15);

  if (qword_1001ACF48 != -1)
    swift_once(&qword_1001ACF48, sub_100041F90);
  v16 = type metadata accessor for OSSignposter(0);
  v17 = sub_100003A14(v16, (uint64_t)qword_1001AF3A8);
  v18 = OSSignposter.logHandle.getter(v17);
  v19 = OSSignpostIntervalState.signpostID.getter();
  v20 = static os_signpost_type_t.end.getter(v19);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v21 = swift_retain();
    checkForErrorAndConsumeState(state:)(v21);
    swift_release(a2);
    v22 = v29;
    if ((*(unsigned int (**)(char *, uint64_t))(v4 + 88))(v6, v29) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v23 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v22);
      v23 = "end generate pin block";
    }
    v25 = v30;
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v10, v12, v7);
    v26 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v26 = 0;
    v27 = OSSignpostID.rawValue.getter(v26);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, v20, v27, "pin-generateBlock", v23, v26, 2u);
    swift_slowDealloc(v26, -1, -1);

    v28 = *(void (**)(char *, uint64_t))(v25 + 8);
    v28(v12, v7);
    result = ((uint64_t (*)(char *, uint64_t))v28)(v10, v7);
  }
  else
  {

    result = (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v12, v7);
  }
  *(_BYTE *)(a1 + 152) = 0;
  return result;
}

uint64_t sub_100047498()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[5];
  uint64_t v7;

  v1 = *(NSObject **)(v0 + 288);
  v2 = swift_allocObject(&unk_10019BB20, 32, 7);
  *(_QWORD *)(v2 + 16) = sub_10004BA14;
  *(_QWORD *)(v2 + 24) = v0;
  v6[4] = sub_10004B9DC;
  v7 = v2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  v6[2] = sub_1000475A0;
  v6[3] = &unk_10019BB38;
  v3 = _Block_copy(v6);
  v4 = v7;
  swift_retain();
  swift_retain();
  swift_release(v4);
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation(v2, "", 92, 543, 26, 1);
  swift_release(v0);
  result = swift_release(v2);
  if ((v1 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_1000475A0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void sub_1000475C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  _TtC14softposreaderd12RemoteReader *v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  os_log_type_t v22;
  uint8_t *v23;
  _TtC14softposreaderd12RemoteReader *v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  os_unfair_lock_s *v33;
  _TtC14softposreaderd12RemoteReader **v34;
  os_unfair_lock_s *v35;
  id v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  os_log_t osloga;
  NSObject *oslog;
  _BYTE v46[88];
  _QWORD v47[3];
  uint64_t v48;
  uint64_t v49;

  v1 = v0;
  if (qword_1001ACF40 != -1)
    swift_once(&qword_1001ACF40, sub_100041F00);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100003A14(v2, (uint64_t)qword_1001AF390);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "_cancelPINCapture()", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  if (*(_BYTE *)(v0 + 152) == 1)
  {
    sub_100008390(v0 + 200, (uint64_t)v47);
    v8 = v48;
    v9 = v49;
    sub_100005EF8(v47, v48);
    v10 = sub_100003A2C(&qword_1001ADA18);
    inited = swift_initStackObject(v10, v46);
    *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
    strcpy((char *)(inited + 32), "transactionId");
    *(_WORD *)(inited + 46) = -4864;
    v12 = *(_TtC14softposreaderd12RemoteReader **)(v1 + 72);
    if (v12)
    {
      v43 = v9;
      v14 = *(_QWORD *)(v1 + 120);
      v13 = *(_QWORD *)(v1 + 128);
      v41 = *(void **)(v1 + 104);
      v42 = *(void **)(v1 + 112);
      v15 = *(void **)(v1 + 88);
      v16 = *(void **)(v1 + 96);
      v17 = *(_QWORD *)(v1 + 80);
      osloga = (os_log_t)v8;
      v18 = *(_QWORD *)(v1 + 56);
      v19 = *(_QWORD *)(v1 + 64);
      sub_10004B5E0(v18, v19, (uint64_t)v12, v17, (unint64_t)v15, (uint64_t)v16, (unint64_t)v41, (uint64_t)v42, v14, v13);
      swift_bridgeObjectRetain();
      v20 = v18;
      v8 = (uint64_t)osloga;
      v21 = (void *)v17;
      v9 = v43;
      sub_10004B514(v20, (const char *)v19, v12, v21, v15, v16, v41, v42, v14, v13);
    }
    else
    {
      v12 = (_TtC14softposreaderd12RemoteReader *)0xE300000000000000;
      v19 = 7104878;
    }
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 80) = &protocol witness table for String;
    *(_QWORD *)(inited + 48) = v19;
    *(_QWORD *)(inited + 56) = v12;
    v24 = (_TtC14softposreaderd12RemoteReader *)sub_1000E84EC(inited);
    sub_100115684(25, (uint64_t)v24, v8, v9);
    swift_bridgeObjectRelease(v24, v25, v26, v27, v28, v29, v30, v31);
    sub_100005D3C(v47);
    v32 = *(_QWORD *)(v1 + 296);
    LOBYTE(v47[0]) = 10;
    v33 = *(os_unfair_lock_s **)(v32 + 56);
    v34 = (_TtC14softposreaderd12RemoteReader **)&v33[4];
    v35 = v33 + 8;
    os_unfair_lock_lock(v33 + 8);
    sub_10010CC54(v34, (unsigned __int8 *)v47);
    os_unfair_lock_unlock(v35);
    *(_BYTE *)(v32 + 120) = 3;
    sub_10004C650();
    sub_100048DA8();
    sub_10004B64C();
    v36 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    v37 = AVSystemController_RecordingStateDidChangeNotification;
    v38 = objc_msgSend((id)objc_opt_self(AVSystemController), "sharedInstance");
    objc_msgSend(v36, "removeObserver:name:object:", v1, v37, v38);

    sub_1000482F0();
    v39 = *(_QWORD *)(v1 + 184);
    v40 = *(_QWORD *)(v1 + 192);
    sub_100005EF8((_QWORD *)(v1 + 160), v39);
    (*(void (**)(uint64_t, uint64_t))(v40 + 40))(v39, v40);
    *(_BYTE *)(v1 + 152) = 0;
  }
  else
  {
    oslog = Logger.logObject.getter(v7);
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v22, "PIN Capture not in progress", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

  }
}

void sub_10004798C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _DWORD *v12;
  id v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  Swift::String v18;
  uint64_t v19;
  unint64_t v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint8_t *buf;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v3 = v2;
  v4 = v1;
  if (qword_1001ACF40 != -1)
    swift_once(&qword_1001ACF40, sub_100041F00);
  v6 = (_BYTE *)(v4 + 272);
  v7 = type metadata accessor for Logger(0);
  sub_100003A14(v7, (uint64_t)qword_1001AF390);
  v8 = a1;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v37 = v4;
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v36 = swift_slowAlloc(32, -1);
    v40 = v36;
    *(_DWORD *)v11 = 136315138;
    v12 = v11 + 12;
    v34 = v11 + 4;
    buf = v11;
    v13 = objc_msgSend(v8, "digest");
    v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v15 = v8;
    v17 = v16;

    v18 = Data.hexString()();
    v19 = v14;
    v4 = v37;
    v20 = v17;
    v8 = v15;
    sub_100005DE0(v19, v20);
    v3 = v2;
    v38 = sub_1000056EC(v18._countAndFlagsBits, (unint64_t)v18._object, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v34, v12);

    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v18._object, v21, v22, v23, v24, v25, v26, v27);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "DefaultPINController.updateParameters(parameters: %s)", buf, 0xCu);
    swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(buf, -1, -1);

  }
  else
  {

  }
  if (*v6 == 1)
  {
    if (v6[1] == 1)
    {
      sub_100043EA8(v8);
      if (v3)
      {
        v40 = v3;
        swift_errorRetain();
        v28 = sub_100003A2C((uint64_t *)&unk_1001B1280);
        v29 = String.init<A>(describing:)(&v40, v28);
        v31 = sub_1000247F4(11010, v29, v30, 0);
        swift_willThrow(v31);
        swift_errorRelease();
      }
      else
      {
        objc_msgSend(v8, "transactionDataLifetime");
        *(_QWORD *)(v4 + 240) = v33;
        sub_1000482F0();
        sub_100047C94();
        *(_BYTE *)(v4 + 273) = 0;
      }
    }
    else
    {
      v32 = sub_1000247F4(11012, 0xD000000000000045, (void *)0x800000010016B4B0, 0);
      swift_willThrow(v32);
    }
  }
}

void sub_100047C94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t ObjectType;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char *v35;
  os_log_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  os_log_t v51;
  _QWORD aBlock[5];
  uint64_t v53;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v51 = (os_log_t)((char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for DispatchQoS(0);
  v49 = *(_QWORD *)(v4 - 8);
  v50 = v4;
  __chkstk_darwin(v4);
  v48 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchTimeInterval(0);
  v47 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v44 - v10;
  v12 = type metadata accessor for DispatchTime(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v44 - v17;
  if ((*(_BYTE *)(v0 + 272) & 1) != 0)
  {
    if (qword_1001ACF40 != -1)
      swift_once(&qword_1001ACF40, sub_100041F00);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_100003A14(v19, (uint64_t)qword_1001AF390);
    v51 = (os_log_t)Logger.logObject.getter(v20);
    v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v51, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v21, "PIN timer already started", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

  }
  else
  {
    v46 = v2;
    v23 = *(_QWORD *)(v0 + 264);
    ObjectType = swift_getObjectType(v23);
    v44 = v0;
    v45 = v1;
    v25 = ObjectType;
    v26 = swift_unknownObjectRetain(v23);
    static DispatchTime.now()(v26);
    + infix(_:_:)(v16);
    v27 = *(void (**)(char *, uint64_t))(v13 + 8);
    v27(v16, v12);
    sub_1000EDE94((uint64_t)v11);
    sub_1000EDED8(v9);
    OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v18, v11, v9, v25);
    swift_unknownObjectRelease(v23);
    v28 = *(void (**)(char *, uint64_t))(v47 + 8);
    v28(v9, v6);
    v28(v11, v6);
    v27(v18, v12);
    v29 = v44;
    v30 = *(_QWORD *)(v44 + 264);
    v31 = swift_getObjectType(v30);
    v32 = swift_allocObject(&unk_10019BAD0, 24, 7);
    v33 = v29;
    swift_weakInit(v32 + 16, v29);
    aBlock[4] = sub_10004B5C8;
    v53 = v32;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000043B8;
    aBlock[3] = &unk_10019BAE8;
    v34 = _Block_copy(aBlock);
    swift_unknownObjectRetain(v30);
    swift_retain();
    v35 = v48;
    j___s8Dispatch0A3QoSV11unspecifiedACvgZ(v31);
    v36 = v51;
    sub_1000043E4();
    OS_dispatch_source.setEventHandler(qos:flags:handler:)(v35, v36, v34, v31);
    _Block_release(v34);
    swift_unknownObjectRelease(v30);
    (*(void (**)(os_log_t, uint64_t))(v46 + 8))(v36, v45);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v35, v50);
    v37 = v53;
    swift_release(v32);
    swift_release(v37);
    v38 = *(_QWORD *)(v33 + 264);
    swift_getObjectType(v38);
    swift_unknownObjectRetain(v38);
    OS_dispatch_source.resume()();
    swift_unknownObjectRelease(v38);
    *(_WORD *)(v33 + 272) = 257;
    if (qword_1001ACF40 != -1)
      swift_once(&qword_1001ACF40, sub_100041F00);
    v39 = type metadata accessor for Logger(0);
    v40 = sub_100003A14(v39, (uint64_t)qword_1001AF390);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "PIN timer started", v43, 2u);
      swift_slowDealloc(v43, -1, -1);
    }

  }
}

uint64_t sub_10004815C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  _TtC14softposreaderd12RemoteReader *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[24];

  v1 = a1 + 16;
  if (qword_1001ACF40 != -1)
    swift_once(&qword_1001ACF40, sub_100041F00);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100003A14(v2, (uint64_t)qword_1001AF390);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "DefaultPINController timer fired", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  swift_beginAccess(v1, v24, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v8 = result;
    v9 = *(_QWORD *)(result + 56);
    v10 = *(const char **)(v8 + 64);
    v11 = *(_TtC14softposreaderd12RemoteReader **)(v8 + 72);
    v12 = *(void **)(v8 + 80);
    v13 = *(void **)(v8 + 88);
    v14 = *(void **)(v8 + 96);
    v15 = *(void **)(v8 + 104);
    v16 = *(void **)(v8 + 112);
    v17 = *(_QWORD *)(v8 + 120);
    v18 = *(_QWORD *)(v8 + 128);
    *(_OWORD *)(v8 + 56) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 88) = 0u;
    *(_OWORD *)(v8 + 104) = 0u;
    *(_OWORD *)(v8 + 120) = 0u;
    sub_10004B514(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
    *(_BYTE *)(v8 + 273) = 0;
    sub_1000482F0();
    v19 = *(void (**)(uint64_t))(v8 + 248);
    if (v19)
    {
      v20 = *(_QWORD *)(v8 + 256);
      v21 = swift_retain();
      v19(v21);
      sub_10004B5D0((uint64_t)v19, v20);
    }
    v22 = *(_QWORD *)(v8 + 224);
    v23 = *(_QWORD *)(v8 + 232);
    sub_100005EF8((_QWORD *)(v8 + 200), v22);
    sub_10011571C(27, v22, v23);
    return swift_release(v8);
  }
  return result;
}

void sub_1000482F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t ObjectType;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  os_log_t v24;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v0 + 272) == 1)
  {
    v10 = *(_QWORD *)(v0 + 264);
    ObjectType = swift_getObjectType(*(_QWORD *)(v1 + 264));
    aBlock[4] = BitString.init(data:unusedBits:);
    aBlock[5] = 0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000043B8;
    aBlock[3] = &unk_10019BA98;
    v12 = _Block_copy(aBlock);
    swift_unknownObjectRetain(v10);
    j___s8Dispatch0A3QoSV11unspecifiedACvgZ(ObjectType);
    sub_1000043E4();
    OS_dispatch_source.setEventHandler(qos:flags:handler:)(v9, v5, v12, ObjectType);
    _Block_release(v12);
    swift_unknownObjectRelease(v10);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v13 = *(_QWORD *)(v1 + 264);
    swift_getObjectType(v13);
    swift_unknownObjectRetain(v13);
    OS_dispatch_source.suspend()();
    swift_unknownObjectRelease(v13);
    *(_BYTE *)(v1 + 272) = 0;
    if (qword_1001ACF40 != -1)
      swift_once(&qword_1001ACF40, sub_100041F00);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_100003A14(v14, (uint64_t)qword_1001AF390);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "PIN timer stopped", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

  }
  else
  {
    if (qword_1001ACF40 != -1)
      swift_once(&qword_1001ACF40, sub_100041F00);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_100003A14(v19, (uint64_t)qword_1001AF390);
    v24 = (os_log_t)Logger.logObject.getter(v20);
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v21, "PIN timer already stopped", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

  }
}

id sub_10004860C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  _TtC14softposreaderd12RemoteReader *v26;
  Swift::String v27;
  uint64_t v28;
  const char *v29;
  unint64_t v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id result;
  Swift::String v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t inited;
  uint64_t v66;
  uint64_t v67;
  _TtC14softposreaderd12RemoteReader *v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  char v94[8];
  uint64_t v95;
  uint64_t v96;
  char v97[88];
  uint64_t v98;
  unint64_t v99;
  _TtC14softposreaderd12RemoteReader *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108[3];
  uint64_t v109;

  v3 = v2;
  v93 = a1;
  v5 = type metadata accessor for String.Encoding(0);
  v91 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001ACF40 != -1)
    swift_once(&qword_1001ACF40, sub_100041F00);
  v8 = type metadata accessor for Logger(0);
  sub_100003A14(v8, (uint64_t)qword_1001AF390);
  v9 = swift_bridgeObjectRetain_n(a2, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  v12 = os_log_type_enabled(v10, v11);
  v90 = a2;
  if (v12)
  {
    v13 = swift_slowAlloc(22, -1);
    v89 = (char *)v5;
    v14 = a2;
    v15 = v13;
    v16 = swift_slowAlloc(64, -1);
    v98 = v16;
    *(_DWORD *)v15 = 136315394;
    v88 = v3;
    v107 = sub_1000056EC(0xD000000000000019, 0x800000010016B490, &v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2080;
    v17 = String.redactedToken()();
    v107 = sub_1000056EC(v17._countAndFlagsBits, (unint64_t)v17._object, &v98);
    v3 = v88;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v15 + 14, v15 + 22);
    v18 = v14;
    v5 = (uint64_t)v89;
    swift_bridgeObjectRelease_n(v18, 2);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v17._object, v19, v20, v21, v22, v23, v24, v25);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s, raw PIN token: %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v16, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    v26 = (_TtC14softposreaderd12RemoteReader *)v3[9];
    if (v26)
    {
LABEL_5:
      swift_bridgeObjectRetain();
      goto LABEL_6;
    }
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    v26 = (_TtC14softposreaderd12RemoteReader *)v3[9];
    if (v26)
      goto LABEL_5;
  }
  v77 = sub_100005EF8(v3 + 38, v3[41]);
  __chkstk_darwin(v77);
  *(&v87 - 2) = v78;
  *((_BYTE *)&v87 - 8) = 0;
  v79 = sub_100003A2C(&qword_1001B12E0);
  v80 = v92;
  OS_dispatch_queue.sync<A>(execute:)(&v107, sub_100030870, &v87 - 4, v79);
  if (!v108[2])
  {
    sub_100007B30((uint64_t)&v107);
    goto LABEL_16;
  }
  if ((swift_dynamicCast(&v98, &v107, (char *)&type metadata for Any + 8, &type metadata for InternalTransactionData, 6) & 1) == 0)
  {
LABEL_16:
    v86 = sub_1000247F4(11004, 0xD00000000000002BLL, (void *)0x800000010016B420, 0);
    return (id)swift_willThrow(v86);
  }
  v92 = v80;
  v26 = v100;
  v81 = v103;
  v82 = v104;
  v89 = v7;
  v83 = v105;
  v84 = v106;
  sub_100005DE0(v101, v102);
  sub_100005DE0(v81, v82);
  v85 = v83;
  v7 = v89;
  sub_100005DE0(v85, v84);
LABEL_6:
  v27 = String.uppercased()();
  static String.Encoding.utf8.getter(v27._countAndFlagsBits);
  v28 = String.data(using:allowLossyConversion:)(v7, 0, v27._countAndFlagsBits, v27._object);
  v30 = (unint64_t)v29;
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v27._object, v29, v31, v32, v33, v34, v35, v36);
  result = (id)(*(uint64_t (**)(char *, uint64_t))(v91 + 8))(v7, v5);
  if (v30 >> 60 == 15)
  {
    __break(1u);
    goto LABEL_18;
  }
  v38 = String.uppercased()();
  swift_bridgeObjectRelease(v26, (SEL)v38._object, v39, v40, v41, v42, v43, v44);
  v45 = sub_1000FA224(v38._countAndFlagsBits, (unint64_t)v38._object);
  v47 = v46;
  result = objc_msgSend(*(id *)(*sub_100005EF8(v3 + 43, v3[46]) + 16), "serialNumber");
  if (!result)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  v48 = result;
  v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  v51 = v50;

  v52 = sub_1000FA224(v49, v51);
  v54 = v53;
  v107 = v28;
  v108[0] = v30;
  v89 = (char *)v28;
  sub_1000306C8(v28, v30);
  sub_100005D9C(v45, v47);
  sub_10012465C(v45, v47);
  v91 = v47;
  sub_100005DE0(v45, v47);
  v55 = v107;
  v56 = v108[0];
  v98 = v107;
  v99 = v108[0];
  sub_100005D9C(v107, v108[0]);
  sub_100005D9C(v52, v54);
  sub_10012465C(v52, v54);
  sub_100005DE0(v52, v54);
  sub_100005DE0(v55, v56);
  v88 = (_QWORD *)v30;
  v58 = v98;
  v57 = v99;
  v59 = sub_100005EF8(v3 + 2, v3[5]);
  __chkstk_darwin(v59);
  *((_OWORD *)&v87 - 4) = xmmword_10015EF30;
  *(&v87 - 6) = 0xEE006E6F69746164;
  v60 = v90;
  *(&v87 - 5) = v93;
  *(&v87 - 4) = v60;
  *(&v87 - 3) = v58;
  *(&v87 - 2) = v57;
  *(&v87 - 1) = v61;
  v62 = (uint64_t)v92;
  OS_dispatch_queue.sync<A>(execute:)(&v109, sub_10004B580, &v87 - 10, &type metadata for () + 1);
  if (v62)
  {
    v63 = v3[28];
    v93 = v3[29];
    v92 = sub_100005EF8(v3 + 25, v63);
    v64 = sub_100003A2C(&qword_1001ADA18);
    inited = swift_initStackObject(v64, v97);
    *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
    *(_QWORD *)(inited + 32) = 0xD000000000000010;
    *(_QWORD *)(inited + 40) = 0x800000010016B450;
    swift_getErrorValue(v62, &v109, v94);
    v66 = Error.localizedDescription.getter(v95, v96);
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 80) = &protocol witness table for String;
    *(_QWORD *)(inited + 48) = v66;
    *(_QWORD *)(inited + 56) = v67;
    v68 = (_TtC14softposreaderd12RemoteReader *)sub_1000E84EC(inited);
    sub_100115684(27, (uint64_t)v68, v63, v93);
    swift_bridgeObjectRelease(v68, v69, v70, v71, v72, v73, v74, v75);
    swift_errorRetain();
    sub_1000247F4(11003, 0xD00000000000001FLL, (void *)0x800000010016B470, v62);
    v76 = swift_errorRelease();
    swift_willThrow(v76);
    sub_100005DE0(v58, v57);
    sub_100005DE0(v52, v54);
    sub_100005DE0(v45, v91);
    sub_10000A9B0((uint64_t)v89, (unint64_t)v88);
    return (id)swift_errorRelease();
  }
  else
  {
    sub_100005DE0(v58, v57);
    sub_100005DE0(v52, v54);
    sub_100005DE0(v45, v91);
    return (id)sub_10000A9B0((uint64_t)v89, (unint64_t)v88);
  }
}

uint64_t sub_100048DA8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint8_t *v22;
  os_signpost_id_t v23;
  void (*v24)(_BYTE *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  _TtC14softposreaderd12RemoteReader *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE v39[4];
  int v40;
  uint64_t v41;

  v1 = v0;
  v2 = type metadata accessor for OSSignpostError(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v39[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for OSSignpostID(0);
  v7 = __chkstk_darwin(v6);
  v9 = &v39[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v12 = &v39[-v11];
  v13 = v0[35];
  if (v13)
  {
    v41 = v10;
    v14 = qword_1001ACF48;
    swift_retain();
    if (v14 != -1)
      swift_once(&qword_1001ACF48, sub_100041F90);
    v15 = type metadata accessor for OSSignposter(0);
    v16 = sub_100003A14(v15, (uint64_t)qword_1001AF3A8);
    v17 = OSSignposter.logHandle.getter(v16);
    v18 = OSSignpostIntervalState.signpostID.getter();
    v40 = static os_signpost_type_t.end.getter(v18);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v19 = swift_retain();
      checkForErrorAndConsumeState(state:)(v19);
      swift_release(v13);
      if ((*(unsigned int (**)(_BYTE *, uint64_t))(v3 + 88))(v5, v2) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v20 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
        v20 = "end pin capture";
      }
      v21 = v41;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v41 + 16))(v9, v12, v6);
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      v23 = OSSignpostID.rawValue.getter(v22);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, (os_signpost_type_t)v40, v23, "pin-totalCaptureTime", v20, v22, 2u);
      swift_slowDealloc(v22, -1, -1);

      v24 = *(void (**)(_BYTE *, uint64_t))(v21 + 8);
      v24(v12, v6);
      swift_release(v13);
      v24(v9, v6);
    }
    else
    {

      (*(void (**)(_BYTE *, uint64_t))(v41 + 8))(v12, v6);
      swift_release(v13);
    }
  }
  v25 = v1[35];
  v1[35] = 0;
  swift_release(v25);
  v26 = v1[7];
  v27 = (const char *)v1[8];
  v28 = (_TtC14softposreaderd12RemoteReader *)v1[9];
  v29 = (void *)v1[10];
  v30 = (void *)v1[11];
  v31 = (void *)v1[12];
  v32 = (void *)v1[13];
  v33 = (void *)v1[14];
  v34 = v1[15];
  v35 = v1[16];
  *(_OWORD *)(v1 + 7) = 0u;
  *(_OWORD *)(v1 + 9) = 0u;
  *(_OWORD *)(v1 + 11) = 0u;
  *(_OWORD *)(v1 + 13) = 0u;
  *(_OWORD *)(v1 + 15) = 0u;
  sub_10004B514(v26, v27, v28, v29, v30, v31, v32, v33, v34, v35);
  v36 = v1[17];
  v37 = v1[18];
  *(_OWORD *)(v1 + 17) = xmmword_10015E900;
  return sub_10000A9B0(v36, v37);
}

uint64_t sub_10004906C()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  NSObject **v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t result;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  Class isa;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  NSObject *v32;
  void *v33;
  NSObject *v34;
  id v35;
  uint64_t v36;
  id v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _TtC14softposreaderd12RemoteReader *v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  _OWORD v59[2];
  NSObject *v60;
  _QWORD v61[3];

  v1 = (void *)objc_opt_self(AVSystemController);
  v2 = objc_msgSend(v1, "sharedInstance");
  if (!v2)
    __break(1u);
  v3 = v2;
  v4 = objc_msgSend(v2, "attributeForKey:", AVSystemController_RecordingSessionsDescriptionAttribute);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v59, v4);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v59, 0, sizeof(v59));
  }
  sub_100007AE8((uint64_t)v59, (uint64_t)&v60);
  if (!v61[2])
  {
    sub_100007B30((uint64_t)&v60);
    goto LABEL_13;
  }
  v5 = sub_100005E24(0, &qword_1001AF6D8, NSArray_ptr);
  if ((swift_dynamicCast(&v58, &v60, (char *)&type metadata for Any + 8, v5, 6) & 1) == 0)
  {
LABEL_13:
    if (qword_1001ACF40 != -1)
      swift_once(&qword_1001ACF40, sub_100041F00);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_100003A14(v14, (uint64_t)qword_1001AF390);
    v6 = Logger.logObject.getter(v15);
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v16, "couldn't access AVSC", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }
    goto LABEL_17;
  }
  v6 = v58;
  if (objc_msgSend(v58, "count"))
  {
    if (qword_1001ACF40 != -1)
      swift_once(&qword_1001ACF40, sub_100041F00);
    v7 = type metadata accessor for Logger(0);
    sub_100003A14(v7, (uint64_t)qword_1001AF390);
    v8 = v6;
    v6 = Logger.logObject.getter(v8);
    v9 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v6, v9))
    {

      return 0;
    }
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 138412290;
    v60 = v8;
    v12 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v10 + 4, v10 + 12);
    *v11 = v8;

    _os_log_impl((void *)&_mh_execute_header, v6, v9, "something is recording %@", v10, 0xCu);
    v13 = sub_100003A2C((uint64_t *)&unk_1001AE430);
    swift_arrayDestroy(v11, 1, v13);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

LABEL_17:
    return 0;
  }
  result = (uint64_t)objc_msgSend(v1, "sharedInstance");
  if (result)
  {
    v19 = (void *)result;
    v20 = sub_100003A2C(&qword_1001AF6E0);
    v21 = swift_allocObject(v20, 40, 7);
    *(_OWORD *)(v21 + 16) = xmmword_10015A5F0;
    v22 = (void *)AVSystemController_RecordingStateDidChangeNotification;
    *(_QWORD *)(v21 + 32) = AVSystemController_RecordingStateDidChangeNotification;
    type metadata accessor for Name(0);
    v23 = v22;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v21, v25, v26, v27, v28, v29, v30, v31);
    v60 = 0;
    LODWORD(v21) = objc_msgSend(v19, "setAttribute:forKey:error:", isa, AVSystemController_SubscribeToNotificationsAttribute, &v60);

    v32 = v60;
    if (!(_DWORD)v21)
    {
      v38 = v60;
      v39 = _convertNSErrorToError(_:)(v32);

      swift_willThrow(v40);
      if (qword_1001ACF40 != -1)
        swift_once(&qword_1001ACF40, sub_100041F00);
      v41 = type metadata accessor for Logger(0);
      sub_100003A14(v41, (uint64_t)qword_1001AF390);
      swift_errorRetain();
      v42 = swift_errorRetain();
      v43 = Logger.logObject.getter(v42);
      v44 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v43, v44))
      {

        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();

        return 0;
      }
      v45 = (uint8_t *)swift_slowAlloc(12, -1);
      v46 = swift_slowAlloc(32, -1);
      v60 = v46;
      *(_DWORD *)v45 = 136315138;
      *(_QWORD *)&v59[0] = v39;
      swift_errorRetain();
      v47 = sub_100003A2C((uint64_t *)&unk_1001B1280);
      v48 = String.init<A>(describing:)(v59, v47);
      v50 = (_TtC14softposreaderd12RemoteReader *)v49;
      *(_QWORD *)&v59[0] = sub_1000056EC(v48, v49, (uint64_t *)&v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v59, (char *)v59 + 8, v45 + 4, v45 + 12);
      swift_bridgeObjectRelease(v50, v51, v52, v53, v54, v55, v56, v57);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "failed to subscribe notification %s", v45, 0xCu);
      swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v45, -1, -1);

      swift_errorRelease();
      goto LABEL_17;
    }
    v33 = (void *)objc_opt_self(NSNotificationCenter);
    v34 = v32;
    v35 = objc_msgSend(v33, "defaultCenter");
    v36 = AVSystemController_RecordingStateDidChangeNotification;
    v37 = objc_msgSend(v1, "sharedInstance");
    objc_msgSend(v35, "addObserver:selector:name:object:", v0, "recordingStateDidChange:", v36, v37);

    return 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000496C4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void *v9;
  id v10;
  void *v11;
  _TtC14softposreaderd12RemoteReader *v12;
  uint64_t v13;
  const char *v14;
  _TtC14softposreaderd12RemoteReader *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  unint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  NSObject *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  id v51[5];
  uint64_t v52;
  _QWORD v53[2];
  __int128 v54;
  __int128 v55;

  v2 = v1;
  if (qword_1001ACF40 != -1)
    swift_once(&qword_1001ACF40, sub_100041F00);
  v4 = type metadata accessor for Logger(0);
  sub_100003A14(v4, (uint64_t)qword_1001AF390);
  v5 = a1;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (void *)swift_slowAlloc(32, -1);
    v51[0] = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = objc_msgSend(v5, "userInfo");
    if (v10)
    {
      v11 = v10;
      v12 = (_TtC14softposreaderd12RemoteReader *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v10, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

      v13 = Dictionary.description.getter(v12, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
      v15 = (_TtC14softposreaderd12RemoteReader *)v14;
      swift_bridgeObjectRelease(v12, v14, v16, v17, v18, v19, v20, v21);
    }
    else
    {
      v15 = (_TtC14softposreaderd12RemoteReader *)0xE300000000000000;
      v13 = 7104878;
    }
    *(_QWORD *)&v54 = sub_1000056EC(v13, (unint64_t)v15, (uint64_t *)v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, (char *)&v54 + 8, v8 + 4, v8 + 12);

    swift_bridgeObjectRelease(v15, v22, v23, v24, v25, v26, v27, v28);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "recordingStateDidChange %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  v29 = objc_msgSend(v5, "userInfo");
  if (!v29)
    goto LABEL_21;
  v30 = v29;
  v31 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v29, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  v53[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(AVSystemController_RecordingStateNotificationParameter);
  v53[1] = v32;
  AnyHashable.init<A>(_:)(v51, v53, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v31 + 16) && (v40 = sub_10000AD94((uint64_t)v51), (v33 & 1) != 0))
  {
    sub_100005D5C(*(_QWORD *)(v31 + 56) + 32 * v40, (uint64_t)&v54);
  }
  else
  {
    v54 = 0u;
    v55 = 0u;
  }
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v31, v33, v34, v35, v36, v37, v38, v39);
  sub_10000CAAC((uint64_t)v51);
  if (!*((_QWORD *)&v55 + 1))
    goto LABEL_22;
  v41 = sub_100005E24(0, &qword_1001AF6D0, NSNumber_ptr);
  if ((swift_dynamicCast(v51, &v54, (char *)&type metadata for Any + 8, v41, 6) & 1) != 0)
  {
    v42 = v51[0];
    v43 = objc_msgSend(v51[0], "BOOLValue");
    if (!(_DWORD)v43)
    {

      return;
    }
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "something start recording", v46, 2u);
      swift_slowDealloc(v46, -1, -1);
    }

    v47 = *(NSObject **)(v2 + 288);
    v48 = swift_allocObject(&unk_10019BA58, 32, 7);
    *(_QWORD *)(v48 + 16) = sub_10004B4C8;
    *(_QWORD *)(v48 + 24) = v2;
    v51[4] = sub_10004B4DC;
    v52 = v48;
    v51[0] = _NSConcreteStackBlock;
    v51[1] = (id)1107296256;
    v51[2] = sub_1000475A0;
    v51[3] = &unk_10019BA70;
    v49 = _Block_copy(v51);
    v50 = v52;
    swift_retain();
    swift_retain();
    swift_release(v50);
    dispatch_sync(v47, v49);
    _Block_release(v49);
    LOBYTE(v47) = swift_isEscapingClosureAtFileLocation(v48, "", 92, 543, 26, 1);

    swift_release(v2);
    swift_release(v48);
    if ((v47 & 1) != 0)
    {
      __break(1u);
LABEL_21:
      v54 = 0u;
      v55 = 0u;
LABEL_22:
      sub_100007B30((uint64_t)&v54);
    }
  }
}

uint64_t type metadata accessor for DefaultPINController()
{
  return objc_opt_self(_TtC9SPREngine20DefaultPINController);
}

_QWORD *sub_100049BB0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  _QWORD v5[4];
  uint64_t v6;

  v5[2] = *v1;
  v5[3] = a1;
  v3 = sub_100003A2C(&qword_1001AF678);
  result = OS_dispatch_queue.sync<A>(execute:)(&v6, sub_100049E18, v5, v3);
  if (!v2)
    return (_QWORD *)v6;
  return result;
}

_QWORD *sub_100049C18(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD v4[6];

  v4[2] = *v2;
  v4[3] = a1;
  v4[4] = a2;
  return OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_100049DF0, v4, &type metadata for () + 1);
}

_QWORD *sub_100049C64()
{
  _QWORD *v0;

  return OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_100049DDC, *v0, &type metadata for () + 1);
}

_QWORD *sub_100049C9C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;

  v2 = *v0;
  v3 = sub_100005E24(0, &qword_1001AF670, SPRPINData_ptr);
  result = OS_dispatch_queue.sync<A>(execute:)(&v5, sub_100049DB4, v2, v3);
  if (!v1)
    return (_QWORD *)v5;
  return result;
}

uint64_t sub_100049D08()
{
  return sub_100047498();
}

_QWORD *sub_100049D28(uint64_t a1)
{
  _QWORD *v1;
  _QWORD v3[4];

  v3[3] = a1;
  v3[2] = *v1;
  return OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_100049D90, v3, &type metadata for () + 1);
}

id sub_100049D70(uint64_t a1, uint64_t a2)
{
  return sub_10004860C(a1, a2);
}

void sub_100049D90()
{
  uint64_t v0;

  sub_10004798C(*(void **)(v0 + 24));
}

void sub_100049DB4(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  sub_100045E84();
  if (!v1)
    *a1 = v3;
}

void sub_100049DDC()
{
  sub_1000452C4();
}

uint64_t sub_100049DF0()
{
  uint64_t v0;

  return sub_1000444F8(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

void sub_100049E18(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100042318(*(void **)(v1 + 24));
  if (!v2)
  {
    *a1 = v4;
    a1[1] = v5;
    a1[2] = v6;
    a1[3] = v7;
  }
}

id sub_100049E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, char *a8)
{
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  Swift::String v23;
  _TtC14softposreaderd12RemoteReader *v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _TtC14softposreaderd12RemoteReader *v35;
  SEL v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _TtC14softposreaderd12RemoteReader *v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  objc_class *v54;
  id v55;
  os_log_type_t type;
  NSObject *log;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61[4];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  objc_super v65;
  _QWORD v66[5];
  _QWORD v67[5];
  _QWORD v68[5];
  _QWORD v69[5];
  _QWORD v70[6];

  v70[3] = type metadata accessor for MPOCDefaultMonitorManager();
  v70[4] = &off_10019F1B0;
  v70[0] = a4;
  v69[3] = type metadata accessor for SystemInfo();
  v69[4] = &off_10019F8A0;
  v69[0] = a5;
  v68[4] = &off_1001A11A8;
  v68[3] = type metadata accessor for SecureElement();
  v68[0] = a7;
  *(_QWORD *)&a8[OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_activeSession] = 0;
  v16 = qword_1001AD288;
  v17 = a8;
  if (v16 != -1)
    swift_once(&qword_1001AD288, sub_1001218D8);
  v18 = type metadata accessor for Logger(0);
  sub_100003A14(v18, (uint64_t)qword_1001B35E0);
  sub_100008390((uint64_t)v70, (uint64_t)v67);
  v19 = sub_100008390((uint64_t)v69, (uint64_t)v66);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc(42, -1);
    v59 = swift_slowAlloc(96, -1);
    v64 = v59;
    *(_DWORD *)v22 = 134218754;
    v60 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v22 + 4, v22 + 12);
    *(_WORD *)(v22 + 12) = 2080;
    v60 = 0;
    v62 = a3;
    v63 = a2;
    v61[0] = 0xE000000000000000;
    log = v20;
    _print_unlocked<A, B>(_:_:)(&v63, &v60, &type metadata for Int, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    type = v21;
    v23._countAndFlagsBits = 3026478;
    v23._object = (void *)0xE300000000000000;
    String.append(_:)(v23);
    _print_unlocked<A, B>(_:_:)(&v62, &v60, &type metadata for Int, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v24 = (_TtC14softposreaderd12RemoteReader *)v61[0];
    v60 = sub_1000056EC(v60, v61[0], &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v22 + 14, v22 + 22);
    swift_bridgeObjectRelease(v24, v25, v26, v27, v28, v29, v30, v31);
    *(_WORD *)(v22 + 22) = 2080;
    sub_100008390((uint64_t)v67, (uint64_t)&v60);
    v32 = sub_100003A2C(&qword_1001AF6C0);
    v33 = String.init<A>(describing:)(&v60, v32);
    v35 = (_TtC14softposreaderd12RemoteReader *)v34;
    v60 = sub_1000056EC(v33, v34, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v22 + 24, v22 + 32);
    swift_bridgeObjectRelease(v35, v36, v37, v38, v39, v40, v41, v42);
    sub_100005D3C(v67);
    *(_WORD *)(v22 + 32) = 2080;
    sub_100008390((uint64_t)v66, (uint64_t)&v60);
    v43 = sub_100003A2C(&qword_1001AF6C8);
    v44 = String.init<A>(describing:)(&v60, v43);
    v46 = (_TtC14softposreaderd12RemoteReader *)v45;
    v60 = sub_1000056EC(v44, v45, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v22 + 34, v22 + 42);
    swift_bridgeObjectRelease(v46, v47, v48, v49, v50, v51, v52, v53);
    sub_100005D3C(v66);
    _os_log_impl((void *)&_mh_execute_header, log, type, "DefaultPINAppletProxy.init(pinLength: %ld, bound: %s, monitorManager: %s, systemInfo: %s", (uint8_t *)v22, 0x2Au);
    swift_arrayDestroy(v59, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v59, -1, -1);
    swift_slowDealloc(v22, -1, -1);

  }
  else
  {
    sub_100005D3C(v67);
    sub_100005D3C(v66);

  }
  *(_QWORD *)&v17[OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_pinLength] = a1;
  *(_QWORD *)&v17[OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_maxPinLength] = a3;
  *(_QWORD *)&v17[OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_minPinLength] = a2;
  sub_100008390((uint64_t)v70, (uint64_t)&v17[OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_monitorManager]);
  sub_100008390((uint64_t)v69, (uint64_t)&v17[OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_systemInfo]);
  sub_100008390((uint64_t)a6, (uint64_t)&v17[OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_auditor]);
  sub_100008390((uint64_t)v68, (uint64_t)&v17[OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_secureElement]);

  v54 = (objc_class *)type metadata accessor for DefaultPINAppletProxy();
  v65.receiver = v17;
  v65.super_class = v54;
  v55 = objc_msgSendSuper2(&v65, "init");
  sub_100005D3C(v68);
  sub_100005D3C(a6);
  sub_100005D3C(v69);
  sub_100005D3C(v70);
  return v55;
}

id sub_10004A2B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  id v27;
  _QWORD v30[3];
  uint64_t v31;
  _UNKNOWN **v32;
  _QWORD v33[3];
  uint64_t v34;
  _UNKNOWN **v35;
  _QWORD v36[3];
  uint64_t v37;
  _UNKNOWN **v38;

  v37 = type metadata accessor for MPOCDefaultMonitorManager();
  v38 = &off_10019F1B0;
  v36[0] = a4;
  v34 = type metadata accessor for SystemInfo();
  v35 = &off_10019F8A0;
  v33[0] = a5;
  v31 = type metadata accessor for SecureElement();
  v32 = &off_1001A11A8;
  v30[0] = a7;
  v14 = (char *)objc_allocWithZone((Class)type metadata accessor for DefaultPINAppletProxy());
  v15 = sub_10001A64C((uint64_t)v36, v37);
  __chkstk_darwin(v15);
  v17 = (_QWORD *)((char *)&v30[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v18 + 16))(v17);
  v19 = sub_10001A64C((uint64_t)v33, v34);
  __chkstk_darwin(v19);
  v21 = (_QWORD *)((char *)&v30[-1] - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v22 + 16))(v21);
  v23 = sub_10001A64C((uint64_t)v30, v31);
  __chkstk_darwin(v23);
  v25 = (_QWORD *)((char *)&v30[-1] - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v26 + 16))(v25);
  v27 = sub_100049E4C(a1, a2, a3, *v17, *v21, a6, *v25, v14);
  sub_100005D3C(v30);
  sub_100005D3C(v33);
  sub_100005D3C(v36);
  return v27;
}

uint64_t sub_10004A498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _TtC14softposreaderd12RemoteReader *v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _TtC14softposreaderd12RemoteReader *v52;
  SEL v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _TtC14softposreaderd12RemoteReader *v63;
  SEL v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _TtC14softposreaderd12RemoteReader *v74;
  SEL v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _TtC14softposreaderd12RemoteReader *v85;
  SEL v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  _TtC14softposreaderd12RemoteReader *v96;
  _TtC14softposreaderd12RemoteReader *v97;
  SEL v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  _BYTE v129[32];
  uint64_t v130;
  _QWORD v131[5];
  _QWORD v132[5];
  _QWORD v133[5];
  _QWORD v134[5];
  _QWORD v135[5];
  _QWORD v136[5];
  _QWORD v137[5];
  _QWORD v138[5];
  _QWORD v139[6];

  v119 = a4;
  v127 = (_QWORD *)a3;
  v14 = type metadata accessor for OS_dispatch_source.TimerFlags(0);
  v125 = *(_QWORD *)(v14 - 8);
  v126 = v14;
  __chkstk_darwin(v14);
  v124 = (char *)&v118 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS.QoSClass(0);
  v122 = *(_QWORD *)(v16 - 8);
  v123 = v16;
  __chkstk_darwin(v16);
  v121 = (char *)&v118 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v118 = *(_QWORD *)(v120 - 8);
  __chkstk_darwin(v120);
  v19 = (char *)&v118 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v20);
  v22 = (char *)&v118 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v23);
  v25 = (char *)&v118 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139[3] = type metadata accessor for DefaultPINAppletProxy();
  v139[4] = &off_10019FF80;
  v139[0] = a1;
  v138[3] = type metadata accessor for CertificateManager();
  v138[4] = &off_100199940;
  v138[0] = a2;
  v137[3] = type metadata accessor for DefaultManagedDictionary();
  v137[4] = &off_10019D700;
  v137[0] = a5;
  v136[3] = type metadata accessor for SecureElement();
  v136[4] = &off_1001A11A8;
  v136[0] = a6;
  *(_OWORD *)(a7 + 56) = 0u;
  *(_OWORD *)(a7 + 72) = 0u;
  *(_OWORD *)(a7 + 88) = 0u;
  *(_OWORD *)(a7 + 104) = 0u;
  *(_OWORD *)(a7 + 120) = 0u;
  *(_QWORD *)(a7 + 136) = 0;
  *(_QWORD *)(a7 + 144) = 0xF000000000000000;
  *(_BYTE *)(a7 + 152) = 0;
  *(_WORD *)(a7 + 272) = 0;
  *(_QWORD *)(a7 + 280) = 0;
  v26 = sub_100005E24(0, (unint64_t *)&qword_1001B1240, OS_dispatch_queue_ptr);
  *(_QWORD *)(a7 + 248) = 0;
  *(_QWORD *)(a7 + 256) = 0;
  static DispatchQoS.unspecified.getter(v26);
  v135[0] = &_swiftEmptyArrayStorage;
  v27 = sub_100005F1C((unint64_t *)&qword_1001AE3E0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v28 = sub_100003A2C((uint64_t *)&unk_1001B1250);
  v29 = sub_100005F5C((unint64_t *)&qword_1001AE3F0, (uint64_t *)&unk_1001B1250);
  dispatch thunk of SetAlgebra.init<A>(_:)(v135, v28, v29, v20, v27);
  (*(void (**)(char *, _QWORD, uint64_t))(v118 + 104))(v19, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v120);
  v120 = v26;
  *(_QWORD *)(a7 + 288) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0x746E6F635F6E6970, 0xEE0072656C6C6F72, v25, v22, v19, 0);
  *(_QWORD *)(a7 + 384) = 0xD00000000000002ALL;
  *(_QWORD *)(a7 + 392) = 0x800000010016B3A0;
  *(_QWORD *)(a7 + 400) = 0xD00000000000002ALL;
  *(_QWORD *)(a7 + 408) = 0x800000010016B3D0;
  if (qword_1001ACF40 != -1)
    swift_once(&qword_1001ACF40, sub_100041F00);
  v30 = type metadata accessor for Logger(0);
  sub_100003A14(v30, (uint64_t)qword_1001AF390);
  sub_100008390((uint64_t)v139, (uint64_t)v135);
  sub_100008390((uint64_t)v138, (uint64_t)v134);
  v31 = v127;
  sub_100008390((uint64_t)v127, (uint64_t)v133);
  sub_100008390((uint64_t)v137, (uint64_t)v132);
  sub_100008390((uint64_t)v136, (uint64_t)v131);
  v32 = v119;
  v33 = swift_retain_n(v119, 2);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v34, v35))
  {
    v36 = swift_slowAlloc(72, -1);
    v118 = swift_slowAlloc(192, -1);
    v130 = v118;
    *(_DWORD *)v36 = 136316674;
    sub_100008390((uint64_t)v135, (uint64_t)&v128);
    v37 = sub_100003A2C(&qword_1001AF698);
    v38 = String.init<A>(describing:)(&v128, v37);
    v39 = v32;
    v41 = (_TtC14softposreaderd12RemoteReader *)v40;
    v128 = sub_1000056EC(v38, v40, &v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129, v36 + 4, v36 + 12);
    swift_bridgeObjectRelease(v41, v42, v43, v44, v45, v46, v47, v48);
    sub_100005D3C(v135);
    *(_WORD *)(v36 + 12) = 2080;
    sub_100008390((uint64_t)v134, (uint64_t)&v128);
    v49 = sub_100003A2C(&qword_1001AF6A0);
    v50 = String.init<A>(describing:)(&v128, v49);
    v52 = (_TtC14softposreaderd12RemoteReader *)v51;
    v128 = sub_1000056EC(v50, v51, &v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129, v36 + 14, v36 + 22);
    swift_bridgeObjectRelease(v52, v53, v54, v55, v56, v57, v58, v59);
    sub_100005D3C(v134);
    *(_WORD *)(v36 + 22) = 2080;
    sub_100008390((uint64_t)v133, (uint64_t)&v128);
    v60 = sub_100003A2C(&qword_1001AF6A8);
    v61 = String.init<A>(describing:)(&v128, v60);
    v63 = (_TtC14softposreaderd12RemoteReader *)v62;
    v128 = sub_1000056EC(v61, v62, &v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129, v36 + 24, v36 + 32);
    swift_bridgeObjectRelease(v63, v64, v65, v66, v67, v68, v69, v70);
    sub_100005D3C(v133);
    *(_WORD *)(v36 + 32) = 2080;
    v128 = v39;
    v71 = type metadata accessor for ReaderAnalytics(0);
    swift_retain();
    v72 = String.init<A>(describing:)(&v128, v71);
    v74 = (_TtC14softposreaderd12RemoteReader *)v73;
    v128 = sub_1000056EC(v72, v73, &v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129, v36 + 34, v36 + 42);
    swift_release_n(v39, 2);
    swift_bridgeObjectRelease(v74, v75, v76, v77, v78, v79, v80, v81);
    *(_WORD *)(v36 + 42) = 2048;
    v128 = *(_QWORD *)&a8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129, v36 + 44, v36 + 52);
    *(_WORD *)(v36 + 52) = 2080;
    sub_100008390((uint64_t)v132, (uint64_t)&v128);
    v82 = sub_100003A2C(&qword_1001AF6B0);
    v83 = String.init<A>(describing:)(&v128, v82);
    v85 = (_TtC14softposreaderd12RemoteReader *)v84;
    v128 = sub_1000056EC(v83, v84, &v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129, v36 + 54, v36 + 62);
    swift_bridgeObjectRelease(v85, v86, v87, v88, v89, v90, v91, v92);
    sub_100005D3C(v132);
    *(_WORD *)(v36 + 62) = 2080;
    sub_100008390((uint64_t)v131, (uint64_t)&v128);
    v93 = sub_100003A2C(&qword_1001AF6B8);
    v94 = String.init<A>(describing:)(&v128, v93);
    v96 = (_TtC14softposreaderd12RemoteReader *)v95;
    v128 = sub_1000056EC(v94, v95, &v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129, v36 + 64, v36 + 72);
    v97 = v96;
    v32 = v39;
    swift_bridgeObjectRelease(v97, v98, v99, v100, v101, v102, v103, v104);
    sub_100005D3C(v131);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "DefaultPINController.init(appletProxy: %s, certificateManager: %s, auditor: %s, analytics: %s, transactionDataLifetime: %f), managedData: %s, secureElement: %s)", (uint8_t *)v36, 0x48u);
    v105 = v118;
    swift_arrayDestroy(v118, 6, (char *)&type metadata for Any + 8);
    v31 = v127;
    swift_slowDealloc(v105, -1, -1);
    swift_slowDealloc(v36, -1, -1);
  }
  else
  {
    sub_100005D3C(v135);
    sub_100005D3C(v134);
    sub_100005D3C(v133);
    swift_release_n(v32, 2);
    sub_100005D3C(v132);
    sub_100005D3C(v131);
  }

  sub_100008390((uint64_t)v139, a7 + 160);
  sub_100008390((uint64_t)v138, a7 + 16);
  sub_100008390((uint64_t)v31, a7 + 200);
  *(_QWORD *)(a7 + 296) = v32;
  sub_100008390((uint64_t)v136, a7 + 344);
  sub_100008390((uint64_t)v137, a7 + 304);
  *(double *)(a7 + 240) = a8;
  sub_100005E24(0, &qword_1001AC658, OS_dispatch_source_ptr);
  v107 = v121;
  v106 = v122;
  v108 = v123;
  (*(void (**)(char *, _QWORD, uint64_t))(v122 + 104))(v121, enum case for DispatchQoS.QoSClass.background(_:), v123);
  swift_retain();
  v109 = (void *)static OS_dispatch_queue.global(qos:)(v107);
  (*(void (**)(char *, uint64_t))(v106 + 8))(v107, v108);
  v135[0] = &_swiftEmptyArrayStorage;
  v110 = sub_100005F1C(&qword_1001AF680, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  v111 = sub_100003A2C(&qword_1001AF688);
  v112 = sub_100005F5C(&qword_1001AF690, &qword_1001AF688);
  v113 = v124;
  v114 = v111;
  v115 = v126;
  dispatch thunk of SetAlgebra.init<A>(_:)(v135, v114, v112, v126, v110);
  v116 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v113, v109);

  sub_100005D3C(v136);
  sub_100005D3C(v137);
  sub_100005D3C(v31);
  sub_100005D3C(v138);
  sub_100005D3C(v139);
  (*(void (**)(char *, uint64_t))(v125 + 8))(v113, v115);
  *(_QWORD *)(a7 + 264) = v116;
  return a7;
}

uint64_t sub_10004AD5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v31[3];
  uint64_t v32;
  _UNKNOWN **v33;
  _QWORD v34[3];
  uint64_t v35;
  _UNKNOWN **v36;
  _QWORD v37[3];
  uint64_t v38;
  _UNKNOWN **v39;

  v38 = type metadata accessor for CertificateManager();
  v39 = &off_100199940;
  v37[0] = a2;
  v35 = type metadata accessor for DefaultManagedDictionary();
  v36 = &off_10019D700;
  v34[0] = a5;
  v32 = type metadata accessor for SecureElement();
  v33 = &off_1001A11A8;
  v31[0] = a6;
  v14 = type metadata accessor for DefaultPINController();
  v15 = swift_allocObject(v14, 416, 7);
  v16 = sub_10001A64C((uint64_t)v37, v38);
  __chkstk_darwin(v16);
  v18 = (_QWORD *)((char *)&v31[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v19 + 16))(v18);
  v20 = sub_10001A64C((uint64_t)v34, v35);
  __chkstk_darwin(v20);
  v22 = (_QWORD *)((char *)&v31[-1] - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v23 + 16))(v22);
  v24 = sub_10001A64C((uint64_t)v31, v32);
  __chkstk_darwin(v24);
  v26 = (_QWORD *)((char *)&v31[-1] - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v27 + 16))(v26);
  v28 = sub_10004A498(a1, *v18, a3, a4, *v22, *v26, v15, a7);
  sub_100005D3C(v31);
  sub_100005D3C(v34);
  sub_100005D3C(v37);
  return v28;
}

uint64_t sub_10004AF48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD v37[2];
  uint64_t *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD v41[5];
  _QWORD v42[3];
  uint64_t v43;
  _QWORD v44[5];
  _QWORD v45[3];
  uint64_t v46;
  _QWORD v47[3];
  uint64_t v48;
  _UNKNOWN **v49;
  _QWORD v50[5];
  _QWORD v51[4];
  _QWORD v52[6];

  v3 = a1;
  sub_1000DDE7C();
  if (v1)
  {
    swift_release(a1);
  }
  else
  {
    sub_1000DC9E4();
    sub_100005EF8(v51, v51[3]);
    sub_100113BC0(6);
    sub_1000DFD74();
    sub_1000DF314();
    sub_100008390((uint64_t)v50, (uint64_t)v44);
    sub_100008390((uint64_t)v52, (uint64_t)v42);
    v5 = sub_10001A64C((uint64_t)v47, v48);
    v40 = v37;
    __chkstk_darwin(v5);
    v7 = (_QWORD *)((char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v8 + 16))(v7);
    v9 = sub_10001A64C((uint64_t)v45, v46);
    __chkstk_darwin(v9);
    v11 = (_QWORD *)((char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v12 + 16))(v11);
    v13 = sub_10001A64C((uint64_t)v42, v43);
    __chkstk_darwin(v13);
    v15 = (_QWORD *)((char *)v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v16 + 16))(v15);
    v17 = sub_10004A2B0(0, 4, 12, *v7, *v11, v44, *v15);
    sub_100005D3C(v42);
    sub_100005D3C(v45);
    sub_100005D3C(v47);
    v48 = type metadata accessor for DefaultPINAppletProxy();
    v49 = &off_10019FF80;
    v47[0] = v17;
    v18 = v17;
    sub_1000E02A4();
    sub_100008390((uint64_t)v50, (uint64_t)v44);
    v19 = sub_1000E07D4();
    objc_msgSend((id)objc_opt_self(SPRPINParameter), "defaultTransactionDataLifetime");
    v21 = v20;
    sub_1000DE3AC();
    sub_100008390((uint64_t)v52, (uint64_t)v41);
    v22 = sub_10001A64C((uint64_t)v47, v48);
    v40 = v37;
    __chkstk_darwin(v22);
    v38 = (_QWORD *)((char *)v37 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(void))(v24 + 16))();
    v25 = sub_10001A64C((uint64_t)v45, v46);
    v39 = v37;
    __chkstk_darwin(v25);
    v27 = (_QWORD *)((char *)v37 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v28 + 16))(v27);
    v29 = sub_10001A64C((uint64_t)v42, v43);
    v37[1] = v37;
    __chkstk_darwin(v29);
    v31 = (_QWORD *)((char *)v37 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v32 + 16))(v31);
    v33 = sub_10001A64C((uint64_t)v41, v41[3]);
    v37[0] = v37;
    __chkstk_darwin(v33);
    v35 = (_QWORD *)((char *)v37 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v36 + 16))(v35);
    v3 = sub_10004AD5C(*v38, *v27, (uint64_t)v44, v19, *v31, *v35, v21);
    swift_release(v19);
    sub_100005D3C(v41);
    sub_100005D3C(v42);
    sub_100005D3C(v45);
    sub_100005D3C(v47);

    swift_release(a1);
    sub_100005D3C(v50);
    sub_100005D3C(v52);
    sub_100005D3C(v51);
  }
  return v3;
}

uint64_t sub_10004B4CC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004B4DC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10004B4FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B50C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B514(uint64_t a1, const char *a2, _TtC14softposreaderd12RemoteReader *a3, void *a4, void *a5, void *a6, void *a7, void *a8, uint64_t a9, unint64_t a10)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRelease(a3, a2, a3, a4, a5, a6, a7, a8);
    sub_100005DE0((uint64_t)a4, (unint64_t)a5);
    sub_100005DE0((uint64_t)a6, (unint64_t)a7);
    return sub_100005DE0(a9, a10);
  }
  return result;
}

uint64_t sub_10004B580()
{
  uint64_t v0;

  return sub_100013A48(*(const char **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_TtC14softposreaderd12RemoteReader **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_TtC14softposreaderd12RemoteReader **)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_10004B5A4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004B5C8()
{
  uint64_t v0;

  return sub_10004815C(v0);
}

uint64_t sub_10004B5D0(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_10004B5E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRetain();
    sub_100005D9C(a4, a5);
    sub_100005D9C(a6, a7);
    return sub_100005D9C(a9, a10);
  }
  return result;
}

void sub_10004B64C()
{
  const __CFString *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  void *v6;
  __CFNotificationCenter *center;

  center = CFNotificationCenterGetDarwinNotifyCenter();
  v0 = (const __CFString *)String._bridgeToObjectiveC()();
  CFNotificationCenterPostNotification(center, v0, 0, 0, 1u);
  if (qword_1001ACF40 != -1)
    swift_once(&qword_1001ACF40, sub_100041F00);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100003A14(v1, (uint64_t)qword_1001AF390);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "sensors toggled", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
    v6 = (void *)v0;
  }
  else
  {
    v6 = v3;
    v3 = center;
    center = (__CFNotificationCenter *)v0;
  }

}

uint64_t sub_10004B77C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004B78C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;

  v20 = a1;
  swift_errorRetain();
  v2 = sub_100003A2C((uint64_t *)&unk_1001B1280);
  type metadata accessor for PINControllerError(0);
  v4 = v3;
  if ((swift_dynamicCast(&v19, &v20, v2, v3, 6) & 1) != 0)
  {
    v5 = v19;
    v20 = (uint64_t)v19;
    v6 = sub_100005F1C((unint64_t *)&qword_1001AD868, (uint64_t (*)(uint64_t))type metadata accessor for PINControllerError, (uint64_t)&unk_10015C238);
    if (_BridgedStoredNSError.errorCode.getter(v4, v6) > 10999)
    {
      v20 = (uint64_t)v5;
      if (_BridgedStoredNSError.errorCode.getter(v4, v6) < 12000)
        return (uint64_t)v5;
    }

  }
  v20 = a1;
  swift_errorRetain();
  type metadata accessor for PINAppletProxyError(0);
  v8 = v7;
  if ((swift_dynamicCast(&v19, &v20, v2, v7, 6) & 1) == 0)
    return sub_1000247F4(11009, 0, 0, 0);
  v9 = v19;
  v20 = (uint64_t)v19;
  v10 = sub_100005F1C((unint64_t *)&qword_1001AD938, (uint64_t (*)(uint64_t))type metadata accessor for PINAppletProxyError, (uint64_t)&unk_10015C678);
  if (_BridgedStoredNSError.errorCode.getter(v8, v10) <= 11999
    || (v20 = (uint64_t)v9, _BridgedStoredNSError.errorCode.getter(v8, v10) >= 13000))
  {

    return sub_1000247F4(11009, 0, 0, 0);
  }
  _s3__C4CodeOMa_2(0);
  v13 = v12;
  v20 = 12006;
  v14 = sub_100005F1C(&qword_1001AD920, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_2, (uint64_t)&unk_10015C720);
  v15 = v9;
  v16 = static _ErrorCodeProtocol.~= infix(_:_:)(&v20, v15, v13, v14);

  if ((v16 & 1) != 0)
  {
    v17 = 11007;
  }
  else
  {
    v20 = 12009;
    v15 = v15;
    v18 = static _ErrorCodeProtocol.~= infix(_:_:)(&v20, v15, v13, v14);

    if ((v18 & 1) != 0)
      v17 = 11011;
    else
      v17 = 11009;
  }
  v5 = (void *)sub_1000247F4(v17, 0, 0, 0);

  return (uint64_t)v5;
}

double sub_10004B9E0@<D0>(_OWORD *a1@<X8>)
{
  return sub_100030870(a1);
}

uint64_t sub_10004BA18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001AF6E8);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001AF6E8);
  if (qword_1001AD160 != -1)
    swift_once(&qword_1001AD160, sub_1000CC600);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4E10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void *sub_10004BAA8(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 176, a1, 33, 0);
  return &j__swift_endAccess;
}

uint64_t sub_10004BAE8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10004BB20 + 4 * byte_10015F000[a1]))(0xD000000000000013, 0x80000001001677D0);
}

uint64_t sub_10004BB20(uint64_t a1)
{
  return a1 - 2;
}

uint64_t sub_10004BD50(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10004BD8C + 4 * byte_10015F01D[a1]))(0xD000000000000012, 0x80000001001681F0);
}

uint64_t sub_10004BD8C()
{
  return 0x54676E696C6C6F50;
}

unint64_t sub_10004BDB0()
{
  return 0xD000000000000016;
}

uint64_t sub_10004BE70()
{
  return 0x6C61746F544E4950;
}

uint64_t sub_10004BE90()
{
  uint64_t v0;

  return v0 + 3;
}

uint64_t sub_10004BEA0()
{
  uint64_t v0;

  return v0 + 24;
}

void sub_10004BEB0()
{
  JUMPOUT(0x10004BEBCLL);
}

uint64_t sub_10004BEC8()
{
  return 0x506E656577746562;
}

uint64_t sub_10004BEEC(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_10004BF8C(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_10004BAE8);
}

Swift::Int sub_10004BEF8(uint64_t a1, uint64_t a2)
{
  return sub_10004C024(a1, a2, (uint64_t (*)(uint64_t))sub_10004BAE8);
}

uint64_t sub_10004BF04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004C094(a1, a2, a3, (uint64_t (*)(_QWORD))sub_10004BAE8);
}

Swift::Int sub_10004BF10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004C0E0(a1, a2, a3, (uint64_t (*)(uint64_t))sub_10004BAE8);
}

uint64_t sub_10004BF1C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10004DA94(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_10004BF48@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10004BAE8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_10004BF70(_QWORD *a1@<X8>)
{
  *a1 = &off_1001988A0;
}

uint64_t sub_10004BF80(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_10004BF8C(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_10004BD50);
}

uint64_t sub_10004BF8C(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;

  v6 = *a2;
  v7 = a5(*a1);
  v9 = v8;
  v10 = a5(v6);
  if (v7 == v10 && v9 == v11)
  {
    v14 = 1;
    v13 = v9;
  }
  else
  {
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
  }
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v13);
  return v14 & 1;
}

Swift::Int sub_10004C018(uint64_t a1, uint64_t a2)
{
  return sub_10004C024(a1, a2, (uint64_t (*)(uint64_t))sub_10004BD50);
}

Swift::Int sub_10004C024(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[9];

  v5 = *v3;
  Hasher.init(_seed:)(v10);
  v6 = a3(v5);
  v8 = v7;
  String.hash(into:)(v10, v6, v7);
  swift_bridgeObjectRelease(v8);
  return Hasher._finalize()();
}

uint64_t sub_10004C088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004C094(a1, a2, a3, (uint64_t (*)(_QWORD))sub_10004BD50);
}

uint64_t sub_10004C094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = a4(*v4);
  v8 = v7;
  String.hash(into:)(a1, v6, v7);
  return swift_bridgeObjectRelease(v8);
}

Swift::Int sub_10004C0D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004C0E0(a1, a2, a3, (uint64_t (*)(uint64_t))sub_10004BD50);
}

Swift::Int sub_10004C0E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[9];

  v6 = *v4;
  Hasher.init(_seed:)(v11);
  v7 = a4(v6);
  v9 = v8;
  String.hash(into:)(v11, v7, v8);
  swift_bridgeObjectRelease(v9);
  return Hasher._finalize()();
}

unint64_t sub_10004C140@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10004DAE4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10004C16C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10004BD50(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_10004C194(_QWORD *a1@<X8>)
{
  *a1 = &off_100198A68;
}

uint64_t sub_10004C1A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t result;
  char v8;

  if (a1 < 0 || a2 < 0)
    goto LABEL_12;
  v4 = a1 + (a2 << 16);
  if (__CFADD__(a1, a2 << 16))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (a3 < 0)
  {
LABEL_12:
    v8 = 2;
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, v8, 3451, 0);
    __break(1u);
    return result;
  }
  v5 = __CFADD__(v4, a3 << 32);
  v6 = v4 + (a3 << 32);
  if (v5)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (a4 < 0)
    goto LABEL_12;
  result = v6 + (a4 << 48);
  if (__CFADD__(v6, a4 << 48))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  return result;
}

void sub_10004C238(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10004C278()
{
  uint64_t v0;
  unint64_t v1;
  unsigned int v3;

  sub_10004DB2C();
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(1);
  if ((v1 & 0xFF00) != 0x200)
  {
    sub_10004DB2C();
    if ((v1 & 0x100) != 0)
      UnsignedInteger.setBit(_:)(2);
    else
      UnsignedInteger.clearBit(_:)(2);
  }
  if ((v1 & 0xFF0000) != 0x20000)
  {
    sub_10004DB2C();
    if ((v1 & 0x10000) != 0)
      UnsignedInteger.setBit(_:)(3);
    else
      UnsignedInteger.clearBit(_:)(3);
  }
  if ((v1 & 0xFF000000) != 0x2000000)
  {
    sub_10004DB2C();
    if ((v1 & 0x1000000) != 0)
      UnsignedInteger.setBit(_:)(4);
    else
      UnsignedInteger.clearBit(_:)(4);
  }
  if ((v1 & 0xFF00000000) != 0x200000000)
  {
    sub_10004DB2C();
    if ((v1 & 0x100000000) != 0)
      UnsignedInteger.setBit(_:)(5);
    else
      UnsignedInteger.clearBit(_:)(5);
  }
  if ((v1 & 0xFF0000000000) != 0x20000000000)
  {
    sub_10004DB2C();
    if ((v1 & 0x10000000000) != 0)
      UnsignedInteger.setBit(_:)(6);
    else
      UnsignedInteger.clearBit(_:)(6);
  }
  if ((v1 & 0xFF000000000000) != 0x2000000000000)
  {
    sub_10004DB2C();
    if ((v1 & 0x1000000000000) != 0)
      UnsignedInteger.setBit(_:)(7);
    else
      UnsignedInteger.clearBit(_:)(7);
  }
  if (HIBYTE(v1) != 2)
  {
    sub_10004DB2C();
    if ((v1 & 0x100000000000000) != 0)
      UnsignedInteger.setBit(_:)(8);
    else
      UnsignedInteger.clearBit(_:)(8);
  }
  if (v0 != 2)
  {
    sub_10004DB2C();
    if ((v0 & 1) != 0)
      UnsignedInteger.setBit(_:)(9);
    else
      UnsignedInteger.clearBit(_:)(9);
  }
  if ((v0 & 0xFF00) != 0x200)
  {
    sub_10004DB2C();
    if ((v0 & 0x100) != 0)
      UnsignedInteger.setBit(_:)(10);
    else
      UnsignedInteger.clearBit(_:)(10);
  }
  if ((v0 & 0xFF0000) != 0x20000)
  {
    sub_10004DB2C();
    if ((v0 & 0x10000) != 0)
      UnsignedInteger.setBit(_:)(11);
    else
      UnsignedInteger.clearBit(_:)(11);
  }
  if ((v0 & 0xFF000000) != 0x2000000)
  {
    sub_10004DB2C();
    if ((v0 & 0x1000000) != 0)
      UnsignedInteger.setBit(_:)(12);
    else
      UnsignedInteger.clearBit(_:)(12);
  }
  if ((v0 & 0xFF00000000) != 0x200000000)
  {
    sub_10004DB2C();
    if ((v0 & 0x100000000) != 0)
      UnsignedInteger.setBit(_:)(13);
    else
      UnsignedInteger.clearBit(_:)(13);
  }
  if ((v0 & 0xFF0000000000) != 0x20000000000)
  {
    sub_10004DB2C();
    if ((v0 & 0x10000000000) != 0)
      UnsignedInteger.setBit(_:)(14);
    else
      UnsignedInteger.clearBit(_:)(14);
  }
  if ((v0 & 0xFF000000000000) != 0x2000000000000)
  {
    sub_10004DB2C();
    if ((v0 & 0x1000000000000) != 0)
      UnsignedInteger.setBit(_:)(15);
    else
      UnsignedInteger.clearBit(_:)(15);
  }
  return v3;
}

void sub_10004C650()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  _TtC14softposreaderd12RemoteReader *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  _TtC14softposreaderd12RemoteReader *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  SEL v25;
  char v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  _TtC14softposreaderd12RemoteReader *v41;
  os_unfair_lock_s *v42;
  _TtC14softposreaderd12RemoteReader **v43;
  os_unfair_lock_s *v44;
  SEL v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  _TtC14softposreaderd12RemoteReader *v52;
  SEL v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  _TtC14softposreaderd12RemoteReader *v60;
  SEL v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  uint64_t v68[3];
  char v69[24];
  char v70[232];

  v1 = v0;
  v2 = sub_100003A2C((uint64_t *)&unk_1001B1290);
  inited = swift_initStackObject(v2, v70);
  *(_OWORD *)(inited + 16) = xmmword_10015E3E0;
  *(_BYTE *)(inited + 32) = 2;
  v4 = v0 + 136;
  v5 = sub_10004C1A4(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160));
  *(_QWORD *)(inited + 64) = &type metadata for UInt64;
  *(_QWORD *)(inited + 40) = v5;
  *(_BYTE *)(inited + 72) = 1;
  sub_10004C238(*(_QWORD *)(v0 + 120));
  *(_QWORD *)(inited + 104) = &type metadata for UInt32;
  *(_DWORD *)(inited + 80) = v6;
  *(_BYTE *)(inited + 112) = 3;
  v7 = *(unsigned __int8 *)(v0 + 168) | ((unint64_t)*(unsigned __int16 *)(v0 + 172) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 169) << 8) | ((unint64_t)*(unsigned __int16 *)(v0 + 170) << 16);
  *(_QWORD *)(inited + 144) = &type metadata for UInt64;
  *(_QWORD *)(inited + 120) = v7;
  *(_BYTE *)(inited + 152) = 4;
  swift_beginAccess(v0 + 176, v69, 1, 0);
  v8 = *(_TtC14softposreaderd12RemoteReader **)(v0 + 176);
  if (v8)
  {
    v68[0] = *(_QWORD *)(v0 + 176);
    swift_bridgeObjectRetain();
    v9 = sub_100003A2C((uint64_t *)&unk_1001AE460);
    v10 = sub_100030828((unint64_t *)&qword_1001B12B0, (uint64_t *)&unk_1001AE460, (uint64_t)&protocol conformance descriptor for [A]);
    v11 = BidirectionalCollection<>.joined(separator:)(59, 0xE100000000000000, v9, v10);
    v13 = v12;
    swift_bridgeObjectRelease(v8, v12, v14, v15, v16, v17, v18, v19);
    v20 = &type metadata for String;
  }
  else
  {
    v11 = 0;
    v13 = 0;
    v20 = 0;
    *(_QWORD *)(inited + 176) = 0;
  }
  *(_QWORD *)(inited + 160) = v11;
  *(_QWORD *)(inited + 168) = v13;
  *(_QWORD *)(inited + 184) = v20;
  *(_BYTE *)(inited + 192) = 28;
  swift_beginAccess(v1 + 112, v68, 1, 0);
  v21 = *(_TtC14softposreaderd12RemoteReader **)(v1 + 112);
  v22 = swift_bridgeObjectRetain();
  sub_10004D6F4(v22);
  v24 = v23;
  v26 = (char)v25;
  swift_bridgeObjectRelease(v21, v25, v27, v28, v29, v30, v31, v32);
  if ((v26 & 1) != 0)
  {
    v40 = 0;
    v24 = 0;
    *(_QWORD *)(inited + 208) = 0;
    *(_QWORD *)(inited + 216) = 0;
  }
  else
  {
    v40 = &type metadata for Int;
  }
  *(_QWORD *)(inited + 224) = v40;
  *(_QWORD *)(inited + 200) = v24;
  v41 = (_TtC14softposreaderd12RemoteReader *)sub_1000E8C74(inited, v33, v34, v35, v36, v37, v38, v39);
  v42 = *(os_unfair_lock_s **)(v1 + 56);
  v43 = (_TtC14softposreaderd12RemoteReader **)&v42[4];
  v44 = v42 + 8;
  os_unfair_lock_lock(v42 + 8);
  sub_100060510((uint64_t)v43, (uint64_t)v41);
  os_unfair_lock_unlock(v44);
  swift_bridgeObjectRelease(v41, v45, v46, v47, v48, v49, v50, v51);
  os_unfair_lock_lock(v44);
  sub_100060D00(v43, v1, 4);
  os_unfair_lock_unlock(v44);
  *(_BYTE *)(v1 + 120) = 4;
  *(_QWORD *)(v1 + 121) = 0x202020202020202;
  *(_QWORD *)(v1 + 127) = 0x202020202020202;
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 30) = 0;
  v52 = *(_TtC14softposreaderd12RemoteReader **)(v1 + 176);
  *(_QWORD *)(v1 + 176) = 0;
  swift_bridgeObjectRelease(v52, v53, v54, v55, v56, v57, v58, v59);
  v60 = *(_TtC14softposreaderd12RemoteReader **)(v1 + 112);
  *(_QWORD *)(v1 + 112) = &_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v60, v61, v62, v63, v64, v65, v66, v67);
}

void sub_10004C904()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = (os_unfair_lock_s *)(v1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 32));
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 16);
  os_unfair_lock_unlock(v2);
  if (v3)
  {
    if (qword_1001ACF50 != -1)
      swift_once(&qword_1001ACF50, sub_10004BA18);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_100003A14(v4, (uint64_t)qword_1001AF6E8);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "analytics wasn't sent last time", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    sub_10004C650();
  }
}

uint64_t sub_10004CA08()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  unint64_t v16;
  _BYTE v19[24];

  v1 = v0;
  v2 = type metadata accessor for DispatchTime(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v4);
  v8 = &v19[-v7 - 8];
  v9 = v0 + 8;
  v11 = v0[11];
  v10 = v0[12];
  sub_100005EF8(v9, v11);
  (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 8) + 16))(v11);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v3 + 16))(v6, v8, v2);
  v12 = v1 + 14;
  swift_beginAccess(v1 + 14, v19, 33, 0);
  v13 = v1[14];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
  v1[14] = v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v13 = sub_100091590(0, *(_QWORD *)(v13 + 16) + 1, 1, v13);
    *v12 = v13;
  }
  v16 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v13 + 24);
  if (v16 >= v15 >> 1)
  {
    v13 = sub_100091590(v15 > 1, v16 + 1, 1, v13);
    *v12 = v13;
  }
  *(_QWORD *)(v13 + 16) = v16 + 1;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v3 + 32))(v13+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v16, v6, v2);
  swift_endAccess(v19);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8))(v8, v2);
}

void sub_10004CB9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  _TtC14softposreaderd12RemoteReader *v4;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  Swift::String v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  _TtC14softposreaderd12RemoteReader **v23;
  _TtC14softposreaderd12RemoteReader *v24;
  uint64_t v25;
  const char *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  _TtC14softposreaderd12RemoteReader *v36;
  uint64_t v37;
  uint64_t v38;
  _TtC14softposreaderd12RemoteReader *v39;
  _TtC14softposreaderd12RemoteReader **v40;
  _TtC14softposreaderd12RemoteReader *v41;
  int64_t v42;
  _TtC14softposreaderd12RemoteReader *v43;
  _TtC14softposreaderd12RemoteReader *isUniquelyReferenced_nonNull_native;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  SEL v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  _QWORD v57[4];
  _BYTE v58[24];

  v2 = v1;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = &_swiftEmptyArrayStorage;
  if (v3)
  {
    v57[0] = &_swiftEmptyArrayStorage;
    sub_100091C44(0, v3, 0);
    v4 = &_swiftEmptyArrayStorage;
    v6 = (unint64_t *)(a1 + 40);
    do
    {
      v7 = *(v6 - 1);
      v8 = *v6;
      sub_100005D9C(v7, *v6);
      v9 = Data.hexString()();
      sub_100005DE0(v7, v8);
      v57[0] = v4;
      v11 = *(_QWORD *)&v4->instance[8];
      v10 = *(_QWORD *)&v4->instance[16];
      if (v11 >= v10 >> 1)
      {
        sub_100091C44(v10 > 1, v11 + 1, 1);
        v4 = (_TtC14softposreaderd12RemoteReader *)v57[0];
      }
      v6 += 2;
      *(_QWORD *)&v4->instance[8] = v11 + 1;
      *(Swift::String *)&v4->instance[16 * v11 + 24] = v9;
      --v3;
    }
    while (v3);
  }
  v57[0] = v4;
  v12 = sub_100003A2C((uint64_t *)&unk_1001AE460);
  v13 = sub_100030828((unint64_t *)&qword_1001B12B0, (uint64_t *)&unk_1001AE460, (uint64_t)&protocol conformance descriptor for [A]);
  v14 = (void *)BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v12, v13);
  v16 = (void *)v15;
  swift_bridgeObjectRelease(v4, v15, v17, v18, v19, v20, v21, v22);
  v23 = (_TtC14softposreaderd12RemoteReader **)(v2 + 176);
  swift_beginAccess(v2 + 176, v58, 1, 0);
  v24 = *(_TtC14softposreaderd12RemoteReader **)(v2 + 176);
  if (v24)
  {
    v25 = swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) == 0)
LABEL_25:
      v24 = sub_1000915A4(0, *(_QWORD *)&v24->instance[8] + 1, 1, (uint64_t)v24, v29, v30, v31, v32);
    v34 = *(_QWORD *)&v24->instance[8];
    v33 = *(_QWORD *)&v24->instance[16];
    if (v34 >= v33 >> 1)
      v24 = sub_1000915A4((_TtC14softposreaderd12RemoteReader *)(v33 > 1), v34 + 1, 1, (uint64_t)v24, v29, v30, v31, v32);
    *(_QWORD *)&v24->instance[8] = v34 + 1;
    v35 = (char *)v24 + 16 * v34;
    *((_QWORD *)v35 + 4) = v14;
    *((_QWORD *)v35 + 5) = v16;
    v36 = *v23;
    *v23 = v24;
  }
  else
  {
    v37 = sub_100003A2C((uint64_t *)&unk_1001AE410);
    v38 = swift_allocObject(v37, 48, 7);
    v36 = 0;
    *(_OWORD *)(v38 + 16) = xmmword_10015A5F0;
    *(_QWORD *)(v38 + 32) = v14;
    *(_QWORD *)(v38 + 40) = v16;
    *v23 = (_TtC14softposreaderd12RemoteReader *)v38;
  }
  swift_bridgeObjectRelease(v36, v26, v27, v28, v29, v30, v31, v32);
  v39 = *v23;
  if (*v23)
  {
    v14 = &type metadata for String;
    while (*(_QWORD *)&v39->instance[8] >= 4uLL)
    {
      v16 = sub_10004BAA8((uint64_t)v57);
      v41 = *v40;
      if (*v40)
      {
        v42 = *(_QWORD *)&v41->instance[8];
        if (!v42)
        {
          __break(1u);
          goto LABEL_25;
        }
        v24 = (_TtC14softposreaderd12RemoteReader *)v40;
        v43 = *(_TtC14softposreaderd12RemoteReader **)&v41->instance[32];
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = (_TtC14softposreaderd12RemoteReader *)swift_isUniquelyReferenced_nonNull_native(v41);
        if (!(_DWORD)isUniquelyReferenced_nonNull_native
          || (unint64_t)(v42 - 1) > *(_QWORD *)&v41->instance[16] >> 1)
        {
          v41 = sub_1000915A4(isUniquelyReferenced_nonNull_native, v42, 1, (uint64_t)v41, v45, v46, v47, v48);
        }
        swift_arrayDestroy(&v41->instance[24], 1, &type metadata for String);
        v49 = *(_QWORD *)&v41->instance[8];
        if (!v49)
        {
          _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
          __break(1u);
          return;
        }
        memmove(&v41->instance[24], &v41[1], 16 * v49 - 16);
        *(_QWORD *)&v41->instance[8] = v49 - 1;
        v24->super.isa = (Class)v41;
        ((void (*)(_QWORD *, _QWORD))v16)(v57, 0);
        swift_bridgeObjectRelease(v43, v50, v51, v52, v53, v54, v55, v56);
        v39 = *v23;
        if (!*v23)
          return;
      }
      else
      {
        ((void (*)(_QWORD *, _QWORD))v16)(v57, 0);
        v39 = *v23;
        if (!*v23)
          return;
      }
    }
  }
}

void sub_10004CEF4(char a1)
{
  uint64_t v1;
  _UNKNOWN **v3;

  sub_100005EF8((_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 40));
  if ((a1 & 1) != 0)
    v3 = &off_100198500;
  else
    v3 = &off_100198528;
  sub_10003964C((uint64_t)v3);
}

uint64_t sub_10004CF3C(int a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t inited;
  _BYTE v8[40];

  HIDWORD(v3) = a1;
  LODWORD(v3) = (a1 << 24) + 0x10000000;
  v2 = v3 >> 28;
  if (v2 > 8u)
    v4 = 36;
  else
    v4 = byte_10015F300[(char)v2];
  sub_100005EF8((_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 40));
  v5 = sub_100003A2C(&qword_1001AF9B0);
  inited = swift_initStackObject(v5, v8);
  *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
  *(_BYTE *)(inited + 32) = v4;
  sub_10003964C(inited);
  return swift_setDeallocating(inited);
}

void sub_10004CFDC()
{
  uint64_t v0;
  SEL v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;

  sub_100005D3C((_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(v0 + 112), v1, v2, v3, v4, v5, v6, v7);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(v0 + 176), v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_10004D000()
{
  uint64_t v0;
  SEL v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;

  sub_100005D3C((_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 56));
  sub_100005D3C((_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(v0 + 112), v1, v2, v3, v4, v5, v6, v7);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(v0 + 176), v8, v9, v10, v11, v12, v13, v14);
  return swift_deallocClassInstance(v0, 184, 7);
}

uint64_t type metadata accessor for ReaderAnalytics(uint64_t a1)
{
  uint64_t result;

  result = qword_1001AF728;
  if (!qword_1001AF728)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ReaderAnalytics);
  return result;
}

uint64_t sub_10004D080(uint64_t a1)
{
  _QWORD v2[7];

  v2[0] = "(";
  v2[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[3] = &unk_10015F0B8;
  v2[4] = &unk_10015F0D0;
  v2[5] = &unk_10015F0E8;
  v2[6] = &unk_10015F100;
  return swift_initClassMetadata2(a1, 256, 7, v2, a1 + 264);
}

uint64_t getEnumTagSinglePayload for ReaderAnalytics.PerformanceField(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF2)
    goto LABEL_17;
  if (a2 + 14 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 14) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 14;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 14;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 14;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xF;
  v8 = v6 - 15;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ReaderAnalytics.PerformanceField(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 14 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 14) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_10004D1E0 + 4 * byte_10015F036[v4]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_10004D214 + 4 * byte_10015F031[v4]))();
}

uint64_t sub_10004D214(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004D21C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10004D224);
  return result;
}

uint64_t sub_10004D230(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10004D238);
  *(_BYTE *)result = a2 + 14;
  return result;
}

uint64_t sub_10004D23C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004D244(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReaderAnalytics.PerformanceField()
{
  return &type metadata for ReaderAnalytics.PerformanceField;
}

uint64_t getEnumTagSinglePayload for ReaderAnalytics.AnalyticsField(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE4)
    goto LABEL_17;
  if (a2 + 28 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 28) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 28;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 28;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 28;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x1D;
  v8 = v6 - 29;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ReaderAnalytics.AnalyticsField(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 28 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 28) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE3)
    return ((uint64_t (*)(void))((char *)&loc_10004D33C + 4 * byte_10015F040[v4]))();
  *a1 = a2 + 28;
  return ((uint64_t (*)(void))((char *)sub_10004D370 + 4 * byte_10015F03B[v4]))();
}

uint64_t sub_10004D370(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004D378(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10004D380);
  return result;
}

uint64_t sub_10004D38C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10004D394);
  *(_BYTE *)result = a2 + 28;
  return result;
}

uint64_t sub_10004D398(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004D3A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReaderAnalytics.AnalyticsField()
{
  return &type metadata for ReaderAnalytics.AnalyticsField;
}

uint64_t sub_10004D3BC()
{
  return sub_100030828(&qword_1001AF968, &qword_1001AF970, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_10004D3EC()
{
  unint64_t result;

  result = qword_1001AF978;
  if (!qword_1001AF978)
  {
    result = swift_getWitnessTable(&unk_10015F1F0, &type metadata for ReaderAnalytics.AnalyticsField);
    atomic_store(result, (unint64_t *)&qword_1001AF978);
  }
  return result;
}

uint64_t sub_10004D430()
{
  return sub_100030828(&qword_1001AF980, &qword_1001AF988, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_10004D460()
{
  unint64_t result;

  result = qword_1001AF990;
  if (!qword_1001AF990)
  {
    result = swift_getWitnessTable(&unk_10015F2C8, &type metadata for ReaderAnalytics.PerformanceField);
    atomic_store(result, (unint64_t *)&qword_1001AF990);
  }
  return result;
}

uint64_t sub_10004D4A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11[2];
  _QWORD v12[5];
  _QWORD v13[5];

  v13[3] = type metadata accessor for DefaultSecureTimeKeeper();
  v13[4] = &off_10019C0A0;
  v13[0] = a1;
  v12[3] = type metadata accessor for CALogger();
  v12[4] = &off_10019AEF0;
  v12[0] = a2;
  *(_QWORD *)(a3 + 104) = 3;
  *(_QWORD *)(a3 + 112) = _swiftEmptyArrayStorage;
  *(_BYTE *)(a3 + 120) = 4;
  *(_QWORD *)(a3 + 121) = 0x202020202020202;
  *(_QWORD *)(a3 + 127) = 0x202020202020202;
  *(_QWORD *)(a3 + 176) = 0;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_QWORD *)(a3 + 166) = 0;
  sub_100008390((uint64_t)v13, a3 + 64);
  sub_100008390((uint64_t)v12, (uint64_t)v11);
  v6 = sub_1000E8880((uint64_t)_swiftEmptyArrayStorage);
  v7 = sub_1000E8998((uint64_t)_swiftEmptyArrayStorage);
  v8 = sub_100003A2C(qword_1001AF9C0);
  v9 = swift_allocObject(v8, 36, 7);
  *(_DWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)(v9 + 24) = v7;
  *(_QWORD *)(a3 + 56) = v9;
  sub_10001A674(v11, a3 + 16);
  sub_100005D3C(v12);
  sub_100005D3C(v13);
  return a3;
}

uint64_t sub_10004D5B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  uint64_t v17;
  _UNKNOWN **v18;
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v20 = type metadata accessor for DefaultSecureTimeKeeper();
  v21 = &off_10019C0A0;
  v19[0] = a1;
  v17 = type metadata accessor for CALogger();
  v18 = &off_10019AEF0;
  v16[0] = a2;
  v4 = type metadata accessor for ReaderAnalytics(0);
  v5 = swift_allocObject(v4, 184, 7);
  v6 = sub_10001A64C((uint64_t)v19, v20);
  __chkstk_darwin(v6);
  v8 = (_QWORD *)((char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v9 + 16))(v8);
  v10 = sub_10001A64C((uint64_t)v16, v17);
  __chkstk_darwin(v10);
  v12 = (_QWORD *)((char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v13 + 16))(v12);
  v14 = sub_10004D4A4(*v8, *v12, v5);
  sub_100005D3C(v16);
  sub_100005D3C(v19);
  return v14;
}

void sub_10004D6F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  _TtC14softposreaderd12RemoteReader *v18;
  unint64_t v19;
  void (*v20)(char *, uint64_t);
  const char *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  _TtC14softposreaderd12RemoteReader *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _TtC14softposreaderd12RemoteReader *v44;
  uint64_t (*v45)(char *, char *, uint64_t);

  v2 = type metadata accessor for DispatchTime(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13)
  {
    v29 = &_swiftEmptyArrayStorage;
    v30 = *(_QWORD *)&_swiftEmptyArrayStorage.instance[8];
    if (v30)
    {
LABEL_5:
      v31 = 0;
      v32 = 0;
      do
      {
        v33 = *(_QWORD *)&v29->instance[8 * v31 + 24];
        v34 = __CFADD__(v32, v33);
        v32 += v33;
        if (v34)
        {
          __break(1u);
          goto LABEL_21;
        }
        ++v31;
      }
      while (v30 != v31);
      swift_bridgeObjectRelease(v29, v4, v5, v6, v7, v8, v9, v10);
      if (v32 < 0)
        goto LABEL_22;
      return;
    }
LABEL_11:
    swift_bridgeObjectRelease(v29, v4, v5, v6, v7, v8, v9, v10);
    return;
  }
  v43 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v14 = (char *)(a1 + v43);
  v15 = *(_QWORD *)(v3 + 72);
  v16 = *(uint64_t (**)(char *, char *, uint64_t))(v3 + 16);
  swift_bridgeObjectRetain();
  v45 = v16;
  v17 = v16(v12, v14, v2);
  v18 = (_TtC14softposreaderd12RemoteReader *)a1;
  v19 = DispatchTime.uptimeNanoseconds.getter(v17);
  v20 = *(void (**)(char *, uint64_t))(v3 + 8);
  v20(v12, v2);
  v28 = v13 - 1;
  v44 = v18;
  if (v13 == 1)
  {
    v29 = &_swiftEmptyArrayStorage;
LABEL_4:
    swift_bridgeObjectRelease(v44, v21, v22, v23, v24, v25, v26, v27);
    v30 = *(_QWORD *)&v29->instance[8];
    if (v30)
      goto LABEL_5;
    goto LABEL_11;
  }
  v35 = (char *)v18 + v15 + v43;
  v29 = &_swiftEmptyArrayStorage;
  while (1)
  {
    v36 = v45(v12, v35, v2);
    v37 = DispatchTime.uptimeNanoseconds.getter(v36);
    v38 = v37 - v19;
    if (v37 < v19)
      break;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v29);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)sub_10009147C(0, *(_QWORD *)&v29->instance[8] + 1, 1, v29);
      v29 = (_TtC14softposreaderd12RemoteReader *)isUniquelyReferenced_nonNull_native;
    }
    v41 = *(_QWORD *)&v29->instance[8];
    v40 = *(_QWORD *)&v29->instance[16];
    if (v41 >= v40 >> 1)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)sub_10009147C((_QWORD *)(v40 > 1), v41 + 1, 1, v29);
      v29 = (_TtC14softposreaderd12RemoteReader *)isUniquelyReferenced_nonNull_native;
    }
    *(_QWORD *)&v29->instance[8] = v41 + 1;
    *(_QWORD *)&v29->instance[8 * v41 + 24] = v38 / 0xF4240;
    v19 = DispatchTime.uptimeNanoseconds.getter(isUniquelyReferenced_nonNull_native);
    v20(v12, v2);
    v35 += v15;
    if (!--v28)
      goto LABEL_4;
  }
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
}

uint64_t sub_10004D934(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD v13[5];
  _QWORD v14[5];

  sub_1000DC4B4();
  if (v1)
  {
    swift_release(a1);
  }
  else
  {
    sub_1000DD94C();
    v4 = sub_10001A64C((uint64_t)v14, v14[3]);
    __chkstk_darwin(v4);
    v6 = (_QWORD *)((char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v7 + 16))(v6);
    v8 = sub_10001A64C((uint64_t)v13, v13[3]);
    __chkstk_darwin(v8);
    v10 = (_QWORD *)((char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v11 + 16))(v10);
    v2 = sub_10004D5B4(*v6, *v10);
    sub_100005D3C(v13);
    sub_100005D3C(v14);
    swift_release(a1);
  }
  return v2;
}

uint64_t sub_10004DA94(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_1001985C8, a1, a2, &unk_1001AD388);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x1D)
    return 29;
  else
    return v3;
}

unint64_t sub_10004DAE4(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001988E0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xF)
    return 15;
  else
    return v3;
}

unint64_t sub_10004DB2C()
{
  unint64_t result;

  result = qword_1001AF9B8;
  if (!qword_1001AF9B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt32, &type metadata for UInt32);
    atomic_store(result, (unint64_t *)&qword_1001AF9B8);
  }
  return result;
}

uint64_t sub_10004DB74(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = "(";
  v2[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  return swift_initClassMetadata2(a1, 0, 2, v2, a1 + 128);
}

unint64_t sub_10004DBC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  unint64_t v13;
  void (*v14)(char *, uint64_t);
  unint64_t v16;
  uint64_t v17;

  v1 = v0;
  v2 = sub_100003A2C(qword_1001AFA48);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v17 - v6;
  v8 = type metadata accessor for StopWatch(0);
  sub_10004DE28(v1 + *(int *)(v8 + 20), (uint64_t)v7);
  v9 = type metadata accessor for DispatchTime(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v7, 1, v9) == 1)
  {
    v12 = (uint64_t)v7;
LABEL_5:
    sub_10004DE70(v12);
    return 0;
  }
  v13 = DispatchTime.uptimeNanoseconds.getter();
  v14 = *(void (**)(char *, uint64_t))(v10 + 8);
  v14(v7, v9);
  sub_10004DE28(v1, (uint64_t)v5);
  if (v11(v5, 1, v9) == 1)
  {
    v12 = (uint64_t)v5;
    goto LABEL_5;
  }
  v16 = DispatchTime.uptimeNanoseconds.getter();
  v14(v5, v9);
  if (v13 >= v16)
    return (v13 - v16) / 0xF4240;
  return 0;
}

void sub_10004DD24(_TtC14softposreaderd12RemoteReader **a1, uint64_t a2, char a3)
{
  Class isa;
  char isUniquelyReferenced_nonNull_native;
  _TtC14softposreaderd12RemoteReader *v6;
  SEL v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  _TtC14softposreaderd12RemoteReader *v14;

  if ((a3 & 1) != 0)
  {

  }
  else
  {
    isa = UInt64._bridgeToObjectiveC()().super.super.isa;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
    v14 = *a1;
    *a1 = (_TtC14softposreaderd12RemoteReader *)0x8000000000000000;
    sub_1000EB9EC((uint64_t)isa, 0xD000000000000015, 0x8000000100167F40, isUniquelyReferenced_nonNull_native);
    v6 = *a1;
    *a1 = v14;
    swift_bridgeObjectRelease(v6, v7, v8, v9, v10, v11, v12, v13);
  }
}

uint64_t type metadata accessor for AnalyticsCollector(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for AnalyticsCollector);
}

uint64_t type metadata accessor for StopWatch(uint64_t a1)
{
  uint64_t result;

  result = qword_1001AFB28;
  if (!qword_1001AFB28)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for StopWatch);
  return result;
}

uint64_t sub_10004DE28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003A2C(qword_1001AFA48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004DE70(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003A2C(qword_1001AFA48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10004DEB0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  os_unfair_lock_s *v43;
  _TtC14softposreaderd12RemoteReader **v44;
  os_unfair_lock_s *v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  char *v50;
  uint64_t *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v57 = a4;
  v55 = a3;
  v51 = a2;
  v52 = a1;
  v56 = type metadata accessor for URLRequest(0);
  v54 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v53 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchTime(0);
  v6 = *(_QWORD **)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003A2C(qword_1001AFA48);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v46 - v13;
  v15 = type metadata accessor for StopWatch(0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v46 - v19;
  v21 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v6[7];
  v21(v14, 1, 1, v5);
  v21(v12, 1, 1, v5);
  v21(v18, 1, 1, v5);
  v49 = v15;
  v22 = (uint64_t)&v18[*(int *)(v15 + 20)];
  v21((char *)v22, 1, 1, v5);
  sub_10004E25C((uint64_t)v14, (uint64_t)v18);
  sub_10004E25C((uint64_t)v12, v22);
  v23 = sub_10004E2A4((uint64_t)v18, (uint64_t)v20);
  static DispatchTime.now()(v23);
  sub_10004DE70((uint64_t)v20);
  v48 = (void (*)(char *, char *, uint64_t))v6[2];
  v48(v20, v8, v5);
  v21(v20, 0, 1, v5);
  v24 = (void (*)(char *, uint64_t))v6[1];
  v50 = v8;
  v47 = v24;
  v24(v8, v5);
  v25 = *(_QWORD *)(v55 + OBJC_IVAR____TtC9SPREngine25MPOCDefaultMonitorBackend_secureChannel + 24);
  v26 = *(_QWORD *)(v55 + OBJC_IVAR____TtC9SPREngine25MPOCDefaultMonitorBackend_secureChannel + 32);
  sub_100005EF8((_QWORD *)(v55 + OBJC_IVAR____TtC9SPREngine25MPOCDefaultMonitorBackend_secureChannel), v25);
  v27 = (uint64_t)v53;
  v28 = v54;
  v29 = v56;
  (*(void (**)(char *, uint64_t))(v54 + 16))(v53, v57);
  v30 = v58;
  v31 = sub_1000D6218(v27, 1, v25, v26);
  if (v30)
  {
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
  }
  else
  {
    v33 = v31;
    v34 = v32;
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
    v35 = v51;
    v36 = *v51;
    v37 = v51[1];
    *v51 = v33;
    v35[1] = v34;
    v38 = sub_10000A9B0(v36, v37);
    v39 = v50;
    static DispatchTime.now()(v38);
    v40 = (uint64_t)&v20[*(int *)(v49 + 20)];
    sub_10004DE70(v40);
    v48((char *)v40, v39, v5);
    v21((char *)v40, 0, 1, v5);
    v47(v39, v5);
    v41 = sub_10004DBC0();
    LOBYTE(v39) = v42 & 1;
    v43 = *(os_unfair_lock_s **)(v52 + 56);
    v44 = (_TtC14softposreaderd12RemoteReader **)&v43[4];
    v45 = v43 + 8;
    os_unfair_lock_lock(v43 + 8);
    sub_10004DD24(v44, v41, (char)v39);
    os_unfair_lock_unlock(v45);
  }
  sub_10004E2E8((uint64_t)v20);
}

uint64_t sub_10004E25C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003A2C(qword_1001AFA48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004E2A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StopWatch(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004E2E8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for StopWatch(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10004E324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 56);
}

uint64_t sub_10004E330(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return swift_bridgeObjectRelease(a1[1]);
}

uint64_t *sub_10004E358(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t *sub_10004E38C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for SecureChannel.TimeTokenResponse(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *sub_10004E3F4(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for MPOCMonitorBatch(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MPOCMonitorBatch(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for AnalyticsCollector.Analytics(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for AnalyticsCollector.Analytics);
}

uint64_t *sub_10004E4C0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for DispatchTime(0);
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      v10 = sub_100003A2C(qword_1001AFA48);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v12 = *(int *)(a3 + 20);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    if (v9((uint64_t *)v14, 1, v7))
    {
      v15 = sub_100003A2C(qword_1001AFA48);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v14, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_10004E60C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t result;

  v4 = type metadata accessor for DispatchTime(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v7 = a1 + *(int *)(a2 + 20);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(v7, 1, v4);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v4);
  return result;
}

char *sub_10004E6B0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = type metadata accessor for DispatchTime(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    v9 = sub_100003A2C(qword_1001AFA48);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = *(int *)(a3 + 20);
  v11 = &a1[v10];
  v12 = &a2[v10];
  if (v8(v12, 1, v6))
  {
    v13 = sub_100003A2C(qword_1001AFA48);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v12, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  return a1;
}

char *sub_10004E7D0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;

  v6 = type metadata accessor for DispatchTime(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = sub_100003A2C(qword_1001AFA48);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v8(&a1[v12], 1, v6);
  v16 = v8(v14, 1, v6);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v13, v14, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    v17 = sub_100003A2C(qword_1001AFA48);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v14, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
  return a1;
}

char *sub_10004E980(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = type metadata accessor for DispatchTime(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    v9 = sub_100003A2C(qword_1001AFA48);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = *(int *)(a3 + 20);
  v11 = &a1[v10];
  v12 = &a2[v10];
  if (v8(v12, 1, v6))
  {
    v13 = sub_100003A2C(qword_1001AFA48);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v12, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  return a1;
}

char *sub_10004EAA0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;

  v6 = type metadata accessor for DispatchTime(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = sub_100003A2C(qword_1001AFA48);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v8(&a1[v12], 1, v6);
  v16 = v8(v14, 1, v6);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v13, v14, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    v17 = sub_100003A2C(qword_1001AFA48);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v14, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
  return a1;
}

uint64_t sub_10004EC50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004EC5C);
}

uint64_t sub_10004EC5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003A2C(qword_1001AFA48);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10004EC9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004ECA8);
}

uint64_t sub_10004ECA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003A2C(qword_1001AFA48);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_10004ECEC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_10004ED54(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = v4[0];
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

void sub_10004ED54(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001AFB38)
  {
    v2 = type metadata accessor for DispatchTime(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001AFB38);
  }
}

uint64_t sub_10004EDA8()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = sub_1000EDA88(&off_100197428);
  v1 = sub_100003A2C(&qword_1001AFB68);
  result = swift_arrayDestroy(&unk_100197448, 14, v1);
  qword_1001B4B78 = v0;
  return result;
}

unint64_t sub_10004EDFC(uint64_t *a1)
{
  return _sSC21SPRPINControllerErrorLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(*a1);
}

unint64_t _sSC21SPRPINControllerErrorLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  SEL v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  Swift::String v13;
  _TtC14softposreaderd12RemoteReader *object;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;

  if (qword_1001ACF58 != -1)
    swift_once(&qword_1001ACF58, sub_10004EDA8);
  v2 = qword_1001B4B78;
  if (*(_QWORD *)(qword_1001B4B78 + 16) && (v3 = sub_10013A38C(a1), (v4 & 1) != 0))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 16 * v3);
    swift_bridgeObjectRetain();
  }
  else
  {
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)0xE000000000000000, v6, v7, v8, v9, v10, v11, v12);
    v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = (_TtC14softposreaderd12RemoteReader *)v13._object;
    String.append(_:)(v13);
    swift_bridgeObjectRelease(object, v15, v16, v17, v18, v19, v20, v21);
    return 0xD000000000000013;
  }
  return v5;
}

unint64_t sub_10004EEF8(uint64_t a1)
{
  unint64_t result;

  result = sub_10004EF1C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10004EF1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001AD868;
  if (!qword_1001AD868)
  {
    type metadata accessor for PINControllerError(255);
    result = swift_getWitnessTable(&unk_10015C238, v1);
    atomic_store(result, (unint64_t *)&qword_1001AD868);
  }
  return result;
}

uint64_t sub_10004EF64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001AFB70);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001AFB70);
  if (qword_1001AD140 != -1)
    swift_once(&qword_1001AD140, sub_1000CC2E4);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4DB0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_10004F134(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  NSString v18;
  unsigned int v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  _TtC14softposreaderd12RemoteReader *v39;
  os_log_type_t v40;
  int v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  _TtC14softposreaderd12RemoteReader *v46;
  _TtC14softposreaderd12RemoteReader *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  unint64_t v52;
  _TtC14softposreaderd12RemoteReader *v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  _TtC14softposreaderd12RemoteReader *v60;
  SEL v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  uint8_t *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  void *v72;
  _TtC14softposreaderd12RemoteReader *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  unsigned __int8 *v90;
  char v91;
  uint64_t v92;
  SEL v93;
  char v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  uint8_t *v104;
  uint64_t v105;
  BOOL v106;
  unsigned __int8 *v107;
  uint8_t *v108;
  uint8_t *v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _TtC14softposreaderd12RemoteReader *v114;
  uint64_t v115;
  unint64_t v116;

  v3 = v2;
  v6 = sub_100003A2C(&qword_1001AFDA8);
  __chkstk_darwin(v6);
  v8 = (char *)&v108 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001ACF60 != -1)
    swift_once(&qword_1001ACF60, sub_10004EF64);
  v9 = type metadata accessor for Logger(0);
  sub_100003A14(v9, (uint64_t)qword_1001AFB70);
  v10 = swift_bridgeObjectRetain_n(a2, 2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v115 = v14;
    v112 = v3;
    *(_DWORD *)v13 = 136315138;
    swift_bridgeObjectRetain();
    v113 = sub_1000056EC(a1, a2, &v115);
    v3 = v112;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "LogSink: %s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  sub_100005E24(0, &qword_1001AFDB0, NSPredicate_ptr);
  v15 = sub_100003A2C((uint64_t *)&unk_1001B1300);
  v16 = swift_allocObject(v15, 72, 7);
  *(_OWORD *)(v16 + 16) = xmmword_10015A5F0;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  *(_QWORD *)(v16 + 64) = sub_100051B4C();
  *(_QWORD *)(v16 + 32) = 0xD000000000000044;
  *(_QWORD *)(v16 + 40) = 0x800000010016BA10;
  v17 = (void *)NSPredicate.init(format:_:)(0x54414D20464C4553, 0xEF40252053454843, v16);
  v18 = String._bridgeToObjectiveC()();
  v19 = objc_msgSend(v17, "evaluateWithObject:", v18);

  if (!v19)
    return;
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "SLAM lib started replaying failed c-apdus", v23, 2u);
    swift_slowDealloc(v23, -1, -1);
  }

  v115 = a1;
  v116 = a2;
  v113 = 0x2B645C20786469;
  v114 = (_TtC14softposreaderd12RemoteReader *)0xE700000000000000;
  v24 = type metadata accessor for Locale(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v8, 1, 1, v24);
  v25 = sub_1000095D0();
  v26 = StringProtocol.range<A>(of:options:range:locale:)(&v113, 1024, 0, 0, 1, v8, &type metadata for String, &type metadata for String, v25, v25);
  v28 = v27;
  v30 = v29;
  sub_10005218C((uint64_t)v8, &qword_1001AFDA8);
  swift_bridgeObjectRelease(v114, v31, v32, v33, v34, v35, v36, v37);
  if ((v30 & 1) != 0)
    return;
  v38 = swift_bridgeObjectRetain_n(a2, 2);
  v39 = (_TtC14softposreaderd12RemoteReader *)Logger.logObject.getter(v38);
  v40 = static os_log_type_t.error.getter();
  v41 = v40;
  if (os_log_type_enabled(&v39->super, v40))
  {
    v112 = v3;
    v42 = swift_slowAlloc(12, -1);
    v110 = v41;
    v43 = (uint8_t *)v42;
    v111 = swift_slowAlloc(32, -1);
    v115 = v111;
    v109 = v43;
    *(_DWORD *)v43 = 136315138;
    v108 = v43 + 4;
    v44 = String.subscript.getter(v26, v28, a1, a2);
    v45 = v26;
    v47 = v46;
    v50 = static String._fromSubstring(_:)(v44, v48, v49, v46);
    v52 = (unint64_t)v51;
    v53 = v47;
    v26 = v45;
    swift_bridgeObjectRelease(v53, v51, v54, v55, v56, v57, v58, v59);
    v113 = sub_1000056EC(v50, v52, &v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114, v108, v43 + 12);
    swift_bridgeObjectRelease_n(a2, 2);
    v60 = (_TtC14softposreaderd12RemoteReader *)v52;
    v3 = v112;
    swift_bridgeObjectRelease(v60, v61, v62, v63, v64, v65, v66, v67);
    v68 = v109;
    _os_log_impl((void *)&_mh_execute_header, &v39->super, (os_log_type_t)v110, "found index: %s", v109, 0xCu);
    v69 = v111;
    swift_arrayDestroy(v111, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v69, -1, -1);
    swift_slowDealloc(v68, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v70 = String.index(_:offsetBy:)(v26, 4, a1, a2);
  if (v28 >> 14 < v70 >> 14)
  {
    __break(1u);
    goto LABEL_25;
  }
  v78 = String.subscript.getter(v70, v28, a1, a2);
  v39 = v73;
  if (!((v78 ^ v71) >> 14))
  {
LABEL_25:
    swift_bridgeObjectRelease(v39, (SEL)v71, v72, v73, v74, v75, v76, v77);
    return;
  }
  v79 = v78;
  v80 = v71;
  v81 = (uint64_t)v72;
  v82 = sub_1000D0E48(v78, v71, (unint64_t)v72, (unint64_t)v73, 10);
  if (((unsigned __int16)v83 & 0x100) != 0)
  {
    v90 = sub_10007DA78(v79, v80, v81, (uint64_t)v39, 10);
    v94 = (char)v93;
    swift_bridgeObjectRelease(v39, v93, v95, v96, v97, v98, v99, v100);
    if ((v94 & 1) != 0)
      return;
  }
  else
  {
    v90 = (unsigned __int8 *)v82;
    v91 = (char)v83;
    swift_bridgeObjectRelease(v39, v83, v84, v85, v86, v87, v88, v89);
    if ((v91 & 1) != 0)
      return;
  }
  v101 = v3;
  v102 = Logger.logObject.getter(v92);
  v103 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v102, v103))
  {
    v104 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v104 = 134217984;
    v115 = (uint64_t)v90;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v104 + 4, v104 + 12);
    _os_log_impl((void *)&_mh_execute_header, v102, v103, "%ld of c-apdus will replay", v104, 0xCu);
    swift_slowDealloc(v104, -1, -1);
  }

  v105 = *(_QWORD *)(v101 + 80);
  v106 = __OFADD__(v105, v90);
  v107 = &v90[v105];
  if (v106)
    __break(1u);
  else
    *(_QWORD *)(v101 + 80) = v107;
}

void sub_10004F83C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  Swift::String v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint8_t *v22;
  uint8_t *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  Swift::String v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39[3];

  if (qword_1001ACF60 != -1)
    swift_once(&qword_1001ACF60, sub_10004EF64);
  v8 = type metadata accessor for Logger(0);
  sub_100003A14(v8, (uint64_t)qword_1001AFB70);
  sub_100005D9C(a1, a2);
  v9 = sub_100005D9C(a1, a2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v37 = a3;
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v39[0] = v13;
    *(_DWORD *)v12 = 136315138;
    v14 = Data.hexString()();
    v38 = sub_1000056EC(v14._countAndFlagsBits, (unint64_t)v14._object, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v14._object, v15, v16, v17, v18, v19, v20, v21);
    sub_100005DE0(a1, a2);
    sub_100005DE0(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "C-APDU: %s", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    v22 = v12;
    a3 = v37;
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    sub_100005DE0(a1, a2);
    sub_100005DE0(a1, a2);
  }

  v23 = (uint8_t *)(a4 >> 62);
  sub_100005D9C(a3, a4);
  v24 = sub_100005D9C(a3, a4);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v27 = swift_slowAlloc(32, -1);
    v39[0] = v27;
    *(_DWORD *)v23 = 136315138;
    v28 = Data.hexString()();
    v38 = sub_1000056EC(v28._countAndFlagsBits, (unint64_t)v28._object, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v28._object, v29, v30, v31, v32, v33, v34, v35);
    sub_100005DE0(a3, a4);
    sub_100005DE0(a3, a4);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "R-APDU: %s", v23, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    v36 = v23;
    LODWORD(v23) = a4 >> 62;
    swift_slowDealloc(v36, -1, -1);
  }
  else
  {
    sub_100005DE0(a3, a4);
    sub_100005DE0(a3, a4);
  }

  __asm { BR              X10 }
}

void sub_10004FD48(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(_QWORD);

  v3 = *(void (**)(_QWORD))(v1 + 56);
  if (v3)
    v3(0);
  __asm { BR              X10 }
}

uint64_t sub_10004FDA4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100051188(v4, v1, v3, v0, 0);
  sub_10005152C(v4, v1);
  if (!v2)
    sub_10005065C(v4, v1);
  return sub_100051214(v4, v1, v3, v0, 0);
}

void sub_10004FF30(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  NSString v15;
  id v16;
  NSObject *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t *v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = v3;
  if (qword_1001ACF60 != -1)
    swift_once(&qword_1001ACF60, sub_10004EF64);
  v8 = type metadata accessor for Logger(0);
  sub_100003A14(v8, (uint64_t)qword_1001AFB70);
  v9 = swift_bridgeObjectRetain_n(a2, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(22, -1);
    v13 = swift_slowAlloc(32, -1);
    v29 = v13;
    *(_DWORD *)v12 = 136315394;
    swift_bridgeObjectRetain(a2);
    v27 = sub_1000056EC(a1, a2, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v12 + 12) = 2048;
    v27 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v12 + 14, v12 + 22);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "SLAMSwift.performScript(path: %s, scriptID: %llu)", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v14 = (void *)objc_opt_self(LibSCLM);
  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend(v14, "PerformScript:sefwPath:seHandle:logSink:", a3, v15, v4, v4);

  if (v16)
  {
    v17 = v16;
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v20 = 138412290;
      v22 = v17;
      v23 = v17;
      v24 = _swift_stdlib_bridgeErrorToNSError();
      v29 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v20 + 4, v20 + 12);
      *v21 = v24;
      v17 = v23;

      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Could not perform script, error: %@", v20, 0xCu);
      v25 = sub_100003A2C((uint64_t *)&unk_1001AE430);
      swift_arrayDestroy(v21, 1, v25);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {

      v18 = v17;
    }

    swift_willThrow(v26);
  }
}

void sub_1000502A8(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  NSString v15;
  NSString v16;
  id v17;
  NSObject *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (qword_1001ACF60 != -1)
    swift_once(&qword_1001ACF60, sub_10004EF64);
  v8 = type metadata accessor for Logger(0);
  sub_100003A14(v8, (uint64_t)qword_1001AFB70);
  swift_bridgeObjectRetain_n(a2, 2);
  v9 = swift_bridgeObjectRetain_n(a4, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(22, -1);
    v13 = swift_slowAlloc(64, -1);
    v30 = v13;
    *(_DWORD *)v12 = 136315394;
    swift_bridgeObjectRetain(a2);
    v28 = sub_1000056EC(a1, a2, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v12 + 12) = 2080;
    swift_bridgeObjectRetain(a4);
    v28 = sub_1000056EC(a3, a4, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease_n(a4, 3);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "SLAMSwift.performScript(path: %s, name: %s)", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  v14 = (void *)objc_opt_self(LibSCLM);
  v15 = String._bridgeToObjectiveC()();
  v16 = String._bridgeToObjectiveC()();
  v17 = objc_msgSend(v14, "PerformScriptWithName:sefwPath:seHandle:logSink:", v15, v16, v27, v27);

  if (v17)
  {
    v18 = v17;
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v21 = 138412290;
      v23 = v18;
      v24 = _swift_stdlib_bridgeErrorToNSError();
      v30 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v21 + 4, v21 + 12);
      *v22 = v24;

      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Could not perform script, error: %@", v21, 0xCu);
      v25 = sub_100003A2C((uint64_t *)&unk_1001AE430);
      swift_arrayDestroy(v22, 1, v25);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);
    }
    else
    {

      v19 = v18;
    }

    swift_willThrow(v26);
  }
}

void sub_10005065C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  void *v13;
  NSString v14;
  id v15;
  NSObject *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = v2;
  if (qword_1001ACF60 != -1)
    swift_once(&qword_1001ACF60, sub_10004EF64);
  v6 = type metadata accessor for Logger(0);
  sub_100003A14(v6, (uint64_t)qword_1001AFB70);
  v7 = swift_bridgeObjectRetain_n(a2, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = a1;
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v27 = v12;
    *(_DWORD *)v11 = 136315138;
    swift_bridgeObjectRetain(a2);
    v25 = sub_1000056EC(v10, a2, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "SLAMSwift.performScript(path: %s)", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    v3 = v2;
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v13 = (void *)objc_opt_self(LibSCLM);
  v14 = String._bridgeToObjectiveC()();
  v15 = objc_msgSend(v13, "PerformOnlyScriptInSEFW:seHandle:logSink:", v14, v3, v3);

  if (v15)
  {
    v16 = v15;
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v19 = 138412290;
      v21 = v16;
      v22 = _swift_stdlib_bridgeErrorToNSError();
      v27 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v19 + 4, v19 + 12);
      *v20 = v22;

      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Could not perform script, error: %@", v19, 0xCu);
      v23 = sub_100003A2C((uint64_t *)&unk_1001AE430);
      swift_arrayDestroy(v20, 1, v23);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }
    else
    {

      v17 = v16;
    }

    swift_willThrow(v24);
  }
}

void sub_100050994(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *ObjCClassFromMetadata;
  NSString v15;
  id v16;
  NSObject *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = v2;
  if (qword_1001ACF60 != -1)
    swift_once(&qword_1001ACF60, sub_10004EF64);
  v6 = type metadata accessor for Logger(0);
  sub_100003A14(v6, (uint64_t)qword_1001AFB70);
  v7 = swift_bridgeObjectRetain_n(a2, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = a1;
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v28 = v12;
    *(_DWORD *)v11 = 136315138;
    swift_bridgeObjectRetain(a2);
    v26 = sub_1000056EC(v10, a2, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "SLAMSwift.performScript(name: %s)", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    v3 = v2;
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v13 = sub_100005E24(0, &qword_1001AFDA0, LibSCLM_ptr);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v13);
  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend(ObjCClassFromMetadata, "PerformScriptWithName:seHandle:logSink:", v15, v3, v3);

  if (v16)
  {
    v17 = v16;
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v20 = 138412290;
      v22 = v17;
      v23 = _swift_stdlib_bridgeErrorToNSError();
      v28 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v20 + 4, v20 + 12);
      *v21 = v23;

      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Could not perform script, error: %@", v20, 0xCu);
      v24 = sub_100003A2C((uint64_t *)&unk_1001AE430);
      swift_arrayDestroy(v21, 1, v24);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {

      v18 = v17;
    }

    swift_willThrow(v25);
  }
}

void sub_100050CDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (qword_1001ACF60 != -1)
    swift_once(&qword_1001ACF60, sub_10004EF64);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_100003A14(v3, (uint64_t)qword_1001AFB70);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v7 = 134217984;
    v19 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v7 + 4, v7 + 12);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "SLAMSwift.performScript(scriptID: %llu)", v7, 0xCu);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = sub_100005E24(0, &qword_1001AFDA0, LibSCLM_ptr);
  v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(v8), "PerformScript:seHandle:logSink:", a1, v1, v1);
  if (v9)
  {
    v10 = v9;
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v13 = 138412290;
      v15 = v10;
      v16 = _swift_stdlib_bridgeErrorToNSError();
      v19 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v13 + 4, v13 + 12);
      *v14 = v16;

      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Could not perform script, error: %@", v13, 0xCu);
      v17 = sub_100003A2C((uint64_t *)&unk_1001AE430);
      swift_arrayDestroy(v14, 1, v17);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }
    else
    {

      v11 = v10;
    }

    swift_willThrow(v18);
  }
}

uint64_t sub_100050F58(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  uint64_t v15;
  void **v16;
  void *v17;
  id v18;
  _BYTE v20[24];

  v8 = objc_msgSend(a1, "scriptName");
  if (!v8)
    return 0;
  v9 = v8;
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v12 = v11;

  if (v10 == a2 && v12 == a3)
  {
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, a2, a3, 0);
    swift_bridgeObjectRelease(v12);
    v15 = 0;
    if ((v14 & 1) == 0)
      return v15;
  }
  v16 = (void **)(a4 + 16);
  v15 = 1;
  swift_beginAccess(v16, v20, 1, 0);
  v17 = *v16;
  *v16 = a1;

  v18 = a1;
  return v15;
}

uint64_t sub_100051048(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t (*v4)(void);
  id v5;

  v4 = *(uint64_t (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  LOBYTE(v4) = v4();
  swift_release(v3);

  return v4 & 1;
}

uint64_t sub_100051098(void *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE v10[24];

  swift_beginAccess(a2 + 16, v10, 33, 0);
  v4 = a1;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v5 = *(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(v5 + 0x10);
  v6 = *(_QWORD *)(v5 + 24);
  if (v7 >= v6 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
  v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v4);
  specialized Array._endMutation()(v8);
  swift_endAccess(v10);
  return 0;
}

uint64_t sub_100051134()
{
  uint64_t v0;
  SEL v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;

  sub_100005D3C((_QWORD *)(v0 + 16));
  sub_10004B5D0(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(v0 + 88), v1, v2, v3, v4, v5, v6, v7);
  return swift_deallocClassInstance(v0, 96, 7);
}

uint64_t type metadata accessor for SLAMSwift()
{
  return objc_opt_self(_TtC9SPREngine9SLAMSwift);
}

uint64_t sub_100051188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  if (a5 - 2 < 2 || a5 == 0)
    return swift_bridgeObjectRetain(a2);
  if (a5 == 1)
  {
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

void destroy for SLAMScript(uint64_t a1)
{
  SEL v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;

  sub_100051214(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 80), v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_100051214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  if (a5 - 2 < 2 || a5 == 0)
    return swift_bridgeObjectRelease(a2);
  if (a5 == 1)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t initializeWithCopy for SLAMScript(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  sub_100051188(*(_QWORD *)a2, v5, v6, v7, v8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v9;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SLAMScript(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  _TtC14softposreaderd12RemoteReader *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  sub_100051188(*(_QWORD *)a2, v5, v6, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v13 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v8;
  sub_100051214(v9, v10, v11, v12, v13);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v14;
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a2 + 80);
  v16 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
  return a1;
}

__n128 initializeWithTake for SLAMScript(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for SLAMScript(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  unsigned __int8 v10;
  uint64_t v11;
  _TtC14softposreaderd12RemoteReader *v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;

  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  v10 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v4;
  sub_100051214(v5, v6, v7, v8, v10);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 80);
  v12 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v11;
  swift_bridgeObjectRelease(v12, v13, v14, v15, v16, v17, v18, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for SLAMScript(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SLAMScript(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 80) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SLAMScript()
{
  return &type metadata for SLAMScript;
}

uint64_t sub_100051500()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 80));
  return v1;
}

void sub_10005152C(uint64_t a1, unint64_t a2)
{
  id v4;
  NSString v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v4, "isReadableFileAtPath:", v5);

  if ((v6 & 1) != 0)
  {
    if (qword_1001ACF60 != -1)
      swift_once(&qword_1001ACF60, sub_10004EF64);
    v7 = type metadata accessor for Logger(0);
    sub_100003A14(v7, (uint64_t)qword_1001AFB70);
    v8 = swift_bridgeObjectRetain_n(a2, 2);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v16 = v12;
      *(_DWORD *)v11 = 136315138;
      swift_bridgeObjectRetain(a2);
      v14 = sub_1000056EC(a1, a2, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "%s is readable", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
  }
  else
  {
    v13 = sub_1000247AC(2027, 0, 0, 0);
    swift_willThrow(v13);
  }
}

uint64_t sub_100051754(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  id *v5;
  void *v6;
  NSString v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  id v11;
  id v12;
  void *v14;
  uint64_t v15;
  id aBlock[5];
  _QWORD *v17;

  v4 = swift_allocObject(&unk_10019BF70, 24, 7);
  *(_QWORD *)(v4 + 16) = 0;
  v5 = (id *)(v4 + 16);
  v6 = (void *)objc_opt_self(LibSCLM);
  v7 = String._bridgeToObjectiveC()();
  v8 = (_QWORD *)swift_allocObject(&unk_10019BF98, 40, 7);
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = v4;
  aBlock[4] = sub_100052218;
  v17 = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100051048;
  aBlock[3] = &unk_10019BFB0;
  v9 = _Block_copy(aBlock);
  v10 = v17;
  swift_bridgeObjectRetain(a2);
  swift_retain(v4);
  swift_release(v10);
  aBlock[0] = 0;
  LODWORD(v6) = objc_msgSend(v6, "InspectSEFW:closure:error:", v7, v9, aBlock);
  _Block_release(v9);

  v11 = aBlock[0];
  if ((_DWORD)v6)
  {
    swift_beginAccess(v5, aBlock, 0, 0);
    if (*v5)
    {
      v12 = *v5;
      swift_release(v4);
      return (uint64_t)v12;
    }
    v15 = sub_1000247AC(2027, 0x746F6E206F666E69, (void *)0xEE00646E756F6620, 0);
  }
  else
  {
    v14 = v11;
    _convertNSErrorToError(_:)(v11);

  }
  swift_willThrow(v15);
  return swift_release(v4);
}

uint64_t sub_100051970()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSString v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  id aBlock[5];
  uint64_t v11;

  v0 = swift_allocObject(&unk_10019BF20, 24, 7);
  *(_QWORD *)(v0 + 16) = &_swiftEmptyArrayStorage;
  v1 = v0 + 16;
  v2 = objc_opt_self(LibSCLM);
  v3 = String._bridgeToObjectiveC()();
  aBlock[4] = sub_100051B2C;
  v11 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100051048;
  aBlock[3] = &unk_10019BF38;
  v4 = _Block_copy(aBlock);
  v5 = v11;
  swift_retain();
  swift_release(v5);
  aBlock[0] = 0;
  LOBYTE(v2) = objc_msgSend((id)v2, "InspectSEFW:closure:error:", v3, v4, aBlock);
  _Block_release(v4);

  v6 = aBlock[0];
  if ((v2 & 1) != 0)
  {
    swift_beginAccess(v1, aBlock, 0, 0);
    v1 = *(_QWORD *)(v0 + 16);
    swift_bridgeObjectRetain();
  }
  else
  {
    v7 = v6;
    _convertNSErrorToError(_:)(v6);

    swift_willThrow(v8);
  }
  swift_release(v0);
  return v1;
}

uint64_t sub_100051B08()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100051B2C(void *a1)
{
  uint64_t v1;

  return sub_100051098(a1, v1);
}

uint64_t sub_100051B34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100051B44(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_100051B4C()
{
  unint64_t result;

  result = qword_1001AFDB8;
  if (!qword_1001AFDB8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1001AFDB8);
  }
  return result;
}

void sub_100051B90(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unsigned int v24;
  unsigned int v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;

  if (qword_1001AD240 != -1)
    swift_once(&qword_1001AD240, sub_10011627C);
  v2 = sub_1000D8C84(xmmword_1001B4F50, *((uint64_t *)&xmmword_1001B4F50 + 1), 0);
  if (!v2)
  {
    if (qword_1001ACF60 != -1)
      swift_once(&qword_1001ACF60, sub_10004EF64);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_100003A14(v12, (uint64_t)qword_1001AFB70);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "applet cannot be found", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

    v9 = 0;
    v11 = 0;
    v18 = 0;
    v19 = 0;
    v25 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    goto LABEL_26;
  }
  v3 = v2;
  if (!*(_QWORD *)(v2 + 16) || (v4 = sub_10000ADC4(0x746169636F737361, 0xED00004453536465), (v5 & 1) == 0))
  {
    v31 = 0u;
    v32 = 0u;
    swift_bridgeObjectRelease(v3);
    goto LABEL_12;
  }
  sub_100005D5C(*(_QWORD *)(v3 + 56) + 32 * v4, (uint64_t)&v31);
  swift_bridgeObjectRelease(v3);
  if (!*((_QWORD *)&v32 + 1))
  {
LABEL_12:
    sub_10005218C((uint64_t)&v31, &qword_1001B12E0);
    goto LABEL_13;
  }
  if ((swift_dynamicCast(&v29, &v31, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
LABEL_13:
    v6 = 0;
    v7 = 0xE000000000000000;
    goto LABEL_14;
  }
  v6 = v29;
  v7 = v30;
  if (v29 == 0xD000000000000014 && v30 == 0x800000010016BA60)
  {
    swift_bridgeObjectRelease(0x800000010016BA60);
    goto LABEL_15;
  }
LABEL_14:
  v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, 0xD000000000000014, 0x800000010016BA60, 0);
  swift_bridgeObjectRelease(v7);
  if ((v8 & 1) == 0)
  {
    v9 = String.init(cString:)("SLAMDeleteBeeLegacy");
    v11 = v17;
    v26 = (id)sub_100051754(v9, v17);
    goto LABEL_24;
  }
LABEL_15:
  v9 = String.init(cString:)("SLAMDeleteBee");
  v11 = v10;
  v23 = (void *)sub_100051754(v9, v10);
  v24 = objc_msgSend(v23, "apduCount");
  v25 = objc_msgSend(v23, "scriptType");
  v26 = objc_msgSend(v23, "scriptName");
  if (v26)
    goto LABEL_25;
  __break(1u);
LABEL_24:
  v23 = v26;
  v24 = objc_msgSend(v26, "apduCount");
  v25 = objc_msgSend(v23, "scriptType");
  v26 = objc_msgSend(v23, "scriptName");
  if (v26)
  {
LABEL_25:
    v27 = v26;
    v19 = v24 + 4;
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v22 = v28;

    v20 = 257;
    v18 = 3;
LABEL_26:
    *a1 = v9;
    a1[1] = v11;
    a1[2] = 0;
    a1[3] = 0;
    a1[4] = v18;
    a1[5] = v19;
    a1[6] = v25;
    a1[7] = 0;
    a1[8] = v20;
    a1[9] = v21;
    a1[10] = v22;
    return;
  }
  __break(1u);
}

uint64_t sub_10005218C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100003A2C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000521C8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000521EC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100052218(void *a1)
{
  uint64_t *v1;

  return sub_100050F58(a1, v1[2], v1[3], v1[4]);
}

uint64_t destroy for SLAMScript.SEFWDetails(uint64_t a1)
{
  return sub_100051214(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for SLAMScript.SEFWDetails(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_100051188(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for SLAMScript.SEFWDetails(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_100051188(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_100051214(v8, v9, v10, v11, v12);
  return a1;
}

__n128 initializeWithTake for SLAMScript.SEFWDetails(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SLAMScript.SEFWDetails(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned __int8 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_100051214(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for SLAMScript.SEFWDetails(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SLAMScript.SEFWDetails(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 252;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000523F4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_1000523FC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SLAMScript.SEFWDetails()
{
  return &type metadata for SLAMScript.SEFWDetails;
}

uint64_t sub_100052420()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001AFDC0);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001AFDC0);
  if (qword_1001AD158 != -1)
    swift_once(&qword_1001AD158, sub_1000CC540);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4DF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1000524B0(_QWORD *a1, uint64_t a2, char a3)
{
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  id v22;
  id v23;
  id v25;

  v6 = (void *)objc_opt_self(NSJSONSerialization);
  v7 = a1[3];
  v8 = sub_100005EF8(a1, v7);
  v9 = _bridgeAnythingToObjectiveC<A>(_:)(v8, v7);
  v10 = objc_msgSend(v6, "isValidJSONObject:", v9);
  swift_unknownObjectRelease(v9);
  if (!v10)
  {
    if (qword_1001ACF68 != -1)
      swift_once(&qword_1001ACF68, sub_100052420);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_100003A14(v15, (uint64_t)qword_1001AFDC0);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    v19 = v18;
    if (os_log_type_enabled(v17, v18))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, (os_log_type_t)v19, "Object is not a valid JSON", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    v21 = sub_10002483C(15000, 0, 0, 0);
    goto LABEL_13;
  }
  v11 = a1[3];
  v12 = sub_100005EF8(a1, v11);
  v13 = _bridgeAnythingToObjectiveC<A>(_:)(v12, v11);
  v25 = 0;
  if ((a3 & 1) != 0)
    v14 = objc_msgSend(v6, "dataWithJSONObject:options:error:", v13, 0, &v25);
  else
    v14 = objc_msgSend(v6, "dataWithJSONObject:options:error:", v13, a2, &v25);
  v22 = v14;
  swift_unknownObjectRelease(v13);
  v23 = v25;
  if (!v22)
  {
    v19 = (uint64_t)v23;
    _convertNSErrorToError(_:)(v23);

LABEL_13:
    swift_willThrow(v21);
    return v19;
  }
  v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v22);

  return v19;
}

uint64_t sub_100052704()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001AFDD8);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001AFDD8);
  if (qword_1001AD180 != -1)
    swift_once(&qword_1001AD180, sub_1000CC92C);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4E70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

Swift::Void __swiftcall SecureElementTransceiver.cancelPIN()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  Swift::String v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[4];
  uint64_t v45[2];
  unsigned __int16 v46;

  v2 = v1;
  v3 = v0;
  if (qword_1001ACF70 != -1)
    swift_once(&qword_1001ACF70, sub_100052704);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100003A14(v4, (uint64_t)qword_1001AFDD8);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v40 = swift_slowAlloc(32, -1);
    v45[0] = v40;
    *(_DWORD *)v8 = 136315138;
    v39 = v8 + 4;
    sub_10005E420(0xF480uLL);
    v10 = v9;
    v11 = v2;
    v13 = v12;
    v14 = Data.hexString()();
    v15 = v13;
    v2 = v11;
    sub_100005DE0(v10, v15);
    v43 = sub_1000056EC(v14._countAndFlagsBits, (unint64_t)v14._object, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v14._object);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "C-APDU (CANCEL): %s", v8, 0xCu);
    swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  sub_1000B6F18(62592, 0, 0xC000000000000000, 1, v3, v2, (uint64_t)&v43);
  v16 = v43;
  v17 = v44[0];
  v18 = v44[2];
  v19 = v44[3];
  sub_1000306DC((uint64_t)&v43, (uint64_t)v45);
  if ((unint64_t)v45[1] >> 60 != 15)
  {
    v20 = v46;
    sub_100005D9C(v16, v17);
    sub_100005D9C(v18, v19);
    sub_100005D9C(v16, v17);
    v21 = sub_100005D9C(v18, v19);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      v42 = v25;
      *(_DWORD *)v24 = 136315138;
      v26 = Data.hexString()();
      v41 = sub_1000056EC(v26._countAndFlagsBits, (unint64_t)v26._object, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v24 + 4, v24 + 12);
      swift_bridgeObjectRelease(v26._object);
      sub_100030768((uint64_t)&v43);
      sub_100030768((uint64_t)&v43);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "R-APDU: %s", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }
    else
    {
      sub_100030768((uint64_t)&v43);
      sub_100030768((uint64_t)&v43);
    }

    v28 = Logger.logObject.getter(v27);
    if (v20 == 36864)
    {
      v29 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v28, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v30 = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "cleared persistent storage in SE", v30, 2u);
        swift_slowDealloc(v30, -1, -1);
      }

      if (qword_1001AD308 != -1)
        swift_once(&qword_1001AD308, sub_10013E994);
      v31 = static GlobalState.shared;
      objc_msgSend(*(id *)(static GlobalState.shared + 72), "lock", v39);
      v32 = *(_QWORD *)(v31 + 96);
      v33 = __OFADD__(v32, 1);
      v34 = v32 + 1;
      if (v33)
      {
        __break(1u);
      }
      else
      {
        *(_QWORD *)(v31 + 96) = v34;
        while (*(uint64_t *)(v31 + 88) > 0 || *(_BYTE *)(v31 + 80) == 1)
          objc_msgSend(*(id *)(v31 + 72), "wait");
        v35 = *(_QWORD *)(v31 + 96);
        v33 = __OFSUB__(v35, 1);
        v36 = v35 - 1;
        if (!v33)
        {
          *(_QWORD *)(v31 + 96) = v36;
          *(_BYTE *)(v31 + 80) = 1;
          objc_msgSend(*(id *)(v31 + 72), "unlock");
          *(_BYTE *)(v31 + 33) = 0;
          sub_10013E340();
          objc_msgSend(*(id *)(v31 + 72), "lock");
          *(_BYTE *)(v31 + 80) = 0;
          objc_msgSend(*(id *)(v31 + 72), "broadcast");
          objc_msgSend(*(id *)(v31 + 72), "unlock");
LABEL_23:
          sub_100030768((uint64_t)&v43);
          return;
        }
      }
      __break(1u);
    }
    else
    {
      v37 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v37))
      {
        v38 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v38 = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, v37, "failed to cleared persistent storage in SE", v38, 2u);
        swift_slowDealloc(v38, -1, -1);

        goto LABEL_23;
      }
      sub_100030768((uint64_t)&v43);

    }
  }
}

uint64_t sub_100052CE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001AFDF0);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001AFDF0);
  if (qword_1001AD168 != -1)
    swift_once(&qword_1001AD168, sub_1000CC6D0);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4E28);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100052D78(uint64_t a1)
{
  return sub_100052DC8(a1, 0xD000000000000014, 0x800000010016BB90, &qword_1001B4B80, (unint64_t *)algn_1001B4B88);
}

uint64_t sub_100052DA0(uint64_t a1)
{
  return sub_100052DC8(a1, 0xD000000000000015, 0x800000010016BB10, &qword_1001B4B90, (unint64_t *)algn_1001B4B98);
}

uint64_t sub_100052DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;

  v9 = type metadata accessor for String.Encoding(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin();
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter(v11);
  v14 = String.data(using:allowLossyConversion:)(v13, 0, a2, a3);
  v16 = v15;
  result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  if (v16 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    *a4 = v14;
    *a5 = v16;
  }
  return result;
}

uint64_t sub_100052E90(char a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v4 = v3;
  v6 = a1 & 1;
  *(_BYTE *)(v3 + 16) = a1 & 1;
  v7 = (_QWORD *)(v3 + 24);
  sub_100008390((uint64_t)a2, (uint64_t)v7);
  sub_100008390((uint64_t)a3, v4 + 64);
  v8 = *(_QWORD *)(v4 + 48);
  v9 = *(_QWORD *)(v4 + 56);
  sub_100005EF8(v7, v8);
  if (qword_1001ACF80 != -1)
    swift_once(&qword_1001ACF80, sub_100052D78);
  v10 = qword_1001B4B80;
  v11 = *(_QWORD *)algn_1001B4B88;
  v12 = sub_100003A2C(&qword_1001AC678);
  v13 = swift_allocObject(v12, 33, 7);
  *(_OWORD *)(v13 + 16) = xmmword_10015A5F0;
  *(_BYTE *)(v13 + 32) = v6;
  v14 = sub_10010DD5C(v13);
  v16 = v15;
  swift_bridgeObjectRelease(v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v9 + 40))(v10, v11, v14, v16, v8, v9);
  sub_100005DE0(v14, v16);
  sub_100005D3C(a3);
  sub_100005D3C(a2);
  return v4;
}

void sub_100053084(char a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _TtC14softposreaderd12RemoteReader *v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  _TtC14softposreaderd12RemoteReader *v27;
  SEL v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  unint64_t v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v2 = v1;
  if (qword_1001ACF78 != -1)
    swift_once(&qword_1001ACF78, sub_100052CE8);
  v4 = a1 & 1;
  v5 = type metadata accessor for Logger(0);
  v6 = sub_100003A14(v5, (uint64_t)qword_1001AFDF0);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(64, -1);
    v53 = v10;
    *(_DWORD *)v9 = 136315394;
    v51 = sub_1000056EC(0x6F4D686374697773, 0xEF293A6F74286564, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2080;
    if ((a1 & 1) != 0)
      v11 = 0x656E696C66666FLL;
    else
      v11 = 0x656E696C6E6FLL;
    if ((a1 & 1) != 0)
      v12 = (_TtC14softposreaderd12RemoteReader *)0xE700000000000000;
    else
      v12 = (_TtC14softposreaderd12RemoteReader *)0xE600000000000000;
    v51 = sub_1000056EC(v11, (unint64_t)v12, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease(v12, v13, v14, v15, v16, v17, v18, v19);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "DefaultSecureTimeKeeper.%s, mode: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
    v20 = v10;
    v4 = a1 & 1;
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }

  if ((((v4 == 0) ^ *(unsigned __int8 *)(v2 + 16)) & 1) != 0)
  {
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      *(_DWORD *)v24 = 136315138;
      v53 = v25;
      if (v4)
        v26 = 0x656E696C66666FLL;
      else
        v26 = 0x656E696C6E6FLL;
      if (v4)
        v27 = (_TtC14softposreaderd12RemoteReader *)0xE700000000000000;
      else
        v27 = (_TtC14softposreaderd12RemoteReader *)0xE600000000000000;
      v51 = sub_1000056EC(v26, (unint64_t)v27, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v24 + 4, v24 + 12);
      swift_bridgeObjectRelease(v27, v28, v29, v30, v31, v32, v33, v34);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Already in %s mode.", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }

  }
  else
  {
    *(_BYTE *)(v2 + 16) = v4;
    v35 = (_QWORD *)(v2 + 24);
    v37 = *(_QWORD *)(v2 + 48);
    v36 = *(_QWORD *)(v2 + 56);
    sub_100005EF8(v35, v37);
    if (qword_1001ACF80 != -1)
      swift_once(&qword_1001ACF80, sub_100052D78);
    v38 = qword_1001B4B80;
    v39 = *(_QWORD *)algn_1001B4B88;
    v40 = sub_100003A2C(&qword_1001AC678);
    v41 = swift_allocObject(v40, 33, 7);
    *(_OWORD *)(v41 + 16) = xmmword_10015A5F0;
    *(_BYTE *)(v41 + 32) = v4;
    v42 = sub_10010DD5C(v41);
    v44 = (unint64_t)v43;
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v41, v43, v45, v46, v47, v48, v49, v50);
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v36 + 40))(v38, v39, v42, v44, v37, v36);
    sub_100005DE0(v42, v44);
  }
}

uint64_t sub_100053484@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  _QWORD v26[35];
  _QWORD v27[34];
  _OWORD __src[17];

  v2 = v1;
  if (qword_1001ACF78 != -1)
    swift_once(&qword_1001ACF78, sub_100052CE8);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100003A14(v4, (uint64_t)qword_1001AFDF0);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "getTimeToken()", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  v9 = v2[6];
  v10 = v2[7];
  sub_100005EF8(v2 + 3, v9);
  if (qword_1001ACF88 != -1)
    swift_once(&qword_1001ACF88, sub_100052DA0);
  v11 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 32))(qword_1001B4B90, *(_QWORD *)algn_1001B4B98, v9, v10);
  v13 = v12;
  type metadata accessor for JSONDecoder(0);
  v14 = sub_100054A5C();
  v15 = default argument 2 of static JSONDecoder.decodeClean<A>(_:from:userInfo:)();
  static JSONDecoder.decodeClean<A>(_:from:userInfo:)((uint64_t)&type metadata for DefaultSecureTimeKeeper.State, v11, v13, v15, (uint64_t)&type metadata for DefaultSecureTimeKeeper.State, v14);
  sub_100005DE0(v11, v13);
  swift_bridgeObjectRelease(v15);
  v18 = v2 + 8;
  v20 = v2[11];
  v19 = v2[12];
  sub_100005EF8(v18, v20);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 32))(v20, v19);
  if (LODWORD(__src[1]) == v21)
  {
    sub_1000D2C04(*(uint64_t *)&__src[0], *((uint64_t *)&__src[0] + 1), __src);
    memcpy(v26, __src, 0x110uLL);
    BitString.init(data:unusedBits:)(v26);
    v16 = v26;
  }
  else
  {
    v22 = swift_bridgeObjectRelease(*((_QWORD *)&__src[0] + 1));
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "RTC was reset since token issuance", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    sub_1000549E8(__src);
    v16 = __src;
  }
  sub_100054A14((uint64_t)v16, (uint64_t)v27);
  return sub_100054A14((uint64_t)v27, a1);
}

void *sub_100053904@<X0>(uint64_t a1@<X0>, _TtC14softposreaderd12RemoteReader *a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  Swift::String v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *result;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE __src[280];
  uint64_t v41;

  v6 = v5;
  v7 = v4;
  if (qword_1001ACF78 != -1)
    swift_once(&qword_1001ACF78, sub_100052CE8);
  v12 = type metadata accessor for Logger(0);
  sub_100003A14(v12, (uint64_t)qword_1001AFDF0);
  v13 = swift_bridgeObjectRetain_n(a2, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter();
  v38 = a1;
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(28, -1);
    v37 = swift_slowAlloc(64, -1);
    v41 = v37;
    *(_DWORD *)v16 = 136315650;
    v39 = sub_1000056EC(0xD000000000000021, 0x800000010016BB60, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, __src, v16 + 4, v16 + 12);
    *(_WORD *)(v16 + 12) = 2080;
    v17 = String.redactedToken()();
    v39 = sub_1000056EC(v17._countAndFlagsBits, (unint64_t)v17._object, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, __src, v16 + 14, v16 + 22);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v17._object, v18, v19, v20, v21, v22, v23, v24);
    *(_WORD *)(v16 + 22) = 1024;
    LODWORD(v39) = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, (char *)&v39 + 4, v16 + 24, v16 + 28);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s(rawToken: %s, rtcResetCount: %u)", (uint8_t *)v16, 0x1Cu);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    v25 = v16;
    v6 = v5;
    swift_slowDealloc(v25, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v26 = v7[11];
  v27 = v7[12];
  sub_100005EF8(v7 + 8, v26);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v27 + 32))(v26, v27) == a3)
  {
    swift_bridgeObjectRetain();
    result = sub_1000D2C04(v38, (uint64_t)a2, __src);
    if (!v6)
    {
      swift_bridgeObjectRetain();
      sub_1000542CC(v38, (uint64_t)a2, a3);
      swift_bridgeObjectRelease(a2, v29, v30, v31, v32, v33, v34, v35);
      return memcpy(a4, __src, 0x110uLL);
    }
  }
  else
  {
    v36 = sub_10002460C(10007, 0xD000000000000026, (void *)0x800000010016BB30, 0);
    return (void *)swift_willThrow(v36);
  }
  return result;
}

void sub_100053C28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *oslog;

  v1 = v0;
  if (qword_1001ACF78 != -1)
    swift_once(&qword_1001ACF78, sub_100052CE8);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100003A14(v2, (uint64_t)qword_1001AFDF0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "deleteState()", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  if ((*(_BYTE *)(v1 + 16) & 1) != 0)
  {
    oslog = Logger.logObject.getter(v7);
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v8, "Not deleting state, mode is offline", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

  }
  else
  {
    v10 = *(_QWORD *)(v1 + 48);
    v11 = *(_QWORD *)(v1 + 56);
    sub_100005EF8((_QWORD *)(v1 + 24), v10);
    if (qword_1001ACF88 != -1)
      swift_once(&qword_1001ACF88, sub_100052DA0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 48))(qword_1001B4B90, *(_QWORD *)algn_1001B4B98, v10, v11);
  }
}

uint64_t sub_100053F60(_OWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;

  v3 = type metadata accessor for DateInterval(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0, v7);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100023E10(a1, (_QWORD *)(v1 + 64));
  sub_1000D1354((uint64_t)v6);
  v12 = DateInterval.contains(_:)(v11);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if ((v12 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return 1;
  }
  else
  {
    if (qword_1001ACF78 != -1)
      swift_once(&qword_1001ACF78, sub_100052CE8);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_100003A14(v14, (uint64_t)qword_1001AFDF0);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Time token outside of validity period", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return 0;
  }
}

uint64_t sub_1000542CC(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[2];
  int v24;

  v5 = v3;
  v9 = type metadata accessor for JSONEncoder.OutputFormatting(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v23[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for JSONEncoder(0);
  v23[0] = a1;
  v23[1] = a2;
  v24 = a3;
  v13 = sub_100054854();
  default argument 1 of static JSONEncoder.encodeClean<A>(_:outputFormatting:)();
  static JSONEncoder.encodeClean<A>(_:outputFormatting:)((uint64_t)v23, (uint64_t)v12, (uint64_t)&type metadata for DefaultSecureTimeKeeper.State, v13);
  if (v4)
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v17 = v14;
  v18 = v15;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v19 = v5 + 3;
  v21 = v5[6];
  v20 = v5[7];
  sub_100005EF8(v19, v21);
  if (qword_1001ACF88 != -1)
    swift_once(&qword_1001ACF88, sub_100052DA0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t))(v20 + 40))(qword_1001B4B90, *(_QWORD *)algn_1001B4B98, v17, v18, v21, v20);
  return sub_100005DE0(v17, v18);
}

uint64_t sub_100054454(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  unsigned int v17;
  char v18;
  char v19;

  v17 = a4;
  v8 = sub_100003A2C(&qword_1001AFF50);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_100005EF8(a1, v12);
  v14 = sub_100054FB4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DefaultSecureTimeKeeper.State.CodingKeys, &type metadata for DefaultSecureTimeKeeper.State.CodingKeys, v14, v12, v13);
  v19 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v19, v8);
  if (!v4)
  {
    v18 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v17, &v18, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_100054578()
{
  _BYTE *v0;

  if (*v0)
    return 0x7465736552637472;
  else
    return 0x6E656B6F54776172;
}

uint64_t sub_1000545C0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100054FF8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000545E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100054FB4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005460C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100054FB4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100054634@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  int v6;

  result = sub_10005510C(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_DWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_100054660(_QWORD *a1)
{
  uint64_t v1;

  return sub_100054454(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_DWORD *)(v1 + 16));
}

BOOL sub_10005467C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  char v10;
  _BOOL8 result;

  v4 = *a1;
  v5 = a1[1];
  v6 = *((_DWORD *)a1 + 4);
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_DWORD *)(a2 + 16);
  if (v4 == *(_QWORD *)a2 && v5 == v7)
    return v6 == v8;
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v7, 0);
  result = 0;
  if ((v10 & 1) != 0)
    return v6 == v8;
  return result;
}

uint64_t sub_1000546D8()
{
  uint64_t v0;

  sub_100005D3C((_QWORD *)(v0 + 24));
  sub_100005D3C((_QWORD *)(v0 + 64));
  return swift_deallocClassInstance(v0, 104, 7);
}

uint64_t type metadata accessor for DefaultSecureTimeKeeper()
{
  return objc_opt_self(_TtC9SPREngine23DefaultSecureTimeKeeper);
}

uint64_t sub_100054724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  sub_100005EF8((_QWORD *)(*(_QWORD *)v0 + 64), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t sub_100054774()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  sub_100005EF8((_QWORD *)(*(_QWORD *)v0 + 64), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

uint64_t sub_1000547C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  sub_100005EF8((_QWORD *)(*(_QWORD *)v0 + 64), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

uint64_t sub_10005480C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  sub_100005EF8((_QWORD *)(*(_QWORD *)v0 + 64), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
}

unint64_t sub_100054854()
{
  unint64_t result;

  result = qword_1001AFF40;
  if (!qword_1001AFF40)
  {
    result = swift_getWitnessTable(&unk_10015F570, &type metadata for DefaultSecureTimeKeeper.State);
    atomic_store(result, (unint64_t *)&qword_1001AFF40);
  }
  return result;
}

_QWORD *sub_100054898(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[7];
  v6 = a1[9];
  v7 = a1[17];
  v8 = a1[19];
  v9 = a1[21];
  v10 = a1[23];
  v12 = a1[25];
  v13 = a1[27];
  v14 = a1[29];
  v15 = a1[31];
  v16 = a1[30];
  v17 = a1[33];
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v14);
  sub_100005DE0(v16, v15);
  swift_bridgeObjectRelease(v17);
  return a1;
}

unint64_t sub_1000549A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001AD7E0;
  if (!qword_1001AD7E0)
  {
    _s3__C4CodeOMa_8(255);
    result = swift_getWitnessTable(&unk_10015C0C0, v1);
    atomic_store(result, (unint64_t *)&qword_1001AD7E0);
  }
  return result;
}

double sub_1000549E8(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_100054A14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003A2C(&qword_1001AE028);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100054A5C()
{
  unint64_t result;

  result = qword_1001AFF48;
  if (!qword_1001AFF48)
  {
    result = swift_getWitnessTable(&unk_10015F548, &type metadata for DefaultSecureTimeKeeper.State);
    atomic_store(result, (unint64_t *)&qword_1001AFF48);
  }
  return result;
}

uint64_t sub_100054AA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  sub_1000DBA54();
  if (!v1)
  {
    v4 = v14;
    v5 = v15;
    sub_100005EF8(v13, v14);
    sub_10001CA88(v4, v5);
    v6 = v11;
    v7 = v12;
    sub_100005EF8(v10, v11);
    if (qword_1001ACF80 != -1)
      swift_once(&qword_1001ACF80, sub_100052D78);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 32))(qword_1001B4B80, *(_QWORD *)algn_1001B4B88, v6, v7);
    __asm { BR              X10 }
  }
  swift_release(a1);
  return a1;
}

uint64_t destroy for DefaultSecureTimeKeeper.State(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

uint64_t _s9SPREngine23DefaultSecureTimeKeeperC5StateVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for DefaultSecureTimeKeeper.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

__n128 initializeWithTake for DefaultSecureTimeKeeper.State(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for DefaultSecureTimeKeeper.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for DefaultSecureTimeKeeper.State(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 20))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DefaultSecureTimeKeeper.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 20) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 20) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DefaultSecureTimeKeeper.State()
{
  return &type metadata for DefaultSecureTimeKeeper.State;
}

unint64_t sub_100054FB4()
{
  unint64_t result;

  result = qword_1001AFF58;
  if (!qword_1001AFF58)
  {
    result = swift_getWitnessTable(&unk_10015F65C, &type metadata for DefaultSecureTimeKeeper.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001AFF58);
  }
  return result;
}

uint64_t sub_100054FF8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6E656B6F54776172 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E656B6F54776172, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7465736552637472 && a2 == 0xED0000746E756F43)
  {
    swift_bridgeObjectRelease(0xED0000746E756F43);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7465736552637472, 0xED0000746E756F43, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10005510C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _TtC14softposreaderd12RemoteReader *v11;
  _TtC14softposreaderd12RemoteReader *v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  char v21;
  char v22;

  v3 = sub_100003A2C(&qword_1001AFF60);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_100005EF8(a1, v7);
  v9 = sub_100054FB4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DefaultSecureTimeKeeper.State.CodingKeys, &type metadata for DefaultSecureTimeKeeper.State.CodingKeys, v9, v7, v8);
  if (v1)
  {
    sub_100005D3C(a1);
  }
  else
  {
    v22 = 0;
    v8 = KeyedDecodingContainer.decode(_:forKey:)(&v22, v3);
    v12 = v11;
    v21 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)(&v21, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100005D3C(a1);
    swift_bridgeObjectRelease(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  return v8;
}

uint64_t storeEnumTagSinglePayload for DefaultSecureTimeKeeper.State.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000552E8 + 4 * byte_10015F4A9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10005531C + 4 * byte_10015F4A4[v4]))();
}

uint64_t sub_10005531C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100055324(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10005532CLL);
  return result;
}

uint64_t sub_100055338(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100055340);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100055344(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005534C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DefaultSecureTimeKeeper.State.CodingKeys()
{
  return &type metadata for DefaultSecureTimeKeeper.State.CodingKeys;
}

unint64_t sub_10005536C()
{
  unint64_t result;

  result = qword_1001AFF68;
  if (!qword_1001AFF68)
  {
    result = swift_getWitnessTable(&unk_10015F634, &type metadata for DefaultSecureTimeKeeper.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001AFF68);
  }
  return result;
}

unint64_t sub_1000553B4()
{
  unint64_t result;

  result = qword_1001AFF70;
  if (!qword_1001AFF70)
  {
    result = swift_getWitnessTable(&unk_10015F5A4, &type metadata for DefaultSecureTimeKeeper.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001AFF70);
  }
  return result;
}

unint64_t sub_1000553FC()
{
  unint64_t result;

  result = qword_1001AFF78;
  if (!qword_1001AFF78)
  {
    result = swift_getWitnessTable(&unk_10015F5CC, &type metadata for DefaultSecureTimeKeeper.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001AFF78);
  }
  return result;
}

uint64_t sub_100055440(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _TtC14softposreaderd12RemoteReader *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t result;
  _BYTE __dst[14];
  unsigned __int8 v30;
  _QWORD v31[5];
  __int128 v32;

  v32 = xmmword_10015DF40;
  v2 = 100000000000;
  v3 = 12;
  while (1)
  {
    v4 = a1 / v2;
    v5 = sub_100003A2C(&qword_1001AC678);
    v6 = swift_allocObject(v5, 33, 7);
    *(_OWORD *)(v6 + 16) = xmmword_10015A5F0;
    if (a1 / v2 < 0)
    {
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
      goto LABEL_20;
    }
    if (v4 >= 0x100)
      break;
    v7 = (_TtC14softposreaderd12RemoteReader *)v6;
    *(_BYTE *)(v6 + 32) = v4;
    v8 = sub_100003A2C(&qword_1001AFF98);
    v31[3] = v8;
    v31[4] = sub_100055CBC();
    v31[0] = v7;
    v9 = sub_100005EF8(v31, v8);
    v10 = *v9;
    v11 = *(_QWORD *)(*v9 + 16);
    if (v11)
    {
      v12 = v10 + 32;
      if (v11 <= 0xE)
      {
        memset(__dst, 0, sizeof(__dst));
        v30 = v11;
        memcpy(__dst, (const void *)(v10 + 32), v11);
        v23 = *(_QWORD *)__dst;
        v24 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v30 << 48);
        swift_bridgeObjectRetain();
      }
      else
      {
        v13 = type metadata accessor for __DataStorage(0);
        swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
        swift_bridgeObjectRetain();
        v14 = __DataStorage.init(bytes:length:)(v12, v11);
        v22 = v14;
        if (v11 >= 0x7FFFFFFF)
        {
          v25 = type metadata accessor for Data.RangeReference(0);
          v23 = swift_allocObject(v25, 32, 7);
          *(_QWORD *)(v23 + 16) = 0;
          *(_QWORD *)(v23 + 24) = v11;
          v24 = v22 | 0x8000000000000000;
        }
        else
        {
          v23 = v11 << 32;
          v24 = v14 | 0x4000000000000000;
        }
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      v23 = 0;
      v24 = 0xC000000000000000;
    }
    swift_bridgeObjectRelease(v7, v15, v16, v17, v18, v19, v20, v21);
    sub_100005D3C(v31);
    Data.append(_:)(v23, v24);
    sub_100005DE0(v23, v24);
    if (!--v3)
      return v32;
    a1 %= v2;
    v26 = v2 + 19;
    v2 /= 10;
    if (a1 == 0x8000000000000000 && v26 < 0xA)
    {
      __break(1u);
      return v32;
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
LABEL_20:
  __break(1u);
  return result;
}

void sub_10005570C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_100055774(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,__int128 a25,uint64_t a26,uint64_t __dst,int a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  unint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  size_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE v107[14];
  unsigned __int8 v108;

  if ((v52 & 0x1000000000000) != 0)
    return 0;
  if (v54)
  {
    if (v54 == 1)
    {
      if (!__OFSUB__(HIDWORD(v53), (_DWORD)v53))
      {
        v56 = HIDWORD(v53) - (int)v53;
        goto LABEL_8;
      }
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
    }
    v58 = *(_QWORD *)(v53 + 16);
    v57 = *(_QWORD *)(v53 + 24);
    v56 = v57 - v58;
    if (__OFSUB__(v57, v58))
      goto LABEL_60;
  }
  else
  {
    v56 = BYTE6(v52);
  }
LABEL_8:
  if (v56 < 1)
    return 0;
  v59 = 0;
  v106 = v53 >> 32;
  v105 = BYTE6(v52);
  v102 = v52 >> 16;
  v103 = v52 >> 8;
  v100 = HIDWORD(v52);
  v101 = v52 >> 24;
  v104 = v52;
  v99 = v52 >> 40;
  do
  {
    if (__OFADD__(v59, 2))
      v69 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v69 = v59 + 2;
    v70 = sub_100003A2C(&qword_1001AC678);
    v71 = swift_allocObject(v70, 33, 7);
    *(_OWORD *)(v71 + 16) = xmmword_10015A5F0;
    if (v54)
    {
      if (v54 == 1)
      {
        if (v59 < (int)v53 || v59 >= v106)
        {
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
          JUMPOUT(0x100055BFCLL);
        }
        v72 = __DataStorage._bytes.getter();
        if (!v72)
          goto LABEL_61;
        v73 = v72;
        v74 = __DataStorage._offset.getter();
        if (__OFSUB__(v59, v74))
          goto LABEL_50;
        v75 = v59 + 1;
        if (v59 + 1 < (int)v53 || v75 >= v106)
          goto LABEL_53;
        v76 = *(_BYTE *)(v73 + v59 - v74);
        v77 = __DataStorage._bytes.getter();
        if (!v77)
          goto LABEL_62;
        v78 = v77;
        v79 = __DataStorage._offset.getter();
        v80 = v75 - v79;
        if (__OFSUB__(v75, v79))
          goto LABEL_55;
      }
      else
      {
        if (v59 < *(_QWORD *)(v53 + 16))
          goto LABEL_49;
        if (v59 >= *(_QWORD *)(v53 + 24))
          goto LABEL_52;
        v83 = __DataStorage._bytes.getter();
        if (!v83)
          goto LABEL_63;
        v84 = v83;
        v85 = __DataStorage._offset.getter();
        if (__OFSUB__(v59, v85))
          goto LABEL_54;
        v86 = v59 + 1;
        if (v59 + 1 < *(_QWORD *)(v53 + 16))
          goto LABEL_56;
        if (v86 >= *(_QWORD *)(v53 + 24))
          goto LABEL_57;
        v76 = *(_BYTE *)(v84 + v59 - v85);
        v87 = __DataStorage._bytes.getter();
        if (!v87)
          goto LABEL_64;
        v78 = v87;
        v88 = __DataStorage._offset.getter();
        v80 = v86 - v88;
        if (__OFSUB__(v86, v88))
          goto LABEL_58;
      }
      v82 = *(_BYTE *)(v78 + v80);
    }
    else
    {
      if (v59 >= v105)
        goto LABEL_48;
      *(_QWORD *)(v55 - 152) = v53;
      *(_BYTE *)(v55 - 144) = v104;
      *(_BYTE *)(v55 - 143) = v103;
      *(_BYTE *)(v55 - 142) = v102;
      *(_BYTE *)(v55 - 141) = v101;
      *(_BYTE *)(v55 - 140) = v100;
      v81 = v59 + 1;
      *(_BYTE *)(v55 - 139) = v99;
      if (v59 + 1 >= v105)
        goto LABEL_51;
      v76 = *(_BYTE *)(v55 - 152 + v59);
      *(_QWORD *)(v55 - 152) = v53;
      *(_BYTE *)(v55 - 144) = v104;
      *(_BYTE *)(v55 - 143) = v103;
      *(_BYTE *)(v55 - 142) = v102;
      *(_BYTE *)(v55 - 141) = v101;
      *(_BYTE *)(v55 - 140) = v100;
      *(_BYTE *)(v55 - 139) = v99;
      v82 = *(_BYTE *)(v55 - 152 + v81);
    }
    *(_BYTE *)(v71 + 32) = v82 | (16 * v76);
    v89 = sub_100003A2C(&qword_1001AFF98);
    *(_QWORD *)(v55 - 128) = v89;
    *(_QWORD *)(v55 - 120) = sub_100055CBC();
    *(_QWORD *)(v55 - 152) = v71;
    v90 = sub_100005EF8((_QWORD *)(v55 - 152), v89);
    v91 = *v90;
    v92 = *(_QWORD *)(*v90 + 16);
    if (v92)
    {
      v93 = v91 + 32;
      if (v92 <= 0xE)
      {
        memset(v107, 0, sizeof(v107));
        v108 = v92;
        memcpy(v107, (const void *)(v91 + 32), v92);
        v67 = *(_QWORD *)v107;
        v68 = *(unsigned int *)&v107[8] | ((unint64_t)v107[12] << 32) | ((unint64_t)v107[13] << 40) | ((unint64_t)v108 << 48);
        swift_bridgeObjectRetain();
      }
      else
      {
        v94 = type metadata accessor for __DataStorage(0);
        swift_allocObject(v94, *(unsigned int *)(v94 + 48), *(unsigned __int16 *)(v94 + 52));
        swift_bridgeObjectRetain();
        v95 = __DataStorage.init(bytes:length:)(v93, v92);
        v96 = v95;
        if (v92 >= 0x7FFFFFFF)
        {
          v97 = type metadata accessor for Data.RangeReference(0);
          v67 = swift_allocObject(v97, 32, 7);
          *(_QWORD *)(v67 + 16) = 0;
          *(_QWORD *)(v67 + 24) = v92;
          v68 = v96 | 0x8000000000000000;
        }
        else
        {
          v67 = v92 << 32;
          v68 = v95 | 0x4000000000000000;
        }
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      v67 = 0;
      v68 = 0xC000000000000000;
    }
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v71, v60, v61, v62, v63, v64, v65, v66);
    sub_100005D3C((_QWORD *)(v55 - 152));
    Data.append(_:)(v67, v68);
    sub_100005DE0(v67, v68);
    v59 = v69;
  }
  while (v69 < v56);
  return *(_QWORD *)(v55 - 112);
}

uint64_t sub_100055C2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001AFF80);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001AFF80);
  if (qword_1001AD180 != -1)
    swift_once(&qword_1001AD180, sub_1000CC92C);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4E70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

unint64_t sub_100055CBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001AFFA0;
  if (!qword_1001AFFA0)
  {
    v1 = sub_100003A6C(&qword_1001AFF98);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001AFFA0);
  }
  return result;
}

Swift::Int sub_100055D08(uint64_t a1, uint64_t a2)
{
  return sub_100055D70(a1, a2, 0x726F727265);
}

uint64_t sub_100055D18(uint64_t a1)
{
  return String.hash(into:)(a1, 0x726F727265, 0xE500000000000000);
}

Swift::Int sub_100055D2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100055DDC(a1, a2, a3, 0x726F727265);
}

uint64_t sub_100055D3C@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_100198A98;
  return sub_100055E2C(v2, a1, a2);
}

void sub_100055D48(_QWORD *a1@<X8>)
{
  *a1 = 0x726F727265;
  a1[1] = 0xE500000000000000;
}

Swift::Int sub_100055D60(uint64_t a1, uint64_t a2)
{
  return sub_100055D70(a1, a2, 0x7974706D65);
}

Swift::Int sub_100055D70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  String.hash(into:)(v5, a3, 0xE500000000000000);
  return Hasher._finalize()();
}

uint64_t sub_100055DB8(uint64_t a1)
{
  return String.hash(into:)(a1, 0x7974706D65, 0xE500000000000000);
}

Swift::Int sub_100055DCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100055DDC(a1, a2, a3, 0x7974706D65);
}

Swift::Int sub_100055DDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  String.hash(into:)(v6, a4, 0xE500000000000000);
  return Hasher._finalize()();
}

uint64_t sub_100055E20@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_100198AD0;
  return sub_100055E2C(v2, a1, a2);
}

uint64_t sub_100055E2C@<X0>(Swift::OpaquePointer cases@<0:X3>, uint64_t *a2@<X0>, BOOL *a3@<X8>)
{
  Swift::String v4;
  void *v5;
  Swift::Int v6;
  uint64_t result;

  v4._countAndFlagsBits = *a2;
  v5 = (void *)a2[1];
  v4._object = v5;
  v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(v5);
  *a3 = v6 != 0;
  return result;
}

void sub_100055E78(_QWORD *a1@<X8>)
{
  *a1 = 0x7974706D65;
  a1[1] = 0xE500000000000000;
}

uint64_t type metadata accessor for SecurityAnalytics(uint64_t a1)
{
  uint64_t result;

  result = qword_1001AFFD0;
  if (!qword_1001AFFD0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SecurityAnalytics);
  return result;
}

ValueMetadata *type metadata accessor for SecurityAnalytics.PerformanceField()
{
  return &type metadata for SecurityAnalytics.PerformanceField;
}

uint64_t _s9SPREngine17SecurityAnalyticsC14AnalyticsFieldOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100055F24 + 4 * byte_10015F6B0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100055F44 + 4 * byte_10015F6B5[v4]))();
}

_BYTE *sub_100055F24(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100055F44(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100055F4C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100055F54(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100055F5C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100055F64(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SecurityAnalytics.AnalyticsField()
{
  return &type metadata for SecurityAnalytics.AnalyticsField;
}

unint64_t sub_100055F84()
{
  unint64_t result;

  result = qword_1001B0100;
  if (!qword_1001B0100)
  {
    result = swift_getWitnessTable(&unk_10015F778, &type metadata for SecurityAnalytics.AnalyticsField);
    atomic_store(result, (unint64_t *)&qword_1001B0100);
  }
  return result;
}

unint64_t sub_100055FCC()
{
  unint64_t result;

  result = qword_1001B0108;
  if (!qword_1001B0108)
  {
    result = swift_getWitnessTable(&unk_10015F818, &type metadata for SecurityAnalytics.PerformanceField);
    atomic_store(result, (unint64_t *)&qword_1001B0108);
  }
  return result;
}

uint64_t sub_100056010(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v21[5];
  _QWORD v22[5];
  _QWORD v23[5];

  sub_1000DD94C();
  if (!v1)
  {
    v3 = sub_10001A64C((uint64_t)v23, v23[3]);
    __chkstk_darwin(v3);
    v5 = (_QWORD *)((char *)&v21[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v6 + 16))(v5);
    v7 = *v5;
    v8 = type metadata accessor for CALogger();
    v22[3] = v8;
    v22[4] = &off_10019AEF0;
    v22[0] = v7;
    v9 = type metadata accessor for SecurityAnalytics(0);
    a1 = swift_allocObject(v9, 64, 7);
    v10 = sub_10001A64C((uint64_t)v22, v8);
    __chkstk_darwin(v10);
    v12 = (_QWORD *)((char *)&v21[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v13 + 16))(v12);
    v14 = *v12;
    v21[3] = v8;
    v21[4] = &off_10019AEF0;
    v21[0] = v14;
    sub_100008390((uint64_t)v21, a1 + 16);
    v15 = sub_1000E8880((uint64_t)_swiftEmptyArrayStorage);
    v16 = sub_1000E8998((uint64_t)_swiftEmptyArrayStorage);
    v17 = sub_100003A2C(&qword_1001B0128);
    v18 = swift_allocObject(v17, 36, 7);
    *(_DWORD *)(v18 + 32) = 0;
    *(_QWORD *)(v18 + 16) = v15;
    *(_QWORD *)(v18 + 24) = v16;
    *(_QWORD *)(a1 + 56) = v18;
    sub_100005D3C(v21);
    sub_100005D3C(v22);
    sub_100005D3C(v23);
  }
  return a1;
}

Class sub_1000561C0(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSDictionary v5;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v4 = v1(v3);
  swift_release(v2);
  if (v4)
  {
    sub_10003994C();
    v5.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    v5.super.isa = 0;
  }
  return v5.super.isa;
}

uint64_t *CADailyLogger.shared.unsafeMutableAddressor()
{
  if (qword_1001ACFA0 != -1)
    swift_once(&qword_1001ACFA0, sub_100056A90);
  return &static CADailyLogger.shared;
}

void sub_100056274(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  _TtC14softposreaderd12RemoteReader *v6;
  id v7;
  NSString v8;
  SEL v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  int64_t v28;
  _TtC14softposreaderd12RemoteReader *v29;
  unsigned __int8 *v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  os_unfair_lock_s *v43;
  uint64_t v44;
  _TtC14softposreaderd12RemoteReader *v45;
  _TtC14softposreaderd12RemoteReader *v46;
  NSString v47;
  SEL v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  char *v55;
  BOOL v56;
  char *v57;
  _TtC14softposreaderd12RemoteReader *v58;
  _TtC14softposreaderd12RemoteReader *v59;
  NSString v60;
  SEL v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  uint64_t v75;
  const char *v76;
  _TtC14softposreaderd12RemoteReader *v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  SEL v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  os_log_type_t v91;
  uint8_t *v92;
  NSObject *v93;
  os_log_t oslog;
  NSObject *osloga;
  _TtC14softposreaderd12RemoteReader *v96;
  os_log_t v97;

  v3 = v2;
  v6 = *(_TtC14softposreaderd12RemoteReader **)(v2 + 24);
  v7 = objc_allocWithZone((Class)NSUserDefaults);
  swift_bridgeObjectRetain();
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6, v9, v10, v11, v12, v13, v14, v15);
  v16 = objc_msgSend(v7, "initWithSuiteName:", v8);

  if (v16)
  {
    v17 = *(unsigned __int8 *)(v3 + 32);
    if (v17 != 2 && ((((v17 & 1) == 0) ^ a2) & 1) == 0)
    {
      if (qword_1001ACF98 != -1)
        swift_once(&qword_1001ACF98, sub_100056A00);
      v18 = type metadata accessor for Logger(0);
      v19 = sub_100003A14(v18, (uint64_t)qword_1001B0130);
      v20 = Logger.logObject.getter(v19);
      v21 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v22 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "production flag changed, sending the daily events.", v22, 2u);
        swift_slowDealloc(v22, -1, -1);
      }

      CADailyLogger.postDailyEvents()();
    }
    *(_BYTE *)(v3 + 32) = a2 & 1;
    if (qword_1001ACF98 != -1)
      goto LABEL_30;
    while (1)
    {
      v23 = type metadata accessor for Logger(0);
      sub_100003A14(v23, (uint64_t)qword_1001B0130);
      v24 = swift_bridgeObjectRetain_n(a1, 2);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc(12, -1);
        oslog = (os_log_t)swift_slowAlloc(32, -1);
        v97 = oslog;
        *(_DWORD *)v27 = 136315138;
        v28 = *(_QWORD *)(a1 + 16);
        v29 = &_swiftEmptyArrayStorage;
        if (v28)
        {
          v91 = v26;
          v92 = v27;
          v93 = v25;
          v96 = &_swiftEmptyArrayStorage;
          sub_100091C44(0, v28, 0);
          v29 = v96;
          v30 = (unsigned __int8 *)(a1 + 32);
          do
          {
            v31 = *v30++;
            v32 = sub_1000389E4(v31);
            v34 = v33;
            v96 = v29;
            v36 = *(_QWORD *)&v29->instance[8];
            v35 = *(_QWORD *)&v29->instance[16];
            if (v36 >= v35 >> 1)
            {
              sub_100091C44(v35 > 1, v36 + 1, 1);
              v29 = v96;
            }
            *(_QWORD *)&v29->instance[8] = v36 + 1;
            v37 = (char *)v29 + 16 * v36;
            *((_QWORD *)v37 + 4) = v32;
            *((_QWORD *)v37 + 5) = v34;
            --v28;
          }
          while (v28);
          v27 = v92;
          v25 = v93;
          v26 = v91;
        }
        v75 = Array.description.getter(v29, &type metadata for String);
        v77 = (_TtC14softposreaderd12RemoteReader *)v76;
        swift_bridgeObjectRelease(v29, v76, v78, v79, v80, v81, v82, v83);
        v96 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(v75, (unint64_t)v77, (uint64_t *)&v97);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v27 + 4, v27 + 12);
        swift_bridgeObjectRelease_n(a1, 2);
        swift_bridgeObjectRelease(v77, v84, v85, v86, v87, v88, v89, v90);
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "CADailyLogger.increment - CADailyEvents: %s", v27, 0xCu);
        swift_arrayDestroy(oslog, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(oslog, -1, -1);
        swift_slowDealloc(v27, -1, -1);

        v42 = *(_QWORD *)(a1 + 16);
        if (!v42)
        {
LABEL_28:

          return;
        }
      }
      else
      {

        swift_bridgeObjectRelease_n(a1, 2);
        v42 = *(_QWORD *)(a1 + 16);
        if (!v42)
          goto LABEL_28;
      }
      v43 = (os_unfair_lock_s *)(*(_QWORD *)(v3 + 40) + 16);
      swift_bridgeObjectRetain();
      v44 = 0;
      while (1)
      {
        v3 = *(unsigned __int8 *)(a1 + v44 + 32);
        os_unfair_lock_lock(v43);
        sub_1000389E4(v3);
        v46 = v45;
        v47 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v46, v48, v49, v50, v51, v52, v53, v54);
        v55 = (char *)objc_msgSend(v16, "integerForKey:", v47);

        v56 = __OFADD__(v55, 1);
        v57 = v55 + 1;
        if (v56)
          break;
        ++v44;
        sub_1000389E4(v3);
        v59 = v58;
        v60 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v59, v61, v62, v63, v64, v65, v66, v67);
        objc_msgSend(v16, "setInteger:forKey:", v57, v60);

        os_unfair_lock_unlock(v43);
        if (v42 == v44)
        {

          swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, v68, v69, v70, v71, v72, v73, v74);
          return;
        }
      }
      __break(1u);
LABEL_30:
      swift_once(&qword_1001ACF98, sub_100056A00);
    }
  }
  if (qword_1001ACF98 != -1)
    swift_once(&qword_1001ACF98, sub_100056A00);
  v38 = type metadata accessor for Logger(0);
  v39 = sub_100003A14(v38, (uint64_t)qword_1001B0130);
  osloga = Logger.logObject.getter(v39);
  v40 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(osloga, v40))
  {
    v41 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v41 = 0;
    _os_log_impl((void *)&_mh_execute_header, osloga, v40, "CADailyLogger.increment - User Defaults is nil", v41, 2u);
    swift_slowDealloc(v41, -1, -1);
  }

}

void sub_1000567A0(unsigned __int8 a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  _TtC14softposreaderd12RemoteReader *v10;
  id v11;
  NSString v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  os_unfair_lock_s *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  uint8_t *v31;
  os_log_t oslog;

  v5 = v4;
  v10 = *(_TtC14softposreaderd12RemoteReader **)(v4 + 24);
  v11 = objc_allocWithZone((Class)NSUserDefaults);
  swift_bridgeObjectRetain();
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10, v13, v14, v15, v16, v17, v18, v19);
  oslog = (os_log_t)objc_msgSend(v11, "initWithSuiteName:", v12);

  if (oslog)
  {
    v20 = *(unsigned __int8 *)(v5 + 32);
    if (v20 != 2 && ((((v20 & 1) == 0) ^ a4) & 1) == 0)
    {
      if (qword_1001ACF98 != -1)
        swift_once(&qword_1001ACF98, sub_100056A00);
      v21 = type metadata accessor for Logger(0);
      v22 = sub_100003A14(v21, (uint64_t)qword_1001B0130);
      v23 = Logger.logObject.getter(v22);
      v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        v25 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "production flag changed, sending the daily events.", v25, 2u);
        swift_slowDealloc(v25, -1, -1);
      }

      CADailyLogger.postDailyEvents()();
    }
    *(_BYTE *)(v5 + 32) = a4 & 1;
    v26 = (os_unfair_lock_s *)(*(_QWORD *)(v5 + 40) + 16);
    os_unfair_lock_lock(v26);
    sub_1000573F8(v27, oslog, a1, a2, a3);
    os_unfair_lock_unlock(v26);
  }
  else
  {
    if (qword_1001ACF98 != -1)
      swift_once(&qword_1001ACF98, sub_100056A00);
    v28 = type metadata accessor for Logger(0);
    v29 = sub_100003A14(v28, (uint64_t)qword_1001B0130);
    oslog = (os_log_t)Logger.logObject.getter(v29);
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v30, "CADailyLogger.cumulate - User Defaults is nil", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
    }
  }

}

uint64_t sub_100056A00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B0130);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B0130);
  if (qword_1001AD160 != -1)
    swift_once(&qword_1001AD160, sub_1000CC600);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4E10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100056A90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v0 = type metadata accessor for CADailyLogger();
  v1 = swift_allocObject(v0, 48, 7);
  *(_BYTE *)(v1 + 32) = 2;
  v2 = sub_100003A2C(&qword_1001AD398);
  result = swift_allocObject(v2, 20, 7);
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(v1 + 40) = result;
  *(_QWORD *)(v1 + 16) = 0xD00000000000001DLL;
  *(_QWORD *)(v1 + 24) = 0x800000010016BCC0;
  static CADailyLogger.shared = v1;
  return result;
}

uint64_t static CADailyLogger.shared.getter()
{
  if (qword_1001ACFA0 != -1)
    swift_once(&qword_1001ACFA0, sub_100056A90);
  return swift_retain();
}

void CADailyLogger.registerBGSystemTask(queue:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  NSString v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t aBlock[5];
  uint64_t v16;

  v2 = v1;
  if (qword_1001ACF98 != -1)
    swift_once(&qword_1001ACF98, sub_100056A00);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100003A14(v4, (uint64_t)qword_1001B0130);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    aBlock[0] = v9;
    *(_DWORD *)v8 = 136315138;
    v14 = sub_1000056EC(0xD00000000000001CLL, 0x800000010016BC30, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, aBlock, v8 + 4, v8 + 12);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "CADailyLogger.%s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  v10 = objc_msgSend((id)objc_opt_self(BGSystemTaskScheduler), "sharedScheduler");
  v11 = String._bridgeToObjectiveC()();
  aBlock[4] = (uint64_t)sub_100056D94;
  v16 = v2;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000571A8;
  aBlock[3] = (uint64_t)&unk_10019C448;
  v12 = _Block_copy(aBlock);
  v13 = v16;
  swift_retain(v2);
  swift_release(v13);
  objc_msgSend(v10, "registerForTaskWithIdentifier:usingQueue:launchHandler:", v11, a1, v12);
  _Block_release(v12);

}

id sub_100056D94(void *a1)
{
  CADailyLogger.postDailyEvents()();
  return objc_msgSend(a1, "setTaskCompleted");
}

Swift::Void __swiftcall CADailyLogger.postDailyEvents()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  Class isa;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t aBlock[5];
  uint64_t v22;

  v1 = v0;
  if (qword_1001ACF98 != -1)
    swift_once(&qword_1001ACF98, sub_100056A00);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100003A14(v2, (uint64_t)qword_1001B0130);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    aBlock[0] = v7;
    *(_DWORD *)v6 = 136315138;
    v20 = sub_1000056EC(0xD000000000000011, 0x800000010016BC50, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, aBlock, v6 + 4, v6 + 12);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "CADailyLogger.%s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }

  v8 = swift_allocObject(&unk_10019C480, 24, 7);
  v9 = sub_100057210((uint64_t)&off_100198098);
  *(_QWORD *)(v8 + 16) = v9;
  v10 = (_QWORD *)(v8 + 16);
  if (*(_QWORD *)(v9 + 16))
  {
    if (*(_BYTE *)(v1 + 32) == 2)
    {

    }
    else
    {
      isa = Bool._bridgeToObjectiveC()().super.super.isa;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v10);
      aBlock[0] = *v10;
      *v10 = 0x8000000000000000;
      sub_1000EB9EC((uint64_t)isa, 0x6375646F72507349, 0xEC0000006E6F6974, isUniquelyReferenced_nonNull_native);
      v17 = *v10;
      *v10 = aBlock[0];
      swift_bridgeObjectRelease(v17);
    }
    v11 = String._bridgeToObjectiveC()();
    aBlock[4] = (uint64_t)sub_100057F4C;
    v22 = v8;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000561C0;
    aBlock[3] = (uint64_t)&unk_10019C498;
    v18 = _Block_copy(aBlock);
    v19 = v22;
    swift_retain(v8);
    swift_release(v19);
    AnalyticsSendEventLazy(v11, v18);
    _Block_release(v18);
  }
  else
  {
    v11 = Logger.logObject.getter(v9);
    v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      aBlock[0] = v14;
      *(_DWORD *)v13 = 136315138;
      v20 = sub_1000056EC(0xD000000000000011, 0x800000010016BC50, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, aBlock, v13 + 4, v13 + 12);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "CADailyLogger.%s - eventPayload isEmpty (not sending)", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }
  }
  swift_release(v8);

}

void sub_1000571A8(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

uint64_t sub_1000571F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100057208(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_100057210(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  id v4;
  NSString v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  unint64_t v21;

  v3 = *(_QWORD *)(v1 + 24);
  v4 = objc_allocWithZone((Class)NSUserDefaults);
  swift_bridgeObjectRetain(v3);
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  v6 = objc_msgSend(v4, "initWithSuiteName:", v5);

  if (v6)
  {
    v7 = sub_1000E8880((uint64_t)_swiftEmptyArrayStorage);
    v21 = v7;
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
    {
      v9 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 40) + 16);
      swift_bridgeObjectRetain(a1);
      v10 = 0;
      do
      {
        v11 = v10 + 1;
        v12 = *(_BYTE *)(a1 + v10 + 32);
        os_unfair_lock_lock(v9);
        sub_1000578B4(v13, v12, &v21, v6);
        os_unfair_lock_unlock(v9);
        v10 = v11;
      }
      while (v8 != v11);

      swift_bridgeObjectRelease(a1);
      return v21;
    }
    else
    {
      v14 = v7;

    }
    return v14;
  }
  else
  {
    if (qword_1001ACF98 != -1)
      swift_once(&qword_1001ACF98, sub_100056A00);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_100003A14(v15, (uint64_t)qword_1001B0130);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "CADailyLogger.extract - User Defaults is nil", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    return sub_1000E8880((uint64_t)_swiftEmptyArrayStorage);
  }
}

void sub_1000573F8(uint64_t a1, void *a2, unsigned __int8 a3, uint64_t a4, unint64_t a5)
{
  _TtC14softposreaderd12RemoteReader *v9;
  _TtC14softposreaderd12RemoteReader *v10;
  NSString v11;
  SEL v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  _TtC14softposreaderd12RemoteReader *v20;
  const char *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _TtC14softposreaderd12RemoteReader *v35;
  SEL v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  Class isa;
  SEL v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  _TtC14softposreaderd12RemoteReader *v59;
  _TtC14softposreaderd12RemoteReader *v60;
  NSString v61;
  SEL v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  os_log_type_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _TtC14softposreaderd12RemoteReader *v75;
  SEL v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  sub_1000389E4(a3);
  v10 = v9;
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10, v12, v13, v14, v15, v16, v17, v18);
  v19 = objc_msgSend(a2, "stringArrayForKey:", v11);

  if (v19)
  {
    v20 = (_TtC14softposreaderd12RemoteReader *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, &type metadata for String);

  }
  else
  {
    v20 = &_swiftEmptyArrayStorage;
  }
  if ((sub_100060D8C(a4, a5, v20) & 1) != 0)
  {
    swift_bridgeObjectRelease(v20, v21, v22, v23, v24, v25, v26, v27);
    if (qword_1001ACF98 != -1)
      swift_once(&qword_1001ACF98, sub_100056A00);
    v28 = type metadata accessor for Logger(0);
    sub_100003A14(v28, (uint64_t)qword_1001B0130);
    v29 = swift_bridgeObjectRetain_n(a5, 2);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = swift_slowAlloc(22, -1);
      v83 = swift_slowAlloc(64, -1);
      v86 = v83;
      *(_DWORD *)v32 = 136315394;
      v33 = sub_1000389E4(a3);
      v35 = (_TtC14softposreaderd12RemoteReader *)v34;
      v84 = sub_1000056EC(v33, v34, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v32 + 4, v32 + 12);
      swift_bridgeObjectRelease(v35, v36, v37, v38, v39, v40, v41, v42);
      *(_WORD *)(v32 + 12) = 2080;
      swift_bridgeObjectRetain();
      v84 = sub_1000056EC(a4, a5, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v32 + 14, v32 + 22);
      swift_bridgeObjectRelease_n(a5, 3);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "CADailyLogger.cumulate - CADailyEvent: %s already stored with value: %s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy(v83, 2, (char *)&type metadata for Any + 8);
      v43 = v83;
LABEL_17:
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v32, -1, -1);

      return;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
      v20 = sub_1000915A4(0, *(_QWORD *)&v20->instance[8] + 1, 1, (uint64_t)v20, v44, v45, v46, v47);
    v49 = *(_QWORD *)&v20->instance[8];
    v48 = *(_QWORD *)&v20->instance[16];
    if (v49 >= v48 >> 1)
      v20 = sub_1000915A4((_TtC14softposreaderd12RemoteReader *)(v48 > 1), v49 + 1, 1, (uint64_t)v20, v44, v45, v46, v47);
    *(_QWORD *)&v20->instance[8] = v49 + 1;
    v50 = (char *)v20 + 16 * v49;
    *((_QWORD *)v50 + 4) = a4;
    *((_QWORD *)v50 + 5) = a5;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v20, v52, v53, v54, v55, v56, v57, v58);
    sub_1000389E4(a3);
    v60 = v59;
    v61 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v60, v62, v63, v64, v65, v66, v67, v68);
    objc_msgSend(a2, "setObject:forKey:", isa, v61);

    if (qword_1001ACF98 != -1)
      swift_once(&qword_1001ACF98, sub_100056A00);
    v69 = type metadata accessor for Logger(0);
    sub_100003A14(v69, (uint64_t)qword_1001B0130);
    v70 = swift_bridgeObjectRetain_n(a5, 2);
    v30 = Logger.logObject.getter(v70);
    v71 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v30, v71))
    {
      v32 = swift_slowAlloc(22, -1);
      v72 = swift_slowAlloc(64, -1);
      v86 = v72;
      *(_DWORD *)v32 = 136315394;
      v73 = sub_1000389E4(a3);
      v75 = (_TtC14softposreaderd12RemoteReader *)v74;
      v84 = sub_1000056EC(v73, v74, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v32 + 4, v32 + 12);
      swift_bridgeObjectRelease(v75, v76, v77, v78, v79, v80, v81, v82);
      *(_WORD *)(v32 + 12) = 2080;
      swift_bridgeObjectRetain();
      v84 = sub_1000056EC(a4, a5, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v32 + 14, v32 + 22);
      swift_bridgeObjectRelease_n(a5, 3);
      _os_log_impl((void *)&_mh_execute_header, v30, v71, "CADailyLogger.cumulate - Stored CADailyEvent: %s, value: %s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy(v72, 2, (char *)&type metadata for Any + 8);
      v43 = v72;
      goto LABEL_17;
    }
  }

  swift_bridgeObjectRelease_n(a5, 2);
}

void sub_1000578B4(uint64_t a1, unsigned __int8 a2, _QWORD *a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSString v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSString v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSString v30;
  Class isa;
  char isUniquelyReferenced_nonNull_native;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  NSString v36;
  uint64_t v37;
  uint64_t v38;

  v7 = sub_1000389E4(a2);
  v9 = v8;
  if (v7 == 0xD000000000000011 && v8 == 0x8000000100167C50)
  {
    swift_bridgeObjectRelease(0x8000000100167C50);
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, 0xD000000000000011, 0x8000000100167C50, 0);
    swift_bridgeObjectRelease(v9);
    if ((v10 & 1) == 0)
    {
      v25 = sub_1000389E4(a2);
      v27 = v26;
      sub_1000389E4(a2);
      v29 = v28;
      v30 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v29);
      objc_msgSend(a4, "integerForKey:", v30);

      isa = Int._bridgeToObjectiveC()().super.super.isa;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a3);
      v38 = *a3;
      *a3 = 0x8000000000000000;
      sub_1000EB9EC((uint64_t)isa, v25, v27, isUniquelyReferenced_nonNull_native);
      v23 = *a3;
      *a3 = v38;
      v24 = v27;
      goto LABEL_8;
    }
  }
  v11 = sub_1000389E4(a2);
  v13 = v12;
  sub_1000389E4(a2);
  v15 = v14;
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  v17 = objc_msgSend(a4, "stringArrayForKey:", v16);

  if (!v17)
  {
    v33 = (void *)sub_100057E80(v11, v13);
    swift_bridgeObjectRelease(v13);

    goto LABEL_10;
  }
  v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, &type metadata for String);

  Array.description.getter(v18, &type metadata for String);
  v20 = v19;
  swift_bridgeObjectRelease(v18);
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v20);
  v22 = swift_isUniquelyReferenced_nonNull_native(*a3);
  v37 = *a3;
  *a3 = 0x8000000000000000;
  sub_1000EB9EC((uint64_t)v21, v11, v13, v22);
  v23 = *a3;
  *a3 = v37;
  v24 = v13;
LABEL_8:
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v23);
LABEL_10:
  sub_1000389E4(a2);
  v35 = v34;
  v36 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v35);
  objc_msgSend(a4, "removeObjectForKey:", v36);

}

uint64_t CADailyLogger.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return v0;
}

uint64_t CADailyLogger.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t sub_100057B9C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

double sub_100057BC0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  _TtC14softposreaderd12RemoteReader *v8;
  unint64_t v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  int isUniquelyReferenced_nonNull_native;
  const char *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  _TtC14softposreaderd12RemoteReader *v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  double result;
  _TtC14softposreaderd12RemoteReader *v35;

  v4 = v3;
  v8 = (_TtC14softposreaderd12RemoteReader *)*v4;
  swift_bridgeObjectRetain();
  v9 = sub_10000ADC4(a1, a2);
  LOBYTE(a2) = (_BYTE)v10;
  swift_bridgeObjectRelease(v8, v10, v11, v12, v13, v14, v15, v16);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v25 = *v4;
    v35 = (_TtC14softposreaderd12RemoteReader *)*v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10000BAB0();
      v25 = (uint64_t)v35;
    }
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(*(_QWORD *)(v25 + 48) + 16 * v9 + 8), v18, v19, v20, v21, v22, v23, v24);
    sub_100005D2C((_OWORD *)(*(_QWORD *)(v25 + 56) + 32 * v9), a3);
    sub_100058208(v9, v25);
    v26 = (_TtC14softposreaderd12RemoteReader *)*v4;
    *v4 = v25;
    swift_bridgeObjectRelease(v26, v27, v28, v29, v30, v31, v32, v33);
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

double sub_100057CB0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  _TtC14softposreaderd12RemoteReader *v8;
  unint64_t v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  _TtC14softposreaderd12RemoteReader *v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  double result;
  _TtC14softposreaderd12RemoteReader *v28;

  v4 = v3;
  v8 = (_TtC14softposreaderd12RemoteReader *)*v4;
  swift_bridgeObjectRetain();
  v9 = sub_10013A3F4(a1, a2);
  LOBYTE(a2) = (_BYTE)v10;
  swift_bridgeObjectRelease(v8, v10, v11, v12, v13, v14, v15, v16);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v18 = *v4;
    v28 = (_TtC14softposreaderd12RemoteReader *)*v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1000EC5A0();
      v18 = (uint64_t)v28;
    }
    sub_100005DE0(*(_QWORD *)(*(_QWORD *)(v18 + 48) + 16 * v9), *(_QWORD *)(*(_QWORD *)(v18 + 48) + 16 * v9 + 8));
    *a3 = *(_OWORD *)(*(_QWORD *)(v18 + 56) + 16 * v9);
    sub_1000583DC(v9, v18);
    v19 = (_TtC14softposreaderd12RemoteReader *)*v4;
    *v4 = v18;
    swift_bridgeObjectRelease(v19, v20, v21, v22, v23, v24, v25, v26);
  }
  else
  {
    result = 0.0;
    *a3 = xmmword_10015E900;
  }
  return result;
}

double sub_100057D94@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_10000ADC4(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v15 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1000EC764();
      v12 = v15;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
    sub_100059104(*(_QWORD *)(v12 + 56) + 40 * v9, a3);
    sub_1000585C0(v9, v12);
    v13 = *v4;
    *v4 = v12;
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_BYTE *)(a3 + 32) = -1;
  }
  return result;
}

uint64_t sub_100057E80(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_10000ADC4(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v10 = *v3;
  v14 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000EC94C();
    v10 = v14;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v7 + 8));
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v7);
  sub_1000587B4(v7, v10);
  v12 = *v3;
  *v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_100057F4C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_100059140(v0);
  return swift_bridgeObjectRetain(v1);
}

uint64_t sub_100057F64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  _TtC14softposreaderd12RemoteReader *v8;
  unint64_t v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  int isUniquelyReferenced_nonNull_native;
  const char *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _TtC14softposreaderd12RemoteReader *v29;
  SEL v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v38;
  _TtC14softposreaderd12RemoteReader *v39;

  v4 = v3;
  v8 = (_TtC14softposreaderd12RemoteReader *)*v4;
  swift_bridgeObjectRetain();
  v9 = sub_10000ADC4(a1, a2);
  LOBYTE(a2) = (_BYTE)v10;
  swift_bridgeObjectRelease(v8, v10, v11, v12, v13, v14, v15, v16);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v25 = *v4;
    v39 = (_TtC14softposreaderd12RemoteReader *)*v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1000ECAFC();
      v25 = (uint64_t)v39;
    }
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(*(_QWORD *)(v25 + 48) + 16 * v9 + 8), v18, v19, v20, v21, v22, v23, v24);
    v26 = *(_QWORD *)(v25 + 56);
    v27 = type metadata accessor for StopWatch(0);
    v28 = *(_QWORD *)(v27 - 8);
    sub_10004E2A4(v26 + *(_QWORD *)(v28 + 72) * v9, a3);
    sub_100058988(v9, v25);
    v29 = (_TtC14softposreaderd12RemoteReader *)*v4;
    *v4 = v25;
    swift_bridgeObjectRelease(v29, v30, v31, v32, v33, v34, v35, v36);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v28 + 56))(a3, 0, 1, v27);
  }
  else
  {
    v38 = type metadata accessor for StopWatch(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(a3, 1, 1, v38);
  }
}

double sub_10005808C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  _TtC14softposreaderd12RemoteReader *v6;
  unint64_t v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  _TtC14softposreaderd12RemoteReader *v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  double result;
  _TtC14softposreaderd12RemoteReader *v26;

  v3 = v2;
  v6 = (_TtC14softposreaderd12RemoteReader *)*v3;
  swift_bridgeObjectRetain();
  v7 = sub_10013A67C(a1);
  LOBYTE(a1) = (_BYTE)v8;
  swift_bridgeObjectRelease(v6, v8, v9, v10, v11, v12, v13, v14);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v16 = *v3;
    v26 = (_TtC14softposreaderd12RemoteReader *)*v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1000ED100();
      v16 = (uint64_t)v26;
    }

    sub_100005D2C((_OWORD *)(*(_QWORD *)(v16 + 56) + 32 * v7), a2);
    sub_100058B84(v7, v16);
    v17 = (_TtC14softposreaderd12RemoteReader *)*v3;
    *v3 = v16;
    swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_100058170(char a1)
{
  _TtC14softposreaderd12RemoteReader **v1;
  _TtC14softposreaderd12RemoteReader **v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  _TtC14softposreaderd12RemoteReader *v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  _TtC14softposreaderd12RemoteReader *v18;

  v2 = v1;
  v3 = sub_10013A70C(a1 & 1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = v3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  v7 = (uint64_t)*v1;
  v18 = *v2;
  *v2 = (_TtC14softposreaderd12RemoteReader *)0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000ED488();
    v7 = (uint64_t)v18;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v5);
  sub_100058D74(v5, v7);
  v9 = *v2;
  *v2 = (_TtC14softposreaderd12RemoteReader *)v7;
  swift_bridgeObjectRelease(v9, v10, v11, v12, v13, v14, v15, v16);
  return v8;
}

unint64_t sub_100058208(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD v27[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v27);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v27, v11, v12);
        v13 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8)
            goto LABEL_5;
        }
        else if (v14 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(a2 + 48);
          v16 = (_OWORD *)(v15 + 16 * v3);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1)
            *v16 = *v17;
          v18 = *(_QWORD *)(a2 + 56);
          v19 = (_OWORD *)(v18 + 32 * v3);
          v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v19 >= v20 + 2))
          {
            v9 = v20[1];
            *v19 = *v20;
            v19[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000583DC(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26);
        sub_100005D9C(v10, v11);
        Data.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = sub_100005DE0(v10, v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_OWORD *)(v17 + 16 * v3);
          v19 = (_OWORD *)(v17 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000585C0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  unint64_t v20;
  __int128 *v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v11 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v12 = *v11;
        v13 = v11[1];
        Hasher.init(_seed:)(v29);
        swift_bridgeObjectRetain(v13);
        String.hash(into:)(v29, v12, v13);
        v14 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v13);
        v15 = v14 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v15 < v8)
            goto LABEL_5;
        }
        else if (v15 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v15)
        {
LABEL_11:
          v16 = *(_QWORD *)(a2 + 48);
          v17 = (_OWORD *)(v16 + 16 * v3);
          v18 = (_OWORD *)(v16 + 16 * v6);
          if (v3 != v6 || v17 >= v18 + 1)
            *v17 = *v18;
          v19 = *(_QWORD *)(a2 + 56);
          v20 = v19 + 40 * v3;
          v21 = (__int128 *)(v19 + 40 * v6);
          if (40 * v3 < (uint64_t)(40 * v6) || v20 >= (unint64_t)v21 + 40 || (v22 = v3 == v6, v3 = v6, !v22))
          {
            v9 = *v21;
            v10 = v21[1];
            *(_QWORD *)(v20 + 32) = *((_QWORD *)v21 + 4);
            *(_OWORD *)v20 = v9;
            *(_OWORD *)(v20 + 16) = v10;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v24 = *v23;
    v25 = (-1 << v3) - 1;
  }
  else
  {
    v23 = (uint64_t *)(v4 + 8 * (result >> 6));
    v25 = *v23;
    v24 = (-1 << result) - 1;
  }
  *v23 = v25 & v24;
  v26 = *(_QWORD *)(a2 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000587B4(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26);
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_QWORD *)(v17 + 8 * v3);
          v19 = (_QWORD *)(v17 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_100058988(unint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _TtC14softposreaderd12RemoteReader *v12;
  Swift::Int v13;
  SEL v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  _QWORD v38[9];

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      while (1)
      {
        v10 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v11 = *v10;
        v12 = (_TtC14softposreaderd12RemoteReader *)v10[1];
        Hasher.init(_seed:)(v38);
        swift_bridgeObjectRetain();
        String.hash(into:)(v38, v11, v12);
        v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12, v14, v15, v16, v17, v18, v19, v20);
        v21 = v13 & v7;
        if (v3 >= (uint64_t)v9)
          break;
        if (v21 < v9)
          goto LABEL_11;
LABEL_12:
        v22 = *(_QWORD *)(a2 + 48);
        v23 = (_OWORD *)(v22 + 16 * v3);
        v24 = (_OWORD *)(v22 + 16 * v6);
        if (v3 != v6 || v23 >= v24 + 1)
          *v23 = *v24;
        v25 = *(_QWORD *)(a2 + 56);
        v26 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for StopWatch(0) - 8) + 72);
        v27 = v26 * v3;
        v28 = v25 + v26 * v3;
        v29 = v26 * v6;
        v30 = v25 + v26 * v6 + v26;
        if (v27 < v29 || v28 >= v30)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v27 == v29)
            goto LABEL_6;
          swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v21 < v9)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v21)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v32 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v33 = *v32;
    v34 = (-1 << v3) - 1;
  }
  else
  {
    v32 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v34 = *v32;
    v33 = (-1 << a1) - 1;
  }
  *v32 = v34 & v33;
  v35 = *(_QWORD *)(a2 + 16);
  v36 = __OFSUB__(v35, 1);
  v37 = v35 - 1;
  if (v36)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v37;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t sub_100058B84(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  Swift::Int v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = *(void **)(*(_QWORD *)(a2 + 48) + 8 * v6);
        v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
        v13 = v12;
        Hasher.init(_seed:)(v29);
        v14 = v10;
        String.hash(into:)(v29, v11, v13);
        v15 = Hasher._finalize()();

        result = swift_bridgeObjectRelease(v13);
        v16 = v15 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v16 < v8)
            goto LABEL_5;
        }
        else if (v16 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v16)
        {
LABEL_11:
          v17 = *(_QWORD *)(a2 + 48);
          v18 = (_QWORD *)(v17 + 8 * v3);
          v19 = (_QWORD *)(v17 + 8 * v6);
          if (v3 != v6 || v18 >= v19 + 1)
            *v18 = *v19;
          v20 = *(_QWORD *)(a2 + 56);
          v21 = (_OWORD *)(v20 + 32 * v3);
          v22 = (_OWORD *)(v20 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v21 >= v22 + 2))
          {
            v9 = v22[1];
            *v21 = *v22;
            v21[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v24 = *v23;
    v25 = (-1 << v3) - 1;
  }
  else
  {
    v23 = (uint64_t *)(v4 + 8 * (result >> 6));
    v25 = *v23;
    v24 = (-1 << result) - 1;
  }
  *v23 = v25 & v24;
  v26 = *(_QWORD *)(a2 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100058D74(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v6);
        Hasher.init(_seed:)(v23);
        Hasher._combine(_:)(v9);
        result = Hasher._finalize()();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_BYTE *)(v11 + v3);
          v13 = (_BYTE *)(v11 + v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100058F2C(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  Swift::UInt v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v24[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v6);
        Hasher.init(_seed:)(v24);
        Hasher._combine(_:)(v10);
        result = Hasher._finalize()();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_BYTE *)(v12 + v3);
          v14 = (_BYTE *)(v12 + v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = (_OWORD *)(v15 + 32 * v3);
          v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= v17 + 2))
          {
            v9 = v17[1];
            *v16 = *v17;
            v16[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t type metadata accessor for CADailyLogger()
{
  return objc_opt_self(_TtC9SPREngine13CADailyLogger);
}

uint64_t sub_100059104(uint64_t a1, uint64_t a2)
{
  initializeWithTake for SLAMScript.SEFWDetails(a2, a1);
  return a2;
}

uint64_t sub_100059140(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[3];

  if (qword_1001ACF98 != -1)
    swift_once(&qword_1001ACF98, sub_100056A00);
  v2 = type metadata accessor for Logger(0);
  sub_100003A14(v2, (uint64_t)qword_1001B0130);
  v3 = swift_retain_n(a1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v18[0] = v7;
    *(_DWORD *)v6 = 136315394;
    v16 = sub_1000056EC(0xD000000000000024, 0x800000010016A690, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2080;
    swift_beginAccess(a1 + 16, &v16, 0, 0);
    v8 = *(_QWORD *)(a1 + 16);
    v9 = sub_10003994C();
    v10 = swift_bridgeObjectRetain(v8);
    v11 = Dictionary.description.getter(v10, &type metadata for String, v9, &protocol witness table for String);
    v13 = v12;
    swift_bridgeObjectRelease(v8);
    v15 = sub_1000056EC(v11, v13, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v6 + 14, v6 + 22);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "AnalyticsSendEventLazy: %s has payload: %s)", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_release_n(a1, 2);
  }
  swift_beginAccess(a1 + 16, v18, 0, 0);
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_100059398()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B01F8);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B01F8);
  if (qword_1001AD168 != -1)
    swift_once(&qword_1001AD168, sub_1000CC6D0);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4E28);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100059428()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B0210);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B0210);
  if (qword_1001AD138 != -1)
    swift_once(&qword_1001AD138, sub_1000CC224);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4D98);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1000594B8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint8_t *v32;
  id v33;
  unsigned __int8 *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  _TtC14softposreaderd12RemoteReader *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  _TtC14softposreaderd12RemoteReader *v46;
  const char *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  _TtC14softposreaderd12RemoteReader *v54;
  char v55;
  SEL v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  void **p_assignWithTake;
  uint64_t v64;
  const char *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void **v72;
  SEL v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  SEL v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  SEL v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  uint64_t v94;
  uint64_t v96;
  _TtC14softposreaderd12RemoteReader *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  _TtC14softposreaderd12RemoteReader *v104;
  const char *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  _TtC14softposreaderd12RemoteReader *v112;
  char v113;
  SEL v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  id v120;
  uint64_t v121;
  uint8_t *v122;
  char *v123;
  uint64_t v124;
  uint8_t *v125;
  NSObject *v126;
  os_log_type_t v127;
  int v128;
  _DWORD *v129;
  _DWORD *v130;
  _DWORD *v131;
  _DWORD *v132;
  char *v133;
  uint64_t v134;
  uint8_t *v135;
  NSObject *v136;
  os_log_type_t v137;
  int v138;
  _DWORD *v139;
  _DWORD *v140;
  _DWORD *v141;
  _DWORD *v142;
  id v143;
  uint64_t v144;
  uint64_t v145;
  const char *v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  uint64_t v153;
  const char *v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  id v161;
  const char *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  id v171;
  void *v172;
  id v173;
  uint64_t v174;
  _TtC14softposreaderd12RemoteReader *v175;
  _TtC14softposreaderd12RemoteReader *v176;
  const char *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  char v185;
  SEL v186;
  id v187;
  id v188;
  id v189;
  id v190;
  id v191;
  id v192;
  const char *v193;
  void *v194;
  void *v195;
  void *v196;
  void *v197;
  void *v198;
  void *v199;
  id v200;
  uint64_t v201;
  _TtC14softposreaderd12RemoteReader *v202;
  _TtC14softposreaderd12RemoteReader *v203;
  SEL v204;
  id v205;
  id v206;
  id v207;
  id v208;
  id v209;
  id v210;
  const char *v211;
  void *v212;
  void *v213;
  void *v214;
  void *v215;
  void *v216;
  void *v217;
  uint64_t v218;
  id v219;
  id v220;
  void *v221;
  id v222;
  uint64_t v223;
  id v224;
  void *v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  const char *v229;
  void *v230;
  void *v231;
  void *v232;
  void *v233;
  void *v234;
  void *v235;
  id v236;
  void *v237;
  char *v238;
  uint64_t v239;
  void (*v240)(char *, char *, uint64_t);
  char *v241;
  uint64_t (*v242)(char *, uint64_t, uint64_t);
  int v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  _TtC14softposreaderd12RemoteReader *v247;
  _TtC14softposreaderd12RemoteReader *v248;
  uint64_t v249;
  SEL v250;
  id v251;
  id v252;
  id v253;
  id v254;
  id v255;
  id v256;
  const char *v257;
  void *v258;
  void *v259;
  void *v260;
  void *v261;
  void *v262;
  void *v263;
  uint64_t v264;
  SEL v265;
  id v266;
  id v267;
  id v268;
  id v269;
  id v270;
  id v271;
  const char *v272;
  void *v273;
  void *v274;
  void *v275;
  void *v276;
  void *v277;
  void *v278;
  _TtC14softposreaderd12RemoteReader *v279;
  uint64_t v280;
  SEL v281;
  id v282;
  id v283;
  id v284;
  id v285;
  id v286;
  id v287;
  uint64_t v288;
  SEL v289;
  id v290;
  id v291;
  id v292;
  id v293;
  id v294;
  id v295;
  uint64_t v296;
  SEL v297;
  id v298;
  id v299;
  id v300;
  id v301;
  id v302;
  id v303;
  uint64_t v304;
  uint64_t v305;
  SEL v306;
  id v307;
  id v308;
  id v309;
  id v310;
  id v311;
  id v312;
  uint64_t v313;
  SEL v314;
  id v315;
  id v316;
  id v317;
  id v318;
  id v319;
  id v320;
  id v321;
  uint64_t v322;
  uint64_t v323;
  id v324;
  uint64_t v325;
  uint64_t v326;
  unsigned __int8 *v327;
  id v328;
  _TtC14softposreaderd12RemoteReader *v329;
  unint64_t v330;
  _TtC14softposreaderd12RemoteReader *v331;
  unsigned __int8 *v332;
  uint8_t *v333;
  char *v334;
  char *v335;
  char *v336;
  char *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  char *v341;
  char *v342;
  uint64_t v343;
  uint64_t v344;
  char *v345;
  uint64_t v346;
  char *v347;
  uint64_t v348;
  uint64_t v349;
  _BYTE v350[864];

  v340 = a2;
  v4 = v3;
  v7 = sub_100003A2C((uint64_t *)&unk_1001B36F0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v327 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v327 - v12;
  __chkstk_darwin(v11);
  v336 = (char *)&v327 - v14;
  v15 = type metadata accessor for UUID(0);
  v338 = *(_QWORD *)(v15 - 8);
  v339 = v15;
  __chkstk_darwin(v15);
  v337 = (char *)&v327 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v346 = type metadata accessor for URL(0);
  v348 = *(_QWORD *)(v346 - 8);
  v17 = __chkstk_darwin(v346);
  v19 = (char *)&v327 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v347 = (char *)&v327 - v20;
  v21 = sub_100003A2C(&qword_1001B0438);
  v22 = __chkstk_darwin(v21);
  v345 = (char *)&v327 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v342 = (char *)&v327 - v24;
  *(_QWORD *)(v4 + 144) = 0;
  v25 = (_QWORD *)(v4 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_profileID);
  *v25 = 0;
  v25[1] = 0;
  *(_BYTE *)(v4 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_isSAF) = 0;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_pinBypassPrefixAIDs) = &_swiftEmptyArrayStorage;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_pinFallbackEnabledPrefixAIDs) = &_swiftEmptyArrayStorage;
  if (qword_1001ACFB0 != -1)
    swift_once(&qword_1001ACFB0, sub_100059428);
  v26 = type metadata accessor for Logger(0);
  v27 = sub_100003A14(v26, (uint64_t)qword_1001B0210);
  v28 = a1;
  v343 = v27;
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.debug.getter();
  v31 = os_log_type_enabled(v29, v30);
  v334 = v10;
  v335 = v13;
  v341 = v19;
  if (v31)
  {
    v32 = (uint8_t *)swift_slowAlloc(12, -1);
    v332 = (unsigned __int8 *)swift_slowAlloc(8, -1);
    v344 = v4;
    v333 = v32;
    *(_DWORD *)v32 = 138412290;
    v349 = (uint64_t)v28;
    v33 = v28;
    v4 = v344;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v349, v350, v32 + 4, v32 + 12);
    v34 = v332;
    *(_QWORD *)v332 = v28;

    v35 = v30;
    v36 = v333;
    _os_log_impl((void *)&_mh_execute_header, v29, v35, "ReaderConfiguration init from SPRReadParameters: %@", v333, 0xCu);
    v37 = sub_100003A2C((uint64_t *)&unk_1001AE430);
    swift_arrayDestroy(v34, 1, v37);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v36, -1, -1);

  }
  else
  {

  }
  v38 = SPRReaderMode.description.getter(objc_msgSend(v28, "mode"));
  v46 = v39;
  if (v38 == 0x64696C61766E69 && v39 == (_TtC14softposreaderd12RemoteReader *)0xE700000000000000)
  {
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a3, (SEL)0xE700000000000000, v40, v41, v42, v43, v44, v45);
    v54 = (_TtC14softposreaderd12RemoteReader *)0xE700000000000000;
LABEL_11:
    swift_bridgeObjectRelease(v54, v47, v48, v49, v50, v51, v52, v53);
    p_assignWithTake = &value witness table for Settings.assignWithTake;
    v64 = sub_100024764(4017, 0xD000000000000012, (void *)0x800000010016C0A0, 0);
    swift_willThrow(v64);

    goto LABEL_12;
  }
  v55 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v39, 0x64696C61766E69, 0xE700000000000000, 0);
  swift_bridgeObjectRelease(v46, v56, v57, v58, v59, v60, v61, v62);
  if ((v55 & 1) != 0)
  {
    v54 = (_TtC14softposreaderd12RemoteReader *)a3;
    goto LABEL_11;
  }
  *(_QWORD *)(v4 + 16) = objc_msgSend(v28, "mode");
  v333 = (uint8_t *)v28;
  v96 = SPRTransactionType.description.getter(objc_msgSend(v28, "transactionType"));
  v104 = v97;
  if (v96 == 0x64696C61766E69 && v97 == (_TtC14softposreaderd12RemoteReader *)0xE700000000000000)
  {
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a3, (SEL)0xE700000000000000, v98, v99, v100, v101, v102, v103);
    v112 = (_TtC14softposreaderd12RemoteReader *)0xE700000000000000;
LABEL_19:
    swift_bridgeObjectRelease(v112, v105, v106, v107, v108, v109, v110, v111);
    v72 = (void **)(&value witness table for Settings + 40);
    v121 = sub_100024764(4000, 0xD000000000000017, (void *)0x800000010016C080, 0);
    swift_willThrow(v121);

    p_assignWithTake = (void **)(&value witness table for Settings + 40);
    goto LABEL_13;
  }
  v113 = _stringCompareWithSmolCheck(_:_:expecting:)(v96, v97, 0x64696C61766E69, 0xE700000000000000, 0);
  swift_bridgeObjectRelease(v104, v114, v115, v116, v117, v118, v119, v120);
  if ((v113 & 1) != 0)
  {
    v112 = (_TtC14softposreaderd12RemoteReader *)a3;
    goto LABEL_19;
  }
  v122 = v333;
  *(_BYTE *)(v4 + 72) = -[uint8_t transactionType](v333, "transactionType");
  v123 = (char *)-[uint8_t timeoutReadPay](v122, "timeoutReadPay");
  *(_QWORD *)(v4 + 112) = v123;
  v331 = (_TtC14softposreaderd12RemoteReader *)a3;
  if ((unint64_t)(v123 - 41) <= 0xFFFFFFFFFFFFFFD7)
  {
    v124 = v4;
    v125 = v122;
    v126 = Logger.logObject.getter(v125);
    v127 = static os_log_type_t.error.getter(v126);
    v128 = v127;
    if (os_log_type_enabled(v126, v127))
    {
      v129 = (_DWORD *)swift_slowAlloc(22, -1);
      LODWORD(v344) = v128;
      v130 = v129;
      *v129 = 134218240;
      v131 = v129 + 1;
      v349 = (uint64_t)-[uint8_t timeoutReadPay](v125, "timeoutReadPay");
      v132 = v131;
      v122 = v333;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v349, v350, v132, v130 + 3);

      *((_WORD *)v130 + 6) = 2048;
      v349 = 40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v349, v350, (char *)v130 + 14, (char *)v130 + 22);
      _os_log_impl((void *)&_mh_execute_header, v126, (os_log_type_t)v344, "Input timeoutReadPay of %ld was invalid. Using maximum of %ld.", (uint8_t *)v130, 0x16u);
      swift_slowDealloc(v130, -1, -1);
    }
    else
    {

      v126 = v125;
    }

    v4 = v124;
    *(_QWORD *)(v124 + 112) = 40;
    a3 = (uint64_t)v331;
  }
  v133 = (char *)-[uint8_t timeoutReadVas](v122, "timeoutReadVas");
  *(_QWORD *)(v4 + 120) = v133;
  if ((unint64_t)(v133 - 41) <= 0xFFFFFFFFFFFFFFD7)
  {
    v134 = v4;
    v135 = v122;
    v136 = Logger.logObject.getter(v135);
    v137 = static os_log_type_t.error.getter(v136);
    v138 = v137;
    if (os_log_type_enabled(v136, v137))
    {
      v139 = (_DWORD *)swift_slowAlloc(22, -1);
      LODWORD(v344) = v138;
      v140 = v139;
      *v139 = 134218240;
      v141 = v139 + 1;
      v349 = (uint64_t)-[uint8_t timeoutReadVas](v135, "timeoutReadVas");
      v142 = v141;
      v122 = v333;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v349, v350, v142, v140 + 3);

      *((_WORD *)v140 + 6) = 2048;
      v349 = 40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v349, v350, (char *)v140 + 14, (char *)v140 + 22);
      _os_log_impl((void *)&_mh_execute_header, v136, (os_log_type_t)v344, "Input timeoutReadVas of %ld was invalid. Using maximum of %ld.", (uint8_t *)v140, 0x16u);
      swift_slowDealloc(v140, -1, -1);
    }
    else
    {

      v136 = v135;
    }

    v4 = v134;
    *(_QWORD *)(v134 + 120) = 40;
    a3 = (uint64_t)v331;
  }
  if ((char *)-[uint8_t mode](v122, "mode") - 1 > (char *)2)
  {
LABEL_80:
    v321 = -[uint8_t vasRequests](v122, "vasRequests", v327);
    v322 = sub_100005E24(0, &qword_1001B0440, SPRVASRequest_ptr);
    v323 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v321, v322);

    *(_QWORD *)(v4 + 24) = v323;
    v324 = -[uint8_t currencyCode](v122, "currencyCode");
    static Data._unconditionallyBridgeFromObjectiveC(_:)(v324);
    v326 = v325;

    __asm { BR              X10 }
  }
  v344 = v4;
  v143 = -[uint8_t vasRequests](v122, "vasRequests");
  v144 = sub_100005E24(0, &qword_1001B0440, SPRVASRequest_ptr);
  v145 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v143, v144);

  if ((unint64_t)v145 >> 62)
    goto LABEL_71;
  v153 = *(_QWORD *)((v145 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v145, v146, v147, v148, v149, v150, v151, v152);
    if (!v153)
    {
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a3, v154, v155, v156, v157, v158, v159, v160);
      v264 = sub_100024764(4000, 0xD000000000000011, (void *)0x800000010016C060, 0);
      swift_willThrow(v264);

      goto LABEL_68;
    }
    v161 = -[uint8_t vasRequests](v122, "vasRequests");
    v145 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v161, v144);

    if (!((unint64_t)v145 >> 62))
    {
      v169 = *(_QWORD *)((v145 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v169)
        goto LABEL_79;
      goto LABEL_36;
    }
    if (v145 < 0)
      v313 = v145;
    else
      v313 = v145 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v169 = _CocoaArrayWrapper.endIndex.getter(v313);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v145, v314, v315, v316, v317, v318, v319, v320);
    if (!v169)
    {
LABEL_79:
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v145, v162, v163, v164, v165, v166, v167, v168);
      v4 = v344;
      goto LABEL_80;
    }
LABEL_36:
    v330 = v145 & 0xC000000000000001;
    a3 = 4;
    v328 = (id)SPRVASTerminalProtocolSignUpOnly;
    v329 = (_TtC14softposreaderd12RemoteReader *)v145;
    v327 = (unsigned __int8 *)v169;
LABEL_40:
    v144 = a3 - 4;
    v171 = v330
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a3 - 4, v145)
         : *(id *)(v145 + 8 * a3);
    if (!__OFADD__(v144, 1))
      break;
    __break(1u);
LABEL_71:
    if (v145 < 0)
      v305 = v145;
    else
      v305 = v145 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v153 = _CocoaArrayWrapper.endIndex.getter(v305);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v145, v306, v307, v308, v309, v310, v311, v312);
  }
  v172 = v171;
  v173 = objc_msgSend(v171, "vasTerminalProtocol");
  v174 = SPRVASTerminalProtocol.description.getter();
  v176 = v175;

  if (v174 == 0x64696C61766E69 && v176 == (_TtC14softposreaderd12RemoteReader *)0xE700000000000000)
  {
    swift_bridgeObjectRelease(v331, v177, v178, v179, v180, v181, v182, v183);
    swift_bridgeObjectRelease(v329, v265, v266, v267, v268, v269, v270, v271);
    v279 = (_TtC14softposreaderd12RemoteReader *)0xE700000000000000;
    goto LABEL_63;
  }
  v185 = _stringCompareWithSmolCheck(_:_:expecting:)(v174, v176, 0x64696C61766E69, 0xE700000000000000, 0);
  swift_bridgeObjectRelease(v176, v186, v187, v188, v189, v190, v191, v192);
  if ((v185 & 1) == 0)
  {
    v200 = objc_msgSend(v172, "merchantId");
    v201 = static String._unconditionallyBridgeFromObjectiveC(_:)(v200);
    v203 = v202;

    swift_bridgeObjectRelease(v203, v204, v205, v206, v207, v208, v209, v210);
    v218 = ((unint64_t)v203 >> 56) & 0xF;
    if (((unint64_t)v203 & 0x2000000000000000) == 0)
      v218 = v201 & 0xFFFFFFFFFFFFLL;
    if (!v218)
    {
      swift_bridgeObjectRelease(v331, v211, v212, v213, v214, v215, v216, v217);
      swift_bridgeObjectRelease(v329, v281, v282, v283, v284, v285, v286, v287);
      v288 = sub_100024764(4000, 0xD00000000000001ELL, (void *)0x800000010016C010, 0);
      swift_willThrow(v288);

      goto LABEL_67;
    }
    v332 = (unsigned __int8 *)(a3 - 3);
    v219 = objc_msgSend(v172, "vasTerminalProtocol");
    sub_100005E24(0, &qword_1001AF6D0, NSNumber_ptr);
    v220 = v328;
    v221 = v172;
    v222 = v219;
    LOBYTE(v219) = static NSObject.== infix(_:_:)(v222, v220);

    v223 = v346;
    if ((v219 & 1) != 0)
    {
      v224 = objc_msgSend(v172, "vasUrl");
      if (!v224)
      {
        v228 = (uint64_t)v342;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v348 + 56))(v342, 1, 1, v223);
LABEL_66:
        swift_bridgeObjectRelease(v331, v229, v230, v231, v232, v233, v234, v235);
        sub_10005218C(v228, &qword_1001B0438);
        swift_bridgeObjectRelease(v329, v289, v290, v291, v292, v293, v294, v295);
        v296 = sub_100024764(4000, 0xD000000000000037, (void *)0x800000010016BFD0, 0);
        swift_willThrow(v296);

LABEL_67:
        goto LABEL_68;
      }
      v225 = v224;
      v226 = v347;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v224);

      v227 = v348;
      v228 = (uint64_t)v342;
      (*(void (**)(char *, char *, uint64_t))(v348 + 32))(v342, v226, v223);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v227 + 56))(v228, 0, 1, v223);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v227 + 48))(v228, 1, v223) == 1)
        goto LABEL_66;
      sub_10005218C(v228, &qword_1001B0438);
      v221 = v172;
    }
    v236 = objc_msgSend(v221, "vasUrl", v327);
    if (!v236)
    {
      v170 = (uint64_t)v345;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v348 + 56))(v345, 1, 1, v223);
      v122 = v333;
LABEL_38:

      sub_10005218C(v170, &qword_1001B0438);
      goto LABEL_39;
    }
    v237 = v236;
    v238 = v347;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v236);

    v239 = v348;
    v240 = *(void (**)(char *, char *, uint64_t))(v348 + 32);
    v241 = v345;
    v240(v345, v238, v223);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v239 + 56))(v241, 0, 1, v223);
    v242 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v239 + 48);
    v170 = (uint64_t)v241;
    v243 = v242(v241, 1, v223);
    v122 = v333;
    if (v243 == 1)
      goto LABEL_38;
    v244 = v341;
    v245 = ((uint64_t (*)(char *, uint64_t, uint64_t))v240)(v341, v170, v223);
    v246 = URL.absoluteString.getter(v245);
    v248 = v247;
    v249 = String.count.getter(v246, v247);
    swift_bridgeObjectRelease(v248, v250, v251, v252, v253, v254, v255, v256);
    if (v249 > 64)
    {
      swift_bridgeObjectRelease(v331, v257, v258, v259, v260, v261, v262, v263);
      swift_bridgeObjectRelease(v329, v297, v298, v299, v300, v301, v302, v303);
      v304 = sub_100024764(4000, 0xD00000000000001DLL, (void *)0x800000010016BFB0, 0);
      swift_willThrow(v304);

      (*(void (**)(char *, uint64_t))(v348 + 8))(v244, v223);
      goto LABEL_68;
    }
    (*(void (**)(char *, uint64_t))(v348 + 8))(v244, v223);

LABEL_39:
    ++a3;
    v145 = (uint64_t)v329;
    if (v332 == v327)
      goto LABEL_79;
    goto LABEL_40;
  }
  swift_bridgeObjectRelease(v331, v193, v194, v195, v196, v197, v198, v199);
  v279 = v329;
LABEL_63:
  swift_bridgeObjectRelease(v279, v272, v273, v274, v275, v276, v277, v278);
  v280 = sub_100024764(4000, 0xD000000000000029, (void *)0x800000010016C030, 0);
  swift_willThrow(v280);

LABEL_68:
  v4 = v344;
  p_assignWithTake = (void **)(&value witness table for Settings + 40);
LABEL_12:
  v72 = &value witness table for Settings.assignWithTake;
LABEL_13:
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(v4 + 144), v65, v66, v67, v68, v69, v70, v71);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)((char *)p_assignWithTake[375] + v4 + 8), v73, v74, v75, v76, v77, v78, v79);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(v4 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_pinBypassPrefixAIDs), v80, v81, v82, v83, v84, v85, v86);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)((char *)v72[378] + v4), v87, v88, v89, v90, v91, v92, v93);
  v94 = type metadata accessor for ReaderConfiguration(0);
  swift_deallocPartialClassInstance(v4, v94, *(unsigned int *)(*(_QWORD *)v4 + 48), *(unsigned __int16 *)(*(_QWORD *)v4 + 52));
  return v4;
}

uint64_t sub_10005A778()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _TtC14softposreaderd12RemoteReader *v5;
  uint64_t v6;
  const char *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  const char *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  unint64_t v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  NSObject *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  _TtC14softposreaderd12RemoteReader *v81;
  SEL v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  _TtC14softposreaderd12RemoteReader *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _TtC14softposreaderd12RemoteReader *v95;
  uint64_t v96;
  uint64_t v97;
  _TtC14softposreaderd12RemoteReader *v98;
  _TtC14softposreaderd12RemoteReader *v99;
  SEL v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  SEL v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  NSObject *v114;
  uint64_t v115;

  sub_100005DE0(v3, v1);
  if (BYTE6(v1) != *(_QWORD *)TLVTag.TAG_9F1E_LENGTH.unsafeMutableAddressor())
  {
    swift_bridgeObjectRelease(v5, v7, v8, v9, v10, v11, v12, v13);
    v52 = sub_100024764(4000, 0xD000000000000017, (void *)0x800000010016BEB0, 0);
    swift_willThrow(v52);

    JUMPOUT(0x10005A7CCLL);
  }
  v14 = *(void **)(v0 + 48);
  v15 = objc_msgSend(v14, *(SEL *)(v2 + 2728));
  v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  v4[12] = v16;
  v4[13] = v18;
  v19 = objc_msgSend(v14, "transactionId");
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v22 = v21;

  v4[16] = v20;
  v4[17] = v22;
  swift_bridgeObjectRetain();
  v23 = v22;
  v24 = v14;
  v25 = sub_1000FA224(v20, v23);
  v27 = v26;
  Data.sha256Digest.getter(v25, v26);
  v29 = v28;
  v31 = v30;
  sub_100005DE0(v25, v27);
  v4[19] = Data.subdata(in:)(0, 16, v29, v31);
  v4[20] = v32;
  v33 = objc_msgSend(v24, "preferredSchemes");
  if (!v33)
    goto LABEL_8;
  v34 = v33;
  v35 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v33, &type metadata for Data);

  v43 = *(_QWORD *)(v35 + 16);
  if (!v43)
  {
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v35, v36, v37, v38, v39, v40, v41, v42);
LABEL_8:
    *(_QWORD *)(v0 + 176) = v31;
    v53 = objc_msgSend(v24, "kernelToken");
    v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
    v55 = v24;
    v57 = v56;

    v58 = *(_QWORD *)(v0 + 112);
    sub_1001250B4(v54, v57, *(_QWORD *)(v0 + 104), v5, (_OWORD *)(v0 + 472));
    if (v58)
    {
      swift_errorRetain();
      sub_100024764(4004, 0, 0, v58);
      v59 = swift_errorRelease();
      swift_willThrow(v59);

      sub_100005DE0(v29, *(_QWORD *)(v0 + 176));
      swift_errorRelease();
    }
    else
    {
      *(_QWORD *)(v0 + 144) = v4;
      v60 = v4 + 21;
      memcpy(v60, (const void *)(v0 + 472), 0x120uLL);
      sub_10005BAFC((_QWORD *)(v0 + 472));
      v61 = *(char **)(v0 + 72);
      sub_100124964(v61);
      sub_100054898((_QWORD *)(v0 + 472));
      v63 = *(_QWORD *)(v0 + 88);
      v62 = *(_QWORD *)(v0 + 96);
      v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v63 + 48);
      if (v64((uint64_t)v61, 1, v62) != 1)
      {
        v68 = *(_QWORD *)(v0 + 80);
        (*(void (**)(uint64_t, char *, uint64_t))(v63 + 32))(v68, v61, v62);
        v69 = *(_QWORD *)(v0 + 144);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16))(v69 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_tpid, v68, v62);
        memcpy((void *)(v0 + 760), v60, 0x120uLL);
        sub_10005BAFC((_QWORD *)(v0 + 760));
        v70 = *(char **)(v0 + 64);
        sub_100124B10(v70);
        sub_100054898((_QWORD *)(v0 + 760));
        sub_10005BC04((uint64_t)v70, v69 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_safTPID);
        v71 = swift_retain_n(v69, 4);
        v72 = Logger.logObject.getter(v71);
        v73 = static os_log_type_t.default.getter();
        *(_DWORD *)(v0 + 160) = v73;
        *(_QWORD *)(v0 + 168) = v72;
        if (os_log_type_enabled(v72, (os_log_type_t)v73))
        {
          v74 = swift_slowAlloc(22, -1);
          v75 = swift_slowAlloc(64, -1);
          *(_QWORD *)(v0 + 152) = v75;
          *(_QWORD *)(v6 - 72) = v75;
          *(_DWORD *)v74 = 136315394;
          v76 = *(_QWORD *)(v0 + 144);
          v77 = UUID.uuidString.getter(v75);
          v79 = sub_100081EE4(v77, v78);
          v81 = (_TtC14softposreaderd12RemoteReader *)v80;
          *(_QWORD *)(v0 + 184) = sub_1000056EC(v79, v80, (uint64_t *)(v6 - 72));
          *(_QWORD *)(v0 + 136) = v0 + 192;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v74 + 4, v74 + 12);
          swift_release_n(v76, 2);
          swift_bridgeObjectRelease(v81, v82, v83, v84, v85, v86, v87, v88);
          *(_WORD *)(v74 + 12) = 2080;
          v89 = v76 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_safTPID;
          v90 = *(_QWORD *)(v0 + 56);
          sub_10005BC4C(v76 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_safTPID, v90);
          LODWORD(v76) = v64(v90, 1, *(_QWORD *)(v0 + 96));
          sub_10005218C(v90, (uint64_t *)&unk_1001B36F0);
          if ((_DWORD)v76 == 1)
          {
            v91 = (_TtC14softposreaderd12RemoteReader *)0xE100000000000000;
            v92 = 32;
          }
          else
          {
            *(_QWORD *)(v0 + 184) = 0x495054666173202CLL;
            *(_QWORD *)(v0 + 192) = 0xEB00000000203A44;
            v93 = v64(v89, 1, *(_QWORD *)(v0 + 96));
            if ((_DWORD)v93)
            {
              v94 = 0;
              v95 = (_TtC14softposreaderd12RemoteReader *)0xE000000000000000;
            }
            else
            {
              v96 = UUID.uuidString.getter(v93);
              v94 = sub_100081EE4(v96, v97);
              v95 = v98;
            }
            v99 = v95;
            String.append(_:)(*(Swift::String *)&v94);
            swift_bridgeObjectRelease(v95, v100, v101, v102, v103, v104, v105, v106);
            v92 = *(_QWORD *)(v0 + 184);
            v91 = *(_TtC14softposreaderd12RemoteReader **)(v0 + 192);
          }
          *(_QWORD *)(v0 + 184) = sub_1000056EC(v92, (unint64_t)v91, (uint64_t *)(v6 - 72));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, *(_QWORD *)(v0 + 136), v74 + 14, v74 + 22);
          swift_release_n(*(_QWORD *)(v0 + 144), 2);
          swift_bridgeObjectRelease(v91, v107, v108, v109, v110, v111, v112, v113);
          v114 = *(NSObject **)(v0 + 168);
          _os_log_impl((void *)&_mh_execute_header, v114, (os_log_type_t)*(_DWORD *)(v0 + 160), "tpid: %s%s from SPRReadParameters kernelToken", (uint8_t *)v74, 0x16u);
          v115 = *(_QWORD *)(v0 + 152);
          swift_arrayDestroy(v115, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v115, -1, -1);
          swift_slowDealloc(v74, -1, -1);
          sub_100005DE0(v29, *(_QWORD *)(v0 + 176));

          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 96));
        }
        else
        {
          sub_100005DE0(v29, *(_QWORD *)(v0 + 176));
          swift_release_n(*(_QWORD *)(v0 + 144), 4);

          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 96));
        }
        JUMPOUT(0x100059910);
      }
      sub_10005218C((uint64_t)v61, (uint64_t *)&unk_1001B36F0);
      v65 = sub_100024764(4004, 0xD00000000000003ELL, (void *)0x800000010016BED0, 0);
      swift_willThrow(v65);

      sub_100005DE0(v29, *(_QWORD *)(v0 + 176));
    }
LABEL_24:
    JUMPOUT(0x10005A7D8);
  }
  if (v43 > 4)
  {
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v35, v36, v37, v38, v39, v40, v41, v42);
    swift_bridgeObjectRelease(v5, v44, v45, v46, v47, v48, v49, v50);
    v51 = sub_100024764(4000, 0xD00000000000002CLL, (void *)0x800000010016BF50, 0);
    swift_willThrow(v51);

    sub_100005DE0(v29, v31);
    goto LABEL_24;
  }
  *(_QWORD *)(v0 + 144) = v4;
  v66 = swift_bridgeObjectRetain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_10005ABDC + dword_10005B1CC[*(_QWORD *)(v35 + 40) >> 62]))(v66);
}

uint64_t sub_10005A858()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _TtC14softposreaderd12RemoteReader *v5;
  const char *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  const char *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  unint64_t v42;
  SEL v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;

  sub_100005DE0(v3, v1);
  if (__OFSUB__(HIDWORD(v3), (_DWORD)v3))
  {
    __break(1u);
    JUMPOUT(0x10005B148);
  }
  if (HIDWORD(v3) - (_DWORD)v3 != *(_QWORD *)TLVTag.TAG_9F1E_LENGTH.unsafeMutableAddressor())
  {
    swift_bridgeObjectRelease(v5, v6, v7, v8, v9, v10, v11, v12);
    v51 = sub_100024764(4000, 0xD000000000000017, (void *)0x800000010016BEB0, 0);
    swift_willThrow(v51);

    JUMPOUT(0x10005A7CCLL);
  }
  v13 = *(void **)(v0 + 48);
  v14 = objc_msgSend(v13, *(SEL *)(v2 + 2728));
  v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v17 = v16;

  v4[12] = v15;
  v4[13] = v17;
  v18 = objc_msgSend(v13, "transactionId");
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  v4[16] = v19;
  v4[17] = v21;
  swift_bridgeObjectRetain();
  v22 = v21;
  v23 = v13;
  v24 = sub_1000FA224(v19, v22);
  v26 = v25;
  Data.sha256Digest.getter(v24, v25);
  v28 = v27;
  v30 = v29;
  sub_100005DE0(v24, v26);
  v4[19] = Data.subdata(in:)(0, 16, v28, v30);
  v4[20] = v31;
  v32 = objc_msgSend(v23, "preferredSchemes");
  if (!v32)
    goto LABEL_9;
  v33 = v32;
  v34 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v32, &type metadata for Data);

  v42 = *(_QWORD *)(v34 + 16);
  if (!v42)
  {
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v34, v35, v36, v37, v38, v39, v40, v41);
LABEL_9:
    *(_QWORD *)(v0 + 176) = v30;
    v52 = objc_msgSend(v23, "kernelToken");
    v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
    v54 = v23;
    v56 = v55;

    v57 = *(_QWORD *)(v0 + 112);
    sub_1001250B4(v53, v56, *(_QWORD *)(v0 + 104), v5, (_OWORD *)(v0 + 472));
    if (v57)
    {
      swift_errorRetain();
      sub_100024764(4004, 0, 0, v57);
      v58 = swift_errorRelease();
      swift_willThrow(v58);

      sub_100005DE0(v28, *(_QWORD *)(v0 + 176));
      swift_errorRelease();
    }
    else
    {
      *(_QWORD *)(v0 + 144) = v4;
      memcpy(v4 + 21, (const void *)(v0 + 472), 0x120uLL);
      sub_10005BAFC((_QWORD *)(v0 + 472));
      v59 = *(char **)(v0 + 72);
      sub_100124964(v59);
      sub_100054898((_QWORD *)(v0 + 472));
      if ((*(unsigned int (**)(char *, uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 48))(v59, 1, *(_QWORD *)(v0 + 96)) != 1)JUMPOUT(0x10005ABF4);
      sub_10005218C((uint64_t)v59, (uint64_t *)&unk_1001B36F0);
      v60 = sub_100024764(4004, 0xD00000000000003ELL, (void *)0x800000010016BED0, 0);
      swift_willThrow(v60);

      sub_100005DE0(v28, *(_QWORD *)(v0 + 176));
    }
LABEL_18:
    JUMPOUT(0x10005A7D8);
  }
  if (v42 > 4)
  {
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v34, v35, v36, v37, v38, v39, v40, v41);
    swift_bridgeObjectRelease(v5, v43, v44, v45, v46, v47, v48, v49);
    v50 = sub_100024764(4000, 0xD00000000000002CLL, (void *)0x800000010016BF50, 0);
    swift_willThrow(v50);

    sub_100005DE0(v28, v30);
    goto LABEL_18;
  }
  *(_QWORD *)(v0 + 144) = v4;
  v61 = swift_bridgeObjectRetain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_10005ABDC + dword_10005B1CC[*(_QWORD *)(v34 + 40) >> 62]))(v61);
}

uint64_t sub_10005A878()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _TtC14softposreaderd12RemoteReader *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  const char *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  unint64_t v44;
  SEL v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;

  v7 = *(_QWORD *)(v3 + 16);
  v6 = *(_QWORD *)(v3 + 24);
  sub_100005DE0(v3, v1);
  if (__OFSUB__(v6, v7))
    __break(1u);
  if (v6 - v7 != *(_QWORD *)TLVTag.TAG_9F1E_LENGTH.unsafeMutableAddressor())
  {
    swift_bridgeObjectRelease(v5, v8, v9, v10, v11, v12, v13, v14);
    v53 = sub_100024764(4000, 0xD000000000000017, (void *)0x800000010016BEB0, 0);
    swift_willThrow(v53);

    JUMPOUT(0x10005A7CCLL);
  }
  v15 = *(void **)(v0 + 48);
  v16 = objc_msgSend(v15, *(SEL *)(v2 + 2728));
  v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v19 = v18;

  v4[12] = v17;
  v4[13] = v19;
  v20 = objc_msgSend(v15, "transactionId");
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  v4[16] = v21;
  v4[17] = v23;
  swift_bridgeObjectRetain();
  v24 = v23;
  v25 = v15;
  v26 = sub_1000FA224(v21, v24);
  v28 = v27;
  Data.sha256Digest.getter(v26, v27);
  v30 = v29;
  v32 = v31;
  sub_100005DE0(v26, v28);
  v4[19] = Data.subdata(in:)(0, 16, v30, v32);
  v4[20] = v33;
  v34 = objc_msgSend(v25, "preferredSchemes");
  if (!v34)
    goto LABEL_11;
  v35 = v34;
  v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v34, &type metadata for Data);

  v44 = *(_QWORD *)(v36 + 16);
  if (!v44)
  {
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v36, v37, v38, v39, v40, v41, v42, v43);
LABEL_11:
    *(_QWORD *)(v0 + 176) = v32;
    v54 = objc_msgSend(v25, "kernelToken");
    v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
    v56 = v25;
    v58 = v57;

    v59 = *(_QWORD *)(v0 + 112);
    sub_1001250B4(v55, v58, *(_QWORD *)(v0 + 104), v5, (_OWORD *)(v0 + 472));
    if (v59)
    {
      swift_errorRetain();
      sub_100024764(4004, 0, 0, v59);
      v60 = swift_errorRelease();
      swift_willThrow(v60);

      sub_100005DE0(v30, *(_QWORD *)(v0 + 176));
      swift_errorRelease();
    }
    else
    {
      *(_QWORD *)(v0 + 144) = v4;
      memcpy(v4 + 21, (const void *)(v0 + 472), 0x120uLL);
      sub_10005BAFC((_QWORD *)(v0 + 472));
      v61 = *(char **)(v0 + 72);
      sub_100124964(v61);
      sub_100054898((_QWORD *)(v0 + 472));
      if ((*(unsigned int (**)(char *, uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 48))(v61, 1, *(_QWORD *)(v0 + 96)) != 1)JUMPOUT(0x10005ABF4);
      sub_10005218C((uint64_t)v61, (uint64_t *)&unk_1001B36F0);
      v62 = sub_100024764(4004, 0xD00000000000003ELL, (void *)0x800000010016BED0, 0);
      swift_willThrow(v62);

      sub_100005DE0(v30, *(_QWORD *)(v0 + 176));
    }
LABEL_18:
    JUMPOUT(0x10005A7D8);
  }
  if (v44 > 4)
  {
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v36, v37, v38, v39, v40, v41, v42, v43);
    swift_bridgeObjectRelease(v5, v45, v46, v47, v48, v49, v50, v51);
    v52 = sub_100024764(4000, 0xD00000000000002CLL, (void *)0x800000010016BF50, 0);
    swift_willThrow(v52);

    sub_100005DE0(v30, v32);
    goto LABEL_18;
  }
  *(_QWORD *)(v0 + 144) = v4;
  v63 = swift_bridgeObjectRetain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_10005ABDC + dword_10005B1CC[*(_QWORD *)(v36 + 40) >> 62]))(v63);
}

void sub_10005A894()
{
  unint64_t v0;
  uint64_t v1;

  sub_100005DE0(v1, v0);
  JUMPOUT(0x10005A8A4);
}

uint64_t sub_10005ABEC(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _TtC14softposreaderd12RemoteReader *v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  _TtC14softposreaderd12RemoteReader *v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;

  if (BYTE6(v13) <= 4uLL || BYTE6(v13) >= 0x11uLL)
  {
    swift_bridgeObjectRelease(v15, a2, a3, a4, a5, a6, a7, a8);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v14, v16, v17, v18, v19, v20, v21, v22);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v14, v23, v24, v25, v26, v27, v28, v29);
    v30 = sub_100024764(4000, 0xD000000000000036, (void *)0x800000010016BF10, 0);
    swift_willThrow(v30);

    sub_100005DE0(v9, v13);
    sub_100005DE0(v12, v11);
    JUMPOUT(0x10005A7D8);
  }
  v31 = sub_100005DE0(v9, v13);
  if (v10 == 1)
  {
    v39 = v14;
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v14, v32, v33, v34, v35, v36, v37, v38);
    v40 = *(_QWORD *)(v8 + 144);
    v41 = *(_TtC14softposreaderd12RemoteReader **)(v40 + 144);
    *(_QWORD *)(v40 + 144) = v39;
    swift_bridgeObjectRelease(v41, v42, v43, v44, v45, v46, v47, v48);
    JUMPOUT(0x10005AA4CLL);
  }
  return ((uint64_t (*)(uint64_t))((char *)&loc_10005AF24 + dword_10005B1DC[*(_QWORD *)(v14 + 56) >> 62]))(v31);
}

uint64_t sub_10005AF34()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (BYTE6(v2) < 5uLL || BYTE6(v2) > 0x10uLL)
    JUMPOUT(0x10005AE14);
  v4 = sub_100005DE0(v0, v2);
  if (v1 == 2)
    JUMPOUT(0x10005AEA8);
  return ((uint64_t (*)(uint64_t))((char *)&loc_10005B0B0 + dword_10005B1EC[*(_QWORD *)(v3 + 72) >> 62]))(v4);
}

uint64_t sub_10005B0C0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (BYTE6(v2) < 5uLL || BYTE6(v2) > 0x10uLL)
    JUMPOUT(0x10005AE14);
  v4 = sub_100005DE0(v0, v2);
  if (v1 == 3)
    JUMPOUT(0x10005AEA8);
  return ((uint64_t (*)(uint64_t))((char *)&loc_10005B12C + dword_10005B1FC[*(_QWORD *)(v3 + 88) >> 62]))(v4);
}

void sub_10005B13C()
{
  uint64_t v0;
  unint64_t v1;

  if (BYTE6(v1) >= 5uLL && BYTE6(v1) <= 0x10uLL)
  {
    sub_100005DE0(v0, v1);
    JUMPOUT(0x10005AEA8);
  }
  JUMPOUT(0x10005AE14);
}

uint64_t sub_10005B20C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  Swift::String v5;
  Swift::String v6;
  _TtC14softposreaderd12RemoteReader *object;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  Swift::String v15;
  _TtC14softposreaderd12RemoteReader *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  _TtC14softposreaderd12RemoteReader *v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  SEL v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  Swift::String v35;
  Swift::String v36;
  _TtC14softposreaderd12RemoteReader *v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  Swift::String v45;
  Swift::String v46;
  _TtC14softposreaderd12RemoteReader *v47;
  SEL v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  Swift::String v55;
  Swift::String v56;
  _TtC14softposreaderd12RemoteReader *v57;
  SEL v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  Swift::String v65;
  Swift::String v66;
  _TtC14softposreaderd12RemoteReader *v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  Swift::String v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t countAndFlagsBits;
  _TtC14softposreaderd12RemoteReader *v79;
  Swift::String v80;
  _TtC14softposreaderd12RemoteReader *v81;
  SEL v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  Swift::String v89;
  Swift::String v90;
  _TtC14softposreaderd12RemoteReader *v91;
  SEL v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  Swift::String v99;
  Swift::String v100;
  _TtC14softposreaderd12RemoteReader *v101;
  SEL v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  Swift::String v109;
  uint64_t v110;
  _TtC14softposreaderd12RemoteReader *v111;
  Swift::String v112;
  SEL v113;
  id v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  Swift::String v120;
  uint64_t v121;
  int64_t v122;
  _TtC14softposreaderd12RemoteReader *v123;
  unint64_t *v124;
  uint64_t v125;
  unint64_t v126;
  Swift::String v127;
  const char *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  const char *v140;
  _TtC14softposreaderd12RemoteReader *v141;
  id v142;
  id v143;
  id v144;
  id v145;
  id v146;
  id v147;
  Swift::String v148;
  SEL v149;
  id v150;
  id v151;
  id v152;
  id v153;
  id v154;
  id v155;
  Swift::String v156;
  Swift::String v157;
  _TtC14softposreaderd12RemoteReader *v158;
  SEL v159;
  id v160;
  id v161;
  id v162;
  id v163;
  id v164;
  id v165;
  Swift::String v166;
  uint64_t v167;
  uint64_t v168;
  _TtC14softposreaderd12RemoteReader *v169;
  Swift::String v170;
  SEL v171;
  id v172;
  id v173;
  id v174;
  id v175;
  id v176;
  id v177;
  Swift::String v178;
  uint64_t v179;
  _TtC14softposreaderd12RemoteReader *v180;
  _TtC14softposreaderd12RemoteReader *v181;
  SEL v182;
  id v183;
  id v184;
  id v185;
  id v186;
  id v187;
  id v188;
  Swift::String v189;
  _TtC14softposreaderd12RemoteReader *v190;
  Swift::String v191;
  _TtC14softposreaderd12RemoteReader *v192;
  SEL v193;
  id v194;
  id v195;
  id v196;
  id v197;
  id v198;
  id v199;
  SEL v200;
  id v201;
  id v202;
  id v203;
  id v204;
  id v205;
  id v206;
  Swift::String v207;
  _TtC14softposreaderd12RemoteReader *v208;
  uint64_t v209;
  Swift::String v210;
  _TtC14softposreaderd12RemoteReader *v211;
  SEL v212;
  id v213;
  id v214;
  id v215;
  id v216;
  id v217;
  id v218;
  SEL v219;
  id v220;
  id v221;
  id v222;
  id v223;
  id v224;
  id v225;
  Swift::String v226;
  uint64_t v228;
  _TtC14softposreaderd12RemoteReader *v229;
  uint64_t v230;
  unint64_t v231;

  v1 = v0;
  v2 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v228 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v230 = 0;
  v231 = 0xE000000000000000;
  _StringGuts.grow(_:)(320);
  v5._countAndFlagsBits = 0x203A65646F6D7BLL;
  v5._object = (void *)0xE700000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = SPRReaderMode.description.getter(*(_QWORD *)(v0 + 16));
  object = (_TtC14softposreaderd12RemoteReader *)v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(object, v8, v9, v10, v11, v12, v13, v14);
  v15._countAndFlagsBits = 0x716552736176202CLL;
  v15._object = (void *)0xEF203A7374736575;
  String.append(_:)(v15);
  v16 = *(_TtC14softposreaderd12RemoteReader **)(v0 + 24);
  v17 = sub_100005E24(0, &qword_1001B0440, SPRVASRequest_ptr);
  v18 = swift_bridgeObjectRetain();
  v19._countAndFlagsBits = Array.description.getter(v18, v17);
  v20 = (_TtC14softposreaderd12RemoteReader *)v19._object;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v16, v21, v22, v23, v24, v25, v26, v27);
  swift_bridgeObjectRelease(v20, v28, v29, v30, v31, v32, v33, v34);
  v35._countAndFlagsBits = 0x746E756F6D61202CLL;
  v35._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v35);
  v36._countAndFlagsBits = NSDecimal.description.getter(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(unsigned int *)(v1 + 48));
  v37 = (_TtC14softposreaderd12RemoteReader *)v36._object;
  String.append(_:)(v36);
  swift_bridgeObjectRelease(v37, v38, v39, v40, v41, v42, v43, v44);
  v45._countAndFlagsBits = 0xD000000000000010;
  v45._object = (void *)0x800000010016C0C0;
  String.append(_:)(v45);
  v46 = Data.hexString()();
  v47 = (_TtC14softposreaderd12RemoteReader *)v46._object;
  String.append(_:)(v46);
  swift_bridgeObjectRelease(v47, v48, v49, v50, v51, v52, v53, v54);
  v55._countAndFlagsBits = 0xD000000000000013;
  v55._object = (void *)0x800000010016C0E0;
  String.append(_:)(v55);
  v56._countAndFlagsBits = SPRTransactionType.description.getter(*(unsigned __int8 *)(v1 + 72));
  v57 = (_TtC14softposreaderd12RemoteReader *)v56._object;
  String.append(_:)(v56);
  swift_bridgeObjectRelease(v57, v58, v59, v60, v61, v62, v63, v64);
  v65._countAndFlagsBits = 0xD000000000000018;
  v65._object = (void *)0x800000010016C100;
  String.append(_:)(v65);
  v66 = Data.hexString()();
  v67 = (_TtC14softposreaderd12RemoteReader *)v66._object;
  String.append(_:)(v66);
  swift_bridgeObjectRelease(v67, v68, v69, v70, v71, v72, v73, v74);
  v75._countAndFlagsBits = 0xD000000000000019;
  v75._object = (void *)0x800000010016C120;
  String.append(_:)(v75);
  v76 = *(_QWORD *)(v1 + 96);
  v77 = *(_QWORD *)(v1 + 104);
  static String.Encoding.ascii.getter();
  countAndFlagsBits = String.init(data:encoding:)(v76, v77, v4);
  if (!v79)
  {
    v80 = Data.hexString()();
    v79 = (_TtC14softposreaderd12RemoteReader *)v80._object;
    countAndFlagsBits = v80._countAndFlagsBits;
  }
  v81 = v79;
  String.append(_:)(*(Swift::String *)&countAndFlagsBits);
  swift_bridgeObjectRelease(v81, v82, v83, v84, v85, v86, v87, v88);
  v89._object = (void *)0x800000010016C140;
  v89._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v89);
  v229 = *(_TtC14softposreaderd12RemoteReader **)(v1 + 112);
  v90._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v91 = (_TtC14softposreaderd12RemoteReader *)v90._object;
  String.append(_:)(v90);
  swift_bridgeObjectRelease(v91, v92, v93, v94, v95, v96, v97, v98);
  v99._object = (void *)0x800000010016C160;
  v99._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v99);
  v229 = *(_TtC14softposreaderd12RemoteReader **)(v1 + 120);
  v100._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v101 = (_TtC14softposreaderd12RemoteReader *)v100._object;
  String.append(_:)(v100);
  swift_bridgeObjectRelease(v101, v102, v103, v104, v105, v106, v107, v108);
  v109._countAndFlagsBits = 0xD000000000000011;
  v109._object = (void *)0x800000010016C180;
  String.append(_:)(v109);
  v110 = *(_QWORD *)(v1 + 128);
  v111 = *(_TtC14softposreaderd12RemoteReader **)(v1 + 136);
  swift_bridgeObjectRetain();
  v112._countAndFlagsBits = v110;
  v112._object = v111;
  String.append(_:)(v112);
  swift_bridgeObjectRelease(v111, v113, v114, v115, v116, v117, v118, v119);
  v120._countAndFlagsBits = 0xD000000000000014;
  v120._object = (void *)0x800000010016C1A0;
  String.append(_:)(v120);
  v121 = *(_QWORD *)(v1 + 144);
  if (v121)
  {
    v122 = *(_QWORD *)(v121 + 16);
    v123 = &_swiftEmptyArrayStorage;
    if (v122)
    {
      v229 = &_swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_100091C44(0, v122, 0);
      v123 = v229;
      v124 = (unint64_t *)(v121 + 40);
      do
      {
        v125 = *(v124 - 1);
        v126 = *v124;
        sub_100005D9C(v125, *v124);
        v127 = Data.hexString()();
        sub_100005DE0(v125, v126);
        v229 = v123;
        v136 = *(_QWORD *)&v123->instance[8];
        v135 = *(_QWORD *)&v123->instance[16];
        if (v136 >= v135 >> 1)
        {
          sub_100091C44(v135 > 1, v136 + 1, 1);
          v123 = v229;
        }
        v124 += 2;
        *(_QWORD *)&v123->instance[8] = v136 + 1;
        *(Swift::String *)&v123->instance[16 * v136 + 24] = v127;
        --v122;
      }
      while (v122);
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v121, v128, v129, v130, v131, v132, v133, v134);
    }
    v229 = v123;
    v137 = sub_100003A2C((uint64_t *)&unk_1001AE460);
    v138 = sub_1000248C8();
    v139 = BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v137, v138);
    v141 = (_TtC14softposreaderd12RemoteReader *)v140;
    swift_bridgeObjectRelease(v123, v140, v142, v143, v144, v145, v146, v147);
  }
  else
  {
    v141 = (_TtC14softposreaderd12RemoteReader *)0xE300000000000000;
    v139 = 7104878;
  }
  v148._countAndFlagsBits = v139;
  v148._object = v141;
  String.append(_:)(v148);
  swift_bridgeObjectRelease(v141, v149, v150, v151, v152, v153, v154, v155);
  v156._countAndFlagsBits = 0xD000000000000015;
  v156._object = (void *)0x800000010016C1C0;
  String.append(_:)(v156);
  v157 = Data.hexString()();
  v158 = (_TtC14softposreaderd12RemoteReader *)v157._object;
  String.append(_:)(v157);
  swift_bridgeObjectRelease(v158, v159, v160, v161, v162, v163, v164, v165);
  v166._countAndFlagsBits = 0x6C69666F7270202CLL;
  v166._object = (void *)0xED0000203A444965;
  String.append(_:)(v166);
  v167 = *(_QWORD *)(v1 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_profileID + 8);
  if (v167)
    v168 = *(_QWORD *)(v1 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_profileID);
  else
    v168 = 0;
  if (v167)
    v169 = *(_TtC14softposreaderd12RemoteReader **)(v1 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_profileID + 8);
  else
    v169 = (_TtC14softposreaderd12RemoteReader *)0xE000000000000000;
  swift_bridgeObjectRetain();
  v170._countAndFlagsBits = v168;
  v170._object = v169;
  String.append(_:)(v170);
  swift_bridgeObjectRelease(v169, v171, v172, v173, v174, v175, v176, v177);
  v178._countAndFlagsBits = 0x3A4641537369202CLL;
  v178._object = (void *)0xE900000000000020;
  String.append(_:)(v178);
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_isSAF))
    v179 = 1702195828;
  else
    v179 = 0x65736C6166;
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_isSAF))
    v180 = (_TtC14softposreaderd12RemoteReader *)0xE400000000000000;
  else
    v180 = (_TtC14softposreaderd12RemoteReader *)0xE500000000000000;
  v181 = v180;
  String.append(_:)(*(Swift::String *)&v179);
  swift_bridgeObjectRelease(v180, v182, v183, v184, v185, v186, v187, v188);
  v189._countAndFlagsBits = 0xD000000000000017;
  v189._object = (void *)0x800000010016C1E0;
  String.append(_:)(v189);
  v190 = *(_TtC14softposreaderd12RemoteReader **)(v1
                                                + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_pinBypassPrefixAIDs);
  swift_bridgeObjectRetain();
  v191._countAndFlagsBits = Array.description.getter(v190, &type metadata for String);
  v192 = (_TtC14softposreaderd12RemoteReader *)v191._object;
  String.append(_:)(v191);
  swift_bridgeObjectRelease(v190, v193, v194, v195, v196, v197, v198, v199);
  swift_bridgeObjectRelease(v192, v200, v201, v202, v203, v204, v205, v206);
  v207._countAndFlagsBits = 0xD000000000000020;
  v207._object = (void *)0x800000010016C200;
  String.append(_:)(v207);
  v208 = *(_TtC14softposreaderd12RemoteReader **)(v1
                                                + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_pinFallbackEnabledPrefixAIDs);
  v209 = swift_bridgeObjectRetain();
  v210._countAndFlagsBits = Array.description.getter(v209, &type metadata for String);
  v211 = (_TtC14softposreaderd12RemoteReader *)v210._object;
  String.append(_:)(v210);
  swift_bridgeObjectRelease(v208, v212, v213, v214, v215, v216, v217, v218);
  swift_bridgeObjectRelease(v211, v219, v220, v221, v222, v223, v224, v225);
  v226._countAndFlagsBits = 125;
  v226._object = (void *)0xE100000000000000;
  String.append(_:)(v226);
  return v230;
}

uint64_t sub_10005B830(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v8;
  SEL v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  _QWORD __dst[37];

  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(v8 + 24), a2, a3, a4, a5, a6, a7, a8);
  sub_100005DE0(*(_QWORD *)(v8 + 56), *(_QWORD *)(v8 + 64));
  sub_100005DE0(*(_QWORD *)(v8 + 80), *(_QWORD *)(v8 + 88));
  sub_100005DE0(*(_QWORD *)(v8 + 96), *(_QWORD *)(v8 + 104));
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(v8 + 136), v9, v10, v11, v12, v13, v14, v15);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(v8 + 144), v16, v17, v18, v19, v20, v21, v22);
  sub_100005DE0(*(_QWORD *)(v8 + 152), *(_QWORD *)(v8 + 160));
  memcpy(__dst, (const void *)(v8 + 168), 0x120uLL);
  sub_100054898(__dst);
  v23 = v8 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_tpid;
  v24 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
  sub_10005218C(v8 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_safTPID, (uint64_t *)&unk_1001B36F0);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(v8 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_profileID + 8), v25, v26, v27, v28, v29, v30, v31);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(v8 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_pinBypassPrefixAIDs), v32, v33, v34, v35, v36, v37, v38);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(v8+ OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_pinFallbackEnabledPrefixAIDs), v39, v40, v41, v42, v43, v44, v45);
  return v8;
}

uint64_t sub_10005B918(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v8;

  sub_10005B830(a1, a2, a3, a4, a5, a6, a7, a8);
  return swift_deallocClassInstance(v8, *(unsigned int *)(*(_QWORD *)v8 + 48), *(unsigned __int16 *)(*(_QWORD *)v8 + 52));
}

uint64_t sub_10005B93C()
{
  return type metadata accessor for ReaderConfiguration(0);
}

uint64_t type metadata accessor for ReaderConfiguration(uint64_t a1)
{
  uint64_t result;

  result = qword_1001B0250;
  if (!qword_1001B0250)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ReaderConfiguration);
  return result;
}

void sub_10005B980(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[19];

  v6[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[2] = &unk_10015F928;
  v6[3] = &unk_10015F940;
  v6[4] = (char *)&value witness table for Builtin.Int8 + 64;
  v6[5] = &unk_10015F940;
  v6[6] = &unk_10015F940;
  v6[7] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[8] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[9] = &unk_10015F958;
  v6[10] = &unk_10015F970;
  v6[11] = &unk_10015F940;
  v6[12] = &unk_10015F988;
  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v6[13] = *(_QWORD *)(v2 - 8) + 64;
    sub_10005BA88(319);
    if (v5 <= 0x3F)
    {
      v6[14] = *(_QWORD *)(v4 - 8) + 64;
      v6[15] = &unk_10015F9A0;
      v6[16] = &unk_10015F9B8;
      v6[17] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[18] = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_updateClassMetadata2(a1, 256, 19, v6, a1 + 80);
    }
  }
}

void sub_10005BA88(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001B0260)
  {
    v2 = type metadata accessor for UUID(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001B0260);
  }
}

uint64_t sub_10005BADC()
{
  return sub_10005B20C();
}

_QWORD *sub_10005BAFC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[7];
  v6 = a1[9];
  v7 = a1[11];
  v8 = a1[17];
  v9 = a1[19];
  v10 = a1[21];
  v12 = a1[23];
  v13 = a1[25];
  v14 = a1[27];
  v15 = a1[31];
  v16 = a1[30];
  v17 = a1[33];
  swift_bridgeObjectRetain(a1[29]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  sub_100005D9C(v16, v15);
  swift_bridgeObjectRetain(v17);
  return a1;
}

uint64_t sub_10005BC04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003A2C((uint64_t *)&unk_1001B36F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005BC4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003A2C((uint64_t *)&unk_1001B36F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005BC94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B0448);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B0448);
  if (qword_1001AD150 != -1)
    swift_once(&qword_1001AD150, sub_1000CC47C);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4DE0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

_QWORD *sub_10005BD24(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  _QWORD v15[3];
  int v16;
  uint64_t v17;
  uint64_t v18;

  v4 = v3;
  if (qword_1001ACFB8 != -1)
    swift_once(&qword_1001ACFB8, sub_10005BC94);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100003A14(v8, (uint64_t)qword_1001B0448);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "appendEvent(_:attestationData:userInfo:)", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  __chkstk_darwin(v13);
  v15[2] = v4;
  v16 = a1;
  v17 = a2;
  v18 = a3;
  return OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_10005E190, v15, &type metadata for () + 1);
}

void sub_10005BE60(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  void (*v7)(void);
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  Swift::String v15;
  _TtC14softposreaderd12RemoteReader *object;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  Swift::String v24;
  Swift::String v25;
  _TtC14softposreaderd12RemoteReader *v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _TtC14softposreaderd12RemoteReader *v48;
  SEL v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  uint64_t v56[2];
  uint64_t v57;
  uint64_t v58;

  sub_10005D108(a2, a3, a4);
  if (!v4)
  {
    v6 = v5;
    v7 = *(void (**)(void))(*v5 + 136);
    if (((uint64_t (*)(void))v7)() <= 75000)
    {
      v38 = sub_10005CC3C();
      sub_1000CDCAC(v6);
      if (qword_1001ACFB8 != -1)
        swift_once(&qword_1001ACFB8, sub_10005BC94);
      v39 = type metadata accessor for Logger(0);
      sub_100003A14(v39, (uint64_t)qword_1001B0448);
      v40 = swift_retain_n(v6, 2);
      v41 = Logger.logObject.getter(v40);
      v42 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v41, v42))
      {

        swift_release(v38);
        swift_release_n(v6, 3);
        return;
      }
      v43 = (uint8_t *)swift_slowAlloc(12, -1);
      v44 = swift_slowAlloc(32, -1);
      *(_DWORD *)v43 = 136315138;
      v56[0] = v44;
      v57 = (uint64_t)v6;
      v45 = type metadata accessor for TLV();
      swift_retain();
      v46 = String.init<A>(describing:)(&v57, v45);
      v48 = (_TtC14softposreaderd12RemoteReader *)v47;
      v57 = sub_1000056EC(v46, v47, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v43 + 4, v43 + 12);
      swift_release_n(v6, 2);
      swift_bridgeObjectRelease(v48, v49, v50, v51, v52, v53, v54, v55);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, ".appendEvent(%s", v43, 0xCu);
      swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v43, -1, -1);
      swift_release(v6);

      v37 = v38;
    }
    else
    {
      _StringGuts.grow(_:)(47);
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)0xE000000000000000, v8, v9, v10, v11, v12, v13, v14);
      v56[0] = 0xD000000000000016;
      v56[1] = 0x800000010016C310;
      v7();
      v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = (_TtC14softposreaderd12RemoteReader *)v15._object;
      String.append(_:)(v15);
      swift_bridgeObjectRelease(object, v17, v18, v19, v20, v21, v22, v23);
      v24._object = (void *)0x800000010016C330;
      v24._countAndFlagsBits = 0xD000000000000015;
      String.append(_:)(v24);
      v57 = 75000;
      v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v26 = (_TtC14softposreaderd12RemoteReader *)v25._object;
      String.append(_:)(v25);
      swift_bridgeObjectRelease(v26, v27, v28, v29, v30, v31, v32, v33);
      v34 = sub_10005D4D0();
      v35 = swift_allocError(&type metadata for MPOCMonitorLoggerError, v34, 0, 0);
      *(_QWORD *)v36 = 0xD000000000000016;
      *(_QWORD *)(v36 + 8) = 0x800000010016C310;
      *(_BYTE *)(v36 + 16) = 1;
      swift_willThrow(v35);
      v37 = (uint64_t)v6;
    }
    swift_release(v37);
  }
}

_QWORD *sub_10005C1C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;

  v2 = v0;
  if (qword_1001ACFB8 != -1)
    swift_once(&qword_1001ACFB8, sub_10005BC94);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_100003A14(v3, (uint64_t)qword_1001B0448);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "readBatch()", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = sub_100003A2C(&qword_1001B05C8);
  result = OS_dispatch_queue.sync<A>(execute:)(&v10, sub_10005E178, v2, v8);
  if (!v1)
    return (_QWORD *)v10;
  return result;
}

uint64_t sub_10005C2DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = sub_10005CC3C();
  if (!v1)
  {
    sub_1000CDF8C(*(_QWORD *)(a1 + 24));
    __asm { BR              X9 }
  }
  return result;
}

_QWORD *sub_10005C46C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  _QWORD v13[6];

  v3 = v2;
  if (qword_1001ACFB8 != -1)
    swift_once(&qword_1001ACFB8, sub_10005BC94);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100003A14(v6, (uint64_t)qword_1001B0448);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "removeBatch(_:)", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  __chkstk_darwin(v11);
  v13[2] = v3;
  v13[3] = a1;
  v13[4] = a2;
  return OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_10005E15C, v13, &type metadata for () + 1);
}

uint64_t sub_10005C5A0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = sub_10005CC3C();
  if (!v3)
  {
    v6 = result;
    v7 = sub_10005CE14();
    sub_1000CE3E0(a3, v7);
    sub_10005DD4C(v6, v7);
    swift_release(v6);
    return swift_release(v7);
  }
  return result;
}

_QWORD *sub_10005C640()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  v1 = v0;
  if (qword_1001ACFB8 != -1)
    swift_once(&qword_1001ACFB8, sub_10005BC94);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100003A14(v2, (uint64_t)qword_1001B0448);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "removeAll()", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  return OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_10005E144, v1, &type metadata for () + 1);
}

uint64_t sub_10005C740()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_10005CC3C();
  if (!v0)
  {
    v2 = result;
    sub_1000CE778();
    return swift_release(v2);
  }
  return result;
}

_QWORD *sub_10005C784()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  _QWORD v10[4];

  v1 = v0;
  v2 = *v0;
  if (qword_1001ACFB8 != -1)
    swift_once(&qword_1001ACFB8, sub_10005BC94);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_100003A14(v3, (uint64_t)qword_1001B0448);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "wrapEventsWithRTCReset()", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  __chkstk_darwin(v8);
  v10[2] = v1;
  v10[3] = v2;
  return OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_10005D668, v10, &type metadata for () + 1);
}

uint64_t sub_10005C8A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = __OFSUB__(v2, 80);
  v4 = v2 - 80;
  if (v3)
  {
    __break(1u);
    goto LABEL_10;
  }
  v5 = (unsigned __int128)(v4 * (__int128)3) >> 64;
  v6 = 3 * v4;
  if (v5 != v6 >> 63)
  {
LABEL_10:
    __break(1u);
    JUMPOUT(0x10005CC2CLL);
  }
  if (v6 >= 0)
    v7 = v6;
  else
    v7 = v6 + 3;
  result = sub_10005CC3C();
  if (!v1)
  {
    sub_10005CE14();
    sub_1000CDF8C(v7 >> 2);
    __asm { BR              X9 }
  }
  return result;
}

uint64_t sub_10005CC3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _TtC14softposreaderd12RemoteReader *v25;

  v1 = type metadata accessor for URL.DirectoryHint(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v23 - v10;
  sub_100005EF8((_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 56));
  v24 = 0x69726F74696E6F6DLL;
  v25 = (_TtC14softposreaderd12RemoteReader *)0xEF73676F6C2D676ELL;
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for URL.DirectoryHint.inferFromPath(_:), v1);
  v12 = sub_1000095D0();
  URL.appending<A>(component:directoryHint:)(&v24, v4, &type metadata for String, v12);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  swift_bridgeObjectRelease(v25, v13, v14, v15, v16, v17, v18, v19);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
  sub_100008390(v0 + 72, (uint64_t)&v24);
  v20 = type metadata accessor for MPOCMonitorStore(0);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v21 = sub_1000CD370((uint64_t)v9, 1, &v24);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  return v21;
}

uint64_t sub_10005CE14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  _TtC14softposreaderd12RemoteReader *v40;
  uint64_t v41;

  v1 = v0;
  v37 = type metadata accessor for URL.DirectoryHint(0);
  v2 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003A2C(&qword_1001B0438);
  __chkstk_darwin(v5);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v38 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v36 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v36 - v15;
  sub_100005EF8((_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 56));
  sub_100078504(v7);
  v17 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_10005218C((uint64_t)v7, &qword_1001B0438);
    v18 = sub_10005D624();
    v19 = swift_allocError(&type metadata for MPOCMonitorStoreError, v18, 0, 0);
    *(_QWORD *)v20 = 0xD000000000000029;
    *(_QWORD *)(v20 + 8) = 0x800000010016C2C0;
    *(_BYTE *)(v20 + 16) = 1;
    swift_willThrow(v19);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v16, v7, v8);
    v39 = 0x69726F74696E6F6DLL;
    v40 = (_TtC14softposreaderd12RemoteReader *)0xEF73676F6C2D676ELL;
    v21 = v37;
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for URL.DirectoryHint.inferFromPath(_:), v37);
    v22 = sub_1000095D0();
    URL.appending<A>(component:directoryHint:)(&v39, v4, &type metadata for String, v22);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v21);
    swift_bridgeObjectRelease(v40, v23, v24, v25, v26, v27, v28, v29);
    v30 = (uint64_t)v38;
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v38, v14, v8);
    sub_100008390(v1 + 72, (uint64_t)&v39);
    v31 = type metadata accessor for MPOCMonitorStore(0);
    swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
    v32 = v41;
    v33 = sub_1000CD370(v30, 0, &v39);
    if (v32)
    {
      v17 = *(_QWORD *)(v9 + 8);
      ((void (*)(char *, uint64_t))v17)(v14, v8);
      ((void (*)(char *, uint64_t))v17)(v16, v8);
    }
    else
    {
      v17 = v33;
      v34 = *(void (**)(char *, uint64_t))(v9 + 8);
      v34(v14, v8);
      v34(v16, v8);
    }
  }
  return v17;
}

void sub_10005D108(unsigned int a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  Swift::String v28;
  _TtC14softposreaderd12RemoteReader *object;
  SEL v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _TtC14softposreaderd12RemoteReader *v40;
  uint64_t v41;
  uint64_t v42[4];

  v8 = v3[12];
  v7 = v3[13];
  sub_100005EF8(v3 + 9, v8);
  v9 = (*(double (**)(uint64_t))(*(_QWORD *)(v7 + 8) + 24))(v8) * 1000000.0;
  if ((~*(_QWORD *)&v9 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v9 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v9 >= 9.22337204e18)
  {
LABEL_9:
    __break(1u);
    return;
  }
  v10 = (uint64_t)v9;
  if ((uint64_t)v9 <= 0)
  {
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)0xE000000000000000, v21, v22, v23, v24, v25, v26, v27);
    v42[3] = v10;
    v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
    object = (_TtC14softposreaderd12RemoteReader *)v28._object;
    String.append(_:)(v28);
    swift_bridgeObjectRelease(object, v30, v31, v32, v33, v34, v35, v36);
    v37 = sub_10005D4D0();
    v38 = swift_allocError(&type metadata for MPOCMonitorLoggerError, v37, 0, 0);
    *(_QWORD *)v39 = 0xD000000000000020;
    *(_QWORD *)(v39 + 8) = 0x800000010016C290;
    *(_BYTE *)(v39 + 16) = 0;
    swift_willThrow(v38);
  }
  else
  {
    v42[0] = 0;
    swift_stdlib_random(v42, 8);
    v11 = v42[0];
    v40 = sub_10001B880(a3);
    type metadata accessor for TLV();
    v41 = *(_QWORD *)TLVTag.asn1Sequence.unsafeMutableAddressor();
    v12 = sub_100003A2C((uint64_t *)&unk_1001AE490);
    v13 = swift_allocObject(v12, 72, 7);
    *(_OWORD *)(v13 + 16) = xmmword_10015E3D0;
    v14 = (uint64_t *)TLVTag.asn1OctetString.unsafeMutableAddressor();
    *(_QWORD *)(v13 + 32) = TLV.__allocating_init(tag:uint32:)(*v14, a1);
    LODWORD(v42[0]) = v11;
    v15 = sub_10005D514();
    sub_10005D558();
    v16 = default argument 0 of IteratorProtocol<>.nextInteger(tag:)();
    *(_QWORD *)(v13 + 40) = TLV.__allocating_init<A>(tag:integer:)(v16, (uint64_t)v42, (uint64_t)&type metadata for Int32, v15);
    v42[0] = v10;
    v17 = sub_10005D59C();
    sub_10005D5E0();
    v18 = default argument 0 of IteratorProtocol<>.nextInteger(tag:)();
    *(_QWORD *)(v13 + 48) = TLV.__allocating_init<A>(tag:integer:)(v18, (uint64_t)v42, (uint64_t)&type metadata for Int64, v17);
    *(_QWORD *)(v13 + 56) = TLV.__allocating_init(tag:uint64:)(*v14, a2);
    v19 = (uint64_t *)TLVTag.asn1Set.unsafeMutableAddressor();
    v20 = TLV.__allocating_init(tag:children:)(*v19, (uint64_t)v40);
    *(_QWORD *)(v13 + 64) = v20;
    v42[0] = v13;
    specialized Array._endMutation()(v20);
    TLV.__allocating_init(tag:children:)(v41, v42[0]);
  }
}

uint64_t sub_10005D3D4()
{
  uint64_t v0;

  sub_100005D3C((_QWORD *)(v0 + 32));
  sub_100005D3C((_QWORD *)(v0 + 72));
  sub_100005D3C((_QWORD *)(v0 + 112));
  return swift_deallocClassInstance(v0, 160, 7);
}

uint64_t type metadata accessor for MPOCDefaultMonitorLogger()
{
  return objc_opt_self(_TtC9SPREngine24MPOCDefaultMonitorLogger);
}

_QWORD *sub_10005D430(int a1, uint64_t a2, uint64_t a3)
{
  return sub_10005BD24(a1, a2, a3);
}

_QWORD *sub_10005D450()
{
  return sub_10005C1C0();
}

_QWORD *sub_10005D470(uint64_t a1, uint64_t a2)
{
  return sub_10005C46C(a1, a2);
}

_QWORD *sub_10005D490()
{
  return sub_10005C640();
}

_QWORD *sub_10005D4B0()
{
  return sub_10005C784();
}

unint64_t sub_10005D4D0()
{
  unint64_t result;

  result = qword_1001B0588;
  if (!qword_1001B0588)
  {
    result = swift_getWitnessTable(&unk_100163118, &type metadata for MPOCMonitorLoggerError);
    atomic_store(result, (unint64_t *)&qword_1001B0588);
  }
  return result;
}

unint64_t sub_10005D514()
{
  unint64_t result;

  result = qword_1001B0590;
  if (!qword_1001B0590)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int32, &type metadata for Int32);
    atomic_store(result, (unint64_t *)&qword_1001B0590);
  }
  return result;
}

unint64_t sub_10005D558()
{
  unint64_t result;

  result = qword_1001B0598;
  if (!qword_1001B0598)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int32, &type metadata for Int32);
    atomic_store(result, (unint64_t *)&qword_1001B0598);
  }
  return result;
}

unint64_t sub_10005D59C()
{
  unint64_t result;

  result = qword_1001B05A0;
  if (!qword_1001B05A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int64, &type metadata for Int64);
    atomic_store(result, (unint64_t *)&qword_1001B05A0);
  }
  return result;
}

unint64_t sub_10005D5E0()
{
  unint64_t result;

  result = qword_1001B05A8;
  if (!qword_1001B05A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int64, &type metadata for Int64);
    atomic_store(result, (unint64_t *)&qword_1001B05A8);
  }
  return result;
}

unint64_t sub_10005D624()
{
  unint64_t result;

  result = qword_1001B05B0;
  if (!qword_1001B05B0)
  {
    result = swift_getWitnessTable(&unk_100161588, &type metadata for MPOCMonitorStoreError);
    atomic_store(result, (unint64_t *)&qword_1001B05B0);
  }
  return result;
}

uint64_t sub_10005D668()
{
  uint64_t v0;

  return sub_10005C8A8(*(_QWORD *)(v0 + 16));
}

_QWORD *sub_10005D680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  __int128 v32;
  uint64_t v33;
  _UNKNOWN **v34;
  __int128 v35;
  uint64_t v36;
  _UNKNOWN **v37;
  __int128 v38;
  uint64_t v39;
  _UNKNOWN **v40;

  v30 = a2;
  v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for Environment(0);
  v40 = &off_10019CC18;
  *(_QWORD *)&v38 = a1;
  v36 = type metadata accessor for DefaultSecureTimeKeeper();
  v37 = &off_10019C0A0;
  *(_QWORD *)&v35 = a3;
  v33 = type metadata accessor for MPOCDefaultAttestationData();
  v34 = &off_10019C838;
  *(_QWORD *)&v32 = a4;
  v19 = sub_10001A610();
  static DispatchQoS.unspecified.getter(v19);
  v31 = _swiftEmptyArrayStorage;
  v20 = sub_100005F1C((unint64_t *)&qword_1001AE3E0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v21 = sub_100003A2C((uint64_t *)&unk_1001B1250);
  v22 = sub_10005E1B0();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v21, v22, v13, v20);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v9);
  a5[2] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000026, 0x800000010016C350, v18, v15, v12, 0);
  a5[19] = 75000;
  if (qword_1001ACFB8 != -1)
    swift_once(&qword_1001ACFB8, sub_10005BC94);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_100003A14(v23, (uint64_t)qword_1001B0448);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "init(environment:maxBatchSize:secureTimeKeeper:attestationData:)", v27, 2u);
    swift_slowDealloc(v27, -1, -1);
  }

  sub_10001A674(&v38, (uint64_t)(a5 + 4));
  a5[3] = v30;
  sub_10001A674(&v35, (uint64_t)(a5 + 9));
  sub_10001A674(&v32, (uint64_t)(a5 + 14));
  return a5;
}

_QWORD *sub_10005D968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD v25[3];
  uint64_t v26;
  _UNKNOWN **v27;
  _QWORD v28[3];
  uint64_t v29;
  _UNKNOWN **v30;
  _QWORD v31[3];
  uint64_t v32;
  _UNKNOWN **v33;

  v32 = type metadata accessor for Environment(0);
  v33 = &off_10019CC18;
  v31[0] = a1;
  v29 = type metadata accessor for DefaultSecureTimeKeeper();
  v30 = &off_10019C0A0;
  v28[0] = a3;
  v26 = type metadata accessor for MPOCDefaultAttestationData();
  v27 = &off_10019C838;
  v25[0] = a4;
  v8 = type metadata accessor for MPOCDefaultMonitorLogger();
  v9 = (_QWORD *)swift_allocObject(v8, 160, 7);
  v10 = sub_10001A64C((uint64_t)v31, v32);
  __chkstk_darwin(v10);
  v12 = (_QWORD *)((char *)&v25[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v13 + 16))(v12);
  v14 = sub_10001A64C((uint64_t)v28, v29);
  __chkstk_darwin(v14);
  v16 = (_QWORD *)((char *)&v25[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v17 + 16))(v16);
  v18 = sub_10001A64C((uint64_t)v25, v26);
  __chkstk_darwin(v18);
  v20 = (_QWORD *)((char *)&v25[-1] - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  v22 = sub_10005D680(*v12, a2, *v16, *v20, v9);
  sub_100005D3C(v25);
  sub_100005D3C(v28);
  sub_100005D3C(v31);
  return v22;
}

_QWORD *sub_10005DB2C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[5];
  _QWORD v21[5];
  _QWORD v22[7];

  sub_1000DEDE4();
  if (v1)
  {
    swift_release(a1);
  }
  else
  {
    v4 = a1 + OBJC_IVAR____TtC9SPREngine5Depot_settings;
    v5 = *(_QWORD *)(v4 + *(int *)(type metadata accessor for Settings(0) + 40));
    sub_1000DC4B4();
    sub_1000E12A4();
    v7 = sub_10001A64C((uint64_t)v22, v22[3]);
    v22[6] = &v19;
    __chkstk_darwin(v7);
    v9 = (_QWORD *)((char *)&v20[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v10 + 16))(v9);
    v11 = sub_10001A64C((uint64_t)v21, v21[3]);
    __chkstk_darwin(v11);
    v13 = (_QWORD *)((char *)&v20[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v14 + 16))(v13);
    v15 = sub_10001A64C((uint64_t)v20, v20[3]);
    __chkstk_darwin(v15);
    v17 = (_QWORD *)((char *)&v20[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v18 + 16))(v17);
    v2 = sub_10005D968(*v9, v5, *v13, *v17);
    sub_100005D3C(v20);
    sub_100005D3C(v21);
    sub_100005D3C(v22);
    swift_release(a1);
  }
  return v2;
}

void sub_10005DD4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  char v27;
  void (*v28)(char *, uint64_t);
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v33 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003A2C(&qword_1001B05B8);
  __chkstk_darwin(v8);
  v32 = (uint64_t)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003A2C(&qword_1001B0438);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v32 - v15;
  __chkstk_darwin(v14);
  v34 = (uint64_t)&v32 - v17;
  sub_1000CE984();
  if (!v2)
  {
    sub_1000CE984();
    v18 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
    v19 = a1 + OBJC_IVAR____TtC9SPREngine16MPOCMonitorStore_fileUrl;
    NSFileManager.replaceItemAt(_:withItemAt:backupItemName:options:)(v19, a2 + OBJC_IVAR____TtC9SPREngine16MPOCMonitorStore_fileUrl, 0, 0, 0);

    v20 = v19;
    v21 = v33;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v16, v20, v33);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v16, 0, 1, v21);
    v22 = *(int *)(v8 + 48);
    v23 = v32;
    v24 = v32 + v22;
    sub_10005E0FC(v34, v32);
    sub_10005E0FC((uint64_t)v16, v24);
    v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v25(v23, 1, v21) == 1)
    {
      sub_10005218C((uint64_t)v16, &qword_1001B0438);
      if (v25(v24, 1, v21) == 1)
      {
        sub_10005218C(v23, &qword_1001B0438);
LABEL_10:
        sub_10005218C(v34, &qword_1001B0438);
        return;
      }
    }
    else
    {
      sub_10005E0FC(v23, (uint64_t)v13);
      if (v25(v24, 1, v21) != 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v24, v21);
        v26 = sub_100005F1C(&qword_1001B05C0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v27 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v7, v21, v26);
        v28 = *(void (**)(char *, uint64_t))(v5 + 8);
        v28(v7, v21);
        sub_10005218C((uint64_t)v16, &qword_1001B0438);
        v28(v13, v21);
        sub_10005218C(v23, &qword_1001B0438);
        if ((v27 & 1) != 0)
          goto LABEL_10;
LABEL_9:
        v29 = sub_10005D624();
        v30 = swift_allocError(&type metadata for MPOCMonitorStoreError, v29, 0, 0);
        *(_QWORD *)v31 = 0xD000000000000018;
        *(_QWORD *)(v31 + 8) = 0x800000010016C2F0;
        *(_BYTE *)(v31 + 16) = 1;
        swift_willThrow(v30);
        goto LABEL_10;
      }
      sub_10005218C((uint64_t)v16, &qword_1001B0438);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v21);
    }
    sub_10005218C(v23, &qword_1001B05B8);
    goto LABEL_9;
  }
}

uint64_t sub_10005E0FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003A2C(&qword_1001B0438);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005E144()
{
  return sub_10005C740();
}

uint64_t sub_10005E15C()
{
  uint64_t v0;

  return sub_10005C5A0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_10005E178()
{
  uint64_t v0;

  return sub_10005C2DC(v0);
}

void sub_10005E190()
{
  uint64_t v0;

  sub_10005BE60(*(_QWORD *)(v0 + 16), *(_DWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

unint64_t sub_10005E1B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001AE3F0;
  if (!qword_1001AE3F0)
  {
    v1 = sub_100003A6C((uint64_t *)&unk_1001B1250);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001AE3F0);
  }
  return result;
}

uint64_t destroy for APDUResponse(uint64_t a1)
{
  sub_100005DE0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return sub_100005DE0(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for APDUResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_100005D9C(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  sub_100005D9C(v7, v6);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v6;
  return a1;
}

uint64_t assignWithCopy for APDUResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_100005D9C(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_100005DE0(v6, v7);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  sub_100005D9C(v9, v8);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v8;
  sub_100005DE0(v10, v11);
  return a1;
}

__n128 initializeWithTake for APDUResponse(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for APDUResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100005DE0(v4, v5);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_100005DE0(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for APDUResponse(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for APDUResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for APDUResponse()
{
  return &type metadata for APDUResponse;
}

ValueMetadata *type metadata accessor for APDUSW()
{
  return &type metadata for APDUSW;
}

void sub_10005E420(unint64_t a1)
{
  char v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = a1;
  v2 = a1 >> 8;
  v3 = a1 >> 16;
  v4 = a1 >> 24;
  v5 = sub_100003A2C(&qword_1001AC678);
  v6 = swift_allocObject(v5, 36, 7);
  *(_OWORD *)(v6 + 16) = xmmword_10015EE30;
  *(_BYTE *)(v6 + 32) = v1;
  *(_BYTE *)(v6 + 33) = v2;
  *(_BYTE *)(v6 + 34) = v3;
  *(_BYTE *)(v6 + 35) = v4;
  sub_10010DD5C(v6);
  v8 = v7;
  swift_bridgeObjectRelease(v6);
  __asm { BR              X10 }
}

uint64_t sub_10005E4D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v20 = BYTE6(v18);
  v21 = sub_100003A2C((uint64_t *)&unk_1001AE4A0);
  a17 = v21;
  a18 = sub_10001E5D0();
  LOBYTE(a14) = 0;
  a13 = *(_BYTE *)sub_100005EF8(&a14, v21);
  Data._Representation.replaceSubrange(_:with:count:)(v20, v20, &a13, 1);
  v22 = sub_100005D3C(&a14);
  return ((uint64_t (*)(uint64_t))((char *)sub_10005E560 + 4 * byte_10015FA70[v19 >> 62]))(v22);
}

uint64_t sub_10005E560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  uint64_t v17;

  if ((v17 & 0xFF000000000000) != 0)
    return ((uint64_t (*)(void))((char *)&loc_10005E5B0 + 4 * byte_10015FA74[a17 >> 62]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10005E6B0 + 4 * byte_10015FA7C[a17 >> 62]))();
}

uint64_t sub_10005E6B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20)
{
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v24 = BYTE6(v20);
  a17 = v22;
  a18 = v23;
  LOBYTE(a14) = HIBYTE(v21);
  a13 = *(_BYTE *)sub_100005EF8(&a14, v22);
  Data._Representation.replaceSubrange(_:with:count:)(v24, v24, &a13, 1);
  v25 = sub_100005D3C(&a14);
  return ((uint64_t (*)(uint64_t))((char *)sub_10005E728 + 4 * byte_10015FA80[a20 >> 62]))(v25);
}

uint64_t sub_10005E728()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = BYTE6(v0);
  v8 = v2;
  v9 = v3;
  LOBYTE(v7[0]) = v1;
  v6 = *(_BYTE *)sub_100005EF8(v7, v2);
  Data._Representation.replaceSubrange(_:with:count:)(v4, v4, &v6, 1);
  sub_100005D3C(v7);
  return v10;
}

void sub_10005E7B4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a1;
  v5 = a1 >> 8;
  v6 = a1 >> 16;
  v7 = a1 >> 24;
  v8 = sub_100003A2C(&qword_1001AC678);
  v9 = swift_allocObject(v8, 36, 7);
  *(_OWORD *)(v9 + 16) = xmmword_10015EE30;
  *(_BYTE *)(v9 + 32) = v4;
  *(_BYTE *)(v9 + 33) = v5;
  *(_BYTE *)(v9 + 34) = v6;
  *(_BYTE *)(v9 + 35) = v7;
  sub_10010DD5C(v9);
  swift_bridgeObjectRelease(v9);
  __asm { BR              X10 }
}

uint64_t sub_10005E868()
{
  uint64_t v0;
  unint64_t v1;

  if ((v0 & 0xFF000000000000) != 0)
    return ((uint64_t (*)(void))((char *)&loc_10005E8B4 + 4 * byte_10015FA88[v1 >> 62]))();
  else
    return ((uint64_t (*)())((char *)sub_10005E954 + 4 * byte_10015FA8C[v1 >> 62]))();
}

uint64_t sub_10005E954()
{
  char v0;
  uint64_t v1;
  char v3;
  _QWORD v4[3];
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v5 = sub_100003A2C((uint64_t *)&unk_1001AE4A0);
  v6 = sub_10001E5D0();
  LOBYTE(v4[0]) = v0;
  v3 = *(_BYTE *)sub_100005EF8(v4, v5);
  Data._Representation.replaceSubrange(_:with:count:)(BYTE6(v1), BYTE6(v1), &v3, 1);
  sub_100005D3C(v4);
  return v7;
}

uint64_t sub_10005E9F8()
{
  return Data.hexString()()._countAndFlagsBits;
}

_WORD *sub_10005EA00@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *result;
  *(_BYTE *)(a2 + 2) = 0;
  return result;
}

void sub_10005EA10(_WORD *a1@<X8>)
{
  _WORD *v1;

  *a1 = *v1;
}

BOOL sub_10005EA1C(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10005EA30()
{
  __int16 *v0;
  __int16 v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = sub_100003A2C((uint64_t *)&unk_1001B1300);
  v3 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v3 + 16) = xmmword_10015A5F0;
  *(_QWORD *)(v3 + 56) = &type metadata for UInt16;
  *(_QWORD *)(v3 + 64) = &protocol witness table for UInt16;
  *(_WORD *)(v3 + 32) = v1;
  return String.init(format:_:)(1479815205, 0xE400000000000000, v3);
}

uint64_t sub_10005EA98(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_10005EADC();
  v5 = sub_10005EB20();
  return Error<>._code.getter(a1, a2, v4, v5);
}

unint64_t sub_10005EADC()
{
  unint64_t result;

  result = qword_1001B05D0;
  if (!qword_1001B05D0)
  {
    result = swift_getWitnessTable(&unk_10015FAF8, &type metadata for APDUSW);
    atomic_store(result, (unint64_t *)&qword_1001B05D0);
  }
  return result;
}

unint64_t sub_10005EB20()
{
  unint64_t result;

  result = qword_1001B05D8;
  if (!qword_1001B05D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt16, &type metadata for UInt16);
    atomic_store(result, (unint64_t *)&qword_1001B05D8);
  }
  return result;
}

void sub_10005EB64(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_10005EBB0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  if (BYTE6(v2) >= 2uLL)
  {
    v7 = ((uint64_t (*)(uint64_t, uint64_t, unint64_t))Data.subscript.getter)(BYTE6(v2) - 2, v4, v2);
    v6 = ((uint64_t (*)(uint64_t, uint64_t, unint64_t))Data.subscript.getter)(BYTE6(v2) - 1, v4, v2) | (unsigned __int16)(v7 << 8);
    sub_100005D9C(v4, v2);
    sub_1000D79FC(2, v4, v2);
    sub_1000FA7E0(v8, v9);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  *(_QWORD *)v3 = v5;
  *(_QWORD *)(v3 + 8) = a2;
  *(_WORD *)(v3 + 16) = v6;
  *(_QWORD *)(v3 + 24) = v4;
  *(_QWORD *)(v3 + 32) = v2;
}

unint64_t sub_10005EC78(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4, uint64_t a5, unint64_t a6)
{
  if (a6 >> 60 != 15)
    __asm { BR              X10 }
  return a1 | (unint64_t)(unsigned __int16)(a2 << 8) | ((unint64_t)a3 << 16) & 0xFFFF000000FFFFFFLL | (a4 << 24);
}

uint64_t sub_10005ED70(uint64_t a1)
{
  int64_t v1;
  _TtC14softposreaderd12RemoteReader *v2;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _TtC14softposreaderd12RemoteReader *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  _OWORD v29[2];
  uint64_t v30;
  _QWORD v31[4];
  _OWORD v32[2];
  uint64_t v33;
  _OWORD v34[2];
  uint64_t v35;
  void *v36;
  uint64_t v37;
  __int128 v38;
  _OWORD v39[2];
  _TtC14softposreaderd12RemoteReader *v40;
  uint64_t *v41;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = &_swiftEmptyArrayStorage;
  if (!v1)
    return (uint64_t)v2;
  v40 = &_swiftEmptyArrayStorage;
  sub_100091CD4(0, v1, 0);
  result = sub_10006DAA8(a1);
  v6 = result;
  v7 = 0;
  v8 = a1 + 64;
  v41 = &v37;
  v28 = a1 + 64;
  v27 = v5;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(a1 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != v5)
      goto LABEL_26;
    v12 = *(void **)(*(_QWORD *)(a1 + 48) + 8 * v6);
    v13 = (uint64_t)v41;
    sub_100005D5C(*(_QWORD *)(a1 + 56) + 32 * v6, (uint64_t)v41);
    v36 = v12;
    *(_QWORD *)&v34[0] = v12;
    sub_100005D5C(v13, (uint64_t)v34 + 8);
    v32[0] = v34[0];
    v32[1] = v34[1];
    v33 = v35;
    v14 = v12;
    sub_10005218C((uint64_t)&v36, &qword_1001B07F0);
    v15 = *(_QWORD *)&v32[0];
    v30 = *(_QWORD *)&v32[0];
    sub_100005D5C((uint64_t)v32 + 8, (uint64_t)v31);
    *(_QWORD *)&v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    *((_QWORD *)&v38 + 1) = v16;
    sub_100005D5C((uint64_t)v32 + 8, (uint64_t)v29);
    sub_100005D2C(v29, v39);
    sub_100005D3C(v31);
    sub_10005218C((uint64_t)v32, &qword_1001B07F0);
    v2 = v40;
    result = swift_isUniquelyReferenced_nonNull_native(v40);
    if ((result & 1) == 0)
    {
      result = sub_100091CD4(0, *(_QWORD *)&v2->instance[8] + 1, 1);
      v2 = v40;
    }
    v18 = *(_QWORD *)&v2->instance[8];
    v17 = *(_QWORD *)&v2->instance[16];
    if (v18 >= v17 >> 1)
    {
      result = sub_100091CD4(v17 > 1, v18 + 1, 1);
      v2 = v40;
    }
    *(_QWORD *)&v2->instance[8] = v18 + 1;
    v19 = &v2[v18];
    v20 = v38;
    v21 = v39[1];
    *(_OWORD *)&v19[1].super.isa = v39[0];
    *(_OWORD *)&v19[1].instance[8] = v21;
    *(_OWORD *)&v19->instance[24] = v20;
    v9 = 1 << *(_BYTE *)(a1 + 32);
    if (v6 >= v9)
      goto LABEL_27;
    v8 = a1 + 64;
    v22 = *(_QWORD *)(v28 + 8 * v11);
    if ((v22 & (1 << v6)) == 0)
      goto LABEL_28;
    v5 = v27;
    if (*(_DWORD *)(a1 + 36) != v27)
      goto LABEL_29;
    v23 = v22 & (-2 << (v6 & 0x3F));
    if (v23)
    {
      v9 = __clz(__rbit64(v23)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v1;
    }
    else
    {
      v24 = v11 + 1;
      v25 = (unint64_t)(v9 + 63) >> 6;
      v10 = v1;
      if (v11 + 1 < v25)
      {
        v26 = *(_QWORD *)(v28 + 8 * v24);
        if (v26)
        {
LABEL_22:
          v9 = __clz(__rbit64(v26)) + (v24 << 6);
        }
        else
        {
          while (v25 - 2 != v11)
          {
            v26 = *(_QWORD *)(a1 + 80 + 8 * v11++);
            if (v26)
            {
              v24 = v11 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    ++v7;
    v6 = v9;
    if (v7 == v10)
      return (uint64_t)v2;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

double sub_10005F084@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  char v6;
  double result;

  if (*(_QWORD *)(a2 + 16) && (v5 = sub_10013A67C(a1), (v6 & 1) != 0))
  {
    sub_100005D5C(*(_QWORD *)(a2 + 56) + 32 * v5, (uint64_t)a3);
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_10005F0D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  int64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  _BYTE v17[8];
  _QWORD v18[5];

  v13 = (_QWORD *)(a2 + 64);
  v3 = 1 << *(_BYTE *)(a2 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a2 + 64);
  v14 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  if (v5)
  {
    v6 = __clz(__rbit64(v5));
LABEL_5:
    v7 = *(_BYTE *)(*(_QWORD *)(a2 + 48) + v6);
    sub_100005EB4(*(_QWORD *)(a2 + 56) + 32 * v6, (uint64_t)v15 + 8, &qword_1001B12E0);
    LOBYTE(v15[0]) = v7;
    goto LABEL_20;
  }
  v8 = 1;
  if (v14 > 1)
  {
    v9 = v13[1];
    if (v9)
    {
LABEL_8:
      v6 = __clz(__rbit64(v9)) + (v8 << 6);
      goto LABEL_5;
    }
    if (v14 > 2)
    {
      v9 = v13[2];
      if (v9)
      {
        v8 = 2;
        goto LABEL_8;
      }
      v10 = 3;
      if (v14 > 3)
      {
        v9 = v13[3];
        if (v9)
        {
          v8 = 3;
          goto LABEL_8;
        }
        while (1)
        {
          v8 = v10 + 1;
          if (__OFADD__(v10, 1))
          {
            __break(1u);
            JUMPOUT(0x10005F5E8);
          }
          if (v8 >= v14)
            break;
          v9 = v13[v8];
          ++v10;
          if (v9)
            goto LABEL_8;
        }
      }
    }
  }
  memset(v15, 0, sizeof(v15));
  v16 = 1;
LABEL_20:
  sub_100024374((uint64_t)v15, (uint64_t)v17, &qword_1001B0800);
  if (v18[3] != 1)
  {
    v11 = v17[0];
    sub_100024374((uint64_t)v18, (uint64_t)v15, &qword_1001B12E0);
    __asm { BR              X8 }
  }
  return swift_release(a2);
}

uint64_t sub_10005F610(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  int64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  _BYTE v17[8];
  _QWORD v18[5];

  v13 = (_QWORD *)(a2 + 64);
  v3 = 1 << *(_BYTE *)(a2 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a2 + 64);
  v14 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  if (v5)
  {
    v6 = __clz(__rbit64(v5));
LABEL_5:
    v7 = *(_BYTE *)(*(_QWORD *)(a2 + 48) + v6);
    sub_100005EB4(*(_QWORD *)(a2 + 56) + 32 * v6, (uint64_t)v15 + 8, &qword_1001B12E0);
    LOBYTE(v15[0]) = v7;
    goto LABEL_20;
  }
  v8 = 1;
  if (v14 > 1)
  {
    v9 = v13[1];
    if (v9)
    {
LABEL_8:
      v6 = __clz(__rbit64(v9)) + (v8 << 6);
      goto LABEL_5;
    }
    if (v14 > 2)
    {
      v9 = v13[2];
      if (v9)
      {
        v8 = 2;
        goto LABEL_8;
      }
      v10 = 3;
      if (v14 > 3)
      {
        v9 = v13[3];
        if (v9)
        {
          v8 = 3;
          goto LABEL_8;
        }
        while (1)
        {
          v8 = v10 + 1;
          if (__OFADD__(v10, 1))
          {
            __break(1u);
            JUMPOUT(0x10005FD54);
          }
          if (v8 >= v14)
            break;
          v9 = v13[v8];
          ++v10;
          if (v9)
            goto LABEL_8;
        }
      }
    }
  }
  memset(v15, 0, sizeof(v15));
  v16 = 1;
LABEL_20:
  sub_100024374((uint64_t)v15, (uint64_t)v17, &qword_1001B07C0);
  if (v18[3] != 1)
  {
    v11 = v17[0];
    sub_100024374((uint64_t)v18, (uint64_t)v15, &qword_1001B12E0);
    __asm { BR              X8 }
  }
  return swift_release(a2);
}

uint64_t sub_10005FDB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  int64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  _BYTE v17[8];
  _QWORD v18[5];

  v13 = (_QWORD *)(a2 + 64);
  v3 = 1 << *(_BYTE *)(a2 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a2 + 64);
  v14 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  if (v5)
  {
    v6 = __clz(__rbit64(v5));
LABEL_5:
    v7 = *(_BYTE *)(*(_QWORD *)(a2 + 48) + v6);
    sub_100005EB4(*(_QWORD *)(a2 + 56) + 32 * v6, (uint64_t)v15 + 8, &qword_1001B12E0);
    LOBYTE(v15[0]) = v7;
    goto LABEL_20;
  }
  v8 = 1;
  if (v14 > 1)
  {
    v9 = v13[1];
    if (v9)
    {
LABEL_8:
      v6 = __clz(__rbit64(v9)) + (v8 << 6);
      goto LABEL_5;
    }
    if (v14 > 2)
    {
      v9 = v13[2];
      if (v9)
      {
        v8 = 2;
        goto LABEL_8;
      }
      v10 = 3;
      if (v14 > 3)
      {
        v9 = v13[3];
        if (v9)
        {
          v8 = 3;
          goto LABEL_8;
        }
        while (1)
        {
          v8 = v10 + 1;
          if (__OFADD__(v10, 1))
          {
            __break(1u);
            JUMPOUT(0x1000604A8);
          }
          if (v8 >= v14)
            break;
          v9 = v13[v8];
          ++v10;
          if (v9)
            goto LABEL_8;
        }
      }
    }
  }
  memset(v15, 0, sizeof(v15));
  v16 = 1;
LABEL_20:
  sub_100024374((uint64_t)v15, (uint64_t)v17, &qword_1001B0808);
  if (v18[3] != 1)
  {
    v11 = v17[0];
    sub_100024374((uint64_t)v18, (uint64_t)v15, &qword_1001B12E0);
    __asm { BR              X8 }
  }
  return swift_release(a2);
}

uint64_t sub_100060510(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  int64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  _BYTE v17[8];
  _QWORD v18[5];

  v3 = 1 << *(_BYTE *)(a2 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a2 + 64);
  v14 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  if (v5)
  {
    v6 = __clz(__rbit64(v5));
LABEL_5:
    v7 = *(_BYTE *)(*(_QWORD *)(a2 + 48) + v6);
    sub_100005EB4(*(_QWORD *)(a2 + 56) + 32 * v6, (uint64_t)v15 + 8, &qword_1001B12E0);
    LOBYTE(v15[0]) = v7;
    goto LABEL_20;
  }
  v8 = 1;
  if (v14 > 1)
  {
    v9 = v13[1];
    if (v9)
    {
LABEL_8:
      v6 = __clz(__rbit64(v9)) + (v8 << 6);
      goto LABEL_5;
    }
    if (v14 > 2)
    {
      v9 = v13[2];
      if (v9)
      {
        v8 = 2;
        goto LABEL_8;
      }
      v10 = 3;
      if (v14 > 3)
      {
        v9 = v13[3];
        if (v9)
        {
          v8 = 3;
          goto LABEL_8;
        }
        while (1)
        {
          v8 = v10 + 1;
          if (__OFADD__(v10, 1))
          {
            __break(1u);
            JUMPOUT(0x100060C7CLL);
          }
          if (v8 >= v14)
            break;
          v9 = v13[v8];
          ++v10;
          if (v9)
            goto LABEL_8;
        }
      }
    }
  }
  memset(v15, 0, sizeof(v15));
  v16 = 1;
LABEL_20:
  sub_100024374((uint64_t)v15, (uint64_t)v17, &qword_1001B07E8);
  if (v18[3] != 1)
  {
    v11 = v17[0];
    sub_100024374((uint64_t)v18, (uint64_t)v15, &qword_1001B12E0);
    __asm { BR              X8 }
  }
  return swift_release(a2);
}

void sub_100060D00(_TtC14softposreaderd12RemoteReader **a1, uint64_t a2, char a3)
{
  sub_100060D14(a1, a2, a3);
}

void sub_100060D14(_TtC14softposreaderd12RemoteReader **a1, uint64_t a2, char a3)
{
  _TtC14softposreaderd12RemoteReader *v5;
  SEL v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;

  sub_100005EF8((_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 40));
  v5 = *a1;
  sub_100038FFC(a3, (uint64_t)*a1);
  swift_bridgeObjectRelease(v5, v6, v7, v8, v9, v10, v11, v12);
  *a1 = (_TtC14softposreaderd12RemoteReader *)&_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease(a1[1], v13, v14, v15, v16, v17, v18, v19);
  a1[1] = (_TtC14softposreaderd12RemoteReader *)&_swiftEmptyDictionarySingleton;
}

uint64_t sub_100060D8C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  if (v7 == a1 && v8 == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0);
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v11 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v13 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v14 = *(v11 - 1);
    v15 = *v11;
    v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0) & 1) != 0)
      return 1;
    result = 0;
    v11 += 2;
    if (v13 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_100060E50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B05E0);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B05E0);
  if (qword_1001AD140 != -1)
    swift_once(&qword_1001AD140, sub_1000CC2E4);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4DB0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100060EE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for OSSignposter(0);
  sub_1000039D4(v0, qword_1001B05F8);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B05F8);
  if (qword_1001ACF08 != -1)
    swift_once(&qword_1001ACF08, sub_10003B9BC);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4B10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

_QWORD *sub_100060F70()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  v1 = v0;
  if (qword_1001ACFC0 != -1)
    swift_once(&qword_1001ACFC0, sub_100060E50);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100003A14(v2, (uint64_t)qword_1001B05E0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Configurator.deinit()", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  sub_100005D3C(v1 + 3);
  sub_100005D3C(v1 + 8);
  swift_release(v1[13]);
  sub_100005D3C(v1 + 14);
  sub_100005D3C(v1 + 19);
  sub_100005D3C(v1 + 24);
  sub_100005D3C(v1 + 29);
  swift_release(v1[34]);
  sub_100005D3C(v1 + 36);
  sub_100005D3C(v1 + 41);
  sub_100005D3C(v1 + 46);
  sub_100005D3C(v1 + 51);
  return v1;
}

uint64_t sub_1000610A4()
{
  uint64_t v0;

  sub_100060F70();
  return swift_deallocClassInstance(v0, 448, 7);
}

uint64_t type metadata accessor for Configurator()
{
  return objc_opt_self(_TtC9SPREngine12Configurator);
}

void sub_1000610E4(uint64_t (*a1)(char *, _TtC14softposreaderd12RemoteReader *, _TtC14softposreaderd12RemoteReader *), os_unfair_lock_s *a2, int a3, int a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  uint64_t v110;
  NSObject *v111;
  os_log_type_t v112;
  _BOOL4 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t countAndFlagsBits;
  Swift::String v117;
  _TtC14softposreaderd12RemoteReader *object;
  SEL v119;
  id v120;
  id v121;
  id v122;
  id v123;
  id v124;
  id v125;
  id v126;
  _QWORD *v127;
  os_unfair_lock_s *v128;
  NSObject *v129;
  os_log_type_t v130;
  uint8_t *v131;
  uint8_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  _TtC14softposreaderd12RemoteReader *v143;
  _TtC14softposreaderd12RemoteReader *v144;
  os_unfair_lock_s *v145;
  os_unfair_lock_s *v146;
  uint64_t *v147;
  SEL v148;
  id v149;
  id v150;
  id v151;
  id v152;
  id v153;
  id v154;
  os_unfair_lock_s *v155;
  _TtC14softposreaderd12RemoteReader **v156;
  os_unfair_lock_s *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  NSObject *v162;
  os_signpost_type_t v163;
  void (*v164)(char *, os_unfair_lock_s *, uint64_t);
  uint8_t *v165;
  os_signpost_id_t v166;
  uint8_t *v167;
  void (*v168)(char *, char *, uint64_t);
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  _TtC14softposreaderd12RemoteReader *v173;
  SEL v174;
  id v175;
  id v176;
  id v177;
  id v178;
  id v179;
  id v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  id v186;
  uint64_t v187;
  void *v188;
  uint64_t v189;
  unint64_t v190;
  _TtC14softposreaderd12RemoteReader *v191;
  _TtC14softposreaderd12RemoteReader *v192;
  uint64_t *v193;
  _QWORD *v194;
  NSObject *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  char v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  char *v207;
  _TtC14softposreaderd12RemoteReader *v208;
  char *v209;
  uint64_t v210;
  NSObject *v211;
  os_log_type_t v212;
  uint8_t *v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  NSObject *v217;
  os_log_type_t v218;
  uint8_t *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  void *v226;
  void *v227;
  void *v228;
  os_unfair_lock_s *v229;
  uint64_t *v230;
  SEL v231;
  id v232;
  id v233;
  id v234;
  id v235;
  id v236;
  id v237;
  os_unfair_lock_s *v238;
  _TtC14softposreaderd12RemoteReader **v239;
  os_unfair_lock_s *v240;
  uint64_t v241;
  NSObject *v242;
  char *v243;
  uint64_t v244;
  os_signpost_type_t v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  const char *v250;
  uint64_t *v251;
  uint64_t v252;
  NSObject *v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  char *v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  int v263;
  char *v264;
  char *v265;
  uint64_t v266;
  NSObject *v267;
  os_log_type_t v268;
  uint8_t *v269;
  uint64_t v270;
  char *v271;
  uint64_t v272;
  uint64_t *v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  _TtC14softposreaderd12RemoteReader *v277;
  uint64_t v278;
  SEL v279;
  id v280;
  id v281;
  id v282;
  id v283;
  id v284;
  id v285;
  char *v286;
  uint64_t v287;
  const char *v288;
  char *v289;
  char *v290;
  uint8_t *v291;
  os_signpost_id_t v292;
  void (*v293)(char *, uint64_t);
  uint64_t v294;
  uint64_t v295;
  const void *v296;
  int EnumCaseMultiPayload;
  uint64_t v298;
  char *v299;
  uint64_t *v300;
  uint64_t v301;
  uint64_t v302;
  char *v303;
  uint64_t v304;
  uint64_t v305;
  os_signpost_type_t v306;
  uint64_t v307;
  char *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  char *v312;
  uint64_t v313;
  uint8_t *v314;
  os_signpost_id_t v315;
  void (*v316)(char *, uint64_t);
  char *v317;
  uint64_t v318;
  _TtC14softposreaderd12RemoteReader *v319;
  _TtC14softposreaderd12RemoteReader *v320;
  _TtC14softposreaderd12RemoteReader *v321;
  SEL v322;
  id v323;
  id v324;
  id v325;
  id v326;
  id v327;
  id v328;
  SEL v329;
  id v330;
  id v331;
  id v332;
  id v333;
  id v334;
  id v335;
  const char *v336;
  void *v337;
  void *v338;
  void *v339;
  void *v340;
  void *v341;
  void *v342;
  uint64_t v343;
  const char *v344;
  void *v345;
  void *v346;
  void *v347;
  void *v348;
  void *v349;
  void *v350;
  uint64_t v351;
  os_unfair_lock_s *v352;
  uint64_t *v353;
  uint64_t *v354;
  uint64_t v355;
  NSObject *v356;
  os_log_type_t v357;
  _BOOL4 v358;
  char *v359;
  uint8_t *v360;
  os_unfair_lock_s *v361;
  os_unfair_lock_s *v362;
  uint64_t v363;
  os_unfair_lock_s *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  void *v370;
  void *v371;
  void *v372;
  void *v373;
  _TtC14softposreaderd12RemoteReader *v374;
  os_unfair_lock_s *v375;
  uint64_t v376;
  os_unfair_lock_s *v377;
  SEL v378;
  id v379;
  id v380;
  id v381;
  id v382;
  id v383;
  id v384;
  os_unfair_lock_s *v385;
  _TtC14softposreaderd12RemoteReader **v386;
  os_unfair_lock_s *v387;
  uint64_t v388;
  NSObject *v389;
  char *v390;
  uint64_t v391;
  os_signpost_type_t v392;
  uint64_t v393;
  char *v394;
  uint64_t v395;
  uint64_t v396;
  const char *v397;
  NSObject *v398;
  os_log_type_t v399;
  uint8_t *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  void *v406;
  void *v407;
  void *v408;
  void *v409;
  os_unfair_lock_s *v410;
  uint64_t *v411;
  SEL v412;
  id v413;
  id v414;
  id v415;
  id v416;
  id v417;
  id v418;
  os_unfair_lock_s *v419;
  _TtC14softposreaderd12RemoteReader **v420;
  os_unfair_lock_s *v421;
  uint64_t v422;
  uint64_t v423;
  os_signpost_type_t v424;
  uint64_t v425;
  char *v426;
  uint64_t v427;
  uint64_t v428;
  const char *v429;
  void (*v430)(char *, char *, uint64_t);
  const char *v431;
  char *v432;
  uint64_t v433;
  uint8_t *v434;
  os_signpost_id_t v435;
  os_signpost_type_t v436;
  uint64_t v437;
  _QWORD *v438;
  int64_t v439;
  _TtC14softposreaderd12RemoteReader *v440;
  uint64_t *v441;
  _TtC14softposreaderd12RemoteReader *v442;
  uint64_t v443;
  _TtC14softposreaderd12RemoteReader *v444;
  uint64_t v445;
  uint64_t *v446;
  uint64_t v447;
  unint64_t v448;
  uint64_t v449;
  unint64_t v450;
  Swift::String v451;
  SEL v452;
  id v453;
  id v454;
  id v455;
  id v456;
  id v457;
  id v458;
  SEL v459;
  id v460;
  id v461;
  id v462;
  id v463;
  id v464;
  id v465;
  const char *v466;
  void *v467;
  void *v468;
  void *v469;
  void *v470;
  void *v471;
  void *v472;
  unint64_t v473;
  unint64_t v474;
  char *v475;
  uint64_t *v476;
  uint64_t *v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  char *v481;
  uint64_t v482;
  uint64_t v483;
  os_unfair_lock_s *v484;
  uint64_t *v485;
  uint64_t *v486;
  uint64_t v487;
  uint64_t v488;
  char v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  void *v496;
  void *v497;
  void *v498;
  void *v499;
  _TtC14softposreaderd12RemoteReader *v500;
  os_unfair_lock_s *v501;
  uint64_t v502;
  uint64_t *v503;
  SEL v504;
  id v505;
  id v506;
  id v507;
  id v508;
  id v509;
  id v510;
  os_unfair_lock_s *v511;
  _TtC14softposreaderd12RemoteReader **v512;
  os_unfair_lock_s *v513;
  uint64_t v514;
  NSObject *v515;
  char *v516;
  uint64_t v517;
  os_signpost_type_t v518;
  char v519;
  char *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  int v524;
  uint64_t v525;
  char *v526;
  char *v527;
  uint64_t v528;
  uint8_t *v529;
  os_signpost_id_t v530;
  void (*v531)(char *, uint64_t);
  char v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  _QWORD *v537;
  _TtC14softposreaderd12RemoteReader *v538;
  char *v539;
  void (*v540)(char *, uint64_t);
  char *v541;
  _QWORD *v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  const char *v548;
  void *v549;
  void *v550;
  void *v551;
  void *v552;
  void *v553;
  void *v554;
  char v555;
  char v556;
  _QWORD *v557;
  char *v558;
  uint64_t v559;
  NSObject *v560;
  os_log_type_t v561;
  char *v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t *v566;
  uint64_t v567;
  uint64_t v568;
  unint64_t v569;
  _TtC14softposreaderd12RemoteReader *v570;
  SEL v571;
  id v572;
  id v573;
  id v574;
  id v575;
  id v576;
  id v577;
  uint64_t v578;
  char v579;
  char *v580;
  uint64_t *v581;
  uint64_t v582;
  NSObject *v583;
  char *v584;
  uint64_t v585;
  os_signpost_type_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  const char *v590;
  const char *v591;
  char *v592;
  uint8_t *v593;
  os_signpost_id_t v594;
  void (*v595)(char *, char *, uint64_t);
  char *v596;
  uint64_t v597;
  NSObject *v598;
  os_log_type_t v599;
  uint8_t *v600;
  int v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  _TtC14softposreaderd12RemoteReader *v605;
  SEL v606;
  id v607;
  id v608;
  id v609;
  id v610;
  id v611;
  id v612;
  SEL v613;
  id v614;
  id v615;
  id v616;
  id v617;
  id v618;
  id v619;
  SEL v620;
  id v621;
  id v622;
  id v623;
  id v624;
  id v625;
  id v626;
  uint64_t v627;
  NSObject *v628;
  char *v629;
  uint64_t v630;
  uint64_t v631;
  os_signpost_type_t v632;
  uint64_t v633;
  char *v634;
  uint64_t v635;
  uint64_t v636;
  const char *v637;
  NSObject *v638;
  os_log_type_t v639;
  uint8_t *v640;
  os_unfair_lock_s *v641;
  os_unfair_lock_s *v642;
  uint64_t v643;
  os_unfair_lock_s *v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  void *v652;
  void *v653;
  void *v654;
  void *v655;
  _TtC14softposreaderd12RemoteReader *v656;
  os_unfair_lock_s *v657;
  uint64_t v658;
  os_unfair_lock_s *v659;
  SEL v660;
  id v661;
  id v662;
  id v663;
  id v664;
  id v665;
  id v666;
  os_unfair_lock_s *v667;
  _TtC14softposreaderd12RemoteReader **v668;
  os_unfair_lock_s *v669;
  uint64_t v670;
  NSObject *v671;
  char *v672;
  uint64_t v673;
  os_signpost_type_t v674;
  char v675;
  char *v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  const char *v681;
  uint64_t v682;
  unint64_t v683;
  SEL v684;
  id v685;
  id v686;
  id v687;
  id v688;
  id v689;
  id v690;
  uint64_t v691;
  NSObject *v692;
  char *v693;
  uint64_t v694;
  uint64_t v695;
  char *v696;
  uint64_t v697;
  char *v698;
  uint64_t v699;
  char *v700;
  uint64_t v701;
  const char *v702;
  char *v703;
  uint8_t *v704;
  os_signpost_id_t v705;
  os_log_t v706;
  uint8_t *v707;
  uint64_t v708;
  char *v709;
  void (*v710)(char *, uint64_t);
  char *v711;
  uint64_t v712;
  NSObject *v713;
  os_log_type_t v714;
  uint8_t *v715;
  uint64_t v716;
  uint64_t *v717;
  uint64_t v718;
  uint64_t v719;
  unint64_t v720;
  _TtC14softposreaderd12RemoteReader *v721;
  uint64_t *v722;
  SEL v723;
  id v724;
  id v725;
  id v726;
  id v727;
  id v728;
  id v729;
  os_unfair_lock_s *v730;
  char *v731;
  uint64_t v732;
  uint8_t *v733;
  os_signpost_id_t v734;
  void (*v735)(char *, uint64_t);
  SEL v736;
  id v737;
  id v738;
  id v739;
  id v740;
  id v741;
  id v742;
  SEL v743;
  id v744;
  id v745;
  id v746;
  id v747;
  id v748;
  id v749;
  char *v750;
  char *v751;
  uint8_t *v752;
  os_signpost_id_t v753;
  char *v754;
  uint8_t *v755;
  os_signpost_id_t v756;
  void (*v757)(char *, uint64_t);
  char *v758;
  char *v759;
  uint8_t *v760;
  os_signpost_id_t v761;
  void (*v762)(char *, uint64_t);
  uint64_t v763;
  char v764;
  const char *v765;
  void *v766;
  void *v767;
  void *v768;
  void *v769;
  void *v770;
  void *v771;
  SEL v772;
  id v773;
  id v774;
  id v775;
  id v776;
  id v777;
  id v778;
  char *v779;
  uint64_t v780;
  _TtC14softposreaderd12RemoteReader *v781;
  _QWORD *v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  const char *v789;
  void *v790;
  void *v791;
  void *v792;
  void *v793;
  void *v794;
  void *v795;
  char v796;
  char v797;
  char *v798;
  uint64_t v799;
  NSObject *v800;
  os_log_type_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t *v805;
  uint64_t v806;
  uint64_t v807;
  unint64_t v808;
  _TtC14softposreaderd12RemoteReader *v809;
  SEL v810;
  id v811;
  id v812;
  id v813;
  id v814;
  id v815;
  id v816;
  uint64_t *v817;
  uint64_t *v818;
  _QWORD *v819;
  uint64_t v820;
  _TtC14softposreaderd12RemoteReader *v821;
  uint64_t *v822;
  _TtC14softposreaderd12RemoteReader *v823;
  SEL v824;
  id v825;
  id v826;
  id v827;
  id v828;
  id v829;
  id v830;
  _TtC14softposreaderd12RemoteReader *v831;
  SEL v832;
  id v833;
  id v834;
  id v835;
  id v836;
  id v837;
  id v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  SEL v845;
  id v846;
  id v847;
  id v848;
  id v849;
  id v850;
  id v851;
  os_unfair_lock_s *v852;
  _QWORD *v853;
  NSObject *v854;
  os_log_type_t v855;
  _BOOL4 v856;
  _TtC14softposreaderd12RemoteReader *v857;
  uint8_t *v858;
  uint64_t *v859;
  uint64_t v860;
  uint64_t *v861;
  uint64_t v862;
  NSObject *v863;
  uint64_t v864;
  uint64_t v865;
  os_signpost_type_t v866;
  uint64_t v867;
  char *v868;
  uint64_t v869;
  uint64_t v870;
  const char *v871;
  NSObject *v872;
  os_log_type_t v873;
  uint8_t *v874;
  uint64_t *v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  SEL v882;
  id v883;
  id v884;
  id v885;
  id v886;
  id v887;
  id v888;
  os_unfair_lock_s *v889;
  os_unfair_lock_s *v890;
  os_unfair_lock_s *v891;
  uint64_t v892;
  os_unfair_lock_s *v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  void *v899;
  void *v900;
  void *v901;
  void *v902;
  _TtC14softposreaderd12RemoteReader *v903;
  os_unfair_lock_s *v904;
  uint64_t v905;
  os_unfair_lock_s *v906;
  SEL v907;
  id v908;
  id v909;
  id v910;
  id v911;
  id v912;
  id v913;
  os_unfair_lock_s *v914;
  _TtC14softposreaderd12RemoteReader **v915;
  os_unfair_lock_s *v916;
  uint64_t v917;
  uint64_t v918;
  NSObject *v919;
  uint64_t v920;
  os_signpost_type_t v921;
  uint64_t v922;
  char *v923;
  const char *v924;
  char *v925;
  char *v926;
  uint64_t v927;
  uint8_t *v928;
  os_signpost_id_t v929;
  void (*v930)(char *, uint64_t);
  os_unfair_lock_s *v931;
  uint64_t *v932;
  char *v933;
  char *v934;
  uint64_t v935;
  uint8_t *v936;
  os_signpost_id_t v937;
  void (*v938)(char *, uint64_t);
  uint64_t v939;
  _QWORD *v940;
  char *v941;
  char *v942;
  char *v943;
  char *v944;
  char *v945;
  char *v946;
  char *v947;
  char *v948;
  char *v949;
  char *v950;
  char *v951;
  char *v952;
  char *v953;
  uint64_t v954;
  char *v955;
  char *v956;
  char *v957;
  char *v958;
  char *v959;
  char *v960;
  char *v961;
  char *v962;
  char *v963;
  char *v964;
  char *v965;
  char *v966;
  char *v967;
  char *v968;
  char *v969;
  char *v970;
  char *v971;
  char *v972;
  char *v973;
  char *v974;
  char *v975;
  char *v976;
  uint64_t v977;
  char *v978;
  char *v979;
  char *v980;
  char *v981;
  char *v982;
  char *v983;
  char *v984;
  void (*v985)(char *, char *, uint64_t);
  char *v986;
  char *v987;
  char *v988;
  _QWORD *v989;
  uint64_t v990;
  char *v991;
  _TtC14softposreaderd12RemoteReader *v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  char *v996;
  uint64_t v997;
  int v998;
  uint64_t v999;
  os_unfair_lock_s *v1000;
  uint64_t (*v1001)(char *, _TtC14softposreaderd12RemoteReader *, _TtC14softposreaderd12RemoteReader *);
  uint64_t v1002;
  _TtC14softposreaderd12RemoteReader *v1003;
  os_unfair_lock_s *v1004;
  _QWORD *v1005;
  char *v1006;
  os_log_t v1007;
  uint64_t v1008;
  uint64_t *v1009;
  uint64_t *v1010;
  uint64_t v1011;
  uint64_t v1012[37];
  _BYTE v1013[272];
  _QWORD v1014[37];
  _QWORD v1015[34];
  uint64_t v1016[37];
  uint64_t v1017;
  _OWORD v1018[18];
  _QWORD v1019[37];
  _QWORD v1020[34];
  _BYTE v1021[296];
  _BYTE v1022[296];
  _BYTE v1023[272];
  _BYTE v1024[304];

  v5 = v4;
  LODWORD(v1003) = a4;
  v998 = a3;
  v1001 = a1;
  v7 = type metadata accessor for OSSignpostError(0);
  v993 = *(_QWORD *)(v7 - 8);
  v994 = v7;
  v8 = __chkstk_darwin(v7);
  v949 = (char *)&v939 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v967 = (char *)&v939 - v11;
  v12 = __chkstk_darwin(v10);
  v964 = (char *)&v939 - v13;
  v14 = __chkstk_darwin(v12);
  v950 = (char *)&v939 - v15;
  v16 = __chkstk_darwin(v14);
  v963 = (char *)&v939 - v17;
  v18 = __chkstk_darwin(v16);
  v978 = (char *)&v939 - v19;
  v20 = __chkstk_darwin(v18);
  v959 = (char *)&v939 - v21;
  v22 = __chkstk_darwin(v20);
  v943 = (char *)&v939 - v23;
  v24 = __chkstk_darwin(v22);
  v946 = (char *)&v939 - v25;
  v26 = __chkstk_darwin(v24);
  v953 = (char *)&v939 - v27;
  v28 = __chkstk_darwin(v26);
  v986 = (char *)&v939 - v29;
  v30 = __chkstk_darwin(v28);
  v961 = (char *)&v939 - v31;
  v32 = __chkstk_darwin(v30);
  v971 = (char *)&v939 - v33;
  v34 = __chkstk_darwin(v32);
  v983 = (char *)&v939 - v35;
  v36 = __chkstk_darwin(v34);
  v975 = (char *)&v939 - v37;
  v38 = __chkstk_darwin(v36);
  v955 = (char *)&v939 - v39;
  v40 = __chkstk_darwin(v38);
  v951 = (char *)&v939 - v41;
  __chkstk_darwin(v40);
  v942 = (char *)&v939 - v42;
  v977 = type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate(0);
  v954 = *(_QWORD *)(v977 - 8);
  v43 = __chkstk_darwin(v977);
  v981 = (char *)&v939 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  v958 = (char *)&v939 - v45;
  v46 = sub_100003A2C((uint64_t *)&unk_1001B36F0);
  v47 = __chkstk_darwin(v46);
  v960 = (char *)&v939 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v47);
  v988 = (char *)&v939 - v49;
  v999 = type metadata accessor for UUID(0);
  v990 = *(_QWORD *)(v999 - 8);
  v50 = __chkstk_darwin(v999);
  v976 = (char *)&v939 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __chkstk_darwin(v50);
  v962 = (char *)&v939 - v53;
  v54 = __chkstk_darwin(v52);
  v948 = (char *)&v939 - v55;
  v56 = __chkstk_darwin(v54);
  v941 = (char *)&v939 - v57;
  v58 = __chkstk_darwin(v56);
  v982 = (char *)&v939 - v59;
  __chkstk_darwin(v58);
  v992 = (_TtC14softposreaderd12RemoteReader *)((char *)&v939 - v60);
  v995 = type metadata accessor for Configurator.StoreAndForwardState(0);
  v61 = __chkstk_darwin(v995);
  v979 = (char *)&v939 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v61);
  v984 = (char *)&v939 - v63;
  v64 = type metadata accessor for OSSignpostID(0);
  v1005 = *(_QWORD **)(v64 - 8);
  v65 = __chkstk_darwin(v64);
  v972 = (char *)&v939 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = __chkstk_darwin(v65);
  v69 = (char *)&v939 - v68;
  v70 = __chkstk_darwin(v67);
  v987 = (char *)&v939 - v71;
  v72 = __chkstk_darwin(v70);
  v970 = (char *)&v939 - v73;
  v74 = __chkstk_darwin(v72);
  v945 = (char *)&v939 - v75;
  v76 = __chkstk_darwin(v74);
  v947 = (char *)&v939 - v77;
  v78 = __chkstk_darwin(v76);
  v957 = (char *)&v939 - v79;
  v80 = __chkstk_darwin(v78);
  v82 = (char *)&v939 - v81;
  v83 = __chkstk_darwin(v80);
  v952 = (char *)&v939 - v84;
  v85 = __chkstk_darwin(v83);
  v87 = (char *)&v939 - v86;
  v88 = __chkstk_darwin(v85);
  v965 = (char *)&v939 - v89;
  v90 = __chkstk_darwin(v88);
  v966 = (char *)&v939 - v91;
  v92 = __chkstk_darwin(v90);
  v991 = (char *)&v939 - v93;
  v94 = __chkstk_darwin(v92);
  v980 = (char *)&v939 - v95;
  v96 = __chkstk_darwin(v94);
  v968 = (char *)&v939 - v97;
  v98 = __chkstk_darwin(v96);
  v956 = (char *)&v939 - v99;
  v100 = __chkstk_darwin(v98);
  v944 = (char *)&v939 - v101;
  v102 = __chkstk_darwin(v100);
  v996 = (char *)&v939 - v103;
  v104 = __chkstk_darwin(v102);
  v106 = (char *)&v939 - v105;
  __chkstk_darwin(v104);
  v1004 = (os_unfair_lock_s *)((char *)&v939 - v107);
  if (qword_1001ACFC0 != -1)
    swift_once(&qword_1001ACFC0, sub_100060E50);
  v973 = v69;
  v974 = v87;
  v108 = type metadata accessor for Logger(0);
  v109 = sub_100003A14(v108, (uint64_t)qword_1001B05E0);
  v110 = swift_bridgeObjectRetain_n(a2, 2);
  v1007 = v109;
  v111 = Logger.logObject.getter(v110);
  v112 = static os_log_type_t.default.getter();
  v113 = os_log_type_enabled(v111, v112);
  v1008 = v64;
  v1009 = v5;
  v1006 = v106;
  v969 = v82;
  v1000 = a2;
  if (v113)
  {
    v114 = swift_slowAlloc(34, -1);
    v115 = swift_slowAlloc(64, -1);
    v1016[0] = v115;
    *(_DWORD *)v114 = 136315906;
    v1014[0] = sub_1000056EC(0xD000000000000032, 0x800000010016C890, v1016);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1014, &v1014[1], v114 + 4, v114 + 12);
    *(_WORD *)(v114 + 12) = 2080;
    if (a2)
    {
      v117 = String.redactedToken()();
      countAndFlagsBits = v117._countAndFlagsBits;
      object = (_TtC14softposreaderd12RemoteReader *)v117._object;
    }
    else
    {
      object = (_TtC14softposreaderd12RemoteReader *)0xE300000000000000;
      countAndFlagsBits = 7104878;
    }
    v1014[0] = sub_1000056EC(countAndFlagsBits, (unint64_t)object, v1016);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1014, &v1014[1], v114 + 14, v114 + 22);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease(object, v119, v120, v121, v122, v123, v124, v125);
    *(_WORD *)(v114 + 22) = 1024;
    LODWORD(v1014[0]) = v998 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1014, (char *)v1014 + 4, v114 + 24, v114 + 28);
    *(_WORD *)(v114 + 28) = 1024;
    LODWORD(v1014[0]) = v1003 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1014, (char *)v1014 + 4, v114 + 30, v114 + 34);
    _os_log_impl((void *)&_mh_execute_header, v111, v112, "%s -> token: %s, force: %{BOOL}d, enableStoreAndForward: %{BOOL}d", (uint8_t *)v114, 0x22u);
    swift_arrayDestroy(v115, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v115, -1, -1);
    swift_slowDealloc(v114, -1, -1);

    v64 = v1008;
    v106 = v1006;
    v5 = v1009;
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  swift_beginAccess(v5 + 41, &v1017, 0, 0);
  sub_100005EF8(v5 + 41, v5[44]);
  v126 = sub_1001457B8();
  v127 = v1005;
  v128 = v1004;
  if ((v126 & 1) == 0)
  {
    v129 = Logger.logObject.getter(v126);
    v130 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v129, v130))
    {
      v131 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v131 = 0;
      _os_log_impl((void *)&_mh_execute_header, v129, v130, "Incorrect JCOP version", v131, 2u);
      v132 = v131;
      v64 = v1008;
      swift_slowDealloc(v132, -1, -1);
    }

    if (*((_BYTE *)v5 + 280) == 1)
    {
      v133 = v5[34];
      v134 = sub_100003A2C(&qword_1001ADA30);
      v135 = swift_allocObject(v134, 72, 7);
      *(_OWORD *)(v135 + 16) = xmmword_10015A5F0;
      *(_BYTE *)(v135 + 32) = 19;
      *(_QWORD *)(v135 + 64) = &type metadata for Int;
      *(_QWORD *)(v135 + 40) = 5;
      v143 = (_TtC14softposreaderd12RemoteReader *)sub_1000E862C(v135, v136, v137, v138, v139, v140, v141, v142);
      v144 = (_TtC14softposreaderd12RemoteReader *)&v939;
      v145 = *(os_unfair_lock_s **)(v133 + 56);
      v146 = v145 + 4;
      v128 = v145 + 8;
      os_unfair_lock_lock(v145 + 8);
      v147 = v1010;
      sub_10005F610((uint64_t)v146, (uint64_t)v143);
      if (!v147)
      {
        os_unfair_lock_unlock(v128);
        swift_bridgeObjectRelease(v143, v148, v149, v150, v151, v152, v153, v154);
        v155 = *(os_unfair_lock_s **)(v133 + 56);
        v156 = (_TtC14softposreaderd12RemoteReader **)&v155[4];
        v157 = v155 + 8;
        os_unfair_lock_lock(v155 + 8);
        sub_100060D14(v156, v133, 3);
        os_unfair_lock_unlock(v157);
        v158 = sub_1000247AC(2033, 0, 0, 0);
        swift_willThrow(v158);
        return;
      }
      goto LABEL_221;
    }
  }
  v989 = v5 + 41;
  if (qword_1001ACFC8 != -1)
    swift_once(&qword_1001ACFC8, sub_100060EE0);
  v159 = type metadata accessor for OSSignposter(0);
  v160 = sub_100003A14(v159, (uint64_t)qword_1001B05F8);
  v161 = static OSSignpostID.exclusive.getter();
  v997 = v160;
  v162 = OSSignposter.logHandle.getter(v161);
  v163 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v164 = (void (*)(char *, os_unfair_lock_s *, uint64_t))v127[2];
    v164(v106, v128, v64);
    v165 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v165 = 0;
    v166 = OSSignpostID.rawValue.getter(v165);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v162, v163, v166, "config-prepare-totalTime", "begin prepare", v165, 2u);
    v167 = v165;
    v64 = v1008;
    swift_slowDealloc(v167, -1, -1);

    ((void (*)(char *, uint64_t))v127[1])(v106, v64);
    v168 = (void (*)(char *, char *, uint64_t))v164;
  }
  else
  {

    v168 = (void (*)(char *, char *, uint64_t))v127[2];
  }
  v985 = v168;
  v168(v106, (char *)v128, v64);
  v169 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v169, *(unsigned int *)(v169 + 48), *(unsigned __int16 *)(v169 + 52));
  v1002 = OSSignpostIntervalState.init(id:isOpen:)(v106, 1);
  v1005 = (_QWORD *)v127[1];
  ((void (*)(os_unfair_lock_s *, uint64_t))v1005)(v128, v64);
  v170 = v1009 + 29;
  v171 = v1009[32];
  v144 = (_TtC14softposreaderd12RemoteReader *)v1009[33];
  sub_100005EF8(v1009 + 29, v171);
  if (qword_1001AD120 != -1)
    swift_once(&qword_1001AD120, sub_1000BE8AC);
  v172 = byte_1001B4D90;
  v173 = (_TtC14softposreaderd12RemoteReader *)sub_1000046DC((uint64_t)&_swiftEmptyArrayStorage);
  (*(void (**)(uint64_t, uint64_t, _TtC14softposreaderd12RemoteReader *, uint64_t, _TtC14softposreaderd12RemoteReader *))v144->instance)(3, v172, v173, v171, v144);
  swift_bridgeObjectRelease(v173, v174, v175, v176, v177, v178, v179, v180);
  v146 = v1000;
  if (!v1000)
  {
    v207 = v1006;
    v208 = (_TtC14softposreaderd12RemoteReader *)v999;
LABEL_32:
    v211 = Logger.logObject.getter(v181);
    v212 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v211, v212))
    {
      v213 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v213 = 0;
      _os_log_impl((void *)&_mh_execute_header, v211, v212, "kernel token nil or has no saftpid", v213, 2u);
      swift_slowDealloc(v213, -1, -1);
    }

    v215 = v995;
    if ((v1003 & 1) != 0)
    {
      v216 = v207;
      v217 = Logger.logObject.getter(v214);
      v218 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v217, v218))
      {
        v219 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v219 = 0;
        _os_log_impl((void *)&_mh_execute_header, v217, v218, "this kernel token doesn't support StoreAndForward", v219, 2u);
        swift_slowDealloc(v219, -1, -1);
      }

      v133 = v1009[34];
      v220 = sub_100003A2C(&qword_1001ADA30);
      v221 = swift_allocObject(v220, 72, 7);
      *(_OWORD *)(v221 + 16) = xmmword_10015A5F0;
      *(_BYTE *)(v221 + 32) = 19;
      *(_QWORD *)(v221 + 64) = &type metadata for Int;
      *(_QWORD *)(v221 + 40) = 13;
      v143 = (_TtC14softposreaderd12RemoteReader *)sub_1000E862C(v221, v222, v223, v224, v225, v226, v227, v228);
      v144 = (_TtC14softposreaderd12RemoteReader *)&v939;
      v229 = *(os_unfair_lock_s **)(v133 + 56);
      v146 = v229 + 4;
      v128 = v229 + 8;
      os_unfair_lock_lock(v229 + 8);
      v230 = v1010;
      sub_10005F610((uint64_t)v146, (uint64_t)v143);
      v197 = v1002;
      if (!v230)
      {
        os_unfair_lock_unlock(v128);
        swift_bridgeObjectRelease(v143, v231, v232, v233, v234, v235, v236, v237);
        v238 = *(os_unfair_lock_s **)(v133 + 56);
        v239 = (_TtC14softposreaderd12RemoteReader **)&v238[4];
        v240 = v238 + 8;
        os_unfair_lock_lock(v238 + 8);
        sub_100060D14(v239, v133, 3);
        os_unfair_lock_unlock(v240);
        sub_100005EF8((_QWORD *)(v133 + 16), *(_QWORD *)(v133 + 40));
        sub_10003964C((uint64_t)&off_100198C30);
        v1010 = (uint64_t *)sub_1000247AC(2035, 0xD00000000000001CLL, (void *)0x800000010016C7A0, 0);
        v241 = swift_willThrow(v1010);
        v242 = OSSignposter.logHandle.getter(v241);
        v243 = v991;
        v244 = OSSignpostIntervalState.signpostID.getter();
        v245 = static os_signpost_type_t.end.getter(v244);
        if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
        {
          v246 = swift_retain();
          v247 = v983;
          checkForErrorAndConsumeState(state:)(v246);
          swift_release(v197);
          v249 = v993;
          v248 = v994;
          if ((*(unsigned int (**)(char *, uint64_t))(v993 + 88))(v247, v994) == enum case for OSSignpostError.doubleEnd(_:))
          {
            v250 = "[Error] Interval already ended";
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v249 + 8))(v247, v248);
            v250 = "end prepare";
          }
          v312 = v991;
          v313 = v1008;
          v985(v216, v991, v1008);
          v314 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v314 = 0;
          v315 = OSSignpostID.rawValue.getter(v314);
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v242, v245, v315, "config-prepare-totalTime", v250, v314, 2u);
          swift_slowDealloc(v314, -1, -1);

          v316 = (void (*)(char *, uint64_t))v1005;
          ((void (*)(char *, uint64_t))v1005)(v312, v313);
          v317 = v216;
          v318 = v313;
          goto LABEL_171;
        }

        v264 = v243;
        goto LABEL_97;
      }
LABEL_221:
      os_unfair_lock_unlock(v128);
      __break(1u);
      os_unfair_lock_unlock((os_unfair_lock_t)v143);
      __break(1u);
      goto LABEL_222;
    }
    v251 = v1010;
    sub_100065728(0);
    v1010 = v251;
    if (v251)
    {
      v253 = OSSignposter.logHandle.getter(v252);
      v254 = v987;
      v255 = v1002;
      v256 = OSSignpostIntervalState.signpostID.getter();
      v257 = static os_signpost_type_t.end.getter(v256);
      if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
      {

        ((void (*)(char *, uint64_t))v1005)(v254, v1008);
        v311 = v255;
LABEL_172:
        swift_release(v311);
        return;
      }
      v258 = v255;
      v259 = v207;
      swift_retain();
      v260 = v978;
      checkForErrorAndConsumeState(state:)(v258);
      swift_release(v258);
      v262 = v993;
      v261 = v994;
      v263 = (*(uint64_t (**)(char *, uint64_t))(v993 + 88))(v260, v994);
      LODWORD(v1009) = v257;
      v430 = v985;
      if (v263 == enum case for OSSignpostError.doubleEnd(_:))
      {
        v431 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v262 + 8))(v260, v261);
        v431 = "end prepare";
      }
      v432 = v987;
      v433 = v1008;
      v430(v259, v987, v1008);
      v434 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v434 = 0;
      v435 = OSSignpostID.rawValue.getter(v434);
      v436 = v1009;
      goto LABEL_169;
    }
    v294 = (uint64_t)v984;
    swift_storeEnumTagMultiPayload(v984, v215, 2);
    v295 = v1008;
    goto LABEL_52;
  }
  v940 = v170;
  v133 = v1009[44];
  v182 = sub_100005EF8(v989, v133);
  v1004 = (os_unfair_lock_s *)&v939;
  v183 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v182);
  v143 = (_TtC14softposreaderd12RemoteReader *)((char *)&v939 - ((v184 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_TtC14softposreaderd12RemoteReader *))(v183 + 16))(v143);
  v185 = (void *)*((_QWORD *)v143->super.isa + 2);
  swift_bridgeObjectRetain();
  v186 = objc_msgSend(v185, "serialNumber");
  v187 = v1002;
  if (!v186)
  {
    __break(1u);
    goto LABEL_221;
  }
  v188 = v186;
  v189 = (uint64_t)v146;
  v190 = static String._unconditionallyBridgeFromObjectiveC(_:)(v186);
  v192 = v191;

  (*(void (**)(_TtC14softposreaderd12RemoteReader *, uint64_t))(v183 + 8))(v143, v133);
  v193 = v1010;
  v194 = sub_1001250B4((uint64_t)v1001, v189, v190, v192, v1018);
  if (v193)
  {
    v195 = OSSignposter.logHandle.getter(v194);
    v196 = v996;
    v197 = v187;
    v198 = OSSignpostIntervalState.signpostID.getter();
    v199 = static os_signpost_type_t.end.getter(v198);
    v200 = OS_os_log.signpostsEnabled.getter();
    v201 = v1008;
    if ((v200 & 1) != 0)
    {
      v202 = swift_retain();
      v203 = v986;
      checkForErrorAndConsumeState(state:)(v202);
      swift_release(v197);
      v205 = v993;
      v204 = v994;
      v206 = (*(uint64_t (**)(char *, uint64_t))(v993 + 88))(v203, v994);
      LODWORD(v1010) = v199;
      if (v206 == enum case for OSSignpostError.doubleEnd(_:))
      {
        v288 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v205 + 8))(v203, v204);
        v288 = "end prepare";
      }
      v289 = v1006;
      v290 = v996;
      v985(v1006, v996, v201);
      v291 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v291 = 0;
      v292 = OSSignpostID.rawValue.getter(v291);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v195, (os_signpost_type_t)v1010, v292, "config-prepare-totalTime", v288, v291, 2u);
      swift_slowDealloc(v291, -1, -1);

      v293 = (void (*)(char *, uint64_t))v1005;
      ((void (*)(char *, uint64_t))v1005)(v290, v201);
      v293(v289, v201);
    }
    else
    {

      ((void (*)(char *, uint64_t))v1005)(v196, v201);
    }
LABEL_219:
    swift_release(v197);
    return;
  }
  v1010 = 0;
  v209 = v988;
  sub_100124B10(v988);
  sub_100054898(v1018);
  v210 = v990;
  v208 = (_TtC14softposreaderd12RemoteReader *)v999;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v990 + 48))(v209, 1, v999) == 1)
  {
    v181 = sub_10005218C((uint64_t)v209, (uint64_t *)&unk_1001B36F0);
    v207 = v1006;
    goto LABEL_32;
  }
  v144 = v992;
  (*(void (**)(_TtC14softposreaderd12RemoteReader *, char *, _TtC14softposreaderd12RemoteReader *))(v210 + 32))(v992, v209, v208);
  v265 = v982;
  v1001 = *(uint64_t (**)(char *, _TtC14softposreaderd12RemoteReader *, _TtC14softposreaderd12RemoteReader *))(v210 + 16);
  v266 = v1001(v982, v144, v208);
  v267 = Logger.logObject.getter(v266);
  v268 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v267, v268))
  {
    v269 = (uint8_t *)swift_slowAlloc(12, -1);
    v270 = swift_slowAlloc(32, -1);
    v1016[0] = v270;
    v271 = v265;
    *(_DWORD *)v269 = 136315138;
    v272 = UUID.uuidString.getter(v270);
    v273 = v1010;
    v275 = sub_100081EE4(v272, v274);
    v277 = (_TtC14softposreaderd12RemoteReader *)v276;
    v1010 = v273;
    v1014[0] = sub_1000056EC(v275, v276, v1016);
    v278 = v999;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1014, &v1014[1], v269 + 4, v269 + 12);
    swift_bridgeObjectRelease(v277, v279, v280, v281, v282, v283, v284, v285);
    v286 = v271;
    v208 = (_TtC14softposreaderd12RemoteReader *)v278;
    v1004 = *(os_unfair_lock_s **)(v990 + 8);
    ((void (*)(char *, uint64_t))v1004)(v286, v278);
    _os_log_impl((void *)&_mh_execute_header, v267, v268, "kernel token contains SAF tpid: %s", v269, 0xCu);
    swift_arrayDestroy(v270, 1, (char *)&type metadata for Any + 8);
    v287 = v270;
    v144 = v992;
    swift_slowDealloc(v287, -1, -1);
    swift_slowDealloc(v269, -1, -1);
  }
  else
  {
    v1004 = *(os_unfair_lock_s **)(v210 + 8);
    ((void (*)(char *, _TtC14softposreaderd12RemoteReader *))v1004)(v265, v208);
  }

  sub_1000B11D4((uint64_t)v144, v1016);
  v319 = (_TtC14softposreaderd12RemoteReader *)v1016[1];
  v320 = (_TtC14softposreaderd12RemoteReader *)v1016[3];
  v321 = (_TtC14softposreaderd12RemoteReader *)v1016[5];
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v1016[4], v322, v323, v324, v325, v326, v327, v328);
  swift_bridgeObjectRelease(v321, v329, v330, v331, v332, v333, v334, v335);
  if (!v319)
  {
    swift_bridgeObjectRelease(v320, v336, v337, v338, v339, v340, v341, v342);
    goto LABEL_73;
  }
  swift_bridgeObjectRelease(v319, v336, v337, v338, v339, v340, v341, v342);
  if (!v320)
  {
LABEL_73:
    v398 = Logger.logObject.getter(v343);
    v399 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v398, v399))
    {
      v400 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v400 = 0;
      _os_log_impl((void *)&_mh_execute_header, v398, v399, "Did not find SAF profile in cache", v400, 2u);
      swift_slowDealloc(v400, -1, -1);
    }

    v133 = v1009[34];
    v401 = sub_100003A2C(&qword_1001ADA30);
    v402 = swift_allocObject(v401, 72, 7);
    *(_OWORD *)(v402 + 16) = xmmword_10015A5F0;
    *(_BYTE *)(v402 + 32) = 19;
    *(_QWORD *)(v402 + 64) = &type metadata for Int;
    *(_QWORD *)(v402 + 40) = 11;
    v143 = (_TtC14softposreaderd12RemoteReader *)sub_1000E862C(v402, v403, v404, v405, v406, v407, v408, v409);
    v144 = (_TtC14softposreaderd12RemoteReader *)&v939;
    v410 = *(os_unfair_lock_s **)(v133 + 56);
    v146 = v410 + 4;
    v128 = v410 + 8;
    os_unfair_lock_lock(v410 + 8);
    v411 = v1010;
    sub_10005F610((uint64_t)v146, (uint64_t)v143);
    if (v411)
      goto LABEL_221;
    os_unfair_lock_unlock(v128);
    swift_bridgeObjectRelease(v143, v412, v413, v414, v415, v416, v417, v418);
    v419 = *(os_unfair_lock_s **)(v133 + 56);
    v420 = (_TtC14softposreaderd12RemoteReader **)&v419[4];
    v421 = v419 + 8;
    os_unfair_lock_lock(v419 + 8);
    sub_100060D14(v420, v133, 3);
    os_unfair_lock_unlock(v421);
    sub_100005EF8((_QWORD *)(v133 + 16), *(_QWORD *)(v133 + 40));
    sub_10003964C((uint64_t)&off_100198C08);
    v1010 = (uint64_t *)sub_1000247AC(2035, 0xD000000000000029, (void *)0x800000010016C7C0, 0);
    swift_willThrow(v1010);
    v422 = ((uint64_t (*)(_TtC14softposreaderd12RemoteReader *, _TtC14softposreaderd12RemoteReader *))v1004)(v992, v208);
    v389 = OSSignposter.logHandle.getter(v422);
    v390 = v980;
    v197 = v1002;
    v423 = OSSignpostIntervalState.signpostID.getter();
    v424 = static os_signpost_type_t.end.getter(v423);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v425 = swift_retain();
      v426 = v975;
      checkForErrorAndConsumeState(state:)(v425);
      swift_release(v197);
      v428 = v993;
      v427 = v994;
      if ((*(unsigned int (**)(char *, uint64_t))(v993 + 88))(v426, v994) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v429 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v428 + 8))(v426, v427);
        v429 = "end prepare";
      }
      v526 = v1006;
      v527 = v390;
      v528 = v1008;
      v985(v1006, v527, v1008);
      v529 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v529 = 0;
      v530 = OSSignpostID.rawValue.getter(v529);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v389, v424, v530, "config-prepare-totalTime", v429, v529, 2u);
      swift_slowDealloc(v529, -1, -1);

      v531 = (void (*)(char *, uint64_t))v1005;
      ((void (*)(char *, uint64_t))v1005)(v980, v528);
      v531(v526, v528);
      goto LABEL_106;
    }
LABEL_96:

    v264 = v390;
LABEL_97:
    v487 = v1008;
LABEL_98:
    ((void (*)(char *, uint64_t))v1005)(v264, v487);
LABEL_106:
    v311 = v197;
    goto LABEL_172;
  }
  swift_bridgeObjectRelease(v320, v344, v345, v346, v347, v348, v349, v350);
  v351 = v1009[34];
  v1000 = (os_unfair_lock_s *)v351;
  if ((v1003 & 1) != 0)
  {
    LOBYTE(v1016[0]) = 6;
    v352 = *(os_unfair_lock_s **)(v351 + 56);
    v146 = v352 + 4;
    v133 = (uint64_t)&v352[8];
    os_unfair_lock_lock(v352 + 8);
    v353 = v1010;
    sub_1000935A0((uint64_t)v146, (unsigned __int8 *)v1016);
    if (v353)
    {
LABEL_222:
      os_unfair_lock_unlock((os_unfair_lock_t)v133);
      __break(1u);
      os_unfair_lock_unlock(v146);
      __break(1u);
      goto LABEL_223;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)v133);
    v354 = v1009;
    sub_100005EF8(v1009 + 19, v1009[22]);
    v355 = sub_1000F61AC();
    v197 = v1002;
    if ((v355 & 1) != 0)
    {
      v356 = Logger.logObject.getter(v355);
      v357 = static os_log_type_t.error.getter();
      v358 = os_log_type_enabled(v356, v357);
      v359 = v1006;
      if (v358)
      {
        v360 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v360 = 0;
        _os_log_impl((void *)&_mh_execute_header, v356, v357, "Device rebooted since last online, cannot enter SAF mode", v360, 2u);
        swift_slowDealloc(v360, -1, -1);
      }

      LOBYTE(v1016[0]) = 6;
      v361 = v1000;
      v362 = *(os_unfair_lock_s **)&v1000[14]._os_unfair_lock_opaque;
      v363 = (uint64_t)&v362[4];
      v364 = v362 + 8;
      os_unfair_lock_lock(v362 + 8);
      sub_100093588(v363, (unsigned __int8 *)v1016);
      os_unfair_lock_unlock(v364);
      v365 = sub_100003A2C(&qword_1001ADA30);
      v366 = swift_allocObject(v365, 72, 7);
      *(_OWORD *)(v366 + 16) = xmmword_10015A5F0;
      *(_BYTE *)(v366 + 32) = 19;
      *(_QWORD *)(v366 + 64) = &type metadata for Int;
      *(_QWORD *)(v366 + 40) = 12;
      v374 = (_TtC14softposreaderd12RemoteReader *)sub_1000E862C(v366, v367, v368, v369, v370, v371, v372, v373);
      v375 = *(os_unfair_lock_s **)&v361[14]._os_unfair_lock_opaque;
      v376 = (uint64_t)&v375[4];
      v377 = v375 + 8;
      os_unfair_lock_lock(v375 + 8);
      sub_10005F610(v376, (uint64_t)v374);
      os_unfair_lock_unlock(v377);
      swift_bridgeObjectRelease(v374, v378, v379, v380, v381, v382, v383, v384);
      v385 = *(os_unfair_lock_s **)&v361[14]._os_unfair_lock_opaque;
      v386 = (_TtC14softposreaderd12RemoteReader **)&v385[4];
      v387 = v385 + 8;
      os_unfair_lock_lock(v385 + 8);
      sub_100060D14(v386, (uint64_t)v361, 3);
      os_unfair_lock_unlock(v387);
      sub_100005EF8(&v361[4]._os_unfair_lock_opaque, *(_QWORD *)&v361[10]._os_unfair_lock_opaque);
      sub_10003964C((uint64_t)&off_100198BB8);
      v1010 = (uint64_t *)sub_1000247AC(2035, 0xD000000000000021, (void *)0x800000010016C860, 0);
      swift_willThrow(v1010);
      v388 = ((uint64_t (*)(_TtC14softposreaderd12RemoteReader *, uint64_t))v1004)(v992, v999);
      v389 = OSSignposter.logHandle.getter(v388);
      v390 = v968;
      v391 = OSSignpostIntervalState.signpostID.getter();
      v392 = static os_signpost_type_t.end.getter(v391);
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v393 = swift_retain();
        v394 = v955;
        checkForErrorAndConsumeState(state:)(v393);
        swift_release(v197);
        v396 = v993;
        v395 = v994;
        if ((*(unsigned int (**)(char *, uint64_t))(v993 + 88))(v394, v994) == enum case for OSSignpostError.doubleEnd(_:))
        {
          v397 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v396 + 8))(v394, v395);
          v397 = "end prepare";
        }
        v731 = v390;
        v732 = v1008;
        v985(v359, v731, v1008);
        v733 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v733 = 0;
        v734 = OSSignpostID.rawValue.getter(v733);
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v389, v392, v734, "config-prepare-totalTime", v397, v733, 2u);
        swift_slowDealloc(v733, -1, -1);

        v735 = (void (*)(char *, uint64_t))v1005;
        ((void (*)(char *, uint64_t))v1005)(v968, v732);
        v735(v359, v732);
        goto LABEL_106;
      }
      goto LABEL_96;
    }
    sub_100005EF8(v354 + 46, v354[49]);
    v533 = sub_100134B68((uint64_t)v144);
    if (!v534)
    {
      v638 = Logger.logObject.getter(v533);
      v639 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v638, v639))
      {
        v640 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v640 = 0;
        _os_log_impl((void *)&_mh_execute_header, v638, v639, "no persisted attestation token, need previous prepare call.", v640, 2u);
        swift_slowDealloc(v640, -1, -1);
      }

      LOBYTE(v1016[0]) = 6;
      v641 = v1000;
      v642 = *(os_unfair_lock_s **)&v1000[14]._os_unfair_lock_opaque;
      v643 = (uint64_t)&v642[4];
      v644 = v642 + 8;
      os_unfair_lock_lock(v642 + 8);
      sub_100093588(v643, (unsigned __int8 *)v1016);
      v645 = v1008;
      v646 = v1002;
      os_unfair_lock_unlock(v644);
      v647 = sub_100003A2C(&qword_1001ADA30);
      v648 = swift_allocObject(v647, 72, 7);
      *(_OWORD *)(v648 + 16) = xmmword_10015A5F0;
      *(_BYTE *)(v648 + 32) = 19;
      *(_QWORD *)(v648 + 64) = &type metadata for Int;
      *(_QWORD *)(v648 + 40) = 9;
      v656 = (_TtC14softposreaderd12RemoteReader *)sub_1000E862C(v648, v649, v650, v651, v652, v653, v654, v655);
      v657 = *(os_unfair_lock_s **)&v641[14]._os_unfair_lock_opaque;
      v658 = (uint64_t)&v657[4];
      v659 = v657 + 8;
      os_unfair_lock_lock(v657 + 8);
      sub_10005F610(v658, (uint64_t)v656);
      os_unfair_lock_unlock(v659);
      swift_bridgeObjectRelease(v656, v660, v661, v662, v663, v664, v665, v666);
      v667 = *(os_unfair_lock_s **)&v641[14]._os_unfair_lock_opaque;
      v668 = (_TtC14softposreaderd12RemoteReader **)&v667[4];
      v669 = v667 + 8;
      os_unfair_lock_lock(v667 + 8);
      sub_100060D14(v668, (uint64_t)v641, 3);
      os_unfair_lock_unlock(v669);
      sub_100005EF8(&v641[4]._os_unfair_lock_opaque, *(_QWORD *)&v641[10]._os_unfair_lock_opaque);
      sub_10003964C((uint64_t)&off_100198B90);
      v1010 = (uint64_t *)sub_1000247AC(2035, 0xD00000000000001FLL, (void *)0x800000010016C7F0, 0);
      swift_willThrow(v1010);
      v670 = ((uint64_t (*)(_TtC14softposreaderd12RemoteReader *, uint64_t))v1004)(v992, v999);
      v671 = OSSignposter.logHandle.getter(v670);
      v672 = v956;
      v673 = OSSignpostIntervalState.signpostID.getter();
      v674 = static os_signpost_type_t.end.getter(v673);
      v675 = OS_os_log.signpostsEnabled.getter();
      v676 = v951;
      if ((v675 & 1) != 0)
      {
        v677 = swift_retain();
        checkForErrorAndConsumeState(state:)(v677);
        swift_release(v646);
        v679 = v993;
        v678 = v994;
        v680 = v645;
        if ((*(unsigned int (**)(char *, uint64_t))(v993 + 88))(v676, v994) == enum case for OSSignpostError.doubleEnd(_:))
        {
          v681 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v679 + 8))(v676, v678);
          v681 = "end prepare";
        }
        v758 = v1006;
        v759 = v956;
        v985(v1006, v956, v680);
        v760 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v760 = 0;
        v761 = OSSignpostID.rawValue.getter(v760);
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v671, v674, v761, "config-prepare-totalTime", v681, v760, 2u);
        swift_slowDealloc(v760, -1, -1);

        v762 = (void (*)(char *, uint64_t))v1005;
        ((void (*)(char *, uint64_t))v1005)(v759, v680);
        v762(v758, v680);
      }
      else
      {

        ((void (*)(char *, uint64_t))v1005)(v672, v645);
      }
      v311 = v646;
      goto LABEL_172;
    }
    v535 = v533;
    v536 = v534;
    v1003 = (_TtC14softposreaderd12RemoteReader *)(v354 + 46);
    v537 = v354 + 14;
    sub_100005EF8(v354 + 14, v354[17]);
    sub_1000BB930(v1019);
    v538 = (_TtC14softposreaderd12RemoteReader *)v1019[34];
    memcpy(v1016, v1019, 0x122uLL);
    sub_100070F4C((uint64_t)v1019);
    swift_bridgeObjectRetain_n(v538, 2);
    sub_100070F4C((uint64_t)v1019);
    sub_1000D2C04(v535, v536, v1020);
    memcpy(v1013, v1020, sizeof(v1013));
    v1010 = (uint64_t *)v1019[35];
    LOBYTE(v536) = v1019[36];
    LODWORD(v996) = BYTE1(v1019[36]);
    sub_100024374((uint64_t)v1019, (uint64_t)v1023, &qword_1001AE028);
    memcpy(v1015, v1013, sizeof(v1015));
    BitString.init(data:unusedBits:)(v1015);
    sub_10005BAFC(v1020);
    sub_1000240F8((uint64_t)v1023);
    sub_100024374((uint64_t)v1015, (uint64_t)v1016, &qword_1001AE028);
    sub_100005EF8(v354 + 14, v354[17]);
    sub_100024374((uint64_t)v1015, (uint64_t)v1014, &qword_1001AE028);
    v1014[34] = v538;
    v1014[35] = v1010;
    LOBYTE(v1014[36]) = v536;
    BYTE1(v1014[36]) = (_BYTE)v996;
    memcpy(v1024, v1014, 0x122uLL);
    sub_100070F4C((uint64_t)v1014);
    swift_bridgeObjectRelease(v538, v736, v737, v738, v739, v740, v741, v742);
    sub_1000BB134(v1024);
    sub_1000710DC((uint64_t)v1014);
    sub_100065728(1);
    v1010 = 0;
    sub_100005EF8(v354 + 19, v354[22]);
    v763 = (uint64_t)v960;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v990 + 56))(v960, 1, 1, v999);
    v764 = sub_1000F52D4(v763, 0.0);
    sub_10005218C(v763, (uint64_t *)&unk_1001B36F0);
    if ((v764 & 1) == 0)
    {
      swift_bridgeObjectRelease(v538, v765, v766, v767, v768, v769, v770, v771);
      v853 = sub_100054898(v1020);
      v854 = Logger.logObject.getter(v853);
      v855 = static os_log_type_t.error.getter();
      v856 = os_log_type_enabled(v854, v855);
      v857 = v1003;
      if (v856)
      {
        v858 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v858 = 0;
        _os_log_impl((void *)&_mh_execute_header, v854, v855, "failed attestation check, delete persisted attestation token, revert attestation state.", v858, 2u);
        swift_slowDealloc(v858, -1, -1);
      }

      v859 = v1009;
      sub_100005EF8(v857, v1009[49]);
      v860 = (uint64_t)v992;
      sub_100134938((uint64_t)v992, 0, 0);
      sub_100005EF8(v537, v859[17]);
      sub_1000BB134(v1019);
      v861 = v1010;
      sub_100065728(0);
      if (!v861)
      {
        LOBYTE(v1012[0]) = 6;
        v890 = v1000;
        v891 = *(os_unfair_lock_s **)&v1000[14]._os_unfair_lock_opaque;
        v892 = (uint64_t)&v891[4];
        v893 = v891 + 8;
        os_unfair_lock_lock(v891 + 8);
        sub_100093588(v892, (unsigned __int8 *)v1012);
        v197 = v1002;
        os_unfair_lock_unlock(v893);
        v894 = sub_100003A2C(&qword_1001ADA30);
        v895 = swift_allocObject(v894, 72, 7);
        *(_OWORD *)(v895 + 16) = xmmword_10015A5F0;
        *(_BYTE *)(v895 + 32) = 19;
        *(_QWORD *)(v895 + 64) = &type metadata for Int;
        *(_QWORD *)(v895 + 40) = 8;
        v903 = (_TtC14softposreaderd12RemoteReader *)sub_1000E862C(v895, v896, v897, v898, v899, v900, v901, v902);
        v904 = *(os_unfair_lock_s **)&v890[14]._os_unfair_lock_opaque;
        v905 = (uint64_t)&v904[4];
        v906 = v904 + 8;
        os_unfair_lock_lock(v904 + 8);
        sub_10005F610(v905, (uint64_t)v903);
        os_unfair_lock_unlock(v906);
        swift_bridgeObjectRelease(v903, v907, v908, v909, v910, v911, v912, v913);
        v914 = *(os_unfair_lock_s **)&v890[14]._os_unfair_lock_opaque;
        v915 = (_TtC14softposreaderd12RemoteReader **)&v914[4];
        v916 = v914 + 8;
        os_unfair_lock_lock(v914 + 8);
        sub_100060D14(v915, (uint64_t)v890, 3);
        os_unfair_lock_unlock(v916);
        sub_100005EF8(&v890[4]._os_unfair_lock_opaque, *(_QWORD *)&v890[10]._os_unfair_lock_opaque);
        sub_10003964C((uint64_t)&off_100198B68);
        v917 = sub_1000247AC(2035, 0xD000000000000013, (void *)0x800000010016C840, 0);
        swift_willThrow(v917);
        sub_1000710DC((uint64_t)v1019);
        ((void (*)(_TtC14softposreaderd12RemoteReader *, uint64_t))v1004)(v992, v999);
        memcpy(v1012, v1016, 0x122uLL);
        v918 = sub_1000710DC((uint64_t)v1012);
        v919 = OSSignposter.logHandle.getter(v918);
        v920 = OSSignpostIntervalState.signpostID.getter();
        v921 = static os_signpost_type_t.end.getter(v920);
        if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
        {
          v1010 = &v939;
          v922 = swift_retain();
          v923 = v942;
          checkForErrorAndConsumeState(state:)(v922);
          swift_release(v197);
          if ((*(unsigned int (**)(char *, uint64_t))(v993 + 88))(v923, v994) == enum case for OSSignpostError.doubleEnd(_:))
          {
            v924 = "[Error] Interval already ended";
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v993 + 8))(v942, v994);
            v924 = "end prepare";
          }
          v933 = v1006;
          v934 = v944;
          v935 = v1008;
          v985(v1006, v944, v1008);
          v936 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v936 = 0;
          v937 = OSSignpostID.rawValue.getter(v936);
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v919, v921, v937, "config-prepare-totalTime", v924, v936, 2u);
          swift_slowDealloc(v936, -1, -1);

          v938 = (void (*)(char *, uint64_t))v1005;
          ((void (*)(char *, uint64_t))v1005)(v934, v935);
          v197 = v1002;
          v938(v933, v1008);
        }
        else
        {

          ((void (*)(char *, uint64_t))v1005)(v944, v1008);
        }
        goto LABEL_219;
      }
      ((void (*)(uint64_t, uint64_t))v1004)(v860, v999);
      sub_1000710DC((uint64_t)v1019);
      memcpy(v1012, v1016, 0x122uLL);
      v862 = sub_1000710DC((uint64_t)v1012);
      v863 = OSSignposter.logHandle.getter(v862);
      v864 = v1002;
      v865 = OSSignpostIntervalState.signpostID.getter();
      v866 = static os_signpost_type_t.end.getter(v865);
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v867 = swift_retain();
        v868 = v943;
        checkForErrorAndConsumeState(state:)(v867);
        swift_release(v864);
        v870 = v993;
        v869 = v994;
        if ((*(unsigned int (**)(char *, uint64_t))(v993 + 88))(v868, v994) == enum case for OSSignpostError.doubleEnd(_:))
        {
          v871 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v870 + 8))(v868, v869);
          v871 = "end prepare";
        }
        v925 = v1006;
        v926 = v945;
        v927 = v1008;
        v985(v1006, v945, v1008);
        v928 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v928 = 0;
        v929 = OSSignpostID.rawValue.getter(v928);
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v863, v866, v929, "config-prepare-totalTime", v871, v928, 2u);
        swift_slowDealloc(v928, -1, -1);

        v930 = (void (*)(char *, uint64_t))v1005;
        ((void (*)(char *, uint64_t))v1005)(v926, v927);
        v864 = v1002;
        v930(v925, v1008);
      }
      else
      {

        ((void (*)(char *, uint64_t))v1005)(v945, v1008);
      }
      swift_release(v864);
      return;
    }
    sub_100070F4C((uint64_t)v1014);
    swift_bridgeObjectRelease(v538, v772, v773, v774, v775, v776, v777, v778);
    sub_100054898(v1020);
    v779 = v984;
    memcpy(v984, v1024, 0x122uLL);
    swift_storeEnumTagMultiPayload(v779, v995, 0);
    v780 = v354[49];
    v781 = v1003;
    v782 = sub_100005EF8(v1003, v780);
    v783 = *(_QWORD *)(*v782 + 72);
    v784 = *(_QWORD *)(v783 + 16);
    v785 = (uint64_t)v992;
    if (v784)
    {
      v786 = v783 + ((*(unsigned __int8 *)(v954 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v954 + 80));
      v787 = *(_QWORD *)(v954 + 72);
      swift_bridgeObjectRetain();
      v788 = (uint64_t)v958;
      while (1)
      {
        v796 = static UUID.== infix(_:_:)(v786, v785);
        sub_100070ECC(v786, v788, type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate);
        if ((v796 & 1) != 0)
        {
          v797 = *(_BYTE *)(v788 + *(int *)(v977 + 20));
          sub_100070F10(v788, type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate);
          if ((v797 & 1) != 0)
          {
            swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v783, v789, v790, v791, v792, v793, v794, v795);
            v798 = v941;
            v144 = (_TtC14softposreaderd12RemoteReader *)v999;
            v799 = v1001(v941, v992, (_TtC14softposreaderd12RemoteReader *)v999);
            v800 = Logger.logObject.getter(v799);
            v801 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v800, v801))
            {
              v802 = swift_slowAlloc(12, -1);
              v803 = swift_slowAlloc(32, -1);
              v1012[0] = v803;
              *(_DWORD *)v802 = 136315138;
              v1003 = (_TtC14softposreaderd12RemoteReader *)(v802 + 4);
              v804 = UUID.uuidString.getter(v803);
              v805 = v1010;
              v807 = sub_100081EE4(v804, v806);
              v809 = (_TtC14softposreaderd12RemoteReader *)v808;
              v1010 = v805;
              v1011 = sub_1000056EC(v807, v808, v1012);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v1011, v1012, v1003, v802 + 12);
              swift_bridgeObjectRelease(v809, v810, v811, v812, v813, v814, v815, v816);
              ((void (*)(char *, _TtC14softposreaderd12RemoteReader *))v1004)(v798, v144);
              _os_log_impl((void *)&_mh_execute_header, v800, v801, "The saftpid already isInSAFMode: %s", (uint8_t *)v802, 0xCu);
              swift_arrayDestroy(v803, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v803, -1, -1);
              swift_slowDealloc(v802, -1, -1);
            }
            else
            {
              ((void (*)(char *, _TtC14softposreaderd12RemoteReader *))v1004)(v798, v144);
            }

            v207 = v1006;
            v208 = v144;
            v889 = v1000;
            goto LABEL_215;
          }
        }
        else
        {
          sub_100070F10(v788, type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate);
        }
        v786 += v787;
        --v784;
        v785 = (uint64_t)v992;
        if (!v784)
        {
          swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v783, v789, v790, v791, v792, v793, v794, v795);
          v781 = v1003;
          break;
        }
      }
    }
    v872 = Logger.logObject.getter(v782);
    v873 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v872, v873))
    {
      v874 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v874 = 0;
      _os_log_impl((void *)&_mh_execute_header, v872, v873, "enter SAF mode...", v874, 2u);
      v781 = v1003;
      swift_slowDealloc(v874, -1, -1);
    }

    v875 = v1009;
    sub_100005EF8(v781, v1009[49]);
    sub_1001346F0(v785);
    v876 = v875[32];
    v877 = v875[33];
    sub_100005EF8(v940, v876);
    v878 = sub_100003A2C(&qword_1001ADA18);
    v879 = swift_allocObject(v878, 88, 7);
    *(_OWORD *)(v879 + 16) = xmmword_10015A5F0;
    *(_QWORD *)(v879 + 32) = 0x64697074666173;
    *(_QWORD *)(v879 + 40) = 0xE700000000000000;
    v880 = UUID.uuidString.getter(v879);
    *(_QWORD *)(v879 + 72) = &type metadata for String;
    *(_QWORD *)(v879 + 80) = &protocol witness table for String;
    *(_QWORD *)(v879 + 48) = v880;
    *(_QWORD *)(v879 + 56) = v881;
    v144 = (_TtC14softposreaderd12RemoteReader *)sub_1000E84EC(v879);
    sub_100115684(35, (uint64_t)v144, v876, v877);
    swift_bridgeObjectRelease(v144, v882, v883, v884, v885, v886, v887, v888);
    v889 = v1000;
    sub_100005EF8(&v1000[4]._os_unfair_lock_opaque, *(_QWORD *)&v1000[10]._os_unfair_lock_opaque);
    sub_10003964C((uint64_t)&off_100198B40);
    v207 = v1006;
    v208 = (_TtC14softposreaderd12RemoteReader *)v999;
LABEL_215:
    LOBYTE(v1011) = 6;
    v931 = *(os_unfair_lock_s **)&v889[14]._os_unfair_lock_opaque;
    v146 = v931 + 4;
    v133 = (uint64_t)&v931[8];
    os_unfair_lock_lock(v931 + 8);
    v932 = v1010;
    sub_100093588((uint64_t)v146, (unsigned __int8 *)&v1011);
    v1010 = v932;
    if (v932)
      goto LABEL_222;
    os_unfair_lock_unlock((os_unfair_lock_t)v133);
    sub_1000710DC((uint64_t)v1019);
    ((void (*)(_TtC14softposreaderd12RemoteReader *, _TtC14softposreaderd12RemoteReader *))v1004)(v992, v208);
    memcpy(v1012, v1016, 0x122uLL);
    sub_1000710DC((uint64_t)v1012);
  }
  else
  {
    LOBYTE(v1016[0]) = 7;
    v484 = *(os_unfair_lock_s **)(v351 + 56);
    v146 = v484 + 4;
    v133 = (uint64_t)&v484[8];
    os_unfair_lock_lock(v484 + 8);
    v485 = v1010;
    sub_1000935A0((uint64_t)v146, (unsigned __int8 *)v1016);
    if (v485)
      goto LABEL_222;
    os_unfair_lock_unlock((os_unfair_lock_t)v133);
    v486 = v1009;
    sub_100065728(0);
    v1010 = 0;
    v541 = v984;
    v1001(v984, v144, v208);
    swift_storeEnumTagMultiPayload(v541, v995, 1);
    v542 = v486 + 46;
    v543 = *(_QWORD *)(*sub_100005EF8(v486 + 46, v486[49]) + 72);
    v544 = *(_QWORD *)(v543 + 16);
    if (v544)
    {
      v545 = v543 + ((*(unsigned __int8 *)(v954 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v954 + 80));
      v546 = *(_QWORD *)(v954 + 72);
      swift_bridgeObjectRetain();
      v547 = (uint64_t)v981;
      while (1)
      {
        v555 = static UUID.== infix(_:_:)(v545, v144);
        sub_100070ECC(v545, v547, type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate);
        if ((v555 & 1) != 0)
        {
          v556 = *(_BYTE *)(v547 + *(int *)(v977 + 20));
          sub_100070F10(v547, type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate);
          if ((v556 & 1) != 0)
          {
            v557 = v542;
            swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v543, v548, v549, v550, v551, v552, v553, v554);
            v558 = v948;
            v208 = (_TtC14softposreaderd12RemoteReader *)v999;
            v559 = v1001(v948, v992, (_TtC14softposreaderd12RemoteReader *)v999);
            v560 = Logger.logObject.getter(v559);
            v561 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v560, v561))
            {
              v562 = v558;
              v563 = swift_slowAlloc(12, -1);
              v564 = swift_slowAlloc(32, -1);
              v1016[0] = v564;
              *(_DWORD *)v563 = 136315138;
              v1003 = (_TtC14softposreaderd12RemoteReader *)(v563 + 4);
              v565 = UUID.uuidString.getter(v564);
              v566 = v1010;
              v568 = sub_100081EE4(v565, v567);
              v570 = (_TtC14softposreaderd12RemoteReader *)v569;
              v1010 = v566;
              v1014[0] = sub_1000056EC(v568, v569, v1016);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v1014, &v1014[1], v1003, v563 + 12);
              swift_bridgeObjectRelease(v570, v571, v572, v573, v574, v575, v576, v577);
              ((void (*)(char *, uint64_t))v1004)(v562, v999);
              _os_log_impl((void *)&_mh_execute_header, v560, v561, "saftpid exit SAF mode: %s", (uint8_t *)v563, 0xCu);
              swift_arrayDestroy(v564, 1, (char *)&type metadata for Any + 8);
              v208 = (_TtC14softposreaderd12RemoteReader *)v999;
              swift_slowDealloc(v564, -1, -1);
              swift_slowDealloc(v563, -1, -1);
            }
            else
            {
              ((void (*)(char *, _TtC14softposreaderd12RemoteReader *))v1004)(v558, v208);
            }

            v817 = v1010;
            v818 = v1009;
            v819 = sub_100005EF8(v557, v1009[49]);
            v820 = *v819;
            v821 = *(_TtC14softposreaderd12RemoteReader **)(*v819 + 72);
            __chkstk_darwin(v819);
            *(&v939 - 2) = (uint64_t)v992;
            swift_bridgeObjectRetain();
            v822 = v817;
            v823 = sub_1001337D4((void (*)(uint64_t))sub_1000711A4, (uint64_t)(&v939 - 4), (uint64_t)v821);
            v722 = v822;
            swift_bridgeObjectRelease(v821, v824, v825, v826, v827, v828, v829, v830);
            v831 = *(_TtC14softposreaderd12RemoteReader **)(v820 + 72);
            *(_QWORD *)(v820 + 72) = v823;
            swift_bridgeObjectRelease(v831, v832, v833, v834, v835, v836, v837, v838);
            sub_100134320();
            v839 = v818[32];
            v840 = v818[33];
            sub_100005EF8(v940, v839);
            v841 = sub_100003A2C(&qword_1001ADA18);
            v842 = swift_allocObject(v841, 88, 7);
            *(_OWORD *)(v842 + 16) = xmmword_10015A5F0;
            *(_QWORD *)(v842 + 32) = 0x64697074666173;
            *(_QWORD *)(v842 + 40) = 0xE700000000000000;
            v843 = UUID.uuidString.getter(v842);
            *(_QWORD *)(v842 + 72) = &type metadata for String;
            *(_QWORD *)(v842 + 80) = &protocol witness table for String;
            *(_QWORD *)(v842 + 48) = v843;
            *(_QWORD *)(v842 + 56) = v844;
            v144 = (_TtC14softposreaderd12RemoteReader *)sub_1000E84EC(v842);
            sub_100115684(36, (uint64_t)v144, v839, v840);
            swift_bridgeObjectRelease(v144, v845, v846, v847, v848, v849, v850, v851);
            v730 = v1000;
            sub_100005EF8(&v1000[4]._os_unfair_lock_opaque, *(_QWORD *)&v1000[10]._os_unfair_lock_opaque);
            sub_10003964C((uint64_t)&off_100198BE0);
            v207 = v1006;
            goto LABEL_191;
          }
        }
        else
        {
          sub_100070F10(v547, type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate);
        }
        v545 += v546;
        --v544;
        v144 = v992;
        if (!v544)
        {
          swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v543, v548, v549, v550, v551, v552, v553, v554);
          break;
        }
      }
    }
    v711 = v962;
    v208 = (_TtC14softposreaderd12RemoteReader *)v999;
    v712 = v1001(v962, v144, (_TtC14softposreaderd12RemoteReader *)v999);
    v713 = Logger.logObject.getter(v712);
    v714 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v713, v714))
    {
      v715 = (uint8_t *)swift_slowAlloc(12, -1);
      v144 = (_TtC14softposreaderd12RemoteReader *)swift_slowAlloc(32, -1);
      v1016[0] = (uint64_t)v144;
      *(_DWORD *)v715 = 136315138;
      v716 = UUID.uuidString.getter(v144);
      v717 = v1010;
      v719 = sub_100081EE4(v716, v718);
      v721 = (_TtC14softposreaderd12RemoteReader *)v720;
      v1014[0] = sub_1000056EC(v719, v720, v1016);
      v722 = v717;
      v208 = (_TtC14softposreaderd12RemoteReader *)v999;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1014, &v1014[1], v715 + 4, v715 + 12);
      swift_bridgeObjectRelease(v721, v723, v724, v725, v726, v727, v728, v729);
      ((void (*)(char *, _TtC14softposreaderd12RemoteReader *))v1004)(v962, v208);
      _os_log_impl((void *)&_mh_execute_header, v713, v714, "saftpid was not in SAF mode: %s", v715, 0xCu);
      swift_arrayDestroy(v144, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v144, -1, -1);
      swift_slowDealloc(v715, -1, -1);

      v207 = v1006;
    }
    else
    {
      ((void (*)(char *, _TtC14softposreaderd12RemoteReader *))v1004)(v711, v208);

      v207 = v1006;
      v722 = v1010;
    }
    v730 = v1000;
LABEL_191:
    LOBYTE(v1016[0]) = 7;
    v852 = *(os_unfair_lock_s **)&v730[14]._os_unfair_lock_opaque;
    v146 = v852 + 4;
    v133 = (uint64_t)&v852[8];
    os_unfair_lock_lock(v852 + 8);
    sub_100093588((uint64_t)v146, (unsigned __int8 *)v1016);
    v1010 = v722;
    if (v722)
      goto LABEL_222;
    os_unfair_lock_unlock((os_unfair_lock_t)v133);
    ((void (*)(_TtC14softposreaderd12RemoteReader *, _TtC14softposreaderd12RemoteReader *))v1004)(v992, v208);
  }
  v295 = v1008;
  v294 = (uint64_t)v984;
  v215 = v995;
LABEL_52:
  v296 = v979;
  sub_100070ECC(v294, (uint64_t)v979, type metadata accessor for Configurator.StoreAndForwardState);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v296, v215);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v298 = v990;
      v299 = v976;
      (*(void (**)(char *, const void *, _TtC14softposreaderd12RemoteReader *))(v990 + 32))(v976, v296, v208);
      v300 = v1010;
      sub_100065AF0();
      v301 = v295;
      if (v300)
      {
        v1010 = v300;
        (*(void (**)(char *, _TtC14softposreaderd12RemoteReader *))(v298 + 8))(v299, v208);
        v302 = sub_100070F10(v294, type metadata accessor for Configurator.StoreAndForwardState);
        v253 = OSSignposter.logHandle.getter(v302);
        v303 = v973;
        v304 = v1002;
        v305 = OSSignpostIntervalState.signpostID.getter();
        v306 = static os_signpost_type_t.end.getter(v305);
        if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
        {
          v307 = swift_retain();
          v308 = v963;
          checkForErrorAndConsumeState(state:)(v307);
          swift_release(v304);
          v310 = v993;
          v309 = v994;
          if ((*(unsigned int (**)(char *, uint64_t))(v993 + 88))(v308, v994) == enum case for OSSignpostError.doubleEnd(_:))
          {
            v431 = "[Error] Interval already ended";
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v310 + 8))(v308, v309);
            v431 = "end prepare";
          }
          v595 = v985;
          v259 = v1006;
          v596 = v1006;
          v432 = v973;
LABEL_168:
          v433 = v301;
          v595(v596, v432, v301);
          v434 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v434 = 0;
          v435 = OSSignpostID.rawValue.getter(v434);
          v436 = v306;
LABEL_169:
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v253, v436, v435, "config-prepare-totalTime", v431, v434, 2u);
          swift_slowDealloc(v434, -1, -1);

          v750 = v432;
          goto LABEL_170;
        }
        goto LABEL_108;
      }
      sub_10006EFA4(1, v1021);
      v1010 = 0;
      memcpy(v1016, v1021, 0x122uLL);
      v597 = sub_100070F4C((uint64_t)v1021);
      v598 = Logger.logObject.getter(v597);
      v599 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v598, v599))
      {
        v600 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v600 = 0;
        _os_log_impl((void *)&_mh_execute_header, v598, v599, "persist attestation token for StoreAndForward", v600, 2u);
        swift_slowDealloc(v600, -1, -1);
      }

      sub_100008390((uint64_t)(v1009 + 46), (uint64_t)v1015);
      sub_100005EF8(v1015, v1015[3]);
      sub_100024374((uint64_t)v1016, (uint64_t)v1012, &qword_1001AE028);
      sub_100024374((uint64_t)v1012, (uint64_t)v1014, &qword_1001AE028);
      v601 = sub_1000240E0((uint64_t)v1014);
      v602 = (uint64_t)v976;
      v603 = v1002;
      if (v601 == 1)
      {
        v604 = 0;
        v605 = 0;
      }
      else
      {
        v604 = v1016[32];
        v605 = (_TtC14softposreaderd12RemoteReader *)v1016[33];
        swift_bridgeObjectRetain();
      }
      sub_100134938(v602, v604, (uint64_t)v605);
      swift_bridgeObjectRelease(v605, v743, v744, v745, v746, v747, v748, v749);
      (*(void (**)(uint64_t, _TtC14softposreaderd12RemoteReader *))(v990 + 8))(v602, v208);
      sub_100005D3C(v1015);
      v197 = v603;
    }
    else
    {
      v477 = v1010;
      sub_100066674();
      v1010 = v477;
      if (v477)
      {
        v304 = v1002;
        v259 = v207;
        v301 = v295;
        v478 = sub_100070F10(v294, type metadata accessor for Configurator.StoreAndForwardState);
        v253 = OSSignposter.logHandle.getter(v478);
        v303 = v972;
        v479 = OSSignpostIntervalState.signpostID.getter();
        v306 = static os_signpost_type_t.end.getter(v479);
        if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
        {
          v480 = swift_retain();
          v481 = v964;
          checkForErrorAndConsumeState(state:)(v480);
          swift_release(v304);
          v483 = v993;
          v482 = v994;
          if ((*(unsigned int (**)(char *, uint64_t))(v993 + 88))(v481, v994) == enum case for OSSignpostError.doubleEnd(_:))
          {
            v431 = "[Error] Interval already ended";
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v483 + 8))(v481, v482);
            v431 = "end prepare";
          }
          v595 = v985;
          v596 = v259;
          v432 = v972;
          goto LABEL_168;
        }
LABEL_108:

        ((void (*)(char *, uint64_t))v1005)(v303, v301);
        v311 = v304;
        goto LABEL_172;
      }
      if ((v998 & 1) != 0)
      {
        v532 = 1;
      }
      else
      {
        sub_100005EF8(v1009 + 19, v1009[22]);
        v578 = (uint64_t)v960;
        (*(void (**)(char *, uint64_t, uint64_t, _TtC14softposreaderd12RemoteReader *))(v990 + 56))(v960, 1, 1, v208);
        v579 = sub_1000F52D4(v578, 0.0);
        sub_10005218C(v578, (uint64_t *)&unk_1001B36F0);
        v532 = v579 ^ 1;
      }
      v580 = v967;
      v581 = v1010;
      sub_10006EFA4(v532 & 1, v1022);
      v1010 = v581;
      v197 = v1002;
      if (v581)
      {
        v582 = sub_100070F10((uint64_t)v984, type metadata accessor for Configurator.StoreAndForwardState);
        v583 = OSSignposter.logHandle.getter(v582);
        v584 = v965;
        v585 = OSSignpostIntervalState.signpostID.getter();
        v586 = static os_signpost_type_t.end.getter(v585);
        if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
        {

          v264 = v584;
          v487 = v295;
          goto LABEL_98;
        }
        v587 = swift_retain();
        checkForErrorAndConsumeState(state:)(v587);
        swift_release(v197);
        v589 = v993;
        v588 = v994;
        if ((*(unsigned int (**)(char *, uint64_t))(v993 + 88))(v580, v994) == enum case for OSSignpostError.doubleEnd(_:))
        {
          v590 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v589 + 8))(v580, v588);
          v590 = "end prepare";
        }
        v259 = v1006;
        v433 = v295;
        v751 = v965;
        ((void (*)(char *))v985)(v1006);
        v752 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v752 = 0;
        v753 = OSSignpostID.rawValue.getter(v752);
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v583, v586, v753, "config-prepare-totalTime", v590, v752, 2u);
        swift_slowDealloc(v752, -1, -1);

        v750 = v751;
LABEL_170:
        v316 = (void (*)(char *, uint64_t))v1005;
        ((void (*)(char *, uint64_t))v1005)(v750, v433);
        v317 = v259;
        v318 = v433;
LABEL_171:
        v316(v317, v318);
        v311 = v1002;
        goto LABEL_172;
      }
      memcpy(v1016, v1022, 0x122uLL);
      sub_100070F4C((uint64_t)v1022);
    }
  }
  else
  {
    memcpy(v1016, v296, 0x122uLL);
    v197 = v1002;
  }
  if ((v1016[36] & 0x100) != 0)
  {
    v437 = type metadata accessor for JSONEncoder(0);
    swift_allocObject(v437, *(unsigned int *)(v437 + 48), *(unsigned __int16 *)(v437 + 52));
    v1007 = (os_log_t)JSONEncoder.init()();
    v438 = (_QWORD *)v1016[34];
    if (v1016[34])
    {
      v439 = *(_QWORD *)(v1016[34] + 16);
      v440 = &_swiftEmptyArrayStorage;
      if (v439)
      {
        v1015[0] = &_swiftEmptyArrayStorage;
        swift_bridgeObjectRetain();
        sub_100091C44(0, v439, 0);
        v440 = (_TtC14softposreaderd12RemoteReader *)v1015[0];
        v1004 = (os_unfair_lock_s *)sub_100071160();
        v1003 = (_TtC14softposreaderd12RemoteReader *)v438;
        v441 = v438 + 8;
        while (1)
        {
          v442 = (_TtC14softposreaderd12RemoteReader *)*(v441 - 3);
          v443 = *(v441 - 2);
          v444 = (_TtC14softposreaderd12RemoteReader *)*(v441 - 1);
          v445 = *v441;
          v1012[0] = *(v441 - 4);
          v1012[1] = (uint64_t)v442;
          v1012[2] = v443;
          v1012[3] = (uint64_t)v444;
          v1012[4] = v445;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v446 = v1010;
          v447 = dispatch thunk of JSONEncoder.encode<A>(_:)(v1012, &type metadata for MPOCDeprecationWarning, v1004);
          v1010 = v446;
          if (v446)
            break;
          v449 = v447;
          v450 = v448;
          v451 = Data.base64EncodedString(options:)(0);
          v1009 = (uint64_t *)v451._object;
          sub_100005DE0(v449, v450);
          swift_bridgeObjectRelease(v444, v452, v453, v454, v455, v456, v457, v458);
          swift_bridgeObjectRelease(v442, v459, v460, v461, v462, v463, v464, v465);
          v1015[0] = v440;
          v474 = *(_QWORD *)&v440->instance[8];
          v473 = *(_QWORD *)&v440->instance[16];
          if (v474 >= v473 >> 1)
          {
            sub_100091C44(v473 > 1, v474 + 1, 1);
            v440 = (_TtC14softposreaderd12RemoteReader *)v1015[0];
          }
          v441 += 5;
          *(_QWORD *)&v440->instance[8] = v474 + 1;
          v475 = (char *)v440 + 16 * v474;
          v476 = v1009;
          *((_QWORD *)v475 + 4) = v451._countAndFlagsBits;
          *((_QWORD *)v475 + 5) = v476;
          --v439;
          v295 = v1008;
          if (!v439)
          {
            swift_bridgeObjectRelease(v1003, v466, v467, v468, v469, v470, v471, v472);
            v197 = v1002;
            goto LABEL_147;
          }
        }
        swift_release(v440);
        swift_bridgeObjectRelease(v444, v606, v607, v608, v609, v610, v611, v612);
        swift_bridgeObjectRelease(v442, v613, v614, v615, v616, v617, v618, v619);
        sub_100070F10((uint64_t)v984, type metadata accessor for Configurator.StoreAndForwardState);
        swift_bridgeObjectRelease(v1003, v620, v621, v622, v623, v624, v625, v626);
        swift_release(v1007);
        memcpy(v1014, v1016, 0x122uLL);
        v627 = sub_1000710DC((uint64_t)v1014);
        v628 = OSSignposter.logHandle.getter(v627);
        v629 = v952;
        v630 = v1002;
        v631 = OSSignpostIntervalState.signpostID.getter();
        v632 = static os_signpost_type_t.end.getter(v631);
        if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
        {
          v633 = swift_retain();
          v634 = v949;
          checkForErrorAndConsumeState(state:)(v633);
          swift_release(v630);
          v636 = v993;
          v635 = v994;
          if ((*(unsigned int (**)(char *, uint64_t))(v993 + 88))(v634, v994) == enum case for OSSignpostError.doubleEnd(_:))
          {
            v637 = "[Error] Interval already ended";
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v636 + 8))(v634, v635);
            v637 = "end prepare";
          }
          v754 = v1006;
          v985(v1006, v629, v295);
          v755 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v755 = 0;
          v756 = OSSignpostID.rawValue.getter(v755);
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v628, v632, v756, "config-prepare-totalTime", v637, v755, 2u);
          swift_slowDealloc(v755, -1, -1);

          v757 = (void (*)(char *, uint64_t))v1005;
          ((void (*)(char *, uint64_t))v1005)(v629, v295);
          v757(v754, v295);
        }
        else
        {

          ((void (*)(char *, uint64_t))v1005)(v629, v295);
        }
        v311 = v630;
        goto LABEL_172;
      }
LABEL_147:
      v1014[0] = v440;
      v682 = sub_100003A2C((uint64_t *)&unk_1001AE460);
      v683 = sub_1000248C8();
      BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v682, v683);
      swift_bridgeObjectRelease(v440, v684, v685, v686, v687, v688, v689, v690);
    }
    sub_100024374((uint64_t)v1016, (uint64_t)v1015, &qword_1001AE028);
    sub_100024374((uint64_t)v1015, (uint64_t)v1012, &qword_1001AE028);
    if (sub_1000240E0((uint64_t)v1012) != 1)
      swift_bridgeObjectRetain();
    swift_release(v1007);
    sub_100070F10((uint64_t)v984, type metadata accessor for Configurator.StoreAndForwardState);
    memcpy(v1014, v1016, 0x122uLL);
    v691 = sub_1000710DC((uint64_t)v1014);
    v692 = OSSignposter.logHandle.getter(v691);
    v693 = v969;
    v694 = OSSignpostIntervalState.signpostID.getter();
    LODWORD(v1009) = static os_signpost_type_t.end.getter(v694);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v1007 = v692;
      v695 = swift_retain();
      v696 = v961;
      checkForErrorAndConsumeState(state:)(v695);
      v697 = v197;
      v698 = v696;
      swift_release(v697);
      v699 = v993;
      v700 = v696;
      v701 = v994;
      if ((*(unsigned int (**)(char *, uint64_t))(v993 + 88))(v700, v994) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v702 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v699 + 8))(v698, v701);
        v702 = "end prepare";
      }
      v1004 = (os_unfair_lock_s *)v702;
      v703 = v1006;
      v985(v1006, v693, v1008);
      v704 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v704 = 0;
      v705 = OSSignpostID.rawValue.getter(v704);
      v706 = v1007;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1007, (os_signpost_type_t)v1009, v705, "config-prepare-totalTime", (const char *)v1004, v704, 2u);
      v707 = v704;
      v708 = v1008;
      swift_slowDealloc(v707, -1, -1);

      v709 = v693;
      v710 = (void (*)(char *, uint64_t))v1005;
      ((void (*)(char *, uint64_t))v1005)(v709, v708);
      v197 = v1002;
      v710(v703, v708);
    }
    else
    {

      ((void (*)(char *, uint64_t))v1005)(v693, v1008);
    }
    goto LABEL_219;
  }
  v488 = v1016[35];
  v489 = v1016[36];
  v490 = v1009[34];
  v491 = sub_100003A2C(&qword_1001ADA30);
  v492 = swift_allocObject(v491, 72, 7);
  *(_OWORD *)(v492 + 16) = xmmword_10015A5F0;
  *(_BYTE *)(v492 + 32) = 19;
  *(_QWORD *)(v492 + 64) = &type metadata for Int;
  *(_QWORD *)(v492 + 40) = 7;
  v500 = (_TtC14softposreaderd12RemoteReader *)sub_1000E862C(v492, v493, v494, v495, v496, v497, v498, v499);
  v501 = *(os_unfair_lock_s **)(v490 + 56);
  v502 = (uint64_t)&v501[4];
  v144 = (_TtC14softposreaderd12RemoteReader *)&v501[8];
  os_unfair_lock_lock(v501 + 8);
  v503 = v1010;
  sub_10005F610(v502, (uint64_t)v500);
  if (v503)
  {
LABEL_223:
    os_unfair_lock_unlock((os_unfair_lock_t)v144);
    __break(1u);
    return;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)v144);
  swift_bridgeObjectRelease(v500, v504, v505, v506, v507, v508, v509, v510);
  v511 = *(os_unfair_lock_s **)(v490 + 56);
  v512 = (_TtC14softposreaderd12RemoteReader **)&v511[4];
  v513 = v511 + 8;
  os_unfair_lock_lock(v511 + 8);
  sub_100060D14(v512, v490, 3);
  os_unfair_lock_unlock(v513);
  v1010 = (uint64_t *)sub_1001160B8(v488, v489 & 1);
  swift_willThrow(v1010);
  sub_100070F10((uint64_t)v984, type metadata accessor for Configurator.StoreAndForwardState);
  memcpy(v1014, v1016, 0x122uLL);
  v514 = sub_1000710DC((uint64_t)v1014);
  v515 = OSSignposter.logHandle.getter(v514);
  v516 = v974;
  v517 = OSSignpostIntervalState.signpostID.getter();
  v518 = static os_signpost_type_t.end.getter(v517);
  v519 = OS_os_log.signpostsEnabled.getter();
  v520 = v971;
  if ((v519 & 1) != 0)
  {
    v521 = swift_retain();
    checkForErrorAndConsumeState(state:)(v521);
    swift_release(v197);
    v523 = v993;
    v522 = v994;
    v524 = (*(uint64_t (**)(char *, uint64_t))(v993 + 88))(v520, v994);
    v525 = v1008;
    v1009 = &v939;
    if (v524 == enum case for OSSignpostError.doubleEnd(_:))
    {
      v591 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v523 + 8))(v520, v522);
      v591 = "end prepare";
    }
    v539 = v1006;
    v592 = v974;
    v985(v1006, v974, v525);
    v593 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v593 = 0;
    v594 = OSSignpostID.rawValue.getter(v593);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v515, v518, v594, "config-prepare-totalTime", v591, v593, 2u);
    swift_slowDealloc(v593, -1, -1);

    v540 = (void (*)(char *, uint64_t))v1005;
    ((void (*)(char *, uint64_t))v1005)(v592, v525);
  }
  else
  {

    v539 = v516;
    v525 = v1008;
    v540 = (void (*)(char *, uint64_t))v1005;
  }
  v540(v539, v525);
  swift_release(v197);
}

void sub_100065728(char a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _TtC14softposreaderd12RemoteReader *v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  _TtC14softposreaderd12RemoteReader *v41;
  os_unfair_lock_s *v42;
  uint64_t v43;
  os_unfair_lock_s *v44;
  const char *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  os_unfair_lock_s *v52;
  _TtC14softposreaderd12RemoteReader **v53;
  os_unfair_lock_s *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[72];
  uint64_t v60;

  v3 = v1;
  v5 = a1 & 1;
  v6 = sub_100003A2C(&qword_1001AD9E0);
  __chkstk_darwin(v6);
  v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0
    && (sub_100005EF8(v3 + 24, v3[27]),
        sub_10001E61C((uint64_t)v8),
        v10 = type metadata accessor for Date(0, v9),
        v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v8, 1, v10),
        sub_10005218C((uint64_t)v8, &qword_1001AD9E0),
        v11 == 1))
  {
    v12 = sub_1000247AC(2039, 0xD00000000000003DLL, (void *)0x800000010016C740, 0);
    swift_willThrow(v12);
  }
  else
  {
    sub_100005EF8(v3 + 24, v3[27]);
    sub_100053084(v5);
    if (!v2)
    {
      sub_100005EF8(v3 + 19, v3[22]);
      sub_1000F2880(v5);
      return;
    }
  }
  v13 = 0;
  if (qword_1001ACFC0 != -1)
    swift_once(&qword_1001ACFC0, sub_100060E50);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_100003A14(v14, (uint64_t)qword_1001B05E0);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    v57 = 0;
    v20 = v19;
    *(_DWORD *)v18 = 136315138;
    v60 = v19;
    if (v5)
      v21 = 0x656E696C66666FLL;
    else
      v21 = 0x656E696C6E6FLL;
    if (v5)
      v22 = (_TtC14softposreaderd12RemoteReader *)0xE700000000000000;
    else
      v22 = (_TtC14softposreaderd12RemoteReader *)0xE600000000000000;
    v58 = sub_1000056EC(v21, (unint64_t)v22, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease(v22, v23, v24, v25, v26, v27, v28, v29);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failed to switch MPOCOperationMode to %s", v18, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    v30 = v20;
    v13 = v57;
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v18, -1, -1);
  }

  v31 = v3[34];
  v32 = sub_100003A2C(&qword_1001ADA30);
  inited = swift_initStackObject(v32, v59);
  *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
  *(_BYTE *)(inited + 32) = 19;
  *(_QWORD *)(inited + 64) = &type metadata for Int;
  *(_QWORD *)(inited + 40) = 7;
  v41 = (_TtC14softposreaderd12RemoteReader *)sub_1000E862C(inited, v34, v35, v36, v37, v38, v39, v40);
  v42 = *(os_unfair_lock_s **)(v31 + 56);
  v43 = (uint64_t)&v42[4];
  v44 = v42 + 8;
  os_unfair_lock_lock(v42 + 8);
  sub_10005F610(v43, (uint64_t)v41);
  os_unfair_lock_unlock(v44);
  if (v13)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease(v41, v45, v46, v47, v48, v49, v50, v51);
    v52 = *(os_unfair_lock_s **)(v31 + 56);
    v53 = (_TtC14softposreaderd12RemoteReader **)&v52[4];
    v54 = v52 + 8;
    os_unfair_lock_lock(v52 + 8);
    sub_100060D14(v53, v31, 3);
    os_unfair_lock_unlock(v54);
    v55 = sub_1000247AC(2029, 0, 0, 0);
    swift_willThrow(v55);
    swift_errorRelease();
  }
}

uint64_t sub_100065AF0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_signpost_type_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint8_t *v34;
  os_signpost_id_t v35;
  os_signpost_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t ObjectType;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_signpost_type_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  uint8_t *v57;
  os_signpost_id_t v58;
  os_signpost_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_signpost_type_t v75;
  void (*v76)(char *, char *, uint64_t);
  char *v77;
  uint8_t *v78;
  os_signpost_id_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  uint64_t v84;
  os_signpost_type_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint8_t *v94;
  os_signpost_id_t v95;
  void (*v96)(char *, uint64_t);
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  _QWORD *v109;
  _QWORD *v110;
  char v111[16];
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;

  v2 = type metadata accessor for OSSignpostError(0);
  v99 = *(_QWORD *)(v2 - 8);
  v100 = v2;
  __chkstk_darwin(v2);
  v98 = (char *)&v97 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OSSignpostID(0);
  v106 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v102 = (char *)&v97 - v9;
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v97 - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v97 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v97 - v16;
  sub_100005EF8(v0 + 51, v0[54]);
  v110 = sub_10011C4EC(201, 0x726564616572, (_QWORD *)0xE600000000000000, 4);
  v104 = v18;
  sub_100005EF8(v0 + 51, v0[54]);
  v109 = sub_10011C0CC(202, 0xD000000000000010, 0x800000010016C720, 4);
  v105 = v19;
  v112 = *sub_100005EF8(v0 + 8, v0[11]);
  v113 = 0x40F5180000000000;
  OS_dispatch_queue.sync<A>(execute:)(&v114, sub_100070E74, v111, &type metadata for Bool);
  v107 = v1;
  v108 = v15;
  v103 = v7;
  if ((v114 & 1) != 0)
  {
    v20 = 0;
    v21 = v106;
  }
  else
  {
    if (qword_1001ACFC0 != -1)
      swift_once(&qword_1001ACFC0, sub_100060E50);
    v22 = type metadata accessor for Logger(0);
    v23 = sub_100003A14(v22, (uint64_t)qword_1001B05E0);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v26 = 134217984;
      v15 = v108;
      v114 = 0x4038000000000000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v26 + 4, v26 + 12);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Certificate(s) expire before %f hour(s): Begin renewal", v26, 0xCu);
      swift_slowDealloc(v26, -1, -1);
    }

    if (qword_1001ACFC8 != -1)
      swift_once(&qword_1001ACFC8, sub_100060EE0);
    v101 = v12;
    v27 = type metadata accessor for OSSignposter(0);
    sub_100003A14(v27, (uint64_t)qword_1001B05F8);
    v28 = static OSSignpostID.exclusive.getter();
    v29 = OSSignposter.logHandle.getter(v28);
    v30 = static os_signpost_type_t.begin.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v31 = v4;
      v32 = v106;
      v33 = *(void (**)(char *, char *, uint64_t))(v106 + 16);
      v33(v15, v17, v31);
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      v35 = OSSignpostID.rawValue.getter(v34);
      v36 = v30;
      v21 = v32;
      v4 = v31;
      v7 = v103;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v29, v36, v35, "config-prepare-renewCertificate", "begin renew certificate", v34, 2u);
      v37 = v34;
      v15 = v108;
      swift_slowDealloc(v37, -1, -1);

      (*(void (**)(char *, uint64_t))(v21 + 8))(v15, v4);
    }
    else
    {

      v21 = v106;
      v33 = *(void (**)(char *, char *, uint64_t))(v106 + 16);
    }
    v33(v15, v17, v4);
    v38 = type metadata accessor for OSSignpostIntervalState(0);
    swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
    v20 = OSSignpostIntervalState.init(id:isOpen:)(v15, 1);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v17, v4);
    v39 = v107;
    sub_100066B34();
    if (v39)
    {
      swift_unknownObjectRelease(v110);
      swift_unknownObjectRelease(v109);
      return swift_release(v20);
    }
    v107 = 0;
    v12 = v101;
  }
  ObjectType = swift_getObjectType(v110);
  if (((*(uint64_t (**)(double))(v104 + 48))(86400.0) & 1) == 0)
  {
    if (qword_1001ACFC0 != -1)
      swift_once(&qword_1001ACFC0, sub_100060E50);
    v97 = ObjectType;
    v42 = type metadata accessor for Logger(0);
    v43 = sub_100003A14(v42, (uint64_t)qword_1001B05E0);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v46 = 134217984;
      v114 = 0x4038000000000000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v46 + 4, v46 + 12);
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "readerBlobSigner certificate expires before %f hour(s): Begin renewal", v46, 0xCu);
      v47 = v46;
      v15 = v108;
      swift_slowDealloc(v47, -1, -1);
    }

    if (qword_1001ACFC8 != -1)
      swift_once(&qword_1001ACFC8, sub_100060EE0);
    v48 = type metadata accessor for OSSignposter(0);
    sub_100003A14(v48, (uint64_t)qword_1001B05F8);
    v49 = static OSSignpostID.exclusive.getter();
    v50 = OSSignposter.logHandle.getter(v49);
    v51 = static os_signpost_type_t.begin.getter();
    v52 = v12;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v101 = (char *)v20;
      v53 = v7;
      v54 = v4;
      v55 = v106;
      v56 = *(void (**)(char *, char *, uint64_t))(v106 + 16);
      v56(v15, v52, v54);
      v57 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v57 = 0;
      v58 = OSSignpostID.rawValue.getter(v57);
      v59 = v51;
      v21 = v55;
      v4 = v54;
      v7 = v53;
      v20 = (uint64_t)v101;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v50, v59, v58, "config-prepare-renewCertificate", "begin renew certificate", v57, 2u);
      v60 = v57;
      v15 = v108;
      swift_slowDealloc(v60, -1, -1);

      (*(void (**)(char *, uint64_t))(v21 + 8))(v15, v4);
    }
    else
    {

      v21 = v106;
      v56 = *(void (**)(char *, char *, uint64_t))(v106 + 16);
    }
    v56(v15, v52, v4);
    v61 = type metadata accessor for OSSignpostIntervalState(0);
    swift_allocObject(v61, *(unsigned int *)(v61 + 48), *(unsigned __int16 *)(v61 + 52));
    v62 = OSSignpostIntervalState.init(id:isOpen:)(v15, 1);
    swift_release(v20);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v52, v4);
    (*(void (**)(uint64_t))(v104 + 56))(v97);
    v20 = v62;
  }
  v63 = swift_getObjectType(v109);
  v64 = (*(uint64_t (**)(double))(v105 + 48))(86400.0);
  v65 = v102;
  if ((v64 & 1) != 0)
  {
    if (!v20)
    {
      swift_unknownObjectRelease(v110);
      return swift_unknownObjectRelease(v109);
    }
    swift_retain();
    v66 = v20;
  }
  else
  {
    v106 = v63;
    if (qword_1001ACFC0 != -1)
      swift_once(&qword_1001ACFC0, sub_100060E50);
    v67 = type metadata accessor for Logger(0);
    v68 = sub_100003A14(v67, (uint64_t)qword_1001B05E0);
    v69 = Logger.logObject.getter(v68);
    v70 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v69, v70))
    {
      v71 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v71 = 134217984;
      v114 = 0x4038000000000000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v71 + 4, v71 + 12);
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "safBlobSigner certificate expires before %f hour(s): Begin renewal", v71, 0xCu);
      v65 = v102;
      swift_slowDealloc(v71, -1, -1);
    }

    if (qword_1001ACFC8 != -1)
      swift_once(&qword_1001ACFC8, sub_100060EE0);
    v101 = (char *)v20;
    v72 = type metadata accessor for OSSignposter(0);
    sub_100003A14(v72, (uint64_t)qword_1001B05F8);
    v73 = static OSSignpostID.exclusive.getter();
    v74 = OSSignposter.logHandle.getter(v73);
    v75 = static os_signpost_type_t.begin.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v76 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
      v77 = v108;
      v76(v108, v65, v4);
      v78 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v78 = 0;
      v79 = OSSignpostID.rawValue.getter(v78);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v74, v75, v79, "config-prepare-renewCertificate", "begin renew certificate", v78, 2u);
      swift_slowDealloc(v78, -1, -1);

      (*(void (**)(char *, uint64_t))(v21 + 8))(v77, v4);
    }
    else
    {

      v76 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
      v77 = v108;
    }
    v76(v77, v65, v4);
    v80 = type metadata accessor for OSSignpostIntervalState(0);
    swift_allocObject(v80, *(unsigned int *)(v80 + 48), *(unsigned __int16 *)(v80 + 52));
    v66 = OSSignpostIntervalState.init(id:isOpen:)(v77, 1);
    swift_release(v101);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v65, v4);
    (*(void (**)(uint64_t))(v105 + 56))(v106);
    swift_retain();
    v20 = v66;
    v7 = v103;
  }
  if (qword_1001ACFC8 != -1)
    swift_once(&qword_1001ACFC8, sub_100060EE0);
  v81 = type metadata accessor for OSSignposter(0);
  v82 = sub_100003A14(v81, (uint64_t)qword_1001B05F8);
  v83 = OSSignposter.logHandle.getter(v82);
  v84 = OSSignpostIntervalState.signpostID.getter();
  v85 = static os_signpost_type_t.end.getter(v84);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v101 = (char *)v20;
    v86 = swift_retain();
    v87 = v98;
    checkForErrorAndConsumeState(state:)(v86);
    swift_release(v66);
    v89 = v99;
    v88 = v100;
    if ((*(unsigned int (**)(char *, uint64_t))(v99 + 88))(v87, v100) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v90 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v89 + 8))(v87, v88);
      v90 = "end renew certificate";
    }
    v91 = v108;
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v108, v7, v4);
    v92 = v4;
    v93 = v21;
    v94 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v94 = 0;
    v95 = OSSignpostID.rawValue.getter(v94);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v83, v85, v95, "config-prepare-renewCertificate", v90, v94, 2u);
    swift_slowDealloc(v94, -1, -1);
    swift_unknownObjectRelease(v110);
    swift_unknownObjectRelease(v109);

    swift_release(v101);
    v96 = *(void (**)(char *, uint64_t))(v93 + 8);
    v96(v103, v92);
    swift_release(v66);
    return ((uint64_t (*)(char *, uint64_t))v96)(v91, v92);
  }
  else
  {
    swift_unknownObjectRelease(v110);
    swift_unknownObjectRelease(v109);

    swift_release(v20);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v4);
    return swift_release(v66);
  }
}

_QWORD *sub_100066674()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_signpost_type_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint8_t *v29;
  os_signpost_id_t v30;
  uint8_t *v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  _QWORD *v37;
  void (*v38)(char *, char *, uint64_t);
  NSObject *v39;
  char *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  char *v48;
  uint8_t *v49;
  os_signpost_id_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v2 = type metadata accessor for OSSignpostError(0);
  v55 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v54 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OSSignpostID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v51 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v51 - v12;
  v14 = sub_100005EF8((_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 88));
  result = OS_dispatch_queue.sync<A>(execute:)(&v57, sub_100070E5C, *v14, &type metadata for Bool);
  if (v57 == 1)
  {
    v56 = v1;
    if (qword_1001ACFC0 != -1)
      swift_once(&qword_1001ACFC0, sub_100060E50);
    v53 = v8;
    v16 = type metadata accessor for Logger(0);
    v17 = sub_100003A14(v16, (uint64_t)qword_1001B05E0);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "certificates not valid, renew...", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }
    v51 = v2;

    if (qword_1001ACFC8 != -1)
      swift_once(&qword_1001ACFC8, sub_100060EE0);
    v21 = type metadata accessor for OSSignposter(0);
    v22 = sub_100003A14(v21, (uint64_t)qword_1001B05F8);
    v23 = static OSSignpostID.exclusive.getter();
    v52 = v22;
    v24 = OSSignposter.logHandle.getter(v23);
    v25 = static os_signpost_type_t.begin.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v26 = v11;
      v27 = v4;
      v28 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v28(v26, v13, v27);
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      v30 = OSSignpostID.rawValue.getter(v29);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v24, v25, v30, "config-prepare-renewCertificate", "begin renew certificate", v29, 2u);
      v31 = v29;
      v32 = v28;
      v4 = v27;
      v11 = v26;
      swift_slowDealloc(v31, -1, -1);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v26, v4);
    }
    else
    {

      v32 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    }
    v32(v11, v13, v4);
    v33 = type metadata accessor for OSSignpostIntervalState(0);
    swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
    v34 = OSSignpostIntervalState.init(id:isOpen:)(v11, 1);
    v35 = *(void (**)(char *, uint64_t))(v5 + 8);
    v35(v13, v4);
    v36 = v56;
    v37 = sub_100066B34();
    if (v36)
    {
      return (_QWORD *)swift_release(v34);
    }
    else
    {
      v38 = v32;
      v56 = 0;
      v39 = OSSignposter.logHandle.getter(v37);
      v40 = v53;
      v41 = OSSignpostIntervalState.signpostID.getter();
      v42 = static os_signpost_type_t.end.getter(v41);
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        LODWORD(v52) = v42;
        v43 = swift_retain();
        v44 = v54;
        checkForErrorAndConsumeState(state:)(v43);
        swift_release(v34);
        v45 = v55;
        v46 = v51;
        if ((*(unsigned int (**)(char *, uint64_t))(v55 + 88))(v44, v51) == enum case for OSSignpostError.doubleEnd(_:))
        {
          v47 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v45 + 8))(v44, v46);
          v47 = "end renew certificate";
        }
        v48 = v53;
        v38(v11, v53, v4);
        v49 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v49 = 0;
        v50 = OSSignpostID.rawValue.getter(v49);
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v39, (os_signpost_type_t)v52, v50, "config-prepare-renewCertificate", v47, v49, 2u);
        swift_slowDealloc(v49, -1, -1);

        v35(v48, v4);
        swift_release(v34);
        return (_QWORD *)((uint64_t (*)(char *, uint64_t))v35)(v11, v4);
      }
      else
      {

        v35(v40, v4);
        return (_QWORD *)swift_release(v34);
      }
    }
  }
  return result;
}

_QWORD *sub_100066B34()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  const char *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _TtC14softposreaderd12RemoteReader *v40;
  SEL v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[3];
  char v54[8];
  uint64_t v55;

  v2 = sub_100005EF8((_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 88));
  result = OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_100070E44, *v2, &type metadata for () + 1);
  if (v1)
  {
    _s3__C4CodeOMa_11(0);
    v5 = v4;
    v55 = 2034;
    swift_errorRetain();
    v6 = sub_100005F1C(&qword_1001AD738, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_11, (uint64_t)&unk_10015BCD0);
    v7 = static _ErrorCodeProtocol.~= infix(_:_:)(&v55, v1, v5, v6);
    swift_errorRelease();
    if ((v7 & 1) != 0)
    {
      if (qword_1001ACFC0 != -1)
        swift_once(&qword_1001ACFC0, sub_100060E50);
      v8 = type metadata accessor for Logger(0);
      v9 = sub_100003A14(v8, (uint64_t)qword_1001B05E0);
      v10 = Logger.logObject.getter(v9);
      v11 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v10, v11))
        goto LABEL_13;
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      v13 = "Configurator.renewCertificates() operationNotAuthorized";
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v10, v11, v13, v12, 2u);
      swift_slowDealloc(v12, -1, -1);
LABEL_13:

      return (_QWORD *)swift_willThrow(v17);
    }
    v55 = 2000;
    swift_errorRetain();
    v14 = static _ErrorCodeProtocol.~= infix(_:_:)(&v55, v1, v5, v6);
    swift_errorRelease();
    if ((v14 & 1) != 0)
    {
      if (qword_1001ACFC0 != -1)
        swift_once(&qword_1001ACFC0, sub_100060E50);
      v15 = type metadata accessor for Logger(0);
      v16 = sub_100003A14(v15, (uint64_t)qword_1001B05E0);
      v10 = Logger.logObject.getter(v16);
      v11 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v10, v11))
        goto LABEL_13;
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      v13 = "Configurator.renewCertificates() connectionProblem";
      goto LABEL_12;
    }
    v55 = 2025;
    swift_errorRetain();
    v18 = static _ErrorCodeProtocol.~= infix(_:_:)(&v55, v1, v5, v6);
    swift_errorRelease();
    if ((v18 & 1) != 0)
      goto LABEL_17;
    v55 = v1;
    swift_errorRetain();
    v19 = sub_100003A2C((uint64_t *)&unk_1001B1280);
    if (swift_dynamicCast(&v52, &v55, v19, &type metadata for CertificateManagerError, 0))
    {
      v20 = v52;
      swift_errorRelease();
      if (v20 == 2)
      {
LABEL_17:
        if (qword_1001ACFC0 != -1)
          swift_once(&qword_1001ACFC0, sub_100060E50);
        v21 = type metadata accessor for Logger(0);
        v22 = sub_100003A14(v21, (uint64_t)qword_1001B05E0);
        v23 = Logger.logObject.getter(v22);
        v24 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v23, v24))
        {
          v25 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v25 = 0;
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "Configurator.renewCertificates() cannotRenewCertificate", v25, 2u);
          swift_slowDealloc(v25, -1, -1);
        }

        v26 = 2025;
        v27 = 0;
        v28 = 0;
LABEL_34:
        v51 = sub_1000247AC(v26, v27, v28, 0);
        swift_willThrow(v51);
        return (_QWORD *)swift_errorRelease();
      }
    }
    else
    {
      swift_errorRelease();
    }
    v55 = 2999;
    swift_errorRetain();
    v29 = static _ErrorCodeProtocol.~= infix(_:_:)(&v55, v1, v5, v6);
    swift_errorRelease();
    if ((v29 & 1) != 0)
    {
      if (qword_1001ACFC0 != -1)
        swift_once(&qword_1001ACFC0, sub_100060E50);
      v30 = type metadata accessor for Logger(0);
      v31 = sub_100003A14(v30, (uint64_t)qword_1001B05E0);
      v10 = Logger.logObject.getter(v31);
      v11 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v10, v11))
        goto LABEL_13;
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      v13 = "Configurator.renewCertificates() internal error";
      goto LABEL_12;
    }
    if (qword_1001ACFC0 != -1)
      swift_once(&qword_1001ACFC0, sub_100060E50);
    v32 = type metadata accessor for Logger(0);
    sub_100003A14(v32, (uint64_t)qword_1001B05E0);
    swift_errorRetain();
    v33 = swift_errorRetain();
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v37 = swift_slowAlloc(32, -1);
      v55 = v37;
      *(_DWORD *)v36 = 136315138;
      v52 = v1;
      swift_errorRetain();
      v38 = String.init<A>(describing:)(&v52, v19);
      v40 = (_TtC14softposreaderd12RemoteReader *)v39;
      v52 = sub_1000056EC(v38, v39, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v36 + 4, v36 + 12);
      swift_bridgeObjectRelease(v40, v41, v42, v43, v44, v45, v46, v47);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Configurator.renewCertificates() unexpected error: %s", v36, 0xCu);
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_getErrorValue(v1, v54, v53);
    v48 = Error.localizedDescription.getter(v53[1], v53[2]);
    v50 = v49;
    v26 = 2999;
    v27 = v48;
    v28 = v50;
    goto LABEL_34;
  }
  return result;
}

uint64_t sub_10006714C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t), uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t Strong;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t inited;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _TtC14softposreaderd12RemoteReader *v33;
  SEL v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  atomic_flag *v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  uint8_t *v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t v55;
  os_signpost_type_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint8_t *v68;
  os_signpost_id_t v69;
  void (*v70)(char *, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  os_unfair_lock_s *v74;
  _TtC14softposreaderd12RemoteReader **v75;
  os_unfair_lock_s *v76;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(uint64_t, uint64_t);
  char v89[88];
  _QWORD v90[3];
  uint64_t v91;
  uint64_t v92;
  char v93[32];
  char v94[8];
  char v95[8];

  v87 = a7;
  v88 = a6;
  v83 = a5;
  v86 = a2;
  v85 = a1;
  v81 = type metadata accessor for OSSignpostError(0);
  v80 = *(_QWORD *)(v81 - 8);
  __chkstk_darwin(v81);
  v79 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OSSignpostID(0);
  v84 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v82 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v78 - v13;
  v15 = sub_100003A2C((uint64_t *)&unk_1001B36F0);
  __chkstk_darwin(v15);
  v17 = (char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v78 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = swift_projectBox(a3);
  v23 = a4 + 16;
  swift_beginAccess(v22, v95, 0, 0);
  sub_100005EB4(v22, (uint64_t)v17, (uint64_t *)&unk_1001B36F0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    sub_10005218C((uint64_t)v17, (uint64_t *)&unk_1001B36F0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v17, v18);
    swift_beginAccess(a4 + 16, v93, 0, 0);
    Strong = swift_weakLoadStrong(a4 + 16);
    if (Strong)
    {
      v25 = Strong;
      sub_100008390(Strong + 232, (uint64_t)v90);
      swift_release(v25);
      v26 = v91;
      v78 = v92;
      sub_100005EF8(v90, v91);
      v27 = sub_100003A2C(&qword_1001ADA18);
      v28 = v10;
      inited = swift_initStackObject(v27, v89);
      *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
      *(_QWORD *)(inited + 32) = 1684631668;
      *(_QWORD *)(inited + 40) = 0xE400000000000000;
      v30 = UUID.uuidString.getter(inited);
      *(_QWORD *)(inited + 72) = &type metadata for String;
      *(_QWORD *)(inited + 80) = &protocol witness table for String;
      *(_QWORD *)(inited + 48) = v30;
      *(_QWORD *)(inited + 56) = v31;
      v32 = sub_1000E84EC(inited);
      sub_100115684(18, v32, v26, v78);
      v33 = (_TtC14softposreaderd12RemoteReader *)v32;
      v10 = v28;
      swift_bridgeObjectRelease(v33, v34, v35, v36, v37, v38, v39, v40);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
      sub_100005D3C(v90);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    }
  }
  v41 = v83;
  swift_beginAccess(v23, v90, 0, 0);
  v42 = swift_weakLoadStrong(v23);
  if (v42)
  {
    v43 = v42;
    v44 = (atomic_flag *)(v42 + 16);
    swift_beginAccess(v42 + 16, v94, 33, 0);
    atomic_flag_clear(v44);
    swift_endAccess(v94);
    if (qword_1001ACFC0 != -1)
      swift_once(&qword_1001ACFC0, sub_100060E50);
    v45 = type metadata accessor for Logger(0);
    v46 = sub_100003A14(v45, (uint64_t)qword_1001B05E0);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = v10;
      v50 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "install operation ended", v50, 2u);
      v51 = v50;
      v10 = v49;
      swift_slowDealloc(v51, -1, -1);
    }
    swift_release(v43);

  }
  if (qword_1001ACFC8 != -1)
    swift_once(&qword_1001ACFC8, sub_100060EE0);
  v52 = type metadata accessor for OSSignposter(0);
  v53 = sub_100003A14(v52, (uint64_t)qword_1001B05F8);
  v54 = OSSignposter.logHandle.getter(v53);
  v55 = OSSignpostIntervalState.signpostID.getter();
  v56 = static os_signpost_type_t.end.getter(v55);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v57 = swift_retain();
    v58 = v79;
    checkForErrorAndConsumeState(state:)(v57);
    v59 = v41;
    v60 = v58;
    swift_release(v59);
    v61 = v80;
    v62 = v58;
    v63 = v81;
    if ((*(unsigned int (**)(char *, uint64_t))(v80 + 88))(v62, v81) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v64 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v61 + 8))(v60, v63);
      v64 = "end install";
    }
    v65 = v84;
    v66 = v82;
    (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v82, v14, v10);
    v67 = v10;
    v68 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v68 = 0;
    v69 = OSSignpostID.rawValue.getter(v68);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v54, v56, v69, "config-install-totalTime", v64, v68, 2u);
    swift_slowDealloc(v68, -1, -1);

    v70 = *(void (**)(char *, uint64_t))(v65 + 8);
    v70(v14, v67);
    v70(v66, v67);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v84 + 8))(v14, v10);
  }
  swift_beginAccess(v23, v94, 0, 0);
  v71 = swift_weakLoadStrong(v23);
  if (v71)
  {
    v72 = v71;
    v73 = *(_QWORD *)(v71 + 272);
    swift_retain();
    swift_release(v72);
    v74 = *(os_unfair_lock_s **)(v73 + 56);
    v75 = (_TtC14softposreaderd12RemoteReader **)&v74[4];
    v76 = v74 + 8;
    os_unfair_lock_lock(v74 + 8);
    sub_100060D14(v75, v73, 1);
    os_unfair_lock_unlock(v76);
    swift_release(v73);
  }
  return v88(v85, v86);
}

void sub_1000677AC(_TtC14softposreaderd12RemoteReader *a1, char a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(_QWORD, void *), uint64_t a12)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  _TtC14softposreaderd12RemoteReader *v50;
  os_unfair_lock_s *v51;
  uint64_t v52;
  os_unfair_lock_s *v53;
  SEL v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  BOOL v69;
  uint64_t v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  SEL v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint8_t *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t inited;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  _TtC14softposreaderd12RemoteReader *v102;
  os_unfair_lock_s *v103;
  uint64_t v104;
  os_unfair_lock_s *v105;
  SEL v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  char v114;
  uint64_t v115;
  void (*v116)(_QWORD, uint64_t);
  uint64_t v117;
  uint64_t v118;
  NSObject *v119;
  os_log_type_t v120;
  uint8_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  void (*v132)(_QWORD, void *);
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  id v144[2];
  char v145[72];
  char v146[72];

  v139 = a8;
  v141 = a7;
  v140 = a6;
  v138 = a9;
  v17 = sub_100003A2C((uint64_t *)&unk_1001B36F0);
  v133 = *(_QWORD *)(v17 - 8);
  v18 = *(_QWORD *)(v133 + 64);
  __chkstk_darwin(v17);
  v135 = (uint64_t)&v132 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v134 - 8);
  v20 = *(_QWORD *)(v19 + 64);
  __chkstk_darwin(v134);
  v136 = (char *)&v132 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001ACFC8 != -1)
    swift_once(&qword_1001ACFC8, sub_100060EE0);
  v143 = a12;
  v137 = a10;
  v21 = type metadata accessor for OSSignposter(0);
  sub_100003A14(v21, (uint64_t)qword_1001B05F8);
  v142 = a4;
  sub_10003AFE8("config-install-preprosessing", 28, 2, a4, 0xD000000000000019, 0x800000010016C500);
  if (a1)
  {
    swift_bridgeObjectRetain();
    if ((a5 & 1) != 0 && (a2 & 1) != 0)
      sub_100070760(0, 0);
    v22 = (void *)objc_opt_self(NSJSONSerialization);
    v144[0] = a1;
    swift_bridgeObjectRetain();
    v23 = sub_100003A2C(&qword_1001AEAC8);
    v24 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v144, v23);
    v25 = objc_msgSend(v22, "isValidJSONObject:", v24);
    swift_unknownObjectRelease(v24);
    if ((v25 & 1) != 0)
    {
      v144[0] = a1;
      swift_bridgeObjectRetain();
      v26 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v144, v23);
      v144[0] = 0;
      v27 = objc_msgSend(v22, "dataWithJSONObject:options:error:", v26, 0, v144);
      swift_unknownObjectRelease(v26);
      v28 = v144[0];
      if (v27)
      {
        v29 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v27);
        v31 = (unint64_t)v30;
        swift_bridgeObjectRelease(a1, v30, v32, v33, v34, v35, v36, v37);

        sub_100081434(v140, v141, v139, v138, v29, v31, a2 & 1, v137, a11, v143);
        sub_100005DE0(v29, v31);
        return;
      }
      v74 = v28;
      v73 = _convertNSErrorToError(_:)(v28);

      v70 = v142;
    }
    else
    {
      if (qword_1001ACF68 != -1)
        swift_once(&qword_1001ACF68, sub_100052420);
      v65 = type metadata accessor for Logger(0);
      v66 = sub_100003A14(v65, (uint64_t)qword_1001AFDC0);
      v67 = Logger.logObject.getter(v66);
      v68 = static os_log_type_t.error.getter();
      v69 = os_log_type_enabled(v67, v68);
      v70 = v142;
      if (v69)
      {
        v71 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v71 = 0;
        _os_log_impl((void *)&_mh_execute_header, v67, v68, "Object is not a valid JSON", v71, 2u);
        swift_slowDealloc(v71, -1, -1);
      }

      v72 = sub_10002483C(15000, 0, 0, 0);
      v73 = v72;
    }
    swift_willThrow(v72);
    swift_bridgeObjectRelease(a1, v75, v76, v77, v78, v79, v80, v81);
    if (qword_1001ACFC0 != -1)
      swift_once(&qword_1001ACFC0, sub_100060E50);
    v82 = type metadata accessor for Logger(0);
    v83 = sub_100003A14(v82, (uint64_t)qword_1001B05E0);
    v84 = Logger.logObject.getter(v83);
    v85 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v84, v85))
    {
      v86 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v86 = 0;
      _os_log_impl((void *)&_mh_execute_header, v84, v85, "couldn't construct se state info in JSON", v86, 2u);
      swift_slowDealloc(v86, -1, -1);
    }

    swift_errorRetain();
    v87 = (void *)sub_1000247AC(2016, 0, 0, v73);
    swift_errorRelease();
    v88 = *(_QWORD *)(v70 + 272);
    v89 = sub_100003A2C(&qword_1001ADA30);
    inited = swift_initStackObject(v89, v145);
    *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
    *(_BYTE *)(inited + 32) = 8;
    v144[0] = v87;
    type metadata accessor for ConfigurationError(0);
    v92 = v91;
    v93 = sub_100005F1C((unint64_t *)&qword_1001AD750, (uint64_t (*)(uint64_t))type metadata accessor for ConfigurationError, (uint64_t)&unk_10015BC28);
    v94 = _BridgedStoredNSError.errorCode.getter(v92, v93);
    *(_QWORD *)(inited + 64) = &type metadata for Int;
    *(_QWORD *)(inited + 40) = v94;
    v102 = (_TtC14softposreaderd12RemoteReader *)sub_1000E862C(inited, v95, v96, v97, v98, v99, v100, v101);
    v103 = *(os_unfair_lock_s **)(v88 + 56);
    v104 = (uint64_t)&v103[4];
    v105 = v103 + 8;
    os_unfair_lock_lock(v103 + 8);
    sub_10005F610(v104, (uint64_t)v102);
    os_unfair_lock_unlock(v105);
    swift_bridgeObjectRelease(v102, v106, v107, v108, v109, v110, v111, v112);
    v113 = v87;
    a11(0, v87);

    goto LABEL_24;
  }
  if (!a3)
    return;
  v132 = a11;
  v38 = *(_QWORD *)(v142 + 272);
  v39 = sub_100003A2C(&qword_1001ADA30);
  v40 = swift_initStackObject(v39, v146);
  *(_OWORD *)(v40 + 16) = xmmword_10015A5F0;
  *(_BYTE *)(v40 + 32) = 8;
  swift_errorRetain();
  v41 = (void *)_convertErrorToNSError(_:)(a3);
  v42 = objc_msgSend(v41, "code");

  *(_QWORD *)(v40 + 64) = &type metadata for Int;
  *(_QWORD *)(v40 + 40) = v42;
  v50 = (_TtC14softposreaderd12RemoteReader *)sub_1000E862C(v40, v43, v44, v45, v46, v47, v48, v49);
  v51 = *(os_unfair_lock_s **)(v38 + 56);
  v52 = (uint64_t)&v51[4];
  v53 = v51 + 8;
  os_unfair_lock_lock(v51 + 8);
  sub_10005F610(v52, (uint64_t)v50);
  os_unfair_lock_unlock(v53);
  swift_bridgeObjectRelease(v50, v54, v55, v56, v57, v58, v59, v60);
  _s3__C4CodeOMa_11(0);
  v62 = v61;
  v144[0] = (id)2030;
  swift_errorRetain();
  v63 = sub_100005F1C(&qword_1001AD738, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_11, (uint64_t)&unk_10015BCD0);
  LOBYTE(v53) = static _ErrorCodeProtocol.~= infix(_:_:)(v144, a3, v62, v63);
  swift_errorRelease();
  if ((v53 & 1) != 0)
  {
    swift_errorRetain();
    v64 = (void *)sub_1000247AC(2026, 0, 0, a3);
    swift_errorRelease();
    v132(0, v64);
    swift_errorRelease();

    return;
  }
  v144[0] = (id)2028;
  swift_errorRetain();
  v114 = static _ErrorCodeProtocol.~= infix(_:_:)(v144, a3, v62, v63);
  swift_errorRelease();
  v115 = v143;
  v116 = (void (*)(_QWORD, uint64_t))v132;
  if ((v114 & 1) == 0 || (a5 & 1) == 0)
  {
    swift_errorRetain();
    v116(0, a3);
    swift_errorRelease();
LABEL_24:
    swift_errorRelease();
    return;
  }
  if (qword_1001ACFC0 != -1)
    swift_once(&qword_1001ACFC0, sub_100060E50);
  v117 = type metadata accessor for Logger(0);
  v118 = sub_100003A14(v117, (uint64_t)qword_1001B05E0);
  v119 = Logger.logObject.getter(v118);
  v120 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v119, v120))
  {
    v121 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v121 = 0;
    _os_log_impl((void *)&_mh_execute_header, v119, v120, "try perform SE cleanup and try again", v121, 2u);
    swift_slowDealloc(v121, -1, -1);
  }

  v122 = v134;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v136, v139, v134);
  v123 = v135;
  sub_100005EB4(v138, v135, (uint64_t *)&unk_1001B36F0);
  v124 = *(unsigned __int8 *)(v19 + 80);
  v125 = (v124 + 56) & ~v124;
  v126 = *(unsigned __int8 *)(v133 + 80);
  v127 = (v20 + v126 + v125) & ~v126;
  v128 = (v18 + v127 + 7) & 0xFFFFFFFFFFFFFFF8;
  v129 = (char *)swift_allocObject(&unk_10019C6D8, v128 + 8, v124 | v126 | 7);
  *((_QWORD *)v129 + 2) = v132;
  *((_QWORD *)v129 + 3) = v115;
  v130 = v140;
  *((_QWORD *)v129 + 4) = v142;
  *((_QWORD *)v129 + 5) = v130;
  *((_QWORD *)v129 + 6) = v141;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(&v129[v125], v136, v122);
  sub_100024374(v123, (uint64_t)&v129[v127], (uint64_t *)&unk_1001B36F0);
  v131 = v137;
  *(_QWORD *)&v129[v128] = v137;
  swift_unknownObjectRetain(v131);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100070760((uint64_t)sub_1000706C4, (uint64_t)v129);
  swift_errorRelease();
  swift_release(v129);
}

void sub_100068158(uint64_t a1, void (*a2)(_QWORD, id), uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void (*v35)(_QWORD, id);
  uint64_t v36;

  v33 = a4;
  v34 = a6;
  v35 = a2;
  v36 = a3;
  v31 = a5;
  v32 = a9;
  v12 = sub_100003A2C((uint64_t *)&unk_1001B36F0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  __chkstk_darwin(v16);
  v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v34 = (id)sub_1000247AC(2028, 0, 0, 0);
    v35(0, v34);

  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))((char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), a7, v16);
    sub_100005EB4(a8, (uint64_t)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&unk_1001B36F0);
    v20 = *(unsigned __int8 *)(v17 + 80);
    v21 = (v20 + 48) & ~v20;
    v22 = *(unsigned __int8 *)(v13 + 80);
    v23 = (v18 + v22 + v21) & ~v22;
    v24 = (v14 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF8;
    v26 = swift_allocObject(&unk_10019C750, v25 + 16, v20 | v22 | 7);
    *(_QWORD *)(v26 + 16) = v33;
    *(_BYTE *)(v26 + 24) = 0;
    v27 = v34;
    *(_QWORD *)(v26 + 32) = v31;
    *(_QWORD *)(v26 + 40) = v27;
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v26 + v21, v19, v16);
    sub_100024374((uint64_t)v15, v26 + v23, (uint64_t *)&unk_1001B36F0);
    v28 = v32;
    *(_QWORD *)(v26 + v24) = v32;
    v29 = (_QWORD *)(v26 + v25);
    v30 = v36;
    *v29 = v35;
    v29[1] = v30;
    swift_unknownObjectRetain(v28);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_100068670((uint64_t)sub_1000705C8, v26);
    swift_release(v26);
  }
}

void sub_100068374(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1)
  {
    swift_errorRetain();
    if (qword_1001ACFC0 != -1)
      swift_once(&qword_1001ACFC0, sub_100060E50);
    v4 = type metadata accessor for Logger(0);
    sub_100003A14(v4, (uint64_t)qword_1001B05E0);
    swift_errorRetain();
    v5 = swift_errorRetain();
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v8 = 138412290;
      swift_errorRetain();
      v10 = _swift_stdlib_bridgeErrorToNSError(a1);
      v17 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v8 + 4, v8 + 12);
      *v9 = v10;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "failed to perform SE cleanup %@.\nApple Pay Servers Environment wasn't set.\nNo instances to clean up", v8, 0xCu);
      v11 = sub_100003A2C((uint64_t *)&unk_1001AE430);
      swift_arrayDestroy(v9, 1, v11);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

      if (!a2)
        goto LABEL_15;
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      if (!a2)
      {
LABEL_15:
        swift_errorRelease();
        return;
      }
    }
    swift_errorRetain();
    a2(a1);
    swift_errorRelease();
    goto LABEL_15;
  }
  if (qword_1001ACFC0 != -1)
    swift_once(&qword_1001ACFC0, sub_100060E50);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_100003A14(v12, (uint64_t)qword_1001B05E0);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "successfully perform SE cleanup", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  if (a2)
    a2(0);
}

void sub_10006861C(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

void sub_100068670(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  id v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  id v11;
  _QWORD v12[5];
  _QWORD *v13;

  v5 = *v2;
  v6 = objc_msgSend((id)objc_opt_self(NFHardwareManager), "sharedHardwareManager");
  if (v6)
  {
    v7 = v6;
    v8 = (_QWORD *)swift_allocObject(&unk_10019C7A0, 48, 7);
    v8[2] = v2;
    v8[3] = a1;
    v8[4] = a2;
    v8[5] = v5;
    v12[4] = sub_100070DDC;
    v13 = v8;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256;
    v12[2] = sub_100004C68;
    v12[3] = &unk_10019C7B8;
    v9 = _Block_copy(v12);
    v10 = v13;
    swift_retain();
    swift_retain();
    swift_release(v10);
    v11 = objc_msgSend(v7, "startSecureElementManagerSession:", v9);
    _Block_release(v9);
    swift_unknownObjectRelease(v11);

  }
  else
  {
    __break(1u);
  }
}

void sub_100068788(void *a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD, _QWORD, id), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  const char *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  const char *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  _TtC14softposreaderd12RemoteReader *v53;
  _TtC14softposreaderd12RemoteReader *v54;
  SEL v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  _BOOL4 v64;
  uint64_t v65;
  _TtC14softposreaderd12RemoteReader *v66;
  _TtC14softposreaderd12RemoteReader *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _TtC14softposreaderd12RemoteReader *v73;
  _TtC14softposreaderd12RemoteReader *v74;
  const char *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  int64_t v82;
  _TtC14softposreaderd12RemoteReader *v83;
  uint64_t v84;
  unsigned __int8 *v85;
  uint64_t *v86;
  uint64_t v87;
  unint64_t v88;
  const char *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  uint64_t v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  Swift::String_optional v103;
  SEL v104;
  char v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  const char *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  _TtC14softposreaderd12RemoteReader *v119;
  _TtC14softposreaderd12RemoteReader *v120;
  uint64_t v121;
  _TtC14softposreaderd12RemoteReader *v122;
  const char *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  unint64_t v130;
  unint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  SEL v137;
  id v138;
  id v139;
  id v140;
  id v141;
  id v142;
  id v143;
  _TtC14softposreaderd12RemoteReader *v144;
  char *v145;
  _TtC14softposreaderd12RemoteReader *v146;
  uint64_t v147;
  SEL v148;
  id v149;
  id v150;
  id v151;
  id v152;
  id v153;
  id v154;
  char *v155;
  uint64_t (*v156)(uint64_t, uint64_t, uint64_t);
  uint64_t v157;
  uint64_t v158;
  _TtC14softposreaderd12RemoteReader *v159;
  _TtC14softposreaderd12RemoteReader *v160;
  SEL v161;
  id v162;
  id v163;
  id v164;
  id v165;
  id v166;
  id v167;
  uint64_t v168;
  uint64_t inited;
  uint64_t v170;
  void *v171;
  SEL v172;
  id v173;
  id v174;
  id v175;
  id v176;
  id v177;
  id v178;
  BOOL v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  id v183;
  _TtC14softposreaderd12RemoteReader *v184;
  _TtC14softposreaderd12RemoteReader *v185;
  _TtC14softposreaderd12RemoteReader *v186;
  char *v187;
  uint64_t v188;
  void (*v189)(_QWORD, _QWORD, _QWORD);
  _BOOL4 v190;
  uint64_t v191;
  char *v192;
  char *v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;
  id v197;
  uint64_t v198;
  _TtC14softposreaderd12RemoteReader *v199;
  uint64_t v200;
  __int128 aBlock;
  __int128 v202;
  void (*v203)();
  uint64_t v204;

  v195 = a3;
  v9 = sub_100003A2C((uint64_t *)&unk_1001B36F0);
  v10 = __chkstk_darwin(v9);
  v192 = (char *)&v184 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v193 = (char *)&v184 - v13;
  __chkstk_darwin(v12);
  if (!a1)
  {
    if (a2)
    {
      swift_errorRetain();
      v197 = (id)sub_1000247AC(2026, 0, 0, a2);
      swift_errorRelease();
      a4(0, 0, v197);

    }
    return;
  }
  v187 = (char *)&v184 - v14;
  v197 = a1;
  v15 = objc_msgSend(v197, "stateInformation");
  if (!v15)
  {
    aBlock = 0u;
    v202 = 0u;
    goto LABEL_11;
  }
  v16 = v15;
  v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, (char *)&type metadata for Any + 8);

  if (!*(_QWORD *)(v17 + 16))
  {
    aBlock = 0u;
    v202 = 0u;
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v17, v18, v19, v20, v21, v22, v23, v24);
    goto LABEL_11;
  }
  sub_100005D5C(v17 + 32, (uint64_t)&aBlock);
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v17, v25, v26, v27, v28, v29, v30, v31);
  if (!*((_QWORD *)&v202 + 1))
  {
LABEL_11:
    sub_10005218C((uint64_t)&aBlock, &qword_1001B12E0);
    goto LABEL_12;
  }
  v32 = sub_100003A2C(&qword_1001AEAC8);
  if (!swift_dynamicCast(&v199, &aBlock, (char *)&type metadata for Any + 8, v32, 6))
LABEL_12:
    sub_1000047FC((uint64_t)&_swiftEmptyArrayStorage);
  v189 = (void (*)(_QWORD, _QWORD, _QWORD))a4;
  v191 = a5;
  v188 = swift_bridgeObjectRetain();
  v40 = sub_100070AAC(v188, v33, v34, v35, v36, v37, v38, v39);
  v42 = v41;
  v44 = v43;
  v46 = v45;
  if (qword_1001ACFC0 != -1)
    swift_once(&qword_1001ACFC0, sub_100060E50);
  v47 = type metadata accessor for Logger(0);
  v196 = sub_100003A14(v47, (uint64_t)qword_1001B05E0);
  v48 = Logger.logObject.getter(v196);
  v49 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v48, v49))
  {
    v50 = (uint8_t *)swift_slowAlloc(12, -1);
    v51 = swift_slowAlloc(32, -1);
    *(_QWORD *)&aBlock = v51;
    *(_DWORD *)v50 = 136315138;
    *(_QWORD *)&v194 = v40;
    if ((v46 & 1) != 0)
    {
      v54 = (_TtC14softposreaderd12RemoteReader *)0xE700000000000000;
      v52 = 0x6F666E69206F6ELL;
    }
    else
    {
      v52 = sub_10006995C();
      v54 = v53;
    }
    v199 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(v52, (unint64_t)v54, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v199, &v200, v50 + 4, v50 + 12);
    swift_bridgeObjectRelease(v54, v55, v56, v57, v58, v59, v60, v61);
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "SE memory: %s", v50, 0xCu);
    swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v50, -1, -1);

    v40 = v194;
    if ((v46 & 1) == 0)
      goto LABEL_22;
  }
  else
  {

    if ((v46 & 1) == 0)
    {
LABEL_22:
      v64 = v40 < 310001 || v42 < 9721 || v44 < 771;
      v190 = v64;
      goto LABEL_32;
    }
  }
  v190 = 0;
LABEL_32:
  v194 = xmmword_10015A5F0;
  if (qword_1001AD238 != -1)
    swift_once(&qword_1001AD238, sub_100116254);
  NFSecureElementManagerSession.select(_:)(AID_PAY_APPLET, *(unint64_t *)algn_1001B4F48);
  v65 = sub_10009B77C();
  v67 = v66;
  v68 = v191;
  v69 = (uint64_t)v187;
  swift_bridgeObjectRetain();
  sub_100069AAC(v65, v67, v69);
  v70 = type metadata accessor for UUID(0);
  v71 = *(_QWORD *)(v70 - 8);
  *(_QWORD *)&v194 = *(_QWORD *)(v71 + 48);
  v72 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v194)(v69, 1, v70);
  if ((_DWORD)v72 == 1)
  {
    sub_10005218C(v69, (uint64_t *)&unk_1001B36F0);
    swift_bridgeObjectRetain();
    v186 = v67;
  }
  else
  {
    v65 = UUID.uuidString.getter(v72);
    v186 = v73;
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v69, v70);
  }
  v74 = sub_10007F4E0();
  v187 = 0;
  v195 = v71;
  v185 = v67;
  v82 = *(_QWORD *)&v74->instance[8];
  if (v82)
  {
    v196 = v65;
    v83 = v74;
    v199 = &_swiftEmptyArrayStorage;
    sub_100091C44(0, v82, 0);
    v84 = 0;
    v184 = v83;
    v85 = &v83->instance[24];
    while (1)
    {
      v86 = (uint64_t *)&v85[16 * v84];
      v87 = *v86;
      v88 = v86[1];
      swift_bridgeObjectRetain_n(v88, 2);
      if (String.count.getter(v87, v88) != 32)
        break;
      v96 = HIBYTE(v88) & 0xF;
      *(_QWORD *)&aBlock = v87;
      *((_QWORD *)&aBlock + 1) = v88;
      if ((v88 & 0x2000000000000000) == 0)
        v96 = v87 & 0xFFFFFFFFFFFFLL;
      *(_QWORD *)&v202 = 0;
      *((_QWORD *)&v202 + 1) = v96;
      swift_bridgeObjectRetain();
      while (1)
      {
        v103 = String.Iterator.next()();
        if (!v103.value._object)
          break;
        Character.hexDigitValue.getter(v103.value._countAndFlagsBits, v103.value._object);
        v105 = (char)v104;
        swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v103.value._object, v104, v106, v107, v108, v109, v110, v111);
        if ((v105 & 1) != 0)
        {
          v119 = (_TtC14softposreaderd12RemoteReader *)*((_QWORD *)&aBlock + 1);
          swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v88, v112, v113, v114, v115, v116, v117, v118);
          v120 = v119;
          goto LABEL_47;
        }
      }
      swift_bridgeObjectRelease(*((_TtC14softposreaderd12RemoteReader **)&aBlock + 1), 0, v97, v98, v99, v100, v101, v102);
      *(_QWORD *)&aBlock = v87;
      *((_QWORD *)&aBlock + 1) = v88;
      swift_bridgeObjectRetain();
      v133 = String.index(_:offsetBy:)(15, 8, v87, v88);
      String.insert(_:at:)(45, 0xE100000000000000, v133);
      v134 = String.index(_:offsetBy:)(15, 13, v87, v88);
      String.insert(_:at:)(45, 0xE100000000000000, v134);
      v135 = String.index(_:offsetBy:)(15, 18, v87, v88);
      String.insert(_:at:)(45, 0xE100000000000000, v135);
      v136 = String.index(_:offsetBy:)(15, 23, v87, v88);
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v88, v137, v138, v139, v140, v141, v142, v143);
      String.insert(_:at:)(45, 0xE100000000000000, v136);
      v144 = (_TtC14softposreaderd12RemoteReader *)*((_QWORD *)&aBlock + 1);
      v145 = v192;
      UUID.init(uuidString:)(aBlock);
      v146 = v144;
      v147 = (uint64_t)v145;
      swift_bridgeObjectRelease(v146, v148, v149, v150, v151, v152, v153, v154);
      v155 = v145;
      v156 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v194;
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v194)(v155, 1, v70))
      {
        sub_10005218C(v147, (uint64_t *)&unk_1001B36F0);
LABEL_48:
        v121 = (uint64_t)v193;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v71 + 56))(v193, 1, 1, v70);
        goto LABEL_49;
      }
      v121 = (uint64_t)v193;
      (*(void (**)(char *))(v71 + 32))(v193);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v71 + 56))(v121, 0, 1, v70);
      v157 = v156(v121, 1, v70);
      if ((_DWORD)v157 != 1)
      {
        v158 = v121;
        v87 = UUID.uuidString.getter(v157);
        v160 = v159;
        (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v158, v70);
        swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v88, v161, v162, v163, v164, v165, v166, v167);
        v88 = (unint64_t)v160;
        goto LABEL_50;
      }
LABEL_49:
      sub_10005218C(v121, (uint64_t *)&unk_1001B36F0);
LABEL_50:
      v122 = v199;
      if ((swift_isUniquelyReferenced_nonNull_native(v199) & 1) == 0)
      {
        sub_100091C44(0, *(_QWORD *)&v122->instance[8] + 1, 1);
        v122 = v199;
      }
      v131 = *(_QWORD *)&v122->instance[8];
      v130 = *(_QWORD *)&v122->instance[16];
      if (v131 >= v130 >> 1)
      {
        sub_100091C44(v130 > 1, v131 + 1, 1);
        v122 = v199;
      }
      ++v84;
      *(_QWORD *)&v122->instance[8] = v131 + 1;
      v132 = (char *)v122 + 16 * v131;
      *((_QWORD *)v132 + 4) = v87;
      *((_QWORD *)v132 + 5) = v88;
      v71 = v195;
      if (v84 == v82)
      {
        swift_bridgeObjectRelease(v184, v123, v124, v125, v126, v127, v128, v129);
        v68 = v191;
        v67 = v185;
        v65 = v196;
        goto LABEL_61;
      }
    }
    v120 = (_TtC14softposreaderd12RemoteReader *)v88;
LABEL_47:
    swift_bridgeObjectRelease(v120, v89, v90, v91, v92, v93, v94, v95);
    goto LABEL_48;
  }
  swift_bridgeObjectRelease(v74, v75, v76, v77, v78, v79, v80, v81);
  v122 = &_swiftEmptyArrayStorage;
LABEL_61:
  v168 = sub_100003A2C(&qword_1001AE038);
  inited = swift_initStackObject(v168, &v198);
  *(_OWORD *)(inited + 16) = xmmword_10015E090;
  *(_QWORD *)(inited + 32) = 0x4965746174536573;
  *(_QWORD *)(inited + 40) = 0xEB000000006F666ELL;
  v170 = sub_100003A2C(&qword_1001AEAC8);
  *(_QWORD *)(inited + 48) = v188;
  *(_QWORD *)(inited + 72) = v170;
  strcpy((char *)(inited + 80), "globalConfigId");
  *(_BYTE *)(inited + 95) = -18;
  *(_QWORD *)(inited + 96) = v65;
  *(_QWORD *)(inited + 104) = v186;
  *(_QWORD *)(inited + 120) = &type metadata for String;
  *(_QWORD *)(inited + 128) = 0xD000000000000019;
  *(_QWORD *)(inited + 136) = 0x800000010016C680;
  *(_QWORD *)(inited + 168) = sub_100003A2C((uint64_t *)&unk_1001AE460);
  *(_QWORD *)(inited + 144) = v122;
  v171 = (void *)sub_1000047FC(inited);
  swift_bridgeObjectRelease(v67, v172, v173, v174, v175, v176, v177, v178);
  v179 = v190;
  v180 = swift_allocObject(&unk_10019C7F0, 49, 7);
  *(_QWORD *)(v180 + 16) = v171;
  *(_BYTE *)(v180 + 24) = 0;
  *(_QWORD *)(v180 + 32) = v189;
  *(_QWORD *)(v180 + 40) = v68;
  *(_BYTE *)(v180 + 48) = v179;
  v203 = sub_100070E24;
  v204 = v180;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v202 = sub_1000043B8;
  *((_QWORD *)&v202 + 1) = &unk_10019C808;
  v181 = _Block_copy(&aBlock);
  v182 = v204;
  sub_100070E38(v171, 0);
  swift_retain();
  swift_release(v182);
  v183 = v197;
  objc_msgSend(v197, "endSessionWithCompletion:", v181);

  _Block_release(v181);
  sub_100070E18(v171, 0);
}

uint64_t sub_10006995C()
{
  Swift::String v0;
  Swift::String v1;
  void *object;
  Swift::String v3;
  Swift::String v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;
  void *v8;

  _StringGuts.grow(_:)(72);
  v0._object = (void *)0x800000010016C520;
  v0._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3._countAndFlagsBits = 0xD000000000000018;
  v3._object = (void *)0x800000010016C540;
  String.append(_:)(v3);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v5 = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v5);
  v6._object = (void *)0x800000010016C560;
  v6._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v6);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v8 = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v8);
  return 0;
}

uint64_t sub_100069AAC@<X0>(uint64_t a1@<X0>, _TtC14softposreaderd12RemoteReader *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  const char *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  Swift::String_optional v23;
  SEL v24;
  char v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  const char *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  _TtC14softposreaderd12RemoteReader *v39;
  _TtC14softposreaderd12RemoteReader *v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  _TtC14softposreaderd12RemoteReader *v54;
  SEL v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _TtC14softposreaderd12RemoteReader *v65;
  uint64_t v66;
  uint64_t v67;

  v6 = sub_100003A2C((uint64_t *)&unk_1001B36F0);
  __chkstk_darwin(v6);
  v8 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (String.count.getter(a1, a2) == 32)
  {
    v16 = ((unint64_t)a2 >> 56) & 0xF;
    v64 = a1;
    v65 = a2;
    if (((unint64_t)a2 & 0x2000000000000000) == 0)
      v16 = a1 & 0xFFFFFFFFFFFFLL;
    v66 = 0;
    v67 = v16;
    swift_bridgeObjectRetain();
    while (1)
    {
      v23 = String.Iterator.next()();
      if (!v23.value._object)
        break;
      Character.hexDigitValue.getter(v23.value._countAndFlagsBits, v23.value._object);
      v25 = (char)v24;
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v23.value._object, v24, v26, v27, v28, v29, v30, v31);
      if ((v25 & 1) != 0)
      {
        v39 = v65;
        swift_bridgeObjectRelease(a2, v32, v33, v34, v35, v36, v37, v38);
        v40 = v39;
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease(v65, 0, v17, v18, v19, v20, v21, v22);
    v64 = a1;
    v65 = a2;
    swift_bridgeObjectRetain();
    v43 = String.index(_:offsetBy:)(15, 8, a1, a2);
    String.insert(_:at:)(45, 0xE100000000000000, v43);
    v44 = String.index(_:offsetBy:)(15, 13, a1, a2);
    String.insert(_:at:)(45, 0xE100000000000000, v44);
    v45 = String.index(_:offsetBy:)(15, 18, a1, a2);
    String.insert(_:at:)(45, 0xE100000000000000, v45);
    v46 = String.index(_:offsetBy:)(15, 23, a1, a2);
    swift_bridgeObjectRelease(a2, v47, v48, v49, v50, v51, v52, v53);
    String.insert(_:at:)(45, 0xE100000000000000, v46);
    v54 = v65;
    UUID.init(uuidString:)(v64);
    swift_bridgeObjectRelease(v54, v55, v56, v57, v58, v59, v60, v61);
    v62 = type metadata accessor for UUID(0);
    v63 = *(_QWORD *)(v62 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v8, 1, v62))
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v63 + 32))(a3, v8, v62);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v63 + 56))(a3, 0, 1, v62);
    }
    sub_10005218C((uint64_t)v8, (uint64_t *)&unk_1001B36F0);
  }
  else
  {
    v40 = a2;
LABEL_9:
    swift_bridgeObjectRelease(v40, v9, v10, v11, v12, v13, v14, v15);
  }
  v41 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(a3, 1, 1, v41);
}

void sub_100069CE8(void *a1, char a2, void (*a3)(void *, _QWORD, void *), uint64_t a4, char a5)
{
  id v8;

  if ((a2 & 1) != 0)
  {
    v8 = a1;
    a3(0, a5 & 1, a1);
    sub_100070E18(a1, 1);
  }
  else
  {
    a3(a1, a5 & 1, 0);
  }
}

unint64_t sub_100069D58(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  _BOOL4 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  Swift::String v65;
  SEL v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  _TtC14softposreaderd12RemoteReader *v95;
  void *v96;
  id v97;
  uint64_t v98;
  void *v99;
  unint64_t v100;
  _TtC14softposreaderd12RemoteReader *v101;
  _TtC14softposreaderd12RemoteReader *v102;
  NSObject *v103;
  os_log_type_t v104;
  uint8_t *v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  _BYTE *v120;
  _BYTE *v121;
  _BYTE *v122;
  uint64_t (*v123)(uint64_t, uint64_t, uint64_t);
  uint64_t v124;
  int v125;
  uint64_t v126;
  char *v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _TtC14softposreaderd12RemoteReader *v134;
  const char *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  char v142;
  char v143;
  id v144;
  char v145;
  char v146;
  _TtC14softposreaderd12RemoteReader *v147;
  SEL v148;
  id v149;
  id v150;
  id v151;
  id v152;
  id v153;
  id v154;
  id v155;
  char v156;
  char isUniquelyReferenced_nonNull_native;
  _TtC14softposreaderd12RemoteReader *v158;
  SEL v159;
  id v160;
  id v161;
  id v162;
  id v163;
  id v164;
  id v165;
  id v166;
  uint8_t *v167;
  unint64_t v168;
  uint8_t *v169;
  unint64_t v170;
  char v171;
  _TtC14softposreaderd12RemoteReader *v172;
  SEL v173;
  id v174;
  id v175;
  id v176;
  id v177;
  id v178;
  id v179;
  _TtC14softposreaderd12RemoteReader *v180;
  uint64_t v181;
  _TtC14softposreaderd12RemoteReader *v182;
  void *v183;
  void *v184;
  void *v185;
  void *v186;
  void *v187;
  void *v188;
  id v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char v194;
  _TtC14softposreaderd12RemoteReader *v195;
  SEL v196;
  id v197;
  id v198;
  id v199;
  id v200;
  id v201;
  id v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int (*v205)(uint64_t, uint64_t, uint64_t);
  uint64_t v206;
  int v207;
  void *v208;
  id v209;
  char v210;
  _TtC14softposreaderd12RemoteReader *v211;
  SEL v212;
  id v213;
  id v214;
  id v215;
  id v216;
  id v217;
  id v218;
  void *v219;
  id v220;
  char v221;
  _TtC14softposreaderd12RemoteReader *v222;
  SEL v223;
  id v224;
  id v225;
  id v226;
  id v227;
  id v228;
  id v229;
  uint64_t v230;
  NSObject *v231;
  os_log_type_t v232;
  uint8_t *v233;
  uint64_t v234;
  const char *v235;
  void *v236;
  void *v237;
  void *v238;
  void *v239;
  void *v240;
  void *v241;
  _TtC14softposreaderd12RemoteReader *v242;
  _TtC14softposreaderd12RemoteReader *v243;
  _TtC14softposreaderd12RemoteReader *v244;
  _TtC14softposreaderd12RemoteReader *v245;
  uint64_t v246;
  uint64_t v247;
  SEL v248;
  id v249;
  id v250;
  id v251;
  id v252;
  id v253;
  id v254;
  const char *v255;
  void *v256;
  void *v257;
  void *v258;
  void *v259;
  void *v260;
  void *v261;
  char v262;
  SEL v263;
  id v264;
  id v265;
  id v266;
  id v267;
  id v268;
  id v269;
  const char *v270;
  void *v271;
  void *v272;
  void *v273;
  void *v274;
  void *v275;
  uint64_t v276;
  void *v277;
  char v278;
  SEL v279;
  id v280;
  id v281;
  id v282;
  id v283;
  id v284;
  id v285;
  SEL v286;
  id v287;
  id v288;
  id v289;
  id v290;
  id v291;
  id v292;
  uint64_t v293;
  uint64_t v294;
  NSObject *v295;
  os_log_type_t v296;
  _BOOL4 v297;
  uint8_t *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  const char *v303;
  void *v304;
  void *v305;
  void *v306;
  void *v307;
  void *v308;
  void *v309;
  const char *v310;
  void *v311;
  void *v312;
  void *v313;
  void *v314;
  void *v315;
  void *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  const char *v323;
  void *v324;
  void *v325;
  void *v326;
  void *v327;
  void *v328;
  void *v329;
  char v330;
  char v331;
  _TtC14softposreaderd12RemoteReader *v332;
  void (*v333)(_TtC14softposreaderd12RemoteReader *, uint64_t);
  const char *v334;
  void *v335;
  void *v336;
  void *v337;
  void *v338;
  void *v339;
  void *v340;
  _TtC14softposreaderd12RemoteReader *v341;
  _TtC14softposreaderd12RemoteReader *v342;
  _TtC14softposreaderd12RemoteReader *v343;
  _TtC14softposreaderd12RemoteReader *v344;
  uint64_t v345;
  uint64_t v346;
  SEL v347;
  id v348;
  id v349;
  id v350;
  id v351;
  id v352;
  id v353;
  const char *v354;
  void *v355;
  void *v356;
  void *v357;
  void *v358;
  void *v359;
  void *v360;
  char v361;
  SEL v362;
  id v363;
  id v364;
  id v365;
  id v366;
  id v367;
  id v368;
  SEL v369;
  id v370;
  id v371;
  id v372;
  id v373;
  id v374;
  id v375;
  const char *v376;
  void *v377;
  void *v378;
  void *v379;
  void *v380;
  void *v381;
  void *v382;
  char v383;
  void (*v384)(_TtC14softposreaderd12RemoteReader *, uint64_t);
  uint64_t v385;
  SEL v386;
  id v387;
  id v388;
  id v389;
  id v390;
  id v391;
  id v392;
  SEL v393;
  id v394;
  id v395;
  id v396;
  id v397;
  id v398;
  id v399;
  char v400;
  SEL v401;
  id v402;
  id v403;
  id v404;
  id v405;
  id v406;
  id v407;
  SEL v408;
  id v409;
  id v410;
  id v411;
  id v412;
  id v413;
  id v414;
  SEL v415;
  id v416;
  id v417;
  id v418;
  id v419;
  id v420;
  id v421;
  uint64_t v422;
  SEL v423;
  id v424;
  id v425;
  id v426;
  id v427;
  id v428;
  id v429;
  NSObject *v430;
  os_log_type_t v431;
  _BOOL4 v432;
  uint8_t *v433;
  unint64_t v434;
  uint64_t v435;
  uint64_t v436;
  void *v437;
  id v438;
  NSObject *v439;
  os_log_type_t v440;
  uint8_t *v441;
  uint8_t *v442;
  id v443;
  char v444;
  _TtC14softposreaderd12RemoteReader *v445;
  SEL v446;
  id v447;
  id v448;
  id v449;
  id v450;
  id v451;
  id v452;
  uint64_t v453;
  char *v454;
  uint64_t v455;
  uint64_t (*v456)(uint64_t, uint64_t, uint64_t);
  int v457;
  id v458;
  char v459;
  uint64_t v460;
  _TtC14softposreaderd12RemoteReader *v461;
  _TtC14softposreaderd12RemoteReader *v462;
  _TtC14softposreaderd12RemoteReader *v463;
  _TtC14softposreaderd12RemoteReader *v464;
  const char *v465;
  void *v466;
  void *v467;
  void *v468;
  void *v469;
  void *v470;
  void *v471;
  _TtC14softposreaderd12RemoteReader *v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  const char *v476;
  void *v477;
  void *v478;
  void *v479;
  void *v480;
  void *v481;
  void *v482;
  uint64_t v483;
  char v484;
  _TtC14softposreaderd12RemoteReader *v485;
  SEL v486;
  id v487;
  id v488;
  id v489;
  id v490;
  id v491;
  id v492;
  NSObject *v493;
  os_log_type_t v494;
  uint64_t v495;
  uint64_t v496;
  void *v497;
  id v498;
  char v499;
  _TtC14softposreaderd12RemoteReader *v500;
  SEL v501;
  id v502;
  id v503;
  id v504;
  id v505;
  id v506;
  id v507;
  uint64_t v508;
  NSObject *v509;
  os_log_type_t v510;
  uint8_t *v511;
  uint8_t *v512;
  void *v513;
  id v514;
  char v515;
  _TtC14softposreaderd12RemoteReader *v516;
  SEL v517;
  id v518;
  id v519;
  id v520;
  id v521;
  id v522;
  id v523;
  uint64_t v524;
  uint64_t v525;
  char *v526;
  _BYTE *v527;
  char *v528;
  uint64_t v529;
  int v530;
  uint64_t v531;
  uint64_t v532;
  NSObject *v533;
  os_log_type_t v534;
  uint8_t *v535;
  uint8_t *v536;
  void *v537;
  id v538;
  char v539;
  _TtC14softposreaderd12RemoteReader *v540;
  SEL v541;
  id v542;
  id v543;
  id v544;
  id v545;
  id v546;
  id v547;
  uint64_t v548;
  uint64_t v549;
  char *v550;
  _BYTE *v551;
  char *v552;
  uint64_t v553;
  int v554;
  uint64_t v555;
  uint64_t v556;
  NSObject *v557;
  os_log_type_t v558;
  uint8_t *v559;
  uint8_t *v560;
  void *v561;
  id v562;
  char v563;
  _TtC14softposreaderd12RemoteReader *v564;
  SEL v565;
  id v566;
  id v567;
  id v568;
  id v569;
  id v570;
  id v571;
  uint64_t v572;
  void *v573;
  id v574;
  char *v575;
  _BYTE *v576;
  unint64_t v577;
  id v578;
  char v579;
  _TtC14softposreaderd12RemoteReader *v580;
  SEL v581;
  id v582;
  id v583;
  id v584;
  id v585;
  id v586;
  id v587;
  _QWORD *v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  _QWORD *v593;
  void *v594;
  void *v595;
  void *v596;
  __int16 v597;
  void *v598;
  _QWORD *v599;
  _QWORD *v600;
  uint64_t v601;
  _QWORD *v602;
  uint64_t v603;
  id v604;
  id v605;
  void *v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  char v610;
  _TtC14softposreaderd12RemoteReader *v611;
  SEL v612;
  id v613;
  id v614;
  id v615;
  id v616;
  id v617;
  id v618;
  uint64_t v619;
  char *v620;
  _TtC14softposreaderd12RemoteReader *v621;
  _QWORD *v622;
  __int16 v623;
  uint64_t v624;
  uint64_t v625;
  NSObject *v626;
  os_log_type_t v627;
  uint8_t *v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  unint64_t v632;
  _TtC14softposreaderd12RemoteReader *v633;
  _TtC14softposreaderd12RemoteReader *v634;
  SEL v635;
  id v636;
  id v637;
  id v638;
  id v639;
  id v640;
  id v641;
  uint64_t v642;
  SEL v643;
  id v644;
  id v645;
  id v646;
  id v647;
  id v648;
  id v649;
  __int16 v650;
  void *v651;
  id v652;
  char v653;
  _TtC14softposreaderd12RemoteReader *v654;
  SEL v655;
  id v656;
  id v657;
  id v658;
  id v659;
  id v660;
  id v661;
  void *v662;
  id v663;
  char v664;
  _TtC14softposreaderd12RemoteReader *v665;
  SEL v666;
  id v667;
  id v668;
  id v669;
  id v670;
  id v671;
  id v672;
  uint64_t v673;
  const char *v674;
  void *v675;
  void *v676;
  void *v677;
  void *v678;
  void *v679;
  void *v680;
  _TtC14softposreaderd12RemoteReader *v681;
  NSObject *v682;
  os_log_type_t v683;
  _BOOL4 v684;
  uint8_t *v685;
  void *v686;
  _QWORD *v687;
  void *v688;
  id v689;
  unsigned __int8 v690;
  char v691;
  _TtC14softposreaderd12RemoteReader *v692;
  SEL v693;
  id v694;
  id v695;
  id v696;
  id v697;
  id v698;
  id v699;
  void *v700;
  void *v701;
  id v702;
  id v703;
  id v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  char v708;
  _TtC14softposreaderd12RemoteReader *v709;
  SEL v710;
  id v711;
  id v712;
  id v713;
  id v714;
  id v715;
  id v716;
  uint64_t v717;
  id v718;
  unsigned __int8 v719;
  char v720;
  _TtC14softposreaderd12RemoteReader *v721;
  SEL v722;
  id v723;
  id v724;
  id v725;
  id v726;
  id v727;
  id v728;
  _QWORD *v729;
  id v730;
  char v731;
  NSObject *v732;
  os_log_type_t v733;
  uint8_t *v734;
  void *v735;
  id v736;
  char v737;
  _TtC14softposreaderd12RemoteReader *v738;
  SEL v739;
  id v740;
  id v741;
  id v742;
  id v743;
  id v744;
  id v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  _TtC14softposreaderd12RemoteReader *v749;
  id v750;
  char v751;
  _TtC14softposreaderd12RemoteReader *v752;
  id v753;
  char v754;
  _TtC14softposreaderd12RemoteReader *v755;
  id v756;
  char v757;
  _TtC14softposreaderd12RemoteReader *v758;
  id v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  void *v763;
  void *v764;
  void *v765;
  void *v766;
  char v767;
  os_unfair_lock_s *v768;
  uint64_t v769;
  SEL v770;
  id v771;
  id v772;
  id v773;
  id v774;
  id v775;
  id v776;
  os_unfair_lock_s *v777;
  _TtC14softposreaderd12RemoteReader **v778;
  os_unfair_lock_s *v779;
  _TtC14softposreaderd12RemoteReader *v780;
  uint64_t v781;
  uint64_t v782;
  SEL v783;
  id v784;
  id v785;
  id v786;
  id v787;
  id v788;
  id v789;
  uint64_t v790;
  void *v791;
  uint64_t v792;
  uint64_t v793;
  void *v794;
  void *v795;
  void *v796;
  void *v797;
  void *v798;
  SEL v799;
  id v800;
  id v801;
  id v802;
  id v803;
  id v804;
  id v805;
  uint64_t v806;
  char *v807;
  uint64_t v808;
  NSObject *v809;
  os_log_type_t v810;
  uint8_t *v811;
  uint64_t v812;
  uint64_t v813;
  unint64_t v814;
  _TtC14softposreaderd12RemoteReader *v815;
  SEL v816;
  id v817;
  id v818;
  id v819;
  id v820;
  id v821;
  id v822;
  SEL v823;
  id v824;
  id v825;
  id v826;
  id v827;
  id v828;
  id v829;
  uint64_t v830;
  SEL v831;
  id v832;
  id v833;
  id v834;
  id v835;
  id v836;
  id v837;
  SEL v838;
  id v839;
  id v840;
  id v841;
  id v842;
  id v843;
  id v844;
  unint64_t result;
  void *v846;
  id v847;
  char v848;
  _TtC14softposreaderd12RemoteReader *v849;
  SEL v850;
  id v851;
  id v852;
  id v853;
  id v854;
  id v855;
  id v856;
  _QWORD *v857;
  uint64_t v858;
  uint64_t v859;
  unsigned __int8 *v860;
  uint64_t v861;
  unsigned __int8 *v862;
  uint64_t v863;
  _TtC14softposreaderd12RemoteReader *v864;
  const char *v865;
  void *v866;
  void *v867;
  void *v868;
  void *v869;
  void *v870;
  void *v871;
  uint64_t v872;
  void *v873;
  void *v874;
  void *v875;
  void *v876;
  void *v877;
  void *v878;
  Swift::String_optional v879;
  SEL v880;
  char v881;
  id v882;
  id v883;
  id v884;
  id v885;
  id v886;
  id v887;
  const char *v888;
  void *v889;
  void *v890;
  void *v891;
  void *v892;
  void *v893;
  void *v894;
  _TtC14softposreaderd12RemoteReader *v895;
  SEL v896;
  id v897;
  id v898;
  id v899;
  id v900;
  id v901;
  id v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  SEL v907;
  id v908;
  id v909;
  id v910;
  id v911;
  id v912;
  id v913;
  _TtC14softposreaderd12RemoteReader *v914;
  uint64_t v915;
  SEL v916;
  id v917;
  id v918;
  id v919;
  id v920;
  id v921;
  id v922;
  SEL v923;
  id v924;
  id v925;
  id v926;
  id v927;
  id v928;
  id v929;
  const char *v930;
  void *v931;
  void *v932;
  void *v933;
  void *v934;
  void *v935;
  void *v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  SEL v941;
  id v942;
  id v943;
  id v944;
  id v945;
  id v946;
  id v947;
  _TtC14softposreaderd12RemoteReader *v948;
  unint64_t v949;
  unint64_t v950;
  char *v951;
  uint64_t v952;
  _TtC14softposreaderd12RemoteReader *v953;
  _TtC14softposreaderd12RemoteReader *v954;
  _TtC14softposreaderd12RemoteReader *v955;
  _TtC14softposreaderd12RemoteReader *v956;
  uint64_t v957;
  NSObject *v958;
  os_log_type_t v959;
  int v960;
  uint64_t v961;
  uint64_t v962;
  const char *v963;
  _TtC14softposreaderd12RemoteReader *v964;
  id v965;
  id v966;
  id v967;
  id v968;
  id v969;
  id v970;
  SEL v971;
  id v972;
  id v973;
  id v974;
  id v975;
  id v976;
  id v977;
  SEL v978;
  id v979;
  id v980;
  id v981;
  id v982;
  id v983;
  id v984;
  uint64_t v985;
  uint64_t v986;
  const char *v987;
  unint64_t v988;
  id v989;
  id v990;
  id v991;
  id v992;
  id v993;
  id v994;
  uint64_t v995;
  SEL v996;
  id v997;
  id v998;
  id v999;
  id v1000;
  id v1001;
  id v1002;
  _TtC14softposreaderd12RemoteReader *v1003;
  SEL v1004;
  id v1005;
  id v1006;
  id v1007;
  id v1008;
  id v1009;
  id v1010;
  _TtC14softposreaderd12RemoteReader *v1011;
  uint64_t v1012;
  SEL v1013;
  id v1014;
  id v1015;
  id v1016;
  id v1017;
  id v1018;
  id v1019;
  SEL v1020;
  id v1021;
  id v1022;
  id v1023;
  id v1024;
  id v1025;
  id v1026;
  SEL v1027;
  id v1028;
  id v1029;
  id v1030;
  id v1031;
  id v1032;
  id v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  void *v1039;
  uint64_t v1040;
  unsigned __int8 v1041;
  uint64_t v1042;
  id v1043;
  id v1044;
  const char *v1045;
  id v1046;
  id v1047;
  id v1048;
  id v1049;
  id v1050;
  id v1051;
  uint64_t v1052;
  NSObject *v1053;
  os_log_type_t v1054;
  uint8_t *v1055;
  uint64_t v1056;
  void *v1057;
  SEL v1058;
  id v1059;
  id v1060;
  id v1061;
  id v1062;
  id v1063;
  id v1064;
  SEL v1065;
  id v1066;
  id v1067;
  id v1068;
  id v1069;
  id v1070;
  id v1071;
  SEL v1072;
  id v1073;
  id v1074;
  id v1075;
  id v1076;
  id v1077;
  id v1078;
  char v1079;
  char *v1080;
  _TtC14softposreaderd12RemoteReader *v1081;
  _QWORD v1082[2];
  void (*v1083)(char *, uint64_t, uint64_t, uint64_t);
  char *v1084;
  uint64_t v1085;
  char *v1086;
  char *v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  char *v1091;
  uint64_t v1092;
  uint64_t v1093;
  _TtC14softposreaderd12RemoteReader *v1094;
  char *v1095;
  char *v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  char *v1102;
  uint64_t v1103;
  _TtC14softposreaderd12RemoteReader *v1104;
  uint64_t v1105;
  char *v1106;
  uint64_t v1107;
  uint64_t v1108;
  _TtC14softposreaderd12RemoteReader *v1109;
  char *v1110;
  _TtC14softposreaderd12RemoteReader *v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  unint64_t v1115;
  uint64_t v1116;
  char *v1117;
  uint64_t v1118;
  _QWORD *v1119;
  unint64_t v1120;
  char *v1121;
  _TtC14softposreaderd12RemoteReader *v1122;
  _TtC14softposreaderd12RemoteReader *v1123;
  __int128 v1124;
  __int128 v1125;
  _TtC14softposreaderd12RemoteReader *v1126;
  _TtC14softposreaderd12RemoteReader *v1127;
  uint64_t v1128;
  uint64_t v1129;
  _OWORD v1130[2];
  _TtC14softposreaderd12RemoteReader *v1131;
  _TtC14softposreaderd12RemoteReader *v1132;
  uint64_t v1133;
  _OWORD v1134[18];

  v4 = v3;
  v1118 = a1;
  v7 = type metadata accessor for Logger(0);
  v1108 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v1110 = (char *)v1082 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)v1082 - v10;
  v1109 = (_TtC14softposreaderd12RemoteReader *)type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate(0);
  v1093 = *(_QWORD *)&v1109[-1].instance[32];
  v12 = __chkstk_darwin(v1109);
  v1103 = (uint64_t)v1082 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v1111 = (_TtC14softposreaderd12RemoteReader *)((char *)v1082 - v14);
  v1116 = type metadata accessor for UUID(0);
  v1114 = *(_QWORD *)(v1116 - 8);
  v15 = __chkstk_darwin(v1116);
  v1104 = (_TtC14softposreaderd12RemoteReader *)((char *)v1082 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = __chkstk_darwin(v15);
  v1094 = (_TtC14softposreaderd12RemoteReader *)((char *)v1082 - v18);
  v19 = __chkstk_darwin(v17);
  v1091 = (char *)v1082 - v20;
  __chkstk_darwin(v19);
  v1084 = (char *)v1082 - v21;
  v22 = sub_100003A2C(&qword_1001AD9E0);
  __chkstk_darwin(v22);
  v1100 = (uint64_t)v1082 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1101 = type metadata accessor for Date(0, v24);
  v1105 = *(_QWORD *)(v1101 - 8);
  __chkstk_darwin(v1101);
  v1096 = (char *)v1082 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100003A2C((uint64_t *)&unk_1001B36F0);
  v27 = __chkstk_darwin(v26);
  v1097 = (uint64_t)v1082 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v27);
  v1089 = (uint64_t)v1082 - v30;
  v31 = __chkstk_darwin(v29);
  v1088 = (uint64_t)v1082 - v32;
  v33 = __chkstk_darwin(v31);
  v1095 = (char *)v1082 - v34;
  v35 = __chkstk_darwin(v33);
  v1102 = (char *)v1082 - v36;
  v37 = __chkstk_darwin(v35);
  v1085 = (uint64_t)v1082 - v38;
  v39 = __chkstk_darwin(v37);
  v1098 = (uint64_t)v1082 - v40;
  v41 = __chkstk_darwin(v39);
  v1092 = (uint64_t)v1082 - v42;
  v43 = __chkstk_darwin(v41);
  v1090 = (uint64_t)v1082 - v44;
  v45 = __chkstk_darwin(v43);
  v1112 = (uint64_t)v1082 - v46;
  v47 = __chkstk_darwin(v45);
  v1099 = (uint64_t)v1082 - v48;
  v49 = __chkstk_darwin(v47);
  v1087 = (char *)v1082 - v50;
  v51 = __chkstk_darwin(v49);
  v1086 = (char *)v1082 - v52;
  v53 = __chkstk_darwin(v51);
  v1115 = (unint64_t)v1082 - v54;
  __chkstk_darwin(v53);
  v56 = (char *)v1082 - v55;
  if (qword_1001ACFC0 != -1)
    swift_once(&qword_1001ACFC0, sub_100060E50);
  v57 = sub_100003A14(v7, (uint64_t)qword_1001B05E0);
  v58 = swift_bridgeObjectRetain_n(a2, 2);
  v1113 = v57;
  v59 = Logger.logObject.getter(v58);
  v60 = static os_log_type_t.default.getter();
  v61 = os_log_type_enabled(v59, v60);
  v1117 = v56;
  v1106 = v11;
  v1107 = v7;
  v1121 = (char *)a3;
  if (!v61)
  {

    v74 = swift_bridgeObjectRelease_n(a2, 2);
    if ((a3 & 0x3FFF) != 0)
      goto LABEL_5;
LABEL_16:
    v103 = Logger.logObject.getter(v74);
    v104 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v103, v104))
    {
      v105 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v105 = 0;
      _os_log_impl((void *)&_mh_execute_header, v103, v104, "Received 0 status, returning empty dictionary", v105, 2u);
      swift_slowDealloc(v105, -1, -1);
    }

    return sub_1000047FC((uint64_t)&_swiftEmptyArrayStorage);
  }
  v62 = swift_slowAlloc(22, -1);
  v1120 = a2;
  v63 = v62;
  v64 = swift_slowAlloc(32, -1);
  *(_QWORD *)&v1124 = v64;
  *(_DWORD *)v63 = 136315394;
  v65 = String.redactedToken()();
  *(_QWORD *)&v1130[0] = sub_1000056EC(v65._countAndFlagsBits, (unint64_t)v65._object, (uint64_t *)&v1124);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v1130, (char *)v1130 + 8, v63 + 4, v63 + 12);
  swift_bridgeObjectRelease_n(v1120, 2);
  v4 = v3;
  v56 = v1117;
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v65._object, v66, v67, v68, v69, v70, v71, v72);
  *(_WORD *)(v63 + 12) = 2048;
  *(_QWORD *)&v1130[0] = v1121;
  a3 = (uint64_t)v1121;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v1130, (char *)v1130 + 8, v63 + 14, v63 + 22);
  _os_log_impl((void *)&_mh_execute_header, v59, v60, "Configurator.status(token: %s, options: %ld)", (uint8_t *)v63, 0x16u);
  swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v64, -1, -1);
  v73 = v63;
  a2 = v1120;
  swift_slowDealloc(v73, -1, -1);

  if ((a3 & 0x3FFF) == 0)
    goto LABEL_16;
LABEL_5:
  if (a3 >= 0x4000)
  {
    v75 = Logger.logObject.getter(v74);
    v76 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v75, v76))
    {
      v77 = swift_slowAlloc(22, -1);
      *(_DWORD *)v77 = 134218240;
      *(_QWORD *)&v1124 = 0x3FFFLL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v1124, (char *)&v1124 + 8, v77 + 4, v77 + 12);
      *(_WORD *)(v77 + 12) = 2048;
      *(_QWORD *)&v1124 = 14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v1124, (char *)&v1124 + 8, v77 + 14, v77 + 22);
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "Received status option greater than %ld. Ignoring all but last %ld bits.", (uint8_t *)v77, 0x16u);
      swift_slowDealloc(v77, -1, -1);
    }

  }
  v78 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1114 + 56);
  v79 = v1116;
  v78(v56, 1, 1, v1116);
  v1083 = v78;
  v78((char *)v1115, 1, 1, v79);
  v87 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v87 = v1118 & 0xFFFFFFFFFFFFLL;
  if (v87)
  {
    v88 = v4;
    v89 = v1119;
    v90 = v1119 + 41;
    swift_beginAccess(v1119 + 41, &v1133, 0, 0);
    v91 = v89[44];
    v92 = sub_100005EF8(v90, v91);
    v1082[1] = v1082;
    v93 = *(_QWORD *)(v91 - 8);
    __chkstk_darwin(v92);
    v95 = (_TtC14softposreaderd12RemoteReader *)((char *)v1082 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(_TtC14softposreaderd12RemoteReader *))(v93 + 16))(v95);
    v96 = (void *)*((_QWORD *)v95->super.isa + 2);
    swift_bridgeObjectRetain();
    v97 = objc_msgSend(v96, "serialNumber");
    if (!v97)
    {
      __break(1u);
LABEL_270:
      __break(1u);
      goto LABEL_271;
    }
    v98 = a2;
    v99 = v97;
    v100 = static String._unconditionallyBridgeFromObjectiveC(_:)(v97);
    v102 = v101;

    (*(void (**)(_TtC14softposreaderd12RemoteReader *, uint64_t))(v93 + 8))(v95, v91);
    sub_1001250B4(v1118, v98, v100, v102, v1134);
    v4 = v88;
    if (v88)
    {
      sub_10005218C(v1115, (uint64_t *)&unk_1001B36F0);
      sub_10005218C((uint64_t)v1117, (uint64_t *)&unk_1001B36F0);
      return (unint64_t)v95;
    }
    a2 = v98;
    sub_100005EF8(v1119 + 24, v1119[27]);
    v106 = v1100;
    sub_10001E61C(v1100);
    v95 = (_TtC14softposreaderd12RemoteReader *)v1105;
    v107 = v1101;
    v108 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1105 + 48))(v106, 1, v1101);
    v56 = v1117;
    if (v108 == 1)
    {
      sub_10005218C(v106, &qword_1001AD9E0);
      v109 = sub_1000247AC(2039, 0xD00000000000001ELL, (void *)0x800000010016C470, 0);
      swift_willThrow(v109);
      sub_100054898(v1134);
LABEL_22:
      sub_10005218C(v1115, (uint64_t *)&unk_1001B36F0);
      sub_10005218C((uint64_t)v56, (uint64_t *)&unk_1001B36F0);
      return (unint64_t)v95;
    }
    v110 = (uint64_t)v1096;
    (*(void (**)(char *, uint64_t, uint64_t))&v95->instance[24])(v1096, v106, v107);
    sub_100124D14(v110);
    v111 = v1086;
    sub_100124964(v1086);
    v112 = (uint64_t)v111;
    v113 = v1114;
    v114 = v111;
    v115 = v1116;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1114 + 48))(v114, 1, v1116) == 1)
    {
      sub_10005218C(v112, (uint64_t *)&unk_1001B36F0);
      v116 = sub_1000247AC(2011, 0, 0, 0);
      swift_willThrow(v116);
      sub_100054898(v1134);
      (*(void (**)(char *, uint64_t))v95->instance)(v1096, v107);
      goto LABEL_22;
    }
    sub_10005218C((uint64_t)v56, (uint64_t *)&unk_1001B36F0);
    v117 = v1084;
    (*(void (**)(char *, uint64_t, uint64_t))(v113 + 32))(v1084, v112, v115);
    (*(void (**)(char *, char *, uint64_t))(v113 + 16))(v56, v117, v115);
    v1083(v56, 0, 1, v115);
    sub_100124B10(v1087);
    sub_100054898(v1134);
    (*(void (**)(char *, uint64_t))(v113 + 8))(v117, v115);
    (*(void (**)(char *, uint64_t))(v1105 + 8))(v1096, v107);
    v118 = v1115;
    sub_10005218C(v1115, (uint64_t *)&unk_1001B36F0);
    sub_100024374((uint64_t)v1087, v118, (uint64_t *)&unk_1001B36F0);
    a3 = (uint64_t)v1121;
  }
  v1123 = (_TtC14softposreaderd12RemoteReader *)sub_1000E8C90((uint64_t)&_swiftEmptyArrayStorage, v80, v81, v82, v83, v84, v85, v86);
  v119 = type metadata accessor for StatusInspector();
  swift_allocObject(v119, 89, 7);
  sub_100033928();
  v121 = v120;
  v1120 = a2;
  if ((a3 & 0x1000) != 0)
    goto LABEL_40;
  v1105 = v4;
  v122 = v120;
  a2 = v1115;
  v4 = v1099;
  sub_100005EB4(v1115, v1099, (uint64_t *)&unk_1001B36F0);
  v123 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1114 + 48);
  v124 = v1116;
  v125 = v123(v4, 1, v1116);
  v126 = sub_10005218C(v4, (uint64_t *)&unk_1001B36F0);
  if (v125 == 1)
  {
    v127 = v1110;
    a2 = v1120;
    v121 = v122;
    v56 = v1117;
    v4 = v1105;
    if ((a3 & 1) == 0)
      goto LABEL_29;
    goto LABEL_45;
  }
  sub_100008390((uint64_t)(v1119 + 46), (uint64_t)&v1124);
  v128 = sub_100005EF8(&v1124, *((uint64_t *)&v1125 + 1));
  v129 = v1112;
  sub_100005EB4(a2, v1112, (uint64_t *)&unk_1001B36F0);
  if (v123(v129, 1, v124) == 1)
  {
LABEL_271:
    __break(1u);
    goto LABEL_272;
  }
  v130 = *(_QWORD *)(*v128 + 72);
  v131 = *(_QWORD *)(v130 + 16);
  v121 = v122;
  if (!v131)
  {
    v56 = v1117;
    v4 = v1105;
LABEL_44:
    (*(void (**)(uint64_t, uint64_t))(v1114 + 8))(v1112, v1116);
    v126 = sub_100005D3C(&v1124);
    v127 = v1110;
    a2 = v1120;
    if ((a3 & 1) == 0)
      goto LABEL_29;
LABEL_45:
    v155 = SPRConfigurationStatusKernelNeeded;
    v156 = sub_100032C9C();
    if (v156 == 2)
    {
      sub_10005808C((uint64_t)v155, &v1124);

      v126 = sub_10005218C((uint64_t)&v1124, &qword_1001B12E0);
      if ((a3 & 0x100) != 0)
        goto LABEL_49;
    }
    else
    {
      *((_QWORD *)&v1125 + 1) = &type metadata for Bool;
      LOBYTE(v1124) = v156 & 1;
      sub_100005D2C(&v1124, v1130);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1123);
      v1132 = v1123;
      v1123 = (_TtC14softposreaderd12RemoteReader *)0x8000000000000000;
      sub_1000EBF18(v1130, v155, isUniquelyReferenced_nonNull_native);
      v158 = v1123;
      v1123 = v1132;

      swift_bridgeObjectRelease(v158, v159, v160, v161, v162, v163, v164, v165);
      if ((a3 & 0x100) != 0)
        goto LABEL_49;
    }
LABEL_30:
    v1101 = (uint64_t)v121;
    if ((a3 & 2) == 0)
      goto LABEL_64;
LABEL_55:
    v126 = (uint64_t)sub_100032FAC();
    if (v126)
    {
      v180 = (_TtC14softposreaderd12RemoteReader *)v126;
      v181 = sub_10003321C();
      if (v182)
      {
        v1111 = v182;
        v1100 = v181;
        v1105 = v4;
        v1112 = (uint64_t)v180;
        *(_QWORD *)&v1124 = v180;
        v189 = SPRConfigurationStatusProfileIDList;
        v190 = sub_100003A2C((uint64_t *)&unk_1001AE460);
        v191 = sub_1000248C8();
        v192 = BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v190, v191);
        *((_QWORD *)&v1125 + 1) = &type metadata for String;
        *(_QWORD *)&v1124 = v192;
        *((_QWORD *)&v1124 + 1) = v193;
        sub_100005D2C(&v1124, v1130);
        v194 = swift_isUniquelyReferenced_nonNull_native(v1123);
        v1132 = v1123;
        v1123 = (_TtC14softposreaderd12RemoteReader *)0x8000000000000000;
        sub_1000EBF18(v1130, v189, v194);
        v195 = v1123;
        v1123 = v1132;

        swift_bridgeObjectRelease(v195, v196, v197, v198, v199, v200, v201, v202);
        v203 = v1090;
        sub_100005EB4((uint64_t)v56, v1090, (uint64_t *)&unk_1001B36F0);
        v204 = v1114;
        v205 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1114 + 48);
        v206 = v1116;
        if (v205(v203, 1, v1116) == 1)
        {
          sub_10005218C(v203, (uint64_t *)&unk_1001B36F0);
          v207 = 2;
        }
        else
        {
          v234 = (uint64_t)v1091;
          (*(void (**)(char *, uint64_t, uint64_t))(v204 + 32))(v1091, v203, v206);
          sub_1000B11D4(v234, &v1124);
          v242 = (_TtC14softposreaderd12RemoteReader *)*((_QWORD *)&v1124 + 1);
          v243 = (_TtC14softposreaderd12RemoteReader *)*((_QWORD *)&v1125 + 1);
          v244 = v1126;
          v245 = v1127;
          if (*((_QWORD *)&v1124 + 1))
          {
            v246 = v1124;
            v247 = v1125;
            swift_bridgeObjectRelease(v1126, v235, v236, v237, v238, v239, v240, v241);
            swift_bridgeObjectRelease(v245, v248, v249, v250, v251, v252, v253, v254);
            if (v243)
            {
              v262 = sub_100060D8C(v246, (uint64_t)v242, (_QWORD *)v1112);
              swift_bridgeObjectRelease(v242, v263, v264, v265, v266, v267, v268, v269);
              v276 = v1114;
              if ((v262 & 1) != 0)
              {
                v277 = (void *)v1100;
                if (v247 == v1100 && v243 == v1111)
                  v278 = 1;
                else
                  v278 = _stringCompareWithSmolCheck(_:_:expecting:)(v247, v243, v1100, v1111, 0);
                v121 = (_BYTE *)v1101;
                a2 = v1120;
                v300 = (uint64_t)v1094;
                swift_bridgeObjectRelease(v243, v270, v277, v271, v272, v273, v274, v275);
                (*(void (**)(char *, uint64_t))(v276 + 8))(v1091, v1116);
                v400 = v278 ^ 1;
              }
              else
              {
                (*(void (**)(char *, uint64_t))(v1114 + 8))(v1091, v1116);
                swift_bridgeObjectRelease(v243, v393, v394, v395, v396, v397, v398, v399);
                v400 = 1;
                v121 = (_BYTE *)v1101;
                a2 = v1120;
                v300 = (uint64_t)v1094;
              }
              v207 = v400 & 1;
              v4 = v1105;
              v299 = v1115;
LABEL_79:
              v301 = v1092;
              sub_100005EB4(v299, v1092, (uint64_t *)&unk_1001B36F0);
              v302 = v1116;
              if (v205(v301, 1, v1116) == 1)
              {
                swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v1112, v303, v304, v305, v306, v307, v308, v309);
                sub_10005218C(v301, (uint64_t *)&unk_1001B36F0);
                goto LABEL_108;
              }
              v317 = v1114;
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v1114 + 32))(v300, v301, v302);
              if (v207 == 2)
              {
                (*(void (**)(_TtC14softposreaderd12RemoteReader *, uint64_t, uint64_t))(v317 + 16))(v1104, v300, v302);
              }
              else
              {
                (*(void (**)(_TtC14softposreaderd12RemoteReader *, uint64_t, uint64_t))(v317 + 16))(v1104, v300, v302);
                if (!v207)
                {
LABEL_91:
                  v332 = (_TtC14softposreaderd12RemoteReader *)v1112;
                  v333 = *(void (**)(_TtC14softposreaderd12RemoteReader *, uint64_t))(v1114 + 8);
                  v333(v1104, v1116);
                  sub_1000B11D4(v300, &v1124);
                  v341 = (_TtC14softposreaderd12RemoteReader *)*((_QWORD *)&v1124 + 1);
                  v342 = (_TtC14softposreaderd12RemoteReader *)*((_QWORD *)&v1125 + 1);
                  v343 = v1126;
                  v344 = v1127;
                  if (*((_QWORD *)&v1124 + 1))
                  {
                    v1105 = v4;
                    v345 = v1124;
                    v346 = v1125;
                    swift_bridgeObjectRelease(v1126, v334, v335, v336, v337, v338, v339, v340);
                    swift_bridgeObjectRelease(v344, v347, v348, v349, v350, v351, v352, v353);
                    if (v342)
                    {
                      v361 = sub_100060D8C(v345, (uint64_t)v341, v332);
                      swift_bridgeObjectRelease(v332, v362, v363, v364, v365, v366, v367, v368);
                      swift_bridgeObjectRelease(v341, v369, v370, v371, v372, v373, v374, v375);
                      if ((v361 & 1) != 0)
                      {
                        v382 = (void *)v1100;
                        if (v346 == v1100 && v342 == v1111)
                          v383 = 1;
                        else
                          v383 = _stringCompareWithSmolCheck(_:_:expecting:)(v346, v342, v1100, v1111, 0);
                        v4 = v1105;
                        v121 = (_BYTE *)v1101;
                        v1080 = v1110;
                        a2 = v1120;
                        v1081 = v1094;
                        swift_bridgeObjectRelease(v342, v376, v382, v377, v378, v379, v380, v381);
                        v333(v1081, v1116);
                        v1079 = v383 ^ 1;
                        v127 = v1080;
                      }
                      else
                      {
                        v333(v1094, v1116);
                        swift_bridgeObjectRelease(v342, v1072, v1073, v1074, v1075, v1076, v1077, v1078);
                        v1079 = 1;
                        v4 = v1105;
                        v121 = (_BYTE *)v1101;
                        v127 = v1110;
                        a2 = v1120;
                      }
                      v207 = v1079 & 1;
                      v56 = v1117;
LABEL_109:
                      v434 = (unint64_t)v1111;
                      swift_bridgeObjectRelease(v1111, v310, v311, v312, v313, v314, v315, v316);
                      v436 = HIBYTE(v434) & 0xF;
                      if ((v434 & 0x2000000000000000) == 0)
                        v436 = v1100 & 0xFFFFFFFFFFFFLL;
                      if (v436)
                      {
                        v437 = (void *)SPRConfigurationStatusConfigNeeded;
                        if (v207 == 2)
                        {
                          v1124 = 0u;
                          v1125 = 0u;
                          v438 = SPRConfigurationStatusConfigNeeded;
                          sub_10005218C((uint64_t)&v1124, &qword_1001B12E0);
                          sub_10005808C((uint64_t)v438, v1130);

                          v127 = v1110;
                          v126 = sub_10005218C((uint64_t)v1130, &qword_1001B12E0);
                          goto LABEL_118;
                        }
                      }
                      else
                      {
                        v439 = Logger.logObject.getter(v435);
                        v440 = static os_log_type_t.default.getter();
                        if (os_log_type_enabled(v439, v440))
                        {
                          v441 = (uint8_t *)swift_slowAlloc(2, -1);
                          *(_WORD *)v441 = 0;
                          _os_log_impl((void *)&_mh_execute_header, v439, v440, "Config needed: Global Config not loaded", v441, 2u);
                          v442 = v441;
                          v127 = v1110;
                          swift_slowDealloc(v442, -1, -1);
                        }

                        v437 = (void *)SPRConfigurationStatusConfigNeeded;
                        LOBYTE(v207) = 1;
                      }
                      *((_QWORD *)&v1125 + 1) = &type metadata for Bool;
                      LOBYTE(v1124) = v207 & 1;
                      sub_100005D2C(&v1124, v1130);
                      v443 = v437;
                      v444 = swift_isUniquelyReferenced_nonNull_native(v1123);
                      v1132 = v1123;
                      v1123 = (_TtC14softposreaderd12RemoteReader *)0x8000000000000000;
                      sub_1000EBF18(v1130, v443, v444);
                      v445 = v1123;
                      v1123 = v1132;

                      swift_bridgeObjectRelease(v445, v446, v447, v448, v449, v450, v451, v452);
LABEL_118:
                      LOWORD(a3) = (_WORD)v1121;
                      if ((v1121 & 0x40) == 0)
                        goto LABEL_65;
LABEL_119:
                      v453 = (uint64_t)v56;
                      v454 = v127;
                      v455 = v1098;
                      sub_100005EB4(v453, v1098, (uint64_t *)&unk_1001B36F0);
                      v456 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1114 + 48);
                      v457 = v456(v455, 1, v1116);
                      v126 = sub_10005218C(v455, (uint64_t *)&unk_1001B36F0);
                      if (v457 == 1)
                      {
                        v1111 = 0;
                        v1112 = 0xF000000000000000;
                        a2 = v1120;
                        v127 = v454;
                        v56 = v1117;
                        if ((a3 & 8) == 0)
                          goto LABEL_129;
                        goto LABEL_121;
                      }
                      v1105 = v4;
                      v460 = sub_10003321C();
                      v462 = v461;
                      v463 = sub_100032FAC();
                      v464 = (_TtC14softposreaderd12RemoteReader *)sub_1000335E0();
                      v472 = v464;
                      if (v462)
                      {
                        v56 = v1117;
                        if (v463)
                        {
                          if (v464)
                          {
                            v1104 = v463;
                            v1111 = v464;
                            v473 = v1085;
                            sub_100069AAC(v460, v462, v1085);
                            v474 = v1116;
                            v475 = v456(v473, 1, v1116);
                            if ((_DWORD)v475 == 1)
                            {
                              sub_10005218C(v473, (uint64_t *)&unk_1001B36F0);
                              v483 = 0;
                              v1112 = 0xE000000000000000;
                            }
                            else
                            {
                              v483 = UUID.uuidString.getter(v475);
                              v1112 = (uint64_t)v857;
                              (*(void (**)(uint64_t, uint64_t))(v1114 + 8))(v473, v474);
                            }
                            v858 = (uint64_t)v1102;
                            v1103 = v483;
                            v859 = *(_QWORD *)&v1104->instance[8];
                            if (v859)
                            {
                              v860 = &v1104->instance[24];
                              swift_bridgeObjectRetain();
                              v861 = 0;
                              v1109 = &_swiftEmptyArrayStorage;
                              while (1)
                              {
                                v862 = &v860[16 * v861];
                                v863 = *(_QWORD *)v862;
                                v864 = (_TtC14softposreaderd12RemoteReader *)*((_QWORD *)v862 + 1);
                                swift_bridgeObjectRetain_n(v864, 2);
                                if (String.count.getter(v863, v864) == 32)
                                {
                                  v872 = ((unint64_t)v864 >> 56) & 0xF;
                                  *(_QWORD *)&v1124 = v863;
                                  *((_QWORD *)&v1124 + 1) = v864;
                                  if (((unint64_t)v864 & 0x2000000000000000) == 0)
                                    v872 = v863 & 0xFFFFFFFFFFFFLL;
                                  *(_QWORD *)&v1125 = 0;
                                  *((_QWORD *)&v1125 + 1) = v872;
                                  swift_bridgeObjectRetain();
                                  while (1)
                                  {
                                    v879 = String.Iterator.next()();
                                    if (!v879.value._object)
                                      break;
                                    Character.hexDigitValue.getter(v879.value._countAndFlagsBits, v879.value._object);
                                    v881 = (char)v880;
                                    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v879.value._object, v880, v882, v883, v884, v885, v886, v887);
                                    if ((v881 & 1) != 0)
                                    {
                                      v895 = (_TtC14softposreaderd12RemoteReader *)*((_QWORD *)&v1124 + 1);
                                      swift_bridgeObjectRelease(v864, v888, v889, v890, v891, v892, v893, v894);
                                      swift_bridgeObjectRelease(v895, v896, v897, v898, v899, v900, v901, v902);
                                      v474 = v1116;
LABEL_239:
                                      v858 = (uint64_t)v1102;
                                      goto LABEL_240;
                                    }
                                  }
                                  swift_bridgeObjectRelease(*((_TtC14softposreaderd12RemoteReader **)&v1124 + 1), 0, v873, v874, v875, v876, v877, v878);
                                  *(_QWORD *)&v1124 = v863;
                                  *((_QWORD *)&v1124 + 1) = v864;
                                  swift_bridgeObjectRetain();
                                  v903 = String.index(_:offsetBy:)(15, 8, v863, v864);
                                  String.insert(_:at:)(45, 0xE100000000000000, v903);
                                  v904 = String.index(_:offsetBy:)(15, 13, v863, v864);
                                  String.insert(_:at:)(45, 0xE100000000000000, v904);
                                  v905 = String.index(_:offsetBy:)(15, 18, v863, v864);
                                  String.insert(_:at:)(45, 0xE100000000000000, v905);
                                  v906 = String.index(_:offsetBy:)(15, 23, v863, v864);
                                  swift_bridgeObjectRelease(v864, v907, v908, v909, v910, v911, v912, v913);
                                  String.insert(_:at:)(45, 0xE100000000000000, v906);
                                  v914 = (_TtC14softposreaderd12RemoteReader *)*((_QWORD *)&v1124 + 1);
                                  v915 = (uint64_t)v1095;
                                  UUID.init(uuidString:)(v1124);
                                  swift_bridgeObjectRelease(v914, v916, v917, v918, v919, v920, v921, v922);
                                  v474 = v1116;
                                  if (v456(v915, 1, v1116))
                                  {
                                    sub_10005218C(v915, (uint64_t *)&unk_1001B36F0);
                                    goto LABEL_239;
                                  }
                                  v937 = v1114;
                                  v858 = (uint64_t)v1102;
                                  (*(void (**)(void))(v1114 + 32))();
                                  v1083((char *)v858, 0, 1, v474);
                                  v938 = v456(v858, 1, v474);
                                  if ((_DWORD)v938 != 1)
                                  {
                                    v939 = UUID.uuidString.getter(v938);
                                    v1099 = v940;
                                    v1100 = v939;
                                    (*(void (**)(uint64_t, uint64_t))(v937 + 8))(v858, v474);
                                    swift_bridgeObjectRelease(v864, v941, v942, v943, v944, v945, v946, v947);
                                    v948 = v1109;
                                    if ((swift_isUniquelyReferenced_nonNull_native(v1109) & 1) == 0)
                                      v948 = sub_1000915A4(0, *(_QWORD *)&v948->instance[8] + 1, 1, (uint64_t)v948, v933, v934, v935, v936);
                                    v950 = *(_QWORD *)&v948->instance[8];
                                    v949 = *(_QWORD *)&v948->instance[16];
                                    if (v950 >= v949 >> 1)
                                      v948 = sub_1000915A4((_TtC14softposreaderd12RemoteReader *)(v949 > 1), v950 + 1, 1, (uint64_t)v948, v933, v934, v935, v936);
                                    *(_QWORD *)&v948->instance[8] = v950 + 1;
                                    v1109 = v948;
                                    v951 = (char *)v948 + 16 * v950;
                                    v952 = v1099;
                                    *((_QWORD *)v951 + 4) = v1100;
                                    *((_QWORD *)v951 + 5) = v952;
                                    v474 = v1116;
                                    v858 = (uint64_t)v1102;
                                    goto LABEL_242;
                                  }
                                }
                                else
                                {
                                  swift_bridgeObjectRelease(v864, v865, v866, v867, v868, v869, v870, v871);
LABEL_240:
                                  v1083((char *)v858, 1, 1, v474);
                                }
                                sub_10005218C(v858, (uint64_t *)&unk_1001B36F0);
                                swift_bridgeObjectRelease(v864, v923, v924, v925, v926, v927, v928, v929);
LABEL_242:
                                if (++v861 == v859)
                                {
                                  v953 = v1104;
                                  swift_bridgeObjectRelease(v1104, v930, v931, v932, v933, v934, v935, v936);
                                  v56 = v1117;
                                  LOWORD(a3) = (_WORD)v1121;
                                  v121 = (_BYTE *)v1101;
                                  v954 = v1109;
                                  goto LABEL_251;
                                }
                              }
                            }
                            v954 = &_swiftEmptyArrayStorage;
                            v953 = v1104;
LABEL_251:
                            swift_bridgeObjectRelease(v953, v476, v477, v478, v479, v480, v481, v482);
                            v955 = v1111;
                            swift_bridgeObjectRetain();
                            v956 = (_TtC14softposreaderd12RemoteReader *)v1112;
                            swift_bridgeObjectRetain();
                            v957 = swift_bridgeObjectRetain();
                            v958 = Logger.logObject.getter(v957);
                            v959 = static os_log_type_t.info.getter();
                            v960 = v959;
                            if (os_log_type_enabled(v958, v959))
                            {
                              a3 = swift_slowAlloc(32, -1);
                              v1109 = (_TtC14softposreaderd12RemoteReader *)swift_slowAlloc(96, -1);
                              *(_QWORD *)&v1124 = v1109;
                              *(_DWORD *)a3 = 136315650;
                              LODWORD(v1104) = v960;
                              v961 = swift_bridgeObjectRetain();
                              v1102 = (char *)&type metadata for Any + 8;
                              v962 = Dictionary.description.getter(v961, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
                              v964 = (_TtC14softposreaderd12RemoteReader *)v963;
                              swift_bridgeObjectRelease(v1111, v963, v965, v966, v967, v968, v969, v970);
                              *(_QWORD *)&v1130[0] = sub_1000056EC(v962, (unint64_t)v964, (uint64_t *)&v1124);
                              UnsafeMutableRawBufferPointer.copyMemory(from:)(v1130, (char *)v1130 + 8, a3 + 4, a3 + 12);
                              swift_bridgeObjectRelease(v1111, v971, v972, v973, v974, v975, v976, v977);
                              swift_bridgeObjectRelease(v964, v978, v979, v980, v981, v982, v983, v984);
                              *(_WORD *)(a3 + 12) = 2080;
                              swift_bridgeObjectRetain();
                              *(_QWORD *)&v1130[0] = sub_1000056EC(v1103, v1112, (uint64_t *)&v1124);
                              UnsafeMutableRawBufferPointer.copyMemory(from:)(v1130, (char *)v1130 + 8, a3 + 14, a3 + 22);
                              swift_bridgeObjectRelease_n(v1112, 2);
                              *(_WORD *)(a3 + 22) = 2080;
                              v985 = swift_bridgeObjectRetain();
                              v986 = Array.description.getter(v985, &type metadata for String);
                              v988 = (unint64_t)v987;
                              swift_bridgeObjectRelease(v954, v987, v989, v990, v991, v992, v993, v994);
                              v995 = v986;
                              v121 = (_BYTE *)v1101;
                              *(_QWORD *)&v1130[0] = sub_1000056EC(v995, v988, (uint64_t *)&v1124);
                              v955 = v1111;
                              v956 = (_TtC14softposreaderd12RemoteReader *)v1112;
                              UnsafeMutableRawBufferPointer.copyMemory(from:)(v1130, (char *)v1130 + 8, a3 + 24, a3 + 32);
                              swift_bridgeObjectRelease(v954, v996, v997, v998, v999, v1000, v1001, v1002);
                              v1003 = (_TtC14softposreaderd12RemoteReader *)v988;
                              v56 = v1117;
                              swift_bridgeObjectRelease(v1003, v1004, v1005, v1006, v1007, v1008, v1009, v1010);
                              _os_log_impl((void *)&_mh_execute_header, v958, (os_log_type_t)v1104, "stateInfo: %s\nglobal: %s\nprofiles: %s", (uint8_t *)a3, 0x20u);
                              v1011 = v1109;
                              swift_arrayDestroy(v1109, 3, v1102);
                              swift_slowDealloc(v1011, -1, -1);
                              v1012 = a3;
                              LOWORD(a3) = (_WORD)v1121;
                              swift_slowDealloc(v1012, -1, -1);

                            }
                            else
                            {

                              swift_bridgeObjectRelease(v954, v1013, v1014, v1015, v1016, v1017, v1018, v1019);
                              swift_bridgeObjectRelease(v956, v1020, v1021, v1022, v1023, v1024, v1025, v1026);
                              swift_bridgeObjectRelease(v955, v1027, v1028, v1029, v1030, v1031, v1032, v1033);
                            }
                            v1034 = v1103;
                            v1035 = sub_100003A2C(&qword_1001AE038);
                            v1036 = swift_allocObject(v1035, 176, 7);
                            strcpy((char *)(v1036 + 32), "globalConfigId");
                            *(_BYTE *)(v1036 + 47) = -18;
                            *(_OWORD *)(v1036 + 16) = xmmword_10015E090;
                            *(_QWORD *)(v1036 + 48) = v1034;
                            *(_QWORD *)(v1036 + 56) = v956;
                            *(_QWORD *)(v1036 + 72) = &type metadata for String;
                            *(_QWORD *)(v1036 + 80) = 0xD000000000000019;
                            *(_QWORD *)(v1036 + 88) = 0x800000010016C680;
                            v1037 = sub_100003A2C((uint64_t *)&unk_1001AE460);
                            *(_QWORD *)(v1036 + 96) = v954;
                            *(_QWORD *)(v1036 + 120) = v1037;
                            *(_QWORD *)(v1036 + 128) = 0x4965746174536573;
                            *(_QWORD *)(v1036 + 136) = 0xEB000000006F666ELL;
                            v1038 = sub_100003A2C(&qword_1001AEAC8);
                            *(_QWORD *)(v1036 + 168) = v1038;
                            *(_QWORD *)(v1036 + 144) = v955;
                            v95 = (_TtC14softposreaderd12RemoteReader *)sub_1000047FC(v1036);
                            v1039 = (void *)objc_opt_self(NSJSONSerialization);
                            *(_QWORD *)&v1124 = v95;
                            swift_bridgeObjectRetain();
                            v1040 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v1124, v1038);
                            v1041 = objc_msgSend(v1039, "isValidJSONObject:", v1040);
                            swift_unknownObjectRelease(v1040);
                            if ((v1041 & 1) != 0)
                            {
                              *(_QWORD *)&v1124 = v95;
                              swift_bridgeObjectRetain();
                              v1042 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v1124, v1038);
                              *(_QWORD *)&v1124 = 0;
                              v1043 = objc_msgSend(v1039, "dataWithJSONObject:options:error:", v1042, 0, &v1124);
                              swift_unknownObjectRelease(v1042);
                              v1044 = (id)v1124;
                              if (v1043)
                              {
                                v1111 = (_TtC14softposreaderd12RemoteReader *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v1043);
                                v1112 = (uint64_t)v1045;
                                swift_bridgeObjectRelease(v95, v1045, v1046, v1047, v1048, v1049, v1050, v1051);

                                v4 = v1105;
                                v127 = v1110;
                                a2 = v1120;
                                if ((a3 & 8) != 0)
                                  goto LABEL_121;
                                goto LABEL_129;
                              }
                              v1057 = v1044;
                              _convertNSErrorToError(_:)(v1044);

                            }
                            else
                            {
                              if (qword_1001ACF68 != -1)
                                swift_once(&qword_1001ACF68, sub_100052420);
                              v1052 = sub_100003A14(v1107, (uint64_t)qword_1001AFDC0);
                              v1053 = Logger.logObject.getter(v1052);
                              v1054 = static os_log_type_t.error.getter();
                              if (os_log_type_enabled(v1053, v1054))
                              {
                                v1055 = (uint8_t *)swift_slowAlloc(2, -1);
                                *(_WORD *)v1055 = 0;
                                _os_log_impl((void *)&_mh_execute_header, v1053, v1054, "Object is not a valid JSON", v1055, 2u);
                                swift_slowDealloc(v1055, -1, -1);
                              }

                              v1056 = sub_10002483C(15000, 0, 0, 0);
                            }
                            swift_willThrow(v1056);
                            swift_release(v121);
                            sub_10005218C(v1115, (uint64_t *)&unk_1001B36F0);
                            sub_10005218C((uint64_t)v56, (uint64_t *)&unk_1001B36F0);
                            swift_bridgeObjectRelease(v95, v1058, v1059, v1060, v1061, v1062, v1063, v1064);
                            swift_bridgeObjectRelease(v1123, v1065, v1066, v1067, v1068, v1069, v1070, v1071);
                            return (unint64_t)v95;
                          }
                          swift_bridgeObjectRelease(v462, v465, v466, v467, v468, v469, v470, v471);
                          v681 = v463;
                        }
                        else
                        {
                          swift_bridgeObjectRelease(v462, v465, v466, v467, v468, v469, v470, v471);
                          v681 = v472;
                        }
                        swift_bridgeObjectRelease(v681, v674, v675, v676, v677, v678, v679, v680);
                      }
                      else
                      {
                        swift_bridgeObjectRelease(v463, v465, v466, v467, v468, v469, v470, v471);
                        swift_bridgeObjectRelease(v472, v643, v644, v645, v646, v647, v648, v649);
                        v56 = v1117;
                      }
                      v4 = v1105;
                      v127 = v1110;
                      a2 = v1120;
                      if (v121[32] == 1)
                      {
                        v846 = (void *)SPRConfigurationStatusKernelUpdateNeeded;
                        *((_QWORD *)&v1125 + 1) = &type metadata for Bool;
                        LOBYTE(v1124) = 1;
                        sub_100005D2C(&v1124, v1130);
                        v847 = v846;
                        v848 = swift_isUniquelyReferenced_nonNull_native(v1123);
                        v1132 = v1123;
                        v1123 = (_TtC14softposreaderd12RemoteReader *)0x8000000000000000;
                        sub_1000EBF18(v1130, v847, v848);
                        v849 = v1123;
                        v1123 = v1132;

                        swift_bridgeObjectRelease(v849, v850, v851, v852, v853, v854, v855, v856);
                      }
                      goto LABEL_65;
                    }
                    swift_bridgeObjectRelease(v341, v354, v355, v356, v357, v358, v359, v360);
                    swift_bridgeObjectRelease(v332, v423, v424, v425, v426, v427, v428, v429);
                    v4 = v1105;
                    v121 = (_BYTE *)v1101;
                  }
                  else
                  {
                    swift_bridgeObjectRelease(v1127, v334, v335, v336, v337, v338, v339, v340);
                    swift_bridgeObjectRelease(v343, v401, v402, v403, v404, v405, v406, v407);
                    swift_bridgeObjectRelease(v332, v408, v409, v410, v411, v412, v413, v414);
                    swift_bridgeObjectRelease(v342, v415, v416, v417, v418, v419, v420, v421);
                  }
                  v430 = Logger.logObject.getter(v422);
                  v431 = static os_log_type_t.default.getter();
                  v432 = os_log_type_enabled(v430, v431);
                  a2 = v1120;
                  if (v432)
                  {
                    v433 = (uint8_t *)swift_slowAlloc(2, -1);
                    *(_WORD *)v433 = 0;
                    _os_log_impl((void *)&_mh_execute_header, v430, v431, "Config needed: Profile cache returned a nil value for SAF", v433, 2u);
                    swift_slowDealloc(v433, -1, -1);
                  }

                  v333(v1094, v1116);
                  v207 = 1;
LABEL_108:
                  v56 = v1117;
                  v127 = v1110;
                  goto LABEL_109;
                }
              }
              v318 = *(_QWORD *)(*sub_100005EF8(v1119 + 46, v1119[49]) + 72);
              v319 = *(_QWORD *)(v318 + 16);
              if (v319)
              {
                v320 = v318
                     + ((*(unsigned __int8 *)(v1093 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1093 + 80));
                v321 = *(_QWORD *)(v1093 + 72);
                swift_bridgeObjectRetain();
                v322 = v1103;
                do
                {
                  v330 = static UUID.== infix(_:_:)(v320, v1104);
                  sub_100070ECC(v320, v322, type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate);
                  if ((v330 & 1) != 0)
                  {
                    v331 = *(_BYTE *)(v322 + *(int *)&v1109->instance[12]);
                    sub_100070F10(v322, type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate);
                    if ((v331 & 1) != 0)
                    {
                      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v318, v323, v324, v325, v326, v327, v328, v329);
                      v4 = v1105;
                      v121 = (_BYTE *)v1101;
                      v300 = (uint64_t)v1094;
                      goto LABEL_91;
                    }
                  }
                  else
                  {
                    sub_100070F10(v322, type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate);
                  }
                  v320 += v321;
                  --v319;
                }
                while (v319);
                swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v318, v323, v324, v325, v326, v327, v328, v329);
                v4 = v1105;
                v121 = (_BYTE *)v1101;
                a2 = v1120;
                v300 = (uint64_t)v1094;
              }
              v384 = *(void (**)(_TtC14softposreaderd12RemoteReader *, uint64_t))(v1114 + 8);
              v385 = v1116;
              v384(v1104, v1116);
              v384((_TtC14softposreaderd12RemoteReader *)v300, v385);
              swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v1112, v386, v387, v388, v389, v390, v391, v392);
              goto LABEL_108;
            }
            swift_bridgeObjectRelease(v242, v255, v256, v257, v258, v259, v260, v261);
            v121 = (_BYTE *)v1101;
          }
          else
          {
            swift_bridgeObjectRelease(v1127, v235, v236, v237, v238, v239, v240, v241);
            swift_bridgeObjectRelease(v244, v279, v280, v281, v282, v283, v284, v285);
            swift_bridgeObjectRelease(v243, v286, v287, v288, v289, v290, v291, v292);
          }
          v294 = v1114;
          v295 = Logger.logObject.getter(v293);
          v296 = static os_log_type_t.default.getter();
          v297 = os_log_type_enabled(v295, v296);
          a2 = v1120;
          if (v297)
          {
            v298 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v298 = 0;
            _os_log_impl((void *)&_mh_execute_header, v295, v296, "Config needed: Profile cache returned a nil value", v298, 2u);
            swift_slowDealloc(v298, -1, -1);
          }

          (*(void (**)(char *, uint64_t))(v294 + 8))(v1091, v1116);
          v207 = 1;
        }
        v4 = v1105;
        v299 = v1115;
        v300 = (uint64_t)v1094;
        goto LABEL_79;
      }
      swift_bridgeObjectRelease(v180, 0, v183, v184, v185, v186, v187, v188);
    }
    if (v121[32] == 1)
    {
      v208 = (void *)SPRConfigurationStatusConfigNeeded;
      *((_QWORD *)&v1125 + 1) = &type metadata for Bool;
      LOBYTE(v1124) = 1;
      sub_100005D2C(&v1124, v1130);
      v209 = v208;
      v210 = swift_isUniquelyReferenced_nonNull_native(v1123);
      v1132 = v1123;
      v1123 = (_TtC14softposreaderd12RemoteReader *)0x8000000000000000;
      sub_1000EBF18(v1130, v209, v210);
      v211 = v1123;
      v1123 = v1132;

      swift_bridgeObjectRelease(v211, v212, v213, v214, v215, v216, v217, v218);
      v219 = (void *)SPRConfigurationStatusProfileIDList;
      *((_QWORD *)&v1125 + 1) = &type metadata for String;
      *(_QWORD *)&v1124 = 0;
      *((_QWORD *)&v1124 + 1) = 0xE000000000000000;
      sub_100005D2C(&v1124, v1130);
      v220 = v219;
      v221 = swift_isUniquelyReferenced_nonNull_native(v1123);
      v1132 = v1123;
      v1123 = (_TtC14softposreaderd12RemoteReader *)0x8000000000000000;
      sub_1000EBF18(v1130, v220, v221);
      v222 = v1123;
      v1123 = v1132;

      swift_bridgeObjectRelease(v222, v223, v224, v225, v226, v227, v228, v229);
      v231 = Logger.logObject.getter(v230);
      v232 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v231, v232))
      {
        v233 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v233 = 0;
        _os_log_impl((void *)&_mh_execute_header, v231, v232, "Config needed: GET profiles or GET Global Config failed: applet not installed", v233, 2u);
        swift_slowDealloc(v233, -1, -1);
      }

      v127 = v1110;
    }
    goto LABEL_64;
  }
  v132 = v130 + ((*(unsigned __int8 *)(v1093 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1093 + 80));
  v133 = *(_QWORD *)(v1093 + 72);
  swift_bridgeObjectRetain();
  v134 = v1111;
  while (1)
  {
    v142 = static UUID.== infix(_:_:)(v132, v1112);
    sub_100070ECC(v132, (uint64_t)v134, type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate);
    if ((v142 & 1) != 0)
      break;
    sub_100070F10((uint64_t)v134, type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate);
LABEL_36:
    v132 += v133;
    if (!--v131)
    {
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v130, v135, v136, v137, v138, v139, v140, v141);
      v4 = v1105;
      v56 = v1117;
      LOWORD(a3) = (_WORD)v1121;
      goto LABEL_44;
    }
  }
  v143 = *((_BYTE *)&v134->super.isa + *(int *)&v1109->instance[12]);
  sub_100070F10((uint64_t)v134, type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate);
  if ((v143 & 1) == 0)
    goto LABEL_36;
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v130, v135, v136, v137, v138, v139, v140, v141);
  (*(void (**)(uint64_t, uint64_t))(v1114 + 8))(v1112, v1116);
  sub_100005D3C(&v1124);
  v4 = v1105;
  v56 = v1117;
  a2 = v1120;
  LOWORD(a3) = (_WORD)v1121;
LABEL_40:
  v127 = v1110;
  v144 = SPRConfigurationStatusIsBrokenSeSepPairing;
  v145 = sub_100032768();
  *((_QWORD *)&v1125 + 1) = &type metadata for Bool;
  LOBYTE(v1124) = (v145 & 1) == 0;
  sub_100005D2C(&v1124, v1130);
  v146 = swift_isUniquelyReferenced_nonNull_native(v1123);
  v1132 = v1123;
  v1123 = (_TtC14softposreaderd12RemoteReader *)0x8000000000000000;
  sub_1000EBF18(v1130, v144, v146);
  v147 = v1123;
  v1123 = v1132;

  swift_bridgeObjectRelease(v147, v148, v149, v150, v151, v152, v153, v154);
  if ((a3 & 1) != 0)
    goto LABEL_45;
LABEL_29:
  if ((a3 & 0x100) == 0)
    goto LABEL_30;
LABEL_49:
  v166 = SPRConfigurationStatusKernelVersion;
  v167 = sub_100032D00();
  *((_QWORD *)&v1125 + 1) = &type metadata for String;
  if (v168)
    v169 = v167;
  else
    v169 = 0;
  v170 = 0xE000000000000000;
  if (v168)
    v170 = v168;
  *(_QWORD *)&v1124 = v169;
  *((_QWORD *)&v1124 + 1) = v170;
  sub_100005D2C(&v1124, v1130);
  v171 = swift_isUniquelyReferenced_nonNull_native(v1123);
  v1132 = v1123;
  v1123 = (_TtC14softposreaderd12RemoteReader *)0x8000000000000000;
  sub_1000EBF18(v1130, v166, v171);
  v172 = v1123;
  v1123 = v1132;

  swift_bridgeObjectRelease(v172, v173, v174, v175, v176, v177, v178, v179);
  v1101 = (uint64_t)v121;
  if ((a3 & 2) != 0)
    goto LABEL_55;
LABEL_64:
  if ((a3 & 0x40) != 0)
    goto LABEL_119;
LABEL_65:
  v1111 = 0;
  v1112 = 0xF000000000000000;
  if ((a3 & 8) == 0)
    goto LABEL_129;
LABEL_121:
  v458 = SPRConfigurationStatusPinAppletNeeded;
  v459 = sub_100033730();
  if (v459 == 2)
  {
    sub_10005808C((uint64_t)v458, &v1124);

    v126 = sub_10005218C((uint64_t)&v1124, &qword_1001B12E0);
  }
  else
  {
    *((_QWORD *)&v1125 + 1) = &type metadata for Bool;
    LOBYTE(v1124) = v459 & 1;
    sub_100005D2C(&v1124, v1130);
    v484 = swift_isUniquelyReferenced_nonNull_native(v1123);
    v1132 = v1123;
    v1123 = (_TtC14softposreaderd12RemoteReader *)0x8000000000000000;
    sub_1000EBF18(v1130, v458, v484);
    v485 = v1123;
    v1123 = v1132;

    swift_bridgeObjectRelease(v485, v486, v487, v488, v489, v490, v491, v492);
  }
LABEL_129:
  if (v121[32] == 1)
  {
    if (v121[33] != 1)
    {
      v561 = (void *)SPRConfigurationStatusIsSeAvailable;
      *((_QWORD *)&v1125 + 1) = &type metadata for Bool;
      LOBYTE(v1124) = 1;
      goto LABEL_148;
    }
    v493 = Logger.logObject.getter(v126);
    v494 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v493, v494))
    {
      v495 = swift_slowAlloc(22, -1);
      a3 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v1124 = a3;
      *(_DWORD *)v495 = 136315394;
      *(_QWORD *)&v1130[0] = sub_1000056EC(0xD000000000000016, 0x800000010016C660, (uint64_t *)&v1124);
      v56 = v1117;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1130, (char *)v1130 + 8, v495 + 4, v495 + 12);
      *(_WORD *)(v495 + 12) = 2048;
      *(_QWORD *)&v1130[0] = 975;
      v127 = v1110;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1130, (char *)v1130 + 8, v495 + 14, v495 + 22);
      _os_log_impl((void *)&_mh_execute_header, v493, v494, "%s %ld: Applet not selectable but is present in SE stateInfo. May be due to prohibit timer.", (uint8_t *)v495, 0x16u);
      swift_arrayDestroy(a3, 1, (char *)&type metadata for Any + 8);
      v496 = a3;
      LOWORD(a3) = (_WORD)v1121;
      swift_slowDealloc(v496, -1, -1);
      swift_slowDealloc(v495, -1, -1);
    }

    v497 = (void *)SPRConfigurationStatusIsSeAvailable;
    *((_QWORD *)&v1125 + 1) = &type metadata for Bool;
    LOBYTE(v1124) = 0;
    sub_100005D2C(&v1124, v1130);
    v498 = v497;
    v499 = swift_isUniquelyReferenced_nonNull_native(v1123);
    v1132 = v1123;
    v1123 = (_TtC14softposreaderd12RemoteReader *)0x8000000000000000;
    sub_1000EBF18(v1130, v498, v499);
    v500 = v1123;
    v1123 = v1132;

    swift_bridgeObjectRelease(v500, v501, v502, v503, v504, v505, v506, v507);
    a2 = v1120;
    if ((a3 & 1) != 0)
    {
      v509 = Logger.logObject.getter(v508);
      v510 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v509, v510))
      {
        v511 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v511 = 0;
        _os_log_impl((void *)&_mh_execute_header, v509, v510, "override isKernelNeeded to false", v511, 2u);
        v512 = v511;
        a2 = v1120;
        swift_slowDealloc(v512, -1, -1);
      }

      v513 = (void *)SPRConfigurationStatusKernelNeeded;
      *((_QWORD *)&v1125 + 1) = &type metadata for Bool;
      LOBYTE(v1124) = 0;
      sub_100005D2C(&v1124, v1130);
      v514 = v513;
      v515 = swift_isUniquelyReferenced_nonNull_native(v1123);
      v1132 = v1123;
      v1123 = (_TtC14softposreaderd12RemoteReader *)0x8000000000000000;
      sub_1000EBF18(v1130, v514, v515);
      v516 = v1123;
      v1123 = v1132;

      swift_bridgeObjectRelease(v516, v517, v518, v519, v520, v521, v522, v523);
    }
    if ((a3 & 2) != 0)
    {
      v524 = (uint64_t)v56;
      v525 = v4;
      v526 = v56;
      v527 = v121;
      v528 = v127;
      v529 = v1088;
      sub_100005EB4(v524, v1088, (uint64_t *)&unk_1001B36F0);
      v530 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1114 + 48))(v529, 1, v1116);
      v531 = v529;
      v127 = v528;
      v121 = v527;
      v56 = v526;
      v4 = v525;
      v532 = sub_10005218C(v531, (uint64_t *)&unk_1001B36F0);
      if (v530 != 1)
      {
        v533 = Logger.logObject.getter(v532);
        v534 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v533, v534))
        {
          v535 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v535 = 0;
          _os_log_impl((void *)&_mh_execute_header, v533, v534, "override isConfigNeeded to false", v535, 2u);
          v536 = v535;
          a2 = v1120;
          swift_slowDealloc(v536, -1, -1);
        }

        v537 = (void *)SPRConfigurationStatusConfigNeeded;
        *((_QWORD *)&v1125 + 1) = &type metadata for Bool;
        LOBYTE(v1124) = 0;
        sub_100005D2C(&v1124, v1130);
        v538 = v537;
        v539 = swift_isUniquelyReferenced_nonNull_native(v1123);
        v1132 = v1123;
        v1123 = (_TtC14softposreaderd12RemoteReader *)0x8000000000000000;
        sub_1000EBF18(v1130, v538, v539);
        v540 = v1123;
        v1123 = v1132;

        swift_bridgeObjectRelease(v540, v541, v542, v543, v544, v545, v546, v547);
      }
    }
    if ((a3 & 0x40) != 0)
    {
      v548 = (uint64_t)v56;
      v549 = v4;
      v550 = v56;
      v551 = v121;
      v552 = v127;
      v553 = v1089;
      sub_100005EB4(v548, v1089, (uint64_t *)&unk_1001B36F0);
      v554 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1114 + 48))(v553, 1, v1116);
      v555 = v553;
      v127 = v552;
      v121 = v551;
      v56 = v550;
      v4 = v549;
      v556 = sub_10005218C(v555, (uint64_t *)&unk_1001B36F0);
      if (v554 != 1)
      {
        v557 = Logger.logObject.getter(v556);
        v558 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v557, v558))
        {
          v559 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v559 = 0;
          _os_log_impl((void *)&_mh_execute_header, v557, v558, "override isKernelUpdateNeeded to false", v559, 2u);
          v560 = v559;
          a2 = v1120;
          swift_slowDealloc(v560, -1, -1);
        }

        v561 = (void *)SPRConfigurationStatusKernelUpdateNeeded;
        *((_QWORD *)&v1125 + 1) = &type metadata for Bool;
        LOBYTE(v1124) = 0;
LABEL_148:
        sub_100005D2C(&v1124, v1130);
        v562 = v561;
        v563 = swift_isUniquelyReferenced_nonNull_native(v1123);
        v1132 = v1123;
        v1123 = (_TtC14softposreaderd12RemoteReader *)0x8000000000000000;
        sub_1000EBF18(v1130, v562, v563);
        v564 = v1123;
        v1123 = v1132;

        swift_bridgeObjectRelease(v564, v565, v566, v567, v568, v569, v570, v571);
      }
    }
  }
  if ((v121[34] & 1) != 0)
  {
    v572 = 1;
    goto LABEL_151;
  }
  v593 = v1119;
  swift_beginAccess(v1119 + 41, &v1132, 0, 0);
  v572 = *(unsigned __int8 *)(*sub_100005EF8(v593 + 41, v593[44]) + 32);
  if ((a3 & 0x2000) != 0 || (_DWORD)v572)
  {
LABEL_151:
    v573 = (void *)SPRConfigurationStatusIsSecurityViolation;
    *((_QWORD *)&v1125 + 1) = &type metadata for Bool;
    LOBYTE(v1124) = v572;
    sub_100005D2C(&v1124, v1130);
    v574 = v573;
    v1105 = v4;
    v575 = v56;
    v576 = v121;
    v577 = a2;
    v578 = v574;
    v579 = swift_isUniquelyReferenced_nonNull_native(v1123);
    v1131 = v1123;
    v1123 = (_TtC14softposreaderd12RemoteReader *)0x8000000000000000;
    sub_1000EBF18(v1130, v578, v579);
    v580 = v1123;
    v1123 = v1131;

    swift_bridgeObjectRelease(v580, v581, v582, v583, v584, v585, v586, v587);
    v588 = v1119;
    v589 = (uint64_t)(v1119 + 41);
    swift_beginAccess(v1119 + 41, &v1124, 33, 0);
    v590 = v588[44];
    v591 = v588[45];
    v127 = v1110;
    sub_10001A64C(v589, v590);
    v592 = v590;
    a2 = v577;
    v121 = v576;
    v56 = v575;
    v4 = v1105;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v591 + 88))(v572, v592, v591);
    swift_endAccess(&v1124);
  }
  if (v121[32] == 1)
  {
    v121[32] = 0;
    v594 = sub_100031CF8();
    if (v594)
    {
      v595 = v594;
      v1126 = (_TtC14softposreaderd12RemoteReader *)sub_100032570;
      v1127 = 0;
      *(_QWORD *)&v1124 = _NSConcreteStackBlock;
      *((_QWORD *)&v1124 + 1) = 1107296256;
      *(_QWORD *)&v1125 = sub_1000043B8;
      *((_QWORD *)&v1125 + 1) = &unk_10019C768;
      v596 = _Block_copy(&v1124);
      objc_msgSend(v595, "endSessionWithCompletion:", v596);
      _Block_release(v596);

    }
  }
  v597 = (__int16)v1121;
  if ((unint64_t)v1112 >> 60 != 15)
  {
    v619 = v1097;
    sub_100005EB4((uint64_t)v56, v1097, (uint64_t *)&unk_1001B36F0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1114 + 48))(v619, 1, v1116) == 1)
    {
      sub_10005218C(v619, (uint64_t *)&unk_1001B36F0);
      if ((v597 & 4) == 0)
        goto LABEL_178;
    }
    else
    {
      v620 = v127;
      v621 = v1111;
      v622 = (_QWORD *)v1112;
      sub_100005D9C((uint64_t)v1111, v1112);
      sub_10005218C(v619, (uint64_t *)&unk_1001B36F0);
      v623 = sub_100081B14(v1118, a2, (uint64_t)v621, (uint64_t)v622);
      if (v4)
      {
        v624 = v1107;
        (*(void (**)(char *, uint64_t, uint64_t))(v1108 + 16))(v620, v1113, v1107);
        swift_errorRetain();
        v625 = swift_errorRetain();
        v626 = Logger.logObject.getter(v625);
        v627 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v626, v627))
        {
          v628 = (uint8_t *)swift_slowAlloc(12, -1);
          v629 = swift_slowAlloc(32, -1);
          *(_QWORD *)&v1124 = v629;
          *(_DWORD *)v628 = 136315138;
          *(_QWORD *)&v1130[0] = v4;
          swift_errorRetain();
          v630 = sub_100003A2C((uint64_t *)&unk_1001B1280);
          v631 = String.init<A>(describing:)(v1130, v630);
          v633 = (_TtC14softposreaderd12RemoteReader *)v632;
          *(_QWORD *)&v1130[0] = sub_1000056EC(v631, v632, (uint64_t *)&v1124);
          v121 = (_BYTE *)v1101;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v1130, (char *)v1130 + 8, v628 + 4, v628 + 12);
          v634 = v633;
          v56 = v1117;
          swift_bridgeObjectRelease(v634, v635, v636, v637, v638, v639, v640, v641);
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v626, v627, "network error for kernel update status\n%s", v628, 0xCu);
          swift_arrayDestroy(v629, 1, (char *)&type metadata for Any + 8);
          v642 = v629;
          v597 = (__int16)v1121;
          swift_slowDealloc(v642, -1, -1);
          swift_slowDealloc(v628, -1, -1);
          sub_10000A9B0((uint64_t)v1111, v1112);

          swift_errorRelease();
          (*(void (**)(char *, uint64_t))(v1108 + 8))(v1110, v1107);
          v4 = 0;
          if ((v597 & 4) == 0)
            goto LABEL_178;
          goto LABEL_159;
        }
        sub_10000A9B0((uint64_t)v1111, v1112);
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();

        (*(void (**)(char *, uint64_t))(v1108 + 8))(v620, v624);
        v4 = 0;
      }
      else
      {
        v650 = v623;
        v651 = (void *)SPRConfigurationStatusKernelUpdateNeeded;
        *((_QWORD *)&v1125 + 1) = &type metadata for Bool;
        LOBYTE(v1124) = v623 & 1;
        sub_100005D2C(&v1124, v1130);
        v652 = v651;
        v653 = swift_isUniquelyReferenced_nonNull_native(v1123);
        v1131 = v1123;
        v1123 = (_TtC14softposreaderd12RemoteReader *)0x8000000000000000;
        sub_1000EBF18(v1130, v652, v653);
        v654 = v1123;
        v1123 = v1131;

        swift_bridgeObjectRelease(v654, v655, v656, v657, v658, v659, v660, v661);
        v662 = (void *)SPRConfigurationStatusConfigNeeded;
        *((_QWORD *)&v1125 + 1) = &type metadata for Bool;
        LOBYTE(v1124) = HIBYTE(v650) & 1;
        sub_100005D2C(&v1124, v1130);
        v663 = v662;
        v664 = swift_isUniquelyReferenced_nonNull_native(v1123);
        v1131 = v1123;
        v1123 = (_TtC14softposreaderd12RemoteReader *)0x8000000000000000;
        sub_1000EBF18(v1130, v663, v664);
        v665 = v1123;
        v1123 = v1131;

        swift_bridgeObjectRelease(v665, v666, v667, v668, v669, v670, v671, v672);
        if ((v650 & 0x100) != 0)
        {
          v682 = Logger.logObject.getter(v673);
          v683 = static os_log_type_t.default.getter();
          v684 = os_log_type_enabled(v682, v683);
          v121 = (_BYTE *)v1101;
          if (v684)
          {
            v685 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v685 = 0;
            _os_log_impl((void *)&_mh_execute_header, v682, v683, "Config needed: Configuration backend determined kernel or config update needed", v685, 2u);
            swift_slowDealloc(v685, -1, -1);
          }
          sub_10000A9B0((uint64_t)v1111, v1112);

          if ((v597 & 4) == 0)
            goto LABEL_178;
          goto LABEL_159;
        }
        sub_10000A9B0((uint64_t)v1111, v1112);
      }
      v121 = (_BYTE *)v1101;
      if ((v597 & 4) == 0)
        goto LABEL_178;
    }
LABEL_159:
    v1105 = v4;
    v598 = (void *)SPRConfigurationStatusSeIdentifier;
    v599 = v1119;
    v600 = v1119 + 41;
    swift_beginAccess(v1119 + 41, &v1128, 0, 0);
    v601 = v599[44];
    v602 = sub_100005EF8(v600, v601);
    v4 = *(_QWORD *)(v601 - 8);
    __chkstk_darwin(v602);
    a2 = (unint64_t)v1082 - ((v603 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(unint64_t))(v4 + 16))(a2);
    a3 = *(_QWORD *)(*(_QWORD *)a2 + 16);
    v604 = v598;
    v605 = objc_msgSend((id)a3, "serialNumber");
    if (v605)
    {
      v606 = v605;
      v607 = static String._unconditionallyBridgeFromObjectiveC(_:)(v605);
      v609 = v608;

      (*(void (**)(unint64_t, uint64_t))(v4 + 8))(a2, v601);
      *((_QWORD *)&v1125 + 1) = &type metadata for String;
      *(_QWORD *)&v1124 = v607;
      *((_QWORD *)&v1124 + 1) = v609;
      sub_100005D2C(&v1124, v1130);
      v610 = swift_isUniquelyReferenced_nonNull_native(v1123);
      v1131 = v1123;
      v1123 = (_TtC14softposreaderd12RemoteReader *)0x8000000000000000;
      sub_1000EBF18(v1130, v604, v610);
      v611 = v1123;
      v1123 = v1131;

      swift_bridgeObjectRelease(v611, v612, v613, v614, v615, v616, v617, v618);
      v4 = v1105;
      v56 = v1117;
      v597 = (__int16)v1121;
      v121 = (_BYTE *)v1101;
      goto LABEL_178;
    }
    goto LABEL_270;
  }
  if ((v1121 & 4) != 0)
    goto LABEL_159;
LABEL_178:
  if ((v597 & 0x10) != 0)
  {
    v686 = (void *)SPRConfigurationStatusIsProductionSigned;
    v687 = v1119;
    swift_beginAccess(v1119 + 41, &v1129, 0, 0);
    v688 = *(void **)(*sub_100005EF8(v687 + 41, v687[44]) + 16);
    v689 = v686;
    v690 = objc_msgSend(v688, "isProductionSigned");
    *((_QWORD *)&v1125 + 1) = &type metadata for Bool;
    LOBYTE(v1124) = v690;
    sub_100005D2C(&v1124, v1130);
    v691 = swift_isUniquelyReferenced_nonNull_native(v1123);
    v1131 = v1123;
    v1123 = (_TtC14softposreaderd12RemoteReader *)0x8000000000000000;
    sub_1000EBF18(v1130, v689, v691);
    v692 = v1123;
    v1123 = v1131;

    swift_bridgeObjectRelease(v692, v693, v694, v695, v696, v697, v698, v699);
    if ((v597 & 0x20) != 0)
      goto LABEL_183;
LABEL_180:
    if ((v597 & 0x80) != 0)
    {
LABEL_184:
      v717 = qword_1001AD210;
      v718 = SPRConfigurationStatusIsPasscodeEnabled;
      if (v717 != -1)
        swift_once(&qword_1001AD210, sub_100115468);
      v719 = objc_msgSend((id)qword_1001B4F20, "canEvaluatePolicy:error:", 2, 0);
      *((_QWORD *)&v1125 + 1) = &type metadata for Bool;
      LOBYTE(v1124) = v719;
      sub_100005D2C(&v1124, v1130);
      v720 = swift_isUniquelyReferenced_nonNull_native(v1123);
      v1131 = v1123;
      v1123 = (_TtC14softposreaderd12RemoteReader *)0x8000000000000000;
      sub_1000EBF18(v1130, v718, v720);
      v721 = v1123;
      v1123 = v1131;

      swift_bridgeObjectRelease(v721, v722, v723, v724, v725, v726, v727, v728);
    }
  }
  else
  {
    if ((v597 & 0x20) == 0)
      goto LABEL_180;
LABEL_183:
    v700 = (void *)SPRConfigurationStatusVersion;
    v701 = (void *)objc_opt_self(SPRMeta);
    v702 = v700;
    v703 = objc_msgSend(v701, "current");
    v704 = objc_msgSend(v703, "bundleVersion");

    v705 = static String._unconditionallyBridgeFromObjectiveC(_:)(v704);
    v707 = v706;

    *((_QWORD *)&v1125 + 1) = &type metadata for String;
    *(_QWORD *)&v1124 = v705;
    *((_QWORD *)&v1124 + 1) = v707;
    v597 = (__int16)v1121;
    sub_100005D2C(&v1124, v1130);
    v708 = swift_isUniquelyReferenced_nonNull_native(v1123);
    v1131 = v1123;
    v1123 = (_TtC14softposreaderd12RemoteReader *)0x8000000000000000;
    sub_1000EBF18(v1130, v702, v708);
    v709 = v1123;
    v1123 = v1131;

    swift_bridgeObjectRelease(v709, v710, v711, v712, v713, v714, v715, v716);
    if ((v597 & 0x80) != 0)
      goto LABEL_184;
  }
  if ((v597 & 0x800) != 0)
  {
    v729 = v1119;
    swift_beginAccess(v1119 + 41, &v1131, 0, 0);
    sub_100005EF8(v729 + 41, v729[44]);
    v730 = sub_1001457B8();
    v731 = (char)v730;
    if ((v730 & 1) == 0)
    {
      v732 = Logger.logObject.getter(v730);
      v733 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v732, v733))
      {
        v734 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v734 = 0;
        _os_log_impl((void *)&_mh_execute_header, v732, v733, "Incorrect JCOP version", v734, 2u);
        swift_slowDealloc(v734, -1, -1);
      }

    }
    v735 = (void *)SPRConfigurationStatusIsJCOPVersionCorrect;
    *((_QWORD *)&v1125 + 1) = &type metadata for Bool;
    LOBYTE(v1124) = v731 & 1;
    sub_100005D2C(&v1124, v1130);
    v736 = v735;
    v737 = swift_isUniquelyReferenced_nonNull_native(v1123);
    v1122 = v1123;
    v1123 = (_TtC14softposreaderd12RemoteReader *)0x8000000000000000;
    sub_1000EBF18(v1130, v736, v737);
    v738 = v1123;
    v1123 = v1122;

    swift_bridgeObjectRelease(v738, v739, v740, v741, v742, v743, v744, v745);
  }
  v746 = v1119[34];
  v747 = sub_100003A2C(&qword_1001ADA30);
  v748 = swift_allocObject(v747, 192, 7);
  *(_OWORD *)(v748 + 16) = xmmword_10015EE30;
  *(_BYTE *)(v748 + 32) = 15;
  v749 = v1123;
  v750 = SPRConfigurationStatusKernelNeeded;
  sub_10005F084((uint64_t)v750, (uint64_t)v749, &v1124);

  if (*((_QWORD *)&v1125 + 1))
  {
    if ((swift_dynamicCast(v1130, &v1124, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
    {
      v751 = v1130[0];
      *(_QWORD *)(v748 + 64) = &type metadata for Bool;
      *(_BYTE *)(v748 + 40) = v751;
      goto LABEL_198;
    }
  }
  else
  {
    sub_10005218C((uint64_t)&v1124, &qword_1001B12E0);
  }
  *(_OWORD *)(v748 + 40) = 0u;
  *(_OWORD *)(v748 + 56) = 0u;
LABEL_198:
  *(_BYTE *)(v748 + 72) = 16;
  v752 = v1123;
  v753 = SPRConfigurationStatusKernelUpdateNeeded;
  sub_10005F084((uint64_t)v753, (uint64_t)v752, &v1124);

  if (*((_QWORD *)&v1125 + 1))
  {
    if ((swift_dynamicCast(v1130, &v1124, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
    {
      v754 = v1130[0];
      *(_QWORD *)(v748 + 104) = &type metadata for Bool;
      *(_BYTE *)(v748 + 80) = v754;
      goto LABEL_203;
    }
  }
  else
  {
    sub_10005218C((uint64_t)&v1124, &qword_1001B12E0);
  }
  *(_OWORD *)(v748 + 80) = 0u;
  *(_OWORD *)(v748 + 96) = 0u;
LABEL_203:
  *(_BYTE *)(v748 + 112) = 17;
  v755 = v1123;
  v756 = SPRConfigurationStatusConfigNeeded;
  sub_10005F084((uint64_t)v756, (uint64_t)v755, &v1124);

  if (*((_QWORD *)&v1125 + 1))
  {
    if ((swift_dynamicCast(v1130, &v1124, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
    {
      v757 = v1130[0];
      *(_QWORD *)(v748 + 144) = &type metadata for Bool;
      *(_BYTE *)(v748 + 120) = v757;
      goto LABEL_208;
    }
  }
  else
  {
    sub_10005218C((uint64_t)&v1124, &qword_1001B12E0);
  }
  *(_OWORD *)(v748 + 120) = 0u;
  *(_OWORD *)(v748 + 136) = 0u;
LABEL_208:
  *(_BYTE *)(v748 + 152) = 18;
  v758 = v1123;
  v759 = SPRConfigurationStatusIsJCOPVersionCorrect;
  sub_10005F084((uint64_t)v759, (uint64_t)v758, &v1124);

  if (*((_QWORD *)&v1125 + 1))
  {
    if ((swift_dynamicCast(v1130, &v1124, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
    {
      v767 = v1130[0];
      *(_QWORD *)(v748 + 184) = &type metadata for Bool;
      *(_BYTE *)(v748 + 160) = v767;
      goto LABEL_213;
    }
  }
  else
  {
    sub_10005218C((uint64_t)&v1124, &qword_1001B12E0);
  }
  *(_OWORD *)(v748 + 160) = 0u;
  *(_OWORD *)(v748 + 176) = 0u;
LABEL_213:
  a2 = sub_1000E862C(v748, v760, v761, v762, v763, v764, v765, v766);
  v768 = *(os_unfair_lock_s **)(v746 + 56);
  v769 = (uint64_t)&v768[4];
  a3 = (uint64_t)&v768[8];
  os_unfair_lock_lock(v768 + 8);
  sub_10005F610(v769, a2);
  if (!v4)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)a3);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a2, v770, v771, v772, v773, v774, v775, v776);
    v777 = *(os_unfair_lock_s **)(v746 + 56);
    v778 = (_TtC14softposreaderd12RemoteReader **)&v777[4];
    v779 = v777 + 8;
    os_unfair_lock_lock(v777 + 8);
    sub_100060D14(v778, v746, 2);
    os_unfair_lock_unlock(v779);
    v780 = v1123;
    v781 = swift_bridgeObjectRetain();
    v782 = sub_10005ED70(v781);
    swift_bridgeObjectRelease(v780, v783, v784, v785, v786, v787, v788, v789);
    v790 = *(_QWORD *)(v782 + 16);
    if (v790)
    {
      sub_100003A2C(&qword_1001AC668);
      v791 = (void *)static _DictionaryStorage.allocate(capacity:)(v790);
    }
    else
    {
      v791 = &_swiftEmptyDictionarySingleton;
    }
    v792 = v1108;
    *(_QWORD *)&v1124 = v791;
    v793 = swift_bridgeObjectRetain();
    sub_10006D6D4(v793, (const char *)1, &v1124, v794, v795, v796, v797, v798);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v782, v799, v800, v801, v802, v803, v804, v805);
    v95 = (_TtC14softposreaderd12RemoteReader *)v1124;
    v807 = v1106;
    v806 = v1107;
    (*(void (**)(char *, uint64_t, uint64_t))(v792 + 16))(v1106, v1113, v1107);
    swift_retain();
    v808 = swift_bridgeObjectRetain();
    v809 = Logger.logObject.getter(v808);
    v810 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v809, v810))
    {
      v1105 = 0;
      v811 = (uint8_t *)swift_slowAlloc(12, -1);
      v812 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v1124 = v812;
      *(_DWORD *)v811 = 136315138;
      v1121 = (char *)&type metadata for Any + 8;
      v813 = Dictionary.description.getter(v95, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
      v815 = (_TtC14softposreaderd12RemoteReader *)v814;
      *(_QWORD *)&v1130[0] = sub_1000056EC(v813, v814, (uint64_t *)&v1124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1130, (char *)v1130 + 8, v811 + 4, v811 + 12);
      swift_release(v95);
      swift_bridgeObjectRelease(v815, v816, v817, v818, v819, v820, v821, v822);
      swift_bridgeObjectRelease(v95, v823, v824, v825, v826, v827, v828, v829);
      _os_log_impl((void *)&_mh_execute_header, v809, v810, "Configurator.status() ended with result: %s", v811, 0xCu);
      swift_arrayDestroy(v812, 1, v1121);
      swift_slowDealloc(v812, -1, -1);
      swift_slowDealloc(v811, -1, -1);
      swift_release(v1101);

      sub_10000A9B0((uint64_t)v1111, v1112);
      (*(void (**)(char *, uint64_t))(v1108 + 8))(v1106, v1107);
      sub_10005218C(v1115, (uint64_t *)&unk_1001B36F0);
      v830 = (uint64_t)v1117;
    }
    else
    {
      swift_release(v121);

      sub_10000A9B0((uint64_t)v1111, v1112);
      swift_release(v95);
      swift_bridgeObjectRelease(v95, v831, v832, v833, v834, v835, v836, v837);
      (*(void (**)(char *, uint64_t))(v1108 + 8))(v807, v806);
      sub_10005218C(v1115, (uint64_t *)&unk_1001B36F0);
      v830 = (uint64_t)v56;
    }
    sub_10005218C(v830, (uint64_t *)&unk_1001B36F0);
    swift_bridgeObjectRelease(v1123, v838, v839, v840, v841, v842, v843, v844);
    return (unint64_t)v95;
  }
LABEL_272:
  os_unfair_lock_unlock((os_unfair_lock_t)a3);
  __break(1u);
  os_unfair_lock_unlock((os_unfair_lock_t)a2);
  __break(1u);
  result = swift_unexpectedError(v4, "Swift/Dictionary.swift", 22, 1, 489);
  __break(1u);
  return result;
}

void sub_10006D654(uint64_t (*a1)(char *, _TtC14softposreaderd12RemoteReader *, _TtC14softposreaderd12RemoteReader *), os_unfair_lock_s *a2, int a3, int a4)
{
  sub_1000610E4(a1, a2, a3, a4);
}

void sub_10006D688(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(uint64_t, uint64_t), uint64_t (*a6)(char *, uint64_t, char *))
{
  sub_10006F35C(a1, a2, a4, a5, a6);
}

unint64_t sub_10006D6B4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_100069D58(a1, a2, a3);
}

void sub_10006D6D4(uint64_t a1, const char *a2, _QWORD *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  _TtC14softposreaderd12RemoteReader *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  _BOOL8 v60;
  uint64_t v61;
  char v62;
  char v63;
  _QWORD *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  Swift::String v68;
  Swift::String v69;
  uint64_t v70;
  unint64_t v71;
  _OWORD v72[2];
  uint64_t v73;
  _TtC14softposreaderd12RemoteReader *v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD v77[2];
  uint64_t v78;

  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  v11 = (char)a2;
  swift_bridgeObjectRetain();
  sub_100005EB4(a1 + 32, (uint64_t)&v75, &qword_1001AC670);
  v12 = v75;
  v13 = v76;
  v73 = v75;
  v74 = (_TtC14softposreaderd12RemoteReader *)v76;
  sub_100005D2C(v77, v72);
  v14 = (_QWORD *)*a3;
  v16 = sub_10000ADC4(v12, v13);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
    goto LABEL_23;
  v20 = v15;
  if (v14[3] >= v19)
  {
    if ((v11 & 1) != 0)
    {
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_10000BAB0();
      if ((v20 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v47 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    v48 = (uint64_t *)(v47[6] + 16 * v16);
    *v48 = v12;
    v48[1] = v13;
    sub_100005D2C(v72, (_OWORD *)(v47[7] + 32 * v16));
    v49 = v47[2];
    v50 = __OFADD__(v49, 1);
    v51 = v49 + 1;
    if (v50)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v47[2] = v51;
    v52 = v9 - 1;
    if (!v52)
    {
LABEL_22:
      swift_bridgeObjectRelease_n(a1, 2);
      return;
    }
    v53 = a1 + 80;
    while (1)
    {
      sub_100005EB4(v53, (uint64_t)&v75, &qword_1001AC670);
      v54 = v75;
      v55 = v76;
      v73 = v75;
      v74 = (_TtC14softposreaderd12RemoteReader *)v76;
      sub_100005D2C(v77, v72);
      v56 = (_QWORD *)*a3;
      v57 = sub_10000ADC4(v54, v55);
      v59 = v56[2];
      v60 = (v58 & 1) == 0;
      v50 = __OFADD__(v59, v60);
      v61 = v59 + v60;
      if (v50)
        break;
      v62 = v58;
      if (v56[3] < v61)
      {
        sub_10000B2F0(v61, 1);
        v57 = sub_10000ADC4(v54, v55);
        if ((v62 & 1) != (v63 & 1))
          goto LABEL_25;
      }
      if ((v62 & 1) != 0)
        goto LABEL_10;
      v64 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v57 >> 6) + 64) |= 1 << v57;
      v65 = (uint64_t *)(v64[6] + 16 * v57);
      *v65 = v54;
      v65[1] = v55;
      sub_100005D2C(v72, (_OWORD *)(v64[7] + 32 * v57));
      v66 = v64[2];
      v50 = __OFADD__(v66, 1);
      v67 = v66 + 1;
      if (v50)
        goto LABEL_24;
      v64[2] = v67;
      v53 += 48;
      if (!--v52)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_10000B2F0(v19, v11 & 1);
  v21 = sub_10000ADC4(v12, v13);
  if ((v20 & 1) == (v22 & 1))
  {
    v16 = v21;
    if ((v20 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v23 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v23);
    v78 = v23;
    swift_errorRetain();
    v24 = sub_100003A2C((uint64_t *)&unk_1001B1280);
    if ((swift_dynamicCast(v24, &v78, v24, &type metadata for _MergeError, 0) & 1) == 0)
    {
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, v25, v26, v27, v28, v29, v30, v31);
      sub_100005D3C(v72);
      v32 = v74;
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, v33, v34, v35, v36, v37, v38, v39);
      swift_bridgeObjectRelease(v32, v40, v41, v42, v43, v44, v45, v46);
      swift_errorRelease();
      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
LABEL_26:
  v70 = 0;
  v71 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v68._object = (void *)0x800000010016C6C0;
  v68._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v68);
  _print_unlocked<A, B>(_:_:)(&v73, &v70, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v69._countAndFlagsBits = 39;
  v69._object = (void *)0xE100000000000000;
  String.append(_:)(v69);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v70, v71, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
}

uint64_t sub_10006DAA8(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_10006DB30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14)
{
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _TtC14softposreaderd12RemoteReader *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _TtC14softposreaderd12RemoteReader *v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  _TtC14softposreaderd12RemoteReader *v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  _TtC14softposreaderd12RemoteReader *v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  SEL v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  Swift::String v69;
  SEL v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  _TtC14softposreaderd12RemoteReader *v77;
  SEL v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _TtC14softposreaderd12RemoteReader *v88;
  SEL v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  _TtC14softposreaderd12RemoteReader *v99;
  SEL v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  _TtC14softposreaderd12RemoteReader *v110;
  SEL v111;
  id v112;
  id v113;
  id v114;
  id v115;
  id v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  _TtC14softposreaderd12RemoteReader *v121;
  SEL v122;
  id v123;
  id v124;
  id v125;
  id v126;
  id v127;
  id v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  _TtC14softposreaderd12RemoteReader *v132;
  SEL v133;
  id v134;
  id v135;
  id v136;
  id v137;
  id v138;
  id v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  _TtC14softposreaderd12RemoteReader *v143;
  SEL v144;
  id v145;
  id v146;
  id v147;
  id v148;
  id v149;
  id v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  _TtC14softposreaderd12RemoteReader *v154;
  SEL v155;
  id v156;
  id v157;
  id v158;
  id v159;
  id v160;
  id v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  _TtC14softposreaderd12RemoteReader *v165;
  SEL v166;
  id v167;
  id v168;
  id v169;
  id v170;
  id v171;
  id v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  _TtC14softposreaderd12RemoteReader *v176;
  SEL v177;
  id v178;
  id v179;
  id v180;
  id v181;
  id v182;
  id v183;
  uint64_t v184;
  _TtC14softposreaderd12RemoteReader *v185;
  SEL v186;
  id v187;
  id v188;
  id v189;
  id v190;
  id v191;
  id v192;
  os_log_type_t type;
  uint64_t v195;
  _BYTE v198[24];
  uint64_t v199;
  _TtC14softposreaderd12RemoteReader *v200[4];
  uint64_t v201;
  _QWORD v202[5];
  _QWORD v203[5];
  _QWORD v204[5];
  _QWORD v205[5];
  _QWORD v206[5];
  _QWORD v207[5];
  _QWORD v208[5];
  _QWORD v209[5];
  _QWORD v210[5];
  _QWORD v211[5];
  __int128 v212;
  uint64_t v213;
  _UNKNOWN **v214;
  __int128 v215;
  uint64_t v216;
  _UNKNOWN **v217;
  __int128 v218;
  uint64_t v219;
  _UNKNOWN **v220;
  __int128 v221;
  uint64_t v222;
  _UNKNOWN **v223;
  __int128 v224;
  uint64_t v225;
  _UNKNOWN **v226;
  __int128 v227;
  uint64_t v228;
  _UNKNOWN **v229;
  __int128 v230;
  uint64_t v231;
  _UNKNOWN **v232;
  __int128 v233;
  uint64_t v234;
  _UNKNOWN **v235;

  v234 = type metadata accessor for CertificateManager();
  v235 = &off_100199940;
  *(_QWORD *)&v233 = a2;
  v231 = type metadata accessor for MPOCDefaultAttestationManager();
  v232 = &off_10019D8B8;
  *(_QWORD *)&v230 = a4;
  v228 = type metadata accessor for MPOCDefaultMonitorManager();
  v229 = &off_10019F1B0;
  *(_QWORD *)&v227 = a5;
  v225 = type metadata accessor for SystemInfo();
  v226 = &off_10019F8A0;
  *(_QWORD *)&v224 = a7;
  v223 = &off_1001A07D8;
  v222 = type metadata accessor for StoreAndForwardSelector();
  *(_QWORD *)&v221 = a8;
  v220 = &off_10019FF20;
  v219 = type metadata accessor for SignerFactory();
  *(_QWORD *)&v218 = a9;
  v217 = &off_10019C0A0;
  v216 = type metadata accessor for DefaultSecureTimeKeeper();
  *(_QWORD *)&v215 = a10;
  v214 = &off_1001A11A8;
  v213 = type metadata accessor for SecureElement();
  *(_QWORD *)&v212 = a12;
  *(_BYTE *)(a14 + 16) = 0;
  if (qword_1001ACFC0 != -1)
    swift_once(&qword_1001ACFC0, sub_100060E50);
  v20 = type metadata accessor for Logger(0);
  sub_100003A14(v20, (uint64_t)qword_1001B05E0);
  sub_100008390(a1, (uint64_t)v211);
  sub_100008390((uint64_t)&v233, (uint64_t)v210);
  sub_100008390((uint64_t)&v230, (uint64_t)v209);
  sub_100008390((uint64_t)&v227, (uint64_t)v208);
  v21 = (__int128 *)a6;
  sub_100008390(a6, (uint64_t)v207);
  sub_100008390((uint64_t)&v224, (uint64_t)v206);
  sub_100008390((uint64_t)&v221, (uint64_t)v205);
  sub_100008390((uint64_t)&v218, (uint64_t)v204);
  sub_100008390((uint64_t)&v215, (uint64_t)v203);
  sub_100008390((uint64_t)&v212, (uint64_t)v202);
  v22 = a3;
  swift_retain_n(a3, 2);
  v23 = a11;
  v24 = swift_retain_n(a11, 2);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.info.getter();
  v27 = (__int128 *)a1;
  if (os_log_type_enabled(v25, v26))
  {
    v28 = swift_slowAlloc(132, -1);
    v195 = swift_slowAlloc(416, -1);
    v201 = v195;
    *(_DWORD *)v28 = 136318210;
    type = v26;
    sub_100008390((uint64_t)v211, (uint64_t)&v199);
    v29 = sub_100003A2C(&qword_1001B07C8);
    v30 = String.init<A>(describing:)(&v199, v29);
    v32 = (_TtC14softposreaderd12RemoteReader *)v31;
    v199 = sub_1000056EC(v30, v31, &v201);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v199, v200, v28 + 4, v28 + 12);
    swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
    sub_100005D3C(v211);
    *(_WORD *)(v28 + 12) = 2080;
    sub_100008390((uint64_t)v210, (uint64_t)&v199);
    v40 = sub_100003A2C(&qword_1001AF6A0);
    v41 = String.init<A>(describing:)(&v199, v40);
    v43 = (_TtC14softposreaderd12RemoteReader *)v42;
    v199 = sub_1000056EC(v41, v42, &v201);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v199, v200, v28 + 14, v28 + 22);
    swift_bridgeObjectRelease(v43, v44, v45, v46, v47, v48, v49, v50);
    sub_100005D3C(v210);
    *(_WORD *)(v28 + 22) = 2080;
    swift_beginAccess(a3 + 72, v198, 0, 0);
    v51 = *(_TtC14softposreaderd12RemoteReader **)(a3 + 72);
    swift_retain();
    v52 = swift_bridgeObjectRetain();
    v53 = sub_1000B4000(v52);
    v55 = (_TtC14softposreaderd12RemoteReader *)v54;
    swift_bridgeObjectRelease(v51, v54, v56, v57, v58, v59, v60, v61);
    v199 = 0;
    v200[0] = (_TtC14softposreaderd12RemoteReader *)0xE000000000000000;
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease(v200[0], v62, v63, v64, v65, v66, v67, v68);
    v199 = 0xD000000000000011;
    v200[0] = (_TtC14softposreaderd12RemoteReader *)0x800000010016C620;
    v69._countAndFlagsBits = v53;
    v69._object = v55;
    String.append(_:)(v69);
    swift_release(a3);
    swift_bridgeObjectRelease(v55, v70, v71, v72, v73, v74, v75, v76);
    v77 = v200[0];
    v199 = sub_1000056EC(v199, (unint64_t)v200[0], &v201);
    v23 = a11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v199, v200, v28 + 24, v28 + 32);
    swift_release_n(a3, 2);
    swift_bridgeObjectRelease(v77, v78, v79, v80, v81, v82, v83, v84);
    *(_WORD *)(v28 + 32) = 2080;
    sub_100008390((uint64_t)v209, (uint64_t)&v199);
    v85 = sub_100003A2C(&qword_1001B07D0);
    v86 = String.init<A>(describing:)(&v199, v85);
    v88 = (_TtC14softposreaderd12RemoteReader *)v87;
    v199 = sub_1000056EC(v86, v87, &v201);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v199, v200, v28 + 34, v28 + 42);
    swift_bridgeObjectRelease(v88, v89, v90, v91, v92, v93, v94, v95);
    sub_100005D3C(v209);
    *(_WORD *)(v28 + 42) = 2080;
    sub_100008390((uint64_t)v208, (uint64_t)&v199);
    v96 = sub_100003A2C(&qword_1001AF6C0);
    v97 = String.init<A>(describing:)(&v199, v96);
    v99 = (_TtC14softposreaderd12RemoteReader *)v98;
    v199 = sub_1000056EC(v97, v98, &v201);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v199, v200, v28 + 44, v28 + 52);
    swift_bridgeObjectRelease(v99, v100, v101, v102, v103, v104, v105, v106);
    sub_100005D3C(v208);
    *(_WORD *)(v28 + 52) = 2080;
    sub_100008390((uint64_t)v207, (uint64_t)&v199);
    v107 = sub_100003A2C(&qword_1001AF6A8);
    v108 = String.init<A>(describing:)(&v199, v107);
    v110 = (_TtC14softposreaderd12RemoteReader *)v109;
    v199 = sub_1000056EC(v108, v109, &v201);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v199, v200, v28 + 54, v28 + 62);
    swift_bridgeObjectRelease(v110, v111, v112, v113, v114, v115, v116, v117);
    sub_100005D3C(v207);
    *(_WORD *)(v28 + 62) = 2080;
    sub_100008390((uint64_t)v206, (uint64_t)&v199);
    v118 = sub_100003A2C(&qword_1001AF6C8);
    v119 = String.init<A>(describing:)(&v199, v118);
    v121 = (_TtC14softposreaderd12RemoteReader *)v120;
    v199 = sub_1000056EC(v119, v120, &v201);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v199, v200, v28 + 64, v28 + 72);
    swift_bridgeObjectRelease(v121, v122, v123, v124, v125, v126, v127, v128);
    sub_100005D3C(v206);
    *(_WORD *)(v28 + 72) = 2080;
    sub_100008390((uint64_t)v205, (uint64_t)&v199);
    v129 = sub_100003A2C(&qword_1001B07D8);
    v130 = String.init<A>(describing:)(&v199, v129);
    v132 = (_TtC14softposreaderd12RemoteReader *)v131;
    v199 = sub_1000056EC(v130, v131, &v201);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v199, v200, v28 + 74, v28 + 82);
    swift_bridgeObjectRelease(v132, v133, v134, v135, v136, v137, v138, v139);
    sub_100005D3C(v205);
    *(_WORD *)(v28 + 82) = 2080;
    sub_100008390((uint64_t)v204, (uint64_t)&v199);
    v140 = sub_100003A2C(&qword_1001B07E0);
    v141 = String.init<A>(describing:)(&v199, v140);
    v143 = (_TtC14softposreaderd12RemoteReader *)v142;
    v199 = sub_1000056EC(v141, v142, &v201);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v199, v200, v28 + 84, v28 + 92);
    swift_bridgeObjectRelease(v143, v144, v145, v146, v147, v148, v149, v150);
    sub_100005D3C(v204);
    *(_WORD *)(v28 + 92) = 2080;
    sub_100008390((uint64_t)v203, (uint64_t)&v199);
    v151 = sub_100003A2C(&qword_1001AF2C8);
    v152 = String.init<A>(describing:)(&v199, v151);
    v154 = (_TtC14softposreaderd12RemoteReader *)v153;
    v199 = sub_1000056EC(v152, v153, &v201);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v199, v200, v28 + 94, v28 + 102);
    swift_bridgeObjectRelease(v154, v155, v156, v157, v158, v159, v160, v161);
    sub_100005D3C(v203);
    *(_WORD *)(v28 + 102) = 2080;
    v199 = a11;
    v162 = type metadata accessor for ConfiguratorAnalytics(0);
    swift_retain();
    v163 = String.init<A>(describing:)(&v199, v162);
    v165 = (_TtC14softposreaderd12RemoteReader *)v164;
    v199 = sub_1000056EC(v163, v164, &v201);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v199, v200, v28 + 104, v28 + 112);
    swift_release_n(a11, 2);
    swift_bridgeObjectRelease(v165, v166, v167, v168, v169, v170, v171, v172);
    *(_WORD *)(v28 + 112) = 2080;
    sub_100008390((uint64_t)v202, (uint64_t)&v199);
    v173 = sub_100003A2C(&qword_1001AF6B8);
    v174 = String.init<A>(describing:)(&v199, v173);
    v176 = (_TtC14softposreaderd12RemoteReader *)v175;
    v199 = sub_1000056EC(v174, v175, &v201);
    v21 = (__int128 *)a6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v199, v200, v28 + 114, v28 + 122);
    swift_bridgeObjectRelease(v176, v177, v178, v179, v180, v181, v182, v183);
    sub_100005D3C(v202);
    *(_WORD *)(v28 + 122) = 2080;
    if ((a13 & 1) != 0)
      v184 = 1702195828;
    else
      v184 = 0x65736C6166;
    if ((a13 & 1) != 0)
      v185 = (_TtC14softposreaderd12RemoteReader *)0xE400000000000000;
    else
      v185 = (_TtC14softposreaderd12RemoteReader *)0xE500000000000000;
    v199 = sub_1000056EC(v184, (unint64_t)v185, &v201);
    v27 = (__int128 *)a1;
    v22 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v199, v200, v28 + 124, v28 + 132);
    swift_bridgeObjectRelease(v185, v186, v187, v188, v189, v190, v191, v192);
    _os_log_impl((void *)&_mh_execute_header, v25, type, "Configurator.init(backend: %s, certificateManager: %s, profileCache: %s, attestationManager: %s, monitorManager: %s, auditor: %s, systemInfo: %s, storeAndForwardSelector: %s, signerFactory: %s, secureTimeKeeper: %s, analytics: %s, secureElement: %s, enforceJCOPVersion: %s)", (uint8_t *)v28, 0x84u);
    swift_arrayDestroy(v195, 13, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v195, -1, -1);
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {
    sub_100005D3C(v211);
    sub_100005D3C(v210);
    swift_release_n(a3, 2);
    sub_100005D3C(v209);
    sub_100005D3C(v208);
    sub_100005D3C(v207);
    sub_100005D3C(v206);
    sub_100005D3C(v205);
    sub_100005D3C(v204);
    sub_100005D3C(v203);
    swift_release_n(a11, 2);
    sub_100005D3C(v202);
  }

  sub_10001A674(v27, a14 + 24);
  sub_10001A674(&v233, a14 + 64);
  *(_QWORD *)(a14 + 104) = v22;
  sub_10001A674(&v230, a14 + 112);
  sub_10001A674(&v227, a14 + 152);
  sub_10001A674(v21, a14 + 232);
  sub_10001A674(&v224, a14 + 288);
  sub_10001A674(&v221, a14 + 368);
  sub_10001A674(&v218, a14 + 408);
  sub_10001A674(&v215, a14 + 192);
  *(_QWORD *)(a14 + 272) = v23;
  sub_10001A674(&v212, a14 + 328);
  *(_BYTE *)(a14 + 280) = a13 & 1;
  return a14;
}

uint64_t sub_10006E4B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[3];
  uint64_t v61;
  _UNKNOWN **v62;
  _QWORD v63[3];
  uint64_t v64;
  _UNKNOWN **v65;
  _QWORD v66[3];
  uint64_t v67;
  _UNKNOWN **v68;
  _QWORD v69[3];
  uint64_t v70;
  _UNKNOWN **v71;
  _QWORD v72[3];
  uint64_t v73;
  _UNKNOWN **v74;
  _QWORD v75[3];
  uint64_t v76;
  _UNKNOWN **v77;
  _QWORD v78[3];
  uint64_t v79;
  _UNKNOWN **v80;
  _QWORD v81[3];
  uint64_t v82;
  _UNKNOWN **v83;

  v58 = a3;
  v59 = a6;
  v57 = a1;
  v55 = a13;
  v56 = a11;
  v82 = type metadata accessor for CertificateManager();
  v83 = &off_100199940;
  v81[0] = a2;
  v79 = type metadata accessor for MPOCDefaultAttestationManager();
  v80 = &off_10019D8B8;
  v78[0] = a4;
  v76 = type metadata accessor for MPOCDefaultMonitorManager();
  v77 = &off_10019F1B0;
  v75[0] = a5;
  v73 = type metadata accessor for SystemInfo();
  v74 = &off_10019F8A0;
  v72[0] = a7;
  v70 = type metadata accessor for StoreAndForwardSelector();
  v71 = &off_1001A07D8;
  v69[0] = a8;
  v67 = type metadata accessor for SignerFactory();
  v68 = &off_10019FF20;
  v66[0] = a9;
  v64 = type metadata accessor for DefaultSecureTimeKeeper();
  v65 = &off_10019C0A0;
  v63[0] = a10;
  v61 = type metadata accessor for SecureElement();
  v62 = &off_1001A11A8;
  v60[0] = a12;
  v18 = type metadata accessor for Configurator();
  v54 = swift_allocObject(v18, 448, 7);
  v19 = sub_10001A64C((uint64_t)v81, v82);
  __chkstk_darwin(v19);
  v21 = (uint64_t *)((char *)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v22 + 16))(v21);
  v23 = sub_10001A64C((uint64_t)v78, v79);
  __chkstk_darwin(v23);
  v25 = (uint64_t *)((char *)&v53 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v26 + 16))(v25);
  v27 = sub_10001A64C((uint64_t)v75, v76);
  __chkstk_darwin(v27);
  v29 = (uint64_t *)((char *)&v53 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v30 + 16))(v29);
  v31 = sub_10001A64C((uint64_t)v72, v73);
  __chkstk_darwin(v31);
  v33 = (uint64_t *)((char *)&v53 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v34 + 16))(v33);
  v35 = sub_10001A64C((uint64_t)v69, v70);
  __chkstk_darwin(v35);
  v37 = (uint64_t *)((char *)&v53 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v38 + 16))(v37);
  v39 = sub_10001A64C((uint64_t)v66, v67);
  __chkstk_darwin(v39);
  v41 = (uint64_t *)((char *)&v53 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v42 + 16))(v41);
  v43 = sub_10001A64C((uint64_t)v63, v64);
  __chkstk_darwin(v43);
  v45 = (uint64_t *)((char *)&v53 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v46 + 16))(v45);
  v47 = sub_10001A64C((uint64_t)v60, v61);
  __chkstk_darwin(v47);
  v49 = (uint64_t *)((char *)&v53 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v50 + 16))(v49);
  v51 = sub_10006DB30(v57, *v21, v58, *v25, *v29, v59, *v33, *v37, *v41, *v45, v56, *v49, v55, v54);
  sub_100005D3C(v60);
  sub_100005D3C(v63);
  sub_100005D3C(v66);
  sub_100005D3C(v69);
  sub_100005D3C(v72);
  sub_100005D3C(v75);
  sub_100005D3C(v78);
  sub_100005D3C(v81);
  return v51;
}

uint64_t sub_10006E91C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  _QWORD v35[3];
  uint64_t *v36;
  _QWORD *v37;
  uint64_t *v38;
  _QWORD *v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t *v42;
  _QWORD *v43;
  int v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD v47[5];
  _QWORD v48[5];
  _QWORD v49[5];
  _QWORD v50[5];
  _QWORD v51[5];
  uint64_t v52;
  _QWORD v53[5];
  _QWORD v54[5];
  _QWORD v55[5];
  char v56[40];
  _QWORD v57[4];
  uint64_t v58;

  v3 = a1;
  sub_1000DC9E4();
  if (v1)
  {
    swift_release(a1);
  }
  else
  {
    sub_1000DD41C();
    sub_1000E02A4();
    v4 = sub_1000E17D4();
    sub_1000E1CDC();
    sub_1000DFD74();
    sub_100005EF8(v57, v57[3]);
    sub_100113BC0(1);
    sub_1000DF314();
    sub_1000E220C();
    sub_1000DF844();
    sub_1000DC4B4();
    v58 = sub_1000DCF14();
    sub_1000DDE7C();
    v6 = a1 + OBJC_IVAR____TtC9SPREngine5Depot_settings;
    v44 = *(unsigned __int8 *)(v6 + *(int *)(type metadata accessor for Settings(0) + 60));
    v7 = sub_10001A64C((uint64_t)v55, v55[3]);
    v46 = v35;
    __chkstk_darwin(v7);
    v42 = (_QWORD *)((char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(void))(v9 + 16))();
    v10 = sub_10001A64C((uint64_t)v54, v54[3]);
    v45 = v35;
    __chkstk_darwin(v10);
    v40 = (_QWORD *)((char *)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(void))(v12 + 16))();
    v13 = sub_10001A64C((uint64_t)v53, v53[3]);
    v43 = v35;
    __chkstk_darwin(v13);
    v38 = (_QWORD *)((char *)v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(void))(v15 + 16))();
    v16 = sub_10001A64C((uint64_t)v51, v51[3]);
    v41 = v35;
    __chkstk_darwin(v16);
    v36 = (_QWORD *)((char *)v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(void))(v18 + 16))();
    v19 = sub_10001A64C((uint64_t)v50, v50[3]);
    v39 = v35;
    __chkstk_darwin(v19);
    v21 = (_QWORD *)((char *)v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v22 + 16))(v21);
    v23 = sub_10001A64C((uint64_t)v49, v49[3]);
    v37 = v35;
    __chkstk_darwin(v23);
    v25 = (_QWORD *)((char *)v35 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v26 + 16))(v25);
    v27 = sub_10001A64C((uint64_t)v48, v48[3]);
    v35[2] = v35;
    __chkstk_darwin(v27);
    v29 = (_QWORD *)((char *)v35 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v30 + 16))(v29);
    v31 = sub_10001A64C((uint64_t)v47, v47[3]);
    v35[1] = v35;
    __chkstk_darwin(v31);
    v33 = (_QWORD *)((char *)v35 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v34 + 16))(v33);
    v3 = sub_10006E4B4((uint64_t)v56, *v42, v4, *v40, *v38, (uint64_t)&v52, *v36, *v21, *v25, *v29, v58, *v33, v44);
    sub_100005D3C(v47);
    sub_100005D3C(v48);
    sub_100005D3C(v49);
    sub_100005D3C(v50);
    sub_100005D3C(v51);
    sub_100005D3C(v53);
    sub_100005D3C(v54);
    sub_100005D3C(v55);
    swift_release(a1);
    sub_100005D3C(v57);
  }
  return v3;
}

void *sub_10006EFA4@<X0>(char a1@<W0>, void *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _TtC14softposreaderd12RemoteReader *v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t inited;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  _TtC14softposreaderd12RemoteReader *v36;
  os_unfair_lock_s *v37;
  uint64_t v38;
  os_unfair_lock_s *v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  os_unfair_lock_s *v47;
  _TtC14softposreaderd12RemoteReader **v48;
  os_unfair_lock_s *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  char v54;
  _BYTE v55[72];
  _BYTE __src[304];
  uint64_t v57;
  uint64_t v58;

  v4 = v3;
  v5 = v2;
  if (qword_1001ACFC0 != -1)
    swift_once(&qword_1001ACFC0, sub_100060E50);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100003A14(v8, (uint64_t)qword_1001B05E0);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(22, -1);
    v53 = swift_slowAlloc(64, -1);
    v13 = v53;
    *(_DWORD *)v12 = 136315394;
    v57 = sub_1000056EC(0xD00000000000001DLL, 0x800000010016C8D0, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2080;
    if ((a1 & 1) != 0)
      v14 = 1702195828;
    else
      v14 = 0x65736C6166;
    if ((a1 & 1) != 0)
      v15 = (_TtC14softposreaderd12RemoteReader *)0xE400000000000000;
    else
      v15 = (_TtC14softposreaderd12RemoteReader *)0xE500000000000000;
    v57 = sub_1000056EC(v14, (unint64_t)v15, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease(v15, v16, v17, v18, v19, v20, v21, v22);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s, force: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
    v23 = v13;
    v4 = v3;
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  if ((a1 & 1) != 0
    && (v24 = v5[22],
        v25 = v5[23],
        sub_100005EF8(v5 + 19, v24),
        (*(void (**)(uint64_t))(*(_QWORD *)(v25 + 8) + 8))(v24),
        v4))
  {
    v26 = v5[34];
    v27 = sub_100003A2C(&qword_1001ADA30);
    inited = swift_initStackObject(v27, v55);
    *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
    *(_BYTE *)(inited + 32) = 19;
    *(_QWORD *)(inited + 64) = &type metadata for Int;
    *(_QWORD *)(inited + 40) = 7;
    v36 = (_TtC14softposreaderd12RemoteReader *)sub_1000E862C(inited, v29, v30, v31, v32, v33, v34, v35);
    v37 = *(os_unfair_lock_s **)(v26 + 56);
    v38 = (uint64_t)&v37[4];
    v39 = v37 + 8;
    os_unfair_lock_lock(v37 + 8);
    sub_10005F610(v38, (uint64_t)v36);
    os_unfair_lock_unlock(v39);
    swift_bridgeObjectRelease(v36, v40, v41, v42, v43, v44, v45, v46);
    v47 = *(os_unfair_lock_s **)(v26 + 56);
    v48 = (_TtC14softposreaderd12RemoteReader **)&v47[4];
    v49 = v47 + 8;
    os_unfair_lock_lock(v47 + 8);
    sub_100060D14(v48, v26, 3);
    os_unfair_lock_unlock(v49);
    v57 = v4;
    swift_errorRetain();
    v50 = sub_100003A2C((uint64_t *)&unk_1001B1280);
    if ((swift_dynamicCast(&v53, &v57, v50, &type metadata for MPOCMonitorManagerError, 6) & 1) != 0)
    {
      v51 = sub_1001160B8(v53, v54);
    }
    else
    {
      swift_errorRetain();
      sub_1000247AC(2029, 0, 0, v4);
      v51 = swift_errorRelease();
    }
    swift_willThrow(v51);
    return (void *)swift_errorRelease();
  }
  else
  {
    sub_100005EF8(v5 + 14, v5[17]);
    sub_1000BB930(__src);
    return memcpy(a2, __src, 0x122uLL);
  }
}

void sub_10006F35C(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t, uint64_t), uint64_t (*a5)(char *, uint64_t, char *))
{
  atomic_flag *v5;
  atomic_flag *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  SEL v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  BOOL v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  NSObject *v60;
  os_signpost_type_t v61;
  uint64_t v62;
  _QWORD *v63;
  void (*v64)(char *, char *, uint64_t);
  char *v65;
  uint8_t *v66;
  os_signpost_id_t v67;
  os_signpost_type_t v68;
  char *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t (*v80)(uint64_t, uint64_t);
  uint64_t (*v81)(char *, uint64_t, char *);
  id v82;
  NSObject *v83;
  os_log_type_t v84;
  uint8_t *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t inited;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  _TtC14softposreaderd12RemoteReader *v101;
  os_unfair_lock_s *v102;
  uint64_t v103;
  os_unfair_lock_s *v104;
  SEL v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  void *v120;
  uint64_t v121;
  id v122;
  void *v123;
  unint64_t v124;
  _TtC14softposreaderd12RemoteReader *v125;
  _TtC14softposreaderd12RemoteReader *v126;
  atomic_flag *v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(_QWORD, _QWORD, _QWORD);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  _TtC14softposreaderd12RemoteReader *v151;
  os_unfair_lock_s *v152;
  uint64_t v153;
  os_unfair_lock_s *v154;
  SEL v155;
  id v156;
  id v157;
  id v158;
  id v159;
  id v160;
  id v161;
  id v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  void *v173;
  void *v174;
  void *v175;
  _TtC14softposreaderd12RemoteReader *v176;
  os_unfair_lock_s *v177;
  uint64_t v178;
  os_unfair_lock_s *v179;
  SEL v180;
  id v181;
  id v182;
  id v183;
  id v184;
  id v185;
  id v186;
  id v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t (*v191)(char *, uint64_t, char *);
  int v192;
  void (*v193)(char *, char *, char *);
  char *v194;
  char *v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unsigned int (*v204)(uint64_t, uint64_t, char *);
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  unint64_t v209;
  uint64_t v210;
  _TtC14softposreaderd12RemoteReader *v211;
  SEL v212;
  id v213;
  id v214;
  id v215;
  id v216;
  id v217;
  id v218;
  uint64_t v219;
  char *v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  char *v231;
  id v232;
  uint64_t (**v233)(uint64_t, uint64_t);
  uint64_t (*v234)(uint64_t, uint64_t);
  uint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  char *v242;
  char *v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  void (*v248)(_QWORD, _QWORD, _QWORD);
  uint64_t v249;
  id v250;
  uint64_t v251;
  char *v252;
  char *v253;
  _QWORD *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  atomic_flag *v260;
  uint64_t (*v261)(uint64_t, uint64_t);
  uint64_t (*v262)(char *, uint64_t, char *);
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  _BYTE v266[16];
  uint64_t v267;
  uint64_t (*v268)(uint64_t, uint64_t);
  _QWORD v269[3];
  uint64_t v270;
  void *v271;
  uint64_t v272;
  uint64_t v273;
  _OWORD v274[18];

  v6 = v5;
  v261 = a4;
  v262 = a5;
  v250 = a3;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v240 = v12;
  v241 = (char *)&v235 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v236 = (char *)&v235 - v13;
  v14 = sub_100003A2C(&qword_1001AD9E0);
  __chkstk_darwin(v14);
  v246 = (uint64_t)&v235 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Date(0, v16);
  v247 = *(_QWORD *)(v17 - 8);
  v248 = (void (*)(_QWORD, _QWORD, _QWORD))v17;
  __chkstk_darwin(v17);
  v19 = (char *)&v235 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v256 = sub_100003A2C((uint64_t *)&unk_1001B36F0);
  v238 = *(_QWORD *)(v256 - 8);
  v20 = __chkstk_darwin(v256);
  v244 = (uint64_t)&v235 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v237 = (uint64_t)&v235 - v23;
  v24 = __chkstk_darwin(v22);
  v243 = (char *)&v235 - v25;
  v26 = __chkstk_darwin(v24);
  v242 = (char *)&v235 - v27;
  v239 = v28;
  __chkstk_darwin(v26);
  v259 = (uint64_t)&v235 - v29;
  v30 = type metadata accessor for OSSignpostID(0);
  v254 = *(_QWORD **)(v30 - 8);
  v255 = v30;
  v31 = __chkstk_darwin(v30);
  v252 = (char *)&v235 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v253 = (char *)&v235 - v33;
  if (qword_1001ACFC0 != -1)
    swift_once(&qword_1001ACFC0, sub_100060E50);
  v34 = type metadata accessor for Logger(0);
  v35 = sub_100003A14(v34, (uint64_t)qword_1001B05E0);
  v36 = swift_bridgeObjectRetain_n(a2, 2);
  v258 = v35;
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.default.getter();
  v39 = os_log_type_enabled(v37, v38);
  v260 = v6;
  v245 = v19;
  v251 = a2;
  v249 = a1;
  v257 = v10;
  if (v39)
  {
    v40 = swift_slowAlloc(22, -1);
    v41 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v274[0] = v41;
    *(_DWORD *)v40 = 136315394;
    v265 = sub_1000056EC(0xD000000000000029, 0x800000010016C4D0, (uint64_t *)v274);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v265, v266, v40 + 4, v40 + 12);
    *(_WORD *)(v40 + 12) = 2080;
    v42 = String.redactedToken()();
    v265 = sub_1000056EC(v42._countAndFlagsBits, (unint64_t)v42._object, (uint64_t *)v274);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v265, v266, v40 + 14, v40 + 22);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v42._object, v43, v44, v45, v46, v47, v48, v49);
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "%s -> token: %s", (uint8_t *)v40, 0x16u);
    swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
    v6 = v260;
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v40, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  swift_beginAccess(&v6[16], v274, 33, 0);
  v50 = atomic_flag_test_and_set(v6 + 16);
  v51 = swift_endAccess(v274);
  if (!v50)
  {
    if (qword_1001ACFC8 != -1)
      swift_once(&qword_1001ACFC8, sub_100060EE0);
    v56 = type metadata accessor for OSSignposter(0);
    v57 = sub_100003A14(v56, (uint64_t)qword_1001B05F8);
    v58 = v253;
    v59 = static OSSignpostID.exclusive.getter();
    v235 = v57;
    v60 = OSSignposter.logHandle.getter(v59);
    v61 = static os_signpost_type_t.begin.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v63 = v254;
      v62 = v255;
      v64 = (void (*)(char *, char *, uint64_t))v254[2];
      v65 = v252;
      v64(v252, v58, v255);
      v66 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v66 = 0;
      v67 = OSSignpostID.rawValue.getter(v66);
      v68 = v61;
      v69 = v65;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v60, v68, v67, "config-install-totalTime", "start install", v66, 2u);
      swift_slowDealloc(v66, -1, -1);

      v70 = v63;
      ((void (*)(char *, uint64_t))v63[1])(v65, v62);
    }
    else
    {

      v70 = v254;
      v62 = v255;
      v64 = (void (*)(char *, char *, uint64_t))v254[2];
      v69 = v252;
    }
    v64(v69, v58, v62);
    v71 = type metadata accessor for OSSignpostIntervalState(0);
    swift_allocObject(v71, *(unsigned int *)(v71 + 48), *(unsigned __int16 *)(v71 + 52));
    v72 = OSSignpostIntervalState.init(id:isOpen:)(v69, 1);
    ((void (*)(char *, uint64_t))v70[1])(v58, v62);
    v73 = swift_allocBox(v256);
    v75 = v74;
    v76 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v257 + 56);
    v76(v74, 1, 1, v9);
    v252 = (char *)v76;
    v253 = (char *)v9;
    v76(v259, 1, 1, v9);
    v77 = swift_allocObject(&unk_10019C660, 24, 7);
    v78 = (uint64_t)v260;
    swift_weakInit(v77 + 16, v260);
    v79 = (_QWORD *)swift_allocObject(&unk_10019C688, 56, 7);
    v79[2] = v73;
    v79[3] = v77;
    v80 = v261;
    v81 = v262;
    v79[4] = v72;
    v79[5] = v80;
    v254 = v79;
    v79[6] = v81;
    swift_beginAccess(v78 + 328, &v273, 0, 0);
    sub_100005EF8((_QWORD *)(v78 + 328), *(_QWORD *)(v78 + 352));
    swift_retain();
    swift_retain();
    v255 = v72;
    swift_retain();
    v256 = v73;
    swift_retain();
    v82 = sub_1001457B8();
    if ((v82 & 1) == 0)
    {
      v83 = Logger.logObject.getter(v82);
      v84 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v83, v84))
      {
        v85 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v85 = 0;
        _os_log_impl((void *)&_mh_execute_header, v83, v84, "Incorrect JCOP version", v85, 2u);
        swift_slowDealloc(v85, -1, -1);
      }

      if (*(_BYTE *)(v78 + 280) == 1)
      {
        v86 = (void *)sub_1000247AC(2033, 0, 0, 0);
        v87 = *(_QWORD *)(v78 + 272);
        v88 = sub_100003A2C(&qword_1001ADA30);
        inited = swift_initStackObject(v88, &v263);
        *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
        *(_BYTE *)(inited + 32) = 8;
        *(_QWORD *)&v274[0] = v86;
        type metadata accessor for ConfigurationError(0);
        v91 = v90;
        v92 = sub_100005F1C((unint64_t *)&qword_1001AD750, (uint64_t (*)(uint64_t))type metadata accessor for ConfigurationError, (uint64_t)&unk_10015BC28);
        v93 = _BridgedStoredNSError.errorCode.getter(v91, v92);
        *(_QWORD *)(inited + 64) = &type metadata for Int;
        *(_QWORD *)(inited + 40) = v93;
        v101 = (_TtC14softposreaderd12RemoteReader *)sub_1000E862C(inited, v94, v95, v96, v97, v98, v99, v100);
        v102 = *(os_unfair_lock_s **)(v87 + 56);
        v103 = (uint64_t)&v102[4];
        v104 = v102 + 8;
        os_unfair_lock_lock(v102 + 8);
        sub_10005F610(v103, (uint64_t)v101);
        os_unfair_lock_unlock(v104);
        swift_bridgeObjectRelease(v101, v105, v106, v107, v108, v109, v110, v111);
        v112 = v86;
        v114 = v255;
        v113 = v256;
        sub_10006714C(0, (uint64_t)v86, v256, v77, v255, v261, (uint64_t)v262);
        swift_release(v77);
        swift_release(v114);
        swift_release(v254);

        goto LABEL_31;
      }
    }
    v258 = v75;
    if (v250)
      objc_msgSend(v250, "onUpdateWithEvent:", 0);
    sub_10003AD24("config-install-preprosessing", 28, 2, v78, 0xD00000000000001BLL, 0x800000010016C450);
    v115 = *(_QWORD *)(v78 + 352);
    v116 = sub_100005EF8((_QWORD *)(v78 + 328), v115);
    v117 = *(_QWORD *)(v115 - 8);
    __chkstk_darwin(v116);
    v119 = (char *)&v235 - ((v118 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v117 + 16))(v119);
    v120 = *(void **)(*(_QWORD *)v119 + 16);
    v121 = v251;
    swift_bridgeObjectRetain();
    v122 = objc_msgSend(v120, "serialNumber");
    if (v122)
    {
      v123 = v122;
      v124 = static String._unconditionallyBridgeFromObjectiveC(_:)(v122);
      v126 = v125;

      (*(void (**)(char *, uint64_t))(v117 + 8))(v119, v115);
      sub_1001250B4(v249, v121, v124, v126, v274);
      v127 = v260;
      sub_100005EF8(&v260[192]._Value, *(_QWORD *)&v260[216]._Value);
      v128 = v246;
      sub_10001E61C(v246);
      v129 = v247;
      v130 = v248;
      if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v247 + 48))(v128, 1, v248) == 1)
      {
        sub_10005218C(v128, &qword_1001AD9E0);
        v131 = sub_1000247AC(2039, 0xD00000000000001ELL, (void *)0x800000010016C470, 0);
        swift_willThrow(v131);
        sub_100054898(v274);
LABEL_26:
        v265 = v131;
        swift_errorRetain();
        v133 = sub_100003A2C((uint64_t *)&unk_1001B1280);
        type metadata accessor for ConfigurationError(0);
        v135 = v134;
        if (swift_dynamicCast(v269, &v265, v133, v134, 0))
        {
          v136 = (void *)v269[0];
          v271 = (void *)v269[0];
          v137 = sub_100005F1C((unint64_t *)&qword_1001AD750, (uint64_t (*)(uint64_t))type metadata accessor for ConfigurationError, (uint64_t)&unk_10015BC28);
          if (_BridgedStoredNSError.errorCode.getter(v135, v137) >= 2000)
          {
            v271 = v136;
            if (_BridgedStoredNSError.errorCode.getter(v135, v137) <= 2999)
            {
              swift_errorRelease();
              v165 = *(_QWORD *)&v127[272]._Value;
              v166 = sub_100003A2C(&qword_1001ADA30);
              v167 = swift_initStackObject(v166, &v270);
              *(_OWORD *)(v167 + 16) = xmmword_10015A5F0;
              *(_BYTE *)(v167 + 32) = 8;
              v271 = v136;
              v168 = _BridgedStoredNSError.errorCode.getter(v135, v137);
              *(_QWORD *)(v167 + 64) = &type metadata for Int;
              *(_QWORD *)(v167 + 40) = v168;
              v176 = (_TtC14softposreaderd12RemoteReader *)sub_1000E862C(v167, v169, v170, v171, v172, v173, v174, v175);
              v177 = *(os_unfair_lock_s **)(v165 + 56);
              v178 = (uint64_t)&v177[4];
              v179 = v177 + 8;
              os_unfair_lock_lock(v177 + 8);
              sub_10005F610(v178, (uint64_t)v176);
              os_unfair_lock_unlock(v179);
              swift_bridgeObjectRelease(v176, v180, v181, v182, v183, v184, v185, v186);
              v187 = v136;
              v188 = v255;
              v113 = v256;
              sub_10006714C(0, (uint64_t)v136, v256, v77, v255, v261, (uint64_t)v262);
              swift_release(v77);
              swift_release(v188);

              swift_release(v254);
              sub_10005218C(v259, (uint64_t *)&unk_1001B36F0);
              swift_errorRelease();
              goto LABEL_32;
            }
          }

        }
        swift_errorRelease();
        swift_errorRetain();
        v138 = (void *)sub_1000247AC(2016, 0, 0, v131);
        swift_errorRelease();
        v139 = *(_QWORD *)&v127[272]._Value;
        v140 = sub_100003A2C(&qword_1001ADA30);
        v141 = swift_initStackObject(v140, &v272);
        *(_OWORD *)(v141 + 16) = xmmword_10015A5F0;
        *(_BYTE *)(v141 + 32) = 8;
        v265 = (uint64_t)v138;
        v142 = sub_100005F1C((unint64_t *)&qword_1001AD750, (uint64_t (*)(uint64_t))type metadata accessor for ConfigurationError, (uint64_t)&unk_10015BC28);
        v143 = _BridgedStoredNSError.errorCode.getter(v135, v142);
        *(_QWORD *)(v141 + 64) = &type metadata for Int;
        *(_QWORD *)(v141 + 40) = v143;
        v151 = (_TtC14softposreaderd12RemoteReader *)sub_1000E862C(v141, v144, v145, v146, v147, v148, v149, v150);
        v152 = *(os_unfair_lock_s **)(v139 + 56);
        v153 = (uint64_t)&v152[4];
        v154 = v152 + 8;
        os_unfair_lock_lock(v152 + 8);
        sub_10005F610(v153, (uint64_t)v151);
        os_unfair_lock_unlock(v154);
        swift_bridgeObjectRelease(v151, v155, v156, v157, v158, v159, v160, v161);
        v162 = v138;
        v163 = v255;
        v113 = v256;
        sub_10006714C(0, (uint64_t)v138, v256, v77, v255, v261, (uint64_t)v262);

        swift_release(v254);
        swift_errorRelease();
        swift_release(v77);
        swift_release(v163);
LABEL_31:
        sub_10005218C(v259, (uint64_t *)&unk_1001B36F0);
LABEL_32:
        v164 = v113;
LABEL_33:
        swift_release(v164);
        return;
      }
      v132 = (uint64_t)v245;
      (*(void (**)(char *, uint64_t, _QWORD))(v129 + 32))(v245, v128, v130);
      sub_100124D14(v132);
      v189 = v242;
      sub_100124964(v242);
      v190 = v257;
      v191 = *(uint64_t (**)(char *, uint64_t, char *))(v257 + 48);
      v192 = v191(v189, 1, v253);
      if (v192 == 1)
      {
        sub_10005218C((uint64_t)v189, (uint64_t *)&unk_1001B36F0);
        v131 = sub_1000247AC(2011, 0, 0, 0);
        swift_willThrow(v131);
        sub_100054898(v274);
        (*(void (**)(char *, void (*)(_QWORD, _QWORD, _QWORD)))(v129 + 8))(v245, v130);
        goto LABEL_26;
      }
      swift_release(v77);
      v193 = *(void (**)(char *, char *, char *))(v190 + 32);
      v194 = v236;
      v195 = v253;
      v193(v236, v189, v253);
      v262 = v191;
      v196 = v129;
      v197 = v243;
      sub_100124B10(v243);
      sub_100054898(v274);
      (*(void (**)(char *, void (*)(_QWORD, _QWORD, _QWORD)))(v196 + 8))(v245, v130);
      v198 = v259;
      sub_10005218C(v259, (uint64_t *)&unk_1001B36F0);
      sub_100024374((uint64_t)v197, v198, (uint64_t *)&unk_1001B36F0);
      v248 = (void (*)(_QWORD, _QWORD, _QWORD))v193;
      v193(v197, v194, v195);
      ((void (*)(char *, _QWORD, uint64_t, char *))v252)(v197, 0, 1, v195);
      v199 = v258;
      swift_beginAccess(v258, v269, 1, 0);
      sub_10007057C((uint64_t)v197, v199);
      sub_100008390((uint64_t)&v127[232], (uint64_t)&v265);
      v200 = v267;
      v261 = v268;
      sub_100005EF8(&v265, v267);
      v201 = sub_100003A2C(&qword_1001ADA18);
      v202 = swift_initStackObject(v201, &v264);
      *(_OWORD *)(v202 + 16) = xmmword_10015A5F0;
      *(_QWORD *)(v202 + 32) = 1684631668;
      *(_QWORD *)(v202 + 40) = 0xE400000000000000;
      v203 = v237;
      sub_100005EB4(v199, v237, (uint64_t *)&unk_1001B36F0);
      v204 = (unsigned int (*)(uint64_t, uint64_t, char *))v262;
      v205 = v262((char *)v203, 1, v195);
      if ((_DWORD)v205 != 1)
      {
        v206 = UUID.uuidString.getter(v205);
        *(_QWORD *)(v202 + 72) = &type metadata for String;
        *(_QWORD *)(v202 + 80) = &protocol witness table for String;
        *(_QWORD *)(v202 + 48) = v206;
        *(_QWORD *)(v202 + 56) = v207;
        v208 = v253;
        v252 = *(char **)(v190 + 8);
        ((void (*)(uint64_t, char *))v252)(v203, v253);
        v209 = sub_1000E84EC(v202);
        v210 = v190;
        v211 = (_TtC14softposreaderd12RemoteReader *)v209;
        sub_100115684(15, v209, v200, (uint64_t)v261);
        swift_bridgeObjectRelease(v211, v212, v213, v214, v215, v216, v217, v218);
        sub_100005D3C(&v265);
        v219 = v244;
        sub_100005EB4(v199, v244, (uint64_t *)&unk_1001B36F0);
        if (v204(v219, 1, v208) != 1)
        {
          v220 = v241;
          (*(void (**)(char *, uint64_t, char *))(v210 + 16))(v241, v219, v253);
          v221 = v243;
          sub_100005EB4(v259, (uint64_t)v243, (uint64_t *)&unk_1001B36F0);
          v222 = *(unsigned __int8 *)(v210 + 80);
          v223 = (v222 + 48) & ~v222;
          v224 = *(unsigned __int8 *)(v238 + 80);
          v225 = (v240 + v224 + v223) & ~v224;
          v226 = (v239 + v225 + 7) & 0xFFFFFFFFFFFFFFF8;
          v227 = (v226 + 15) & 0xFFFFFFFFFFFFFFF8;
          v228 = swift_allocObject(&unk_10019C6B0, v227 + 16, v222 | v224 | 7);
          *(_QWORD *)(v228 + 16) = v260;
          *(_BYTE *)(v228 + 24) = 1;
          v229 = v251;
          *(_QWORD *)(v228 + 32) = v249;
          *(_QWORD *)(v228 + 40) = v229;
          v230 = v220;
          v231 = v253;
          v248(v228 + v223, v230, v253);
          sub_100024374((uint64_t)v221, v228 + v225, (uint64_t *)&unk_1001B36F0);
          v232 = v250;
          *(_QWORD *)(v228 + v226) = v250;
          v233 = (uint64_t (**)(uint64_t, uint64_t))(v228 + v227);
          v234 = (uint64_t (*)(uint64_t, uint64_t))v254;
          *v233 = sub_10007056C;
          v233[1] = v234;
          swift_unknownObjectRetain(v232);
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
          sub_100068670((uint64_t)sub_1000705C8, v228);
          swift_release(v255);
          swift_release(v234);
          swift_release(v228);
          sub_10005218C(v259, (uint64_t *)&unk_1001B36F0);
          ((void (*)(uint64_t, char *))v252)(v244, v231);
          v164 = v256;
          goto LABEL_33;
        }
LABEL_42:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_42;
  }
  v52 = Logger.logObject.getter(v51);
  v53 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v52, v53))
  {
    v54 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v54 = 0;
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "install in progress", v54, 2u);
    swift_slowDealloc(v54, -1, -1);
  }

  v55 = (void *)sub_1000247AC(2026, 0xD000000000000013, (void *)0x800000010016C4B0, 0);
  v261(0, (uint64_t)v55);

}

uint64_t sub_10007050C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100070530()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10007056C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10006714C(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(uint64_t (**)(uint64_t, uint64_t))(v2 + 40), *(_QWORD *)(v2 + 48));
}

uint64_t sub_10007057C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003A2C((uint64_t *)&unk_1001B36F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000705CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void (*v17)(uint64_t, uint64_t);
  unint64_t v18;
  unint64_t v19;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = *(_QWORD *)(sub_100003A2C((uint64_t *)&unk_1001B36F0) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v5 + v7) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(v0 + 48), v10, v11, v12, v13, v14, v15, v16);
  v17 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v17(v0 + v4, v1);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v0 + v8, 1, v1))
    v17(v0 + v8, v1);
  v18 = (v9 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = v18 + 8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v18));
  return swift_deallocObject(v0, v19, v3 | v7 | 7);
}

void sub_1000706C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v4 + *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(sub_100003A2C((uint64_t *)&unk_1001B36F0) - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  sub_100068158(a1, *(void (**)(_QWORD, id))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(void **)(v1 + 48), v1 + v4, v1 + v7, *(_QWORD *)(v1 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFF8)));
}

void sub_100070760(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t inited;
  _TtC14softposreaderd12RemoteReader *v8;
  Class isa;
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void **aBlock;
  unint64_t v21;
  void (*v22)(uint64_t, void *);
  void *v23;
  void (*v24)(uint64_t);
  uint64_t v25;
  char v26[104];

  v4 = objc_msgSend((id)objc_opt_self(NFRemoteAdminManager), "sharedRemoteAdminManager");
  if (v4)
  {
    v5 = v4;
    v6 = sub_100003A2C(&qword_1001B07B8);
    inited = swift_initStackObject(v6, v26);
    *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
    aBlock = (void **)0xD000000000000010;
    v21 = 0x800000010016C5E0;
    AnyHashable.init<A>(_:)((_QWORD *)(inited + 32), &aBlock, &type metadata for String, &protocol witness table for String);
    *(_QWORD *)(inited + 96) = &type metadata for Bool;
    *(_BYTE *)(inited + 72) = 1;
    v8 = (_TtC14softposreaderd12RemoteReader *)sub_10000459C(inited);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v8, v10, v11, v12, v13, v14, v15, v16);
    v17 = swift_allocObject(&unk_10019C700, 32, 7);
    *(_QWORD *)(v17 + 16) = a1;
    *(_QWORD *)(v17 + 24) = a2;
    v24 = sub_100070BC0;
    v25 = v17;
    aBlock = _NSConcreteStackBlock;
    v21 = 1107296256;
    v22 = sub_10006861C;
    v23 = &unk_10019C718;
    v18 = _Block_copy(&aBlock);
    v19 = v25;
    sub_10003AB68(a1, a2);
    swift_release(v19);
    objc_msgSend(v5, "connectToServer:initialClientRequestInfo:callback:", 0, isa, v18);
    _Block_release(v18);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10007090C(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  if (*(_QWORD *)(a1 + 16)
    && (v9 = sub_10000ADC4(0xD000000000000013, 0x800000010016C580), (a2 & 1) != 0)
    && (sub_100005D5C(*(_QWORD *)(a1 + 56) + 32 * v9, (uint64_t)&v15),
        (swift_dynamicCast(&v14, &v15, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) != 0)
    && *(_QWORD *)(a1 + 16)
    && (v10 = v14, v11 = sub_10000ADC4(0xD000000000000015, 0x800000010016C5A0), (a2 & 1) != 0)
    && (sub_100005D5C(*(_QWORD *)(a1 + 56) + 32 * v11, (uint64_t)&v15),
        (swift_dynamicCast(&v14, &v15, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) != 0))
  {
    if (*(_QWORD *)(a1 + 16)
      && (v12 = sub_10000ADC4(0xD000000000000012, 0x800000010016C5C0), (a2 & 1) != 0))
    {
      sub_100005D5C(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)&v15);
    }
    else
    {
      v15 = 0u;
      v16 = 0u;
    }
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, a2, a3, a4, a5, a6, a7, a8);
    if (*((_QWORD *)&v16 + 1))
    {
      if ((swift_dynamicCast(&v14, &v15, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) != 0)
        return v10;
    }
    else
    {
      sub_10005218C((uint64_t)&v15, &qword_1001B12E0);
    }
  }
  else
  {
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t sub_100070AAC(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  unint64_t v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  const char *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t result;
  char v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;

  if (!*(_QWORD *)(a1 + 16)
    || (v9 = sub_10000ADC4(0x6C62616C69617661, 0xEF79726F6D654D65), (a2 & 1) == 0))
  {
    v28 = 0u;
    v29 = 0u;
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_8;
  }
  sub_100005D5C(*(_QWORD *)(a1 + 56) + 32 * v9, (uint64_t)&v28);
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, v10, v11, v12, v13, v14, v15, v16);
  if (!*((_QWORD *)&v29 + 1))
  {
LABEL_8:
    sub_10005218C((uint64_t)&v28, &qword_1001B12E0);
    return 0;
  }
  v17 = sub_100003A2C(&qword_1001AEAC8);
  if ((swift_dynamicCast(&v27, &v28, (char *)&type metadata for Any + 8, v17, 6) & 1) == 0)
    return 0;
  result = sub_10007090C(v27, v18, v19, v20, v21, v22, v23, v24);
  if ((v26 & 1) != 0)
    return 0;
  return result;
}

uint64_t sub_100070B94()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100070BC0(uint64_t a1)
{
  uint64_t v1;

  sub_100068374(a1, *(void (**)(uint64_t))(v1 + 16));
}

uint64_t sub_100070BC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100070BD8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100070BE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void (*v17)(uint64_t, uint64_t);
  unint64_t v18;
  unint64_t v19;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = *(_QWORD *)(sub_100003A2C((uint64_t *)&unk_1001B36F0) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v5 + v7) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(v0 + 40), v10, v11, v12, v13, v14, v15, v16);
  v17 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v17(v0 + v4, v1);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v0 + v8, 1, v1))
    v17(v0 + v8, v1);
  v18 = (v9 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v18));
  swift_release(*(_QWORD *)(v0 + v19 + 8));
  return swift_deallocObject(v0, v19 + 16, v3 | v7 | 7);
}

void sub_100070CE8(_TtC14softposreaderd12RemoteReader *a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v7 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = v8 + *(_QWORD *)(v7 + 64);
  v10 = *(_QWORD *)(sub_100003A2C((uint64_t *)&unk_1001B36F0) - 8);
  v11 = (v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v12 = (*(_QWORD *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1000677AC(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_BYTE *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), v3 + v8, v3 + v11, *(_QWORD *)(v3 + v12), *(void (**)(_QWORD, void *))(v3 + ((v12 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v3 + ((v12 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_100070DB0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

void sub_100070DDC(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_100068788(a1, a2, *(_QWORD *)(v2 + 16), *(void (**)(_QWORD, _QWORD, id))(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_100070DE8()
{
  uint64_t v0;

  sub_100070E18(*(id *)(v0 + 16), *(_BYTE *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 49, 7);
}

void sub_100070E18(id a1, char a2)
{
  if ((a2 & 1) != 0)

  else
    swift_bridgeObjectRelease(a1);
}

void sub_100070E24()
{
  uint64_t v0;

  sub_100069CE8(*(void **)(v0 + 16), *(_BYTE *)(v0 + 24), *(void (**)(void *, _QWORD, void *))(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
}

id sub_100070E38(id a1, char a2)
{
  if ((a2 & 1) != 0)
    return a1;
  else
    return (id)swift_bridgeObjectRetain(a1);
}

void sub_100070E44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10000DF98(v2, a2);
}

void sub_100070E5C(char *a1@<X8>)
{
  sub_10000CFA8(a1);
}

void sub_100070E74(BOOL *a1@<X8>)
{
  uint64_t v1;

  sub_10000D178(*(_QWORD *)(v1 + 16), a1, *(double *)(v1 + 24));
}

uint64_t type metadata accessor for Configurator.StoreAndForwardState(uint64_t a1)
{
  uint64_t result;

  result = qword_1001B0880;
  if (!qword_1001B0880)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Configurator.StoreAndForwardState);
  return result;
}

uint64_t sub_100070ECC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100070F10(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100070F4C(uint64_t a1)
{
  uint64_t v2;
  __int128 v4;
  __int128 v5;

  v2 = *(_QWORD *)(a1 + 272);
  v4 = *(_OWORD *)(a1 + 224);
  v5 = *(_OWORD *)(a1 + 240);
  sub_100070FD0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((unint64_t *)&v5 + 1),
    *(_QWORD *)(a1 + 256),
    *(_QWORD *)(a1 + 264));
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t sub_100070FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,unint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a30);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a8);
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRetain(a12);
    swift_bridgeObjectRetain(a18);
    swift_bridgeObjectRetain(a20);
    swift_bridgeObjectRetain(a22);
    swift_bridgeObjectRetain(a24);
    swift_bridgeObjectRetain(a26);
    swift_bridgeObjectRetain(a28);
    sub_100005D9C(a31, a32);
    return swift_bridgeObjectRetain(a34);
  }
  return result;
}

uint64_t sub_1000710DC(uint64_t a1)
{
  uint64_t v2;
  __int128 v4;
  __int128 v5;

  v2 = *(_QWORD *)(a1 + 272);
  v4 = *(_OWORD *)(a1 + 224);
  v5 = *(_OWORD *)(a1 + 240);
  sub_100024170(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((unint64_t *)&v5 + 1),
    *(_QWORD *)(a1 + 256),
    *(_QWORD *)(a1 + 264));
  swift_bridgeObjectRelease(v2);
  return a1;
}

unint64_t sub_100071160()
{
  unint64_t result;

  result = qword_1001B07F8;
  if (!qword_1001B07F8)
  {
    result = swift_getWitnessTable(&unk_100162960, &type metadata for MPOCDeprecationWarning);
    atomic_store(result, (unint64_t *)&qword_1001B07F8);
  }
  return result;
}

uint64_t sub_1000711A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001348E0(a1, a2);
}

uint64_t sub_1000711C0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v23 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v23 + ((v6 + 16) & ~(unint64_t)v6);
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      v24 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(a1, a2, v24);
      v25 = a1;
      v26 = a3;
      v27 = 1;
LABEL_11:
      swift_storeEnumTagMultiPayload(v25, v26, v27);
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      v9 = a2[1];
      if (v9)
      {
        *(_QWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 8) = v9;
        v10 = a2[3];
        *(_QWORD *)(a1 + 16) = a2[2];
        *(_QWORD *)(a1 + 24) = v10;
        v11 = a2[5];
        *(_QWORD *)(a1 + 32) = a2[4];
        *(_QWORD *)(a1 + 40) = v11;
        v12 = a2[7];
        *(_QWORD *)(a1 + 48) = a2[6];
        *(_QWORD *)(a1 + 56) = v12;
        v13 = a2[9];
        *(_QWORD *)(a1 + 64) = a2[8];
        *(_QWORD *)(a1 + 72) = v13;
        v14 = a2[11];
        *(_QWORD *)(a1 + 80) = a2[10];
        *(_QWORD *)(a1 + 88) = v14;
        *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
        *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
        *(_QWORD *)(a1 + 112) = a2[14];
        v15 = a2[17];
        *(_QWORD *)(a1 + 128) = a2[16];
        *(_QWORD *)(a1 + 136) = v15;
        v16 = a2[19];
        *(_QWORD *)(a1 + 144) = a2[18];
        *(_QWORD *)(a1 + 152) = v16;
        v17 = a2[21];
        *(_QWORD *)(a1 + 160) = a2[20];
        *(_QWORD *)(a1 + 168) = v17;
        v18 = a2[23];
        *(_QWORD *)(a1 + 176) = a2[22];
        *(_QWORD *)(a1 + 184) = v18;
        v19 = a2[25];
        *(_QWORD *)(a1 + 192) = a2[24];
        *(_QWORD *)(a1 + 200) = v19;
        v20 = a2[27];
        *(_QWORD *)(a1 + 208) = a2[26];
        *(_QWORD *)(a1 + 216) = v20;
        v21 = a2[29];
        *(_QWORD *)(a1 + 224) = a2[28];
        *(_QWORD *)(a1 + 232) = v21;
        v30 = a2[31];
        v31 = a2[30];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_100005D9C(v31, v30);
        *(_QWORD *)(a1 + 240) = v31;
        *(_QWORD *)(a1 + 248) = v30;
        v22 = a2[33];
        *(_QWORD *)(a1 + 256) = a2[32];
        *(_QWORD *)(a1 + 264) = v22;
        swift_bridgeObjectRetain();
      }
      else
      {
        memcpy((void *)a1, a2, 0x110uLL);
      }
      v28 = a2[35];
      *(_QWORD *)(a1 + 272) = a2[34];
      *(_QWORD *)(a1 + 280) = v28;
      *(_WORD *)(a1 + 288) = *((_WORD *)a2 + 144);
      swift_bridgeObjectRetain();
      v25 = a1;
      v26 = a3;
      v27 = 0;
      goto LABEL_11;
    }
    memcpy((void *)a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

void sub_1000713FC(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  const char *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _TtC14softposreaderd12RemoteReader *v11;
  SEL v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  SEL v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  SEL v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  SEL v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  SEL v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  SEL v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  SEL v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  uint64_t v103;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, a2);
  if (EnumCaseMultiPayload == 1)
  {
    v103 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v103 - 8) + 8))(a1, v103);
  }
  else if (!EnumCaseMultiPayload)
  {
    v11 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 8);
    if (v11)
    {
      swift_bridgeObjectRelease(v11, v4, v5, v6, v7, v8, v9, v10);
      swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 24), v12, v13, v14, v15, v16, v17, v18);
      swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 40), v19, v20, v21, v22, v23, v24, v25);
      swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 56), v26, v27, v28, v29, v30, v31, v32);
      swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 72), v33, v34, v35, v36, v37, v38, v39);
      swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 88), v40, v41, v42, v43, v44, v45, v46);
      swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 136), v47, v48, v49, v50, v51, v52, v53);
      swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 152), v54, v55, v56, v57, v58, v59, v60);
      swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 168), v61, v62, v63, v64, v65, v66, v67);
      swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 184), v68, v69, v70, v71, v72, v73, v74);
      swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 200), v75, v76, v77, v78, v79, v80, v81);
      swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 216), v82, v83, v84, v85, v86, v87, v88);
      swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 232), v89, v90, v91, v92, v93, v94, v95);
      sub_100005DE0(*(_QWORD *)(a1 + 240), *(_QWORD *)(a1 + 248));
      swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 264), v96, v97, v98, v99, v100, v101, v102);
    }
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 272), v4, v5, v6, v7, v8, v9, v10);
  }
}

uint64_t sub_1000714D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27;
  uint64_t v28;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    v21 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(a1, a2, v21);
    v22 = a1;
    v23 = a3;
    v24 = 1;
LABEL_9:
    swift_storeEnumTagMultiPayload(v22, v23, v24);
    return a1;
  }
  if (!EnumCaseMultiPayload)
  {
    v7 = *(_QWORD *)(a2 + 8);
    if (v7)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v7;
      v8 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v8;
      v9 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = v9;
      v10 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v10;
      v11 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v11;
      v12 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v12;
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      v13 = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = v13;
      v14 = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = v14;
      v15 = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = v15;
      v16 = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      *(_QWORD *)(a1 + 184) = v16;
      v17 = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 200) = v17;
      v18 = *(_QWORD *)(a2 + 216);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 216) = v18;
      v19 = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 232) = v19;
      v27 = *(_QWORD *)(a2 + 248);
      v28 = *(_QWORD *)(a2 + 240);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100005D9C(v28, v27);
      *(_QWORD *)(a1 + 240) = v28;
      *(_QWORD *)(a1 + 248) = v27;
      v20 = *(_QWORD *)(a2 + 264);
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
      *(_QWORD *)(a1 + 264) = v20;
      swift_bridgeObjectRetain();
    }
    else
    {
      memcpy((void *)a1, (const void *)a2, 0x110uLL);
    }
    v25 = *(_QWORD *)(a2 + 280);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 280) = v25;
    *(_WORD *)(a1 + 288) = *(_WORD *)(a2 + 288);
    swift_bridgeObjectRetain();
    v22 = a1;
    v23 = a3;
    v24 = 0;
    goto LABEL_9;
  }
  memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

uint64_t sub_1000716EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;

  if (a1 != a2)
  {
    sub_100070F10(a1, type metadata accessor for Configurator.StoreAndForwardState);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      v8 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = a3;
      v11 = 1;
LABEL_10:
      swift_storeEnumTagMultiPayload(v9, v10, v11);
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      if (*(_QWORD *)(a2 + 8))
      {
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
        *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
        *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
        *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
        *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
        v7 = *(_QWORD *)(a2 + 112);
        *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
        *(_QWORD *)(a1 + 112) = v7;
        *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
        *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
        *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
        *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
        *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
        *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
        *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
        *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
        *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
        *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
        *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
        *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
        *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
        *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
        v14 = *(_QWORD *)(a2 + 248);
        v15 = *(_QWORD *)(a2 + 240);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_100005D9C(v15, v14);
        *(_QWORD *)(a1 + 240) = v15;
        *(_QWORD *)(a1 + 248) = v14;
        *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
        *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
        swift_bridgeObjectRetain();
      }
      else
      {
        memcpy((void *)a1, (const void *)a2, 0x110uLL);
      }
      *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
      v12 = *(_QWORD *)(a2 + 280);
      *(_WORD *)(a1 + 288) = *(_WORD *)(a2 + 288);
      *(_QWORD *)(a1 + 280) = v12;
      swift_bridgeObjectRetain();
      v9 = a1;
      v10 = a3;
      v11 = 0;
      goto LABEL_10;
    }
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_100071998(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_100070F10((uint64_t)a1, type metadata accessor for Configurator.StoreAndForwardState);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for UUID(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100071A3C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_10015FC68;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
    return 0;
  }
  return result;
}

uint64_t sub_100071AC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B08B8);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B08B8);
  if (qword_1001AD180 != -1)
    swift_once(&qword_1001AD180, sub_1000CC92C);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4E70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100071B54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B08D0);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B08D0);
  if (qword_1001AD148 != -1)
    swift_once(&qword_1001AD148, sub_1000CC3B0);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4DC8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_100071BE4(char *a1@<X8>)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  char v11;
  void **aBlock;
  uint64_t v13;
  void (*v14)(uint64_t, void *, void *);
  void *v15;
  uint64_t (*v16)(_QWORD);
  uint64_t v17;

  v2 = (void *)objc_opt_self(NFHardwareManager);
  v3 = objc_msgSend(v2, "sharedHardwareManager");
  if (!v3)
  {
    __break(1u);
    goto LABEL_10;
  }
  v4 = v3;
  v16 = j___s7SPRBase9BitStringV4data10unusedBitsAC10Foundation4DataV_s5UInt8VtcfC;
  v17 = 0;
  aBlock = _NSConcreteStackBlock;
  v13 = 1107296256;
  v14 = sub_100004C68;
  v15 = &unk_10019C888;
  v5 = _Block_copy(&aBlock);
  v6 = objc_msgSend(v4, "startSecureElementReaderSession:", v5);
  _Block_release(v5);

  if (!v6)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v7 = objc_msgSend(v2, "sharedHardwareManager");
  if (!v7)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v8 = v7;
  v16 = BitString.init(data:unusedBits:);
  v17 = 0;
  aBlock = _NSConcreteStackBlock;
  v13 = 1107296256;
  v14 = sub_100004C68;
  v15 = &unk_10019C8B0;
  v9 = _Block_copy(&aBlock);
  v10 = objc_msgSend(v8, "startSecureElementReaderSession:", v9);
  _Block_release(v9);

  if (!v10)
  {
LABEL_12:
    __break(1u);
    return;
  }
  if (objc_msgSend(v6, "isFirstInQueue"))
    v11 = objc_msgSend(v10, "isFirstInQueue") ^ 1;
  else
    v11 = 1;
  objc_msgSend(v6, "endSession");
  objc_msgSend(v10, "endSession");
  swift_unknownObjectRelease(v6);
  swift_unknownObjectRelease(v10);
  *a1 = v11;
}

uint64_t sub_100071DB8(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v8;

  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(v8 + 24), a2, a3, a4, a5, a6, a7, a8);

  sub_100005D3C((_QWORD *)(v8 + 40));
  return swift_deallocClassInstance(v8, 80, 7);
}

uint64_t type metadata accessor for MPOCDefaultAttestationData()
{
  return objc_opt_self(_TtC9SPREngine26MPOCDefaultAttestationData);
}

uint64_t sub_100071E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100071E1C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

_QWORD *sub_100071E24(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  __int128 v28;
  uint64_t v29;
  _UNKNOWN **v30;

  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for SecureElement();
  v30 = &off_1001A11A8;
  *(_QWORD *)&v28 = a1;
  a2[2] = 0xD000000000000017;
  a2[3] = 0x800000010016B220;
  v14 = sub_10001A610();
  static DispatchQoS.background.getter(v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v7);
  v27 = _swiftEmptyArrayStorage;
  v15 = sub_1000723C4();
  v16 = sub_100003A2C((uint64_t *)&unk_1001B1250);
  v17 = sub_10005E1B0();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v16, v17, v4, v15);
  a2[4] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002CLL, 0x800000010016C930, v13, v6, v10, 0);
  if (qword_1001ACFD8 != -1)
    swift_once(&qword_1001ACFD8, sub_100071B54);
  v18 = type metadata accessor for Logger(0);
  v19 = sub_100003A14(v18, (uint64_t)qword_1001B08D0);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = (_QWORD *)swift_slowAlloc(32, -1);
    v27 = v23;
    *(_DWORD *)v22 = 136315138;
    v26 = sub_1000056EC(0xD000000000000014, 0x800000010016C960, (uint64_t *)&v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v22 + 4, v22 + 12);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s", v22, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }

  sub_10001A674(&v28, (uint64_t)(a2 + 5));
  return a2;
}

uint64_t sub_100072134()
{
  void *v0;
  id v1;
  unint64_t v2;
  id v3;
  unint64_t v4;
  id v5;
  uint64_t v6;
  unsigned __int8 v7;
  int v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v0 = (void *)objc_opt_self(NSProcessInfo);
  v1 = objc_msgSend(v0, "processInfo");
  objc_msgSend(v1, "operatingSystemVersion");
  v2 = v10;

  v3 = objc_msgSend(v0, "processInfo");
  objc_msgSend(v3, "operatingSystemVersion");
  v4 = v11;

  v5 = objc_msgSend(v0, "processInfo");
  objc_msgSend(v5, "operatingSystemVersion");
  v6 = v12;

  if ((v2 & 0x8000000000000000) != 0)
  {
    LOBYTE(v2) = 0;
    if ((v4 & 0x8000000000000000) != 0)
      goto LABEL_13;
  }
  else
  {
    if (v2 <= 0xFF)
    {
      if ((v4 & 0x8000000000000000) == 0)
        goto LABEL_4;
LABEL_13:
      if (v6 < 0)
      {
        v8 = 0;
        LOBYTE(v4) = 0;
        return v8 | (v4 << 8) | v2;
      }
      LOBYTE(v4) = 0;
      goto LABEL_6;
    }
    LOBYTE(v2) = -1;
    if ((v4 & 0x8000000000000000) != 0)
      goto LABEL_13;
  }
LABEL_4:
  if (v4 > 0xFF)
  {
    LOBYTE(v4) = -1;
    if ((v6 & 0x8000000000000000) == 0)
      goto LABEL_6;
LABEL_16:
    v8 = 0;
    return v8 | (v4 << 8) | v2;
  }
  if (v6 < 0)
    goto LABEL_16;
LABEL_6:
  v7 = -1;
  if (v6 < 255)
    v7 = v6;
  v8 = v7 << 16;
  return v8 | (v4 << 8) | v2;
}

_QWORD *sub_100072274(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD v16[5];
  _QWORD v17[5];

  sub_1000DDE7C();
  if (!v1)
  {
    v3 = sub_10001A64C((uint64_t)v17, v17[3]);
    __chkstk_darwin(v3);
    v5 = (_QWORD *)((char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v6 + 16))(v5);
    v7 = *v5;
    v8 = type metadata accessor for SecureElement();
    v16[3] = v8;
    v16[4] = &off_1001A11A8;
    v16[0] = v7;
    v9 = type metadata accessor for MPOCDefaultAttestationData();
    v10 = (_QWORD *)swift_allocObject(v9, 80, 7);
    v11 = sub_10001A64C((uint64_t)v16, v8);
    __chkstk_darwin(v11);
    v13 = (_QWORD *)((char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v14 + 16))(v13);
    a1 = sub_100071E24(*v13, v10);
    sub_100005D3C(v16);
    sub_100005D3C(v17);
  }
  return a1;
}

unint64_t sub_1000723C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001AE3E0;
  if (!qword_1001AE3E0)
  {
    v1 = type metadata accessor for OS_dispatch_queue.Attributes(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_1001AE3E0);
  }
  return result;
}

uint64_t sub_100072418()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B09F8);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B09F8);
  if (qword_1001AD158 != -1)
    swift_once(&qword_1001AD158, sub_1000CC540);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4DF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1000724A8()
{
  uint64_t v0;

  objc_msgSend(*(id *)(v0 + 72), "finishTasksAndInvalidate");
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  sub_100005D3C((_QWORD *)(v0 + 32));

  return swift_deallocClassInstance(v0, 80, 7);
}

uint64_t type metadata accessor for SecureChannel()
{
  return objc_opt_self(_TtC9SPREngine13SecureChannel);
}

uint64_t sub_10007250C@<X0>(uint64_t a1@<X0>, int a2@<W1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t (*v28)(char *, unint64_t, uint64_t);
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _TtC14softposreaderd12RemoteReader *v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  uint64_t (*v47)(char *, uint64_t);
  uint64_t v48;
  unint64_t v49;
  _TtC14softposreaderd12RemoteReader *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _QWORD *v54;
  SEL v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  _TtC14softposreaderd12RemoteReader *v63;
  _TtC14softposreaderd12RemoteReader *v64;
  SEL v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  os_log_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  int v82;
  uint64_t v83;
  _TtC14softposreaderd12RemoteReader *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  SEL v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  os_log_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  unint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  char v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  _TtC14softposreaderd12RemoteReader *v143;
  _BYTE v144[272];
  _BYTE v145[272];
  _BYTE v146[272];
  _OWORD v147[17];
  char *v148;

  v114 = a4;
  v113 = a2;
  v119 = type metadata accessor for DispatchTime(0);
  v117 = *(_QWORD *)(v119 - 8);
  __chkstk_darwin(v119);
  v116 = (char *)&v104 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = type metadata accessor for URLRequest(0);
  v7 = *(_QWORD *)(v118 - 8);
  __chkstk_darwin(v118);
  v148 = (char *)&v104 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003A2C(&qword_1001B0438);
  __chkstk_darwin(v9);
  v11 = (char *)&v104 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v104 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v104 - v18;
  v120 = a1;
  URLRequest.url.getter(v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_100077844((uint64_t)v11);
    v20 = sub_100024788(5005, 0xD000000000000019, (void *)0x800000010016CB00, 0);
    return swift_willThrow(v20);
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v19, v11, v12);
  if (qword_1001ACFE0 != -1)
    swift_once(&qword_1001ACFE0, sub_100072418);
  v22 = type metadata accessor for Logger(0);
  sub_100003A14(v22, (uint64_t)qword_1001B09F8);
  v23 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v111 = v19;
  v23(v16, v19, v12);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v110 = v7;
  v25 = v118;
  v24(v148, v120, v118);
  v27 = v116;
  v26 = v117;
  v28 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v117 + 16);
  v112 = a3;
  v29 = a3;
  v30 = v119;
  v31 = v28(v116, v29, v119);
  v32 = Logger.logObject.getter(v31);
  v108 = static os_log_type_t.default.getter();
  v33 = os_log_type_enabled(v32, (os_log_type_t)v108);
  v109 = v12;
  if (v33)
  {
    v106 = v32;
    v34 = v110;
    v35 = swift_slowAlloc(32, -1);
    v105 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v123 = v105;
    *(_DWORD *)v35 = 136315650;
    v36 = sub_100005F1C((unint64_t *)&qword_1001B1310, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v37 = dispatch thunk of CustomStringConvertible.description.getter(v12, v36);
    v39 = (_TtC14softposreaderd12RemoteReader *)v38;
    v122 = sub_1000056EC(v37, v38, (uint64_t *)&v123);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v35 + 4, v35 + 12);
    swift_bridgeObjectRelease(v39, v40, v41, v42, v43, v44, v45, v46);
    v107 = v13;
    v47 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
    v48 = v47(v16, v12);
    *(_WORD *)(v35 + 12) = 2080;
    v49 = URLRequest.allHTTPHeaderFields.getter(v48);
    if (!v49)
      v49 = sub_1000046DC((uint64_t)&_swiftEmptyArrayStorage);
    v50 = (_TtC14softposreaderd12RemoteReader *)v49;
    v51 = v121;
    v53 = v116;
    v52 = v117;
    v117 = v35 + 14;
    v54 = sub_100076A98(v49);
    v121 = v51;
    swift_bridgeObjectRelease(v50, v55, v56, v57, v58, v59, v60, v61);
    v62 = Dictionary.description.getter(v54, &type metadata for String, &type metadata for String, &protocol witness table for String);
    v64 = v63;
    swift_release(v54);
    v122 = sub_1000056EC(v62, (unint64_t)v64, (uint64_t *)&v123);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v117, v35 + 22);
    swift_bridgeObjectRelease(v64, v65, v66, v67, v68, v69, v70, v71);
    v72 = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v148, v118);
    *(_WORD *)(v35 + 22) = 2048;
    v73 = DispatchTime.rawValue.getter(v72);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v119);
    v122 = v73;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v35 + 24, v35 + 32);
    v74 = v106;
    _os_log_impl((void *)&_mh_execute_header, v106, (os_log_type_t)v108, "SecureChannel.securingRequest(url: %s, redactedHTTPHeaderFields: %s, deadline: %llu)", (uint8_t *)v35, 0x20u);
    v75 = v105;
    swift_arrayDestroy(v105, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v75, -1, -1);
    swift_slowDealloc(v35, -1, -1);

    v76 = v107;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v30);
    v76 = v13;
    v47 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
    v47(v16, v12);
    (*(void (**)(char *, uint64_t))(v110 + 8))(v148, v25);

  }
  v77 = v115;
  sub_100005EF8((_QWORD *)(v115 + 32), *(_QWORD *)(v115 + 56));
  sub_100053484((uint64_t)v144);
  sub_100054A14((uint64_t)v144, (uint64_t)v146);
  v78 = sub_1000240E0((uint64_t)v146);
  v79 = v121;
  v80 = (uint64_t)v111;
  if (v78 != 1)
  {
    v81 = v147;
    memcpy(v147, v146, sizeof(v147));
    sub_100005EF8((_QWORD *)(v77 + 32), *(_QWORD *)(v77 + 56));
    if ((sub_100053F60(v147) & 1) != 0)
      goto LABEL_15;
    sub_1000240F8((uint64_t)v144);
  }
  v81 = v145;
  sub_100074C04(v80, v112, v145);
  if (v79)
    return v47((char *)v80, v109);
LABEL_15:
  v82 = v113 & 1;
  v83 = *((_QWORD *)v81 + 32);
  v84 = (_TtC14softposreaderd12RemoteReader *)*((_QWORD *)v81 + 33);
  v85 = *((_QWORD *)v81 + 10);
  v86 = *((_QWORD *)v81 + 11);
  v87 = *((_QWORD *)v81 + 14);
  v88 = *((_QWORD *)v81 + 2);
  v89 = *((_QWORD *)v81 + 3);
  v90 = *(_OWORD *)v81;
  LOBYTE(v122) = v81[120] & 1;
  v123 = v90;
  v124 = v88;
  v125 = v89;
  v92 = *((_OWORD *)v81 + 3);
  v91 = *((_OWORD *)v81 + 4);
  v126 = *((_OWORD *)v81 + 2);
  v127 = v92;
  v128 = v91;
  v129 = v85;
  v130 = v86;
  v131 = *((_OWORD *)v81 + 6);
  v132 = v87;
  v133 = v122;
  v93 = *((_OWORD *)v81 + 9);
  v134 = *((_OWORD *)v81 + 8);
  v135 = v93;
  v94 = *((_OWORD *)v81 + 11);
  v136 = *((_OWORD *)v81 + 10);
  v137 = v94;
  v95 = *((_OWORD *)v81 + 13);
  v138 = *((_OWORD *)v81 + 12);
  v139 = v95;
  v96 = *((_OWORD *)v81 + 15);
  v140 = *((_OWORD *)v81 + 14);
  v141 = v96;
  v142 = v83;
  v143 = v84;
  swift_bridgeObjectRetain();
  sub_100073A4C(v120, v82, v83, v84, v112, v114);
  swift_bridgeObjectRelease(v84, v97, v98, v99, v100, v101, v102, v103);
  sub_100054898(&v123);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v76 + 8))(v80, v109);
}

uint64_t sub_100072B7C(uint64_t a1, char a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v5 = v4;
  v6 = v3;
  LODWORD(v30) = a2 & 1;
  v9 = type metadata accessor for URLRequest(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001ACFE0 != -1)
    swift_once(&qword_1001ACFE0, sub_100072418);
  v13 = type metadata accessor for Logger(0);
  v28 = sub_100003A14(v13, (uint64_t)qword_1001B09F8);
  v14 = Logger.logObject.getter(v28);
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v25 = a1;
    v16 = swift_slowAlloc(12, -1);
    v26 = v12;
    v27 = v10;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc(32, -1);
    v29 = v6;
    v19 = v9;
    v20 = v18;
    v33 = v18;
    *(_DWORD *)v17 = 136315138;
    v31 = sub_1000056EC(0xD000000000000025, 0x800000010016CAD0, &v33);
    a1 = v25;
    v5 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v17 + 4, v17 + 12);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "SecureChannel.%s", v17, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    v21 = v20;
    v9 = v19;
    swift_slowDealloc(v21, -1, -1);
    v22 = v17;
    v12 = v26;
    v10 = v27;
    swift_slowDealloc(v22, -1, -1);
  }

  sub_10007250C(a1, v30, a3, (uint64_t)v12);
  if (!v5)
  {
    v5 = sub_100075870((uint64_t)v12, a3);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return v5;
}

id sub_100072FB8(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint8_t *v29;
  uint64_t v30;
  unint64_t v31;
  _TtC14softposreaderd12RemoteReader *v32;
  _QWORD *v33;
  SEL v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  _TtC14softposreaderd12RemoteReader *v42;
  _TtC14softposreaderd12RemoteReader *v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  id v56;
  unint64_t v57;
  void (*v58)(char *, uint64_t);
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  Class isa;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  id v68;
  uint64_t v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t aBlock[5];
  uint64_t v89;

  v79 = a3;
  v83 = a2 & 1;
  v6 = sub_100003A2C(&qword_1001B0438);
  __chkstk_darwin(v6);
  v76 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for DispatchTime(0);
  v80 = *(_QWORD *)(v82 - 8);
  v12 = __chkstk_darwin(v82);
  v14 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v81 = (char *)&v70 - v15;
  v16 = type metadata accessor for URLRequest(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v86 = (uint64_t)&v70 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (char *)&v70 - v20;
  if (qword_1001ACFE0 != -1)
    swift_once(&qword_1001ACFE0, sub_100072418);
  v22 = type metadata accessor for Logger(0);
  sub_100003A14(v22, (uint64_t)qword_1001B09F8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v84 = a1;
  v24 = v23(v21, a1, v16);
  v25 = Logger.logObject.getter(v24);
  v26 = v16;
  v27 = static os_log_type_t.info.getter();
  v28 = os_log_type_enabled(v25, v27);
  v77 = v9;
  v75 = v11;
  v78 = v26;
  if (v28)
  {
    v73 = v8;
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    v30 = swift_slowAlloc(32, -1);
    v72 = v30;
    aBlock[0] = v30;
    *(_DWORD *)v29 = 136315138;
    v31 = URLRequest.allHTTPHeaderFields.getter(v30);
    v74 = a4;
    if (!v31)
      v31 = sub_1000046DC((uint64_t)&_swiftEmptyArrayStorage);
    v32 = (_TtC14softposreaderd12RemoteReader *)v31;
    v71 = v29 + 4;
    v33 = sub_100076A98(v31);
    swift_bridgeObjectRelease(v32, v34, v35, v36, v37, v38, v39, v40);
    v41 = Dictionary.description.getter(v33, &type metadata for String, &type metadata for String, &protocol witness table for String);
    v43 = v42;
    swift_release(v33);
    v87 = sub_1000056EC(v41, (unint64_t)v43, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, aBlock, v71, v29 + 12);
    swift_bridgeObjectRelease(v43, v44, v45, v46, v47, v48, v49, v50);
    v51 = *(void (**)(char *, uint64_t))(v17 + 8);
    v51(v21, v78);
    _os_log_impl((void *)&_mh_execute_header, v25, v27, "SecureChannel.secureDownloadTask(with: %s, completion: <block>)", v29, 0xCu);
    v52 = v72;
    swift_arrayDestroy(v72, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1, -1);
    swift_slowDealloc(v29, -1, -1);

    a4 = v74;
  }
  else
  {
    v51 = *(void (**)(char *, uint64_t))(v17 + 8);
    v51(v21, v26);

  }
  static DispatchTime.now()(v53);
  v54 = v85;
  v55 = *(void **)(v85 + 72);
  v56 = objc_msgSend(v55, "configuration");
  objc_msgSend(v56, "timeoutIntervalForResource");

  v57 = (unint64_t)v81;
  + infix(_:_:)(v14);
  v58 = *(void (**)(char *, uint64_t))(v80 + 8);
  v59 = v14;
  v60 = v82;
  v58(v59, v82);
  v61 = v86;
  sub_10007250C(v84, v83, v57, v86);
  v58((char *)v57, v60);
  v62 = (_QWORD *)swift_allocObject(&unk_10019C9E8, 40, 7);
  v63 = v79;
  v62[2] = v54;
  v62[3] = v63;
  v62[4] = a4;
  swift_retain();
  swift_retain();
  isa = URLRequest._bridgeToObjectiveC()().super.isa;
  v65 = swift_allocObject(&unk_10019CA10, 32, 7);
  *(_QWORD *)(v65 + 16) = sub_100077968;
  *(_QWORD *)(v65 + 24) = v62;
  aBlock[4] = (uint64_t)sub_100077998;
  v89 = v65;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100073934;
  aBlock[3] = (uint64_t)&unk_10019CA28;
  v66 = _Block_copy(aBlock);
  v67 = v89;
  swift_retain();
  swift_release(v67);
  v68 = objc_msgSend(v55, "downloadTaskWithRequest:completionHandler:", isa, v66);
  _Block_release(v66);
  swift_release(v62);

  v51((char *)v61, v78);
  return v68;
}

uint64_t sub_100073630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  _TtC14softposreaderd12RemoteReader *v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;

  if (a2)
  {
    v32 = a2;
    swift_errorRetain();
    v8 = sub_100003A2C((uint64_t *)&unk_1001B1280);
    type metadata accessor for SPRHTTPError(0);
    v10 = v9;
    if ((swift_dynamicCast(&v31, &v32, v8, v9, 6) & 1) != 0)
    {
      v11 = (void *)v31;
      if ((related decl 'e' for SPRHTTPErrorCode.isTimeTokenError.getter(v31) & 1) != 0)
      {
        if (qword_1001ACFE0 != -1)
          swift_once(&qword_1001ACFE0, sub_100072418);
        v12 = type metadata accessor for Logger(0);
        sub_100003A14(v12, (uint64_t)qword_1001B09F8);
        v13 = v11;
        v14 = Logger.logObject.getter(v13);
        v15 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v14, v15))
        {
          v30 = v13;
          v16 = (uint8_t *)swift_slowAlloc(12, -1);
          v29 = swift_slowAlloc(32, -1);
          *(_DWORD *)v16 = 136315138;
          v31 = (uint64_t)v13;
          v32 = v29;
          v17 = v13;
          v18 = String.init<A>(describing:)(&v31, v10);
          v20 = (_TtC14softposreaderd12RemoteReader *)v19;
          v31 = sub_1000056EC(v18, v19, &v32);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v16 + 4, v16 + 12);

          v13 = v30;
          swift_bridgeObjectRelease(v20, v21, v22, v23, v24, v25, v26, v27);
          _os_log_impl((void *)&_mh_execute_header, v14, v15, "Time token expired: %s", v16, 0xCu);
          swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v29, -1, -1);
          swift_slowDealloc(v16, -1, -1);

        }
        else
        {

        }
        sub_100005EF8((_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 56));
        sub_100053C28();

      }
      else
      {

      }
    }
  }
  return a4(a1, a2);
}

uint64_t sub_100073894(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v8 = sub_100003A2C(&qword_1001B0438);
  __chkstk_darwin(v8);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  a4(v10, a6);
  return sub_100077844((uint64_t)v10);
}

uint64_t sub_100073934(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, void *, void *);
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v18;

  v8 = sub_100003A2C(&qword_1001B0438);
  __chkstk_darwin(v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void (**)(char *, void *, void *))(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(a2);
    v13 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v10, 0, 1, v13);
  }
  else
  {
    v14 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v10, 1, 1, v14);
  }
  swift_retain();
  v15 = a3;
  v16 = a4;
  v12(v10, a3, a4);

  swift_release(v11);
  return sub_100077844((uint64_t)v10);
}

uint64_t sub_100073A4C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, _TtC14softposreaderd12RemoteReader *a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint64_t v23;
  unint64_t v24;
  _TtC14softposreaderd12RemoteReader *v25;
  uint64_t (*v26)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  _QWORD *v27;
  SEL v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  _TtC14softposreaderd12RemoteReader *v36;
  _TtC14softposreaderd12RemoteReader *v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  _TtC14softposreaderd12RemoteReader *v47;
  SEL v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  _TtC14softposreaderd12RemoteReader *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _TtC14softposreaderd12RemoteReader *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t ObjectType;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t (*v72)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t AssociatedTypeWitness;
  uint64_t v74;
  char *v75;
  uint64_t (*v76)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t (*v77)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  const char *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _TtC14softposreaderd12RemoteReader *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t (*v104)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  _QWORD *v105;
  char v106;
  uint64_t v107;
  NSObject *v108;
  os_log_type_t v109;
  uint8_t *v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _TtC14softposreaderd12RemoteReader *v117;
  _TtC14softposreaderd12RemoteReader *v118;
  SEL v119;
  id v120;
  id v121;
  id v122;
  id v123;
  id v124;
  id v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v130;
  NSObject *v131;
  os_log_type_t v132;
  uint8_t *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  _TtC14softposreaderd12RemoteReader *v137;
  SEL v138;
  id v139;
  id v140;
  id v141;
  id v142;
  id v143;
  id v144;
  unint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  _TtC14softposreaderd12RemoteReader *object;
  Swift::String v152;
  id v153;
  id v154;
  id v155;
  id v156;
  id v157;
  id v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  _TtC14softposreaderd12RemoteReader *v162;
  Swift::String v163;
  id v164;
  id v165;
  id v166;
  id v167;
  id v168;
  id v169;
  char *v170;
  Swift::String v171;
  SEL v172;
  id v173;
  id v174;
  id v175;
  id v176;
  id v177;
  id v178;
  Swift::String v179;
  SEL v180;
  id v181;
  id v182;
  id v183;
  id v184;
  id v185;
  id v186;
  Swift::String v187;
  Swift::String_optional v188;
  _TtC14softposreaderd12RemoteReader *v189;
  SEL v190;
  id v191;
  id v192;
  id v193;
  id v194;
  id v195;
  id v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  Swift::String v202;
  Swift::String v203;
  SEL v204;
  id v205;
  id v206;
  id v207;
  id v208;
  id v209;
  id v210;
  Swift::String v211;
  _TtC14softposreaderd12RemoteReader *v212;
  Swift::String v213;
  SEL v214;
  id v215;
  id v216;
  id v217;
  id v218;
  id v219;
  id v220;
  unint64_t v221;
  _TtC14softposreaderd12RemoteReader *v222;
  _TtC14softposreaderd12RemoteReader *v223;
  Swift::String v224;
  SEL v225;
  id v226;
  id v227;
  id v228;
  id v229;
  id v230;
  id v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  const char *v235;
  void *v236;
  void *v237;
  void *v238;
  void *v239;
  void *v240;
  void *v241;
  _TtC14softposreaderd12RemoteReader *v242;
  uint64_t v243;
  unint64_t v244;
  SEL v245;
  id v246;
  id v247;
  id v248;
  id v249;
  id v250;
  id v251;
  Swift::String v252;
  _TtC14softposreaderd12RemoteReader *v253;
  Swift::String v254;
  SEL v255;
  id v256;
  id v257;
  id v258;
  id v259;
  id v260;
  id v261;
  _TtC14softposreaderd12RemoteReader *v262;
  Swift::String v263;
  uint64_t v264;
  uint64_t v265;
  NSObject *v266;
  os_log_type_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  _QWORD v273[2];
  _QWORD *v274;
  uint64_t v275;
  void (*v276)(char *, uint64_t, uint64_t);
  int v277;
  uint64_t v278;
  uint64_t v279;
  char *v280;
  uint64_t v281;
  _TtC14softposreaderd12RemoteReader *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  _QWORD *v290;
  _QWORD *v291;
  unint64_t v292;
  uint64_t v293;
  _TtC14softposreaderd12RemoteReader *v294;
  uint64_t countAndFlagsBits;
  uint64_t (*v296)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v297;
  _QWORD v298[3];
  char v299[8];
  _TtC14softposreaderd12RemoteReader *v300;
  uint64_t v301;
  uint64_t AssociatedConformanceWitness;
  uint64_t v303;
  uint64_t v304;

  v292 = a5;
  v277 = a2;
  v10 = type metadata accessor for URLRequest(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v280 = (char *)v273 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)v273 - v14;
  if (qword_1001ACFE0 != -1)
    swift_once(&qword_1001ACFE0, sub_100072418);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_100003A14(v16, (uint64_t)qword_1001B09F8);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  countAndFlagsBits = a1;
  v276 = v18;
  v18(v15, a1, v10);
  v19 = swift_bridgeObjectRetain_n(a4, 2);
  v284 = v17;
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.debug.getter();
  v22 = os_log_type_enabled(v20, v21);
  v278 = a6;
  v293 = v10;
  v283 = v11;
  v287 = a3;
  if (v22)
  {
    v23 = swift_slowAlloc(22, -1);
    v294 = (_TtC14softposreaderd12RemoteReader *)swift_slowAlloc(64, -1);
    v300 = v294;
    *(_DWORD *)v23 = 136315394;
    v24 = URLRequest.allHTTPHeaderFields.getter();
    if (!v24)
      v24 = sub_1000046DC((uint64_t)&_swiftEmptyArrayStorage);
    v25 = (_TtC14softposreaderd12RemoteReader *)v24;
    v26 = v296;
    v27 = sub_100076A98(v24);
    v296 = v26;
    swift_bridgeObjectRelease(v25, v28, v29, v30, v31, v32, v33, v34);
    v35 = Dictionary.description.getter(v27, &type metadata for String, &type metadata for String, &protocol witness table for String);
    v37 = v36;
    swift_release(v27);
    v303 = sub_1000056EC(v35, (unint64_t)v37, (uint64_t *)&v300);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v303, &v304, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease(v37, v38, v39, v40, v41, v42, v43, v44);
    (*(void (**)(char *, uint64_t))(v283 + 8))(v15, v293);
    *(_WORD *)(v23 + 12) = 2080;
    v45 = v287;
    if (a4)
      v46 = v287;
    else
      v46 = 4271950;
    if (a4)
      v47 = a4;
    else
      v47 = (_TtC14softposreaderd12RemoteReader *)0xE300000000000000;
    swift_bridgeObjectRetain();
    v303 = sub_1000056EC(v46, (unint64_t)v47, (uint64_t *)&v300);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v303, &v304, v23 + 14, v23 + 22);
    swift_bridgeObjectRelease_n(a4, 2);
    swift_bridgeObjectRelease(v47, v48, v49, v50, v51, v52, v53, v54);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "SecureChannel.signRequest(%s, timeToken: %s)", (uint8_t *)v23, 0x16u);
    v55 = v294;
    swift_arrayDestroy(v294, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    v56 = v23;
    a3 = v45;
    swift_slowDealloc(v56, -1, -1);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);

    swift_bridgeObjectRelease_n(a4, 2);
  }
  v57 = v291;
  v59 = v291[7];
  v58 = v291[8];
  v274 = v291 + 4;
  sub_100005EF8(v291 + 4, v59);
  v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v58 + 8) + 24))(v59);
  v281 = Double.description.getter(v60);
  v294 = v61;
  v282 = a4;
  v62 = sub_100077148(countAndFlagsBits, v281, v61, a3, a4);
  v64 = v63;
  v66 = v57[2];
  v65 = v57[3];
  ObjectType = swift_getObjectType(v66);
  sub_100005D9C(v62, v64);
  Data.sha256Digest.getter(v62, v64);
  v69 = v68;
  v71 = v70;
  v288 = v62;
  v289 = v64;
  sub_100005DE0(v62, v64);
  v72 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v65 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v65, ObjectType, &unk_1001857B4);
  v290 = v273;
  v275 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v273[1] = *(_QWORD *)(v275 + 64);
  __chkstk_darwin(AssociatedTypeWitness);
  v75 = (char *)v273 - v74;
  v285 = v69;
  v286 = v71;
  v279 = v66;
  v76 = v296;
  v296 = v72;
  v77 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v72((char *)v273 - v74, v69, v71, 0, v292, ObjectType, v65);
  if (!v76)
  {
    v291 = 0;
    v292 = (unint64_t)v78;
    v296 = v77;
    sub_100005DE0(v285, v286);
    v301 = AssociatedTypeWitness;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v65, ObjectType, AssociatedTypeWitness, &unk_1001857B4, &unk_1001857BC);
    v105 = sub_1000778C8(&v300);
    (*(void (**)(_QWORD *, char *, uint64_t))(v275 + 32))(v105, v75, AssociatedTypeWitness);
    goto LABEL_24;
  }
  v273[0] = AssociatedTypeWitness;
  swift_bridgeObjectRelease(v294, v78, v79, v80, v81, v82, v83, v84);
  sub_100005DE0(v285, v286);
  type metadata accessor for Code(0);
  v86 = v85;
  v303 = 10006;
  swift_errorRetain();
  v87 = sub_100005F1C(&qword_1001AC6C8, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_10015BEC0);
  v88 = static _ErrorCodeProtocol.~= infix(_:_:)(&v303, v76, v86, v87);
  swift_errorRelease();
  if ((v88 & 1) != 0)
  {
    swift_errorRelease();
    v89 = ObjectType;
    (*(void (**)(uint64_t, uint64_t))(v65 + 56))(ObjectType, v65);
    v91 = v291[7];
    v90 = v291[8];
    sub_100005EF8(v274, v91);
    v92 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v90 + 8) + 24))(v91);
    v281 = Double.description.getter(v92);
    v294 = v93;
    v94 = sub_100077148(countAndFlagsBits, v281, v93, v287, v282);
    v96 = v95;
    sub_100005DE0(v288, v289);
    sub_100005D9C(v94, v96);
    Data.sha256Digest.getter(v94, v96);
    v98 = v97;
    v100 = v99;
    v101 = sub_100005DE0(v94, v96);
    __chkstk_darwin(v101);
    v103 = (char *)v273 - ((v102 + 15) & 0xFFFFFFFFFFFFFFF0);
    v289 = v89;
    v104 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v296(v103, v98, v100, 0, v292, v89, v65);
    v290 = v273;
    v291 = 0;
    v292 = v145;
    v296 = v104;
    sub_100005DE0(v98, v100);
    v146 = v273[0];
    v301 = v273[0];
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v65, v289, v273[0], &unk_1001857B4, &unk_1001857BC);
    v147 = sub_1000778C8(&v300);
    (*(void (**)(_QWORD *, char *, uint64_t))(v275 + 32))(v147, v103, v146);
    v288 = v94;
    v289 = v96;
LABEL_24:
    v148 = static Data.randomBytes(count:)(0x10uLL);
    v150 = v149;
    object = (_TtC14softposreaderd12RemoteReader *)Data.hexString()()._object;
    sub_100005DE0(v148, v150);
    v152 = String.lowercased()();
    swift_bridgeObjectRelease(object, (SEL)v152._object, v153, v154, v155, v156, v157, v158);
    v159 = static Data.randomBytes(count:)(8uLL);
    v161 = v160;
    v162 = (_TtC14softposreaderd12RemoteReader *)Data.hexString()()._object;
    sub_100005DE0(v159, v161);
    v163 = String.lowercased()();
    swift_bridgeObjectRelease(v162, (SEL)v163._object, v164, v165, v166, v167, v168, v169);
    v170 = v280;
    v276(v280, countAndFlagsBits, v293);
    swift_bridgeObjectRetain();
    countAndFlagsBits = v152._countAndFlagsBits;
    v171._countAndFlagsBits = 0x6172542D33422D58;
    v171._object = (void *)0xEC00000064496563;
    URLRequest.setValue(_:forHTTPHeaderField:)((Swift::String_optional)v152, v171);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v152._object, v172, v173, v174, v175, v176, v177, v178);
    swift_bridgeObjectRetain();
    v179._countAndFlagsBits = 0x6170532D33422D58;
    v179._object = (void *)0xEB0000000064496ELL;
    URLRequest.setValue(_:forHTTPHeaderField:)((Swift::String_optional)v163, v179);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v163._object, v180, v181, v182, v183, v184, v185, v186);
    v187._countAndFlagsBits = 0xD000000000000017;
    v187._object = (void *)0x800000010016CA20;
    v188.value._countAndFlagsBits = v281;
    v189 = v294;
    v188.value._object = v294;
    URLRequest.setValue(_:forHTTPHeaderField:)(v188, v187);
    swift_bridgeObjectRelease(v189, v190, v191, v192, v193, v194, v195, v196);
    v197 = v301;
    v198 = AssociatedConformanceWitness;
    sub_100005EF8(&v300, v301);
    v199 = (*(uint64_t (**)(uint64_t, uint64_t))(v198 + 48))(v197, v198);
    v201 = v200;
    v202 = Data.base64EncodedString(options:)(0);
    sub_100005DE0(v199, v201);
    v203._countAndFlagsBits = 0xD000000000000013;
    v203._object = (void *)0x800000010016CA40;
    URLRequest.setValue(_:forHTTPHeaderField:)((Swift::String_optional)v202, v203);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v202._object, v204, v205, v206, v207, v208, v209, v210);
    v211 = Data.base64EncodedString(options:)(0);
    v212 = (_TtC14softposreaderd12RemoteReader *)v211._object;
    v213._countAndFlagsBits = 0xD000000000000011;
    v213._object = (void *)0x800000010016CA60;
    URLRequest.setValue(_:forHTTPHeaderField:)((Swift::String_optional)v211, v213);
    swift_bridgeObjectRelease(v212, v214, v215, v216, v217, v218, v219, v220);
    if ((v277 & 1) != 0)
      v221 = 0xD000000000000018;
    else
      v221 = 0xD000000000000010;
    if ((v277 & 1) != 0)
      v222 = (_TtC14softposreaderd12RemoteReader *)0x8000000100168410;
    else
      v222 = (_TtC14softposreaderd12RemoteReader *)0x80000001001683F0;
    v223 = v222;
    v224._countAndFlagsBits = 0x2D746E65746E6F43;
    v224._object = (void *)0xEC00000065707954;
    URLRequest.setValue(_:forHTTPHeaderField:)(*(Swift::String_optional *)&v221, v224);
    swift_bridgeObjectRelease(v222, v225, v226, v227, v228, v229, v230, v231);
    v232 = v301;
    v233 = AssociatedConformanceWitness;
    sub_100005EF8(&v300, v301);
    v234 = (*(uint64_t (**)(uint64_t, uint64_t))(v233 + 56))(v232, v233);
    v242 = (_TtC14softposreaderd12RemoteReader *)v234;
    if (*(_QWORD *)(v234 + 16))
    {
      v243 = *(_QWORD *)(v234 + 32);
      v244 = *(_QWORD *)(v234 + 40);
      sub_100005D9C(v243, v244);
      swift_bridgeObjectRelease(v242, v245, v246, v247, v248, v249, v250, v251);
      v252 = Data.base64EncodedString(options:)(0);
      v253 = (_TtC14softposreaderd12RemoteReader *)v252._object;
      v254._countAndFlagsBits = 0xD000000000000014;
      v254._object = (void *)0x800000010016CA80;
      URLRequest.setValue(_:forHTTPHeaderField:)((Swift::String_optional)v252, v254);
      swift_bridgeObjectRelease(v253, v255, v256, v257, v258, v259, v260, v261);
      sub_100005DE0(v243, v244);
    }
    else
    {
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v234, v235, v236, v237, v238, v239, v240, v241);
    }
    v262 = v282;
    if (v282)
    {
      v263._countAndFlagsBits = 0xD000000000000012;
      v263._object = (void *)0x8000000100165BC0;
      v264 = v287;
      URLRequest.setValue(_:forHTTPHeaderField:)(*(Swift::String_optional *)(&v262 - 1), v263);
    }
    swift_bridgeObjectRetain();
    v265 = swift_bridgeObjectRetain();
    v266 = Logger.logObject.getter(v265);
    v267 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v266, v267))
    {
      v268 = swift_slowAlloc(22, -1);
      v269 = swift_slowAlloc(64, -1);
      v303 = v269;
      *(_DWORD *)v268 = 136315394;
      swift_bridgeObjectRetain();
      v297 = sub_1000056EC(countAndFlagsBits, (unint64_t)v152._object, &v303);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v297, v298, v268 + 4, v268 + 12);
      swift_bridgeObjectRelease_n(v152._object, 3);
      *(_WORD *)(v268 + 12) = 2080;
      swift_bridgeObjectRetain();
      v297 = sub_1000056EC(v163._countAndFlagsBits, (unint64_t)v163._object, &v303);
      v170 = v280;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v297, v298, v268 + 14, v268 + 22);
      swift_bridgeObjectRelease_n(v163._object, 3);
      _os_log_impl((void *)&_mh_execute_header, v266, v267, "Request signed. traceId: %s, spanId: %s", (uint8_t *)v268, 0x16u);
      swift_arrayDestroy(v269, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v269, -1, -1);
      swift_slowDealloc(v268, -1, -1);

      sub_100005DE0(v288, v289);
      sub_100005DE0((uint64_t)v296, v292);
    }
    else
    {
      swift_bridgeObjectRelease_n(v163._object, 2);
      swift_bridgeObjectRelease_n(v152._object, 2);
      sub_100005DE0((uint64_t)v296, v292);
      sub_100005DE0(v288, v289);

    }
    (*(void (**)(uint64_t, char *, uint64_t))(v283 + 32))(v278, v170, v293);
    return sub_100005D3C(&v300);
  }
  v303 = 10003;
  swift_errorRetain();
  v106 = static _ErrorCodeProtocol.~= infix(_:_:)(&v303, v76, v86, v87);
  swift_errorRelease();
  if ((v106 & 1) != 0)
  {
    v107 = swift_errorRelease();
    v108 = Logger.logObject.getter(v107);
    v109 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v108, v109))
    {
      v110 = (uint8_t *)swift_slowAlloc(12, -1);
      v111 = swift_slowAlloc(32, -1);
      v303 = v111;
      *(_DWORD *)v110 = 136315138;
      v112 = (void *)sub_10002460C(10003, 0, 0, 0);
      v297 = (uint64_t)v112;
      type metadata accessor for SecurityError(0);
      v114 = v113;
      v115 = sub_100005F1C(&qword_1001AC6A8, (uint64_t (*)(uint64_t))type metadata accessor for SecurityError, (uint64_t)&unk_10015B4B8);
      v116 = Error.localizedDescription.getter(v114, v115);
      v118 = v117;

      v297 = sub_1000056EC(v116, (unint64_t)v118, &v303);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v297, v298, v110 + 4, v110 + 12);
      swift_bridgeObjectRelease(v118, v119, v120, v121, v122, v123, v124, v125);
      _os_log_impl((void *)&_mh_execute_header, v108, v109, "Error signing secure channel request: %s", v110, 0xCu);
      swift_arrayDestroy(v111, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v111, -1, -1);
      swift_slowDealloc(v110, -1, -1);
    }

    v126 = v289;
    v127 = v288;
    v128 = sub_100024788(5006, 0, 0, 0);
    swift_willThrow(v128);
    return sub_100005DE0(v127, v126);
  }
  else
  {
    swift_errorRetain();
    v130 = swift_errorRetain();
    v131 = Logger.logObject.getter(v130);
    v132 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v131, v132))
    {
      v133 = (uint8_t *)swift_slowAlloc(12, -1);
      v134 = swift_slowAlloc(32, -1);
      v303 = v134;
      *(_DWORD *)v133 = 136315138;
      swift_getErrorValue(v76, v299, v298);
      v135 = Error.localizedDescription.getter(v298[1], v298[2]);
      v137 = (_TtC14softposreaderd12RemoteReader *)v136;
      v297 = sub_1000056EC(v135, v136, &v303);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v297, v298, v133 + 4, v133 + 12);
      swift_bridgeObjectRelease(v137, v138, v139, v140, v141, v142, v143, v144);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v131, v132, "Error signing secure channel request: %s", v133, 0xCu);
      swift_arrayDestroy(v134, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v134, -1, -1);
      swift_slowDealloc(v133, -1, -1);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    v270 = v289;
    v271 = v288;
    swift_errorRetain();
    sub_100024788(5001, 0, 0, (uint64_t)v76);
    v272 = swift_errorRelease();
    swift_willThrow(v272);
    sub_100005DE0(v271, v270);
    return swift_errorRelease();
  }
}

void *sub_100074C04@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t (*v32)(char *, unint64_t, uint64_t);
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _TtC14softposreaderd12RemoteReader *v40;
  SEL v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  os_log_t v59;
  uint64_t v60;
  int v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  void (*v67)(_QWORD, _QWORD);
  unint64_t v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  char *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  char *v80;
  void (*v81)(char *, uint64_t);
  void (*v83)(uint64_t, uint64_t);
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _TtC14softposreaderd12RemoteReader *v94;
  unint64_t v95;
  uint64_t v96;
  SEL v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  uint64_t v104;
  _TtC14softposreaderd12RemoteReader *v105;
  uint64_t v106;
  void (*v107)(uint64_t, uint64_t);
  SEL v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  id v114;
  _QWORD *v115;
  NSObject *v116;
  os_log_type_t v117;
  int v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  _TtC14softposreaderd12RemoteReader *v122;
  SEL v123;
  id v124;
  id v125;
  id v126;
  id v127;
  id v128;
  id v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  _TtC14softposreaderd12RemoteReader *v133;
  _TtC14softposreaderd12RemoteReader *v134;
  SEL v135;
  id v136;
  id v137;
  id v138;
  id v139;
  id v140;
  id v141;
  unint64_t v142;
  uint64_t v143;
  _TtC14softposreaderd12RemoteReader *v144;
  _TtC14softposreaderd12RemoteReader *v145;
  SEL v146;
  id v147;
  id v148;
  id v149;
  id v150;
  id v151;
  id v152;
  os_log_t v153;
  uint64_t v154;
  void (*v155)(char *, uint64_t);
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  char *v164;
  uint64_t (*v165)(char *, uint64_t);
  uint64_t v166;
  void (*v167)(char *, char *, uint64_t);
  char *v168;
  char *v169;
  uint64_t v170;
  void (*v171)(_QWORD, _QWORD);
  uint64_t v172;
  unint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  os_log_t v180;
  uint64_t v181;
  unint64_t v182;
  char *v183;
  void (*v184)(uint64_t, uint64_t);
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _TtC14softposreaderd12RemoteReader *v188;
  _QWORD v189[35];
  uint64_t v190;
  uint64_t v191;

  v163 = a3;
  v161 = type metadata accessor for Date(0, a2);
  v159 = *(_QWORD *)(v161 - 8);
  __chkstk_darwin(v161);
  v160 = (char *)&v156 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = type metadata accessor for URLRequest(0);
  v166 = *(_QWORD *)(v175 - 8);
  v6 = __chkstk_darwin(v175);
  v182 = (unint64_t)&v156 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v176 = (uint64_t)&v156 - v8;
  v9 = type metadata accessor for URL.DirectoryHint(0);
  v170 = *(_QWORD *)(v9 - 8);
  v171 = (void (*)(_QWORD, _QWORD))v9;
  __chkstk_darwin(v9);
  v169 = (char *)&v156 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003A2C(&qword_1001B0438);
  __chkstk_darwin(v11);
  v180 = (os_log_t)((char *)&v156 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for URLComponents(0);
  v178 = *(_QWORD *)(v13 - 8);
  v179 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v156 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchTime(0);
  v184 = *(void (**)(uint64_t, uint64_t))(v16 - 8);
  v185 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v156 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for URL(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v168 = (char *)&v156 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v183 = (char *)&v156 - v24;
  v25 = __chkstk_darwin(v23);
  v177 = (char *)&v156 - v26;
  __chkstk_darwin(v25);
  v28 = (char *)&v156 - v27;
  if (qword_1001ACFE0 != -1)
    swift_once(&qword_1001ACFE0, sub_100072418);
  v29 = type metadata accessor for Logger(0);
  v30 = sub_100003A14(v29, (uint64_t)qword_1001B09F8);
  v31 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
  v181 = a1;
  v167 = v31;
  v31(v28, (char *)a1, v19);
  v32 = (uint64_t (*)(char *, unint64_t, uint64_t))*((_QWORD *)v184 + 2);
  v173 = a2;
  v33 = v32(v18, a2, v185);
  v186 = v20;
  v162 = v30;
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v34, v35))
  {
    v36 = swift_slowAlloc(22, -1);
    v158 = swift_slowAlloc(32, -1);
    v187 = v158;
    *(_DWORD *)v36 = 136315394;
    v165 = (uint64_t (*)(char *, uint64_t))(v36 + 4);
    v37 = sub_100005F1C((unint64_t *)&qword_1001B1310, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v38 = dispatch thunk of CustomStringConvertible.description.getter(v19, v37);
    v40 = (_TtC14softposreaderd12RemoteReader *)v39;
    v190 = sub_1000056EC(v38, v39, &v187);
    v164 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v190, &v191, v165, v36 + 12);
    swift_bridgeObjectRelease(v40, v41, v42, v43, v44, v45, v46, v47);
    v165 = *(uint64_t (**)(char *, uint64_t))(v186 + 8);
    v48 = v165(v28, v19);
    *(_WORD *)(v36 + 12) = 2048;
    v49 = DispatchTime.rawValue.getter(v48);
    (*((void (**)(char *, uint64_t))v184 + 1))(v18, v185);
    v190 = v49;
    v15 = v164;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v190, &v191, v36 + 14, v36 + 22);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "SecureChannel.refreshTimeToken(url: %s, deadline: %llu)", (uint8_t *)v36, 0x16u);
    v50 = v158;
    swift_arrayDestroy(v158, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1, -1);
    swift_slowDealloc(v36, -1, -1);
  }
  else
  {
    (*((void (**)(char *, uint64_t))v184 + 1))(v18, v185);
    v165 = *(uint64_t (**)(char *, uint64_t))(v186 + 8);
    v165(v28, v19);
  }

  v51 = URLComponents.init()();
  v52 = URL.host.getter(v51);
  v53 = URLComponents.host.setter(v52);
  v54 = URL.scheme.getter(v53);
  v55 = URLComponents.scheme.setter(v54);
  v56 = URL.port.getter(v55);
  v58 = URLComponents.port.setter(v56, v57 & 1);
  v59 = v180;
  URLComponents.url.getter(v58);
  v60 = v186;
  v61 = (*(uint64_t (**)(os_log_t, uint64_t, uint64_t))(v186 + 48))(v59, 1, v19);
  v63 = v182;
  v62 = v183;
  if (v61 == 1)
  {
    sub_100077844((uint64_t)v59);
    v64 = sub_100024788(5005, 0xD000000000000016, (void *)0x800000010016C9E0, 0);
    swift_willThrow(v64);
    return (void *)(*(uint64_t (**)(char *, uint64_t))(v178 + 8))(v15, v179);
  }
  (*(void (**)(char *, os_log_t, uint64_t))(v60 + 32))(v177, v59, v19);
  v187 = 0xD000000000000011;
  v188 = (_TtC14softposreaderd12RemoteReader *)0x800000010016CA00;
  v65 = v169;
  v66 = v170;
  v67 = v171;
  (*(void (**)(char *, _QWORD, void (*)(_QWORD, _QWORD)))(v170 + 104))(v169, enum case for URL.DirectoryHint.inferFromPath(_:), v171);
  v68 = sub_1000095D0();
  URL.appending<A>(path:directoryHint:)(&v187, v65, &type metadata for String, v68);
  (*(void (**)(char *, _QWORD))(v66 + 8))(v65, v67);
  swift_bridgeObjectRelease(v188, v69, v70, v71, v72, v73, v74, v75);
  v76 = v168;
  v167(v168, v62, v19);
  URLRequest.init(url:cachePolicy:timeoutInterval:)(v76, 0, 60.0);
  v77 = v173;
  v78 = v174;
  v79 = v172;
  sub_100073A4C(v63, 0, 0, 0, v173, v176);
  if (v79)
  {
    (*(void (**)(uint64_t, uint64_t))(v166 + 8))(v63, v175);
    v80 = v62;
    v81 = (void (*)(char *, uint64_t))v165;
    v165(v80, v19);
    v81(v177, v19);
    return (void *)(*(uint64_t (**)(char *, uint64_t))(v178 + 8))(v15, v179);
  }
  v164 = v15;
  v83 = *(void (**)(uint64_t, uint64_t))(v166 + 8);
  v83(v63, v175);
  v84 = v78 + 4;
  v86 = v78[7];
  v85 = v78[8];
  sub_100005EF8(v78 + 4, v86);
  v87 = v86;
  v88 = v176;
  LODWORD(v185) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v85 + 8) + 32))(v87);
  v89 = sub_100075870(v88, v77);
  v91 = v90;
  v184 = v83;
  v157 = v19;
  v92 = v89;
  type metadata accessor for JSONDecoder(0);
  v93 = sub_100077884();
  v94 = (_TtC14softposreaderd12RemoteReader *)default argument 2 of static JSONDecoder.decodeClean<A>(_:from:userInfo:)();
  static JSONDecoder.decodeClean<A>(_:from:userInfo:)((uint64_t)&type metadata for SecureChannel.TimeTokenResponse, v92, v91, (uint64_t)v94, (uint64_t)&type metadata for SecureChannel.TimeTokenResponse, v93);
  v95 = v91;
  v96 = v92;
  swift_bridgeObjectRelease(v94, v97, v98, v99, v100, v101, v102, v103);
  v104 = v187;
  v105 = v188;
  sub_100005EF8(v84, v174[7]);
  sub_100053904(v104, v105, v185, v189);
  v106 = v157;
  v107 = v184;
  v185 = 0;
  swift_bridgeObjectRelease(v105, v108, v109, v110, v111, v112, v113, v114);
  sub_10005BAFC(v189);
  sub_10005BAFC(v189);
  sub_10005BAFC(v189);
  sub_10005BAFC(v189);
  sub_10005BAFC(v189);
  sub_10005BAFC(v189);
  sub_10005BAFC(v189);
  sub_10005BAFC(v189);
  sub_10005BAFC(v189);
  v115 = sub_10005BAFC(v189);
  v116 = Logger.logObject.getter(v115);
  v117 = static os_log_type_t.debug.getter();
  v118 = v117;
  if (os_log_type_enabled(v116, v117))
  {
    v119 = swift_slowAlloc(52, -1);
    v181 = swift_slowAlloc(96, -1);
    v187 = v181;
    *(_DWORD *)v119 = 136316162;
    v182 = v95;
    v120 = v189[12];
    v173 = v189[13];
    if (v189[27])
      v121 = v189[26];
    else
      v121 = 7104878;
    v180 = v116;
    if (v189[27])
      v122 = (_TtC14softposreaderd12RemoteReader *)v189[27];
    else
      v122 = (_TtC14softposreaderd12RemoteReader *)0xE300000000000000;
    swift_bridgeObjectRetain();
    v190 = sub_1000056EC(v121, (unint64_t)v122, &v187);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v190, &v191, v119 + 4, v119 + 12);
    swift_bridgeObjectRelease(v122, v123, v124, v125, v126, v127, v128, v129);
    sub_100054898(v189);
    sub_100054898(v189);
    *(_WORD *)(v119 + 12) = 2048;
    sub_100054898(v189);
    v190 = v120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v190, &v191, v119 + 14, v119 + 22);
    sub_100054898(v189);
    *(_WORD *)(v119 + 22) = 2080;
    v130 = v160;
    Date.init(timeIntervalSince1970:)((double)v120);
    v172 = sub_100005F1C((unint64_t *)&qword_1001ADA00, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    LODWORD(v174) = v118;
    v131 = v161;
    v132 = dispatch thunk of CustomStringConvertible.description.getter(v161, v172);
    v134 = v133;
    v171 = *(void (**)(_QWORD, _QWORD))(v159 + 8);
    v171(v130, v131);
    v190 = sub_1000056EC(v132, (unint64_t)v134, &v187);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v190, &v191, v119 + 24, v119 + 32);
    swift_bridgeObjectRelease(v134, v135, v136, v137, v138, v139, v140, v141);
    sub_100054898(v189);
    sub_100054898(v189);
    *(_WORD *)(v119 + 32) = 2048;
    sub_100054898(v189);
    v142 = v173;
    v190 = v173;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v190, &v191, v119 + 34, v119 + 42);
    sub_100054898(v189);
    *(_WORD *)(v119 + 42) = 2080;
    Date.init(timeIntervalSince1970:)((double)v142);
    v143 = dispatch thunk of CustomStringConvertible.description.getter(v131, v172);
    v145 = v144;
    v171(v130, v131);
    v190 = sub_1000056EC(v143, (unint64_t)v145, &v187);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v190, &v191, v119 + 44, v119 + 52);
    swift_bridgeObjectRelease(v145, v146, v147, v148, v149, v150, v151, v152);
    sub_100054898(v189);
    sub_100054898(v189);
    v153 = v180;
    _os_log_impl((void *)&_mh_execute_header, v180, (os_log_type_t)v174, "new time token:\n  cput: %s\n  iat: %llu -> %s\n  exp: %llu -> %s", (uint8_t *)v119, 0x34u);
    v154 = v181;
    swift_arrayDestroy(v181, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v154, -1, -1);
    swift_slowDealloc(v119, -1, -1);
    sub_100005DE0(v96, v182);

    v184(v176, v175);
    v155 = *(void (**)(char *, uint64_t))(v186 + 8);
    v106 = v157;
    v155(v183, v157);
  }
  else
  {
    sub_100054898(v189);
    sub_100054898(v189);
    sub_100005DE0(v96, v95);

    sub_100054898(v189);
    sub_100054898(v189);
    sub_100054898(v189);
    sub_100054898(v189);
    sub_100054898(v189);
    sub_100054898(v189);
    sub_100054898(v189);
    sub_100054898(v189);
    v107(v176, v175);
    v155 = (void (*)(char *, uint64_t))v165;
    v165(v183, v106);
  }
  v155(v177, v106);
  (*(void (**)(char *, uint64_t))(v178 + 8))(v164, v179);
  return memcpy(v163, v189, 0x110uLL);
}

uint64_t sub_100075870(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  dispatch_semaphore_t v5;
  void *v6;
  Class isa;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  id v12;
  char v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD aBlock[5];
  uint64_t v21;
  uint64_t v22;

  v3 = swift_allocObject(&unk_10019C920, 33, 7);
  *(_QWORD *)(v3 + 16) = 0;
  v4 = v3 + 16;
  *(_QWORD *)(v3 + 24) = 0;
  *(_BYTE *)(v3 + 32) = -1;
  v5 = dispatch_semaphore_create(0);
  v6 = *(void **)(v2 + 72);
  isa = URLRequest._bridgeToObjectiveC()().super.isa;
  v8 = swift_allocObject(&unk_10019C948, 32, 7);
  *(_QWORD *)(v8 + 16) = v3;
  *(_QWORD *)(v8 + 24) = v5;
  aBlock[4] = sub_100076A78;
  v21 = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100075E54;
  aBlock[3] = &unk_10019C960;
  v9 = _Block_copy(aBlock);
  v10 = v21;
  swift_retain();
  v11 = v5;
  swift_release(v10);
  v12 = objc_msgSend(v6, "dataTaskWithRequest:completionHandler:", isa, v9);
  _Block_release(v9);

  objc_msgSend(v12, "resume");
  v13 = OS_dispatch_semaphore.wait(timeout:)(a2);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v13 & 1, 0) & 1) == 0
    || (swift_beginAccess(v4, aBlock, 0, 0), v14 = *(unsigned __int8 *)(v3 + 32), v14 == 255))
  {
    objc_msgSend(v12, "cancel");
    v16 = sub_100024788(5003, 0, 0, 0);
    swift_willThrow(v16);
    swift_release(v3);

  }
  else
  {
    v4 = *(_QWORD *)(v3 + 16);
    v15 = *(_QWORD *)(v3 + 24);
    if ((v14 & 1) != 0)
    {
      v22 = *(_QWORD *)(v3 + 16);
      sub_100077820(v4, v15, 1);
      sub_100077820(v4, v15, 1);
      v18 = sub_100003A2C((uint64_t *)&unk_1001B1280);
      swift_willThrowTypedImpl(&v22, v18, &protocol self-conformance witness table for Error);

      sub_10007782C(v4, v15, v14);
      swift_release(v3);

    }
    else
    {
      sub_100077820(*(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), 0);
      swift_release(v3);

    }
  }
  return v4;
}

Swift::Int sub_100075AD8(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v40;
  id v41;
  uint64_t v42;

  v40 = a6;
  v11 = type metadata accessor for URLError.Code(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 >> 60 != 15)
  {
    if (a3)
    {
      v15 = objc_opt_self(NSHTTPURLResponse);
      v16 = swift_dynamicCastObjCClass(a3, v15);
      if (v16)
      {
        v17 = (void *)v16;
        sub_1000306C8(a1, a2);
        v18 = a3;
        v19 = objc_msgSend(v17, "statusCode");
        if (SPRHTTPStatusIsSuccess())
        {
          if (qword_1001ACFE0 != -1)
            swift_once(&qword_1001ACFE0, sub_100072418);
          v20 = type metadata accessor for Logger(0);
          v21 = sub_100003A14(v20, (uint64_t)qword_1001B09F8);
          v22 = Logger.logObject.getter(v21);
          v23 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v22, v23))
          {
            v24 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v24 = 0;
            _os_log_impl((void *)&_mh_execute_header, v22, v23, "Received payload", v24, 2u);
            swift_slowDealloc(v24, -1, -1);
          }

          swift_beginAccess(a5 + 16, &v41, 1, 0);
          v25 = *(_QWORD *)(a5 + 16);
          v26 = *(_QWORD *)(a5 + 24);
          *(_QWORD *)(a5 + 16) = a1;
          *(_QWORD *)(a5 + 24) = a2;
          v27 = *(_BYTE *)(a5 + 32);
          *(_BYTE *)(a5 + 32) = 0;
          goto LABEL_21;
        }
        if (qword_1001ACFE0 != -1)
          swift_once(&qword_1001ACFE0, sub_100072418);
        v34 = type metadata accessor for Logger(0);
        v35 = sub_100003A14(v34, (uint64_t)qword_1001B09F8);
        v36 = Logger.logObject.getter(v35);
        v37 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v36, v37))
        {
          v38 = (uint8_t *)swift_slowAlloc(12, -1);
          *(_DWORD *)v38 = 134217984;
          v41 = v19;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v38 + 4, v38 + 12);
          _os_log_impl((void *)&_mh_execute_header, v36, v37, "Received HTTP error %ld", v38, 0xCu);
          swift_slowDealloc(v38, -1, -1);
        }

        v33 = related decl 'e' for SPRHTTPErrorCode.init(_:serverCode:payload:)(v19, 0, 0, a1, a2);
LABEL_20:
        swift_beginAccess(a5 + 16, &v41, 1, 0);
        v25 = *(_QWORD *)(a5 + 16);
        v26 = *(_QWORD *)(a5 + 24);
        *(_QWORD *)(a5 + 16) = v33;
        *(_QWORD *)(a5 + 24) = 0;
        v27 = *(_BYTE *)(a5 + 32);
        *(_BYTE *)(a5 + 32) = 1;
LABEL_21:
        sub_10007782C(v25, v26, v27);
        return OS_dispatch_semaphore.signal()();
      }
    }
  }
  if (a4)
  {
    v28 = swift_errorRetain();
    static URLError.timedOut.getter(v28);
    v29 = sub_100005F1C(&qword_1001B0B08, (uint64_t (*)(uint64_t))&type metadata accessor for URLError.Code, (uint64_t)&protocol conformance descriptor for URLError.Code);
    v30 = static _ErrorCodeProtocol.~= infix(_:_:)(v14, a4, v11, v29);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    if ((v30 & 1) != 0)
    {
      v31 = 5003;
      v32 = 0;
    }
    else
    {
      v31 = 5005;
      v32 = a4;
    }
    v33 = sub_100024788(v31, 0, 0, v32);
    swift_errorRelease();
    goto LABEL_20;
  }
  return OS_dispatch_semaphore.signal()();
}

uint64_t sub_100075E54(uint64_t a1, void *a2, void *a3, void *a4)
{
  void *v6;
  uint64_t v7;
  void (*v8)(void *, unint64_t, void *, void *);
  id v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  id v13;

  v6 = a2;
  v8 = *(void (**)(void *, unint64_t, void *, void *))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    swift_retain();
    v9 = v6;
    v6 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v11 = v10;

  }
  else
  {
    swift_retain();
    v11 = 0xF000000000000000;
  }
  v12 = a3;
  v13 = a4;
  v8(v6, v11, a3, a4);

  sub_10000A9B0((uint64_t)v6, v11);
  return swift_release(v7);
}

uint64_t sub_100075F04(uint64_t a1, void *a2, uint64_t a3, void (*a4)(uint64_t, void *), uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void (*v46)(uint64_t, void *);
  uint64_t v47;
  void *v48;
  uint64_t v49;
  char *v50;
  id v51;
  void (*v52)(uint64_t, void *);
  uint64_t v53;
  char *v54;
  id v55;
  uint64_t v56;

  v52 = a4;
  v53 = a5;
  v8 = type metadata accessor for URLError.Code(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003A2C(&qword_1001B0438);
  v13 = __chkstk_darwin(v12);
  v54 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v49 - v15;
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005E0FC(a1, (uint64_t)v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    result = sub_100077844((uint64_t)v16);
    if (!a3)
      return result;
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v16, v17);
  if (!a2 || (v22 = objc_opt_self(NSHTTPURLResponse), (v23 = swift_dynamicCastObjCClass(a2, v22)) == 0))
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    if (!a3)
      return result;
LABEL_13:
    v33 = swift_errorRetain();
    static URLError.timedOut.getter(v33);
    v34 = sub_100005F1C(&qword_1001B0B08, (uint64_t (*)(uint64_t))&type metadata accessor for URLError.Code, (uint64_t)&protocol conformance descriptor for URLError.Code);
    v35 = static _ErrorCodeProtocol.~= infix(_:_:)(v11, a3, v8, v34);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v36 = (uint64_t)v54;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v54, 1, 1, v17);
    if ((v35 & 1) != 0)
    {
      v37 = (void *)sub_100024788(5003, 0, 0, 0);
    }
    else
    {
      swift_errorRetain();
      v37 = (void *)sub_100024788(5005, 0, 0, a3);
      swift_errorRelease();
    }
    v52(v36, v37);

    swift_errorRelease();
    return sub_100077844(v36);
  }
  v24 = (void *)v23;
  v25 = a2;
  v26 = objc_msgSend(v24, "statusCode");
  if (SPRHTTPStatusIsSuccess())
  {
    if (qword_1001ACFE0 != -1)
      swift_once(&qword_1001ACFE0, sub_100072418);
    v27 = type metadata accessor for Logger(0);
    v28 = sub_100003A14(v27, (uint64_t)qword_1001B09F8);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Received payload", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
    }

    v32 = (uint64_t)v54;
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v54, v20, v17);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(v32, 0, 1, v17);
    v52(v32, 0);

    sub_100077844(v32);
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  }
  else
  {
    v51 = v25;
    if (qword_1001ACFE0 != -1)
      swift_once(&qword_1001ACFE0, sub_100072418);
    v38 = type metadata accessor for Logger(0);
    v39 = sub_100003A14(v38, (uint64_t)qword_1001B09F8);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v42 = 134217984;
      v55 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v42 + 4, v42 + 12);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Received HTTP error %ld", v42, 0xCu);
      swift_slowDealloc(v42, -1, -1);
    }

    v50 = v20;
    v43 = Data.init(contentsOf:options:)(v20, 1);
    v45 = v44;
    v46 = v52;
    v47 = (uint64_t)v54;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v54, 1, 1, v17);
    sub_1000306C8(v43, v45);
    v48 = (void *)related decl 'e' for SPRHTTPErrorCode.init(_:serverCode:payload:)(v26, 0, 0, v43, v45);
    v46(v47, v48);

    sub_10000A9B0(v43, v45);
    sub_100077844(v47);
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v50, v17);
  }
}

Swift::Int sub_100076580()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_1000765C0()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_1000765E4()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_100076620()
{
  return 0x656B6F54656D6974;
}

uint64_t sub_10007663C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x656B6F54656D6974 && a2 == 0xE90000000000006ELL)
  {
    result = swift_bridgeObjectRelease(0xE90000000000006ELL);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656B6F54656D6974, 0xE90000000000006ELL, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

void sub_1000766DC(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1000766E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100077AD0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100076710(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100077AD0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100076738@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v5 = sub_100003A2C(&qword_1001B0B18);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100005EF8(a1, v9);
  v11 = sub_100077AD0();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SecureChannel.TimeTokenResponse.CodingKeys, &type metadata for SecureChannel.TimeTokenResponse.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_100005D3C(a1);
  v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = sub_100005D3C(a1);
  *a2 = v13;
  a2[1] = v15;
  return result;
}

uint64_t sub_10007685C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = sub_100003A2C(&qword_1001B0B28);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = a1[3];
  v10 = a1[4];
  sub_100005EF8(a1, v9);
  v11 = sub_100077AD0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SecureChannel.TimeTokenResponse.CodingKeys, &type metadata for SecureChannel.TimeTokenResponse.CodingKeys, v11, v9, v10);
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, v12, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

double sub_100076948()
{
  uint64_t v0;
  id v1;
  double v2;
  double v3;

  v1 = objc_msgSend(*(id *)(*(_QWORD *)v0 + 72), "configuration");
  objc_msgSend(v1, "timeoutIntervalForResource");
  v3 = v2;

  return v3;
}

uint64_t sub_1000769A0@<X0>(uint64_t a1@<X0>, char a2@<W1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_10007250C(a1, a2 & 1, a3, a4);
}

uint64_t sub_1000769C4(uint64_t a1, char a2, unint64_t a3)
{
  return sub_100072B7C(a1, a2 & 1, a3);
}

id sub_1000769E8(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return sub_100072FB8(a1, a2 & 1, a3, a4);
}

uint64_t sub_100076A0C()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 32);
  if (v1 != 255)
    sub_100076A40(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v1 & 1);
  return swift_deallocObject(v0, 33, 7);
}

uint64_t sub_100076A40(uint64_t a1, unint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_errorRelease();
  else
    return sub_100005DE0(a1, a2);
}

uint64_t sub_100076A4C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

Swift::Int sub_100076A78(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4;

  return sub_100075AD8(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
}

uint64_t sub_100076A80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100076A90(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

_QWORD *sub_100076A98(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  _QWORD *v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  uint64_t v12;

  v2 = (_QWORD *)isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    sub_100076BE8((unint64_t *)((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v2);
    if (v1)
      swift_willThrow(v8);
    else
      return (_QWORD *)v8;
  }
  else
  {
    v9 = (void *)swift_slowAlloc(v7, -1);
    bzero(v9, v7);
    sub_100076BE8((unint64_t *)v9, v6, v2);
    v2 = v10;
    swift_slowDealloc(v9, -1, -1);
  }
  return v2;
}

void sub_100076BE8(unint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _TtC14softposreaderd12RemoteReader *v24;
  uint64_t v25;
  _TtC14softposreaderd12RemoteReader *v26;
  uint64_t v27;
  const char *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  Swift::Int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  BOOL v42;
  uint64_t v43;
  _QWORD *v44;
  BOOL v45;
  SEL v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  uint64_t v56;
  int64_t v57;
  _QWORD *v58;
  _QWORD v60[9];
  unint64_t v61;

  v56 = 0;
  v3 = 0;
  v6 = a3[8];
  v4 = a3 + 8;
  v5 = v6;
  v7 = 1 << *((_BYTE *)v4 - 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & v5;
  v57 = (unint64_t)(v7 + 63) >> 6;
  v58 = v4;
  while (v9)
  {
    v17 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v18 = v17 | (v3 << 6);
LABEL_20:
    v61 = v18;
    v22 = 16 * v18;
    v23 = (uint64_t *)(a3[6] + v22);
    v25 = *v23;
    v24 = (_TtC14softposreaderd12RemoteReader *)v23[1];
    v26 = *(_TtC14softposreaderd12RemoteReader **)(a3[7] + v22 + 8);
    v27 = qword_1001ACEE8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v27 != -1)
      swift_once(&qword_1001ACEE8, sub_10003890C);
    v35 = qword_1001B4AF0;
    if (*(_QWORD *)(qword_1001B4AF0 + 16)
      && (Hasher.init(_seed:)(v60),
          String.hash(into:)(v60, v25, v24),
          v36 = Hasher._finalize()(),
          v37 = -1 << *(_BYTE *)(v35 + 32),
          v38 = v36 & ~v37,
          v39 = v35 + 56,
          ((*(_QWORD *)(v35 + 56 + ((v38 >> 3) & 0xFFFFFFFFFFFFF8)) >> v38) & 1) != 0))
    {
      v40 = *(_QWORD *)(v35 + 48);
      v41 = (_QWORD *)(v40 + 16 * v38);
      v28 = (const char *)v41[1];
      v42 = *v41 == v25 && v28 == (const char *)v24;
      if (!v42 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v41, v28, v25, v24, 0) & 1) == 0)
      {
        v43 = ~v37;
        do
        {
          v38 = (v38 + 1) & v43;
          if (((*(_QWORD *)(v39 + ((v38 >> 3) & 0xFFFFFFFFFFFFF8)) >> v38) & 1) == 0)
            goto LABEL_37;
          v44 = (_QWORD *)(v40 + 16 * v38);
          v28 = (const char *)v44[1];
          v45 = *v44 == v25 && v28 == (const char *)v24;
        }
        while (!v45 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v44, v28, v25, v24, 0) & 1) == 0);
      }
      swift_bridgeObjectRelease(v24, v28, v29, v30, v31, v32, v33, v34);
      swift_bridgeObjectRelease(v26, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
LABEL_37:
      swift_bridgeObjectRelease(v24, v28, v29, v30, v31, v32, v33, v34);
      swift_bridgeObjectRelease(v26, v46, v47, v48, v49, v50, v51, v52);
      *(unint64_t *)((char *)a1 + ((v61 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v61;
      if (__OFADD__(v56++, 1))
        goto LABEL_43;
    }
  }
  v19 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    goto LABEL_42;
  }
  if (v19 >= v57)
    goto LABEL_40;
  v20 = v58[v19];
  ++v3;
  if (v20)
    goto LABEL_19;
  v3 = v19 + 1;
  if (v19 + 1 >= v57)
    goto LABEL_40;
  v20 = v58[v3];
  if (v20)
  {
LABEL_19:
    v9 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v3 << 6);
    goto LABEL_20;
  }
  v21 = v19 + 2;
  if (v21 >= v57)
  {
LABEL_40:
    sub_100076EAC(a1, a2, v56, (uint64_t)a3);
    return;
  }
  v20 = v58[v21];
  if (v20)
  {
    v3 = v21;
    goto LABEL_19;
  }
  while (1)
  {
    v3 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v3 >= v57)
      goto LABEL_40;
    v20 = v58[v3];
    ++v21;
    if (v20)
      goto LABEL_19;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
}

Swift::Int sub_100076EAC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[9];

  if (!a3)
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_100003A2C((uint64_t *)&unk_1001ACD40);
  result = static _DictionaryStorage.allocate(capacity:)(v5);
  v9 = result;
  v37 = a1;
  v38 = a2;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  v39 = v4;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_38;
      if (v15 >= v38)
        return v9;
      v16 = v37[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= v38)
          return v9;
        v16 = v37[v11];
        if (!v16)
        {
          v17 = v15 + 2;
          if (v17 >= v38)
            return v9;
          v16 = v37[v17];
          if (!v16)
          {
            while (1)
            {
              v11 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_39;
              if (v11 >= v38)
                return v9;
              v16 = v37[v11];
              ++v17;
              if (v16)
                goto LABEL_22;
            }
          }
          v11 = v17;
        }
      }
LABEL_22:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    v18 = 16 * v14;
    v19 = (uint64_t *)(*(_QWORD *)(v4 + 48) + v18);
    v21 = *v19;
    v20 = v19[1];
    v22 = (uint64_t *)(*(_QWORD *)(v4 + 56) + v18);
    v23 = *v22;
    v24 = v22[1];
    Hasher.init(_seed:)(v40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)(v40, v21, v20);
    result = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v9 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
    {
      v28 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_37;
        }
        v31 = v27 == v30;
        if (v27 == v30)
          v27 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v12 + 8 * v27);
      }
      while (v32 == -1);
      v28 = __clz(__rbit64(~v32)) + (v27 << 6);
    }
    *(_QWORD *)(v12 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
    v33 = 16 * v28;
    v34 = (_QWORD *)(*(_QWORD *)(v9 + 48) + v33);
    *v34 = v21;
    v34[1] = v20;
    v35 = (_QWORD *)(*(_QWORD *)(v9 + 56) + v33);
    *v35 = v23;
    v35[1] = v24;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    v4 = v39;
    if (!v5)
      return v9;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_100077148(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  _BOOL4 v24;
  uint64_t v25;
  unint64_t v26;
  _TtC14softposreaderd12RemoteReader *v27;
  _QWORD *v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  _TtC14softposreaderd12RemoteReader *v37;
  _TtC14softposreaderd12RemoteReader *v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  void *object;
  void *v47;
  uint64_t countAndFlagsBits;
  Swift::String v49;
  _TtC14softposreaderd12RemoteReader *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  os_log_type_t v54;
  SEL v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  _TtC14softposreaderd12RemoteReader *v62;
  _TtC14softposreaderd12RemoteReader *v63;
  _TtC14softposreaderd12RemoteReader *v64;
  Swift::String v65;
  uint64_t v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  Swift::String v73;
  SEL v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int (*v83)(char *, uint64_t, uint64_t);
  uint64_t v84;
  _TtC14softposreaderd12RemoteReader *v85;
  _TtC14softposreaderd12RemoteReader *v86;
  _TtC14softposreaderd12RemoteReader *v87;
  Swift::String v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  Swift::String v95;
  SEL v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  _TtC14softposreaderd12RemoteReader *v105;
  uint64_t v106;
  _TtC14softposreaderd12RemoteReader *v107;
  _TtC14softposreaderd12RemoteReader *v108;
  char *v109;
  _TtC14softposreaderd12RemoteReader *v110;
  SEL v111;
  id v112;
  id v113;
  id v114;
  id v115;
  id v116;
  id v117;
  uint64_t v118;
  const char *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  _TtC14softposreaderd12RemoteReader *v130;
  SEL v131;
  id v132;
  id v133;
  id v134;
  id v135;
  id v136;
  id v137;
  Swift::String v138;
  Swift::String v139;
  _TtC14softposreaderd12RemoteReader *v140;
  Swift::String v141;
  Swift::String v142;
  Swift::String v143;
  uint64_t v144;
  _TtC14softposreaderd12RemoteReader *v145;
  uint64_t v146;
  uint64_t v147;
  const char *v148;
  const char *v149;
  id v150;
  id v151;
  id v152;
  id v153;
  id v154;
  id v155;
  uint64_t result;
  const char *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _QWORD v168[2];
  void *v169;
  int v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  Swift::String v176;
  uint64_t v177;
  const char *v178;
  uint64_t v179;
  _TtC14softposreaderd12RemoteReader *v180;

  v171 = a4;
  v176._countAndFlagsBits = a2;
  v8 = type metadata accessor for String.Encoding(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v173 = (char *)v168 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003A2C(&qword_1001B0438);
  v12 = __chkstk_darwin(v11);
  v172 = (char *)v168 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)v168 - v14;
  v16 = type metadata accessor for URLRequest(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)v168 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001ACFE0 != -1)
    swift_once(&qword_1001ACFE0, sub_100072418);
  v20 = type metadata accessor for Logger(0);
  sub_100003A14(v20, (uint64_t)qword_1001B09F8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a1, v16);
  swift_bridgeObjectRetain_n(a5, 2);
  v21 = swift_bridgeObjectRetain_n(a3, 2);
  v22 = a3;
  v23 = Logger.logObject.getter(v21);
  v170 = static os_log_type_t.info.getter();
  v24 = os_log_type_enabled(v23, (os_log_type_t)v170);
  v174 = v9;
  v175 = v8;
  v176._object = v22;
  if (v24)
  {
    v169 = a5;
    v25 = swift_slowAlloc(32, -1);
    v168[0] = swift_slowAlloc(96, -1);
    v179 = v168[0];
    *(_DWORD *)v25 = 136315650;
    v26 = URLRequest.allHTTPHeaderFields.getter();
    v168[1] = a1;
    if (!v26)
      v26 = sub_1000046DC((uint64_t)&_swiftEmptyArrayStorage);
    v27 = (_TtC14softposreaderd12RemoteReader *)v26;
    v28 = sub_100076A98(v26);
    swift_bridgeObjectRelease(v27, v29, v30, v31, v32, v33, v34, v35);
    v36 = Dictionary.description.getter(v28, &type metadata for String, &type metadata for String, &protocol witness table for String);
    v38 = v37;
    swift_release(v28);
    v177 = sub_1000056EC(v36, (unint64_t)v38, &v179);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, &v178, v25 + 4, v25 + 12);
    swift_bridgeObjectRelease(v38, v39, v40, v41, v42, v43, v44, v45);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    *(_WORD *)(v25 + 12) = 2080;
    object = v176._object;
    swift_bridgeObjectRetain();
    v177 = sub_1000056EC(v176._countAndFlagsBits, (unint64_t)object, &v179);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, &v178, v25 + 14, v25 + 22);
    swift_bridgeObjectRelease_n(object, 3);
    *(_WORD *)(v25 + 22) = 2080;
    v47 = v169;
    if (v169)
    {
      v49 = String.redactedToken()();
      countAndFlagsBits = v49._countAndFlagsBits;
      v50 = (_TtC14softposreaderd12RemoteReader *)v49._object;
    }
    else
    {
      v50 = (_TtC14softposreaderd12RemoteReader *)0xE300000000000000;
      countAndFlagsBits = 4271950;
    }
    v53 = v168[0];
    v54 = v170;
    v177 = sub_1000056EC(countAndFlagsBits, (unint64_t)v50, &v179);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, &v178, v25 + 24, v25 + 32);
    swift_bridgeObjectRelease_n(v47, 2);
    swift_bridgeObjectRelease(v50, v55, v56, v57, v58, v59, v60, v61);
    _os_log_impl((void *)&_mh_execute_header, v23, v54, "SecureChannel.signingPayload(request: %s, cpuTime: %s, timeToken: %s)", (uint8_t *)v25, 0x20u);
    swift_arrayDestroy(v53, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v25, -1, -1);

    v52 = v47;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);

    swift_bridgeObjectRelease_n(a5, 2);
    v51 = swift_bridgeObjectRelease_n(v22, 2);
    v52 = a5;
  }
  v62 = (_TtC14softposreaderd12RemoteReader *)0xE000000000000000;
  v179 = 0;
  v180 = (_TtC14softposreaderd12RemoteReader *)0xE000000000000000;
  URLRequest.httpMethod.getter(v51);
  if (v63)
  {
    v64 = v63;
    v65 = String.lowercased()();
    v66 = v65._countAndFlagsBits;
    v62 = (_TtC14softposreaderd12RemoteReader *)v65._object;
    swift_bridgeObjectRelease(v64, (SEL)v65._object, v67, v68, v69, v70, v71, v72);
  }
  else
  {
    v66 = 0;
  }
  v73._countAndFlagsBits = v66;
  v73._object = v62;
  String.append(_:)(v73);
  swift_bridgeObjectRelease(v62, v74, v75, v76, v77, v78, v79, v80);
  URLRequest.url.getter();
  v81 = type metadata accessor for URL(0);
  v82 = *(_QWORD *)(v81 - 8);
  v83 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48);
  if (v83(v15, 1, v81) == 1)
  {
    sub_100077844((uint64_t)v15);
    v84 = 0;
    v85 = (_TtC14softposreaderd12RemoteReader *)0xE000000000000000;
  }
  else
  {
    URL.path.getter();
    v87 = v86;
    (*(void (**)(char *, uint64_t))(v82 + 8))(v15, v81);
    v88 = String.lowercased()();
    v84 = v88._countAndFlagsBits;
    v85 = (_TtC14softposreaderd12RemoteReader *)v88._object;
    swift_bridgeObjectRelease(v87, (SEL)v88._object, v89, v90, v91, v92, v93, v94);
  }
  v95._countAndFlagsBits = v84;
  v95._object = v85;
  String.append(_:)(v95);
  swift_bridgeObjectRelease(v85, v96, v97, v98, v99, v100, v101, v102);
  v103 = (uint64_t)v172;
  URLRequest.url.getter();
  if (v83((char *)v103, 1, v81) == 1)
  {
    sub_100077844(v103);
    v104 = 0;
    v105 = (_TtC14softposreaderd12RemoteReader *)0xE000000000000000;
  }
  else
  {
    v106 = URL.query.getter();
    v108 = v107;
    (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v103, v81);
    if (v108)
      v104 = v106;
    else
      v104 = 0;
    if (v108)
      v105 = v108;
    else
      v105 = (_TtC14softposreaderd12RemoteReader *)0xE000000000000000;
  }
  v109 = v173;
  v110 = v105;
  String.append(_:)(*(Swift::String *)&v104);
  swift_bridgeObjectRelease(v105, v111, v112, v113, v114, v115, v116, v117);
  v118 = URLRequest.allHTTPHeaderFields.getter();
  if (v118)
  {
    v126 = v118;
    if (*(_QWORD *)(v118 + 16)
      && (v127 = sub_10000ADC4(0xD000000000000015, 0x8000000100165BA0), (v119 & 1) != 0))
    {
      v128 = (uint64_t *)(*(_QWORD *)(v126 + 56) + 16 * v127);
      v129 = *v128;
      v130 = (_TtC14softposreaderd12RemoteReader *)v128[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v126, v131, v132, v133, v134, v135, v136, v137);
      v138._countAndFlagsBits = 0xD000000000000015;
      v138._object = (void *)0x8000000100165BA0;
      String.append(_:)(v138);
      v139._countAndFlagsBits = v129;
      v139._object = v130;
      String.append(_:)(v139);
      v140 = v130;
    }
    else
    {
      v140 = (_TtC14softposreaderd12RemoteReader *)v126;
    }
    swift_bridgeObjectRelease(v140, v119, v120, v121, v122, v123, v124, v125);
  }
  v141._countAndFlagsBits = 0xD000000000000017;
  v141._object = (void *)0x800000010016CA20;
  String.append(_:)(v141);
  String.append(_:)(v176);
  if (v52)
  {
    v142._countAndFlagsBits = 0xD000000000000012;
    v142._object = (void *)0x8000000100165BC0;
    String.append(_:)(v142);
    v143._countAndFlagsBits = v171;
    v143._object = v52;
    String.append(_:)(v143);
  }
  v144 = v179;
  v145 = v180;
  v146 = swift_bridgeObjectRetain();
  static String.Encoding.utf8.getter(v146);
  v147 = String.data(using:allowLossyConversion:)(v109, 0, v144, v145);
  v149 = v148;
  swift_bridgeObjectRelease(v145, v148, v150, v151, v152, v153, v154, v155);
  result = (*(uint64_t (**)(char *, uint64_t))(v174 + 8))(v109, v175);
  if ((unint64_t)v149 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease(v180, v157, v158, v159, v160, v161, v162, v163);
    v177 = v147;
    v178 = v149;
    v164 = URLRequest.httpBody.getter();
    if (v165 >> 60 != 15)
    {
      v166 = v164;
      v167 = v165;
      Data.append(_:)(v164, v165);
      sub_10000A9B0(v166, v167);
      return v177;
    }
    return v147;
  }
  return result;
}

uint64_t sub_100077820(uint64_t a1, unint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_errorRetain();
  else
    return sub_100005D9C(a1, a2);
}

uint64_t sub_10007782C(uint64_t result, unint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    return sub_100076A40(result, a2, a3 & 1);
  return result;
}

uint64_t sub_100077844(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003A2C(&qword_1001B0438);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100077884()
{
  unint64_t result;

  result = qword_1001B0B10;
  if (!qword_1001B0B10)
  {
    result = swift_getWitnessTable(&unk_10015FD7C, &type metadata for SecureChannel.TimeTokenResponse);
    atomic_store(result, (unint64_t *)&qword_1001B0B10);
  }
  return result;
}

_QWORD *sub_1000778C8(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_100077904()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_errorRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100077930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_100073894(a1, a2, a3, *(void (**)(char *, uint64_t))(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32));
}

uint64_t sub_10007793C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100077968(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100073630(a1, a2, *(_QWORD *)(v2 + 16), *(uint64_t (**)(uint64_t, uint64_t))(v2 + 24));
}

uint64_t sub_100077974()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100077998(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;

  return sub_100075F04(a1, a2, a3, *(void (**)(uint64_t, void *))(v3 + 16), *(_QWORD *)(v3 + 24));
}

_QWORD *initializeBufferWithCopyOfBuffer for SecureChannel.TimeTokenResponse(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *assignWithCopy for SecureChannel.TimeTokenResponse(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for SecureChannel.TimeTokenResponse(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureChannel.TimeTokenResponse(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureChannel.TimeTokenResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureChannel.TimeTokenResponse()
{
  return &type metadata for SecureChannel.TimeTokenResponse;
}

unint64_t sub_100077AD0()
{
  unint64_t result;

  result = qword_1001B0B20;
  if (!qword_1001B0B20)
  {
    result = swift_getWitnessTable(&unk_10015FE68, &type metadata for SecureChannel.TimeTokenResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B0B20);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SecureChannel.TimeTokenResponse.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100077B54 + 4 * byte_10015FCF0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100077B74 + 4 * byte_10015FCF5[v4]))();
}

_BYTE *sub_100077B54(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100077B74(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100077B7C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100077B84(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100077B8C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100077B94(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SecureChannel.TimeTokenResponse.CodingKeys()
{
  return &type metadata for SecureChannel.TimeTokenResponse.CodingKeys;
}

unint64_t sub_100077BB4()
{
  unint64_t result;

  result = qword_1001B0B30;
  if (!qword_1001B0B30)
  {
    result = swift_getWitnessTable(&unk_10015FE40, &type metadata for SecureChannel.TimeTokenResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B0B30);
  }
  return result;
}

unint64_t sub_100077BFC()
{
  unint64_t result;

  result = qword_1001B0B38;
  if (!qword_1001B0B38)
  {
    result = swift_getWitnessTable(&unk_10015FDB0, &type metadata for SecureChannel.TimeTokenResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B0B38);
  }
  return result;
}

unint64_t sub_100077C44()
{
  unint64_t result;

  result = qword_1001B0B40;
  if (!qword_1001B0B40)
  {
    result = swift_getWitnessTable(&unk_10015FDD8, &type metadata for SecureChannel.TimeTokenResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B0B40);
  }
  return result;
}

uint64_t sub_100077C9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B0B48);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B0B48);
  if (qword_1001AD158 != -1)
    swift_once(&qword_1001AD158, sub_1000CC540);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4DF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100077D2C(uint64_t a1)
{
  return sub_100077EB4(a1, qword_1001B4BD8, 0xD00000000000001DLL, 0x800000010016CDA0);
}

uint64_t sub_100077D50(uint64_t a1)
{
  return sub_100077EB4(a1, qword_1001B4BF0, 0xD000000000000023, 0x800000010016CC50);
}

uint64_t sub_100077D74(uint64_t a1)
{
  return sub_100077EB4(a1, qword_1001B4C08, 0xD000000000000022, 0x800000010016CDC0);
}

uint64_t sub_100077D98(uint64_t a1)
{
  return sub_100077EB4(a1, qword_1001B4C20, 0xD000000000000021, 0x800000010016CC80);
}

uint64_t sub_100077DBC(uint64_t a1)
{
  return sub_100077EB4(a1, qword_1001B4C38, 0xD000000000000021, 0x800000010016CCB0);
}

uint64_t sub_100077DE0(uint64_t a1)
{
  return sub_100077EB4(a1, qword_1001B4C50, 0xD000000000000021, 0x800000010016CCE0);
}

uint64_t sub_100077E04(uint64_t a1)
{
  return sub_100077EB4(a1, qword_1001B4C68, 0xD000000000000021, 0x800000010016CD10);
}

uint64_t sub_100077E28(uint64_t a1)
{
  return sub_100077EB4(a1, qword_1001B4C80, 0xD000000000000021, 0x800000010016CD40);
}

uint64_t sub_100077E4C(uint64_t a1)
{
  return sub_100077EB4(a1, qword_1001B4C98, 0xD000000000000021, 0x800000010016CD70);
}

uint64_t sub_100077E70(uint64_t a1)
{
  return sub_100077EB4(a1, qword_1001B4CB0, 0x3A656E696C66666FLL, 0xE800000000000000);
}

uint64_t sub_100077E90(uint64_t a1)
{
  return sub_100077EB4(a1, qword_1001B4CC8, 0x656C6974616C6F76, 0xE90000000000003ALL);
}

uint64_t sub_100077EB4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v7 = sub_100003A2C(&qword_1001B0438);
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  sub_1000039D4(v10, a2);
  v11 = sub_100003A14(v10, (uint64_t)a2);
  URL.init(string:)(a3, a4);
  v12 = *(_QWORD *)(v10 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v10);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(v11, v9, v10);
  __break(1u);
  return result;
}

uint64_t sub_100077F90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v0 = type metadata accessor for URL.DirectoryHint(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100003A2C(&qword_1001B0438);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  sub_1000039D4(v7, qword_1001B4CE0);
  sub_100003A14(v7, (uint64_t)qword_1001B4CE0);
  v8 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v9 = 1;
  v10 = objc_msgSend(v8, "URLsForDirectory:inDomains:", 14, 1);

  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v7);
  v12 = *(_QWORD *)(v7 - 8);
  if (*(_QWORD *)(v11 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v6, v11 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)), v7);
    v9 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v6, v9, 1, v7);
  swift_bridgeObjectRelease(v11);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v6, 1, v7);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v15 = 0xD000000000000017;
    v16 = 0x800000010016B220;
    (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for URL.DirectoryHint.inferFromPath(_:), v0);
    v14 = sub_1000095D0();
    URL.appending<A>(component:directoryHint:)(&v15, v3, &type metadata for String, v14);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    swift_bridgeObjectRelease(v16);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v6, v7);
  }
  return result;
}

uint64_t sub_1000781BC()
{
  uint64_t v0;

  v0 = type metadata accessor for URL(0);
  sub_1000039D4(v0, qword_1001B4CF8);
  sub_100003A14(v0, (uint64_t)qword_1001B4CF8);
  return sub_100078204();
}

uint64_t sub_100078204()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  Swift::String v16;
  void *object;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v0 = sub_100003A2C(&qword_1001B0438);
  __chkstk_darwin(v0);
  v2 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = 1;
  v3 = container_system_path_for_identifier(0, &v21);
  if (v3)
  {
    v4 = v3;
    if (qword_1001ACFE8 != -1)
      swift_once(&qword_1001ACFE8, sub_100077C9C);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_100003A14(v5, (uint64_t)qword_1001B0B48);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      v22 = v10;
      *(_DWORD *)v9 = 136315138;
      v11 = String.init(cString:)(v4);
      v13 = v12;
      v20 = sub_1000056EC(v11, v12, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v9 + 4, v9 + 12);
      swift_bridgeObjectRelease(v13);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "System container path: %s", v9, 0xCu);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);
    }

    v14 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v2, 1, 1, v14);
    URL.init(fileURLWithFileSystemRepresentation:isDirectory:relativeTo:)(v4, 1, v2);
    sub_100077844((uint64_t)v2);
    return swift_slowDealloc(v4, -1, -1);
  }
  else
  {
    v22 = 0;
    v23 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease(v23);
    v22 = 0xD000000000000020;
    v23 = 0x800000010016CC20;
    v20 = v21;
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    object = v16._object;
    String.append(_:)(v16);
    swift_bridgeObjectRelease(object);
    v18._countAndFlagsBits = 41;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v22, v23, "SPREngine/Environment.swift", 27, 2, 47, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_100078504@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  void (*v23)(char *, _QWORD, uint64_t, uint64_t);
  void (*v25)(char *, char *, uint64_t);
  id v26;
  uint64_t v27;
  id v29[3];
  _BYTE v30[24];

  v3 = sub_100003A2C(&qword_1001B0438);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v29[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v29[-1] - v7;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v29[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v29[-1] - v14;
  v16 = v1 + OBJC_IVAR____TtC9SPREngine11Environment__itemReplacementDirectory;
  swift_beginAccess(v1 + OBJC_IVAR____TtC9SPREngine11Environment__itemReplacementDirectory, v30, 0, 0);
  sub_10005E0FC(v16, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_100077844((uint64_t)v8);
    v17 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
    URL._bridgeToObjectiveC()((NSURL *)OBJC_IVAR____TtC9SPREngine11Environment_storageURL);
    v19 = v18;
    v29[0] = 0;
    v20 = objc_msgSend(v17, "URLForDirectory:inDomain:appropriateForURL:create:error:", 99, 1, v18, 1, v29);

    v21 = v29[0];
    if (v20)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v22 = v21;

      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v6, v13, v9);
      v23 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56);
      v23(v6, 0, 1, v9);
      swift_beginAccess(v16, v29, 33, 0);
      sub_10007AB34((uint64_t)v6, v16);
      swift_endAccess(v29);
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(a1, v13, v9);
      return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v23)(a1, 0, 1, v9);
    }
    else
    {
      v26 = v29[0];
      _convertNSErrorToError(_:)(v21);

      swift_willThrow(v27);
      swift_errorRelease();
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(a1, 1, 1, v9);
    }
  }
  else
  {
    v25 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v25(v15, v8, v9);
    v25(a1, v15, v9);
    return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
  }
}

void sub_1000787F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  char *v8;
  uint64_t v9;

  v3 = type metadata accessor for BackendSetting(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100070ECC(a2, (uint64_t)v5, v6);
  v7 = type metadata accessor for URL(0);
  v8 = (char *)sub_10007889C
     + 4
     * byte_10015FEC0[(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 11, v7)];
  __asm { BR              X10 }
}

uint64_t sub_10007889C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v0, v2, v1);
  return 0;
}

uint64_t sub_100078D94@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  unint64_t v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint32_t *p_align;
  id v27;
  uint64_t v28;
  void *object;
  NSString v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void (*v45)(char *, uint64_t);
  os_log_type_t v46;
  void (*v47)(char *, uint64_t);
  void *v48;
  uint8_t *v49;
  id v50;
  NSURL *v51;
  void *v52;
  void *v53;
  NSURL *v54;
  void *v55;
  void *v56;
  unsigned int v57;
  id v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  void *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  void (*v73)(char *, uint64_t);
  os_log_type_t v74;
  void *v75;
  uint8_t *v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  void *v96;
  id v97;
  NSURL *v98;
  void *v99;
  void *v100;
  unsigned int v101;
  id v102;
  uint64_t v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  os_log_type_t v107;
  uint8_t *v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  void (*v114)(char *, uint64_t);
  os_log_type_t v115;
  void *v116;
  uint8_t *v117;
  id v118;
  NSURL *v119;
  void *v120;
  void *v121;
  unsigned int v122;
  id v123;
  uint64_t v124;
  id v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  NSObject *v129;
  char *v130;
  os_log_type_t v131;
  uint8_t *v132;
  void (*v133)(char *, uint64_t);
  void *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t result;
  id v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  NSObject *v151;
  os_log_type_t v152;
  uint8_t *v153;
  uint64_t (*v154)(char *, uint64_t);
  void *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  id v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  char *v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  id v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  id v178;
  uint64_t v179;

  v173 = a3;
  v5 = type metadata accessor for CocoaError.Code(0);
  v169 = *(_QWORD *)(v5 - 8);
  v170 = v5;
  __chkstk_darwin(v5);
  v168 = (char *)&v163 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v171 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v164 = (char *)&v163 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v166 = (char *)&v163 - v11;
  v12 = __chkstk_darwin(v10);
  v165 = (char *)&v163 - v13;
  v14 = __chkstk_darwin(v12);
  v167 = (char *)&v163 - v15;
  __chkstk_darwin(v14);
  v174 = (char *)&v163 - v16;
  v17 = type metadata accessor for URL.DirectoryHint(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v163 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001AD050 != -1)
    swift_once(&qword_1001AD050, sub_1000781BC);
  sub_100003A14(v7, (uint64_t)qword_1001B4CF8);
  v178 = a1;
  v179 = a2;
  v21 = enum case for URL.DirectoryHint.isDirectory(_:);
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 104);
  v22(v20, enum case for URL.DirectoryHint.isDirectory(_:), v17);
  v23 = sub_1000095D0();
  URL.appending<A>(component:directoryHint:)(&v178, v20, &type metadata for String, v23);
  v24 = *(void (**)(char *, uint64_t))(v18 + 8);
  v24(v20, v17);
  if (qword_1001AD048 != -1)
    swift_once(&qword_1001AD048, sub_100077F90);
  v175 = v7;
  sub_100003A14(v7, (uint64_t)qword_1001B4CE0);
  v178 = a1;
  v179 = a2;
  v22(v20, v21, v17);
  v25 = v174;
  URL.appending<A>(component:directoryHint:)(&v178, v20, &type metadata for String, v23);
  v24(v20, v17);
  p_align = &stru_1001A9FE8.align;
  v172 = (id)objc_opt_self(NSFileManager);
  v27 = objc_msgSend(v172, "defaultManager");
  v28 = v173;
  object = URL.path(percentEncoded:)(0)._object;
  v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  LOBYTE(object) = objc_msgSend(v27, "fileExistsAtPath:", v30);

  if ((object & 1) != 0)
  {
    if (qword_1001ACFE8 != -1)
      swift_once(&qword_1001ACFE8, sub_100077C9C);
    v31 = type metadata accessor for Logger(0);
    sub_100003A14(v31, (uint64_t)qword_1001B0B48);
    v32 = v171;
    v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v171 + 16);
    v34 = v165;
    v35 = v175;
    v36 = v33(v165, v28, v175);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v40 = (void *)swift_slowAlloc(32, -1);
      v178 = v40;
      *(_DWORD *)v39 = 136315138;
      v41 = sub_100005F1C((unint64_t *)&qword_1001B1310, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v42 = dispatch thunk of CustomStringConvertible.description.getter(v175, v41);
      v44 = v43;
      v176 = sub_1000056EC(v42, v43, (uint64_t *)&v178);
      v35 = v175;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, &v177, v39 + 4, v39 + 12);
      swift_bridgeObjectRelease(v44);
      v45 = *(void (**)(char *, uint64_t))(v32 + 8);
      v45(v34, v35);
      v46 = v38;
      v47 = v45;
      _os_log_impl((void *)&_mh_execute_header, v37, v46, "Reusing existing storage folder at: %s", v39, 0xCu);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      v48 = v40;
      p_align = (_DWORD *)(&stru_1001A9FE8 + 24);
      swift_slowDealloc(v48, -1, -1);
      v49 = v39;
      v25 = v174;
      swift_slowDealloc(v49, -1, -1);
LABEL_31:

      goto LABEL_32;
    }
LABEL_30:
    v47 = *(void (**)(char *, uint64_t))(v32 + 8);
    v47(v34, v35);
    goto LABEL_31;
  }
  v50 = objc_msgSend(v172, "defaultManager");
  URL._bridgeToObjectiveC()(v51);
  v53 = v52;
  URL._bridgeToObjectiveC()(v54);
  v56 = v55;
  v178 = 0;
  v57 = objc_msgSend(v50, "copyItemAtURL:toURL:error:", v53, v55, &v178);

  v58 = v178;
  if (v57)
  {
    v59 = qword_1001ACFE8;
    v60 = v178;
    v35 = v175;
    if (v59 != -1)
      swift_once(&qword_1001ACFE8, sub_100077C9C);
    v61 = type metadata accessor for Logger(0);
    sub_100003A14(v61, (uint64_t)qword_1001B0B48);
    v62 = v171;
    v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v171 + 16);
    v63 = v33(v167, (uint64_t)v25, v35);
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v64, v65))
    {
      v66 = (uint8_t *)swift_slowAlloc(12, -1);
      v67 = (void *)swift_slowAlloc(32, -1);
      v178 = v67;
      *(_DWORD *)v66 = 136315138;
      v68 = sub_100005F1C((unint64_t *)&qword_1001B1310, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v69 = v167;
      v70 = dispatch thunk of CustomStringConvertible.description.getter(v175, v68);
      v72 = v71;
      v176 = sub_1000056EC(v70, v71, (uint64_t *)&v178);
      v35 = v175;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, &v177, v66 + 4, v66 + 12);
      swift_bridgeObjectRelease(v72);
      v73 = *(void (**)(char *, uint64_t))(v62 + 8);
      v73(v69, v35);
      v74 = v65;
      v47 = v73;
      _os_log_impl((void *)&_mh_execute_header, v64, v74, "Imported legacy storage at: %s", v66, 0xCu);
      swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
      v75 = v67;
      p_align = (_DWORD *)(&stru_1001A9FE8 + 24);
      swift_slowDealloc(v75, -1, -1);
      v76 = v66;
      v25 = v174;
      swift_slowDealloc(v76, -1, -1);
    }
    else
    {
      v47 = *(void (**)(char *, uint64_t))(v62 + 8);
      v47(v167, v35);
    }

    goto LABEL_32;
  }
  v77 = v178;
  v78 = _convertNSErrorToError(_:)(v58);

  v80 = swift_willThrow(v79);
  v81 = v168;
  static CocoaError.fileReadNoSuchFile.getter(v80);
  v82 = sub_100005F1C(&qword_1001B0C70, (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError.Code, (uint64_t)&protocol conformance descriptor for CocoaError.Code);
  v83 = v170;
  v84 = static _ErrorCodeProtocol.~= infix(_:_:)(v81, v78, v170, v82);
  (*(void (**)(char *, uint64_t))(v169 + 8))(v81, v83);
  v35 = v175;
  v34 = v164;
  if ((v84 & 1) == 0)
  {
    if (qword_1001ACFE8 != -1)
      swift_once(&qword_1001ACFE8, sub_100077C9C);
    v85 = type metadata accessor for Logger(0);
    sub_100003A14(v85, (uint64_t)qword_1001B0B48);
    swift_errorRetain(v78);
    v86 = swift_errorRetain(v78);
    v87 = Logger.logObject.getter(v86);
    v88 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v87, v88))
    {
      v89 = (uint8_t *)swift_slowAlloc(12, -1);
      v90 = (void *)swift_slowAlloc(32, -1);
      v178 = v90;
      *(_DWORD *)v89 = 136315138;
      v176 = v78;
      swift_errorRetain(v78);
      v91 = sub_100003A2C((uint64_t *)&unk_1001B1280);
      v92 = String.init<A>(describing:)(&v176, v91);
      v94 = v93;
      v176 = sub_1000056EC(v92, v93, (uint64_t *)&v178);
      v35 = v175;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, &v177, v89 + 4, v89 + 12);
      v95 = v94;
      p_align = (_DWORD *)(&stru_1001A9FE8 + 24);
      swift_bridgeObjectRelease(v95);
      swift_errorRelease(v78);
      swift_errorRelease(v78);
      _os_log_impl((void *)&_mh_execute_header, v87, v88, "Failed to import legacy storage: %s", v89, 0xCu);
      swift_arrayDestroy(v90, 1, (char *)&type metadata for Any + 8);
      v96 = v90;
      v28 = v173;
      swift_slowDealloc(v96, -1, -1);
      swift_slowDealloc(v89, -1, -1);
    }
    else
    {
      swift_errorRelease(v78);
      swift_errorRelease(v78);
    }

    v25 = v174;
  }
  v97 = objc_msgSend(v172, *((SEL *)p_align + 325));
  URL._bridgeToObjectiveC()(v98);
  v100 = v99;
  v178 = 0;
  v101 = objc_msgSend(v97, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v99, 1, 0, &v178);

  v102 = v178;
  if (!v101)
  {
    v160 = v178;
    v161 = _convertNSErrorToError(_:)(v102);

    swift_willThrow(v162);
    result = swift_unexpectedError(v161, "SPREngine/Environment.swift", 27, 1, 270);
    __break(1u);
    return result;
  }
  v173 = v78;
  v103 = qword_1001ACFE8;
  v104 = v178;
  if (v103 != -1)
    swift_once(&qword_1001ACFE8, sub_100077C9C);
  v105 = type metadata accessor for Logger(0);
  sub_100003A14(v105, (uint64_t)qword_1001B0B48);
  v32 = v171;
  v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v171 + 16);
  v106 = v33(v34, v28, v35);
  v37 = Logger.logObject.getter(v106);
  v107 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v37, v107))
  {
    swift_errorRelease(v173);
    goto LABEL_30;
  }
  v108 = (uint8_t *)swift_slowAlloc(12, -1);
  v109 = (void *)swift_slowAlloc(32, -1);
  v178 = v109;
  *(_DWORD *)v108 = 136315138;
  v110 = sub_100005F1C((unint64_t *)&qword_1001B1310, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v111 = dispatch thunk of CustomStringConvertible.description.getter(v175, v110);
  v113 = v112;
  v176 = sub_1000056EC(v111, v112, (uint64_t *)&v178);
  v35 = v175;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, &v177, v108 + 4, v108 + 12);
  swift_bridgeObjectRelease(v113);
  v114 = *(void (**)(char *, uint64_t))(v32 + 8);
  v114(v34, v35);
  v115 = v107;
  v47 = v114;
  _os_log_impl((void *)&_mh_execute_header, v37, v115, "Created new storage folder at: %s", v108, 0xCu);
  swift_arrayDestroy(v109, 1, (char *)&type metadata for Any + 8);
  v116 = v109;
  p_align = (_DWORD *)(&stru_1001A9FE8 + 24);
  swift_slowDealloc(v116, -1, -1);
  v117 = v108;
  v25 = v174;
  swift_slowDealloc(v117, -1, -1);

  swift_errorRelease(v173);
LABEL_32:
  v118 = objc_msgSend(v172, *((SEL *)p_align + 325));
  URL._bridgeToObjectiveC()(v119);
  v121 = v120;
  v178 = 0;
  v122 = objc_msgSend(v118, "removeItemAtURL:error:", v120, &v178);

  v123 = v178;
  if (v122)
  {
    v124 = qword_1001ACFE8;
    v125 = v178;
    if (v124 != -1)
      swift_once(&qword_1001ACFE8, sub_100077C9C);
    v126 = type metadata accessor for Logger(0);
    sub_100003A14(v126, (uint64_t)qword_1001B0B48);
    v127 = v166;
    v128 = v33(v166, (uint64_t)v25, v35);
    v129 = Logger.logObject.getter(v128);
    v130 = v25;
    v131 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v129, v131))
    {
      v132 = (uint8_t *)swift_slowAlloc(12, -1);
      v133 = v47;
      v134 = (void *)swift_slowAlloc(32, -1);
      v178 = v134;
      *(_DWORD *)v132 = 136315138;
      v135 = sub_100005F1C((unint64_t *)&qword_1001B1310, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v136 = dispatch thunk of CustomStringConvertible.description.getter(v35, v135);
      v138 = v137;
      v176 = sub_1000056EC(v136, v137, (uint64_t *)&v178);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, &v177, v132 + 4, v132 + 12);
      swift_bridgeObjectRelease(v138);
      v133(v127, v35);
      _os_log_impl((void *)&_mh_execute_header, v129, v131, "Removed legacy storage at: %s", v132, 0xCu);
      swift_arrayDestroy(v134, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v134, -1, -1);
      swift_slowDealloc(v132, -1, -1);

      return ((uint64_t (*)(char *, uint64_t))v133)(v174, v35);
    }

    v47(v127, v35);
    v148 = v130;
  }
  else
  {
    v140 = v178;
    v141 = _convertNSErrorToError(_:)(v123);

    swift_willThrow(v142);
    v143 = swift_errorRetain(v141);
    v144 = v168;
    static CocoaError.fileNoSuchFile.getter(v143);
    v145 = sub_100005F1C(&qword_1001B0C70, (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError.Code, (uint64_t)&protocol conformance descriptor for CocoaError.Code);
    v146 = v170;
    v147 = static _ErrorCodeProtocol.~= infix(_:_:)(v144, v141, v170, v145);
    swift_errorRelease(v141);
    (*(void (**)(char *, uint64_t))(v169 + 8))(v144, v146);
    if ((v147 & 1) != 0)
    {
      v47(v25, v35);
      return swift_errorRelease(v141);
    }
    if (qword_1001ACFE8 != -1)
      swift_once(&qword_1001ACFE8, sub_100077C9C);
    v149 = type metadata accessor for Logger(0);
    sub_100003A14(v149, (uint64_t)qword_1001B0B48);
    swift_errorRetain(v141);
    v150 = swift_errorRetain(v141);
    v151 = Logger.logObject.getter(v150);
    v152 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v151, v152))
    {
      v153 = (uint8_t *)swift_slowAlloc(12, -1);
      v154 = (uint64_t (*)(char *, uint64_t))v47;
      v155 = (void *)swift_slowAlloc(32, -1);
      v178 = v155;
      *(_DWORD *)v153 = 136315138;
      v176 = v141;
      swift_errorRetain(v141);
      v156 = sub_100003A2C((uint64_t *)&unk_1001B1280);
      v157 = String.init<A>(describing:)(&v176, v156);
      v159 = v158;
      v176 = sub_1000056EC(v157, v158, (uint64_t *)&v178);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, &v177, v153 + 4, v153 + 12);
      swift_bridgeObjectRelease(v159);
      swift_errorRelease(v141);
      swift_errorRelease(v141);
      _os_log_impl((void *)&_mh_execute_header, v151, v152, "Failed to remove legacy storage: %s", v153, 0xCu);
      swift_arrayDestroy(v155, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v155, -1, -1);
      swift_slowDealloc(v153, -1, -1);

      swift_errorRelease(v141);
      return v154(v174, v175);
    }

    swift_errorRelease(v141);
    swift_errorRelease(v141);
    swift_errorRelease(v141);
    v148 = v174;
  }
  return ((uint64_t (*)(char *, uint64_t))v47)(v148, v35);
}

uint64_t sub_100079D48@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  char v11;
  void **p_assignWithTake;
  id v13;
  uint64_t v14;
  uint64_t v15;
  NSString v16;
  char *v17;
  void *v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void (*v30)(char *, uint64_t);
  id v31;
  NSURL *v32;
  void *v33;
  void *v34;
  unsigned int v35;
  id v36;
  id v37;
  uint64_t result;
  id v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  id v49;
  uint64_t v50;

  v46 = a1;
  v2 = type metadata accessor for URL.DirectoryHint(0);
  v44 = *(_QWORD *)(v2 - 8);
  v45 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v48 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v47 = (char *)&v42 - v9;
  v10 = (void *)objc_opt_self(NSFileManager);
  v11 = 0;
  v43 = enum case for URL.DirectoryHint.isDirectory(_:);
  p_assignWithTake = &value witness table for Settings.assignWithTake;
  v42 = xmmword_10015A5F0;
  do
  {
    v17 = (char *)p_assignWithTake[418];
    v18 = v17 + 1;
    if (__OFADD__(v17, 1))
      __break(1u);
    v19 = p_assignWithTake;
    p_assignWithTake[418] = v18;
    v20 = sub_100003A2C((uint64_t *)&unk_1001B1300);
    v21 = swift_allocObject(v20, 72, 7);
    *(_OWORD *)(v21 + 16) = v42;
    *(_QWORD *)(v21 + 56) = &type metadata for Int;
    *(_QWORD *)(v21 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v21 + 32) = v18;
    v22 = (void *)String.init(format:_:)(0x252D504D54525053, 0xEB00000000643630, v21);
    v24 = v23;
    if ((v11 & 1) != 0)
      swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRetain(v24);
    v25 = objc_msgSend(v10, "defaultManager");
    v26 = objc_msgSend(v25, "temporaryDirectory");

    static URL._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v49 = v22;
    v50 = v24;
    v28 = v44;
    v27 = v45;
    (*(void (**)(char *, _QWORD, uint64_t))(v44 + 104))(v4, v43, v45);
    v29 = sub_1000095D0();
    URL.appending<A>(component:directoryHint:)(&v49, v4, &type metadata for String, v29);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v4, v27);
    swift_bridgeObjectRelease(v50);
    v30 = *(void (**)(char *, uint64_t))(v48 + 8);
    v30(v8, v5);
    if ((v11 & 1) != 0)
      v30(v46, v5);
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v46, v47, v5);
    v13 = objc_msgSend(v10, "defaultManager");
    URL.path.getter();
    v15 = v14;
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v15);
    LOBYTE(v15) = objc_msgSend(v13, "fileExistsAtPath:", v16);

    v11 = 1;
    v1 = v24;
    p_assignWithTake = v19;
  }
  while ((v15 & 1) != 0);
  v31 = objc_msgSend(v10, "defaultManager");
  URL._bridgeToObjectiveC()(v32);
  v34 = v33;
  v49 = 0;
  v35 = objc_msgSend(v31, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v33, 1, 0, &v49);

  v36 = v49;
  if (v35)
  {
    v37 = v49;
    return swift_bridgeObjectRelease(v24);
  }
  else
  {
    v39 = v49;
    v40 = _convertNSErrorToError(_:)(v36);

    swift_willThrow(v41);
    result = swift_unexpectedError(v40, "SPREngine/Environment.swift", 27, 1, 249);
    __break(1u);
  }
  return result;
}

uint64_t sub_10007A108()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  unsigned int v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  _TtC14softposreaderd12RemoteReader *v27;
  SEL v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint8_t *v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  os_log_type_t v44;
  uint8_t *v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  _TtC14softposreaderd12RemoteReader *v49;
  SEL v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _TtC14softposreaderd12RemoteReader *v66;
  SEL v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t);
  char *v76;
  id v77;
  uint64_t v78;
  NSURL *v79;
  void *v80;
  void *v81;
  unsigned int v82;
  id v83;
  id v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  uint8_t *v91;
  uint64_t v93;
  uint8_t *v94;
  uint64_t v95;
  char *v96;
  id v97;
  id v98[3];

  v1 = v0;
  v2 = type metadata accessor for CocoaError.Code(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v93 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003A2C(&qword_1001B0438);
  __chkstk_darwin(v6);
  v8 = (char *)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v96 = (char *)&v93 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC9SPREngine11Environment_isStorageTemporary) == 1)
  {
    v95 = v10;
    v12 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
    URL._bridgeToObjectiveC()((NSURL *)OBJC_IVAR____TtC9SPREngine11Environment_storageURL);
    v14 = v13;
    v98[0] = 0;
    v15 = objc_msgSend(v12, "removeItemAtURL:error:", v13, v98);

    v16 = v98[0];
    if (v15)
    {
      v17 = qword_1001ACFE8;
      v18 = v98[0];
      if (v17 != -1)
        swift_once(&qword_1001ACFE8, sub_100077C9C);
      v19 = type metadata accessor for Logger(0);
      sub_100003A14(v19, (uint64_t)qword_1001B0B48);
      v20 = swift_retain_n(v1, 2);
      v21 = Logger.logObject.getter(v20);
      v22 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc(12, -1);
        v24 = (void *)swift_slowAlloc(32, -1);
        v98[0] = v24;
        *(_DWORD *)v23 = 136315138;
        v25 = URL.path.getter();
        v27 = (_TtC14softposreaderd12RemoteReader *)v26;
        v97 = (id)sub_1000056EC(v25, v26, (uint64_t *)v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98, v23 + 4, v23 + 12);
        swift_release_n(v1, 2);
        swift_bridgeObjectRelease(v27, v28, v29, v30, v31, v32, v33, v34);
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Removed temporary storage %s", v23, 0xCu);
        swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v24, -1, -1);
        v35 = v23;
LABEL_12:
        swift_slowDealloc(v35, -1, -1);

LABEL_19:
        v10 = v95;
        goto LABEL_20;
      }
    }
    else
    {
      v36 = v98[0];
      v37 = (void *)_convertNSErrorToError(_:)(v16);

      swift_willThrow(v38);
      v39 = swift_errorRetain();
      static CocoaError.fileNoSuchFile.getter(v39);
      v40 = sub_100005F1C(&qword_1001B0C70, (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError.Code, (uint64_t)&protocol conformance descriptor for CocoaError.Code);
      v41 = static _ErrorCodeProtocol.~= infix(_:_:)(v5, v37, v2, v40);
      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      if ((v41 & 1) == 0)
      {
        if (qword_1001ACFE8 != -1)
          swift_once(&qword_1001ACFE8, sub_100077C9C);
        v57 = type metadata accessor for Logger(0);
        sub_100003A14(v57, (uint64_t)qword_1001B0B48);
        swift_errorRetain();
        v58 = swift_errorRetain();
        v59 = Logger.logObject.getter(v58);
        v60 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v59, v60))
        {
          v61 = (uint8_t *)swift_slowAlloc(12, -1);
          v62 = (void *)swift_slowAlloc(32, -1);
          v97 = v37;
          v98[0] = v62;
          *(_DWORD *)v61 = 136315138;
          v94 = v61 + 4;
          swift_errorRetain();
          v63 = sub_100003A2C((uint64_t *)&unk_1001B1280);
          v64 = String.init<A>(describing:)(&v97, v63);
          v66 = (_TtC14softposreaderd12RemoteReader *)v65;
          v97 = (id)sub_1000056EC(v64, v65, (uint64_t *)v98);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98, v94, v61 + 12);
          swift_bridgeObjectRelease(v66, v67, v68, v69, v70, v71, v72, v73);
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v59, v60, "Failed to remove temporary storage %s", v61, 0xCu);
          swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v62, -1, -1);
          swift_slowDealloc(v61, -1, -1);

          swift_errorRelease();
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();

        }
        goto LABEL_19;
      }
      swift_errorRelease();
      if (qword_1001ACFE8 != -1)
        swift_once(&qword_1001ACFE8, sub_100077C9C);
      v42 = type metadata accessor for Logger(0);
      sub_100003A14(v42, (uint64_t)qword_1001B0B48);
      v43 = swift_retain_n(v1, 2);
      v21 = Logger.logObject.getter(v43);
      v44 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v21, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc(12, -1);
        v46 = (void *)swift_slowAlloc(32, -1);
        v98[0] = v46;
        *(_DWORD *)v45 = 136315138;
        v47 = URL.path.getter();
        v49 = (_TtC14softposreaderd12RemoteReader *)v48;
        v97 = (id)sub_1000056EC(v47, v48, (uint64_t *)v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98, v45 + 4, v45 + 12);
        swift_release_n(v1, 2);
        swift_bridgeObjectRelease(v49, v50, v51, v52, v53, v54, v55, v56);
        _os_log_impl((void *)&_mh_execute_header, v21, v44, "Temporary storage %s already removed", v45, 0xCu);
        swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v46, -1, -1);
        v35 = v45;
        goto LABEL_12;
      }
    }

    swift_release_n(v1, 2);
    goto LABEL_19;
  }
LABEL_20:
  v74 = v1 + OBJC_IVAR____TtC9SPREngine11Environment__itemReplacementDirectory;
  swift_beginAccess(v1 + OBJC_IVAR____TtC9SPREngine11Environment__itemReplacementDirectory, v98, 0, 0);
  sub_10005E0FC(v74, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_100077844((uint64_t)v8);
    v75 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v75(v1 + OBJC_IVAR____TtC9SPREngine11Environment_configuratorBackendURL, v9);
  }
  else
  {
    v76 = v96;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v96, v8, v9);
    v77 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
    v78 = v10;
    URL._bridgeToObjectiveC()(v79);
    v81 = v80;
    v97 = 0;
    v82 = objc_msgSend(v77, "removeItemAtURL:error:", v80, &v97);

    v83 = v97;
    if (v82)
    {
      v75 = *(void (**)(uint64_t, uint64_t))(v78 + 8);
      v84 = v97;
    }
    else
    {
      v85 = v97;
      _convertNSErrorToError(_:)(v83);

      swift_willThrow(v86);
      if (qword_1001ACFE8 != -1)
        swift_once(&qword_1001ACFE8, sub_100077C9C);
      v87 = type metadata accessor for Logger(0);
      v88 = sub_100003A14(v87, (uint64_t)qword_1001B0B48);
      v89 = Logger.logObject.getter(v88);
      v90 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v89, v90))
      {
        v91 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v91 = 0;
        _os_log_impl((void *)&_mh_execute_header, v89, v90, "cannot delete itemReplacementDirectory", v91, 2u);
        swift_slowDealloc(v91, -1, -1);
      }
      swift_errorRelease();

      v75 = *(void (**)(uint64_t, uint64_t))(v78 + 8);
    }
    v75((uint64_t)v76, v9);
    v75(v1 + OBJC_IVAR____TtC9SPREngine11Environment_configuratorBackendURL, v9);
  }
  v75(v1 + OBJC_IVAR____TtC9SPREngine11Environment_mpocMonitoringBackendURL, v9);
  v75(v1 + OBJC_IVAR____TtC9SPREngine11Environment_storageURL, v9);
  sub_10000CA58(*(_QWORD *)(v1 + OBJC_IVAR____TtC9SPREngine11Environment_storageSetting), *(_QWORD *)(v1 + OBJC_IVAR____TtC9SPREngine11Environment_storageSetting + 8), *(_BYTE *)(v1 + OBJC_IVAR____TtC9SPREngine11Environment_storageSetting + 16));
  sub_100077844(v74);
  return v1;
}

uint64_t sub_10007A99C()
{
  uint64_t v0;

  sub_10007A108();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10007A9C0()
{
  return type metadata accessor for Environment(0);
}

uint64_t type metadata accessor for Environment(uint64_t a1)
{
  uint64_t result;

  result = qword_1001B0B90;
  if (!qword_1001B0B90)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Environment);
  return result;
}

void sub_10007AA04(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[8];

  v2 = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = v6[0];
    v6[2] = v6[0];
    v6[3] = &unk_10015FEF0;
    v6[4] = &unk_10015FF08;
    v6[5] = &unk_10015FEF0;
    v6[6] = &unk_10015FEF0;
    sub_10007AAA8(319);
    if (v5 <= 0x3F)
    {
      v6[7] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 8, v6, a1 + 80);
    }
  }
}

void sub_10007AAA8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001B0BA0)
  {
    v2 = type metadata accessor for URL(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001B0BA0);
  }
}

char *sub_10007AAFC@<X0>(uint64_t a1@<X0>, char **a2@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v5;
  char *result;

  v5 = swift_retain(a1);
  result = sub_10007C990(v5);
  if (!v3)
  {
    a2[3] = v2;
    a2[4] = (char *)&off_10019CC18;
    *a2 = result;
  }
  return result;
}

uint64_t sub_10007AB34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003A2C(&qword_1001B0438);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007AB7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  BOOL v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  int *v54;
  uint64_t v55;
  char v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  void *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, char *, uint64_t);
  void (*v67)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  char v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t object;
  uint64_t v79;
  int v80;
  char *v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint8_t *v85;
  void *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char v90;
  void (*v91)(uint64_t, uint64_t);
  int *v92;
  id v93;
  id v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  void (*v107)(char *, uint64_t);
  char *v108;
  id v109;
  NSURL *v110;
  void *v111;
  void *v112;
  id v113;
  NSObject *v114;
  os_log_type_t v115;
  uint8_t *v116;
  void *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  NSObject *v127;
  os_log_type_t v128;
  uint8_t *v129;
  void *v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  void (*v136)(uint64_t, uint64_t);
  char *v137;
  uint64_t v138;
  void (*v139)(uint64_t, uint64_t);
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t (*v148)(char *, uint64_t);
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  NSObject *v152;
  os_log_type_t v153;
  uint8_t *v154;
  void (*v155)(uint64_t, uint64_t);
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  Swift::String v178;
  char *v179;
  uint64_t v180;
  NSObject *v181;
  os_log_type_t v182;
  BOOL v183;
  char *v184;
  uint8_t *v185;
  void *v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  id v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  char *v209;
  void (*v210)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int *countAndFlagsBits;
  char *v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  id v222[3];
  uint64_t v223;
  uint64_t v224;
  _QWORD v225[5];
  _QWORD v226[5];

  v199 = type metadata accessor for SHA256Digest(0);
  v198 = *(_QWORD *)(v199 - 8);
  __chkstk_darwin(v199);
  v197 = (char *)&v196 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v207 = type metadata accessor for URL.DirectoryHint(0);
  v206 = *(_QWORD *)(v207 - 8);
  __chkstk_darwin(v207);
  v205 = (char *)&v196 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v203 = type metadata accessor for String.Encoding(0);
  v200 = *(_QWORD *)(v203 - 8);
  __chkstk_darwin(v203);
  v202 = (char *)&v196 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v201 = type metadata accessor for SHA256(0);
  v196 = *(_QWORD *)(v201 - 8);
  __chkstk_darwin(v201);
  v208 = (char *)&v196 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for BackendSetting(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v196 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v204 = (char *)&v196 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v209 = (char *)&v196 - v20;
  v21 = __chkstk_darwin(v19);
  v218 = (char *)&v196 - v22;
  __chkstk_darwin(v21);
  v24 = (char *)&v196 - v23;
  countAndFlagsBits = (int *)type metadata accessor for Settings(0);
  v25 = __chkstk_darwin(countAndFlagsBits);
  v211 = (char *)&v196 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v29 = (char *)&v196 - v28;
  __chkstk_darwin(v27);
  v31 = (char *)&v196 - v30;
  v226[3] = type metadata accessor for SystemInfo();
  v226[4] = &off_10019F8A0;
  v226[0] = a2;
  v225[3] = type metadata accessor for SecureElement();
  v225[4] = &off_1001A11A8;
  v225[0] = a3;
  v214 = a4;
  v213 = v16;
  v210 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
  v210(a4 + OBJC_IVAR____TtC9SPREngine11Environment__itemReplacementDirectory, 1, 1, v15);
  if (qword_1001ACFE8 != -1)
    swift_once(&qword_1001ACFE8, sub_100077C9C);
  v32 = type metadata accessor for Logger(0);
  v33 = sub_100003A14(v32, (uint64_t)qword_1001B0B48);
  sub_100070ECC(a1, (uint64_t)v31, type metadata accessor for Settings);
  v34 = sub_100070ECC(a1, (uint64_t)v29, type metadata accessor for Settings);
  v217 = v33;
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.default.getter();
  v37 = os_log_type_enabled(v35, v36);
  v216 = v24;
  v219 = a1;
  v212 = v15;
  if (v37)
  {
    v38 = swift_slowAlloc(22, -1);
    v39 = (void *)swift_slowAlloc(64, -1);
    v222[0] = v39;
    *(_DWORD *)v38 = 136315394;
    sub_100116B10();
    v41 = v40;
    v220 = sub_1000056EC(v42, v40, (uint64_t *)v222);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, &v221, v38 + 4, v38 + 12);
    swift_bridgeObjectRelease(v41);
    sub_100070F10((uint64_t)v31, type metadata accessor for Settings);
    *(_WORD *)(v38 + 12) = 2080;
    sub_100116B10();
    v44 = v43;
    v220 = sub_1000056EC(v45, v43, (uint64_t *)v222);
    v24 = v216;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, &v221, v38 + 14, v38 + 22);
    swift_bridgeObjectRelease(v44);
    a1 = v219;
    sub_100070F10((uint64_t)v29, type metadata accessor for Settings);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Environment.init() configuratorBackend: %s, mpocMonitoringBackend: %s", (uint8_t *)v38, 0x16u);
    swift_arrayDestroy(v39, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v38, -1, -1);
  }
  else
  {
    sub_100070F10((uint64_t)v31, type metadata accessor for Settings);
    sub_100070F10((uint64_t)v29, type metadata accessor for Settings);
  }

  sub_1000787F0((uint64_t)v24, a1);
  v47 = v46;
  v48 = Logger.logObject.getter(v46);
  v49 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v48, v49))
  {
    v50 = (uint8_t *)swift_slowAlloc(12, -1);
    v51 = (void *)swift_slowAlloc(32, -1);
    v222[0] = v51;
    *(_DWORD *)v50 = 136315138;
    if ((v47 & 1) != 0)
      v52 = 0;
    else
      v52 = 544501614;
    if ((v47 & 1) != 0)
      v53 = 0xE000000000000000;
    else
      v53 = 0xE400000000000000;
    v220 = sub_1000056EC(v52, v53, (uint64_t *)v222);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, &v221, v50 + 4, v50 + 12);
    swift_bridgeObjectRelease(v53);
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "configurator backend is %sproduction env", v50, 0xCu);
    swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v50, -1, -1);
  }

  v54 = countAndFlagsBits;
  sub_1000787F0((uint64_t)v218, a1 + countAndFlagsBits[5]);
  v56 = v55;
  v57 = Logger.logObject.getter(v55);
  v58 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v57, v58))
  {
    v59 = (uint8_t *)swift_slowAlloc(12, -1);
    v60 = (void *)swift_slowAlloc(32, -1);
    v222[0] = v60;
    *(_DWORD *)v59 = 136315138;
    if ((v56 & 1) != 0)
      v61 = 0;
    else
      v61 = 544501614;
    if ((v56 & 1) != 0)
      v62 = 0xE000000000000000;
    else
      v62 = 0xE400000000000000;
    v220 = sub_1000056EC(v61, v62, (uint64_t *)v222);
    v54 = countAndFlagsBits;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, &v221, v59 + 4, v59 + 12);
    swift_bridgeObjectRelease(v62);
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "A&M backend is %sproduction env", v59, 0xCu);
    swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v60, -1, -1);
    swift_slowDealloc(v59, -1, -1);
  }

  v63 = v214;
  v64 = v212;
  v65 = v213;
  v66 = *(void (**)(uint64_t, char *, uint64_t))(v213 + 16);
  v66(v214 + OBJC_IVAR____TtC9SPREngine11Environment_configuratorBackendURL, v216, v212);
  v66(v63 + OBJC_IVAR____TtC9SPREngine11Environment_mpocMonitoringBackendURL, v218, v64);
  *(_BYTE *)(v63 + OBJC_IVAR____TtC9SPREngine11Environment_isProductionEnvironment) = v47 & v56 & 1;
  v67 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v210;
  v210((uint64_t)v14, 4, 11, v64);
  v68 = v219;
  sub_1001178E4(v219, (uint64_t)v14);
  v70 = v69;
  sub_100070F10((uint64_t)v14, type metadata accessor for BackendSetting);
  v71 = v68;
  v72 = (uint64_t)v211;
  sub_100070ECC(v71, (uint64_t)v211, type metadata accessor for Settings);
  if ((v70 & 1) != 0)
  {
    v73 = v72 + v54[5];
    v67(v14, 4, 11, v64);
    sub_1001178E4(v73, (uint64_t)v14);
    v75 = v74;
    sub_100070F10((uint64_t)v14, type metadata accessor for BackendSetting);
  }
  else
  {
    v75 = 0;
  }
  v76 = sub_100070F10(v72, type metadata accessor for Settings);
  *(_BYTE *)(v63 + OBJC_IVAR____TtC9SPREngine11Environment_isCertEnvironment) = v75 & 1;
  v77 = v219 + v54[6];
  v79 = *(_QWORD *)v77;
  object = *(_QWORD *)(v77 + 8);
  v80 = *(unsigned __int8 *)(v77 + 16);
  if (v80)
  {
    if (v80 == 1)
    {
      swift_bridgeObjectRetain_n(object, 2);
      v81 = v209;
      sub_100078D94((void *)v79, object, (uint64_t)v209);
      countAndFlagsBits = (int *)v79;
      sub_10000CA58(v79, object, 1u);
      (*(void (**)(uint64_t, char *, uint64_t))(v65 + 32))(v63 + OBJC_IVAR____TtC9SPREngine11Environment_storageURL, v81, v64);
      *(_BYTE *)(v63 + OBJC_IVAR____TtC9SPREngine11Environment_isStorageTemporary) = 0;
      v82 = swift_retain_n(v63, 2);
      v83 = Logger.logObject.getter(v82);
      v84 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v83, v84))
      {
        v85 = (uint8_t *)swift_slowAlloc(12, -1);
        v86 = (void *)swift_slowAlloc(32, -1);
        v222[0] = v86;
        *(_DWORD *)v85 = 136315138;
        v211 = (char *)object;
        v87 = URL.path.getter();
        v89 = v88;
        v220 = sub_1000056EC(v87, v88, (uint64_t *)v222);
        v63 = v214;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, &v221, v85 + 4, v85 + 12);
        swift_release_n(v63, 2);
        swift_bridgeObjectRelease(v89);
        _os_log_impl((void *)&_mh_execute_header, v83, v84, "Using permanent storage at: %s", v85, 0xCu);
        v90 = 1;
        swift_arrayDestroy(v86, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v86, -1, -1);
        swift_slowDealloc(v85, -1, -1);

        sub_100005D3C(v225);
        sub_100005D3C(v226);
        sub_100070F10(v219, type metadata accessor for Settings);
        v91 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
        v91((uint64_t)v218, v64);
        object = (uint64_t)v211;
        v91((uint64_t)v216, v64);
LABEL_59:
        v79 = (uint64_t)countAndFlagsBits;
        goto LABEL_60;
      }
      swift_release_n(v63, 2);

      sub_100005D3C(v225);
      sub_100005D3C(v226);
      sub_100070F10(v219, type metadata accessor for Settings);
      v139 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
      v139((uint64_t)v218, v64);
      v140 = v216;
      goto LABEL_57;
    }
    if (!(v79 | object))
    {
      v141 = SHA256.init()(v76);
      v142 = URL.absoluteString.getter(v141);
      v144 = v143;
      v145 = v202;
      static String.Encoding.utf8.getter(v142);
      String.data(using:allowLossyConversion:)(v145, 0, v142, v144);
      v147 = v146;
      swift_bridgeObjectRelease(v144);
      v148 = *(uint64_t (**)(char *, uint64_t))(v200 + 8);
      v149 = v148(v145, v203);
      if (v147 >> 60 != 15)
        __asm { BR              X10 }
      v156 = URL.absoluteString.getter(v149);
      v158 = v157;
      v159 = v202;
      static String.Encoding.utf8.getter(v156);
      String.data(using:allowLossyConversion:)(v159, 0, v156, v158);
      v161 = v160;
      swift_bridgeObjectRelease(v158);
      v162 = v148(v159, v203);
      if (v161 >> 60 != 15)
        __asm { BR              X10 }
      v163 = URL.absoluteString.getter(v162);
      v165 = v164;
      v166 = v202;
      static String.Encoding.utf8.getter(v163);
      String.data(using:allowLossyConversion:)(v166, 0, v163, v165);
      v168 = v167;
      swift_bridgeObjectRelease(v165);
      v169 = v148(v166, v203);
      if (v168 >> 60 != 15)
        __asm { BR              X10 }
      v170 = v197;
      v171 = v208;
      SHA256.finalize()(v169);
      v172 = v199;
      v223 = v199;
      v173 = sub_100005F1C(&qword_1001B0C78, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256Digest, (uint64_t)&protocol conformance descriptor for SHA256Digest);
      v224 = v173;
      v174 = sub_1000778C8(v222);
      v175 = v198;
      (*(void (**)(_QWORD *, char *, uint64_t))(v198 + 16))(v174, v170, v172);
      sub_100005EF8(v222, v223);
      dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)(&v220, sub_10010C830, 0, &type metadata for Data._Representation, v172, v173);
      (*(void (**)(char *, uint64_t))(v175 + 8))(v170, v172);
      v176 = v220;
      v177 = v221;
      sub_100005D3C(v222);
      v178 = Data.hexString()();
      sub_100005DE0(v176, v177);
      v179 = v209;
      countAndFlagsBits = (int *)v178._countAndFlagsBits;
      object = (uint64_t)v178._object;
      sub_100078D94((void *)v178._countAndFlagsBits, (uint64_t)v178._object, (uint64_t)v209);
      (*(void (**)(uint64_t, char *, uint64_t))(v65 + 32))(v63 + OBJC_IVAR____TtC9SPREngine11Environment_storageURL, v179, v64);
      *(_BYTE *)(v63 + OBJC_IVAR____TtC9SPREngine11Environment_isStorageTemporary) = 0;
      v180 = swift_retain_n(v63, 2);
      v181 = Logger.logObject.getter(v180);
      v182 = static os_log_type_t.info.getter();
      v183 = os_log_type_enabled(v181, v182);
      v184 = v216;
      if (v183)
      {
        v185 = (uint8_t *)swift_slowAlloc(12, -1);
        v186 = (void *)swift_slowAlloc(32, -1);
        v222[0] = v186;
        *(_DWORD *)v185 = 136315138;
        v211 = (char *)v178._object;
        v187 = URL.path.getter();
        v189 = v188;
        v220 = sub_1000056EC(v187, v188, (uint64_t *)v222);
        v63 = v214;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, &v221, v185 + 4, v185 + 12);
        swift_release_n(v63, 2);
        swift_bridgeObjectRelease(v189);
        _os_log_impl((void *)&_mh_execute_header, v181, v182, "Using permanent storage at: %s", v185, 0xCu);
        swift_arrayDestroy(v186, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v186, -1, -1);
        swift_slowDealloc(v185, -1, -1);

        sub_100005D3C(v225);
        sub_100005D3C(v226);
        sub_100070F10(v219, type metadata accessor for Settings);
        (*(void (**)(char *, uint64_t))(v196 + 8))(v171, v201);
        v139 = *(void (**)(uint64_t, uint64_t))(v213 + 8);
        v139((uint64_t)v218, v64);
        v140 = v216;
        v190 = v64;
        object = (uint64_t)v211;
LABEL_58:
        v139((uint64_t)v140, v190);
        v90 = 1;
        goto LABEL_59;
      }
      swift_release_n(v63, 2);

      sub_100005D3C(v225);
      sub_100005D3C(v226);
      sub_100070F10(v219, type metadata accessor for Settings);
      (*(void (**)(char *, uint64_t))(v196 + 8))(v171, v201);
      v139 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
      v139((uint64_t)v218, v64);
      v140 = v184;
LABEL_57:
      v190 = v64;
      goto LABEL_58;
    }
    if (v79 ^ 1 | object)
    {
      if (qword_1001AD040 != -1)
        swift_once(&qword_1001AD040, sub_100077E90);
      v150 = sub_100003A14(v64, (uint64_t)qword_1001B4CC8);
      v151 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v66)(v63 + OBJC_IVAR____TtC9SPREngine11Environment_storageURL, v150, v64);
      *(_BYTE *)(v63 + OBJC_IVAR____TtC9SPREngine11Environment_isStorageTemporary) = 0;
      v152 = Logger.logObject.getter(v151);
      v153 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v152, v153))
      {
        v154 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v154 = 0;
        _os_log_impl((void *)&_mh_execute_header, v152, v153, "Using volatile storage", v154, 2u);
        swift_slowDealloc(v154, -1, -1);
      }

      sub_100005D3C(v225);
      sub_100005D3C(v226);
      sub_100070F10(v219, type metadata accessor for Settings);
      v155 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
      v155((uint64_t)v218, v64);
      v155((uint64_t)v216, v64);
      v90 = 2;
    }
    else
    {
      v123 = v209;
      sub_100079D48(v209);
      v124 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v65 + 32))(v63 + OBJC_IVAR____TtC9SPREngine11Environment_storageURL, v123, v64);
      *(_BYTE *)(v63 + OBJC_IVAR____TtC9SPREngine11Environment_isStorageTemporary) = 1;
      v79 = URL.lastPathComponent.getter(v124);
      object = v125;
      v126 = swift_retain_n(v63, 2);
      v127 = Logger.logObject.getter(v126);
      v128 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v127, v128))
      {
        v129 = (uint8_t *)swift_slowAlloc(12, -1);
        v130 = (void *)swift_slowAlloc(32, -1);
        countAndFlagsBits = (int *)v79;
        v131 = v65;
        v132 = v130;
        v222[0] = v130;
        *(_DWORD *)v129 = 136315138;
        v211 = (char *)object;
        v133 = URL.path.getter();
        v135 = v134;
        v220 = sub_1000056EC(v133, v134, (uint64_t *)v222);
        v63 = v214;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, &v221, v129 + 4, v129 + 12);
        swift_release_n(v63, 2);
        swift_bridgeObjectRelease(v135);
        _os_log_impl((void *)&_mh_execute_header, v127, v128, "Using temporary storage at: %s", v129, 0xCu);
        swift_arrayDestroy(v132, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v132, -1, -1);
        swift_slowDealloc(v129, -1, -1);

        sub_100005D3C(v225);
        sub_100005D3C(v226);
        sub_100070F10(v219, type metadata accessor for Settings);
        v136 = *(void (**)(uint64_t, uint64_t))(v131 + 8);
        v79 = (uint64_t)countAndFlagsBits;
        v136((uint64_t)v218, v64);
        v137 = v216;
        v138 = v64;
        object = (uint64_t)v211;
      }
      else
      {
        swift_release_n(v63, 2);

        sub_100005D3C(v225);
        sub_100005D3C(v226);
        sub_100070F10(v219, type metadata accessor for Settings);
        v136 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
        v136((uint64_t)v218, v64);
        v137 = v216;
        v138 = v64;
      }
      v136((uint64_t)v137, v138);
      v90 = 0;
    }
  }
  else
  {
    v92 = (int *)objc_opt_self(NSFileManager);
    countAndFlagsBits = v92;
    swift_bridgeObjectRetain_n(object, 2);
    v93 = objc_msgSend(v92, "defaultManager");
    v94 = objc_msgSend(v93, "temporaryDirectory");

    v95 = v79;
    v96 = v204;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v94);

    v222[0] = (id)v95;
    v222[1] = (id)object;
    v97 = v65;
    v98 = v206;
    v99 = v64;
    v100 = v205;
    v101 = v207;
    (*(void (**)(char *, _QWORD, uint64_t))(v206 + 104))(v205, enum case for URL.DirectoryHint.isDirectory(_:), v207);
    v102 = sub_1000095D0();
    v103 = v209;
    URL.appending<A>(component:directoryHint:)(v222, v100, &type metadata for String, v102);
    v104 = v100;
    v105 = v99;
    v63 = v214;
    (*(void (**)(char *, uint64_t))(v98 + 8))(v104, v101);
    v106 = (char *)object;
    v107 = *(void (**)(char *, uint64_t))(v97 + 8);
    v108 = v96;
    v79 = v95;
    v107(v108, v105);
    v211 = v106;
    sub_10000CA58(v95, (uint64_t)v106, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v97 + 32))(v63 + OBJC_IVAR____TtC9SPREngine11Environment_storageURL, v103, v105);
    *(_BYTE *)(v63 + OBJC_IVAR____TtC9SPREngine11Environment_isStorageTemporary) = 1;
    v109 = objc_msgSend(countAndFlagsBits, "defaultManager");
    URL._bridgeToObjectiveC()(v110);
    v112 = v111;
    v222[0] = 0;
    LOBYTE(v95) = objc_msgSend(v109, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v111, 1, 0, v222);

    v113 = v222[0];
    if ((v95 & 1) == 0)
    {
      v193 = v222[0];
      sub_10000CA58(v79, (uint64_t)v211, 0);
      v194 = _convertNSErrorToError(_:)(v113);

      swift_willThrow(v195);
      swift_unexpectedError(v194, "SPREngine/Environment.swift", 27, 1, 147);
      __break(1u);
      JUMPOUT(0x10007C810);
    }
    swift_retain_n(v63, 2);
    v114 = Logger.logObject.getter(v113);
    v115 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v114, v115))
    {
      v116 = (uint8_t *)swift_slowAlloc(12, -1);
      v117 = (void *)swift_slowAlloc(32, -1);
      v222[0] = v117;
      *(_DWORD *)v116 = 136315138;
      countAndFlagsBits = (int *)v79;
      v118 = URL.path.getter();
      v120 = v119;
      v220 = sub_1000056EC(v118, v119, (uint64_t *)v222);
      v63 = v214;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, &v221, v116 + 4, v116 + 12);
      swift_release_n(v63, 2);
      swift_bridgeObjectRelease(v120);
      _os_log_impl((void *)&_mh_execute_header, v114, v115, "Using temporary storage at: %s", v116, 0xCu);
      swift_arrayDestroy(v117, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v117, -1, -1);
      swift_slowDealloc(v116, -1, -1);

      sub_100005D3C(v225);
      sub_100005D3C(v226);
      sub_100070F10(v219, type metadata accessor for Settings);
      v107(v218, v105);
      v121 = v216;
      v122 = v105;
      v79 = (uint64_t)countAndFlagsBits;
    }
    else
    {
      swift_release_n(v63, 2);

      sub_100005D3C(v225);
      sub_100005D3C(v226);
      sub_100070F10(v219, type metadata accessor for Settings);
      v107(v218, v105);
      v121 = v216;
      v122 = v105;
    }
    v107(v121, v122);
    v90 = 0;
    object = (uint64_t)v211;
  }
LABEL_60:
  v191 = v63 + OBJC_IVAR____TtC9SPREngine11Environment_storageSetting;
  *(_QWORD *)v191 = v79;
  *(_QWORD *)(v191 + 8) = object;
  *(_BYTE *)(v191 + 16) = v90;
  return v63;
}

uint64_t sub_10007C840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[3];
  uint64_t v19;
  _UNKNOWN **v20;
  _QWORD v21[3];
  uint64_t v22;
  _UNKNOWN **v23;

  v22 = type metadata accessor for SystemInfo();
  v23 = &off_10019F8A0;
  v21[0] = a2;
  v19 = type metadata accessor for SecureElement();
  v20 = &off_1001A11A8;
  v18[0] = a3;
  v6 = type metadata accessor for Environment(0);
  v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v8 = sub_10001A64C((uint64_t)v21, v22);
  __chkstk_darwin(v8);
  v10 = (_QWORD *)((char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v11 + 16))(v10);
  v12 = sub_10001A64C((uint64_t)v18, v19);
  __chkstk_darwin(v12);
  v14 = (_QWORD *)((char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v15 + 16))(v14);
  v16 = sub_10007AB7C(a1, *v10, *v14, v7);
  sub_100005D3C(v18);
  sub_100005D3C(v21);
  return v16;
}

char *sub_10007C990(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD v16[5];
  _QWORD v17[5];

  v3 = type metadata accessor for Settings(0);
  __chkstk_darwin(v3);
  v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100070ECC(a1 + OBJC_IVAR____TtC9SPREngine5Depot_settings, (uint64_t)v5, v6);
  sub_1000DF314();
  if (v1)
  {
    swift_release(a1);
    sub_100070F10((uint64_t)v5, type metadata accessor for Settings);
  }
  else
  {
    sub_1000DDE7C();
    v8 = sub_10001A64C((uint64_t)v17, v17[3]);
    __chkstk_darwin(v8);
    v10 = (_QWORD *)((char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v11 + 16))(v10);
    v12 = sub_10001A64C((uint64_t)v16, v16[3]);
    __chkstk_darwin(v12);
    v14 = (_QWORD *)((char *)v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v15 + 16))(v14);
    v5 = (char *)sub_10007C840((uint64_t)v5, *v10, *v14);
    sub_100005D3C(v16);
    sub_100005D3C(v17);
    swift_release(a1);
  }
  return v5;
}

uint64_t sub_10007CB60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B0C88);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B0C88);
  if (qword_1001AD158 != -1)
    swift_once(&qword_1001AD158, sub_1000CC540);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4DF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10007CBF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::String v3;
  Swift::String v4;
  void *object;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  void *v9;
  uint64_t v11;

  if (a3)
  {
    v11 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v3._countAndFlagsBits = 46;
    v3._object = (void *)0xE100000000000000;
    String.append(_:)(v3);
    v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v4._object;
    String.append(_:)(v4);
    swift_bridgeObjectRelease(object);
    v6._countAndFlagsBits = 46;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
  }
  else
  {
    if (!a2)
      return dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v11 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v7._countAndFlagsBits = 46;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
  }
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v9 = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v9);
  return v11;
}

void sub_10007CD38()
{
  void *v0;
  id v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v0 = (void *)objc_opt_self(NSProcessInfo);
  v1 = objc_msgSend(v0, "processInfo");
  objc_msgSend(v1, "operatingSystemVersion");
  v2 = v7;

  v3 = objc_msgSend(v0, "processInfo");
  objc_msgSend(v3, "operatingSystemVersion");
  v4 = v8;

  v5 = objc_msgSend(v0, "processInfo");
  objc_msgSend(v5, "operatingSystemVersion");
  v6 = v9;

  *(_QWORD *)&xmmword_1001B4D50 = v2;
  *((_QWORD *)&xmmword_1001B4D50 + 1) = v4;
  qword_1001B4D60 = v6;
}

uint64_t sub_10007CE10(uint64_t a1, char a2, uint64_t (*a3)(_QWORD *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t result;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;
  _QWORD v57[4];

  v57[3] = a4;
  if (a1 < 0)
    goto LABEL_44;
  v10 = swift_allocObject(&unk_10019CC78, 24, 7);
  *(_QWORD *)(v10 + 16) = _swiftEmptyArrayStorage;
  v54 = swift_allocObject(&unk_10019CCA0, 24, 7);
  *(_QWORD *)(v54 + 16) = 15;
  v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (v12 = HIBYTE(a6) & 0xF) : (v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0)
      v11 = a5 & 0xFFFFFFFFFFFFLL;
    v33 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
      v33 = 11;
    sub_10007D748(v33 | (v11 << 16), v54, a2 & 1, v10, a5, a6);
    swift_bridgeObjectRelease(a6);
    v14 = *(_QWORD **)(v10 + 16);
    swift_bridgeObjectRetain(v14);
    swift_release(v10);
    v34 = v54;
LABEL_41:
    swift_release(v34);
    return (uint64_t)v14;
  }
  v49 = a1;
  v50 = v10;
  v13 = 7;
  if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
    v13 = 11;
  v48 = v13 | (v12 << 16);
  v55 = 4 * v12;
  v14 = _swiftEmptyArrayStorage;
  v15 = 15;
  v16 = 15;
  v17 = 15;
  while (1)
  {
    v18 = String.subscript.getter(v15, a5, a6);
    v20 = v19;
    v57[0] = v18;
    v57[1] = v19;
    v21 = a3(v57);
    if (v6)
    {
      swift_release(v50);
      swift_release(v54);
      swift_bridgeObjectRelease(v20);
      swift_bridgeObjectRelease(a6);
      return (uint64_t)v14;
    }
    v22 = v21;
    swift_bridgeObjectRelease(v20);
    if ((v22 & 1) != 0)
      break;
    v15 = String.index(after:)(v15, a5, a6);
LABEL_11:
    if (v55 == v15 >> 14)
      goto LABEL_31;
  }
  if (v16 >> 14 == v15 >> 14 && (a2 & 1) != 0)
  {
    v15 = String.index(after:)(v15, a5, a6);
    *(_QWORD *)(v54 + 16) = v15;
    v16 = v15;
    v17 = v15;
    goto LABEL_11;
  }
  if (v15 >> 14 < v16 >> 14)
    goto LABEL_43;
  v23 = String.subscript.getter(v16, v15, a5, a6);
  v51 = v24;
  v52 = v23;
  v26 = v25;
  v28 = v27;
  if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
    v14 = sub_100091164(0, v14[2] + 1, 1, v14);
  v30 = v14[2];
  v29 = v14[3];
  if (v30 >= v29 >> 1)
    v14 = sub_100091164((_QWORD *)(v29 > 1), v30 + 1, 1, v14);
  v14[2] = v30 + 1;
  v31 = &v14[4 * v30];
  v31[4] = v52;
  v31[5] = v26;
  v31[6] = v28;
  v31[7] = v51;
  *(_QWORD *)(v50 + 16) = v14;
  v32 = String.index(after:)(v15, a5, a6);
  v15 = v32;
  *(_QWORD *)(v54 + 16) = v32;
  if (v14[2] != v49)
  {
    v16 = v32;
    v17 = v32;
    goto LABEL_11;
  }
  v17 = v32;
  v16 = v32;
LABEL_31:
  if (v55 == v16 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease(a6);
    v35 = v50;
LABEL_40:
    swift_bridgeObjectRetain(v14);
    swift_release(v35);
    v34 = v54;
    goto LABEL_41;
  }
  if (v55 >= v17 >> 14)
  {
    v36 = String.subscript.getter(v17, v48, a5, a6);
    v38 = v37;
    v40 = v39;
    v42 = v41;
    swift_bridgeObjectRelease(a6);
    if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
      v14 = sub_100091164(0, v14[2] + 1, 1, v14);
    v44 = v14[2];
    v43 = v14[3];
    if (v44 >= v43 >> 1)
      v14 = sub_100091164((_QWORD *)(v43 > 1), v44 + 1, 1, v14);
    v14[2] = v44 + 1;
    v45 = &v14[4 * v44];
    v45[4] = v36;
    v45[5] = v38;
    v45[6] = v40;
    v45[7] = v42;
    v35 = v50;
    *(_QWORD *)(v50 + 16) = v14;
    goto LABEL_40;
  }
LABEL_43:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 754, 0);
  __break(1u);
LABEL_44:
  LOBYTE(v47) = 2;
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Must take zero or more splits", 29, 2, "Swift/Collection.swift", 22, v47, 1552, 0);
  __break(1u);
  return result;
}

uint64_t sub_10007D2AC(uint64_t a1, char a2, uint64_t (*a3)(_QWORD *), uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD v56[4];

  v56[3] = a4;
  if (a1 < 0)
    goto LABEL_35;
  v14 = swift_allocObject(&unk_10019CCC8, 24, 7);
  *(_QWORD *)(v14 + 16) = _swiftEmptyArrayStorage;
  v53 = swift_allocObject(&unk_10019CCA0, 24, 7);
  *(_QWORD *)(v53 + 16) = a5;
  if (!a1 || (v54 = a6 >> 14, a6 >> 14 == a5 >> 14))
  {
    sub_10007D8A0(a6, v53, a2 & 1, v14);
    swift_bridgeObjectRelease(a8);
    a6 = *(_QWORD *)(v14 + 16);
    swift_bridgeObjectRetain(a6);
    swift_release(v14);
    v15 = v53;
LABEL_5:
    swift_release(v15);
    return a6;
  }
  v44 = a1;
  v45 = v14;
  v52 = _swiftEmptyArrayStorage;
  v17 = a5;
  v18 = a5;
  v49 = a5;
  while (1)
  {
    v19 = Substring.subscript.getter(v17, a5, a6, a7, a8);
    v21 = v20;
    v56[0] = v19;
    v56[1] = v20;
    v22 = a3(v56);
    if (v8)
    {
      swift_release(v45);
      swift_release(v53);
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(a8);
      return a6;
    }
    v23 = v22;
    swift_bridgeObjectRelease(v21);
    if ((v23 & 1) != 0)
      break;
    v17 = Substring.index(after:)(v17, a5, a6, a7, a8);
LABEL_9:
    if (v54 == v17 >> 14)
      goto LABEL_24;
  }
  if (v18 >> 14 == v17 >> 14 && (a2 & 1) != 0)
  {
    v17 = Substring.index(after:)(v17, a5, a6, a7, a8);
    *(_QWORD *)(v53 + 16) = v17;
    v18 = v17;
    v49 = v17;
    goto LABEL_9;
  }
  if (v17 >> 14 < v18 >> 14)
    goto LABEL_34;
  v24 = Substring.subscript.getter(v18, v17, a5, a6, a7, a8);
  v48 = v25;
  v50 = v24;
  v46 = v27;
  v47 = v26;
  if ((swift_isUniquelyReferenced_nonNull_native(v52) & 1) == 0)
    v52 = sub_100091164(0, v52[2] + 1, 1, v52);
  v29 = v52[2];
  v28 = v52[3];
  if (v29 >= v28 >> 1)
    v52 = sub_100091164((_QWORD *)(v28 > 1), v29 + 1, 1, v52);
  v52[2] = v29 + 1;
  v30 = &v52[4 * v29];
  v30[4] = v50;
  v30[5] = v48;
  v30[6] = v47;
  v30[7] = v46;
  *(_QWORD *)(v45 + 16) = v52;
  v31 = Substring.index(after:)(v17, a5, a6, a7, a8);
  v17 = v31;
  *(_QWORD *)(v53 + 16) = v31;
  if (v52[2] != v44)
  {
    v18 = v31;
    v49 = v31;
    goto LABEL_9;
  }
  v49 = v31;
  v18 = v31;
LABEL_24:
  if (v54 == v18 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease(a8);
    v32 = v45;
    a6 = (unint64_t)v52;
LABEL_33:
    swift_bridgeObjectRetain(a6);
    swift_release(v32);
    v15 = v53;
    goto LABEL_5;
  }
  if (v54 >= v49 >> 14)
  {
    v33 = Substring.subscript.getter(v49, a6, a5, a6, a7, a8);
    v35 = v34;
    v37 = v36;
    v39 = v38;
    swift_bridgeObjectRelease(a8);
    a6 = (unint64_t)v52;
    if ((swift_isUniquelyReferenced_nonNull_native(v52) & 1) == 0)
      a6 = (unint64_t)sub_100091164(0, v52[2] + 1, 1, v52);
    v41 = *(_QWORD *)(a6 + 16);
    v40 = *(_QWORD *)(a6 + 24);
    if (v41 >= v40 >> 1)
      a6 = (unint64_t)sub_100091164((_QWORD *)(v40 > 1), v41 + 1, 1, (_QWORD *)a6);
    *(_QWORD *)(a6 + 16) = v41 + 1;
    v42 = (_QWORD *)(a6 + 32 * v41);
    v42[4] = v33;
    v42[5] = v35;
    v42[6] = v37;
    v42[7] = v39;
    v32 = v45;
    *(_QWORD *)(v45 + 16) = a6;
    goto LABEL_33;
  }
LABEL_34:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 754, 0);
  __break(1u);
LABEL_35:
  LOBYTE(v43) = 2;
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Must take zero or more splits", 29, 2, "Swift/Collection.swift", 22, v43, 1552, 0);
  __break(1u);
  return result;
}

uint64_t sub_10007D748(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t result;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = (v7 >> 14 == a1 >> 14) & a3;
  if (v8 == 1)
    return v8 ^ 1u;
  if (a1 >> 14 >= v7 >> 14)
  {
    v10 = String.subscript.getter(v7, a1, a5, a6);
    v12 = v11;
    v14 = v13;
    v16 = v15;
    v17 = *(_QWORD **)(a4 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
    *(_QWORD *)(a4 + 16) = v17;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v17 = sub_100091164(0, v17[2] + 1, 1, v17);
      *(_QWORD *)(a4 + 16) = v17;
    }
    v20 = v17[2];
    v19 = v17[3];
    if (v20 >= v19 >> 1)
    {
      v17 = sub_100091164((_QWORD *)(v19 > 1), v20 + 1, 1, v17);
      *(_QWORD *)(a4 + 16) = v17;
    }
    v17[2] = v20 + 1;
    v21 = &v17[4 * v20];
    v21[4] = v10;
    v21[5] = v12;
    v21[6] = v14;
    v21[7] = v16;
    return v8 ^ 1u;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 754, 0);
  __break(1u);
  return result;
}

uint64_t sub_10007D8A0(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 16) >> 14;
  v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1)
    return v5 ^ 1u;
  if (a1 >> 14 >= v4)
  {
    v7 = Substring.subscript.getter();
    v9 = v8;
    v11 = v10;
    v13 = v12;
    v14 = *(_QWORD **)(a4 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v14);
    *(_QWORD *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v14 = sub_100091164(0, v14[2] + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v17 = v14[2];
    v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      v14 = sub_100091164((_QWORD *)(v16 > 1), v17 + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v14[2] = v17 + 1;
    v18 = &v14[4 * v17];
    v18[4] = v7;
    v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 754, 0);
  __break(1u);
  return result;
}

uint64_t sub_10007DA00(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

unsigned __int8 *sub_10007DA78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v18 = a1;
  v19 = a2;
  v20 = a3;
  v21 = a4;
  v7 = sub_10007EAA4();
  swift_bridgeObjectRetain(a4);
  v8 = String.init<A>(_:)(&v18, &type metadata for Substring, &protocol witness table for Substring, v7);
  v10 = v8;
  v11 = v9;
  if ((v9 & 0x1000000000000000) == 0)
  {
    if ((v9 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v13 = HIBYTE(v11) & 0xF;
    v18 = v10;
    v19 = v11 & 0xFFFFFFFFFFFFFFLL;
    v12 = (unsigned __int8 *)&v18;
    goto LABEL_7;
  }
  v10 = sub_10007DDE4(v8, v9);
  v15 = v14;
  swift_bridgeObjectRelease(v11);
  v11 = v15;
  if ((v15 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v10 & 0x1000000000000000) != 0)
  {
    v12 = (unsigned __int8 *)((v11 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v13 = v10 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v12 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v10, v11);
  }
LABEL_7:
  v16 = sub_10007DB68(v12, v13, a5);
  swift_bridgeObjectRelease(v11);
  return v16;
}

unsigned __int8 *sub_10007DB68(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  v13 = 0;
                  if (v11 < 0x61 || v11 >= v8)
                    return (unsigned __int8 *)v13;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      v23 = a3 + 48;
      v24 = a3 + 55;
      v25 = a3 + 87;
      if (a3 > 10)
      {
        v23 = 58;
      }
      else
      {
        v25 = 97;
        v24 = 65;
      }
      if (result)
      {
        v26 = 0;
        do
        {
          v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              v13 = 0;
              if (v27 < 0x61 || v27 >= v25)
                return (unsigned __int8 *)v13;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63)
            return 0;
          v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  v15 = a2 - 1;
  if (a2 == 1)
    return 0;
  v16 = a3 + 48;
  v17 = a3 + 55;
  v18 = a3 + 87;
  if (a3 > 10)
  {
    v16 = 58;
  }
  else
  {
    v18 = 97;
    v17 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v19 = result + 1;
  do
  {
    v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        v13 = 0;
        if (v20 < 0x61 || v20 >= v18)
          return (unsigned __int8 *)v13;
        v21 = -87;
      }
      else
      {
        v21 = -55;
      }
    }
    else
    {
      v21 = -48;
    }
    v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21)))
      return 0;
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

uint64_t sub_10007DDE4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v6 = v5;
  v9 = sub_10007DE60(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_10007DE60(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_10007DFA4(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_100005B7C(v12, 0);
      v5 = sub_10007E090((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release(v8);
    return v14;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }
}

unint64_t sub_10007DFA4(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_10007DA00(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_10007DA00(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t sub_10007E090(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_10007DA00(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_10007DA00(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_10007E2A0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (v4 == *a2 && v5 == v6)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0) & 1;
}

uint64_t sub_10007E2F4(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  uint64_t v45;

  v10 = a2;
  v11 = result;
  v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    result = sub_10007DA00(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v15 = a2 >> 16;
      if (v14 != v13)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v16 = HIBYTE(a5) & 0xF;
  if (v16 < a2 >> 16)
    goto LABEL_95;
  result = String.UTF8View._foreignDistance(from:to:)(15, a2, a4, a5);
  v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    result = sub_10007DA00(v10, a4, a5);
    v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    result = sub_10007DA00(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v17 = a4 & 0xFFFFFFFFFFFFLL;
  if (v17 < v10 >> 16)
    goto LABEL_91;
  if (v17 < a3 >> 16)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  result = String.UTF8View._foreignDistance(from:to:)(v10, a3, a4, a5);
LABEL_21:
  v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_90;
  }
  if (v18 < v15)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11)
    v19 = 0;
  v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        v31 = a6 + 48;
        v32 = a6 + 55;
        v33 = a6 + 87;
        if (a6 > 10)
        {
          v31 = 58;
        }
        else
        {
          v33 = 97;
          v32 = 65;
        }
        if (v19)
        {
          v24 = 0;
          v34 = v19 + 1;
          v35 = result - 1;
          do
          {
            v36 = *v34;
            if (v36 < 0x30 || v36 >= v31)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                v29 = 0;
                if (v36 < 0x61 || v36 >= v33)
                  return v29;
                v37 = -87;
              }
              else
              {
                v37 = -55;
              }
            }
            else
            {
              v37 = -48;
            }
            v38 = v24 * a6;
            if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63)
              return 0;
            v24 = v38 + (v36 + v37);
            if (__OFADD__(v38, (v36 + v37)))
              return 0;
            ++v34;
            --v35;
          }
          while (v35);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_94;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      v39 = a6 + 48;
      v40 = a6 + 55;
      v41 = a6 + 87;
      if (a6 > 10)
      {
        v39 = 58;
      }
      else
      {
        v41 = 97;
        v40 = 65;
      }
      if (v19)
      {
        v42 = 0;
        do
        {
          v43 = *v19;
          if (v43 < 0x30 || v43 >= v39)
          {
            if (v43 < 0x41 || v43 >= v40)
            {
              v29 = 0;
              if (v43 < 0x61 || v43 >= v41)
                return v29;
              v44 = -87;
            }
            else
            {
              v44 = -55;
            }
          }
          else
          {
            v44 = -48;
          }
          v45 = v42 * a6;
          if ((unsigned __int128)(v42 * (__int128)a6) >> 64 != (v42 * a6) >> 63)
            return 0;
          v42 = v45 + (v43 + v44);
          if (__OFADD__(v45, (v43 + v44)))
            return 0;
          ++v19;
          --result;
        }
        while (result);
        return v45 + (v43 + v44);
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      v21 = a6 + 48;
      v22 = a6 + 55;
      v23 = a6 + 87;
      if (a6 > 10)
      {
        v21 = 58;
      }
      else
      {
        v23 = 97;
        v22 = 65;
      }
      if (v19)
      {
        v24 = 0;
        v25 = v19 + 1;
        v26 = result - 1;
        while (1)
        {
          v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              v29 = 0;
              if (v27 < 0x61 || v27 >= v23)
                return v29;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v30 = v24 * a6;
          if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63)
            return 0;
          v24 = v30 - (v27 + v28);
          if (__OFSUB__(v30, (v27 + v28)))
            return 0;
          ++v25;
          if (!--v26)
            return v24;
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}

uint64_t sub_10007E718(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD v30[4];
  char v31;
  uint64_t v32;
  uint64_t v33;

  v32 = 46;
  v33 = 0xE100000000000000;
  v30[2] = &v32;
  swift_bridgeObjectRetain(a2);
  v4 = sub_10007CE10(2, 0, sub_10007EA50, (uint64_t)v30, a1, a2);
  swift_bridgeObjectRelease(a2);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain(v4);
    v6 = (unint64_t *)(v4 + 56);
    v7 = _swiftEmptyArrayStorage;
    while (1)
    {
      v9 = *(v6 - 3);
      v8 = *(v6 - 2);
      if ((v8 ^ v9) >= 0x4000)
      {
        v11 = *(v6 - 1);
        v10 = *v6;
        if ((*v6 & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRetain(*v6);
          v13 = (uint64_t)sub_10007DA78(v9, v8, v11, v10, 10);
          v18 = v17;
          swift_bridgeObjectRelease(v10);
          if ((v18 & 1) == 0)
            goto LABEL_12;
        }
        else
        {
          if ((v10 & 0x2000000000000000) != 0)
          {
            v32 = *(v6 - 1);
            v33 = v10 & 0xFFFFFFFFFFFFFFLL;
            v12 = &v32;
          }
          else if ((v11 & 0x1000000000000000) != 0)
          {
            v12 = (uint64_t *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else
          {
            v12 = (uint64_t *)_StringObject.sharedUTF8.getter(*(v6 - 1), *v6);
          }
          v13 = sub_10007E2F4((uint64_t)v12, v9, v8, v11, v10, 10);
          v31 = v14 & 1;
          if ((v14 & 1) == 0)
          {
LABEL_12:
            if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
              v7 = sub_100091158(0, v7[2] + 1, 1, v7);
            v16 = v7[2];
            v15 = v7[3];
            if (v16 >= v15 >> 1)
              v7 = sub_100091158((_QWORD *)(v15 > 1), v16 + 1, 1, v7);
            v7[2] = v16 + 1;
            v7[v16 + 4] = v13;
          }
        }
      }
      v6 += 4;
      if (!--v5)
      {
        swift_bridgeObjectRelease(v4);
        v19 = *(_QWORD *)(v4 + 16);
        goto LABEL_21;
      }
    }
  }
  v19 = 0;
  v7 = _swiftEmptyArrayStorage;
LABEL_21:
  v20 = v7[2];
  result = swift_bridgeObjectRelease(v4);
  if (v20 != v19 || v19 == 0)
  {
    swift_bridgeObjectRelease(v7);
    if (qword_1001AD058 != -1)
      swift_once(&qword_1001AD058, sub_10007CB60);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_100003A14(v23, (uint64_t)qword_1001B0C88);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Malformed version", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

    return 0;
  }
  v29 = v7[2];
  if (!v29)
  {
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v28 = v7[4];
  if (v19 < 2)
  {
LABEL_36:
    swift_bridgeObjectRelease(v7);
    return v28;
  }
  if (v29 < 2)
    goto LABEL_39;
  if (v19 < 3 || v29 >= 3)
    goto LABEL_36;
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_10007EA50(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD **)(v1 + 16);
  v4 = *a1;
  v5 = a1[1];
  v6 = v3[1];
  if (v4 == *v3 && v5 == v6)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *v3, v6, 0) & 1;
}

unint64_t sub_10007EAA4()
{
  unint64_t result;

  result = qword_1001B0CA0;
  if (!qword_1001B0CA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_1001B0CA0);
  }
  return result;
}

uint64_t sub_10007EAE8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10007EB0C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

_TtC14softposreaderd12RemoteReader *sub_10007EB20(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t *v10;
  _TtC14softposreaderd12RemoteReader *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return &_swiftEmptyArrayStorage;
  v10 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  v11 = &_swiftEmptyArrayStorage;
  do
  {
    v13 = *v10;
    if (*v10)
    {
      v14 = *(v10 - 1);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
        v11 = sub_1000915A4(0, *(_QWORD *)&v11->instance[8] + 1, 1, (uint64_t)v11, v6, v7, v8, v9);
      v16 = *(_QWORD *)&v11->instance[8];
      v15 = *(_QWORD *)&v11->instance[16];
      if (v16 >= v15 >> 1)
        v11 = sub_1000915A4((_TtC14softposreaderd12RemoteReader *)(v15 > 1), v16 + 1, 1, (uint64_t)v11, v6, v7, v8, v9);
      *(_QWORD *)&v11->instance[8] = v16 + 1;
      v12 = (char *)v11 + 16 * v16;
      *((_QWORD *)v12 + 4) = v14;
      *((_QWORD *)v12 + 5) = v13;
    }
    v10 += 2;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, v3, v4, v5, v6, v7, v8, v9);
  return v11;
}

uint8_t *sub_10007EC20()
{
  return sub_10007EC58((void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000DA1E0);
}

uint8_t *sub_10007EC3C()
{
  return sub_10007EC58((void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000D8FF0);
}

uint8_t *sub_10007EC58(void (*a1)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint8_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void (*v16)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  Swift::String v21;
  uint64_t v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  unint64_t v39;
  uint64_t v40;
  _WORD *v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  Swift::String v47;
  SEL v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  __int16 v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _WORD *v63;
  _TtC14softposreaderd12RemoteReader *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _WORD *v72;
  uint64_t *v74;
  uint64_t v75;
  SEL v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  Swift::String v90;
  SEL v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  os_log_t v98;
  uint64_t v99;
  uint64_t v100;
  uint8_t *v101;
  uint8_t *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  os_log_t v106;
  uint64_t v107;
  _QWORD v108[5];
  uint8_t *v109;
  unint64_t v110;
  unsigned __int16 v111;
  uint64_t v112;

  v3 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v3);
  v104 = (char *)&v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001ACFD0 != -1)
    swift_once(&qword_1001ACFD0, sub_100071AC4);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_100003A14(v5, (uint64_t)qword_1001B08B8);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.info.getter();
  v9 = os_log_type_enabled(v7, v8);
  v106 = v6;
  if (v9)
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v112 = v11;
    *(_DWORD *)v10 = 136315138;
    v1 = v10 + 4;
    v107 = sub_1000056EC(0xD000000000000012, 0x800000010016CFC0, &v112);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v10 + 4, v10 + 12);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }

  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v103 = swift_slowAlloc(32, -1);
    v112 = v103;
    v102 = v15;
    *(_DWORD *)v15 = 136315138;
    v101 = v15 + 4;
    sub_10005E7B4(0xDA0uLL, 0, 0xC000000000000000);
    v16 = a1;
    v18 = v17;
    v20 = v19;
    v21 = Data.hexString()();
    v22 = v18;
    a1 = v16;
    sub_100005DE0(v22, v20);
    v107 = sub_1000056EC(v21._countAndFlagsBits, (unint64_t)v21._object, &v112);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v101, v15 + 12);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v21._object, v23, v24, v25, v26, v27, v28, v29);
    v1 = v102;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "C-APDU (GET VERSION): %s", v102, 0xCu);
    v30 = v103;
    swift_arrayDestroy(v103, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v1, -1, -1);
  }

  a1(v108, 3488, 0, 0xC000000000000000, 0, 0);
  v31 = v108[0];
  v32 = v108[1];
  v33 = v108[3];
  v34 = v108[4];
  v35 = sub_100024374((uint64_t)v108, (uint64_t)&v109, (uint64_t *)&unk_1001AE480);
  v36 = v110;
  if (v110 >> 60 != 15)
  {
    v1 = v109;
    LODWORD(v103) = v111;
    sub_100005D9C(v31, v32);
    sub_100005D9C(v33, v34);
    sub_100005D9C(v31, v32);
    v42 = sub_100005D9C(v33, v34);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v102 = v1;
      v45 = (uint8_t *)swift_slowAlloc(12, -1);
      v46 = swift_slowAlloc(32, -1);
      v112 = v46;
      *(_DWORD *)v45 = 136315138;
      v47 = Data.hexString()();
      v107 = sub_1000056EC(v47._countAndFlagsBits, (unint64_t)v47._object, &v112);
      v1 = v102;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v45 + 4, v45 + 12);
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v47._object, v48, v49, v50, v51, v52, v53, v54);
      sub_100030768((uint64_t)v108);
      sub_100030768((uint64_t)v108);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "R-APDU: %s", v45, 0xCu);
      swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v45, -1, -1);
    }
    else
    {
      sub_100030768((uint64_t)v108);
      sub_100030768((uint64_t)v108);
    }

    v55 = v103;
    if ((_DWORD)v103 == 36864)
    {
      type metadata accessor for TLV();
      v56 = v105;
      static TLV.decode(from:)((uint64_t)v1, v36);
      if (v56)
      {
        v58 = v104;
        static String.Encoding.ascii.getter();
        v1 = (uint8_t *)String.init(data:encoding:)(v1, v36, v58);
        v60 = v59;
        swift_errorRelease();
      }
      else
      {
        v64 = (_TtC14softposreaderd12RemoteReader *)v57;
        v112 = v57;
        v65 = *(_QWORD *)TLVTag.payAppletVersionString.unsafeMutableAddressor();
        v66 = sub_100003A2C((uint64_t *)&unk_1001B36D0);
        v67 = sub_100030828((unint64_t *)&qword_1001AE440, (uint64_t *)&unk_1001B36D0, (uint64_t)&protocol conformance descriptor for [A]);
        v68 = Collection<>.first(tag:)(v65, v66, v67);
        if (v68)
        {
          v69 = v68;
          v1 = (uint8_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v68 + 296))(v68);
          v60 = v70;
          swift_release(v69);
        }
        else
        {
          v1 = 0;
          v60 = 0;
        }
        v112 = (uint64_t)v64;
        v74 = (uint64_t *)TLVTag.availableKernelsMap.unsafeMutableAddressor();
        v75 = Collection<>.first(tag:)(*v74, v66, v67);
        swift_bridgeObjectRelease(v64, v76, v77, v78, v79, v80, v81, v82);
        if (v75)
        {
          v83 = (*(uint64_t (**)(void))(*(_QWORD *)v75 + 144))();
          v85 = v84;
          swift_release(v75);
          sub_100005D9C(v83, v85);
          v86 = sub_100005D9C(v83, v85);
          v87 = Logger.logObject.getter(v86);
          v88 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v87, v88))
          {
            v106 = v87;
            v89 = (uint8_t *)swift_slowAlloc(12, -1);
            v105 = swift_slowAlloc(32, -1);
            v112 = v105;
            *(_DWORD *)v89 = 136315138;
            v104 = (char *)(v89 + 4);
            v90 = Data.hexString()();
            v107 = sub_1000056EC(v90._countAndFlagsBits, (unint64_t)v90._object, &v112);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v104, v89 + 12);
            swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v90._object, v91, v92, v93, v94, v95, v96, v97);
            sub_100005DE0(v83, v85);
            sub_100005DE0(v83, v85);
            v98 = v106;
            _os_log_impl((void *)&_mh_execute_header, v106, v88, "Available kernels map: %s", v89, 0xCu);
            v99 = v105;
            swift_arrayDestroy(v105, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v99, -1, -1);
            swift_slowDealloc(v89, -1, -1);

            sub_100005DE0(v83, v85);
          }
          else
          {
            sub_100005DE0(v83, v85);
            sub_100005DE0(v83, v85);
            sub_100005DE0(v83, v85);

          }
        }
      }
      if (v60)
      {
        sub_100030768((uint64_t)v108);
        return v1;
      }
      v71 = sub_100030724();
      v62 = swift_allocError(&type metadata for APDUSW, v71, 0, 0);
      *v72 = 1;
    }
    else
    {
      v61 = sub_100030724();
      v62 = swift_allocError(&type metadata for APDUSW, v61, 0, 0);
      *v63 = v55;
    }
    swift_willThrow(v62);
    sub_100030768((uint64_t)v108);
    return v1;
  }
  v37 = Logger.logObject.getter(v35);
  v38 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v37, v38))
  {
    v1 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "applet is not responsive, no version", v1, 2u);
    swift_slowDealloc(v1, -1, -1);
  }

  v39 = sub_100030724();
  v40 = swift_allocError(&type metadata for APDUSW, v39, 0, 0);
  *v41 = 0;
  swift_willThrow(v40);
  return v1;
}

_TtC14softposreaderd12RemoteReader *sub_10007F4E0()
{
  uint64_t v0;
  _TtC14softposreaderd12RemoteReader *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  _TtC14softposreaderd12RemoteReader *result;
  uint64_t v21;
  _TtC14softposreaderd12RemoteReader *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;

  if (qword_1001ACFD0 != -1)
    swift_once(&qword_1001ACFD0, sub_100071AC4);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100003A14(v2, (uint64_t)qword_1001B08B8);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "retrieveProfileIDs()", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = (uint64_t *)TLVTag.readerConfigProfileIDs.unsafeMutableAddressor();
  v8 = sub_100081FE8(*v7, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000DA1E0);
  if (v0)
    return v1;
  v9 = v8;
  v10 = (*(uint64_t (**)(void))(*(_QWORD *)v8 + 160))();
  v18 = v10;
  if (!((unint64_t)v10 >> 62))
  {
    v19 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v19)
      goto LABEL_8;
LABEL_20:
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v18, v11, v12, v13, v14, v15, v16, v17);
    swift_release(v9);
    return &_swiftEmptyArrayStorage;
  }
  if (v10 >= 0)
    v10 &= 0xFFFFFFFFFFFFFF8uLL;
  v19 = _CocoaArrayWrapper.endIndex.getter(v10);
  if (!v19)
    goto LABEL_20;
LABEL_8:
  result = (_TtC14softposreaderd12RemoteReader *)sub_100091C44(0, v19 & ~(v19 >> 63), 0);
  if ((v19 & 0x8000000000000000) == 0)
  {
    v21 = 0;
    v1 = &_swiftEmptyArrayStorage;
    v38 = v18 & 0xC000000000000001;
    v22 = (_TtC14softposreaderd12RemoteReader *)v18;
    v23 = v19;
    do
    {
      if (v38)
      {
        v24 = specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v18);
      }
      else
      {
        v24 = *(_QWORD *)(v18 + 8 * v21 + 32);
        swift_retain();
      }
      v25 = (*(uint64_t (**)(void))(*(_QWORD *)v24 + 152))();
      v27 = v26;
      swift_release(v24);
      v36 = *(_QWORD *)&_swiftEmptyArrayStorage.instance[8];
      v35 = *(_QWORD *)&_swiftEmptyArrayStorage.instance[16];
      if (v36 >= v35 >> 1)
        sub_100091C44(v35 > 1, v36 + 1, 1);
      ++v21;
      *(_QWORD *)&_swiftEmptyArrayStorage.instance[8] = v36 + 1;
      v37 = (char *)&_swiftEmptyArrayStorage + 16 * v36;
      *((_QWORD *)v37 + 4) = v25;
      *((_QWORD *)v37 + 5) = v27;
      v18 = (unint64_t)v22;
    }
    while (v23 != v21);
    swift_bridgeObjectRelease(v22, v28, v29, v30, v31, v32, v33, v34);
    swift_release(v9);
    return v1;
  }
  __break(1u);
  return result;
}

void sub_10007F758(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;

  v25 = a2;
  v29 = a1;
  v2 = sub_100003A2C(&qword_1001B0E30);
  __chkstk_darwin(v2);
  v28 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchTime(0);
  v24 = *(_QWORD *)(v4 - 8);
  v5 = v24;
  __chkstk_darwin(v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003A2C(qword_1001AFA48);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v24 - v12;
  v14 = type metadata accessor for StopWatch(0);
  v26 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v24 - v18;
  v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v20(v13, 1, 1, v4);
  v20(v11, 1, 1, v4);
  v20(v17, 1, 1, v4);
  v27 = v14;
  v21 = (uint64_t)&v17[*(int *)(v14 + 20)];
  v20((char *)v21, 1, 1, v4);
  sub_10005218C((uint64_t)v17, qword_1001AFA48);
  sub_100024374((uint64_t)v13, (uint64_t)v17, qword_1001AFA48);
  sub_10005218C(v21, qword_1001AFA48);
  sub_100024374((uint64_t)v11, v21, qword_1001AFA48);
  v22 = sub_100097A28((uint64_t)v17, (uint64_t)v19, type metadata accessor for StopWatch);
  static DispatchTime.now()(v22);
  sub_10005218C((uint64_t)v19, qword_1001AFA48);
  v23 = v24;
  (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v19, v7, v4);
  v20(v19, 0, 1, v4);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v4);
  __asm { BR              X10 }
}

uint64_t sub_10007F9F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 - 96);
  sub_100070ECC(v0, v2, type metadata accessor for StopWatch);
  (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(v1 - 112) + 56))(v2, 0, 1, *(_QWORD *)(v1 - 104));
  sub_1000E9370(v2, 0xD000000000000012, (_TtC14softposreaderd12RemoteReader *)0x8000000100167E40);
  return sub_100070F10(v0, type metadata accessor for StopWatch);
}

void sub_10007FB24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  char *v25;
  uint64_t v26;

  v24 = a2;
  v26 = a1;
  v2 = sub_100003A2C(&qword_1001B0E30);
  __chkstk_darwin(v2);
  v25 = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchTime(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003A2C(qword_1001AFA48);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)v23 - v12;
  v14 = type metadata accessor for StopWatch(0);
  v23[1] = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)v23 - v18;
  v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v20(v13, 1, 1, v4);
  v20(v11, 1, 1, v4);
  v20(v17, 1, 1, v4);
  v23[2] = v14;
  v21 = (uint64_t)&v17[*(int *)(v14 + 20)];
  v20((char *)v21, 1, 1, v4);
  sub_10004E25C((uint64_t)v13, (uint64_t)v17);
  sub_10004E25C((uint64_t)v11, v21);
  v22 = sub_100097A28((uint64_t)v17, (uint64_t)v19, type metadata accessor for StopWatch);
  static DispatchTime.now()(v22);
  sub_10005218C((uint64_t)v19, qword_1001AFA48);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v19, v7, v4);
  v20(v19, 0, 1, v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  __asm { BR              X10 }
}

uint64_t sub_10007FD84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 - 96);
  sub_100070ECC(v0, v2, type metadata accessor for StopWatch);
  (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(v1 - 120) + 56))(v2, 0, 1, *(_QWORD *)(v1 - 112));
  sub_1000E9370(v2, 0x656D695464616572, (_TtC14softposreaderd12RemoteReader *)0xEB00000000564D45);
  return sub_100070F10(v0, type metadata accessor for StopWatch);
}

uint64_t sub_10007FE5C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _TtC14softposreaderd12RemoteReader *v26;
  _TtC14softposreaderd12RemoteReader *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;

  v34 = a2;
  v35 = a1;
  v2 = sub_100003A2C(&qword_1001B0E30);
  __chkstk_darwin(v2);
  v33 = (uint64_t)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchTime(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003A2C(qword_1001AFA48);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v30 - v12;
  v14 = type metadata accessor for StopWatch(0);
  v15 = *(_QWORD *)(v14 - 8);
  v31 = v14;
  v32 = v15;
  v16 = v14;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v30 - v20;
  v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v22(v13, 1, 1, v4);
  v22(v11, 1, 1, v4);
  v22(v19, 1, 1, v4);
  v23 = (uint64_t)&v19[*(int *)(v16 + 20)];
  v22((char *)v23, 1, 1, v4);
  sub_10004E25C((uint64_t)v13, (uint64_t)v19);
  sub_10004E25C((uint64_t)v11, v23);
  v24 = sub_100097A28((uint64_t)v19, (uint64_t)v21, type metadata accessor for StopWatch);
  static DispatchTime.now()(v24);
  sub_10005218C((uint64_t)v21, qword_1001AFA48);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v21, v7, v4);
  v22(v21, 0, 1, v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v25 = sub_10004BD50(v34);
  v27 = v26;
  v28 = v33;
  sub_100070ECC((uint64_t)v21, v33, type metadata accessor for StopWatch);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v32 + 56))(v28, 0, 1, v31);
  sub_1000E9370(v28, v25, v27);
  return sub_100070F10((uint64_t)v21, type metadata accessor for StopWatch);
}

void sub_100080108(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[5];

  v3 = type metadata accessor for DispatchTime(0);
  __chkstk_darwin(v3);
  v4 = sub_100003A2C(&qword_1001B0E30);
  v5 = __chkstk_darwin(v4);
  v9[4] = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = type metadata accessor for StopWatch(0);
  __chkstk_darwin(v7);
  v9[2] = a2;
  v9[3] = (char *)v9 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __asm { BR              X10 }
}

uint64_t sub_100080240()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  const char *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v7 - 120) = v6;
  v8 = *(_QWORD *)(v6 + 8);
  if (*(_QWORD *)(v8 + 16) && (v9 = sub_10000ADC4(0xD000000000000012, 0x8000000100167E40), (v10 & 1) != 0))
  {
    sub_100070ECC(*(_QWORD *)(v8 + 56) + *(_QWORD *)(v4 + 72) * v9, v3, type metadata accessor for StopWatch);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v11(v3, 0, 1, v5);
  }
  else
  {
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v11(v3, 1, 1, v5);
  }
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)0x8000000100167E40, v12, v13, v14, v15, v16, v17, v18);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v3, 1, v5) != 1)
  {
    *(_QWORD *)(v7 - 128) = v11;
    v20 = *(_QWORD *)(v7 - 104);
    v21 = sub_100097A28(v3, v20, type metadata accessor for StopWatch);
    static DispatchTime.now()(v21);
    v22 = v20 + *(int *)(v5 + 20);
    sub_10005218C(v22, qword_1001AFA48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 16))(v22, v2, v1);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 56))(v22, 0, 1, v1);
    (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
    __asm { BR              X10 }
  }
  return sub_10005218C(v3, &qword_1001B0E30);
}

void sub_1000806E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[7];

  v3 = type metadata accessor for DispatchTime(0);
  __chkstk_darwin(v3);
  v4 = sub_100003A2C(&qword_1001B0E30);
  v5 = __chkstk_darwin(v4);
  v9[5] = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = type metadata accessor for StopWatch(0);
  __chkstk_darwin(v7);
  v9[3] = (char *)v9 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[4] = a2;
  v9[6] = "transactionStatus";
  __asm { BR              X10 }
}

uint64_t sub_100080818()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  const char *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v7 - 128) = v6;
  v8 = *(_QWORD *)(v6 + 8);
  if (*(_QWORD *)(v8 + 16) && (v9 = sub_10000ADC4(0x656D695464616572, 0xEB00000000564D45), (v10 & 1) != 0))
  {
    sub_100070ECC(*(_QWORD *)(v8 + 56) + *(_QWORD *)(v3 + 72) * v9, v2, type metadata accessor for StopWatch);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v11(v2, 0, 1, v4);
  }
  else
  {
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v11(v2, 1, 1, v4);
  }
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)0xEB00000000564D45, v12, v13, v14, v15, v16, v17, v18);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v2, 1, v4) != 1)
  {
    *(_QWORD *)(v7 - 136) = v11;
    v20 = *(_QWORD *)(v7 - 120);
    v21 = sub_100097A28(v2, v20, type metadata accessor for StopWatch);
    static DispatchTime.now()(v21);
    v22 = v20 + *(int *)(v4 + 20);
    sub_10005218C(v22, qword_1001AFA48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v22, v0, v1);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v22, 0, 1, v1);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0, v1);
    __asm { BR              X10 }
  }
  return sub_10005218C(v2, &qword_1001B0E30);
}

uint64_t sub_100080B88(_TtC14softposreaderd12RemoteReader **a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _TtC14softposreaderd12RemoteReader *v18;
  _TtC14softposreaderd12RemoteReader *v19;
  unint64_t v20;
  char v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  const char *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  _TtC14softposreaderd12RemoteReader *v36;
  _TtC14softposreaderd12RemoteReader *v37;
  char v38;
  Class isa;
  _TtC14softposreaderd12RemoteReader **v40;
  char isUniquelyReferenced_nonNull_native;
  _TtC14softposreaderd12RemoteReader *v42;
  SEL v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  SEL v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  void *v57;
  SEL v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  uint64_t v65;
  _TtC14softposreaderd12RemoteReader *v66;
  _TtC14softposreaderd12RemoteReader *v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  _TtC14softposreaderd12RemoteReader **v71;
  char *v72;
  int v73;
  _TtC14softposreaderd12RemoteReader *v74;

  v4 = type metadata accessor for DispatchTime(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003A2C(&qword_1001B0E30);
  v9 = __chkstk_darwin(v8);
  v72 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v69 - v11;
  v13 = type metadata accessor for StopWatch(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v70 = (uint64_t)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = a2;
  v16 = sub_10004BD50(a2);
  v18 = (_TtC14softposreaderd12RemoteReader *)v17;
  v71 = a1;
  v19 = a1[1];
  if (*(_QWORD *)&v19->instance[8] && (v20 = sub_10000ADC4(v16, v17), (v21 & 1) != 0))
  {
    sub_100070ECC(*(_QWORD *)v19[1].instance + *(_QWORD *)(v14 + 72) * v20, (uint64_t)v12, type metadata accessor for StopWatch);
    v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
    v22(v12, 0, 1, v13);
  }
  else
  {
    v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
    v22(v12, 1, 1, v13);
  }
  swift_bridgeObjectRelease(v18, v23, v24, v25, v26, v27, v28, v29);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
    return sub_10005218C((uint64_t)v12, &qword_1001B0E30);
  v69 = v22;
  v31 = v70;
  v32 = sub_100097A28((uint64_t)v12, v70, type metadata accessor for StopWatch);
  static DispatchTime.now()(v32);
  v33 = v31 + *(int *)(v13 + 20);
  sub_10005218C(v33, qword_1001AFA48);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(v33, v7, v4);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v33, 0, 1, v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v34 = v73;
  v35 = sub_10004BD50(v73);
  v37 = v36;
  sub_10004DBC0();
  if ((v38 & 1) != 0)
  {
    v57 = (void *)sub_100057E80(v35, (uint64_t)v37);
    swift_bridgeObjectRelease(v37, v58, v59, v60, v61, v62, v63, v64);

  }
  else
  {
    isa = UInt64._bridgeToObjectiveC()().super.super.isa;
    v40 = v71;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v71);
    v74 = *v40;
    *v40 = (_TtC14softposreaderd12RemoteReader *)0x8000000000000000;
    sub_1000EB9EC((uint64_t)isa, v35, (uint64_t)v37, isUniquelyReferenced_nonNull_native);
    v42 = *v40;
    *v40 = v74;
    swift_bridgeObjectRelease(v37, v43, v44, v45, v46, v47, v48, v49);
    swift_bridgeObjectRelease(v42, v50, v51, v52, v53, v54, v55, v56);
  }
  v65 = sub_10004BD50(v34);
  v67 = v66;
  v68 = (uint64_t)v72;
  v69(v72, 1, 1, v13);
  sub_1000E9370(v68, v65, v67);
  return sub_100070F10(v31, type metadata accessor for StopWatch);
}

uint64_t sub_100080EB8(uint64_t a1)
{
  return sub_100080EF0(a1, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000D8FF0);
}

uint64_t sub_100080ED4(uint64_t a1)
{
  return sub_100080EF0(a1, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000DA1E0);
}

uint64_t sub_100080EF0(uint64_t a1, void (*a2)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _TtC14softposreaderd12RemoteReader *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  SEL v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  unint64_t v43;
  uint64_t v44;
  _WORD *v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  Swift::String v51;
  SEL v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  uint8_t *v59;
  unint64_t v60;
  uint64_t v61;
  _WORD *v62;
  uint64_t v64;
  void (*v65)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v66;
  int v67;
  uint64_t v68;
  _QWORD v69[5];
  uint64_t v70;
  unint64_t v71;
  unsigned __int16 v72;
  uint64_t v73;

  if (qword_1001AD0B8 != -1)
    swift_once(&qword_1001AD0B8, sub_1000B85F4);
  v4 = 2160721920;
  v5 = type metadata accessor for Logger(0);
  v6 = sub_100003A14(v5, (uint64_t)qword_1001B1850);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc(22, -1);
    v64 = swift_slowAlloc(64, -1);
    v73 = v64;
    *(_DWORD *)v9 = 136315394;
    v10 = sub_100003A2C((uint64_t *)&unk_1001B1300);
    v11 = swift_allocObject(v10, 72, 7);
    *(_OWORD *)(v11 + 16) = xmmword_10015A5F0;
    *(_QWORD *)(v11 + 56) = &type metadata for UInt;
    *(_QWORD *)(v11 + 64) = &protocol witness table for UInt;
    *(_QWORD *)(v11 + 32) = a1;
    v12 = String.init(format:_:)(1479684133, 0xE400000000000000, v11);
    v65 = a2;
    v14 = (_TtC14softposreaderd12RemoteReader *)v13;
    v68 = sub_1000056EC(v12, v13, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, v69, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
    *(_WORD *)(v9 + 12) = 2080;
    v22 = bswap32((unsigned __int16)a1 | 0x80CA0000);
    sub_10005E420(v22);
    v24 = v23;
    v4 = v25;
    v26 = Data.hexString()();
    v27 = v24;
    a2 = v65;
    sub_100005DE0(v27, v4);
    v68 = sub_1000056EC(v26._countAndFlagsBits, (unint64_t)v26._object, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, v69, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v26._object, v28, v29, v30, v31, v32, v33, v34);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "CAPDU (GET DATA for tag %s): %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v64, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v64, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {

    v22 = bswap32((unsigned __int16)a1 | 0x80CA0000);
  }
  a2(v69, v22, 0, 0xC000000000000000, 0, 1);
  v36 = v69[0];
  v35 = v69[1];
  v37 = v69[3];
  v38 = v69[4];
  v39 = sub_100024374((uint64_t)v69, (uint64_t)&v70, (uint64_t *)&unk_1001AE480);
  v40 = v71;
  if (v71 >> 60 == 15)
  {
    v41 = Logger.logObject.getter(v39);
    v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v4 = swift_slowAlloc(2, -1);
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Error from transceive", (uint8_t *)v4, 2u);
      swift_slowDealloc(v4, -1, -1);
    }

    v43 = sub_100030724();
    v44 = swift_allocError(&type metadata for APDUSW, v43, 0, 0);
    *v45 = 0;
    swift_willThrow(v44);
  }
  else
  {
    v4 = v70;
    v67 = v72;
    sub_100005D9C(v36, v35);
    sub_100005D9C(v37, v38);
    sub_100005D9C(v36, v35);
    v46 = sub_100005D9C(v37, v38);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v66 = v4;
      v49 = (uint8_t *)swift_slowAlloc(12, -1);
      v50 = swift_slowAlloc(32, -1);
      v73 = v50;
      *(_DWORD *)v49 = 136315138;
      v51 = Data.hexString()();
      v68 = sub_1000056EC(v51._countAndFlagsBits, (unint64_t)v51._object, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, v69, v49 + 4, v49 + 12);
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v51._object, v52, v53, v54, v55, v56, v57, v58);
      sub_100030768((uint64_t)v69);
      sub_100030768((uint64_t)v69);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "RAPDU: %s", v49, 0xCu);
      swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      v59 = v49;
      v4 = v66;
      swift_slowDealloc(v59, -1, -1);
    }
    else
    {
      sub_100030768((uint64_t)v69);
      sub_100030768((uint64_t)v69);
    }

    if (v67 == 36864)
    {
      sub_100005D9C(v4, v40);
    }
    else
    {
      v60 = sub_100030724();
      v61 = swift_allocError(&type metadata for APDUSW, v60, 0, 0);
      *v62 = v67;
      swift_willThrow(v61);
    }
    sub_100030768((uint64_t)v69);
  }
  return v4;
}

void sub_100081434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, void (*a9)(_QWORD, void *), uint64_t a10)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t ObjectType;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t inited;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  _TtC14softposreaderd12RemoteReader *v51;
  os_unfair_lock_s *v52;
  uint64_t v53;
  os_unfair_lock_s *v54;
  SEL v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  os_unfair_lock_s *v63;
  uint64_t v64;
  os_unfair_lock_s *v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_signpost_type_t v69;
  void (*v70)(char *, char *, uint64_t);
  uint8_t *v71;
  os_signpost_id_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t), uint64_t, void (*)(uint64_t, uint64_t), char *, uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t (*v98)(uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(_QWORD, void *);
  char *v115;
  uint64_t v116;
  void *v117;
  char v118[48];

  v11 = v10;
  v111 = a7;
  v108 = a3;
  v112 = a1;
  v113 = a2;
  v116 = a10;
  v114 = a9;
  v16 = type metadata accessor for UUID(0);
  v109 = *(_QWORD *)(v16 - 8);
  v110 = v16;
  __chkstk_darwin(v16);
  v107 = v17;
  v115 = (char *)&v93 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100003A2C((uint64_t *)&unk_1001B36F0);
  v103 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v104 = v19;
  v106 = (uint64_t)&v93 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for OSSignpostID(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v93 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v26 = (char *)&v93 - v25;
  sub_100005EF8(v10 + 19, v10[22]);
  v105 = a4;
  if ((sub_1000F52D4(a4, 0.0) & 1) != 0)
  {
    v101 = a6;
    v100 = a5;
    v99 = a8;
    if (a8)
    {
      ObjectType = swift_getObjectType(a8);
      v28 = sub_10003ABC0(2, ObjectType);
      v30 = v29;
      swift_retain();
      v98 = v28;
      v28(0);
      v97 = v30;
      swift_release(v30);
    }
    else
    {
      v98 = 0;
      v97 = 0;
    }
    v102 = v11;
    v63 = *(os_unfair_lock_s **)(v11[34] + 56);
    v64 = (uint64_t)&v63[4];
    v65 = v63 + 8;
    os_unfair_lock_lock(v63 + 8);
    sub_10007F758(v64, 0);
    os_unfair_lock_unlock(v65);
    if (qword_1001AD070 != -1)
      swift_once(&qword_1001AD070, sub_1000837F8);
    v66 = type metadata accessor for OSSignposter(0);
    sub_100003A14(v66, (uint64_t)qword_1001B0CC0);
    v67 = static OSSignpostID.exclusive.getter();
    v68 = OSSignposter.logHandle.getter(v67);
    v69 = static os_signpost_type_t.begin.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v70 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
      v70(v24, v26, v20);
      v71 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v71 = 0;
      v72 = OSSignpostID.rawValue.getter(v71);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v68, v69, v72, "config-install-fetchSLAM", "begin fetch SLAM", v71, 2u);
      swift_slowDealloc(v71, -1, -1);

      (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v20);
    }
    else
    {

      v70 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
    }
    v70(v24, v26, v20);
    v73 = type metadata accessor for OSSignpostIntervalState(0);
    swift_allocObject(v73, *(unsigned int *)(v73 + 48), *(unsigned __int16 *)(v73 + 52));
    v74 = OSSignpostIntervalState.init(id:isOpen:)(v24, 1);
    v93 = v74;
    (*(void (**)(char *, uint64_t))(v21 + 8))(v26, v20);
    v75 = v102;
    v95 = v102[6];
    v94 = v102[7];
    v96 = sub_100005EF8(v102 + 3, v95);
    v76 = v106;
    sub_100005EB4(v105, v106, (uint64_t *)&unk_1001B36F0);
    v77 = v109;
    v78 = v110;
    (*(void (**)(char *, uint64_t, uint64_t))(v109 + 16))(v115, v108, v110);
    v79 = *(unsigned __int8 *)(v103 + 80);
    v80 = (v79 + 48) & ~v79;
    v81 = *(unsigned __int8 *)(v77 + 80);
    v82 = (v104 + v81 + v80) & ~v81;
    v83 = v82 + v107;
    v84 = (v82 + v107) & 0xFFFFFFFFFFFFFFF8;
    v85 = (char *)swift_allocObject(&unk_10019CD08, v84 + 16, v79 | v81 | 7);
    *((_QWORD *)v85 + 2) = v74;
    *((_QWORD *)v85 + 3) = v75;
    v86 = v116;
    *((_QWORD *)v85 + 4) = v114;
    *((_QWORD *)v85 + 5) = v86;
    sub_100024374(v76, (uint64_t)&v85[v80], (uint64_t *)&unk_1001B36F0);
    (*(void (**)(char *, char *, uint64_t))(v77 + 32))(&v85[v82], v115, v78);
    v85[v83] = v111 & 1;
    v87 = v99;
    *(_QWORD *)&v85[v84 + 8] = v99;
    v88 = v94;
    v89 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t), uint64_t, void (*)(uint64_t, uint64_t), char *, uint64_t, uint64_t))(v94 + 16);
    swift_unknownObjectRetain(v87);
    v90 = v93;
    swift_retain();
    swift_retain();
    swift_retain();
    v91 = (uint64_t)v98;
    v92 = v97;
    v89(v112, v113, v100, v101, v98, v97, sub_100093CB4, v85, v95, v88);
    sub_10004B5D0(v91, v92);
    swift_release(v85);
    swift_release(v90);
  }
  else
  {
    if (qword_1001AD068 != -1)
      swift_once(&qword_1001AD068, sub_100083768);
    v31 = type metadata accessor for Logger(0);
    v32 = sub_100003A14(v31, (uint64_t)qword_1001B0CA8);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Not attested before OTA", v35, 2u);
      swift_slowDealloc(v35, -1, -1);
    }

    v36 = (void *)sub_1000247AC(2029, 0, 0, 0);
    v37 = v11[34];
    v38 = sub_100003A2C(&qword_1001ADA30);
    inited = swift_initStackObject(v38, v118);
    *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
    *(_BYTE *)(inited + 32) = 8;
    v117 = v36;
    type metadata accessor for ConfigurationError(0);
    v41 = v40;
    v42 = sub_100005F1C((unint64_t *)&qword_1001AD750, (uint64_t (*)(uint64_t))type metadata accessor for ConfigurationError, (uint64_t)&unk_10015BC28);
    v43 = _BridgedStoredNSError.errorCode.getter(v41, v42);
    *(_QWORD *)(inited + 64) = &type metadata for Int;
    *(_QWORD *)(inited + 40) = v43;
    v51 = (_TtC14softposreaderd12RemoteReader *)sub_1000E862C(inited, v44, v45, v46, v47, v48, v49, v50);
    v52 = *(os_unfair_lock_s **)(v37 + 56);
    v53 = (uint64_t)&v52[4];
    v54 = v52 + 8;
    os_unfair_lock_lock(v52 + 8);
    sub_10005F610(v53, (uint64_t)v51);
    os_unfair_lock_unlock(v54);
    swift_bridgeObjectRelease(v51, v55, v56, v57, v58, v59, v60, v61);
    v62 = v36;
    v114(0, v36);

  }
}

uint64_t sub_100081B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_signpost_type_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint8_t *v21;
  uint8_t *v22;
  os_signpost_id_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  dispatch_semaphore_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, Swift::Int (*)(uint64_t, uint64_t), _QWORD *, uint64_t, uint64_t);
  NSObject *v35;
  uint64_t v36;
  unsigned int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  dispatch_semaphore_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52[24];
  char v53[24];
  char v54[32];
  uint64_t v55;

  v5 = v4;
  v48 = a3;
  v49 = a4;
  v46 = a1;
  v47 = a2;
  v6 = type metadata accessor for OSSignpostID(0);
  v7 = *(_QWORD **)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v41 - v11;
  v45 = dispatch_semaphore_create(0);
  v13 = swift_allocObject(&unk_10019CDD0, 17, 7);
  v55 = v13;
  *(_BYTE *)(v13 + 16) = 0;
  v42 = v13 + 16;
  v14 = swift_allocObject(&unk_10019CDD0, 17, 7);
  v51 = v14;
  *(_BYTE *)(v14 + 16) = 0;
  v41 = v14 + 16;
  v15 = swift_allocObject(&unk_10019CDF8, 24, 7);
  *(_QWORD *)(v15 + 16) = 0;
  v44 = v15 + 16;
  if (qword_1001AD070 != -1)
    swift_once(&qword_1001AD070, sub_1000837F8);
  v50 = v15;
  v16 = type metadata accessor for OSSignposter(0);
  sub_100003A14(v16, (uint64_t)qword_1001B0CC0);
  v17 = static OSSignpostID.exclusive.getter();
  v18 = OSSignposter.logHandle.getter(v17);
  v19 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v20 = (void (*)(char *, char *, uint64_t))v7[2];
    v20(v10, v12, v6);
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    v43 = v7;
    v22 = v21;
    *(_WORD *)v21 = 0;
    v23 = OSSignpostID.rawValue.getter(v21);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, v19, v23, "config-status-checkForRemoteUpdates", "begin check for remote updates", v22, 2u);
    v24 = v22;
    v5 = v4;
    v7 = v43;
    swift_slowDealloc(v24, -1, -1);

    ((void (*)(char *, uint64_t))v7[1])(v10, v6);
  }
  else
  {

    v20 = (void (*)(char *, char *, uint64_t))v7[2];
  }
  v20(v10, v12, v6);
  v25 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  v26 = OSSignpostIntervalState.init(id:isOpen:)(v10, 1);
  ((void (*)(char *, uint64_t))v7[1])(v12, v6);
  v27 = v5[6];
  v28 = v5[7];
  v43 = sub_100005EF8(v5 + 3, v27);
  v29 = (_QWORD *)swift_allocObject(&unk_10019CE20, 56, 7);
  v30 = v55;
  v29[2] = v26;
  v29[3] = v30;
  v31 = v50;
  v32 = v51;
  v29[4] = v51;
  v29[5] = v31;
  v33 = v45;
  v29[6] = v45;
  v34 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, Swift::Int (*)(uint64_t, uint64_t), _QWORD *, uint64_t, uint64_t))(v28 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v35 = v33;
  v34(v46, v47, v48, v49, 0, 0, sub_100097D04, v29, v27, v28);
  swift_release(v29);
  OS_dispatch_semaphore.wait()();
  swift_beginAccess(v44, v54, 0, 0);
  if (*(_QWORD *)(v31 + 16))
  {
    v36 = swift_errorRetain();
    swift_willThrow(v36);

    swift_release(v30);
    swift_release(v32);
    swift_release(v31);
    return swift_release(v26);
  }
  else
  {

    swift_release(v26);
    swift_beginAccess(v42, v53, 0, 0);
    v38 = *(unsigned __int8 *)(v30 + 16);
    swift_beginAccess(v41, v52, 0, 0);
    v39 = *(unsigned __int8 *)(v32 + 16);
    swift_release(v30);
    swift_release(v32);
    swift_release(v31);
    if (v39)
      v40 = 256;
    else
      v40 = 0;
    return v40 | v38;
  }
}

uint64_t sub_100081EE4(uint64_t a1, uint64_t a2)
{
  Swift::String_optional v2;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String_optional v5;
  char v6;
  Swift::String v7;

  v2 = String.Iterator.next()();
  if (v2.value._object)
  {
    countAndFlagsBits = v2.value._countAndFlagsBits;
    object = v2.value._object;
    do
    {
      Character.hexDigitValue.getter(countAndFlagsBits, object);
      if ((v6 & 1) == 0)
      {
        v7._countAndFlagsBits = countAndFlagsBits;
        v7._object = object;
        String.append(_:)(v7);
      }
      swift_bridgeObjectRelease(object);
      v5 = String.Iterator.next()();
      countAndFlagsBits = v5.value._countAndFlagsBits;
      object = v5.value._object;
    }
    while (v5.value._object);
  }
  swift_bridgeObjectRelease(a2);
  return 0;
}

uint64_t sub_100081FB0(uint64_t a1)
{
  return sub_100081FE8(a1, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000DA1E0);
}

uint64_t sub_100081FCC(uint64_t a1)
{
  return sub_100081FE8(a1, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000D8FF0);
}

uint64_t sub_100081FE8(uint64_t a1, void (*a2)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v4 = sub_100080EF0(a1, a2);
  if (!v3)
  {
    v6 = v4;
    v7 = v5;
    type metadata accessor for TLV();
    sub_100005D9C(v6, v7);
    TLV.__allocating_init(dataRepresentation:)(v6, v7);
    v2 = v8;
    sub_100005DE0(v6, v7);
  }
  return v2;
}

uint64_t sub_100082250()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (qword_1001ACFD0 != -1)
    swift_once(&qword_1001ACFD0, sub_100071AC4);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100003A14(v1, (uint64_t)qword_1001B08B8);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "retrieveMaxNumberProfile()", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = (uint64_t *)TLVTag.maxNumReaderConfigurations.unsafeMutableAddressor();
  result = sub_100081FE8(*v6, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000DA1E0);
  if (!v0)
  {
    v8 = result;
    v9 = (*(uint64_t (**)(void))(*(_QWORD *)result + 216))();
    if ((v9 & 0x100) != 0)
    {
      v11 = Logger.logObject.getter(v9);
      v12 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v11, v12))
      {
        v13 = (uint8_t *)swift_slowAlloc(12, -1);
        v14 = swift_slowAlloc(32, -1);
        v20 = v14;
        *(_DWORD *)v13 = 136315138;
        v18 = sub_1000056EC(0xD00000000000001ALL, 0x800000010016CFA0, &v20);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v13 + 4, v13 + 12);
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "In %s, could not get UInt8 from TLV", v13, 0xCu);
        swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v14, -1, -1);
        swift_slowDealloc(v13, -1, -1);
      }

      v15 = sub_100030724();
      v16 = swift_allocError(&type metadata for APDUSW, v15, 0, 0);
      *v17 = 1;
      swift_willThrow(v16);
      return swift_release(v8);
    }
    else
    {
      v10 = v9;
      swift_release(v8);
      return v10;
    }
  }
  return result;
}

uint64_t sub_1000824C8(uint64_t a1, unint64_t a2)
{
  return sub_1000824D4(a1, a2);
}

uint64_t sub_1000824D4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (qword_1001ACFD0 != -1)
    swift_once(&qword_1001ACFD0, sub_100071AC4);
  v4 = type metadata accessor for Logger(0);
  sub_100003A14(v4, (uint64_t)qword_1001B08B8);
  v5 = swift_bridgeObjectRetain_n(a2, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v18 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain();
    v16 = sub_1000056EC(a1, a2, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "activateProfile(profileID: %s)", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  swift_bridgeObjectRetain();
  v10 = Data.init(hexString:)();
  if (v11 >> 60 != 15)
    __asm { BR              X10 }
  v12 = Logger.logObject.getter(v10);
  v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "could not convert hex string to profile ID (Data)", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  return 0;
}

uint64_t sub_100082BB8()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (qword_1001ACFD0 != -1)
    swift_once(&qword_1001ACFD0, sub_100071AC4);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B08B8);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v14 = v5;
    *(_DWORD *)v4 = 136315138;
    v12 = sub_1000056EC(0xD000000000000012, 0x800000010016CF80, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v4 + 4, v4 + 12);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);
  }

  swift_bridgeObjectRetain();
  v6 = Data.init(hexString:)();
  if (v7 >> 60 != 15)
    __asm { BR              X10 }
  v8 = Logger.logObject.getter(v6);
  v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "unexpected error: failed to convert profile hex string", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  return 0;
}

BOOL sub_100083278()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  Swift::String v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  int v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  Swift::String v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[4];
  uint64_t v50[2];
  unsigned __int16 v51;

  if (qword_1001ACFD0 != -1)
    swift_once(&qword_1001ACFD0, sub_100071AC4);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B08B8);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v50[0] = v5;
    *(_DWORD *)v4 = 136315138;
    v48 = sub_1000056EC(0x79654B7465736572, 0xEB00000000292873, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v4 + 4, v4 + 12);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);
  }

  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v45 = swift_slowAlloc(32, -1);
    v50[0] = v45;
    *(_DWORD *)v9 = 136315138;
    sub_10005E7B4(0x1EA0uLL, 0, 0xC000000000000000);
    v11 = v10;
    v13 = v12;
    v14 = Data.hexString()();
    sub_100005DE0(v11, v13);
    v48 = sub_1000056EC(v14._countAndFlagsBits, (unint64_t)v14._object, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v14._object, v15, v16, v17, v18, v19, v20, v21);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "C-APDU (RESET KEY): %s", v9, 0xCu);
    swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }

  sub_1000DA1E0(7840, 0, 0xC000000000000000, 0, (uint64_t)&v48);
  v22 = v48;
  v23 = v49[0];
  v24 = v49[2];
  v25 = v49[3];
  v26 = sub_100024374((uint64_t)&v48, (uint64_t)v50, (uint64_t *)&unk_1001AE480);
  if ((unint64_t)v50[1] >> 60 == 15)
  {
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "failed to send reset key", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

    return 0;
  }
  else
  {
    v31 = v51;
    sub_100005D9C(v22, v23);
    sub_100005D9C(v24, v25);
    sub_100005D9C(v22, v23);
    v32 = sub_100005D9C(v24, v25);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = swift_slowAlloc(32, -1);
      v47 = v36;
      *(_DWORD *)v35 = 136315138;
      v37 = Data.hexString()();
      v46 = sub_1000056EC(v37._countAndFlagsBits, (unint64_t)v37._object, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v35 + 4, v35 + 12);
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v37._object, v38, v39, v40, v41, v42, v43, v44);
      sub_100030768((uint64_t)&v48);
      sub_100030768((uint64_t)&v48);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "R-APDU: %s", v35, 0xCu);
      swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);
    }
    else
    {
      sub_100030768((uint64_t)&v48);
      sub_100030768((uint64_t)&v48);
    }

    sub_100030768((uint64_t)&v48);
    return v31 == 36864;
  }
}

uint64_t sub_100083768()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B0CA8);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B0CA8);
  if (qword_1001AD140 != -1)
    swift_once(&qword_1001AD140, sub_1000CC2E4);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4DB0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1000837F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for OSSignposter(0);
  sub_1000039D4(v0, qword_1001B0CC0);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B0CC0);
  if (qword_1001ACF08 != -1)
    swift_once(&qword_1001ACF08, sub_10003B9BC);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4B10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

unint64_t sub_100083888(char a1)
{
  if (!a1)
    return 0xD00000000000001ALL;
  if (a1 == 1)
    return 0xD000000000000019;
  return 0xD000000000000018;
}

uint64_t sub_1000838E0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v21 = a5;
  v22 = a4;
  v9 = sub_100003A2C(&qword_1001B0F50);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_100005EF8(a1, v14);
  v15 = sub_100099808();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for KCSCertWithChainResponse.CodingKeys, &type metadata for KCSCertWithChainResponse.CodingKeys, v15, v14, v13);
  LOBYTE(v24) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v24, v9);
  if (!v5)
  {
    v16 = v21;
    v24 = v22;
    v23 = 1;
    v17 = sub_100003A2C((uint64_t *)&unk_1001AE460);
    v18 = sub_10001A4F4(&qword_1001ADA10, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v24, &v23, v9, v17, v18);
    v24 = v16;
    v23 = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v24, &v23, v9, v17, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

unint64_t sub_100083A7C()
{
  char *v0;

  return sub_100083888(*v0);
}

uint64_t sub_100083A84@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000945D4(a1, a2);
  *a3 = result;
  return result;
}

void sub_100083AA8(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_100083AB4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100099808();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100083ADC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100099808();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100083B04@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_100094714(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_100083B30(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1000838E0(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_100083B4C(uint64_t a1, uint64_t a2)
{
  return sub_100093A28(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD **)(a1 + 16), *(_QWORD **)(a1 + 24), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD **)(a2 + 16), *(_QWORD **)(a2 + 24));
}

uint64_t sub_100083B68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_signpost_type_t v20;
  char v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  os_signpost_id_t v26;
  uint8_t *v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  _TtC14softposreaderd12RemoteReader *v34;
  _TtC14softposreaderd12RemoteReader *v35;
  NSObject *v36;
  char *v37;
  uint64_t v38;
  os_signpost_type_t v39;
  uint64_t v40;
  char *v41;
  const char *v42;
  const char *v43;
  _TtC14softposreaderd12RemoteReader *v44;
  _TtC14softposreaderd12RemoteReader *v45;
  NSObject *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  const char *v51;
  const char *v52;
  char *v53;
  char *v54;
  uint8_t *v55;
  os_signpost_id_t v56;
  uint8_t *v58;
  os_signpost_id_t v59;
  uint64_t v60;
  char *v61;
  _TtC14softposreaderd12RemoteReader *v62;
  char *v63;
  void (*v64)(char *, char *, uint64_t);
  const char *v65;
  char *v66;
  uint64_t v67;
  _TtC14softposreaderd12RemoteReader *v68;
  uint64_t v69;
  char *v70;

  v0 = type metadata accessor for OSSignpostError(0);
  v65 = *(const char **)(v0 - 8);
  v1 = __chkstk_darwin(v0);
  v62 = (_TtC14softposreaderd12RemoteReader *)((char *)&v60 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v1);
  v61 = (char *)&v60 - v3;
  v4 = type metadata accessor for OSSignpostID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v66 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v60 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v60 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v60 - v14;
  if (qword_1001AD070 != -1)
    swift_once(&qword_1001AD070, sub_1000837F8);
  v16 = type metadata accessor for OSSignposter(0);
  v17 = sub_100003A14(v16, (uint64_t)qword_1001B0CC0);
  v18 = static OSSignpostID.exclusive.getter();
  v67 = v17;
  v19 = OSSignposter.logHandle.getter(v18);
  v20 = static os_signpost_type_t.begin.getter();
  v21 = OS_os_log.signpostsEnabled.getter();
  v70 = v13;
  v63 = v10;
  if ((v21 & 1) != 0)
  {
    v22 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v22(v13, v15, v4);
    v23 = v4;
    v24 = v0;
    v25 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v25 = 0;
    v26 = OSSignpostID.rawValue.getter(v25);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, v20, v26, "config-prepare-getCertificates", "begin get cert with chain", v25, 2u);
    v27 = v25;
    v0 = v24;
    v4 = v23;
    v13 = v70;
    swift_slowDealloc(v27, -1, -1);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
    v28 = v22;
  }
  else
  {

    v28 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  }
  v64 = v28;
  v28(v13, v15, v4);
  v29 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  v30 = OSSignpostIntervalState.init(id:isOpen:)(v13, 1);
  v31 = *(void (**)(char *, uint64_t))(v5 + 8);
  v31(v15, v4);
  v32 = v69;
  v33 = sub_1000840C4();
  v69 = v32;
  if (v32)
  {
    v36 = OSSignposter.logHandle.getter(v33);
    v37 = v66;
    v38 = OSSignpostIntervalState.signpostID.getter();
    v39 = static os_signpost_type_t.end.getter(v38);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v40 = swift_retain();
      v41 = (char *)v62;
      checkForErrorAndConsumeState(state:)(v40);
      swift_release(v30);
      v42 = v65;
      if ((*((unsigned int (**)(char *, uint64_t))v65 + 11))(v41, v0) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v43 = "[Error] Interval already ended";
      }
      else
      {
        (*((void (**)(char *, uint64_t))v42 + 1))(v41, v0);
        v43 = "end get cert with chain";
      }
      v53 = v70;
      v64(v70, v37, v4);
      v55 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v55 = 0;
      v56 = OSSignpostID.rawValue.getter(v55);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v36, v39, v56, "config-prepare-getCertificates", v43, v55, 2u);
      swift_slowDealloc(v55, -1, -1);

      v31(v37, v4);
    }
    else
    {

      v53 = v37;
    }
    v31(v53, v4);
    return swift_release(v30);
  }
  else
  {
    v66 = (char *)v33;
    v44 = &_swiftEmptyArrayStorage;
    if (v34)
      v45 = v34;
    else
      v45 = &_swiftEmptyArrayStorage;
    if (v35)
      v44 = v35;
    v68 = v44;
    v46 = OSSignposter.logHandle.getter(v33);
    v47 = v63;
    v48 = OSSignpostIntervalState.signpostID.getter();
    LODWORD(v67) = static os_signpost_type_t.end.getter(v48);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v62 = v45;
      v49 = swift_retain();
      v50 = v61;
      checkForErrorAndConsumeState(state:)(v49);
      swift_release(v30);
      v51 = v65;
      if ((*((unsigned int (**)(char *, uint64_t))v65 + 11))(v50, v0) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v52 = "[Error] Interval already ended";
      }
      else
      {
        (*((void (**)(char *, uint64_t))v51 + 1))(v50, v0);
        v52 = "end get cert with chain";
      }
      v65 = v52;
      v54 = v70;
      v64(v70, v47, v4);
      v58 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v58 = 0;
      v59 = OSSignpostID.rawValue.getter(v58);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v46, (os_signpost_type_t)v67, v59, "config-prepare-getCertificates", v65, v58, 2u);
      swift_slowDealloc(v58, -1, -1);

      v31(v47, v4);
    }
    else
    {

      v54 = v47;
    }
    v31(v54, v4);
    swift_release(v30);
    return (uint64_t)v66;
  }
}

uint64_t sub_1000840C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  __n128 v14;
  _QWORD *v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _TtC14softposreaderd12RemoteReader *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  NSObject *v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t *v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  unint64_t v67;
  _TtC14softposreaderd12RemoteReader *v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  uint64_t v76;
  SEL v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  char v85;
  char v86;
  char v87;
  uint64_t v88;
  void *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __n128 v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD v108[3];
  char v109[8];
  _QWORD v110[3];
  char v111[16];
  uint64_t v112;
  uint64_t v113;

  v98 = type metadata accessor for DecodingError(0);
  v96 = *(_QWORD *)(v98 - 8);
  v1 = __chkstk_darwin(v98);
  v95 = (char *)&v94 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v97 = (char *)&v94 - v3;
  v102 = type metadata accessor for URLRequest(0);
  v99 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v5 = (char *)&v94 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v94 - v11;
  URL.appendingPathComponent(_:)(0xD000000000000027, 0x800000010016D160);
  v101 = v7;
  v13 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v100 = v12;
  v103 = v6;
  v13(v10, v12, v6);
  URLRequest.init(url:cachePolicy:timeoutInterval:)(v10, 0, 60.0);
  v14 = URLRequest.httpMethod.setter(5522759, 0xE300000000000000);
  v15 = (_QWORD *)(v0 + OBJC_IVAR____TtC9SPREngine19ConfiguratorBackend_channel);
  v16 = 1;
  v14.n128_u64[0] = 138412290;
  v104 = v14;
  v105 = v5;
  while (1)
  {
    v17 = v16;
    v18 = v15[3];
    v19 = v15[4];
    sub_100005EF8(v15, v18);
    v20 = v106;
    v21 = sub_1000D6218((uint64_t)v105, 0, v18, v19);
    if (!v20)
    {
      v23 = v21;
      v24 = v22;
      type metadata accessor for JSONDecoder(0);
      sub_100005D9C(v23, v24);
      v25 = sub_100097C48();
      v26 = (_TtC14softposreaderd12RemoteReader *)default argument 2 of static JSONDecoder.decodeClean<A>(_:from:userInfo:)();
      static JSONDecoder.decodeClean<A>(_:from:userInfo:)((uint64_t)&type metadata for KCSCertWithChainResponse, v23, v24, (uint64_t)v26, (uint64_t)&type metadata for KCSCertWithChainResponse, v25);
      swift_bridgeObjectRelease(v26, v77, v78, v79, v80, v81, v82, v83);
      sub_100005DE0(v23, v24);
      sub_100005DE0(v23, v24);
      (*(void (**)(char *, uint64_t))(v99 + 8))(v105, v102);
      (*(void (**)(char *, uint64_t))(v101 + 8))(v100, v103);
      return v107;
    }
    v106 = 0;
    _s3__C4CodeOMa_12(0);
    v28 = v27;
    v107 = 5006;
    swift_errorRetain();
    v29 = sub_100005F1C(&qword_1001AD700, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_12, (uint64_t)&unk_10015BBC0);
    v30 = static _ErrorCodeProtocol.~= infix(_:_:)(&v107, v20, v28, v29);
    swift_errorRelease();
    if ((v30 & 1) != 0)
    {
      swift_errorRelease();
      v46 = 2034;
LABEL_17:
      v47 = sub_1000247AC(v46, 0, 0, 0);
      swift_willThrow(v47);
LABEL_18:
      (*(void (**)(char *, uint64_t))(v99 + 8))(v105, v102);
      return (*(uint64_t (**)(char *, uint64_t))(v101 + 8))(v100, v103);
    }
    _s3__C4CodeOMa_0(0);
    v32 = v31;
    v107 = 404;
    swift_errorRetain();
    v33 = sub_100005F1C(&qword_1001ADC10, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_10015DB5C);
    LOBYTE(v32) = static _ErrorCodeProtocol.~= infix(_:_:)(&v107, v20, v32, v33);
    swift_errorRelease();
    if ((v32 & 1) != 0)
    {
      swift_errorRelease();
      v46 = 2032;
      goto LABEL_17;
    }
    v107 = v20;
    swift_errorRetain();
    v34 = sub_100003A2C((uint64_t *)&unk_1001B1280);
    type metadata accessor for SPRHTTPError(0);
    if ((swift_dynamicCast(&v112, &v107, v34, v35, 0) & 1) == 0)
      break;
    swift_errorRelease();
    v36 = (void *)v112;
    if (qword_1001AD068 != -1)
      swift_once(&qword_1001AD068, sub_100083768);
    v37 = type metadata accessor for Logger(0);
    sub_100003A14(v37, (uint64_t)qword_1001B0CA8);
    v38 = v36;
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = swift_slowAlloc(12, -1);
      v42 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v41 = v104.n128_u32[0];
      v43 = v38;
      v44 = _swift_stdlib_bridgeErrorToNSError(v43);
      *(_QWORD *)(v41 + 4) = v44;
      *v42 = v44;

      _os_log_impl((void *)&_mh_execute_header, v39, v40, "HTTP error when renewing certificates: %@", (uint8_t *)v41, 0xCu);
      v45 = sub_100003A2C((uint64_t *)&unk_1001AE430);
      swift_arrayDestroy(v42, 1, v45);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v41, -1, -1);
    }
    else
    {

      v39 = v38;
    }

    swift_errorRelease();
    v16 = 0;
    if ((v17 & 1) == 0)
    {
      v60 = sub_1000247AC(2000, 0xD000000000000019, (void *)0x800000010016D190, 0);
      swift_willThrow(v60);
      (*(void (**)(char *, uint64_t))(v99 + 8))(v105, v102);
      return (*(uint64_t (**)(char *, uint64_t))(v101 + 8))(v100, v103);
    }
  }
  swift_errorRelease();
  v107 = v20;
  swift_errorRetain();
  v48 = v97;
  v49 = v98;
  if (!swift_dynamicCast(v97, &v107, v34, v98, 0))
  {
    swift_errorRelease();
    if (qword_1001AD068 != -1)
      swift_once(&qword_1001AD068, sub_100083768);
    v61 = type metadata accessor for Logger(0);
    sub_100003A14(v61, (uint64_t)qword_1001B0CA8);
    swift_errorRetain();
    v62 = swift_errorRetain();
    v63 = Logger.logObject.getter(v62);
    v64 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v63, v64))
    {
      v65 = (uint8_t *)swift_slowAlloc(12, -1);
      v106 = swift_slowAlloc(32, -1);
      v107 = v106;
      *(_DWORD *)v65 = 136315138;
      v104.n128_u64[0] = (unint64_t)(v65 + 4);
      v112 = v20;
      swift_errorRetain();
      v66 = String.init<A>(describing:)(&v112, v34);
      v68 = (_TtC14softposreaderd12RemoteReader *)v67;
      v112 = sub_1000056EC(v66, v67, &v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v104.n128_u64[0], v65 + 12);
      swift_bridgeObjectRelease(v68, v69, v70, v71, v72, v73, v74, v75);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "client error when renewing certificates: %s", v65, 0xCu);
      v76 = v106;
      swift_arrayDestroy(v106, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v76, -1, -1);
      swift_slowDealloc(v65, -1, -1);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    v107 = 5005;
    swift_errorRetain();
    v85 = static _ErrorCodeProtocol.~= infix(_:_:)(&v107, v20, v28, v29);
    swift_errorRelease();
    if ((v85 & 1) != 0)
      goto LABEL_34;
    v107 = 5004;
    swift_errorRetain();
    v86 = static _ErrorCodeProtocol.~= infix(_:_:)(&v107, v20, v28, v29);
    swift_errorRelease();
    if ((v86 & 1) != 0
      || (v107 = 5003,
          swift_errorRetain(),
          v87 = static _ErrorCodeProtocol.~= infix(_:_:)(&v107, v20, v28, v29),
          swift_errorRelease(),
          (v87 & 1) != 0))
    {
LABEL_34:
      swift_getErrorValue(v20, v109, v108);
      v88 = Error.localizedDescription.getter(v108[1], v108[2]);
      v90 = v89;
      v91 = 2000;
    }
    else
    {
      swift_getErrorValue(v20, v111, v110);
      v88 = Error.localizedDescription.getter(v110[1], v110[2]);
      v90 = v93;
      v91 = 2999;
    }
    v92 = sub_1000247AC(v91, v88, v90, 0);
    swift_willThrow(v92);
    swift_errorRelease();
    goto LABEL_18;
  }
  swift_errorRelease();
  v50 = v96;
  v51 = v95;
  (*(void (**)(char *, char *, uint64_t))(v96 + 32))(v95, v48, v49);
  if (qword_1001AD068 != -1)
    swift_once(&qword_1001AD068, sub_100083768);
  v52 = type metadata accessor for Logger(0);
  v53 = sub_100003A14(v52, (uint64_t)qword_1001B0CA8);
  v54 = Logger.logObject.getter(v53);
  v55 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v54, v55))
  {
    v56 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v56 = 0;
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "cannot decode server response", v56, 2u);
    swift_slowDealloc(v56, -1, -1);
  }

  v57 = Error.localizedDescription.getter(v49, &protocol witness table for DecodingError);
  v59 = sub_1000247AC(2025, v57, v58, 0);
  swift_willThrow(v59);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v49);
  (*(void (**)(char *, uint64_t))(v99 + 8))(v105, v102);
  (*(void (**)(char *, uint64_t))(v101 + 8))(v100, v103);
  return swift_errorRelease();
}

uint64_t sub_100084B6C(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  char *v32;
  Swift::String v33;
  _TtC14softposreaderd12RemoteReader *object;
  Swift::String v35;
  SEL v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _TtC14softposreaderd12RemoteReader *v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  uint64_t v58;
  void **v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(char *, _QWORD, void (*)(uint64_t, uint64_t), _QWORD *, uint64_t, uint64_t);
  void *v69;
  void (*v70)(char *, uint64_t);
  uint64_t KeyPath;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  _QWORD v78[2];
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char v93[24];
  uint64_t v94;
  _BYTE v95[16];
  Swift::String_optional v96[2];

  v84 = a8;
  v86 = a5;
  v87 = a6;
  v81 = *v8;
  v82 = a7;
  v88 = type metadata accessor for URLRequest(0);
  v85 = *(_QWORD *)(v88 - 8);
  v13 = __chkstk_darwin(v88);
  v83 = (char *)v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)v78 - v15;
  v17 = type metadata accessor for URL(0);
  v91 = *(_QWORD *)(v17 - 8);
  v92 = v17;
  v18 = __chkstk_darwin(v17);
  v20 = (char *)v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v90 = (char *)v78 - v21;
  if (qword_1001AD068 != -1)
    swift_once(&qword_1001AD068, sub_100083768);
  v22 = type metadata accessor for Logger(0);
  v23 = sub_100003A14(v22, (uint64_t)qword_1001B0CA8);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v78[1] = v23;
    v26 = swift_slowAlloc(12, -1);
    v80 = a3;
    v27 = (uint8_t *)v26;
    v28 = swift_slowAlloc(32, -1);
    v79 = a4;
    v29 = v28;
    v96[0].value._countAndFlagsBits = v28;
    *(_DWORD *)v27 = 136315138;
    v94 = sub_1000056EC(0xD000000000000032, 0x800000010016D100, &v96[0].value._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95, v27 + 4, v27 + 12);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "ConfiguratorBackend.%s", v27, 0xCu);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    v30 = v29;
    a4 = v79;
    swift_slowDealloc(v30, -1, -1);
    v31 = v27;
    a3 = v80;
    swift_slowDealloc(v31, -1, -1);
  }

  v32 = v90;
  URL.appendingPathComponent(_:)(0xD00000000000001DLL, 0x800000010016D0E0);
  (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v20, v32, v92);
  URLRequest.init(url:cachePolicy:timeoutInterval:)(v20, 0, 60.0);
  URLRequest.httpMethod.setter(1414745936, 0xE400000000000000);
  v96[0].value._countAndFlagsBits = 0x20726572616542;
  v96[0].value._object = (void *)0xE700000000000000;
  v33._countAndFlagsBits = a1;
  v33._object = a2;
  String.append(_:)(v33);
  object = (_TtC14softposreaderd12RemoteReader *)v96[0].value._object;
  v35._object = (void *)0x8000000100165BA0;
  v35._countAndFlagsBits = 0xD000000000000015;
  URLRequest.setValue(_:forHTTPHeaderField:)(v96[0], v35);
  swift_bridgeObjectRelease(object, v36, v37, v38, v39, v40, v41, v42);
  sub_100005D9C(a3, a4);
  v43 = URLRequest.httpBody.setter(a3, a4);
  v44 = Logger.logObject.getter(v43);
  v45 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v44, v45))
  {
    v46 = (uint8_t *)swift_slowAlloc(12, -1);
    v47 = swift_slowAlloc(32, -1);
    v96[0].value._countAndFlagsBits = v47;
    *(_DWORD *)v46 = 136315138;
    swift_beginAccess(v16, v93, 0, 0);
    v48 = sub_100038778();
    v50 = (_TtC14softposreaderd12RemoteReader *)v49;
    v94 = sub_1000056EC(v48, v49, &v96[0].value._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95, v46 + 4, v46 + 12);
    swift_bridgeObjectRelease(v50, v51, v52, v53, v54, v55, v56, v57);
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "kernel manager request: %s", v46, 0xCu);
    swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v47, -1, -1);
    swift_slowDealloc(v46, -1, -1);
  }

  v58 = swift_allocObject(&unk_10019CD58, 24, 7);
  *(_QWORD *)(v58 + 16) = 0;
  v59 = (void **)(v58 + 16);
  v60 = *(_QWORD *)&v89[OBJC_IVAR____TtC9SPREngine19ConfiguratorBackend_channel + 24];
  v61 = *(_QWORD *)&v89[OBJC_IVAR____TtC9SPREngine19ConfiguratorBackend_channel + 32];
  sub_100005EF8(&v89[OBJC_IVAR____TtC9SPREngine19ConfiguratorBackend_channel], v60);
  swift_beginAccess(v16, v96, 0, 0);
  v62 = v85;
  v63 = v83;
  v64 = v88;
  (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v83, v16, v88);
  v65 = (_QWORD *)swift_allocObject(&unk_10019CD80, 48, 7);
  v80 = v58;
  v66 = v82;
  v65[2] = v58;
  v65[3] = v66;
  v89 = v16;
  v67 = v81;
  v65[4] = v84;
  v65[5] = v67;
  v68 = *(uint64_t (**)(char *, _QWORD, void (*)(uint64_t, uint64_t), _QWORD *, uint64_t, uint64_t))(v61 + 32);
  swift_retain();
  swift_retain();
  v69 = (void *)v68(v63, 0, sub_100097ABC, v65, v60, v61);
  swift_release(v65);
  v70 = *(void (**)(char *, uint64_t))(v62 + 8);
  v70(v63, v64);
  v94 = (uint64_t)v69;
  KeyPath = swift_getKeyPath(&unk_100160018);
  v72 = swift_allocObject(&unk_10019CDA8, 32, 7);
  v73 = v86;
  v74 = v87;
  *(_QWORD *)(v72 + 16) = v86;
  *(_QWORD *)(v72 + 24) = v74;
  sub_10003AB68(v73, v74);
  v75 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(KeyPath, 0, sub_100097B30, v72, &protocol witness table for NSObject);
  swift_release(KeyPath);
  swift_release(v72);
  swift_beginAccess(v59, &v94, 1, 0);
  v76 = *v59;
  *v59 = (void *)v75;

  objc_msgSend(v69, "resume");
  (*(void (**)(char *, uint64_t))(v91 + 8))(v90, v92);
  swift_release(v80);
  return ((uint64_t (*)(char *, uint64_t))v70)(v89, v64);
}

void sub_1000851C4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *, void *), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _TtC14softposreaderd12RemoteReader *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  id v58;
  uint64_t *v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _TtC14softposreaderd12RemoteReader *v67;
  _TtC14softposreaderd12RemoteReader *v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  uint64_t v76;
  void (*v77)(uint64_t *, void *);
  uint8_t *v78;
  void (*v79)(uint64_t *, void *);
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  _OWORD v84[11];
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  _OWORD v97[11];
  uint64_t v98[23];

  v81 = a5;
  v80 = type metadata accessor for String.Encoding(0);
  v9 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v11 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003A2C(&qword_1001B0438);
  __chkstk_darwin(v12);
  v14 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v83 - 8);
  v16 = __chkstk_darwin(v83);
  v18 = (char *)&v78 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v82 = (char *)&v78 - v19;
  swift_beginAccess(a3 + 16, &v96, 0, 0);
  v20 = *(void **)(a3 + 16);
  if (v20)
  {
    v21 = v20;
    dispatch thunk of NSKeyValueObservation.invalidate()();

  }
  sub_100005EB4(a1, (uint64_t)v14, &qword_1001B0438);
  v22 = v83;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v83) == 1)
  {
    sub_10005218C((uint64_t)v14, &qword_1001B0438);
    if (a2)
    {
      swift_errorRetain();
      if (qword_1001AD068 != -1)
        swift_once(&qword_1001AD068, sub_100083768);
      v23 = type metadata accessor for Logger(0);
      sub_100003A14(v23, (uint64_t)qword_1001B0CA8);
      swift_errorRetain();
      v24 = swift_errorRetain();
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc(12, -1);
        v28 = swift_slowAlloc(32, -1);
        v98[0] = v28;
        *(_DWORD *)v27 = 136315138;
        *(_QWORD *)&v97[0] = a2;
        swift_errorRetain();
        v29 = sub_100003A2C((uint64_t *)&unk_1001B1280);
        v30 = String.init<A>(describing:)(v97, v29);
        v32 = (_TtC14softposreaderd12RemoteReader *)v31;
        *(_QWORD *)&v97[0] = sub_1000056EC(v30, v31, v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v97, (char *)v97 + 8, v27 + 4, v27 + 12);
        swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "OTA client error: %s", v27, 0xCu);
        swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v28, -1, -1);
        swift_slowDealloc(v27, -1, -1);
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      v98[0] = a2;
      swift_errorRetain();
      v54 = sub_100003A2C((uint64_t *)&unk_1001B1280);
      type metadata accessor for SPRHTTPError(0);
      if ((swift_dynamicCast(v97, v98, v54, v55, 6) & 1) != 0)
      {
        v56 = *(void **)&v97[0];
        v57 = (void *)sub_100094DA8(*(void **)&v97[0]);

      }
      else
      {
        swift_errorRetain();
        v57 = (void *)sub_1000247AC(2000, 0, 0, a2);
        swift_errorRelease();
      }
      sub_100097B38(v97);
      sub_100024374((uint64_t)v97, (uint64_t)v98, &qword_1001AEE08);
      v58 = v57;
      a4(v98, v57);

      swift_errorRelease();
    }
  }
  else
  {
    v79 = a4;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v82, v14, v22);
    if (qword_1001AD068 != -1)
      swift_once(&qword_1001AD068, sub_100083768);
    v40 = type metadata accessor for Logger(0);
    v41 = sub_100003A14(v40, (uint64_t)qword_1001B0CA8);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "using streaming type custom decoder", v44, 2u);
      swift_slowDealloc(v44, -1, -1);
    }

    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v82, v83);
    v45 = type metadata accessor for KCSOTAResponseParser();
    v46 = (_QWORD *)swift_allocObject(v45, 48, 7);
    static String.Encoding.utf8.getter(v46);
    v47 = String.data(using:allowLossyConversion:)(v11, 0, 1819047278, 0xE400000000000000);
    v49 = v48;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v80);
    if (v49 >> 60 == 15)
    {
      __break(1u);
    }
    else
    {
      v46[2] = v47;
      v46[3] = v49;
      v50 = Data.init(contentsOf:options:)(v18, 8);
      v52 = v51;
      v53 = *(void (**)(char *, uint64_t))(v15 + 8);
      v53(v18, v83);
      v46[4] = v50;
      v46[5] = v52;
      sub_1000C0948();
      v93 = v97[8];
      v94 = v97[9];
      v95 = v97[10];
      v89 = v97[4];
      v90 = v97[5];
      v91 = v97[6];
      v92 = v97[7];
      v85 = v97[0];
      v86 = v97[1];
      v87 = v97[2];
      v88 = v97[3];
      sub_100093D90((uint64_t *)v97);
      v59 = sub_100093D90((uint64_t *)v97);
      v60 = Logger.logObject.getter(v59);
      v61 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v60, v61))
      {
        v63 = (uint8_t *)swift_slowAlloc(12, -1);
        v64 = swift_slowAlloc(32, -1);
        v80 = (uint64_t)v53;
        v65 = v64;
        v98[0] = v64;
        *(_DWORD *)v63 = 136315138;
        v78 = v63 + 4;
        sub_100093D90((uint64_t *)v97);
        v66 = sub_1000C2B18();
        v68 = v67;
        sub_100097B58((uint64_t *)v97);
        *(_QWORD *)&v84[0] = sub_1000056EC(v66, (unint64_t)v68, v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v84, (char *)v84 + 8, v78, v63 + 12);
        swift_bridgeObjectRelease(v68, v69, v70, v71, v72, v73, v74, v75);
        sub_100097B58((uint64_t *)v97);
        sub_100097B58((uint64_t *)v97);
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "KCSOTAResponse: %s", v63, 0xCu);
        swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
        v76 = v65;
        v53 = (void (*)(char *, uint64_t))v80;
        swift_slowDealloc(v76, -1, -1);
        swift_slowDealloc(v63, -1, -1);
      }
      else
      {
        sub_100097B58((uint64_t *)v97);
        sub_100097B58((uint64_t *)v97);
      }

      v77 = v79;
      v84[8] = v93;
      v84[9] = v94;
      v84[10] = v95;
      v84[4] = v89;
      v84[5] = v90;
      v84[6] = v91;
      v84[7] = v92;
      v84[0] = v85;
      v84[1] = v86;
      v84[2] = v87;
      v84[3] = v88;
      BitString.init(data:unusedBits:)(v84);
      sub_100024374((uint64_t)v84, (uint64_t)v98, &qword_1001AEE08);
      sub_100093D90((uint64_t *)v97);
      v77(v98, 0);
      sub_100097B58((uint64_t *)v97);
      swift_release(v46);
      sub_100097B58((uint64_t *)v97);
      v53(v82, v83);
    }
  }
}

uint64_t sub_100085B74(id *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  id v4;
  uint64_t result;
  uint64_t v6;
  double v7;
  uint64_t v8;

  v4 = *a1;
  result = (uint64_t)objc_msgSend(*a1, "countOfBytesReceived");
  v6 = 100 * result;
  if ((unsigned __int128)(result * (__int128)100) >> 64 != (100 * result) >> 63)
  {
    __break(1u);
    goto LABEL_12;
  }
  result = (uint64_t)objc_msgSend(v4, "countOfBytesExpectedToReceive");
  if (!a3)
    return result;
  v7 = ceil((double)v6 / (double)result);
  if (v7 <= 100.0)
  {
    if ((~*(_QWORD *)&v7 & 0x7FF0000000000000) != 0)
    {
      if (v7 > -9.22337204e18)
      {
        if (v7 < 9.22337204e18)
        {
          v8 = (uint64_t)v7;
          return a3(v8);
        }
LABEL_14:
        __break(1u);
        return result;
      }
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v8 = 100;
  return a3(v8);
}

uint64_t sub_100085C4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC9SPREngine19ConfiguratorBackend_configuratorUrl;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_100005D3C((_QWORD *)(v0 + OBJC_IVAR____TtC9SPREngine19ConfiguratorBackend_channel));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100085CAC()
{
  return type metadata accessor for ConfiguratorBackend(0);
}

uint64_t type metadata accessor for ConfiguratorBackend(uint64_t a1)
{
  return sub_1000075E0(a1, qword_1001B0D10, (uint64_t)&nominal type descriptor for ConfiguratorBackend);
}

uint64_t sub_100085CC8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "(";
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100085D3C()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_100083B68();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_100085D70(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_100084B6C(a1, a2, a3, a4, a5, a6, a7, a8);
}

void sub_100085D90(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, void (*a5)(_QWORD, uint64_t), uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  os_signpost_type_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int (**v52)(_QWORD, _QWORD);
  const char *v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  uint8_t *v56;
  os_signpost_id_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _TtC14softposreaderd12RemoteReader *v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  _TtC14softposreaderd12RemoteReader *v96;
  os_unfair_lock_s *v97;
  uint64_t v98;
  os_unfair_lock_s *v99;
  SEL v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  void *v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  _TtC14softposreaderd12RemoteReader *v119;
  unint64_t v120;
  SEL v121;
  id v122;
  id v123;
  id v124;
  id v125;
  id v126;
  id v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _TtC14softposreaderd12RemoteReader *v149;
  os_unfair_lock_s *v150;
  uint64_t v151;
  os_unfair_lock_s *v152;
  SEL v153;
  id v154;
  id v155;
  id v156;
  id v157;
  id v158;
  id v159;
  _QWORD *v160;
  os_unfair_lock_s *v161;
  uint64_t v162;
  os_unfair_lock_s *v163;
  char *v164;
  uint64_t v165;
  NSObject *v166;
  os_signpost_type_t v167;
  void (*v168)(char *, char *, uint64_t);
  uint64_t v169;
  uint8_t *v170;
  os_signpost_id_t v171;
  uint8_t *v172;
  uint64_t v173;
  uint64_t v174;
  NSObject *v175;
  os_log_type_t v176;
  uint8_t *v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  void *v190;
  void *v191;
  void *v192;
  _TtC14softposreaderd12RemoteReader *v193;
  os_unfair_lock_s *v194;
  uint64_t v195;
  os_unfair_lock_s *v196;
  SEL v197;
  id v198;
  id v199;
  id v200;
  id v201;
  id v202;
  id v203;
  id v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _TtC14softposreaderd12RemoteReader *v212;
  SEL v213;
  id v214;
  id v215;
  id v216;
  id v217;
  id v218;
  id v219;
  uint64_t v220;
  NSObject *v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  char v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unsigned int (**v229)(_QWORD, _QWORD);
  const char *v230;
  uint64_t v231;
  uint64_t v232;
  uint8_t *v233;
  os_signpost_id_t v234;
  uint64_t v235;
  uint64_t v236;
  int *v237;
  _QWORD *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  void *v250;
  void *v251;
  void *v252;
  void *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  _TtC14softposreaderd12RemoteReader *v257;
  uint64_t v258;
  os_unfair_lock_s *v259;
  uint64_t v260;
  os_unfair_lock_s *v261;
  SEL v262;
  id v263;
  id v264;
  id v265;
  id v266;
  id v267;
  id v268;
  _QWORD *v269;
  _QWORD *v270;
  unsigned int (**v271)(_QWORD, _QWORD);
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  _TtC14softposreaderd12RemoteReader *v276;
  _TtC14softposreaderd12RemoteReader *v277;
  SEL v278;
  id v279;
  id v280;
  id v281;
  id v282;
  id v283;
  id v284;
  uint64_t v285;
  void (*v286)(uint64_t, char *, uint64_t);
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  const char *v295;
  void *v296;
  void *v297;
  void *v298;
  void *v299;
  void *v300;
  void *v301;
  _TtC14softposreaderd12RemoteReader **v302;
  _TtC14softposreaderd12RemoteReader *v303;
  _TtC14softposreaderd12RemoteReader *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  _TtC14softposreaderd12RemoteReader *v312;
  _TtC14softposreaderd12RemoteReader *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  _TtC14softposreaderd12RemoteReader *v318;
  _TtC14softposreaderd12RemoteReader *v319;
  SEL v320;
  id v321;
  id v322;
  id v323;
  id v324;
  id v325;
  id v326;
  uint64_t v327;
  SEL v328;
  id v329;
  id v330;
  id v331;
  id v332;
  id v333;
  id v334;
  SEL v335;
  id v336;
  id v337;
  id v338;
  id v339;
  id v340;
  id v341;
  void (*v342)(uint64_t, uint64_t);
  uint64_t *v343;
  uint64_t v344;
  unsigned int (*v345)(uint64_t, uint64_t, uint64_t);
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t (*v349)(uint64_t, uint64_t, uint64_t);
  uint64_t v350;
  void (*v351)(_QWORD, _QWORD);
  uint64_t v352;
  uint64_t v353;
  uint64_t (*v354)(uint64_t, uint64_t, uint64_t);
  void (*v355)(uint64_t, uint64_t, uint64_t);
  uint64_t v356;
  uint64_t v357;
  const char *v358;
  void *v359;
  void *v360;
  void *v361;
  void *v362;
  void *v363;
  void *v364;
  _TtC14softposreaderd12RemoteReader **v365;
  _TtC14softposreaderd12RemoteReader *v366;
  _TtC14softposreaderd12RemoteReader *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  _TtC14softposreaderd12RemoteReader *v374;
  _TtC14softposreaderd12RemoteReader *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  _TtC14softposreaderd12RemoteReader *v380;
  _TtC14softposreaderd12RemoteReader *v381;
  SEL v382;
  id v383;
  id v384;
  id v385;
  id v386;
  id v387;
  id v388;
  SEL v389;
  id v390;
  id v391;
  id v392;
  id v393;
  id v394;
  id v395;
  SEL v396;
  id v397;
  id v398;
  id v399;
  id v400;
  id v401;
  id v402;
  unsigned int (**v403)(_QWORD, _QWORD);
  _QWORD *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  unsigned int (**v421)(_QWORD, _QWORD);
  uint64_t v422;
  _QWORD *v423;
  char *v424;
  void (*v425)(uint64_t, uint64_t, uint64_t);
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  int *v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  __int128 v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  int *v473;
  void (*v474)(uint64_t, uint64_t, uint64_t);
  char *v475;
  _QWORD *v476;
  uint64_t v477;
  unsigned int (**v478)(_QWORD, _QWORD);
  uint64_t v479;
  uint64_t v480;
  char *v481;
  uint64_t v482;
  void (*v483)(_QWORD, uint64_t);
  _QWORD *v484;
  void *v485;
  uint64_t v486[23];
  _BYTE v487[176];
  _OWORD v488[11];
  __int128 v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  _BYTE v500[184];

  v472 = a8;
  v477 = a7;
  v482 = a6;
  v483 = a5;
  v484 = a4;
  v480 = a1;
  sub_100024374(a1, (uint64_t)v487, &qword_1001AEE08);
  sub_100024374((uint64_t)v487, (uint64_t)v500, &qword_1001AEE08);
  v12 = sub_100003A2C((uint64_t *)&unk_1001B36F0);
  v13 = __chkstk_darwin(v12);
  v462 = (uint64_t)&v454 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v465 = (uint64_t)&v454 - v15;
  v16 = type metadata accessor for UUID(0);
  v469 = *(_QWORD *)(v16 - 8);
  v470 = v16;
  v17 = __chkstk_darwin(v16);
  v459 = (uint64_t)&v454 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v461 = (uint64_t)&v454 - v20;
  v21 = __chkstk_darwin(v19);
  v460 = (uint64_t)&v454 - v22;
  v23 = __chkstk_darwin(v21);
  v463 = (uint64_t)&v454 - v24;
  v25 = __chkstk_darwin(v23);
  v464 = (uint64_t)&v454 - v26;
  v27 = __chkstk_darwin(v25);
  v468 = (uint64_t)&v454 - v28;
  __chkstk_darwin(v27);
  v467 = (uint64_t)&v454 - v29;
  v473 = (int *)_s14InstallPackageVMa(0);
  __chkstk_darwin(v473);
  v476 = (uint64_t *)((char *)&v454 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  v31 = type metadata accessor for OSSignpostError(0);
  v478 = *(unsigned int (***)(_QWORD, _QWORD))(v31 - 8);
  v479 = v31;
  v32 = __chkstk_darwin(v31);
  v466 = (uint64_t)&v454 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v35 = (char *)&v454 - v34;
  v36 = type metadata accessor for OSSignpostID(0);
  v37 = *(_QWORD *)(v36 - 8);
  v38 = __chkstk_darwin(v36);
  v471 = (uint64_t)&v454 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __chkstk_darwin(v38);
  v475 = (char *)&v454 - v41;
  v42 = __chkstk_darwin(v40);
  v481 = (char *)&v454 - v43;
  __chkstk_darwin(v42);
  v45 = (char *)&v454 - v44;
  if (qword_1001AD070 != -1)
    swift_once(&qword_1001AD070, sub_1000837F8);
  v46 = type metadata accessor for OSSignposter(0);
  v474 = (void (*)(uint64_t, uint64_t, uint64_t))sub_100003A14(v46, (uint64_t)qword_1001B0CC0);
  v47 = OSSignposter.logHandle.getter(v474);
  v48 = OSSignpostIntervalState.signpostID.getter();
  v49 = static os_signpost_type_t.end.getter(v48);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v50 = swift_retain();
    checkForErrorAndConsumeState(state:)(v50);
    swift_release(a3);
    v52 = v478;
    v51 = v479;
    if (((unsigned int (**)(char *, uint64_t))v478)[11](v35, v479) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v53 = "[Error] Interval already ended";
    }
    else
    {
      ((unsigned int (**)(char *, uint64_t))v52)[1](v35, v51);
      v53 = "end fetch SLAM";
    }
    v55 = (uint64_t)v481;
    (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v481, v45, v36);
    v56 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v56 = 0;
    v57 = OSSignpostID.rawValue.getter(v56);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v47, v49, v57, "config-install-fetchSLAM", v53, v56, 2u);
    swift_slowDealloc(v56, -1, -1);

    v54 = *(void (**)(char *, uint64_t))(v37 + 8);
    v54(v45, v36);
    v54((char *)v55, v36);
  }
  else
  {

    v54 = *(void (**)(char *, uint64_t))(v37 + 8);
    v54(v45, v36);
  }
  if (a2)
  {
    swift_errorRetain();
    if (qword_1001AD068 != -1)
      swift_once(&qword_1001AD068, sub_100083768);
    v58 = type metadata accessor for Logger(0);
    sub_100003A14(v58, (uint64_t)qword_1001B0CA8);
    swift_errorRetain();
    v59 = swift_errorRetain();
    v60 = Logger.logObject.getter(v59);
    v61 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v60, v61))
    {
      v62 = (uint8_t *)swift_slowAlloc(12, -1);
      v63 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v489 = v63;
      *(_DWORD *)v62 = 136315138;
      *(_QWORD *)&v488[0] = a2;
      swift_errorRetain();
      v64 = sub_100003A2C((uint64_t *)&unk_1001B1280);
      v65 = String.init<A>(describing:)(v488, v64);
      v67 = (_TtC14softposreaderd12RemoteReader *)v66;
      *(_QWORD *)&v488[0] = sub_1000056EC(v65, v66, (uint64_t *)&v489);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v488, (char *)v488 + 8, v62 + 4, v62 + 12);
      swift_bridgeObjectRelease(v67, v68, v69, v70, v71, v72, v73, v74);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "OTA client error: %s", v62, 0xCu);
      swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v63, -1, -1);
      swift_slowDealloc(v62, -1, -1);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    v108 = (void *)_convertErrorToNSError(_:)(a2);
    v109 = objc_msgSend(v108, "userInfo");
    v110 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v109, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
    v119 = (_TtC14softposreaderd12RemoteReader *)v112;
    if (*(_QWORD *)(v110 + 16) && (v120 = sub_10000ADC4(v111, v112), (v112 & 1) != 0))
    {
      sub_100005D5C(*(_QWORD *)(v110 + 56) + 32 * v120, (uint64_t)&v489);
    }
    else
    {
      v489 = 0u;
      v490 = 0u;
    }
    swift_bridgeObjectRelease(v119, (SEL)v112, v113, v114, v115, v116, v117, v118);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v110, v121, v122, v123, v124, v125, v126, v127);
    if (*((_QWORD *)&v490 + 1))
    {
      type metadata accessor for SPRHTTPError(0);
      if (swift_dynamicCast(v488, &v489, (char *)&type metadata for Any + 8, v128, 6))
      {
        v129 = *(void **)&v488[0];
        goto LABEL_30;
      }
    }
    else
    {
      sub_10005218C((uint64_t)&v489, &qword_1001B12E0);
    }
    v129 = 0;
LABEL_30:
    v130 = v484[34];
    v131 = sub_100003A2C(&qword_1001ADA30);
    v132 = swift_allocObject(v131, 152, 7);
    *(_OWORD *)(v132 + 16) = xmmword_10015E090;
    *(_BYTE *)(v132 + 32) = 8;
    v133 = objc_msgSend(v108, "code");
    *(_QWORD *)(v132 + 64) = &type metadata for Int;
    *(_QWORD *)(v132 + 40) = v133;
    *(_BYTE *)(v132 + 72) = 10;
    if (v129)
    {
      *(_QWORD *)&v489 = v129;
      type metadata accessor for SPRHTTPError(0);
      v142 = v141;
      v143 = sub_100005F1C(&qword_1001ADBE0, (uint64_t (*)(uint64_t))type metadata accessor for SPRHTTPError, (uint64_t)&unk_10015DC70);
      v144 = _BridgedStoredNSError.errorCode.getter(v142, v143);
      *(_QWORD *)(v132 + 104) = &type metadata for Int;
      *(_QWORD *)(v132 + 80) = v144;
      *(_BYTE *)(v132 + 112) = 11;
      v145 = v129;
      v146 = related decl 'e' for SPRHTTPErrorCode.serverCode.getter();
      v148 = v147;

      if (v148)
      {
        *(_QWORD *)(v132 + 144) = &type metadata for String;
        *(_QWORD *)(v132 + 120) = v146;
        *(_QWORD *)(v132 + 128) = v148;
LABEL_35:
        v149 = (_TtC14softposreaderd12RemoteReader *)sub_1000E862C(v132, v134, v135, v136, v137, v138, v139, v140);
        v150 = *(os_unfair_lock_s **)(v130 + 56);
        v151 = (uint64_t)&v150[4];
        v152 = v150 + 8;
        os_unfair_lock_lock(v150 + 8);
        sub_10005F610(v151, (uint64_t)v149);
        os_unfair_lock_unlock(v152);
        swift_bridgeObjectRelease(v149, v153, v154, v155, v156, v157, v158, v159);
        swift_errorRetain();
        v483(0, a2);
        swift_errorRelease();

        swift_errorRelease();
        return;
      }
    }
    else
    {
      *(_OWORD *)(v132 + 80) = 0u;
      *(_OWORD *)(v132 + 96) = 0u;
      *(_BYTE *)(v132 + 112) = 11;
    }
    *(_QWORD *)(v132 + 120) = 0;
    *(_QWORD *)(v132 + 128) = 0;
    *(_QWORD *)(v132 + 136) = 0;
    *(_QWORD *)(v132 + 144) = 0;
    goto LABEL_35;
  }
  sub_100024374(v480, (uint64_t)v488, &qword_1001AEE08);
  if (sub_100093D78((uint64_t)v488) == 1)
  {
    v75 = v484;
    if (qword_1001AD068 != -1)
      swift_once(&qword_1001AD068, sub_100083768);
    v76 = type metadata accessor for Logger(0);
    v77 = sub_100003A14(v76, (uint64_t)qword_1001B0CA8);
    v78 = Logger.logObject.getter(v77);
    v79 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v78, v79))
    {
      v80 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v80 = 0;
      _os_log_impl((void *)&_mh_execute_header, v78, v79, "no response from server", v80, 2u);
      swift_slowDealloc(v80, -1, -1);
    }

    v81 = (void *)sub_1000247AC(2000, 0, 0, 0);
    v82 = v75[34];
    v83 = sub_100003A2C(&qword_1001ADA30);
    v84 = swift_allocObject(v83, 72, 7);
    *(_OWORD *)(v84 + 16) = xmmword_10015A5F0;
    *(_BYTE *)(v84 + 32) = 8;
    *(_QWORD *)&v489 = v81;
    type metadata accessor for ConfigurationError(0);
    v86 = v85;
    v87 = sub_100005F1C((unint64_t *)&qword_1001AD750, (uint64_t (*)(uint64_t))type metadata accessor for ConfigurationError, (uint64_t)&unk_10015BC28);
    v88 = _BridgedStoredNSError.errorCode.getter(v86, v87);
    *(_QWORD *)(v84 + 64) = &type metadata for Int;
    *(_QWORD *)(v84 + 40) = v88;
    v96 = (_TtC14softposreaderd12RemoteReader *)sub_1000E862C(v84, v89, v90, v91, v92, v93, v94, v95);
    v97 = *(os_unfair_lock_s **)(v82 + 56);
    v98 = (uint64_t)&v97[4];
    v99 = v97 + 8;
    os_unfair_lock_lock(v97 + 8);
    sub_10005F610(v98, (uint64_t)v96);
    os_unfair_lock_unlock(v99);
    swift_bridgeObjectRelease(v96, v100, v101, v102, v103, v104, v105, v106);
    v107 = v81;
    v483(0, (uint64_t)v81);

    return;
  }
  v497 = v488[8];
  v498 = v488[9];
  v499 = v488[10];
  v493 = v488[4];
  v494 = v488[5];
  v495 = v488[6];
  v496 = v488[7];
  v489 = v488[0];
  v490 = v488[1];
  v491 = v488[2];
  v492 = v488[3];
  v160 = v484;
  sub_100005EF8(v484 + 19, v484[22]);
  sub_100024374((uint64_t)v500, (uint64_t)v486, &qword_1001AEE08);
  sub_100093D90(v486);
  if ((sub_1000F52D4(v477, 0.0) & 1) != 0)
  {
    v458 = v160[34];
    v161 = *(os_unfair_lock_s **)(v458 + 56);
    v162 = (uint64_t)&v161[4];
    v163 = v161 + 8;
    os_unfair_lock_lock(v161 + 8);
    sub_100080108(v162, 0);
    os_unfair_lock_unlock(v163);
    v164 = v475;
    v165 = static OSSignpostID.exclusive.getter();
    v166 = OSSignposter.logHandle.getter(v165);
    v167 = static os_signpost_type_t.begin.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v168 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
      v169 = (uint64_t)v481;
      v168(v481, v164, v36);
      v170 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v170 = 0;
      v171 = OSSignpostID.rawValue.getter(v170);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v166, v167, v171, "config-install-validateSLAM", "begin validate and persist SLAM", v170, 2u);
      v172 = v170;
      v164 = v475;
      swift_slowDealloc(v172, -1, -1);

      v54((char *)v169, v36);
    }
    else
    {

      v168 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
      v169 = (uint64_t)v481;
    }
    v168((char *)v169, v164, v36);
    v205 = type metadata accessor for OSSignpostIntervalState(0);
    swift_allocObject(v205, *(unsigned int *)(v205 + 48), *(unsigned __int16 *)(v205 + 52));
    v206 = OSSignpostIntervalState.init(id:isOpen:)(v169, 1);
    v54(v164, v36);
    sub_100087ACC((uint64_t)&v489, v476);
    v207 = v484[32];
    v475 = (char *)v484[33];
    sub_100005EF8(v484 + 29, v207);
    v208 = sub_100003A2C(&qword_1001ADA18);
    v209 = swift_allocObject(v208, 88, 7);
    v456 = xmmword_10015A5F0;
    *(_OWORD *)(v209 + 16) = xmmword_10015A5F0;
    *(_QWORD *)(v209 + 32) = 1684631668;
    *(_QWORD *)(v209 + 40) = 0xE400000000000000;
    v210 = UUID.uuidString.getter(v209);
    *(_QWORD *)(v209 + 72) = &type metadata for String;
    *(_QWORD *)(v209 + 80) = &protocol witness table for String;
    *(_QWORD *)(v209 + 48) = v210;
    *(_QWORD *)(v209 + 56) = v211;
    v212 = (_TtC14softposreaderd12RemoteReader *)sub_1000E84EC(v209);
    sub_100115684(16, (uint64_t)v212, v207, (uint64_t)v475);
    swift_bridgeObjectRelease(v212, v213, v214, v215, v216, v217, v218, v219);
    v221 = OSSignposter.logHandle.getter(v220);
    v222 = v471;
    v223 = OSSignpostIntervalState.signpostID.getter();
    v224 = static os_signpost_type_t.end.getter(v223);
    v225 = OS_os_log.signpostsEnabled.getter();
    v457 = v206;
    if ((v225 & 1) != 0)
    {
      LODWORD(v474) = v224;
      v475 = (char *)v168;
      v226 = swift_retain();
      v227 = v466;
      checkForErrorAndConsumeState(state:)(v226);
      swift_release(v206);
      v229 = v478;
      v228 = v479;
      if (v478[11](v227, v479) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v230 = "[Error] Interval already ended";
      }
      else
      {
        v229[1](v227, v228);
        v230 = "end validate and persist SLAM";
      }
      v231 = (uint64_t)v481;
      ((void (*)(char *, uint64_t, uint64_t))v475)(v481, v222, v36);
      v232 = v222;
      v233 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v233 = 0;
      v234 = OSSignpostID.rawValue.getter(v233);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v221, (os_signpost_type_t)v474, v234, "config-install-validateSLAM", v230, v233, 2u);
      swift_slowDealloc(v233, -1, -1);

      v222 = v231;
      v54((char *)v232, v36);
    }
    else
    {

    }
    v54((char *)v222, v36);
    v235 = sub_100003A2C(&qword_1001ADA30);
    v236 = swift_allocObject(v235, 232, 7);
    *(_OWORD *)(v236 + 16) = xmmword_10015E3E0;
    *(_BYTE *)(v236 + 32) = 3;
    v237 = v473;
    v238 = v476;
    v481 = (char *)v476 + v473[9];
    v239 = UUID.uuidString.getter(v236);
    v241 = sub_100081EE4(v239, v240);
    *(_QWORD *)(v236 + 64) = &type metadata for String;
    *(_QWORD *)(v236 + 40) = v241;
    *(_QWORD *)(v236 + 48) = v242;
    *(_BYTE *)(v236 + 72) = 4;
    v243 = (char *)v238 + v237[8];
    v244 = UUID.uuidString.getter(v241);
    v246 = sub_100081EE4(v244, v245);
    *(_QWORD *)(v236 + 104) = &type metadata for String;
    *(_QWORD *)(v236 + 80) = v246;
    *(_QWORD *)(v236 + 88) = v247;
    *(_BYTE *)(v236 + 112) = 2;
    if (!v238[21] || (v238[19] & 1) != 0)
    {
      *(_OWORD *)(v236 + 120) = 0u;
      *(_OWORD *)(v236 + 136) = 0u;
    }
    else
    {
      v254 = v238[18];
      *(_QWORD *)(v236 + 144) = &type metadata for Int;
      *(_QWORD *)(v236 + 120) = v254;
    }
    *(_BYTE *)(v236 + 152) = 1;
    if (!v238[32] || (v238[30] & 1) != 0)
    {
      *(_OWORD *)(v236 + 160) = 0u;
      *(_OWORD *)(v236 + 176) = 0u;
    }
    else
    {
      v255 = v238[29];
      *(_QWORD *)(v236 + 184) = &type metadata for Int;
      *(_QWORD *)(v236 + 160) = v255;
    }
    *(_BYTE *)(v236 + 192) = 0;
    if (!v238[10] || (v238[8] & 1) != 0)
    {
      *(_OWORD *)(v236 + 200) = 0u;
      *(_OWORD *)(v236 + 216) = 0u;
    }
    else
    {
      v256 = v238[7];
      *(_QWORD *)(v236 + 224) = &type metadata for Int;
      *(_QWORD *)(v236 + 200) = v256;
    }
    v257 = (_TtC14softposreaderd12RemoteReader *)sub_1000E862C(v236, v247, v248, v249, v250, v251, v252, v253);
    v258 = v458;
    v259 = *(os_unfair_lock_s **)(v458 + 56);
    v260 = (uint64_t)&v259[4];
    v261 = v259 + 8;
    os_unfair_lock_lock(v259 + 8);
    sub_10005F610(v260, (uint64_t)v257);
    os_unfair_lock_unlock(v261);
    swift_bridgeObjectRelease(v257, v262, v263, v264, v265, v266, v267, v268);
    v269 = v476;
    v270 = v484;
    sub_100089488((uint64_t)v476, a9 & 1, a10);
    v478 = v271;
    v272 = v472;
    v273 = UUID.uuidString.getter(v271);
    v275 = sub_100081EE4(v273, v274);
    v277 = v276;
    sub_100005EF8((_QWORD *)(v258 + 16), *(_QWORD *)(v258 + 40));
    sub_10003977C(0x29u, v275, (unint64_t)v277);
    swift_bridgeObjectRelease(v277, v278, v279, v280, v281, v282, v283, v284);
    v484 = (_QWORD *)v270[13];
    v285 = v470;
    v286 = *(void (**)(uint64_t, char *, uint64_t))(v469 + 16);
    v286(v467, v243, v470);
    v286(v468, v481, v285);
    v287 = sub_100003A2C(&qword_1001B0DD0);
    v479 = type metadata accessor for KernelTokenHostConfigurationMapping(0);
    v288 = *(_QWORD *)(v479 - 8);
    v289 = *(_QWORD *)(v288 + 72);
    v290 = *(unsigned __int8 *)(v288 + 80);
    v291 = (v290 + 32) & ~v290;
    v471 = v287;
    v458 = v291 + v289;
    v455 = v290 | 7;
    v292 = swift_allocObject(v287, v291 + v289, v290 | 7);
    *(_OWORD *)(v292 + 16) = v456;
    v466 = v291;
    v293 = v292 + v291;
    v294 = v464;
    v474 = (void (*)(uint64_t, uint64_t, uint64_t))v286;
    v286(v464, (char *)v272, v285);
    v302 = (_TtC14softposreaderd12RemoteReader **)((char *)v269 + v473[11]);
    v303 = &_swiftEmptyArrayStorage;
    if (*v302 == (_TtC14softposreaderd12RemoteReader *)1)
      goto LABEL_68;
    v304 = v302[1];
    if (*v302)
      v303 = *v302;
    swift_bridgeObjectRetain();
    if (!v304)
    {
LABEL_68:
      swift_bridgeObjectRelease(0, v295, v296, v297, v298, v299, v300, v301);
      v304 = &_swiftEmptyArrayStorage;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    v305 = v469;
    v475 = *(char **)(v469 + 32);
    v306 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v475)(v293, v294, v285);
    v307 = v479;
    *(_QWORD *)(v293 + *(int *)(v479 + 20)) = v303;
    *(_QWORD *)(v293 + *(int *)(v307 + 24)) = v304;
    v308 = v467;
    v309 = UUID.uuidString.getter(v306);
    v311 = sub_100081EE4(v309, v310);
    v313 = v312;
    v314 = v468;
    v315 = UUID.uuidString.getter(v311);
    v317 = sub_100081EE4(v315, v316);
    v319 = v318;
    sub_1000B1FB8(v311, v313, v317, v318, (_TtC14softposreaderd12RemoteReader *)v292);
    swift_bridgeObjectRelease(v313, v320, v321, v322, v323, v324, v325, v326);
    v327 = v470;
    swift_bridgeObjectRelease(v319, v328, v329, v330, v331, v332, v333, v334);
    sub_1000B0CA0();
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v292, v335, v336, v337, v338, v339, v340, v341);
    v342 = *(void (**)(uint64_t, uint64_t))(v305 + 8);
    v342(v314, v327);
    v342(v308, v327);
    v343 = v476;
    v344 = v465;
    sub_100005EB4((uint64_t)v476 + v473[10], v465, (uint64_t *)&unk_1001B36F0);
    v345 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v305 + 48);
    if (v345(v344, 1, v327) == 1)
    {
      v346 = v344;
    }
    else
    {
      v347 = v463;
      v348 = v344;
      v349 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v475;
      ((void (*)(uint64_t, uint64_t, uint64_t))v475)(v463, v348, v327);
      v350 = v462;
      sub_100005EB4(v477, v462, (uint64_t *)&unk_1001B36F0);
      if (v345(v350, 1, v327) != 1)
      {
        v352 = v460;
        v353 = v350;
        v354 = v349;
        v349(v460, v353, v327);
        v355 = v474;
        v474(v461, (uint64_t)v481, v327);
        v356 = swift_allocObject(v471, v458, v455);
        *(_OWORD *)(v356 + 16) = v456;
        v357 = v356 + v466;
        v355(v459, v352, v327);
        v365 = (_TtC14softposreaderd12RemoteReader **)((char *)v343 + v473[12]);
        v366 = &_swiftEmptyArrayStorage;
        if (*v365 == (_TtC14softposreaderd12RemoteReader *)1)
          goto LABEL_79;
        v367 = v365[1];
        if (*v365)
          v366 = *v365;
        swift_bridgeObjectRetain();
        if (!v367)
        {
LABEL_79:
          swift_bridgeObjectRelease(0, v358, v359, v360, v361, v362, v363, v364);
          v367 = &_swiftEmptyArrayStorage;
        }
        else
        {
          swift_bridgeObjectRetain();
        }
        v368 = v354(v357, v459, v327);
        v369 = v479;
        *(_QWORD *)(v357 + *(int *)(v479 + 20)) = v366;
        *(_QWORD *)(v357 + *(int *)(v369 + 24)) = v367;
        v370 = v463;
        v371 = UUID.uuidString.getter(v368);
        v373 = sub_100081EE4(v371, v372);
        v375 = v374;
        v376 = v461;
        v377 = UUID.uuidString.getter(v373);
        v379 = sub_100081EE4(v377, v378);
        v381 = v380;
        sub_1000B1FB8(v373, v375, v379, v380, (_TtC14softposreaderd12RemoteReader *)v356);
        swift_bridgeObjectRelease(v375, v382, v383, v384, v385, v386, v387, v388);
        swift_bridgeObjectRelease(v381, v389, v390, v391, v392, v393, v394, v395);
        sub_1000B0CA0();
        swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v356, v396, v397, v398, v399, v400, v401, v402);
        v342(v376, v327);
        v342(v460, v327);
        v342(v370, v327);
        v351 = v483;
        v343 = v476;
        goto LABEL_81;
      }
      v342(v347, v327);
      v346 = v350;
    }
    sub_10005218C(v346, (uint64_t *)&unk_1001B36F0);
    v351 = v483;
LABEL_81:
    v403 = v478;
    v404 = v478;
    v484 = v404;
    v351(v403, 0);

    v405 = sub_100003A2C(&qword_1001B0DD8);
    v406 = swift_allocObject(v405, 384, 7);
    *(_OWORD *)(v406 + 16) = xmmword_10015EE30;
    v407 = *v343;
    v408 = v343[1];
    v409 = v343[2];
    v410 = v343[3];
    v411 = v343[4];
    v412 = v343[5];
    v413 = v343[6];
    v414 = v343[7];
    *(_QWORD *)(v406 + 32) = *v343;
    v483 = (void (*)(_QWORD, uint64_t))(v406 + 32);
    v415 = v343[8];
    v416 = v343[9];
    *(_QWORD *)(v406 + 40) = v408;
    *(_QWORD *)(v406 + 48) = v409;
    *(_QWORD *)(v406 + 56) = v410;
    *(_QWORD *)(v406 + 64) = v411;
    *(_QWORD *)(v406 + 72) = v412;
    *(_QWORD *)(v406 + 80) = v413;
    *(_QWORD *)(v406 + 88) = v414;
    *(_QWORD *)(v406 + 96) = v415;
    v417 = v343[10];
    v418 = v343[11];
    *(_QWORD *)(v406 + 104) = v416;
    *(_QWORD *)(v406 + 112) = v417;
    v420 = v343[13];
    v481 = (char *)v343[12];
    v419 = (uint64_t)v481;
    v482 = v418;
    v422 = v343[15];
    v478 = (unsigned int (**)(_QWORD, _QWORD))v343[14];
    v421 = v478;
    v479 = v420;
    v424 = (char *)v343[17];
    v476 = (_QWORD *)v343[16];
    v423 = v476;
    v477 = v422;
    v426 = v343[19];
    v474 = (void (*)(uint64_t, uint64_t, uint64_t))v343[18];
    v425 = v474;
    v475 = v424;
    v428 = v343[21];
    v464 = v343[20];
    v427 = v464;
    v465 = v426;
    v455 = v428;
    *(_QWORD *)(v406 + 120) = v418;
    *(_QWORD *)(v406 + 128) = v419;
    *(_QWORD *)(v406 + 136) = v420;
    *(_QWORD *)(v406 + 144) = v421;
    *(_QWORD *)(v406 + 152) = v422;
    *(_QWORD *)(v406 + 160) = v423;
    *(_QWORD *)(v406 + 168) = v424;
    *(_QWORD *)(v406 + 176) = v425;
    *(_QWORD *)(v406 + 184) = v426;
    *(_QWORD *)(v406 + 192) = v427;
    v429 = (int *)v343[22];
    v472 = v343[23];
    v430 = v472;
    v473 = v429;
    v431 = v343[24];
    v470 = v343[25];
    v432 = v470;
    v471 = v431;
    v433 = v343[26];
    v434 = v343[27];
    *(_QWORD *)(v406 + 200) = v428;
    *(_QWORD *)(v406 + 208) = v429;
    *(_QWORD *)(v406 + 216) = v430;
    *(_QWORD *)(v406 + 224) = v431;
    *(_QWORD *)(v406 + 232) = v432;
    *(_QWORD *)(v406 + 240) = v433;
    v435 = v343[29];
    v468 = v343[28];
    v436 = v468;
    v469 = v433;
    v466 = v435;
    v467 = v434;
    *(_QWORD *)(v406 + 248) = v434;
    *(_QWORD *)(v406 + 256) = v436;
    v438 = v343[30];
    v437 = v343[31];
    *(_QWORD *)(v406 + 264) = v435;
    *(_QWORD *)(v406 + 272) = v438;
    v440 = v343[32];
    v439 = v343[33];
    *(_QWORD *)(v406 + 280) = v437;
    *(_QWORD *)(v406 + 288) = v440;
    v442 = v343[35];
    v462 = v343[34];
    v441 = v462;
    v463 = v439;
    *(_QWORD *)(v406 + 296) = v439;
    *(_QWORD *)(v406 + 304) = v441;
    v444 = v343[36];
    v458 = v343[37];
    v443 = v458;
    v459 = v442;
    *(_QWORD *)(v406 + 312) = v442;
    *(_QWORD *)(v406 + 320) = v444;
    v460 = v343[38];
    v445 = v460;
    v461 = v444;
    v447 = v343[40];
    *(_QWORD *)&v456 = v343[39];
    v446 = v456;
    *(_QWORD *)(v406 + 328) = v443;
    *(_QWORD *)(v406 + 336) = v445;
    v448 = (uint64_t)v343;
    v449 = v343[41];
    *(_QWORD *)(v406 + 344) = v446;
    *(_QWORD *)(v406 + 352) = v447;
    v451 = *(_QWORD *)(v448 + 336);
    v450 = *(_QWORD *)(v448 + 344);
    *(_QWORD *)(v406 + 360) = v449;
    *(_QWORD *)(v406 + 368) = v451;
    *(_QWORD *)(v406 + 376) = v450;
    sub_10009773C(v407, v408, v409, v410, v411, v412, v413, v414, v415, v416, v417);
    sub_10009773C(v482, (uint64_t)v481, v479, (uint64_t)v478, v477, (uint64_t)v476, (uint64_t)v475, (uint64_t)v474, v465, v464, v455);
    sub_10009773C((uint64_t)v473, v472, v471, v470, v469, v467, v468, v466, v438, v437, v440);
    sub_10009773C(v463, v462, v459, v461, v458, v460, v456, v447, v449, v451, v450);
    sub_1000971BC((_TtC14softposreaderd12RemoteReader *)v406);
    swift_setDeallocating(v406);
    v452 = *(_QWORD *)(v406 + 16);
    v453 = sub_100003A2C(&qword_1001B0DE0);
    swift_arrayDestroy(v483, v452, v453);
    swift_deallocClassInstance(v406, 32, 7);
    sub_100093F2C(v480);

    swift_release(v457);
    sub_100070F10(v448, _s14InstallPackageVMa);
    return;
  }
  if (qword_1001AD068 != -1)
    swift_once(&qword_1001AD068, sub_100083768);
  v173 = type metadata accessor for Logger(0);
  v174 = sub_100003A14(v173, (uint64_t)qword_1001B0CA8);
  v175 = Logger.logObject.getter(v174);
  v176 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v175, v176))
  {
    v177 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v177 = 0;
    _os_log_impl((void *)&_mh_execute_header, v175, v176, "Not attested after OTA response", v177, 2u);
    swift_slowDealloc(v177, -1, -1);
  }

  v178 = (void *)sub_1000247AC(2029, 0, 0, 0);
  v179 = v160[34];
  v180 = sub_100003A2C(&qword_1001ADA30);
  v181 = swift_allocObject(v180, 72, 7);
  *(_OWORD *)(v181 + 16) = xmmword_10015A5F0;
  *(_BYTE *)(v181 + 32) = 8;
  v485 = v178;
  type metadata accessor for ConfigurationError(0);
  v183 = v182;
  v184 = sub_100005F1C((unint64_t *)&qword_1001AD750, (uint64_t (*)(uint64_t))type metadata accessor for ConfigurationError, (uint64_t)&unk_10015BC28);
  v185 = _BridgedStoredNSError.errorCode.getter(v183, v184);
  *(_QWORD *)(v181 + 64) = &type metadata for Int;
  *(_QWORD *)(v181 + 40) = v185;
  v193 = (_TtC14softposreaderd12RemoteReader *)sub_1000E862C(v181, v186, v187, v188, v189, v190, v191, v192);
  v194 = *(os_unfair_lock_s **)(v179 + 56);
  v195 = (uint64_t)&v194[4];
  v196 = v194 + 8;
  os_unfair_lock_lock(v194 + 8);
  sub_10005F610(v195, (uint64_t)v193);
  os_unfair_lock_unlock(v196);
  swift_bridgeObjectRelease(v193, v197, v198, v199, v200, v201, v202, v203);
  v204 = v178;
  v483(0, (uint64_t)v178);

  sub_100093F2C(v480);
}

uint64_t sub_100087ACC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  _TtC14softposreaderd12RemoteReader *v52;
  char *v53;
  uint64_t v54;
  SEL v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  _QWORD *v62;
  uint64_t v63;
  unsigned int (*v64)(char *, uint64_t, uint64_t);
  uint64_t v65;
  char *v66;
  char *v67;
  void (*v68)(char *, char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned __int8 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t);
  NSObject *v91;
  os_log_type_t v92;
  uint8_t *v93;
  uint64_t v94;
  void *v96;
  id v97;
  id v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _TtC14softposreaderd12RemoteReader *v104;
  _TtC14softposreaderd12RemoteReader *v105;
  void (*v106)(uint64_t, uint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  SEL v111;
  id v112;
  id v113;
  id v114;
  id v115;
  id v116;
  id v117;
  uint64_t v118;
  unint64_t v119;
  _TtC14softposreaderd12RemoteReader *v120;
  SEL v121;
  id v122;
  id v123;
  id v124;
  id v125;
  id v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  id v135;
  id v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _TtC14softposreaderd12RemoteReader *v142;
  _TtC14softposreaderd12RemoteReader *v143;
  uint64_t v144;
  void (*v145)(uint64_t, uint64_t);
  uint64_t v146;
  uint64_t v147;
  SEL v148;
  id v149;
  id v150;
  id v151;
  id v152;
  id v153;
  id v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  SEL v158;
  id v159;
  id v160;
  id v161;
  id v162;
  id v163;
  id v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  id v173;
  id v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _TtC14softposreaderd12RemoteReader *v179;
  _TtC14softposreaderd12RemoteReader *v180;
  char *v181;
  void (*v182)(char *, uint64_t);
  SEL v183;
  id v184;
  id v185;
  id v186;
  id v187;
  id v188;
  id v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  SEL v195;
  id v196;
  id v197;
  id v198;
  id v199;
  id v200;
  id v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  void (*v213)(char *, char *, uint64_t);
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void *v218;
  uint64_t v219;
  id v220;
  uint64_t v221;
  id v222;
  char *v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  _TtC14softposreaderd12RemoteReader *v228;
  _TtC14softposreaderd12RemoteReader *v229;
  char *v230;
  SEL v231;
  id v232;
  id v233;
  id v234;
  id v235;
  id v236;
  id v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  __int128 v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  _QWORD *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  int *v261;
  uint64_t v262;
  void (*v263)(char *, char *, uint64_t);
  _QWORD *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t *v269;
  uint64_t v270;
  void (*v271)(char *, uint64_t);
  uint64_t v272;
  char *v273;
  uint64_t v274;
  uint64_t v275;
  _TtC14softposreaderd12RemoteReader *v276;
  SEL v277;
  id v278;
  id v279;
  id v280;
  id v281;
  id v282;
  id v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  void (*v299)(char *, char *, uint64_t);
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  __int128 v316;
  char *v317;
  char *v318;
  char *v319;
  unint64_t v320;
  _QWORD *v321;
  uint64_t v322;
  char *v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  char *v328;
  char *v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  char *v340;
  uint64_t v341;
  _QWORD *v342;
  uint64_t v343;
  uint64_t v344;
  char v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  uint64_t v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  uint64_t v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  uint64_t v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  uint64_t v369;
  __int128 v370;
  uint64_t v371;
  uint64_t v372;
  unsigned __int8 v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  unsigned __int8 v377;
  unsigned __int8 v378;
  uint64_t v379;
  uint64_t v380;
  _QWORD v381[4];
  unsigned __int8 v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  unsigned __int8 v386;
  unsigned __int8 v387;
  uint64_t v388;
  uint64_t v389;
  _QWORD v390[4];
  unsigned __int8 v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  unsigned __int8 v395;
  unsigned __int8 v396;
  uint64_t v397;
  uint64_t v398;
  _QWORD v399[4];
  unsigned __int8 v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  unsigned __int8 v404;
  unsigned __int8 v405;
  uint64_t v406;
  uint64_t v407;
  _BYTE v408[16];
  _BYTE v409[64];
  __int128 v410;
  __int128 v411;
  _BYTE v412[16];
  uint64_t v413;
  unint64_t v414;
  _QWORD v415[4];
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  _OWORD v420[4];
  _QWORD v421[8];
  uint64_t v422;
  _TtC14softposreaderd12RemoteReader *v423;
  uint64_t v424;
  unint64_t v425;
  __int128 v426;
  __int128 v427;
  _BYTE v428[16];
  uint64_t v429;
  unint64_t v430;
  uint64_t v431;

  v321 = a2;
  v3 = type metadata accessor for URL(0);
  v331 = *(_QWORD *)(v3 - 8);
  v332 = v3;
  v4 = __chkstk_darwin(v3);
  v319 = (char *)&v285 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v324 = (uint64_t)&v285 - v7;
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v285 - v9;
  __chkstk_darwin(v8);
  v326 = (unint64_t)&v285 - v11;
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD **)(v12 - 8);
  v341 = v12;
  v342 = v13;
  v14 = __chkstk_darwin(v12);
  v329 = (char *)&v285 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v328 = (char *)&v285 - v17;
  v18 = __chkstk_darwin(v16);
  v318 = (char *)&v285 - v19;
  v20 = __chkstk_darwin(v18);
  v320 = (unint64_t)&v285 - v21;
  v22 = __chkstk_darwin(v20);
  v322 = (uint64_t)&v285 - v23;
  v24 = __chkstk_darwin(v22);
  v325 = (uint64_t)&v285 - v25;
  v26 = __chkstk_darwin(v24);
  v340 = (char *)&v285 - v27;
  __chkstk_darwin(v26);
  v29 = (char *)&v285 - v28;
  v30 = sub_100003A2C((uint64_t *)&unk_1001B36F0);
  v31 = __chkstk_darwin(v30);
  v327 = (uint64_t)&v285 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v31);
  v339 = (uint64_t)&v285 - v34;
  v35 = __chkstk_darwin(v33);
  v37 = (char *)&v285 - v36;
  v38 = __chkstk_darwin(v35);
  v343 = (uint64_t)&v285 - v39;
  v40 = __chkstk_darwin(v38);
  v344 = (uint64_t)&v285 - v41;
  __chkstk_darwin(v40);
  v431 = (uint64_t)&v285 - v42;
  if (qword_1001AD068 != -1)
    swift_once(&qword_1001AD068, sub_100083768);
  v43 = type metadata accessor for Logger(0);
  v44 = sub_100003A14(v43, (uint64_t)qword_1001B0CA8);
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v45, v46))
  {
    v47 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v47 = 0;
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "persistDownloadedScripts(response:)", v47, 2u);
    swift_slowDealloc(v47, -1, -1);
  }

  v48 = *(_QWORD *)(a1 + 16);
  v334 = *(_QWORD *)(a1 + 32);
  v330 = *(_QWORD *)(a1 + 40);
  UUID.init(uuidString:)(v48);
  v49 = *(_OWORD *)(a1 + 64);
  v410 = *(_OWORD *)(a1 + 48);
  v411 = v49;
  v50 = *(_QWORD *)(a1 + 80);
  v337 = *(_QWORD *)(a1 + 88);
  v338 = v50;
  v51 = *(_QWORD *)(a1 + 96);
  v335 = *(_QWORD *)(a1 + 104);
  v336 = v51;
  UUID.init(uuidString:)(v410);
  sub_100024374(a1 + 112, (uint64_t)v409, &qword_1001B0E18);
  sub_100024374((uint64_t)v409, (uint64_t)&v422, &qword_1001B0E18);
  v52 = v423;
  v323 = v10;
  v53 = v29;
  if (v423)
  {
    v54 = v422;
    swift_bridgeObjectRetain();
  }
  else
  {
    v54 = 0;
    v52 = (_TtC14softposreaderd12RemoteReader *)0xE000000000000000;
  }
  UUID.init(uuidString:)(v54);
  swift_bridgeObjectRelease(v52, v55, v56, v57, v58, v59, v60, v61);
  sub_100005EB4(v431, (uint64_t)v37, (uint64_t *)&unk_1001B36F0);
  v63 = v341;
  v62 = v342;
  v64 = (unsigned int (*)(char *, uint64_t, uint64_t))v342[6];
  if (v64(v37, 1, v341) == 1)
  {
    v65 = sub_10005218C((uint64_t)v37, (uint64_t *)&unk_1001B36F0);
LABEL_20:
    v91 = Logger.logObject.getter(v65);
    v92 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v91, v92))
    {
      v93 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v93 = 0;
      _os_log_impl((void *)&_mh_execute_header, v91, v92, "malformed response from backend", v93, 2u);
      swift_slowDealloc(v93, -1, -1);
    }

    v94 = sub_1000247AC(2027, 0, 0, 0);
    swift_willThrow(v94);
    goto LABEL_23;
  }
  v66 = v53;
  v67 = v37;
  v68 = (void (*)(char *, char *, uint64_t))v62[4];
  v68(v53, v67, v63);
  v69 = v339;
  sub_100005EB4(v344, v339, (uint64_t *)&unk_1001B36F0);
  if (v64((char *)v69, 1, v63) == 1)
  {
    ((void (*)(char *, uint64_t))v62[1])(v66, v63);
    v65 = sub_10005218C(v69, (uint64_t *)&unk_1001B36F0);
    goto LABEL_20;
  }
  v317 = v66;
  v68(v340, (char *)v69, v63);
  if ((sub_100095610(v338, v337) & 1) == 0
    || ((sub_100024374((uint64_t)v409, (uint64_t)v421, &qword_1001B0E18), !v421[1])
      ? (v71 = 0, v70 = 1)
      : (v70 = v421[4], v71 = v421[5]),
        v72 = v334,
        (sub_100095610(v70, v71) & 1) == 0))
  {
    v90 = (void (*)(char *, uint64_t))v342[1];
    v90(v340, v63);
    v65 = ((uint64_t (*)(char *, uint64_t))v90)(v317, v63);
    goto LABEL_20;
  }
  v299 = v68;
  v369 = 0;
  v367 = 0u;
  v368 = 0u;
  v365 = 0u;
  v366 = 0u;
  v364 = 0u;
  v363 = 0;
  v361 = 0u;
  v362 = 0u;
  v359 = 0u;
  v360 = 0u;
  v358 = 0u;
  v357 = 0;
  v355 = 0u;
  v356 = 0u;
  v354 = 0u;
  v352 = 0u;
  v353 = 0u;
  v351 = 0;
  v349 = 0u;
  v350 = 0u;
  v347 = 0u;
  v348 = 0u;
  v345 = 1;
  v73 = v330;
  v346 = 0u;
  if (v330 >> 60 == 15)
  {
    v74 = 0;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v79 = 0;
    v80 = 0;
    v81 = 0;
    v82 = 0;
    v83 = 0;
    v84 = 0;
    v316 = 0uLL;
    v325 = 0;
    v339 = 0;
    v85 = 0;
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v334 = 0;
    v314 = 0;
    v315 = 0;
    v89 = v333;
  }
  else
  {
    v96 = (void *)objc_opt_self(NSFileManager);
    sub_100005D9C(v72, v73);
    v97 = objc_msgSend(v96, "defaultManager");
    v98 = objc_msgSend(v97, "temporaryDirectory");

    v99 = (char *)v326;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v98);

    v100 = v325;
    v102 = UUID.init()(v101);
    v103 = UUID.uuidString.getter(v102);
    v105 = v104;
    v106 = (void (*)(uint64_t, uint64_t))v342[1];
    v107 = v100;
    v108 = v334;
    v106(v107, v63);
    v109 = v333;
    sub_100095FAC(v108, v73, v103, (uint64_t)v105, 2, (uint64_t)&v370);
    v110 = v73;
    v89 = v109;
    if (v109)
    {
      (*(void (**)(char *, uint64_t))(v331 + 8))(v99, v332);
      swift_bridgeObjectRelease(v105, v111, v112, v113, v114, v115, v116, v117);
      sub_10000A9B0(v108, v110);
      sub_1000968AC(&v345, (uint64_t *)&v364, (uint64_t)&v358, (uint64_t *)&v352, (uint64_t *)&v346);
      sub_10009799C(v346, *((uint64_t *)&v346 + 1), v347, *((uint64_t *)&v347 + 1), v348, *((uint64_t *)&v348 + 1), v349, *((uint64_t *)&v349 + 1), v350, *((uint64_t *)&v350 + 1), v351);
      sub_10009799C(v352, *((uint64_t *)&v352 + 1), v353, *((uint64_t *)&v353 + 1), v354, *((uint64_t *)&v354 + 1), v355, *((uint64_t *)&v355 + 1), v356, *((uint64_t *)&v356 + 1), v357);
      sub_10009799C(v358, *((uint64_t *)&v358 + 1), v359, *((uint64_t *)&v359 + 1), v360, *((uint64_t *)&v360 + 1), v361, *((uint64_t *)&v361 + 1), v362, *((uint64_t *)&v362 + 1), v363);
      sub_10009799C(v364, *((uint64_t *)&v364 + 1), v365, *((uint64_t *)&v365 + 1), v366, *((uint64_t *)&v366 + 1), v367, *((uint64_t *)&v367 + 1), v368, *((uint64_t *)&v368 + 1), v369);
      v106((uint64_t)v340, v63);
      v106((uint64_t)v317, v63);
LABEL_23:
      sub_10005218C(v343, (uint64_t *)&unk_1001B36F0);
      sub_10005218C(v344, (uint64_t *)&unk_1001B36F0);
      return sub_10005218C(v431, (uint64_t *)&unk_1001B36F0);
    }
    v316 = v370;
    v325 = v371;
    v339 = v372;
    v308 = v373;
    v118 = v108;
    v119 = v375;
    v309 = v374;
    v310 = v376;
    v333 = v377;
    v313 = v378;
    v314 = v380;
    v315 = v379;
    (*(void (**)(char *, uint64_t))(v331 + 8))(v99, v332);
    v120 = v105;
    v87 = v119;
    swift_bridgeObjectRelease(v120, v121, v122, v123, v124, v125, v126, v127);
    sub_10000A9B0(v118, v110);
    v83 = *((_QWORD *)&v364 + 1);
    v84 = v364;
    v334 = v333 | (v313 << 8);
    v85 = v308;
    v86 = v309;
    v88 = v310;
    v81 = *((_QWORD *)&v365 + 1);
    v82 = v365;
    v80 = v366;
    v79 = *((_QWORD *)&v366 + 1);
    v77 = *((_QWORD *)&v367 + 1);
    v78 = v367;
    v75 = *((_QWORD *)&v368 + 1);
    v76 = v368;
    v74 = v369;
  }
  v330 = v87;
  sub_10009799C(v84, v83, v82, v81, v80, v79, v78, v77, v76, v75, v74);
  v364 = v316;
  *(_QWORD *)&v365 = v325;
  *((_QWORD *)&v365 + 1) = v339;
  *(_QWORD *)&v366 = v85;
  *((_QWORD *)&v366 + 1) = v86;
  *(_QWORD *)&v367 = v87;
  *((_QWORD *)&v367 + 1) = v88;
  *(_QWORD *)&v368 = v334;
  *((_QWORD *)&v368 + 1) = v315;
  v369 = v314;
  sub_100024374(a1, (uint64_t)v408, &qword_1001B0E20);
  sub_100024374((uint64_t)v408, (uint64_t)&v424, &qword_1001B0E20);
  v128 = v86;
  v129 = v425;
  v309 = v128;
  v310 = v88;
  v308 = v85;
  if (v425 >> 60 == 15)
  {
    sub_10009773C(v316, *((uint64_t *)&v316 + 1), v325, v339, v85, v128, v330, v88, v334, v315, v314);
    v130 = 0;
    v131 = 0;
    v132 = 0;
    v133 = 0;
    v326 = 0;
    v322 = 0;
    v323 = 0;
    v312 = 0;
    v313 = 0;
    v311 = 0;
    v304 = 0;
    goto LABEL_32;
  }
  v333 = v424;
  v134 = (void *)objc_opt_self(NSFileManager);
  sub_10009773C(v316, *((uint64_t *)&v316 + 1), v325, v339, v85, v128, v330, v88, v334, v315, v314);
  sub_1000979D0((uint64_t)v408);
  v135 = objc_msgSend(v134, "defaultManager");
  v136 = objc_msgSend(v135, "temporaryDirectory");

  v137 = (uint64_t)v323;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v136);

  v138 = v322;
  v140 = UUID.init()(v139);
  v141 = UUID.uuidString.getter(v140);
  v143 = v142;
  v144 = v63;
  v145 = (void (*)(uint64_t, uint64_t))v342[1];
  v146 = v138;
  v147 = v144;
  v145(v146, v144);
  sub_100095FAC(v333, v129, v141, (uint64_t)v143, 0, (uint64_t)v381);
  if (v89)
  {
    (*(void (**)(uint64_t, uint64_t))(v331 + 8))(v137, v332);
    swift_bridgeObjectRelease(v143, v148, v149, v150, v151, v152, v153, v154);
    sub_1000979FC((uint64_t)v408);
    sub_10009799C(v316, *((uint64_t *)&v316 + 1), v325, v339, v308, v309, v330, v310, v334, v315, v314);
    sub_1000968AC(&v345, (uint64_t *)&v364, (uint64_t)&v358, (uint64_t *)&v352, (uint64_t *)&v346);
    sub_10009799C(v346, *((uint64_t *)&v346 + 1), v347, *((uint64_t *)&v347 + 1), v348, *((uint64_t *)&v348 + 1), v349, *((uint64_t *)&v349 + 1), v350, *((uint64_t *)&v350 + 1), v351);
    sub_10009799C(v352, *((uint64_t *)&v352 + 1), v353, *((uint64_t *)&v353 + 1), v354, *((uint64_t *)&v354 + 1), v355, *((uint64_t *)&v355 + 1), v356, *((uint64_t *)&v356 + 1), v357);
    sub_10009799C(v358, *((uint64_t *)&v358 + 1), v359, *((uint64_t *)&v359 + 1), v360, *((uint64_t *)&v360 + 1), v361, *((uint64_t *)&v361 + 1), v362, *((uint64_t *)&v362 + 1), v363);
    sub_10009799C(v364, *((uint64_t *)&v364 + 1), v365, *((uint64_t *)&v365 + 1), v366, *((uint64_t *)&v366 + 1), v367, *((uint64_t *)&v367 + 1), v368, *((uint64_t *)&v368 + 1), v369);
    v145((uint64_t)v340, v147);
    v145((uint64_t)v317, v147);
    goto LABEL_23;
  }
  v130 = v381[0];
  v132 = v381[2];
  v307 = v381[3];
  v326 = v382;
  v322 = v383;
  v312 = v385;
  v313 = v384;
  v155 = v137;
  v156 = v386;
  v157 = v387;
  v311 = v388;
  v304 = v389;
  v131 = v381[1];
  (*(void (**)(uint64_t, uint64_t))(v331 + 8))(v155, v332);
  swift_bridgeObjectRelease(v143, v158, v159, v160, v161, v162, v163, v164);
  sub_1000979FC((uint64_t)v408);
  v323 = (char *)(v156 | (v157 << 8));
  v133 = v307;
  v63 = v147;
LABEL_32:
  v305 = v130;
  v306 = v132;
  v307 = v133;
  sub_10009799C(v358, *((uint64_t *)&v358 + 1), v359, *((uint64_t *)&v359 + 1), v360, *((uint64_t *)&v360 + 1), v361, *((uint64_t *)&v361 + 1), v362, *((uint64_t *)&v362 + 1), v363);
  *(_QWORD *)&v358 = v130;
  *((_QWORD *)&v358 + 1) = v131;
  *(_QWORD *)&v359 = v132;
  *((_QWORD *)&v359 + 1) = v133;
  *(_QWORD *)&v360 = v326;
  *((_QWORD *)&v360 + 1) = v322;
  *(_QWORD *)&v361 = v313;
  *((_QWORD *)&v361 + 1) = v312;
  *(_QWORD *)&v362 = v323;
  *((_QWORD *)&v362 + 1) = v311;
  v165 = v304;
  v363 = v304;
  sub_100024374((uint64_t)&v411, (uint64_t)v412, &qword_1001B0E20);
  sub_100024374((uint64_t)v412, (uint64_t)&v413, &qword_1001B0E20);
  v166 = v414;
  v296 = v131;
  if (v414 >> 60 == 15)
  {
    sub_10009773C(v305, v131, v306, v307, v326, v322, v313, v312, (uint64_t)v323, v311, v165);
    v298 = 0;
    v167 = 0;
    v168 = 0;
    v320 = 0;
    v302 = 0;
    v303 = 0;
    v300 = 0;
    v301 = 0;
    v169 = 0;
    v170 = 0;
    v171 = 0;
  }
  else
  {
    v333 = v413;
    v172 = (void *)objc_opt_self(NSFileManager);
    sub_10009773C(v305, v131, v306, v307, v326, v322, v313, v312, (uint64_t)v323, v311, v165);
    sub_1000979D0((uint64_t)v412);
    v173 = objc_msgSend(v172, "defaultManager");
    v174 = objc_msgSend(v173, "temporaryDirectory");

    static URL._unconditionallyBridgeFromObjectiveC(_:)(v174);
    v175 = (char *)v320;
    v177 = UUID.init()(v176);
    v178 = UUID.uuidString.getter(v177);
    v180 = v179;
    v181 = v175;
    v182 = (void (*)(char *, uint64_t))v342[1];
    v182(v181, v63);
    sub_100095FAC(v333, v166, v178, (uint64_t)v180, 3, (uint64_t)v390);
    if (v89)
    {
      (*(void (**)(uint64_t, uint64_t))(v331 + 8))(v324, v332);
      swift_bridgeObjectRelease(v180, v183, v184, v185, v186, v187, v188, v189);
      sub_1000979FC((uint64_t)v412);
      sub_10009799C(v305, v296, v306, v307, v326, v322, v313, v312, (uint64_t)v323, v311, v304);
      sub_10009799C(v316, *((uint64_t *)&v316 + 1), v325, v339, v308, v309, v330, v310, v334, v315, v314);
      sub_1000968AC(&v345, (uint64_t *)&v364, (uint64_t)&v358, (uint64_t *)&v352, (uint64_t *)&v346);
      sub_10009799C(v346, *((uint64_t *)&v346 + 1), v347, *((uint64_t *)&v347 + 1), v348, *((uint64_t *)&v348 + 1), v349, *((uint64_t *)&v349 + 1), v350, *((uint64_t *)&v350 + 1), v351);
      sub_10009799C(v352, *((uint64_t *)&v352 + 1), v353, *((uint64_t *)&v353 + 1), v354, *((uint64_t *)&v354 + 1), v355, *((uint64_t *)&v355 + 1), v356, *((uint64_t *)&v356 + 1), v357);
      sub_10009799C(v358, *((uint64_t *)&v358 + 1), v359, *((uint64_t *)&v359 + 1), v360, *((uint64_t *)&v360 + 1), v361, *((uint64_t *)&v361 + 1), v362, *((uint64_t *)&v362 + 1), v363);
      sub_10009799C(v364, *((uint64_t *)&v364 + 1), v365, *((uint64_t *)&v365 + 1), v366, *((uint64_t *)&v366 + 1), v367, *((uint64_t *)&v367 + 1), v368, *((uint64_t *)&v368 + 1), v369);
      v182(v340, v63);
      v190 = v317;
      v191 = v63;
LABEL_46:
      v182(v190, v191);
      goto LABEL_23;
    }
    v171 = v390[0];
    v192 = v390[3];
    v297 = v390[2];
    v298 = v390[1];
    v320 = v391;
    v302 = v393;
    v303 = v392;
    v193 = v395;
    v194 = v396;
    v300 = v397;
    v301 = v394;
    v170 = v398;
    (*(void (**)(uint64_t, uint64_t))(v331 + 8))(v324, v332);
    swift_bridgeObjectRelease(v180, v195, v196, v197, v198, v199, v200, v201);
    sub_1000979FC((uint64_t)v412);
    v169 = v193 | (v194 << 8);
    v168 = v192;
    v167 = v297;
  }
  sub_10009799C(v352, *((uint64_t *)&v352 + 1), v353, *((uint64_t *)&v353 + 1), v354, *((uint64_t *)&v354 + 1), v355, *((uint64_t *)&v355 + 1), v356, *((uint64_t *)&v356 + 1), v357);
  *(_QWORD *)&v352 = v171;
  v202 = v298;
  *((_QWORD *)&v352 + 1) = v298;
  *(_QWORD *)&v353 = v167;
  *((_QWORD *)&v353 + 1) = v168;
  *(_QWORD *)&v354 = v320;
  *((_QWORD *)&v354 + 1) = v303;
  *(_QWORD *)&v355 = v302;
  *((_QWORD *)&v355 + 1) = v301;
  *(_QWORD *)&v356 = v169;
  *((_QWORD *)&v356 + 1) = v300;
  v357 = v170;
  sub_100024374((uint64_t)v409, (uint64_t)v420, &qword_1001B0E18);
  v294 = v171;
  v295 = v170;
  v297 = v167;
  v324 = v168;
  v291 = v169;
  if (!*((_QWORD *)&v420[0] + 1))
  {
    sub_10009773C(v171, v202, v167, v168, v320, v303, v302, v301, v169, v300, v170);
    goto LABEL_41;
  }
  v426 = v420[0];
  v427 = v420[1];
  sub_100024374((uint64_t)&v427, (uint64_t)v428, &qword_1001B0E20);
  sub_100024374((uint64_t)v428, (uint64_t)&v429, &qword_1001B0E20);
  v203 = v430;
  if (v430 >> 60 != 15)
  {
    v333 = v429;
    v218 = (void *)objc_opt_self(NSFileManager);
    v284 = v169;
    v219 = v294;
    sub_10009773C(v294, v298, v297, v324, v320, v303, v302, v301, v284, v300, v295);
    sub_1000979D0((uint64_t)v428);
    v220 = objc_msgSend(v218, "defaultManager");
    v221 = v89;
    v222 = objc_msgSend(v220, "temporaryDirectory");

    v223 = v319;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v222);

    v224 = v318;
    v226 = UUID.init()(v225);
    v227 = UUID.uuidString.getter(v226);
    v229 = v228;
    v230 = v224;
    v182 = (void (*)(char *, uint64_t))v342[1];
    v182(v230, v341);
    sub_100095FAC(v333, v203, v227, (uint64_t)v229, 4, (uint64_t)v399);
    v89 = v221;
    if (!v221)
    {
      v289 = v399[1];
      v290 = v399[0];
      v272 = v399[2];
      v318 = (char *)v399[3];
      v293 = v400;
      v285 = v402;
      v286 = v401;
      v292 = v403;
      v273 = v223;
      v274 = v404;
      v275 = v405;
      v208 = v406;
      v209 = v407;
      (*(void (**)(char *, uint64_t))(v331 + 8))(v273, v332);
      v276 = v229;
      v206 = v272;
      swift_bridgeObjectRelease(v276, v277, v278, v279, v280, v281, v282, v283);
      sub_1000979FC((uint64_t)v428);
      v207 = v274 | (v275 << 8);
      v205 = v289;
      v204 = v290;
      goto LABEL_42;
    }
    (*(void (**)(char *, uint64_t))(v331 + 8))(v223, v332);
    swift_bridgeObjectRelease(v229, v231, v232, v233, v234, v235, v236, v237);
    sub_1000979FC((uint64_t)v428);
    sub_10009799C(v219, v298, v297, v324, v320, v303, v302, v301, v291, v300, v295);
    sub_10009799C(v305, v296, v306, v307, v326, v322, v313, v312, (uint64_t)v323, v311, v304);
    sub_10009799C(v316, *((uint64_t *)&v316 + 1), v325, v339, v308, v309, v330, v310, v334, v315, v314);
    sub_1000968AC(&v345, (uint64_t *)&v364, (uint64_t)&v358, (uint64_t *)&v352, (uint64_t *)&v346);
    sub_10009799C(v346, *((uint64_t *)&v346 + 1), v347, *((uint64_t *)&v347 + 1), v348, *((uint64_t *)&v348 + 1), v349, *((uint64_t *)&v349 + 1), v350, *((uint64_t *)&v350 + 1), v351);
    sub_10009799C(v352, *((uint64_t *)&v352 + 1), v353, *((uint64_t *)&v353 + 1), v354, *((uint64_t *)&v354 + 1), v355, *((uint64_t *)&v355 + 1), v356, *((uint64_t *)&v356 + 1), v357);
    sub_10009799C(v358, *((uint64_t *)&v358 + 1), v359, *((uint64_t *)&v359 + 1), v360, *((uint64_t *)&v360 + 1), v361, *((uint64_t *)&v361 + 1), v362, *((uint64_t *)&v362 + 1), v363);
    sub_10009799C(v364, *((uint64_t *)&v364 + 1), v365, *((uint64_t *)&v365 + 1), v366, *((uint64_t *)&v366 + 1), v367, *((uint64_t *)&v367 + 1), v368, *((uint64_t *)&v368 + 1), v369);
    v238 = v341;
    v182(v340, v341);
    v190 = v317;
    v191 = v238;
    goto LABEL_46;
  }
  sub_10009773C(v294, v298, v297, v324, v320, v303, v302, v301, v169, v300, v295);
LABEL_41:
  v204 = 0;
  v205 = 0;
  v206 = 0;
  v318 = 0;
  v292 = 0;
  v293 = 0;
  v285 = 0;
  v286 = 0;
  v207 = 0;
  v208 = 0;
  v209 = 0;
LABEL_42:
  v333 = v89;
  sub_10009799C(v346, *((uint64_t *)&v346 + 1), v347, *((uint64_t *)&v347 + 1), v348, *((uint64_t *)&v348 + 1), v349, *((uint64_t *)&v349 + 1), v350, *((uint64_t *)&v350 + 1), v351);
  v289 = v205;
  v290 = v204;
  *(_QWORD *)&v346 = v204;
  *((_QWORD *)&v346 + 1) = v205;
  v331 = v208;
  v332 = v206;
  *(_QWORD *)&v347 = v206;
  *((_QWORD *)&v347 + 1) = v318;
  *(_QWORD *)&v348 = v293;
  v211 = v285;
  v210 = v286;
  *((_QWORD *)&v348 + 1) = v286;
  *(_QWORD *)&v349 = v285;
  *((_QWORD *)&v349 + 1) = v292;
  v288 = v207;
  *(_QWORD *)&v350 = v207;
  *((_QWORD *)&v350 + 1) = v208;
  v319 = (char *)v209;
  v351 = v209;
  v345 = 0;
  v212 = v341;
  v213 = (void (*)(char *, char *, uint64_t))v342[2];
  v213(v328, v340, v341);
  v213(v329, v317, v212);
  sub_100005EB4(v343, v327, (uint64_t *)&unk_1001B36F0);
  sub_100024374((uint64_t)v409, (uint64_t)v415, &qword_1001B0E18);
  v214 = v211;
  if (v415[1])
  {
    v215 = v416;
    v216 = v419;
    v287 = v417;
    v217 = v418;
    sub_100093E80(v416, v417, v418, v419);
  }
  else
  {
    v287 = 0;
    v217 = 0;
    v216 = 0;
    v215 = 1;
  }
  v240 = v310;
  v239 = v311;
  v241 = v339;
  v242 = v325;
  v243 = (char *)v326;
  v244 = v316;
  v246 = v314;
  v245 = v315;
  v247 = v334;
  v249 = v322;
  v248 = (uint64_t)v323;
  v251 = v312;
  v250 = v313;
  v253 = v303;
  v252 = v304;
  v254 = (char *)v320;
  v255 = v321;
  v257 = v301;
  v256 = v302;
  *v321 = v305;
  v255[1] = v296;
  v255[2] = v306;
  v255[3] = v307;
  v255[4] = v243;
  v255[5] = v249;
  v255[6] = v250;
  v255[7] = v251;
  v255[8] = v248;
  v255[9] = v239;
  v255[10] = v252;
  *(_OWORD *)(v255 + 11) = v244;
  v255[13] = v242;
  v255[14] = v241;
  v255[15] = v308;
  v255[16] = v309;
  v255[17] = v330;
  v255[18] = v240;
  v255[19] = v247;
  v255[20] = v245;
  v258 = v294;
  v255[21] = v246;
  v255[22] = v258;
  v255[23] = v298;
  v255[24] = v297;
  v255[25] = v324;
  v255[26] = v254;
  v255[27] = v253;
  v255[28] = v256;
  v259 = v291;
  v255[29] = v257;
  v255[30] = v259;
  v255[31] = v300;
  v255[32] = v295;
  v255[33] = v290;
  v255[34] = v289;
  v255[35] = v332;
  v255[36] = v318;
  v255[37] = v293;
  v255[38] = v210;
  v260 = v292;
  v255[39] = v214;
  v255[40] = v260;
  v255[41] = v288;
  v255[42] = v331;
  v255[43] = v319;
  v261 = (int *)_s14InstallPackageVMa(0);
  v262 = v341;
  v263 = v299;
  v299((char *)v255 + v261[8], v328, v341);
  v263((char *)v255 + v261[9], v329, v262);
  sub_100024374(v327, (uint64_t)v255 + v261[10], (uint64_t *)&unk_1001B36F0);
  v264 = (_QWORD *)((char *)v255 + v261[11]);
  v266 = v337;
  v265 = v338;
  *v264 = v338;
  v264[1] = v266;
  v268 = v335;
  v267 = v336;
  v264[2] = v336;
  v264[3] = v268;
  v269 = (_QWORD *)((char *)v255 + v261[12]);
  v270 = v287;
  *v269 = v215;
  v269[1] = v270;
  v269[2] = v217;
  v269[3] = v216;
  sub_100093E80(v265, v266, v267, v268);
  sub_1000968AC(&v345, (uint64_t *)&v364, (uint64_t)&v358, (uint64_t *)&v352, (uint64_t *)&v346);
  sub_10009799C(v352, *((uint64_t *)&v352 + 1), v353, *((uint64_t *)&v353 + 1), v354, *((uint64_t *)&v354 + 1), v355, *((uint64_t *)&v355 + 1), v356, *((uint64_t *)&v356 + 1), v357);
  sub_10009799C(v358, *((uint64_t *)&v358 + 1), v359, *((uint64_t *)&v359 + 1), v360, *((uint64_t *)&v360 + 1), v361, *((uint64_t *)&v361 + 1), v362, *((uint64_t *)&v362 + 1), v363);
  sub_10009799C(v364, *((uint64_t *)&v364 + 1), v365, *((uint64_t *)&v365 + 1), v366, *((uint64_t *)&v366 + 1), v367, *((uint64_t *)&v367 + 1), v368, *((uint64_t *)&v368 + 1), v369);
  v271 = (void (*)(char *, uint64_t))v342[1];
  v271(v340, v262);
  v271(v317, v262);
  sub_10005218C(v343, (uint64_t *)&unk_1001B36F0);
  sub_10005218C(v344, (uint64_t *)&unk_1001B36F0);
  return sub_10005218C(v431, (uint64_t *)&unk_1001B36F0);
}

void sub_100089488(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t inited;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _TtC14softposreaderd12RemoteReader *v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  int v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  _TtC14softposreaderd12RemoteReader *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  _TtC14softposreaderd12RemoteReader *v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  SEL v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  Swift::String v63;
  char *v64;
  uint64_t v65;
  SEL v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  _TtC14softposreaderd12RemoteReader *v73;
  SEL v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t);
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  char *v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _TtC14softposreaderd12RemoteReader *v99;
  SEL v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  void (*v107)(char *, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint8_t *v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  id v128;
  _TtC14softposreaderd12RemoteReader *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD v132[3];
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;

  v119 = a3;
  v120 = a2;
  v5 = v3 + 29;
  v122 = *v3;
  v126 = type metadata accessor for DispatchTime(0);
  v123 = *(_QWORD *)(v126 - 8);
  v6 = __chkstk_darwin(v126);
  v121 = (char *)&v109 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v124 = (char *)&v109 - v8;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v109 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()(v11);
  v113 = v5;
  sub_100008390((uint64_t)v5, (uint64_t)v132);
  v15 = v133;
  v14 = v134;
  v16 = sub_100005EF8(v132, v133);
  v112 = sub_100003A2C(&qword_1001ADA18);
  inited = swift_initStackObject(v112, &v131);
  *(_OWORD *)(inited + 16) = xmmword_10015EE30;
  strcpy((char *)(inited + 32), "appletVersion");
  *(_WORD *)(inited + 46) = -4864;
  v18 = *(_QWORD *)(a1 + 80);
  v114 = v10;
  v115 = v9;
  v127 = v13;
  v116 = v16;
  if (v18)
  {
    v19 = *(_QWORD *)(a1 + 72);
    v20 = swift_bridgeObjectRetain();
  }
  else
  {
    v20 = 0xE300000000000000;
    v19 = 7104878;
  }
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 80) = &protocol witness table for String;
  *(_QWORD *)(inited + 48) = v19;
  *(_QWORD *)(inited + 56) = v20;
  strcpy((char *)(inited + 88), "globalConfig");
  *(_BYTE *)(inited + 101) = 0;
  *(_WORD *)(inited + 102) = -5120;
  v21 = _s14InstallPackageVMa(0);
  v22 = UUID.uuidString.getter(v21);
  *(_QWORD *)(inited + 128) = &type metadata for String;
  *(_QWORD *)(inited + 136) = &protocol witness table for String;
  *(_QWORD *)(inited + 104) = v22;
  *(_QWORD *)(inited + 112) = v23;
  strcpy((char *)(inited + 144), "partnerConfig");
  *(_WORD *)(inited + 158) = -4864;
  v118 = a1;
  v24 = UUID.uuidString.getter(v22);
  *(_QWORD *)(inited + 184) = &type metadata for String;
  *(_QWORD *)(inited + 192) = &protocol witness table for String;
  *(_QWORD *)(inited + 160) = v24;
  *(_QWORD *)(inited + 168) = v25;
  *(_QWORD *)(inited + 200) = 1684632949;
  *(_QWORD *)(inited + 208) = 0xE400000000000000;
  v26 = UUID.uuidString.getter(v24);
  *(_QWORD *)(inited + 240) = &type metadata for String;
  *(_QWORD *)(inited + 248) = &protocol witness table for String;
  *(_QWORD *)(inited + 216) = v26;
  *(_QWORD *)(inited + 224) = v27;
  v28 = (_TtC14softposreaderd12RemoteReader *)sub_1000E84EC(inited);
  sub_100115684(29, (uint64_t)v28, v15, v14);
  swift_bridgeObjectRelease(v28, v29, v30, v31, v32, v33, v34, v35);
  sub_100005D3C(v132);
  if (qword_1001AD068 != -1)
    swift_once(&qword_1001AD068, sub_100083768);
  v36 = type metadata accessor for Logger(0);
  sub_100003A14(v36, (uint64_t)qword_1001B0CA8);
  v37 = v117;
  v38 = swift_retain_n(v117, 2);
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.default.getter();
  v41 = v40;
  if (os_log_type_enabled(v39, v40))
  {
    LODWORD(v116) = v41;
    v42 = (uint8_t *)swift_slowAlloc(12, -1);
    v111 = swift_slowAlloc(32, -1);
    v135 = v111;
    *(_DWORD *)v42 = 136315138;
    v110 = v42 + 4;
    v43 = v37;
    v44 = *(_QWORD *)(v37 + 104);
    swift_beginAccess(v44 + 72, v132, 0, 0);
    v45 = *(_TtC14softposreaderd12RemoteReader **)(v44 + 72);
    swift_retain();
    v46 = swift_bridgeObjectRetain();
    v47 = sub_1000B4000(v46);
    v49 = (_TtC14softposreaderd12RemoteReader *)v48;
    swift_bridgeObjectRelease(v45, v48, v50, v51, v52, v53, v54, v55);
    v128 = 0;
    v129 = (_TtC14softposreaderd12RemoteReader *)0xE000000000000000;
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease(v129, v56, v57, v58, v59, v60, v61, v62);
    v128 = (id)0xD000000000000011;
    v129 = (_TtC14softposreaderd12RemoteReader *)0x800000010016C620;
    v63._countAndFlagsBits = v47;
    v64 = v127;
    v63._object = v49;
    String.append(_:)(v63);
    v65 = v44;
    v37 = v43;
    swift_release(v65);
    swift_bridgeObjectRelease(v49, v66, v67, v68, v69, v70, v71, v72);
    v73 = v129;
    v128 = (id)sub_1000056EC((uint64_t)v128, (unint64_t)v129, &v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, &v129, v110, v42 + 12);
    swift_release_n(v43, 2);
    swift_bridgeObjectRelease(v73, v74, v75, v76, v77, v78, v79, v80);
    _os_log_impl((void *)&_mh_execute_header, v39, (os_log_type_t)v116, "PayAppletProfileCache: %s", v42, 0xCu);
    v81 = v111;
    swift_arrayDestroy(v111, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v81, -1, -1);
    swift_slowDealloc(v42, -1, -1);

    v83 = (uint64_t)v124;
  }
  else
  {

    v82 = swift_release_n(v37, 2);
    v83 = (uint64_t)v124;
    v64 = v127;
  }
  v128 = 0;
  v84 = __chkstk_darwin(v82);
  *(&v109 - 8) = v118;
  *(&v109 - 7) = v37;
  *(&v109 - 6) = v119;
  *(&v109 - 5) = (uint64_t)v64;
  *((_BYTE *)&v109 - 32) = v120 & 1;
  *(&v109 - 3) = (uint64_t)&v128;
  v85 = v121;
  *(&v109 - 2) = v122;
  static DispatchTime.now()(v84);
  + infix(_:_:)(v85);
  v86 = v37;
  v87 = *(void (**)(char *, uint64_t))(v123 + 8);
  v88 = v85;
  v89 = v126;
  v87(v88, v126);
  v90 = v125;
  sub_1000417FC(v83, sub_10009782C);
  v92 = v64;
  if (v90)
  {
    v87((char *)v83, v89);
    (*(void (**)(char *, uint64_t))(v114 + 8))(v64, v115);
LABEL_15:

    return;
  }
  v93 = v91;
  v87((char *)v83, v89);
  if ((v93 & 1) == 0)
  {
    v108 = sub_1000247AC(2026, 0, 0, 0);
    swift_willThrow(v108);
    (*(void (**)(char *, uint64_t))(v114 + 8))(v92, v115);
    goto LABEL_15;
  }
  v94 = *(_QWORD *)(v86 + 256);
  v95 = *(_QWORD *)(v86 + 264);
  sub_100005EF8(v113, v94);
  v96 = swift_initStackObject(v112, &v130);
  *(_OWORD *)(v96 + 16) = xmmword_10015A5F0;
  *(_QWORD *)(v96 + 32) = 1684632949;
  *(_QWORD *)(v96 + 40) = 0xE400000000000000;
  v97 = UUID.uuidString.getter(v96);
  *(_QWORD *)(v96 + 72) = &type metadata for String;
  *(_QWORD *)(v96 + 80) = &protocol witness table for String;
  *(_QWORD *)(v96 + 48) = v97;
  *(_QWORD *)(v96 + 56) = v98;
  v99 = (_TtC14softposreaderd12RemoteReader *)sub_1000E84EC(v96);
  sub_100115684(30, (uint64_t)v99, v94, v95);
  swift_bridgeObjectRelease(v99, v100, v101, v102, v103, v104, v105, v106);
  if (v128)
  {
    v107 = *(void (**)(char *, uint64_t))(v114 + 8);
    v128;
    v107(v64, v115);

  }
  else
  {
    __break(1u);
  }
}

Swift::Int sub_100089B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  void (**v24)(char *, char *, uint64_t);
  uint8_t *v25;
  os_signpost_id_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _TtC14softposreaderd12RemoteReader *v40;
  _TtC14softposreaderd12RemoteReader *v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t *v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  _TtC14softposreaderd12RemoteReader *v74;
  uint64_t v75;
  SEL v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint8_t *v88;
  _TtC14softposreaderd12RemoteReader *v89;
  uint64_t v90;
  uint64_t *v91;
  NSObject *v92;
  os_log_type_t v93;
  uint8_t *v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  _TtC14softposreaderd12RemoteReader *v99;
  uint64_t v100;
  SEL v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  NSObject *v112;
  os_log_type_t v113;
  uint8_t *v114;
  uint64_t v115;
  SEL v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  NSObject *v125;
  os_log_type_t v126;
  uint8_t *v127;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  void (**v135)(char *, char *, uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _BYTE v147[176];
  _OWORD v148[11];
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  _BYTE v160[16];
  __int128 v161;
  __int128 v162;
  _BYTE v163[16];
  __int128 v164;
  __int128 v165;
  _BYTE v166[16];
  _QWORD v167[2];
  _QWORD v168[2];
  _QWORD v169[2];
  _BYTE v170[192];

  v136 = a7;
  v137 = a1;
  v130 = a4;
  v131 = a6;
  v133 = a5;
  v134 = a2;
  sub_100024374(a1, (uint64_t)v147, &qword_1001AEE08);
  sub_100024374((uint64_t)v147, (uint64_t)v170, &qword_1001AEE08);
  v8 = type metadata accessor for OSSignpostError(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v129 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OSSignpostID(0);
  v135 = *(void (***)(char *, char *, uint64_t))(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v129 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v129 - v16;
  if (qword_1001AD070 != -1)
    swift_once(&qword_1001AD070, sub_1000837F8);
  v18 = type metadata accessor for OSSignposter(0);
  v19 = sub_100003A14(v18, (uint64_t)qword_1001B0CC0);
  v20 = OSSignposter.logHandle.getter(v19);
  v21 = OSSignpostIntervalState.signpostID.getter();
  v132 = static os_signpost_type_t.end.getter(v21);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v22 = swift_retain();
    checkForErrorAndConsumeState(state:)(v22);
    swift_release(a3);
    if ((*(unsigned int (**)(char *, uint64_t))(v9 + 88))(v11, v8) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v23 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      v23 = "end check for remote updates";
    }
    v24 = v135;
    v135[2](v15, v17, v12);
    v25 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v25 = 0;
    v26 = OSSignpostID.rawValue.getter(v25);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, (os_signpost_type_t)v132, v26, "config-status-checkForRemoteUpdates", v23, v25, 2u);
    swift_slowDealloc(v25, -1, -1);

    v27 = v24[1];
    ((void (*)(char *, uint64_t))v27)(v17, v12);
    ((void (*)(char *, uint64_t))v27)(v15, v12);
  }
  else
  {

    ((void (*)(char *, uint64_t))v135[1])(v17, v12);
  }
  v28 = v137;
  sub_100024374(v137, (uint64_t)v148, &qword_1001AEE08);
  if (sub_100093D78((uint64_t)v148) == 1)
  {
    v29 = v134;
    if (v134)
    {
      swift_errorRetain();
      if (qword_1001AD068 != -1)
        swift_once(&qword_1001AD068, sub_100083768);
      v30 = (uint64_t *)(v131 + 16);
      v31 = type metadata accessor for Logger(0);
      sub_100003A14(v31, (uint64_t)qword_1001B0CA8);
      swift_errorRetain();
      v32 = swift_errorRetain();
      v33 = Logger.logObject.getter(v32);
      v34 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v33, v34))
      {
        v35 = (uint8_t *)swift_slowAlloc(12, -1);
        v36 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v149 = v36;
        *(_DWORD *)v35 = 136315138;
        v145 = v29;
        swift_errorRetain();
        v37 = sub_100003A2C((uint64_t *)&unk_1001B1280);
        v38 = String.init<A>(describing:)(&v145, v37);
        v40 = (_TtC14softposreaderd12RemoteReader *)v39;
        v145 = sub_1000056EC(v38, v39, (uint64_t *)&v149);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, &v146, v35 + 4, v35 + 12);
        v41 = v40;
        v29 = v134;
        swift_bridgeObjectRelease(v41, v42, v43, v44, v45, v46, v47, v48);
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "OTA client error: %s", v35, 0xCu);
        swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v36, -1, -1);
        swift_slowDealloc(v35, -1, -1);
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      swift_beginAccess(v30, &v149, 1, 0);
      *v30 = v29;
      swift_errorRelease();
    }
    return OS_dispatch_semaphore.signal()();
  }
  v157 = v148[8];
  v158 = v148[9];
  v159 = v148[10];
  v153 = v148[4];
  v154 = v148[5];
  v155 = v148[6];
  v156 = v148[7];
  v149 = v148[0];
  v150 = v148[1];
  v151 = v148[2];
  v152 = v148[3];
  sub_100024374((uint64_t)&v149, (uint64_t)v160, &qword_1001B0E20);
  sub_100024374((uint64_t)v160, (uint64_t)v169, &qword_1001B0E20);
  v49 = &qword_1001AD000;
  if (v169[1] >> 60 == 15)
  {
    sub_100024374((uint64_t)v170, (uint64_t)&v145, &qword_1001AEE08);
    sub_100093D90(&v145);
    if (qword_1001AD068 != -1)
      swift_once(&qword_1001AD068, sub_100083768);
    v50 = type metadata accessor for Logger(0);
    v51 = sub_100003A14(v50, (uint64_t)qword_1001B0CA8);
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v52, v53))
    {
      v54 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "No applet update available", v54, 2u);
      swift_slowDealloc(v54, -1, -1);
    }

  }
  else
  {
    sub_100024374((uint64_t)v170, (uint64_t)&v145, &qword_1001AEE08);
    sub_100093D90(&v145);
    if (qword_1001AD068 != -1)
      swift_once(&qword_1001AD068, sub_100083768);
    v55 = (_BYTE *)(v130 + 16);
    v56 = type metadata accessor for Logger(0);
    v57 = sub_100003A14(v56, (uint64_t)qword_1001B0CA8);
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v58, v59))
    {
      v60 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "applet update available", v60, 2u);
      swift_slowDealloc(v60, -1, -1);
    }

    swift_beginAccess(v55, &v138, 1, 0);
    *v55 = 1;
  }
  v61 = (_BYTE *)(v133 + 16);
  v161 = v150;
  v162 = v151;
  sub_100024374((uint64_t)&v162, (uint64_t)v163, &qword_1001B0E20);
  sub_100024374((uint64_t)v163, (uint64_t)v168, &qword_1001B0E20);
  if (v168[1] >> 60 == 15)
  {
    if (qword_1001AD068 != -1)
      swift_once(&qword_1001AD068, sub_100083768);
    v62 = type metadata accessor for Logger(0);
    v63 = sub_100003A14(v62, (uint64_t)qword_1001B0CA8);
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v64, v65))
    {
      v66 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v66 = 0;
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "No globalKernelConfig update available", v66, 2u);
      swift_slowDealloc(v66, -1, -1);
    }

  }
  else
  {
    if (qword_1001AD068 != -1)
      swift_once(&qword_1001AD068, sub_100083768);
    v67 = type metadata accessor for Logger(0);
    sub_100003A14(v67, (uint64_t)qword_1001B0CA8);
    sub_100024374((uint64_t)v170, (uint64_t)&v145, &qword_1001AEE08);
    v68 = sub_100093D90(&v145);
    v69 = Logger.logObject.getter(v68);
    v70 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v69, v70))
    {
      v135 = (void (**)(char *, char *, uint64_t))v61;
      v71 = (uint8_t *)swift_slowAlloc(12, -1);
      v72 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v164 = v72;
      *(_DWORD *)v71 = 136315138;
      v74 = (_TtC14softposreaderd12RemoteReader *)*((_QWORD *)&v161 + 1);
      v73 = v161;
      swift_bridgeObjectRetain();
      v75 = v73;
      v28 = v137;
      v143 = sub_1000056EC(v75, (unint64_t)v74, (uint64_t *)&v164);
      v61 = v135;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144, v71 + 4, v71 + 12);
      swift_bridgeObjectRelease(v74, v76, v77, v78, v79, v80, v81, v82);
      sub_100093F2C(v28);
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "globalKernelConfig id: %s", v71, 0xCu);
      swift_arrayDestroy(v72, 1, (char *)&type metadata for Any + 8);
      v83 = v72;
      v49 = &qword_1001AD000;
      swift_slowDealloc(v83, -1, -1);
      swift_slowDealloc(v71, -1, -1);
    }
    else
    {
      sub_100093F2C(v28);
    }

    swift_beginAccess(v61, &v139, 1, 0);
    *v61 = 1;
  }
  v164 = v152;
  v165 = v153;
  sub_100024374((uint64_t)&v165, (uint64_t)v166, &qword_1001B0E20);
  sub_100024374((uint64_t)v166, (uint64_t)v167, &qword_1001B0E20);
  if (v167[1] >> 60 == 15)
  {
    if (v49[13] != -1)
      swift_once(&qword_1001AD068, sub_100083768);
    v84 = type metadata accessor for Logger(0);
    v85 = sub_100003A14(v84, (uint64_t)qword_1001B0CA8);
    v86 = Logger.logObject.getter(v85);
    v87 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v86, v87))
    {
      v88 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v88 = 0;
      _os_log_impl((void *)&_mh_execute_header, v86, v87, "No onlinePartnerProfile update available", v88, 2u);
      swift_slowDealloc(v88, -1, -1);
    }

    v89 = (_TtC14softposreaderd12RemoteReader *)*((_QWORD *)&v156 + 1);
    if (!*((_QWORD *)&v156 + 1))
      goto LABEL_58;
  }
  else
  {
    if (v49[13] != -1)
      swift_once(&qword_1001AD068, sub_100083768);
    v90 = type metadata accessor for Logger(0);
    sub_100003A14(v90, (uint64_t)qword_1001B0CA8);
    sub_100024374((uint64_t)v170, (uint64_t)&v145, &qword_1001AEE08);
    v91 = sub_100093D90(&v145);
    v92 = Logger.logObject.getter(v91);
    v93 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v92, v93))
    {
      v94 = (uint8_t *)swift_slowAlloc(12, -1);
      v95 = swift_slowAlloc(32, -1);
      v135 = (void (**)(char *, char *, uint64_t))v61;
      v96 = v49;
      v97 = v95;
      v143 = v95;
      *(_DWORD *)v94 = 136315138;
      v99 = (_TtC14softposreaderd12RemoteReader *)*((_QWORD *)&v164 + 1);
      v98 = v164;
      swift_bridgeObjectRetain();
      v100 = v98;
      v28 = v137;
      v140 = sub_1000056EC(v100, (unint64_t)v99, &v143);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v94 + 4, v94 + 12);
      swift_bridgeObjectRelease(v99, v101, v102, v103, v104, v105, v106, v107);
      sub_100093F2C(v28);
      _os_log_impl((void *)&_mh_execute_header, v92, v93, "onlinePartnerProfile id: %s", v94, 0xCu);
      swift_arrayDestroy(v97, 1, (char *)&type metadata for Any + 8);
      v108 = v97;
      v49 = v96;
      v61 = v135;
      swift_slowDealloc(v108, -1, -1);
      swift_slowDealloc(v94, -1, -1);
    }
    else
    {
      sub_100093F2C(v28);
    }

    swift_beginAccess(v61, &v140, 1, 0);
    *v61 = 1;
    v89 = (_TtC14softposreaderd12RemoteReader *)*((_QWORD *)&v156 + 1);
    if (!*((_QWORD *)&v156 + 1))
      goto LABEL_58;
  }
  if (*((_QWORD *)&v157 + 1) >> 60 == 15)
  {
LABEL_58:
    if (v49[13] != -1)
      swift_once(&qword_1001AD068, sub_100083768);
    v123 = type metadata accessor for Logger(0);
    v124 = sub_100003A14(v123, (uint64_t)qword_1001B0CA8);
    v125 = Logger.logObject.getter(v124);
    v126 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v125, v126))
    {
      v127 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v127 = 0;
      _os_log_impl((void *)&_mh_execute_header, v125, v126, "No safPartnerProfile update available", v127, 2u);
      swift_slowDealloc(v127, -1, -1);

      sub_100093F2C(v28);
    }
    else
    {
      sub_100093F2C(v28);

    }
    return OS_dispatch_semaphore.signal()();
  }
  v109 = v156;
  if (v49[13] != -1)
    swift_once(&qword_1001AD068, sub_100083768);
  v110 = type metadata accessor for Logger(0);
  sub_100003A14(v110, (uint64_t)qword_1001B0CA8);
  sub_100024374((uint64_t)v170, (uint64_t)&v145, &qword_1001AEE08);
  v111 = sub_100093D90(&v145);
  v112 = Logger.logObject.getter(v111);
  v113 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v112, v113))
  {
    v114 = (uint8_t *)swift_slowAlloc(12, -1);
    v115 = swift_slowAlloc(32, -1);
    v143 = v115;
    v135 = (void (**)(char *, char *, uint64_t))v61;
    *(_DWORD *)v114 = 136315138;
    swift_bridgeObjectRetain();
    v142 = sub_1000056EC(v109, (unint64_t)v89, &v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v114 + 4, v114 + 12);
    swift_bridgeObjectRelease(v89, v116, v117, v118, v119, v120, v121, v122);
    sub_100093F2C(v28);
    _os_log_impl((void *)&_mh_execute_header, v112, v113, "safPartnerProfile id: %s", v114, 0xCu);
    swift_arrayDestroy(v115, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v115, -1, -1);
    swift_slowDealloc(v114, -1, -1);

    v61 = v135;
    sub_100093F2C(v28);
  }
  else
  {
    sub_100093F2C(v28);
    sub_100093F2C(v28);

  }
  swift_beginAccess(v61, &v143, 1, 0);
  *v61 = 1;
  return OS_dispatch_semaphore.signal()();
}

void sub_10008A93C(void *a1, uint64_t a2, uint64_t a3, _TtC14softposreaderd12RemoteReader *a4, uint64_t a5, int a6, void **a7, uint64_t a8)
{
  _TtC14softposreaderd12RemoteReader *v8;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  _TtC14softposreaderd12RemoteReader *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _TtC14softposreaderd12RemoteReader *v70;
  SEL v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  int v84;
  _BOOL4 v85;
  uint64_t v86;
  uint64_t v87;
  _TtC14softposreaderd12RemoteReader *v88;
  SEL v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  int *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _TtC14softposreaderd12RemoteReader *v103;
  SEL v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  _TtC14softposreaderd12RemoteReader *v116;
  SEL v117;
  id v118;
  id v119;
  id v120;
  id v121;
  id v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  _TtC14softposreaderd12RemoteReader *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _TtC14softposreaderd12RemoteReader *v131;
  uint64_t v132;
  uint64_t v133;
  _TtC14softposreaderd12RemoteReader *v134;
  SEL v135;
  id v136;
  id v137;
  id v138;
  id v139;
  id v140;
  id v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _TtC14softposreaderd12RemoteReader *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _TtC14softposreaderd12RemoteReader *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  void *v194;
  void *v195;
  void *v196;
  void *v197;
  void *v198;
  void *v199;
  void *v200;
  _TtC14softposreaderd12RemoteReader *v201;
  unint64_t v202;
  unint64_t v203;
  __int16 v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char v210;
  void *v211;
  void *v212;
  void *v213;
  void *v214;
  _TtC14softposreaderd12RemoteReader *v215;
  unint64_t v216;
  _TtC14softposreaderd12RemoteReader *v217;
  unint64_t v218;
  char v219;
  unint64_t v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char v226;
  void *v227;
  void *v228;
  void *v229;
  void *v230;
  unint64_t v231;
  unint64_t v232;
  _TtC14softposreaderd12RemoteReader *v233;
  char v234;
  unint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char v241;
  void *v242;
  void *v243;
  void *v244;
  void *v245;
  unint64_t v246;
  unint64_t v247;
  _TtC14softposreaderd12RemoteReader *v248;
  char v249;
  unint64_t v250;
  char *v251;
  _TtC14softposreaderd12RemoteReader *v252;
  uint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  NSObject *v256;
  os_log_type_t v257;
  uint8_t *v258;
  _BOOL8 v259;
  NSObject *v260;
  os_log_type_t v261;
  uint8_t *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  NSObject *v266;
  os_log_type_t v267;
  _TtC14softposreaderd12RemoteReader *v268;
  SEL v269;
  id v270;
  id v271;
  id v272;
  id v273;
  id v274;
  id v275;
  _TtC14softposreaderd12RemoteReader *v276;
  uint64_t v277;
  uint64_t inited;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  void *v282;
  void *v283;
  void *v284;
  void *v285;
  os_unfair_lock_s *v286;
  os_unfair_lock_s *v287;
  uint64_t v288;
  os_unfair_lock_s *v289;
  uint64_t v290;
  SEL v291;
  id v292;
  id v293;
  id v294;
  id v295;
  id v296;
  id v297;
  _BOOL8 v298;
  NSObject *v299;
  os_log_type_t v300;
  uint8_t *v301;
  const char *v302;
  _TtC14softposreaderd12RemoteReader *v303;
  void *v304;
  void *v305;
  void *v306;
  void *v307;
  unint64_t v308;
  unint64_t v309;
  char *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  void *v315;
  void *v316;
  void *v317;
  void *v318;
  _TtC14softposreaderd12RemoteReader *v319;
  os_unfair_lock_s *v320;
  uint64_t v321;
  os_unfair_lock_s *v322;
  SEL v323;
  id v324;
  id v325;
  id v326;
  id v327;
  id v328;
  id v329;
  char *v330;
  _TtC14softposreaderd12RemoteReader *v331;
  _TtC14softposreaderd12RemoteReader *v332;
  uint64_t v333;
  NSObject *v334;
  os_log_type_t v335;
  _DWORD *v336;
  _DWORD *v337;
  uint64_t v338;
  uint64_t v339;
  const char *v340;
  _TtC14softposreaderd12RemoteReader *v341;
  id v342;
  id v343;
  id v344;
  id v345;
  id v346;
  id v347;
  _DWORD *v348;
  SEL v349;
  id v350;
  id v351;
  id v352;
  id v353;
  id v354;
  id v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t (*v358)(char *, _QWORD *);
  char *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  _TtC14softposreaderd12RemoteReader *v364;
  _TtC14softposreaderd12RemoteReader *v365;
  SEL v366;
  id v367;
  id v368;
  id v369;
  id v370;
  id v371;
  id v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  void *v381;
  void *v382;
  void *v383;
  void *v384;
  _TtC14softposreaderd12RemoteReader *v385;
  os_unfair_lock_s *v386;
  uint64_t v387;
  os_unfair_lock_s *v388;
  SEL v389;
  id v390;
  id v391;
  id v392;
  id v393;
  id v394;
  id v395;
  SEL v396;
  id v397;
  id v398;
  id v399;
  id v400;
  id v401;
  id v402;
  uint64_t v403;
  uint64_t v404;
  _QWORD *v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  unint64_t v411;
  _TtC14softposreaderd12RemoteReader *v412;
  SEL v413;
  id v414;
  id v415;
  id v416;
  id v417;
  id v418;
  id v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  _TtC14softposreaderd12RemoteReader *v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  _TtC14softposreaderd12RemoteReader *v430;
  SEL v431;
  id v432;
  id v433;
  id v434;
  id v435;
  id v436;
  id v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  NSObject *v441;
  os_log_type_t v442;
  uint8_t *v443;
  uint64_t *v444;
  uint64_t v445;
  int64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t *v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  const char *v477;
  void *v478;
  void *v479;
  void *v480;
  void *v481;
  void *v482;
  void *v483;
  NSObject *v484;
  uint64_t (*v485)(uint64_t);
  unint64_t v486;
  unint64_t v487;
  uint64_t v488;
  __int16 v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  unint64_t v502;
  unint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  SEL v508;
  id v509;
  id v510;
  id v511;
  id v512;
  id v513;
  id v514;
  BOOL v515;
  __int128 v516;
  uint64_t v517;
  uint64_t v518;
  _TtC14softposreaderd12RemoteReader *v519;
  _TtC14softposreaderd12RemoteReader *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  _TtC14softposreaderd12RemoteReader *v526;
  BOOL v527;
  _TtC14softposreaderd12RemoteReader *v528;
  char v529;
  SEL v530;
  id v531;
  id v532;
  id v533;
  id v534;
  id v535;
  id v536;
  SEL v537;
  id v538;
  id v539;
  id v540;
  id v541;
  id v542;
  id v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  int v550;
  uint64_t v551;
  SEL v552;
  id v553;
  id v554;
  id v555;
  id v556;
  id v557;
  id v558;
  uint64_t v559;
  char v560;
  unint64_t v561;
  _TtC14softposreaderd12RemoteReader *v562;
  _TtC14softposreaderd12RemoteReader *v563;
  const char *v564;
  void *v565;
  void *v566;
  void *v567;
  void *v568;
  void *v569;
  void *v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  _TtC14softposreaderd12RemoteReader *v578;
  _TtC14softposreaderd12RemoteReader *v579;
  const char *v580;
  void *v581;
  void *v582;
  void *v583;
  void *v584;
  void *v585;
  void *v586;
  SEL v587;
  id v588;
  id v589;
  id v590;
  id v591;
  id v592;
  id v593;
  os_log_type_t v594;
  uint8_t *v595;
  uint64_t v596;
  uint64_t v597;
  _TtC14softposreaderd12RemoteReader *v598;
  SEL v599;
  id v600;
  id v601;
  id v602;
  id v603;
  id v604;
  id v605;
  _TtC14softposreaderd12RemoteReader *v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  _TtC14softposreaderd12RemoteReader *v612;
  SEL v613;
  id v614;
  id v615;
  id v616;
  id v617;
  id v618;
  id v619;
  _TtC14softposreaderd12RemoteReader *v620;
  char v621;
  SEL v622;
  id v623;
  id v624;
  id v625;
  id v626;
  id v627;
  id v628;
  char *v629;
  uint64_t (*v630)(_QWORD, _QWORD, _QWORD);
  uint64_t v631;
  NSObject *v632;
  os_log_type_t v633;
  uint8_t *v634;
  uint64_t v635;
  unint64_t v636;
  _TtC14softposreaderd12RemoteReader *v637;
  SEL v638;
  id v639;
  id v640;
  id v641;
  id v642;
  id v643;
  id v644;
  uint64_t v645;
  NSObject *v646;
  uint64_t v647;
  os_log_type_t v648;
  uint64_t v649;
  _TtC14softposreaderd12RemoteReader *v650;
  SEL v651;
  id v652;
  id v653;
  id v654;
  id v655;
  id v656;
  id v657;
  char *v658;
  uint64_t (*v659)(_QWORD, _QWORD, _QWORD);
  char v660;
  SEL v661;
  id v662;
  id v663;
  id v664;
  id v665;
  id v666;
  id v667;
  SEL v668;
  id v669;
  id v670;
  id v671;
  id v672;
  id v673;
  id v674;
  SEL v675;
  id v676;
  id v677;
  id v678;
  id v679;
  id v680;
  id v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  const char *v691;
  const char *v692;
  id v693;
  id v694;
  id v695;
  id v696;
  id v697;
  id v698;
  _TtC14softposreaderd12RemoteReader *v699;
  SEL v700;
  id v701;
  id v702;
  id v703;
  id v704;
  id v705;
  id v706;
  uint64_t ObjectType;
  uint64_t v708;
  uint64_t (*v709)(uint64_t);
  id v710;
  id v711;
  const char *v712;
  void *v713;
  void *v714;
  void *v715;
  void *v716;
  void *v717;
  void *v718;
  unint64_t v719;
  uint64_t v720;
  uint64_t v721;
  unint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  char v729;
  uint64_t v730;
  uint64_t v731;
  _QWORD *v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  SEL v740;
  id v741;
  id v742;
  id v743;
  id v744;
  id v745;
  id v746;
  id v747;
  void *v748;
  uint64_t v749;
  const char *v750;
  void *v751;
  void *v752;
  void *v753;
  void *v754;
  void *v755;
  void *v756;
  char *v757;
  _QWORD *v758;
  id v759;
  void *v760;
  uint64_t v761;
  const char *v762;
  void *v763;
  void *v764;
  void *v765;
  void *v766;
  void *v767;
  void *v768;
  char *v769;
  void *v770;
  char v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  const char *v775;
  void *v776;
  void *v777;
  void *v778;
  void *v779;
  void *v780;
  void *v781;
  _TtC14softposreaderd12RemoteReader *v782;
  _TtC14softposreaderd12RemoteReader *v783;
  uint64_t v784;
  char v785;
  char v786;
  uint64_t (*v787)(char *, uint64_t, _QWORD *);
  uint64_t v788;
  uint64_t (*v789)(_QWORD, _QWORD, _QWORD);
  uint64_t v790;
  NSObject *v791;
  os_log_type_t v792;
  uint8_t *v793;
  uint64_t v794;
  uint64_t v795;
  _TtC14softposreaderd12RemoteReader *v796;
  _TtC14softposreaderd12RemoteReader *v797;
  const char *v798;
  void *v799;
  void *v800;
  void *v801;
  void *v802;
  void *v803;
  SEL v804;
  id v805;
  id v806;
  id v807;
  id v808;
  id v809;
  id v810;
  uint64_t v811;
  const char *v812;
  void *v813;
  void *v814;
  void *v815;
  void *v816;
  void *v817;
  void *v818;
  _TtC14softposreaderd12RemoteReader *v819;
  _TtC14softposreaderd12RemoteReader *v820;
  uint64_t v821;
  char v822;
  char v823;
  uint64_t (*v824)(char *, uint64_t, _QWORD *);
  uint64_t v825;
  uint64_t (*v826)(_QWORD, _QWORD, _QWORD);
  uint64_t v827;
  NSObject *v828;
  os_log_type_t v829;
  uint8_t *v830;
  uint64_t v831;
  uint64_t v832;
  _TtC14softposreaderd12RemoteReader *v833;
  _TtC14softposreaderd12RemoteReader *v834;
  SEL v835;
  id v836;
  id v837;
  id v838;
  id v839;
  id v840;
  id v841;
  _TtC14softposreaderd12RemoteReader *v842;
  uint64_t v843;
  SEL v844;
  id v845;
  id v846;
  id v847;
  id v848;
  id v849;
  id v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  _TtC14softposreaderd12RemoteReader *v854;
  void *v855;
  void *v856;
  void *v857;
  void *v858;
  unint64_t v859;
  unint64_t v860;
  _TtC14softposreaderd12RemoteReader *v861;
  uint64_t v862;
  char *v863;
  const char *v864;
  void *v865;
  void *v866;
  void *v867;
  void *v868;
  void *v869;
  void *v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  void *v875;
  void *v876;
  void *v877;
  void *v878;
  _TtC14softposreaderd12RemoteReader *v879;
  os_unfair_lock_s *v880;
  os_unfair_lock_s *v881;
  SEL v882;
  id v883;
  id v884;
  id v885;
  id v886;
  id v887;
  id v888;
  uint8_t *v889;
  _TtC14softposreaderd12RemoteReader *v890;
  _TtC14softposreaderd12RemoteReader *v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  void *v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  void *v901;
  void *v902;
  void *v903;
  void *v904;
  _TtC14softposreaderd12RemoteReader *v905;
  os_unfair_lock_s *v906;
  uint64_t v907;
  os_unfair_lock_s *v908;
  SEL v909;
  id v910;
  id v911;
  id v912;
  id v913;
  id v914;
  id v915;
  char *v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  NSObject *v921;
  os_log_type_t v922;
  int v923;
  BOOL v924;
  uint64_t v925;
  uint64_t v926;
  _TtC14softposreaderd12RemoteReader *v927;
  SEL v928;
  id v929;
  id v930;
  id v931;
  id v932;
  id v933;
  id v934;
  SEL v935;
  id v936;
  id v937;
  id v938;
  id v939;
  id v940;
  id v941;
  SEL v942;
  id v943;
  id v944;
  id v945;
  id v946;
  id v947;
  id v948;
  uint64_t v949;
  _TtC14softposreaderd12RemoteReader *v950;
  SEL v951;
  id v952;
  id v953;
  id v954;
  id v955;
  id v956;
  id v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  int *v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  _TtC14softposreaderd12RemoteReader *v970;
  uint64_t v971;
  _TtC14softposreaderd12RemoteReader *v972;
  uint64_t v973;
  uint64_t v974;
  _QWORD *v975;
  _TtC14softposreaderd12RemoteReader *v976;
  NSArray v977;
  SEL v978;
  id v979;
  id v980;
  id v981;
  id v982;
  id v983;
  id v984;
  NSString v985;
  SEL v986;
  id v987;
  id v988;
  id v989;
  id v990;
  id v991;
  id v992;
  uint64_t v993;
  id v994;
  void *v995;
  uint64_t v996;
  SEL v997;
  id v998;
  id v999;
  id v1000;
  id v1001;
  id v1002;
  id v1003;
  const char *v1004;
  void *v1005;
  void *v1006;
  void *v1007;
  void *v1008;
  void *v1009;
  void *v1010;
  os_unfair_lock_s *v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  NSObject *v1017;
  os_log_type_t v1018;
  _BOOL4 v1019;
  uint64_t v1020;
  uint8_t *v1021;
  uint64_t v1022;
  char *v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  unint64_t v1028;
  _TtC14softposreaderd12RemoteReader *v1029;
  char v1030;
  SEL v1031;
  id v1032;
  id v1033;
  id v1034;
  id v1035;
  id v1036;
  id v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  unint64_t v1042;
  _TtC14softposreaderd12RemoteReader *v1043;
  char v1044;
  SEL v1045;
  id v1046;
  id v1047;
  id v1048;
  id v1049;
  id v1050;
  id v1051;
  const char *v1052;
  void *v1053;
  void *v1054;
  void *v1055;
  void *v1056;
  void *v1057;
  void *v1058;
  os_unfair_lock_s *v1059;
  uint64_t v1060;
  os_unfair_lock_s *v1061;
  NSObject *v1062;
  os_log_type_t v1063;
  uint8_t *v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  _TtC14softposreaderd12RemoteReader *v1072;
  SEL v1073;
  id v1074;
  id v1075;
  id v1076;
  id v1077;
  id v1078;
  id v1079;
  uint64_t v1080;
  NSObject *v1081;
  os_log_type_t v1082;
  uint8_t *v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  char *v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  _TtC14softposreaderd12RemoteReader *v1092;
  SEL v1093;
  id v1094;
  id v1095;
  id v1096;
  id v1097;
  id v1098;
  id v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  os_unfair_lock_s v1104;
  char *v1105;
  char *v1106;
  void **v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  char *v1118;
  char *v1119;
  uint64_t v1120;
  char *v1121;
  char *v1122;
  char *v1123;
  char *v1124;
  char *v1125;
  char *v1126;
  char *v1127;
  char *v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  _TtC14softposreaderd12RemoteReader *v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t (*v1149)(uint64_t);
  NSObject *v1150;
  uint8_t *v1151;
  __int128 v1152;
  _BYTE *v1153;
  __int128 v1154;
  __int128 v1155;
  __int128 v1156;
  int64_t v1157;
  _TtC14softposreaderd12RemoteReader *v1158;
  void *v1159;
  uint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  _TtC14softposreaderd12RemoteReader *v1163;
  uint64_t v1164;
  _TtC14softposreaderd12RemoteReader *v1165;
  uint64_t v1166;
  uint64_t (*v1167)(uint64_t);
  _QWORD *v1168;
  id v1169;
  uint64_t *v1170;
  uint64_t v1171;
  uint64_t v1172;
  int *v1173;
  uint64_t v1174;
  uint64_t v1175;
  _BYTE v1176[24];
  uint64_t v1177;
  _BYTE v1178[16];
  __int128 v1179;
  __int128 v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  _QWORD v1184[11];
  uint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  __int128 v1190;
  _TtC14softposreaderd12RemoteReader *v1191;
  uint64_t v1192;
  _TtC14softposreaderd12RemoteReader *v1193;
  uint64_t v1194;
  uint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  __int128 v1200;
  uint64_t v1201;
  uint64_t v1202;
  _TtC14softposreaderd12RemoteReader *v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  __int128 v1210;
  uint64_t v1211;
  uint64_t v1212;
  _TtC14softposreaderd12RemoteReader *v1213;
  uint64_t v1214;
  uint64_t v1215[12];
  _TtC14softposreaderd12RemoteReader *v1216;
  uint64_t v1217;

  LODWORD(v1158) = a6;
  v1159 = (void *)a5;
  v1157 = (int64_t)a4;
  v1172 = a3;
  v1170 = (uint64_t *)a2;
  v1164 = type metadata accessor for UUID(0);
  v1162 = *(_QWORD *)(v1164 - 8);
  __chkstk_darwin(v1164);
  v13 = (char *)&v1104 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1168 = (_QWORD *)type metadata accessor for Logger(0);
  v1161 = *(v1168 - 1);
  v14 = __chkstk_darwin(v1168);
  v1119 = (char *)&v1104 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v1128 = (char *)&v1104 - v17;
  v18 = __chkstk_darwin(v16);
  v1118 = (char *)&v1104 - v19;
  v20 = __chkstk_darwin(v18);
  v1122 = (char *)&v1104 - v21;
  v22 = __chkstk_darwin(v20);
  v1121 = (char *)&v1104 - v23;
  v24 = __chkstk_darwin(v22);
  v1126 = (char *)&v1104 - v25;
  v26 = __chkstk_darwin(v24);
  v1125 = (char *)&v1104 - v27;
  __chkstk_darwin(v26);
  v1127 = (char *)&v1104 - v28;
  v29 = sub_100003A2C((uint64_t *)&unk_1001B36F0);
  v30 = __chkstk_darwin(v29);
  v1108 = (uint64_t)&v1104 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v30);
  v34 = (char *)&v1104 - v33;
  v35 = __chkstk_darwin(v32);
  v1160 = (uint64_t)&v1104 - v36;
  v37 = __chkstk_darwin(v35);
  v1120 = (uint64_t)&v1104 - v38;
  __chkstk_darwin(v37);
  v1163 = (_TtC14softposreaderd12RemoteReader *)((char *)&v1104 - v39);
  v1173 = (int *)_s14InstallPackageVMa(0);
  v40 = __chkstk_darwin(v1173);
  v1117 = (uint64_t)&v1104 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __chkstk_darwin(v40);
  v1110 = (uint64_t)&v1104 - v43;
  v44 = __chkstk_darwin(v42);
  v1109 = (uint64_t)&v1104 - v45;
  v46 = __chkstk_darwin(v44);
  v1171 = (uint64_t)&v1104 - v47;
  v48 = __chkstk_darwin(v46);
  v1124 = (char *)&v1104 - v49;
  v50 = __chkstk_darwin(v48);
  v1123 = (char *)&v1104 - v51;
  v52 = __chkstk_darwin(v50);
  v1167 = (uint64_t (*)(uint64_t))((char *)&v1104 - v53);
  v54 = __chkstk_darwin(v52);
  v56 = (char *)&v1104 - v55;
  __chkstk_darwin(v54);
  v58 = (char *)&v1104 - v57;
  if (qword_1001AD238 != -1)
    swift_once(&qword_1001AD238, sub_100116254);
  v1169 = a1;
  NFSecureElementManagerSession.select(_:)(AID_PAY_APPLET, *(unint64_t *)algn_1001B4F48);
  v59 = v8;
  if (!v8)
    goto LABEL_13;
  v1174 = a8;
  v59 = 0;
  *(_QWORD *)&v1179 = v8;
  swift_errorRetain();
  v60 = sub_100003A2C((uint64_t *)&unk_1001B1280);
  if (!swift_dynamicCast(&v1177, &v1179, v60, &type metadata for APDUSW, 6))
  {
    swift_errorRelease();
    goto LABEL_13;
  }
  v61 = (unsigned __int16)v1177;
  swift_errorRelease();
  v527 = v61 == 25392;
  v59 = 0;
  v62 = v1174;
  if (!v527)
  {
LABEL_13:
    v1165 = v8;
    v1174 = (uint64_t)v59;
    if (qword_1001AD068 != -1)
      swift_once(&qword_1001AD068, sub_100083768);
    v1107 = a7;
    v1105 = v13;
    v79 = sub_100003A14((uint64_t)v1168, (uint64_t)qword_1001B0CA8);
    v80 = v1170;
    sub_100070ECC((uint64_t)v1170, (uint64_t)v58, _s14InstallPackageVMa);
    sub_100070ECC((uint64_t)v80, (uint64_t)v56, _s14InstallPackageVMa);
    v81 = (uint64_t)v1167;
    v82 = sub_100070ECC((uint64_t)v80, (uint64_t)v1167, _s14InstallPackageVMa);
    v1166 = v79;
    v83 = Logger.logObject.getter(v82);
    v84 = static os_log_type_t.default.getter();
    v85 = os_log_type_enabled(v83, (os_log_type_t)v84);
    v1106 = v34;
    if (v85)
    {
      LODWORD(v1155) = v84;
      *(_QWORD *)&v1156 = v83;
      v86 = swift_slowAlloc(42, -1);
      *(_QWORD *)&v1154 = swift_slowAlloc(128, -1);
      *(_QWORD *)&v1179 = v1154;
      *(_DWORD *)v86 = 136315906;
      if (v1165)
        v87 = 544501614;
      else
        v87 = 0;
      if (v1165)
        v88 = (_TtC14softposreaderd12RemoteReader *)0xE400000000000000;
      else
        v88 = (_TtC14softposreaderd12RemoteReader *)0xE000000000000000;
      v1177 = sub_1000056EC(v87, (unint64_t)v88, (uint64_t *)&v1179);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v1177, v1178, v86 + 4, v86 + 12);
      swift_bridgeObjectRelease(v88, v89, v90, v91, v92, v93, v94, v95);
      *(_WORD *)(v86 + 12) = 2080;
      v96 = v1173;
      v98 = UUID.uuidString.getter(v97);
      v99 = v1174;
      v101 = sub_100081EE4(v98, v100);
      v103 = (_TtC14softposreaderd12RemoteReader *)v102;
      v1177 = sub_1000056EC(v101, v102, (uint64_t *)&v1179);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v1177, v1178, v86 + 14, v86 + 22);
      swift_bridgeObjectRelease(v103, v104, v105, v106, v107, v108, v109, v110);
      v111 = sub_100070F10((uint64_t)v58, _s14InstallPackageVMa);
      *(_WORD *)(v86 + 22) = 2080;
      v112 = UUID.uuidString.getter(v111);
      v114 = sub_100081EE4(v112, v113);
      v116 = (_TtC14softposreaderd12RemoteReader *)v115;
      v1177 = sub_1000056EC(v114, v115, (uint64_t *)&v1179);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v1177, v1178, v86 + 24, v86 + 32);
      swift_bridgeObjectRelease(v116, v117, v118, v119, v120, v121, v122, v123);
      sub_100070F10((uint64_t)v56, _s14InstallPackageVMa);
      *(_WORD *)(v86 + 32) = 2080;
      v124 = v96[10];
      v125 = (uint64_t)v1167;
      v126 = v1163;
      sub_100005EB4((uint64_t)v1167 + v124, (uint64_t)v1163, (uint64_t *)&unk_1001B36F0);
      v127 = v1162;
      v128 = v1164;
      v129 = (*(uint64_t (**)(_TtC14softposreaderd12RemoteReader *, uint64_t, uint64_t))(v1162 + 48))(v126, 1, v1164);
      if ((_DWORD)v129 == 1)
      {
        v1174 = v99;
        v130 = 4271950;
        sub_10005218C((uint64_t)v126, (uint64_t *)&unk_1001B36F0);
        v131 = (_TtC14softposreaderd12RemoteReader *)0xE300000000000000;
      }
      else
      {
        v132 = UUID.uuidString.getter(v129);
        v130 = sub_100081EE4(v132, v133);
        v131 = v134;
        v1174 = v99;
        (*(void (**)(_TtC14softposreaderd12RemoteReader *, uint64_t))(v127 + 8))(v126, v128);
      }
      v1177 = sub_1000056EC(v130, (unint64_t)v131, (uint64_t *)&v1179);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v1177, v1178, v86 + 34, v86 + 42);
      swift_bridgeObjectRelease(v131, v135, v136, v137, v138, v139, v140, v141);
      sub_100070F10(v125, _s14InstallPackageVMa);
      v142 = (void *)v1156;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v1156, (os_log_type_t)v1155, "previous applet %sinstalled. globalID: %s, profileID: %s, 2nd profile ID: %s", (uint8_t *)v86, 0x2Au);
      v143 = v1154;
      swift_arrayDestroy(v1154, 4, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v143, -1, -1);
      swift_slowDealloc(v86, -1, -1);

      v80 = v1170;
    }
    else
    {
      sub_100070F10((uint64_t)v58, _s14InstallPackageVMa);
      sub_100070F10((uint64_t)v56, _s14InstallPackageVMa);
      sub_100070F10(v81, _s14InstallPackageVMa);

    }
    v144 = *v80;
    v145 = v80[1];
    v146 = v80[2];
    v147 = v80[3];
    v148 = v80[4];
    v149 = v80[5];
    v150 = v80[6];
    v151 = v80[7];
    v153 = v80[8];
    v152 = v80[9];
    v1184[0] = *v80;
    v1184[1] = v145;
    v1184[2] = v146;
    v1184[3] = v147;
    v1184[4] = v148;
    v1184[5] = v149;
    v1184[6] = v150;
    v1184[7] = v151;
    v1184[8] = v153;
    v1184[9] = v152;
    v154 = v80[10];
    v155 = v80[11];
    v156 = v80[12];
    v157 = v80[13];
    v158 = v80[14];
    v159 = v80[15];
    v160 = v80[16];
    v161 = v80[17];
    v162 = (_TtC14softposreaderd12RemoteReader *)v80[18];
    v163 = v80[19];
    v164 = v80[20];
    v165 = v80[21];
    v1184[10] = v154;
    v1185 = v155;
    v1186 = v156;
    v1187 = v157;
    v1188 = v158;
    v1189 = v159;
    *(_QWORD *)&v1190 = v160;
    *((_QWORD *)&v1190 + 1) = v161;
    v1163 = v162;
    v1191 = v162;
    v1147 = v163;
    v1192 = v163;
    v1144 = v164;
    v1193 = (_TtC14softposreaderd12RemoteReader *)v164;
    v1139 = v165;
    v1194 = v165;
    v166 = v80[23];
    v167 = v80[24];
    v168 = v80[25];
    v169 = v80[26];
    v170 = v80[27];
    v171 = v80[28];
    v172 = v80[29];
    *(_QWORD *)&v1156 = v80[22];
    v1195 = v1156;
    *(_QWORD *)&v1155 = v166;
    v1196 = v166;
    v1153 = (_BYTE *)v168;
    *(_QWORD *)&v1154 = v167;
    v1197 = v167;
    v1198 = v168;
    v1151 = (uint8_t *)v170;
    *(_QWORD *)&v1152 = v169;
    v1199 = v169;
    *(_QWORD *)&v1200 = v170;
    v1149 = (uint64_t (*)(uint64_t))v172;
    v1150 = v171;
    *((_QWORD *)&v1200 + 1) = v171;
    v1201 = v172;
    v173 = v80[30];
    v1136 = (_TtC14softposreaderd12RemoteReader *)v80[31];
    v1137 = v173;
    v1202 = v173;
    v1203 = v1136;
    v174 = v80[33];
    v1133 = v80[32];
    v1204 = v1133;
    v1148 = v174;
    v1205 = v174;
    v175 = v80[35];
    v1138 = v80[34];
    v1206 = v1138;
    v1140 = v175;
    v1207 = v175;
    v176 = v80[37];
    v1141 = v80[36];
    v1142 = v176;
    v1208 = v1141;
    v1209 = v176;
    v177 = v80[39];
    v1143 = v80[38];
    *(_QWORD *)&v1210 = v1143;
    v1145 = v177;
    *((_QWORD *)&v1210 + 1) = v177;
    v178 = v80[41];
    v1146 = v80[40];
    v1211 = v1146;
    v1212 = v178;
    v179 = v80[42];
    v180 = v80[43];
    v1134 = v179;
    v1135 = v178;
    v1213 = (_TtC14softposreaderd12RemoteReader *)v179;
    v1214 = v180;
    v1167 = (uint64_t (*)(uint64_t))v154;
    if (v154)
    {
      v1112 = v159;
      v1113 = v158;
      v181 = (_TtC14softposreaderd12RemoteReader *)v144;
      v182 = v145;
      v1111 = v160;
      v183 = v146;
      v1114 = v180;
      v1115 = v151;
      v184 = v147;
      v1131 = v148;
      v1132 = v149;
      v1116 = v150;
      v1129 = v153;
      v1130 = v152;
      sub_10009773C(v144, v145, v146, v147, v148, v149, v150, v151, v153, v152, v154);
      sub_10009773C(v155, v156, v157, v1113, v1112, v1111, v161, (uint64_t)v1163, v1147, v1144, v1139);
      sub_10009773C(v1156, v1155, v1154, (uint64_t)v1153, v1152, (uint64_t)v1151, (uint64_t)v1150, (uint64_t)v1149, v1137, (uint64_t)v1136, v1133);
      sub_10009773C(v1148, v1138, v1140, v1141, v1142, v1143, v1145, v1146, v1135, v1134, v1114);
      v1163 = v181;
      v185 = (uint64_t)v181;
      v186 = v182;
      v187 = v182;
      v159 = v183;
      v188 = v183;
      v189 = v184;
      v190 = v184;
      v191 = v1116;
      v192 = v1115;
      sub_10009773C(v185, v187, v188, v190, v1131, v1132, v1116, v1115, v1129, v1130, (uint64_t)v1167);
      v201 = sub_1000919DC(0, 1, 1, (uint64_t)&_swiftEmptyArrayStorage, v193, v194, v195, v196);
      v203 = *(_QWORD *)&v201->instance[8];
      v202 = *(_QWORD *)&v201->instance[16];
      if (v203 >= v202 >> 1)
        v201 = sub_1000919DC((_TtC14softposreaderd12RemoteReader *)(v202 > 1), v203 + 1, 1, (uint64_t)v201, v197, v198, v199, v200);
      v204 = v1129;
      *(_QWORD *)&v201->instance[8] = v203 + 1;
      v205 = (char *)v201 + 88 * v203;
      *((_QWORD *)v205 + 4) = v1163;
      *((_QWORD *)v205 + 5) = v186;
      *((_QWORD *)v205 + 6) = v159;
      *((_QWORD *)v205 + 7) = v189;
      v205[64] = v1131;
      *((_QWORD *)v205 + 9) = v1132;
      *((_QWORD *)v205 + 10) = v191;
      *((_QWORD *)v205 + 11) = v192;
      v205[96] = v204 & 1;
      v205[97] = HIBYTE(v204);
      *((_QWORD *)v205 + 13) = v1130;
      *((_QWORD *)v205 + 14) = v1167;
    }
    else
    {
      sub_10009773C(v144, v145, v146, v147, v148, v149, v150, v151, v153, v152, 0);
      sub_10009773C(v155, v156, v157, v158, v159, v160, v161, (uint64_t)v1163, v1147, v1144, v1139);
      sub_10009773C(v1156, v1155, v1154, (uint64_t)v1153, v1152, (uint64_t)v1151, (uint64_t)v1150, (uint64_t)v1149, v1137, (uint64_t)v1136, v1133);
      sub_10009773C(v1148, v1138, v1140, v1141, v1142, v1143, v1145, v1146, v1135, v1134, v180);
      v201 = &_swiftEmptyArrayStorage;
    }
    v206 = v1194;
    if (v1194)
    {
      v207 = v1185;
      v208 = v1186;
      v209 = v1187;
      v159 = v1188;
      v1155 = v1190;
      *(_QWORD *)&v1154 = v1191;
      *(_QWORD *)&v1156 = v1192;
      v1163 = v1193;
      v210 = v1189;
      sub_100051188(v1185, v1186, v1187, v1188, v1189);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native(v201) & 1) == 0)
        v201 = sub_1000919DC(0, *(_QWORD *)&v201->instance[8] + 1, 1, (uint64_t)v201, v211, v212, v213, v214);
      v215 = v201;
      v216 = *(_QWORD *)&v201->instance[8];
      v217 = v215;
      v218 = *(_QWORD *)&v215->instance[16];
      if (v216 >= v218 >> 1)
        v217 = sub_1000919DC((_TtC14softposreaderd12RemoteReader *)(v218 > 1), v216 + 1, 1, (uint64_t)v217, v211, v212, v213, v214);
      v219 = v1156;
      v220 = (unint64_t)v1156 >> 8;
      *(_QWORD *)&v217->instance[8] = v216 + 1;
      v221 = (char *)v217 + 88 * v216;
      v201 = v217;
      *((_QWORD *)v221 + 4) = v207;
      *((_QWORD *)v221 + 5) = v208;
      *((_QWORD *)v221 + 6) = v209;
      *((_QWORD *)v221 + 7) = v159;
      v221[64] = v210;
      *(_OWORD *)(v221 + 72) = v1155;
      *((_QWORD *)v221 + 11) = v1154;
      v221[96] = v219 & 1;
      v221[97] = v220;
      *((_QWORD *)v221 + 13) = v1163;
      *((_QWORD *)v221 + 14) = v206;
    }
    *(_QWORD *)&v1156 = v1184;
    v222 = v1204;
    if (v1204)
    {
      v223 = v1195;
      v224 = v1196;
      v159 = v1197;
      v225 = v1198;
      v1154 = v1200;
      v1153 = (_BYTE *)v1201;
      *(_QWORD *)&v1155 = v1202;
      v1163 = v1203;
      v226 = v1199;
      sub_100051188(v1195, v1196, v1197, v1198, v1199);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native(v201) & 1) == 0)
        v201 = sub_1000919DC(0, *(_QWORD *)&v201->instance[8] + 1, 1, (uint64_t)v201, v227, v228, v229, v230);
      v232 = *(_QWORD *)&v201->instance[8];
      v231 = *(_QWORD *)&v201->instance[16];
      v233 = v201;
      if (v232 >= v231 >> 1)
        v233 = sub_1000919DC((_TtC14softposreaderd12RemoteReader *)(v231 > 1), v232 + 1, 1, (uint64_t)v201, v227, v228, v229, v230);
      v234 = v1155;
      v235 = (unint64_t)v1155 >> 8;
      *(_QWORD *)&v233->instance[8] = v232 + 1;
      v201 = v233;
      v236 = (char *)v233 + 88 * v232;
      *((_QWORD *)v236 + 4) = v223;
      *((_QWORD *)v236 + 5) = v224;
      *((_QWORD *)v236 + 6) = v159;
      *((_QWORD *)v236 + 7) = v225;
      v236[64] = v226;
      *(_OWORD *)(v236 + 72) = v1154;
      *((_QWORD *)v236 + 11) = v1153;
      v236[96] = v234 & 1;
      v236[97] = v235;
      *((_QWORD *)v236 + 13) = v1163;
      *((_QWORD *)v236 + 14) = v222;
    }
    v237 = v1214;
    if (v1214)
    {
      v238 = v1205;
      v239 = v1206;
      v159 = v1207;
      v240 = v1208;
      v1154 = v1210;
      v1153 = (_BYTE *)v1211;
      *(_QWORD *)&v1155 = v1212;
      v1163 = v1213;
      v241 = v1209;
      sub_100051188(v1205, v1206, v1207, v1208, v1209);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native(v201) & 1) == 0)
        v201 = sub_1000919DC(0, *(_QWORD *)&v201->instance[8] + 1, 1, (uint64_t)v201, v242, v243, v244, v245);
      v247 = *(_QWORD *)&v201->instance[8];
      v246 = *(_QWORD *)&v201->instance[16];
      v248 = v201;
      if (v247 >= v246 >> 1)
        v248 = sub_1000919DC((_TtC14softposreaderd12RemoteReader *)(v246 > 1), v247 + 1, 1, (uint64_t)v201, v242, v243, v244, v245);
      v249 = v1155;
      v250 = (unint64_t)v1155 >> 8;
      *(_QWORD *)&v248->instance[8] = v247 + 1;
      v201 = v248;
      v251 = (char *)v248 + 88 * v247;
      *((_QWORD *)v251 + 4) = v238;
      *((_QWORD *)v251 + 5) = v239;
      *((_QWORD *)v251 + 6) = v159;
      *((_QWORD *)v251 + 7) = v240;
      v251[64] = v241;
      *(_OWORD *)(v251 + 72) = v1154;
      *((_QWORD *)v251 + 11) = v1153;
      v251[96] = v249 & 1;
      v251[97] = v250;
      *((_QWORD *)v251 + 13) = v1163;
      *((_QWORD *)v251 + 14) = v237;
    }
    v252 = &_swiftEmptyArrayStorage;
    v253 = sub_100003A2C(&qword_1001B0DE0);
    v254 = swift_arrayDestroy(v1156, 4, v253);
    v255 = (_QWORD *)v1172;
    v1163 = v201;
    if (v1167)
    {
      v256 = Logger.logObject.getter(v254);
      v257 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v256, v257))
      {
        v258 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v258 = 0;
        _os_log_impl((void *)&_mh_execute_header, v256, v257, "fresh install of kernel", v258, 2u);
        swift_slowDealloc(v258, -1, -1);
      }

      if (!v1165)
      {
        v259 = sub_100083278();
        if (v259)
        {
          v260 = Logger.logObject.getter(v259);
          v261 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v260, v261))
          {
            v262 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v262 = 0;
            _os_log_impl((void *)&_mh_execute_header, v260, v261, "reset CAPK and CRL for the old kernel", v262, 2u);
            swift_slowDealloc(v262, -1, -1);
          }

        }
      }
      sub_100051B90(v1215);
      v1148 = v1215[0];
      v1149 = (uint64_t (*)(uint64_t))v1215[1];
      v1150 = v1215[2];
      v1151 = (uint8_t *)v1215[3];
      *(_QWORD *)&v1152 = v1215[4];
      v1160 = v1215[5];
      v1153 = (_BYTE *)v1215[6];
      *(_QWORD *)&v1154 = v1215[7];
      *(_QWORD *)&v1155 = v1215[8];
      v263 = v1215[10];
      *(_QWORD *)&v1156 = v1215[9];
      v264 = v255[13];
      if (qword_1001AD0A0 != -1)
        swift_once(&qword_1001AD0A0, sub_1000B06B4);
      v265 = sub_100003A14((uint64_t)v1168, (uint64_t)qword_1001B1408);
      v266 = Logger.logObject.getter(v265);
      v267 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v266, v267))
      {
        v159 = swift_slowAlloc(2, -1);
        *(_WORD *)v159 = 0;
        _os_log_impl((void *)&_mh_execute_header, v266, v267, "_removeAll()", (uint8_t *)v159, 2u);
        swift_slowDealloc(v159, -1, -1);
      }

      swift_beginAccess(v264 + 72, &v1177, 1, 0);
      v268 = *(_TtC14softposreaderd12RemoteReader **)(v264 + 72);
      *(_QWORD *)(v264 + 72) = &_swiftEmptyArrayStorage;
      swift_bridgeObjectRelease(v268, v269, v270, v271, v272, v273, v274, v275);
      sub_1000B0CA0();
      v276 = 0;
      while (1)
      {
        v1165 = v276;
        if (v1157)
        {
          ObjectType = swift_getObjectType(v1157);
          v485 = sub_10003ABC0(3, ObjectType);
          v1171 = v708;
        }
        else
        {
          v485 = 0;
          v1171 = 0;
        }
        v446 = *(_QWORD *)&v201->instance[8];
        v1167 = (uint64_t (*)(uint64_t))v263;
        if (v446)
        {
          v709 = v485;
          *(_QWORD *)&v1179 = v252;
          v710 = v1169;
          v711 = (id)sub_100091D0C(0, v446, 0);
          v252 = (_TtC14softposreaderd12RemoteReader *)v1179;
          v719 = *(_QWORD *)(v1179 + 16);
          v159 = (uint64_t)&v201[1].instance[16];
          do
          {
            v721 = *(_QWORD *)v159;
            v159 += 88;
            v720 = v721;
            *(_QWORD *)&v1179 = v252;
            v722 = *(_QWORD *)&v252->instance[16];
            v723 = v719 + 1;
            if (v719 >= v722 >> 1)
            {
              v711 = (id)sub_100091D0C(v722 > 1, v719 + 1, 1);
              v252 = (_TtC14softposreaderd12RemoteReader *)v1179;
            }
            *(_QWORD *)&v252->instance[8] = v723;
            *(_QWORD *)&v252->instance[8 * v719++ + 24] = v720;
            --v446;
          }
          while (v446);
          v255 = (_QWORD *)v1172;
          v485 = v709;
          v263 = (uint64_t)v1167;
LABEL_156:
          v724 = 0;
          v484 = 0;
          while (1)
          {
            v725 = *(_QWORD *)&v252->instance[8 * v724 + 24];
            v515 = __OFADD__(v484, v725);
            v484 = ((char *)v484 + v725);
            if (v515)
              break;
            if (v723 == ++v724)
              goto LABEL_159;
          }
          __break(1u);
          goto LABEL_257;
        }
        v723 = *(_QWORD *)&v252->instance[8];
        v711 = v1169;
        if (v723)
          goto LABEL_156;
        v484 = 0;
LABEL_159:
        swift_bridgeObjectRelease(v252, v712, v713, v714, v715, v716, v717, v718);
        *((_QWORD *)&v1180 + 1) = sub_100097850();
        v1181 = sub_100005F1C((unint64_t *)&qword_1001AC680, (uint64_t (*)(uint64_t))sub_100097850, (uint64_t)&protocol conformance descriptor for NFSecureElementManagerSession);
        *(_QWORD *)&v1179 = v1169;
        v726 = type metadata accessor for SLAMSwift();
        v252 = (_TtC14softposreaderd12RemoteReader *)swift_allocObject(v726, 96, 7);
        *(_QWORD *)&v252[1].instance[32] = sub_1000EDBBC((uint64_t)&_swiftEmptyArrayStorage);
        sub_10001A674(&v1179, (uint64_t)&v252->instance[8]);
        v727 = v1171;
        *(_QWORD *)v252[1].instance = v485;
        *(_QWORD *)&v252[1].instance[8] = v727;
        *(_QWORD *)&v252[1].instance[16] = 0;
        *(_QWORD *)&v252[1].instance[24] = v484;
        if (!v263)
          break;
        v728 = v1160;
        if (!__OFADD__(v484, v1160))
        {
          v729 = v1155;
          v1157 = (unint64_t)v1155 >> 8;
          *(_QWORD *)&v252[1].instance[24] = (char *)v484 + v1160;
          v730 = v728;
          v731 = sub_100003A2C(&qword_1001B0DE8);
          v732 = v255;
          v733 = (uint64_t)v485;
          v734 = swift_allocObject(v731, 120, 7);
          *(_OWORD *)(v734 + 16) = xmmword_10015A5F0;
          *(_QWORD *)(v734 + 32) = v1148;
          v735 = v734 + 32;
          v736 = (uint64_t)v1150;
          *(_QWORD *)(v734 + 40) = v1149;
          *(_QWORD *)(v734 + 48) = v736;
          *(_QWORD *)(v734 + 56) = v1151;
          *(_BYTE *)(v734 + 64) = v1152;
          v737 = (uint64_t)v1153;
          *(_QWORD *)(v734 + 72) = v730;
          *(_QWORD *)(v734 + 80) = v737;
          *(_QWORD *)(v734 + 88) = v1154;
          *(_BYTE *)(v734 + 96) = v729 & 1;
          *(_BYTE *)(v734 + 97) = v1157;
          v738 = (uint64_t)v1167;
          *(_QWORD *)(v734 + 104) = v1156;
          *(_QWORD *)(v734 + 112) = v738;
          sub_10003AB68(v733, v727);
          v739 = v1174;
          sub_10008EE74(v734, (uint64_t)v252, (uint64_t)v1159, v1158 & 1);
          if (v739)
          {
            sub_10004B5D0(v733, v727);
            swift_setDeallocating(v734);
            swift_arrayDestroy(v735, *(_QWORD *)(v734 + 16), &type metadata for SLAMScript);
            swift_deallocClassInstance(v734, 32, 7);
            swift_bridgeObjectRelease(v1163, v740, v741, v742, v743, v744, v745, v746);
            goto LABEL_218;
          }
          v758 = v732;
          v1167 = (uint64_t (*)(uint64_t))v733;
          swift_setDeallocating(v734);
          swift_arrayDestroy(v735, *(_QWORD *)(v734 + 16), &type metadata for SLAMScript);
          swift_deallocClassInstance(v734, 32, 7);
          v759 = objc_msgSend(v1169, "stateInformation");
          v1174 = 0;
          if (v759)
          {
            v760 = v759;
            v761 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v759, (char *)&type metadata for Any + 8);

            v769 = v1121;
            v255 = v758;
            if (*(_QWORD *)(v761 + 16))
            {
              sub_100005D5C(v761 + 32, (uint64_t)&v1179);
            }
            else
            {
              v1179 = 0u;
              v1180 = 0u;
            }
            v773 = v1161;
            swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v761, v762, v763, v764, v765, v766, v767, v768);
            if (*((_QWORD *)&v1180 + 1))
            {
              v811 = sub_100003A2C(&qword_1001AEAC8);
              if (swift_dynamicCast(&v1216, &v1179, (char *)&type metadata for Any + 8, v811, 6))
              {
                v819 = v1216;
                goto LABEL_197;
              }
LABEL_196:
              v819 = (_TtC14softposreaderd12RemoteReader *)sub_1000047FC((uint64_t)&_swiftEmptyArrayStorage);
LABEL_197:
              v1160 = sub_100070AAC((uint64_t)v819, v812, v813, v814, v815, v816, v817, v818);
              v1157 = (int64_t)v820;
              *(_QWORD *)&v1156 = v821;
              v823 = v822;
              v824 = *(uint64_t (**)(char *, uint64_t, _QWORD *))(v773 + 16);
              v825 = v773;
              v826 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v1168;
              v827 = v824(v769, v1166, v1168);
              v828 = Logger.logObject.getter(v827);
              v829 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v828, v829))
              {
                v830 = (uint8_t *)swift_slowAlloc(12, -1);
                v831 = swift_slowAlloc(32, -1);
                *(_QWORD *)&v1179 = v831;
                *(_DWORD *)v830 = 136315138;
                if ((v823 & 1) != 0)
                {
                  v832 = 7104878;
                  v834 = (_TtC14softposreaderd12RemoteReader *)0xE300000000000000;
                }
                else
                {
                  v832 = sub_10006995C();
                  v834 = v833;
                }
                v1216 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(v832, (unint64_t)v834, (uint64_t *)&v1179);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v1216, &v1217, v830 + 4, v830 + 12);
                swift_bridgeObjectRelease(v834, v835, v836, v837, v838, v839, v840, v841);
                _os_log_impl((void *)&_mh_execute_header, v828, v829, "snapshot: %s", v830, 0xCu);
                swift_arrayDestroy(v831, 1, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v831, -1, -1);
                swift_slowDealloc(v830, -1, -1);

                (*(void (**)(char *, _QWORD *))(v1161 + 8))(v1121, v1168);
                v255 = (_QWORD *)v1172;
              }
              else
              {

                (*(void (**)(char *, uint64_t (*)(_QWORD, _QWORD, _QWORD)))(v825 + 8))(v769, v826);
              }
              v770 = v1159;
              v771 = (char)v1158;
              v485 = v1167;
              if ((v823 & 1) != 0 || v1160 < 310001 || v1157 < 9721 || (uint64_t)v1156 <= 770)
                goto LABEL_209;
              goto LABEL_207;
            }
          }
          else
          {
            v1179 = 0u;
            v1180 = 0u;
            v773 = v1161;
            v769 = v1121;
            v255 = v732;
          }
          sub_10005218C((uint64_t)&v1179, &qword_1001B12E0);
          goto LABEL_196;
        }
        __break(1u);
LABEL_269:
        __break(1u);
        do
        {
          __break(1u);
LABEL_271:
          v159 = (uint64_t)sub_1000919DC(0, *(_QWORD *)(v159 + 16) + 1, 1, v159, v480, v481, v482, v483);
LABEL_96:
          v487 = *(_QWORD *)(v159 + 16);
          v486 = *(_QWORD *)(v159 + 24);
          if (v487 >= v486 >> 1)
            v159 = (uint64_t)sub_1000919DC((_TtC14softposreaderd12RemoteReader *)(v486 > 1), v487 + 1, 1, v159, v480, v481, v482, v483);
          v488 = v1156;
          v489 = v1143;
          v490 = (uint64_t)v1153;
          *(_QWORD *)(v159 + 16) = v487 + 1;
          v491 = v159 + 88 * v487;
          *(_QWORD *)(v491 + 32) = v488;
          *(_QWORD *)(v491 + 40) = v484;
          *(_QWORD *)(v491 + 48) = v485;
          *(_QWORD *)(v491 + 56) = v490;
          *(_BYTE *)(v491 + 64) = v1147;
          *(_QWORD *)(v491 + 72) = v1146;
          *(_QWORD *)(v491 + 80) = v1145;
          *(_QWORD *)(v491 + 88) = v1144;
          *(_BYTE *)(v491 + 96) = v489 & 1;
          *(_BYTE *)(v491 + 97) = HIBYTE(v489);
          *(_QWORD *)(v491 + 104) = v1148;
          *(_QWORD *)(v491 + 112) = v1142;
LABEL_100:
          v485 = *(uint64_t (**)(uint64_t))(v446 + 200);
          v492 = (uint64_t)v1170;
          if (v485)
          {
            v493 = *(_QWORD *)(v446 + 120);
            v494 = *(_QWORD *)(v446 + 128);
            v495 = *(_QWORD *)(v446 + 136);
            v496 = *(_QWORD *)(v446 + 144);
            v497 = *(_QWORD *)(v446 + 152);
            v498 = *(_QWORD *)(v446 + 160);
            v499 = *(_QWORD *)(v446 + 168);
            v500 = *(_QWORD *)(v446 + 176);
            v501 = *(_QWORD *)(v446 + 184);
            v1103 = *(_QWORD *)(v446 + 200);
            *(_QWORD *)&v1156 = *(_QWORD *)(v446 + 192);
            v1149 = (uint64_t (*)(uint64_t))v494;
            v1150 = v493;
            v1147 = v498;
            v1148 = v495;
            v1153 = (_BYTE *)v497;
            v1145 = v500;
            v1146 = v499;
            sub_10009773C(v493, v494, v495, v496, v497, v498, v499, v500, v501, v1156, v1103);
            if ((swift_isUniquelyReferenced_nonNull_native(v159) & 1) == 0)
              v159 = (uint64_t)sub_1000919DC(0, *(_QWORD *)(v159 + 16) + 1, 1, v159, v480, v481, v482, v483);
            v503 = *(_QWORD *)(v159 + 16);
            v502 = *(_QWORD *)(v159 + 24);
            if (v503 >= v502 >> 1)
              v159 = (uint64_t)sub_1000919DC((_TtC14softposreaderd12RemoteReader *)(v502 > 1), v503 + 1, 1, v159, v480, v481, v482, v483);
            *(_QWORD *)(v159 + 16) = v503 + 1;
            v504 = v159 + 88 * v503;
            v505 = (uint64_t)v1149;
            *(_QWORD *)(v504 + 32) = v1150;
            *(_QWORD *)(v504 + 40) = v505;
            *(_QWORD *)(v504 + 48) = v1148;
            *(_QWORD *)(v504 + 56) = v496;
            *(_BYTE *)(v504 + 64) = (_BYTE)v1153;
            v506 = v1146;
            *(_QWORD *)(v504 + 72) = v1147;
            *(_QWORD *)(v504 + 80) = v506;
            *(_QWORD *)(v504 + 88) = v1145;
            *(_BYTE *)(v504 + 96) = v501 & 1;
            *(_BYTE *)(v504 + 97) = BYTE1(v501);
            *(_QWORD *)(v504 + 104) = v1156;
            *(_QWORD *)(v504 + 112) = v485;
            v492 = (uint64_t)v1170;
          }
          swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v446, v477, v478, v479, v480, v481, v482, v483);
          swift_setDeallocating(v446);
          swift_arrayDestroy(v1151, *(_QWORD *)(v446 + 16), v1152);
          swift_deallocClassInstance(v446, 32, 7);
          v507 = *(_QWORD *)(v159 + 16);
          swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v159, v508, v509, v510, v511, v512, v513, v514);
          v515 = __OFSUB__(v1167, v507);
          v484 = ((char *)v1167 - v507);
          v1167 = (uint64_t (*)(uint64_t))v484;
        }
        while (v515);
        swift_beginAccess(&v1216, &v1177, 0, 0);
        v517 = *(_QWORD *)&v1216->instance[8];
        if ((uint64_t)v484 < v517 && v517)
        {
          v1153 = v1176;
          *(_QWORD *)&v516 = 136315138;
          v1152 = v516;
          v1150 = ((char *)&type metadata for Any + 8);
          while (1)
          {
            v446 = swift_allocObject(&unk_10019CD30, 32, 7);
            v485 = *(uint64_t (**)(uint64_t))(v1172 + 104);
            v518 = sub_1000B1E64();
            v520 = v519;
            sub_1000B0CA0();
            *(_QWORD *)(v446 + 16) = v518;
            v159 = v446 + 16;
            *(_QWORD *)(v446 + 24) = v520;
            v521 = swift_bridgeObjectRetain();
            v522 = UUID.uuidString.getter(v521);
            v523 = v1174;
            v525 = sub_100081EE4(v522, v524);
            v1174 = v523;
            v527 = v518 == v525 && v520 == v526;
            if (v527)
              break;
            v528 = v526;
            v529 = _stringCompareWithSmolCheck(_:_:expecting:)(v518, v520, v525, v526, 0);
            swift_bridgeObjectRelease(v520, v530, v531, v532, v533, v534, v535, v536);
            swift_bridgeObjectRelease(v528, v537, v538, v539, v540, v541, v542, v543);
            v544 = v1171;
            sub_100070ECC(v492, v1171, _s14InstallPackageVMa);
            if ((v529 & 1) != 0)
              goto LABEL_120;
            swift_beginAccess(v446 + 16, v1176, 1, 0);
            v159 = *(_QWORD *)(v446 + 24);
            *(_QWORD *)&v1156 = *(_QWORD *)(v446 + 16);
            v545 = v544 + v1173[10];
            v546 = v544;
            v547 = v1160;
            sub_100005EB4(v545, v1160, (uint64_t *)&unk_1001B36F0);
            v548 = v1162;
            v549 = v1164;
            v550 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1162 + 48))(v547, 1, v1164);
            v551 = swift_bridgeObjectRetain();
            if (v550 == 1)
            {
              sub_10005218C(v547, (uint64_t *)&unk_1001B36F0);
              sub_100070F10(v546, _s14InstallPackageVMa);
              swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v159, v552, v553, v554, v555, v556, v557, v558);
              v492 = (uint64_t)v1170;
              goto LABEL_117;
            }
            v572 = UUID.uuidString.getter(v551);
            v573 = v1174;
            v575 = sub_100081EE4(v572, v574);
            v576 = v547;
            v577 = v575;
            v579 = v578;
            v1174 = v573;
            (*(void (**)(uint64_t, uint64_t))(v548 + 8))(v576, v549);
            if ((_QWORD)v1156 != v577 || (_TtC14softposreaderd12RemoteReader *)v159 != v579)
            {
              v660 = _stringCompareWithSmolCheck(_:_:expecting:)(v1156, v159, v577, v579, 0);
              swift_bridgeObjectRelease(v579, v661, v662, v663, v664, v665, v666, v667);
              sub_100070F10(v1171, _s14InstallPackageVMa);
              swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v159, v668, v669, v670, v671, v672, v673, v674);
              v492 = (uint64_t)v1170;
              if ((v660 & 1) != 0)
                goto LABEL_121;
LABEL_117:
              v559 = sub_10008EAC8(*(_QWORD *)(v446 + 16), *(_QWORD *)(v446 + 24), v1216);
              if ((v560 & 1) != 0)
              {
                v484 = Logger.logObject.getter(v559);
                v594 = static os_log_type_t.error.getter();
                v159 = v594;
                if (os_log_type_enabled(v484, v594))
                {
                  v595 = (uint8_t *)swift_slowAlloc(2, -1);
                  *(_WORD *)v595 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v484, (os_log_type_t)v159, "cache is out of sync right after syncing? fallback: delete oldest installed instead of least recent used", v595, 2u);
                  swift_slowDealloc(v595, -1, -1);
                }

                swift_beginAccess(&v1216, &v1179, 33, 0);
                if (!*(_QWORD *)&v1216->instance[8])
                  goto LABEL_269;
                v597 = *(_QWORD *)&v1216->instance[24];
                v596 = *(_QWORD *)&v1216->instance[32];
                swift_bridgeObjectRetain();
                sub_10001C768(0, 1);
                swift_endAccess(&v1179);
                v598 = *(_TtC14softposreaderd12RemoteReader **)(v446 + 24);
                *(_QWORD *)(v446 + 16) = v597;
                *(_QWORD *)(v446 + 24) = v596;
                swift_bridgeObjectRelease(v598, v599, v600, v601, v602, v603, v604, v605);
                v606 = v1216;
                v607 = swift_bridgeObjectRetain();
                v608 = UUID.uuidString.getter(v607);
                v609 = v1174;
                v611 = sub_100081EE4(v608, v610);
                v563 = v612;
                v1174 = v609;
                sub_1000B1B90(v606, v611, v612);
                sub_1000B0CA0();
                swift_bridgeObjectRelease(v606, v613, v614, v615, v616, v617, v618, v619);
              }
              else
              {
                v561 = v559;
                swift_beginAccess(&v1216, &v1179, 33, 0);
                sub_10008ED98(v561);
                v563 = v562;
                swift_endAccess(&v1179);
              }
              swift_bridgeObjectRelease(v563, v564, v565, v566, v567, v568, v569, v570);
              v620 = *(_TtC14softposreaderd12RemoteReader **)(v446 + 24);
              swift_bridgeObjectRetain();
              v621 = sub_100082BB8();
              swift_bridgeObjectRelease(v620, v622, v623, v624, v625, v626, v627, v628);
              if ((v621 & 1) != 0)
              {
                v629 = v1125;
                v630 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v1168;
                ((void (*)(char *, uint64_t, _QWORD *))v1154)(v1125, v1166, v1168);
                v631 = swift_retain();
                v632 = Logger.logObject.getter(v631);
                v633 = static os_log_type_t.default.getter();
                v159 = v633;
                if (os_log_type_enabled(v632, v633))
                {
                  v634 = (uint8_t *)swift_slowAlloc(12, -1);
                  *(_QWORD *)&v1156 = swift_slowAlloc(32, -1);
                  *(_QWORD *)&v1179 = v1156;
                  *(_DWORD *)v634 = v1152;
                  v1151 = v634 + 4;
                  v635 = *(_QWORD *)(v446 + 16);
                  v636 = *(_QWORD *)(v446 + 24);
                  swift_bridgeObjectRetain();
                  v1175 = sub_1000056EC(v635, v636, (uint64_t *)&v1179);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v1175, v1153, v1151, v634 + 12);
                  swift_release(v446);
                  v637 = (_TtC14softposreaderd12RemoteReader *)v636;
                  v492 = (uint64_t)v1170;
                  swift_bridgeObjectRelease(v637, v638, v639, v640, v641, v642, v643, v644);
                  _os_log_impl((void *)&_mh_execute_header, v632, (os_log_type_t)v159, "profile slots full, deleted profile %s", v634, 0xCu);
                  v159 = v1156;
                  v645 = v1156;
                  v646 = v1150;
                  goto LABEL_137;
                }
LABEL_138:

                swift_release(v446);
                v658 = v629;
                v659 = v630;
              }
              else
              {
                v629 = v1126;
                v630 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v1168;
                ((void (*)(char *, uint64_t, _QWORD *))v1154)(v1126, v1166, v1168);
                v647 = swift_retain();
                v632 = Logger.logObject.getter(v647);
                v648 = static os_log_type_t.default.getter();
                v159 = v648;
                if (!os_log_type_enabled(v632, v648))
                  goto LABEL_138;
                v634 = (uint8_t *)swift_slowAlloc(12, -1);
                *(_QWORD *)&v1156 = swift_slowAlloc(32, -1);
                *(_QWORD *)&v1179 = v1156;
                *(_DWORD *)v634 = v1152;
                v1151 = v634 + 4;
                v649 = *(_QWORD *)(v446 + 16);
                v650 = *(_TtC14softposreaderd12RemoteReader **)(v446 + 24);
                swift_bridgeObjectRetain();
                v1175 = sub_1000056EC(v649, (unint64_t)v650, (uint64_t *)&v1179);
                v492 = (uint64_t)v1170;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v1175, v1153, v1151, v634 + 12);
                swift_release(v446);
                swift_bridgeObjectRelease(v650, v651, v652, v653, v654, v655, v656, v657);
                _os_log_impl((void *)&_mh_execute_header, v632, (os_log_type_t)v159, "profile slots full, failed to delete profile %s", v634, 0xCu);
                v646 = ((char *)&type metadata for Any + 8);
                v159 = v1156;
                v645 = v1156;
LABEL_137:
                swift_arrayDestroy(v645, 1, v646);
                swift_slowDealloc(v159, -1, -1);
                swift_slowDealloc(v634, -1, -1);

                v658 = v629;
                v659 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v1168;
              }
              ((void (*)(char *, uint64_t (*)(_QWORD, _QWORD, _QWORD)))v1155)(v658, v659);
LABEL_121:
              swift_release(v446);
              goto LABEL_122;
            }
            swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v159, v580, v581, v582, v583, v584, v585, v586);
            sub_100070F10(v1171, _s14InstallPackageVMa);
            swift_release(v446);
            swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v159, v587, v588, v589, v590, v591, v592, v593);
            v492 = (uint64_t)v1170;
LABEL_122:
            v571 = *(_QWORD *)&v1216->instance[8];
            if ((uint64_t)v1167 >= v571 || !v571)
              goto LABEL_142;
          }
          swift_bridgeObjectRelease_n(v520, 2);
          v544 = v1171;
          sub_100070ECC(v492, v1171, _s14InstallPackageVMa);
LABEL_120:
          sub_100070F10(v544, _s14InstallPackageVMa);
          goto LABEL_121;
        }
LABEL_142:
        v255 = (_QWORD *)v1172;
LABEL_143:
        swift_weakDestroy(&v1182);
        swift_bridgeObjectRelease(v1216, v675, v676, v677, v678, v679, v680, v681);
        v276 = v1165;
        if (v1165)
        {
          v682 = v255[32];
          v1171 = v255[33];
          v159 = (uint64_t)sub_100005EF8(v255 + 29, v682);
          v683 = sub_100003A2C(&qword_1001ADA18);
          v684 = swift_allocObject(v683, 144, 7);
          *(_OWORD *)(v684 + 16) = xmmword_10015A6C0;
          *(_QWORD *)(v684 + 32) = 1684631668;
          *(_QWORD *)(v684 + 40) = 0xE400000000000000;
          v685 = swift_bridgeObjectRetain();
          v686 = UUID.uuidString.getter(v685);
          *(_QWORD *)(v684 + 72) = &type metadata for String;
          *(_QWORD *)(v684 + 80) = &protocol witness table for String;
          *(_QWORD *)(v684 + 48) = v686;
          *(_QWORD *)(v684 + 56) = v687;
          *(_QWORD *)(v684 + 88) = 1701869940;
          *(_QWORD *)(v684 + 96) = 0xE400000000000000;
          *(_QWORD *)&v1179 = v1165;
          v688 = sub_100003A2C((uint64_t *)&unk_1001AE460);
          v689 = sub_100030828((unint64_t *)&qword_1001B12B0, (uint64_t *)&unk_1001AE460, (uint64_t)&protocol conformance descriptor for [A]);
          v690 = BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v688, v689);
          v692 = v691;
          swift_bridgeObjectRelease(v1165, v691, v693, v694, v695, v696, v697, v698);
          *(_QWORD *)(v684 + 128) = &type metadata for String;
          *(_QWORD *)(v684 + 136) = &protocol witness table for String;
          *(_QWORD *)(v684 + 104) = v690;
          *(_QWORD *)(v684 + 112) = v692;
          v255 = (_QWORD *)v1172;
          v699 = (_TtC14softposreaderd12RemoteReader *)sub_1000E84EC(v684);
          sub_100115684(17, (uint64_t)v699, v682, v1171);
          swift_bridgeObjectRelease(v699, v700, v701, v702, v703, v704, v705, v706);
          v276 = v1165;
        }
        v263 = 0;
        *(_QWORD *)&v1156 = 0;
        *(_QWORD *)&v1155 = 0;
        v1153 = 0;
        *(_QWORD *)&v1154 = 0;
        v1160 = 0;
        v1151 = 0;
        *(_QWORD *)&v1152 = 0;
        v1149 = 0;
        v1150 = 0;
        v1148 = 0;
        v201 = v1163;
      }
      if (!*(_QWORD *)&v1163->instance[8])
      {
        sub_10003AB68((uint64_t)v485, v727);
        v770 = v1159;
        v771 = (char)v1158;
        goto LABEL_207;
      }
      v1167 = v485;
      sub_10003AB68((uint64_t)v485, v727);
      v747 = objc_msgSend(v1169, "stateInformation");
      if (v747)
      {
        v748 = v747;
        v749 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v747, (char *)&type metadata for Any + 8);

        v757 = v1122;
        if (*(_QWORD *)(v749 + 16))
        {
          sub_100005D5C(v749 + 32, (uint64_t)&v1179);
        }
        else
        {
          v1179 = 0u;
          v1180 = 0u;
        }
        v772 = v1161;
        swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v749, v750, v751, v752, v753, v754, v755, v756);
        if (*((_QWORD *)&v1180 + 1))
        {
          v774 = sub_100003A2C(&qword_1001AEAC8);
          if (swift_dynamicCast(&v1216, &v1179, (char *)&type metadata for Any + 8, v774, 6))
          {
            v782 = v1216;
            goto LABEL_180;
          }
LABEL_179:
          v782 = (_TtC14softposreaderd12RemoteReader *)sub_1000047FC((uint64_t)&_swiftEmptyArrayStorage);
LABEL_180:
          v1160 = sub_100070AAC((uint64_t)v782, v775, v776, v777, v778, v779, v780, v781);
          v1157 = (int64_t)v783;
          *(_QWORD *)&v1156 = v784;
          v786 = v785;
          v787 = *(uint64_t (**)(char *, uint64_t, _QWORD *))(v772 + 16);
          v788 = v772;
          v789 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v1168;
          v790 = v787(v757, v1166, v1168);
          v791 = Logger.logObject.getter(v790);
          v792 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v791, v792))
          {
            v793 = (uint8_t *)swift_slowAlloc(12, -1);
            v794 = swift_slowAlloc(32, -1);
            *(_QWORD *)&v1179 = v794;
            *(_DWORD *)v793 = 136315138;
            if ((v786 & 1) != 0)
            {
              v795 = 7104878;
              v797 = (_TtC14softposreaderd12RemoteReader *)0xE300000000000000;
            }
            else
            {
              v795 = sub_10006995C();
              v797 = v796;
            }
            v1216 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(v795, (unint64_t)v797, (uint64_t *)&v1179);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v1216, &v1217, v793 + 4, v793 + 12);
            swift_bridgeObjectRelease(v797, v804, v805, v806, v807, v808, v809, v810);
            _os_log_impl((void *)&_mh_execute_header, v791, v792, "snapshot: %s", v793, 0xCu);
            swift_arrayDestroy(v794, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v794, -1, -1);
            swift_slowDealloc(v793, -1, -1);

            (*(void (**)(char *, _QWORD *))(v1161 + 8))(v1122, v1168);
            v255 = (_QWORD *)v1172;
          }
          else
          {

            (*(void (**)(char *, uint64_t (*)(_QWORD, _QWORD, _QWORD)))(v788 + 8))(v757, v789);
          }
          v770 = v1159;
          v771 = (char)v1158;
          v485 = v1167;
          if ((v786 & 1) != 0 || v1160 < 29001 || v1157 < 9721 || (uint64_t)v1156 <= 590)
          {
LABEL_209:
            swift_bridgeObjectRelease(v1163, v798, v770, v799, v800, v801, v802, v803);
            v851 = sub_1000247AC(2028, 0, 0, 0);
            swift_willThrow(v851);
            v852 = (uint64_t)v485;
            v853 = v1171;
            goto LABEL_210;
          }
LABEL_207:
          v842 = v1163;
          v843 = v1174;
          sub_10008EE74((uint64_t)v1163, (uint64_t)v252, (uint64_t)v770, v771 & 1);
          if (v843)
          {
            sub_10004B5D0((uint64_t)v485, v1171);
            swift_bridgeObjectRelease(v842, v844, v845, v846, v847, v848, v849, v850);
            goto LABEL_218;
          }
          v1167 = v485;
          NFSecureElementManagerSession.select(_:)(AID_PAY_APPLET, *(unint64_t *)algn_1001B4F48);
          v889 = sub_10007EC58((void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000DA1E0);
          v891 = v890;
          v892 = v1117;
          v893 = v255[34];
          v894 = sub_100003A2C(&qword_1001ADA30);
          v895 = swift_allocObject(v894, 72, 7);
          v896 = v895;
          *(_OWORD *)(v895 + 16) = xmmword_10015A5F0;
          *(_BYTE *)(v895 + 32) = 5;
          v1158 = v891;
          v1159 = v889;
          if (v891)
          {
            v897 = &type metadata for String;
            *(_QWORD *)&v1155 = v891;
            *(_QWORD *)&v1156 = v891;
          }
          else
          {
            v889 = 0;
            v897 = 0;
            *(_QWORD *)(v895 + 56) = 0;
            *(_QWORD *)&v1156 = 0xE300000000000000;
            *(_QWORD *)&v1155 = 0xE800000000000000;
          }
          *(_QWORD *)(v895 + 40) = v889;
          *(_QWORD *)(v895 + 48) = v891;
          *(_QWORD *)(v895 + 64) = v897;
          swift_bridgeObjectRetain();
          v905 = (_TtC14softposreaderd12RemoteReader *)sub_1000E862C(v896, v898, v899, v900, v901, v902, v903, v904);
          v1174 = v893;
          v906 = *(os_unfair_lock_s **)(v893 + 56);
          v907 = (uint64_t)&v906[4];
          v908 = v906 + 8;
          os_unfair_lock_lock(v906 + 8);
          sub_10005F610(v907, (uint64_t)v905);
          v1160 = 0;
          os_unfair_lock_unlock(v908);
          swift_bridgeObjectRelease(v905, v909, v910, v911, v912, v913, v914, v915);
          v916 = v1118;
          (*(void (**)(char *, uint64_t, _QWORD *))(v1161 + 16))(v1118, v1166, v1168);
          v917 = (uint64_t)v1170;
          v918 = v1109;
          sub_100070ECC((uint64_t)v1170, v1109, _s14InstallPackageVMa);
          v919 = v1110;
          sub_100070ECC(v918, v1110, _s14InstallPackageVMa);
          sub_100097A28(v918, v892, _s14InstallPackageVMa);
          v920 = swift_bridgeObjectRetain_n(v891, 2);
          v921 = Logger.logObject.getter(v920);
          v922 = static os_log_type_t.default.getter();
          v923 = v922;
          v924 = os_log_type_enabled(v921, v922);
          v1157 = (int64_t)v891;
          if (v924)
          {
            v925 = swift_slowAlloc(22, -1);
            *(_QWORD *)&v1154 = swift_slowAlloc(64, -1);
            *(_QWORD *)&v1179 = v1154;
            *(_DWORD *)v925 = 136315394;
            if (v1158)
              v926 = (uint64_t)v1159;
            else
              v926 = 4271950;
            swift_bridgeObjectRetain();
            LODWORD(v1153) = v923;
            v927 = (_TtC14softposreaderd12RemoteReader *)v1156;
            v1216 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(v926, v1156, (uint64_t *)&v1179);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v1216, &v1217, v925 + 4, v925 + 12);
            swift_bridgeObjectRelease(v891, v928, v929, v930, v931, v932, v933, v934);
            swift_bridgeObjectRelease(v927, v935, v936, v937, v938, v939, v940, v941);
            swift_bridgeObjectRelease(v891, v942, v943, v944, v945, v946, v947, v948);
            *(_WORD *)(v925 + 12) = 2080;
            if (*(_QWORD *)(v919 + 80))
              v949 = 0;
            else
              v949 = 7302688;
            if (*(_QWORD *)(v919 + 80))
              v950 = (_TtC14softposreaderd12RemoteReader *)0xE000000000000000;
            else
              v950 = (_TtC14softposreaderd12RemoteReader *)0xE300000000000000;
            v1216 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(v949, (unint64_t)v950, (uint64_t *)&v1179);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v1216, &v1217, v925 + 14, v925 + 22);
            swift_bridgeObjectRelease(v950, v951, v952, v953, v954, v955, v956, v957);
            sub_100070F10(v1117, _s14InstallPackageVMa);
            sub_100070F10(v919, _s14InstallPackageVMa);
            _os_log_impl((void *)&_mh_execute_header, v921, (os_log_type_t)v1153, "current version is %s after%s installation", (uint8_t *)v925, 0x16u);
            v958 = v1154;
            swift_arrayDestroy(v1154, 2, (char *)&type metadata for Any + 8);
            v917 = (uint64_t)v1170;
            swift_slowDealloc(v958, -1, -1);
            swift_slowDealloc(v925, -1, -1);

            (*(void (**)(char *, _QWORD *))(v1161 + 8))(v1118, v1168);
          }
          else
          {
            swift_bridgeObjectRelease_n(v891, 2);
            sub_100070F10(v892, _s14InstallPackageVMa);
            sub_100070F10(v919, _s14InstallPackageVMa);

            (*(void (**)(char *, _QWORD *))(v1161 + 8))(v916, v1168);
          }
          v959 = v1162;
          v960 = sub_100003A2C(&qword_1001B0DF0);
          v961 = swift_allocObject(v960, 64, 7);
          v1154 = xmmword_10015A6C0;
          *(_OWORD *)(v961 + 16) = xmmword_10015A6C0;
          v962 = v1173;
          *(_QWORD *)&v1156 = v917 + v1173[8];
          *(_QWORD *)(v961 + 32) = UUID.uuidString.getter(v961);
          *(_QWORD *)(v961 + 40) = v963;
          v1161 = v917 + v962[10];
          v964 = (uint64_t)v1106;
          sub_100005EB4(v1161, (uint64_t)v1106, (uint64_t *)&unk_1001B36F0);
          v965 = v1164;
          v1168 = *(_QWORD **)(v959 + 48);
          v966 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v1168)(v964, 1, v1164);
          if ((_DWORD)v966 == 1)
          {
            sub_10005218C(v964, (uint64_t *)&unk_1001B36F0);
            v967 = 0;
            v968 = 0;
          }
          else
          {
            v967 = UUID.uuidString.getter(v966);
            v968 = v969;
            (*(void (**)(uint64_t, uint64_t))(v959 + 8))(v964, v965);
          }
          v970 = v1163;
          *(_QWORD *)(v961 + 48) = v967;
          *(_QWORD *)(v961 + 56) = v968;
          v971 = v1160;
          v972 = sub_10007EB20(v961);
          swift_setDeallocating(v961);
          v973 = *(_QWORD *)(v961 + 16);
          v974 = sub_100003A2C(&qword_1001AE030);
          swift_arrayDestroy(v961 + 32, v973, v974);
          swift_deallocClassInstance(v961, 32, 7);
          v975 = (uint64_t *)((char *)v1170 + v1173[11]);
          if (*v975 == 1)
          {
            v976 = 0;
          }
          else
          {
            v976 = (_TtC14softposreaderd12RemoteReader *)v975[3];
            swift_bridgeObjectRetain();
          }
          v977.super.isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v972, v978, v979, v980, v981, v982, v983, v984);
          if (v976)
          {
            v985 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v976, v986, v987, v988, v989, v990, v991, v992);
          }
          else
          {
            v985 = 0;
          }
          v993 = v1174;
          v994 = objc_msgSend(objc_allocWithZone((Class)SPRInstallData), "initWithKernelsInstalled:countryCode:", v977.super.isa, v985);

          v995 = *v1107;
          *v1107 = v994;

          v996 = *(_QWORD *)&v970->instance[8];
          swift_bridgeObjectRelease(v970, v997, v998, v999, v1000, v1001, v1002, v1003);
          if (!v996)
          {
            swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v1157, v1004, v1005, v1006, v1007, v1008, v1009, v1010);
            v1017 = Logger.logObject.getter(v1016);
            v1018 = static os_log_type_t.default.getter();
            v1019 = os_log_type_enabled(v1017, v1018);
            v1020 = v1171;
            if (v1019)
            {
              v1021 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v1021 = 0;
              _os_log_impl((void *)&_mh_execute_header, v1017, v1018, "nothing was installed, skip profile activation", v1021, 2u);
              swift_slowDealloc(v1021, -1, -1);
              swift_release(v252);

              sub_10004B5D0((uint64_t)v1167, v1020);
            }
            else
            {
              sub_10004B5D0((uint64_t)v1167, v1171);

              swift_release(v252);
            }
LABEL_219:
            swift_bridgeObjectRelease(v1165, v864, v865, v866, v867, v868, v869, v870);
            return;
          }
          v1011 = *(os_unfair_lock_s **)(v993 + 56);
          v1012 = (uint64_t)&v1011[4];
          v286 = v1011 + 8;
          os_unfair_lock_lock(v1011 + 8);
          sub_10007F758(v1012, 4);
          v723 = v1171;
          if (!v971)
          {
            os_unfair_lock_unlock(v286);
            v1013 = v1108;
            sub_100005EB4(v1161, v1108, (uint64_t *)&unk_1001B36F0);
            v1014 = v1164;
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v1168)(v1013, 1, v1164) == 1)
            {
              v1015 = sub_10005218C(v1013, (uint64_t *)&unk_1001B36F0);
              goto LABEL_254;
            }
            v1022 = v1162;
            v1023 = v1105;
            v1024 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v1162 + 32))(v1105, v1013, v1014);
            v1025 = UUID.uuidString.getter(v1024);
            v1027 = sub_100081EE4(v1025, v1026);
            v1029 = (_TtC14softposreaderd12RemoteReader *)v1028;
            v1030 = sub_1000824D4(v1027, v1028);
            swift_bridgeObjectRelease(v1029, v1031, v1032, v1033, v1034, v1035, v1036, v1037);
            if ((v1030 & 1) != 0)
            {
              v1015 = (*(uint64_t (**)(char *, uint64_t))(v1022 + 8))(v1023, v1014);
              v723 = v1171;
              v993 = v1174;
LABEL_254:
              v1039 = UUID.uuidString.getter(v1015);
              v1041 = sub_100081EE4(v1039, v1040);
              v1043 = (_TtC14softposreaderd12RemoteReader *)v1042;
              v1044 = sub_1000824D4(v1041, v1042);
              swift_bridgeObjectRelease(v1043, v1045, v1046, v1047, v1048, v1049, v1050, v1051);
              v159 = v1172;
              if ((v1044 & 1) != 0)
              {
                swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v1157, v1052, v1053, v1054, v1055, v1056, v1057, v1058);
                v1059 = *(os_unfair_lock_s **)(v993 + 56);
                v1060 = (uint64_t)&v1059[4];
                v1061 = v1059 + 8;
                os_unfair_lock_lock(v1059 + 8);
                sub_100080108(v1060, 4);
                os_unfair_lock_unlock(v1061);
                sub_10004B5D0((uint64_t)v1167, v723);
                swift_release(v252);
                goto LABEL_219;
              }
LABEL_257:
              v1062 = Logger.logObject.getter(v711);
              v1063 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v1062, v1063))
              {
                v1064 = (uint8_t *)swift_slowAlloc(2, -1);
                *(_WORD *)v1064 = 0;
                _os_log_impl((void *)&_mh_execute_header, v1062, v1063, "cannot activate config", v1064, 2u);
                swift_slowDealloc(v1064, -1, -1);
              }

              sub_100008390(v159 + 232, (uint64_t)&v1179);
              v1065 = *((_QWORD *)&v1180 + 1);
              v1066 = v1181;
              sub_100005EF8(&v1179, *((uint64_t *)&v1180 + 1));
              v1067 = sub_100003A2C(&qword_1001ADA18);
              v1068 = swift_allocObject(v1067, 144, 7);
              *(_OWORD *)(v1068 + 16) = v1154;
              *(_QWORD *)(v1068 + 32) = 1684631668;
              *(_QWORD *)(v1068 + 40) = 0xE400000000000000;
              v1069 = UUID.uuidString.getter(v1068);
              *(_QWORD *)(v1068 + 72) = &type metadata for String;
              *(_QWORD *)(v1068 + 80) = &protocol witness table for String;
              *(_QWORD *)(v1068 + 48) = v1069;
              *(_QWORD *)(v1068 + 56) = v1070;
              *(_QWORD *)(v1068 + 88) = 7497078;
              *(_QWORD *)(v1068 + 96) = 0xE300000000000000;
              *(_QWORD *)(v1068 + 128) = &type metadata for String;
              *(_QWORD *)(v1068 + 136) = &protocol witness table for String;
              v1071 = 0x65756C61765F6F6ELL;
              if (v1158)
                v1071 = (uint64_t)v1159;
              *(_QWORD *)(v1068 + 104) = v1071;
              *(_QWORD *)(v1068 + 112) = v1155;
              v1072 = (_TtC14softposreaderd12RemoteReader *)sub_1000E84EC(v1068);
              sub_100115684(22, (uint64_t)v1072, v1065, v1066);
              swift_bridgeObjectRelease(v1072, v1073, v1074, v1075, v1076, v1077, v1078, v1079);
              sub_100005D3C(&v1179);
              v1080 = sub_1000247AC(2010, 0, 0, 0);
              swift_willThrow(v1080);
              v852 = (uint64_t)v1167;
              v853 = v723;
LABEL_210:
              sub_10004B5D0(v852, v853);
LABEL_218:
              swift_release(v252);
            }
            else
            {
              v1081 = Logger.logObject.getter(v1038);
              v1082 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v1081, v1082))
              {
                v1083 = (uint8_t *)swift_slowAlloc(2, -1);
                *(_WORD *)v1083 = 0;
                _os_log_impl((void *)&_mh_execute_header, v1081, v1082, "Cannot activate SAF profile", v1083, 2u);
                swift_slowDealloc(v1083, -1, -1);
              }

              sub_100008390(v1172 + 232, (uint64_t)&v1179);
              v1084 = *((_QWORD *)&v1180 + 1);
              v1085 = v1181;
              sub_100005EF8(&v1179, *((uint64_t *)&v1180 + 1));
              v1086 = sub_100003A2C(&qword_1001ADA18);
              v1087 = swift_allocObject(v1086, 144, 7);
              *(_OWORD *)(v1087 + 16) = v1154;
              *(_QWORD *)(v1087 + 32) = 1684631668;
              *(_QWORD *)(v1087 + 40) = 0xE400000000000000;
              v1088 = v1105;
              v1089 = UUID.uuidString.getter(v1087);
              *(_QWORD *)(v1087 + 72) = &type metadata for String;
              *(_QWORD *)(v1087 + 80) = &protocol witness table for String;
              *(_QWORD *)(v1087 + 48) = v1089;
              *(_QWORD *)(v1087 + 56) = v1090;
              *(_QWORD *)(v1087 + 88) = 7497078;
              *(_QWORD *)(v1087 + 96) = 0xE300000000000000;
              *(_QWORD *)(v1087 + 128) = &type metadata for String;
              *(_QWORD *)(v1087 + 136) = &protocol witness table for String;
              v1091 = 0x65756C61765F6F6ELL;
              if (v1158)
                v1091 = (uint64_t)v1159;
              *(_QWORD *)(v1087 + 104) = v1091;
              *(_QWORD *)(v1087 + 112) = v1155;
              v1092 = (_TtC14softposreaderd12RemoteReader *)sub_1000E84EC(v1087);
              sub_100115684(22, (uint64_t)v1092, v1084, v1085);
              swift_bridgeObjectRelease(v1092, v1093, v1094, v1095, v1096, v1097, v1098, v1099);
              sub_100005D3C(&v1179);
              v1100 = sub_1000247AC(2010, 0, 0, 0);
              swift_willThrow(v1100);
              swift_release(v252);
              sub_10004B5D0((uint64_t)v1167, v1171);
              (*(void (**)(char *, uint64_t))(v1162 + 8))(v1088, v1014);
            }
            goto LABEL_219;
          }
          goto LABEL_273;
        }
      }
      else
      {
        v1179 = 0u;
        v1180 = 0u;
        v772 = v1161;
        v757 = v1122;
      }
      sub_10005218C((uint64_t)&v1179, &qword_1001B12E0);
      goto LABEL_179;
    }
    *(_QWORD *)&v1152 = v253;
    v277 = *(_QWORD *)(v1172 + 272);
    v1167 = (uint64_t (*)(uint64_t))sub_100003A2C(&qword_1001ADA30);
    inited = swift_initStackObject(v1167, &v1183);
    v1156 = xmmword_10015A5F0;
    *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
    *(_BYTE *)(inited + 32) = 12;
    *(_QWORD *)(inited + 64) = &type metadata for ConfiguratorAnalytics.LoadStatus;
    *(_BYTE *)(inited + 40) = 2;
    v286 = (os_unfair_lock_s *)sub_1000E862C(inited, v279, v280, v281, v282, v283, v284, v285);
    v287 = *(os_unfair_lock_s **)(v277 + 56);
    v288 = (uint64_t)&v287[4];
    v289 = v287 + 8;
    os_unfair_lock_lock(v287 + 8);
    v290 = v1174;
    sub_10005F610(v288, (uint64_t)v286);
    if (v290)
    {
      os_unfair_lock_unlock(v289);
      __break(1u);
      os_unfair_lock_unlock(&v1104);
      __break(1u);
LABEL_273:
      os_unfair_lock_unlock(v286);
      __break(1u);
      return;
    }
    os_unfair_lock_unlock(v289);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v286, v291, v292, v293, v294, v295, v296, v297);
    if (!v1170[21])
    {
      v303 = (_TtC14softposreaderd12RemoteReader *)&off_100198C80;
      if ((swift_isUniquelyReferenced_nonNull_native(&off_100198C80) & 1) == 0)
        v303 = sub_1000915A4(0, 2, 1, (uint64_t)&off_100198C80, v304, v305, v306, v307);
      v309 = *(_QWORD *)&v303->instance[8];
      v308 = *(_QWORD *)&v303->instance[16];
      if (v309 >= v308 >> 1)
        v303 = sub_1000915A4((_TtC14softposreaderd12RemoteReader *)(v308 > 1), v309 + 1, 1, (uint64_t)v303, v304, v305, v306, v307);
      *(_QWORD *)&v303->instance[8] = v309 + 1;
      v1165 = v303;
      v310 = (char *)v303 + 16 * v309;
      *((_QWORD *)v310 + 4) = 0x6C61626F6C67;
      *((_QWORD *)v310 + 5) = 0xE600000000000000;
      v311 = swift_allocObject(v1167, 72, 7);
      *(_OWORD *)(v311 + 16) = v1156;
      *(_BYTE *)(v311 + 32) = 13;
      *(_QWORD *)(v311 + 64) = &type metadata for ConfiguratorAnalytics.LoadStatus;
      *(_BYTE *)(v311 + 40) = 2;
      v319 = (_TtC14softposreaderd12RemoteReader *)sub_1000E862C(v311, v312, v313, v314, v315, v316, v317, v318);
      v320 = *(os_unfair_lock_s **)(v277 + 56);
      v321 = (uint64_t)&v320[4];
      v322 = v320 + 8;
      os_unfair_lock_lock(v320 + 8);
      sub_10005F610(v321, (uint64_t)v319);
      os_unfair_lock_unlock(v322);
      swift_bridgeObjectRelease(v319, v323, v324, v325, v326, v327, v328, v329);
LABEL_78:
      v330 = v1127;
      v1216 = &_swiftEmptyArrayStorage;
      v331 = sub_10007F4E0();
      v1153 = (_BYTE *)v277;
      v332 = v331;
      *(_QWORD *)&v1154 = *(_QWORD *)(v1161 + 16);
      ((void (*)(char *, uint64_t, _QWORD *))v1154)(v330, v1166, v1168);
      v333 = swift_bridgeObjectRetain_n(v332, 2);
      v334 = Logger.logObject.getter(v333);
      v335 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v334, v335))
      {
        v336 = (_DWORD *)swift_slowAlloc(12, -1);
        v1174 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v1179 = v1174;
        *(_QWORD *)&v1155 = v336;
        *v336 = 136315138;
        v337 = v336 + 3;
        v1151 = (uint8_t *)(v336 + 1);
        v338 = swift_bridgeObjectRetain();
        v339 = Array.description.getter(v338, &type metadata for String);
        v341 = (_TtC14softposreaderd12RemoteReader *)v340;
        swift_bridgeObjectRelease(v332, v340, v342, v343, v344, v345, v346, v347);
        v1177 = sub_1000056EC(v339, (unint64_t)v341, (uint64_t *)&v1179);
        v348 = v337;
        v277 = (uint64_t)v1153;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v1177, v1178, v1151, v348);
        swift_bridgeObjectRelease_n(v332, 2);
        swift_bridgeObjectRelease(v341, v349, v350, v351, v352, v353, v354, v355);
        v356 = v1155;
        _os_log_impl((void *)&_mh_execute_header, v334, v335, "existing configs: %s", (uint8_t *)v1155, 0xCu);
        v357 = v1174;
        swift_arrayDestroy(v1174, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v357, -1, -1);
        swift_slowDealloc(v356, -1, -1);

        v358 = *(uint64_t (**)(char *, _QWORD *))(v1161 + 8);
        v359 = v1127;
      }
      else
      {

        swift_bridgeObjectRelease_n(v332, 2);
        v358 = *(uint64_t (**)(char *, _QWORD *))(v1161 + 8);
        v359 = v330;
      }
      *(_QWORD *)&v1155 = v358;
      v360 = v358(v359, v1168);
      v361 = UUID.uuidString.getter(v360);
      v363 = sub_100081EE4(v361, v362);
      v365 = v364;
      sub_1000B1B90(v332, v363, v364);
      sub_1000B0CA0();
      swift_bridgeObjectRelease(v365, v366, v367, v368, v369, v370, v371, v372);
      v373 = swift_allocObject(v1167, 112, 7);
      *(_OWORD *)(v373 + 16) = xmmword_10015A6C0;
      *(_BYTE *)(v373 + 32) = 7;
      *(_QWORD *)&v1179 = v332;
      v374 = sub_100003A2C((uint64_t *)&unk_1001AE460);
      v375 = sub_100030828((unint64_t *)&qword_1001B12B0, (uint64_t *)&unk_1001AE460, (uint64_t)&protocol conformance descriptor for [A]);
      v376 = BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v374, v375);
      *(_QWORD *)(v373 + 64) = &type metadata for String;
      *(_QWORD *)(v373 + 40) = v376;
      *(_QWORD *)(v373 + 48) = v377;
      *(_BYTE *)(v373 + 72) = 6;
      v378 = *(_QWORD *)&v332->instance[8];
      *(_QWORD *)(v373 + 104) = &type metadata for Int;
      *(_QWORD *)(v373 + 80) = v378;
      v385 = (_TtC14softposreaderd12RemoteReader *)sub_1000E862C(v373, v377, v379, v380, v381, v382, v383, v384);
      v386 = *(os_unfair_lock_s **)(v277 + 56);
      v387 = (uint64_t)&v386[4];
      v388 = v386 + 8;
      os_unfair_lock_lock(v386 + 8);
      sub_10005F610(v387, (uint64_t)v385);
      os_unfair_lock_unlock(v388);
      swift_bridgeObjectRelease(v385, v389, v390, v391, v392, v393, v394, v395);
      swift_bridgeObjectRelease(v1216, v396, v397, v398, v399, v400, v401, v402);
      v1216 = v332;
      v403 = v1164;
      v404 = (uint64_t)v1123;
      v405 = (_QWORD *)v1172;
      swift_weakInit(&v1182, v1172);
      v406 = (uint64_t)v1170;
      v407 = sub_100070ECC((uint64_t)v1170, v404, _s14InstallPackageVMa);
      if (*(_QWORD *)(v406 + 256))
      {
        v408 = UUID.uuidString.getter(v407);
        v410 = sub_100081EE4(v408, v409);
        v412 = (_TtC14softposreaderd12RemoteReader *)v411;
        sub_10008E77C(v410, v411, &v1216, (uint64_t)v1169, (uint64_t)&v1182);
        swift_bridgeObjectRelease(v412, v413, v414, v415, v416, v417, v418, v419);
      }
      if (*(_QWORD *)(v406 + 344))
      {
        v420 = v1120;
        sub_100005EB4(v406 + v1173[10], v1120, (uint64_t *)&unk_1001B36F0);
        v421 = v1162;
        v422 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1162 + 48))(v420, 1, v403);
        if ((_DWORD)v422 == 1)
        {
          sub_10005218C(v420, (uint64_t *)&unk_1001B36F0);
          v423 = 0;
          v424 = 0;
        }
        else
        {
          v426 = UUID.uuidString.getter(v422);
          v428 = sub_100081EE4(v426, v427);
          v429 = v420;
          v423 = v428;
          v424 = v430;
          (*(void (**)(uint64_t, uint64_t))(v421 + 8))(v429, v403);
        }
        v425 = (uint64_t)v1124;
        sub_10008E77C(v423, (unint64_t)v424, &v1216, (uint64_t)v1169, (uint64_t)&v1182);
        swift_bridgeObjectRelease(v424, v431, v432, v433, v434, v435, v436, v437);
      }
      else
      {
        v425 = (uint64_t)v1124;
      }
      sub_100070F10(v404, _s14InstallPackageVMa);
      v438 = v1170[32];
      sub_100070ECC((uint64_t)v1170, v425, _s14InstallPackageVMa);
      if (v438)
      {
        v439 = sub_100070F10(v425, _s14InstallPackageVMa);
      }
      else
      {
        v440 = *(_QWORD *)(v425 + 344);
        v439 = sub_100070F10(v425, _s14InstallPackageVMa);
        if (!v440)
        {
          v854 = v1165;
          if (v1165)
          {
            v255 = v405;
            if ((swift_isUniquelyReferenced_nonNull_native(v1165) & 1) == 0)
              v854 = sub_1000915A4(0, *(_QWORD *)&v854->instance[8] + 1, 1, (uint64_t)v854, v855, v856, v857, v858);
            v860 = *(_QWORD *)&v854->instance[8];
            v859 = *(_QWORD *)&v854->instance[16];
            v861 = v854;
            v862 = (uint64_t)v1153;
            if (v860 >= v859 >> 1)
              v861 = sub_1000915A4((_TtC14softposreaderd12RemoteReader *)(v859 > 1), v860 + 1, 1, (uint64_t)v861, v855, v856, v857, v858);
            *(_QWORD *)&v861->instance[8] = v860 + 1;
            v1165 = v861;
            v863 = (char *)v861 + 16 * v860;
            *((_QWORD *)v863 + 4) = 0x656C69666F7270;
            *((_QWORD *)v863 + 5) = 0xE700000000000000;
          }
          else
          {
            v1165 = 0;
            v255 = v405;
            v862 = (uint64_t)v1153;
          }
          v871 = swift_allocObject(v1167, 72, 7);
          *(_OWORD *)(v871 + 16) = v1156;
          *(_BYTE *)(v871 + 32) = 14;
          *(_QWORD *)(v871 + 64) = &type metadata for ConfiguratorAnalytics.LoadStatus;
          *(_BYTE *)(v871 + 40) = 2;
          v879 = (_TtC14softposreaderd12RemoteReader *)sub_1000E862C(v871, v872, v873, v874, v875, v876, v877, v878);
          v880 = *(os_unfair_lock_s **)(v862 + 56);
          v159 = (uint64_t)&v880[4];
          v881 = v880 + 8;
          os_unfair_lock_lock(v880 + 8);
          sub_10005F610(v159, (uint64_t)v879);
          v1174 = 0;
          os_unfair_lock_unlock(v881);
          swift_bridgeObjectRelease(v879, v882, v883, v884, v885, v886, v887, v888);
          goto LABEL_143;
        }
      }
      v441 = Logger.logObject.getter(v439);
      v442 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v441, v442))
      {
        v443 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v443 = 0;
        _os_log_impl((void *)&_mh_execute_header, v441, v442, "checking profile slots..", v443, 2u);
        swift_slowDealloc(v443, -1, -1);
      }

      v1167 = (uint64_t (*)(uint64_t))sub_100082250();
      v444 = v1170;
      v1174 = 0;
      v445 = sub_100003A2C(&qword_1001B0DD8);
      v446 = swift_allocObject(v445, 208, 7);
      v447 = v444[22];
      v448 = v444[23];
      *(_QWORD *)(v446 + 32) = v447;
      *(_OWORD *)(v446 + 16) = xmmword_10015A6C0;
      v449 = v444[24];
      v450 = v444[25];
      v451 = v444[26];
      v452 = v444[27];
      v453 = v444[28];
      v454 = v444[29];
      v455 = v444[30];
      v456 = v444[31];
      *(_QWORD *)(v446 + 40) = v448;
      *(_QWORD *)(v446 + 48) = v449;
      *(_QWORD *)(v446 + 56) = v450;
      *(_QWORD *)(v446 + 64) = v451;
      *(_QWORD *)(v446 + 72) = v452;
      *(_QWORD *)(v446 + 80) = v453;
      *(_QWORD *)(v446 + 88) = v454;
      *(_QWORD *)(v446 + 96) = v455;
      v457 = v444[32];
      *(_QWORD *)&v1156 = v444[33];
      v458 = v1156;
      *(_QWORD *)(v446 + 104) = v456;
      *(_QWORD *)(v446 + 112) = v457;
      v460 = v444[35];
      v1153 = (_BYTE *)v444[34];
      v459 = (uint64_t)v1153;
      v462 = v444[37];
      v1150 = v444[36];
      v461 = (uint64_t)v1150;
      v1151 = (uint8_t *)v460;
      v463 = v444;
      v465 = v444[38];
      v464 = v444[39];
      v466 = v444[40];
      v467 = v444[41];
      v1148 = v466;
      v1149 = (uint64_t (*)(uint64_t))v464;
      v468 = v463[42];
      v469 = v463[43];
      *(_QWORD *)(v446 + 120) = v458;
      *(_QWORD *)(v446 + 128) = v459;
      *(_QWORD *)(v446 + 136) = v460;
      *(_QWORD *)(v446 + 144) = v461;
      *(_QWORD *)(v446 + 152) = v462;
      *(_QWORD *)(v446 + 160) = v465;
      *(_QWORD *)(v446 + 168) = v464;
      *(_QWORD *)(v446 + 176) = v466;
      *(_QWORD *)(v446 + 184) = v467;
      *(_QWORD *)(v446 + 192) = v468;
      *(_QWORD *)(v446 + 200) = v469;
      sub_10009773C(v447, v448, v449, v450, v451, v452, v453, v454, v455, v456, v457);
      sub_10009773C(v1156, (uint64_t)v1153, (uint64_t)v1151, (uint64_t)v1150, v462, v465, (uint64_t)v1149, v1148, v467, v468, v469);
      *(_QWORD *)&v1156 = *(_QWORD *)(v446 + 32);
      v1150 = *(NSObject **)(v446 + 40);
      v1151 = (uint8_t *)(v446 + 32);
      v1149 = *(uint64_t (**)(uint64_t))(v446 + 48);
      v470 = *(_QWORD *)(v446 + 64);
      v1153 = *(_BYTE **)(v446 + 56);
      v471 = *(_QWORD *)(v446 + 72);
      v472 = *(_QWORD *)(v446 + 80);
      v474 = *(_QWORD *)(v446 + 88);
      v473 = *(_QWORD *)(v446 + 96);
      v475 = *(_QWORD *)(v446 + 104);
      v476 = *(_QWORD *)(v446 + 112);
      swift_bridgeObjectRetain();
      if (v476)
      {
        v1142 = v476;
        v1102 = v476;
        v1148 = v475;
        v1143 = v473;
        v1101 = v473;
        v485 = v1149;
        v484 = v1150;
        v1146 = v471;
        v1147 = v470;
        v1144 = v474;
        v1145 = v472;
        sub_10009773C(v1156, (uint64_t)v1150, (uint64_t)v1149, (uint64_t)v1153, v470, v471, v472, v474, v1101, v475, v1102);
        v159 = (uint64_t)&_swiftEmptyArrayStorage;
        if ((swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyArrayStorage) & 1) != 0)
          goto LABEL_96;
        goto LABEL_271;
      }
      v159 = (uint64_t)&_swiftEmptyArrayStorage;
      goto LABEL_100;
    }
    if (v1165 || !(v298 = sub_100083278()))
    {
      v299 = Logger.logObject.getter(v298);
      v300 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v299, v300))
      {
        v301 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v301 = 0;
        v302 = "Install global config: failed to reset keys.";
        goto LABEL_71;
      }
    }
    else
    {
      v299 = Logger.logObject.getter(v298);
      v300 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v299, v300))
      {
        v301 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v301 = 0;
        v302 = "Install global config: reset CAPK and CRL.";
LABEL_71:
        _os_log_impl((void *)&_mh_execute_header, v299, v300, v302, v301, 2u);
        swift_slowDealloc(v301, -1, -1);
      }
    }

    v1165 = (_TtC14softposreaderd12RemoteReader *)&off_100198C80;
    goto LABEL_78;
  }
  if (qword_1001AD068 != -1)
    swift_once(&qword_1001AD068, sub_100083768);
  v63 = sub_100003A14((uint64_t)v1168, (uint64_t)qword_1001B0CA8);
  v64 = Logger.logObject.getter(v63);
  v65 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v64, v65))
  {
    v66 = (uint8_t *)swift_slowAlloc(12, -1);
    v67 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v1179 = v67;
    *(_DWORD *)v66 = 136315138;
    v68 = _typeName(_:qualified:)(v62, 0);
    v70 = (_TtC14softposreaderd12RemoteReader *)v69;
    v1177 = sub_1000056EC(v68, v69, (uint64_t *)&v1179);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v1177, v1178, v66 + 4, v66 + 12);
    swift_bridgeObjectRelease(v70, v71, v72, v73, v74, v75, v76, v77);
    _os_log_impl((void *)&_mh_execute_header, v64, v65, "%s.execute(...) Cannot select pay applet during install. May be from prohibit timer.", v66, 0xCu);
    swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v67, -1, -1);
    swift_slowDealloc(v66, -1, -1);
  }

  v78 = sub_1000247AC(2009, 0, 0, 0);
  swift_willThrow(v78);
}

void sub_10008E77C(uint64_t a1, unint64_t a2, _TtC14softposreaderd12RemoteReader **a3, uint64_t a4, uint64_t a5)
{
  _TtC14softposreaderd12RemoteReader *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  const char *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  _TtC14softposreaderd12RemoteReader *v28;
  unsigned __int8 *instance;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v34;
  _TtC14softposreaderd12RemoteReader *v35;
  _TtC14softposreaderd12RemoteReader *v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  uint64_t Strong;
  uint64_t v45;
  uint64_t v46;
  _TtC14softposreaderd12RemoteReader *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _TtC14softposreaderd12RemoteReader *v52;
  _TtC14softposreaderd12RemoteReader *v53;
  SEL v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63[3];
  char v64[24];

  if (a2)
  {
    swift_beginAccess(a3, v64, 0, 0);
    v9 = *a3;
    v10 = *(_QWORD *)&(*a3)->instance[8];
    if (v10)
    {
      v11 = *(_QWORD *)&v9->instance[24];
      v12 = *(_QWORD *)&v9->instance[32];
      v13 = v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, a1, a2, 0) & 1) != 0)
      {
        v14 = 0;
LABEL_9:
        swift_bridgeObjectRetain();
        if ((sub_100082BB8() & 1) == 0)
        {
          v28 = (_TtC14softposreaderd12RemoteReader *)a2;
LABEL_26:
          swift_bridgeObjectRelease(v28, v15, v16, v17, v18, v19, v20, v21);
          return;
        }
        if (qword_1001AD068 != -1)
          swift_once(&qword_1001AD068, sub_100083768);
        v22 = type metadata accessor for Logger(0);
        sub_100003A14(v22, (uint64_t)qword_1001B0CA8);
        v23 = swift_bridgeObjectRetain();
        v24 = Logger.logObject.getter(v23);
        v25 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v24, v25))
        {
          v26 = (uint8_t *)swift_slowAlloc(12, -1);
          v27 = swift_slowAlloc(32, -1);
          v63[0] = v27;
          *(_DWORD *)v26 = 136315138;
          swift_bridgeObjectRetain();
          v61 = sub_1000056EC(a1, a2, v63);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v26 + 4, v26 + 12);
          swift_bridgeObjectRelease_n(a2, 3);
          _os_log_impl((void *)&_mh_execute_header, v24, v25, "backend return the script for installed profile,delete and reinstall profile %s,sync cache after deletion", v26, 0xCu);
          swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v27, -1, -1);
          swift_slowDealloc(v26, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(a2, 2);
        }
        swift_beginAccess(a3, v63, 33, 0);
        sub_10008ED98(v14);
        v36 = v35;
        swift_endAccess(v63);
        swift_bridgeObjectRelease(v36, v37, v38, v39, v40, v41, v42, v43);
        swift_beginAccess(a5, v63, 0, 0);
        Strong = swift_weakLoadStrong(a5);
        if (Strong)
        {
          v45 = Strong;
          v46 = *(_QWORD *)(Strong + 104);
          swift_retain();
          swift_release(v45);
          swift_beginAccess(a3, &v61, 0, 0);
          v47 = *a3;
          _s14InstallPackageVMa(0);
          v48 = swift_bridgeObjectRetain();
          v49 = UUID.uuidString.getter(v48);
          v51 = sub_100081EE4(v49, v50);
          v53 = v52;
          sub_1000B1B90(v47, v51, v52);
          sub_1000B0CA0();
          swift_release(v46);
          swift_bridgeObjectRelease(v47, v54, v55, v56, v57, v58, v59, v60);
          v28 = v53;
          goto LABEL_26;
        }
      }
      else
      {
        instance = v9[1].instance;
        v30 = 1;
        while (v10 != v30)
        {
          v14 = v30;
          v31 = *((_QWORD *)instance - 1);
          v32 = *(_QWORD *)instance;
          if (v31 != a1 || v32 != a2)
          {
            v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, a1, a2, 0);
            v30 = v14 + 1;
            instance += 16;
            if ((v34 & 1) == 0)
              continue;
          }
          goto LABEL_9;
        }
      }
    }
  }
}

uint64_t sub_10008EAC8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t result;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  v9 = v7 == a1 && v8 == a2;
  if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0) & 1) != 0)
    return 0;
  v11 = 0;
  v12 = a3 + 7;
  v13 = 1;
  while (1)
  {
    if (v3 == v13)
      return 0;
    ++v11;
    v14 = *(v12 - 1);
    v15 = *v12;
    if (v14 == a1 && v15 == a2)
      break;
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0);
    result = v13++;
    v12 += 2;
    if ((v17 & 1) != 0)
      return result;
  }
  return v11;
}

unint64_t sub_10008EBAC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v4 = a3 & 0xFFFFFFFFFFFFLL;
  if (!v4)
    return 0;
  v9 = 4 * v4;
  v10 = 15;
  while (1)
  {
    v11 = String.subscript.getter(v10, a3, a4);
    v13 = v12;
    if (v11 == a1 && v12 == a2)
      break;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, a1, a2, 0);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) != 0)
      return v10;
    v10 = String.index(after:)(v10, a3, a4);
    if (v9 == v10 >> 14)
      return 0;
  }
  swift_bridgeObjectRelease(a2);
  return v10;
}

void *sub_10008EC98@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _TtC14softposreaderd12RemoteReader **v2;
  _TtC14softposreaderd12RemoteReader *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  void *result;
  char v20;
  __int128 v21;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native(*v2) & 1) == 0)
    v5 = sub_1000929D0((uint64_t)v5, v6, v7, v8, v9, v10, v11, v12);
  v13 = *(_QWORD *)&v5->instance[8];
  if (v13 <= a1)
  {
    __break(1u);
  }
  else
  {
    v14 = v13 - 1;
    v15 = v13 - 1 - a1;
    if (v15 >= 0)
    {
      v16 = (char *)v5 + 40 * a1;
      v17 = *((_OWORD *)v16 + 2);
      v16 += 32;
      v18 = *((_QWORD *)v16 + 2);
      v21 = *(_OWORD *)(v16 + 24);
      result = memmove(v16, v16 + 40, 40 * v15);
      *(_QWORD *)&v5->instance[8] = v14;
      *v2 = v5;
      *(_OWORD *)a2 = v17;
      *(_QWORD *)(a2 + 16) = v18;
      *(_OWORD *)(a2 + 24) = v21;
      return result;
    }
  }
  v20 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v20, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_10008ED98(unint64_t a1)
{
  _TtC14softposreaderd12RemoteReader **v1;
  _TtC14softposreaderd12RemoteReader *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  char v17;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native(*v1) & 1) == 0)
    v3 = sub_1000929E4((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10);
  v11 = *(_QWORD *)&v3->instance[8];
  if (v11 <= a1)
  {
    __break(1u);
  }
  else
  {
    v12 = v11 - 1;
    v13 = v11 - 1 - a1;
    if (v13 >= 0)
    {
      v14 = (char *)v3 + 16 * a1;
      v15 = *((_QWORD *)v14 + 4);
      memmove(v14 + 32, v14 + 48, 16 * v13);
      *(_QWORD *)&v3->instance[8] = v12;
      *v1 = v3;
      return v15;
    }
  }
  v17 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v17, 1046, 0);
  __break(1u);
  return result;
}

void sub_10008EE74(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  const char *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  char *v51;
  uint64_t v52;
  SEL v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  _QWORD v60[12];
  int v61;
  int v62;
  char *v63;
  void *v64;
  void *v65;
  char *v66;
  const char *v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _TtC14softposreaderd12RemoteReader *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;

  v5 = v4;
  v72 = a2;
  v61 = a4;
  v60[11] = a3;
  v7 = type metadata accessor for OSSignpostError(0);
  v69 = *(_QWORD *)(v7 - 8);
  v70 = v7;
  v8 = __chkstk_darwin(v7);
  v60[10] = (char *)v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v60[9] = (char *)v60 - v11;
  v12 = __chkstk_darwin(v10);
  v60[8] = (char *)v60 - v13;
  v14 = __chkstk_darwin(v12);
  v60[7] = (char *)v60 - v15;
  __chkstk_darwin(v14);
  v60[6] = (char *)v60 - v16;
  v17 = type metadata accessor for OSSignpostID(0);
  v79 = *(_QWORD *)(v17 - 8);
  v80 = v17;
  v18 = __chkstk_darwin(v17);
  v19 = __chkstk_darwin(v18);
  v20 = __chkstk_darwin(v19);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)v60 - v22;
  __chkstk_darwin(v21);
  v25 = __chkstk_darwin((char *)v60 - v24);
  v26 = __chkstk_darwin(v25);
  v28 = (char *)v60 - v27;
  v29 = __chkstk_darwin(v26);
  v30 = __chkstk_darwin(v29);
  v31 = __chkstk_darwin(v30);
  v33 = (char *)v60 - v32;
  v34 = __chkstk_darwin(v31);
  v46 = *(_QWORD *)(a1 + 16);
  if (v46)
  {
    v63 = (char *)v60 - v42;
    v64 = v37;
    v65 = v36;
    v67 = v35;
    v60[1] = v34;
    v60[2] = v23;
    v60[3] = v45;
    v60[4] = v44;
    v60[5] = v43;
    v62 = enum case for OSSignpostError.doubleEnd(_:);
    swift_bridgeObjectRetain();
    v66 = v28;
    *((_QWORD *)&v47 + 1) = 2;
    v82 = xmmword_10015A5F0;
    *(_QWORD *)&v47 = 138412290;
    v68 = v47;
    v75 = &_swiftEmptyArrayStorage;
    v71 = a1;
    v76 = v33;
    v81 = v5;
    v48 = *(_OWORD *)(a1 + 96);
    v49 = *(_OWORD *)(a1 + 64);
    v86 = *(_OWORD *)(a1 + 80);
    v87 = v48;
    v88 = *(_QWORD *)(a1 + 112);
    v50 = *(_OWORD *)(a1 + 48);
    v83 = *(_OWORD *)(a1 + 32);
    v84 = v50;
    v85 = v49;
    v51 = (char *)&loc_10008F1B8 + 4 * byte_10015FF70[BYTE1(v48)];
    v77 = 32;
    v78 = v46;
    v74 = v86;
    __asm { BR              X8 }
  }
  if (*(_QWORD *)&_swiftEmptyArrayStorage.instance[8])
  {
    sub_100005EF8((_QWORD *)(*(_QWORD *)(v73 + 272) + 16), *(_QWORD *)(*(_QWORD *)(v73 + 272) + 40));
    v52 = swift_bridgeObjectRetain();
    sub_10003964C(v52);
    swift_bridgeObjectRelease(&_swiftEmptyArrayStorage, v53, v54, v55, v56, v57, v58, v59);
  }
  swift_bridgeObjectRelease(&_swiftEmptyArrayStorage, v35, v36, v37, v38, v39, v40, v41);
}

_TtC14softposreaderd12RemoteReader *sub_10009104C(_TtC14softposreaderd12RemoteReader *result, int64_t a2, char a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _TtC14softposreaderd12RemoteReader *v15;
  int64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  const void *v19;

  v9 = (char)result;
  if ((a3 & 1) == 0)
  {
    v11 = a2;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(a4 + 24);
  v11 = v10 >> 1;
  if ((uint64_t)(v10 >> 1) >= a2)
    goto LABEL_8;
  if (v11 + 0x4000000000000000 >= 0)
  {
    v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v11 = a2;
LABEL_8:
    v12 = *(_QWORD *)(a4 + 16);
    if (v11 <= v12)
      v13 = *(_QWORD *)(a4 + 16);
    else
      v13 = v11;
    if (v13)
    {
      v14 = sub_100003A2C(&qword_1001AD9E8);
      v15 = (_TtC14softposreaderd12RemoteReader *)swift_allocObject(v14, 8 * v13 + 32, 7);
      v16 = j__malloc_size(v15);
      v17 = v16 - 32;
      if (v16 < 32)
        v17 = v16 - 25;
      *(_QWORD *)&v15->instance[8] = v12;
      *(_QWORD *)&v15->instance[16] = 2 * (v17 >> 3);
      v18 = &v15->instance[24];
      if ((v9 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v15 = &_swiftEmptyArrayStorage;
      v18 = &_swiftEmptyArrayStorage.instance[24];
      if ((result & 1) != 0)
      {
LABEL_15:
        v19 = (const void *)(a4 + 32);
        if (v15 != (_TtC14softposreaderd12RemoteReader *)a4 || (unint64_t)v18 >= a4 + 32 + 8 * v12)
          memmove(v18, v19, 8 * v12);
        *(_QWORD *)(a4 + 16) = 0;
        goto LABEL_24;
      }
    }
    sub_100093ACC(0, v12, (unint64_t)v18, a4);
LABEL_24:
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a4, (SEL)v19, v18, (id)a4, a5, a6, a7, a8);
    return v15;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100091158(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100091488(a1, a2, a3, a4, &qword_1001B0E10);
}

_QWORD *sub_100091164(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100003A2C(&qword_1001B0E40);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10009430C(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_TtC14softposreaderd12RemoteReader *sub_100091270(_TtC14softposreaderd12RemoteReader *result, int64_t a2, char a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _TtC14softposreaderd12RemoteReader *v15;
  int64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  const void *v19;

  v9 = (char)result;
  if ((a3 & 1) == 0)
  {
    v11 = a2;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(a4 + 24);
  v11 = v10 >> 1;
  if ((uint64_t)(v10 >> 1) >= a2)
    goto LABEL_8;
  if (v11 + 0x4000000000000000 >= 0)
  {
    v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v11 = a2;
LABEL_8:
    v12 = *(_QWORD *)(a4 + 16);
    if (v11 <= v12)
      v13 = *(_QWORD *)(a4 + 16);
    else
      v13 = v11;
    if (v13)
    {
      v14 = sub_100003A2C(&qword_1001B0E48);
      v15 = (_TtC14softposreaderd12RemoteReader *)swift_allocObject(v14, 16 * v13 + 32, 7);
      v16 = j__malloc_size(v15);
      v17 = v16 - 32;
      if (v16 < 32)
        v17 = v16 - 17;
      *(_QWORD *)&v15->instance[8] = v12;
      *(_QWORD *)&v15->instance[16] = 2 * (v17 >> 4);
      v18 = &v15->instance[24];
      if ((v9 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v15 = &_swiftEmptyArrayStorage;
      v18 = &_swiftEmptyArrayStorage.instance[24];
      if ((result & 1) != 0)
      {
LABEL_15:
        v19 = (const void *)(a4 + 32);
        if (v15 != (_TtC14softposreaderd12RemoteReader *)a4 || (unint64_t)v18 >= a4 + 32 + 16 * v12)
          memmove(v18, v19, 16 * v12);
        *(_QWORD *)(a4 + 16) = 0;
        goto LABEL_24;
      }
    }
    sub_1000943FC(0, v12, (unint64_t)v18, a4);
LABEL_24:
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a4, (SEL)v19, v18, (id)a4, a5, a6, a7, a8);
    return v15;
  }
  __break(1u);
  return result;
}

_TtC14softposreaderd12RemoteReader *sub_10009137C(_TtC14softposreaderd12RemoteReader *a1, int64_t a2, char a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8)
{
  return sub_100091388(a1, a2, a3, a4, &qword_1001AC678, a6, a7, a8);
}

_TtC14softposreaderd12RemoteReader *sub_100091388(_TtC14softposreaderd12RemoteReader *result, int64_t a2, char a3, uint64_t a4, uint64_t *a5, void *a6, void *a7, void *a8)
{
  char v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  _TtC14softposreaderd12RemoteReader *v15;
  size_t v16;
  unsigned __int8 *v17;
  const void *v18;

  v9 = (char)result;
  if ((a3 & 1) == 0)
  {
    v11 = a2;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(a4 + 24);
  v11 = v10 >> 1;
  if ((uint64_t)(v10 >> 1) >= a2)
    goto LABEL_8;
  if (v11 + 0x4000000000000000 >= 0)
  {
    v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v11 = a2;
LABEL_8:
    v12 = *(_QWORD *)(a4 + 16);
    if (v11 <= v12)
      v13 = *(_QWORD *)(a4 + 16);
    else
      v13 = v11;
    if (v13)
    {
      v14 = sub_100003A2C(a5);
      v15 = (_TtC14softposreaderd12RemoteReader *)swift_allocObject(v14, v13 + 32, 7);
      v16 = j__malloc_size(v15);
      *(_QWORD *)&v15->instance[8] = v12;
      *(_QWORD *)&v15->instance[16] = 2 * v16 - 64;
      v17 = &v15->instance[24];
      if ((v9 & 1) != 0)
      {
LABEL_13:
        v18 = (const void *)(a4 + 32);
        if (v15 != (_TtC14softposreaderd12RemoteReader *)a4 || (unint64_t)v17 >= a4 + 32 + v12)
          memmove(v17, v18, v12);
        *(_QWORD *)(a4 + 16) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v15 = &_swiftEmptyArrayStorage;
      v17 = &_swiftEmptyArrayStorage.instance[24];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1000978B8(0, v12, (char *)v17, a4);
LABEL_22:
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a4, (SEL)v18, v17, (id)a4, a5, a6, a7, a8);
    return v15;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10009147C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100091488(a1, a2, a3, a4, &qword_1001B0E88);
}

_QWORD *sub_100091488(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      v11 = sub_100003A2C(a5);
      v12 = (_QWORD *)swift_allocObject(v11, 8 * v10 + 32, 7);
      v13 = j__malloc_size(v12);
      v14 = v13 - 32;
      if (v13 < 32)
        v14 = v13 - 25;
      v12[2] = v9;
      v12[3] = 2 * (v14 >> 3);
      v15 = v12 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
      v15 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v12 != a4 || v15 >= &a4[v9 + 4])
          memmove(v15, a4 + 4, 8 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000944EC(0, v9, (char *)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v12;
  }
  __break(1u);
  return result;
}

uint64_t sub_100091590(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000916C4(a1, a2, a3, a4, &qword_1001B0E80, (uint64_t (*)(_QWORD))&type metadata accessor for DispatchTime);
}

_TtC14softposreaderd12RemoteReader *sub_1000915A4(_TtC14softposreaderd12RemoteReader *result, int64_t a2, char a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _TtC14softposreaderd12RemoteReader *v15;
  int64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  const void *v19;

  v9 = (char)result;
  if ((a3 & 1) == 0)
  {
    v11 = a2;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(a4 + 24);
  v11 = v10 >> 1;
  if ((uint64_t)(v10 >> 1) >= a2)
    goto LABEL_8;
  if (v11 + 0x4000000000000000 >= 0)
  {
    v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v11 = a2;
LABEL_8:
    v12 = *(_QWORD *)(a4 + 16);
    if (v11 <= v12)
      v13 = *(_QWORD *)(a4 + 16);
    else
      v13 = v11;
    if (v13)
    {
      v14 = sub_100003A2C((uint64_t *)&unk_1001AE410);
      v15 = (_TtC14softposreaderd12RemoteReader *)swift_allocObject(v14, 16 * v13 + 32, 7);
      v16 = j__malloc_size(v15);
      v17 = v16 - 32;
      if (v16 < 32)
        v17 = v16 - 17;
      *(_QWORD *)&v15->instance[8] = v12;
      *(_QWORD *)&v15->instance[16] = 2 * (v17 >> 4);
      v18 = &v15->instance[24];
      if ((v9 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v15 = &_swiftEmptyArrayStorage;
      v18 = &_swiftEmptyArrayStorage.instance[24];
      if ((result & 1) != 0)
      {
LABEL_15:
        v19 = (const void *)(a4 + 32);
        if (v15 != (_TtC14softposreaderd12RemoteReader *)a4 || (unint64_t)v18 >= a4 + 32 + 16 * v12)
          memmove(v18, v19, 16 * v12);
        *(_QWORD *)(a4 + 16) = 0;
        goto LABEL_24;
      }
    }
    sub_100094128(0, v12, (unint64_t)v18, a4);
LABEL_24:
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a4, (SEL)v19, v18, (id)a4, a5, a6, a7, a8);
    return v15;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000916B0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000916C4(a1, a2, a3, a4, &qword_1001B0E38, type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate);
}

uint64_t sub_1000916C4(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _TtC14softposreaderd12RemoteReader *v18;
  size_t v19;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  const char *v30;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100003A2C(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_TtC14softposreaderd12RemoteReader *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  *(_QWORD *)&v18->instance[8] = v11;
  *(_QWORD *)&v18->instance[16] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v26 = *(_QWORD *)(v21 - 8);
  v27 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  v28 = (char *)v18 + v27;
  if ((a1 & 1) != 0)
  {
    v29 = (void *)v21;
    v30 = (const char *)(a4 + v27);
    if ((unint64_t)v18 < a4 || v28 >= &v30[*(_QWORD *)(v26 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v27, v30, v11, v21);
    }
    else if (v18 != (_TtC14softposreaderd12RemoteReader *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v27);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000970A4(0, v11, (unint64_t)v28, a4, a6);
  }
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a4, v30, v28, v29, v22, v23, v24, v25);
  return (uint64_t)v18;
}

_TtC14softposreaderd12RemoteReader *sub_1000918D0(_TtC14softposreaderd12RemoteReader *result, int64_t a2, char a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _TtC14softposreaderd12RemoteReader *v15;
  int64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  const void *v19;

  v9 = (char)result;
  if ((a3 & 1) == 0)
  {
    v11 = a2;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(a4 + 24);
  v11 = v10 >> 1;
  if ((uint64_t)(v10 >> 1) >= a2)
    goto LABEL_8;
  if (v11 + 0x4000000000000000 >= 0)
  {
    v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v11 = a2;
LABEL_8:
    v12 = *(_QWORD *)(a4 + 16);
    if (v11 <= v12)
      v13 = *(_QWORD *)(a4 + 16);
    else
      v13 = v11;
    if (v13)
    {
      v14 = sub_100003A2C(&qword_1001B0E60);
      v15 = (_TtC14softposreaderd12RemoteReader *)swift_allocObject(v14, 32 * v13 + 32, 7);
      v16 = j__malloc_size(v15);
      v17 = v16 - 32;
      if (v16 < 32)
        v17 = v16 - 1;
      *(_QWORD *)&v15->instance[8] = v12;
      *(_QWORD *)&v15->instance[16] = 2 * (v17 >> 5);
      v18 = &v15->instance[24];
      if ((v9 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v15 = &_swiftEmptyArrayStorage;
      v18 = &_swiftEmptyArrayStorage.instance[24];
      if ((result & 1) != 0)
      {
LABEL_15:
        v19 = (const void *)(a4 + 32);
        if (v15 != (_TtC14softposreaderd12RemoteReader *)a4 || (unint64_t)v18 >= a4 + 32 + 32 * v12)
          memmove(v18, v19, 32 * v12);
        *(_QWORD *)(a4 + 16) = 0;
        goto LABEL_24;
      }
    }
    sub_100094CB8(0, v12, (unint64_t)v18, a4);
LABEL_24:
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a4, (SEL)v19, v18, (id)a4, a5, a6, a7, a8);
    return v15;
  }
  __break(1u);
  return result;
}

_TtC14softposreaderd12RemoteReader *sub_1000919DC(_TtC14softposreaderd12RemoteReader *result, int64_t a2, char a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _TtC14softposreaderd12RemoteReader *v15;
  size_t v16;
  unsigned __int8 *v17;
  const void *v18;

  v9 = (char)result;
  if ((a3 & 1) == 0)
  {
    v11 = a2;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(a4 + 24);
  v11 = v10 >> 1;
  if ((uint64_t)(v10 >> 1) >= a2)
    goto LABEL_8;
  if (v11 + 0x4000000000000000 >= 0)
  {
    v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v11 = a2;
LABEL_8:
    v12 = *(_QWORD *)(a4 + 16);
    if (v11 <= v12)
      v13 = *(_QWORD *)(a4 + 16);
    else
      v13 = v11;
    if (v13)
    {
      v14 = sub_100003A2C(&qword_1001B0DE8);
      v15 = (_TtC14softposreaderd12RemoteReader *)swift_allocObject(v14, 88 * v13 + 32, 7);
      v16 = j__malloc_size(v15);
      *(_QWORD *)&v15->instance[8] = v12;
      *(_QWORD *)&v15->instance[16] = 2 * ((uint64_t)(v16 - 32) / 88);
      v17 = &v15->instance[24];
      if ((v9 & 1) != 0)
      {
LABEL_13:
        v18 = (const void *)(a4 + 32);
        if (v15 != (_TtC14softposreaderd12RemoteReader *)a4 || (unint64_t)v17 >= a4 + 32 + 88 * v12)
          memmove(v17, v18, 88 * v12);
        *(_QWORD *)(a4 + 16) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v15 = &_swiftEmptyArrayStorage;
      v17 = &_swiftEmptyArrayStorage.instance[24];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100096218(0, v12, (unint64_t)v17, a4);
LABEL_22:
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a4, (SEL)v18, v17, (id)a4, a5, a6, a7, a8);
    return v15;
  }
  __break(1u);
  return result;
}

_TtC14softposreaderd12RemoteReader *sub_100091B04(_TtC14softposreaderd12RemoteReader *result, int64_t a2, char a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _TtC14softposreaderd12RemoteReader *v15;
  size_t v16;
  unsigned __int8 *v17;
  const void *v18;

  v9 = (char)result;
  if ((a3 & 1) == 0)
  {
    v11 = a2;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(a4 + 24);
  v11 = v10 >> 1;
  if ((uint64_t)(v10 >> 1) >= a2)
    goto LABEL_8;
  if (v11 + 0x4000000000000000 >= 0)
  {
    v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v11 = a2;
LABEL_8:
    v12 = *(_QWORD *)(a4 + 16);
    if (v11 <= v12)
      v13 = *(_QWORD *)(a4 + 16);
    else
      v13 = v11;
    if (v13)
    {
      v14 = sub_100003A2C(&qword_1001B0E68);
      v15 = (_TtC14softposreaderd12RemoteReader *)swift_allocObject(v14, 40 * v13 + 32, 7);
      v16 = j__malloc_size(v15);
      *(_QWORD *)&v15->instance[8] = v12;
      *(_QWORD *)&v15->instance[16] = 2 * ((uint64_t)(v16 - 32) / 40);
      v17 = &v15->instance[24];
      if ((v9 & 1) != 0)
      {
LABEL_13:
        v18 = (const void *)(a4 + 32);
        if (v15 != (_TtC14softposreaderd12RemoteReader *)a4 || (unint64_t)v17 >= a4 + 32 + 40 * v12)
          memmove(v17, v18, 40 * v12);
        *(_QWORD *)(a4 + 16) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v15 = &_swiftEmptyArrayStorage;
      v17 = &_swiftEmptyArrayStorage.instance[24];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100094218(0, v12, (unint64_t)v17, a4);
LABEL_22:
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a4, (SEL)v18, v17, (id)a4, a5, a6, a7, a8);
    return v15;
  }
  __break(1u);
  return result;
}

uint64_t sub_100091C24(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000916C4(a1, a2, a3, a4, &qword_1001B0DD0, type metadata accessor for KernelTokenHostConfigurationMapping);
}

_TtC14softposreaderd12RemoteReader *sub_100091C38(_TtC14softposreaderd12RemoteReader *a1, int64_t a2, char a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8)
{
  return sub_100091388(a1, a2, a3, a4, &qword_1001AF9B0, a6, a7, a8);
}

uint64_t sub_100091C44(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100091D28(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100091C60(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100091E90(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

uint64_t sub_100091C7C(char a1, int64_t a2, char a3)
{
  unint64_t *v3;
  uint64_t result;

  result = sub_100091FF8(a1, a2, a3, *v3, &qword_1001B0E78, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
  *v3 = result;
  return result;
}

uint64_t sub_100091CA8(char a1, int64_t a2, char a3)
{
  unint64_t *v3;
  uint64_t result;

  result = sub_100091FF8(a1, a2, a3, *v3, &qword_1001B0E38, type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate);
  *v3 = result;
  return result;
}

uint64_t sub_100091CD4(char a1, int64_t a2, char a3)
{
  _TtC14softposreaderd12RemoteReader **v3;
  uint64_t result;

  result = sub_1000921D8(a1, a2, a3, *v3);
  *v3 = (_TtC14softposreaderd12RemoteReader *)result;
  return result;
}

uint64_t sub_100091CF0(char a1, int64_t a2, char a3)
{
  _TtC14softposreaderd12RemoteReader **v3;
  uint64_t result;

  result = sub_10009237C(a1, a2, a3, *v3);
  *v3 = (_TtC14softposreaderd12RemoteReader *)result;
  return result;
}

uint64_t sub_100091D0C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100092520(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

uint64_t sub_100091D28(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003A2C((uint64_t *)&unk_1001AE410);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100091E90(char a1, int64_t a2, char a3, uint64_t a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _TtC14softposreaderd12RemoteReader *v11;
  int64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003A2C(&qword_1001AD9E8);
    v11 = (_TtC14softposreaderd12RemoteReader *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *(_QWORD *)&v11->instance[8] = v8;
    *(_QWORD *)&v11->instance[16] = 2 * (v13 >> 3);
  }
  else
  {
    v11 = &_swiftEmptyArrayStorage;
  }
  v14 = &v11->instance[24];
  v15 = (char *)(a4 + 32);
  if ((a1 & 1) != 0)
  {
    if (v11 != (_TtC14softposreaderd12RemoteReader *)a4 || v14 >= (unsigned __int8 *)&v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *(_QWORD *)(a4 + 16) = 0;
    goto LABEL_30;
  }
  if (v15 >= (char *)&v14[8 * v8] || v14 >= (unsigned __int8 *)&v15[8 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100091FF8(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _TtC14softposreaderd12RemoteReader *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100003A2C(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_TtC14softposreaderd12RemoteReader *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  *(_QWORD *)&v18->instance[8] = v11;
  *(_QWORD *)&v18->instance[16] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (char *)v18 + v23;
  v25 = a4 + v23;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v18 < a4 || (unint64_t)v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }
    else if (v18 != (_TtC14softposreaderd12RemoteReader *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
    goto LABEL_32;
  }
  v26 = *(_QWORD *)(v22 + 72) * v11;
  v27 = &v24[v26];
  v28 = v25 + v26;
  if (v25 >= (unint64_t)v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000921D8(char a1, int64_t a2, char a3, _TtC14softposreaderd12RemoteReader *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _TtC14softposreaderd12RemoteReader *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)&a4->instance[16];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)&a4->instance[8];
  if (v7 <= v8)
    v9 = *(_QWORD *)&a4->instance[8];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003A2C(&qword_1001AE038);
    v11 = (_TtC14softposreaderd12RemoteReader *)swift_allocObject(v10, 48 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *(_QWORD *)&v11->instance[8] = v8;
    *(_QWORD *)&v11->instance[16] = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    v11 = &_swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)&v11->instance[24];
  v14 = (unint64_t)&a4->instance[24];
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 48 * v8)
      memmove(&v11->instance[24], &a4->instance[24], 48 * v8);
    *(_QWORD *)&a4->instance[8] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 48 * v8 || v13 >= v14 + 48 * v8)
  {
    sub_100003A2C(&qword_1001AC670);
    swift_arrayInitWithCopy(&v11->instance[24]);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009237C(char a1, int64_t a2, char a3, _TtC14softposreaderd12RemoteReader *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _TtC14softposreaderd12RemoteReader *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)&a4->instance[16];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)&a4->instance[8];
  if (v7 <= v8)
    v9 = *(_QWORD *)&a4->instance[8];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003A2C(&qword_1001B0E50);
    v11 = (_TtC14softposreaderd12RemoteReader *)swift_allocObject(v10, 48 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *(_QWORD *)&v11->instance[8] = v8;
    *(_QWORD *)&v11->instance[16] = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    v11 = &_swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)&v11->instance[24];
  v14 = (unint64_t)&a4->instance[24];
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 48 * v8)
      memmove(&v11->instance[24], &a4->instance[24], 48 * v8);
    *(_QWORD *)&a4->instance[8] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 48 * v8 || v13 >= v14 + 48 * v8)
  {
    sub_100003A2C(&qword_1001B0E58);
    swift_arrayInitWithCopy(&v11->instance[24]);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100092520(char a1, int64_t a2, char a3, uint64_t a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _TtC14softposreaderd12RemoteReader *v11;
  int64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003A2C(&qword_1001B0E10);
    v11 = (_TtC14softposreaderd12RemoteReader *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *(_QWORD *)&v11->instance[8] = v8;
    *(_QWORD *)&v11->instance[16] = 2 * (v13 >> 3);
  }
  else
  {
    v11 = &_swiftEmptyArrayStorage;
  }
  v14 = &v11->instance[24];
  v15 = (char *)(a4 + 32);
  if ((a1 & 1) != 0)
  {
    if (v11 != (_TtC14softposreaderd12RemoteReader *)a4 || v14 >= (unsigned __int8 *)&v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *(_QWORD *)(a4 + 16) = 0;
    goto LABEL_30;
  }
  if (v15 >= (char *)&v14[8 * v8] || v14 >= (unsigned __int8 *)&v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009267C(char a1, int64_t a2, char a3, uint64_t a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _TtC14softposreaderd12RemoteReader *v11;
  int64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  char *v15;
  size_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003A2C(&qword_1001B0DF8);
    v11 = (_TtC14softposreaderd12RemoteReader *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *(_QWORD *)&v11->instance[8] = v8;
    *(_QWORD *)&v11->instance[16] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = &_swiftEmptyArrayStorage;
  }
  v14 = &v11->instance[24];
  v15 = (char *)(a4 + 32);
  v16 = 16 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != (_TtC14softposreaderd12RemoteReader *)a4 || v14 >= (unsigned __int8 *)&v15[v16])
      memmove(v14, v15, v16);
    *(_QWORD *)(a4 + 16) = 0;
    goto LABEL_30;
  }
  if (v15 >= (char *)&v14[v16] || v14 >= (unsigned __int8 *)&v15[v16])
  {
    memcpy(v14, v15, v16);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

_TtC14softposreaderd12RemoteReader *sub_1000927D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _TtC14softposreaderd12RemoteReader *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return &_swiftEmptyArrayStorage;
  v3 = sub_100003A2C(&qword_1001B0DD0);
  v4 = *(_QWORD *)(type metadata accessor for KernelTokenHostConfigurationMapping(0) - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = (_QWORD *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  result = (_TtC14softposreaderd12RemoteReader *)j__malloc_size(v8);
  if (v5)
  {
    if ((_TtC14softposreaderd12RemoteReader *)((char *)result - v7) != (_TtC14softposreaderd12RemoteReader *)0x8000000000000000
      || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      v11 = sub_1000935B8(&v13, (uint64_t)v8 + v7, v1, a1);
      v12 = v13;
      swift_bridgeObjectRetain();
      sub_1000978B0(v12);
      if (v11 == v1)
        return (_TtC14softposreaderd12RemoteReader *)v8;
      __break(1u);
      return &_swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_TtC14softposreaderd12RemoteReader *sub_1000928EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return &_swiftEmptyArrayStorage;
  v3 = sub_100003A2C(&qword_1001B0DF8);
  v4 = (_QWORD *)swift_allocObject(v3, 16 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 17;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  v7 = sub_100093874(&v10, (uint64_t)(v4 + 4), v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain();
  sub_1000978B0(v8);
  if (v7 != (_QWORD *)v1)
  {
    __break(1u);
    return &_swiftEmptyArrayStorage;
  }
  return (_TtC14softposreaderd12RemoteReader *)v4;
}

_TtC14softposreaderd12RemoteReader *sub_1000929D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  return sub_100091B04(0, *(_QWORD *)(a1 + 16), 0, a1, a5, a6, a7, a8);
}

_TtC14softposreaderd12RemoteReader *sub_1000929E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  return sub_1000915A4(0, *(_QWORD *)(a1 + 16), 0, a1, a5, a6, a7, a8);
}

void sub_1000929F8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_100093A14(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v4[0] = v2 + 32;
  v4[1] = v3;
  sub_100092A60(v4);
  *a1 = v2;
}

void sub_100092A60(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  const char *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _TtC14softposreaderd12RemoteReader *v17;
  Swift::Int v18;
  uint64_t v19;
  _TtC14softposreaderd12RemoteReader *v20;
  unint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  Swift::Int v28;
  Swift::Int v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  uint64_t v33;
  __int16 v34;
  Swift::Int v35;
  uint64_t v36;
  Swift::Int v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  unint64_t v41;
  unint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  unsigned __int8 *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  char v68;
  unsigned __int8 *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned __int8 *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _TtC14softposreaderd12RemoteReader *v85;
  unsigned __int8 *v86;
  uint64_t v87;
  unsigned __int8 *v88;
  uint64_t v89;
  unint64_t v90;
  _TtC14softposreaderd12RemoteReader *v91;
  _TtC14softposreaderd12RemoteReader *v92;
  _TtC14softposreaderd12RemoteReader *v93;
  SEL v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t i;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int16 v108;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  unsigned __int8 *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  _TtC14softposreaderd12RemoteReader *v126;
  Swift::Int v127;
  Swift::Int v128;
  uint64_t v129;
  char *__dst;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v3 < 2)
        return;
      v101 = *a1;
      v102 = -1;
      v103 = 1;
      for (i = *a1; ; i += 16)
      {
        v105 = v102;
        v106 = i;
        do
        {
          v107 = *(_QWORD *)(v106 + 16);
          if (*(_QWORD *)v106 < v107)
            break;
          if (!v101)
            goto LABEL_147;
          v108 = *(_WORD *)(v106 + 24);
          *(_OWORD *)(v106 + 16) = *(_OWORD *)v106;
          *(_QWORD *)v106 = v107;
          *(_WORD *)(v106 + 8) = v108;
          v106 -= 16;
        }
        while (!__CFADD__(v105++, 1));
        ++v103;
        --v102;
        if (v103 == v3)
          return;
      }
    }
    goto LABEL_143;
  }
  if (v3 >= 0)
    v12 = v3;
  else
    v12 = v3 + 1;
  if (v3 < -1)
  {
LABEL_152:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return;
  }
  v13 = v4;
  v124 = a1;
  if (v3 < 2)
  {
    v17 = &_swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage.instance[24];
    if (v3 != 1)
    {
      v21 = *(_QWORD *)&_swiftEmptyArrayStorage.instance[8];
      v20 = &_swiftEmptyArrayStorage;
      goto LABEL_109;
    }
    v126 = &_swiftEmptyArrayStorage;
  }
  else
  {
    v14 = v12 >> 1;
    v15 = sub_100003A2C(&qword_1001B0E00);
    v16 = static Array._allocateBufferUninitialized(minimumCapacity:)(v14, v15);
    *(_QWORD *)(v16 + 16) = v14;
    v126 = (_TtC14softposreaderd12RemoteReader *)v16;
    __dst = (char *)(v16 + 32);
  }
  v18 = 0;
  v19 = *a1;
  v125 = *a1 + 32;
  v123 = *a1 - 16;
  v20 = &_swiftEmptyArrayStorage;
  v127 = v13;
  v128 = v3;
  v129 = v19;
  while (1)
  {
    v22 = v18++;
    if (v18 < v3)
    {
      v23 = *(_QWORD *)(v19 + 16 * v18);
      v24 = 16 * v22;
      v25 = *(_QWORD *)(v19 + 16 * v22);
      v18 = v22 + 2;
      if (v22 + 2 < v3)
      {
        v26 = (_QWORD *)(v125 + 16 * v22);
        while (v25 >= v23 != *(v26 - 2) < *v26)
        {
          v26 += 2;
          if (v3 == ++v18)
          {
            v18 = v3;
            break;
          }
        }
      }
      if (v25 >= v23)
      {
        if (v18 < v22)
          goto LABEL_144;
        if (v22 < v18)
        {
          v27 = 16 * v18 - 16;
          v28 = v18;
          v29 = v22;
          do
          {
            if (v29 != --v28)
            {
              if (!v19)
                goto LABEL_150;
              v31 = (_OWORD *)(v19 + v24);
              v32 = (_OWORD *)(v19 + v27);
              v33 = *(_QWORD *)(v19 + v24);
              v34 = *(_WORD *)(v19 + v24 + 8);
              if (v24 != v27 || v31 >= v32 + 1)
                *v31 = *v32;
              v30 = v19 + v27;
              *(_QWORD *)v30 = v33;
              *(_WORD *)(v30 + 8) = v34;
            }
            ++v29;
            v27 -= 16;
            v24 += 16;
          }
          while (v29 < v28);
        }
      }
    }
    if (v18 < v3)
    {
      if (__OFSUB__(v18, v22))
        goto LABEL_142;
      if (v18 - v22 < v13)
      {
        v35 = v22 + v13;
        if (__OFADD__(v22, v13))
          goto LABEL_145;
        if (v35 >= v3)
          v35 = v3;
        if (v35 < v22)
          goto LABEL_146;
        if (v18 != v35)
        {
          v36 = v123 + 16 * v18;
          do
          {
            v37 = v22;
            v38 = v36;
            do
            {
              v39 = *(_QWORD *)(v38 + 16);
              if (*(_QWORD *)v38 < v39)
                break;
              if (!v19)
                goto LABEL_148;
              v40 = *(_WORD *)(v38 + 24);
              *(_OWORD *)(v38 + 16) = *(_OWORD *)v38;
              *(_QWORD *)v38 = v39;
              *(_WORD *)(v38 + 8) = v40;
              v38 -= 16;
              ++v37;
            }
            while (v18 != v37);
            ++v18;
            v36 += 16;
          }
          while (v18 != v35);
          v18 = v35;
        }
      }
    }
    if (v18 < v22)
    {
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
      v20 = sub_1000933D8(0, *(_QWORD *)&v20->instance[8] + 1, (void *)1, (uint64_t)v20, v8, v9, v10, v11);
    v42 = *(_QWORD *)&v20->instance[8];
    v41 = *(_QWORD *)&v20->instance[16];
    v21 = v42 + 1;
    v19 = v129;
    if (v42 >= v41 >> 1)
    {
      v91 = sub_1000933D8((_TtC14softposreaderd12RemoteReader *)(v41 > 1), v42 + 1, (void *)1, (uint64_t)v20, v8, v9, v10, v11);
      v19 = v129;
      v20 = v91;
    }
    *(_QWORD *)&v20->instance[8] = v21;
    v43 = &v20->instance[24];
    v44 = &v20->instance[16 * v42 + 24];
    *(_QWORD *)v44 = v22;
    *((_QWORD *)v44 + 1) = v18;
    if (v42)
      break;
    v21 = 1;
LABEL_15:
    v13 = v127;
    v3 = v128;
    if (v18 >= v128)
    {
      v17 = v126;
LABEL_109:
      v93 = v20;
      v126 = v17;
      if (v21 < 2)
        goto LABEL_99;
      v110 = *v124;
      while (1)
      {
        v111 = v21 - 2;
        if (v21 < 2)
          break;
        if (!v110)
          goto LABEL_151;
        v92 = v93;
        v112 = *(_QWORD *)&v93->instance[16 * v111 + 24];
        v113 = *(_QWORD *)&v93->instance[16 * v21 + 16];
        sub_10009315C((char *)(v110 + 16 * v112), (char *)(v110 + 16 * *(_QWORD *)&v93->instance[16 * v21 + 8]), v110 + 16 * v113, __dst);
        if (v1)
          goto LABEL_98;
        if (v113 < v112)
          goto LABEL_139;
        if ((swift_isUniquelyReferenced_nonNull_native(v92) & 1) == 0)
          v92 = sub_100093574((uint64_t)v92, v114, v115, v116, v117, v118, v119, v120);
        if (v111 >= *(_QWORD *)&v92->instance[8])
          goto LABEL_140;
        v121 = &v92->instance[16 * v111 + 24];
        *(_QWORD *)v121 = v112;
        *((_QWORD *)v121 + 1) = v113;
        v122 = *(_QWORD *)&v92->instance[8];
        if (v21 > v122)
          goto LABEL_141;
        memmove(&v92->instance[16 * v21 + 8], &v92->instance[16 * v21 + 24], 16 * (v122 - v21));
        v93 = v92;
        *(_QWORD *)&v92->instance[8] = v122 - 1;
        v21 = v122 - 1;
        if (v122 <= 2)
          goto LABEL_99;
      }
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
      goto LABEL_152;
    }
  }
  while (1)
  {
    v45 = v21 - 1;
    if (v21 >= 4)
    {
      v50 = &v43[16 * v21];
      v51 = *((_QWORD *)v50 - 8);
      v52 = *((_QWORD *)v50 - 7);
      v56 = __OFSUB__(v52, v51);
      v53 = v52 - v51;
      if (v56)
        goto LABEL_126;
      v55 = *((_QWORD *)v50 - 6);
      v54 = *((_QWORD *)v50 - 5);
      v56 = __OFSUB__(v54, v55);
      v48 = v54 - v55;
      v49 = v56;
      if (v56)
        goto LABEL_127;
      v57 = v21 - 2;
      v58 = &v43[16 * v21 - 32];
      v60 = *(_QWORD *)v58;
      v59 = *((_QWORD *)v58 + 1);
      v56 = __OFSUB__(v59, v60);
      v61 = v59 - v60;
      if (v56)
        goto LABEL_129;
      v56 = __OFADD__(v48, v61);
      v62 = v48 + v61;
      if (v56)
        goto LABEL_132;
      if (v62 >= v53)
      {
        v80 = &v43[16 * v45];
        v82 = *(_QWORD *)v80;
        v81 = *((_QWORD *)v80 + 1);
        v56 = __OFSUB__(v81, v82);
        v83 = v81 - v82;
        if (v56)
          goto LABEL_136;
        v73 = v48 < v83;
        goto LABEL_87;
      }
    }
    else
    {
      if (v21 != 3)
      {
        v74 = *(_QWORD *)&v20->instance[24];
        v75 = *(_QWORD *)&v20->instance[32];
        v56 = __OFSUB__(v75, v74);
        v67 = v75 - v74;
        v68 = v56;
        goto LABEL_81;
      }
      v47 = *(_QWORD *)&v20->instance[24];
      v46 = *(_QWORD *)&v20->instance[32];
      v56 = __OFSUB__(v46, v47);
      v48 = v46 - v47;
      v49 = v56;
    }
    if ((v49 & 1) != 0)
      goto LABEL_128;
    v57 = v21 - 2;
    v63 = &v43[16 * v21 - 32];
    v65 = *(_QWORD *)v63;
    v64 = *((_QWORD *)v63 + 1);
    v66 = __OFSUB__(v64, v65);
    v67 = v64 - v65;
    v68 = v66;
    if (v66)
      goto LABEL_131;
    v69 = &v43[16 * v45];
    v71 = *(_QWORD *)v69;
    v70 = *((_QWORD *)v69 + 1);
    v56 = __OFSUB__(v70, v71);
    v72 = v70 - v71;
    if (v56)
      goto LABEL_134;
    if (__OFADD__(v67, v72))
      goto LABEL_135;
    if (v67 + v72 >= v48)
    {
      v73 = v48 < v72;
LABEL_87:
      if (v73)
        v45 = v57;
      goto LABEL_89;
    }
LABEL_81:
    if ((v68 & 1) != 0)
      goto LABEL_130;
    v76 = &v43[16 * v45];
    v78 = *(_QWORD *)v76;
    v77 = *((_QWORD *)v76 + 1);
    v56 = __OFSUB__(v77, v78);
    v79 = v77 - v78;
    if (v56)
      goto LABEL_133;
    if (v79 < v67)
      goto LABEL_15;
LABEL_89:
    v84 = v45 - 1;
    if (v45 - 1 >= v21)
    {
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
      goto LABEL_137;
    }
    if (!v19)
      goto LABEL_149;
    v85 = v20;
    v86 = &v43[16 * v84];
    v87 = *(_QWORD *)v86;
    v88 = &v43[16 * v45];
    v89 = *((_QWORD *)v88 + 1);
    sub_10009315C((char *)(v19 + 16 * *(_QWORD *)v86), (char *)(v19 + 16 * *(_QWORD *)v88), v19 + 16 * v89, __dst);
    if (v1)
      break;
    if (v89 < v87)
      goto LABEL_123;
    if (v45 > *(_QWORD *)&v85->instance[8])
      goto LABEL_124;
    *(_QWORD *)v86 = v87;
    *(_QWORD *)&v43[16 * v84 + 8] = v89;
    v90 = *(_QWORD *)&v85->instance[8];
    if (v45 >= v90)
      goto LABEL_125;
    v20 = v85;
    v21 = v90 - 1;
    memmove(&v43[16 * v45], v88 + 16, 16 * (v90 - 1 - v45));
    *(_QWORD *)&v85->instance[8] = v90 - 1;
    v19 = v129;
    if (v90 <= 2)
      goto LABEL_15;
  }
  v92 = v85;
LABEL_98:
  v93 = v92;
LABEL_99:
  swift_bridgeObjectRelease(v93, v5, v6, v7, v8, v9, v10, v11);
  *(_QWORD *)&v126->instance[8] = 0;
  swift_bridgeObjectRelease(v126, v94, v95, v96, v97, v98, v99, v100);
}

