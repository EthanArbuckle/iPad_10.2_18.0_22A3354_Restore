uint64_t sub_10009315C(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t result;
  char v24;
  char *v25;
  char *v26;
  char *v27;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v26 = __dst;
  v27 = __src;
  if (v10 >= v13)
  {
    if (v11 >= -15)
    {
      v17 = 16 * v13;
      if (__dst != a2 || &a2[v17] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v18 = &v4[v17];
      v25 = &v4[v17];
      v27 = v6;
      if (v7 < v6 && (unint64_t)(v11 - 16) <= 0xFFFFFFFFFFFFFFE0)
      {
        v19 = (char *)(a3 - 16);
        v20 = v6;
        while (1)
        {
          v21 = v19 + 16;
          v22 = *((_QWORD *)v20 - 2);
          v20 -= 16;
          if (v22 >= *((_QWORD *)v18 - 2))
          {
            if (v21 != v6 || v19 >= v6)
              *(_OWORD *)v19 = *(_OWORD *)v20;
            v27 = v20;
            if (v20 <= v7)
              goto LABEL_42;
          }
          else
          {
            v25 = v18 - 16;
            if (v21 < v18 || v19 >= v18 || v21 != v18)
              *(_OWORD *)v19 = *((_OWORD *)v18 - 1);
            v20 = v6;
            v18 -= 16;
            if (v6 <= v7)
              goto LABEL_42;
          }
          v19 -= 16;
          v6 = v20;
          if (v18 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -15)
  {
    v14 = 16 * v10;
    if (__dst != __src || &__src[v14] <= __dst)
      memmove(__dst, __src, v14);
    v15 = &v4[v14];
    v25 = &v4[v14];
    if ((unint64_t)v6 < a3 && (unint64_t)(v8 - 16) <= 0xFFFFFFFFFFFFFFE0)
    {
      do
      {
        if (*(_QWORD *)v4 >= *(_QWORD *)v6)
        {
          v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        else
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v26 = v4;
          v16 = v6;
        }
        v7 += 16;
        if (v4 >= v15)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v27 = v7;
    }
LABEL_42:
    sub_1000934D0((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  v24 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v24, 1046, 0);
  __break(1u);
  return result;
}

_TtC14softposreaderd12RemoteReader *sub_1000933D8(_TtC14softposreaderd12RemoteReader *result, int64_t a2, void *a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  char v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _TtC14softposreaderd12RemoteReader *v15;
  int64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  char *v19;

  v9 = (char)result;
  if ((a3 & 1) != 0)
  {
    v10 = *(_QWORD *)(a4 + 24);
    v11 = v10 >> 1;
    if ((uint64_t)(v10 >> 1) < a2)
    {
      if (v11 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v11 = a2;
    }
  }
  else
  {
    v11 = a2;
  }
  v12 = *(_QWORD *)(a4 + 16);
  if (v11 <= v12)
    v13 = *(_QWORD *)(a4 + 16);
  else
    v13 = v11;
  if (v13)
  {
    v14 = sub_100003A2C(&qword_1001B0E08);
    v15 = (_TtC14softposreaderd12RemoteReader *)swift_allocObject(v14, 16 * v13 + 32, 7);
    v16 = j__malloc_size(v15);
    v17 = v16 - 32;
    if (v16 < 32)
      v17 = v16 - 17;
    *(_QWORD *)&v15->instance[8] = v12;
    *(_QWORD *)&v15->instance[16] = 2 * (v17 >> 4);
  }
  else
  {
    v15 = &_swiftEmptyArrayStorage;
  }
  v18 = &v15->instance[24];
  v19 = (char *)(a4 + 32);
  if ((v9 & 1) != 0)
  {
    if (v15 != (_TtC14softposreaderd12RemoteReader *)a4 || v18 >= (unsigned __int8 *)&v19[16 * v12])
      memmove(v18, v19, 16 * v12);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    memcpy(v18, v19, 16 * v12);
  }
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a4, v19, a3, (id)a4, a5, a6, a7, a8);
  return v15;
}

char *sub_1000934D0(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  size_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = (v4 + (v4 < 0 ? 0xFuLL : 0)) & 0xFFFFFFFFFFFFFFF0;
    if (result != v3 || result >= &v3[v6])
      return (char *)memmove(result, v3, v6);
  }
  return result;
}

_TtC14softposreaderd12RemoteReader *sub_100093574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  return sub_1000933D8(0, *(_QWORD *)(a1 + 16), 0, a1, a5, a6, a7, a8);
}

void sub_100093588(uint64_t a1, unsigned __int8 *a2)
{
  sub_100080108(a1, *a2);
}

void sub_1000935A0(uint64_t a1, unsigned __int8 *a2)
{
  sub_10007F758(a1, *a2);
}

uint64_t sub_1000935B8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  _QWORD *v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;

  v8 = type metadata accessor for KernelTokenHostConfigurationMapping(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v10);
  v15 = (char *)&v31 - v14;
  v36 = a4;
  v18 = *(_QWORD *)(a4 + 56);
  v17 = a4 + 56;
  v16 = v18;
  v35 = v17;
  v19 = -1 << *(_BYTE *)(v17 - 24);
  if (-v19 < 64)
    v20 = ~(-1 << -(char)v19);
  else
    v20 = -1;
  v21 = v20 & v16;
  if (!a2)
  {
    v22 = 0;
    a3 = 0;
LABEL_38:
    v30 = v35;
    *a1 = v36;
    a1[1] = v30;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }
  if (!a3)
  {
    v22 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v32 = -1 << *(_BYTE *)(v17 - 24);
  v33 = a1;
  v22 = 0;
  v23 = 0;
  v34 = (unint64_t)(63 - v19) >> 6;
  v31 = v34 - 1;
  if (!v21)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    v29 = *(_QWORD *)(v9 + 72);
    sub_100070ECC(*(_QWORD *)(v36 + 48) + v29 * v25, (uint64_t)v12, type metadata accessor for KernelTokenHostConfigurationMapping);
    sub_100097A28((uint64_t)v12, (uint64_t)v15, type metadata accessor for KernelTokenHostConfigurationMapping);
    result = sub_100097A28((uint64_t)v15, a2, type metadata accessor for KernelTokenHostConfigurationMapping);
    if (v23 == a3)
      goto LABEL_37;
    a2 += v29;
    if (v21)
      goto LABEL_8;
LABEL_9:
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v26 >= v34)
      goto LABEL_32;
    v27 = *(_QWORD *)(v35 + 8 * v26);
    if (!v27)
      break;
LABEL_18:
    v21 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v22 = v26;
  }
  v22 += 2;
  if (v26 + 1 >= v34)
  {
    v21 = 0;
    v22 = v26;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v35 + 8 * v22);
  if (v27)
    goto LABEL_14;
  v28 = v26 + 2;
  if (v26 + 2 >= v34)
    goto LABEL_32;
  v27 = *(_QWORD *)(v35 + 8 * v28);
  if (v27)
    goto LABEL_17;
  v22 = v26 + 3;
  if (v26 + 3 >= v34)
  {
    v21 = 0;
    v22 = v26 + 2;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v35 + 8 * v22);
  if (v27)
  {
LABEL_14:
    v26 = v22;
    goto LABEL_18;
  }
  v28 = v26 + 4;
  if (v26 + 4 >= v34)
  {
LABEL_32:
    v21 = 0;
LABEL_36:
    a3 = v23;
LABEL_37:
    v19 = v32;
    a1 = v33;
    goto LABEL_38;
  }
  v27 = *(_QWORD *)(v35 + 8 * v28);
  if (v27)
  {
LABEL_17:
    v26 = v28;
    goto LABEL_18;
  }
  while (1)
  {
    v26 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v26 >= v34)
    {
      v21 = 0;
      v22 = v31;
      goto LABEL_36;
    }
    v27 = *(_QWORD *)(v35 + 8 * v26);
    ++v28;
    if (v27)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *sub_100093874(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int16 v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    v13 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v12);
    v14 = *(_WORD *)(*(_QWORD *)(a4 + 56) + 2 * v12);
    *(_QWORD *)a2 = v13;
    *(_WORD *)(a2 + 8) = v14;
    a2 += 16;
    if (v9 == a3)
      goto LABEL_35;
  }
  v15 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v15 >= v10)
    goto LABEL_30;
  v16 = *(_QWORD *)(v4 + 8 * v15);
  if (v16)
    goto LABEL_19;
  v8 += 2;
  if (v15 + 1 >= v10)
  {
    v7 = 0;
    v8 = v15;
    goto LABEL_34;
  }
  v16 = *(_QWORD *)(v4 + 8 * v8);
  if (v16)
  {
LABEL_15:
    v15 = v8;
LABEL_19:
    v18 = __clz(__rbit64(v16));
    v7 = (v16 - 1) & v16;
    v12 = v18 + (v15 << 6);
    v8 = v15;
    goto LABEL_8;
  }
  v17 = v15 + 2;
  if (v15 + 2 >= v10)
    goto LABEL_30;
  v16 = *(_QWORD *)(v4 + 8 * v17);
  if (v16)
  {
LABEL_18:
    v15 = v17;
    goto LABEL_19;
  }
  v8 = v15 + 3;
  if (v15 + 3 >= v10)
  {
    v7 = 0;
    v8 = v15 + 2;
    goto LABEL_34;
  }
  v16 = *(_QWORD *)(v4 + 8 * v8);
  if (v16)
    goto LABEL_15;
  v17 = v15 + 4;
  if (v15 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v4 + 8 * v17);
  if (v16)
    goto LABEL_18;
  while (1)
  {
    v15 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v15 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v16 = *(_QWORD *)(v4 + 8 * v15);
    ++v17;
    if (v16)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_100093A14(uint64_t a1)
{
  return sub_10009267C(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_100093A28(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  char v12;
  uint64_t result;

  if (a1 == a5 && a2 == a6
    || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a5, a6, 0), result = 0, (v12 & 1) != 0))
  {
    if (a3)
    {
      if (!a7 || (sub_100127830(a3, a7) & 1) == 0)
        return 0;
    }
    else if (a7)
    {
      return 0;
    }
    if (a4)
    {
      if (a8 && (sub_100127830(a4, a8) & 1) != 0)
        return 1;
    }
    else if (!a8)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_100093ACC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100093BBC()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void (*v10)(char *, uint64_t);
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;

  v1 = *(_QWORD *)(sub_100003A2C((uint64_t *)&unk_1001B36F0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 48) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  swift_release(*((_QWORD *)v0 + 2));
  swift_release(*((_QWORD *)v0 + 3));
  swift_release(*((_QWORD *)v0 + 5));
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(&v0[v3], 1, v5);
  v10 = *(void (**)(char *, uint64_t))(v6 + 8);
  if (!v9)
    v10(&v0[v3], v5);
  v11 = (v3 + v4 + v7) & ~v7;
  v12 = (v11 + v8) & 0xFFFFFFFFFFFFFFF8;
  v13 = &v0[v12];
  v14 = v12 + 16;
  v10(&v0[v11], v5);
  swift_unknownObjectRelease(*((_QWORD *)v13 + 1));
  return swift_deallocObject(v0, v14, v2 | v7 | 7);
}

void sub_100093CB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v5 = *(_QWORD *)(sub_100003A2C((uint64_t *)&unk_1001B36F0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  sub_100085D90(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD **)(v2 + 24), *(void (**)(_QWORD, uint64_t))(v2 + 32), *(_QWORD *)(v2 + 40), v2 + v6, v2 + v9, *(_BYTE *)(v2 + v9 + *(_QWORD *)(v8 + 64)), *(_QWORD *)(((v9 + *(_QWORD *)(v8 + 64)) & 0xFFFFFFFFFFFFF8) + v2 + 8));
}

uint64_t _s14InstallPackageVMa(uint64_t a1)
{
  return sub_1000075E0(a1, qword_1001B0EE8, (uint64_t)&_s14InstallPackageVMn);
}

uint64_t sub_100093D78(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t *sub_100093D90(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = a1[4];
  v3 = a1[5];
  v4 = a1[8];
  v5 = a1[9];
  v6 = a1[10];
  v7 = a1[11];
  v8 = a1[12];
  v17 = a1[15];
  v18 = a1[14];
  v15 = a1[17];
  v16 = a1[16];
  v13 = a1[19];
  v14 = a1[18];
  v12 = a1[20];
  v10 = a1[13];
  v11 = a1[21];
  sub_1000306C8(*a1, a1[1]);
  swift_bridgeObjectRetain();
  sub_1000306C8(v2, v3);
  swift_bridgeObjectRetain();
  sub_1000306C8(v4, v5);
  sub_100093E80(v6, v7, v8, v10);
  sub_100093EC0(v18, v17, v16, v15, v14, v13, v12, v11);
  return a1;
}

uint64_t sub_100093E80(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  if (result != 1)
  {
    v5 = result;
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(v5);
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t sub_100093EC0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    sub_1000306C8(a3, a4);
    return sub_100093E80(a5, a6, a7, a8);
  }
  return result;
}

uint64_t sub_100093F2C(uint64_t a1)
{
  sub_100093F8C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_TtC14softposreaderd12RemoteReader **)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_TtC14softposreaderd12RemoteReader **)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_TtC14softposreaderd12RemoteReader **)(a1 + 120), *(void **)(a1 + 128), *(void **)(a1 + 136), *(void **)(a1 + 144),
    *(void **)(a1 + 152),
    *(void **)(a1 + 160),
    *(void **)(a1 + 168));
  return a1;
}

uint64_t sub_100093F8C(uint64_t result, unint64_t a2, uint64_t a3, _TtC14softposreaderd12RemoteReader *a4, uint64_t a5, unint64_t a6, uint64_t a7, _TtC14softposreaderd12RemoteReader *a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _TtC14softposreaderd12RemoteReader *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22)
{
  SEL v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;

  if (a4)
  {
    sub_10000A9B0(result, a2);
    swift_bridgeObjectRelease(a4, v26, v27, v28, v29, v30, v31, v32);
    sub_10000A9B0(a5, a6);
    swift_bridgeObjectRelease(a8, v33, v34, v35, v36, v37, v38, v39);
    sub_10000A9B0(a9, a10);
    sub_100094080(a11, a12, a13, a14);
    return sub_1000940BC(a15, a16, a17, a18, a19, a20, a21, a22);
  }
  return result;
}

uint64_t sub_100094080(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result != 1)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t sub_1000940BC(uint64_t a1, _TtC14softposreaderd12RemoteReader *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2, (SEL)a2, a3, a4, a5, a6, a7, a8);
    sub_10000A9B0((uint64_t)a3, (unint64_t)a4);
    return sub_100094080((uint64_t)a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8);
  }
  return result;
}

uint64_t sub_100094128(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100094218(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 40 * a1 + 32;
  v6 = a3 + 40 * v4;
  if (v5 >= v6 || v5 + 40 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10009430C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000943FC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_1000944EC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000945D4(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  char v7;

  if (a1 == 0xD00000000000001ALL)
  {
    v4 = 0x800000010016D200;
    if (a2 == 0x800000010016D200)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x800000010016D200, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000019 && a2 == 0x800000010016D220)
  {
    v6 = 0x800000010016D220;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x800000010016D220, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x800000010016D240)
  {
    swift_bridgeObjectRelease(0x800000010016D240);
    return 2;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x800000010016D240, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_100094714(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _TtC14softposreaderd12RemoteReader *v11;
  _TtC14softposreaderd12RemoteReader *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _TtC14softposreaderd12RemoteReader *v16;
  _TtC14softposreaderd12RemoteReader *v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  char v40;
  _TtC14softposreaderd12RemoteReader *v41;

  v3 = sub_100003A2C(&qword_1001B0F40);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_100005EF8(a1, v7);
  v9 = sub_100099808();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for KCSCertWithChainResponse.CodingKeys, &type metadata for KCSCertWithChainResponse.CodingKeys, v9, v7, v8);
  if (v1)
  {
    sub_100005D3C(a1);
  }
  else
  {
    LOBYTE(v41) = 0;
    v8 = KeyedDecodingContainer.decode(_:forKey:)(&v41, v3);
    v12 = v11;
    v13 = sub_100003A2C((uint64_t *)&unk_1001AE460);
    v40 = 1;
    v14 = sub_10001A4F4(&qword_1001ADA08, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain();
    v39 = v14;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v41, v13, &v40, v3, v13, v14);
    v15 = v13;
    v16 = v41;
    v40 = 2;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v41, v15, &v40, v3, v15, v39);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v17 = v41;
    swift_bridgeObjectRetain();
    sub_100005D3C(a1);
    swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
    swift_bridgeObjectRelease(v16, v25, v26, v27, v28, v29, v30, v31);
    swift_bridgeObjectRelease(v12, v32, v33, v34, v35, v36, v37, v38);
  }
  return v8;
}

uint64_t sub_100094980(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int128 v24[2];
  _QWORD v25[5];
  _QWORD v26[5];
  uint64_t v27;
  uint64_t v28;

  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1;
  sub_1000DEDE4();
  if (v1)
  {
    swift_release(a1);
  }
  else
  {
    sub_1000E273C();
    if (qword_1001AD068 != -1)
      swift_once(&qword_1001AD068, sub_100083768);
    v8 = type metadata accessor for Logger(0);
    sub_100003A14(v8, (uint64_t)qword_1001B0CA8);
    v9 = swift_retain_n(a1, 2);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.debug.getter();
    v12 = v11;
    if (os_log_type_enabled(v10, v11))
    {
      v13 = swift_slowAlloc(22, -1);
      v23 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v24[0] = v23;
      *(_DWORD *)v13 = 136315394;
      v22 = v12;
      v27 = sub_1000056EC(0x7065642874696E69, 0xEC000000293A746FLL, (uint64_t *)v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v13 + 4, v13 + 12);
      *(_WORD *)(v13 + 12) = 2080;
      v21 = v13 + 14;
      sub_100116B10();
      v15 = v14;
      v27 = sub_1000056EC(v16, v14, (uint64_t *)v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v21, v13 + 22);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease(v15);
      _os_log_impl((void *)&_mh_execute_header, v10, (os_log_type_t)v22, "ConfiguratorBackend.%s, BackendSetting: %s", (uint8_t *)v13, 0x16u);
      v17 = v23;
      swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v13, -1, -1);

    }
    else
    {

      swift_release_n(a1, 2);
    }
    v18 = sub_100005EF8(v26, v26[3]);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, *v18 + OBJC_IVAR____TtC9SPREngine11Environment_configuratorBackendURL, v3);
    sub_100005EF8(v25, v25[3]);
    sub_10003EA5C(v24);
    swift_release(a1);
    v19 = type metadata accessor for ConfiguratorBackend(0);
    v7 = swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v7 + OBJC_IVAR____TtC9SPREngine19ConfiguratorBackend_configuratorUrl, v6, v3);
    sub_10001A674(v24, v7 + OBJC_IVAR____TtC9SPREngine19ConfiguratorBackend_channel);
    sub_100005D3C(v25);
    sub_100005D3C(v26);
  }
  return v7;
}

uint64_t sub_100094CB8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100094DA8(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  _TtC14softposreaderd12RemoteReader *v12;
  char v13;
  BOOL v14;
  BOOL v15;
  char v16;
  BOOL v17;
  char v18;
  char v19;
  BOOL v20;
  char v21;
  char v22;
  BOOL v23;
  char v24;
  char v25;
  BOOL v26;
  char v27;
  char v28;
  BOOL v29;
  BOOL v30;
  char v31;
  BOOL v32;
  BOOL v33;
  char v34;
  BOOL v35;
  BOOL v36;
  char v37;
  BOOL v38;
  char v39;
  char v40;
  BOOL v41;
  char v42;
  char v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  uint64_t v52;

  if ((related decl 'e' for SPRHTTPErrorCode.isServerError.getter() & 1) == 0)
  {
    v3 = related decl 'e' for SPRHTTPErrorCode.serverCode.getter(a1);
    if (v4)
    {
      v11 = v3;
      v12 = (_TtC14softposreaderd12RemoteReader *)v4;
      if (v3 == 0x303030342D53434BLL && v4 == (const char *)0xE800000000000000)
        goto LABEL_31;
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0x303030342D53434BLL, 0xE800000000000000, v3, v4, 0);
      v14 = v11 == 0x373030342D53434BLL && v12 == (_TtC14softposreaderd12RemoteReader *)0xE800000000000000;
      v15 = v14;
      if ((v13 & 1) != 0
        || v15
        || ((v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0x373030342D53434BLL, 0xE800000000000000, v11, v12, 0), v11 == 0x383030342D53434BLL)? (v17 = v12 == (_TtC14softposreaderd12RemoteReader *)0xE800000000000000): (v17 = 0), !v17 ? (v18 = 0) : (v18 = 1), (v16 & 1) != 0|| (v18 & 1) != 0|| ((v19 = _stringCompareWithSmolCheck(_:_:expecting:)(0x383030342D53434BLL, 0xE800000000000000, v11, v12, 0), v11 == 0x393030342D53434BLL)? (v20 = v12 == (_TtC14softposreaderd12RemoteReader *)0xE800000000000000)
           : (v20 = 0),
             !v20 ? (v21 = 0) : (v21 = 1),
             (v19 & 1) != 0
          || (v21 & 1) != 0
          || (_stringCompareWithSmolCheck(_:_:expecting:)(0x393030342D53434BLL, 0xE800000000000000, v11, v12, 0) & 1) != 0)))
      {
LABEL_31:
        swift_bridgeObjectRelease(v12, v4, v5, v6, v7, v8, v9, v10);
        v2 = 2016;
        goto LABEL_102;
      }
      if (v11 == 0x313030342D53434BLL && v12 == (_TtC14softposreaderd12RemoteReader *)0xE800000000000000
        || ((v22 = _stringCompareWithSmolCheck(_:_:expecting:)(0x313030342D53434BLL, 0xE800000000000000, v11, v12, 0), v11 == 0x323030342D53434BLL)? (v23 = v12 == (_TtC14softposreaderd12RemoteReader *)0xE800000000000000): (v23 = 0), !v23 ? (v24 = 0) : (v24 = 1), (v22 & 1) != 0|| (v24 & 1) != 0|| ((v25 = _stringCompareWithSmolCheck(_:_:expecting:)(0x323030342D53434BLL, 0xE800000000000000, v11, v12, 0), v11 == 0x333030342D53434BLL)? (v26 = v12 == (_TtC14softposreaderd12RemoteReader *)0xE800000000000000)
           : (v26 = 0),
             !v26 ? (v27 = 0) : (v27 = 1),
             (v25 & 1) != 0
          || (v27 & 1) != 0
          || (_stringCompareWithSmolCheck(_:_:expecting:)(0x333030342D53434BLL, 0xE800000000000000, v11, v12, 0) & 1) != 0)))
      {
        swift_bridgeObjectRelease(v12, v4, v5, v6, v7, v8, v9, v10);
        v2 = 2015;
        goto LABEL_102;
      }
      if (v11 == 0x343030342D53434BLL && v12 == (_TtC14softposreaderd12RemoteReader *)0xE800000000000000)
        goto LABEL_95;
      v28 = _stringCompareWithSmolCheck(_:_:expecting:)(0x343030342D53434BLL, 0xE800000000000000, v11, v12, 0);
      v29 = v11 == 0x353030342D53434BLL && v12 == (_TtC14softposreaderd12RemoteReader *)0xE800000000000000;
      v30 = v29;
      if ((v28 & 1) != 0 || v30)
        goto LABEL_95;
      v31 = _stringCompareWithSmolCheck(_:_:expecting:)(0x353030342D53434BLL, 0xE800000000000000, v11, v12, 0);
      v32 = v11 == 0x363030342D53434BLL && v12 == (_TtC14softposreaderd12RemoteReader *)0xE800000000000000;
      v33 = v32;
      if ((v31 & 1) != 0 || v33)
        goto LABEL_95;
      v34 = _stringCompareWithSmolCheck(_:_:expecting:)(0x363030342D53434BLL, 0xE800000000000000, v11, v12, 0);
      v35 = v11 == 0x303430342D53434BLL && v12 == (_TtC14softposreaderd12RemoteReader *)0xE800000000000000;
      v36 = v35;
      if ((v34 & 1) != 0
        || v36
        || ((v37 = _stringCompareWithSmolCheck(_:_:expecting:)(0x303430342D53434BLL, 0xE800000000000000, v11, v12, 0), v11 == 0x363430342D53434BLL)? (v38 = v12 == (_TtC14softposreaderd12RemoteReader *)0xE800000000000000): (v38 = 0), !v38 ? (v39 = 0) : (v39 = 1), (v37 & 1) != 0|| (v39 & 1) != 0|| ((v40 = _stringCompareWithSmolCheck(_:_:expecting:)(0x363430342D53434BLL, 0xE800000000000000, v11, v12, 0), v11 == 0x323130342D53434BLL)? (v41 = v12 == (_TtC14softposreaderd12RemoteReader *)0xE800000000000000)
           : (v41 = 0),
             !v41 ? (v42 = 0) : (v42 = 1),
             (v40 & 1) != 0
          || (v42 & 1) != 0
          || (_stringCompareWithSmolCheck(_:_:expecting:)(0x323130342D53434BLL, 0xE800000000000000, v11, v12, 0) & 1) != 0)))
      {
LABEL_95:
        swift_bridgeObjectRelease(v12, v4, v5, v6, v7, v8, v9, v10);
        v2 = 2011;
        goto LABEL_102;
      }
      if (v11 == 0x353430342D53434BLL && v12 == (_TtC14softposreaderd12RemoteReader *)0xE800000000000000)
      {
        swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)0xE800000000000000, v4, v5, v6, v7, v8, v9, v10);
        v2 = 2031;
        goto LABEL_102;
      }
      v43 = _stringCompareWithSmolCheck(_:_:expecting:)(0x353430342D53434BLL, 0xE800000000000000, v11, v12, 0);
      swift_bridgeObjectRelease(v12, v44, v45, v46, v47, v48, v49, v50);
      if ((v43 & 1) != 0)
      {
        v2 = 2031;
        goto LABEL_102;
      }
    }
    v2 = 2000;
    goto LABEL_102;
  }
  v2 = 2016;
LABEL_102:
  v51 = a1;
  v52 = sub_1000247AC(v2, 0, 0, (uint64_t)a1);

  return v52;
}

uint64_t sub_10009527C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  const char *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  Swift::String_optional v29;
  SEL v30;
  char v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  const char *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  SEL v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  const char *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  uint64_t *v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _TtC14softposreaderd12RemoteReader *v71;
  uint64_t v72;
  uint64_t v73;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 1;
  v4 = a1 + 32;
  v3 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((unint64_t)(String.count.getter(v3, v5) - 33) >= 0xFFFFFFFFFFFFFFE0)
  {
    v21 = 1;
    while (2)
    {
      v22 = HIBYTE(v5) & 0xF;
      v70 = v3;
      v71 = (_TtC14softposreaderd12RemoteReader *)v5;
      if ((v5 & 0x2000000000000000) == 0)
        v22 = v3 & 0xFFFFFFFFFFFFLL;
      v72 = 0;
      v73 = v22;
      swift_bridgeObjectRetain();
      while (1)
      {
        v29 = String.Iterator.next()();
        if (!v29.value._object)
          break;
        Character.hexDigitValue.getter(v29.value._countAndFlagsBits, v29.value._object);
        v31 = (char)v30;
        swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v29.value._object, v30, v32, v33, v34, v35, v36, v37);
        if ((v31 & 1) != 0)
        {
          swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, v38, v39, v40, v41, v42, v43, v44);
          swift_bridgeObjectRelease(v71, v60, v61, v62, v63, v64, v65, v66);
          if (qword_1001AD068 != -1)
            swift_once(&qword_1001AD068, sub_100083768);
          v67 = type metadata accessor for Logger(0);
          sub_100003A14(v67, (uint64_t)qword_1001B0CA8);
          v68 = swift_bridgeObjectRetain();
          v15 = Logger.logObject.getter(v68);
          v16 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v15, v16))
          {
            v17 = (uint8_t *)swift_slowAlloc(12, -1);
            v18 = swift_slowAlloc(32, -1);
            v70 = v18;
            *(_DWORD *)v17 = 136315138;
            swift_bridgeObjectRetain();
            v69 = sub_1000056EC(v3, v5, &v70);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v17 + 4, v17 + 12);
            swift_bridgeObjectRelease_n(v5, 3);
            v19 = "%s contains non-hex digit";
            goto LABEL_22;
          }
          goto LABEL_23;
        }
      }
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v5, 0, v23, v24, v25, v26, v27, v28);
      swift_bridgeObjectRelease(v71, v45, v46, v47, v48, v49, v50, v51);
      if (v21 == v1)
      {
        swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, v52, v53, v54, v55, v56, v57, v58);
        return 1;
      }
      v59 = (uint64_t *)(v4 + 16 * v21);
      v3 = *v59;
      v5 = v59[1];
      swift_bridgeObjectRetain();
      ++v21;
      if ((unint64_t)(String.count.getter(v3, v5) - 33) >= 0xFFFFFFFFFFFFFFE0)
        continue;
      break;
    }
  }
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, v6, v7, v8, v9, v10, v11, v12);
  if (qword_1001AD068 != -1)
    swift_once(&qword_1001AD068, sub_100083768);
  v13 = type metadata accessor for Logger(0);
  sub_100003A14(v13, (uint64_t)qword_1001B0CA8);
  v14 = swift_bridgeObjectRetain();
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v70 = v18;
    *(_DWORD *)v17 = 136315138;
    swift_bridgeObjectRetain();
    v69 = sub_1000056EC(v3, v5, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease_n(v5, 3);
    v19 = "incorrect length %s";
LABEL_22:
    _os_log_impl((void *)&_mh_execute_header, v15, v16, v19, v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {
LABEL_23:

    swift_bridgeObjectRelease_n(v5, 2);
  }
  return 0;
}

uint64_t sub_100095610(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;

  if (result)
  {
    if (result == 1)
      return result;
    if ((sub_10009527C(result) & 1) == 0)
    {
      if (qword_1001AD068 != -1)
        swift_once(&qword_1001AD068, sub_100083768);
      v3 = type metadata accessor for Logger(0);
      v4 = sub_100003A14(v3, (uint64_t)qword_1001B0CA8);
      v5 = Logger.logObject.getter(v4);
      v6 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v5, v6))
        goto LABEL_16;
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      v8 = "bypassAid is invalid";
      goto LABEL_15;
    }
  }
  if (!a2 || (sub_10009527C(a2) & 1) != 0)
    return 1;
  if (qword_1001AD068 != -1)
    swift_once(&qword_1001AD068, sub_100083768);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_100003A14(v9, (uint64_t)qword_1001B0CA8);
  v5 = Logger.logObject.getter(v10);
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    v8 = "supportCnpTrx is invalid";
LABEL_15:
    _os_log_impl((void *)&_mh_execute_header, v5, v6, v8, v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
LABEL_16:

  return 0;
}

void sub_100095798(id a1@<X0>, _TtC14softposreaderd12RemoteReader *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  void *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  const char *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  NSObject *v34;
  uint64_t v35;
  _TtC14softposreaderd12RemoteReader *v36;
  id v37;
  void *v38;
  uint64_t v39;
  _TtC14softposreaderd12RemoteReader *v40;
  _TtC14softposreaderd12RemoteReader *v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  SEL v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  const char *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  _TtC14softposreaderd12RemoteReader *v66;
  id v67;
  void *v68;
  const char *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  unint64_t v76;
  unint64_t v77;
  const char *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  unsigned __int8 *v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  SEL v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  unsigned int v98;
  id v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  SEL v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  id v114;
  uint64_t v115;
  NSObject *v116;
  os_log_type_t v117;
  uint8_t *v118;
  _TtC14softposreaderd12RemoteReader *v119;
  uint64_t v120;
  SEL v121;
  id v122;
  id v123;
  id v124;
  id v125;
  id v126;
  id v127;
  id v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  int v132;
  int v133;
  char *v134;
  __int128 v135;
  _TtC14softposreaderd12RemoteReader *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  int v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _TtC14softposreaderd12RemoteReader *v148;

  v132 = a3;
  v133 = a5;
  v131 = a4;
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v128 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100051970();
  v15 = v6;
  if (v6)
    return;
  v16 = v14;
  v130 = a6;
  v138 = v13;
  v139 = v11;
  v140 = (void *)v10;
  v17 = v14 >> 62;
  v143 = v14;
  if (v14 >> 62)
  {
LABEL_44:
    if (v16 < 0)
      v107 = v16;
    else
      v107 = v16 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v16, 2);
    v18 = _CocoaArrayWrapper.endIndex.getter(v107);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v16, v108, v109, v110, v111, v112, v113, v114);
    if (v18)
      goto LABEL_4;
LABEL_48:
    swift_bridgeObjectRelease_n(v143, 2);
    if (qword_1001AD068 == -1)
    {
LABEL_49:
      sub_100003A14((uint64_t)v140, (uint64_t)qword_1001B0CA8);
      v115 = swift_bridgeObjectRetain_n(a2, 2);
      v116 = Logger.logObject.getter(v115);
      v117 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v116, v117))
      {
        v118 = (uint8_t *)swift_slowAlloc(12, -1);
        v119 = (_TtC14softposreaderd12RemoteReader *)swift_slowAlloc(32, -1);
        v148 = v119;
        *(_DWORD *)v118 = 136315138;
        swift_bridgeObjectRetain();
        v146 = sub_1000056EC((uint64_t)a1, (unint64_t)a2, (uint64_t *)&v148);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147, v118 + 4, v118 + 12);
        swift_bridgeObjectRelease_n(a2, 3);
        _os_log_impl((void *)&_mh_execute_header, v116, v117, "no SLAM script in %s", v118, 0xCu);
        swift_arrayDestroy(v119, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v119, -1, -1);
        swift_slowDealloc(v118, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a2, 2);
      }
      v120 = sub_1000247AC(2027, 0, 0, 0);
      swift_willThrow(v120);
      return;
    }
LABEL_55:
    swift_once(&qword_1001AD068, sub_100083768);
    goto LABEL_49;
  }
  v18 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v18)
    goto LABEL_48;
LABEL_4:
  v128 = v15;
  v129 = v17;
  v137 = (uint64_t)a1;
  v17 = v143;
  v145 = v143 & 0xC000000000000001;
  v16 = 4;
  *(_QWORD *)&v19 = 136316162;
  v135 = v19;
  v134 = (char *)&type metadata for Any + 8;
  v20 = v139;
  a1 = v140;
  v21 = v138;
  v136 = a2;
  v142 = v18;
  do
  {
    if (v145)
      v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16 - 4, v17);
    else
      v29 = *(id *)(v17 + 8 * v16);
    v30 = v29;
    v31 = v16 - 3;
    if (__OFADD__(v16 - 4, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    if (qword_1001AD068 != -1)
      swift_once(&qword_1001AD068, sub_100083768);
    v32 = sub_100003A14((uint64_t)a1, (uint64_t)qword_1001B0CA8);
    (*(void (**)(char *, uint64_t, id))(v20 + 16))(v21, v32, a1);
    v33 = v30;
    swift_bridgeObjectRetain_n(a2, 2);
    v15 = v33;
    v34 = Logger.logObject.getter(v15);
    v144 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, (os_log_type_t)v144))
    {
      v141 = v16 - 3;
      v35 = swift_slowAlloc(44, -1);
      v36 = (_TtC14softposreaderd12RemoteReader *)swift_slowAlloc(64, -1);
      v148 = v36;
      *(_DWORD *)v35 = v135;
      v37 = objc_msgSend(v15, "scriptName");
      if (!v37)
        goto LABEL_57;
      v38 = v37;
      v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
      v41 = v40;

      *(_QWORD *)(v35 + 4) = sub_1000056EC(v39, (unint64_t)v41, (uint64_t *)&v148);
      swift_bridgeObjectRelease(v41, v42, v43, v44, v45, v46, v47, v48);
      *(_WORD *)(v35 + 12) = 2048;
      v49 = objc_msgSend(v15, "scriptID");

      *(_QWORD *)(v35 + 14) = v49;
      *(_WORD *)(v35 + 22) = 1024;
      LODWORD(v49) = objc_msgSend(v15, "scriptType");

      *(_DWORD *)(v35 + 24) = (_DWORD)v49;
      *(_WORD *)(v35 + 28) = 1024;
      LODWORD(v49) = objc_msgSend(v15, "apduCount");

      *(_DWORD *)(v35 + 30) = (_DWORD)v49;
      *(_WORD *)(v35 + 34) = 2080;
      a2 = v136;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v35 + 36) = sub_1000056EC(v137, (unint64_t)a2, (uint64_t *)&v148);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v144, "script name: %s, script id: %llu, script type: %u, apdu count: %u. at location: %s", (uint8_t *)v35, 0x2Cu);
      swift_arrayDestroy(v36, 2, v134);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);

      v21 = v138;
      v20 = v139;
      a1 = v140;
      (*(void (**)(char *, void *))(v139 + 8))(v138, v140);
      v17 = v143;
      v31 = v141;
    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
      (*(void (**)(char *, id))(v20 + 8))(v21, a1);
    }
    ++v16;
  }
  while (v31 != v142);
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v17, v22, v23, v24, v25, v26, v27, v28);
  if (!v145)
  {
    v16 = v137;
    if (!*(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_57:

      swift_bridgeObjectRelease(v136, v121, v122, v123, v124, v125, v126, v127);
      __break(1u);
      goto LABEL_58;
    }
    a1 = *(id *)(v17 + 32);
    if (v129)
      goto LABEL_34;
LABEL_18:
    v64 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v64)
      goto LABEL_19;
LABEL_38:
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v17, v57, v58, v59, v60, v61, v62, v63);
    v66 = &_swiftEmptyArrayStorage;
    v85 = *(_QWORD *)&_swiftEmptyArrayStorage.instance[8];
    if (!v85)
      goto LABEL_39;
LABEL_28:
    v86 = &v66->instance[24];
    v87 = 3;
    while (1)
    {
      v88 = *(_QWORD *)v86;
      v86 += 8;
      v89 = __OFADD__(v87, v88);
      v87 += v88;
      if (v89)
        break;
      if (!--v85)
        goto LABEL_40;
    }
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  swift_bridgeObjectRetain();
  a1 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v17);
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v17, v50, v51, v52, v53, v54, v55, v56);
  v16 = v137;
  if (!v129)
    goto LABEL_18;
LABEL_34:
  if (v17 < 0)
    v90 = v17;
  else
    v90 = v17 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v64 = _CocoaArrayWrapper.endIndex.getter(v90);
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v17, v91, v92, v93, v94, v95, v96, v97);
  if (!v64)
    goto LABEL_38;
LABEL_19:
  v148 = &_swiftEmptyArrayStorage;
  sub_100091D0C(0, v64 & ~(v64 >> 63), 0);
  if (v64 < 0)
  {
    __break(1u);
    goto LABEL_55;
  }
  v65 = 0;
  v66 = v148;
  do
  {
    if (v145)
      v67 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v65, v17);
    else
      v67 = *(id *)(v17 + 8 * v65 + 32);
    v68 = v67;
    v15 = objc_msgSend(v67, "apduCount", v128);

    v148 = v66;
    v77 = *(_QWORD *)&v66->instance[8];
    v76 = *(_QWORD *)&v66->instance[16];
    if (v77 >= v76 >> 1)
    {
      sub_100091D0C(v76 > 1, v77 + 1, 1);
      v66 = v148;
    }
    ++v65;
    *(_QWORD *)&v66->instance[8] = v77 + 1;
    *(_QWORD *)&v66->instance[8 * v77 + 24] = v15;
    v17 = v143;
  }
  while (v64 != v65);
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v143, v69, v70, v71, v72, v73, v74, v75);
  v85 = *(_QWORD *)&v66->instance[8];
  if (v85)
    goto LABEL_28;
LABEL_39:
  v87 = 3;
LABEL_40:
  swift_bridgeObjectRelease(v66, v78, v79, v80, v81, v82, v83, v84);
  v98 = objc_msgSend(a1, "scriptType");
  v99 = objc_msgSend(a1, "scriptName");
  if (v99)
  {
    v100 = v99;
    v101 = v98;
    v102 = static String._unconditionallyBridgeFromObjectiveC(_:)(v99);
    v104 = v103;

    swift_bridgeObjectRetain();
    v106 = v130;
    v105 = v131;
    *v130 = v16;
    v106[1] = (uint64_t)a2;
    v106[2] = 0;
    v106[3] = 0;
    *((_BYTE *)v106 + 32) = 0;
    v106[5] = v87;
    v106[6] = v101;
    v106[7] = v105;
    *((_BYTE *)v106 + 64) = v133 & 1;
    *((_BYTE *)v106 + 65) = v132;
    v106[9] = v102;
    v106[10] = v104;
    return;
  }
LABEL_58:
  __break(1u);
}

void sub_100095FAC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, int a5@<W5>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t inited;
  uint64_t v20;
  NSString *v21;
  NSString *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  objc_class *v30;
  uint64_t v31;
  const char *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  _QWORD v46[2];
  int v47;
  _BYTE v48[72];
  uint64_t v49;

  v47 = a5;
  v46[1] = a6;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)v46 - v15;
  URL.appendingPathComponent(_:)(a3, a4);
  URL.appendingPathExtension(_:)(7497060, 0xE300000000000000);
  v17 = *(void (**)(char *, uint64_t))(v11 + 8);
  v17(v14, v10);
  v18 = sub_100003A2C(&qword_1001B0E28);
  inited = swift_initStackObject(v18, v48);
  *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
  *(_QWORD *)(inited + 32) = NSFileProtectionKey;
  type metadata accessor for FileProtectionType(0);
  *(_QWORD *)(inited + 64) = v20;
  *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
  v21 = NSFileProtectionKey;
  v22 = NSFileProtectionCompleteUntilFirstUserAuthentication;
  v30 = (objc_class *)sub_1000E8CAC(inited, v23, v24, v25, v26, v27, v28, v29);
  v31 = v49;
  sub_1000BEE70((uint64_t)v16, 5000, v30, a1, a2);
  if (!v31)
  {
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v30, v32, v33, v34, v35, v36, v37, v38);
    URL.path(percentEncoded:)(0);
    __asm { BR              X10 }
  }
  v17(v16, v10);
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v30, v39, v40, v41, v42, v43, v44, v45);
}

uint64_t sub_100096218(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 88 * a1 + 32;
  v6 = a3 + 88 * v4;
  if (v5 >= v6 || v5 + 88 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

void sub_100096308(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  _TtC14softposreaderd12RemoteReader *v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  _TtC14softposreaderd12RemoteReader *v17;
  uint64_t v18;
  void *v19;
  id v20;
  NSString v21;
  unsigned int v22;
  id v23;
  NSString v24;
  unsigned int v25;
  id v26;
  id v27;
  SEL v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  os_log_type_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _TtC14softposreaderd12RemoteReader *v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62[4];
  unsigned __int8 v63;

  if (qword_1001AD068 != -1)
    swift_once(&qword_1001AD068, sub_100083768);
  v2 = type metadata accessor for Logger(0);
  sub_100003A14(v2, (uint64_t)qword_1001B0CA8);
  v3 = sub_100097770(a1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v62[0] = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = *(_QWORD *)(a1 + 72);
    v9 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 80);
    swift_bridgeObjectRetain();
    v60 = sub_1000056EC(v8, (unint64_t)v9, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v9, v10, v11, v12, v13, v14, v15, v16);
    sub_1000977B0(a1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "delete SLAM script %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    sub_1000977B0(a1);
  }

  sub_1000977F0(a1, (uint64_t)&v60);
  sub_1000977F0((uint64_t)&v60, (uint64_t)v62);
  if (v63 <= 2u)
  {
    v18 = v62[0];
    v17 = (_TtC14softposreaderd12RemoteReader *)v62[1];
    swift_bridgeObjectRetain();
    v19 = (void *)objc_opt_self(NSFileManager);
    v20 = objc_msgSend(v19, "defaultManager");
    v21 = String._bridgeToObjectiveC()();
    v22 = objc_msgSend(v20, "fileExistsAtPath:", v21);

    if (v22)
    {
      v23 = objc_msgSend(v19, "defaultManager");
      v24 = String._bridgeToObjectiveC()();
      v59 = 0;
      v25 = objc_msgSend(v23, "removeItemAtPath:error:", v24, &v59);

      v26 = v59;
      if (v25)
      {
        v27 = v59;
        swift_bridgeObjectRelease(v17, v28, v29, v30, v31, v32, v33, v34);
        return;
      }
      v40 = v59;
      v41 = _convertNSErrorToError(_:)(v26);

      swift_willThrow(v42);
      swift_errorRetain();
      swift_bridgeObjectRetain();
      v43 = swift_errorRetain();
      v36 = Logger.logObject.getter(v43);
      v44 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v36, v44))
      {
        v45 = swift_slowAlloc(22, -1);
        v46 = (void *)swift_slowAlloc(64, -1);
        v59 = v46;
        *(_DWORD *)v45 = 136315394;
        swift_bridgeObjectRetain();
        v58 = sub_1000056EC(v18, (unint64_t)v17, (uint64_t *)&v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v45 + 4, v45 + 12);
        swift_bridgeObjectRelease_n(v17, 3);
        *(_WORD *)(v45 + 12) = 2080;
        v58 = v41;
        swift_errorRetain();
        v47 = sub_100003A2C((uint64_t *)&unk_1001B1280);
        v48 = String.init<A>(describing:)(&v58, v47);
        v50 = (_TtC14softposreaderd12RemoteReader *)v49;
        v58 = sub_1000056EC(v48, v49, (uint64_t *)&v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v45 + 14, v45 + 22);
        swift_bridgeObjectRelease(v50, v51, v52, v53, v54, v55, v56, v57);
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v36, v44, "failed to delete %s: %s", (uint8_t *)v45, 0x16u);
        swift_arrayDestroy(v46, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v46, -1, -1);
        swift_slowDealloc(v45, -1, -1);

        swift_errorRelease();
        return;
      }
      swift_errorRelease();
      swift_bridgeObjectRelease_n(v17, 2);
      swift_errorRelease();
      swift_errorRelease();
    }
    else
    {
      v35 = swift_bridgeObjectRetain();
      v36 = Logger.logObject.getter(v35);
      v37 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v36, v37))
      {

        swift_bridgeObjectRelease_n(v17, 2);
        return;
      }
      v38 = (uint8_t *)swift_slowAlloc(12, -1);
      v39 = (void *)swift_slowAlloc(32, -1);
      v59 = v39;
      *(_DWORD *)v38 = 136315138;
      swift_bridgeObjectRetain();
      v58 = sub_1000056EC(v18, (unint64_t)v17, (uint64_t *)&v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v38 + 4, v38 + 12);
      swift_bridgeObjectRelease_n(v17, 3);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "file at %s does not exist", v38, 0xCu);
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);
    }

  }
}

void sub_1000968AC(_BYTE *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  _TtC14softposreaderd12RemoteReader *v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int16 v92;
  char v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  unint64_t v98;
  unint64_t v99;
  __int128 v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int16 v107;
  char v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int16 v121;
  char v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  unint64_t v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  const char *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  uint64_t v138;
  unsigned __int8 *v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  _TtC14softposreaderd12RemoteReader *v144;
  uint64_t v145;
  uint64_t v146;
  unsigned __int8 v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned __int8 v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned __int8 v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD v188[11];
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  __int128 v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  __int128 v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _OWORD v219[5];
  uint64_t v220;

  if (*a1 != 1)
    return;
  if (qword_1001AD068 != -1)
    swift_once(&qword_1001AD068, sub_100083768);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_100003A14(v9, (uint64_t)qword_1001B0CA8);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "invalid SLAM, delete already saved SLAM if necessary", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = *a2;
  v15 = a2[1];
  v16 = a2[2];
  v17 = a2[3];
  v18 = a2[4];
  v19 = a2[5];
  v20 = a2[6];
  v21 = a2[7];
  v23 = a2[8];
  v22 = a2[9];
  v24 = a2[10];
  v188[0] = *a2;
  v188[1] = v15;
  v188[2] = v16;
  v188[3] = v17;
  v188[4] = v18;
  v188[5] = v19;
  v188[6] = v20;
  v188[7] = v21;
  v188[8] = v23;
  v188[9] = v22;
  v25 = *(_QWORD *)a3;
  v26 = *(_QWORD *)(a3 + 8);
  v27 = *(_QWORD *)(a3 + 16);
  v28 = *(_QWORD *)(a3 + 24);
  v29 = *(_QWORD *)(a3 + 32);
  v30 = *(_OWORD *)(a3 + 40);
  v32 = *(_QWORD *)(a3 + 56);
  v31 = *(_QWORD *)(a3 + 64);
  v33 = *(_QWORD *)(a3 + 72);
  v34 = *(_QWORD *)(a3 + 80);
  v188[10] = v24;
  v189 = v25;
  v169 = v26;
  v170 = v25;
  v190 = v26;
  v191 = v27;
  v167 = v28;
  v168 = v27;
  v192 = v28;
  v193 = v29;
  v166 = v29;
  v194 = v30;
  v181 = v33;
  v185 = v32;
  v195 = v32;
  v196 = v31;
  v158 = v31;
  v197 = v33;
  v198 = v34;
  v35 = *a4;
  v36 = a4[1];
  v37 = a4[2];
  v38 = a4[3];
  v40 = a4[4];
  v39 = a4[5];
  v41 = a4[6];
  v42 = a4[7];
  v43 = a4[8];
  v44 = a4[9];
  v45 = a4[10];
  v199 = *a4;
  v200 = v36;
  v201 = v37;
  v202 = v38;
  v203 = v40;
  v172 = v41;
  v173 = v39;
  *(_QWORD *)&v204 = v39;
  *((_QWORD *)&v204 + 1) = v41;
  v171 = v42;
  v205 = v42;
  v157 = v43;
  v206 = v43;
  v156 = v44;
  v207 = v44;
  v47 = *a5;
  v46 = a5[1];
  v48 = a5[2];
  v49 = a5[3];
  v50 = a5[4];
  v51 = a5[5];
  v52 = a5[6];
  v53 = a5[7];
  v55 = a5[8];
  v54 = a5[9];
  v56 = a5[10];
  v154 = v45;
  v155 = v54;
  v208 = v45;
  v209 = v47;
  v164 = v48;
  v165 = v46;
  v210 = v46;
  v211 = v48;
  v162 = v50;
  v163 = v49;
  v212 = v49;
  v213 = v50;
  v160 = v52;
  v161 = v51;
  *(_QWORD *)&v214 = v51;
  *((_QWORD *)&v214 + 1) = v52;
  v159 = v53;
  v215 = v53;
  v216 = v55;
  v217 = v54;
  v218 = v56;
  v57 = v30;
  if (v24)
  {
    v148 = v38;
    v149 = v37;
    v58 = v14;
    v59 = v15;
    v146 = v35;
    v147 = v40;
    v60 = v16;
    v150 = v56;
    v151 = v47;
    v61 = v17;
    v62 = v34;
    v63 = v18;
    v64 = v19;
    v65 = v20;
    v145 = v36;
    v66 = v21;
    v176 = v22;
    v152 = v24;
    v153 = v23;
    sub_10009773C(v14, v15, v16, v17, v18, v19, v20, v21, v23, v22, v24);
    sub_10009773C(v170, v169, v168, v167, v166, v57, *((uint64_t *)&v57 + 1), v185, v158, v181, v62);
    sub_10009773C(v146, v145, v149, v148, v147, v173, v172, v171, v157, v156, v154);
    sub_10009773C(v151, v165, v164, v163, v162, v161, v160, v159, v55, v54, v150);
    v186 = v58;
    v67 = v58;
    v68 = v59;
    v69 = v59;
    v70 = v60;
    v71 = v60;
    v72 = v61;
    sub_10009773C(v67, v69, v71, v61, v63, v64, v65, v66, v153, v176, v152);
    v81 = sub_1000919DC(0, 1, 1, (uint64_t)&_swiftEmptyArrayStorage, v73, v74, v75, v76);
    v83 = *(_QWORD *)&v81->instance[8];
    v82 = *(_QWORD *)&v81->instance[16];
    if (v83 >= v82 >> 1)
      v81 = sub_1000919DC((_TtC14softposreaderd12RemoteReader *)(v82 > 1), v83 + 1, 1, (uint64_t)v81, v77, v78, v79, v80);
    *(_QWORD *)&v81->instance[8] = v83 + 1;
    v84 = (char *)v81 + 88 * v83;
    *((_QWORD *)v84 + 4) = v186;
    *((_QWORD *)v84 + 5) = v68;
    *((_QWORD *)v84 + 6) = v70;
    *((_QWORD *)v84 + 7) = v72;
    v84[64] = v63;
    *((_QWORD *)v84 + 9) = v64;
    *((_QWORD *)v84 + 10) = v65;
    *((_QWORD *)v84 + 11) = v66;
    v84[96] = v153 & 1;
    v84[97] = BYTE1(v153);
    *((_QWORD *)v84 + 13) = v176;
    *((_QWORD *)v84 + 14) = v152;
    v85 = v194;
    v86 = v195;
    v87 = v197;
    v34 = v198;
    if (!v198)
      goto LABEL_17;
    goto LABEL_12;
  }
  v177 = v30;
  sub_10009773C(v14, v15, v16, v17, v18, v19, v20, v21, v23, v22, 0);
  v86 = v185;
  sub_10009773C(v170, v169, v168, v167, v166, v57, *((uint64_t *)&v57 + 1), v185, v158, v181, v34);
  sub_10009773C(v35, v36, v37, v38, v40, v173, v172, v171, v157, v156, v45);
  sub_10009773C(v47, v165, v164, v163, v162, v161, v160, v159, v55, v155, v56);
  v85 = v177;
  v81 = &_swiftEmptyArrayStorage;
  v87 = v181;
  if (v34)
  {
LABEL_12:
    v178 = v85;
    v182 = v87;
    v187 = v86;
    v88 = v189;
    v89 = v190;
    v90 = v191;
    v91 = v192;
    v92 = v196;
    v93 = v193;
    sub_100051188(v189, v190, v191, v192, v193);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native(v81) & 1) == 0)
      v81 = sub_1000919DC(0, *(_QWORD *)&v81->instance[8] + 1, 1, (uint64_t)v81, v94, v95, v96, v97);
    v99 = *(_QWORD *)&v81->instance[8];
    v98 = *(_QWORD *)&v81->instance[16];
    v100 = v178;
    if (v99 >= v98 >> 1)
    {
      v144 = sub_1000919DC((_TtC14softposreaderd12RemoteReader *)(v98 > 1), v99 + 1, 1, (uint64_t)v81, v94, v95, v96, v97);
      v100 = v178;
      v81 = v144;
    }
    *(_QWORD *)&v81->instance[8] = v99 + 1;
    v101 = (char *)v81 + 88 * v99;
    *((_QWORD *)v101 + 4) = v88;
    *((_QWORD *)v101 + 5) = v89;
    *((_QWORD *)v101 + 6) = v90;
    *((_QWORD *)v101 + 7) = v91;
    v101[64] = v93;
    *(_OWORD *)(v101 + 72) = v100;
    *((_QWORD *)v101 + 11) = v187;
    v101[96] = v92 & 1;
    v101[97] = HIBYTE(v92);
    *((_QWORD *)v101 + 13) = v182;
    *((_QWORD *)v101 + 14) = v34;
  }
LABEL_17:
  v102 = v208;
  if (v208)
  {
    v103 = v199;
    v104 = v200;
    v105 = v201;
    v106 = v202;
    v179 = v204;
    v183 = v207;
    v174 = v205;
    v107 = v206;
    v108 = v203;
    sub_100051188(v199, v200, v201, v202, v203);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native(v81) & 1) == 0)
      v81 = sub_1000919DC(0, *(_QWORD *)&v81->instance[8] + 1, 1, (uint64_t)v81, v109, v110, v111, v112);
    v114 = *(_QWORD *)&v81->instance[8];
    v113 = *(_QWORD *)&v81->instance[16];
    if (v114 >= v113 >> 1)
      v81 = sub_1000919DC((_TtC14softposreaderd12RemoteReader *)(v113 > 1), v114 + 1, 1, (uint64_t)v81, v109, v110, v111, v112);
    *(_QWORD *)&v81->instance[8] = v114 + 1;
    v115 = (char *)v81 + 88 * v114;
    *((_QWORD *)v115 + 4) = v103;
    *((_QWORD *)v115 + 5) = v104;
    *((_QWORD *)v115 + 6) = v105;
    *((_QWORD *)v115 + 7) = v106;
    v115[64] = v108;
    *(_OWORD *)(v115 + 72) = v179;
    *((_QWORD *)v115 + 11) = v174;
    v115[96] = v107 & 1;
    v115[97] = HIBYTE(v107);
    *((_QWORD *)v115 + 13) = v183;
    *((_QWORD *)v115 + 14) = v102;
  }
  v116 = v218;
  if (v218)
  {
    v117 = v209;
    v118 = v210;
    v119 = v211;
    v120 = v212;
    v180 = v214;
    v184 = v217;
    v175 = v215;
    v121 = v216;
    v122 = v213;
    sub_100051188(v209, v210, v211, v212, v213);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native(v81) & 1) == 0)
      v81 = sub_1000919DC(0, *(_QWORD *)&v81->instance[8] + 1, 1, (uint64_t)v81, v123, v124, v125, v126);
    v128 = *(_QWORD *)&v81->instance[8];
    v127 = *(_QWORD *)&v81->instance[16];
    if (v128 >= v127 >> 1)
      v81 = sub_1000919DC((_TtC14softposreaderd12RemoteReader *)(v127 > 1), v128 + 1, 1, (uint64_t)v81, v123, v124, v125, v126);
    *(_QWORD *)&v81->instance[8] = v128 + 1;
    v129 = (char *)v81 + 88 * v128;
    *((_QWORD *)v129 + 4) = v117;
    *((_QWORD *)v129 + 5) = v118;
    *((_QWORD *)v129 + 6) = v119;
    *((_QWORD *)v129 + 7) = v120;
    v129[64] = v122;
    *(_OWORD *)(v129 + 72) = v180;
    *((_QWORD *)v129 + 11) = v175;
    v129[96] = v121 & 1;
    v129[97] = HIBYTE(v121);
    *((_QWORD *)v129 + 13) = v184;
    *((_QWORD *)v129 + 14) = v116;
  }
  v130 = sub_100003A2C(&qword_1001B0DE0);
  swift_arrayDestroy(v188, 4, v130);
  v138 = *(_QWORD *)&v81->instance[8];
  if (v138)
  {
    v139 = &v81->instance[24];
    do
    {
      v140 = *((_OWORD *)v139 + 1);
      v219[0] = *(_OWORD *)v139;
      v219[1] = v140;
      v141 = *((_OWORD *)v139 + 2);
      v142 = *((_OWORD *)v139 + 3);
      v143 = *((_OWORD *)v139 + 4);
      v220 = *((_QWORD *)v139 + 10);
      v219[3] = v142;
      v219[4] = v143;
      v219[2] = v141;
      sub_100097770((uint64_t)v219);
      sub_100096308((uint64_t)v219);
      sub_1000977B0((uint64_t)v219);
      v139 += 88;
      --v138;
    }
    while (v138);
  }
  swift_bridgeObjectRelease(v81, v131, v132, v133, v134, v135, v136, v137);
}

uint64_t sub_1000970A4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000971BC(_TtC14softposreaderd12RemoteReader *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_signpost_type_t v15;
  void (*v16)(char *, char *, uint64_t);
  char *v17;
  uint8_t *v18;
  os_signpost_id_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  const char *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  const char *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  _TtC14softposreaderd12RemoteReader *v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned __int8 v51;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  const char *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  NSObject *v73;
  uint64_t v74;
  os_signpost_type_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  const char *v80;
  uint8_t *v81;
  os_signpost_id_t v82;
  void (*v83)(char *, uint64_t);
  char *v85;
  void (*v86)(char *, char *, uint64_t);
  uint64_t v87;
  uint64_t v88;
  void (*v89)(char *, uint64_t);
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  _TtC14softposreaderd12RemoteReader *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  __int128 v99;
  uint64_t v100;
  _OWORD v101[5];
  uint64_t v102;

  v94 = a1;
  v87 = type metadata accessor for OSSignpostError(0);
  v92 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v91 = (char *)&v85 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for OSSignpostID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v95 = (char *)&v85 - v8;
  __chkstk_darwin(v7);
  v10 = (char *)&v85 - v9;
  if (qword_1001AD070 != -1)
    swift_once(&qword_1001AD070, sub_1000837F8);
  v11 = type metadata accessor for OSSignposter(0);
  v12 = sub_100003A14(v11, (uint64_t)qword_1001B0CC0);
  v13 = static OSSignpostID.exclusive.getter();
  v88 = v12;
  v14 = OSSignposter.logHandle.getter(v13);
  v15 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v16 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    v17 = v95;
    v16(v95, v10, v2);
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    v19 = OSSignpostID.rawValue.getter(v18);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, v15, v19, "config-install-postProcessing", "begin clean up after install", v18, 2u);
    swift_slowDealloc(v18, -1, -1);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v17, v2);
    v20 = v16;
  }
  else
  {

    v20 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    v17 = v95;
  }
  v86 = v20;
  v20(v17, v10, v2);
  v21 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  v90 = OSSignpostIntervalState.init(id:isOpen:)(v17, 1);
  v22 = *(void (**)(char *, uint64_t))(v3 + 8);
  v93 = v2;
  v89 = v22;
  v22(v10, v2);
  v30 = *(_QWORD *)&v94->instance[8];
  if (v30)
  {
    v85 = v6;
    v38 = swift_bridgeObjectRetain() + 56;
    v39 = &_swiftEmptyArrayStorage;
    do
    {
      v44 = *(_QWORD *)(v38 + 56);
      if (v44)
      {
        v45 = *(_QWORD *)(v38 - 24);
        v46 = *(_QWORD *)(v38 - 16);
        v48 = *(_QWORD *)(v38 - 8);
        v47 = *(_QWORD *)v38;
        v99 = *(_OWORD *)(v38 + 16);
        v50 = *(_QWORD *)(v38 + 40);
        v49 = *(_QWORD *)(v38 + 48);
        v96 = *(_QWORD *)(v38 + 32);
        v97 = v47;
        v51 = *(_BYTE *)(v38 + 8);
        sub_100051188(v45, v46, v48, v47, v51);
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v39);
        v100 = v49;
        v98 = v50;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          v39 = sub_1000919DC(0, *(_QWORD *)&v39->instance[8] + 1, 1, (uint64_t)v39, v34, v35, v36, v37);
        v54 = *(_QWORD *)&v39->instance[8];
        v53 = *(_QWORD *)&v39->instance[16];
        if (v54 >= v53 >> 1)
          v39 = sub_1000919DC((_TtC14softposreaderd12RemoteReader *)(v53 > 1), v54 + 1, 1, (uint64_t)v39, v34, v35, v36, v37);
        v41 = v97;
        v40 = v98;
        v42 = v98 >> 8;
        *(_QWORD *)&v39->instance[8] = v54 + 1;
        v43 = (char *)v39 + 88 * v54;
        *((_QWORD *)v43 + 4) = v45;
        *((_QWORD *)v43 + 5) = v46;
        *((_QWORD *)v43 + 6) = v48;
        *((_QWORD *)v43 + 7) = v41;
        v43[64] = v51;
        *(_OWORD *)(v43 + 72) = v99;
        *((_QWORD *)v43 + 11) = v96;
        v43[96] = v40 & 1;
        v43[97] = v42;
        *((_QWORD *)v43 + 13) = v100;
        *((_QWORD *)v43 + 14) = v44;
      }
      v38 += 88;
      --v30;
    }
    while (v30);
    swift_bridgeObjectRelease(v94, v31, v32, v33, v34, v35, v36, v37);
    v6 = v85;
  }
  else
  {
    v39 = &_swiftEmptyArrayStorage;
  }
  v55 = *(_QWORD *)&v39->instance[8];
  v56 = v95;
  v57 = v92;
  v58 = v91;
  v59 = v90;
  if (v55)
  {
    swift_bridgeObjectRetain();
    v60 = 32;
    do
    {
      v61 = *(_OWORD *)&v39->instance[v60 + 8];
      v101[0] = *(_OWORD *)((char *)&v39->super.isa + v60);
      v101[1] = v61;
      v62 = *(_OWORD *)&v39->instance[v60 + 24];
      v63 = *(_OWORD *)((char *)&v39[1].super.isa + v60);
      v64 = *(_OWORD *)&v39[1].instance[v60 + 8];
      v102 = *(_QWORD *)&v39[1].instance[v60 + 24];
      v101[3] = v63;
      v101[4] = v64;
      v101[2] = v62;
      sub_100097770((uint64_t)v101);
      sub_100096308((uint64_t)v101);
      sub_1000977B0((uint64_t)v101);
      v60 += 88;
      --v55;
    }
    while (v55);
    swift_bridgeObjectRelease(v39, v65, v66, v67, v68, v69, v70, v71);
  }
  swift_bridgeObjectRelease(v39, v23, v24, v25, v26, v27, v28, v29);
  v73 = OSSignposter.logHandle.getter(v72);
  v74 = OSSignpostIntervalState.signpostID.getter();
  v75 = static os_signpost_type_t.end.getter(v74);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v76 = swift_retain();
    checkForErrorAndConsumeState(state:)(v76);
    swift_release(v59);
    v77 = v87;
    v78 = (*(uint64_t (**)(char *, uint64_t))(v57 + 88))(v58, v87);
    v79 = v93;
    if (v78 == enum case for OSSignpostError.doubleEnd(_:))
    {
      v80 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v77);
      v80 = "end clean up after install";
    }
    v86(v56, v6, v79);
    v81 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v81 = 0;
    v82 = OSSignpostID.rawValue.getter(v81);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v73, v75, v82, "config-install-postProcessing", v80, v81, 2u);
    swift_slowDealloc(v81, -1, -1);

    v83 = v89;
    v89(v6, v79);
    v83(v56, v79);
  }
  else
  {

    v89(v6, v93);
  }
  return swift_release(v59);
}

uint64_t sub_10009773C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
  {
    sub_100051188(result, a2, a3, a4, a5);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100097770(uint64_t a1)
{
  sub_100051188(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000977B0(uint64_t a1)
{
  _TtC14softposreaderd12RemoteReader *v2;
  SEL v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;

  v2 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 80);
  sub_100051214(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_bridgeObjectRelease(v2, v3, v4, v5, v6, v7, v8, v9);
  return a1;
}

uint64_t sub_1000977F0(uint64_t a1, uint64_t a2)
{
  initializeWithTake for SLAMScript.SEFWDetails(a2, a1);
  return a2;
}

void sub_10009782C(void *a1)
{
  uint64_t v1;

  sub_10008A93C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_TtC14softposreaderd12RemoteReader **)(v1 + 32), *(_QWORD *)(v1 + 40), *(unsigned __int8 *)(v1 + 48), *(void ***)(v1 + 56), *(_QWORD *)(v1 + 64));
}

unint64_t sub_100097850()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001B36C0;
  if (!qword_1001B36C0)
  {
    v1 = objc_opt_self(NFSecureElementManagerSession);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001B36C0);
  }
  return result;
}

uint64_t sub_10009788C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000978B0(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

char *sub_1000978B8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if ((v4 & 0x8000000000000000) != 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10009799C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
  {
    sub_100051214(result, a2, a3, a4, a5);
    return swift_bridgeObjectRelease(a11);
  }
  return result;
}

uint64_t sub_1000979D0(uint64_t a1)
{
  sub_1000306C8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_1000979FC(uint64_t a1)
{
  sub_10000A9B0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_100097A28(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100097A6C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100097A90()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

void sub_100097ABC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000851C4(a1, a2, *(_QWORD *)(v2 + 16), *(void (**)(uint64_t *, void *))(v2 + 24), *(_QWORD *)(v2 + 32));
}

const char *sub_100097AC8()
{
  return "countOfBytesReceived";
}

id sub_100097AD4@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "countOfBytesReceived");
  *a2 = result;
  return result;
}

uint64_t sub_100097B04()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100097B30(id *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100085B74(a1, a2, *(uint64_t (**)(uint64_t))(v2 + 16));
}

double sub_100097B38(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t *sub_100097B58(uint64_t *a1)
{
  _TtC14softposreaderd12RemoteReader *v2;
  uint64_t v3;
  unint64_t v4;
  _TtC14softposreaderd12RemoteReader *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  SEL v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  _TtC14softposreaderd12RemoteReader *v33;
  uint64_t v34;

  v2 = (_TtC14softposreaderd12RemoteReader *)a1[3];
  v3 = a1[4];
  v4 = a1[5];
  v5 = (_TtC14softposreaderd12RemoteReader *)a1[7];
  v6 = a1[8];
  v7 = a1[9];
  v8 = a1[10];
  v9 = a1[11];
  v10 = a1[12];
  v33 = (_TtC14softposreaderd12RemoteReader *)a1[15];
  v34 = a1[14];
  v31 = (void *)a1[17];
  v32 = (void *)a1[16];
  v29 = (void *)a1[19];
  v30 = (void *)a1[18];
  v28 = (void *)a1[20];
  v26 = a1[13];
  v27 = (void *)a1[21];
  sub_10000A9B0(*a1, a1[1]);
  swift_bridgeObjectRelease(v2, v11, v12, v13, v14, v15, v16, v17);
  sub_10000A9B0(v3, v4);
  swift_bridgeObjectRelease(v5, v18, v19, v20, v21, v22, v23, v24);
  sub_10000A9B0(v6, v7);
  sub_100094080(v8, v9, v10, v26);
  sub_1000940BC(v34, v33, v32, v31, v30, v29, v28, v27);
  return a1;
}

unint64_t sub_100097C48()
{
  unint64_t result;

  result = qword_1001B0E70;
  if (!qword_1001B0E70)
  {
    result = swift_getWitnessTable(&unk_1001600E8, &type metadata for KCSCertWithChainResponse);
    atomic_store(result, (unint64_t *)&qword_1001B0E70);
  }
  return result;
}

uint64_t sub_100097C8C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100097C9C()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100097CC0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));

  return swift_deallocObject(v0, 56, 7);
}

Swift::Int sub_100097D04(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_100089B14(a1, a2, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t destroy for KCSCertWithChainResponse(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  return swift_bridgeObjectRelease(a1[3]);
}

_QWORD *initializeWithCopy for KCSCertWithChainResponse(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  v5 = a2[3];
  a1[2] = v4;
  a1[3] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for KCSCertWithChainResponse(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  v8 = a1[3];
  v9 = a2[3];
  a1[3] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  return a1;
}

_QWORD *assignWithTake for KCSCertWithChainResponse(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  v5 = a1[3];
  a1[3] = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  return a1;
}

ValueMetadata *type metadata accessor for KCSCertWithChainResponse()
{
  return &type metadata for KCSCertWithChainResponse;
}

unint64_t sub_100097E70(unint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  void *v47;
  const void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v31 = *(_QWORD *)a2;
    *(_QWORD *)v4 = *(_QWORD *)a2;
    v4 = v31 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
    return v4;
  }
  if (*(_QWORD *)(a2 + 80))
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_BYTE *)(a2 + 32);
    sub_100051188(*(_QWORD *)a2, v8, v9, v10, v11);
    *(_QWORD *)v4 = v7;
    *(_QWORD *)(v4 + 8) = v8;
    *(_QWORD *)(v4 + 16) = v9;
    *(_QWORD *)(v4 + 24) = v10;
    *(_BYTE *)(v4 + 32) = v11;
    *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(v4 + 56) = *(_QWORD *)(a2 + 56);
    *(_WORD *)(v4 + 64) = *(_WORD *)(a2 + 64);
    v12 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(v4 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(v4 + 80) = v12;
    swift_bridgeObjectRetain();
    if (*(_QWORD *)(a2 + 168))
      goto LABEL_4;
  }
  else
  {
    v32 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v32;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    v33 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v33;
    if (*(_QWORD *)(a2 + 168))
    {
LABEL_4:
      v13 = *(_QWORD *)(a2 + 88);
      v14 = *(_QWORD *)(a2 + 96);
      v15 = *(_QWORD *)(a2 + 104);
      v16 = *(_QWORD *)(a2 + 112);
      v17 = *(_BYTE *)(a2 + 120);
      sub_100051188(v13, v14, v15, v16, v17);
      *(_QWORD *)(v4 + 88) = v13;
      *(_QWORD *)(v4 + 96) = v14;
      *(_QWORD *)(v4 + 104) = v15;
      *(_QWORD *)(v4 + 112) = v16;
      *(_BYTE *)(v4 + 120) = v17;
      *(_OWORD *)(v4 + 128) = *(_OWORD *)(a2 + 128);
      *(_QWORD *)(v4 + 144) = *(_QWORD *)(a2 + 144);
      *(_WORD *)(v4 + 152) = *(_WORD *)(a2 + 152);
      v18 = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(v4 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(v4 + 168) = v18;
      swift_bridgeObjectRetain();
      if (*(_QWORD *)(a2 + 256))
        goto LABEL_5;
LABEL_10:
      v36 = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(v4 + 208) = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(v4 + 224) = v36;
      *(_OWORD *)(v4 + 240) = *(_OWORD *)(a2 + 240);
      *(_QWORD *)(v4 + 256) = *(_QWORD *)(a2 + 256);
      v37 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(v4 + 176) = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(v4 + 192) = v37;
      if (*(_QWORD *)(a2 + 344))
        goto LABEL_6;
LABEL_11:
      v38 = *(_OWORD *)(a2 + 312);
      *(_OWORD *)(v4 + 296) = *(_OWORD *)(a2 + 296);
      *(_OWORD *)(v4 + 312) = v38;
      *(_OWORD *)(v4 + 328) = *(_OWORD *)(a2 + 328);
      *(_QWORD *)(v4 + 344) = *(_QWORD *)(a2 + 344);
      v39 = *(_OWORD *)(a2 + 280);
      *(_OWORD *)(v4 + 264) = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(v4 + 280) = v39;
      goto LABEL_12;
    }
  }
  v34 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(v4 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v4 + 136) = v34;
  *(_OWORD *)(v4 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(v4 + 168) = *(_QWORD *)(a2 + 168);
  v35 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(v4 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(v4 + 104) = v35;
  if (!*(_QWORD *)(a2 + 256))
    goto LABEL_10;
LABEL_5:
  v19 = *(_QWORD *)(a2 + 176);
  v20 = *(_QWORD *)(a2 + 184);
  v21 = *(_QWORD *)(a2 + 192);
  v22 = *(_QWORD *)(a2 + 200);
  v23 = *(_BYTE *)(a2 + 208);
  sub_100051188(v19, v20, v21, v22, v23);
  *(_QWORD *)(v4 + 176) = v19;
  *(_QWORD *)(v4 + 184) = v20;
  *(_QWORD *)(v4 + 192) = v21;
  *(_QWORD *)(v4 + 200) = v22;
  *(_BYTE *)(v4 + 208) = v23;
  *(_OWORD *)(v4 + 216) = *(_OWORD *)(a2 + 216);
  *(_QWORD *)(v4 + 232) = *(_QWORD *)(a2 + 232);
  *(_WORD *)(v4 + 240) = *(_WORD *)(a2 + 240);
  v24 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(v4 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(v4 + 256) = v24;
  swift_bridgeObjectRetain();
  if (!*(_QWORD *)(a2 + 344))
    goto LABEL_11;
LABEL_6:
  v25 = *(_QWORD *)(a2 + 264);
  v26 = *(_QWORD *)(a2 + 272);
  v27 = *(_QWORD *)(a2 + 280);
  v28 = *(_QWORD *)(a2 + 288);
  v29 = *(_BYTE *)(a2 + 296);
  sub_100051188(v25, v26, v27, v28, v29);
  *(_QWORD *)(v4 + 264) = v25;
  *(_QWORD *)(v4 + 272) = v26;
  *(_QWORD *)(v4 + 280) = v27;
  *(_QWORD *)(v4 + 288) = v28;
  *(_BYTE *)(v4 + 296) = v29;
  *(_OWORD *)(v4 + 304) = *(_OWORD *)(a2 + 304);
  *(_QWORD *)(v4 + 320) = *(_QWORD *)(a2 + 320);
  *(_WORD *)(v4 + 328) = *(_WORD *)(a2 + 328);
  v30 = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(v4 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(v4 + 344) = v30;
  swift_bridgeObjectRetain();
LABEL_12:
  v40 = a3[8];
  v41 = v4 + v40;
  v42 = a2 + v40;
  v43 = type metadata accessor for UUID(0);
  v44 = *(_QWORD *)(v43 - 8);
  v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16);
  v45(v41, v42, v43);
  v45(v4 + a3[9], a2 + a3[9], v43);
  v46 = a3[10];
  v47 = (void *)(v4 + v46);
  v48 = (const void *)(a2 + v46);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(a2 + v46, 1, v43))
  {
    v49 = sub_100003A2C((uint64_t *)&unk_1001B36F0);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    v45((uint64_t)v47, (uint64_t)v48, v43);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v47, 0, 1, v43);
  }
  v50 = a3[11];
  v51 = v4 + v50;
  v52 = a2 + v50;
  if (*(_QWORD *)v52 == 1)
  {
    v53 = *(_OWORD *)(v52 + 16);
    *(_OWORD *)v51 = *(_OWORD *)v52;
    *(_OWORD *)(v51 + 16) = v53;
  }
  else
  {
    v55 = *(_QWORD *)(v52 + 8);
    v54 = *(_QWORD *)(v52 + 16);
    *(_QWORD *)v51 = *(_QWORD *)v52;
    *(_QWORD *)(v51 + 8) = v55;
    v56 = *(_QWORD *)(v52 + 24);
    *(_QWORD *)(v51 + 16) = v54;
    *(_QWORD *)(v51 + 24) = v56;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v57 = a3[12];
  v58 = v4 + v57;
  v59 = a2 + v57;
  if (*(_QWORD *)v59 == 1)
  {
    v60 = *(_OWORD *)(v59 + 16);
    *(_OWORD *)v58 = *(_OWORD *)v59;
    *(_OWORD *)(v58 + 16) = v60;
  }
  else
  {
    v62 = *(_QWORD *)(v59 + 8);
    v61 = *(_QWORD *)(v59 + 16);
    *(_QWORD *)v58 = *(_QWORD *)v59;
    *(_QWORD *)(v58 + 8) = v62;
    v63 = *(_QWORD *)(v59 + 24);
    *(_QWORD *)(v58 + 16) = v61;
    *(_QWORD *)(v58 + 24) = v63;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

void sub_100098244(uint64_t a1, int *a2)
{
  _TtC14softposreaderd12RemoteReader *v4;
  SEL v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  _TtC14softposreaderd12RemoteReader *v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  _TtC14softposreaderd12RemoteReader *v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  _TtC14softposreaderd12RemoteReader *v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  const char *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  _TtC14softposreaderd12RemoteReader **v48;
  SEL v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  SEL v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  _TtC14softposreaderd12RemoteReader **v63;
  SEL v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  SEL v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;

  v4 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 80);
  if (v4)
  {
    sub_100051214(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
    swift_bridgeObjectRelease(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 168);
  if (v12)
  {
    sub_100051214(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_BYTE *)(a1 + 120));
    swift_bridgeObjectRelease(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  v20 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 256);
  if (v20)
  {
    sub_100051214(*(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 200), *(_BYTE *)(a1 + 208));
    swift_bridgeObjectRelease(v20, v21, v22, v23, v24, v25, v26, v27);
  }
  v28 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 344);
  if (v28)
  {
    sub_100051214(*(_QWORD *)(a1 + 264), *(_QWORD *)(a1 + 272), *(_QWORD *)(a1 + 280), *(_QWORD *)(a1 + 288), *(_BYTE *)(a1 + 296));
    swift_bridgeObjectRelease(v28, v29, v30, v31, v32, v33, v34, v35);
  }
  v36 = a1 + a2[8];
  v37 = type metadata accessor for UUID(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
  v39(v36, v37);
  v39(a1 + a2[9], v37);
  v40 = a1 + a2[10];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v40, 1, v37))
    v39(v40, v37);
  v48 = (_TtC14softposreaderd12RemoteReader **)(a1 + a2[11]);
  if (*v48 != (_TtC14softposreaderd12RemoteReader *)1)
  {
    swift_bridgeObjectRelease(*v48, v41, v42, v43, v44, v45, v46, v47);
    swift_bridgeObjectRelease(v48[1], v49, v50, v51, v52, v53, v54, v55);
    swift_bridgeObjectRelease(v48[3], v56, v57, v58, v59, v60, v61, v62);
  }
  v63 = (_TtC14softposreaderd12RemoteReader **)(a1 + a2[12]);
  if (*v63 != (_TtC14softposreaderd12RemoteReader *)1)
  {
    swift_bridgeObjectRelease(*v63, v41, v42, v43, v44, v45, v46, v47);
    swift_bridgeObjectRelease(v63[1], v64, v65, v66, v67, v68, v69, v70);
    swift_bridgeObjectRelease(v63[3], v71, v72, v73, v74, v75, v76, v77);
  }
}

uint64_t sub_1000983B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  void *v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(void *, const void *, uint64_t);
  uint64_t v44;
  void *v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  if (*(_QWORD *)(a2 + 80))
  {
    v6 = *(_QWORD *)a2;
    v7 = *(_QWORD *)(a2 + 8);
    v8 = *(_QWORD *)(a2 + 16);
    v9 = *(_QWORD *)(a2 + 24);
    v10 = *(_BYTE *)(a2 + 32);
    sub_100051188(*(_QWORD *)a2, v7, v8, v9, v10);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v9;
    *(_BYTE *)(a1 + 32) = v10;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
    v11 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = v11;
    swift_bridgeObjectRetain();
    if (*(_QWORD *)(a2 + 168))
      goto LABEL_3;
  }
  else
  {
    v30 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v30;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    v31 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v31;
    if (*(_QWORD *)(a2 + 168))
    {
LABEL_3:
      v12 = *(_QWORD *)(a2 + 88);
      v13 = *(_QWORD *)(a2 + 96);
      v14 = *(_QWORD *)(a2 + 104);
      v15 = *(_QWORD *)(a2 + 112);
      v16 = *(_BYTE *)(a2 + 120);
      sub_100051188(v12, v13, v14, v15, v16);
      *(_QWORD *)(a1 + 88) = v12;
      *(_QWORD *)(a1 + 96) = v13;
      *(_QWORD *)(a1 + 104) = v14;
      *(_QWORD *)(a1 + 112) = v15;
      *(_BYTE *)(a1 + 120) = v16;
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
      v17 = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = v17;
      swift_bridgeObjectRetain();
      if (*(_QWORD *)(a2 + 256))
        goto LABEL_4;
LABEL_8:
      v34 = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a1 + 224) = v34;
      *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
      v35 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 192) = v35;
      if (*(_QWORD *)(a2 + 344))
        goto LABEL_5;
      goto LABEL_9;
    }
  }
  v32 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v32;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v33 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = v33;
  if (!*(_QWORD *)(a2 + 256))
    goto LABEL_8;
LABEL_4:
  v18 = *(_QWORD *)(a2 + 176);
  v19 = *(_QWORD *)(a2 + 184);
  v20 = *(_QWORD *)(a2 + 192);
  v21 = *(_QWORD *)(a2 + 200);
  v22 = *(_BYTE *)(a2 + 208);
  sub_100051188(v18, v19, v20, v21, v22);
  *(_QWORD *)(a1 + 176) = v18;
  *(_QWORD *)(a1 + 184) = v19;
  *(_QWORD *)(a1 + 192) = v20;
  *(_QWORD *)(a1 + 200) = v21;
  *(_BYTE *)(a1 + 208) = v22;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
  v23 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v23;
  swift_bridgeObjectRetain();
  if (*(_QWORD *)(a2 + 344))
  {
LABEL_5:
    v24 = *(_QWORD *)(a2 + 264);
    v25 = *(_QWORD *)(a2 + 272);
    v26 = *(_QWORD *)(a2 + 280);
    v27 = *(_QWORD *)(a2 + 288);
    v28 = *(_BYTE *)(a2 + 296);
    sub_100051188(v24, v25, v26, v27, v28);
    *(_QWORD *)(a1 + 264) = v24;
    *(_QWORD *)(a1 + 272) = v25;
    *(_QWORD *)(a1 + 280) = v26;
    *(_QWORD *)(a1 + 288) = v27;
    *(_BYTE *)(a1 + 296) = v28;
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
    *(_WORD *)(a1 + 328) = *(_WORD *)(a2 + 328);
    v29 = *(_QWORD *)(a2 + 344);
    *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
    *(_QWORD *)(a1 + 344) = v29;
    swift_bridgeObjectRetain();
    goto LABEL_10;
  }
LABEL_9:
  v36 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v36;
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  v37 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v37;
LABEL_10:
  v38 = a3[8];
  v39 = (void *)(a1 + v38);
  v40 = (const void *)(a2 + v38);
  v41 = type metadata accessor for UUID(0);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = *(void (**)(void *, const void *, uint64_t))(v42 + 16);
  v43(v39, v40, v41);
  v43((void *)(a1 + a3[9]), (const void *)(a2 + a3[9]), v41);
  v44 = a3[10];
  v45 = (void *)(a1 + v44);
  v46 = (const void *)(a2 + v44);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(a2 + v44, 1, v41))
  {
    v47 = sub_100003A2C((uint64_t *)&unk_1001B36F0);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    v43(v45, v46, v41);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v45, 0, 1, v41);
  }
  v48 = a3[11];
  v49 = a1 + v48;
  v50 = a2 + v48;
  if (*(_QWORD *)v50 == 1)
  {
    v51 = *(_OWORD *)(v50 + 16);
    *(_OWORD *)v49 = *(_OWORD *)v50;
    *(_OWORD *)(v49 + 16) = v51;
  }
  else
  {
    v53 = *(_QWORD *)(v50 + 8);
    v52 = *(_QWORD *)(v50 + 16);
    *(_QWORD *)v49 = *(_QWORD *)v50;
    *(_QWORD *)(v49 + 8) = v53;
    v54 = *(_QWORD *)(v50 + 24);
    *(_QWORD *)(v49 + 16) = v52;
    *(_QWORD *)(v49 + 24) = v54;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v55 = a3[12];
  v56 = a1 + v55;
  v57 = a2 + v55;
  if (*(_QWORD *)v57 == 1)
  {
    v58 = *(_OWORD *)(v57 + 16);
    *(_OWORD *)v56 = *(_OWORD *)v57;
    *(_OWORD *)(v56 + 16) = v58;
  }
  else
  {
    v60 = *(_QWORD *)(v57 + 8);
    v59 = *(_QWORD *)(v57 + 16);
    *(_QWORD *)v56 = *(_QWORD *)v57;
    *(_QWORD *)(v56 + 8) = v60;
    v61 = *(_QWORD *)(v57 + 24);
    *(_QWORD *)(v56 + 16) = v59;
    *(_QWORD *)(v56 + 24) = v61;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100098760(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _TtC14softposreaderd12RemoteReader *v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _OWORD *v40;
  _OWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;
  _TtC14softposreaderd12RemoteReader *v54;
  SEL v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _OWORD *v76;
  _OWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  uint64_t v89;
  _TtC14softposreaderd12RemoteReader *v90;
  SEL v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int8 v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  _OWORD *v112;
  _OWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned __int8 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned __int8 v124;
  uint64_t v125;
  _TtC14softposreaderd12RemoteReader *v126;
  SEL v127;
  id v128;
  id v129;
  id v130;
  id v131;
  id v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int8 v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(uint64_t, uint64_t, uint64_t);
  uint64_t v154;
  void *v155;
  const void *v156;
  uint64_t (*v157)(uint64_t, uint64_t, uint64_t);
  int v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _TtC14softposreaderd12RemoteReader *v164;
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  SEL v168;
  id v169;
  id v170;
  id v171;
  id v172;
  id v173;
  id v174;
  _TtC14softposreaderd12RemoteReader *v175;
  SEL v176;
  id v177;
  id v178;
  id v179;
  id v180;
  id v181;
  id v182;
  _TtC14softposreaderd12RemoteReader *v183;
  SEL v184;
  id v185;
  id v186;
  id v187;
  id v188;
  id v189;
  id v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t *v193;
  _TtC14softposreaderd12RemoteReader *v194;
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  SEL v198;
  id v199;
  id v200;
  id v201;
  id v202;
  id v203;
  id v204;
  _TtC14softposreaderd12RemoteReader *v205;
  SEL v206;
  id v207;
  id v208;
  id v209;
  id v210;
  id v211;
  id v212;
  _TtC14softposreaderd12RemoteReader *v213;
  SEL v214;
  id v215;
  id v216;
  id v217;
  id v218;
  id v219;
  id v220;

  v6 = *(_QWORD *)(a2 + 80);
  if (*(_QWORD *)(a1 + 80))
  {
    if (v6)
    {
      v7 = *(_QWORD *)a2;
      v8 = *(_QWORD *)(a2 + 8);
      v9 = *(_QWORD *)(a2 + 16);
      v10 = *(_QWORD *)(a2 + 24);
      v11 = *(_BYTE *)(a2 + 32);
      sub_100051188(*(_QWORD *)a2, v8, v9, v10, v11);
      v12 = *(_QWORD *)a1;
      v13 = *(_QWORD *)(a1 + 8);
      v14 = *(_QWORD *)(a1 + 16);
      v15 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v9;
      *(_QWORD *)(a1 + 24) = v10;
      v16 = *(_BYTE *)(a1 + 32);
      *(_BYTE *)(a1 + 32) = v11;
      sub_100051214(v12, v13, v14, v15, v16);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v17 = *(_QWORD *)(a2 + 56);
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = v17;
      *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      v18 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 80);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease(v18, v19, v20, v21, v22, v23, v24, v25);
    }
    else
    {
      sub_100098FB8(a1);
      v32 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v32;
      v34 = *(_OWORD *)(a2 + 48);
      v33 = *(_OWORD *)(a2 + 64);
      v35 = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 48) = v34;
      *(_OWORD *)(a1 + 64) = v33;
      *(_OWORD *)(a1 + 32) = v35;
    }
  }
  else if (v6)
  {
    v26 = *(_QWORD *)a2;
    v27 = *(_QWORD *)(a2 + 8);
    v28 = *(_QWORD *)(a2 + 16);
    v29 = *(_QWORD *)(a2 + 24);
    v30 = *(_BYTE *)(a2 + 32);
    sub_100051188(*(_QWORD *)a2, v27, v28, v29, v30);
    *(_QWORD *)a1 = v26;
    *(_QWORD *)(a1 + 8) = v27;
    *(_QWORD *)(a1 + 16) = v28;
    *(_QWORD *)(a1 + 24) = v29;
    *(_BYTE *)(a1 + 32) = v30;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    v31 = *(_QWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v31;
    *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    swift_bridgeObjectRetain();
  }
  else
  {
    v36 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v36;
    v37 = *(_OWORD *)(a2 + 32);
    v38 = *(_OWORD *)(a2 + 48);
    v39 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 48) = v38;
    *(_OWORD *)(a1 + 64) = v39;
    *(_OWORD *)(a1 + 32) = v37;
  }
  v40 = (_OWORD *)(a1 + 88);
  v41 = (_OWORD *)(a2 + 88);
  v42 = *(_QWORD *)(a2 + 168);
  if (*(_QWORD *)(a1 + 168))
  {
    if (v42)
    {
      v43 = *(_QWORD *)(a2 + 88);
      v44 = *(_QWORD *)(a2 + 96);
      v45 = *(_QWORD *)(a2 + 104);
      v46 = *(_QWORD *)(a2 + 112);
      v47 = *(_BYTE *)(a2 + 120);
      sub_100051188(v43, v44, v45, v46, v47);
      v48 = *(_QWORD *)(a1 + 88);
      v49 = *(_QWORD *)(a1 + 96);
      v50 = *(_QWORD *)(a1 + 104);
      v51 = *(_QWORD *)(a1 + 112);
      *(_QWORD *)(a1 + 88) = v43;
      *(_QWORD *)(a1 + 96) = v44;
      *(_QWORD *)(a1 + 104) = v45;
      *(_QWORD *)(a1 + 112) = v46;
      v52 = *(_BYTE *)(a1 + 120);
      *(_BYTE *)(a1 + 120) = v47;
      sub_100051214(v48, v49, v50, v51, v52);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      v53 = *(_QWORD *)(a2 + 144);
      *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
      *(_QWORD *)(a1 + 144) = v53;
      *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      v54 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 168);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease(v54, v55, v56, v57, v58, v59, v60, v61);
    }
    else
    {
      sub_100098FB8(a1 + 88);
      v68 = *(_OWORD *)(a2 + 104);
      *v40 = *v41;
      *(_OWORD *)(a1 + 104) = v68;
      v70 = *(_OWORD *)(a2 + 136);
      v69 = *(_OWORD *)(a2 + 152);
      v71 = *(_OWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 136) = v70;
      *(_OWORD *)(a1 + 152) = v69;
      *(_OWORD *)(a1 + 120) = v71;
    }
  }
  else if (v42)
  {
    v62 = *(_QWORD *)(a2 + 88);
    v63 = *(_QWORD *)(a2 + 96);
    v64 = *(_QWORD *)(a2 + 104);
    v65 = *(_QWORD *)(a2 + 112);
    v66 = *(_BYTE *)(a2 + 120);
    sub_100051188(v62, v63, v64, v65, v66);
    *(_QWORD *)(a1 + 88) = v62;
    *(_QWORD *)(a1 + 96) = v63;
    *(_QWORD *)(a1 + 104) = v64;
    *(_QWORD *)(a1 + 112) = v65;
    *(_BYTE *)(a1 + 120) = v66;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    v67 = *(_QWORD *)(a2 + 144);
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    *(_QWORD *)(a1 + 144) = v67;
    *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    swift_bridgeObjectRetain();
  }
  else
  {
    v72 = *(_OWORD *)(a2 + 104);
    *v40 = *v41;
    *(_OWORD *)(a1 + 104) = v72;
    v73 = *(_OWORD *)(a2 + 120);
    v74 = *(_OWORD *)(a2 + 136);
    v75 = *(_OWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 136) = v74;
    *(_OWORD *)(a1 + 152) = v75;
    *(_OWORD *)(a1 + 120) = v73;
  }
  v76 = (_OWORD *)(a1 + 176);
  v77 = (_OWORD *)(a2 + 176);
  v78 = *(_QWORD *)(a2 + 256);
  if (*(_QWORD *)(a1 + 256))
  {
    if (v78)
    {
      v79 = *(_QWORD *)(a2 + 176);
      v80 = *(_QWORD *)(a2 + 184);
      v81 = *(_QWORD *)(a2 + 192);
      v82 = *(_QWORD *)(a2 + 200);
      v83 = *(_BYTE *)(a2 + 208);
      sub_100051188(v79, v80, v81, v82, v83);
      v84 = *(_QWORD *)(a1 + 176);
      v85 = *(_QWORD *)(a1 + 184);
      v86 = *(_QWORD *)(a1 + 192);
      v87 = *(_QWORD *)(a1 + 200);
      *(_QWORD *)(a1 + 176) = v79;
      *(_QWORD *)(a1 + 184) = v80;
      *(_QWORD *)(a1 + 192) = v81;
      *(_QWORD *)(a1 + 200) = v82;
      v88 = *(_BYTE *)(a1 + 208);
      *(_BYTE *)(a1 + 208) = v83;
      sub_100051214(v84, v85, v86, v87, v88);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      v89 = *(_QWORD *)(a2 + 232);
      *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
      *(_QWORD *)(a1 + 232) = v89;
      *(_BYTE *)(a1 + 241) = *(_BYTE *)(a2 + 241);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      v90 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 256);
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease(v90, v91, v92, v93, v94, v95, v96, v97);
    }
    else
    {
      sub_100098FB8(a1 + 176);
      v104 = *(_OWORD *)(a2 + 192);
      *v76 = *v77;
      *(_OWORD *)(a1 + 192) = v104;
      v106 = *(_OWORD *)(a2 + 224);
      v105 = *(_OWORD *)(a2 + 240);
      v107 = *(_OWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
      *(_OWORD *)(a1 + 224) = v106;
      *(_OWORD *)(a1 + 240) = v105;
      *(_OWORD *)(a1 + 208) = v107;
    }
  }
  else if (v78)
  {
    v98 = *(_QWORD *)(a2 + 176);
    v99 = *(_QWORD *)(a2 + 184);
    v100 = *(_QWORD *)(a2 + 192);
    v101 = *(_QWORD *)(a2 + 200);
    v102 = *(_BYTE *)(a2 + 208);
    sub_100051188(v98, v99, v100, v101, v102);
    *(_QWORD *)(a1 + 176) = v98;
    *(_QWORD *)(a1 + 184) = v99;
    *(_QWORD *)(a1 + 192) = v100;
    *(_QWORD *)(a1 + 200) = v101;
    *(_BYTE *)(a1 + 208) = v102;
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    v103 = *(_QWORD *)(a2 + 232);
    *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
    *(_QWORD *)(a1 + 232) = v103;
    *(_BYTE *)(a1 + 241) = *(_BYTE *)(a2 + 241);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    swift_bridgeObjectRetain();
  }
  else
  {
    v108 = *(_OWORD *)(a2 + 192);
    *v76 = *v77;
    *(_OWORD *)(a1 + 192) = v108;
    v109 = *(_OWORD *)(a2 + 208);
    v110 = *(_OWORD *)(a2 + 224);
    v111 = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 224) = v110;
    *(_OWORD *)(a1 + 240) = v111;
    *(_OWORD *)(a1 + 208) = v109;
  }
  v112 = (_OWORD *)(a1 + 264);
  v113 = (_OWORD *)(a2 + 264);
  v114 = *(_QWORD *)(a2 + 344);
  if (*(_QWORD *)(a1 + 344))
  {
    if (v114)
    {
      v115 = *(_QWORD *)(a2 + 264);
      v116 = *(_QWORD *)(a2 + 272);
      v117 = *(_QWORD *)(a2 + 280);
      v118 = *(_QWORD *)(a2 + 288);
      v119 = *(_BYTE *)(a2 + 296);
      sub_100051188(v115, v116, v117, v118, v119);
      v120 = *(_QWORD *)(a1 + 264);
      v121 = *(_QWORD *)(a1 + 272);
      v122 = *(_QWORD *)(a1 + 280);
      v123 = *(_QWORD *)(a1 + 288);
      *(_QWORD *)(a1 + 264) = v115;
      *(_QWORD *)(a1 + 272) = v116;
      *(_QWORD *)(a1 + 280) = v117;
      *(_QWORD *)(a1 + 288) = v118;
      v124 = *(_BYTE *)(a1 + 296);
      *(_BYTE *)(a1 + 296) = v119;
      sub_100051214(v120, v121, v122, v123, v124);
      *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
      *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
      v125 = *(_QWORD *)(a2 + 320);
      *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
      *(_QWORD *)(a1 + 320) = v125;
      *(_BYTE *)(a1 + 329) = *(_BYTE *)(a2 + 329);
      *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
      v126 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 344);
      *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease(v126, v127, v128, v129, v130, v131, v132, v133);
    }
    else
    {
      sub_100098FB8(a1 + 264);
      v140 = *(_OWORD *)(a2 + 280);
      *v112 = *v113;
      *(_OWORD *)(a1 + 280) = v140;
      v142 = *(_OWORD *)(a2 + 312);
      v141 = *(_OWORD *)(a2 + 328);
      v143 = *(_OWORD *)(a2 + 296);
      *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
      *(_OWORD *)(a1 + 312) = v142;
      *(_OWORD *)(a1 + 328) = v141;
      *(_OWORD *)(a1 + 296) = v143;
    }
  }
  else if (v114)
  {
    v134 = *(_QWORD *)(a2 + 264);
    v135 = *(_QWORD *)(a2 + 272);
    v136 = *(_QWORD *)(a2 + 280);
    v137 = *(_QWORD *)(a2 + 288);
    v138 = *(_BYTE *)(a2 + 296);
    sub_100051188(v134, v135, v136, v137, v138);
    *(_QWORD *)(a1 + 264) = v134;
    *(_QWORD *)(a1 + 272) = v135;
    *(_QWORD *)(a1 + 280) = v136;
    *(_QWORD *)(a1 + 288) = v137;
    *(_BYTE *)(a1 + 296) = v138;
    *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
    v139 = *(_QWORD *)(a2 + 320);
    *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
    *(_QWORD *)(a1 + 320) = v139;
    *(_BYTE *)(a1 + 329) = *(_BYTE *)(a2 + 329);
    *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
    *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
    swift_bridgeObjectRetain();
  }
  else
  {
    v144 = *(_OWORD *)(a2 + 280);
    *v112 = *v113;
    *(_OWORD *)(a1 + 280) = v144;
    v145 = *(_OWORD *)(a2 + 296);
    v146 = *(_OWORD *)(a2 + 312);
    v147 = *(_OWORD *)(a2 + 328);
    *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 312) = v146;
    *(_OWORD *)(a1 + 328) = v147;
    *(_OWORD *)(a1 + 296) = v145;
  }
  v148 = a3[8];
  v149 = a1 + v148;
  v150 = a2 + v148;
  v151 = type metadata accessor for UUID(0);
  v152 = *(_QWORD *)(v151 - 8);
  v153 = *(void (**)(uint64_t, uint64_t, uint64_t))(v152 + 24);
  v153(v149, v150, v151);
  v153(a1 + a3[9], a2 + a3[9], v151);
  v154 = a3[10];
  v155 = (void *)(a1 + v154);
  v156 = (const void *)(a2 + v154);
  v157 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v152 + 48);
  v158 = v157(a1 + v154, 1, v151);
  v159 = v157((uint64_t)v156, 1, v151);
  if (v158)
  {
    if (!v159)
    {
      (*(void (**)(void *, const void *, uint64_t))(v152 + 16))(v155, v156, v151);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v152 + 56))(v155, 0, 1, v151);
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  if (v159)
  {
    (*(void (**)(void *, uint64_t))(v152 + 8))(v155, v151);
LABEL_34:
    v160 = sub_100003A2C((uint64_t *)&unk_1001B36F0);
    memcpy(v155, v156, *(_QWORD *)(*(_QWORD *)(v160 - 8) + 64));
    goto LABEL_35;
  }
  v153((uint64_t)v155, (uint64_t)v156, v151);
LABEL_35:
  v161 = a3[11];
  v162 = a1 + v161;
  v163 = a2 + v161;
  v164 = *(_TtC14softposreaderd12RemoteReader **)(a1 + v161);
  v165 = *(_QWORD *)(a2 + v161);
  if (v164 == (_TtC14softposreaderd12RemoteReader *)1)
  {
    if (v165 == 1)
    {
      v166 = *(_OWORD *)(v163 + 16);
      *(_OWORD *)v162 = *(_OWORD *)v163;
      *(_OWORD *)(v162 + 16) = v166;
    }
    else
    {
      *(_QWORD *)v162 = v165;
      *(_QWORD *)(v162 + 8) = *(_QWORD *)(v163 + 8);
      *(_QWORD *)(v162 + 16) = *(_QWORD *)(v163 + 16);
      *(_QWORD *)(v162 + 24) = *(_QWORD *)(v163 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v165 == 1)
  {
    sub_100098FEC((_QWORD *)(a1 + v161));
    v167 = *(_OWORD *)(v163 + 16);
    *(_OWORD *)v162 = *(_OWORD *)v163;
    *(_OWORD *)(v162 + 16) = v167;
  }
  else
  {
    *(_QWORD *)v162 = v165;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease(v164, v168, v169, v170, v171, v172, v173, v174);
    v175 = *(_TtC14softposreaderd12RemoteReader **)(v162 + 8);
    *(_QWORD *)(v162 + 8) = *(_QWORD *)(v163 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease(v175, v176, v177, v178, v179, v180, v181, v182);
    *(_QWORD *)(v162 + 16) = *(_QWORD *)(v163 + 16);
    v183 = *(_TtC14softposreaderd12RemoteReader **)(v162 + 24);
    *(_QWORD *)(v162 + 24) = *(_QWORD *)(v163 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease(v183, v184, v185, v186, v187, v188, v189, v190);
  }
  v191 = a3[12];
  v192 = a1 + v191;
  v193 = (uint64_t *)(a2 + v191);
  v194 = *(_TtC14softposreaderd12RemoteReader **)(a1 + v191);
  v195 = *v193;
  if (v194 == (_TtC14softposreaderd12RemoteReader *)1)
  {
    if (v195 == 1)
    {
      v196 = *((_OWORD *)v193 + 1);
      *(_OWORD *)v192 = *(_OWORD *)v193;
      *(_OWORD *)(v192 + 16) = v196;
    }
    else
    {
      *(_QWORD *)v192 = v195;
      *(_QWORD *)(v192 + 8) = v193[1];
      *(_QWORD *)(v192 + 16) = v193[2];
      *(_QWORD *)(v192 + 24) = v193[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v195 == 1)
  {
    sub_100098FEC((_QWORD *)(a1 + v191));
    v197 = *((_OWORD *)v193 + 1);
    *(_OWORD *)v192 = *(_OWORD *)v193;
    *(_OWORD *)(v192 + 16) = v197;
  }
  else
  {
    *(_QWORD *)v192 = v195;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease(v194, v198, v199, v200, v201, v202, v203, v204);
    v205 = *(_TtC14softposreaderd12RemoteReader **)(v192 + 8);
    *(_QWORD *)(v192 + 8) = v193[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease(v205, v206, v207, v208, v209, v210, v211, v212);
    *(_QWORD *)(v192 + 16) = v193[2];
    v213 = *(_TtC14softposreaderd12RemoteReader **)(v192 + 24);
    *(_QWORD *)(v192 + 24) = v193[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease(v213, v214, v215, v216, v217, v218, v219, v220);
  }
  return a1;
}

uint64_t sub_100098FB8(uint64_t a1)
{
  destroy for SLAMScript(a1);
  return a1;
}

_QWORD *sub_100098FEC(_QWORD *a1)
{
  destroy for KCSOTAResponse.HostConfiguration(a1);
  return a1;
}

uint64_t sub_100099020(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(void *, const void *, uint64_t);
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  __int128 v27;
  _OWORD *v28;
  _OWORD *v29;
  __int128 v30;

  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v8 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v8;
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  v9 = *(_OWORD *)(a2 + 240);
  v10 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v9;
  *(_OWORD *)(a1 + 208) = v10;
  v11 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v11;
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  v12 = *(_OWORD *)(a2 + 280);
  v13 = a3[8];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v12;
  v16 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(void (**)(void *, const void *, uint64_t))(v17 + 32);
  v18(v14, v15, v16);
  v18((void *)(a1 + a3[9]), (const void *)(a2 + a3[9]), v16);
  v19 = a3[10];
  v20 = (void *)(a1 + v19);
  v21 = (const void *)(a2 + v19);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(a2 + v19, 1, v16))
  {
    v22 = sub_100003A2C((uint64_t *)&unk_1001B36F0);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v18(v20, v21, v16);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v20, 0, 1, v16);
  }
  v23 = a3[11];
  v24 = a3[12];
  v25 = (_OWORD *)(a1 + v23);
  v26 = (_OWORD *)(a2 + v23);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  v28 = (_OWORD *)(a1 + v24);
  v29 = (_OWORD *)(a2 + v24);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  return a1;
}

uint64_t sub_1000991D0(uint64_t a1, uint64_t a2, int *a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  unsigned __int8 v12;
  uint64_t v13;
  _TtC14softposreaderd12RemoteReader *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  __int128 v22;
  __int128 v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  _TtC14softposreaderd12RemoteReader *v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  __int128 v39;
  __int128 v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  unsigned __int8 v47;
  uint64_t v48;
  _TtC14softposreaderd12RemoteReader *v49;
  SEL v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  __int128 v57;
  __int128 v58;
  _OWORD *v59;
  _OWORD *v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  unsigned __int8 v67;
  uint64_t v68;
  _TtC14softposreaderd12RemoteReader *v69;
  SEL v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, uint64_t, uint64_t);
  uint64_t v85;
  void *v86;
  const void *v87;
  uint64_t (*v88)(uint64_t, uint64_t, uint64_t);
  int v89;
  int v90;
  const char *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _TtC14softposreaderd12RemoteReader *v102;
  __int128 v103;
  _TtC14softposreaderd12RemoteReader *v104;
  SEL v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  uint64_t v112;
  _TtC14softposreaderd12RemoteReader *v113;
  SEL v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  id v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  _TtC14softposreaderd12RemoteReader *v124;
  __int128 v125;
  _TtC14softposreaderd12RemoteReader *v126;
  SEL v127;
  id v128;
  id v129;
  id v130;
  id v131;
  id v132;
  id v133;
  uint64_t v134;
  _TtC14softposreaderd12RemoteReader *v135;
  SEL v136;
  id v137;
  id v138;
  id v139;
  id v140;
  id v141;
  id v142;

  if (*(_QWORD *)(a1 + 80))
  {
    if (*(_QWORD *)(a2 + 80))
    {
      v6 = *(_BYTE *)(a2 + 32);
      v7 = *(_QWORD *)a1;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(_QWORD *)(a1 + 16);
      v10 = *(_QWORD *)(a1 + 24);
      v11 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v11;
      v12 = *(_BYTE *)(a1 + 32);
      *(_BYTE *)(a1 + 32) = v6;
      sub_100051214(v7, v8, v9, v10, v12);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
      v13 = *(_QWORD *)(a2 + 80);
      v14 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 80);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = v13;
      swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
      goto LABEL_6;
    }
    sub_100098FB8(a1);
  }
  v22 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v22;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v23 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v23;
LABEL_6:
  if (*(_QWORD *)(a1 + 168))
  {
    if (*(_QWORD *)(a2 + 168))
    {
      v24 = *(_BYTE *)(a2 + 120);
      v25 = *(_QWORD *)(a1 + 88);
      v26 = *(_QWORD *)(a1 + 96);
      v27 = *(_QWORD *)(a1 + 104);
      v28 = *(_QWORD *)(a1 + 112);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      v29 = *(_BYTE *)(a1 + 120);
      *(_BYTE *)(a1 + 120) = v24;
      sub_100051214(v25, v26, v27, v28, v29);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
      v30 = *(_QWORD *)(a2 + 168);
      v31 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 168);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = v30;
      swift_bridgeObjectRelease(v31, v32, v33, v34, v35, v36, v37, v38);
      goto LABEL_11;
    }
    sub_100098FB8(a1 + 88);
  }
  v39 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v39;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v40 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = v40;
LABEL_11:
  if (*(_QWORD *)(a1 + 256))
  {
    if (*(_QWORD *)(a2 + 256))
    {
      v41 = *(_BYTE *)(a2 + 208);
      v42 = *(_QWORD *)(a1 + 176);
      v43 = *(_QWORD *)(a1 + 184);
      v44 = *(_QWORD *)(a1 + 192);
      v45 = *(_QWORD *)(a1 + 200);
      v46 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 192) = v46;
      v47 = *(_BYTE *)(a1 + 208);
      *(_BYTE *)(a1 + 208) = v41;
      sub_100051214(v42, v43, v44, v45, v47);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
      v48 = *(_QWORD *)(a2 + 256);
      v49 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 256);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      *(_QWORD *)(a1 + 256) = v48;
      swift_bridgeObjectRelease(v49, v50, v51, v52, v53, v54, v55, v56);
      goto LABEL_16;
    }
    sub_100098FB8(a1 + 176);
  }
  v57 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v57;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  v58 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v58;
LABEL_16:
  v59 = (_OWORD *)(a1 + 264);
  v60 = (_OWORD *)(a2 + 264);
  if (*(_QWORD *)(a1 + 344))
  {
    if (*(_QWORD *)(a2 + 344))
    {
      v61 = *(_BYTE *)(a2 + 296);
      v62 = *(_QWORD *)(a1 + 264);
      v63 = *(_QWORD *)(a1 + 272);
      v64 = *(_QWORD *)(a1 + 280);
      v65 = *(_QWORD *)(a1 + 288);
      v66 = *(_OWORD *)(a2 + 280);
      *v59 = *v60;
      *(_OWORD *)(a1 + 280) = v66;
      v67 = *(_BYTE *)(a1 + 296);
      *(_BYTE *)(a1 + 296) = v61;
      sub_100051214(v62, v63, v64, v65, v67);
      *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
      *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
      *(_WORD *)(a1 + 328) = *(_WORD *)(a2 + 328);
      v68 = *(_QWORD *)(a2 + 344);
      v69 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 344);
      *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
      *(_QWORD *)(a1 + 344) = v68;
      swift_bridgeObjectRelease(v69, v70, v71, v72, v73, v74, v75, v76);
      goto LABEL_21;
    }
    sub_100098FB8(a1 + 264);
  }
  v77 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v77;
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  v78 = *(_OWORD *)(a2 + 280);
  *v59 = *v60;
  *(_OWORD *)(a1 + 280) = v78;
LABEL_21:
  v79 = a3[8];
  v80 = a1 + v79;
  v81 = a2 + v79;
  v82 = type metadata accessor for UUID(0);
  v83 = *(_QWORD *)(v82 - 8);
  v84 = *(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 40);
  v84(v80, v81, v82);
  v84(a1 + a3[9], a2 + a3[9], v82);
  v85 = a3[10];
  v86 = (void *)(a1 + v85);
  v87 = (const void *)(a2 + v85);
  v88 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 48);
  v89 = v88(a1 + v85, 1, v82);
  v90 = v88((uint64_t)v87, 1, v82);
  if (v89)
  {
    if (!v90)
    {
      (*(void (**)(void *, const void *, uint64_t))(v83 + 32))(v86, v87, v82);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v86, 0, 1, v82);
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (v90)
  {
    (*(void (**)(void *, uint64_t))(v83 + 8))(v86, v82);
LABEL_26:
    v98 = sub_100003A2C((uint64_t *)&unk_1001B36F0);
    memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
    goto LABEL_27;
  }
  v84((uint64_t)v86, (uint64_t)v87, v82);
LABEL_27:
  v99 = a3[11];
  v100 = a1 + v99;
  v101 = a2 + v99;
  v102 = *(_TtC14softposreaderd12RemoteReader **)(a1 + v99);
  if (v102 == (_TtC14softposreaderd12RemoteReader *)1)
  {
LABEL_30:
    v103 = *(_OWORD *)(v101 + 16);
    *(_OWORD *)v100 = *(_OWORD *)v101;
    *(_OWORD *)(v100 + 16) = v103;
    goto LABEL_32;
  }
  if (*(_QWORD *)v101 == 1)
  {
    sub_100098FEC((_QWORD *)v100);
    goto LABEL_30;
  }
  *(_QWORD *)v100 = *(_QWORD *)v101;
  swift_bridgeObjectRelease(v102, v91, v92, v93, v94, v95, v96, v97);
  v104 = *(_TtC14softposreaderd12RemoteReader **)(v100 + 8);
  *(_QWORD *)(v100 + 8) = *(_QWORD *)(v101 + 8);
  swift_bridgeObjectRelease(v104, v105, v106, v107, v108, v109, v110, v111);
  v112 = *(_QWORD *)(v101 + 24);
  v113 = *(_TtC14softposreaderd12RemoteReader **)(v100 + 24);
  *(_QWORD *)(v100 + 16) = *(_QWORD *)(v101 + 16);
  *(_QWORD *)(v100 + 24) = v112;
  swift_bridgeObjectRelease(v113, v114, v115, v116, v117, v118, v119, v120);
LABEL_32:
  v121 = a3[12];
  v122 = (_QWORD *)(a1 + v121);
  v123 = (_QWORD *)(a2 + v121);
  v124 = *(_TtC14softposreaderd12RemoteReader **)(a1 + v121);
  if (v124 != (_TtC14softposreaderd12RemoteReader *)1)
  {
    if (*v123 != 1)
    {
      *v122 = *v123;
      swift_bridgeObjectRelease(v124, v91, v92, v93, v94, v95, v96, v97);
      v126 = (_TtC14softposreaderd12RemoteReader *)v122[1];
      v122[1] = v123[1];
      swift_bridgeObjectRelease(v126, v127, v128, v129, v130, v131, v132, v133);
      v134 = v123[3];
      v135 = (_TtC14softposreaderd12RemoteReader *)v122[3];
      v122[2] = v123[2];
      v122[3] = v134;
      swift_bridgeObjectRelease(v135, v136, v137, v138, v139, v140, v141, v142);
      return a1;
    }
    sub_100098FEC(v122);
  }
  v125 = *((_OWORD *)v123 + 1);
  *(_OWORD *)v122 = *(_OWORD *)v123;
  *((_OWORD *)v122 + 1) = v125;
  return a1;
}

uint64_t sub_100099600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009960C);
}

uint64_t sub_10009960C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 80);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for UUID(0);
    v10 = *(_QWORD *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = v9;
      v12 = *(int *)(a3 + 32);
    }
    else
    {
      v11 = sub_100003A2C((uint64_t *)&unk_1001B36F0);
      v10 = *(_QWORD *)(v11 - 8);
      v12 = *(int *)(a3 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
}

uint64_t sub_1000996BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000996C8);
}

uint64_t sub_1000996C8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 80) = a2;
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 32);
    }
    else
    {
      v10 = sub_100003A2C((uint64_t *)&unk_1001B36F0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_100099768(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v6[0] = "X";
  v6[1] = "X";
  v6[2] = "X";
  v6[3] = "X";
  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v7 = *(_QWORD *)(v2 - 8) + 64;
    v8 = v7;
    sub_10005BA88(319);
    if (v5 <= 0x3F)
    {
      v9 = *(_QWORD *)(v4 - 8) + 64;
      v10 = &unk_100160080;
      v11 = &unk_100160080;
      swift_initStructMetadata(a1, 256, 9, v6, a1 + 16);
    }
  }
}

unint64_t sub_100099808()
{
  unint64_t result;

  result = qword_1001B0F48;
  if (!qword_1001B0F48)
  {
    result = swift_getWitnessTable(&unk_1001601D4, &type metadata for KCSCertWithChainResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B0F48);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for KCSCertWithChainResponse.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for KCSCertWithChainResponse.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100099928 + 4 * byte_10015FF85[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10009995C + 4 * byte_10015FF80[v4]))();
}

uint64_t sub_10009995C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100099964(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10009996CLL);
  return result;
}

uint64_t sub_100099978(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100099980);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100099984(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009998C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KCSCertWithChainResponse.CodingKeys()
{
  return &type metadata for KCSCertWithChainResponse.CodingKeys;
}

unint64_t sub_1000999AC()
{
  unint64_t result;

  result = qword_1001B0F58;
  if (!qword_1001B0F58)
  {
    result = swift_getWitnessTable(&unk_1001601AC, &type metadata for KCSCertWithChainResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B0F58);
  }
  return result;
}

unint64_t sub_1000999F4()
{
  unint64_t result;

  result = qword_1001B0F60;
  if (!qword_1001B0F60)
  {
    result = swift_getWitnessTable(&unk_10016011C, &type metadata for KCSCertWithChainResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B0F60);
  }
  return result;
}

unint64_t sub_100099A3C()
{
  unint64_t result;

  result = qword_1001B0F68;
  if (!qword_1001B0F68)
  {
    result = swift_getWitnessTable(&unk_100160144, &type metadata for KCSCertWithChainResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B0F68);
  }
  return result;
}

void sub_100099A80(uint64_t *a1@<X8>)
{
  uint64_t v1;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  unint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  int v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  id v36[5];
  __int128 v37;
  __int128 v38;
  id v39;

  v36[0] = 0;
  v3 = (id)DeviceIdentityCopyCertificateProperties(v1, kMAOptionsBAAOIDUCRTDeviceIdentifiers, v36);
  v4 = v36[0];
  v39 = v36[0];
  if (!v3)
  {
    v13 = qword_1001AD078;
    v14 = v36[0];
    if (v13 != -1)
      swift_once(&qword_1001AD078, sub_10009A838);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_100003A14(v15, (uint64_t)qword_1001B0F70);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v37 = v20;
      *(_DWORD *)v19 = 136315138;
      swift_beginAccess(&v39, v36, 0, 0);
      v21 = sub_100003A2C(&qword_1001B0F88);
      v22 = Optional.debugDescription.getter(v21);
      v24 = v23;
      v34 = sub_1000056EC(v22, v23, (uint64_t *)&v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease(v24);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to copy UCRT device identifiers from certificate: %s", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }

    v11 = 0;
    v12 = 0;
    v25 = 0;
    v26 = 0;
    goto LABEL_40;
  }
  v5 = v3;
  v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v3, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  v7 = v4;

  *(_QWORD *)&v37 = 1768254825;
  *((_QWORD *)&v37 + 1) = 0xE400000000000000;
  AnyHashable.init<A>(_:)(v36, &v37, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v6 + 16) && (v8 = sub_10000AD94((uint64_t)v36), (v9 & 1) != 0))
  {
    sub_100005D5C(*(_QWORD *)(v6 + 56) + 32 * v8, (uint64_t)&v37);
  }
  else
  {
    v37 = 0u;
    v38 = 0u;
  }
  sub_10000CAAC((uint64_t)v36);
  if (*((_QWORD *)&v38 + 1))
  {
    v10 = swift_dynamicCast(&v34, &v37, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    if (v10)
      v11 = v34;
    else
      v11 = 0;
    if (v10)
      v12 = v35;
    else
      v12 = 0;
  }
  else
  {
    sub_100007B30((uint64_t)&v37);
    v11 = 0;
    v12 = 0;
  }
  *(_QWORD *)&v37 = 1684628845;
  *((_QWORD *)&v37 + 1) = 0xE400000000000000;
  AnyHashable.init<A>(_:)(v36, &v37, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v6 + 16) && (v27 = sub_10000AD94((uint64_t)v36), (v28 & 1) != 0))
  {
    sub_100005D5C(*(_QWORD *)(v6 + 56) + 32 * v27, (uint64_t)&v37);
  }
  else
  {
    v37 = 0u;
    v38 = 0u;
  }
  sub_10000CAAC((uint64_t)v36);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = swift_dynamicCast(&v34, &v37, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    if (v29)
      v25 = v34;
    else
      v25 = 0;
    if (v29)
      v26 = v35;
    else
      v26 = 0;
  }
  else
  {
    sub_100007B30((uint64_t)&v37);
    v25 = 0;
    v26 = 0;
  }
  v34 = 1684628851;
  v35 = 0xE400000000000000;
  AnyHashable.init<A>(_:)(v36, &v34, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v6 + 16) && (v30 = sub_10000AD94((uint64_t)v36), (v31 & 1) != 0))
  {
    sub_100005D5C(*(_QWORD *)(v6 + 56) + 32 * v30, (uint64_t)&v37);
  }
  else
  {
    v37 = 0u;
    v38 = 0u;
  }
  swift_bridgeObjectRelease(v6);
  sub_10000CAAC((uint64_t)v36);
  if (!*((_QWORD *)&v38 + 1))
  {
    sub_100007B30((uint64_t)&v37);
    goto LABEL_39;
  }
  if (!swift_dynamicCast(&v34, &v37, (char *)&type metadata for Any + 8, &type metadata for String, 6))
  {
LABEL_39:

LABEL_40:
    v32 = 0;
    v33 = 0;
    goto LABEL_41;
  }
  v32 = v34;
  v33 = v35;

LABEL_41:
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v25;
  a1[3] = v26;
  a1[4] = v32;
  a1[5] = v33;
}

uint64_t sub_100099EE4()
{
  uint64_t v0;
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  id v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v24;
  unint64_t v25;
  id v26[5];
  __int128 v27;
  __int128 v28;
  id v29;

  v26[0] = 0;
  v1 = (id)DeviceIdentityCopyCertificateProperties(v0, kMAOptionsBAAOIDHardwareProperties, v26);
  v2 = v26[0];
  v29 = v26[0];
  if (v1)
  {
    v3 = v1;
    v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    v5 = v2;

    *(_QWORD *)&v27 = 925905201;
    *((_QWORD *)&v27 + 1) = 0xE400000000000000;
    AnyHashable.init<A>(_:)(v26, &v27, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v4 + 16) && (v6 = sub_10000AD94((uint64_t)v26), (v7 & 1) != 0))
    {
      sub_100005D5C(*(_QWORD *)(v4 + 56) + 32 * v6, (uint64_t)&v27);
    }
    else
    {
      v27 = 0u;
      v28 = 0u;
    }
    sub_10000CAAC((uint64_t)v26);
    if (*((_QWORD *)&v28 + 1))
    {
      if (swift_dynamicCast(&v24, &v27, (char *)&type metadata for Any + 8, &type metadata for Int, 6))
        v8 = v24;
      else
        v8 = 0;
    }
    else
    {
      sub_100007B30((uint64_t)&v27);
      v8 = 0;
    }
    v24 = 808464689;
    v25 = 0xE400000000000000;
    AnyHashable.init<A>(_:)(v26, &v24, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v4 + 16) && (v21 = sub_10000AD94((uint64_t)v26), (v22 & 1) != 0))
    {
      sub_100005D5C(*(_QWORD *)(v4 + 56) + 32 * v21, (uint64_t)&v27);
    }
    else
    {
      v27 = 0u;
      v28 = 0u;
    }
    swift_bridgeObjectRelease(v4);
    sub_10000CAAC((uint64_t)v26);
    if (*((_QWORD *)&v28 + 1))
      swift_dynamicCast(&v24, &v27, (char *)&type metadata for Any + 8, &type metadata for Int, 6);
    else
      sub_100007B30((uint64_t)&v27);

  }
  else
  {
    v9 = qword_1001AD078;
    v10 = v26[0];
    if (v9 != -1)
      swift_once(&qword_1001AD078, sub_10009A838);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_100003A14(v11, (uint64_t)qword_1001B0F70);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v27 = v16;
      *(_DWORD *)v15 = 136315138;
      swift_beginAccess(&v29, v26, 0, 0);
      v17 = sub_100003A2C(&qword_1001B0F88);
      v18 = Optional.debugDescription.getter(v17);
      v20 = v19;
      v24 = sub_1000056EC(v18, v19, (uint64_t *)&v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v15 + 4, v15 + 12);
      swift_bridgeObjectRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Failed to copy hardware properties from certificate: %s", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);

    }
    else
    {

    }
    return 0;
  }
  return v8;
}

void sub_10009A2C0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  unint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  os_log_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  id v25;
  id v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  int v35;
  unint64_t v36;
  char v37;
  int v38;
  unint64_t v39;
  char v40;
  int v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  _QWORD *v45;
  os_log_t v46;
  uint64_t v47;
  unint64_t v48;
  id v49[5];
  __int128 v50;
  __int128 v51;
  id v52;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49[0] = 0;
  v8 = (id)DeviceIdentityCopyCertificateProperties(v2, kMAOptionsBAAOIDDeviceOSInformation, v49);
  v9 = v49[0];
  v52 = v49[0];
  if (v8)
  {
    v10 = v8;
    v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v8, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    v12 = v9;

    *(_QWORD *)&v50 = 808465457;
    *((_QWORD *)&v50 + 1) = 0xE400000000000000;
    AnyHashable.init<A>(_:)(v49, &v50, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v11 + 16) && (v13 = sub_10000AD94((uint64_t)v49), (v14 & 1) != 0))
    {
      sub_100005D5C(*(_QWORD *)(v11 + 56) + 32 * v13, (uint64_t)&v50);
    }
    else
    {
      v50 = 0u;
      v51 = 0u;
    }
    sub_10000CAAC((uint64_t)v49);
    if (*((_QWORD *)&v51 + 1))
    {
      v15 = swift_dynamicCast(&v47, &v50, (char *)&type metadata for Any + 8, &type metadata for String, 6);
      if (v15)
        v16 = v47;
      else
        v16 = 0;
      if (v15)
        v17 = v48;
      else
        v17 = 0;
    }
    else
    {
      sub_100007B30((uint64_t)&v50);
      v16 = 0;
      v17 = 0;
    }
    *(_QWORD *)&v50 = 875574321;
    *((_QWORD *)&v50 + 1) = 0xE400000000000000;
    AnyHashable.init<A>(_:)(v49, &v50, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v11 + 16) && (v33 = sub_10000AD94((uint64_t)v49), (v34 & 1) != 0))
    {
      sub_100005D5C(*(_QWORD *)(v11 + 56) + 32 * v33, (uint64_t)&v50);
    }
    else
    {
      v50 = 0u;
      v51 = 0u;
    }
    sub_10000CAAC((uint64_t)v49);
    if (*((_QWORD *)&v51 + 1))
    {
      v35 = swift_dynamicCast(&v47, &v50, (char *)&type metadata for Any + 8, &type metadata for String, 6);
      if (v35)
        v29 = v47;
      else
        v29 = 0;
      if (v35)
        v30 = v48;
      else
        v30 = 0;
    }
    else
    {
      sub_100007B30((uint64_t)&v50);
      v29 = 0;
      v30 = 0;
    }
    *(_QWORD *)&v50 = 892351537;
    *((_QWORD *)&v50 + 1) = 0xE400000000000000;
    AnyHashable.init<A>(_:)(v49, &v50, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v11 + 16) && (v36 = sub_10000AD94((uint64_t)v49), (v37 & 1) != 0))
    {
      sub_100005D5C(*(_QWORD *)(v11 + 56) + 32 * v36, (uint64_t)&v50);
    }
    else
    {
      v50 = 0u;
      v51 = 0u;
    }
    sub_10000CAAC((uint64_t)v49);
    if (*((_QWORD *)&v51 + 1))
    {
      v38 = swift_dynamicCast(&v47, &v50, (char *)&type metadata for Any + 8, &type metadata for String, 6);
      if (v38)
        v31 = v47;
      else
        v31 = 0;
      if (v38)
        v32 = v48;
      else
        v32 = 0;
    }
    else
    {
      sub_100007B30((uint64_t)&v50);
      v31 = 0;
      v32 = 0;
    }
    v47 = 909128753;
    v48 = 0xE400000000000000;
    AnyHashable.init<A>(_:)(v49, &v47, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v11 + 16) && (v39 = sub_10000AD94((uint64_t)v49), (v40 & 1) != 0))
    {
      sub_100005D5C(*(_QWORD *)(v11 + 56) + 32 * v39, (uint64_t)&v50);
    }
    else
    {
      v50 = 0u;
      v51 = 0u;
    }
    swift_bridgeObjectRelease(v11);
    sub_10000CAAC((uint64_t)v49);
    if (*((_QWORD *)&v51 + 1))
    {
      v41 = swift_dynamicCast(&v47, &v50, (char *)&type metadata for Any + 8, &type metadata for Int, 6);
      if (v41)
        v42 = v47;
      else
        v42 = 0;

      v43 = v41 ^ 1;
      goto LABEL_55;
    }
    sub_100007B30((uint64_t)&v50);

LABEL_54:
    v42 = 0;
    v43 = 1;
LABEL_55:
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v29;
    *(_QWORD *)(a1 + 24) = v30;
    *(_QWORD *)(a1 + 32) = v31;
    *(_QWORD *)(a1 + 40) = v32;
    *(_QWORD *)(a1 + 48) = v42;
    *(_BYTE *)(a1 + 56) = v43;
    return;
  }
  v18 = qword_1001AD078;
  v19 = v49[0];
  if (v18 != -1)
    swift_once(&qword_1001AD078, sub_10009A838);
  v20 = sub_100003A14(v4, (uint64_t)qword_1001B0F70);
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v20, v4);
  v22 = (os_log_t)Logger.logObject.getter(v21);
  v23 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v22, v23))
  {
LABEL_18:

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v16 = 0;
    v17 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    goto LABEL_54;
  }
  v46 = v22;
  v24 = (uint8_t *)swift_slowAlloc(12, -1);
  v45 = (_QWORD *)swift_slowAlloc(8, -1);
  *(_DWORD *)v24 = 138412290;
  swift_beginAccess(&v52, v49, 0, 0);
  v25 = v52;
  if (v52)
  {
    *(_QWORD *)&v50 = v52;
    v26 = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, (char *)&v50 + 8, v24 + 4, v24 + 12);
    v27 = v45;
    *v45 = v25;
    v22 = v46;
    _os_log_impl((void *)&_mh_execute_header, v46, v23, "Failed to copy device OS version information from certificate: %@", v24, 0xCu);
    v28 = sub_100003A2C((uint64_t *)&unk_1001AE430);
    swift_arrayDestroy(v27, 1, v28);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v24, -1, -1);
    goto LABEL_18;
  }
  __break(1u);
}

uint64_t sub_10009A838()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B0F70);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B0F70);
  if (qword_1001AD168 != -1)
    swift_once(&qword_1001AD168, sub_1000CC6D0);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4E28);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_10009A8C8(uint64_t *a1@<X8>)
{
  uint64_t v1;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  unint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  int v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  id v36[5];
  __int128 v37;
  __int128 v38;
  id v39;

  v36[0] = 0;
  v3 = (id)DeviceIdentityCopyCertificateProperties(v1, kMAOptionsBAAOIDDeviceIdentifiers, v36);
  v4 = v36[0];
  v39 = v36[0];
  if (!v3)
  {
    v13 = qword_1001AD078;
    v14 = v36[0];
    if (v13 != -1)
      swift_once(&qword_1001AD078, sub_10009A838);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_100003A14(v15, (uint64_t)qword_1001B0F70);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v37 = v20;
      *(_DWORD *)v19 = 136315138;
      swift_beginAccess(&v39, v36, 0, 0);
      v21 = sub_100003A2C(&qword_1001B0F88);
      v22 = Optional.debugDescription.getter(v21);
      v24 = v23;
      v34 = sub_1000056EC(v22, v23, (uint64_t *)&v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease(v24);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to copy device identifiers from certificate: %s", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }

    v11 = 0;
    v12 = 0;
    v25 = 0;
    v26 = 0;
    goto LABEL_40;
  }
  v5 = v3;
  v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v3, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  v7 = v4;

  *(_QWORD *)&v37 = 909193265;
  *((_QWORD *)&v37 + 1) = 0xE400000000000000;
  AnyHashable.init<A>(_:)(v36, &v37, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v6 + 16) && (v8 = sub_10000AD94((uint64_t)v36), (v9 & 1) != 0))
  {
    sub_100005D5C(*(_QWORD *)(v6 + 56) + 32 * v8, (uint64_t)&v37);
  }
  else
  {
    v37 = 0u;
    v38 = 0u;
  }
  sub_10000CAAC((uint64_t)v36);
  if (*((_QWORD *)&v38 + 1))
  {
    v10 = swift_dynamicCast(&v34, &v37, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    if (v10)
      v11 = v34;
    else
      v11 = 0;
    if (v10)
      v12 = v35;
    else
      v12 = 0;
  }
  else
  {
    sub_100007B30((uint64_t)&v37);
    v11 = 0;
    v12 = 0;
  }
  *(_QWORD *)&v37 = 942747697;
  *((_QWORD *)&v37 + 1) = 0xE400000000000000;
  AnyHashable.init<A>(_:)(v36, &v37, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v6 + 16) && (v27 = sub_10000AD94((uint64_t)v36), (v28 & 1) != 0))
  {
    sub_100005D5C(*(_QWORD *)(v6 + 56) + 32 * v27, (uint64_t)&v37);
  }
  else
  {
    v37 = 0u;
    v38 = 0u;
  }
  sub_10000CAAC((uint64_t)v36);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = swift_dynamicCast(&v34, &v37, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    if (v29)
      v25 = v34;
    else
      v25 = 0;
    if (v29)
      v26 = v35;
    else
      v26 = 0;
  }
  else
  {
    sub_100007B30((uint64_t)&v37);
    v25 = 0;
    v26 = 0;
  }
  v34 = 858861617;
  v35 = 0xE400000000000000;
  AnyHashable.init<A>(_:)(v36, &v34, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v6 + 16) && (v30 = sub_10000AD94((uint64_t)v36), (v31 & 1) != 0))
  {
    sub_100005D5C(*(_QWORD *)(v6 + 56) + 32 * v30, (uint64_t)&v37);
  }
  else
  {
    v37 = 0u;
    v38 = 0u;
  }
  swift_bridgeObjectRelease(v6);
  sub_10000CAAC((uint64_t)v36);
  if (!*((_QWORD *)&v38 + 1))
  {
    sub_100007B30((uint64_t)&v37);
    goto LABEL_39;
  }
  if (!swift_dynamicCast(&v34, &v37, (char *)&type metadata for Any + 8, &type metadata for String, 6))
  {
LABEL_39:

LABEL_40:
    v32 = 0;
    v33 = 0;
    goto LABEL_41;
  }
  v32 = v34;
  v33 = v35;

LABEL_41:
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v25;
  a1[3] = v26;
  a1[4] = v32;
  a1[5] = v33;
}

void sub_10009AD30(uint64_t a1@<X8>)
{
  uint64_t v1;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  unint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  int v29;
  char v30;
  unint64_t v31;
  char v32;
  int v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  id v37[5];
  __int128 v38;
  __int128 v39;
  id v40;

  v37[0] = 0;
  v3 = (id)DeviceIdentityCopyCertificateProperties(v1, kMAOptionsBAAOIDKeyUsageProperties, v37);
  v4 = v37[0];
  v40 = v37[0];
  if (!v3)
  {
    v13 = qword_1001AD078;
    v14 = v37[0];
    if (v13 != -1)
      swift_once(&qword_1001AD078, sub_10009A838);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_100003A14(v15, (uint64_t)qword_1001B0F70);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v38 = v20;
      *(_DWORD *)v19 = 136315138;
      swift_beginAccess(&v40, v37, 0, 0);
      v21 = sub_100003A2C(&qword_1001B0F88);
      v22 = Optional.debugDescription.getter(v21);
      v24 = v23;
      v35 = sub_1000056EC(v22, v23, (uint64_t *)&v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease(v24);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to copy key usage properties from certificate: %s", v19, 0xCu);
      v12 = 1;
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

      v11 = 0;
      v25 = 0;
      v26 = 0;
    }
    else
    {

      v11 = 0;
      v25 = 0;
      v26 = 0;
      v12 = 1;
    }
    v30 = 1;
    goto LABEL_38;
  }
  v5 = v3;
  v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v3, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  v7 = v4;

  *(_QWORD *)&v38 = 808464945;
  *((_QWORD *)&v38 + 1) = 0xE400000000000000;
  AnyHashable.init<A>(_:)(v37, &v38, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v6 + 16) && (v8 = sub_10000AD94((uint64_t)v37), (v9 & 1) != 0))
  {
    sub_100005D5C(*(_QWORD *)(v6 + 56) + 32 * v8, (uint64_t)&v38);
  }
  else
  {
    v38 = 0u;
    v39 = 0u;
  }
  sub_10000CAAC((uint64_t)v37);
  if (*((_QWORD *)&v39 + 1))
  {
    v10 = swift_dynamicCast(&v35, &v38, (char *)&type metadata for Any + 8, &type metadata for Int, 6);
    if (v10)
      v11 = v35;
    else
      v11 = 0;
    v12 = v10 ^ 1;
  }
  else
  {
    sub_100007B30((uint64_t)&v38);
    v11 = 0;
    v12 = 1;
  }
  *(_QWORD *)&v38 = 842019377;
  *((_QWORD *)&v38 + 1) = 0xE400000000000000;
  AnyHashable.init<A>(_:)(v37, &v38, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v6 + 16) && (v27 = sub_10000AD94((uint64_t)v37), (v28 & 1) != 0))
  {
    sub_100005D5C(*(_QWORD *)(v6 + 56) + 32 * v27, (uint64_t)&v38);
  }
  else
  {
    v38 = 0u;
    v39 = 0u;
  }
  sub_10000CAAC((uint64_t)v37);
  if (*((_QWORD *)&v39 + 1))
  {
    v29 = swift_dynamicCast(&v35, &v38, (char *)&type metadata for Any + 8, &type metadata for Int, 6);
    if (v29)
      v25 = v35;
    else
      v25 = 0;
    v30 = v29 ^ 1;
  }
  else
  {
    sub_100007B30((uint64_t)&v38);
    v25 = 0;
    v30 = 1;
  }
  v35 = 858796593;
  v36 = 0xE400000000000000;
  AnyHashable.init<A>(_:)(v37, &v35, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v6 + 16) && (v31 = sub_10000AD94((uint64_t)v37), (v32 & 1) != 0))
  {
    sub_100005D5C(*(_QWORD *)(v6 + 56) + 32 * v31, (uint64_t)&v38);
  }
  else
  {
    v38 = 0u;
    v39 = 0u;
  }
  swift_bridgeObjectRelease(v6);
  sub_10000CAAC((uint64_t)v37);
  if (!*((_QWORD *)&v39 + 1))
  {
    sub_100007B30((uint64_t)&v38);

    v26 = 0;
LABEL_38:
    v34 = 1;
    goto LABEL_39;
  }
  v33 = swift_dynamicCast(&v35, &v38, (char *)&type metadata for Any + 8, &type metadata for Int, 6);
  if (v33)
    v26 = v35;
  else
    v26 = 0;

  v34 = v33 ^ 1;
LABEL_39:
  *(_QWORD *)a1 = v11;
  *(_BYTE *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 16) = v25;
  *(_BYTE *)(a1 + 24) = v30;
  *(_QWORD *)(a1 + 32) = v26;
  *(_BYTE *)(a1 + 40) = v34;
}

uint64_t sub_10009B1D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B0F90);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B0F90);
  if (qword_1001AD158 != -1)
    swift_once(&qword_1001AD158, sub_1000CC540);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4DF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_10009B264()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = sub_1000D8634();
  if (!v0)
  {
    if ((v1 & 1) != 0)
    {
      if (qword_1001AD080 != -1)
        swift_once(&qword_1001AD080, sub_10009B1D4);
      v2 = type metadata accessor for Logger(0);
      v3 = sub_100003A14(v2, (uint64_t)qword_1001B0F90);
      v4 = Logger.logObject.getter(v3);
      v5 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v4, v5))
        goto LABEL_12;
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      v7 = "Valid pairing found.";
    }
    else
    {
      if (qword_1001AD080 != -1)
        swift_once(&qword_1001AD080, sub_10009B1D4);
      v8 = type metadata accessor for Logger(0);
      v9 = sub_100003A14(v8, (uint64_t)qword_1001B0F90);
      v4 = Logger.logObject.getter(v9);
      v5 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v4, v5))
        goto LABEL_12;
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      v7 = "Not paired, need to delete-all!";
    }
    _os_log_impl((void *)&_mh_execute_header, v4, v5, v7, v6, 2u);
    swift_slowDealloc(v6, -1, -1);
LABEL_12:

  }
}

uint64_t sub_10009B3C4()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 25, 7);
}

uint64_t type metadata accessor for SecureService()
{
  return objc_opt_self(_TtC9SPREngine13SecureService);
}

void sub_10009B408()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  char v15;
  char v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  _QWORD v21[2];

  v1 = type metadata accessor for DispatchTime(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)v21 - v6;
  if (qword_1001AD080 != -1)
    swift_once(&qword_1001AD080, sub_10009B1D4);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100003A14(v8, (uint64_t)qword_1001B0F90);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "SecureService.restoreSEPairing()", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  static DispatchTime.now()(v13);
  + infix(_:_:)(v5);
  v14 = *(void (**)(char *, uint64_t))(v2 + 8);
  v14(v5, v1);
  sub_1000405A0((uint64_t)v7);
  if (v0)
  {
    v14(v7, v1);
  }
  else
  {
    v16 = v15;
    v17 = ((uint64_t (*)(char *, uint64_t))v14)(v7, v1);
    if ((v16 & 1) == 0)
    {
      v18 = Logger.logObject.getter(v17);
      v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed to validate SE Pairing.", v20, 2u);
        swift_slowDealloc(v20, -1, -1);
      }

    }
  }
}

uint64_t sub_10009B618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::String_optional v5;
  uint64_t countAndFlagsBits;
  void *object;
  char v8;
  Swift::String_optional v9;
  Swift::String_optional v10;
  void *v11;
  _BOOL8 v12;

  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  v5 = String.Iterator.next()();
  if (v5.value._object)
  {
    countAndFlagsBits = v5.value._countAndFlagsBits;
    object = v5.value._object;
    do
    {
      v10 = String.Iterator.next()();
      if (!v10.value._object)
      {
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(a4);
        swift_bridgeObjectRelease(a2);
        return 1;
      }
      if (countAndFlagsBits == v10.value._countAndFlagsBits && object == v10.value._object)
      {
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(v10.value._object);
      }
      else
      {
        v8 = _stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, v10.value._countAndFlagsBits, v10.value._object, 0);
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(v10.value._object);
        if ((v8 & 1) == 0)
        {
          swift_bridgeObjectRelease(a4);
          swift_bridgeObjectRelease(a2);
          return 0;
        }
      }
      v9 = String.Iterator.next()();
      countAndFlagsBits = v9.value._countAndFlagsBits;
      object = v9.value._object;
    }
    while (v9.value._object);
  }
  swift_bridgeObjectRelease(a4);
  v11 = String.Iterator.next()().value._object;
  swift_bridgeObjectRelease(a2);
  v12 = v11 == 0;
  swift_bridgeObjectRelease(v11);
  return v12;
}

uint64_t sub_10009B77C()
{
  return sub_10009B798(sub_100081FB0);
}

uint64_t sub_10009B798(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  if (qword_1001ACFD0 != -1)
    swift_once(&qword_1001ACFD0, sub_100071AC4);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_100003A14(v3, (uint64_t)qword_1001B08B8);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "retrieveGlobalID()", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = TLVTag.globalConfigID.unsafeMutableAddressor();
  result = a1(*v8);
  if (!v1)
  {
    v10 = result;
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 152))(result);
    swift_release(v10);
    return v11;
  }
  return result;
}

void sub_10009B8C0(_TtC14softposreaderd12RemoteReader **a1, uint64_t a2, uint64_t a3)
{
  sub_10009B8DC(a1, a2, a3, (uint64_t (*)(uint64_t))sub_100024A78);
}

void sub_10009B8DC(_TtC14softposreaderd12RemoteReader **a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _TtC14softposreaderd12RemoteReader *v16;
  _TtC14softposreaderd12RemoteReader *v17;
  unint64_t v18;
  id v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  _TtC14softposreaderd12RemoteReader *v29;
  _TtC14softposreaderd12RemoteReader *v30;
  uint64_t v31;
  _TtC14softposreaderd12RemoteReader *v32;
  Class isa;
  char isUniquelyReferenced_nonNull_native;
  _TtC14softposreaderd12RemoteReader *v35;
  SEL v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  SEL v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  _TtC14softposreaderd12RemoteReader *v50;
  char v51;

  v8 = a4(a2);
  v16 = (_TtC14softposreaderd12RemoteReader *)v9;
  v17 = *a1;
  if (*(_QWORD *)&(*a1)->instance[8] && (v18 = sub_10000ADC4(v8, v9), (v9 & 1) != 0))
  {
    v19 = *(id *)(*(_QWORD *)v17[1].instance + 8 * v18);
    swift_bridgeObjectRelease(v16, v20, v21, v22, v23, v24, v25, v26);
    v27 = objc_opt_self(NSNumber);
    v28 = swift_dynamicCastObjCClass(v19, v27);
    if (v28)
    {
      v50 = 0;
      v51 = 1;
      static Int._conditionallyBridgeFromObjectiveC(_:result:)(v28, &v50);

      if ((v51 & 1) == 0)
      {
        v29 = v50;
        goto LABEL_8;
      }
    }
    else
    {

    }
  }
  else
  {
    swift_bridgeObjectRelease(v16, (SEL)v9, v10, v11, v12, v13, v14, v15);
  }
  v29 = 0;
LABEL_8:
  v31 = a4(a2);
  if (__OFADD__(v29, a3))
  {
    __break(1u);
  }
  else
  {
    v32 = v30;
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
    v50 = *a1;
    *a1 = (_TtC14softposreaderd12RemoteReader *)0x8000000000000000;
    sub_1000EB9EC((uint64_t)isa, v31, (uint64_t)v32, isUniquelyReferenced_nonNull_native);
    v35 = *a1;
    *a1 = v50;
    swift_bridgeObjectRelease(v32, v36, v37, v38, v39, v40, v41, v42);
    swift_bridgeObjectRelease(v35, v43, v44, v45, v46, v47, v48, v49);
  }
}

void sub_10009BA30(_TtC14softposreaderd12RemoteReader **a1, unsigned __int8 a2, _TtC14softposreaderd12RemoteReader *a3, _TtC14softposreaderd12RemoteReader *a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _TtC14softposreaderd12RemoteReader *v16;
  _TtC14softposreaderd12RemoteReader *v17;
  unint64_t v18;
  id v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _TtC14softposreaderd12RemoteReader *v30;
  uint64_t v31;
  _TtC14softposreaderd12RemoteReader *v32;
  _TtC14softposreaderd12RemoteReader *v33;
  _TtC14softposreaderd12RemoteReader *v34;
  SEL v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  _TtC14softposreaderd12RemoteReader *v42;
  NSString v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  char isUniquelyReferenced_nonNull_native;
  _TtC14softposreaderd12RemoteReader *v52;
  SEL v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  uint64_t v67;
  _TtC14softposreaderd12RemoteReader *v68;
  _TtC14softposreaderd12RemoteReader *v69;
  _TtC14softposreaderd12RemoteReader *v70;

  v8 = sub_10004BAE8(a2);
  v16 = (_TtC14softposreaderd12RemoteReader *)v9;
  v17 = *a1;
  if (!*(_QWORD *)&(*a1)->instance[8] || (v18 = sub_10000ADC4(v8, v9), (v9 & 1) == 0))
  {
    swift_bridgeObjectRelease(v16, (SEL)v9, v10, v11, v12, v13, v14, v15);
LABEL_7:
    v31 = sub_10004BAE8(a2);
    v33 = v42;
    goto LABEL_8;
  }
  v19 = *(id *)(*(_QWORD *)v17[1].instance + 8 * v18);
  swift_bridgeObjectRelease(v16, v20, v21, v22, v23, v24, v25, v26);
  v27 = objc_opt_self(NSString);
  v28 = swift_dynamicCastObjCClass(v19, v27);
  if (!v28)
  {

    goto LABEL_7;
  }
  v69 = 0;
  v70 = 0;
  static String._conditionallyBridgeFromObjectiveC(_:result:)(v28, &v69);

  v29 = (uint64_t)v69;
  v30 = v70;
  v31 = sub_10004BAE8(a2);
  v33 = v32;
  if (!v30)
  {
LABEL_8:
    swift_bridgeObjectRetain();
    goto LABEL_9;
  }
  v69 = a3;
  v70 = a4;
  v67 = v29;
  v68 = v30;
  swift_bridgeObjectRetain();
  v67 = String.init<A>(_:)(&v67, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v68 = v34;
  String.append<A>(contentsOf:)(&v69, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v30, v35, v36, v37, v38, v39, v40, v41);
  a4 = v68;
LABEL_9:
  v43 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4, v44, v45, v46, v47, v48, v49, v50);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  v69 = *a1;
  *a1 = (_TtC14softposreaderd12RemoteReader *)0x8000000000000000;
  sub_1000EB9EC((uint64_t)v43, v31, (uint64_t)v33, isUniquelyReferenced_nonNull_native);
  v52 = *a1;
  *a1 = v69;
  swift_bridgeObjectRelease(v33, v53, v54, v55, v56, v57, v58, v59);
  swift_bridgeObjectRelease(v52, v60, v61, v62, v63, v64, v65, v66);
}

void sub_10009BBEC(unint64_t a1@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, unsigned int a6@<W5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unint64_t a11, uint64_t a12, unint64_t a13, _TtC14softposreaderd12RemoteReader *a14, char a15, unsigned __int8 a16, uint64_t a17)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _TtC14softposreaderd12RemoteReader *v38;
  uint64_t v39;
  NSObject *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _TtC14softposreaderd12RemoteReader *v45;
  SEL v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  Swift::String v55;
  SEL v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  uint64_t v63;
  unint64_t v64;
  _TtC14softposreaderd12RemoteReader *v65;
  SEL v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  uint64_t v73;
  unint64_t v74;
  Swift::String v75;
  SEL v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t countAndFlagsBits;
  _TtC14softposreaderd12RemoteReader *object;
  Swift::String v89;
  _TtC14softposreaderd12RemoteReader *v90;
  _TtC14softposreaderd12RemoteReader *v91;
  uint64_t v92;
  uint64_t *v93;
  SEL v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  unint64_t v101;
  Swift::String v102;
  SEL v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  int64_t v110;
  _TtC14softposreaderd12RemoteReader *v111;
  unint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  Swift::String v115;
  const char *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  id v131;
  id v132;
  _TtC14softposreaderd12RemoteReader *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  const char *v137;
  id v138;
  id v139;
  id v140;
  id v141;
  id v142;
  id v143;
  SEL v144;
  id v145;
  id v146;
  id v147;
  id v148;
  id v149;
  id v150;
  id v151;
  uint64_t v152;
  _TtC14softposreaderd12RemoteReader *v153;
  _TtC14softposreaderd12RemoteReader *v154;
  SEL v155;
  id v156;
  id v157;
  id v158;
  id v159;
  id v160;
  id v161;
  os_log_t v162;
  uint64_t v163;
  __int16 v164;
  unsigned int v165;
  __int16 v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  int v170;
  unint64_t v171;
  unint64_t v172;
  id v173;
  id v174;
  id v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  id v183;
  os_log_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int v193;
  unint64_t v194;
  char *v195;
  uint64_t v196;
  id v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  _TtC14softposreaderd12RemoteReader *v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unsigned int v210;
  uint64_t v211;
  __int16 v212;
  __int16 v213;
  __int16 v214;
  __int16 v215;
  __int16 v216;
  __int16 v217;
  _TtC14softposreaderd12RemoteReader *v218;
  uint64_t v219;

  v207 = a8;
  v193 = a6;
  v210 = a3;
  v209 = a2;
  v208 = a1;
  v196 = a17;
  v204 = a12;
  v206 = a10;
  v191 = a15 & 1;
  v21 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v21);
  v189 = (char *)&v181 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for Locale(0);
  v187 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v186 = (char *)&v181 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100003A2C(&qword_1001AD9E0);
  __chkstk_darwin(v25);
  v195 = (char *)&v181 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v199 = type metadata accessor for Date(0, v27);
  v198 = *(_QWORD *)(v199 - 8);
  __chkstk_darwin(v199);
  v190 = (char *)&v181 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v205 = a14;
  v185 = a9;
  v192 = a16;
  v194 = a13;
  v203 = a11;
  v202 = a7;
  v201 = a5;
  v200 = a4;
  v188 = v23;
  if (a16 == 2)
  {
    if (qword_1001ACF90 != -1)
      swift_once(&qword_1001ACF90, sub_100055C2C);
    v29 = type metadata accessor for Logger(0);
    v30 = sub_100003A14(v29, (uint64_t)qword_1001AFF80);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Sending START TRANSACTION with mode preProcessOnly", v33, 2u);
      swift_slowDealloc(v33, -1, -1);
    }

  }
  else
  {
    if (qword_1001ACF90 != -1)
      swift_once(&qword_1001ACF90, sub_100055C2C);
    v34 = type metadata accessor for Logger(0);
    v184 = (os_log_t)sub_100003A14(v34, (uint64_t)qword_1001AFF80);
    v183 = v197;
    sub_100005D9C(a4, a5);
    v35 = v207;
    sub_100005D9C(a7, v207);
    v36 = v206;
    sub_100005D9C(v206, a11);
    v37 = v204;
    sub_100005D9C(v204, a13);
    v38 = v205;
    swift_bridgeObjectRetain();
    v183 = v183;
    sub_100005D9C(a4, a5);
    sub_100005D9C(a7, v35);
    sub_100005D9C(v36, a11);
    sub_100005D9C(v37, a13);
    v39 = swift_bridgeObjectRetain();
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v40, (os_log_type_t)v41))
    {
      v182 = v41;
      v184 = v40;
      v42 = swift_slowAlloc(88, -1);
      v181 = swift_slowAlloc(256, -1);
      v211 = v181;
      *(_DWORD *)v42 = 136317442;
      v43 = NSDecimal.description.getter(v208, v209, v210);
      v45 = (_TtC14softposreaderd12RemoteReader *)v44;
      v218 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(v43, v44, &v211);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v218, &v219, v42 + 4, v42 + 12);
      swift_bridgeObjectRelease(v45, v46, v47, v48, v49, v50, v51, v52);
      *(_WORD *)(v42 + 12) = 2080;
      v53 = v200;
      v54 = v201;
      v55 = Data.hexString()();
      v218 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(v55._countAndFlagsBits, (unint64_t)v55._object, &v211);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v218, &v219, v42 + 14, v42 + 22);
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v55._object, v56, v57, v58, v59, v60, v61, v62);
      sub_100005DE0(v53, v54);
      sub_100005DE0(v53, v54);
      *(_WORD *)(v42 + 22) = 2080;
      v63 = SPRTransactionType.description.getter(v193);
      v65 = (_TtC14softposreaderd12RemoteReader *)v64;
      v218 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(v63, v64, &v211);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v218, &v219, v42 + 24, v42 + 32);
      swift_bridgeObjectRelease(v65, v66, v67, v68, v69, v70, v71, v72);
      *(_WORD *)(v42 + 32) = 2080;
      v73 = v202;
      v74 = v207;
      v75 = Data.hexString()();
      v218 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(v75._countAndFlagsBits, (unint64_t)v75._object, &v211);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v218, &v219, v42 + 34, v42 + 42);
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v75._object, v76, v77, v78, v79, v80, v81, v82);
      sub_100005DE0(v73, v74);
      v83 = sub_100005DE0(v73, v74);
      *(_WORD *)(v42 + 42) = 2080;
      v84 = v189;
      static String.Encoding.ascii.getter(v83);
      v85 = v206;
      v86 = v203;
      countAndFlagsBits = String.init(data:encoding:)(v206, v203, v84);
      if (!object)
      {
        v89 = Data.hexString()();
        object = (_TtC14softposreaderd12RemoteReader *)v89._object;
        countAndFlagsBits = v89._countAndFlagsBits;
      }
      v90 = object;
      v91 = v205;
      v92 = v204;
      v218 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(countAndFlagsBits, (unint64_t)object, &v211);
      v93 = &v219;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v218, &v219, v42 + 44, v42 + 52);
      swift_bridgeObjectRelease(v90, v94, v95, v96, v97, v98, v99, v100);
      sub_100005DE0(v85, v86);
      sub_100005DE0(v85, v86);
      *(_WORD *)(v42 + 52) = 2080;
      v101 = v194;
      v102 = Data.hexString()();
      v218 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(v102._countAndFlagsBits, (unint64_t)v102._object, &v211);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v218, &v219, v42 + 54, v42 + 62);
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v102._object, v103, v104, v105, v106, v107, v108, v109);
      sub_100005DE0(v92, v101);
      sub_100005DE0(v92, v101);
      *(_WORD *)(v42 + 62) = 2080;
      if (v91)
      {
        v110 = *(_QWORD *)&v91->instance[8];
        v111 = &_swiftEmptyArrayStorage;
        if (v110)
        {
          v189 = (char *)&v219;
          v218 = &_swiftEmptyArrayStorage;
          swift_bridgeObjectRetain();
          sub_100091C44(0, v110, 0);
          v111 = v218;
          v112 = (unint64_t *)&v91->instance[32];
          do
          {
            v113 = *(v112 - 1);
            v114 = *v112;
            sub_100005D9C(v113, *v112);
            v115 = Data.hexString()();
            sub_100005DE0(v113, v114);
            v218 = v111;
            v124 = *(_QWORD *)&v111->instance[8];
            v123 = *(_QWORD *)&v111->instance[16];
            if (v124 >= v123 >> 1)
            {
              sub_100091C44(v123 > 1, v124 + 1, 1);
              v111 = v218;
            }
            v112 += 2;
            *(_QWORD *)&v111->instance[8] = v124 + 1;
            *(Swift::String *)&v111->instance[16 * v124 + 24] = v115;
            --v110;
          }
          while (v110);
          v91 = v205;
          swift_bridgeObjectRelease(v205, v116, v117, v118, v119, v120, v121, v122);
          v132 = v183;
          v93 = (uint64_t *)v189;
        }
        else
        {
          v132 = v183;
        }
        v218 = v111;
        v135 = sub_100003A2C((uint64_t *)&unk_1001AE460);
        v136 = sub_100030828((unint64_t *)&qword_1001B12B0, (uint64_t *)&unk_1001AE460, (uint64_t)&protocol conformance descriptor for [A]);
        v134 = BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v135, v136);
        v133 = (_TtC14softposreaderd12RemoteReader *)v137;
        swift_bridgeObjectRelease(v111, v137, v138, v139, v140, v141, v142, v143);
      }
      else
      {
        v133 = (_TtC14softposreaderd12RemoteReader *)0xE300000000000000;
        v134 = 7104878;
        v132 = v183;
      }
      v218 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(v134, (unint64_t)v133, &v211);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v218, v93, v42 + 64, v42 + 72);
      swift_bridgeObjectRelease_n(v91, 2);
      swift_bridgeObjectRelease(v133, v144, v145, v146, v147, v148, v149, v150);
      *(_WORD *)(v42 + 72) = 256;
      LOBYTE(v218) = v191;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v218, (char *)&v218 + 1, v42 + 74, v42 + 75);
      *(_WORD *)(v42 + 75) = 256;
      LOBYTE(v218) = v192;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v218, (char *)&v218 + 1, v42 + 77, v42 + 78);
      *(_WORD *)(v42 + 78) = 2080;
      v151 = objc_msgSend(v132, "description");
      v152 = static String._unconditionallyBridgeFromObjectiveC(_:)(v151);
      v154 = v153;

      v218 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(v152, (unint64_t)v154, &v211);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v218, v93, v42 + 80, v42 + 88);

      swift_bridgeObjectRelease(v154, v155, v156, v157, v158, v159, v160, v161);
      v162 = v184;
      _os_log_impl((void *)&_mh_execute_header, v184, (os_log_type_t)v182, "Sending START TRANSACTION with amount: %s, currencyCode: %s, transactionType: %s, merchantCategoryCode: %s, interfaceDeviceSerial: %s, transactionIdHalf: %s, preferredSchemes: %s, resetTrackError: %hhu, mode: %hhu, using session: %s", (uint8_t *)v42, 0x58u);
      v163 = v181;
      swift_arrayDestroy(v181, 8, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v163, -1, -1);
      swift_slowDealloc(v42, -1, -1);

    }
    else
    {
      v125 = v200;
      v126 = v201;
      sub_100005DE0(v200, v201);
      sub_100005DE0(v125, v126);
      v127 = v202;
      v128 = v207;
      sub_100005DE0(v202, v207);
      sub_100005DE0(v127, v128);
      v129 = v206;
      v130 = v203;
      sub_100005DE0(v206, v203);
      sub_100005DE0(v129, v130);
      sub_100005DE0(v37, a13);
      sub_100005DE0(v37, a13);

      v131 = v183;
      swift_bridgeObjectRelease_n(v38, 2);
    }
  }
  v164 = v210;
  v165 = HIWORD(v210);
  v166 = v209;
  v167 = HIWORD(v209);
  v168 = HIDWORD(v209);
  v169 = v209 >> 16;
  v170 = v208;
  v171 = HIWORD(v208);
  v172 = HIDWORD(v208);
  v173 = objc_allocWithZone((Class)NSDecimalNumber);
  LODWORD(v211) = v170;
  WORD2(v211) = v172;
  HIWORD(v211) = v171;
  v212 = v166;
  v213 = v169;
  v214 = v168;
  v215 = v167;
  v216 = v164;
  v217 = v165;
  v174 = objc_msgSend(v173, "initWithDecimal:", &v211);
  v175 = objc_msgSend(v174, "integerValue");

  v176 = sub_100055440((uint64_t)v175);
  v178 = v177;
  sub_10005570C(v176, v177);
  v180 = v179;
  sub_100005DE0(v176, v178);
  __asm { BR              X10 }
}

void sub_10009D30C()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;

  sub_100005DE0(v2, v0);
  v8 = *(_QWORD *)(v7 - 288);
  if (BYTE6(v0) < 0x81uLL)
  {
    sub_1000D8FF0(*(_QWORD *)(v7 - 304), v4, v1, 0, v7 - 176);
    sub_1000306DC(v7 - 176, v7 - 136);
    v11 = *(_QWORD *)(v7 - 128);
    if (v11 >> 60 != 15)
    {
      v13 = *(unsigned __int16 *)(v7 - 120);
      switch(v13)
      {
        case 25392:
          v18 = 0xD00000000000003BLL;
          v19 = (void *)0x800000010016A1B0;
          break;
        case 27648:
          v19 = (void *)0x800000010016D4E0;
          v18 = 0xD00000000000001ELL;
          break;
        case 36864:
          v14 = *(_QWORD *)(v7 - 112);
          *(_QWORD *)(v7 - 288) = *(_QWORD *)(v7 - 104);
          v15 = *(_QWORD *)(v7 - 136);

          sub_100005DE0(v4, v1);
          sub_100005DE0(v4, v1);
          sub_100005DE0(v8, *(_QWORD *)(v7 - 296));
          sub_100005DE0(*(_QWORD *)(v7 - 208), *(_QWORD *)(v7 - 200));
          sub_100005DE0(*(_QWORD *)(v7 - 264), *(_QWORD *)(v7 - 256));
          (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v3);
          sub_100005DE0(*(_QWORD *)(v7 - 192), *(_QWORD *)(v7 - 184));
          v16 = *(_QWORD *)(v7 - 496);
          *(_QWORD *)v16 = v15;
          *(_QWORD *)(v16 + 8) = v11;
          *(_WORD *)(v16 + 16) = -28672;
          v17 = *(_QWORD *)(v7 - 288);
          *(_QWORD *)(v16 + 24) = v14;
          *(_QWORD *)(v16 + 32) = v17;
          JUMPOUT(0x10009D5C0);
        default:
          v18 = 0;
          v19 = 0;
          break;
      }
      v20 = sub_100024764(4015, v18, v19, 0);
      swift_willThrow(v20);

      sub_1000AFB30((_QWORD *)(v7 - 176), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
LABEL_14:
      sub_100005DE0(v4, v1);
      sub_100005DE0(v4, v1);
      JUMPOUT(0x10009D584);
    }
    v10 = 0xD000000000000010;
    v9 = (void *)0x800000010016D4C0;
  }
  else
  {
    v9 = (void *)0x800000010016D500;
    v10 = 0xD00000000000001ELL;
  }
  v12 = sub_100024764(4015, v10, v9, 0);
  swift_willThrow(v12);

  goto LABEL_14;
}

void sub_10009D680(unint64_t a1, char a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _TtC14softposreaderd12RemoteReader *v14;
  _TtC14softposreaderd12RemoteReader *v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (qword_1001ACF90 != -1)
    swift_once(&qword_1001ACF90, sub_100055C2C);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_100003A14(v5, (uint64_t)qword_1001AFF80);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc(18, -1);
    v10 = swift_slowAlloc(32, -1);
    v34 = v10;
    *(_DWORD *)v9 = 136315650;
    v11 = TLVTag.description.getter(a1);
    v12 = a1;
    v14 = (_TtC14softposreaderd12RemoteReader *)v13;
    v32 = sub_1000056EC(v11, v13, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v9 + 4, v9 + 12);
    v15 = v14;
    a1 = v12;
    swift_bridgeObjectRelease(v15, v16, v17, v18, v19, v20, v21, v22);
    *(_WORD *)(v9 + 12) = 256;
    LOBYTE(v32) = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, (char *)&v32 + 1, v9 + 14, v9 + 15);
    *(_WORD *)(v9 + 15) = 256;
    LOBYTE(v32) = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, (char *)&v32 + 1, v9 + 17, v9 + 18);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "getTagList(%s, p1: %hhu, p2: %hhu)", (uint8_t *)v9, 0x12u);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }

  TLVTag.dataRepresentation.getter(a1, v23, v24, v25, v26, v27, v28, v29);
  __asm { BR              X10 }
}

uint8_t *sub_10009E220()
{
  uint8_t *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::String v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  unint64_t v29;
  uint64_t v30;
  _WORD *v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  Swift::String v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  unint64_t v45;
  uint64_t v46;
  _WORD *v47;
  uint64_t v49;
  int v50;
  uint64_t v51;
  _QWORD v52[5];
  uint8_t *v53;
  unint64_t v54;
  unsigned __int16 v55;
  uint64_t v56;

  if (qword_1001ACF90 != -1)
    swift_once(&qword_1001ACF90, sub_100055C2C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100003A14(v1, (uint64_t)qword_1001AFF80);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v0 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v0 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "GET PAYMENT APPLICATION TYPE", v0, 2u);
    swift_slowDealloc(v0, -1, -1);
  }

  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v0 = (uint8_t *)swift_slowAlloc(12, -1);
    v49 = swift_slowAlloc(32, -1);
    v56 = v49;
    *(_DWORD *)v0 = 136315138;
    sub_10005E7B4(0x7A0uLL, 0, 0xC000000000000000);
    v9 = v8;
    v11 = v10;
    v12 = Data.hexString()();
    sub_100005DE0(v9, v11);
    v51 = sub_1000056EC(v12._countAndFlagsBits, (unint64_t)v12._object, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v0 + 4, v0 + 12);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v12._object, v13, v14, v15, v16, v17, v18, v19);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "C-APDU (GET PAYMENT APP TYPE): %s", v0, 0xCu);
    swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1, -1);
    swift_slowDealloc(v0, -1, -1);
  }

  sub_1000D8FF0(0x7A0uLL, 0, 0xC000000000000000, 0, (uint64_t)v52);
  v21 = v52[0];
  v20 = v52[1];
  v22 = v52[3];
  v23 = v52[4];
  v24 = sub_1000306DC((uint64_t)v52, (uint64_t)&v53);
  v25 = v54;
  if (v54 >> 60 == 15)
  {
    v26 = Logger.logObject.getter(v24);
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "no response for getPaymentAppType", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    v29 = sub_100030724();
    v30 = swift_allocError(&type metadata for APDUSW, v29, 0, 0);
    *v31 = 0;
    swift_willThrow(v30);
  }
  else
  {
    v0 = v53;
    v50 = v55;
    sub_100005D9C(v21, v20);
    sub_100005D9C(v22, v23);
    sub_100005D9C(v21, v20);
    v32 = sub_100005D9C(v22, v23);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = swift_slowAlloc(32, -1);
      v56 = v36;
      *(_DWORD *)v35 = 136315138;
      v37 = Data.hexString()();
      v51 = sub_1000056EC(v37._countAndFlagsBits, (unint64_t)v37._object, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v35 + 4, v35 + 12);
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v37._object, v38, v39, v40, v41, v42, v43, v44);
      sub_1000AFB30(v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
      sub_1000AFB30(v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "R-APDU: %s", v35, 0xCu);
      swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);
    }
    else
    {
      sub_1000AFB30(v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
      sub_1000AFB30(v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
    }

    if (v50 == 36864)
      __asm { BR              X10 }
    v45 = sub_100030724();
    v46 = swift_allocError(&type metadata for APDUSW, v45, 0, 0);
    *v47 = v50;
    swift_willThrow(v46);
    sub_1000AFB30(v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
  }
  return v0;
}

void sub_10009E7C4()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  _TtC14softposreaderd12RemoteReader *v10;
  _TtC14softposreaderd12RemoteReader *v11;
  SEL v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  Swift::String v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  int v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  Swift::String v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  uint8_t *v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  _WORD *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD v76[4];
  uint64_t v77[2];
  unsigned __int16 v78;

  if (qword_1001ACF90 != -1)
    swift_once(&qword_1001ACF90, sub_100055C2C);
  v1 = type metadata accessor for Logger(0);
  sub_100003A14(v1, (uint64_t)qword_1001AFF80);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v77[0] = v6;
    *(_DWORD *)v5 = 136315138;
    v7 = v2;
    v8 = objc_msgSend(v2, "description");
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v75 = sub_1000056EC(v9, (unint64_t)v11, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v5 + 4, v5 + 12);

    swift_bridgeObjectRelease(v11, v12, v13, v14, v15, v16, v17, v18);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "clearTransaction() session: %s)", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = swift_slowAlloc(32, -1);
    v77[0] = v23;
    *(_DWORD *)v22 = 136315138;
    sub_10005E7B4(0x3A0uLL, 0, 0xC000000000000000);
    v25 = v24;
    v27 = v26;
    v28 = Data.hexString()();
    sub_100005DE0(v25, v27);
    v75 = sub_1000056EC(v28._countAndFlagsBits, (unint64_t)v28._object, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v28._object, v29, v30, v31, v32, v33, v34, v35);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "C-APDU (CLEAR TRX): %s", v22, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }

  sub_1000D8FF0(0x3A0uLL, 0, 0xC000000000000000, 0, (uint64_t)&v75);
  v36 = v75;
  v37 = v76[0];
  v38 = v76[2];
  v39 = v76[3];
  v40 = sub_1000306DC((uint64_t)&v75, (uint64_t)v77);
  if ((unint64_t)v77[1] >> 60 == 15)
  {
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Error on CLEAR TRANSACTION command", v43, 2u);
      swift_slowDealloc(v43, -1, -1);
    }

  }
  else
  {
    v44 = v78;
    sub_100005D9C(v36, v37);
    sub_100005D9C(v38, v39);
    sub_100005D9C(v36, v37);
    v45 = sub_100005D9C(v38, v39);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v72 = v44;
      v48 = (uint8_t *)swift_slowAlloc(12, -1);
      v49 = swift_slowAlloc(32, -1);
      v74 = v49;
      *(_DWORD *)v48 = 136315138;
      v50 = Data.hexString()();
      v73 = sub_1000056EC(v50._countAndFlagsBits, (unint64_t)v50._object, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v48 + 4, v48 + 12);
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v50._object, v51, v52, v53, v54, v55, v56, v57);
      sub_1000AFB30(&v75, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
      sub_1000AFB30(&v75, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "R-APDU: %s", v48, 0xCu);
      swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      v58 = v48;
      v44 = v72;
      swift_slowDealloc(v58, -1, -1);
    }
    else
    {
      sub_1000AFB30(&v75, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
      sub_1000AFB30(&v75, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
    }

    if (v44 == 36864)
    {
      v60 = Logger.logObject.getter(v59);
      v61 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v60, v61))
      {
        v62 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v62 = 0;
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "clear transaction success", v62, 2u);
        swift_slowDealloc(v62, -1, -1);
      }
    }
    else
    {
      sub_100005D9C(v36, v37);
      v63 = sub_100005D9C(v38, v39);
      v60 = Logger.logObject.getter(v63);
      v64 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v60, v64))
      {
        v65 = (uint8_t *)swift_slowAlloc(12, -1);
        v66 = (uint64_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v65 = 138412290;
        v67 = sub_100030724();
        v68 = swift_allocError(&type metadata for APDUSW, v67, 0, 0);
        *v69 = v44;
        v70 = _swift_stdlib_bridgeErrorToNSError(v68);
        v74 = v70;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v65 + 4, v65 + 12);
        *v66 = v70;
        sub_1000AFB30(&v75, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
        _os_log_impl((void *)&_mh_execute_header, v60, v64, "Error (%@) on CLEAR TRANSACTION command", v65, 0xCu);
        v71 = sub_100003A2C((uint64_t *)&unk_1001AE430);
        swift_arrayDestroy(v66, 1, v71);
        swift_slowDealloc(v66, -1, -1);
        swift_slowDealloc(v65, -1, -1);
      }
      else
      {
        sub_1000AFB30(&v75, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
      }
    }

    sub_1000AFB30(&v75, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
  }
}

uint64_t sub_10009EEFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B10E0);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B10E0);
  if (qword_1001AD138 != -1)
    swift_once(&qword_1001AD138, sub_1000CC224);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4D98);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10009EF8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for OSSignposter(0);
  sub_1000039D4(v0, qword_1001B10F8);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B10F8);
  if (qword_1001ACF00 != -1)
    swift_once(&qword_1001ACF00, sub_10003B998);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4AF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_10009F26C(void *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, void *a6, _QWORD *a7, _QWORD *a8, _QWORD *a9)
{
  _BYTE *v9;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  objc_class *Operation;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  Class isa;
  SEL v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  unsigned int v60;
  id v61;
  _TtC14softposreaderd12RemoteReader *v62;
  id v63;
  uint8_t *v64;
  _TtC14softposreaderd12RemoteReader *v65;
  uint64_t v66;
  _TtC14softposreaderd12RemoteReader *v67;
  uint64_t inited;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  _TtC14softposreaderd12RemoteReader *v76;
  os_unfair_lock_s *v77;
  uint64_t v78;
  os_unfair_lock_s *v79;
  SEL v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  _TtC14softposreaderd12RemoteReader *v87;
  SEL v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  SEL v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  uint64_t v102;
  id v103;
  _TtC14softposreaderd12RemoteReader *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  os_unfair_lock_s *v108;
  _TtC14softposreaderd12RemoteReader *v109;
  id v110;
  uint64_t v111;
  _TtC14softposreaderd12RemoteReader *v112;
  _TtC14softposreaderd12RemoteReader *v113;
  _TtC14softposreaderd12RemoteReader *v114;
  uint64_t v115;
  _TtC14softposreaderd12RemoteReader *v116;
  char v117;
  SEL v118;
  id v119;
  id v120;
  id v121;
  id v122;
  id v123;
  id v124;
  SEL v125;
  id v126;
  id v127;
  id v128;
  id v129;
  id v130;
  id v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  NSObject *v135;
  os_log_type_t v136;
  _BOOL4 v137;
  _QWORD *v138;
  uint8_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  NSObject *v143;
  os_log_type_t v144;
  uint8_t *v145;
  void *v146;
  void *v147;
  uint64_t v148;
  unint64_t v149;
  _TtC14softposreaderd12RemoteReader *v150;
  SEL v151;
  id v152;
  id v153;
  id v154;
  id v155;
  id v156;
  id v157;
  void *v158;
  _BYTE *v159;
  _QWORD *v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  NSObject *v165;
  os_log_type_t v166;
  uint8_t *v167;
  uint64_t v168;
  uint64_t v169;
  NSObject *v170;
  os_log_type_t v171;
  uint8_t *v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  _TtC14softposreaderd12RemoteReader *v177;
  _TtC14softposreaderd12RemoteReader *v178;
  SEL v179;
  id v180;
  id v181;
  id v182;
  id v183;
  id v184;
  id v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  SEL v190;
  id v191;
  id v192;
  id v193;
  id v194;
  id v195;
  id v196;
  _TtC14softposreaderd12RemoteReader *v197;
  SEL v198;
  id v199;
  id v200;
  id v201;
  id v202;
  id v203;
  id v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  void *v213;
  void *v214;
  void *v215;
  void *v216;
  _TtC14softposreaderd12RemoteReader *v217;
  os_unfair_lock_s *v218;
  uint64_t v219;
  os_unfair_lock_s *v220;
  SEL v221;
  id v222;
  id v223;
  id v224;
  id v225;
  id v226;
  id v227;
  _TtC14softposreaderd12RemoteReader *v228;
  _QWORD *v229;
  uint64_t v230;
  const char *v231;
  void *v232;
  void *v233;
  void *v234;
  void *v235;
  void *v236;
  void *v237;
  int v238;
  SEL v239;
  id v240;
  id v241;
  id v242;
  id v243;
  id v244;
  id v245;
  uint64_t v246;
  uint64_t v247;
  NSObject *v248;
  os_log_type_t v249;
  uint8_t *v250;
  uint64_t v251;
  SEL v252;
  id v253;
  id v254;
  id v255;
  id v256;
  id v257;
  id v258;
  unint64_t v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  _TtC14softposreaderd12RemoteReader *v265;
  unint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  unint64_t v273;
  id v274;
  uint64_t v275;
  const char *v276;
  void *v277;
  void *v278;
  void *v279;
  void *v280;
  void *v281;
  void *v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  unsigned int v290;
  _TtC14softposreaderd12RemoteReader *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  _QWORD *v295;
  uint64_t v296;
  _QWORD *v297;
  uint64_t v298;
  _QWORD *v299;
  _QWORD *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  _BYTE *v304;
  _TtC14softposreaderd12RemoteReader **v305;
  char *v306;
  unint64_t v307;
  unint64_t v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  __int128 v312;
  uint64_t v313;
  id v314;
  uint64_t v315;
  _QWORD *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  id v320;
  _QWORD *v321;
  _QWORD *v322;
  _QWORD *v323;
  objc_super v324;
  _TtC14softposreaderd12RemoteReader *v325;
  _BYTE v326[16];
  uint64_t v327;
  char v328[72];
  id aBlock[3];
  void *v330;
  uint64_t (*v331)(_QWORD);
  uint64_t v332;
  uint64_t v333[2];
  __int16 v334;

  v321 = a8;
  v322 = a7;
  v319 = a2;
  v323 = a9;
  v313 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v313);
  *(_QWORD *)&v312 = (char *)&v286 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v311 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v311);
  v310 = (unint64_t)&v286 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v308 = *(_QWORD *)(v17 - 8);
  v309 = v17;
  __chkstk_darwin(v17);
  v307 = (unint64_t)&v286 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v19);
  v306 = (char *)&v286 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = OBJC_IVAR____TtC9SPREngine13ReadOperation_lockedState;
  v22 = sub_100003A2C(&qword_1001B1238);
  v23 = swift_allocObject(v22, 24, 7);
  *(_DWORD *)(v23 + 20) = 0;
  *(_WORD *)(v23 + 16) = 0;
  v301 = v21;
  *(_QWORD *)&v9[v21] = v23;
  v9[OBJC_IVAR____TtC9SPREngine13ReadOperation__isFinished] = 0;
  v24 = OBJC_IVAR____TtC9SPREngine13ReadOperation_readError;
  v25 = v9;
  v26 = sub_100024764(4998, 0, 0, 0);
  v303 = v24;
  v304 = v9;
  *(_QWORD *)&v9[v24] = v26;
  v302 = OBJC_IVAR____TtC9SPREngine13ReadOperation_vasResponse;
  *(_QWORD *)&v25[OBJC_IVAR____TtC9SPREngine13ReadOperation_vasResponse] = &_swiftEmptyArrayStorage;
  v25[OBJC_IVAR____TtC9SPREngine13ReadOperation_vasURLOK] = 0;
  v25[OBJC_IVAR____TtC9SPREngine13ReadOperation_vasDataFound] = 0;
  v25[OBJC_IVAR____TtC9SPREngine13ReadOperation_skipLoyalty] = 0;
  v25[OBJC_IVAR____TtC9SPREngine13ReadOperation_paymentDataForthcoming] = 0;
  v27 = (unint64_t *)&v25[OBJC_IVAR____TtC9SPREngine13ReadOperation_readResult];
  v28 = sub_1000047FC((uint64_t)&_swiftEmptyArrayStorage);
  v305 = (_TtC14softposreaderd12RemoteReader **)v27;
  *v27 = v28;
  v25[OBJC_IVAR____TtC9SPREngine13ReadOperation_pollingActiveA] = 0;
  v25[OBJC_IVAR____TtC9SPREngine13ReadOperation_pollingActiveB] = 0;
  v25[OBJC_IVAR____TtC9SPREngine13ReadOperation_pollingRestart] = 1;
  v25[OBJC_IVAR____TtC9SPREngine13ReadOperation_pollingRestartByApplet] = 0;
  v25[OBJC_IVAR____TtC9SPREngine13ReadOperation_cardTearSent] = 0;
  v25[OBJC_IVAR____TtC9SPREngine13ReadOperation_readerModeForPaymentStarted] = 0;
  v25[OBJC_IVAR____TtC9SPREngine13ReadOperation_fallbackTransactionStarted] = 0;
  v25[OBJC_IVAR____TtC9SPREngine13ReadOperation_fallbackFlowEnabled] = 0;
  v25[OBJC_IVAR____TtC9SPREngine13ReadOperation_readCompleteSuccessSent] = 0;
  v25[OBJC_IVAR____TtC9SPREngine13ReadOperation_lastTransactionOutcomeReceived] = 0;
  *(_WORD *)&v25[OBJC_IVAR____TtC9SPREngine13ReadOperation_currentPayAppletStatus] = 256;
  v296 = OBJC_IVAR____TtC9SPREngine13ReadOperation_nfSeReaderSession;
  *(_QWORD *)&v25[OBJC_IVAR____TtC9SPREngine13ReadOperation_nfSeReaderSession] = a1;
  v293 = OBJC_IVAR____TtC9SPREngine13ReadOperation_readerConfig;
  v29 = v319;
  *(_QWORD *)&v25[OBJC_IVAR____TtC9SPREngine13ReadOperation_readerConfig] = v319;
  v294 = OBJC_IVAR____TtC9SPREngine13ReadOperation_callback;
  *(_QWORD *)&v25[OBJC_IVAR____TtC9SPREngine13ReadOperation_callback] = a3;
  v316 = a4;
  v300 = &v25[OBJC_IVAR____TtC9SPREngine13ReadOperation_auditor];
  sub_100008390((uint64_t)a4, (uint64_t)&v25[OBJC_IVAR____TtC9SPREngine13ReadOperation_auditor]);
  v298 = OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics;
  *(_QWORD *)&v25[OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics] = a5;
  v292 = OBJC_IVAR____TtC9SPREngine13ReadOperation_operationQueue;
  *(_QWORD *)&v25[OBJC_IVAR____TtC9SPREngine13ReadOperation_operationQueue] = a6;
  v299 = &v25[OBJC_IVAR____TtC9SPREngine13ReadOperation_managedData];
  sub_100008390((uint64_t)v322, (uint64_t)&v25[OBJC_IVAR____TtC9SPREngine13ReadOperation_managedData]);
  v297 = &v25[OBJC_IVAR____TtC9SPREngine13ReadOperation_secureElement];
  sub_100008390((uint64_t)v321, (uint64_t)&v25[OBJC_IVAR____TtC9SPREngine13ReadOperation_secureElement]);
  v295 = &v25[OBJC_IVAR____TtC9SPREngine13ReadOperation_secureTimeKeeper];
  sub_100008390((uint64_t)v323, (uint64_t)&v25[OBJC_IVAR____TtC9SPREngine13ReadOperation_secureTimeKeeper]);
  *(_QWORD *)&v25[OBJC_IVAR____TtC9SPREngine13ReadOperation_paymentStartedCount] = 0;
  sub_100005E24(0, (unint64_t *)&qword_1001B1240, OS_dispatch_queue_ptr);
  v320 = a1;
  v30 = v29;
  swift_retain();
  v315 = a3;
  swift_retain();
  v318 = a5;
  swift_retain();
  v314 = a6;
  v31 = v306;
  static DispatchQoS.userInteractive.getter();
  v32 = v307;
  (*(void (**)(unint64_t, _QWORD, uint64_t))(v308 + 104))(v307, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v309);
  aBlock[0] = &_swiftEmptyArrayStorage;
  v33 = sub_100005F1C((unint64_t *)&qword_1001AE3E0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v34 = sub_100003A2C((uint64_t *)&unk_1001B1250);
  v35 = sub_100030828((unint64_t *)&qword_1001AE3F0, (uint64_t *)&unk_1001B1250, (uint64_t)&protocol conformance descriptor for [A]);
  v36 = v310;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v34, v35, v311, v33);
  v37 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001CLL, 0x800000010016D4A0, v31, v36, v32, 0);
  v38 = OBJC_IVAR____TtC9SPREngine13ReadOperation_queue;
  *(_QWORD *)&v25[OBJC_IVAR____TtC9SPREngine13ReadOperation_queue] = v37;
  v331 = BitString.init(data:unusedBits:);
  v332 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_1000043B8;
  v330 = &unk_10019D018;
  v39 = _Block_copy(aBlock);
  v325 = &_swiftEmptyArrayStorage;
  v40 = sub_100005F1C((unint64_t *)&qword_1001B1260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v41 = sub_100003A2C((uint64_t *)&unk_1001AE400);
  v42 = sub_100030828((unint64_t *)&qword_1001B1270, (uint64_t *)&unk_1001AE400, (uint64_t)&protocol conformance descriptor for [A]);
  v43 = v312;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v325, v41, v42, v313, v40);
  v44 = type metadata accessor for DispatchWorkItem(0);
  swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
  v45 = DispatchWorkItem.init(flags:block:)(v43, v39);
  v46 = OBJC_IVAR____TtC9SPREngine13ReadOperation_timeoutWorkItem;
  *(_QWORD *)&v25[OBJC_IVAR____TtC9SPREngine13ReadOperation_timeoutWorkItem] = v45;
  if (*(_QWORD *)(v30 + 16) == 1)
  {

LABEL_3:
    v47 = v316;
    Operation = (objc_class *)type metadata accessor for ReadOperation();
    v324.receiver = v25;
    v324.super_class = Operation;
    objc_msgSendSuper2(&v324, "init");

    swift_release(v30);
    swift_release(v315);
    swift_release(v318);

    sub_100005D3C(v323);
    sub_100005D3C(v321);
    sub_100005D3C(v322);
    sub_100005D3C(v47);
    return;
  }
  v313 = v46;
  v49 = sub_100003A2C((uint64_t *)&unk_1001AE410);
  v50 = swift_allocObject(v49, 48, 7);
  v312 = xmmword_10015A5F0;
  *(_OWORD *)(v50 + 16) = xmmword_10015A5F0;
  if (qword_1001AD240 != -1)
    swift_once(&qword_1001AD240, sub_10011627C);
  v51 = *((_QWORD *)&xmmword_1001B4F50 + 1);
  *(_QWORD *)(v50 + 32) = xmmword_1001B4F50;
  *(_QWORD *)(v50 + 40) = v51;
  swift_bridgeObjectRetain();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v50, v53, v54, v55, v56, v57, v58, v59);
  aBlock[0] = 0;
  v60 = objc_msgSend(v320, "selectApplets:error:", isa, aBlock);

  v61 = aBlock[0];
  v62 = (_TtC14softposreaderd12RemoteReader *)v317;
  if (v60)
  {
    v63 = aBlock[0];
    v64 = sub_10007EC3C();
    if (!v62)
    {
      v66 = (uint64_t)v64;
      v67 = v65;
      v311 = v38;
      v317 = sub_100003A2C((uint64_t *)&unk_1001B1290);
      inited = swift_initStackObject(v317, v328);
      *(_OWORD *)(inited + 16) = v312;
      *(_BYTE *)(inited + 32) = 5;
      *(_QWORD *)(inited + 64) = &type metadata for String;
      *(_QWORD *)(inited + 40) = v66;
      *(_QWORD *)(inited + 48) = v67;
      swift_bridgeObjectRetain();
      v76 = (_TtC14softposreaderd12RemoteReader *)sub_1000E8C74(inited, v69, v70, v71, v72, v73, v74, v75);
      v77 = *(os_unfair_lock_s **)(v318 + 56);
      v78 = (uint64_t)&v77[4];
      v79 = v77 + 8;
      os_unfair_lock_lock(v77 + 8);
      sub_100060510(v78, (uint64_t)v76);
      os_unfair_lock_unlock(v79);
      swift_bridgeObjectRelease(v76, v80, v81, v82, v83, v84, v85, v86);
      v87 = sub_1000AF248(v66, v67);
      swift_bridgeObjectRelease(v67, v88, v89, v90, v91, v92, v93, v94);
      LOBYTE(v67) = sub_1000AF744((uint64_t)v87);
      swift_bridgeObjectRelease(v87, v95, v96, v97, v98, v99, v100, v101);
      if ((v67 & 1) != 0)
      {
        v102 = sub_10009B798(sub_100081FCC);
        v30 = v319;
        v38 = v311;
        v206 = v102;
        v208 = v207;
        v209 = swift_initStackObject(v317, &v327);
        *(_OWORD *)(v209 + 16) = v312;
        *(_BYTE *)(v209 + 32) = 6;
        *(_QWORD *)(v209 + 64) = &type metadata for String;
        *(_QWORD *)(v209 + 40) = v206;
        *(_QWORD *)(v209 + 48) = v208;
        v217 = (_TtC14softposreaderd12RemoteReader *)sub_1000E8C74(v209, v210, v211, v212, v213, v214, v215, v216);
        v218 = *(os_unfair_lock_s **)(v318 + 56);
        v219 = (uint64_t)&v218[4];
        v220 = v218 + 8;
        os_unfair_lock_lock(v218 + 8);
        sub_100060510(v219, (uint64_t)v217);
        os_unfair_lock_unlock(v220);
        swift_bridgeObjectRelease(v217, v221, v222, v223, v224, v225, v226, v227);
        v228 = *(_TtC14softposreaderd12RemoteReader **)(v30
                                                      + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_profileID
                                                      + 8);
        v229 = v323;
        if (v228)
        {
          v230 = *(_QWORD *)(v30 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_profileID);
          swift_bridgeObjectRetain();
          if ((sub_1000824C8(v230, (unint64_t)v228) & 1) != 0)
          {
            v238 = *(unsigned __int8 *)(v30 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_isSAF);
            sub_100005EF8((_QWORD *)(v318 + 16), *(_QWORD *)(v318 + 40));
            v317 = 0;
            if (v238 == 1)
            {
              sub_10003977C(0x2Au, v230, (unint64_t)v228);
              swift_bridgeObjectRelease(v228, v239, v240, v241, v242, v243, v244, v245);
              v330 = &type metadata for Bool;
              LOBYTE(aBlock[0]) = 1;
              swift_beginAccess(v305, &v325, 33, 0);
              sub_1000E91C4((uint64_t)aBlock, 0x4641537369, (_TtC14softposreaderd12RemoteReader *)0xE500000000000000);
              swift_endAccess(&v325);
            }
            else
            {
              sub_10003977C(0x29u, v230, (unint64_t)v228);
              swift_bridgeObjectRelease(v228, v252, v253, v254, v255, v256, v257, v258);
            }
            LODWORD(v306) = *(_DWORD *)(v30 + 48);
            v259 = *(_QWORD *)(v30 + 64);
            *(_QWORD *)&v312 = *(_QWORD *)(v30 + 56);
            v310 = v259;
            v260 = *(_QWORD *)(v30 + 80);
            v261 = *(_QWORD *)(v30 + 88);
            v262 = *(_QWORD *)(v30 + 96);
            v263 = *(_QWORD *)(v30 + 104);
            v264 = *(_QWORD *)(v30 + 160);
            v286 = *(_QWORD *)(v30 + 152);
            v287 = v260;
            v265 = *(_TtC14softposreaderd12RemoteReader **)(v30 + 144);
            v266 = *(_QWORD *)(v30 + 40);
            v288 = *(_QWORD *)(v30 + 32);
            v289 = v266;
            v290 = *(unsigned __int8 *)(v30 + 72);
            sub_100005D9C(v312, v259);
            v267 = v260;
            v268 = v261;
            sub_100005D9C(v267, v261);
            sub_100005D9C(v262, v263);
            v269 = v286;
            sub_100005D9C(v286, v264);
            swift_bridgeObjectRetain();
            v291 = v265;
            v307 = v264;
            v284 = v269;
            v285 = v264;
            v270 = v269;
            v308 = v263;
            v309 = v262;
            v283 = v262;
            v271 = v287;
            v272 = v268;
            v273 = v268;
            v274 = v320;
            v275 = v317;
            sub_10009BBEC(v288, v289, v306, v312, v310, v290, v287, v273, (uint64_t)v333, v283, v263, v284, v285, v265, 1, 2u, (uint64_t)v323);
            v317 = v275;
            if (!v275)
            {
              swift_bridgeObjectRelease(v291, v276, v277, v278, v279, v280, v281, v282);

              sub_100005DE0(v270, v307);
              sub_100005DE0(v309, v308);
              sub_100005DE0(v271, v272);
              sub_100005DE0(v312, v310);
              sub_1000AF830(v333);
              *(_WORD *)(v318 + 172) = v334;
              goto LABEL_3;
            }
            swift_bridgeObjectRelease(v291, v276, v277, v278, v279, v280, v281, v282);
            sub_100005DE0(v270, v307);
            sub_100005DE0(v309, v308);
            sub_100005DE0(v271, v272);
            sub_100005DE0(v312, v310);
            swift_release(v30);
            swift_release(v315);
            swift_release(v318);

            sub_100005D3C(v323);
            sub_100005D3C(v321);
            sub_100005D3C(v322);
            sub_100005D3C(v316);

            v188 = v303;
            v159 = v304;
            v189 = v302;
            v38 = v311;
            goto LABEL_43;
          }
          swift_bridgeObjectRelease(v228, v231, v232, v233, v234, v235, v236, v237);
        }
        if (qword_1001AD088 != -1)
          swift_once(&qword_1001AD088, sub_10009EEFC);
        v246 = type metadata accessor for Logger(0);
        v247 = sub_100003A14(v246, (uint64_t)qword_1001B10E0);
        v248 = Logger.logObject.getter(v247);
        v249 = static os_log_type_t.error.getter(v248);
        if (os_log_type_enabled(v248, v249))
        {
          v250 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v250 = 0;
          _os_log_impl((void *)&_mh_execute_header, v248, v249, "activateProfile Error", v250, 2u);
          swift_slowDealloc(v250, -1, -1);
        }

        v251 = sub_100024764(4039, 0, 0, 0);
        swift_willThrow(v251);

        swift_release(v30);
        swift_release(v315);
        swift_release(v318);

        sub_100005D3C(v229);
        sub_100005D3C(v321);
        sub_100005D3C(v322);
        sub_100005D3C(v316);
        goto LABEL_54;
      }
      v30 = v319;
      v38 = v311;
      if (qword_1001AD088 != -1)
        swift_once(&qword_1001AD088, sub_10009EEFC);
      v163 = type metadata accessor for Logger(0);
      v164 = sub_100003A14(v163, (uint64_t)qword_1001B10E0);
      v165 = Logger.logObject.getter(v164);
      v166 = static os_log_type_t.error.getter(v165);
      if (os_log_type_enabled(v165, v166))
      {
        v167 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v167 = 0;
        _os_log_impl((void *)&_mh_execute_header, v165, v166, "applet version not acceptable", v167, 2u);
        swift_slowDealloc(v167, -1, -1);
      }

      v62 = (_TtC14softposreaderd12RemoteReader *)sub_100024764(4041, 0, 0, 0);
      swift_willThrow(v62);
    }
    if (qword_1001AD088 != -1)
      swift_once(&qword_1001AD088, sub_10009EEFC);
    v168 = type metadata accessor for Logger(0);
    sub_100003A14(v168, (uint64_t)qword_1001B10E0);
    swift_errorRetain();
    v169 = swift_errorRetain();
    v170 = Logger.logObject.getter(v169);
    v171 = static os_log_type_t.error.getter(v170);
    if (os_log_type_enabled(v170, v171))
    {
      v172 = (uint8_t *)swift_slowAlloc(12, -1);
      v173 = (void *)swift_slowAlloc(32, -1);
      aBlock[0] = v173;
      v311 = v38;
      *(_DWORD *)v172 = 136315138;
      v317 = (uint64_t)(v172 + 4);
      v325 = v62;
      swift_errorRetain();
      v174 = sub_100003A2C((uint64_t *)&unk_1001B1280);
      v175 = String.init<A>(describing:)(&v325, v174);
      v177 = (_TtC14softposreaderd12RemoteReader *)v176;
      v325 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(v175, v176, (uint64_t *)aBlock);
      v38 = v311;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v325, v326, v317, v172 + 12);
      v178 = v177;
      v30 = v319;
      swift_bridgeObjectRelease(v178, v179, v180, v181, v182, v183, v184, v185);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v170, v171, "Error on getAppletVersion: %s", v172, 0xCu);
      swift_arrayDestroy(v173, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v173, -1, -1);
      swift_slowDealloc(v172, -1, -1);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    v159 = v304;
    v160 = v316;
    v186 = v323;
    v187 = sub_100024764(4041, 0, 0, 0);
    swift_willThrow(v187);

    swift_release(v30);
    swift_release(v315);
    swift_release(v318);

    swift_errorRelease();
    v162 = v186;
LABEL_41:
    sub_100005D3C(v162);
    sub_100005D3C(v321);
    sub_100005D3C(v322);
    sub_100005D3C(v160);
LABEL_42:
    v189 = v302;
    v188 = v303;
LABEL_43:

    swift_release(*(_QWORD *)&v159[v301]);
    swift_release(*(_QWORD *)&v25[v293]);
    swift_release(*(_QWORD *)&v25[v294]);

    swift_release(*(_QWORD *)&v25[v313]);
    sub_100005D3C(v300);
    swift_release(*(_QWORD *)&v25[v298]);

    sub_100005D3C(v299);
    sub_100005D3C(v297);
    sub_100005D3C(v295);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)&v25[v189], v190, v191, v192, v193, v194, v195, v196);
    v197 = *v305;

    swift_bridgeObjectRelease(v197, v198, v199, v200, v201, v202, v203, v204);
    v205 = type metadata accessor for ReadOperation();
    swift_deallocPartialClassInstance(v25, v205, 294, 7);
    return;
  }
  v103 = aBlock[0];
  v104 = (_TtC14softposreaderd12RemoteReader *)_convertNSErrorToError(_:)(v61);

  swift_willThrow(v105);
  aBlock[0] = v104;
  swift_errorRetain();
  v106 = sub_100003A2C((uint64_t *)&unk_1001B1280);
  v107 = sub_100005E24(0, (unint64_t *)&qword_1001AE420, NSError_ptr);
  v317 = v106;
  if ((swift_dynamicCast(&v325, aBlock, v106, v107, 0) & 1) == 0)
  {
LABEL_24:
    swift_errorRelease();
    if (qword_1001AD088 != -1)
      swift_once(&qword_1001AD088, sub_10009EEFC);
    v141 = type metadata accessor for Logger(0);
    sub_100003A14(v141, (uint64_t)qword_1001B10E0);
    swift_errorRetain();
    v142 = swift_errorRetain();
    v143 = Logger.logObject.getter(v142);
    v144 = static os_log_type_t.error.getter(v143);
    if (os_log_type_enabled(v143, v144))
    {
      v145 = (uint8_t *)swift_slowAlloc(12, -1);
      v146 = (void *)swift_slowAlloc(32, -1);
      v311 = v38;
      v147 = v146;
      aBlock[0] = v146;
      *(_DWORD *)v145 = 136315138;
      *(_QWORD *)&v312 = v145 + 4;
      v325 = v104;
      swift_errorRetain();
      v148 = String.init<A>(describing:)(&v325, v317);
      v150 = (_TtC14softposreaderd12RemoteReader *)v149;
      v325 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(v148, v149, (uint64_t *)aBlock);
      v30 = v319;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v325, v326, v312, v145 + 12);
      swift_bridgeObjectRelease(v150, v151, v152, v153, v154, v155, v156, v157);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v143, v144, "Error from selectApplets: %s", v145, 0xCu);
      swift_arrayDestroy(v147, 1, (char *)&type metadata for Any + 8);
      v158 = v147;
      v38 = v311;
      swift_slowDealloc(v158, -1, -1);
      swift_slowDealloc(v145, -1, -1);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    v159 = v304;
    v160 = v316;
    v161 = sub_100024764(4037, 0, 0, 0);
    swift_willThrow(v161);

    swift_release(v30);
    swift_release(v315);
    swift_release(v318);

    swift_errorRelease();
    v162 = v323;
    goto LABEL_41;
  }
  v108 = (os_unfair_lock_s *)v38;
  v109 = v325;
  v110 = -[RemoteReader domain](v325, "domain");
  v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(v110);
  v113 = v112;

  v115 = String.init(cString:)("nfcd");
  v116 = v114;
  if (v111 == v115 && v113 == v114)
  {
    swift_bridgeObjectRelease_n(v113, 2);
    v38 = (uint64_t)v108;
  }
  else
  {
    v117 = _stringCompareWithSmolCheck(_:_:expecting:)(v111, v113, v115, v114, 0);
    swift_bridgeObjectRelease(v113, v118, v119, v120, v121, v122, v123, v124);
    swift_bridgeObjectRelease(v116, v125, v126, v127, v128, v129, v130, v131);
    v38 = (uint64_t)v108;
    if ((v117 & 1) == 0)
    {
LABEL_23:

      goto LABEL_24;
    }
  }
  v132 = (unint64_t)-[RemoteReader code](v109, "code");
  if ((v132 & 0x8000000000000000) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  }
  else
  {
    if (!HIDWORD(v132))
    {
      if (v132 == 64)
      {
        swift_errorRelease();
        if (qword_1001AD088 != -1)
          swift_once(&qword_1001AD088, sub_10009EEFC);
        v133 = type metadata accessor for Logger(0);
        v134 = sub_100003A14(v133, (uint64_t)qword_1001B10E0);
        v135 = Logger.logObject.getter(v134);
        v136 = static os_log_type_t.error.getter(v135);
        v137 = os_log_type_enabled(v135, v136);
        v138 = v323;
        if (v137)
        {
          v139 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v139 = 0;
          _os_log_impl((void *)&_mh_execute_header, v135, v136, "Cannot select pay applet. Reader temporarily unavailable. May be from prohibit timer.", v139, 2u);
          swift_slowDealloc(v139, -1, -1);
        }

        v140 = sub_100024764(4036, 0, 0, 0);
        swift_willThrow(v140);

        swift_release(v30);
        swift_release(v315);
        swift_release(v318);

        sub_100005D3C(v138);
        sub_100005D3C(v321);
        sub_100005D3C(v322);
        sub_100005D3C(v316);
        swift_errorRelease();
LABEL_54:
        v159 = v304;
        goto LABEL_42;
      }
      goto LABEL_23;
    }
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
  }
  __break(1u);
  os_unfair_lock_unlock(v108);
  __break(1u);
}

id sub_1000A0AF4()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  objc_super v10;

  v1 = v0;
  if (qword_1001AD088 != -1)
    swift_once(&qword_1001AD088, sub_10009EEFC);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100003A14(v2, (uint64_t)qword_1001B10E0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "ReadOperation deinit", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = *(_QWORD *)&v1[OBJC_IVAR____TtC9SPREngine13ReadOperation_timeoutWorkItem];
  v8 = swift_retain();
  dispatch thunk of DispatchWorkItem.cancel()(v8);
  swift_release(v7);
  v10.receiver = v1;
  v10.super_class = (Class)type metadata accessor for ReadOperation();
  return objc_msgSendSuper2(&v10, "dealloc");
}

uint64_t sub_1000A0D30()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  objc_class *Operation;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _TtC14softposreaderd12RemoteReader *v17;
  _QWORD aBlock[5];
  uint64_t v19;
  objc_super v20;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Operation = (objc_class *)type metadata accessor for ReadOperation();
  v20.receiver = v0;
  v20.super_class = Operation;
  objc_msgSendSuper2(&v20, "cancel");
  v16 = *(_QWORD *)&v0[OBJC_IVAR____TtC9SPREngine13ReadOperation_queue];
  v10 = swift_allocObject(&unk_10019D3C0, 24, 7);
  *(_QWORD *)(v10 + 16) = v0;
  aBlock[4] = sub_1000AFD48;
  v19 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000043B8;
  aBlock[3] = &unk_10019D3D8;
  v11 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v0);
  v17 = &_swiftEmptyArrayStorage;
  v12 = sub_100005F1C((unint64_t *)&qword_1001B1260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v13 = sub_100003A2C((uint64_t *)&unk_1001AE400);
  v14 = sub_100030828((unint64_t *)&qword_1001B1270, (uint64_t *)&unk_1001AE400, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v13, v14, v1, v12);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v11);
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release(v19);
}

uint64_t sub_1000A0F34(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[3];
  char v13;
  uint64_t v14;
  _QWORD v15[4];

  if (qword_1001AD088 != -1)
    swift_once(&qword_1001AD088, sub_10009EEFC);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100003A14(v2, (uint64_t)qword_1001B10E0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "ReadOperation cancel()", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  sub_1000AFF20(2, *(_QWORD *)(*(_QWORD *)(a1 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readerConfig) + 16));
  sub_1000A1150();
  v7 = sub_100005EF8((_QWORD *)(a1 + OBJC_IVAR____TtC9SPREngine13ReadOperation_managedData), *(_QWORD *)(a1 + OBJC_IVAR____TtC9SPREngine13ReadOperation_managedData + 24));
  __chkstk_darwin(v7);
  v12[2] = v8;
  v13 = 1;
  v9 = sub_100003A2C(&qword_1001B12E0);
  OS_dispatch_queue.sync<A>(execute:)(v15, sub_100030870, v12, v9);
  if (!v15[3])
    return sub_10005218C((uint64_t)v15, &qword_1001B12E0);
  v10 = sub_100003A2C((uint64_t *)&unk_1001B1280);
  result = swift_dynamicCast(&v14, v15, (char *)&type metadata for Any + 8, v10, 6);
  if ((result & 1) != 0)
  {
    sub_1000B013C(v14);
    return swift_errorRelease();
  }
  return result;
}

id sub_1000A1150()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  id v7;
  int v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  int v13;
  uint8_t *v14;

  v1 = v0;
  if (qword_1001AD088 != -1)
    swift_once(&qword_1001AD088, sub_10009EEFC);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100003A14(v2, (uint64_t)qword_1001B10E0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "ReadOperation internalCancel()", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = objc_msgSend(v0, "isExecuting");
  v8 = (int)v7;
  v9 = Logger.logObject.getter(v7);
  if (v8)
  {
    v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "ReadOperation isExecuting", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }

    if (v1[OBJC_IVAR____TtC9SPREngine13ReadOperation_readerModeForPaymentStarted] == 1)
      return sub_1000A1658(0);
    else
      return sub_1000A1374();
  }
  else
  {
    v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, (os_log_type_t)v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, (os_log_type_t)v13, "completeOperation()", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

    objc_msgSend(v1, "setExecuting:", 0);
    return objc_msgSend(v1, "setFinished:", 1);
  }
}

id sub_1000A1374()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void *v7;
  unsigned int v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _TtC14softposreaderd12RemoteReader *v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id result;
  uint64_t v31;
  uint64_t v32;
  id v33;

  v1 = v0;
  if (qword_1001AD088 != -1)
    swift_once(&qword_1001AD088, sub_10009EEFC);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100003A14(v2, (uint64_t)qword_1001B10E0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "ReadOperation closeVAS()", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = *(void **)&v0[OBJC_IVAR____TtC9SPREngine13ReadOperation_nfSeReaderSession];
  v33 = 0;
  v8 = objc_msgSend(v7, "stopVASPolling:", &v33);
  v9 = v33;
  if (v8)
  {
    v10 = v33;
  }
  else
  {
    v11 = v33;
    v12 = _convertNSErrorToError(_:)(v9);

    swift_willThrow(v13);
    swift_errorRetain();
    v14 = swift_errorRetain();
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = (void *)swift_slowAlloc(32, -1);
      v33 = v18;
      *(_DWORD *)v17 = 136315138;
      v31 = v12;
      swift_errorRetain();
      v19 = sub_100003A2C((uint64_t *)&unk_1001B1280);
      v20 = String.init<A>(describing:)(&v31, v19);
      v22 = (_TtC14softposreaderd12RemoteReader *)v21;
      v31 = sub_1000056EC(v20, v21, (uint64_t *)&v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease(v22, v23, v24, v25, v26, v27, v28, v29);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "stopVASPolling error: %s", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

    }
  }
  result = objc_msgSend(v1, "isCancelled");
  if ((_DWORD)result)
    return sub_1000A1658(0);
  return result;
}

id sub_1000A1658(char a1)
{
  char *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  id v9;
  void *v10;
  unsigned int v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _TtC14softposreaderd12RemoteReader *v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;

  v2 = v1;
  if (qword_1001AD088 != -1)
    swift_once(&qword_1001AD088, sub_10009EEFC);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100003A14(v4, (uint64_t)qword_1001B10E0);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "ReadOperation closePayment()", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  if (v1[OBJC_IVAR____TtC9SPREngine13ReadOperation_readerModeForPaymentStarted] == 1)
  {
    v10 = *(void **)&v1[OBJC_IVAR____TtC9SPREngine13ReadOperation_nfSeReaderSession];
    v38 = 0;
    v11 = objc_msgSend(v10, "stop:", &v38);
    v12 = v38;
    if (v11)
    {
      v9 = v38;
      if ((a1 & 1) == 0)
        goto LABEL_14;
      return sub_1000A19DC();
    }
    v13 = v38;
    v14 = _convertNSErrorToError(_:)(v12);

    swift_willThrow(v15);
    swift_errorRetain();
    v16 = swift_errorRetain();
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v17, v18))
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

      if ((a1 & 1) != 0)
        return sub_1000A19DC();
      goto LABEL_14;
    }
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = (void *)swift_slowAlloc(32, -1);
    v38 = v20;
    *(_DWORD *)v19 = 136315138;
    v36 = v14;
    swift_errorRetain();
    v21 = sub_100003A2C((uint64_t *)&unk_1001B1280);
    v22 = String.init<A>(describing:)(&v36, v21);
    v24 = (_TtC14softposreaderd12RemoteReader *)v23;
    v36 = sub_1000056EC(v22, v23, (uint64_t *)&v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v19 + 4, v19 + 12);
    swift_bridgeObjectRelease(v24, v25, v26, v27, v28, v29, v30, v31);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Stop Reader Mode Error from NFSecureElementReaderSession stop(): %s", v19, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);

    v9 = (id)swift_errorRelease();
  }
  if ((a1 & 1) != 0)
    return sub_1000A19DC();
LABEL_14:
  v33 = Logger.logObject.getter(v9);
  v34 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v35 = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "completeOperation()", v35, 2u);
    swift_slowDealloc(v35, -1, -1);
  }

  objc_msgSend(v2, "setExecuting:", 0);
  return objc_msgSend(v2, "setFinished:", 1);
}

id sub_1000A19DC()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _TtC14softposreaderd12RemoteReader *v27;
  _QWORD aBlock[5];
  uint64_t v29;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v24 = *(_QWORD *)(v5 - 8);
  v25 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001AD088 != -1)
    swift_once(&qword_1001AD088, sub_10009EEFC);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100003A14(v8, (uint64_t)qword_1001B10E0);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "clearTransactionAndCompleteOperation()", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  v13 = swift_allocObject(&unk_10019D2F8, 24, 7);
  *(_QWORD *)(v13 + 16) = v1;
  aBlock[4] = sub_1000AFCFC;
  v29 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000043B8;
  aBlock[3] = &unk_10019D310;
  v14 = _Block_copy(aBlock);
  v15 = v1;
  static DispatchQoS.unspecified.getter(v15);
  v27 = &_swiftEmptyArrayStorage;
  v16 = sub_100005F1C((unint64_t *)&qword_1001B1260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_100003A2C((uint64_t *)&unk_1001AE400);
  v18 = sub_100030828((unint64_t *)&qword_1001B1270, (uint64_t *)&unk_1001AE400, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v17, v18, v2, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v25);
  v19 = swift_release(v29);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "completeOperation()", v22, 2u);
    swift_slowDealloc(v22, -1, -1);
  }

  objc_msgSend(v15, "setExecuting:", 0);
  return objc_msgSend(v15, "setFinished:", 1);
}

uint64_t sub_1000A1D18(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_signpost_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint8_t *v23;
  os_signpost_id_t v24;
  uint8_t *v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  id v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  os_signpost_type_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  const char *v39;
  uint8_t *v41;
  os_signpost_id_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);

  v2 = type metadata accessor for OSSignpostError(0);
  v46 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v45 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OSSignpostID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v43 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v43 - v12;
  if (qword_1001AD090 != -1)
    swift_once(&qword_1001AD090, sub_10009EF8C);
  v14 = type metadata accessor for OSSignposter(0);
  v15 = sub_100003A14(v14, (uint64_t)qword_1001B10F8);
  v16 = static OSSignpostID.exclusive.getter();
  v47 = v15;
  v17 = OSSignposter.logHandle.getter(v16);
  v18 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v48 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v48(v11, v13, v4);
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    v44 = v4;
    v20 = a1;
    v21 = v2;
    v22 = v8;
    v23 = v19;
    *(_WORD *)v19 = 0;
    v24 = OSSignpostID.rawValue.getter(v19);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, v18, v24, "reader-clear_transaction_for_payment", "begin clear transaction for payment", v23, 2u);
    v25 = v23;
    v8 = v22;
    v2 = v21;
    a1 = v20;
    v4 = v44;
    swift_slowDealloc(v25, -1, -1);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
    v26 = v48;
  }
  else
  {

    v26 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  }
  v48 = v26;
  v26(v11, v13, v4);
  v27 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  v28 = OSSignpostIntervalState.init(id:isOpen:)(v11, 1);
  v29 = *(void (**)(char *, uint64_t))(v5 + 8);
  v29(v13, v4);
  v30 = *(id *)(a1 + OBJC_IVAR____TtC9SPREngine13ReadOperation_nfSeReaderSession);
  sub_10009E7C4();

  v32 = OSSignposter.logHandle.getter(v31);
  v33 = OSSignpostIntervalState.signpostID.getter();
  v34 = static os_signpost_type_t.end.getter(v33);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v35 = v8;
    v36 = swift_retain();
    v37 = v45;
    checkForErrorAndConsumeState(state:)(v36);
    swift_release(v28);
    v38 = v46;
    if ((*(unsigned int (**)(char *, uint64_t))(v46 + 88))(v37, v2) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v39 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v38 + 8))(v37, v2);
      v39 = "end clear transaction for payment";
    }
    v48(v11, v35, v4);
    v41 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v41 = 0;
    v42 = OSSignpostID.rawValue.getter(v41);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v32, v34, v42, "reader-clear_transaction_for_payment", v39, v41, 2u);
    swift_slowDealloc(v41, -1, -1);

    v29(v35, v4);
    swift_release(v28);
    return ((uint64_t (*)(char *, uint64_t))v29)(v11, v4);
  }
  else
  {

    v29(v8, v4);
    return swift_release(v28);
  }
}

id sub_1000A20D8()
{
  char *v0;
  char *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  id result;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  void (*v53)(char *, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  id v58;
  NSObject *v59;
  os_log_type_t v60;
  _BOOL4 v61;
  uint64_t v62;
  uint8_t *v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  Class isa;
  unsigned int v73;
  _TtC14softposreaderd12RemoteReader *v74;
  _TtC14softposreaderd12RemoteReader *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t inited;
  uint64_t v81;
  _TtC14softposreaderd12RemoteReader *v82;
  SEL v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  NSObject *v91;
  os_log_type_t v92;
  uint8_t *v93;
  _TtC14softposreaderd12RemoteReader *v94;
  _TtC14softposreaderd12RemoteReader *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  id v100;
  uint64_t v101;
  _TtC14softposreaderd12RemoteReader *v102;
  _TtC14softposreaderd12RemoteReader *v103;
  _TtC14softposreaderd12RemoteReader *v104;
  uint64_t v105;
  _TtC14softposreaderd12RemoteReader *v106;
  char *v107;
  NSObject *v108;
  os_log_type_t v109;
  uint8_t *v110;
  _TtC14softposreaderd12RemoteReader *v111;
  _TtC14softposreaderd12RemoteReader *v112;
  uint64_t v113;
  unint64_t v114;
  _TtC14softposreaderd12RemoteReader *v115;
  SEL v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  id v122;
  _TtC14softposreaderd12RemoteReader *v123;
  char v124;
  SEL v125;
  id v126;
  id v127;
  id v128;
  id v129;
  id v130;
  id v131;
  SEL v132;
  id v133;
  id v134;
  id v135;
  id v136;
  id v137;
  id v138;
  unint64_t v139;
  uint64_t v140;
  NSObject *v141;
  os_log_type_t v142;
  uint8_t *v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  NSObject *v147;
  os_log_type_t v148;
  _BOOL4 v149;
  unint64_t v150;
  uint64_t v151;
  uint8_t *v152;
  uint64_t v153;
  NSObject *v154;
  os_log_type_t v155;
  uint8_t *v156;
  _TtC14softposreaderd12RemoteReader *v157;
  uint64_t v158;
  unint64_t v159;
  _TtC14softposreaderd12RemoteReader *v160;
  SEL v161;
  id v162;
  id v163;
  id v164;
  id v165;
  id v166;
  id v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  NSObject *v173;
  os_log_type_t v174;
  uint8_t *v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  os_unfair_lock_s *v181;
  uint64_t v182;
  os_unfair_lock_s *v183;
  id v184;
  os_log_type_t v185;
  uint8_t *v186;
  uint64_t v187;
  id v188;
  uint64_t v189;
  uint64_t *v190;
  char *v191;
  unint64_t v192;
  char *v193;
  uint64_t v194;
  char *v195;
  id v196;
  uint64_t v197;
  char v198[64];
  _TtC14softposreaderd12RemoteReader *v199;
  _QWORD aBlock[5];
  uint64_t v201;

  v1 = v0;
  v2 = type metadata accessor for DispatchTime(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v187 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v187 - v7;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v187 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void **)&v1[OBJC_IVAR____TtC9SPREngine13ReadOperation_nfSeReaderSession];
  objc_msgSend(v12, "setDelegate:", v1);
  objc_msgSend(v12, "setSessionDelegate:", v1);
  if ((objc_msgSend(v1, "isCancelled") & 1) == 0)
  {
    v194 = v2;
    if (qword_1001AD088 != -1)
      swift_once(&qword_1001AD088, sub_10009EEFC);
    v191 = v6;
    v192 = v3;
    v193 = v8;
    v188 = v12;
    v23 = type metadata accessor for Logger(0);
    v189 = sub_100003A14(v23, (uint64_t)qword_1001B10E0);
    v24 = Logger.logObject.getter(v189);
    v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "ReadOperation start()", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }

    v27 = sub_100024764(4998, 0, 0, 0);
    v28 = *(void **)&v1[OBJC_IVAR____TtC9SPREngine13ReadOperation_readError];
    v187 = OBJC_IVAR____TtC9SPREngine13ReadOperation_readError;
    *(_QWORD *)&v1[OBJC_IVAR____TtC9SPREngine13ReadOperation_readError] = v27;

    v29 = swift_allocObject(&unk_10019D348, 24, 7);
    v30 = v29;
    v31 = *(uint64_t **)&v1[OBJC_IVAR____TtC9SPREngine13ReadOperation_readerConfig];
    v190 = v31;
    v32 = 15;
    if (!v31[2])
      v32 = 14;
    *(double *)(v29 + 16) = (double)v31[v32];
    v33 = v29 + 16;
    v34 = OBJC_IVAR____TtC9SPREngine13ReadOperation_timeoutWorkItem;
    v35 = *(_QWORD *)&v1[OBJC_IVAR____TtC9SPREngine13ReadOperation_timeoutWorkItem];
    v36 = swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()(v36);
    swift_release(v35);
    v37 = swift_allocObject(&unk_10019D140, 24, 7);
    swift_unknownObjectWeakInit(v37 + 16, v1);
    v38 = swift_allocObject(&unk_10019D370, 32, 7);
    *(_QWORD *)(v38 + 16) = v37;
    *(_QWORD *)(v38 + 24) = v30;
    aBlock[4] = sub_1000AFD40;
    v201 = v38;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000043B8;
    aBlock[3] = &unk_10019D388;
    v39 = _Block_copy(aBlock);
    v199 = &_swiftEmptyArrayStorage;
    v40 = sub_100005F1C((unint64_t *)&qword_1001B1260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v195 = v1;
    v41 = v40;
    swift_retain();
    swift_retain();
    v42 = sub_100003A2C((uint64_t *)&unk_1001AE400);
    v43 = sub_100030828((unint64_t *)&qword_1001B1270, (uint64_t *)&unk_1001AE400, (uint64_t)&protocol conformance descriptor for [A]);
    v44 = v41;
    v45 = v195;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v199, v42, v43, v9, v44);
    v46 = type metadata accessor for DispatchWorkItem(0);
    swift_allocObject(v46, *(unsigned int *)(v46 + 48), *(unsigned __int16 *)(v46 + 52));
    v47 = DispatchWorkItem.init(flags:block:)(v11, v39);
    v48 = v201;
    swift_release(v37);
    swift_release(v48);
    v49 = *(_QWORD *)&v45[v34];
    *(_QWORD *)&v45[v34] = v47;
    v50 = swift_release(v49);
    v51 = v191;
    static DispatchTime.now()(v50);
    swift_beginAccess(v33, aBlock, 0, 0);
    v52 = v193;
    + infix(_:_:)(v51);
    v53 = *(void (**)(char *, uint64_t))(v192 + 8);
    v54 = v51;
    v55 = v194;
    v53(v54, v194);
    v56 = *(_QWORD *)&v45[v34];
    swift_retain();
    OS_dispatch_queue.asyncAfter(deadline:execute:)(v52, v56);
    swift_release(v56);
    v53(v52, v55);
    v57 = v190;
    if (!v190[2])
    {
      sub_1000A34A0(0);
      v68 = v30;
      return (id)swift_release(v68);
    }
    v194 = v30;
    v58 = objc_msgSend(v45, "isCancelled");
    if ((v58 & 1) != 0)
    {
      v59 = Logger.logObject.getter(v58);
      v60 = static os_log_type_t.default.getter();
      v61 = os_log_type_enabled(v59, v60);
      v62 = v194;
      if (v61)
      {
        v63 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v63 = 0;
        _os_log_impl((void *)&_mh_execute_header, v59, v60, "ReadOperation cancelled before startVASPolling", v63, 2u);
        swift_slowDealloc(v63, -1, -1);
      }

      v65 = Logger.logObject.getter(v64);
      v66 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v65, v66))
      {
        v67 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v67 = 0;
        _os_log_impl((void *)&_mh_execute_header, v65, v66, "completeOperation()", v67, 2u);
        swift_slowDealloc(v67, -1, -1);
      }

      objc_msgSend(v45, "setExecuting:", 0);
      objc_msgSend(v45, "setFinished:", 1);
      v68 = v62;
      return (id)swift_release(v68);
    }
    v69 = sub_1000AF874();
    v71 = v70;
    isa = Data._bridgeToObjectiveC()().super.isa;
    v199 = 0;
    v73 = objc_msgSend(v188, "startVASPolling:error:", isa, &v199);

    v74 = v199;
    if (v73)
    {
      v75 = v199;
      objc_msgSend(v45, "setExecuting:", 1);
      v76 = *(_QWORD *)&v45[OBJC_IVAR____TtC9SPREngine13ReadOperation_auditor + 24];
      v77 = *(_QWORD *)&v45[OBJC_IVAR____TtC9SPREngine13ReadOperation_auditor + 32];
      sub_100005EF8(&v45[OBJC_IVAR____TtC9SPREngine13ReadOperation_auditor], v76);
      if (qword_1001AD0E0 != -1)
        swift_once(&qword_1001AD0E0, sub_1000BE314);
      v78 = byte_1001B4D88;
      v79 = sub_100003A2C(&qword_1001AC920);
      inited = swift_initStackObject(v79, v198);
      *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
      strcpy((char *)(inited + 32), "transactionId");
      *(_WORD *)(inited + 46) = -4864;
      v81 = v57[17];
      *(_QWORD *)(inited + 48) = v57[16];
      *(_QWORD *)(inited + 56) = v81;
      swift_bridgeObjectRetain();
      v82 = (_TtC14softposreaderd12RemoteReader *)sub_1000046DC(inited);
      (*(void (**)(uint64_t, uint64_t, _TtC14softposreaderd12RemoteReader *, uint64_t, uint64_t))(v77 + 8))(11, v78, v82, v76, v77);
      swift_bridgeObjectRelease(v82, v83, v84, v85, v86, v87, v88, v89);
      v90 = objc_msgSend(v45, "isCancelled");
      if ((v90 & 1) != 0)
      {
        v91 = Logger.logObject.getter(v90);
        v92 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v91, v92))
        {
          v93 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v93 = 0;
          _os_log_impl((void *)&_mh_execute_header, v91, v92, "ReadOperation cancelled after startVASPolling before onUpdate ready", v93, 2u);
          swift_slowDealloc(v93, -1, -1);
        }
      }
      else
      {
        sub_1000AFF20(0, v57[2]);
        v107 = v45;
        v108 = Logger.logObject.getter(v107);
        v109 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v108, v109))
        {
          v110 = (uint8_t *)swift_slowAlloc(12, -1);
          v111 = (_TtC14softposreaderd12RemoteReader *)swift_slowAlloc(32, -1);
          v193 = (char *)v69;
          v112 = v111;
          v199 = v111;
          *(_DWORD *)v110 = 136315138;
          v113 = SPRReaderMode.description.getter(v57[2]);
          v115 = (_TtC14softposreaderd12RemoteReader *)v114;
          v196 = (id)sub_1000056EC(v113, v114, (uint64_t *)&v199);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v196, &v197, v110 + 4, v110 + 12);

          swift_bridgeObjectRelease(v115, v116, v117, v118, v119, v120, v121, v122);
          _os_log_impl((void *)&_mh_execute_header, v108, v109, "VAS-type polling started --- --- --->  Tap a %s card", v110, 0xCu);
          swift_arrayDestroy(v112, 1, (char *)&type metadata for Any + 8);
          v123 = v112;
          v69 = (uint64_t)v193;
          swift_slowDealloc(v123, -1, -1);
          swift_slowDealloc(v110, -1, -1);

        }
        else
        {

        }
        v178 = (uint64_t)v188;
        if (qword_1001AD090 != -1)
          swift_once(&qword_1001AD090, sub_10009EF8C);
        v179 = type metadata accessor for OSSignposter(0);
        sub_100003A14(v179, (uint64_t)qword_1001B10F8);
        sub_10003B3B4("reader-vas_polling", 18, 2, 0xD000000000000011, 0x800000010016D8D0, (unint64_t)"reader-preprocessing", 20, 2, 0xD000000000000011, 0x800000010016D860, v178);
        v180 = *(_QWORD *)&v107[OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics];
        LOBYTE(v199) = 1;
        v181 = *(os_unfair_lock_s **)(v180 + 56);
        v182 = (uint64_t)&v181[4];
        v183 = v181 + 8;
        os_unfair_lock_lock(v181 + 8);
        sub_10010CC6C(v182, (unsigned __int8 *)&v199);
        os_unfair_lock_unlock(v183);
        v184 = objc_msgSend(v107, "isCancelled");
        if ((v184 & 1) == 0)
          goto LABEL_59;
        v91 = Logger.logObject.getter(v184);
        v185 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v91, v185))
        {
          v186 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v186 = 0;
          _os_log_impl((void *)&_mh_execute_header, v91, v185, "ReadOperation cancelled at end of start()", v186, 2u);
          swift_slowDealloc(v186, -1, -1);
        }
      }

      sub_1000A1150();
LABEL_59:
      v176 = v69;
      v177 = v71;
LABEL_60:
      sub_100005DE0(v176, v177);
LABEL_61:
      v68 = v194;
      return (id)swift_release(v68);
    }
    v193 = (char *)v69;
    v192 = v71;
    v94 = v199;
    v95 = (_TtC14softposreaderd12RemoteReader *)_convertNSErrorToError(_:)(v74);

    swift_willThrow(v96);
    v199 = v95;
    swift_errorRetain();
    v97 = sub_100003A2C((uint64_t *)&unk_1001B1280);
    v98 = sub_100005E24(0, (unint64_t *)&qword_1001AE420, NSError_ptr);
    if (!swift_dynamicCast(&v196, &v199, v97, v98, 0))
    {
LABEL_46:
      swift_errorRelease();
      swift_errorRetain();
      v153 = swift_errorRetain();
      v154 = Logger.logObject.getter(v153);
      v155 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v154, v155))
      {
        v156 = (uint8_t *)swift_slowAlloc(12, -1);
        v157 = (_TtC14softposreaderd12RemoteReader *)swift_slowAlloc(32, -1);
        v199 = v157;
        *(_DWORD *)v156 = 136315138;
        v196 = v95;
        swift_errorRetain();
        v158 = String.init<A>(describing:)(&v196, v97);
        v160 = (_TtC14softposreaderd12RemoteReader *)v159;
        v196 = (id)sub_1000056EC(v158, v159, (uint64_t *)&v199);
        v45 = v195;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v196, &v197, v156 + 4, v156 + 12);
        swift_bridgeObjectRelease(v160, v161, v162, v163, v164, v165, v166, v167);
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v154, v155, "Error from startVASPolling: %s", v156, 0xCu);
        swift_arrayDestroy(v157, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v157, -1, -1);
        swift_slowDealloc(v156, -1, -1);
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      v168 = v192;
      v169 = v187;
      v170 = sub_100024764(4015, 0, 0, 0);
      v171 = *(void **)&v45[v169];
      *(_QWORD *)&v45[v169] = v170;

      v173 = Logger.logObject.getter(v172);
      v174 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v173, v174))
      {
        v175 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v175 = 0;
        _os_log_impl((void *)&_mh_execute_header, v173, v174, "completeOperation()", v175, 2u);
        swift_slowDealloc(v175, -1, -1);
      }

      objc_msgSend(v45, "setExecuting:", 0);
      objc_msgSend(v45, "setFinished:", 1);
      swift_errorRelease();
      v176 = (uint64_t)v193;
      v177 = v168;
      goto LABEL_60;
    }
    v99 = v196;
    v100 = objc_msgSend(v196, "domain");
    v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
    v103 = v102;

    v105 = String.init(cString:)("nfcd");
    v106 = v104;
    if (v101 == v105 && v103 == v104)
    {
      swift_bridgeObjectRelease_n(v103, 2);
    }
    else
    {
      v124 = _stringCompareWithSmolCheck(_:_:expecting:)(v101, v103, v105, v104, 0);
      swift_bridgeObjectRelease(v103, v125, v126, v127, v128, v129, v130, v131);
      swift_bridgeObjectRelease(v106, v132, v133, v134, v135, v136, v137, v138);
      if ((v124 & 1) == 0)
      {
LABEL_45:

        goto LABEL_46;
      }
    }
    v139 = (unint64_t)objc_msgSend(v99, "code");
    if ((v139 & 0x8000000000000000) != 0)
    {
      result = (id)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    }
    else
    {
      if (!HIDWORD(v139))
      {
        if (v139 == 47)
        {
          v140 = swift_errorRelease();
          v141 = Logger.logObject.getter(v140);
          v142 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v141, v142))
          {
            v143 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v143 = 0;
            _os_log_impl((void *)&_mh_execute_header, v141, v142, "Reader temporarily unavailable when trying to start VAS-type polling", v143, 2u);
            swift_slowDealloc(v143, -1, -1);
          }

          v144 = sub_100024764(4036, 0, 0, 0);
          v145 = *(void **)&v45[v187];
          *(_QWORD *)&v45[v187] = v144;

          sub_100005EF8((_QWORD *)(*(_QWORD *)&v45[OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics] + 16), *(_QWORD *)(*(_QWORD *)&v45[OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics] + 40));
          sub_10003964C((uint64_t)&off_100198D00);
          v147 = Logger.logObject.getter(v146);
          v148 = static os_log_type_t.info.getter();
          v149 = os_log_type_enabled(v147, v148);
          v150 = v192;
          v151 = (uint64_t)v193;
          if (v149)
          {
            v152 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v152 = 0;
            _os_log_impl((void *)&_mh_execute_header, v147, v148, "completeOperation()", v152, 2u);
            swift_slowDealloc(v152, -1, -1);
          }

          objc_msgSend(v45, "setExecuting:", 0);
          objc_msgSend(v45, "setFinished:", 1);
          sub_100005DE0(v151, v150);

          swift_errorRelease();
          goto LABEL_61;
        }
        goto LABEL_45;
      }
      result = (id)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
    }
    __break(1u);
    return result;
  }
  if (qword_1001AD088 != -1)
    swift_once(&qword_1001AD088, sub_10009EEFC);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_100003A14(v13, (uint64_t)qword_1001B10E0);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "ReadOperation cancelled before start", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }

  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "completeOperation()", v21, 2u);
    swift_slowDealloc(v21, -1, -1);
  }

  objc_msgSend(v1, "setExecuting:", 0);
  return objc_msgSend(v1, "setFinished:", 1);
}

void sub_1000A324C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *Strong;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];
  char v16[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v16, 0, 0);
  Strong = (char *)swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    if ((objc_msgSend(Strong, "isCancelled") & 1) == 0
      && (objc_msgSend(v5, "isFinished") & 1) == 0
      && objc_msgSend(v5, "isExecuting"))
    {
      if (qword_1001AD088 != -1)
        swift_once(&qword_1001AD088, sub_10009EEFC);
      v6 = type metadata accessor for Logger(0);
      sub_100003A14(v6, (uint64_t)qword_1001B10E0);
      v7 = swift_retain();
      v8 = Logger.logObject.getter(v7);
      v9 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v10 = 134217984;
        swift_beginAccess(a2 + 16, v15, 0, 0);
        v14 = *(_QWORD *)(a2 + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, v15, v10 + 4, v10 + 12);
        swift_release(a2);
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Polling TIMED OUT after %f elapsed", v10, 0xCu);
        swift_slowDealloc(v10, -1, -1);

      }
      else
      {

        swift_release(a2);
      }
      v11 = sub_100024764(4005, 0, 0, 0);
      v12 = *(void **)&v5[OBJC_IVAR____TtC9SPREngine13ReadOperation_readError];
      *(_QWORD *)&v5[OBJC_IVAR____TtC9SPREngine13ReadOperation_readError] = v11;

      v13 = *(_QWORD *)&v5[OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics];
      if (*(uint64_t *)&v5[OBJC_IVAR____TtC9SPREngine13ReadOperation_paymentStartedCount] < 1)
        *(_BYTE *)(v13 + 126) = 1;
      else
        *(_BYTE *)(v13 + 125) = 1;
      objc_msgSend(v5, "cancel");
    }

  }
}

id sub_1000A34A0(char a1)
{
  char *v1;
  char *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  id result;
  uint64_t v22;
  int v23;
  __int16 v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;
  _TtC14softposreaderd12RemoteReader **v28;
  __int16 v29;
  __int16 v30;
  _TtC14softposreaderd12RemoteReader *v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  void *v39;
  NSDecimal *v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _TtC14softposreaderd12RemoteReader *v54;
  SEL v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  id v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  unsigned int v71;
  id v72;
  id v73;
  id v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  _TtC14softposreaderd12RemoteReader *v78;
  uint64_t v79;
  id v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  id v86;
  uint64_t v87;
  _TtC14softposreaderd12RemoteReader *v88;
  _TtC14softposreaderd12RemoteReader *v89;
  uint64_t v90;
  _TtC14softposreaderd12RemoteReader *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t inited;
  uint64_t v97;
  _TtC14softposreaderd12RemoteReader *v98;
  SEL v99;
  id v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  NSObject *v107;
  os_log_type_t v108;
  uint8_t *v109;
  uint64_t v110;
  NSObject *v111;
  os_log_type_t v112;
  uint8_t *v113;
  char v114;
  SEL v115;
  id v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  SEL v122;
  id v123;
  id v124;
  id v125;
  id v126;
  id v127;
  id v128;
  unint64_t v129;
  uint64_t v130;
  NSObject *v131;
  os_log_type_t v132;
  uint8_t *v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  NSObject *v137;
  os_log_type_t v138;
  uint8_t *v139;
  uint64_t v140;
  NSObject *v141;
  os_log_type_t v142;
  uint8_t *v143;
  void *v144;
  uint64_t v145;
  unint64_t v146;
  _TtC14softposreaderd12RemoteReader *v147;
  SEL v148;
  id v149;
  id v150;
  id v151;
  id v152;
  id v153;
  id v154;
  uint64_t v155;
  void *v156;
  uint64_t v157;
  NSObject *v158;
  os_log_type_t v159;
  uint8_t *v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  id v164;
  unsigned int v165;
  unint64_t v166;
  unsigned __int16 v167;
  unsigned int v168;
  unsigned int v169;
  unint64_t v170;
  unint64_t v171;
  unsigned __int16 v172;
  unsigned __int8 v173;
  char *v174;
  unint64_t v175;
  unint64_t v176;
  id v177;
  uint64_t v178;
  id v179[3];
  char v180[24];
  char v181[64];
  uint64_t v182;
  _WORD v183[4];
  __int16 v184;
  __int16 v185;
  void *v186;

  v4 = OBJC_IVAR____TtC9SPREngine13ReadOperation_paymentStartedCount;
  v5 = *(_QWORD *)&v2[OBJC_IVAR____TtC9SPREngine13ReadOperation_paymentStartedCount];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
  {
    __break(1u);
  }
  else
  {
    v1 = v2;
    v3 = a1;
    *(_QWORD *)&v2[OBJC_IVAR____TtC9SPREngine13ReadOperation_paymentStartedCount] = v7;
    if (qword_1001AD088 == -1)
      goto LABEL_3;
  }
  swift_once(&qword_1001AD088, sub_10009EEFC);
LABEL_3:
  v8 = type metadata accessor for Logger(0);
  sub_100003A14(v8, (uint64_t)qword_1001B10E0);
  v9 = v1;
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v12 = 134217984;
    v182 = *(_QWORD *)&v1[v4];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v183, v12 + 4, v12 + 12);

    _os_log_impl((void *)&_mh_execute_header, v10, v11, "startPayment() paymentStartedCount= %ld", v12, 0xCu);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

  }
  v13 = objc_msgSend(v9, "isCancelled");
  if ((v13 & 1) != 0)
  {
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "ReadOperation cancelled before startPayment", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "completeOperation()", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    objc_msgSend(v9, "setExecuting:", 0);
    return objc_msgSend(v9, "setFinished:", 1);
  }
  v22 = *(_QWORD *)&v9[OBJC_IVAR____TtC9SPREngine13ReadOperation_readerConfig];
  v23 = *(_DWORD *)(v22 + 32);
  v24 = *(_WORD *)(v22 + 36);
  v25 = *(_WORD *)(v22 + 40);
  v26 = *(_WORD *)(v22 + 44);
  v27 = *(_WORD *)(v22 + 48);
  LOWORD(v175) = *(_WORD *)(v22 + 42);
  v176 = *(unsigned __int16 *)(v22 + 46);
  if ((v3 & 1) != 0)
  {
    v28 = (_TtC14softposreaderd12RemoteReader **)&v9[OBJC_IVAR____TtC9SPREngine13ReadOperation_readResult];
    v29 = *(_WORD *)(v22 + 50);
    v30 = *(_WORD *)(v22 + 38);
    swift_beginAccess(&v9[OBJC_IVAR____TtC9SPREngine13ReadOperation_readResult], v180, 1, 0);
    v31 = *v28;
    *v28 = (_TtC14softposreaderd12RemoteReader *)&_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease(v31, v32, v33, v34, v35, v36, v37, v38);
    v186 = &type metadata for Bool;
    LOBYTE(v182) = 1;
    swift_beginAccess(v28, v179, 33, 0);
    sub_1000E91C4((uint64_t)&v182, 0x626C6C6146726F66, (_TtC14softposreaderd12RemoteReader *)0xEB000000006B6361);
    type metadata accessor for Decimal(0);
    v186 = v39;
    LODWORD(v182) = v23;
    WORD2(v182) = v24;
    HIWORD(v182) = v30;
    v183[0] = v25;
    v183[1] = v175;
    v183[2] = v26;
    v183[3] = v176;
    v184 = v27;
    v185 = v29;
    sub_1000E91C4((uint64_t)&v182, 0x6B6361626C6C6166, (_TtC14softposreaderd12RemoteReader *)0xEE00746E756F6D41);
    swift_endAccess(v179);
    NSDecimal.init(integerLiteral:)(v40, 0);
    v173 = 0;
    v170 = HIDWORD(v41);
    v171 = HIDWORD(v42);
    *(_BYTE *)(*(_QWORD *)&v9[OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics] + 128) = 1;
    v172 = v43;
    v169 = HIWORD(v43);
    v166 = HIWORD(v41);
    v167 = v42;
    v168 = v41;
    v175 = v42 >> 16;
    v176 = HIWORD(v42);
  }
  else
  {
    v173 = 1;
    v172 = *(_WORD *)(v22 + 48);
    LOWORD(v170) = *(_WORD *)(v22 + 36);
    LOWORD(v171) = *(_WORD *)(v22 + 44);
    v167 = *(_WORD *)(v22 + 40);
    v168 = *(_DWORD *)(v22 + 32);
    LOWORD(v169) = *(_WORD *)(v22 + 50);
    v166 = *(unsigned __int16 *)(v22 + 38);
  }
  v44 = *(void **)&v9[OBJC_IVAR____TtC9SPREngine13ReadOperation_nfSeReaderSession];
  v45 = *(_QWORD *)(v22 + 56);
  v46 = *(_QWORD *)(v22 + 64);
  v48 = *(_QWORD *)(v22 + 80);
  v47 = *(_QWORD *)(v22 + 88);
  v49 = v9;
  v50 = *(_QWORD *)(v22 + 96);
  v51 = *(_QWORD *)(v22 + 104);
  v53 = *(_QWORD *)(v22 + 152);
  v52 = *(_QWORD *)(v22 + 160);
  v54 = *(_TtC14softposreaderd12RemoteReader **)(v22 + 144);
  v174 = v49;
  v163 = (uint64_t)&v49[OBJC_IVAR____TtC9SPREngine13ReadOperation_secureTimeKeeper];
  v165 = *(unsigned __int8 *)(v22 + 72);
  v164 = v44;
  sub_100005D9C(v45, v46);
  sub_100005D9C(v48, v47);
  sub_100005D9C(v50, v51);
  sub_100005D9C(v53, v52);
  swift_bridgeObjectRetain();
  sub_10009BBEC(v168 | ((unint64_t)(unsigned __int16)v170 << 32) | (v166 << 48), v167 | ((unint64_t)(unsigned __int16)v175 << 16) | ((unint64_t)(unsigned __int16)v171 << 32) | (v176 << 48), v172 | ((unsigned __int16)v169 << 16), v45, v46, v165, v48, v47, (uint64_t)&v182, v50, v51, v53, v52, v54, 1, v173, v163);
  swift_bridgeObjectRelease(v54, v55, v56, v57, v58, v59, v60, v61);
  sub_100005DE0(v53, v52);
  sub_100005DE0(v50, v51);
  sub_100005DE0(v48, v47);
  sub_100005DE0(v45, v46);

  v62 = *(_QWORD *)&v174[OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics];
  sub_1000AF830(&v182);
  *(_WORD *)(v62 + 172) = v184;
  v63 = objc_msgSend(v174, "isCancelled");
  if ((v63 & 1) != 0)
  {
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v64, v65))
    {
      v66 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v66 = 0;
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "ReadOperation cancelled after Start CAPDU before start polling", v66, 2u);
      swift_slowDealloc(v66, -1, -1);
    }

    v68 = Logger.logObject.getter(v67);
    v69 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v68, v69))
    {
      v70 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v70 = 0;
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "completeOperation()", v70, 2u);
      swift_slowDealloc(v70, -1, -1);
    }

    objc_msgSend(v174, "setExecuting:", 0);
    return objc_msgSend(v174, "setFinished:", 1);
  }
  *(_WORD *)&v174[OBJC_IVAR____TtC9SPREngine13ReadOperation_currentPayAppletStatus] = 256;
  v179[0] = 0;
  v71 = objc_msgSend(v164, "start:", v179);
  v72 = v179[0];
  if (!v71)
  {
    v80 = v179[0];
    v81 = (void *)_convertNSErrorToError(_:)(v72);

    swift_willThrow(v82);
    v179[0] = v81;
    swift_errorRetain();
    v83 = sub_100003A2C((uint64_t *)&unk_1001B1280);
    v84 = sub_100005E24(0, (unint64_t *)&qword_1001AE420, NSError_ptr);
    if (!swift_dynamicCast(&v177, v179, v83, v84, 0))
    {
LABEL_57:
      swift_errorRelease();
      swift_errorRetain();
      v140 = swift_errorRetain();
      v141 = Logger.logObject.getter(v140);
      v142 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v141, v142))
      {
        v143 = (uint8_t *)swift_slowAlloc(12, -1);
        v144 = (void *)swift_slowAlloc(32, -1);
        v179[0] = v144;
        *(_DWORD *)v143 = 136315138;
        v177 = v81;
        swift_errorRetain();
        v145 = String.init<A>(describing:)(&v177, v83);
        v147 = (_TtC14softposreaderd12RemoteReader *)v146;
        v177 = (id)sub_1000056EC(v145, v146, (uint64_t *)v179);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, &v178, v143 + 4, v143 + 12);
        swift_bridgeObjectRelease(v147, v148, v149, v150, v151, v152, v153, v154);
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v141, v142, "Error from NFSecureElementReaderSession.start(): %s", v143, 0xCu);
        swift_arrayDestroy(v144, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v144, -1, -1);
        swift_slowDealloc(v143, -1, -1);
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      v155 = sub_100024764(4015, 0, 0, 0);
      v156 = *(void **)&v174[OBJC_IVAR____TtC9SPREngine13ReadOperation_readError];
      *(_QWORD *)&v174[OBJC_IVAR____TtC9SPREngine13ReadOperation_readError] = v155;

      v158 = Logger.logObject.getter(v157);
      v159 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v158, v159))
      {
        v160 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v160 = 0;
        _os_log_impl((void *)&_mh_execute_header, v158, v159, "completeOperation()", v160, 2u);
        swift_slowDealloc(v160, -1, -1);
      }

      objc_msgSend(v174, "setExecuting:", 0);
      objc_msgSend(v174, "setFinished:", 1);
      return (id)swift_errorRelease();
    }
    v85 = v177;
    v86 = objc_msgSend(v177, "domain");
    v87 = static String._unconditionallyBridgeFromObjectiveC(_:)(v86);
    v78 = v88;

    v90 = String.init(cString:)("nfcd");
    v91 = v89;
    if (v87 == v90 && v78 == v89)
    {
      swift_bridgeObjectRelease_n(v78, 2);
    }
    else
    {
      v114 = _stringCompareWithSmolCheck(_:_:expecting:)(v87, v78, v90, v89, 0);
      swift_bridgeObjectRelease(v78, v115, v116, v117, v118, v119, v120, v121);
      swift_bridgeObjectRelease(v91, v122, v123, v124, v125, v126, v127, v128);
      if ((v114 & 1) == 0)
      {
LABEL_56:

        goto LABEL_57;
      }
    }
    v129 = (unint64_t)objc_msgSend(v85, "code");
    if ((v129 & 0x8000000000000000) != 0)
    {
      LOBYTE(v162) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, v162, 3451, 0);
    }
    else
    {
      if (!HIDWORD(v129))
      {
        if (v129 == 47)
        {
          v130 = swift_errorRelease();
          v131 = Logger.logObject.getter(v130);
          v132 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v131, v132))
          {
            v133 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v133 = 0;
            _os_log_impl((void *)&_mh_execute_header, v131, v132, "Reader temporarily unavailable when trying to start EMV-type polling", v133, 2u);
            swift_slowDealloc(v133, -1, -1);
          }

          v134 = sub_100024764(4036, 0, 0, 0);
          v135 = *(void **)&v174[OBJC_IVAR____TtC9SPREngine13ReadOperation_readError];
          *(_QWORD *)&v174[OBJC_IVAR____TtC9SPREngine13ReadOperation_readError] = v134;

          sub_100005EF8((_QWORD *)(v62 + 16), *(_QWORD *)(v62 + 40));
          sub_10003964C((uint64_t)&off_100198CB0);
          v137 = Logger.logObject.getter(v136);
          v138 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v137, v138))
          {
            v139 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v139 = 0;
            _os_log_impl((void *)&_mh_execute_header, v137, v138, "completeOperation()", v139, 2u);
            swift_slowDealloc(v139, -1, -1);
          }

          objc_msgSend(v174, "setExecuting:", 0);
          objc_msgSend(v174, "setFinished:", 1);

          return (id)swift_errorRelease();
        }
        goto LABEL_56;
      }
      LOBYTE(v162) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, v162, 3455, 0);
    }
    __break(1u);
    goto LABEL_68;
  }
  v73 = v179[0];
  v74 = objc_msgSend(v174, "setExecuting:", 1);
  v174[OBJC_IVAR____TtC9SPREngine13ReadOperation_readerModeForPaymentStarted] = 1;
  v75 = Logger.logObject.getter(v74);
  v76 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v75, v76))
  {
    v77 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v77 = 0;
    _os_log_impl((void *)&_mh_execute_header, v75, v76, "Called start ETSI SE reader mode (for EMV-type polling) for payment.", v77, 2u);
    swift_slowDealloc(v77, -1, -1);
  }

  v78 = *(_TtC14softposreaderd12RemoteReader **)(v22 + 16);
  if ((unint64_t)&v78[-1].instance[38] < 2)
  {
    if (qword_1001AD090 != -1)
      swift_once(&qword_1001AD090, sub_10009EF8C);
    v79 = type metadata accessor for OSSignposter(0);
    sub_100003A14(v79, (uint64_t)qword_1001B10F8);
    sub_10003AD24("reader-vas_ese_reader_mode_switch", 33, 2, (uint64_t)v164, 0xD000000000000020, 0x800000010016D810);
    goto LABEL_43;
  }
  if (v78 != (_TtC14softposreaderd12RemoteReader *)1)
  {
    if (!v78)
    {
      v92 = *(_QWORD *)&v174[OBJC_IVAR____TtC9SPREngine13ReadOperation_auditor + 24];
      v93 = *(_QWORD *)&v174[OBJC_IVAR____TtC9SPREngine13ReadOperation_auditor + 32];
      sub_100005EF8(&v174[OBJC_IVAR____TtC9SPREngine13ReadOperation_auditor], v92);
      if (qword_1001AD0E0 != -1)
        swift_once(&qword_1001AD0E0, sub_1000BE314);
      v94 = byte_1001B4D88;
      v95 = sub_100003A2C(&qword_1001AC920);
      inited = swift_initStackObject(v95, v181);
      *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
      strcpy((char *)(inited + 32), "transactionId");
      *(_WORD *)(inited + 46) = -4864;
      v97 = *(_QWORD *)(v22 + 136);
      *(_QWORD *)(inited + 48) = *(_QWORD *)(v22 + 128);
      *(_QWORD *)(inited + 56) = v97;
      swift_bridgeObjectRetain();
      v98 = (_TtC14softposreaderd12RemoteReader *)sub_1000046DC(inited);
      (*(void (**)(uint64_t, uint64_t, _TtC14softposreaderd12RemoteReader *, uint64_t, uint64_t))(v93 + 8))(11, v94, v98, v92, v93);
      swift_bridgeObjectRelease(v98, v99, v100, v101, v102, v103, v104, v105);
      v106 = sub_1000AFF20(0, 0);
      v107 = Logger.logObject.getter(v106);
      v108 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v107, v108))
      {
        v109 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v109 = 0;
        _os_log_impl((void *)&_mh_execute_header, v107, v108, "EMV-type polling started --- --- --->  Tap a payment card", v109, 2u);
        swift_slowDealloc(v109, -1, -1);
      }

      if (qword_1001AD090 != -1)
        swift_once(&qword_1001AD090, sub_10009EF8C);
      v110 = type metadata accessor for OSSignposter(0);
      sub_100003A14(v110, (uint64_t)qword_1001B10F8);
      sub_10003AFE8("reader-preprocessing", 20, 2, (uint64_t)v164, 0xD000000000000011, 0x800000010016D860);
      goto LABEL_43;
    }
LABEL_68:
    type metadata accessor for SPRReaderMode(0);
    v179[0] = v78;
    result = (id)_diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v161, v179, v161, &type metadata for Int);
    __break(1u);
    return result;
  }
LABEL_43:
  result = objc_msgSend(v174, "isCancelled");
  if ((_DWORD)result)
  {
    v111 = Logger.logObject.getter(result);
    v112 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v111, v112))
    {
      v113 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v113 = 0;
      _os_log_impl((void *)&_mh_execute_header, v111, v112, "ReadOperation is cancelled after startPayment()", v113, 2u);
      swift_slowDealloc(v113, -1, -1);
    }

    return sub_1000A1658(0);
  }
  return result;
}

uint64_t sub_1000A46F0()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  _QWORD aBlock[5];
  uint64_t v21;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001AD088 != -1)
    swift_once(&qword_1001AD088, sub_10009EEFC);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_100003A14(v10, (uint64_t)qword_1001B10E0);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "handleSessionReachedTimeLimit()", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  v15 = static DispatchQoS.userInitiated.getter();
  static DispatchWorkItemFlags.enforceQoS.getter(v15);
  v16 = swift_allocObject(&unk_10019D2A8, 24, 7);
  *(_QWORD *)(v16 + 16) = v1;
  aBlock[4] = sub_1000AFCDC;
  v21 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000043B8;
  aBlock[3] = &unk_10019D2C0;
  v17 = _Block_copy(aBlock);
  v18 = v1;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release(v21);
}

uint64_t sub_1000A4944(uint64_t a1, char a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char *v27;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[5];
  uint64_t v32;

  v3 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005E24(0, (unint64_t *)&qword_1001AE470, NSObject_ptr);
  if ((static NSObject.== infix(_:_:)(a1, *(_QWORD *)&v3[OBJC_IVAR____TtC9SPREngine13ReadOperation_nfSeReaderSession]) & 1) != 0)
  {
    if (qword_1001AD088 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1001AD088, sub_10009EEFC);
LABEL_3:
  v14 = type metadata accessor for Logger(0);
  v15 = sub_100003A14(v14, (uint64_t)qword_1001B10E0);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(8, -1);
    v30 = v11;
    v19 = v10;
    v20 = v7;
    v21 = v6;
    v22 = v18;
    *(_DWORD *)v18 = 67109120;
    LODWORD(aBlock[0]) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(aBlock, (char *)aBlock + 4, v18 + 4, v18 + 8);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "didReceiveThermalIndication %{BOOL}d", v22, 8u);
    v23 = v22;
    v6 = v21;
    v7 = v20;
    v10 = v19;
    v11 = v30;
    swift_slowDealloc(v23, -1, -1);
  }

  v24 = static DispatchQoS.userInitiated.getter();
  static DispatchWorkItemFlags.enforceQoS.getter(v24);
  v25 = swift_allocObject(&unk_10019D258, 25, 7);
  *(_QWORD *)(v25 + 16) = v3;
  *(_BYTE *)(v25 + 24) = a2 & 1;
  aBlock[4] = sub_1000AFCB4;
  v32 = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000043B8;
  aBlock[3] = &unk_10019D270;
  v26 = _Block_copy(aBlock);
  v27 = v3;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v26);
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release(v32);
}

void sub_1000A4C58(char a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;

  v2 = v1;
  if ((a1 & 1) != 0)
  {
    if (qword_1001AD088 != -1)
      swift_once(&qword_1001AD088, sub_10009EEFC);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_100003A14(v3, (uint64_t)qword_1001B10E0);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "reader will stop", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

    v8 = sub_100024764(4036, 0, 0, 0);
    v9 = *(void **)&v2[OBJC_IVAR____TtC9SPREngine13ReadOperation_readError];
    *(_QWORD *)&v2[OBJC_IVAR____TtC9SPREngine13ReadOperation_readError] = v8;

    sub_100005EF8((_QWORD *)(*(_QWORD *)&v2[OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics] + 16), *(_QWORD *)(*(_QWORD *)&v2[OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics] + 40));
    sub_10003964C((uint64_t)&off_100198D28);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "completeOperation()", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    objc_msgSend(v2, "setExecuting:", 0);
    objc_msgSend(v2, "setFinished:", 1);
  }
  else
  {
    if (qword_1001AD088 != -1)
      swift_once(&qword_1001AD088, sub_10009EEFC);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_100003A14(v14, (uint64_t)qword_1001B10E0);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "reader can be enabled", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

    sub_100005EF8((_QWORD *)(*(_QWORD *)&v2[OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics] + 16), *(_QWORD *)(*(_QWORD *)&v2[OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics] + 40));
    sub_10003964C((uint64_t)&off_100198D50);
  }
}

uint64_t sub_1000A4EF8(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char *v20;
  _QWORD aBlock[5];
  uint64_t v23;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005E24(0, (unint64_t *)&qword_1001AE470, NSObject_ptr);
  if ((static NSObject.== infix(_:_:)(a1, *(_QWORD *)&v2[OBJC_IVAR____TtC9SPREngine13ReadOperation_nfSeReaderSession]) & 1) != 0)
  {
    if (qword_1001AD088 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1001AD088, sub_10009EEFC);
LABEL_3:
  v12 = type metadata accessor for Logger(0);
  v13 = sub_100003A14(v12, (uint64_t)qword_1001B10E0);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "secureElementReaderSessionDidEndUnexpectedly()", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  v17 = static DispatchQoS.userInitiated.getter();
  static DispatchWorkItemFlags.enforceQoS.getter(v17);
  v18 = swift_allocObject(&unk_10019D208, 24, 7);
  *(_QWORD *)(v18 + 16) = v2;
  aBlock[4] = sub_1000AFE24;
  v23 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000043B8;
  aBlock[3] = &unk_10019D220;
  v19 = _Block_copy(aBlock);
  v20 = v2;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return swift_release(v23);
}

id sub_1000A51AC()
{
  char *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t *v9;
  uint64_t v10;
  _TtC14softposreaderd12RemoteReader *v11;
  SEL v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v25;

  v1 = v0;
  v2 = sub_100024764(4024, 0, 0, 0);
  v3 = *(void **)&v0[OBJC_IVAR____TtC9SPREngine13ReadOperation_readError];
  *(_QWORD *)&v0[OBJC_IVAR____TtC9SPREngine13ReadOperation_readError] = v2;

  v4 = *(_QWORD *)&v0[OBJC_IVAR____TtC9SPREngine13ReadOperation_auditor + 24];
  v5 = *(_QWORD *)&v0[OBJC_IVAR____TtC9SPREngine13ReadOperation_auditor + 32];
  sub_100005EF8(&v0[OBJC_IVAR____TtC9SPREngine13ReadOperation_auditor], v4);
  if (qword_1001AD0E0 != -1)
    swift_once(&qword_1001AD0E0, sub_1000BE314);
  v6 = byte_1001B4D88;
  v7 = sub_100003A2C(&qword_1001AC920);
  inited = swift_initStackObject(v7, &v25);
  *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
  strcpy((char *)(inited + 32), "transactionId");
  *(_WORD *)(inited + 46) = -4864;
  v9 = *(uint64_t **)&v0[OBJC_IVAR____TtC9SPREngine13ReadOperation_readerConfig];
  v10 = v9[17];
  *(_QWORD *)(inited + 48) = v9[16];
  *(_QWORD *)(inited + 56) = v10;
  swift_bridgeObjectRetain();
  v11 = (_TtC14softposreaderd12RemoteReader *)sub_1000046DC(inited);
  (*(void (**)(uint64_t, uint64_t, _TtC14softposreaderd12RemoteReader *, uint64_t, uint64_t))(v5 + 8))(13, v6, v11, v4, v5);
  swift_bridgeObjectRelease(v11, v12, v13, v14, v15, v16, v17, v18);
  sub_1000AFF20(3, v9[2]);
  if (qword_1001AD088 != -1)
    swift_once(&qword_1001AD088, sub_10009EEFC);
  v19 = type metadata accessor for Logger(0);
  v20 = sub_100003A14(v19, (uint64_t)qword_1001B10E0);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "completeOperation()", v23, 2u);
    swift_slowDealloc(v23, -1, -1);
  }

  objc_msgSend(v1, "setExecuting:", 0);
  return objc_msgSend(v1, "setFinished:", 1);
}

uint64_t sub_1000A53D8(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char *v29;
  uint64_t v31;
  char *v32;
  _QWORD aBlock[5];
  uint64_t v34;

  v3 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005E24(0, (unint64_t *)&qword_1001AE470, NSObject_ptr);
  if ((static NSObject.== infix(_:_:)(a1, *(_QWORD *)&v3[OBJC_IVAR____TtC9SPREngine13ReadOperation_nfSeReaderSession]) & 1) != 0)
  {
    if (qword_1001AD088 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1001AD088, sub_10009EEFC);
LABEL_3:
  v14 = type metadata accessor for Logger(0);
  v15 = sub_100003A14(v14, (uint64_t)qword_1001B10E0);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    v32 = v9;
    v19 = a2;
    v20 = v11;
    v21 = v10;
    v22 = v7;
    v23 = v6;
    v24 = v18;
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "ReadOperation didDetect (NFTag)", v18, 2u);
    v25 = v24;
    v6 = v23;
    v7 = v22;
    v10 = v21;
    v11 = v20;
    a2 = v19;
    v9 = v32;
    swift_slowDealloc(v25, -1, -1);
  }

  v26 = static DispatchQoS.userInitiated.getter();
  static DispatchWorkItemFlags.enforceQoS.getter(v26);
  v27 = swift_allocObject(&unk_10019D1B8, 32, 7);
  *(_QWORD *)(v27 + 16) = v3;
  *(_QWORD *)(v27 + 24) = a2;
  aBlock[4] = sub_1000AFC6C;
  v34 = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000043B8;
  aBlock[3] = &unk_10019D1D0;
  v28 = _Block_copy(aBlock);
  v29 = v3;
  swift_bridgeObjectRetain();
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v28);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release(v34);
}

void sub_1000A56F0(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t inited;
  uint64_t v28;
  _TtC14softposreaderd12RemoteReader *v29;
  SEL v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  os_unfair_lock_s *v38;
  os_unfair_lock_s *v39;
  _TtC14softposreaderd12RemoteReader **v40;
  uint64_t v41;
  os_unfair_lock_s *v42;
  os_unfair_lock_s *v43;
  uint64_t v44;
  char *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  id v78;
  uint64_t v79;
  id v80;
  char v81;
  uint64_t v82;
  char *v83;
  NSObject *v84;
  os_log_type_t v85;
  int v86;
  uint8_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _TtC14softposreaderd12RemoteReader *v94;
  SEL v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  uint64_t v102;
  char *v103;
  void (*v104)(char *, uint64_t);
  uint64_t v105;
  uint64_t v106;
  void *v107;
  id v108;
  char v109;
  uint64_t v110;
  char *v111;
  NSObject *v112;
  os_log_type_t v113;
  int v114;
  uint8_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  _TtC14softposreaderd12RemoteReader *v122;
  SEL v123;
  id v124;
  id v125;
  id v126;
  id v127;
  id v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  os_unfair_lock_s *v132;
  os_unfair_lock_s *v133;
  _TtC14softposreaderd12RemoteReader **v134;
  uint64_t v135;
  os_unfair_lock_s *v136;
  os_unfair_lock_s *v137;
  uint64_t v138;
  char *v139;
  char v140;
  int v141;
  void *v142;
  uint64_t v143;
  os_log_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  NSObject *v154;
  os_log_type_t v155;
  uint8_t *v156;
  uint64_t v157;
  uint64_t v158;
  NSObject *v159;
  NSObject *v160;
  os_log_type_t v161;
  uint64_t v162;
  const char *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  _TtC14softposreaderd12RemoteReader *v170;
  uint64_t v171;
  NSObject *v172;
  os_log_type_t v173;
  uint8_t *v174;
  void *v175;
  os_unfair_lock_s *v176;
  _TtC14softposreaderd12RemoteReader **v177;
  os_unfair_lock_s *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  id v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  id v187;
  uint64_t v188;
  uint64_t v189;
  char v190;
  id v191;
  char v192;
  uint64_t v193;
  os_unfair_lock_s *v194;
  _TtC14softposreaderd12RemoteReader **v195;
  os_unfair_lock_s *v196;
  NSObject *v197;
  os_log_type_t v198;
  uint8_t *v199;
  os_unfair_lock_s *v200;
  _TtC14softposreaderd12RemoteReader **v201;
  os_unfair_lock_s *v202;
  id v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  char *v214;
  os_log_t v215;
  _TtC14softposreaderd12RemoteReader *v216;
  uint64_t aBlock;
  uint64_t v218;
  uint64_t (*v219)(uint64_t);
  void *v220;
  void (*v221)();
  uint64_t v222;
  char v223[72];

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v205 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v215 = (os_log_t)((char *)&v205 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for DispatchTime(0);
  v213 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v205 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v214 = (char *)&v205 - v15;
  if ((objc_msgSend(v2, "isCancelled") & 1) != 0)
  {
    if (qword_1001AD088 != -1)
      swift_once(&qword_1001AD088, sub_10009EEFC);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_100003A14(v16, (uint64_t)qword_1001B10E0);
    v215 = (os_log_t)Logger.logObject.getter(v17);
    v18 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v215, v18))
      goto LABEL_12;
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    v20 = "ReadOperation isCancelled ignore didDetect";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v215, v18, v20, v19, 2u);
    swift_slowDealloc(v19, -1, -1);
LABEL_12:

    return;
  }
  if ((*((_BYTE *)v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readerModeForPaymentStarted) & 1) != 0)
  {
    if (qword_1001AD088 != -1)
      swift_once(&qword_1001AD088, sub_10009EEFC);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_100003A14(v21, (uint64_t)qword_1001B10E0);
    v215 = (os_log_t)Logger.logObject.getter(v22);
    v18 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v215, v18))
      goto LABEL_12;
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    v20 = "readerModeForPaymentStarted ignore didDetect";
    goto LABEL_11;
  }
  v212 = *(_QWORD **)((char *)v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readerConfig);
  if (!v212[2])
  {
LABEL_40:
    if (qword_1001AD088 != -1)
      swift_once(&qword_1001AD088, sub_10009EEFC);
    v65 = type metadata accessor for Logger(0);
    v66 = sub_100003A14(v65, (uint64_t)qword_1001B10E0);
    v67 = Logger.logObject.getter(v66);
    v68 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v67, v68))
    {
      v69 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v69 = 0;
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "SPRReaderMode is .payment, VAS-type polling for NFTag detection should not be active", v69, 2u);
      swift_slowDealloc(v69, -1, -1);
    }

    v70 = sub_100024764(4017, 0, 0, 0);
    v71 = *(void **)((char *)v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError);
    *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError) = v70;

    return;
  }
  v207 = v7;
  v208 = v11;
  v209 = v5;
  v210 = v8;
  v211 = v4;
  sub_1000AFF20(1, 1);
  v23 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_auditor + 24);
  v24 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_auditor + 32);
  sub_100005EF8((char *)v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_auditor, v23);
  if (qword_1001AD0E0 != -1)
    swift_once(&qword_1001AD0E0, sub_1000BE314);
  v206 = v9;
  v25 = byte_1001B4D88;
  v26 = sub_100003A2C(&qword_1001AC920);
  inited = swift_initStackObject(v26, v223);
  *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
  strcpy((char *)(inited + 32), "transactionId");
  *(_WORD *)(inited + 46) = -4864;
  v28 = v212[17];
  *(_QWORD *)(inited + 48) = v212[16];
  *(_QWORD *)(inited + 56) = v28;
  swift_bridgeObjectRetain();
  v29 = (_TtC14softposreaderd12RemoteReader *)sub_1000046DC(inited);
  (*(void (**)(uint64_t, uint64_t, _TtC14softposreaderd12RemoteReader *, uint64_t, uint64_t))(v24 + 8))(12, v25, v29, v23, v24);
  swift_bridgeObjectRelease(v29, v30, v31, v32, v33, v34, v35, v36);
  v37 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics);
  v38 = *(os_unfair_lock_s **)(v37 + 56);
  v39 = v38 + 8;
  v40 = (_TtC14softposreaderd12RemoteReader **)&v38[4];
  LOBYTE(aBlock) = 1;
  os_unfair_lock_lock(v38 + 8);
  sub_10010CC54(v40, (unsigned __int8 *)&aBlock);
  os_unfair_lock_unlock(v39);
  v41 = 1;
  v42 = *(os_unfair_lock_s **)(v37 + 56);
  v43 = v42 + 8;
  v44 = (uint64_t)&v42[4];
  v45 = &byte_100198D98;
  do
  {
    v46 = *v45++;
    LOBYTE(aBlock) = v46;
    os_unfair_lock_lock(v43);
    sub_10010CC6C(v44, (unsigned __int8 *)&aBlock);
    os_unfair_lock_unlock(v43);
    --v41;
  }
  while (v41);
  if (qword_1001AD090 != -1)
    swift_once(&qword_1001AD090, sub_10009EF8C);
  v47 = type metadata accessor for OSSignposter(0);
  sub_100003A14(v47, (uint64_t)qword_1001B10F8);
  sub_10003B3B4("reader-vas_read", 15, 2, 0x6176206E69676562, 0xEE00646165722073, (unint64_t)"reader-vas_polling", 18, 2, 0x2073617620646E65uLL, 0xEF676E696C6C6F70, *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_nfSeReaderSession));
  v48 = v212[2];
  if ((unint64_t)(v48 - 2) < 2)
  {
    sub_1000A6EF4(a1);
    if (qword_1001AD090 != -1)
      swift_once(&qword_1001AD090, sub_10009EF8C);
    v49 = sub_100003A14(v47, (uint64_t)qword_1001B10F8);
    v50 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_nfSeReaderSession);
    sub_10003AFE8("reader-vas_read", 15, 2, v50, 0x2073617620646E65, 0xEC00000064616572);
    if ((objc_msgSend(v2, "isCancelled") & 1) != 0)
    {
      if (qword_1001AD088 != -1)
        swift_once(&qword_1001AD088, sub_10009EEFC);
      v51 = type metadata accessor for Logger(0);
      v52 = sub_100003A14(v51, (uint64_t)qword_1001B10E0);
      v53 = Logger.logObject.getter(v52);
      v54 = static os_log_type_t.default.getter();
LABEL_34:
      v57 = v54;
      if (os_log_type_enabled(v53, v54))
      {
        v58 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v58 = 0;
        _os_log_impl((void *)&_mh_execute_header, v53, v57, "ReadOperation isCancelled return from didDetect", v58, 2u);
        swift_slowDealloc(v58, -1, -1);
      }

      return;
    }
    sub_1000A1374();
    v59 = OBJC_IVAR____TtC9SPREngine13ReadOperation_readError;
    v60 = *(void **)((char *)v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError);
    _s3__C4CodeOMa_5(0);
    v62 = v61;
    aBlock = 4020;
    v63 = sub_100005F1C(&qword_1001AD888, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_5, (uint64_t)&unk_10015C3F0);
    v64 = v60;
    LOBYTE(v60) = static _ErrorCodeProtocol.~= infix(_:_:)(&aBlock, v64, v62, v63);

    if ((v60 & 1) != 0)
    {

LABEL_48:
      if (qword_1001AD088 != -1)
        swift_once(&qword_1001AD088, sub_10009EEFC);
      v82 = type metadata accessor for Logger(0);
      sub_100003A14(v82, (uint64_t)qword_1001B10E0);
      v83 = v2;
      v84 = Logger.logObject.getter(v83);
      v85 = static os_log_type_t.default.getter();
      v86 = v85;
      if (os_log_type_enabled(v84, v85))
      {
        LODWORD(v212) = v86;
        v87 = (uint8_t *)swift_slowAlloc(12, -1);
        v88 = swift_slowAlloc(32, -1);
        *(_DWORD *)v87 = 136315138;
        v216 = *(_TtC14softposreaderd12RemoteReader **)((char *)v2 + v59);
        aBlock = v88;
        type metadata accessor for ReadError(0);
        v90 = v89;
        v91 = sub_100005F1C(&qword_1001B1320, (uint64_t (*)(uint64_t))type metadata accessor for ReadError, (uint64_t)&unk_10015AEFC);
        v92 = Error.localizedDescription.getter(v90, v91);
        v94 = (_TtC14softposreaderd12RemoteReader *)v93;
        v216 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(v92, v93, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v216, &aBlock, v87 + 4, v87 + 12);

        swift_bridgeObjectRelease(v94, v95, v96, v97, v98, v99, v100, v101);
        _os_log_impl((void *)&_mh_execute_header, v84, (os_log_type_t)v212, "Restart for %s", v87, 0xCu);
        swift_arrayDestroy(v88, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v88, -1, -1);
        swift_slowDealloc(v87, -1, -1);

      }
      else
      {

      }
      v212 = *(_QWORD **)&v83[OBJC_IVAR____TtC9SPREngine13ReadOperation_queue];
      static DispatchTime.now()(v102);
      v103 = v214;
      + infix(_:_:)(v14);
      v104 = *(void (**)(char *, uint64_t))(v213 + 8);
      v105 = v208;
      v104(v14, v208);
      v106 = swift_allocObject(&unk_10019D140, 24, 7);
      swift_unknownObjectWeakInit(v106 + 16, v83);
      v221 = sub_1000AFC50;
      v222 = v106;
      aBlock = (uint64_t)_NSConcreteStackBlock;
      v218 = 1107296256;
      v107 = &unk_10019D158;
LABEL_65:
      v219 = sub_1000043B8;
      v220 = v107;
      v142 = _Block_copy(&aBlock);
      v143 = swift_retain();
      v144 = v215;
      static DispatchQoS.unspecified.getter(v143);
      v216 = &_swiftEmptyArrayStorage;
      v145 = sub_100005F1C((unint64_t *)&qword_1001B1260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v146 = sub_100003A2C((uint64_t *)&unk_1001AE400);
      v147 = sub_100030828((unint64_t *)&qword_1001B1270, (uint64_t *)&unk_1001AE400, (uint64_t)&protocol conformance descriptor for [A]);
      v148 = v207;
      v149 = v146;
      v150 = v211;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v216, v149, v147, v211, v145);
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v103, v144, v148, v142);
      _Block_release(v142);
      (*(void (**)(char *, uint64_t))(v209 + 8))(v148, v150);
      (*(void (**)(os_log_t, uint64_t))(v206 + 8))(v144, v210);
      v104(v103, v105);
      v151 = v222;
      swift_release(v106);
      swift_release(v151);
      return;
    }
    aBlock = 4042;
    v78 = v64;
    v79 = v63;
    v80 = v78;
    v205 = v79;
    v81 = static _ErrorCodeProtocol.~= infix(_:_:)(&aBlock, v78, v62, v79);

    if ((v81 & 1) != 0)
      goto LABEL_48;
    v211 = v62;
    v213 = v50;
    v215 = v49;
    v131 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics);
    v132 = *(os_unfair_lock_s **)(v131 + 56);
    v133 = v132 + 8;
    v134 = (_TtC14softposreaderd12RemoteReader **)&v132[4];
    LOBYTE(aBlock) = 6;
    os_unfair_lock_lock(v132 + 8);
    sub_10010CC54(v134, (unsigned __int8 *)&aBlock);
    os_unfair_lock_unlock(v133);
    v135 = 1;
    v136 = *(os_unfair_lock_s **)(v131 + 56);
    v137 = v136 + 8;
    v138 = (uint64_t)&v136[4];
    v139 = &byte_100198DE8;
    do
    {
      v140 = *v139++;
      LOBYTE(aBlock) = v140;
      os_unfair_lock_lock(v137);
      sub_10010CC6C(v138, (unsigned __int8 *)&aBlock);
      os_unfair_lock_unlock(v137);
      --v135;
    }
    while (v135);
    v214 = (char *)OBJC_IVAR____TtC9SPREngine13ReadOperation_vasDataFound;
    if ((*((_BYTE *)v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_vasDataFound) & 1) != 0)
      v141 = 1;
    else
      v141 = *((unsigned __int8 *)v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_vasURLOK);
    if (qword_1001AD088 != -1)
      swift_once(&qword_1001AD088, sub_10009EEFC);
    v157 = type metadata accessor for Logger(0);
    v158 = sub_100003A14(v157, (uint64_t)qword_1001B10E0);
    v159 = v2;
    v210 = v158;
    v160 = Logger.logObject.getter(v159);
    v161 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v160, v161))
    {
      v162 = swift_slowAlloc(20, -1);
      *(_DWORD *)v162 = 67109632;
      LODWORD(aBlock) = v141;
      LODWORD(v209) = v141;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v162 + 4, v162 + 8);
      *(_WORD *)(v162 + 8) = 1024;
      LODWORD(aBlock) = v214[(_QWORD)v2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v162 + 10, v162 + 14);
      *(_WORD *)(v162 + 14) = 1024;
      LODWORD(aBlock) = *((unsigned __int8 *)&v159->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_vasURLOK);
      LOBYTE(v141) = v209;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v162 + 16, v162 + 20);

      _os_log_impl((void *)&_mh_execute_header, v160, v161, "vasReadSuccess: %{BOOL}d, vasDataFound: %{BOOL}d, vasURLOK: %{BOOL}d", (uint8_t *)v162, 0x14u);
      swift_slowDealloc(v162, -1, -1);
    }
    else
    {

      v160 = v159;
    }

    *(_BYTE *)(v131 + 122) = v141;
    if (*((_BYTE *)&v159->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_skipLoyalty) == 1)
    {
      if ((*((_BYTE *)&v159->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_paymentDataForthcoming) & 1) != 0)
      {
        v170 = *(_TtC14softposreaderd12RemoteReader **)((char *)&v159->isa
                                                      + OBJC_IVAR____TtC9SPREngine13ReadOperation_vasResponse);
        *(Class *)((char *)&v159->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_vasResponse) = (Class)&_swiftEmptyArrayStorage;
        swift_bridgeObjectRelease(v170, v163, v164, v165, v166, v167, v168, v169);
        sub_1000A34A0(0);
        sub_100005EF8((_QWORD *)(v131 + 16), *(_QWORD *)(v131 + 40));
        sub_10003964C((uint64_t)&off_100198E40);
      }
      else
      {
        objc_msgSend(*(id *)((char *)&v159->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_operationQueue), "cancelAllOperations");
        v175 = (void *)sub_100024764(4027, 0, 0, 0);
        sub_10003AFE8("reader-total_transaction", 24, 2, v213, 0xD000000000000015, 0x800000010016D7F0);
        LOBYTE(aBlock) = 3;
        v176 = *(os_unfair_lock_s **)(v131 + 56);
        v177 = (_TtC14softposreaderd12RemoteReader **)&v176[4];
        v178 = v176 + 8;
        os_unfair_lock_lock(v176 + 8);
        sub_10010CC54(v177, (unsigned __int8 *)&aBlock);
        os_unfair_lock_unlock(v178);
        *(_BYTE *)(v131 + 122) = 0;
        aBlock = (uint64_t)v175;
        type metadata accessor for ReadError(0);
        v180 = v179;
        v181 = sub_100005F1C((unint64_t *)&qword_1001B12D0, (uint64_t (*)(uint64_t))type metadata accessor for ReadError, (uint64_t)&unk_10015C348);
        *(_QWORD *)(v131 + 136) = _BridgedStoredNSError.errorCode.getter(v180, v181);
        sub_100005EF8((_QWORD *)(v131 + 16), *(_QWORD *)(v131 + 40));
        sub_10003964C((uint64_t)&off_100198E18);
        v182 = v175;
        sub_1000B013C((uint64_t)v182);

      }
      return;
    }
    if ((v141 & 1) != 0)
    {
      sub_100005EF8((_QWORD *)(v131 + 16), *(_QWORD *)(v131 + 40));
      sub_10003964C((uint64_t)&off_100198E90);
      if (v212[2] != 2)
      {
        if (v214[(_QWORD)v2] == 1)
        {
LABEL_86:
          v172 = Logger.logObject.getter(v171);
          v173 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v172, v173))
          {
            v174 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v174 = 0;
            _os_log_impl((void *)&_mh_execute_header, v172, v173, "completeOperation()", v174, 2u);
            swift_slowDealloc(v174, -1, -1);
          }

          -[NSObject setExecuting:](v159, "setExecuting:", 0);
          -[NSObject setFinished:](v159, "setFinished:", 1);
          return;
        }
        if (*((_BYTE *)&v159->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_vasURLOK) != 1)
          return;
      }
      if ((*((_BYTE *)&v159->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_paymentDataForthcoming) & 1) == 0)
        goto LABEL_86;
    }
    else
    {
      aBlock = *(_QWORD *)((char *)v2 + v59);
      type metadata accessor for ReadError(0);
      v184 = v183;
      v185 = sub_100005F1C((unint64_t *)&qword_1001B12D0, (uint64_t (*)(uint64_t))type metadata accessor for ReadError, (uint64_t)&unk_10015C348);
      *(_QWORD *)(v131 + 136) = _BridgedStoredNSError.errorCode.getter(v184, v185);
      sub_100005EF8((_QWORD *)(v131 + 16), *(_QWORD *)(v131 + 40));
      sub_10003964C((uint64_t)&off_100198E68);
      v186 = *(void **)((char *)v2 + v59);
      aBlock = 4030;
      v187 = v186;
      v188 = v211;
      v189 = v205;
      v190 = static _ErrorCodeProtocol.~= infix(_:_:)(&aBlock, v187, v211, v205);

      if ((v190 & 1) == 0)
      {
        aBlock = 4021;
        v191 = v187;
        v192 = static _ErrorCodeProtocol.~= infix(_:_:)(&aBlock, v191, v188, v189);

        if ((v192 & 1) != 0)
        {
          if ((*((_BYTE *)&v159->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_paymentDataForthcoming) & 1) != 0)
            goto LABEL_94;
          v197 = Logger.logObject.getter(v193);
          v198 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v197, v198))
          {
            v199 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v199 = 0;
            _os_log_impl((void *)&_mh_execute_header, v197, v198, "vasDataNotFound and no paymentDataForthcoming", v199, 2u);
            swift_slowDealloc(v199, -1, -1);
          }

          LOBYTE(aBlock) = 3;
          v200 = *(os_unfair_lock_s **)(v131 + 56);
          v201 = (_TtC14softposreaderd12RemoteReader **)&v200[4];
          v202 = v200 + 8;
          os_unfair_lock_lock(v200 + 8);
          sub_10010CC54(v201, (unsigned __int8 *)&aBlock);
          os_unfair_lock_unlock(v202);
          sub_10003AFE8("reader-total_transaction", 24, 2, v213, 0xD000000000000015, 0x800000010016D7F0);
          objc_msgSend(*(id *)((char *)&v159->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_operationQueue), "cancelAllOperations");
        }
        else
        {
          LOBYTE(aBlock) = 3;
          v194 = *(os_unfair_lock_s **)(v131 + 56);
          v195 = (_TtC14softposreaderd12RemoteReader **)&v194[4];
          v196 = v194 + 8;
          os_unfair_lock_lock(v194 + 8);
          sub_10010CC54(v195, (unsigned __int8 *)&aBlock);
          os_unfair_lock_unlock(v196);
          sub_10003AFE8("reader-total_transaction", 24, 2, v213, 0xD000000000000015, 0x800000010016D7F0);
          objc_msgSend(*(id *)((char *)&v159->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_operationQueue), "cancelAllOperations");
        }
        v203 = *(id *)((char *)v2 + v59);
        sub_1000B013C((uint64_t)v203);

        return;
      }

    }
LABEL_94:
    sub_1000A34A0(0);
    return;
  }
  if (v48 != 1)
  {
    if (v48)
    {
      type metadata accessor for SPRReaderMode(0);
      aBlock = v48;
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v204, &aBlock, v204, &type metadata for Int);
      __break(1u);
      return;
    }
    goto LABEL_40;
  }
  sub_1000A6EF4(a1);
  if (qword_1001AD090 != -1)
    swift_once(&qword_1001AD090, sub_10009EF8C);
  sub_100003A14(v47, (uint64_t)qword_1001B10F8);
  sub_10003AFE8("reader-vas_read", 15, 2, *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_nfSeReaderSession), 0x2073617620646E65, 0xEC00000064616572);
  if ((objc_msgSend(v2, "isCancelled") & 1) != 0)
  {
    if (qword_1001AD088 != -1)
      swift_once(&qword_1001AD088, sub_10009EEFC);
    v55 = type metadata accessor for Logger(0);
    v56 = sub_100003A14(v55, (uint64_t)qword_1001B10E0);
    v53 = Logger.logObject.getter(v56);
    v54 = static os_log_type_t.info.getter();
    goto LABEL_34;
  }
  sub_1000A1374();
  v72 = OBJC_IVAR____TtC9SPREngine13ReadOperation_readError;
  v73 = *(void **)((char *)v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError);
  _s3__C4CodeOMa_5(0);
  v75 = v74;
  aBlock = 4020;
  v76 = sub_100005F1C(&qword_1001AD888, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_5, (uint64_t)&unk_10015C3F0);
  v77 = v73;
  LOBYTE(v73) = static _ErrorCodeProtocol.~= infix(_:_:)(&aBlock, v77, v75, v76);

  if ((v73 & 1) != 0)
  {

LABEL_55:
    if (qword_1001AD088 != -1)
      swift_once(&qword_1001AD088, sub_10009EEFC);
    v110 = type metadata accessor for Logger(0);
    sub_100003A14(v110, (uint64_t)qword_1001B10E0);
    v111 = v2;
    v112 = Logger.logObject.getter(v111);
    v113 = static os_log_type_t.default.getter();
    v114 = v113;
    if (os_log_type_enabled(v112, v113))
    {
      LODWORD(v212) = v114;
      v115 = (uint8_t *)swift_slowAlloc(12, -1);
      v116 = swift_slowAlloc(32, -1);
      *(_DWORD *)v115 = 136315138;
      v216 = *(_TtC14softposreaderd12RemoteReader **)((char *)v2 + v72);
      aBlock = v116;
      type metadata accessor for ReadError(0);
      v118 = v117;
      v119 = sub_100005F1C(&qword_1001B1320, (uint64_t (*)(uint64_t))type metadata accessor for ReadError, (uint64_t)&unk_10015AEFC);
      v120 = Error.localizedDescription.getter(v118, v119);
      v122 = (_TtC14softposreaderd12RemoteReader *)v121;
      v216 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(v120, v121, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v216, &aBlock, v115 + 4, v115 + 12);

      swift_bridgeObjectRelease(v122, v123, v124, v125, v126, v127, v128, v129);
      _os_log_impl((void *)&_mh_execute_header, v112, (os_log_type_t)v212, "Restart for %s", v115, 0xCu);
      swift_arrayDestroy(v116, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v116, -1, -1);
      swift_slowDealloc(v115, -1, -1);

    }
    else
    {

    }
    v212 = *(_QWORD **)&v111[OBJC_IVAR____TtC9SPREngine13ReadOperation_queue];
    static DispatchTime.now()(v130);
    v103 = v214;
    + infix(_:_:)(v14);
    v104 = *(void (**)(char *, uint64_t))(v213 + 8);
    v105 = v208;
    v104(v14, v208);
    v106 = swift_allocObject(&unk_10019D140, 24, 7);
    swift_unknownObjectWeakInit(v106 + 16, v111);
    v221 = sub_1000AFC50;
    v222 = v106;
    aBlock = (uint64_t)_NSConcreteStackBlock;
    v218 = 1107296256;
    v107 = &unk_10019D180;
    goto LABEL_65;
  }
  aBlock = 4042;
  v108 = v77;
  v109 = static _ErrorCodeProtocol.~= infix(_:_:)(&aBlock, v108, v75, v76);

  if ((v109 & 1) != 0)
    goto LABEL_55;
  if (qword_1001AD088 != -1)
    swift_once(&qword_1001AD088, sub_10009EEFC);
  v152 = type metadata accessor for Logger(0);
  v153 = sub_100003A14(v152, (uint64_t)qword_1001B10E0);
  v154 = Logger.logObject.getter(v153);
  v155 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v154, v155))
  {
    v156 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v156 = 0;
    _os_log_impl((void *)&_mh_execute_header, v154, v155, "completeOperation()", v156, 2u);
    swift_slowDealloc(v156, -1, -1);
  }

  objc_msgSend(v2, "setExecuting:", 0);
  objc_msgSend(v2, "setFinished:", 1);
}

void sub_1000A6E9C(uint64_t a1)
{
  uint64_t v1;
  void *Strong;
  void *v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    objc_msgSend(Strong, "start");

  }
}

void sub_1000A6EF4(uint64_t a1)
{
  uint8_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint8_t *v15;
  _TtC14softposreaderd12RemoteReader *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  const char *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint8_t *v28;
  _TtC14softposreaderd12RemoteReader *v29;
  uint64_t v30;
  uint64_t v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  _TtC14softposreaderd12RemoteReader *v47;
  SEL v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  unint64_t v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  _TtC14softposreaderd12RemoteReader *v70;
  void *v71;
  id v72;
  void *v73;
  unsigned int v74;
  _TtC14softposreaderd12RemoteReader *v75;
  NSObject *v76;
  NSObject *v77;
  os_log_type_t v78;
  void *v79;
  uint8_t *v80;
  uint64_t v81;
  _TtC14softposreaderd12RemoteReader *v82;
  _TtC14softposreaderd12RemoteReader *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  _TtC14softposreaderd12RemoteReader *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _TtC14softposreaderd12RemoteReader *v94;
  SEL v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  _TtC14softposreaderd12RemoteReader *v104;
  uint64_t v105;
  NSObject *v106;
  os_log_type_t v107;
  uint8_t *v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  SEL v112;
  id v113;
  id v114;
  id v115;
  id v116;
  id v117;
  id v118;
  SEL v119;
  id v120;
  id v121;
  id v122;
  id v123;
  id v124;
  id v125;
  id v126;
  _TtC14softposreaderd12RemoteReader *v127;
  id v128;
  uint64_t v129;
  uint64_t v130;
  SEL v131;
  id v132;
  id v133;
  id v134;
  id v135;
  id v136;
  id v137;
  Class isa;
  id v139;
  _TtC14softposreaderd12RemoteReader *v140;
  uint64_t v141;
  uint64_t v142;
  _TtC14softposreaderd12RemoteReader *v143;
  const char *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  _TtC14softposreaderd12RemoteReader *v151;
  _TtC14softposreaderd12RemoteReader *v152;
  uint64_t v153;
  NSObject *v154;
  os_log_type_t v155;
  uint8_t *v156;
  uint64_t v157;
  uint64_t v158;
  _TtC14softposreaderd12RemoteReader *v159;
  SEL v160;
  id v161;
  id v162;
  id v163;
  id v164;
  id v165;
  id v166;
  const char *v167;
  void *v168;
  void *v169;
  void *v170;
  void *v171;
  void *v172;
  void *v173;
  SEL v174;
  id v175;
  id v176;
  id v177;
  id v178;
  id v179;
  id v180;
  uint64_t v181;
  _TtC14softposreaderd12RemoteReader *v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  uint64_t v187;
  NSObject *v188;
  os_log_type_t v189;
  uint8_t *v190;
  _TtC14softposreaderd12RemoteReader *v191;
  uint64_t v192;
  uint64_t v193;
  id v194;
  unint64_t v195;
  _TtC14softposreaderd12RemoteReader *v196;
  _TtC14softposreaderd12RemoteReader *v197;
  SEL v198;
  id v199;
  id v200;
  id v201;
  id v202;
  id v203;
  id v204;
  SEL v205;
  id v206;
  id v207;
  id v208;
  id v209;
  id v210;
  id v211;
  void *v212;
  id v213;
  uint64_t v214;
  _TtC14softposreaderd12RemoteReader *v215;
  _TtC14softposreaderd12RemoteReader *v216;
  _TtC14softposreaderd12RemoteReader *v217;
  uint64_t v218;
  _TtC14softposreaderd12RemoteReader *v219;
  char v220;
  SEL v221;
  id v222;
  id v223;
  id v224;
  id v225;
  id v226;
  id v227;
  SEL v228;
  id v229;
  id v230;
  id v231;
  id v232;
  id v233;
  id v234;
  uint64_t v235;
  void *v236;
  uint64_t v237;
  NSObject *v238;
  os_log_type_t v239;
  uint8_t *v240;
  uint64_t v241;
  void *v242;
  uint64_t v243;
  NSObject *v244;
  os_log_type_t v245;
  uint8_t *v246;
  SEL v247;
  id v248;
  id v249;
  id v250;
  id v251;
  id v252;
  id v253;
  uint64_t v254;
  void *v255;
  uint64_t v256;
  void *v257;
  NSObject *v258;
  os_log_type_t v259;
  uint8_t *v260;
  unsigned int v261;
  id v262;
  id v263;
  id v264;
  void *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  id v269;
  NSObject *v270;
  os_log_type_t v271;
  uint8_t *v272;
  uint64_t v273;
  id v274;
  id v275;
  uint64_t v276;
  _TtC14softposreaderd12RemoteReader *v277;
  _TtC14softposreaderd12RemoteReader *v278;
  SEL v279;
  id v280;
  id v281;
  id v282;
  id v283;
  id v284;
  id v285;
  uint64_t v286;
  SEL v287;
  id v288;
  id v289;
  id v290;
  id v291;
  id v292;
  id v293;
  const char *v294;
  void *v295;
  void *v296;
  void *v297;
  void *v298;
  void *v299;
  void *v300;
  int v301;
  _TtC14softposreaderd12RemoteReader *v302;
  uint64_t v303;
  void *v304;
  uint64_t v305;
  SEL v306;
  id v307;
  id v308;
  id v309;
  id v310;
  id v311;
  id v312;
  uint64_t v313;
  SEL v314;
  id v315;
  id v316;
  id v317;
  id v318;
  id v319;
  id v320;
  uint64_t v321;
  NSObject *v322;
  os_log_type_t v323;
  uint64_t v324;
  SEL v325;
  id v326;
  id v327;
  id v328;
  id v329;
  id v330;
  id v331;
  SEL v332;
  id v333;
  id v334;
  id v335;
  id v336;
  id v337;
  id v338;
  SEL v339;
  id v340;
  id v341;
  id v342;
  id v343;
  id v344;
  id v345;
  SEL v346;
  id v347;
  id v348;
  id v349;
  id v350;
  id v351;
  id v352;
  uint64_t v353;
  SEL v354;
  id v355;
  id v356;
  id v357;
  id v358;
  id v359;
  id v360;
  uint64_t v361;
  uint64_t v362;
  char *v363;
  void *v364;
  void *v365;
  uint64_t v366;
  id v367;
  char v368;
  __int16 v369;
  id v370;
  _BYTE v371[16];
  uint64_t v372;
  _TtC14softposreaderd12RemoteReader *v373;
  uint64_t v374;

  v2 = (uint8_t *)((unint64_t)a1 >> 62);
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v305 = a1;
    else
      v305 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter(v305);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, v306, v307, v308, v309, v310, v311, v312);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v3)
  {
    if (qword_1001AD088 == -1)
    {
LABEL_10:
      v17 = type metadata accessor for Logger(0);
      sub_100003A14(v17, (uint64_t)qword_1001B10E0);
      v18 = swift_bridgeObjectRetain_n(a1, 2);
      v19 = Logger.logObject.getter(v18);
      v20 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v20))
      {
        v28 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v28 = 134217984;
        if (v2)
        {
          if (a1 < 0)
            v111 = a1;
          else
            v111 = a1 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain();
          v29 = (_TtC14softposreaderd12RemoteReader *)_CocoaArrayWrapper.endIndex.getter(v111);
          swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, v112, v113, v114, v115, v116, v117, v118);
        }
        else
        {
          v29 = *(_TtC14softposreaderd12RemoteReader **)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, v21, v22, v23, v24, v25, v26, v27);
        v373 = v29;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v373, &v374, v28 + 4, v28 + 12);
        swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, v119, v120, v121, v122, v123, v124, v125);
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "tags.count is %ld, not > 0", v28, 0xCu);
        swift_slowDealloc(v28, -1, -1);

        return;
      }

      v30 = a1;
LABEL_111:
      swift_bridgeObjectRelease_n(v30, 2);
      return;
    }
LABEL_103:
    swift_once(&qword_1001AD088, sub_10009EEFC);
    goto LABEL_10;
  }
  if (qword_1001AD088 != -1)
    swift_once(&qword_1001AD088, sub_10009EEFC);
  v4 = type metadata accessor for Logger(0);
  sub_100003A14(v4, (uint64_t)qword_1001B10E0);
  v5 = swift_bridgeObjectRetain_n(a1, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v15 = 134217984;
    if (v2)
    {
      if (a1 < 0)
        v31 = a1;
      else
        v31 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v16 = (_TtC14softposreaderd12RemoteReader *)_CocoaArrayWrapper.endIndex.getter(v31);
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, v32, v33, v34, v35, v36, v37, v38);
    }
    else
    {
      v16 = *(_TtC14softposreaderd12RemoteReader **)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, v8, v9, v10, v11, v12, v13, v14);
    v373 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v373, &v374, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, v39, v40, v41, v42, v43, v44, v45);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Number of NFTag detected from VAS-type polling: %ld", v15, 0xCu);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
  v46 = swift_bridgeObjectRetain();
  v47 = sub_1000A828C(v46);
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, v48, v49, v50, v51, v52, v53, v54);
  v373 = v47;
  v55 = sub_100003A2C((uint64_t *)&unk_1001AE460);
  v56 = sub_100030828((unint64_t *)&qword_1001B12B0, (uint64_t *)&unk_1001AE460, (uint64_t)&protocol conformance descriptor for [A]);
  v57 = BidirectionalCollection<>.joined(separator:)(10, 0xE100000000000000, v55, v56);
  v59 = (unint64_t)v58;
  swift_bridgeObjectRelease(v47, v58, v60, v61, v62, v63, v64, v65);
  v66 = swift_bridgeObjectRetain();
  v67 = Logger.logObject.getter(v66);
  v68 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v67, v68))
  {
    v69 = (uint8_t *)swift_slowAlloc(12, -1);
    v70 = (_TtC14softposreaderd12RemoteReader *)swift_slowAlloc(32, -1);
    v373 = v70;
    *(_DWORD *)v69 = 136315138;
    v2 = v69 + 4;
    swift_bridgeObjectRetain();
    v370 = (id)sub_1000056EC(v57, v59, (uint64_t *)&v373);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v370, v371, v69 + 4, v69 + 12);
    swift_bridgeObjectRelease_n(v59, 3);
    _os_log_impl((void *)&_mh_execute_header, v67, v68, "%s... Attempt connect to tag #0 ...", v69, 0xCu);
    swift_arrayDestroy(v70, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v70, -1, -1);
    swift_slowDealloc(v69, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v59, 2);
  }
  v71 = *(void **)&v363[OBJC_IVAR____TtC9SPREngine13ReadOperation_nfSeReaderSession];
  if ((a1 & 0xC000000000000001) != 0)
  {
    v72 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    goto LABEL_26;
  }
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_103;
  }
  v72 = *(id *)(a1 + 32);
LABEL_26:
  v73 = v72;
  v373 = 0;
  v74 = objc_msgSend(v71, "connectTag:error:", v72, &v373);

  v75 = v373;
  if (!v74)
  {
    v83 = v373;
    v84 = (void *)_convertNSErrorToError(_:)(v75);

    swift_willThrow(v85);
    swift_errorRetain();
    v86 = swift_errorRetain();
    v87 = Logger.logObject.getter(v86);
    v88 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v87, v88))
    {
      v89 = (uint8_t *)swift_slowAlloc(12, -1);
      v90 = (_TtC14softposreaderd12RemoteReader *)swift_slowAlloc(32, -1);
      v373 = v90;
      *(_DWORD *)v89 = 136315138;
      v370 = v84;
      swift_errorRetain();
      v91 = sub_100003A2C((uint64_t *)&unk_1001B1280);
      v92 = String.init<A>(describing:)(&v370, v91);
      v94 = (_TtC14softposreaderd12RemoteReader *)v93;
      v370 = (id)sub_1000056EC(v92, v93, (uint64_t *)&v373);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v370, v371, v89 + 4, v89 + 12);
      swift_bridgeObjectRelease(v94, v95, v96, v97, v98, v99, v100, v101);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v87, v88, "connect(_ tag: NFTag) Error: %s", v89, 0xCu);
      swift_arrayDestroy(v90, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v90, -1, -1);
      swift_slowDealloc(v89, -1, -1);

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

    }
    return;
  }
  v76 = v363;
  v77 = Logger.logObject.getter(v75);
  v78 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v77, v78))
  {
    v79 = v71;
    v80 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v80 = 134217984;
    v81 = (*(_QWORD **)((char *)&v76->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_readerConfig))[3];
    if ((unint64_t)v81 >> 62)
    {
      if (v81 < 0)
        v353 = (*(_QWORD **)((char *)&v76->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_readerConfig))[3];
      else
        v353 = v81 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v82 = (_TtC14softposreaderd12RemoteReader *)_CocoaArrayWrapper.endIndex.getter(v353);

      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v81, v354, v355, v356, v357, v358, v359, v360);
    }
    else
    {
      v82 = *(_TtC14softposreaderd12RemoteReader **)((v81 & 0xFFFFFFFFFFFFF8) + 0x10);

    }
    v373 = v82;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v373, &v374, v80 + 4, v80 + 12);

    _os_log_impl((void *)&_mh_execute_header, v77, v78, "Connected to tag #0. Preparing %ld VAS requests.", v80, 0xCu);
    swift_slowDealloc(v80, -1, -1);
    v71 = v79;
  }
  else
  {

    v77 = v76;
  }

  v103 = *(uint64_t *)((char *)&v76->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_readerConfig);
  v104 = *(_TtC14softposreaderd12RemoteReader **)(v103 + 16);
  v105 = 0;
  switch((unint64_t)v104)
  {
    case 0uLL:
      v106 = Logger.logObject.getter(v102);
      v107 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v106, v107))
      {
        v108 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v108 = 0;
        _os_log_impl((void *)&_mh_execute_header, v106, v107, "Payment mode is invalid here", v108, 2u);
        swift_slowDealloc(v108, -1, -1);
      }

      v109 = sub_100024764(4017, 0, 0, 0);
      v110 = *(Class *)((char *)&v76->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError);
      *(Class *)((char *)&v76->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError) = (Class)v109;

      return;
    case 1uLL:
      v105 = 2;
      goto LABEL_46;
    case 2uLL:
      v105 = 1;
      goto LABEL_46;
    case 3uLL:
LABEL_46:
      v126 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedChar:", v105);
      v127 = *(_TtC14softposreaderd12RemoteReader **)(v103 + 24);
      v128 = v126;
      v129 = swift_bridgeObjectRetain();
      v130 = (uint64_t)sub_1000AED10(v129, v128);
      swift_bridgeObjectRelease(v127, v131, v132, v133, v134, v135, v136, v137);

      sub_100005E24(0, &qword_1001B12E8, NFVASRequest_ptr);
      isa = Array._bridgeToObjectiveC()().super.isa;
      v373 = 0;
      v364 = v71;
      v139 = objc_msgSend(v71, "performVAS:error:", isa, &v373);

      v140 = v373;
      if (!v139)
      {
        v182 = v373;
        v183 = (void *)_convertNSErrorToError(_:)(v140);

        swift_willThrow(v184);
        v185 = sub_100024764(4029, 0, 0, 0);
        v186 = *(Class *)((char *)&v76->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError);
        v362 = OBJC_IVAR____TtC9SPREngine13ReadOperation_readError;
        *(Class *)((char *)&v76->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError) = (Class)v185;

        swift_errorRetain();
        v187 = swift_errorRetain();
        v188 = Logger.logObject.getter(v187);
        v189 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v188, v189))
        {
          v190 = (uint8_t *)swift_slowAlloc(12, -1);
          v191 = (_TtC14softposreaderd12RemoteReader *)swift_slowAlloc(32, -1);
          v373 = v191;
          *(_DWORD *)v190 = 136315138;
          v370 = v183;
          swift_errorRetain();
          v192 = sub_100003A2C((uint64_t *)&unk_1001B1280);
          v193 = String.init<A>(describing:)(&v370, v192);
          v194 = v128;
          v196 = (_TtC14softposreaderd12RemoteReader *)v195;
          v370 = (id)sub_1000056EC(v193, v195, (uint64_t *)&v373);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v370, v371, v190 + 4, v190 + 12);
          v197 = v196;
          v128 = v194;
          swift_bridgeObjectRelease(v197, v198, v199, v200, v201, v202, v203, v204);
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v188, v189, "performVAS Error: %s", v190, 0xCu);
          swift_arrayDestroy(v191, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v191, -1, -1);
          swift_slowDealloc(v190, -1, -1);
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
        }

        v212 = (void *)_convertErrorToNSError(_:)(v183);
        v213 = objc_msgSend(v212, "domain");
        v214 = static String._unconditionallyBridgeFromObjectiveC(_:)(v213);
        v216 = v215;

        v218 = String.init(cString:)("nfcd");
        v219 = v217;
        if (v214 == v218 && v216 == v217)
        {
          swift_bridgeObjectRelease_n(v216, 2);
        }
        else
        {
          v220 = _stringCompareWithSmolCheck(_:_:expecting:)(v214, v216, v218, v217, 0);
          swift_bridgeObjectRelease(v216, v221, v222, v223, v224, v225, v226, v227);
          swift_bridgeObjectRelease(v219, v228, v229, v230, v231, v232, v233, v234);
          if ((v220 & 1) == 0)
            goto LABEL_71;
        }
        if (objc_msgSend(v212, "code") == (id)29)
        {
          v235 = sub_100024764(4042, 0, 0, 0);
          v236 = *(Class *)((char *)&v76->isa + v362);
          *(Class *)((char *)&v76->isa + v362) = (Class)v235;

          v238 = Logger.logObject.getter(v237);
          v239 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v238, v239))
          {
            v240 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v240 = 0;
            _os_log_impl((void *)&_mh_execute_header, v238, v239, "readError set: vasTagError", v240, 2u);
            swift_slowDealloc(v240, -1, -1);
          }

        }
        if (objc_msgSend(v212, "code") == (id)65)
        {
          v241 = sub_100024764(4030, 0, 0, 0);
          v242 = *(Class *)((char *)&v76->isa + v362);
          *(Class *)((char *)&v76->isa + v362) = (Class)v241;

          v244 = Logger.logObject.getter(v243);
          v245 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v244, v245))
          {
            v246 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v246 = 0;
            _os_log_impl((void *)&_mh_execute_header, v244, v245, "readError set: vasSelectOSE", v246, 2u);
            swift_slowDealloc(v246, -1, -1);

            swift_errorRelease();
            goto LABEL_86;
          }
          swift_errorRelease();

LABEL_85:
LABEL_86:
          v142 = (uint64_t)&_swiftEmptyArrayStorage;
          if (!((unint64_t)&_swiftEmptyArrayStorage >> 62))
            goto LABEL_48;
          goto LABEL_87;
        }
LABEL_71:
        swift_errorRelease();
        goto LABEL_85;
      }
      v141 = sub_100005E24(0, (unint64_t *)&unk_1001B12F0, NFVASResponse_ptr);
      v142 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v139, v141);
      v143 = v140;

      if (!((unint64_t)v142 >> 62))
      {
LABEL_48:
        v151 = *(_TtC14softposreaderd12RemoteReader **)((v142 & 0xFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_49;
      }
LABEL_87:
      if (v142 < 0)
        v286 = v142;
      else
        v286 = v142 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v151 = (_TtC14softposreaderd12RemoteReader *)_CocoaArrayWrapper.endIndex.getter(v286);
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v142, v287, v288, v289, v290, v291, v292, v293);
LABEL_49:
      if (!((unint64_t)v130 >> 62))
      {
        v152 = *(_TtC14softposreaderd12RemoteReader **)((v130 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v151 == v152)
          goto LABEL_51;
        goto LABEL_108;
      }
      if (v130 < 0)
        v313 = v130;
      else
        v313 = v130 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v152 = (_TtC14softposreaderd12RemoteReader *)_CocoaArrayWrapper.endIndex.getter(v313);
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v130, v314, v315, v316, v317, v318, v319, v320);
      if (v151 != v152)
      {
LABEL_108:
        swift_bridgeObjectRetain();
        v321 = swift_bridgeObjectRetain();
        v322 = Logger.logObject.getter(v321);
        v323 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v322, v323))
        {
          v324 = swift_slowAlloc(22, -1);
          *(_DWORD *)v324 = 134218240;
          swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v142, v325, v326, v327, v328, v329, v330, v331);
          v373 = v151;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v373, &v374, v324 + 4, v324 + 12);
          swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v142, v332, v333, v334, v335, v336, v337, v338);
          *(_WORD *)(v324 + 12) = 2048;
          swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v130, v339, v340, v341, v342, v343, v344, v345);
          v373 = v152;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v373, &v374, v324 + 14, v324 + 22);
          swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v130, v346, v347, v348, v349, v350, v351, v352);
          _os_log_impl((void *)&_mh_execute_header, v322, v323, "responses.count: %ld, vasRequests.count: %ld, Error: Number of VAS Responses not equal to Requests", (uint8_t *)v324, 0x16u);
          swift_slowDealloc(v324, -1, -1);

          return;
        }

        swift_bridgeObjectRelease_n(v142, 2);
        v30 = v130;
        goto LABEL_111;
      }
LABEL_51:
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v130, v144, v145, v146, v147, v148, v149, v150);
      v369 = 0;
      v373 = 0;
      v368 = 0;
      v154 = Logger.logObject.getter(v153);
      v155 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v154, v155))
      {
        v156 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v156 = 0;
        _os_log_impl((void *)&_mh_execute_header, v154, v155, " --- VAS Responses ---", v156, 2u);
        swift_slowDealloc(v156, -1, -1);
      }

      __chkstk_darwin(v157);
      v158 = swift_bridgeObjectRetain();
      v159 = (_TtC14softposreaderd12RemoteReader *)sub_1000AF9DC(v158, (uint64_t (*)(unint64_t, id))sub_1000AFC1C);
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v142, v160, v161, v162, v163, v164, v165, v166);
      if (HIBYTE(v369) == 1)
      {
        swift_bridgeObjectRelease(v159, v167, v168, v169, v170, v171, v172, v173);
        swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v142, v174, v175, v176, v177, v178, v179, v180);
        v181 = 4020;
LABEL_74:
        v254 = sub_100024764(v181, 0, 0, 0);
        v255 = *(Class *)((char *)&v76->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError);
        *(Class *)((char *)&v76->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError) = (Class)v254;

        goto LABEL_75;
      }
      if (v369 == 1)
      {
        swift_bridgeObjectRelease(v159, v167, v168, v169, v170, v171, v172, v173);
        swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v142, v205, v206, v207, v208, v209, v210, v211);
        v181 = 4022;
        goto LABEL_74;
      }
      if (v368 == 1)
      {
        swift_bridgeObjectRelease(v159, v167, v168, v169, v170, v171, v172, v173);
        swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v142, v247, v248, v249, v250, v251, v252, v253);
        v181 = 4012;
        goto LABEL_74;
      }
      if (*((_BYTE *)&v76->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_vasDataFound) == 1)
      {
        swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v142, v167, v168, v169, v170, v171, v172, v173);
      }
      else
      {
        v301 = *((unsigned __int8 *)&v76->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_vasURLOK);
        swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v142, v167, v168, v169, v170, v171, v172, v173);
        if (v301 != 1)
        {
          swift_bridgeObjectRelease(v159, v294, v295, v296, v297, v298, v299, v300);
          v257 = v364;
          if (v373 == v151)
          {
            v303 = sub_100024764(4021, 0, 0, 0);
            v304 = *(Class *)((char *)&v76->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError);
            *(Class *)((char *)&v76->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError) = (Class)v303;

          }
          goto LABEL_76;
        }
      }
      v302 = *(_TtC14softposreaderd12RemoteReader **)((char *)&v76->isa
                                                    + OBJC_IVAR____TtC9SPREngine13ReadOperation_vasResponse);
      *(Class *)((char *)&v76->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_vasResponse) = (Class)v159;
      swift_bridgeObjectRelease(v302, v294, v295, v296, v297, v298, v299, v300);
LABEL_75:
      v257 = v364;
LABEL_76:
      v258 = Logger.logObject.getter(v256);
      v259 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v258, v259))
      {
        v260 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v260 = 0;
        _os_log_impl((void *)&_mh_execute_header, v258, v259, "disconnectTag()", v260, 2u);
        swift_slowDealloc(v260, -1, -1);
      }

      v370 = 0;
      v261 = objc_msgSend(v257, "disconnectTag:", &v370);
      v262 = v370;
      if (v261)
      {
        v263 = v370;

      }
      else
      {
        v365 = v128;
        v264 = v370;
        v265 = (void *)_convertNSErrorToError(_:)(v262);

        swift_willThrow(v266);
        v370 = v265;
        v267 = sub_100003A2C((uint64_t *)&unk_1001B1280);
        v268 = sub_100005E24(0, (unint64_t *)&qword_1001AE420, NSError_ptr);
        swift_dynamicCast(&v367, &v370, v267, v268, 0);
        v269 = v367;
        v270 = Logger.logObject.getter(v269);
        v271 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v270, v271))
        {
          v272 = (uint8_t *)swift_slowAlloc(12, -1);
          v273 = swift_slowAlloc(32, -1);
          v372 = v273;
          *(_DWORD *)v272 = 136315138;
          v274 = v269;
          v275 = objc_msgSend(v274, "description");
          v276 = static String._unconditionallyBridgeFromObjectiveC(_:)(v275);
          v278 = v277;

          v366 = sub_1000056EC(v276, (unint64_t)v278, &v372);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v366, &v367, v272 + 4, v272 + 12);

          swift_bridgeObjectRelease(v278, v279, v280, v281, v282, v283, v284, v285);
          _os_log_impl((void *)&_mh_execute_header, v270, v271, "disconnectTag Error: %s", v272, 0xCu);
          swift_arrayDestroy(v273, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v273, -1, -1);
          swift_slowDealloc(v272, -1, -1);

        }
        else
        {

        }
        swift_errorRelease();
      }
      return;
    default:
      type metadata accessor for SPRReaderMode(0);
      v373 = v104;
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v361, &v373, v361, &type metadata for Int);
      __break(1u);
      JUMPOUT(0x1000A827CLL);
  }
}

_TtC14softposreaderd12RemoteReader *sub_1000A828C(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unint64_t v10;
  id v11;
  void *v12;
  unint64_t v13;
  Swift::String v14;
  _TtC14softposreaderd12RemoteReader *object;
  SEL v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  Swift::String v23;
  id v24;
  uint64_t v25;
  _TtC14softposreaderd12RemoteReader *v26;
  _TtC14softposreaderd12RemoteReader *v27;
  Swift::String v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  _TtC14softposreaderd12RemoteReader *v41;
  uint64_t v42;
  unint64_t v43;

  sub_100091C44(0, 0, 0);
  if ((unint64_t)a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v2)
  {
    while (1)
    {
      v10 = 0;
      v42 = a1 & 0xFFFFFFFFFFFFFF8;
      v43 = a1 & 0xC000000000000001;
      v41 = (_TtC14softposreaderd12RemoteReader *)a1;
      while (v43)
      {
        v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, a1);
LABEL_7:
        v12 = v11;
        v13 = v10 + 1;
        if (__OFADD__(v10, 1))
          goto LABEL_14;
        v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        object = (_TtC14softposreaderd12RemoteReader *)v14._object;
        String.append(_:)(v14);
        swift_bridgeObjectRelease(object, v16, v17, v18, v19, v20, v21, v22);
        v23._countAndFlagsBits = 8250;
        v23._object = (void *)0xE200000000000000;
        String.append(_:)(v23);
        v24 = objc_msgSend(v12, "description");
        v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
        v27 = v26;

        v28._countAndFlagsBits = v25;
        v28._object = v27;
        String.append(_:)(v28);

        swift_bridgeObjectRelease(v27, v29, v30, v31, v32, v33, v34, v35);
        v37 = *(_QWORD *)&_swiftEmptyArrayStorage.instance[8];
        v36 = *(_QWORD *)&_swiftEmptyArrayStorage.instance[16];
        if (v37 >= v36 >> 1)
          sub_100091C44(v36 > 1, v37 + 1, 1);
        *(_QWORD *)&_swiftEmptyArrayStorage.instance[8] = v37 + 1;
        v38 = (char *)&_swiftEmptyArrayStorage + 16 * v37;
        *((_QWORD *)v38 + 4) = 0x2067617420534156;
        *((_QWORD *)v38 + 5) = 0xE900000000000023;
        ++v10;
        a1 = (uint64_t)v41;
        if (v13 == v2)
          goto LABEL_19;
      }
      if (v10 < *(_QWORD *)(v42 + 16))
        break;
      __break(1u);
LABEL_14:
      __break(1u);
LABEL_15:
      if (a1 < 0)
        v39 = a1;
      else
        v39 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v2 = _CocoaArrayWrapper.endIndex.getter(v39);
      if (!v2)
        goto LABEL_19;
    }
    v11 = *(id *)(a1 + 8 * v10 + 32);
    goto LABEL_7;
  }
LABEL_19:
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, v3, v4, v5, v6, v7, v8, v9);
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_1000A84A0@<X0>(void **a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  id v19;
  NSString v20;
  _TtC14softposreaderd12RemoteReader *v21;
  _TtC14softposreaderd12RemoteReader *v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  objc_class *v31;
  Class isa;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  char *v36;
  void *v37;
  uint64_t v38;
  id v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  id v43;
  void *v44;
  void *v45;
  uint8_t *v46;
  void (*v47)(char *, uint64_t, uint64_t, uint64_t);
  NSURL *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  id v54;
  id v55;
  NSObject *v56;
  int v57;
  uint64_t v58;
  _QWORD *v59;
  id v60;
  uint64_t v61;
  void *v62;
  _TtC14softposreaderd12RemoteReader *v63;
  _TtC14softposreaderd12RemoteReader *v64;
  SEL v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  uint64_t v74;
  _TtC14softposreaderd12RemoteReader *v75;
  _TtC14softposreaderd12RemoteReader *v76;
  SEL v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  void *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  NSObject *v89;
  uint64_t v90;
  _TtC14softposreaderd12RemoteReader *v91;
  _TtC14softposreaderd12RemoteReader *v92;
  SEL v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  id v103;
  uint64_t v104;
  char *v105;
  void *v106;
  uint8_t *v107;
  void (*v108)(uint64_t, uint8_t *, char *);
  char *v109;
  uint64_t v110;
  NSObject *v111;
  os_log_type_t v112;
  uint8_t *v113;
  char *v114;
  uint64_t v115;
  uint8_t *v116;
  id v117;
  uint8_t *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  _TtC14softposreaderd12RemoteReader *v123;
  uint8_t *v124;
  SEL v125;
  id v126;
  id v127;
  id v128;
  id v129;
  id v130;
  id v131;
  void (*v132)(char *, char *);
  char *v133;
  uint8_t *v134;
  uint64_t result;
  void (*v136)(char *, char *);
  NSObject *v137;
  int v138;
  _QWORD *v139;
  uint64_t v140;
  void (*v141)(char *, uint64_t, uint64_t, uint64_t);
  id v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  _QWORD *v146;
  char *v147;
  char *v148;
  uint8_t *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;

  v146 = a3;
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v145 = (char *)&v137 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v137 - v10;
  __chkstk_darwin(v9);
  v149 = (uint8_t *)&v137 - v12;
  v13 = sub_100003A2C(&qword_1001B0438);
  v14 = __chkstk_darwin(v13);
  v147 = (char *)&v137 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v137 - v16;
  v18 = *a1;
  v19 = objc_msgSend(objc_allocWithZone((Class)NFVASRequest), "init");
  v20 = objc_msgSend(v18, "merchantId");
  if (!v20)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v22 = v21;
    v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v22, v23, v24, v25, v26, v27, v28, v29);
  }
  objc_msgSend(v19, "setMerchantId:", v20);

  objc_msgSend(v19, "setTerminalCap:", a2);
  v30 = objc_msgSend(v18, "vasTerminalProtocol");
  objc_msgSend(v19, "setTerminalProtocol:", v30);

  v31 = (objc_class *)objc_msgSend(v18, "vasFilter");
  isa = v31;
  if (v31)
  {
    v33 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v31);
    v148 = v17;
    v34 = v18;
    v35 = v5;
    v36 = v11;
    v37 = a2;
    v38 = v6;
    v39 = v19;
    v41 = v40;

    isa = Data._bridgeToObjectiveC()().super.isa;
    v42 = v41;
    v19 = v39;
    v6 = v38;
    a2 = v37;
    v11 = v36;
    v5 = v35;
    v18 = v34;
    v17 = v148;
    sub_100005DE0(v33, v42);
  }
  objc_msgSend(v19, "setFilter:", isa);

  v43 = objc_msgSend(v18, "vasUrl");
  v44 = v43;
  v150 = v11;
  if (v43)
  {
    v45 = a2;
    v46 = v149;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v43);

    (*(void (**)(char *, uint8_t *, uint64_t))(v6 + 32))(v17, v46, v5);
    v47 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v47(v17, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v17, 1, v5) == 1)
    {
      v44 = 0;
    }
    else
    {
      URL._bridgeToObjectiveC()(v48);
      v44 = v49;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v17, v5);
    }
    a2 = v45;
    v11 = v150;
  }
  else
  {
    v47 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v47(v17, 1, 1, v5);
  }
  v148 = (char *)v5;
  objc_msgSend(v19, "setSignupUrl:", v44);

  if (qword_1001AD088 != -1)
    swift_once(&qword_1001AD088, sub_10009EEFC);
  v50 = type metadata accessor for Logger(0);
  v51 = sub_100003A14(v50, (uint64_t)qword_1001B10E0);
  v52 = v18;
  v53 = a2;
  v54 = v52;
  v55 = v53;
  v143 = v51;
  v56 = Logger.logObject.getter(v55);
  v57 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v56, (os_log_type_t)v57))
  {
    v138 = v57;
    v137 = v56;
    v141 = v47;
    v142 = v19;
    v144 = v6;
    v58 = swift_slowAlloc(42, -1);
    v59 = (_QWORD *)swift_slowAlloc(8, -1);
    v140 = swift_slowAlloc(96, -1);
    v153 = v140;
    *(_DWORD *)v58 = 136315906;
    v60 = objc_msgSend(v54, "merchantId");
    v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
    v62 = a2;
    v64 = v63;

    v151 = sub_1000056EC(v61, (unint64_t)v64, &v153);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152, v58 + 4, v58 + 12);

    swift_bridgeObjectRelease(v64, v65, v66, v67, v68, v69, v70, v71);
    *(_WORD *)(v58 + 12) = 2112;
    v151 = (uint64_t)v55;
    v72 = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152, v58 + 14, v58 + 22);
    v139 = v59;
    *v59 = v62;

    *(_WORD *)(v58 + 22) = 2080;
    v73 = objc_msgSend(v54, "vasTerminalProtocol");
    v74 = SPRVASTerminalProtocol.description.getter();
    v76 = v75;

    v151 = sub_1000056EC(v74, (unint64_t)v76, &v153);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152, v58 + 24, v58 + 32);

    swift_bridgeObjectRelease(v76, v77, v78, v79, v80, v81, v82, v83);
    *(_WORD *)(v58 + 32) = 2080;
    v84 = objc_msgSend(v54, "vasFilter");
    if (v84)
    {
      v85 = v84;
      v86 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v84);
      v88 = v87;

    }
    else
    {
      v86 = 0;
      v88 = 0xC000000000000000;
    }
    v89 = v137;
    v90 = Data.description.getter(v86, v88);
    v92 = v91;
    sub_100005DE0(v86, v88);
    v151 = sub_1000056EC(v90, (unint64_t)v92, &v153);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152, v58 + 34, v58 + 42);

    swift_bridgeObjectRelease(v92, v93, v94, v95, v96, v97, v98, v99);
    _os_log_impl((void *)&_mh_execute_header, v89, (os_log_type_t)v138, "In NFVASRequest setting merchantId: %s, terminalCap: %@, terminalProtocol: %s, filter: %s", (uint8_t *)v58, 0x2Au);
    v100 = sub_100003A2C((uint64_t *)&unk_1001AE430);
    v101 = v139;
    swift_arrayDestroy(v139, 1, v100);
    swift_slowDealloc(v101, -1, -1);
    v102 = v140;
    swift_arrayDestroy(v140, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v102, -1, -1);
    swift_slowDealloc(v58, -1, -1);

    v11 = v150;
    v47 = v141;
    v19 = v142;
    v6 = v144;
  }
  else
  {

  }
  v103 = objc_msgSend(v54, "vasUrl");
  v104 = (uint64_t)v147;
  v105 = v148;
  if (!v103)
  {
    v47(v147, 1, 1, (uint64_t)v148);
    goto LABEL_24;
  }
  v106 = v103;
  v107 = v149;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v103);

  v108 = *(void (**)(uint64_t, uint8_t *, char *))(v6 + 32);
  v108(v104, v107, v105);
  v47((char *)v104, 0, 1, (uint64_t)v105);
  if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(v6 + 48))(v104, 1, v105) == 1)
  {
LABEL_24:
    result = sub_10005218C(v104, &qword_1001B0438);
    goto LABEL_25;
  }
  v108((uint64_t)v11, (uint8_t *)v104, v105);
  v109 = v145;
  v110 = (*(uint64_t (**)(char *, char *, char *))(v6 + 16))(v145, v11, v105);
  v111 = Logger.logObject.getter(v110);
  v112 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v111, v112))
  {
    v113 = (uint8_t *)swift_slowAlloc(12, -1);
    v114 = v105;
    v115 = swift_slowAlloc(32, -1);
    v153 = v115;
    v149 = v113;
    *(_DWORD *)v113 = 136315138;
    v116 = v113 + 12;
    v144 = v6;
    v117 = v19;
    v118 = v113 + 4;
    v119 = sub_100005F1C((unint64_t *)&qword_1001B1310, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v120 = v145;
    v121 = dispatch thunk of CustomStringConvertible.description.getter(v114, v119);
    v123 = (_TtC14softposreaderd12RemoteReader *)v122;
    v151 = sub_1000056EC(v121, v122, &v153);
    v124 = v118;
    v19 = v117;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152, v124, v116);
    swift_bridgeObjectRelease(v123, v125, v126, v127, v128, v129, v130, v131);
    v132 = *(void (**)(char *, char *))(v144 + 8);
    v133 = v114;
    v132(v120, v114);
    v134 = v149;
    _os_log_impl((void *)&_mh_execute_header, v111, v112, "signupUrl: %s", v149, 0xCu);
    swift_arrayDestroy(v115, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v115, -1, -1);
    swift_slowDealloc(v134, -1, -1);

    result = ((uint64_t (*)(char *, char *))v132)(v150, v133);
  }
  else
  {

    v136 = *(void (**)(char *, char *))(v6 + 8);
    v136(v109, v105);
    result = ((uint64_t (*)(char *, char *))v136)(v11, v105);
  }
LABEL_25:
  *v146 = v19;
  return result;
}

id sub_1000A8DD4(uint64_t a1, id a2, _BYTE *a3, _BYTE *a4, _BYTE *a5, _BYTE *a6, _QWORD *a7)
{
  id v11;
  void *v12;
  unsigned int v13;
  uint64_t v14;
  id v15;
  _BYTE *v16;
  id v17;
  _BYTE *v18;
  id v19;
  _BYTE *v20;
  id v21;
  unsigned __int8 *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint32_t *v25;
  uint32_t *v26;
  uint32_t *p_align;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  id v33;
  _TtC14softposreaderd12RemoteReader *v34;
  _TtC14softposreaderd12RemoteReader *v35;
  SEL v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  void *v46;
  id v47;
  uint64_t v48;
  unint64_t v49;
  _TtC14softposreaderd12RemoteReader *v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  uint64_t v58;
  id v59;
  void *v60;
  id v61;
  uint64_t v62;
  unint64_t v63;
  _TtC14softposreaderd12RemoteReader *v64;
  SEL v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  int v72;
  id v73;
  void *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  Swift::String v78;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v81;
  unint64_t v82;
  _TtC14softposreaderd12RemoteReader *v83;
  SEL v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  void *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  Swift::String v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  unint64_t v100;
  _TtC14softposreaderd12RemoteReader *v101;
  SEL v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  NSNumber v111;
  Class isa;
  id v113;
  objc_class *v114;
  char v115;
  uint64_t v116;
  NSObject *v117;
  os_log_type_t v118;
  uint8_t *v119;
  uint64_t v120;
  uint64_t v121;
  NSObject *v122;
  os_log_type_t v123;
  uint8_t *v124;
  id v125;
  Class v126;
  id v127;
  objc_class *v128;
  uint64_t v129;
  NSObject *v130;
  os_log_type_t v131;
  uint8_t *v132;
  id v133;
  Class v134;
  id v135;
  objc_class *v136;
  id v137;
  id v138;
  uint64_t v139;
  id v140;
  id v141;
  char v142;
  id v143;
  void *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  id v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  id v152;
  Class v153;
  id v154;
  objc_class *v155;
  uint64_t v156;
  NSObject *v157;
  os_log_type_t v158;
  uint8_t *v159;
  id v160;
  Class v161;
  id v162;
  objc_class *v163;
  uint64_t v164;
  NSObject *v165;
  os_log_type_t v166;
  uint8_t *v167;
  id v168;
  id v169;
  id v170;
  char v171;
  uint64_t v172;
  NSObject *v173;
  os_log_type_t v174;
  uint8_t *v175;
  id v176;
  Class v177;
  id v178;
  objc_class *v179;
  uint64_t v180;
  NSObject *v181;
  os_log_type_t v182;
  uint8_t *v183;
  id v184;
  Class v185;
  id v186;
  objc_class *v187;
  uint64_t v188;
  NSObject *v189;
  os_log_type_t v190;
  uint8_t *v191;
  Class v192;
  id v193;
  objc_class *v194;
  char v195;
  NSObject *v196;
  os_log_type_t v197;
  uint8_t *v198;
  NSObject *v199;
  os_log_type_t v200;
  uint8_t *v201;
  id v202;
  void *v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  id v207;
  void *v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  Class v212;
  Class v213;
  id v214;
  uint64_t v216;
  os_log_type_t v217;
  _BYTE *v218;
  __int128 v222;
  void *v223;
  void *v224;
  uint64_t v225;

  v11 = objc_msgSend(a2, "mobileCapabilities");
  if (v11)
  {
    v12 = v11;
    if ((objc_msgSend(v11, "unsignedCharValue") & 0xC) == 4)
      a3[OBJC_IVAR____TtC9SPREngine13ReadOperation_skipLoyalty] = 1;
    v13 = objc_msgSend(v12, "unsignedCharValue");

    if ((~v13 & 0x30) == 0)
      a3[OBJC_IVAR____TtC9SPREngine13ReadOperation_paymentDataForthcoming] = 1;
  }
  if (qword_1001AD088 != -1)
    swift_once(&qword_1001AD088, sub_10009EEFC);
  v14 = type metadata accessor for Logger(0);
  sub_100003A14(v14, (uint64_t)qword_1001B10E0);
  v15 = a2;
  v16 = a3;
  v17 = v15;
  v18 = v16;
  v19 = v17;
  v20 = v18;
  v21 = v19;
  v22 = v20;
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter();
  v25 = (_DWORD *)(&stru_1001A9FE8 + 24);
  v26 = (_DWORD *)(&stru_1001A9FE8 + 24);
  p_align = (_DWORD *)(&stru_1001A9FE8 + 24);
  if (os_log_type_enabled(v23, v24))
  {
    v217 = v24;
    v218 = a6;
    v28 = 7104878;
    v29 = swift_slowAlloc(74, -1);
    v30 = swift_slowAlloc(160, -1);
    v225 = v30;
    *(_DWORD *)v29 = 134219778;
    *(_QWORD *)&v222 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v222, (char *)&v222 + 8, v29 + 4, v29 + 12);
    *(_WORD *)(v29 + 12) = 2080;
    v31 = objc_msgSend(v21, "request");
    v216 = v30;
    if (v31
      && (v32 = v31, v33 = objc_msgSend(v31, "merchantId"), v32, v33))
    {
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      v35 = v34;

    }
    else
    {
      v35 = (_TtC14softposreaderd12RemoteReader *)0xE300000000000000;
    }
    *(_QWORD *)&v222 = sub_1000056EC(v28, (unint64_t)v35, &v225);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v222, (char *)&v222 + 8, v29 + 14, v29 + 22);

    swift_bridgeObjectRelease(v35, v36, v37, v38, v39, v40, v41, v42);
    *(_WORD *)(v29 + 22) = 2080;
    v43 = sub_100003A2C((uint64_t *)&unk_1001B1300);
    v44 = swift_allocObject(v43, 72, 7);
    *(_OWORD *)(v44 + 16) = xmmword_10015A5F0;
    v45 = objc_msgSend(v21, "statusCode");
    if (v45)
    {
      v46 = v45;
      v47 = objc_msgSend(v45, "unsignedLongLongValue");

      v223 = &type metadata for UInt64;
      v224 = &protocol witness table for UInt64;
      *(_QWORD *)&v222 = v47;
      sub_10001A674(&v222, v44 + 32);
    }
    else
    {
      *(_QWORD *)(v44 + 56) = &type metadata for Int;
      *(_QWORD *)(v44 + 64) = &protocol witness table for Int;
      *(_QWORD *)(v44 + 32) = 0;
    }
    v48 = String.init(format:_:)(1479684133, 0xE400000000000000, v44);
    v50 = (_TtC14softposreaderd12RemoteReader *)v49;
    *(_QWORD *)&v222 = sub_1000056EC(v48, v49, &v225);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v222, (char *)&v222 + 8, v29 + 24, v29 + 32);

    swift_bridgeObjectRelease(v50, v51, v52, v53, v54, v55, v56, v57);
    *(_WORD *)(v29 + 32) = 2080;
    v58 = swift_allocObject(v43, 72, 7);
    *(_OWORD *)(v58 + 16) = xmmword_10015A5F0;
    v59 = objc_msgSend(v21, "mobileCapabilities");
    if (v59)
    {
      v60 = v59;
      v61 = objc_msgSend(v59, "unsignedLongLongValue");

      v223 = &type metadata for UInt64;
      v224 = &protocol witness table for UInt64;
      *(_QWORD *)&v222 = v61;
      sub_10001A674(&v222, v58 + 32);
    }
    else
    {
      *(_QWORD *)(v58 + 56) = &type metadata for Int;
      *(_QWORD *)(v58 + 64) = &protocol witness table for Int;
      *(_QWORD *)(v58 + 32) = 0;
    }
    v62 = String.init(format:_:)(1479684133, 0xE400000000000000, v58);
    v64 = (_TtC14softposreaderd12RemoteReader *)v63;
    *(_QWORD *)&v222 = sub_1000056EC(v62, v63, &v225);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v222, (char *)&v222 + 8, v29 + 34, v29 + 42);

    swift_bridgeObjectRelease(v64, v65, v66, v67, v68, v69, v70, v71);
    *(_WORD *)(v29 + 42) = 1024;
    v72 = v22[OBJC_IVAR____TtC9SPREngine13ReadOperation_skipLoyalty];

    LODWORD(v222) = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v222, (char *)&v222 + 4, v29 + 44, v29 + 48);

    *(_WORD *)(v29 + 48) = 1024;
    LODWORD(v64) = v22[OBJC_IVAR____TtC9SPREngine13ReadOperation_paymentDataForthcoming];

    LODWORD(v222) = (_DWORD)v64;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v222, (char *)&v222 + 4, v29 + 50, v29 + 54);

    *(_WORD *)(v29 + 54) = 2080;
    v73 = objc_msgSend(v21, "vasData");
    if (v73)
    {
      v74 = v73;
      v75 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v73);
      v77 = v76;

      v78 = Data.hexString()();
      countAndFlagsBits = v78._countAndFlagsBits;
      object = v78._object;
      sub_100005DE0(v75, v77);
    }
    else
    {
      countAndFlagsBits = 0;
      object = (void *)0xE000000000000000;
    }
    *(_QWORD *)&v222 = countAndFlagsBits;
    *((_QWORD *)&v222 + 1) = object;
    v81 = String.init<A>(_:)(&v222, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
    v83 = (_TtC14softposreaderd12RemoteReader *)v82;
    *(_QWORD *)&v222 = sub_1000056EC(v81, v82, &v225);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v222, (char *)&v222 + 8, v29 + 56, v29 + 64);

    swift_bridgeObjectRelease(v83, v84, v85, v86, v87, v88, v89, v90);
    *(_WORD *)(v29 + 64) = 2080;
    p_align = &stru_1001A9FE8.align;
    v91 = objc_msgSend(v21, "token");
    if (v91)
    {
      v92 = v91;
      v93 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v91);
      v95 = v94;

      v96 = Data.hexString()();
      v97 = v96._countAndFlagsBits;
      v98 = v96._object;
      sub_100005DE0(v93, v95);
    }
    else
    {
      v97 = 0;
      v98 = (void *)0xE000000000000000;
    }
    *(_QWORD *)&v222 = v97;
    *((_QWORD *)&v222 + 1) = v98;
    v99 = String.init<A>(_:)(&v222, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
    v101 = (_TtC14softposreaderd12RemoteReader *)v100;
    *(_QWORD *)&v222 = sub_1000056EC(v99, v100, &v225);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v222, (char *)&v222 + 8, v29 + 66, v29 + 74);

    swift_bridgeObjectRelease(v101, v102, v103, v104, v105, v106, v107, v108);
    _os_log_impl((void *)&_mh_execute_header, v23, v217, "VAS response #%ld: (for merchantId: %s) -> statusCode: %s, mobileCapabilities: %s, skipLoyalty: %{BOOL}d, paymentDataForthcoming: %{BOOL}d, vasData: %s, mobileToken: %s", (uint8_t *)v29, 0x4Au);
    swift_arrayDestroy(v216, 5, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v216, -1, -1);
    swift_slowDealloc(v29, -1, -1);

    v26 = &stru_1001A9FE8.align;
    a6 = v218;
    v25 = &stru_1001A9FE8.align;
  }
  else
  {

  }
  v109 = objc_msgSend(v21, *((SEL *)v25 + 366));
  sub_100005E24(0, &qword_1001AF6D0, NSNumber_ptr);
  v110 = v109;
  v111.super.super.isa = NSNumber.init(integerLiteral:)(25223).super.super.isa;
  isa = v111.super.super.isa;
  if (v110)
  {
    v113 = v110;
    v114 = isa;
    v115 = static NSObject.== infix(_:_:)(v114, v113);

    if ((v115 & 1) != 0)
    {

      v117 = Logger.logObject.getter(v116);
      v118 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v117, v118))
      {
        v119 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v119 = 0;
        _os_log_impl((void *)&_mh_execute_header, v117, v118, "VasDataNotActivated", v119, 2u);
        swift_slowDealloc(v119, -1, -1);
      }

      *a4 = 1;
      v120 = 25223;
      goto LABEL_78;
    }
    v125 = v113;
    v126 = NSNumber.init(integerLiteral:)(27012).super.super.isa;
    v127 = v125;
    v128 = v126;
    LOBYTE(v126) = static NSObject.== infix(_:_:)(v128, v127);

    if ((v126 & 1) != 0)
    {

      v130 = Logger.logObject.getter(v129);
      v131 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v130, v131))
      {
        v132 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v132 = 0;
        _os_log_impl((void *)&_mh_execute_header, v130, v131, "VasUserIntervention", v132, 2u);
        swift_slowDealloc(v132, -1, -1);
      }

      *a5 = 1;
      v120 = 27012;
      goto LABEL_78;
    }
    v133 = v127;
    v134 = NSNumber.init(integerLiteral:)(36864).super.super.isa;
    v135 = v133;
    v136 = v134;
    LOBYTE(v134) = static NSObject.== infix(_:_:)(v136, v135);

    if ((v134 & 1) != 0)
    {

      v137 = objc_msgSend(v21, "request");
      v138 = objc_msgSend(v137, "terminalProtocol");

      if (v138)
      {
        v140 = SPRVASTerminalProtocolProtocolFull;
        v141 = v138;
        v142 = static NSObject.== infix(_:_:)(v140, v141);

        if ((v142 & 1) != 0)
        {

          v143 = objc_msgSend(v21, *((SEL *)v26 + 399));
          if (v143)
          {
            v144 = v143;
            v145 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v143);
            v147 = v146;

            sub_100005DE0(v145, v147);
            v148 = objc_msgSend(v21, *((SEL *)v26 + 399));
            if (v148)
            {
              v149 = v148;
              static Data._unconditionallyBridgeFromObjectiveC(_:)(v148);
              v151 = v150;

              __asm { BR              X10 }
            }
          }
          else
          {
            *a6 = 1;
            v199 = Logger.logObject.getter(0);
            v200 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v199, v200))
            {
              v201 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v201 = 0;
              _os_log_impl((void *)&_mh_execute_header, v199, v200, "foundVasDataInvalid", v201, 2u);
              swift_slowDealloc(v201, -1, -1);
            }

          }
          v172 = OBJC_IVAR____TtC9SPREngine13ReadOperation_vasDataFound;
          goto LABEL_76;
        }
        v168 = SPRVASTerminalProtocolSignUpOnly;
        v169 = v141;
        v170 = v168;
        v171 = static NSObject.== infix(_:_:)(v170, v169);

        if ((v171 & 1) != 0)
        {
          v172 = OBJC_IVAR____TtC9SPREngine13ReadOperation_vasURLOK;
LABEL_76:
          v22[v172] = 1;
LABEL_77:
          v120 = 36864;
          goto LABEL_78;
        }
      }
      v173 = Logger.logObject.getter(v139);
      v174 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v173, v174))
      {
        v175 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v175 = 0;
        _os_log_impl((void *)&_mh_execute_header, v173, v174, "Invalid VASTerminalProtocol", v175, 2u);
        swift_slowDealloc(v175, -1, -1);
      }

      goto LABEL_77;
    }
    v152 = v135;
    v153 = NSNumber.init(integerLiteral:)(27267).super.super.isa;
    v154 = v152;
    v155 = v153;
    LOBYTE(v153) = static NSObject.== infix(_:_:)(v155, v154);

    if ((v153 & 1) != 0)
    {

      v157 = Logger.logObject.getter(v156);
      v158 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v157, v158))
      {
        v159 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v159 = 0;
        _os_log_impl((void *)&_mh_execute_header, v157, v158, "VasDataNotFound", v159, 2u);
        swift_slowDealloc(v159, -1, -1);
      }

      if (__OFADD__(*a7, 1))
      {
        __break(1u);
        JUMPOUT(0x1000A9F60);
      }
      ++*a7;
      v120 = 27267;
      goto LABEL_78;
    }
    v160 = v154;
    v161 = NSNumber.init(integerLiteral:)(27392).super.super.isa;
    v162 = v160;
    v163 = v161;
    LOBYTE(v161) = static NSObject.== infix(_:_:)(v163, v162);

    if ((v161 & 1) != 0)
    {

      v165 = Logger.logObject.getter(v164);
      v166 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v165, v166))
      {
        v167 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v167 = 0;
        _os_log_impl((void *)&_mh_execute_header, v165, v166, "VasWrongParameters - Wrong P1, P2", v167, 2u);
        swift_slowDealloc(v167, -1, -1);
      }

      v120 = 27392;
      goto LABEL_78;
    }
    v176 = v162;
    v177 = NSNumber.init(integerLiteral:)(26368).super.super.isa;
    v178 = v176;
    v179 = v177;
    LOBYTE(v177) = static NSObject.== infix(_:_:)(v179, v178);

    if ((v177 & 1) != 0)
    {

      v181 = Logger.logObject.getter(v180);
      v182 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v181, v182))
      {
        v183 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v183 = 0;
        _os_log_impl((void *)&_mh_execute_header, v181, v182, "VasWrongLCField - Wrong length of command data field", v183, 2u);
        swift_slowDealloc(v183, -1, -1);
      }

      v120 = 26368;
      goto LABEL_78;
    }
    v184 = v178;
    v185 = NSNumber.init(integerLiteral:)(27264).super.super.isa;
    v186 = v184;
    v187 = v185;
    LOBYTE(v185) = static NSObject.== infix(_:_:)(v187, v186);

    if ((v185 & 1) != 0)
    {

      v189 = Logger.logObject.getter(v188);
      v190 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v189, v190))
      {
        v191 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v191 = 0;
        _os_log_impl((void *)&_mh_execute_header, v189, v190, "VasIncorrectData - Incorrect data in the command field", v191, 2u);
        swift_slowDealloc(v191, -1, -1);
      }

      v120 = 27264;
      goto LABEL_78;
    }
    v192 = NSNumber.init(integerLiteral:)(25408).super.super.isa;
    v193 = v186;
    v194 = v192;
    v195 = static NSObject.== infix(_:_:)(v194, v193);

    if ((v195 & 1) != 0)
    {
      v196 = Logger.logObject.getter(v121);
      v197 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v196, v197))
      {
        v198 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v198 = 0;
        _os_log_impl((void *)&_mh_execute_header, v196, v197, "VasUnsupportedApplicationVersion", v198, 2u);
        swift_slowDealloc(v198, -1, -1);
      }

      v120 = 25408;
      goto LABEL_78;
    }
  }
  else
  {

  }
  v122 = Logger.logObject.getter(v121);
  v123 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v122, v123))
  {
    v124 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v124 = 0;
    _os_log_impl((void *)&_mh_execute_header, v122, v123, "Unknown VAS Response Status Code", v124, 2u);
    swift_slowDealloc(v124, -1, -1);
  }

  v120 = 0;
LABEL_78:
  v202 = objc_msgSend(v21, *((SEL *)v26 + 399));
  if (v202)
  {
    v203 = v202;
    v204 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v202);
    v206 = v205;

  }
  else
  {
    v204 = 0;
    v206 = 0xF000000000000000;
  }
  v207 = objc_msgSend(v21, *((SEL *)p_align + 396));
  if (v207)
  {
    v208 = v207;
    v209 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v207);
    v211 = v210;

  }
  else
  {
    v209 = 0;
    v211 = 0xF000000000000000;
  }
  if (v206 >> 60 == 15)
  {
    v212 = 0;
  }
  else
  {
    v212 = Data._bridgeToObjectiveC()().super.isa;
    sub_10000A9B0(v204, v206);
  }
  if (v211 >> 60 == 15)
  {
    v213 = 0;
  }
  else
  {
    v213 = Data._bridgeToObjectiveC()().super.isa;
    sub_10000A9B0(v209, v211);
  }
  v214 = objc_msgSend(objc_allocWithZone((Class)SPRVASResponse), "initWithStatus:vasData:mobileToken:", v120, v212, v213);

  return v214;
}

uint64_t sub_1000A9F78(uint64_t a1, uint64_t a2)
{
  return sub_1000AA4B4(a1, a2, (uint64_t)&unk_10019D0F0, (uint64_t)sub_1000AFBF8, (uint64_t)&unk_10019D108);
}

void sub_1000A9FA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  char v5;
  const char *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _TtC14softposreaderd12RemoteReader *v13;
  uint64_t v14;
  _TtC14softposreaderd12RemoteReader *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  const char *v21;
  char v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_unfair_lock_s *v34;
  _TtC14softposreaderd12RemoteReader **v35;
  os_unfair_lock_s *v36;
  uint64_t v37;
  os_unfair_lock_s *v38;
  uint64_t v39;
  os_unfair_lock_s *v40;
  uint64_t v41;
  uint64_t v42;
  os_unfair_lock_s *v43;
  _TtC14softposreaderd12RemoteReader **v44;
  os_unfair_lock_s *v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD v48[5];
  __int128 v49;
  __int128 v50;

  v2 = v1;
  v46 = 0x676E696C6C6F50;
  v47 = 0xE700000000000000;
  AnyHashable.init<A>(_:)(v48, &v46, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v4 = sub_10000AD94((uint64_t)v48), (v5 & 1) != 0))
  {
    sub_100005D5C(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v49);
  }
  else
  {
    v49 = 0u;
    v50 = 0u;
  }
  sub_10000CAAC((uint64_t)v48);
  if (*((_QWORD *)&v50 + 1))
  {
    if ((swift_dynamicCast(&v46, &v49, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
    {
      v14 = v46;
      v13 = (_TtC14softposreaderd12RemoteReader *)v47;
      if (v46 == 65 && v47 == 0xE100000000000000)
      {
        v15 = (_TtC14softposreaderd12RemoteReader *)0xE100000000000000;
LABEL_13:
        swift_bridgeObjectRelease(v15, v6, v7, v8, v9, v10, v11, v12);
        *(_BYTE *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_pollingActiveA) = 1;
        if (qword_1001AD088 != -1)
          swift_once(&qword_1001AD088, sub_10009EEFC);
        v16 = type metadata accessor for Logger(0);
        v17 = sub_100003A14(v16, (uint64_t)qword_1001B10E0);
        v18 = Logger.logObject.getter(v17);
        v19 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v18, v19))
          goto LABEL_26;
        v20 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v20 = 0;
        v21 = "(Reader Mode) didStart polling A";
LABEL_25:
        _os_log_impl((void *)&_mh_execute_header, v18, v19, v21, v20, 2u);
        swift_slowDealloc(v20, -1, -1);
LABEL_26:

        goto LABEL_27;
      }
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(65, 0xE100000000000000, v46, v47, 0) & 1) != 0)
      {
        v15 = v13;
        goto LABEL_13;
      }
      if (v14 == 66 && v13 == (_TtC14softposreaderd12RemoteReader *)0xE100000000000000)
      {
        swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)0xE100000000000000, v6, v7, v8, v9, v10, v11, v12);
LABEL_21:
        *(_BYTE *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_pollingActiveB) = 1;
        if (qword_1001AD088 != -1)
          swift_once(&qword_1001AD088, sub_10009EEFC);
        v30 = type metadata accessor for Logger(0);
        v31 = sub_100003A14(v30, (uint64_t)qword_1001B10E0);
        v18 = Logger.logObject.getter(v31);
        v19 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v18, v19))
          goto LABEL_26;
        v20 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v20 = 0;
        v21 = "(Reader Mode) didStart polling B";
        goto LABEL_25;
      }
      v22 = _stringCompareWithSmolCheck(_:_:expecting:)(66, 0xE100000000000000, v14, v13, 0);
      swift_bridgeObjectRelease(v13, v23, v24, v25, v26, v27, v28, v29);
      if ((v22 & 1) != 0)
        goto LABEL_21;
    }
  }
  else
  {
    sub_10005218C((uint64_t)&v49, &qword_1001B12E0);
  }
LABEL_27:
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_pollingActiveA) == 1
    && *(_BYTE *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_pollingActiveB) == 1)
  {
    v32 = OBJC_IVAR____TtC9SPREngine13ReadOperation_pollingRestartByApplet;
    if (*(_BYTE *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_pollingRestartByApplet) == 1)
    {
      v33 = OBJC_IVAR____TtC9SPREngine13ReadOperation_cardTearSent;
      if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_cardTearSent) & 1) == 0)
      {
        sub_1000AFF20(5, 0);
        v34 = *(os_unfair_lock_s **)(*(_QWORD *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics) + 56);
        v35 = (_TtC14softposreaderd12RemoteReader **)&v34[4];
        v36 = v34 + 8;
        os_unfair_lock_lock(v34 + 8);
        sub_10009B8DC(v35, 20, 1, (uint64_t (*)(uint64_t))sub_10004BAE8);
        os_unfair_lock_unlock(v36);
        *(_BYTE *)(v2 + v32) = 0;
        *(_BYTE *)(v2 + v33) = 1;
      }
    }
    if (*(_BYTE *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_pollingRestart) == 1)
    {
      *(_BYTE *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_pollingRestart) = 0;
      v37 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics);
      LOBYTE(v48[0]) = 0;
      v38 = *(os_unfair_lock_s **)(v37 + 56);
      v39 = (uint64_t)&v38[4];
      v40 = v38 + 8;
      os_unfair_lock_lock(v38 + 8);
      sub_10010CC6C(v39, (unsigned __int8 *)v48);
      os_unfair_lock_unlock(v40);
      if (qword_1001AD090 != -1)
        swift_once(&qword_1001AD090, sub_10009EF8C);
      v41 = type metadata accessor for OSSignposter(0);
      sub_100003A14(v41, (uint64_t)qword_1001B10F8);
      v42 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_nfSeReaderSession);
      sub_10003AD24("reader-ese_reader_mode_polling", 30, 2, v42, 0xD000000000000015, 0x800000010016D730);
      if (*(_QWORD *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_paymentStartedCount) == 1
        && (*(_QWORD *)(*(_QWORD *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readerConfig) + 16) & 0xFFFFFFFFFFFFFFFELL) == 2)
      {
        sub_10003AFE8("reader-vas_ese_reader_mode_switch", 33, 2, v42, 0xD00000000000001ELL, 0x800000010016D780);
        LOBYTE(v48[0]) = 2;
        v43 = *(os_unfair_lock_s **)(v37 + 56);
        v44 = (_TtC14softposreaderd12RemoteReader **)&v43[4];
        v45 = v43 + 8;
        os_unfair_lock_lock(v43 + 8);
        sub_10010CC54(v44, (unsigned __int8 *)v48);
        os_unfair_lock_unlock(v45);
      }
    }
  }
}

uint64_t sub_1000AA498(uint64_t a1, uint64_t a2)
{
  return sub_1000AA4B4(a1, a2, (uint64_t)&unk_10019D0A0, (uint64_t)sub_1000AFBD0, (uint64_t)&unk_10019D0B8);
}

uint64_t sub_1000AA4B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[5];
  uint64_t v26;

  v23 = a4;
  v24 = a5;
  v7 = v5;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005E24(0, (unint64_t *)&qword_1001AE470, NSObject_ptr);
  result = static NSObject.== infix(_:_:)(a1, *(_QWORD *)&v7[OBJC_IVAR____TtC9SPREngine13ReadOperation_nfSeReaderSession]);
  if ((result & 1) != 0)
  {
    v19 = static DispatchQoS.userInitiated.getter();
    static DispatchWorkItemFlags.enforceQoS.getter(v19);
    v20 = swift_allocObject(a3, 32, 7);
    *(_QWORD *)(v20 + 16) = v7;
    *(_QWORD *)(v20 + 24) = a2;
    aBlock[4] = v23;
    v26 = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000043B8;
    aBlock[3] = v24;
    v21 = _Block_copy(aBlock);
    v22 = v7;
    swift_bridgeObjectRetain();
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v13, v21);
    _Block_release(v21);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    return swift_release(v26);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000AA67C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  char v5;
  const char *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _TtC14softposreaderd12RemoteReader *v13;
  uint64_t v14;
  _TtC14softposreaderd12RemoteReader *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  const char *v21;
  char v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD v34[5];
  __int128 v35;
  __int128 v36;

  v2 = v1;
  v32 = 0x676E696C6C6F50;
  v33 = 0xE700000000000000;
  AnyHashable.init<A>(_:)(v34, &v32, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v4 = sub_10000AD94((uint64_t)v34), (v5 & 1) != 0))
  {
    sub_100005D5C(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v35);
  }
  else
  {
    v35 = 0u;
    v36 = 0u;
  }
  sub_10000CAAC((uint64_t)v34);
  if (!*((_QWORD *)&v36 + 1))
  {
    sub_10005218C((uint64_t)&v35, &qword_1001B12E0);
    return;
  }
  if ((swift_dynamicCast(&v32, &v35, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    return;
  v14 = v32;
  v13 = (_TtC14softposreaderd12RemoteReader *)v33;
  if (v32 == 65 && v33 == 0xE100000000000000)
  {
    v15 = (_TtC14softposreaderd12RemoteReader *)0xE100000000000000;
LABEL_13:
    swift_bridgeObjectRelease(v15, v6, v7, v8, v9, v10, v11, v12);
    *(_BYTE *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_pollingActiveA) = 0;
    if (qword_1001AD088 != -1)
      swift_once(&qword_1001AD088, sub_10009EEFC);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_100003A14(v16, (uint64_t)qword_1001B10E0);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v18, v19))
      goto LABEL_26;
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    v21 = "(Reader Mode) didEnd polling A";
    goto LABEL_25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(65, 0xE100000000000000, v32, v33, 0) & 1) != 0)
  {
    v15 = v13;
    goto LABEL_13;
  }
  if (v14 == 66 && v13 == (_TtC14softposreaderd12RemoteReader *)0xE100000000000000)
  {
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)0xE100000000000000, v6, v7, v8, v9, v10, v11, v12);
  }
  else
  {
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(66, 0xE100000000000000, v14, v13, 0);
    swift_bridgeObjectRelease(v13, v23, v24, v25, v26, v27, v28, v29);
    if ((v22 & 1) == 0)
      return;
  }
  *(_BYTE *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_pollingActiveB) = 0;
  if (qword_1001AD088 != -1)
    swift_once(&qword_1001AD088, sub_10009EEFC);
  v30 = type metadata accessor for Logger(0);
  v31 = sub_100003A14(v30, (uint64_t)qword_1001B10E0);
  v18 = Logger.logObject.getter(v31);
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    v21 = "(Reader Mode) didEnd polling B";
LABEL_25:
    _os_log_impl((void *)&_mh_execute_header, v18, v19, v21, v20, 2u);
    swift_slowDealloc(v20, -1, -1);
  }
LABEL_26:

}

void sub_1000AA934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v6);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  sub_100005E24(0, (unint64_t *)&qword_1001AE470, NSObject_ptr);
  if ((static NSObject.== infix(_:_:)(a1, *(_QWORD *)(v3 + OBJC_IVAR____TtC9SPREngine13ReadOperation_nfSeReaderSession)) & 1) != 0)
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x1000ABFE4);
}

_BYTE *sub_1000AC190(_BYTE *result)
{
  if ((result[OBJC_IVAR____TtC9SPREngine13ReadOperation_currentPayAppletStatus + 1] & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    sub_1000AC28C(result[OBJC_IVAR____TtC9SPREngine13ReadOperation_currentPayAppletStatus]);
    return sub_1000AE464();
  }
  return result;
}

void sub_1000AC28C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;
  _TtC14softposreaderd12RemoteReader **v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  _TtC14softposreaderd12RemoteReader **v18;
  os_unfair_lock_s *v19;
  id v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  Swift::String v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t inited;
  uint64_t v43;
  _BYTE v45[72];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48[3];
  void *v49;

  v2 = v1;
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics);
  v4 = *(os_unfair_lock_s **)(v3 + 56);
  v5 = v4 + 8;
  v6 = (_TtC14softposreaderd12RemoteReader **)&v4[4];
  LOBYTE(v48[0]) = 4;
  os_unfair_lock_lock(v4 + 8);
  sub_10010CC54(v6, (unsigned __int8 *)v48);
  os_unfair_lock_unlock(v5);
  v7 = 1;
  v8 = *(os_unfair_lock_s **)(v3 + 56);
  v9 = v8 + 8;
  v10 = (uint64_t)&v8[4];
  v11 = &byte_1001990F8;
  do
  {
    v12 = *v11++;
    LOBYTE(v48[0]) = v12;
    os_unfair_lock_lock(v9);
    sub_10010CC6C(v10, (unsigned __int8 *)v48);
    os_unfair_lock_unlock(v9);
    --v7;
  }
  while (v7);
  if (qword_1001AD090 != -1)
    swift_once(&qword_1001AD090, sub_10009EF8C);
  v13 = type metadata accessor for OSSignposter(0);
  sub_100003A14(v13, (uint64_t)qword_1001B10F8);
  v14 = *(void **)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_nfSeReaderSession);
  sub_10003B3B4("reader-postProcessing", 21, 2, 0xD000000000000026, 0x800000010016D630, (unint64_t)"reader-payment_read", 19, 2, 0xD000000000000010, 0x800000010016D660, (uint64_t)v14);
  type metadata accessor for SPRPayAppletStatus(0);
  v49 = v15;
  LOBYTE(v48[0]) = a1;
  v43 = v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readResult;
  swift_beginAccess(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readResult, &v46, 33, 0);
  sub_1000E91C4((uint64_t)v48, 0xD000000000000014, (_TtC14softposreaderd12RemoteReader *)0x80000001001688B0);
  swift_endAccess(&v46);
  if (a1 == 6)
  {
    v16 = OBJC_IVAR____TtC9SPREngine13ReadOperation_readCompleteSuccessSent;
    if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readCompleteSuccessSent) & 1) == 0
      && (*(_BYTE *)(*(_QWORD *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readerConfig) + 72) == 32
       || *(_BYTE *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_lastTransactionOutcomeReceived) == 48))
    {
      sub_1000AFF20(9, 0);
      *(_BYTE *)(v2 + v16) = 1;
      LOBYTE(v48[0]) = 5;
      v17 = *(os_unfair_lock_s **)(v3 + 56);
      v18 = (_TtC14softposreaderd12RemoteReader **)&v17[4];
      v19 = v17 + 8;
      os_unfair_lock_lock(v17 + 8);
      sub_10010CC54(v18, (unsigned __int8 *)v48);
      os_unfair_lock_unlock(v19);
      sub_10003AFE8("reader-payment_read_success", 27, 2, (uint64_t)v14, 0xD00000000000001CLL, 0x800000010016D570);
    }
  }
  v20 = v14;
  v21 = (unint64_t *)TLVTag.transactionResultData.unsafeMutableAddressor();
  sub_10009D680(*v21, 0, 0);
  v23 = v22;
  v25 = v24;

  v49 = &type metadata for Data;
  v48[0] = v23;
  v48[1] = v25;
  swift_beginAccess(v43, &v46, 33, 0);
  v26 = (uint8_t *)(v25 >> 62);
  sub_100005D9C(v23, v25);
  sub_1000E91C4((uint64_t)v48, 0xD000000000000015, (_TtC14softposreaderd12RemoteReader *)0x8000000100168870);
  swift_endAccess(&v46);
  if (qword_1001AD088 != -1)
    swift_once(&qword_1001AD088, sub_10009EEFC);
  v27 = type metadata accessor for Logger(0);
  sub_100003A14(v27, (uint64_t)qword_1001B10E0);
  sub_100005D9C(v23, v25);
  v28 = sub_100005D9C(v23, v25);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v31 = swift_slowAlloc(32, -1);
    v48[0] = v31;
    *(_DWORD *)v26 = 136315138;
    v32 = Data.hexString()();
    v46 = sub_1000056EC(v32._countAndFlagsBits, (unint64_t)v32._object, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v26 + 4, v26 + 12);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v32._object, v33, v34, v35, v36, v37, v38, v39);
    sub_100005DE0(v23, v25);
    sub_100005DE0(v23, v25);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "DF81FE: %s", v26, 0xCu);
    swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    v40 = v26;
    LODWORD(v26) = v25 >> 62;
    swift_slowDealloc(v40, -1, -1);
  }
  else
  {
    sub_100005DE0(v23, v25);
    sub_100005DE0(v23, v25);
  }

  v41 = sub_100003A2C((uint64_t *)&unk_1001B1290);
  inited = swift_initStackObject(v41, v45);
  *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
  *(_BYTE *)(inited + 32) = 26;
  __asm { BR              X11 }
}

id sub_1000AE464()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  _TtC14softposreaderd12RemoteReader **v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  char *v10;
  unsigned __int8 v11;
  uint64_t v12;
  unsigned __int8 v14[16];
  unsigned __int8 v15;

  v1 = v0;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC9SPREngine13ReadOperation_fallbackTransactionStarted) != 1
    || *(_QWORD *)(v0 + OBJC_IVAR____TtC9SPREngine13ReadOperation_paymentStartedCount) != 1)
  {
    return sub_1000A1658(1);
  }
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics);
  v3 = *(os_unfair_lock_s **)(v2 + 56);
  v4 = v3 + 8;
  v5 = (_TtC14softposreaderd12RemoteReader **)&v3[4];
  v15 = 7;
  os_unfair_lock_lock(v3 + 8);
  sub_10010CC54(v5, &v15);
  os_unfair_lock_unlock(v4);
  v6 = 1;
  v7 = *(os_unfair_lock_s **)(v2 + 56);
  v8 = v7 + 8;
  v9 = (uint64_t)&v7[4];
  v10 = &byte_100199148;
  do
  {
    v11 = *v10++;
    v14[0] = v11;
    os_unfair_lock_lock(v8);
    sub_10010CC6C(v9, v14);
    os_unfair_lock_unlock(v8);
    --v6;
  }
  while (v6);
  if (qword_1001AD090 != -1)
    swift_once(&qword_1001AD090, sub_10009EF8C);
  v12 = type metadata accessor for OSSignposter(0);
  sub_100003A14(v12, (uint64_t)qword_1001B10F8);
  sub_10003B3B4("reader-between_payment_reads", 28, 2, 0xD000000000000026, 0x800000010016D5B0, (unint64_t)"reader-postProcessing", 21, 2, 0xD000000000000028, 0x800000010016D600, *(_QWORD *)(v1 + OBJC_IVAR____TtC9SPREngine13ReadOperation_nfSeReaderSession));
  *(_BYTE *)(v1 + OBJC_IVAR____TtC9SPREngine13ReadOperation_pollingRestart) = 1;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC9SPREngine13ReadOperation_cardTearSent) = 0;
  return sub_1000A34A0(1);
}

uint64_t sub_1000AE654(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  _TtC14softposreaderd12RemoteReader **v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  unsigned __int8 v9;

  v2 = OBJC_IVAR____TtC9SPREngine13ReadOperation_readCompleteSuccessSent;
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readCompleteSuccessSent) & 1) == 0
    && result == 16)
  {
    v3 = v1;
    sub_1000AFF20(9, 0);
    *(_BYTE *)(v1 + v2) = 1;
    v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics);
    v9 = 5;
    v5 = *(os_unfair_lock_s **)(v4 + 56);
    v6 = (_TtC14softposreaderd12RemoteReader **)&v5[4];
    v7 = v5 + 8;
    os_unfair_lock_lock(v5 + 8);
    sub_10010CC54(v6, &v9);
    os_unfair_lock_unlock(v7);
    if (qword_1001AD090 != -1)
      swift_once(&qword_1001AD090, sub_10009EF8C);
    v8 = type metadata accessor for OSSignposter(0);
    sub_100003A14(v8, (uint64_t)qword_1001B10F8);
    return sub_10003AFE8("reader-payment_read_success", 27, 2, *(_QWORD *)(v3 + OBJC_IVAR____TtC9SPREngine13ReadOperation_nfSeReaderSession), 0xD00000000000001CLL, 0x800000010016D570);
  }
  return result;
}

unint64_t sub_1000AE784(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v3 = a2 & 0xFFFFFFFFFFFFLL;
  if (4 * v3 >= result >> 14)
    return String.subscript.getter();
  __break(1u);
  return result;
}

void sub_1000AE7D0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v6;
  _TtC14softposreaderd12RemoteReader *v7;
  _TtC14softposreaderd12RemoteReader *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t inited;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  _TtC14softposreaderd12RemoteReader *v37;
  os_unfair_lock_s *v38;
  uint64_t v39;
  os_unfair_lock_s *v40;
  SEL v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  uint64_t *v48;
  uint64_t v49;
  SEL v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  char v65;
  char v66;
  _TtC14softposreaderd12RemoteReader *v67;

  v3 = v2;
  type metadata accessor for TLV();
  static TLV.decode(from:)(a1, a2);
  v6 = &qword_1001AD000;
  v8 = v7;
  v67 = v7;
  v9 = *(_QWORD *)TLVTag.thirdPartyData.unsafeMutableAddressor();
  v10 = sub_100003A2C((uint64_t *)&unk_1001B36D0);
  v11 = sub_100030828((unint64_t *)&qword_1001AE440, (uint64_t *)&unk_1001B36D0, (uint64_t)&protocol conformance descriptor for [A]);
  v12 = Collection<>.first(tag:)(v9, v10, v11);
  if (v12)
  {
    v13 = v12;
    v64 = v10;
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 152))(v12);
    v16 = v15;
    swift_release(v13);
    v17 = *(_QWORD *)(v3 + OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics);
    v18 = sub_100003A2C((uint64_t *)&unk_1001B1290);
    v19 = &v65;
  }
  else
  {
    v67 = v8;
    v20 = (uint64_t *)TLVTag.cardInterfaceCapabilities.unsafeMutableAddressor();
    v21 = Collection<>.first(tag:)(*v20, v10, v11);
    if (!v21)
      goto LABEL_10;
    v22 = v21;
    v64 = v10;
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 152))(v21);
    v16 = v23;
    swift_release(v22);
    if (qword_1001AD088 != -1)
      swift_once(&qword_1001AD088, sub_10009EEFC);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_100003A14(v24, (uint64_t)qword_1001B10E0);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "thirdPartyData absent, get formFactor from cardInterfaceCapabilities", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    v17 = *(_QWORD *)(v3 + OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics);
    v18 = sub_100003A2C((uint64_t *)&unk_1001B1290);
    v19 = &v66;
  }
  inited = swift_initStackObject(v18, v19);
  *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
  *(_BYTE *)(inited + 32) = 12;
  *(_QWORD *)(inited + 64) = &type metadata for String;
  *(_QWORD *)(inited + 40) = v14;
  *(_QWORD *)(inited + 48) = v16;
  v37 = (_TtC14softposreaderd12RemoteReader *)sub_1000E8C74(inited, v30, v31, v32, v33, v34, v35, v36);
  v38 = *(os_unfair_lock_s **)(v17 + 56);
  v39 = (uint64_t)&v38[4];
  v40 = v38 + 8;
  os_unfair_lock_lock(v38 + 8);
  sub_100060510(v39, (uint64_t)v37);
  os_unfair_lock_unlock(v40);
  swift_bridgeObjectRelease(v37, v41, v42, v43, v44, v45, v46, v47);
  v6 = &qword_1001AD000;
  v10 = v64;
LABEL_10:
  v67 = v8;
  v48 = (uint64_t *)TLVTag.interacCardTransactionInformation.unsafeMutableAddressor();
  v49 = Collection<>.first(tag:)(*v48, v10, v11);
  swift_bridgeObjectRelease(v8, v50, v51, v52, v53, v54, v55, v56);
  if (v49)
  {
    (*(void (**)(void))(*(_QWORD *)v49 + 144))();
    v58 = v57;
    swift_release(v49);
    __asm { BR              X10 }
  }
  if (v6[17] != -1)
    swift_once(&qword_1001AD088, sub_10009EEFC);
  v59 = type metadata accessor for Logger(0);
  v60 = sub_100003A14(v59, (uint64_t)qword_1001B10E0);
  v61 = Logger.logObject.getter(v60);
  v62 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v61, v62))
  {
    v63 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v63 = 0;
    _os_log_impl((void *)&_mh_execute_header, v61, v62, "ReadOperation.processPayAppletAnalytics() ended", v63, 2u);
    swift_slowDealloc(v63, -1, -1);
  }

}

uint64_t type metadata accessor for ReadOperation()
{
  return objc_opt_self(_TtC9SPREngine13ReadOperation);
}

void sub_1000AECF0(_TtC14softposreaderd12RemoteReader **a1, unsigned __int8 *a2, uint64_t a3)
{
  sub_10009B8DC(a1, *a2, a3, (uint64_t (*)(uint64_t))sub_10004BAE8);
}

_TtC14softposreaderd12RemoteReader *sub_1000AED10(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _TtC14softposreaderd12RemoteReader *result;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  _TtC14softposreaderd12RemoteReader *v25;

  v3 = v2;
  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = &_swiftEmptyArrayStorage;
    if (!v6)
      break;
    v25 = &_swiftEmptyArrayStorage;
    result = (_TtC14softposreaderd12RemoteReader *)specialized ContiguousArray.reserveCapacity(_:)(v6);
    if (v6 < 0)
    {
      __break(1u);
      return result;
    }
    v8 = 0;
    while (v6 != v8)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a1);
      else
        v9 = *(id *)(a1 + 8 * v8 + 32);
      v10 = v9;
      v23 = v9;
      sub_1000A84A0(&v23, a2, &v24);

      if (v3)
        return (_TtC14softposreaderd12RemoteReader *)swift_release(v25);
      ++v8;
      v12 = v24;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
      v13 = *(_QWORD *)&v25->instance[8];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
      v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v12);
      specialized ContiguousArray._endMutation()(v14);
      if (v6 == v8)
        return v25;
    }
    __break(1u);
LABEL_16:
    if (a1 < 0)
      v15 = a1;
    else
      v15 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter(v15);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, v16, v17, v18, v19, v20, v21, v22);
  }
  return result;
}

uint64_t sub_1000AEE74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000AEE84(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000AEE8C(uint64_t a1)
{
  __asm { BR              X12 }
}

void sub_1000AEEE4()
{
  uint64_t v0;

  if (BYTE6(v0))
    __asm { BR              X8 }
}

_TtC14softposreaderd12RemoteReader *sub_1000AF248(uint64_t a1, _TtC14softposreaderd12RemoteReader *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  SEL v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  unint64_t v26;
  const char *v27;
  const char *v28;
  void *v29;
  void *v30;
  _TtC14softposreaderd12RemoteReader *v31;
  _TtC14softposreaderd12RemoteReader *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  const char *v38;
  unint64_t v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  _TtC14softposreaderd12RemoteReader *v47;
  SEL v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  uint64_t v55;
  _TtC14softposreaderd12RemoteReader *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _TtC14softposreaderd12RemoteReader *v62;
  _TtC14softposreaderd12RemoteReader *v63;
  uint64_t v64;
  SEL v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  const char *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  char v87;
  _TtC14softposreaderd12RemoteReader *v88;
  SEL v89;
  char v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t *v100;
  uint64_t v101;
  uint8_t *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD v106[2];
  uint64_t v107;
  uint64_t v108;

  v4 = sub_100003A2C(&qword_1001AFDA8);
  __chkstk_darwin(v4);
  v6 = (char *)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = a1;
  v108 = (uint64_t)a2;
  strcpy((char *)v106, "\\d+\\.\\d+\\.\\d+");
  HIWORD(v106[1]) = -4864;
  v7 = type metadata accessor for Locale(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = sub_1000095D0();
  v9 = StringProtocol.range<A>(of:options:range:locale:)(v106, 1024, 0, 0, 1, v6, &type metadata for String, &type metadata for String, v8, v8);
  v11 = v10;
  v13 = v12;
  sub_10005218C((uint64_t)v6, &qword_1001AFDA8);
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v106[1], v14, v15, v16, v17, v18, v19, v20);
  if ((v13 & 1) != 0)
    return &_swiftEmptyArrayStorage;
  if (qword_1001AD088 != -1)
    swift_once(&qword_1001AD088, sub_10009EEFC);
  v21 = type metadata accessor for Logger(0);
  sub_100003A14(v21, (uint64_t)qword_1001B10E0);
  v22 = swift_bridgeObjectRetain_n(a2, 2);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v105 = v11;
    v25 = (uint8_t *)swift_slowAlloc(12, -1);
    v103 = swift_slowAlloc(32, -1);
    v107 = v103;
    *(_DWORD *)v25 = 136315138;
    v102 = v25 + 4;
    swift_bridgeObjectRetain();
    v26 = sub_1000AE784(v9, a1, (unint64_t)a2);
    v28 = v27;
    v104 = v9;
    v30 = v29;
    v32 = v31;
    swift_bridgeObjectRelease(a2, v27, v29, v31, v33, v34, v35, v36);
    v37 = static String._fromSubstring(_:)(v26, v28, v30, v32);
    v39 = (unint64_t)v38;
    swift_bridgeObjectRelease(v32, v38, v40, v41, v42, v43, v44, v45);
    v46 = v37;
    v11 = v105;
    v106[0] = sub_1000056EC(v46, v39, &v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v106, &v106[1], v102, v25 + 12);
    swift_bridgeObjectRelease_n(a2, 2);
    v47 = (_TtC14softposreaderd12RemoteReader *)v39;
    v9 = v104;
    swift_bridgeObjectRelease(v47, v48, v49, v50, v51, v52, v53, v54);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "applet version: %s", v25, 0xCu);
    v55 = v103;
    swift_arrayDestroy(v103, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v25, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v57 = String.subscript.getter(v9, v11, a1, a2);
  v59 = v58;
  v61 = v60;
  v63 = v62;
  v107 = 46;
  v108 = 0xE100000000000000;
  __chkstk_darwin(v57);
  v100 = &v107;
  swift_bridgeObjectRetain();
  v64 = sub_10007D2AC(0x7FFFFFFFFFFFFFFFLL, 1, sub_10007EA50, (uint64_t)(&v101 - 4), v57, v59, v61, (uint64_t)v63);
  swift_bridgeObjectRelease(v63, v65, v66, v67, v68, v69, v70, v71);
  v79 = *(_QWORD *)(v64 + 16);
  if (v79)
  {
    v80 = (unint64_t *)(v64 + 56);
    v56 = &_swiftEmptyArrayStorage;
    while (1)
    {
      v82 = *(v80 - 3);
      v81 = *(v80 - 2);
      if (!((v81 ^ v82) >> 14))
        break;
      v84 = *(v80 - 1);
      v83 = *v80;
      if ((*v80 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRetain();
        v86 = (uint64_t)sub_10007DA78(v82, v81, v84, v83, 10);
        v90 = (char)v89;
        swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v83, v89, v91, v92, v93, v94, v95, v96);
        v88 = v56;
        if ((v90 & 1) != 0)
          goto LABEL_21;
      }
      else
      {
        if ((v83 & 0x2000000000000000) != 0)
        {
          v107 = *(v80 - 1);
          v108 = v83 & 0xFFFFFFFFFFFFFFLL;
          v85 = &v107;
        }
        else if ((v84 & 0x1000000000000000) != 0)
        {
          v85 = (uint64_t *)((v83 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v85 = (uint64_t *)_StringObject.sharedUTF8.getter(*(v80 - 1), *v80);
        }
        v86 = sub_10007E2F4((uint64_t)v85, v82, v81, v84, v83, 10);
        LOBYTE(v106[0]) = v87 & 1;
        v88 = v56;
        if ((v87 & 1) != 0)
          goto LABEL_21;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v88) & 1) == 0)
        goto LABEL_18;
LABEL_22:
      v98 = *(_QWORD *)&v56->instance[8];
      v97 = *(_QWORD *)&v56->instance[16];
      if (v98 >= v97 >> 1)
        v56 = (_TtC14softposreaderd12RemoteReader *)sub_100091158((_QWORD *)(v97 > 1), v98 + 1, 1, v56);
      *(_QWORD *)&v56->instance[8] = v98 + 1;
      *(_QWORD *)&v56->instance[8 * v98 + 24] = v86;
      v80 += 4;
      if (!--v79)
        goto LABEL_28;
    }
    v88 = v56;
LABEL_21:
    v86 = 0;
    if ((swift_isUniquelyReferenced_nonNull_native(v88) & 1) != 0)
      goto LABEL_22;
LABEL_18:
    v56 = (_TtC14softposreaderd12RemoteReader *)sub_100091158(0, *(_QWORD *)&v56->instance[8] + 1, 1, v56);
    goto LABEL_22;
  }
  v56 = &_swiftEmptyArrayStorage;
LABEL_28:
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v64, v72, v73, v74, v75, v76, v77, v78);
  return v56;
}

BOOL sub_1000AF744(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  if (*(_QWORD *)(a1 + 16) == 3)
    return *(_QWORD *)(a1 + 32) > 2;
  if (qword_1001AD088 != -1)
    swift_once(&qword_1001AD088, sub_10009EEFC);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100003A14(v2, (uint64_t)qword_1001B10E0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "applet version array bad length", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  return 0;
}

uint64_t *sub_1000AF830(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = a1[3];
  v3 = a1[4];
  sub_100005DE0(*a1, a1[1]);
  sub_100005DE0(v2, v3);
  return a1;
}

uint64_t sub_1000AF874()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  _TtC14softposreaderd12RemoteReader *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readerConfig) + 16);
  switch(v1)
  {
    case 0:
      return sub_10010DD5C((uint64_t)&off_100198CD8);
    case 1:
      v8 = sub_100003A2C(&qword_1001AC678);
      v4 = swift_allocObject(v8, 37, 7);
      v5 = (_TtC14softposreaderd12RemoteReader *)v4;
      *(_OWORD *)(v4 + 16) = xmmword_10015E3E0;
      *(_DWORD *)(v4 + 32) = 362;
      v6 = 2;
      goto LABEL_6;
    case 2:
      v3 = sub_100003A2C(&qword_1001AC678);
      v4 = swift_allocObject(v3, 37, 7);
      v5 = (_TtC14softposreaderd12RemoteReader *)v4;
      *(_OWORD *)(v4 + 16) = xmmword_10015E3E0;
      *(_DWORD *)(v4 + 32) = 362;
      v6 = 1;
LABEL_6:
      *(_BYTE *)(v4 + 36) = v6;
      goto LABEL_7;
    case 3:
      v7 = sub_100003A2C(&qword_1001AC678);
      v4 = swift_allocObject(v7, 37, 7);
      v5 = (_TtC14softposreaderd12RemoteReader *)v4;
      *(_OWORD *)(v4 + 16) = xmmword_10015E3E0;
      *(_DWORD *)(v4 + 32) = 362;
      *(_BYTE *)(v4 + 36) = 0;
LABEL_7:
      v9 = sub_10010DD5C(v4);
      swift_bridgeObjectRelease(v5, v10, v11, v12, v13, v14, v15, v16);
      result = v9;
      break;
    default:
      type metadata accessor for SPRReaderMode(0);
      v18 = v1;
      result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v17, &v18, v17, &type metadata for Int);
      __break(1u);
      break;
  }
  return result;
}

_QWORD *sub_1000AF9DC(uint64_t a1, uint64_t (*a2)(unint64_t, id))
{
  uint64_t v3;
  unint64_t v4;
  id v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  specialized ContiguousArray.reserveCapacity(_:)(0);
  if ((unint64_t)a1 >> 62)
    goto LABEL_13;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (v3)
  {
    while (1)
    {
      v4 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
LABEL_7:
        v6 = v5;
        v7 = v4 + 1;
        if (__OFADD__(v4, 1))
          goto LABEL_12;
        v8 = a2(v4, v5);

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        v9 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9);
        v10 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v8);
        specialized ContiguousArray._endMutation()(v10);
        ++v4;
        if (v7 == v3)
          goto LABEL_17;
      }
      if (v4 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_12:
      __break(1u);
LABEL_13:
      if (a1 < 0)
        v11 = a1;
      else
        v11 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v3 = _CocoaArrayWrapper.endIndex.getter(v11);
      if (!v3)
        goto LABEL_17;
    }
    v5 = *(id *)(a1 + 8 * v4 + 32);
    goto LABEL_7;
  }
LABEL_17:
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_1000AFB30(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4]);
  return a1;
}

uint64_t sub_1000AFB64(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a2 >> 60 != 15)
  {
    sub_100005D9C(result, a2);
    return sub_100005D9C(a4, a5);
  }
  return result;
}

uint64_t sub_1000AFBA0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

_BYTE *sub_1000AFBC4()
{
  uint64_t v0;

  return sub_1000AC190(*(_BYTE **)(v0 + 16));
}

void sub_1000AFBD0()
{
  uint64_t v0;

  sub_1000AA67C(*(_QWORD *)(v0 + 24));
}

void sub_1000AFBF8()
{
  uint64_t v0;

  sub_1000A9FA0(*(_QWORD *)(v0 + 24));
}

id sub_1000AFC1C(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_1000A8DD4(a1, a2, *(_BYTE **)(v2 + 16), *(_BYTE **)(v2 + 24), *(_BYTE **)(v2 + 32), *(_BYTE **)(v2 + 40), *(_QWORD **)(v2 + 48));
}

uint64_t sub_1000AFC2C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000AFC50()
{
  uint64_t v0;

  sub_1000A6E9C(v0);
}

void sub_1000AFC6C()
{
  uint64_t v0;

  sub_1000A56F0(*(_QWORD *)(v0 + 24));
}

uint64_t sub_1000AFC90()
{
  uint64_t v0;

  return swift_deallocObject(v0, 25, 7);
}

void sub_1000AFCB4()
{
  uint64_t v0;

  sub_1000A4C58(*(_BYTE *)(v0 + 24));
}

id sub_1000AFCDC()
{
  return sub_1000A51AC();
}

uint64_t sub_1000AFCFC()
{
  uint64_t v0;

  return sub_1000A1D18(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000AFD04()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000AFD14()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000AFD40()
{
  uint64_t v0;

  sub_1000A324C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000AFD48()
{
  uint64_t v0;

  return sub_1000A0F34(*(_QWORD *)(v0 + 16));
}

uint64_t storeEnumTagSinglePayload for ReadOperation.State(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000AFD9C + 4 * byte_100160299[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_1000AFDD0 + 4 * byte_100160294[v4]))();
}

uint64_t sub_1000AFDD0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1000AFDD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x1000AFDE0);
  return result;
}

uint64_t sub_1000AFDEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x1000AFDF4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000AFDF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1000AFE00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReadOperation.State()
{
  return &type metadata for ReadOperation.State;
}

uint64_t sub_1000AFE90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B1330);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B1330);
  if (qword_1001AD138 != -1)
    swift_once(&qword_1001AD138, sub_1000CC224);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4D98);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_1000AFF20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _TtC14softposreaderd12RemoteReader *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  _TtC14softposreaderd12RemoteReader *v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id result;
  uint64_t v33;
  uint64_t v34;

  v3 = v2;
  if (qword_1001AD098 != -1)
    swift_once(&qword_1001AD098, sub_1000AFE90);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100003A14(v6, (uint64_t)qword_1001B1330);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(64, -1);
    v34 = v11;
    *(_DWORD *)v10 = 136315394;
    v12 = SPRReadEvent.description.getter(a1);
    v14 = (_TtC14softposreaderd12RemoteReader *)v13;
    v33 = sub_1000056EC(v12, v13, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
    *(_WORD *)(v10 + 12) = 2080;
    v22 = SPRReaderMode.description.getter(a2);
    v24 = (_TtC14softposreaderd12RemoteReader *)v23;
    v33 = sub_1000056EC(v22, v23, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease(v24, v25, v26, v27, v28, v29, v30, v31);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "onUpdate(event: .%s, mode: .%s)", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }

  result = *(id *)(v3 + 16);
  if (result)
    return objc_msgSend(result, "onUpdateWithEvent:mode:", a1, a2);
  return result;
}

uint64_t sub_1000B013C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _TtC14softposreaderd12RemoteReader *v13;
  SEL v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v22;
  uint64_t v23;

  v2 = v1;
  if (qword_1001AD098 != -1)
    swift_once(&qword_1001AD098, sub_1000AFE90);
  v4 = type metadata accessor for Logger(0);
  sub_100003A14(v4, (uint64_t)qword_1001B1330);
  swift_errorRetain();
  v5 = swift_errorRetain();
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v22 = a1;
    v23 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_errorRetain();
    v10 = sub_100003A2C((uint64_t *)&unk_1001B1280);
    v11 = String.init<A>(describing:)(&v22, v10);
    v13 = (_TtC14softposreaderd12RemoteReader *)v12;
    v22 = sub_1000056EC(v11, v12, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v13, v14, v15, v16, v17, v18, v19, v20);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "onFailure(error: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  return (*(uint64_t (**)(_QWORD, uint64_t))(v2 + 24))(0, a1);
}

uint64_t sub_1000B03B4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for ReadDelegateRelay()
{
  return objc_opt_self(_TtC9SPREngine17ReadDelegateRelay);
}

_TtC14softposreaderd12RemoteReader *sub_1000B0400(uint64_t a1, _TtC14softposreaderd12RemoteReader **a2)
{
  const char *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  _TtC14softposreaderd12RemoteReader *v11;
  _TtC14softposreaderd12RemoteReader *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  Class *v31;
  _TtC14softposreaderd12RemoteReader *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  char *v43;
  unsigned __int8 *instance;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _TtC14softposreaderd12RemoteReader *v49;
  _TtC14softposreaderd12RemoteReader *result;
  _TtC14softposreaderd12RemoteReader **v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;

  v54 = *(_QWORD *)(a1 + 16);
  if (!v54)
    return &_swiftEmptyArrayStorage;
  v53 = a1 + 32;
  swift_bridgeObjectRetain();
  v10 = 0;
  v11 = &_swiftEmptyArrayStorage;
  v52 = a2;
  while (1)
  {
    v12 = *a2;
    v13 = *(_QWORD *)&(*a2)->instance[8];
    if (!v13)
      goto LABEL_4;
    v14 = (uint64_t *)(v53 + 40 * v10);
    v15 = *v14;
    v16 = v14[1];
    v17 = *(_QWORD *)&v12->instance[24];
    v18 = *(_QWORD *)&v12->instance[32];
    v19 = v17 == *v14 && v18 == v16;
    v55 = *(_OWORD *)(v14 + 3);
    v56 = v14[2];
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v15, v16, 0) & 1) != 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v27 = 0;
      if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) != 0)
        goto LABEL_12;
LABEL_27:
      v12 = sub_1000929E4((uint64_t)v12, v20, v21, v22, v23, v24, v25, v26);
      goto LABEL_12;
    }
    instance = v12[1].instance;
    v45 = 1;
    do
    {
      if (v13 == v45)
      {
        a2 = v52;
        goto LABEL_4;
      }
      v27 = v45;
      v46 = *((_QWORD *)instance - 1);
      v47 = *(_QWORD *)instance;
      if (v46 == v15 && v47 == v16)
        break;
      ++v45;
      instance += 16;
    }
    while ((_stringCompareWithSmolCheck(_:_:expecting:)(v46, v47, v15, v16, 0) & 1) == 0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
      goto LABEL_27;
LABEL_12:
    v28 = *(_QWORD *)&v12->instance[8];
    if (v27 >= v28)
      break;
    v29 = v28 - 1;
    v30 = v28 - 1 - v27;
    if (v30 < 0)
      goto LABEL_32;
    v31 = &v12->super.isa + 2 * v27;
    v32 = (_TtC14softposreaderd12RemoteReader *)v31[5];
    memmove(v31 + 4, v31 + 6, 16 * v30);
    *(_QWORD *)&v12->instance[8] = v29;
    a2 = v52;
    *v52 = v12;
    swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_100091B04(0, *(_QWORD *)&v11->instance[8] + 1, 1, (uint64_t)v11, v6, v7, v8, v9);
    v41 = *(_QWORD *)&v11->instance[8];
    v40 = *(_QWORD *)&v11->instance[16];
    v42 = v55;
    if (v41 >= v40 >> 1)
    {
      v49 = sub_100091B04((_TtC14softposreaderd12RemoteReader *)(v40 > 1), v41 + 1, 1, (uint64_t)v11, v6, v7, v8, v9);
      v42 = v55;
      v11 = v49;
    }
    *(_QWORD *)&v11->instance[8] = v41 + 1;
    v43 = (char *)v11 + 40 * v41;
    *((_QWORD *)v43 + 4) = v15;
    *((_QWORD *)v43 + 5) = v16;
    *((_QWORD *)v43 + 6) = v56;
    *(_OWORD *)(v43 + 56) = v42;
LABEL_4:
    if (++v10 == v54)
    {
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, v3, v4, v5, v6, v7, v8, v9);
      return v11;
    }
  }
  __break(1u);
LABEL_32:
  result = (_TtC14softposreaderd12RemoteReader *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000B06B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B1408);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B1408);
  if (qword_1001AD140 != -1)
    swift_once(&qword_1001AD140, sub_1000CC2E4);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4DB0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

unint64_t sub_1000B0744()
{
  uint64_t v0;
  _TtC14softposreaderd12RemoteReader *v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  _TtC14softposreaderd12RemoteReader *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  SEL v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  Swift::String v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  _BYTE v28[24];

  swift_beginAccess(v0 + 72, v28, 0, 0);
  v1 = *(_TtC14softposreaderd12RemoteReader **)(v0 + 72);
  v2 = swift_bridgeObjectRetain();
  v3 = sub_1000B4000(v2);
  v5 = (_TtC14softposreaderd12RemoteReader *)v4;
  swift_bridgeObjectRelease(v1, v4, v6, v7, v8, v9, v10, v11);
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)0xE000000000000000, v12, v13, v14, v15, v16, v17, v18);
  v19._countAndFlagsBits = v3;
  v19._object = v5;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v5, v20, v21, v22, v23, v24, v25, v26);
  return 0xD000000000000011;
}

uint64_t sub_1000B07F4()
{
  uint64_t *v0;
  SEL v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  _TtC14softposreaderd12RemoteReader *v9;
  Swift::String v10;
  SEL v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  Swift::String v18;
  uint64_t v19;
  _TtC14softposreaderd12RemoteReader *v20;
  Swift::String v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  Swift::String v29;
  _TtC14softposreaderd12RemoteReader *v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  _TtC14softposreaderd12RemoteReader *object;
  SEL v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;

  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)0xE000000000000000, v1, v2, v3, v4, v5, v6, v7);
  v8 = *v0;
  v9 = (_TtC14softposreaderd12RemoteReader *)v0[1];
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = v8;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v9, v11, v12, v13, v14, v15, v16, v17);
  v18._countAndFlagsBits = 0x6C61626F6C67202CLL;
  v18._object = (void *)0xEC000000203A6449;
  String.append(_:)(v18);
  v19 = v0[2];
  v20 = (_TtC14softposreaderd12RemoteReader *)v0[3];
  swift_bridgeObjectRetain();
  v21._countAndFlagsBits = v19;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v20, v22, v23, v24, v25, v26, v27, v28);
  v29._countAndFlagsBits = 0x2043482D544B202CLL;
  v29._object = (void *)0xED0000203A70616DLL;
  String.append(_:)(v29);
  v30 = (_TtC14softposreaderd12RemoteReader *)v0[4];
  v31 = type metadata accessor for KernelTokenHostConfigurationMapping(0);
  v32 = swift_bridgeObjectRetain();
  v33._countAndFlagsBits = Array.description.getter(v32, v31);
  object = (_TtC14softposreaderd12RemoteReader *)v33._object;
  String.append(_:)(v33);
  swift_bridgeObjectRelease(v30, v35, v36, v37, v38, v39, v40, v41);
  swift_bridgeObjectRelease(object, v42, v43, v44, v45, v46, v47, v48);
  return 0x49656C69666F7270;
}

void sub_1000B0930()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE v25[32];

  v1 = v0;
  v2 = v0 + 2;
  v3 = v0[5];
  v4 = v1[6];
  sub_100005EF8(v2, v3);
  v5 = v1[7];
  v6 = v1[8];
  v7 = sub_100003A2C(&qword_1001B15B8);
  v8 = sub_1000B450C(&qword_1001B15D0, (void (*)(void))sub_1000B4574, (uint64_t)&protocol conformance descriptor for <A> [A]);
  sub_1000BC0E8(v5, v6, v3, v7, v4, v8);
  swift_beginAccess(v1 + 9, v25, 1, 0);
  v9 = v1[9];
  v1[9] = v22;
  swift_bridgeObjectRelease(v9);
  if (qword_1001AD0A0 != -1)
    swift_once(&qword_1001AD0A0, sub_1000B06B4);
  v10 = type metadata accessor for Logger(0);
  sub_100003A14(v10, (uint64_t)qword_1001B1408);
  v11 = swift_retain_n(v1, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v24 = v15;
    *(_DWORD *)v14 = 136315138;
    v16 = v1[9];
    swift_retain(v1);
    v17 = swift_bridgeObjectRetain(v16);
    v18 = sub_1000B4000(v17);
    v20 = v19;
    swift_bridgeObjectRelease(v16);
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease(0xE000000000000000);
    v23 = 0x800000010016C620;
    v21._countAndFlagsBits = v18;
    v21._object = v20;
    String.append(_:)(v21);
    swift_release(v1);
    swift_bridgeObjectRelease(v20);
    v22 = sub_1000056EC(0xD000000000000011, 0x800000010016C620, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v14 + 4, v14 + 12);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(0x800000010016C620);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "PayAppletProfileCache: %s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

    swift_release_n(v1, 2);
  }
}

void sub_1000B0CA0()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _TtC14softposreaderd12RemoteReader *v7;
  uint64_t v8;
  uint64_t v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  _TtC14softposreaderd12RemoteReader *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  _TtC14softposreaderd12RemoteReader *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  SEL v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  Swift::String v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  _TtC14softposreaderd12RemoteReader *v49;
  SEL v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  _TtC14softposreaderd12RemoteReader *v57;
  _TtC14softposreaderd12RemoteReader *v58;
  uint64_t v59;
  _BYTE v60[24];

  v1 = v0;
  v2 = v0 + 2;
  v3 = v0[5];
  v4 = v1[6];
  sub_100005EF8(v2, v3);
  v5 = v1[7];
  v6 = v1[8];
  swift_beginAccess(v1 + 9, v60, 0, 0);
  v57 = (_TtC14softposreaderd12RemoteReader *)v1[9];
  v7 = v57;
  swift_bridgeObjectRetain();
  v8 = sub_100003A2C(&qword_1001B15B8);
  v9 = sub_1000B450C(&qword_1001B15C0, (void (*)(void))sub_1000B44C8, (uint64_t)&protocol conformance descriptor for <A> [A]);
  sub_1000BBFB0(v5, v6, (uint64_t)&v57, v3, v8, v4, v9);
  swift_bridgeObjectRelease(v7, v10, v11, v12, v13, v14, v15, v16);
  if (qword_1001AD0A0 != -1)
    swift_once(&qword_1001AD0A0, sub_1000B06B4);
  v17 = type metadata accessor for Logger(0);
  sub_100003A14(v17, (uint64_t)qword_1001B1408);
  v18 = swift_retain_n(v1, 2);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v59 = v22;
    *(_DWORD *)v21 = 136315138;
    v23 = (_TtC14softposreaderd12RemoteReader *)v1[9];
    swift_retain();
    v24 = swift_bridgeObjectRetain();
    v25 = sub_1000B4000(v24);
    v27 = (_TtC14softposreaderd12RemoteReader *)v26;
    swift_bridgeObjectRelease(v23, v26, v28, v29, v30, v31, v32, v33);
    v57 = 0;
    v58 = (_TtC14softposreaderd12RemoteReader *)0xE000000000000000;
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease(v58, v34, v35, v36, v37, v38, v39, v40);
    v57 = (_TtC14softposreaderd12RemoteReader *)0xD000000000000011;
    v58 = (_TtC14softposreaderd12RemoteReader *)0x800000010016C620;
    v41._countAndFlagsBits = v25;
    v41._object = v27;
    String.append(_:)(v41);
    swift_release(v1);
    swift_bridgeObjectRelease(v27, v42, v43, v44, v45, v46, v47, v48);
    v49 = v58;
    v57 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC((uint64_t)v57, (unint64_t)v58, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v21 + 4, v21 + 12);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v49, v50, v51, v52, v53, v54, v55, v56);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "PayAppletProfileCache: %s", v21, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);

  }
  else
  {

    swift_release_n(v1, 2);
  }
}

uint64_t sub_1000B11D4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  _TtC14softposreaderd12RemoteReader *v20;
  uint64_t v21;
  _TtC14softposreaderd12RemoteReader *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  SEL v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  SEL v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  _TtC14softposreaderd12RemoteReader *v51;
  uint64_t v52;
  uint64_t v53;

  v3 = v2;
  v6 = sub_100003A2C(&qword_1001B15A8);
  __chkstk_darwin(v6);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003A2C(&qword_1001B15B0);
  __chkstk_darwin(v9);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for KernelTokenHostConfigurationMapping(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B141C(a1, (uint64_t *)v8);
  v15 = sub_100003A2C(&qword_1001B15A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v8, 1, v15) == 1)
  {
    sub_1000B4488((uint64_t)v8);
    v16 = *(_QWORD *)(v3 + 80);
    v17 = *(_QWORD *)(v3 + 88);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
  }
  else
  {
    v23 = *((_QWORD *)v8 + 2);
    v24 = (uint64_t)&v8[*(int *)(v15 + 48)];
    v25 = (uint64_t)&v11[*(int *)(v9 + 48)];
    *(_OWORD *)v11 = *(_OWORD *)v8;
    *((_QWORD *)v11 + 2) = v23;
    *(_OWORD *)(v11 + 24) = *(_OWORD *)(v8 + 24);
    sub_1000B4444(v24, v25);
    v26 = *(_QWORD *)v11;
    v20 = (_TtC14softposreaderd12RemoteReader *)*((_QWORD *)v11 + 1);
    v21 = *((_QWORD *)v11 + 2);
    v22 = (_TtC14softposreaderd12RemoteReader *)*((_QWORD *)v11 + 3);
    v51 = (_TtC14softposreaderd12RemoteReader *)*((_QWORD *)v11 + 4);
    v52 = v26;
    sub_1000B4444((uint64_t)&v11[*(int *)(v9 + 48)], (uint64_t)v14);
    v27 = *(_QWORD *)(v3 + 88);
    v53 = *(_QWORD *)&v14[*(int *)(v12 + 20)];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000151F8(v27);
    v17 = v53;
    v53 = *(_QWORD *)&v14[*(int *)(v12 + 24)];
    swift_bridgeObjectRetain();
    v28 = swift_bridgeObjectRetain();
    sub_1000151F8(v28);
    swift_bridgeObjectRelease(v51, v29, v30, v31, v32, v33, v34, v35);
    swift_bridgeObjectRelease(v22, v36, v37, v38, v39, v40, v41, v42);
    swift_bridgeObjectRelease(v20, v43, v44, v45, v46, v47, v48, v49);
    v16 = v53;
    result = sub_1000B4408((uint64_t)v14);
    v19 = v52;
  }
  *a2 = v19;
  a2[1] = v20;
  a2[2] = v21;
  a2[3] = v22;
  a2[4] = v17;
  a2[5] = v16;
  return result;
}

uint64_t sub_1000B141C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _TtC14softposreaderd12RemoteReader *v30;
  _TtC14softposreaderd12RemoteReader *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  const char *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  SEL v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  SEL v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  _TtC14softposreaderd12RemoteReader *v66;
  _TtC14softposreaderd12RemoteReader *v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  int v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _TtC14softposreaderd12RemoteReader *v79;
  SEL v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  uint8_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  _TtC14softposreaderd12RemoteReader *v107;
  SEL v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  id v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _TtC14softposreaderd12RemoteReader *v128;
  _TtC14softposreaderd12RemoteReader *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133[4];

  v3 = v2;
  v123 = a2;
  v125 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v125 - 8);
  v6 = __chkstk_darwin(v125);
  v119 = (char *)&v117 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v120 = (char *)&v117 - v8;
  v9 = type metadata accessor for KernelTokenHostConfigurationMapping(0);
  v126 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v117 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001AD0A0 != -1)
LABEL_23:
    swift_once(&qword_1001AD0A0, sub_1000B06B4);
  v127 = v5;
  v12 = type metadata accessor for Logger(0);
  v124 = sub_100003A14(v12, (uint64_t)qword_1001B1408);
  v13 = Logger.logObject.getter(v124);
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v133[0] = v16;
    *(_DWORD *)v15 = 136315138;
    v132 = sub_1000056EC(0xD00000000000001FLL, 0x800000010016D9E0, v133);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, v133, v15 + 4, v15 + 12);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "PayAppletProfileCache.%s", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }

  swift_beginAccess(v3 + 72, v133, 0, 0);
  v5 = *(_QWORD *)(v3 + 72);
  v17 = *(_QWORD *)(v5 + 16);
  if (v17)
  {
    v18 = v5 + 32;
    swift_bridgeObjectRetain();
    v26 = 0;
    v117 = v5 + 32;
    v118 = v17;
    while (1)
    {
      if (v26 >= *(_QWORD *)(v5 + 16))
      {
        __break(1u);
        goto LABEL_23;
      }
      v27 = (uint64_t *)(v18 + 40 * v26);
      v3 = v27[4];
      v28 = *(_QWORD *)(v3 + 16);
      if (v28)
        break;
LABEL_6:
      if (++v26 == v17)
      {
        swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v5, v19, v20, v21, v22, v23, v24, v25);
        goto LABEL_18;
      }
    }
    v29 = *v27;
    v30 = (_TtC14softposreaderd12RemoteReader *)v27[1];
    v31 = (_TtC14softposreaderd12RemoteReader *)v27[3];
    v121 = v27[2];
    v122 = v29;
    v32 = v126;
    v33 = v3 + ((*(unsigned __int8 *)(v126 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v126 + 80));
    swift_bridgeObjectRetain_n(v3, 2);
    v129 = v30;
    swift_bridgeObjectRetain();
    v128 = v31;
    swift_bridgeObjectRetain();
    v34 = *(_QWORD *)(v32 + 72);
    while (1)
    {
      sub_1000B43C4(v33, (uint64_t)v11);
      if ((static UUID.== infix(_:_:)(v11, a1) & 1) != 0)
        break;
      sub_1000B4408((uint64_t)v11);
      v33 += v34;
      if (!--v28)
      {
        swift_bridgeObjectRelease(v128, v42, v43, v44, v45, v46, v47, v48);
        swift_bridgeObjectRelease(v129, v49, v50, v51, v52, v53, v54, v55);
        swift_bridgeObjectRelease_n(v3, 2);
        v18 = v117;
        v17 = v118;
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v5, v35, v36, v37, v38, v39, v40, v41);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v3, v56, v57, v58, v59, v60, v61, v62);
    v63 = v127;
    v64 = v120;
    v65 = v125;
    (*(void (**)(char *, uint64_t, uint64_t))(v127 + 16))(v120, a1, v125);
    v66 = v129;
    swift_bridgeObjectRetain_n(v129, 4);
    v67 = v128;
    swift_bridgeObjectRetain_n(v128, 4);
    v68 = swift_bridgeObjectRetain_n(v3, 4);
    v69 = Logger.logObject.getter(v68);
    v70 = static os_log_type_t.default.getter();
    v71 = v70;
    if (os_log_type_enabled(v69, v70))
    {
      v72 = v64;
      v73 = swift_slowAlloc(32, -1);
      v74 = swift_slowAlloc(96, -1);
      v126 = v74;
      v132 = v74;
      *(_DWORD *)v73 = 136315650;
      LODWORD(v124) = v71;
      v75 = UUID.uuidString.getter(v74);
      v77 = sub_100081EE4(v75, v76);
      v79 = (_TtC14softposreaderd12RemoteReader *)v78;
      v130 = sub_1000056EC(v77, v78, &v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, &v131, v73 + 4, v73 + 12);
      swift_bridgeObjectRelease(v79, v80, v81, v82, v83, v84, v85, v86);
      v87 = v72;
      v67 = v128;
      v66 = v129;
      (*(void (**)(char *, uint64_t))(v63 + 8))(v87, v65);
      *(_WORD *)(v73 + 12) = 2080;
      swift_bridgeObjectRetain();
      v88 = v122;
      v130 = sub_1000056EC(v122, (unint64_t)v66, &v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, &v131, v73 + 14, v73 + 22);
      swift_bridgeObjectRelease_n(v3, 2);
      swift_bridgeObjectRelease_n(v67, 2);
      swift_bridgeObjectRelease_n(v66, 3);
      *(_WORD *)(v73 + 22) = 2080;
      swift_bridgeObjectRetain();
      v89 = v121;
      v130 = sub_1000056EC(v121, (unint64_t)v67, &v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, &v131, v73 + 24, v73 + 32);
      swift_bridgeObjectRelease_n(v3, 2);
      swift_bridgeObjectRelease_n(v66, 2);
      swift_bridgeObjectRelease_n(v67, 3);
      _os_log_impl((void *)&_mh_execute_header, v69, (os_log_type_t)v124, "found tpid %s -> profile %s with global %s", (uint8_t *)v73, 0x20u);
      v90 = v126;
      swift_arrayDestroy(v126, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v90, -1, -1);
      swift_slowDealloc(v73, -1, -1);

      v91 = v123;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v65);

      swift_bridgeObjectRelease_n(v3, 4);
      swift_bridgeObjectRelease_n(v67, 4);
      swift_bridgeObjectRelease_n(v66, 4);
      v88 = v122;
      v91 = v123;
      v89 = v121;
    }
    v92 = sub_100003A2C(&qword_1001B15A0);
    v93 = (uint64_t)v91 + *(int *)(v92 + 48);
    *v91 = v88;
    v91[1] = (uint64_t)v66;
    v91[2] = v89;
    v91[3] = (uint64_t)v67;
    v91[4] = v3;
    sub_1000B4444((uint64_t)v11, v93);
    return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 56))(v91, 0, 1, v92);
  }
  else
  {
LABEL_18:
    v95 = v127;
    v96 = v119;
    v97 = v125;
    v98 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v127 + 16))(v119, a1, v125);
    v99 = Logger.logObject.getter(v98);
    v100 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v99, v100))
    {
      v101 = (uint8_t *)swift_slowAlloc(12, -1);
      v102 = swift_slowAlloc(32, -1);
      v132 = v102;
      *(_DWORD *)v101 = 136315138;
      v103 = UUID.uuidString.getter(v102);
      v105 = sub_100081EE4(v103, v104);
      v107 = (_TtC14softposreaderd12RemoteReader *)v106;
      v130 = sub_1000056EC(v105, v106, &v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, &v131, v101 + 4, v101 + 12);
      swift_bridgeObjectRelease(v107, v108, v109, v110, v111, v112, v113, v114);
      (*(void (**)(char *, uint64_t))(v127 + 8))(v96, v97);
      _os_log_impl((void *)&_mh_execute_header, v99, v100, "Not found in cache: %s", v101, 0xCu);
      swift_arrayDestroy(v102, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v102, -1, -1);
      swift_slowDealloc(v101, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v95 + 8))(v96, v97);
    }

    v115 = v123;
    v116 = sub_100003A2C(&qword_1001B15A0);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v116 - 8) + 56))(v115, 1, 1, v116);
  }
}

void sub_1000B1B90(_TtC14softposreaderd12RemoteReader *a1, uint64_t a2, _TtC14softposreaderd12RemoteReader *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  _TtC14softposreaderd12RemoteReader *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  _TtC14softposreaderd12RemoteReader *v30;
  uint64_t v31;
  _TtC14softposreaderd12RemoteReader *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  _TtC14softposreaderd12RemoteReader *v40;
  SEL v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  const char *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  _TtC14softposreaderd12RemoteReader *v55;
  uint64_t v56;
  _TtC14softposreaderd12RemoteReader **v57;
  uint64_t v58;
  _TtC14softposreaderd12RemoteReader *v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  const char *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75[3];
  _TtC14softposreaderd12RemoteReader *v76;
  uint64_t v77;

  v4 = v3;
  if (qword_1001AD0A0 != -1)
    swift_once(&qword_1001AD0A0, sub_1000B06B4);
  v8 = type metadata accessor for Logger(0);
  sub_100003A14(v8, (uint64_t)qword_1001B1408);
  v9 = swift_bridgeObjectRetain_n(a1, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(22, -1);
    v74 = swift_slowAlloc(64, -1);
    v75[0] = v74;
    *(_DWORD *)v12 = 136315394;
    v76 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(0xD000000000000017, 0x800000010016D9C0, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2080;
    v13 = swift_bridgeObjectRetain();
    v14 = Array.description.getter(v13, &type metadata for String);
    v16 = (_TtC14softposreaderd12RemoteReader *)v15;
    swift_bridgeObjectRelease(a1, v15, v17, v18, v19, v20, v21, v22);
    v76 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(v14, (unint64_t)v16, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v16, v23, v24, v25, v26, v27, v28, v29);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s\nsync with %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v74, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v74, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
  v76 = a1;
  swift_beginAccess(v4 + 72, v75, 1, 0);
  v30 = *(_TtC14softposreaderd12RemoteReader **)(v4 + 72);
  swift_bridgeObjectRetain();
  v31 = swift_bridgeObjectRetain();
  v32 = sub_1000B0400(v31, &v76);
  swift_bridgeObjectRelease(v30, v33, v34, v35, v36, v37, v38, v39);
  v40 = *(_TtC14softposreaderd12RemoteReader **)(v4 + 72);
  *(_QWORD *)(v4 + 72) = v32;
  swift_bridgeObjectRelease(v40, v41, v42, v43, v44, v45, v46, v47);
  v55 = v76;
  v56 = *(_QWORD *)&v76->instance[8];
  if (v56)
  {
    swift_bridgeObjectRetain();
    v57 = (_TtC14softposreaderd12RemoteReader **)&v55->instance[32];
    do
    {
      v58 = (uint64_t)*(v57 - 1);
      v59 = *v57;
      swift_bridgeObjectRetain();
      sub_1000B1FB8(v58, v59, a2, a3, &_swiftEmptyArrayStorage);
      swift_bridgeObjectRelease(v59, v60, v61, v62, v63, v64, v65, v66);
      v57 += 2;
      --v56;
    }
    while (v56);
    swift_bridgeObjectRelease(v55, v67, v68, v69, v70, v71, v72, v73);
  }
  swift_bridgeObjectRelease(v55, v48, v49, v50, v51, v52, v53, v54);
}

uint64_t sub_1000B1E64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t result;
  _QWORD *v8;
  _TtC14softposreaderd12RemoteReader *v9;
  _TtC14softposreaderd12RemoteReader *v10;
  uint64_t v11;
  SEL v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  _BYTE v26[24];

  v1 = v0;
  if (qword_1001AD0A0 != -1)
    swift_once(&qword_1001AD0A0, sub_1000B06B4);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100003A14(v2, (uint64_t)qword_1001B1408);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "_removeFirst()", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  result = swift_beginAccess(v1 + 72, v26, 33, 0);
  v8 = *(_QWORD **)(v1 + 72);
  if (v8[2])
  {
    v10 = (_TtC14softposreaderd12RemoteReader *)v8[7];
    v9 = (_TtC14softposreaderd12RemoteReader *)v8[8];
    v11 = v8[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10001C8D0(0, 1);
    swift_endAccess(v26);
    swift_bridgeObjectRelease(v9, v12, v13, v14, v15, v16, v17, v18);
    swift_bridgeObjectRelease(v10, v19, v20, v21, v22, v23, v24, v25);
    return v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000B1FB8(uint64_t a1, _TtC14softposreaderd12RemoteReader *a2, uint64_t a3, _TtC14softposreaderd12RemoteReader *a4, _TtC14softposreaderd12RemoteReader *a5)
{
  objc_class *v5;
  Class isa;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _TtC14softposreaderd12RemoteReader *v17;
  _TtC14softposreaderd12RemoteReader *v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  char v23;
  unint64_t v24;
  _TtC14softposreaderd12RemoteReader *v25;
  char isUniquelyReferenced_nonNull_native;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  _TtC14softposreaderd12RemoteReader *v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  SEL v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  SEL v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  SEL v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  SEL v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  SEL v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  SEL v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  _TtC14softposreaderd12RemoteReader *v94;
  _TtC14softposreaderd12RemoteReader *v95;
  SEL v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  _TtC14softposreaderd12RemoteReader *v103;
  SEL v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  _TtC14softposreaderd12RemoteReader *v111;
  char v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  os_log_type_t v123;
  uint64_t v124;
  uint64_t v125;
  _TtC14softposreaderd12RemoteReader *v126;
  _TtC14softposreaderd12RemoteReader *v127;
  SEL v128;
  id v129;
  id v130;
  id v131;
  id v132;
  id v133;
  id v134;
  SEL v135;
  id v136;
  id v137;
  id v138;
  id v139;
  id v140;
  id v141;
  SEL v142;
  id v143;
  id v144;
  id v145;
  id v146;
  id v147;
  id v148;
  _TtC14softposreaderd12RemoteReader *v149;
  uint64_t v150;
  _TtC14softposreaderd12RemoteReader **v152;
  _TtC14softposreaderd12RemoteReader *v154;
  _TtC14softposreaderd12RemoteReader *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char v159[24];
  _OWORD v160[2];
  uint64_t v161;
  uint64_t v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  _TtC14softposreaderd12RemoteReader *v167;

  isa = v5;
  if (qword_1001AD0A0 != -1)
LABEL_39:
    swift_once(&qword_1001AD0A0, sub_1000B06B4);
  v154 = a4;
  v10 = type metadata accessor for Logger(0);
  v150 = sub_100003A14(v10, (uint64_t)qword_1001B1408);
  v11 = Logger.logObject.getter(v150);
  v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "_add(profile:global:kernelTokenInfo:)", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v152 = (_TtC14softposreaderd12RemoteReader **)((char *)isa + 72);
  swift_beginAccess((char *)isa + 72, v159, 0, 0);
  v14 = (_QWORD *)*((_QWORD *)isa + 9);
  v15 = v14[2];
  if (!v15)
    goto LABEL_19;
  v16 = v14[4];
  v17 = (_TtC14softposreaderd12RemoteReader *)v14[5];
  v18 = (_TtC14softposreaderd12RemoteReader *)v14[7];
  isa = (Class)v14[8];
  v19 = v16 == a1 && v17 == a2;
  v155 = a2;
  if (v19)
  {
    v17 = a2;
  }
  else if ((_stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, a1, a2, 0) & 1) == 0)
  {
    a4 = (_TtC14softposreaderd12RemoteReader *)(v14 + 13);
    v20 = 1;
    while (1)
    {
      a2 = v155;
      if (v15 == v20)
        break;
      if (v20 >= v14[2])
      {
        __break(1u);
        goto LABEL_39;
      }
      v21 = *(_QWORD *)&a4[-1].instance[8];
      v17 = *(_TtC14softposreaderd12RemoteReader **)&a4[-1].instance[16];
      v18 = *(_TtC14softposreaderd12RemoteReader **)&a4[-1].instance[32];
      isa = a4->super.isa;
      if (v21 == a1 && v17 == v155)
      {
        v17 = v155;
        v24 = v20;
        goto LABEL_27;
      }
      v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, *(_QWORD *)&a4[-1].instance[16], a1, v155, 0);
      a4 = (_TtC14softposreaderd12RemoteReader *)((char *)a4 + 40);
      v24 = v20++;
      if ((v23 & 1) != 0)
        goto LABEL_27;
    }
LABEL_19:
    *(_QWORD *)&v165 = a1;
    *((_QWORD *)&v165 + 1) = a2;
    *(_QWORD *)&v166 = a3;
    *((_QWORD *)&v166 + 1) = v154;
    v167 = a5;
    swift_beginAccess(v152, v160, 33, 0);
    v25 = *v152;
    swift_bridgeObjectRetain_n(a5, 2);
    swift_bridgeObjectRetain_n(a2, 2);
    swift_bridgeObjectRetain_n(v154, 2);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v25);
    *v152 = v25;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v25 = sub_100091B04(0, *(_QWORD *)&v25->instance[8] + 1, 1, (uint64_t)v25, v27, v28, v29, v30);
      *v152 = v25;
    }
    v32 = *(_QWORD *)&v25->instance[8];
    v31 = *(_QWORD *)&v25->instance[16];
    if (v32 >= v31 >> 1)
    {
      v25 = sub_100091B04((_TtC14softposreaderd12RemoteReader *)(v31 > 1), v32 + 1, 1, (uint64_t)v25, v27, v28, v29, v30);
      *v152 = v25;
    }
    *(_QWORD *)&v25->instance[8] = v32 + 1;
    v33 = (char *)v25 + 40 * v32;
    v34 = v165;
    v35 = v166;
    *((_QWORD *)v33 + 8) = v167;
    *((_OWORD *)v33 + 2) = v34;
    *((_OWORD *)v33 + 3) = v35;
    swift_endAccess(v160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v36 = swift_bridgeObjectRetain();
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v40 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v160[0] = v40;
      *(_DWORD *)v39 = 136315138;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v41 = sub_1000B07F4();
      v43 = (_TtC14softposreaderd12RemoteReader *)v42;
      swift_bridgeObjectRelease(a5, v42, v44, v45, v46, v47, v48, v49);
      swift_bridgeObjectRelease(v154, v50, v51, v52, v53, v54, v55, v56);
      swift_bridgeObjectRelease(a2, v57, v58, v59, v60, v61, v62, v63);
      v157 = sub_1000056EC(v41, (unint64_t)v43, (uint64_t *)v160);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, &v158, v39 + 4, v39 + 12);
      swift_bridgeObjectRelease_n(a5, 2);
      swift_bridgeObjectRelease_n(v154, 2);
      swift_bridgeObjectRelease_n(a2, 2);
      swift_bridgeObjectRelease(v43, v64, v65, v66, v67, v68, v69, v70);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "New cache entry: %s", v39, 0xCu);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      v71 = v40;
LABEL_33:
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v39, -1, -1);

      return;
    }

    swift_bridgeObjectRelease_n(a5, 2);
    swift_bridgeObjectRelease_n(v154, 2);
    v149 = a2;
    goto LABEL_36;
  }
  v24 = 0;
LABEL_27:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_beginAccess(v152, &v165, 33, 0);
  sub_10008EC98(v24, (uint64_t)v160);
  swift_endAccess(&v165);
  v164 = v160[0];
  sub_1000246C4((uint64_t)&v164);
  v163 = v160[1];
  sub_1000246C4((uint64_t)&v163);
  v162 = v161;
  sub_1000B4294(&v162);
  *(_QWORD *)&v165 = a5;
  swift_bridgeObjectRetain();
  v72 = swift_bridgeObjectRetain();
  sub_100015348(v72);
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)isa, v73, v74, v75, v76, v77, v78, v79);
  swift_bridgeObjectRelease(v18, v80, v81, v82, v83, v84, v85, v86);
  swift_bridgeObjectRelease(v17, v87, v88, v89, v90, v91, v92, v93);
  v94 = (_TtC14softposreaderd12RemoteReader *)v165;
  v95 = (_TtC14softposreaderd12RemoteReader *)sub_1000B42BC(v165);
  swift_bridgeObjectRelease(v94, v96, v97, v98, v99, v100, v101, v102);
  v103 = sub_1000927D4((uint64_t)v95);
  swift_bridgeObjectRelease(v95, v104, v105, v106, v107, v108, v109, v110);
  *(_QWORD *)&v165 = a1;
  *((_QWORD *)&v165 + 1) = v155;
  *(_QWORD *)&v166 = a3;
  *((_QWORD *)&v166 + 1) = v154;
  v167 = v103;
  swift_beginAccess(v152, &v157, 33, 0);
  v111 = *v152;
  swift_bridgeObjectRetain_n(v155, 2);
  swift_bridgeObjectRetain_n(v154, 2);
  swift_retain();
  v112 = swift_isUniquelyReferenced_nonNull_native(v111);
  *v152 = v111;
  if ((v112 & 1) == 0)
  {
    v111 = sub_100091B04(0, *(_QWORD *)&v111->instance[8] + 1, 1, (uint64_t)v111, v113, v114, v115, v116);
    *v152 = v111;
  }
  v118 = *(_QWORD *)&v111->instance[8];
  v117 = *(_QWORD *)&v111->instance[16];
  if (v118 >= v117 >> 1)
  {
    v111 = sub_100091B04((_TtC14softposreaderd12RemoteReader *)(v117 > 1), v118 + 1, 1, (uint64_t)v111, v113, v114, v115, v116);
    *v152 = v111;
  }
  *(_QWORD *)&v111->instance[8] = v118 + 1;
  v119 = (char *)v111 + 40 * v118;
  v120 = v165;
  v121 = v166;
  *((_QWORD *)v119 + 8) = v167;
  *((_OWORD *)v119 + 2) = v120;
  *((_OWORD *)v119 + 3) = v121;
  swift_endAccess(&v157);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v122 = swift_retain();
  v37 = Logger.logObject.getter(v122);
  v123 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v37, v123))
  {
    v39 = (uint8_t *)swift_slowAlloc(12, -1);
    v124 = swift_slowAlloc(32, -1);
    v157 = v124;
    *(_DWORD *)v39 = 136315138;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    v125 = sub_1000B07F4();
    v127 = v126;
    swift_release(v103);
    swift_bridgeObjectRelease(v154, v128, v129, v130, v131, v132, v133, v134);
    swift_bridgeObjectRelease(v155, v135, v136, v137, v138, v139, v140, v141);
    v156 = sub_1000056EC(v125, (unint64_t)v127, &v157);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, &v157, v39 + 4, v39 + 12);
    swift_release_n(v103, 2);
    swift_bridgeObjectRelease_n(v154, 2);
    swift_bridgeObjectRelease_n(v155, 2);
    swift_bridgeObjectRelease(v127, v142, v143, v144, v145, v146, v147, v148);
    _os_log_impl((void *)&_mh_execute_header, v37, v123, "Updated KT-HC map of existing profile: %s", v39, 0xCu);
    swift_arrayDestroy(v124, 1, (char *)&type metadata for Any + 8);
    v71 = v124;
    goto LABEL_33;
  }

  swift_release_n(v103, 2);
  swift_bridgeObjectRelease_n(v154, 2);
  v149 = v155;
LABEL_36:
  swift_bridgeObjectRelease_n(v149, 2);
}

uint64_t sub_1000B2740()
{
  uint64_t v0;
  SEL v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;

  sub_100005D3C((_QWORD *)(v0 + 16));
  sub_100005DE0(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(v0 + 72), v1, v2, v3, v4, v5, v6, v7);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(v0 + 80), v8, v9, v10, v11, v12, v13, v14);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(v0 + 88), v15, v16, v17, v18, v19, v20, v21);
  return swift_deallocClassInstance(v0, 96, 7);
}

uint64_t type metadata accessor for PayAppletProfileCache()
{
  return objc_opt_self(_TtC9SPREngine21PayAppletProfileCache);
}

unint64_t sub_1000B27A4()
{
  return sub_1000B0744();
}

uint64_t sub_1000B27C4()
{
  uint64_t v0;
  _TtC14softposreaderd12RemoteReader *v1;
  SEL v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  _TtC14softposreaderd12RemoteReader *object;
  SEL v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  Swift::String v31;
  _TtC14softposreaderd12RemoteReader *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  unint64_t v47;
  _TtC14softposreaderd12RemoteReader *v48;
  SEL v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  uint64_t v56;
  _TtC14softposreaderd12RemoteReader *v57;
  SEL v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  uint64_t v65;
  Swift::String v66;
  _TtC14softposreaderd12RemoteReader *v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  SEL v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  unint64_t v82;
  _TtC14softposreaderd12RemoteReader *v83;
  SEL v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;

  v1 = (_TtC14softposreaderd12RemoteReader *)0xE000000000000000;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)0xE000000000000000, v2, v3, v4, v5, v6, v7, v8);
  v10 = UUID.uuidString.getter(v9);
  v12._countAndFlagsBits = sub_100081EE4(v10, v11);
  object = (_TtC14softposreaderd12RemoteReader *)v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(object, v14, v15, v16, v17, v18, v19, v20);
  v21 = type metadata accessor for KernelTokenHostConfigurationMapping(0);
  v22 = *(_QWORD *)(v0 + *(int *)(v21 + 20));
  if (*(_QWORD *)(v22 + 16))
  {
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)0xE000000000000000, v23, v24, v25, v26, v27, v28, v29);
    v30 = swift_bridgeObjectRetain();
    v31._countAndFlagsBits = Array.description.getter(v30, &type metadata for String);
    v32 = (_TtC14softposreaderd12RemoteReader *)v31._object;
    String.append(_:)(v31);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v22, v33, v34, v35, v36, v37, v38, v39);
    swift_bridgeObjectRelease(v32, v40, v41, v42, v43, v44, v45, v46);
    v47 = 0xD000000000000013;
    v1 = (_TtC14softposreaderd12RemoteReader *)0x800000010016DA00;
  }
  else
  {
    v47 = 0;
  }
  v48 = v1;
  String.append(_:)(*(Swift::String *)&v47);
  swift_bridgeObjectRelease(v1, v49, v50, v51, v52, v53, v54, v55);
  v56 = *(_QWORD *)(v0 + *(int *)(v21 + 24));
  v57 = (_TtC14softposreaderd12RemoteReader *)0xE000000000000000;
  if (*(_QWORD *)(v56 + 16))
  {
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)0xE000000000000000, v58, v59, v60, v61, v62, v63, v64);
    v65 = swift_bridgeObjectRetain();
    v66._countAndFlagsBits = Array.description.getter(v65, &type metadata for String);
    v67 = (_TtC14softposreaderd12RemoteReader *)v66._object;
    String.append(_:)(v66);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v56, v68, v69, v70, v71, v72, v73, v74);
    swift_bridgeObjectRelease(v67, v75, v76, v77, v78, v79, v80, v81);
    v82 = 0xD000000000000018;
    v57 = (_TtC14softposreaderd12RemoteReader *)0x800000010016DA20;
  }
  else
  {
    v82 = 0;
  }
  v83 = v57;
  String.append(_:)(*(Swift::String *)&v82);
  swift_bridgeObjectRelease(v57, v84, v85, v86, v87, v88, v89, v90);
  return 0x6970742966617328;
}

uint64_t sub_1000B2990(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v3 = v1;
  v5 = sub_100003A2C(&qword_1001B16D8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100005EF8(a1, v9);
  v11 = sub_1000B538C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for KernelTokenHostConfigurationMapping.CodingKeys, &type metadata for KernelTokenHostConfigurationMapping.CodingKeys, v11, v9, v10);
  LOBYTE(v20) = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_100005F1C(&qword_1001B16E0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v20, v5, v12, v13);
  if (!v2)
  {
    v14 = type metadata accessor for KernelTokenHostConfigurationMapping(0);
    v20 = *(_QWORD *)(v3 + *(int *)(v14 + 20));
    v19 = 1;
    v15 = sub_100003A2C((uint64_t *)&unk_1001AE460);
    v16 = sub_10001A4F4(&qword_1001ADA10, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, v15, v16);
    v20 = *(_QWORD *)(v3 + *(int *)(v14 + 24));
    v19 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_1000B2B68(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v29 = a2;
  v30 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v31 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100003A2C(&qword_1001B16C0);
  v5 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for KernelTokenHostConfigurationMapping(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_100005EF8(a1, v12);
  v13 = sub_1000B538C();
  v33 = v7;
  v14 = v34;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for KernelTokenHostConfigurationMapping.CodingKeys, &type metadata for KernelTokenHostConfigurationMapping.CodingKeys, v13, v12, v11);
  if (v14)
  {
    sub_100005D3C(a1);
  }
  else
  {
    v34 = v8;
    v15 = a1;
    v16 = v10;
    LOBYTE(v36) = 0;
    v17 = sub_100005F1C(&qword_1001B16D0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v19 = v30;
    v18 = v31;
    v20 = v32;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v30, &v36, v32, v30, v17);
    v28 = v3;
    v21 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
    v22 = (uint64_t)v16;
    v21(v16, v18, v19);
    v23 = sub_100003A2C((uint64_t *)&unk_1001AE460);
    v35 = 1;
    v24 = sub_10001A4F4(&qword_1001ADA08, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v23, &v35, v20, v23, v24);
    v25 = v24;
    v26 = v34;
    *(_QWORD *)(v22 + *(int *)(v34 + 20)) = v36;
    v35 = 2;
    v27 = v33;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v23, &v35, v20, v23, v25);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v27, v32);
    *(_QWORD *)(v22 + *(int *)(v26 + 24)) = v36;
    sub_1000B43C4(v22, v29);
    sub_100005D3C(v15);
    sub_1000B4408(v22);
  }
}

uint64_t sub_1000B2E88(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  char v23;

  v3 = v1;
  v5 = sub_100003A2C(&qword_1001B1680);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100005EF8(a1, v9);
  v11 = sub_1000B4D68();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ProfileKernelTokenMapping.CodingKeys, &type metadata for ProfileKernelTokenMapping.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v23 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v23, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v22 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v22, v5);
    v21 = v3[4];
    v20 = 2;
    v16 = sub_100003A2C(&qword_1001B1690);
    v17 = sub_1000B4DAC(&qword_1001B1698, &qword_1001B16A0, (uint64_t)&unk_100160414, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v20, v5, v16, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000B3010()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x7250737361707962;
  if (*v0 != 1)
    v1 = 0xD000000000000014;
  if (*v0)
    return v1;
  else
    return 25705;
}

uint64_t sub_1000B3070@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000B4E30(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000B3094(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B538C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B30BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B538C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000B30E4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000B2B68(a1, a2);
}

uint64_t sub_1000B30F8(_QWORD *a1)
{
  return sub_1000B2990(a1);
}

Swift::Int sub_1000B3110()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  v0 = type metadata accessor for UUID(0);
  v1 = sub_100005F1C(&qword_1001B1590, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

uint64_t sub_1000B317C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for UUID(0);
  v3 = sub_100005F1C(&qword_1001B1590, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  return dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
}

Swift::Int sub_1000B31D4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  v0 = type metadata accessor for UUID(0);
  v1 = sub_100005F1C(&qword_1001B1590, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

uint64_t sub_1000B3240()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x64496C61626F6C67;
  if (*v0 != 1)
    v1 = 0x6F546C656E72656BLL;
  if (*v0)
    return v1;
  else
    return 0x49656C69666F7270;
}

uint64_t sub_1000B32AC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000B4F8C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000B32D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B4D68();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B32F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B4D68();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1000B3320@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_1000B5110(a1, (uint64_t *)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1000B3364(_QWORD *a1)
{
  return sub_1000B2E88(a1);
}

uint64_t sub_1000B337C(uint64_t a1, uint64_t a2)
{
  _TtC14softposreaderd12RemoteReader **v2;
  _TtC14softposreaderd12RemoteReader **v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _TtC14softposreaderd12RemoteReader *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  const char *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  const char *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  char isUniquelyReferenced_nonNull_native;
  _TtC14softposreaderd12RemoteReader *v34;
  SEL v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v43;
  _QWORD v44[9];

  v3 = v2;
  v6 = type metadata accessor for KernelTokenHostConfigurationMapping(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v44[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  Hasher.init(_seed:)(v44);
  v11 = type metadata accessor for UUID(0);
  v12 = sub_100005F1C(&qword_1001B1590, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain();
  dispatch thunk of Hashable.hash(into:)(v44, v11, v12);
  v13 = Hasher._finalize()();
  v21 = -1 << v10->instance[24];
  v22 = v13 & ~v21;
  if (((*(_QWORD *)&v10[1].instance[(v22 >> 3) & 0xFFFFFFFFFFFFF8] >> v22) & 1) != 0)
  {
    v43 = a1;
    v23 = ~v21;
    v24 = *(_QWORD *)(v7 + 72);
    while (1)
    {
      sub_1000B43C4((uint64_t)v10[1].super.isa + v24 * v22, (uint64_t)v9);
      v25 = static UUID.== infix(_:_:)(v9, a2);
      sub_1000B4408((uint64_t)v9);
      if ((v25 & 1) != 0)
        break;
      v22 = (v22 + 1) & v23;
      if (((*(_QWORD *)&v10[1].instance[(v22 >> 3) & 0xFFFFFFFFFFFFF8] >> v22) & 1) == 0)
      {
        swift_bridgeObjectRelease(v10, v26, v27, v28, v29, v30, v31, v32);
        a1 = v43;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v10, v26, v27, v28, v29, v30, v31, v32);
    sub_1000B4408(a2);
    sub_1000B43C4((uint64_t)(*v3)[1].super.isa + v24 * v22, v43);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10, v14, v15, v16, v17, v18, v19, v20);
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    sub_1000B43C4(a2, (uint64_t)v9);
    v44[0] = *v3;
    *v3 = (_TtC14softposreaderd12RemoteReader *)0x8000000000000000;
    sub_1000B38E8((uint64_t)v9, v22, isUniquelyReferenced_nonNull_native);
    v34 = *v3;
    *v3 = (_TtC14softposreaderd12RemoteReader *)v44[0];
    swift_bridgeObjectRelease(v34, v35, v36, v37, v38, v39, v40, v41);
    sub_1000B4444(a2, a1);
    return 1;
  }
}

uint64_t sub_1000B357C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD v39[9];

  v2 = v1;
  v4 = type metadata accessor for KernelTokenHostConfigurationMapping(0);
  v38 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100003A2C(&qword_1001B1598);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_39;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v37 = (_QWORD *)(v7 + 56);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v35 = v2;
  v36 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  result = swift_retain();
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v19 = v18 | (v16 << 6);
      goto LABEL_26;
    }
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }
    if (v20 >= v36)
      goto LABEL_35;
    v21 = v37[v20];
    ++v16;
    if (!v21)
    {
      v16 = v20 + 1;
      if (v20 + 1 >= v36)
        goto LABEL_35;
      v21 = v37[v16];
      if (!v21)
      {
        v16 = v20 + 2;
        if (v20 + 2 >= v36)
          goto LABEL_35;
        v21 = v37[v16];
        if (!v21)
          break;
      }
    }
LABEL_25:
    v13 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_26:
    v23 = *(_QWORD *)(v38 + 72);
    sub_1000B4444(*(_QWORD *)(v7 + 48) + v23 * v19, (uint64_t)v6);
    Hasher.init(_seed:)(v39);
    v24 = type metadata accessor for UUID(0);
    v25 = sub_100005F1C(&qword_1001B1590, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v39, v24, v25);
    result = Hasher._finalize()();
    v26 = -1 << *(_BYTE *)(v9 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v14 + 8 * (v27 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v14 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v14 + 8 * v28);
      }
      while (v32 == -1);
      v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    result = sub_1000B4444((uint64_t)v6, *(_QWORD *)(v9 + 48) + v17 * v23);
    ++*(_QWORD *)(v9 + 16);
  }
  v22 = v20 + 3;
  if (v22 < v36)
  {
    v21 = v37[v22];
    if (!v21)
    {
      while (1)
      {
        v16 = v22 + 1;
        if (__OFADD__(v22, 1))
          goto LABEL_41;
        if (v16 >= v36)
          goto LABEL_35;
        v21 = v37[v16];
        ++v22;
        if (v21)
          goto LABEL_25;
      }
    }
    v16 = v22;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v7);
  v2 = v35;
  v33 = 1 << *(_BYTE *)(v7 + 32);
  if (v33 > 63)
    bzero(v37, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v37 = -1 << v33;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_39:
  result = swift_release(v7);
  *v2 = v9;
  return result;
}

uint64_t sub_1000B38E8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[9];

  v4 = v3;
  v8 = type metadata accessor for KernelTokenHostConfigurationMapping(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v29[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*v4 + 16);
  v13 = *(_QWORD *)(*v4 + 24);
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_12;
  v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000B357C(v14);
  }
  else
  {
    if (v13 > v12)
    {
      sub_1000B3AD4();
      goto LABEL_12;
    }
    sub_1000B3CCC(v14);
  }
  v15 = *v4;
  Hasher.init(_seed:)(v29);
  v16 = type metadata accessor for UUID(0);
  v17 = sub_100005F1C(&qword_1001B1590, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v29, v16, v17);
  v18 = Hasher._finalize()();
  v19 = -1 << *(_BYTE *)(v15 + 32);
  a2 = v18 & ~v19;
  if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v28 = v8;
    v20 = ~v19;
    v21 = *(_QWORD *)(v9 + 72);
    do
    {
      sub_1000B43C4(*(_QWORD *)(v15 + 48) + v21 * a2, (uint64_t)v11);
      v22 = static UUID.== infix(_:_:)(v11, a1);
      sub_1000B4408((uint64_t)v11);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v20;
    }
    while (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_1000B4444(a1, *(_QWORD *)(v23 + 48) + *(_QWORD *)(v9 + 72) * a2);
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (!v26)
  {
    *(_QWORD *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v28);
  __break(1u);
  return result;
}

void *sub_1000B3AD4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;

  v1 = v0;
  v2 = type metadata accessor for KernelTokenHostConfigurationMapping(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100003A2C(&qword_1001B1598);
  v6 = *v0;
  v7 = static _SetStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v6);
    *v1 = v8;
    return result;
  }
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    sub_1000B43C4(*(_QWORD *)(v6 + 48) + v20, (uint64_t)v5);
    result = (void *)sub_1000B4444((uint64_t)v5, *(_QWORD *)(v8 + 48) + v20);
  }
  v23 = v21 + 3;
  if (v23 >= v17)
    goto LABEL_28;
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1000B3CCC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  _QWORD v38[9];

  v2 = v1;
  v4 = type metadata accessor for KernelTokenHostConfigurationMapping(0);
  v37 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100003A2C(&qword_1001B1598);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 0);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = swift_release(v7);
LABEL_37:
    *v2 = v9;
    return result;
  }
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v34 = v2;
  v35 = v7 + 56;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v36 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  result = swift_retain();
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v19 = v18 | (v16 << 6);
      goto LABEL_26;
    }
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v20 >= v36)
      goto LABEL_35;
    v21 = *(_QWORD *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      v16 = v20 + 1;
      if (v20 + 1 >= v36)
        goto LABEL_35;
      v21 = *(_QWORD *)(v35 + 8 * v16);
      if (!v21)
      {
        v16 = v20 + 2;
        if (v20 + 2 >= v36)
          goto LABEL_35;
        v21 = *(_QWORD *)(v35 + 8 * v16);
        if (!v21)
          break;
      }
    }
LABEL_25:
    v13 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_26:
    v23 = *(_QWORD *)(v37 + 72);
    sub_1000B43C4(*(_QWORD *)(v7 + 48) + v23 * v19, (uint64_t)v6);
    Hasher.init(_seed:)(v38);
    v24 = type metadata accessor for UUID(0);
    v25 = sub_100005F1C(&qword_1001B1590, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v38, v24, v25);
    result = Hasher._finalize()();
    v26 = -1 << *(_BYTE *)(v9 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v14 + 8 * (v27 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v14 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v14 + 8 * v28);
      }
      while (v32 == -1);
      v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    result = sub_1000B4444((uint64_t)v6, *(_QWORD *)(v9 + 48) + v17 * v23);
    ++*(_QWORD *)(v9 + 16);
  }
  v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_35:
    result = swift_release_n(v7, 2);
    v2 = v34;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v35 + 8 * v22);
  if (v21)
  {
    v16 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v16 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v16 >= v36)
      goto LABEL_35;
    v21 = *(_QWORD *)(v35 + 8 * v16);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1000B4000(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  void *object;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v24;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = 0;
  v24 = swift_bridgeObjectRetain(a1);
  v3 = (uint64_t *)(v24 + 64);
  do
  {
    v5 = *(v3 - 4);
    v4 = (void *)*(v3 - 3);
    v7 = *(v3 - 2);
    v6 = (void *)*(v3 - 1);
    v8 = *v3;
    ++v2;
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v8);
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v9._object;
    String.append(_:)(v9);
    swift_bridgeObjectRelease(object);
    v11._countAndFlagsBits = 8250;
    v11._object = (void *)0xE200000000000000;
    String.append(_:)(v11);
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease(0xE000000000000000);
    swift_bridgeObjectRetain(v4);
    v12._countAndFlagsBits = v5;
    v12._object = v4;
    String.append(_:)(v12);
    swift_bridgeObjectRelease(v4);
    v13._countAndFlagsBits = 0x6C61626F6C67202CLL;
    v13._object = (void *)0xEC000000203A6449;
    String.append(_:)(v13);
    swift_bridgeObjectRetain(v6);
    v14._countAndFlagsBits = v7;
    v14._object = v6;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v6);
    v15._countAndFlagsBits = 0x2043482D544B202CLL;
    v15._object = (void *)0xED0000203A70616DLL;
    String.append(_:)(v15);
    v16 = type metadata accessor for KernelTokenHostConfigurationMapping(0);
    v17 = swift_bridgeObjectRetain(v8);
    v18._countAndFlagsBits = Array.description.getter(v17, v16);
    v19 = v18._object;
    String.append(_:)(v18);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease_n(v8, 2);
    swift_bridgeObjectRelease(v19);
    v20._countAndFlagsBits = 0x49656C69666F7270;
    v20._object = (void *)0xEB00000000203A64;
    String.append(_:)(v20);
    swift_bridgeObjectRelease(0xEB00000000203A64);
    v21._countAndFlagsBits = 8236;
    v21._object = (void *)0xE200000000000000;
    String.append(_:)(v21);
    v22._countAndFlagsBits = 0x23746F6C53;
    v22._object = (void *)0xE500000000000000;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(0xE500000000000000);
    v3 += 5;
  }
  while (v1 != v2);
  swift_bridgeObjectRelease(v24);
  return 0;
}

uint64_t type metadata accessor for KernelTokenHostConfigurationMapping(uint64_t a1)
{
  uint64_t result;

  result = qword_1001B1638;
  if (!qword_1001B1638)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for KernelTokenHostConfigurationMapping);
  return result;
}

_QWORD *sub_1000B4294(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

uint64_t sub_1000B42BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = type metadata accessor for KernelTokenHostConfigurationMapping(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v15 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  v11 = sub_100005F1C(&qword_1001B1588, v10, (uint64_t)&unk_1001604DC);
  result = Set.init(minimumCapacity:)(v9, v2, v11);
  v16 = result;
  if (v9)
  {
    v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v14 = *(_QWORD *)(v3 + 72);
    do
    {
      sub_1000B43C4(v13, (uint64_t)v6);
      sub_1000B337C((uint64_t)v8, (uint64_t)v6);
      sub_1000B4408((uint64_t)v8);
      v13 += v14;
      --v9;
    }
    while (v9);
    return v16;
  }
  return result;
}

uint64_t sub_1000B43C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for KernelTokenHostConfigurationMapping(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B4408(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for KernelTokenHostConfigurationMapping(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000B4444(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for KernelTokenHostConfigurationMapping(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B4488(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003A2C(&qword_1001B15A8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000B44C8()
{
  unint64_t result;

  result = qword_1001B15C8;
  if (!qword_1001B15C8)
  {
    result = swift_getWitnessTable(&unk_1001604B4, &type metadata for ProfileKernelTokenMapping);
    atomic_store(result, (unint64_t *)&qword_1001B15C8);
  }
  return result;
}

uint64_t sub_1000B450C(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_100003A6C(&qword_1001B15B8);
    a2();
    result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000B4574()
{
  unint64_t result;

  result = qword_1001B15D8;
  if (!qword_1001B15D8)
  {
    result = swift_getWitnessTable(&unk_10016048C, &type metadata for ProfileKernelTokenMapping);
    atomic_store(result, (unint64_t *)&qword_1001B15D8);
  }
  return result;
}

_QWORD *sub_1000B45B8(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[5];
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v3 = a1;
  sub_1000DBA54();
  if (v1)
  {
    swift_release(a1);
  }
  else
  {
    v4 = v15;
    v5 = v16;
    sub_100005EF8(v14, v15);
    sub_10001CA88(v4, v5);
    v6 = (char *)a1 + OBJC_IVAR____TtC9SPREngine5Depot_settings;
    v7 = type metadata accessor for Settings(0);
    v8 = *(_QWORD *)&v6[*(int *)(v7 + 52)];
    v9 = *(_QWORD *)&v6[*(int *)(v7 + 56)];
    v10 = type metadata accessor for PayAppletProfileCache();
    v3 = (_QWORD *)swift_allocObject(v10, 96, 7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    v3[7] = sub_1000FA224(0xD000000000000015, 0x8000000100160310);
    v3[8] = v11;
    sub_100008390((uint64_t)v13, (uint64_t)(v3 + 2));
    v3[9] = _swiftEmptyArrayStorage;
    v3[10] = v8;
    v3[11] = v9;
    sub_1000B0930();
    sub_100005D3C(v13);
    swift_release(a1);
    sub_100005D3C(v14);
  }
  return v3;
}

uint64_t destroy for ProfileKernelTokenMapping(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[4]);
}

_QWORD *initializeWithCopy for ProfileKernelTokenMapping(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[4];
  a1[4] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for ProfileKernelTokenMapping(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

_QWORD *assignWithTake for ProfileKernelTokenMapping(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(a1[3]);
  v6 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ProfileKernelTokenMapping(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ProfileKernelTokenMapping(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ProfileKernelTokenMapping()
{
  return &type metadata for ProfileKernelTokenMapping;
}

uint64_t *sub_1000B48F8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v10;
    v11 = *(uint64_t *)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = v11;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
  }
  return a1;
}

uint64_t sub_1000B4994(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24)));
}

uint64_t sub_1000B49E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v10;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t sub_1000B4A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(int *)(a3 + 24);
  v11 = *(_QWORD *)(a2 + v10);
  v12 = *(_QWORD *)(a1 + v10);
  *(_QWORD *)(a1 + v10) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_1000B4ADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_1000B4B40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRelease(v8);
  v9 = *(int *)(a3 + 24);
  v10 = *(_QWORD *)(a1 + v9);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t sub_1000B4BB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B4BC4);
}

uint64_t sub_1000B4BC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000B4C40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B4C4C);
}

uint64_t sub_1000B4C4C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_1000B4CC4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000B4D3C()
{
  return sub_100005F1C(&qword_1001B1678, type metadata accessor for KernelTokenHostConfigurationMapping, (uint64_t)&unk_1001603C4);
}

unint64_t sub_1000B4D68()
{
  unint64_t result;

  result = qword_1001B1688;
  if (!qword_1001B1688)
  {
    result = swift_getWitnessTable(&unk_1001606E8, &type metadata for ProfileKernelTokenMapping.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B1688);
  }
  return result;
}

uint64_t sub_1000B4DAC(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_100003A6C(&qword_1001B1690);
    sub_100005F1C(a2, type metadata accessor for KernelTokenHostConfigurationMapping, a3);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000B4E30(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7250737361707962 && a2 == 0xEF44494178696665)
  {
    v7 = 0xEF44494178696665;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7250737361707962, 0xEF44494178696665, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x800000010016DA40)
  {
    swift_bridgeObjectRelease(0x800000010016DA40);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x800000010016DA40, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1000B4F8C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x49656C69666F7270 && a2 == 0xE900000000000064)
  {
    v5 = 0xE900000000000064;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49656C69666F7270, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x64496C61626F6C67 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64496C61626F6C67, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6F546C656E72656BLL && a2 == 0xEF6F666E496E656BLL)
  {
    swift_bridgeObjectRelease(0xEF6F666E496E656BLL);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F546C656E72656BLL, 0xEF6F666E496E656BLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

void sub_1000B5110(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _TtC14softposreaderd12RemoteReader *v13;
  _TtC14softposreaderd12RemoteReader *v14;
  _TtC14softposreaderd12RemoteReader *v15;
  _TtC14softposreaderd12RemoteReader *v16;
  uint64_t v17;
  uint64_t v18;
  _TtC14softposreaderd12RemoteReader *v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  _TtC14softposreaderd12RemoteReader *v27;
  SEL v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  SEL v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  _TtC14softposreaderd12RemoteReader *v43;
  uint64_t v44;
  _TtC14softposreaderd12RemoteReader *v45;
  char v46;
  char v47;
  char v48;

  v5 = sub_100003A2C(&qword_1001B16A8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100005EF8(a1, v9);
  v11 = sub_1000B4D68();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ProfileKernelTokenMapping.CodingKeys, &type metadata for ProfileKernelTokenMapping.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_100005D3C(a1);
  }
  else
  {
    v48 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v48, v5);
    v14 = v13;
    v44 = v12;
    v47 = 1;
    swift_bridgeObjectRetain();
    v42 = KeyedDecodingContainer.decode(_:forKey:)(&v47, v5);
    v16 = v15;
    v17 = sub_100003A2C(&qword_1001B1690);
    v46 = 2;
    v18 = sub_1000B4DAC(&qword_1001B16B0, &qword_1001B16B8, (uint64_t)&unk_10016043C, (uint64_t)&protocol conformance descriptor for <A> [A]);
    v43 = v16;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v17, &v46, v5, v17, v18);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v19 = v45;
    swift_bridgeObjectRetain();
    sub_100005D3C(a1);
    swift_bridgeObjectRelease(v19, v20, v21, v22, v23, v24, v25, v26);
    v27 = v43;
    swift_bridgeObjectRelease(v43, v28, v29, v30, v31, v32, v33, v34);
    swift_bridgeObjectRelease(v14, v35, v36, v37, v38, v39, v40, v41);
    *a2 = v44;
    a2[1] = (uint64_t)v14;
    a2[2] = v42;
    a2[3] = (uint64_t)v27;
    a2[4] = (uint64_t)v19;
  }
}

unint64_t sub_1000B538C()
{
  unint64_t result;

  result = qword_1001B16C8;
  if (!qword_1001B16C8)
  {
    result = swift_getWitnessTable(&unk_100160698, &type metadata for KernelTokenHostConfigurationMapping.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B16C8);
  }
  return result;
}

ValueMetadata *type metadata accessor for KernelTokenHostConfigurationMapping.CodingKeys()
{
  return &type metadata for KernelTokenHostConfigurationMapping.CodingKeys;
}

uint64_t _s9SPREngine35KernelTokenHostConfigurationMappingV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000B5434 + 4 * byte_1001602F5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000B5468 + 4 * asc_1001602F0[v4]))();
}

uint64_t sub_1000B5468(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B5470(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000B5478);
  return result;
}

uint64_t sub_1000B5484(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000B548CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000B5490(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B5498(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ProfileKernelTokenMapping.CodingKeys()
{
  return &type metadata for ProfileKernelTokenMapping.CodingKeys;
}

unint64_t sub_1000B54B8()
{
  unint64_t result;

  result = qword_1001B16E8;
  if (!qword_1001B16E8)
  {
    result = swift_getWitnessTable(&unk_1001605B8, &type metadata for ProfileKernelTokenMapping.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B16E8);
  }
  return result;
}

unint64_t sub_1000B5500()
{
  unint64_t result;

  result = qword_1001B16F0;
  if (!qword_1001B16F0)
  {
    result = swift_getWitnessTable(&unk_100160670, &type metadata for KernelTokenHostConfigurationMapping.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B16F0);
  }
  return result;
}

unint64_t sub_1000B5548()
{
  unint64_t result;

  result = qword_1001B16F8;
  if (!qword_1001B16F8)
  {
    result = swift_getWitnessTable(&unk_1001605E0, &type metadata for KernelTokenHostConfigurationMapping.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B16F8);
  }
  return result;
}

unint64_t sub_1000B5590()
{
  unint64_t result;

  result = qword_1001B1700;
  if (!qword_1001B1700)
  {
    result = swift_getWitnessTable(&unk_100160608, &type metadata for KernelTokenHostConfigurationMapping.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B1700);
  }
  return result;
}

unint64_t sub_1000B55D8()
{
  unint64_t result;

  result = qword_1001B1708;
  if (!qword_1001B1708)
  {
    result = swift_getWitnessTable(&unk_100160528, &type metadata for ProfileKernelTokenMapping.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B1708);
  }
  return result;
}

unint64_t sub_1000B5620()
{
  unint64_t result;

  result = qword_1001B1710;
  if (!qword_1001B1710)
  {
    result = swift_getWitnessTable(&unk_100160550, &type metadata for ProfileKernelTokenMapping.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B1710);
  }
  return result;
}

uint64_t sub_1000B566C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = sub_1000ED9D4(&off_1001965B8);
  v1 = sub_100003A2C(&qword_1001B1718);
  result = swift_arrayDestroy(&unk_1001965D8, 10, v1);
  qword_1001B4D68 = v0;
  return result;
}

unint64_t sub_1000B56C0(uint64_t *a1)
{
  return _sSC23SPRPersistenceErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(*a1);
}

unint64_t _sSC23SPRPersistenceErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t *v5;
  uint64_t v6;
  Swift::String v7;
  void *object;

  if (qword_1001AD0A8 != -1)
    swift_once(&qword_1001AD0A8, sub_1000B566C);
  v2 = qword_1001B4D68;
  if (*(_QWORD *)(qword_1001B4D68 + 16) && (v3 = sub_10013A38C(a1), (v4 & 1) != 0))
  {
    v5 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 16 * v3);
    v6 = *v5;
    swift_bridgeObjectRetain(v5[1]);
  }
  else
  {
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease(0xE000000000000000);
    v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v7._object;
    String.append(_:)(v7);
    swift_bridgeObjectRelease(object);
    return 0xD000000000000011;
  }
  return v6;
}

unint64_t sub_1000B57BC(uint64_t a1)
{
  unint64_t result;

  result = sub_1000B57E0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B57E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001AD7F8;
  if (!qword_1001AD7F8)
  {
    type metadata accessor for PersistenceError(255);
    result = swift_getWitnessTable(&unk_10015C018, v1);
    atomic_store(result, (unint64_t *)&qword_1001AD7F8);
  }
  return result;
}

uint64_t sub_1000B5828()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B1720);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B1720);
  if (qword_1001AD158 != -1)
    swift_once(&qword_1001AD158, sub_1000CC540);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4DF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1000B58B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  int64_t v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  _BYTE v24[24];

  if (qword_1001AD0B0 != -1)
LABEL_30:
    swift_once(&qword_1001AD0B0, sub_1000B5828);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100003A14(v2, (uint64_t)qword_1001B1720);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "DefaultManagedDictionary deinit()", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  swift_beginAccess(a1 + 32, v24, 0, 0);
  a1 = *(_QWORD *)(a1 + 32);
  v7 = a1 + 64;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a1 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = swift_bridgeObjectRetain_n(a1, 2);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v10 &= v10 - 1;
      goto LABEL_8;
    }
    v14 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v14 >= v11)
      goto LABEL_28;
    v15 = *(_QWORD *)(v7 + 8 * v14);
    ++v13;
    if (!v15)
    {
      v13 = v14 + 1;
      if (v14 + 1 >= v11)
        goto LABEL_28;
      v15 = *(_QWORD *)(v7 + 8 * v13);
      if (!v15)
      {
        v13 = v14 + 2;
        if (v14 + 2 >= v11)
          goto LABEL_28;
        v15 = *(_QWORD *)(v7 + 8 * v13);
        if (!v15)
        {
          v13 = v14 + 3;
          if (v14 + 3 >= v11)
            goto LABEL_28;
          v15 = *(_QWORD *)(v7 + 8 * v13);
          if (!v15)
          {
            v13 = v14 + 4;
            if (v14 + 4 >= v11)
              goto LABEL_28;
            v15 = *(_QWORD *)(v7 + 8 * v13);
            if (!v15)
              break;
          }
        }
      }
    }
LABEL_27:
    v10 = (v15 - 1) & v15;
LABEL_8:
    v12 = dispatch thunk of DispatchWorkItem.cancel()(v12);
  }
  v16 = v14 + 5;
  if (v16 >= v11)
  {
LABEL_28:
    swift_release(a1);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, v17, v18, v19, v20, v21, v22, v23);
    return;
  }
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
  {
    v13 = v16;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v13 >= v11)
      goto LABEL_28;
    v15 = *(_QWORD *)(v7 + 8 * v13);
    ++v16;
    if (v15)
      goto LABEL_27;
  }
  __break(1u);
}

uint64_t sub_1000B5AFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  SEL v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v21;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchWorkItemFlags.barrier.getter(v3);
  OS_dispatch_queue.sync<A>(flags:execute:)(&type metadata for (), v5, sub_1000B6DE4, v0, &type metadata for () + 1);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(v0 + 16), v6, v7, v8, v9, v10, v11, v12);

  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(v0 + 32), v13, v14, v15, v16, v17, v18, v19);
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for DefaultManagedDictionary()
{
  return objc_opt_self(_TtC9SPREngine24DefaultManagedDictionary);
}

double sub_1000B5BF0@<D0>(uint64_t a1@<X0>, char a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  char v8;
  double result;
  _BYTE v10[24];

  swift_beginAccess(a1 + 16, v10, 0, 0);
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v6 + 16) && (v7 = sub_10013A70C(a2 & 1), (v8 & 1) != 0))
  {
    sub_100005D5C(*(_QWORD *)(v6 + 56) + 32 * v7, (uint64_t)a3);
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

void sub_1000B5C74(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  void **v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  _TtC14softposreaderd12RemoteReader *v26;
  _TtC14softposreaderd12RemoteReader *v27;
  SEL v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  void **v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  _TtC14softposreaderd12RemoteReader *v46;
  _TtC14softposreaderd12RemoteReader *v47;
  SEL v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char isUniquelyReferenced_nonNull_native;
  _TtC14softposreaderd12RemoteReader *v70;
  SEL v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  uint64_t v78;
  char *v79;
  char *v80;
  void (*v81)(char *, uint64_t);
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  void **aBlock;
  _QWORD v95[4];
  uint64_t v96;
  uint64_t v97;
  _BYTE v98[16];

  v87 = a4;
  v88 = a5;
  v9 = a2 & 1;
  v92 = type metadata accessor for DispatchTime(0);
  v90 = *(_QWORD *)(v92 - 8);
  v10 = __chkstk_darwin(v92);
  v89 = (char *)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v91 = (char *)&v84 - v12;
  v13 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v13);
  v85 = (char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a1 + 32, &aBlock, 33, 0);
  v86 = a1 + 32;
  v15 = sub_100058170(v9);
  swift_endAccess(&aBlock);
  if (v15)
  {
    if (qword_1001AD0B0 != -1)
      swift_once(&qword_1001AD0B0, sub_1000B5828);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_100003A14(v16, (uint64_t)qword_1001B1720);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v93 = a1;
      v20 = swift_slowAlloc(12, -1);
      v84 = a3;
      v21 = (uint8_t *)v20;
      v22 = (void **)swift_slowAlloc(32, -1);
      aBlock = v22;
      *(_DWORD *)v21 = 136315138;
      LOBYTE(v97) = v9;
      v23 = String.init<A>(describing:)(&v97, &type metadata for ManagedDictionaryKey);
      v24 = v9;
      v26 = (_TtC14softposreaderd12RemoteReader *)v25;
      v97 = sub_1000056EC(v23, v25, (uint64_t *)&aBlock);
      a1 = v93;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98, v21 + 4, v21 + 12);
      v27 = v26;
      v9 = v24;
      swift_bridgeObjectRelease(v27, v28, v29, v30, v31, v32, v33, v34);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "DefaultManagedDictionary Found workItem for key: %s. Cancelling it...", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      v35 = v21;
      a3 = v84;
      swift_slowDealloc(v35, -1, -1);
    }

    dispatch thunk of DispatchWorkItem.cancel()(v36);
    swift_release(v15);
  }
  sub_100005D5C(a3, (uint64_t)&aBlock);
  swift_beginAccess(a1 + 16, &v97, 33, 0);
  sub_1000E94D0((uint64_t)&aBlock, v9);
  swift_endAccess(&v97);
  if (qword_1001AD0B0 != -1)
    swift_once(&qword_1001AD0B0, sub_1000B5828);
  v37 = type metadata accessor for Logger(0);
  v38 = sub_100003A14(v37, (uint64_t)qword_1001B1720);
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v39, v40))
  {
    v93 = a1;
    v41 = (uint8_t *)swift_slowAlloc(12, -1);
    v42 = (void **)swift_slowAlloc(32, -1);
    aBlock = v42;
    *(_DWORD *)v41 = 136315138;
    LOBYTE(v97) = v9;
    v43 = String.init<A>(describing:)(&v97, &type metadata for ManagedDictionaryKey);
    v44 = v9;
    v46 = (_TtC14softposreaderd12RemoteReader *)v45;
    v97 = sub_1000056EC(v43, v45, (uint64_t *)&aBlock);
    a1 = v93;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98, v41 + 4, v41 + 12);
    v47 = v46;
    v9 = v44;
    swift_bridgeObjectRelease(v47, v48, v49, v50, v51, v52, v53, v54);
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "DefaultManagedDictionary updated value for key: %s", v41, 0xCu);
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v41, -1, -1);
  }

  if (a6 > 0.0)
  {
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v58 = 134217984;
      aBlock = *(void ***)&a6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v95, v58 + 4, v58 + 12);
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "DefaultManagedDictionary updateValue duration: %f", v58, 0xCu);
      swift_slowDealloc(v58, -1, -1);
    }

    v59 = v85;
    static DispatchWorkItemFlags.barrier.getter(v60);
    v61 = swift_allocObject(&unk_10019D730, 24, 7);
    swift_weakInit(v61 + 16, a1);
    v62 = swift_allocObject(&unk_10019D758, 48, 7);
    *(_QWORD *)(v62 + 16) = v61;
    *(_BYTE *)(v62 + 24) = v9;
    v64 = v87;
    v63 = v88;
    *(_QWORD *)(v62 + 32) = v87;
    *(_QWORD *)(v62 + 40) = v63;
    v95[3] = sub_1000B6D28;
    v96 = v62;
    aBlock = _NSConcreteStackBlock;
    v95[0] = 1107296256;
    v95[1] = sub_1000043B8;
    v95[2] = &unk_10019D770;
    v65 = _Block_copy(&aBlock);
    v66 = type metadata accessor for DispatchWorkItem(0);
    swift_allocObject(v66, *(unsigned int *)(v66 + 48), *(unsigned __int16 *)(v66 + 52));
    swift_retain();
    sub_10003AB68(v64, v63);
    v67 = DispatchWorkItem.init(flags:block:)(v59, v65);
    v68 = v96;
    swift_release(v61);
    swift_release(v68);
    swift_beginAccess(v86, &aBlock, 33, 0);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a1 + 32));
    v97 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0x8000000000000000;
    sub_1000EC038(v67, v9, isUniquelyReferenced_nonNull_native);
    v70 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v97;
    swift_bridgeObjectRelease(v70, v71, v72, v73, v74, v75, v76, v77);
    v78 = swift_endAccess(&aBlock);
    v79 = v89;
    static DispatchTime.now()(v78);
    v80 = v91;
    + infix(_:_:)(v79);
    v81 = *(void (**)(char *, uint64_t))(v90 + 8);
    v82 = v79;
    v83 = v92;
    v81(v82, v92);
    OS_dispatch_queue.asyncAfter(deadline:execute:)(v80, v67);
    swift_release(v67);
    v81(v80, v83);
  }
}

double sub_1000B62D4@<D0>(char a1@<W0>, _OWORD *a2@<X8>)
{
  _TtC14softposreaderd12RemoteReader **v2;
  _TtC14softposreaderd12RemoteReader **v3;
  unint64_t v5;
  char v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  _TtC14softposreaderd12RemoteReader *v10;
  SEL v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  double result;
  _TtC14softposreaderd12RemoteReader *v19;

  v3 = v2;
  v5 = sub_10013A70C(a1 & 1);
  if ((v6 & 1) != 0)
  {
    v7 = v5;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v9 = (uint64_t)*v2;
    v19 = *v3;
    *v3 = (_TtC14softposreaderd12RemoteReader *)0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1000ED628();
      v9 = (uint64_t)v19;
    }
    sub_100005D2C((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v7), a2);
    sub_100058F2C(v7, v9);
    v10 = *v3;
    *v3 = (_TtC14softposreaderd12RemoteReader *)v9;
    swift_bridgeObjectRelease(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

void sub_1000B6384(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t Strong;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _TtC14softposreaderd12RemoteReader *v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  _TtC14softposreaderd12RemoteReader *v60;
  uint64_t v61;
  __int128 aBlock;
  uint64_t (*v63)(uint64_t);
  void *v64;
  uint64_t v65;
  uint64_t v66;
  char v67[32];

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v59 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v58 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v56 = *(_QWORD *)(v10 - 8);
  v57 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS.QoSClass(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v67, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v18 = Strong;
    v55 = v8;
    v19 = a2 & 1;
    swift_beginAccess(Strong + 32, &aBlock, 33, 0);
    v20 = sub_100058170(a2 & 1);
    swift_endAccess(&aBlock);
    swift_release(v20);
    swift_beginAccess(v18 + 16, &v60, 33, 0);
    sub_1000B62D4(v19, &aBlock);
    sub_100007B30((uint64_t)&aBlock);
    swift_endAccess(&v60);
    if (qword_1001AD0B0 != -1)
      swift_once(&qword_1001AD0B0, sub_1000B5828);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_100003A14(v21, (uint64_t)qword_1001B1720);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v53 = a3;
      v25 = swift_slowAlloc(12, -1);
      v54 = a4;
      v26 = (uint8_t *)v25;
      v27 = swift_slowAlloc(32, -1);
      v52 = v12;
      v28 = v27;
      *(_QWORD *)&aBlock = v27;
      v51 = v14;
      *(_DWORD *)v26 = 136315138;
      LOBYTE(v60) = v19;
      v29 = String.init<A>(describing:)(&v60, &type metadata for ManagedDictionaryKey);
      v31 = (_TtC14softposreaderd12RemoteReader *)v30;
      v60 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(v29, v30, (uint64_t *)&aBlock);
      a3 = v53;
      v14 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease(v31, v32, v33, v34, v35, v36, v37, v38);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "DefaultManagedDictionary removed value for key: %s", v26, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      v39 = v28;
      v12 = v52;
      swift_slowDealloc(v39, -1, -1);
      v40 = v26;
      a4 = v54;
      swift_slowDealloc(v40, -1, -1);
      swift_release(v18);

    }
    else
    {

      swift_release(v18);
    }
    v8 = v55;
  }
  if (a3)
  {
    sub_10001A610();
    (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchQoS.QoSClass.background(_:), v13);
    swift_retain();
    v41 = static OS_dispatch_queue.global(qos:)(v16);
    v42 = v13;
    v43 = (void *)v41;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v42);
    v65 = a3;
    v66 = a4;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v63 = sub_1000043B8;
    v64 = &unk_10019D798;
    v44 = _Block_copy(&aBlock);
    v45 = swift_retain();
    static DispatchQoS.unspecified.getter(v45);
    v60 = &_swiftEmptyArrayStorage;
    v46 = v12;
    v47 = sub_1000B6D50();
    v48 = sub_100003A2C((uint64_t *)&unk_1001AE400);
    v49 = sub_1000B6D98();
    v50 = v58;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v60, v48, v49, v8, v47);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v46, v50, v44);
    _Block_release(v44);

    sub_10004B5D0(a3, a4);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v50, v8);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v46, v57);
    swift_release(v66);
  }
}

uint64_t sub_1000B67E8@<X0>(char a1@<W0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _TtC14softposreaderd12RemoteReader *v13;
  SEL v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  _TtC14softposreaderd12RemoteReader *v31;
  _TtC14softposreaderd12RemoteReader *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v43[3];
  uint64_t v44;
  uint64_t v45;

  v4 = a1 & 1;
  if (qword_1001AD0B0 != -1)
    swift_once(&qword_1001AD0B0, sub_1000B5828);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_100003A14(v5, (uint64_t)qword_1001B1720);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(64, -1);
    v43[0] = v10;
    *(_DWORD *)v9 = 136315394;
    v44 = sub_1000056EC(0xD000000000000014, 0x800000010016DAC0, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2080;
    LOBYTE(v44) = v4;
    v11 = String.init<A>(describing:)(&v44, &type metadata for ManagedDictionaryKey);
    v13 = (_TtC14softposreaderd12RemoteReader *)v12;
    v44 = sub_1000056EC(v11, v12, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease(v13, v14, v15, v16, v17, v18, v19, v20);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s, key: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }

  swift_beginAccess(a2 + 32, v43, 33, 0);
  v21 = sub_100058170(v4);
  v22 = swift_endAccess(v43);
  if (v21)
  {
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v43[0] = v26;
      *(_DWORD *)v25 = 136315138;
      LOBYTE(v44) = v4;
      v27 = String.init<A>(describing:)(&v44, &type metadata for ManagedDictionaryKey);
      v28 = a2;
      v29 = v4;
      v31 = (_TtC14softposreaderd12RemoteReader *)v30;
      v44 = sub_1000056EC(v27, v30, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v25 + 4, v25 + 12);
      v32 = v31;
      v4 = v29;
      a2 = v28;
      swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "DefaultManagedDictionary cancel workitem for key: %s", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }

    dispatch thunk of DispatchWorkItem.cancel()(v40);
    swift_release(v21);
  }
  swift_beginAccess(a2 + 16, v43, 33, 0);
  sub_1000B62D4(v4, a3);
  return swift_endAccess(v43);
}

_QWORD *sub_1000B6B68()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[2] = sub_1000EDC90((uint64_t)_swiftEmptyArrayStorage);
  sub_10001A610();
  v12 = static DispatchQoS.background.getter();
  static OS_dispatch_queue.Attributes.concurrent.getter(v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v2);
  v1[3] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000022, 0x800000010016DAE0, v11, v8, v5, 0);
  v1[4] = sub_1000EDD90((uint64_t)_swiftEmptyArrayStorage);
  return v1;
}

uint64_t sub_1000B6CD0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000B6CF4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  if (v0[4])
    swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_1000B6D28()
{
  uint64_t v0;

  sub_1000B6384(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1000B6D38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000B6D48(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1000B6D50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001B1260;
  if (!qword_1001B1260)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_1001B1260);
  }
  return result;
}

unint64_t sub_1000B6D98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001B1270;
  if (!qword_1001B1270)
  {
    v1 = sub_100003A6C((uint64_t *)&unk_1001AE400);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001B1270);
  }
  return result;
}

void sub_1000B6DE4()
{
  uint64_t v0;

  sub_1000B58B8(v0);
}

uint64_t storeEnumTagSinglePayload for ManagedDictionaryKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000B6E48 + 4 * byte_100160765[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000B6E7C + 4 * byte_100160760[v4]))();
}

uint64_t sub_1000B6E7C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B6E84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000B6E8CLL);
  return result;
}

uint64_t sub_1000B6E98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000B6EA0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000B6EA4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B6EAC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ManagedDictionaryKey()
{
  return &type metadata for ManagedDictionaryKey;
}

unint64_t sub_1000B6ECC()
{
  unint64_t result;

  result = qword_1001B1848;
  if (!qword_1001B1848)
  {
    result = swift_getWitnessTable(&unk_100160848, &type metadata for ManagedDictionaryKey);
    atomic_store(result, (unint64_t *)&qword_1001B1848);
  }
  return result;
}

uint64_t sub_1000B6F18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  __int128 v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t result;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(void);
  uint64_t v45;
  __int16 log;
  os_log_type_t type;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  _BYTE v55[24];
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  log = a1;
  v11 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a4 & 1) != 0)
    sub_10005E420(v11);
  else
    sub_10005E7B4(v11, a2, a3);
  v14 = v12;
  v15 = v13;
  v44 = *(uint64_t (**)(void))(a6 + 16);
  v45 = a2;
  v16 = v44();
  v18 = v17;
  sub_100005D9C(v16, v17);
  v41 = v16;
  v42 = v18;
  sub_10005EB64(v16, v18);
  v54 = v56;
  *(_OWORD *)v55 = v57;
  *(_QWORD *)&v55[16] = v58;
  if ((unsigned __int16)v57 == 25360)
  {
    v43 = a6;
    sub_100005D9C(v56, *((unint64_t *)&v56 + 1));
    if (qword_1001AD0B8 != -1)
      swift_once(&qword_1001AD0B8, sub_1000B85F4);
    v21 = type metadata accessor for Logger(0);
    sub_100003A14(v21, (uint64_t)qword_1001B1850);
    v22 = sub_100005D9C(a2, a3);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = swift_slowAlloc(8, -1);
      *(_DWORD *)v25 = 16777728;
      *(_BYTE *)(v25 + 4) = log;
      *(_WORD *)(v25 + 5) = 256;
      *(_BYTE *)(v25 + 7) = HIBYTE(log);
      sub_100005DE0(v45, a3);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "More data available: CLA=%hhu, INS=%hhu", (uint8_t *)v25, 8u);
      swift_slowDealloc(v25, -1, -1);
    }
    else
    {
      sub_100005DE0(v45, a3);
    }

    ((void (*)(uint64_t, unint64_t, uint64_t, uint64_t))v44)(v14, v15, a5, v43);
    __asm { BR              X9 }
  }
  if ((unsigned __int16)v57 == 36864)
  {
    sub_100005DE0(v16, v18);
    v19 = v14;
    v20 = v15;
LABEL_18:
    sub_100005DE0(v19, v20);
    goto LABEL_19;
  }
  if (qword_1001AD0B8 != -1)
    swift_once(&qword_1001AD0B8, sub_1000B85F4);
  v27 = type metadata accessor for Logger(0);
  sub_100003A14(v27, (uint64_t)qword_1001B1850);
  sub_100005D9C(v14, v15);
  v28 = sub_100005D9C(v14, v15);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    type = v30;
    v31 = swift_slowAlloc(22, -1);
    v49 = swift_slowAlloc(64, -1);
    v52 = v49;
    *(_DWORD *)v31 = 136315394;
    swift_beginAccess(&v54, &v53, 0, 0);
    v32 = v54;
    v33 = v15;
    v34 = *(_QWORD *)&v55[8];
    v35 = *(_QWORD *)&v55[16];
    sub_100005D9C(v54, *((unint64_t *)&v54 + 1));
    sub_100005D9C(v34, v35);
    v36 = Data.hexString()();
    sub_100005DE0(v32, *((unint64_t *)&v32 + 1));
    sub_100005DE0(v34, v35);
    v50 = sub_1000056EC(v36._countAndFlagsBits, (unint64_t)v36._object, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v31 + 4, v31 + 12);
    swift_bridgeObjectRelease(v36._object);
    *(_WORD *)(v31 + 12) = 2080;
    v37 = Data.hexString()();
    v50 = sub_1000056EC(v37._countAndFlagsBits, (unint64_t)v37._object, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v31 + 14, v31 + 22);
    swift_bridgeObjectRelease(v37._object);
    sub_100005DE0(v14, v33);
    sub_100005DE0(v14, v33);
    _os_log_impl((void *)&_mh_execute_header, v29, type, "Status Word Not 9000 (!) RAPDU: %s to CAPDU: %s", (uint8_t *)v31, 0x16u);
    swift_arrayDestroy(v49, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1, -1);
    swift_slowDealloc(v31, -1, -1);
    sub_100005DE0(v41, v42);

    v19 = v14;
    v20 = v33;
    goto LABEL_18;
  }
  sub_100005DE0(v16, v42);
  sub_100005DE0(v14, v15);
  sub_100005DE0(v14, v15);
  sub_100005DE0(v14, v15);

LABEL_19:
  result = swift_beginAccess(&v54, &v52, 0, 0);
  v39 = *(unsigned __int16 *)v55;
  v40 = *(_OWORD *)&v55[8];
  *(_OWORD *)a7 = v54;
  *(_QWORD *)(a7 + 16) = v39;
  *(_OWORD *)(a7 + 24) = v40;
  return result;
}

uint64_t SecureElementTransceiver.getData(tag:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _TtC14softposreaderd12RemoteReader *v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  Swift::String v28;
  uint64_t v29;
  SEL v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  unint64_t v46;
  uint64_t v47;
  _WORD *v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  Swift::String v54;
  SEL v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  unint64_t v62;
  uint64_t v63;
  _WORD *v64;
  os_log_type_t type;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  _QWORD v71[5];
  uint64_t v72;
  unint64_t v73;
  unsigned __int16 v74;
  uint64_t v75;

  if (qword_1001AD0B8 != -1)
    swift_once(&qword_1001AD0B8, sub_1000B85F4);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100003A14(v6, (uint64_t)qword_1001B1850);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    type = v9;
    v10 = swift_slowAlloc(22, -1);
    v67 = swift_slowAlloc(64, -1);
    v75 = v67;
    *(_DWORD *)v10 = 136315394;
    v11 = sub_100003A2C((uint64_t *)&unk_1001B1300);
    v12 = swift_allocObject(v11, 72, 7);
    *(_OWORD *)(v12 + 16) = xmmword_10015A5F0;
    *(_QWORD *)(v12 + 56) = &type metadata for UInt;
    *(_QWORD *)(v12 + 64) = &protocol witness table for UInt;
    *(_QWORD *)(v12 + 32) = a1;
    v13 = String.init(format:_:)(1479684133, 0xE400000000000000, v12);
    v68 = a3;
    v15 = (_TtC14softposreaderd12RemoteReader *)v14;
    v70 = sub_1000056EC(v13, v14, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v15, v16, v17, v18, v19, v20, v21, v22);
    *(_WORD *)(v10 + 12) = 2080;
    v23 = bswap32((unsigned __int16)a1 | 0x80CA0000);
    sub_10005E420(v23);
    v25 = v24;
    v27 = v26;
    v28 = Data.hexString()();
    v29 = v25;
    a3 = v68;
    sub_100005DE0(v29, v27);
    v70 = sub_1000056EC(v28._countAndFlagsBits, (unint64_t)v28._object, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v28._object, v30, v31, v32, v33, v34, v35, v36);
    _os_log_impl((void *)&_mh_execute_header, v8, type, "CAPDU (GET DATA for tag %s): %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v67, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v67, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    v23 = bswap32((unsigned __int16)a1 | 0x80CA0000);
  }
  sub_1000B6F18(v23, 0, 0xC000000000000000, 1, a2, a3, (uint64_t)v71);
  v37 = v71[0];
  v38 = v71[1];
  v39 = v71[3];
  v40 = v71[4];
  v41 = sub_1000306DC((uint64_t)v71, (uint64_t)&v72);
  v42 = v73;
  if (v73 >> 60 == 15)
  {
    v43 = Logger.logObject.getter(v41);
    v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Error from transceive", v45, 2u);
      swift_slowDealloc(v45, -1, -1);
    }

    v46 = sub_100030724();
    v47 = swift_allocError(&type metadata for APDUSW, v46, 0, 0);
    *v48 = 0;
    swift_willThrow(v47);
  }
  else
  {
    a3 = v72;
    v69 = v74;
    sub_100005D9C(v37, v38);
    sub_100005D9C(v39, v40);
    sub_100005D9C(v37, v38);
    v49 = sub_100005D9C(v39, v40);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(12, -1);
      v53 = swift_slowAlloc(32, -1);
      v75 = v53;
      *(_DWORD *)v52 = 136315138;
      v54 = Data.hexString()();
      v70 = sub_1000056EC(v54._countAndFlagsBits, (unint64_t)v54._object, &v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71, v52 + 4, v52 + 12);
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v54._object, v55, v56, v57, v58, v59, v60, v61);
      sub_100030768((uint64_t)v71);
      sub_100030768((uint64_t)v71);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "RAPDU: %s", v52, 0xCu);
      swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v52, -1, -1);
    }
    else
    {
      sub_100030768((uint64_t)v71);
      sub_100030768((uint64_t)v71);
    }

    if (v69 == 36864)
    {
      sub_100005D9C(a3, v42);
    }
    else
    {
      v62 = sub_100030724();
      v63 = swift_allocError(&type metadata for APDUSW, v62, 0, 0);
      *v64 = v69;
      swift_willThrow(v63);
    }
    sub_100030768((uint64_t)v71);
  }
  return a3;
}

uint64_t sub_1000B85F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B1850);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B1850);
  if (qword_1001AD180 != -1)
    swift_once(&qword_1001AD180, sub_1000CC92C);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4E70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_1000B8700()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Logging();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for Logging()
{
  return objc_opt_self(Logging);
}

uint64_t sub_1000B8758()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B1890);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B1890);
  if (qword_1001AD148 != -1)
    swift_once(&qword_1001AD148, sub_1000CC3B0);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4DC8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1000B87E8()
{
  int v0;
  int v1;
  char v2;

  if (qword_1001AD0E0 != -1)
    swift_once(&qword_1001AD0E0, sub_1000BE314);
  v0 = byte_1001B4D88;
  if (qword_1001AD0F8 != -1)
    swift_once(&qword_1001AD0F8, sub_1000BE404);
  v1 = byte_1001B4D8B;
  sub_1000257E0();
  UnsignedInteger.clearBit(_:)(0);
  v2 = 0;
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if (v0)
  {
    UnsignedInteger.clearBit(_:)(0);
    v2 = v0;
  }
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if ((v2 & v1) != v1)
  {
    UnsignedInteger.clearBit(_:)(0);
    v2 |= v1;
  }
  byte_1001B4D70 = v2;
}

void sub_1000B897C()
{
  int v0;
  int v1;
  int v2;
  char v3;

  if (qword_1001AD0F8 != -1)
    swift_once(&qword_1001AD0F8, sub_1000BE404);
  v0 = byte_1001B4D8B;
  if (qword_1001AD100 != -1)
    swift_once(&qword_1001AD100, sub_1000BE454);
  v1 = byte_1001B4D8C;
  if (qword_1001AD108 != -1)
    swift_once(&qword_1001AD108, sub_1000BE4A4);
  v2 = byte_1001B4D8D;
  sub_1000257E0();
  UnsignedInteger.clearBit(_:)(0);
  v3 = 0;
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if (v0)
  {
    UnsignedInteger.clearBit(_:)(0);
    v3 = v0;
  }
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if ((v3 & v1) != v1)
  {
    UnsignedInteger.clearBit(_:)(0);
    v3 |= v1;
  }
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if ((v3 & v2) != v2)
  {
    UnsignedInteger.clearBit(_:)(0);
    v3 |= v2;
  }
  byte_1001B4D71 = v3;
}

void sub_1000B8BB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _TtC14softposreaderd12RemoteReader *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  char *v16;
  uint64_t v17;
  unsigned __int8 v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  const char *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  unint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  _TtC14softposreaderd12RemoteReader *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  unint64_t v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  Swift::String v52;
  SEL v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  unint64_t v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  Swift::String v72;
  SEL v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  unint64_t v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  Swift::String v91;
  SEL v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  uint64_t v99;
  NSObject *v100;
  os_log_type_t v101;
  uint8_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  const char *v106;
  unint64_t v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  Swift::String v114;
  SEL v115;
  id v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  uint64_t v122;
  _BYTE v123[7];
  char v124;
  uint64_t v125;
  _TtC14softposreaderd12RemoteReader *v126;

  v2 = v1;
  if (qword_1001AD0C0 != -1)
    swift_once(&qword_1001AD0C0, sub_1000B8758);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100003A14(v4, (uint64_t)qword_1001B1890);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (_TtC14softposreaderd12RemoteReader *)swift_slowAlloc(32, -1);
    v126 = v9;
    *(_DWORD *)v8 = 136315138;
    v122 = sub_1000056EC(0x6228796669726576, 0xEF293A70616D7469, (uint64_t *)&v126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, v123, v8 + 4, v8 + 12);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  v125 = a1;
  v126 = &_swiftEmptyArrayStorage;
  v16 = sub_100014FF4((char *)&v125, (char *)&v126, v10, v11, v12, v13, v14, v15);
  v17 = (uint64_t)v126;
  if (!*(_QWORD *)&v126->instance[8])
  {
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    return;
  }
  v18 = v126->instance[24];
  v19 = Logger.logObject.getter(v16);
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Disabling isDeveloperMode check.", v21, 2u);
    swift_slowDealloc(v21, -1, -1);
  }

  v124 = -1;
  sub_1000257E0();
  UnsignedInteger.clearBit(_:)(7);
  if (*(_BYTE *)(v2 + 48) == 1)
  {
    v30 = Logger.logObject.getter(v22);
    v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Disabling isProductionJCOP check.", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

    UnsignedInteger.clearBit(_:)(1);
  }
  if (*(_BYTE *)(v2 + 49) == 1)
  {
    v33 = Logger.logObject.getter(v22);
    v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Disabling isInternalInstall check.", v35, 2u);
      swift_slowDealloc(v35, -1, -1);
    }

    UnsignedInteger.clearBit(_:)(6);
  }
  v36 = *(_QWORD *)(v17 + 16);
  if (v36 < 2)
    goto LABEL_40;
  if (((v124 & v18) & (*(unsigned __int8 *)(v2 + 16) ^ *(unsigned __int8 *)(v17 + 33))) != 0)
  {
    v37 = swift_bridgeObjectRetain();
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = (_TtC14softposreaderd12RemoteReader *)swift_slowAlloc(32, -1);
      v126 = v41;
      *(_DWORD *)v40 = 136315138;
      v42 = swift_bridgeObjectRetain();
      v43 = sub_10010DD5C(v42);
      v45 = (unint64_t)v44;
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v17, v44, v46, v47, v48, v49, v50, v51);
      v52 = Data.hexString()();
      sub_100005DE0(v43, v45);
      v122 = sub_1000056EC(v52._countAndFlagsBits, (unint64_t)v52._object, (uint64_t *)&v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, v123, v40 + 4, v40 + 12);
      swift_bridgeObjectRelease_n(v17, 2);
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v52._object, v53, v54, v55, v56, v57, v58, v59);
      v60 = "Invalid attestation data: bit field %s";
LABEL_37:
      _os_log_impl((void *)&_mh_execute_header, v38, v39, v60, v40, 0xCu);
      swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);

      return;
    }
    goto LABEL_38;
  }
  if (v36 < 3)
    goto LABEL_41;
  if (*(unsigned __int8 *)(v17 + 34) > 5u)
  {
    v61 = swift_bridgeObjectRetain();
    v38 = Logger.logObject.getter(v61);
    v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = (_TtC14softposreaderd12RemoteReader *)swift_slowAlloc(32, -1);
      v126 = v41;
      *(_DWORD *)v40 = 136315138;
      v62 = swift_bridgeObjectRetain();
      v63 = sub_10010DD5C(v62);
      v65 = (unint64_t)v64;
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v17, v64, v66, v67, v68, v69, v70, v71);
      v72 = Data.hexString()();
      sub_100005DE0(v63, v65);
      v122 = sub_1000056EC(v72._countAndFlagsBits, (unint64_t)v72._object, (uint64_t *)&v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, v123, v40 + 4, v40 + 12);
      swift_bridgeObjectRelease_n(v17, 2);
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v72._object, v73, v74, v75, v76, v77, v78, v79);
      v60 = "Invalid attestation data: number of clients %s";
      goto LABEL_37;
    }
    goto LABEL_38;
  }
  if (v36 < 5)
    goto LABEL_42;
  if (*(unsigned __int16 *)(v17 + 35) < *(unsigned __int16 *)(v2 + 18))
  {
    v80 = swift_bridgeObjectRetain();
    v38 = Logger.logObject.getter(v80);
    v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = (_TtC14softposreaderd12RemoteReader *)swift_slowAlloc(32, -1);
      v126 = v41;
      *(_DWORD *)v40 = 136315138;
      v81 = swift_bridgeObjectRetain();
      v82 = sub_10010DD5C(v81);
      v84 = (unint64_t)v83;
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v17, v83, v85, v86, v87, v88, v89, v90);
      v91 = Data.hexString()();
      sub_100005DE0(v82, v84);
      v122 = sub_1000056EC(v91._countAndFlagsBits, (unint64_t)v91._object, (uint64_t *)&v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, v123, v40 + 4, v40 + 12);
      swift_bridgeObjectRelease_n(v17, 2);
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v91._object, v92, v93, v94, v95, v96, v97, v98);
      v60 = "Invalid attestation data: jsbl version %s";
      goto LABEL_37;
    }
    goto LABEL_38;
  }
  if (v36 < 8)
    goto LABEL_43;
  if (*(_QWORD *)(v2 + 24) != *(unsigned __int8 *)(v17 + 39)
    || *(_QWORD *)(v2 + 32) != *(unsigned __int8 *)(v17 + 38)
    || *(_QWORD *)(v2 + 40) != *(unsigned __int8 *)(v17 + 37))
  {
    v103 = swift_bridgeObjectRetain();
    v38 = Logger.logObject.getter(v103);
    v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = (_TtC14softposreaderd12RemoteReader *)swift_slowAlloc(32, -1);
      v126 = v41;
      *(_DWORD *)v40 = 136315138;
      v104 = swift_bridgeObjectRetain();
      v105 = sub_10010DD5C(v104);
      v107 = (unint64_t)v106;
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v17, v106, v108, v109, v110, v111, v112, v113);
      v114 = Data.hexString()();
      sub_100005DE0(v105, v107);
      v122 = sub_1000056EC(v114._countAndFlagsBits, (unint64_t)v114._object, (uint64_t *)&v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, v123, v40 + 4, v40 + 12);
      swift_bridgeObjectRelease_n(v17, 2);
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v114._object, v115, v116, v117, v118, v119, v120, v121);
      v60 = "Invalid attestation data: iOSVersion %s";
      goto LABEL_37;
    }
LABEL_38:

    swift_bridgeObjectRelease_n(v17, 2);
    return;
  }
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v17, v23, v24, v25, v26, v27, v28, v29);
  v100 = Logger.logObject.getter(v99);
  v101 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v100, v101))
  {
    v102 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v102 = 0;
    _os_log_impl((void *)&_mh_execute_header, v100, v101, "Attestation data valid.", v102, 2u);
    swift_slowDealloc(v102, -1, -1);
  }

}

uint64_t sub_1000B94A0()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 50, 7);
}

uint64_t type metadata accessor for MPOCDefaultAttestationOfflineVerifier()
{
  return objc_opt_self(_TtC9SPREngine37MPOCDefaultAttestationOfflineVerifier);
}

id sub_1000B94D0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  char *v16;
  char v17;
  id result;
  void *v19;
  unsigned __int16 v20;
  char v21;
  void *v22;
  id v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _QWORD v32[5];
  _QWORD v33[3];
  uint64_t v34;
  _QWORD v35[5];
  _QWORD v36[3];
  uint64_t v37;
  _UNKNOWN **v38;

  v37 = type metadata accessor for Environment(0);
  v38 = &off_10019CC18;
  v36[0] = a1;
  v6 = type metadata accessor for SecureElement();
  v35[3] = v6;
  v35[4] = &off_1001A11A8;
  v35[0] = a2;
  if (qword_1001AD0C0 != -1)
    swift_once(&qword_1001AD0C0, sub_1000B8758);
  v7 = type metadata accessor for Logger(0);
  sub_100003A14(v7, (uint64_t)qword_1001B1890);
  sub_100008390((uint64_t)v36, (uint64_t)v33);
  v8 = sub_100008390((uint64_t)v36, (uint64_t)v32);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(14, -1);
    *(_DWORD *)v11 = 67109376;
    v12 = *(unsigned __int8 *)(*sub_100005EF8(v33, v34) + OBJC_IVAR____TtC9SPREngine11Environment_isProductionEnvironment);
    sub_100005D3C(v33);
    v31 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32, v11 + 4, v11 + 8);
    *(_WORD *)(v11 + 8) = 1024;
    v13 = *(unsigned __int8 *)(*sub_100005EF8(v32, v32[3]) + OBJC_IVAR____TtC9SPREngine11Environment_isCertEnvironment);
    sub_100005D3C(v32);
    LODWORD(v33[0]) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v33, (char *)v33 + 4, v11 + 10, v11 + 14);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "MPOCDefaultAttestationOfflineVerifier.init() isProductionEnvironment: %{BOOL}d\nisCertEnvironment: %{BOOL}d", (uint8_t *)v11, 0xEu);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    sub_100005D3C(v32);
    sub_100005D3C(v33);
  }

  v14 = *(unsigned __int8 *)(*sub_100005EF8(v36, v37) + OBJC_IVAR____TtC9SPREngine11Environment_isProductionEnvironment);
  sub_100008390((uint64_t)v36, (uint64_t)v33);
  if (v14 == 1)
  {
    sub_100005D3C(v33);
LABEL_9:
    if (qword_1001AD0C8 != -1)
      swift_once(&qword_1001AD0C8, sub_1000B87E8);
    v16 = &byte_1001B4D70;
    goto LABEL_15;
  }
  v15 = *(unsigned __int8 *)(*sub_100005EF8(v33, v34) + OBJC_IVAR____TtC9SPREngine11Environment_isCertEnvironment);
  sub_100005D3C(v33);
  if (v15 == 1)
    goto LABEL_9;
  if (qword_1001AD0D0 != -1)
    swift_once(&qword_1001AD0D0, sub_1000B897C);
  v16 = &byte_1001B4D71;
LABEL_15:
  v17 = *v16;
  result = objc_msgSend(*(id *)(*sub_100005EF8(v35, v6) + 24), "expectedSequenceCounter");
  if (result)
  {
    v19 = result;
    v20 = (unsigned __int16)objc_msgSend(result, "unsignedShortValue");

    v21 = *(_BYTE *)(*sub_100005EF8(v36, v37) + OBJC_IVAR____TtC9SPREngine11Environment_isCertEnvironment);
    v22 = (void *)objc_opt_self(NSProcessInfo);
    v23 = objc_msgSend(v22, "processInfo");
    objc_msgSend(v23, "operatingSystemVersion");
    v24 = v33[0];

    v25 = objc_msgSend(v22, "processInfo");
    objc_msgSend(v25, "operatingSystemVersion");
    v26 = v33[1];

    v27 = objc_msgSend(v22, "processInfo");
    objc_msgSend(v27, "operatingSystemVersion");
    v28 = v33[2];

    v29 = type metadata accessor for MPOCDefaultAttestationOfflineVerifier();
    v30 = swift_allocObject(v29, 50, 7);
    *(_BYTE *)(v30 + 16) = v17;
    *(_WORD *)(v30 + 18) = v20;
    *(_QWORD *)(v30 + 24) = v24;
    *(_QWORD *)(v30 + 32) = v26;
    *(_QWORD *)(v30 + 40) = v28;
    *(_BYTE *)(v30 + 17) = 5;
    *(_BYTE *)(v30 + 48) = a3 & 1;
    *(_BYTE *)(v30 + 49) = v21;
    sub_100005D3C(v35);
    sub_100005D3C(v36);
    return (id)v30;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1000B98E4(uint64_t a1)
{
  uint64_t v1;
  id v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD v15[5];
  _QWORD v16[5];

  sub_1000DEDE4();
  if (v1)
  {
    swift_release(a1);
  }
  else
  {
    sub_1000DDE7C();
    v4 = OBJC_IVAR____TtC9SPREngine5Depot_settings;
    v5 = *(_BYTE *)(a1 + *(int *)(type metadata accessor for Settings(0) + 72) + v4);
    v6 = sub_10001A64C((uint64_t)v16, v16[3]);
    __chkstk_darwin(v6);
    v8 = (_QWORD *)((char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v9 + 16))(v8);
    v10 = sub_10001A64C((uint64_t)v15, v15[3]);
    __chkstk_darwin(v10);
    v12 = (_QWORD *)((char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v13 + 16))(v12);
    v2 = sub_1000B94D0(*v8, *v12, (v5 & 1) == 0);
    sub_100005D3C(v15);
    sub_100005D3C(v16);
    swift_release(a1);
  }
  return v2;
}

id sub_1000B9A70(unsigned __int8 a1)
{
  _QWORD *v1;
  _QWORD *v2;
  int v4;
  unsigned __int8 v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char has_internal_content;
  int has_internal_diagnostics;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id result;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;

  v2 = v1;
  if (qword_1001AD0E0 != -1)
    swift_once(&qword_1001AD0E0, sub_1000BE314);
  v4 = byte_1001B4D88;
  LOBYTE(v35) = byte_1001B4D88;
  sub_1000257E0();
  UnsignedInteger.clearBit(_:)(0);
  LOBYTE(v35) = v35 & a1;
  UnsignedInteger.clearBit(_:)(0);
  if (v35 == v4)
    v5 = objc_msgSend(*(id *)(*sub_100005EF8(v1 + 5, v1[8]) + 16), "isProductionSigned");
  else
    v5 = 0;
  if (qword_1001AD0E8 != -1)
    swift_once(&qword_1001AD0E8, sub_1000BE364);
  LOBYTE(v35) = byte_1001B4D89;
  UnsignedInteger.clearBit(_:)(0);
  LOBYTE(v35) = v35 & a1;
  UnsignedInteger.clearBit(_:)(0);
  if (qword_1001AD0F0 != -1)
    swift_once(&qword_1001AD0F0, sub_1000BE3B4);
  LOBYTE(v35) = byte_1001B4D8A;
  UnsignedInteger.clearBit(_:)(0);
  LOBYTE(v35) = v35 & a1;
  UnsignedInteger.clearBit(_:)(0);
  if (qword_1001AD0F8 != -1)
    swift_once(&qword_1001AD0F8, sub_1000BE404);
  v6 = byte_1001B4D8B;
  LOBYTE(v35) = byte_1001B4D8B;
  UnsignedInteger.clearBit(_:)(0);
  LOBYTE(v35) = v35 & a1;
  UnsignedInteger.clearBit(_:)(0);
  if (v35 == v6)
  {
    OS_dispatch_queue.sync<A>(execute:)(&v35, sub_100071BE4, 0, &type metadata for Bool);
    v7 = v35;
  }
  else
  {
    v7 = 0;
  }
  if (qword_1001AD100 != -1)
    swift_once(&qword_1001AD100, sub_1000BE454);
  v8 = byte_1001B4D8C;
  LOBYTE(v35) = byte_1001B4D8C;
  UnsignedInteger.clearBit(_:)(0);
  LOBYTE(v35) = v35 & a1;
  UnsignedInteger.clearBit(_:)(0);
  if (v35 == v8)
  {
    v9 = v1[2];
    v10 = v2[3];
    v11 = String.utf8CString.getter(v2[2], v10);
    has_internal_content = os_variant_has_internal_content(v11 + 32);
    swift_release(v11);
    if ((has_internal_content & 1) != 0)
    {
      has_internal_diagnostics = 1;
    }
    else
    {
      v14 = String.utf8CString.getter(v9, v10);
      has_internal_diagnostics = os_variant_has_internal_diagnostics(v14 + 32);
      swift_release(v14);
    }
  }
  else
  {
    has_internal_diagnostics = 0;
  }
  if (qword_1001AD108 != -1)
    swift_once(&qword_1001AD108, sub_1000BE4A4);
  v15 = byte_1001B4D8D;
  LOBYTE(v35) = byte_1001B4D8D;
  UnsignedInteger.clearBit(_:)(0);
  LOBYTE(v35) = v35 & a1;
  UnsignedInteger.clearBit(_:)(0);
  if (v35 == v15)
  {
    v16 = SPRIsInDeveloperMode();
    v34 = a1;
    if ((v5 & 1) != 0)
    {
      if (v7)
      {
        if ((has_internal_diagnostics & 1) != 0)
        {
          if ((v16 & 1) != 0)
          {
            v17 = 512;
            v18 = 4096;
LABEL_47:
            v20 = 0x4000;
LABEL_55:
            v19 = 0x8000;
            goto LABEL_57;
          }
LABEL_33:
          v19 = 0;
          v17 = 512;
          v18 = 4096;
          v20 = 0x4000;
          goto LABEL_57;
        }
        if ((v16 & 1) != 0)
        {
          v20 = 0;
          v17 = 512;
          v18 = 4096;
          goto LABEL_55;
        }
LABEL_52:
        v19 = 0;
        v20 = 0;
        v17 = 512;
        v18 = 4096;
        goto LABEL_57;
      }
      if ((has_internal_diagnostics & 1) != 0)
      {
        if ((v16 & 1) != 0)
        {
          v18 = 0;
          v17 = 512;
          goto LABEL_47;
        }
        goto LABEL_49;
      }
      if ((v16 & 1) != 0)
      {
        v20 = 0;
        v18 = 0;
        v17 = 512;
        goto LABEL_55;
      }
LABEL_56:
      v19 = 0;
      v20 = 0;
      v18 = 0;
      v17 = 512;
      goto LABEL_57;
    }
    v17 = 0;
    if (v16)
      v19 = 0x8000;
    else
      v19 = 0;
  }
  else
  {
    v34 = a1;
    if ((v5 & 1) != 0)
    {
      if (v7)
      {
        if ((has_internal_diagnostics & 1) != 0)
          goto LABEL_33;
        goto LABEL_52;
      }
      if ((has_internal_diagnostics & 1) != 0)
      {
LABEL_49:
        v19 = 0;
        v18 = 0;
        v17 = 512;
        v20 = 0x4000;
        goto LABEL_57;
      }
      goto LABEL_56;
    }
    v19 = 0;
    v17 = 0;
  }
  if (has_internal_diagnostics)
    v20 = 0x4000;
  else
    v20 = 0;
  if (v7)
    v18 = 4096;
  else
    v18 = 0;
LABEL_57:
  v21 = sub_100072134();
  if (qword_1001AD308 != -1)
    swift_once(&qword_1001AD308, sub_10013E994);
  v22 = static GlobalState.shared;
  result = objc_msgSend(*(id *)(static GlobalState.shared + 72), "lock");
  while (*(uint64_t *)(v22 + 96) > 0 || *(_BYTE *)(v22 + 80) == 1)
    result = objc_msgSend(*(id *)(v22 + 72), "wait");
  v24 = *(_QWORD *)(v22 + 88);
  v25 = __OFADD__(v24, 1);
  v26 = v24 + 1;
  if (v25)
  {
    __break(1u);
    goto LABEL_72;
  }
  *(_QWORD *)(v22 + 88) = v26;
  objc_msgSend(*(id *)(v22 + 72), "unlock");
  v27 = *(_QWORD *)(v22 + 64);
  result = objc_msgSend(*(id *)(v22 + 72), "lock");
  v28 = *(_QWORD *)(v22 + 88);
  v25 = __OFSUB__(v28, 1);
  v29 = v28 - 1;
  if (v25)
  {
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
    return result;
  }
  *(_QWORD *)(v22 + 88) = v29;
  if (!v29)
    objc_msgSend(*(id *)(v22 + 72), "broadcast");
  objc_msgSend(*(id *)(v22 + 72), "unlock");
  result = objc_msgSend(*(id *)(*sub_100005EF8(v2 + 5, v2[8]) + 24), "sequenceCounter");
  if (!result)
    goto LABEL_73;
  v30 = result;
  v31 = 255;
  if (v27 < 255)
    v31 = v27;
  v32 = v31 & ~(v31 >> 63);
  v33 = objc_msgSend(result, "unsignedShortValue");

  return (id)(v20 | v19 | v18 | v17 | v34 | (v21 << 56) | ((unint64_t)BYTE2(v21) << 40) | ((unint64_t)BYTE1(v21) << 48) | (v32 << 16) | ((unint64_t)v33 << 24));
}

uint64_t sub_1000BA0A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B1990);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B1990);
  if (qword_1001AD148 != -1)
    swift_once(&qword_1001AD148, sub_1000CC3B0);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4DC8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1000BA138(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  char *v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  uint8_t *v40;
  char v41;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  _QWORD v67[34];
  _BYTE v68[272];
  _QWORD v69[34];
  uint64_t v70[35];

  v2 = v1;
  v4 = type metadata accessor for DateInterval(0);
  v61 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v56 - v8;
  v10 = sub_100003A2C(&qword_1001AD9E0);
  __chkstk_darwin(v10);
  v63 = (uint64_t)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Date(0, v12);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v60 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v66 = (char *)&v56 - v18;
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v56 - v20;
  __chkstk_darwin(v19);
  v64 = (char *)&v56 - v22;
  if (qword_1001AD0D8 != -1)
    swift_once(&qword_1001AD0D8, sub_1000BA0A8);
  v23 = type metadata accessor for Logger(0);
  v65 = sub_100003A14(v23, (uint64_t)qword_1001B1990);
  v24 = Logger.logObject.getter(v65);
  v25 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v58 = v7;
    v26 = swift_slowAlloc(12, -1);
    v62 = v14;
    v27 = (uint8_t *)v26;
    v28 = swift_slowAlloc(32, -1);
    v59 = v21;
    v57 = v2;
    v29 = v28;
    v70[0] = v28;
    *(_DWORD *)v27 = 136315138;
    v69[0] = sub_1000056EC(0xD000000000000028, 0x800000010016DD30, v70);
    v7 = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v69, &v69[1], v27 + 4, v27 + 12);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "%s", v27, 0xCu);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    v30 = v29;
    v2 = v57;
    v21 = v59;
    swift_slowDealloc(v30, -1, -1);
    v31 = v27;
    v14 = v62;
    swift_slowDealloc(v31, -1, -1);
  }

  sub_100054A14(v2 + 16, (uint64_t)v68);
  sub_100054A14((uint64_t)v68, (uint64_t)v69);
  v32 = sub_1000240E0((uint64_t)v69);
  v33 = v66;
  if ((_DWORD)v32 == 1)
  {
    v34 = Logger.logObject.getter(v32);
    v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "No attestation token", v36, 2u);
      swift_slowDealloc(v36, -1, -1);
    }
LABEL_12:

    goto LABEL_13;
  }
  memcpy(v70, v69, 0x110uLL);
  sub_100005EF8((_QWORD *)(v2 + 312), *(_QWORD *)(v2 + 336));
  sub_100054A14((uint64_t)v68, (uint64_t)v67);
  sub_10005BAFC(v67);
  v37 = v63;
  sub_10001E61C(v63);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v37, 1, v13) == 1)
  {
    v38 = sub_10001A448(v37);
    v34 = Logger.logObject.getter(v38);
    v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v39, "Could not calculate secure now", v40, 2u);
      swift_slowDealloc(v40, -1, -1);
    }
    sub_1000240F8((uint64_t)v68);
    goto LABEL_12;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 32))(v64, v37, v13);
  v43 = sub_1000D1354((uint64_t)v9);
  DateInterval.end.getter(v43);
  v44 = v14;
  v45 = *(void (**)(char *, uint64_t))(v61 + 8);
  v45(v9, v4);
  static Date.- infix(_:_:)(v33, a1);
  v62 = v44;
  v46 = *(void (**)(char *, uint64_t))(v44 + 8);
  v46(v33, v13);
  v47 = sub_1000D1354((uint64_t)v9);
  DateInterval.start.getter(v47);
  v45(v9, v4);
  v48 = sub_1000BBC00(&qword_1001AD9F8, (uint64_t)&protocol conformance descriptor for Date);
  LOBYTE(v44) = dispatch thunk of static Comparable.< infix(_:_:)(v21, v33, v13, v48);
  v49 = ((uint64_t (*)(char *, uint64_t))v46)(v33, v13);
  if ((v44 & 1) == 0)
  {
    v53 = sub_1000D1354((uint64_t)v7);
    DateInterval.start.getter(v53);
    v45(v7, v4);
    v54 = v60;
    (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v60, v21, v13);
    DateInterval.init(start:end:)(v33, v54);
    v55 = v64;
    v41 = DateInterval.contains(_:)(v64);
    sub_1000240F8((uint64_t)v68);
    v45(v9, v4);
    v46(v21, v13);
    v46(v55, v13);
    return v41 & 1;
  }
  v50 = Logger.logObject.getter(v49);
  v51 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v50, v51))
  {
    v52 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v52 = 0;
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "Attestation token expires at or earlier than token validity start date", v52, 2u);
    swift_slowDealloc(v52, -1, -1);
  }
  sub_1000240F8((uint64_t)v68);

  v46(v21, v13);
  v46(v64, v13);
LABEL_13:
  v41 = 0;
  return v41 & 1;
}

uint64_t sub_1000BA7A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  unint64_t v41;
  uint64_t result;
  char *v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  _BOOL4 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _TtC14softposreaderd12RemoteReader *v60;
  _TtC14softposreaderd12RemoteReader *v61;
  void (*v62)(char *, uint64_t);
  SEL v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  uint64_t (*v70)(char *, uint64_t);
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _TtC14softposreaderd12RemoteReader *v76;
  SEL v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  os_log_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  uint8_t *v92;
  void (*v93)(char *, uint64_t);
  uint64_t v94;
  char *v95;
  char v96;
  char v97;
  uint64_t v98;
  void (*v99)(char *, uint64_t);
  char *v100;
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  uint8_t *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  _TtC14softposreaderd12RemoteReader *v110;
  SEL v111;
  id v112;
  id v113;
  id v114;
  id v115;
  id v116;
  id v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  os_log_t v122;
  uint64_t v123;
  uint64_t (*v124)(char *, char *, uint64_t);
  int v125;
  char *v126;
  char *v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD v143[34];
  _BYTE v144[272];
  uint64_t v145;
  _QWORD v146[34];

  v136 = a2;
  v3 = sub_100003A2C(&qword_1001AD9E0);
  __chkstk_darwin(v3);
  v131 = (uint64_t)&v120 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DateInterval(0);
  v134 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v130 = (char *)&v120 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v133 = (char *)&v120 - v9;
  __chkstk_darwin(v8);
  v11 = (char *)&v120 - v10;
  v140 = type metadata accessor for Date(0, v12);
  v138 = *(_QWORD *)(v140 - 8);
  v13 = __chkstk_darwin(v140);
  v129 = (char *)&v120 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v120 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v120 - v19;
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v120 - v22;
  v24 = __chkstk_darwin(v21);
  v135 = (char *)&v120 - v25;
  __chkstk_darwin(v24);
  v27 = (char *)&v120 - v26;
  if (qword_1001AD0D8 != -1)
    swift_once(&qword_1001AD0D8, sub_1000BA0A8);
  v28 = type metadata accessor for Logger(0);
  v137 = sub_100003A14(v28, (uint64_t)qword_1001B1990);
  v29 = Logger.logObject.getter(v137);
  v30 = static os_log_type_t.default.getter();
  v31 = os_log_type_enabled(v29, v30);
  v132 = v17;
  v128 = a1;
  if (v31)
  {
    v32 = v27;
    v33 = v11;
    v34 = swift_slowAlloc(22, -1);
    *(_DWORD *)v34 = 134218240;
    v145 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, v146, v34 + 4, v34 + 12);
    *(_WORD *)(v34 + 12) = 2048;
    v145 = v136;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, v146, v34 + 14, v34 + 22);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "isOfflineAttested(with attestationData: %llu, duration: %llu)", (uint8_t *)v34, 0x16u);
    v35 = v34;
    v11 = v33;
    v27 = v32;
    swift_slowDealloc(v35, -1, -1);
  }

  sub_100054A14((uint64_t)(v139 + 2), (uint64_t)v144);
  sub_100054A14((uint64_t)v144, (uint64_t)&v145);
  v36 = sub_1000240E0((uint64_t)&v145);
  v37 = v138;
  if ((_DWORD)v36 == 1)
  {
    v38 = Logger.logObject.getter(v36);
    v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "No attestation token", v40, 2u);
      swift_slowDealloc(v40, -1, -1);
    }

    goto LABEL_24;
  }
  v41 = v146[11];
  sub_100054A14((uint64_t)v144, (uint64_t)v143);
  sub_10005BAFC(v143);
  result = Date.init(timeIntervalSince1970:)((double)v41);
  if (!__CFADD__(v41, v136))
  {
    v43 = v135;
    Date.init(timeIntervalSince1970:)((double)(v41 + v136));
    v44 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
    v45 = v140;
    v44(v23, v27, v140);
    v124 = (uint64_t (*)(char *, char *, uint64_t))v44;
    v44(v20, v43, v45);
    DateInterval.init(start:end:)(v23, v20);
    v47 = v133;
    v46 = v134;
    v48 = *(void (**)(char *, char *, uint64_t))(v134 + 16);
    v48(v133, v11, v5);
    v49 = v130;
    v50 = ((uint64_t (*)(char *, char *, uint64_t))v48)(v130, v11, v5);
    v51 = v37;
    v52 = Logger.logObject.getter(v50);
    v53 = static os_log_type_t.default.getter();
    v125 = v53;
    v54 = os_log_type_enabled(v52, v53);
    v127 = v27;
    if (v54)
    {
      v55 = swift_slowAlloc(22, -1);
      v123 = swift_slowAlloc(64, -1);
      v142 = v123;
      *(_DWORD *)v55 = 136315394;
      v121 = v55 + 4;
      v122 = v52;
      DateInterval.start.getter();
      v56 = sub_1000BBC00((unint64_t *)&qword_1001ADA00, (uint64_t)&protocol conformance descriptor for Date);
      v136 = v5;
      v57 = v56;
      v58 = v140;
      v59 = dispatch thunk of CustomStringConvertible.description.getter(v140, v56);
      v61 = v60;
      v126 = v11;
      v62 = *(void (**)(char *, uint64_t))(v138 + 8);
      v62(v23, v58);
      v141 = sub_1000056EC(v59, (unint64_t)v61, &v142);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142, v121, v55 + 12);
      swift_bridgeObjectRelease(v61, v63, v64, v65, v66, v67, v68, v69);
      v70 = *(uint64_t (**)(char *, uint64_t))(v134 + 8);
      v71 = v70(v133, v136);
      *(_WORD *)(v55 + 12) = 2080;
      v134 = v55 + 14;
      DateInterval.end.getter(v71);
      v72 = dispatch thunk of CustomStringConvertible.description.getter(v58, v57);
      v74 = v73;
      v62(v23, v58);
      v11 = v126;
      v141 = sub_1000056EC(v72, v74, &v142);
      v75 = v138;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142, v134, v55 + 22);
      v76 = (_TtC14softposreaderd12RemoteReader *)v74;
      v5 = v136;
      swift_bridgeObjectRelease(v76, v77, v78, v79, v80, v81, v82, v83);
      v70(v49, v5);
      v84 = v122;
      _os_log_impl((void *)&_mh_execute_header, v122, (os_log_type_t)v125, "Validity period: %s...%s", (uint8_t *)v55, 0x16u);
      v85 = v123;
      swift_arrayDestroy(v123, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v85, -1, -1);
      swift_slowDealloc(v55, -1, -1);

      v86 = v132;
    }
    else
    {
      v70 = *(uint64_t (**)(char *, uint64_t))(v46 + 8);
      v70(v47, v5);
      v70(v49, v5);

      v86 = v132;
      v75 = v51;
    }
    sub_100005EF8(v139 + 39, v139[42]);
    v87 = v131;
    sub_10001E61C(v131);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48))(v87, 1, v140) == 1)
    {
      v88 = v11;
      v89 = sub_10001A448(v87);
      v90 = Logger.logObject.getter(v89);
      v91 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v90, v91))
      {
        v92 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v92 = 0;
        _os_log_impl((void *)&_mh_execute_header, v90, v91, "Could not calculate secure now", v92, 2u);
        swift_slowDealloc(v92, -1, -1);
      }

      sub_1000240F8((uint64_t)v144);
      v70(v88, v5);
      v93 = *(void (**)(char *, uint64_t))(v75 + 8);
      v94 = v140;
      v93(v135, v140);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v75 + 32))(v86, v87, v140);
      v95 = v11;
      if ((DateInterval.contains(_:)(v86) & 1) != 0)
      {
        sub_100005EF8(v139 + 44, v139[47]);
        sub_1000B8BB0(v128);
        v97 = v96;
        sub_1000240F8((uint64_t)v144);
        v98 = v140;
        v99 = *(void (**)(char *, uint64_t))(v75 + 8);
        v99(v86, v140);
        v70(v95, v5);
        v99(v135, v98);
        v99(v127, v98);
        return v97 & 1;
      }
      v126 = v11;
      v136 = v5;
      v100 = v129;
      v101 = v124(v129, v86, v140);
      v102 = Logger.logObject.getter(v101);
      v103 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v102, v103))
      {
        v104 = (uint8_t *)swift_slowAlloc(12, -1);
        v105 = swift_slowAlloc(32, -1);
        v142 = v105;
        *(_DWORD *)v104 = 136315138;
        v139 = v104 + 4;
        v106 = sub_1000BBC00((unint64_t *)&qword_1001ADA00, (uint64_t)&protocol conformance descriptor for Date);
        v107 = v100;
        v94 = v140;
        v108 = dispatch thunk of CustomStringConvertible.description.getter(v140, v106);
        v110 = (_TtC14softposreaderd12RemoteReader *)v109;
        v141 = sub_1000056EC(v108, v109, &v142);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142, v139, v104 + 12);
        swift_bridgeObjectRelease(v110, v111, v112, v113, v114, v115, v116, v117);
        v93 = *(void (**)(char *, uint64_t))(v138 + 8);
        v93(v107, v94);
        _os_log_impl((void *)&_mh_execute_header, v102, v103, "Current date (%s) outside of attestation token validity period", v104, 0xCu);
        swift_arrayDestroy(v105, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v105, -1, -1);
        swift_slowDealloc(v104, -1, -1);

        sub_1000240F8((uint64_t)v144);
        v118 = v132;
      }
      else
      {

        sub_1000240F8((uint64_t)v144);
        v93 = *(void (**)(char *, uint64_t))(v75 + 8);
        v119 = v100;
        v94 = v140;
        v93(v119, v140);
        v118 = v86;
      }
      v93(v118, v94);
      v70(v126, v136);
      v93(v135, v94);
    }
    v93(v127, v94);
LABEL_24:
    v97 = 0;
    return v97 & 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000BB134(const void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t __dst[37];

  v2 = v1;
  if (qword_1001AD0D8 != -1)
    swift_once(&qword_1001AD0D8, sub_1000BA0A8);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100003A14(v4, (uint64_t)qword_1001B1990);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    __dst[0] = v9;
    *(_DWORD *)v8 = 136315138;
    v11 = sub_1000056EC(0xD000000000000017, 0x800000010016DD10, __dst);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, __dst, v8 + 4, v8 + 12);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  memcpy(__dst, (const void *)(v2 + 16), 0x122uLL);
  memcpy((void *)(v2 + 16), a1, 0x122uLL);
  sub_100070F4C((uint64_t)a1);
  return sub_1000710DC((uint64_t)__dst);
}

id sub_1000BB2E8(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v2 = v1;
  if (qword_1001AD0D8 != -1)
    swift_once(&qword_1001AD0D8, sub_1000BA0A8);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100003A14(v4, (uint64_t)qword_1001B1990);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc(15, -1);
    v9 = swift_slowAlloc(32, -1);
    v12 = v9;
    *(_DWORD *)v8 = 136315394;
    v11 = sub_1000056EC(0x287463656C6C6F63, 0xEB00000000293A5FLL, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 256;
    LOBYTE(v11) = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, (char *)&v11 + 1, v8 + 14, v8 + 15);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s(options: %hhu)", (uint8_t *)v8, 0xFu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  sub_100005EF8((_QWORD *)(v2 + 392), *(_QWORD *)(v2 + 416));
  return sub_1000B9A70(a1);
}

uint64_t sub_1000BB494()
{
  _QWORD *v0;
  _BYTE __dst[296];

  memcpy(__dst, v0 + 2, 0x122uLL);
  sub_1000710DC((uint64_t)__dst);
  sub_100005D3C(v0 + 39);
  sub_100005D3C(v0 + 44);
  sub_100005D3C(v0 + 49);
  return swift_deallocClassInstance(v0, 432, 7);
}

uint64_t type metadata accessor for MPOCDefaultAttestationManager()
{
  return objc_opt_self(_TtC9SPREngine29MPOCDefaultAttestationManager);
}

uint64_t sub_1000BB514(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _UNKNOWN **v24;
  __int128 v25;
  uint64_t v26;
  _UNKNOWN **v27;
  __int128 v28;
  uint64_t v29;
  _UNKNOWN **v30;

  v29 = type metadata accessor for DefaultSecureTimeKeeper();
  v30 = &off_10019C0A0;
  *(_QWORD *)&v28 = a2;
  v26 = type metadata accessor for MPOCDefaultAttestationOfflineVerifier();
  v27 = &off_10019D898;
  *(_QWORD *)&v25 = a3;
  v23 = type metadata accessor for MPOCDefaultAttestationData();
  v24 = &off_10019C838;
  *(_QWORD *)&v22 = a4;
  if (qword_1001AD0D8 != -1)
    swift_once(&qword_1001AD0D8, sub_1000BA0A8);
  v10 = type metadata accessor for Logger(0);
  sub_100003A14(v10, (uint64_t)qword_1001B1990);
  sub_100070F4C((uint64_t)a1);
  v11 = sub_100070F4C((uint64_t)a1);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v21 = v15;
    *(_DWORD *)v14 = 136315138;
    sub_100070F4C((uint64_t)a1);
    v16 = sub_1000D65B4();
    v18 = v17;
    sub_1000710DC((uint64_t)a1);
    v20 = sub_1000056EC(v16, v18, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v18);
    sub_1000710DC((uint64_t)a1);
    sub_1000710DC((uint64_t)a1);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "MPOCDefaultAttestationManager.init() state: %s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    sub_1000710DC((uint64_t)a1);
    sub_1000710DC((uint64_t)a1);
  }

  memcpy((void *)(a5 + 16), a1, 0x122uLL);
  sub_10001A674(&v28, a5 + 312);
  sub_10001A674(&v25, a5 + 352);
  sub_10001A674(&v22, a5 + 392);
  return a5;
}

uint64_t sub_1000BB76C(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v25[3];
  uint64_t v26;
  _UNKNOWN **v27;
  _QWORD v28[3];
  uint64_t v29;
  _UNKNOWN **v30;
  _QWORD v31[3];
  uint64_t v32;
  _UNKNOWN **v33;

  v32 = type metadata accessor for DefaultSecureTimeKeeper();
  v33 = &off_10019C0A0;
  v31[0] = a2;
  v29 = type metadata accessor for MPOCDefaultAttestationOfflineVerifier();
  v30 = &off_10019D898;
  v28[0] = a3;
  v26 = type metadata accessor for MPOCDefaultAttestationData();
  v27 = &off_10019C838;
  v25[0] = a4;
  v8 = type metadata accessor for MPOCDefaultAttestationManager();
  v9 = swift_allocObject(v8, 432, 7);
  v10 = sub_10001A64C((uint64_t)v31, v32);
  __chkstk_darwin(v10);
  v12 = (_QWORD *)((char *)&v25[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v13 + 16))(v12);
  v14 = sub_10001A64C((uint64_t)v28, v29);
  __chkstk_darwin(v14);
  v16 = (_QWORD *)((char *)&v25[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v17 + 16))(v16);
  v18 = sub_10001A64C((uint64_t)v25, v26);
  __chkstk_darwin(v18);
  v20 = (_QWORD *)((char *)&v25[-1] - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  v22 = sub_1000BB514(a1, *v12, *v16, *v20, v9);
  sub_100005D3C(v25);
  sub_100005D3C(v28);
  sub_100005D3C(v31);
  return v22;
}

void *sub_1000BB930@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  unint64_t v14;
  _TtC14softposreaderd12RemoteReader *v15;
  _TtC14softposreaderd12RemoteReader *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v26;
  uint64_t v27;
  uint64_t __dst[38];

  v2 = v1;
  if (qword_1001AD0D8 != -1)
    swift_once(&qword_1001AD0D8, sub_1000BA0A8);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_100003A14(v3, (uint64_t)qword_1001B1990);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    __dst[0] = v8;
    *(_DWORD *)v7 = 136315138;
    v27 = sub_1000056EC(0xD000000000000015, 0x800000010016DCF0, __dst);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, __dst, v7 + 4, v7 + 12);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }

  v9 = swift_retain_n(v1, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v27 = v13;
    *(_DWORD *)v12 = 136315138;
    memcpy(__dst, (const void *)(v1 + 16), 0x122uLL);
    sub_100070F4C((uint64_t)__dst);
    v14 = sub_1000D65B4();
    v16 = v15;
    sub_1000710DC((uint64_t)__dst);
    v26 = sub_1000056EC(v14, (unint64_t)v16, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v12 + 4, v12 + 12);
    swift_release_n(v2, 2);
    swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "MPOCAttestationState: %s", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

    swift_release_n(v1, 2);
  }
  return memcpy(a1, (const void *)(v2 + 16), 0x122uLL);
}

uint64_t sub_1000BBC00(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Date(255, a2);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BBC40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _OWORD v17[17];
  _QWORD v18[37];
  _QWORD v19[5];
  _QWORD v20[5];
  _QWORD v21[5];
  _BYTE v22[304];
  _OWORD *v23;

  sub_1000DC4B4();
  if (v1)
  {
    swift_release(a1);
  }
  else
  {
    sub_1000E2C6C();
    sub_1000E12A4();
    sub_1000549E8(v17);
    sub_100054A14((uint64_t)v17, (uint64_t)v18);
    v18[35] = 0;
    v18[34] = 0;
    LOWORD(v18[36]) = 256;
    memcpy(v22, v18, 0x122uLL);
    v5 = sub_10001A64C((uint64_t)v21, v21[3]);
    v23 = v17;
    __chkstk_darwin(v5);
    v7 = (uint64_t *)((char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v8 + 16))(v7);
    v9 = sub_10001A64C((uint64_t)v20, v20[3]);
    __chkstk_darwin(v9);
    v11 = (uint64_t *)((char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v12 + 16))(v11);
    v13 = sub_10001A64C((uint64_t)v19, v19[3]);
    __chkstk_darwin(v13);
    v15 = (uint64_t *)((char *)v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v16 + 16))(v15);
    v2 = sub_1000BB76C(v22, *v7, *v11, *v15);
    sub_100005D3C(v19);
    sub_100005D3C(v20);
    sub_100005D3C(v21);
    swift_release(a1);
  }
  return v2;
}

uint64_t sub_1000BBE78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v21 = a5;
  v11 = type metadata accessor for String.Encoding(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter(v13);
  v16 = String.data(using:allowLossyConversion:)(v15, 0, a3, a4);
  v18 = v17;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  if (v18 >> 60 == 15)
  {
    v19 = sub_1000243B8(6002, 0x2064696C61766E69, (void *)0xED0000382D465455, 0);
    return swift_willThrow(v19);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(a6 + 40))(a1, a2, v16, v18, v21, a6);
    return sub_10000A9B0(v16, v18);
  }
}

uint64_t sub_1000BBFB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v23 = a2;
  v24 = a4;
  v22 = a1;
  v12 = type metadata accessor for JSONEncoder.OutputFormatting(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for JSONEncoder(0);
  default argument 1 of static JSONEncoder.encodeClean<A>(_:outputFormatting:)();
  static JSONEncoder.encodeClean<A>(_:outputFormatting:)(a3, (uint64_t)v15, a5, a7);
  if (v7)
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v19 = v16;
  v20 = v17;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(a6 + 40))(v22, v23, v19, v20, v24, a6);
  return sub_100005DE0(v19, v20);
}

uint64_t sub_1000BC0E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 32))(a1, a2, a3, a5);
  if (!v6)
  {
    v11 = result;
    v12 = v10;
    type metadata accessor for JSONDecoder(0);
    v13 = default argument 2 of static JSONDecoder.decodeClean<A>(_:from:userInfo:)();
    static JSONDecoder.decodeClean<A>(_:from:userInfo:)(a4, v11, v12, v13, a4, a6);
    swift_bridgeObjectRelease(v13);
    return sub_100005DE0(v11, v12);
  }
  return result;
}

void sub_1000BC19C()
{
  uint64_t v0;
  _BYTE v1[40];

  sub_1000BDF04(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_1000BC1F0()
{
  uint64_t v0;
  Swift::String v1;
  void *object;
  Swift::String v3;
  uint64_t v4;
  _BYTE v6[32];
  uint64_t v7;
  unint64_t v8;
  _OWORD v9[7];

  sub_100005D2C((_OWORD *)(v0 - 72), v9);
  v7 = 0x65766C6F7365722ELL;
  v8 = 0xEA00000000002864;
  sub_100005D5C((uint64_t)v9, (uint64_t)v6);
  v1._countAndFlagsBits = String.init<A>(describing:)(v6, (char *)&type metadata for Any + 8);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v4 = v7;
  sub_100005D3C(v9);
  return v4;
}

unint64_t sub_1000BC2EC()
{
  SEL v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  Swift::String v7;
  _TtC14softposreaderd12RemoteReader *object;
  SEL v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  Swift::String v16;

  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)0xE000000000000000, v0, v1, v2, v3, v4, v5, v6);
  v7._countAndFlagsBits = Settings.description.getter();
  object = (_TtC14softposreaderd12RemoteReader *)v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object, v9, v10, v11, v12, v13, v14, v15);
  v16._countAndFlagsBits = 125;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  return 0xD000000000000012;
}

uint64_t sub_1000BC380(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *v11;
  uint64_t v12;
  void (*v13)(_BYTE *, uint64_t, uint64_t, uint64_t);
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  char v18;
  char v19;
  _BYTE v21[24];
  void *v22;
  uint64_t v23;
  char v24;

  v2 = v1;
  v4 = type metadata accessor for BackendSetting(0);
  __chkstk_darwin(v4);
  v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = OBJC_IVAR____TtC9SPREngine5Depot_components;
  *(_QWORD *)(v2 + v7) = sub_1000E8DF0((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock) = 0;
  sub_100039EC8(a1, v2 + OBJC_IVAR____TtC9SPREngine5Depot_settings);
  v8 = type metadata accessor for Settings(0);
  v9 = a1 + *(int *)(v8 + 24);
  if (*(unsigned __int8 *)(v9 + 16) >= 2u && *(_OWORD *)v9 >= 2uLL)
  {
    v22 = sub_1000BD108;
    v23 = 0;
    v10 = 1;
    v24 = 1;
    swift_beginAccess(v2 + OBJC_IVAR____TtC9SPREngine5Depot_components, v21, 33, 0);
    sub_1000E9298((uint64_t)&v22, 0xD00000000000001ALL, 0x800000010016DE10);
    v11 = sub_1000BD06C;
  }
  else
  {
    v22 = sub_1000BDD44;
    v23 = 0;
    v10 = 2;
    v24 = 2;
    swift_beginAccess(v2 + OBJC_IVAR____TtC9SPREngine5Depot_components, v21, 33, 0);
    sub_1000E9298((uint64_t)&v22, 0xD00000000000001ALL, 0x800000010016DE10);
    v11 = sub_1000BDCB4;
  }
  v22 = v11;
  v23 = 0;
  v24 = v10;
  sub_1000E9298((uint64_t)&v22, 0xD000000000000019, 0x800000010016DE30);
  swift_endAccess(v21);
  v12 = type metadata accessor for URL(0);
  v13 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v13(v6, 11, 11, v12);
  sub_1001178E4(a1, (uint64_t)v6);
  v15 = v14;
  sub_100070F10((uint64_t)v6, type metadata accessor for BackendSetting);
  if ((v15 & 1) != 0)
  {
    v22 = sub_1000BCFD4;
    v23 = 0;
    v16 = 1;
  }
  else
  {
    v22 = sub_1000BDC24;
    v23 = 0;
    v16 = 2;
  }
  v24 = v16;
  swift_beginAccess(v2 + OBJC_IVAR____TtC9SPREngine5Depot_components, v21, 33, 0);
  sub_1000E9298((uint64_t)&v22, 0xD00000000000001BLL, 0x800000010016DE50);
  swift_endAccess(v21);
  v17 = a1 + *(int *)(v8 + 20);
  v13(v6, 11, 11, v12);
  sub_1001178E4(v17, (uint64_t)v6);
  LOBYTE(v17) = v18;
  sub_100070F10((uint64_t)v6, type metadata accessor for BackendSetting);
  if ((v17 & 1) != 0)
  {
    v22 = sub_1000BCF44;
    v23 = 0;
    v19 = 1;
  }
  else
  {
    v22 = sub_1000BDB94;
    v23 = 0;
    v19 = 2;
  }
  v24 = v19;
  swift_beginAccess(v2 + OBJC_IVAR____TtC9SPREngine5Depot_components, v21, 33, 0);
  sub_1000E9298((uint64_t)&v22, 0xD00000000000001ALL, 0x800000010016DE70);
  swift_endAccess(v21);
  v22 = sub_1000BDAF8;
  v23 = 0;
  v24 = 2;
  swift_beginAccess(v2 + OBJC_IVAR____TtC9SPREngine5Depot_components, v21, 33, 0);
  sub_1000E9298((uint64_t)&v22, 0xD000000000000010, 0x800000010016DE90);
  v22 = sub_1000BDA6C;
  v23 = 0;
  v24 = 2;
  sub_1000E9298((uint64_t)&v22, 0xD000000000000015, 0x800000010016DEB0);
  v22 = sub_1000BDA48;
  v23 = 0;
  v24 = 2;
  sub_1000E9298((uint64_t)&v22, 0xD000000000000010, 0x800000010016DED0);
  v22 = sub_1000BD9D0;
  v23 = 0;
  v24 = 2;
  sub_1000E9298((uint64_t)&v22, 0x6E41726564616552, 0xEF73636974796C61);
  v22 = sub_1000BD9AC;
  v23 = 0;
  v24 = 2;
  sub_1000E9298((uint64_t)&v22, 0xD000000000000011, 0x800000010016DEF0);
  v22 = sub_1000BD988;
  v23 = 0;
  v24 = 2;
  sub_1000E9298((uint64_t)&v22, 0xD000000000000012, 0x800000010016DF10);
  v22 = sub_1000BD8F8;
  v23 = 0;
  v24 = 2;
  sub_1000E9298((uint64_t)&v22, 0xD00000000000001ALL, 0x800000010016DF30);
  v22 = sub_1000BD85C;
  v23 = 0;
  v24 = 2;
  sub_1000E9298((uint64_t)&v22, 0xD000000000000022, 0x800000010016DF50);
  v22 = sub_1000BCEB4;
  v23 = 0;
  v24 = 1;
  sub_1000E9298((uint64_t)&v22, 0x7065654B656D6954, 0xEA00000000007265);
  v22 = sub_1000BD7CC;
  v23 = 0;
  v24 = 2;
  sub_1000E9298((uint64_t)&v22, 0xD000000000000010, 0x800000010016DF80);
  v22 = sub_1000BD73C;
  v23 = 0;
  v24 = 2;
  sub_1000E9298((uint64_t)&v22, 0xD000000000000015, 0x800000010016DFA0);
  v22 = sub_1000BD6AC;
  v23 = 0;
  v24 = 2;
  sub_1000E9298((uint64_t)&v22, 0xD00000000000001CLL, 0x800000010016DFC0);
  v22 = sub_1000BCDE0;
  v23 = 0;
  v24 = 1;
  sub_1000E9298((uint64_t)&v22, 0xD000000000000012, 0x800000010016DFE0);
  v22 = sub_1000BCD48;
  v23 = 0;
  v24 = 1;
  sub_1000E9298((uint64_t)&v22, 0xD000000000000019, 0x800000010016E000);
  v22 = sub_1000BD618;
  v23 = 0;
  v24 = 2;
  sub_1000E9298((uint64_t)&v22, 0xD000000000000013, 0x800000010016E020);
  v22 = sub_1000BCCA4;
  v23 = 0;
  v24 = 1;
  sub_1000E9298((uint64_t)&v22, 0xD000000000000015, 0x800000010016E040);
  v22 = sub_1000BD574;
  v23 = 0;
  v24 = 2;
  sub_1000E9298((uint64_t)&v22, 0x6174614465726F43, 0xEF726567616E614DLL);
  v22 = sub_1000BD4D8;
  v23 = 0;
  v24 = 2;
  sub_1000E9298((uint64_t)&v22, 0xD00000000000001BLL, 0x800000010016E060);
  v22 = sub_1000BD448;
  v23 = 0;
  v24 = 2;
  sub_1000E9298((uint64_t)&v22, 0xD000000000000026, 0x800000010016E080);
  v22 = sub_1000BD3B8;
  v23 = 0;
  v24 = 2;
  sub_1000E9298((uint64_t)&v22, 0xD00000000000001ELL, 0x800000010016E0B0);
  v22 = sub_1000BD328;
  v23 = 0;
  v24 = 2;
  sub_1000E9298((uint64_t)&v22, 0xD00000000000001FLL, 0x800000010016E0D0);
  v22 = sub_1000BD298;
  v23 = 0;
  v24 = 2;
  sub_1000E9298((uint64_t)&v22, 0xD00000000000001ALL, 0x800000010016E0F0);
  v22 = sub_1000BD24C;
  v23 = 0;
  v24 = 2;
  sub_1000E9298((uint64_t)&v22, 0x6553657275636553, 0xED00006563697672);
  v22 = sub_1000BD228;
  v23 = 0;
  v24 = 2;
  sub_1000E9298((uint64_t)&v22, 0xD000000000000015, 0x800000010016E110);
  v22 = sub_1000BD198;
  v23 = 0;
  v24 = 2;
  sub_1000E9298((uint64_t)&v22, 0xD00000000000001FLL, 0x800000010016E130);
  swift_endAccess(v21);
  sub_100070F10(a1, type metadata accessor for Settings);
  return v2;
}

void sub_1000BCB7C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;

  v3 = a1 + OBJC_IVAR____TtC9SPREngine5Depot_settings;
  v4 = *(_BYTE *)(v3 + *(int *)(type metadata accessor for Settings(0) + 28));
  v5 = type metadata accessor for SecureService();
  v6 = swift_allocObject(v5, 25, 7);
  *(_QWORD *)(v6 + 16) = 0;
  if (qword_1001AD080 != -1)
    swift_once(&qword_1001AD080, sub_10009B1D4);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_100003A14(v7, (uint64_t)qword_1001B0F90);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "SecureService.init()", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  *(_BYTE *)(v6 + 24) = v4;
  *a2 = v6;
}

uint64_t sub_1000BCCA4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  _UNKNOWN **v8;

  v3 = type metadata accessor for SecureElement();
  swift_allocObject(v3, 33, 7);
  result = sub_100145218();
  if (!v1)
  {
    v7 = v3;
    v8 = &off_1001A11A8;
    *(_QWORD *)&v6 = result;
    a1[3] = sub_100003A2C(&qword_1001AF6B8);
    v5 = swift_allocObject(&unk_10019DA98, 56, 7);
    *a1 = v5;
    return sub_10001A674(&v6, v5 + 16);
  }
  return result;
}

uint64_t sub_1000BCD48@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  uint64_t v6;
  _UNKNOWN **v7;

  v2 = type metadata accessor for DefaultManagedDictionary();
  swift_allocObject(v2, 40, 7);
  v6 = v2;
  v7 = &off_10019D700;
  *(_QWORD *)&v5 = sub_1000B6B68();
  a1[3] = sub_100003A2C(&qword_1001AF6B0);
  v3 = swift_allocObject(&unk_10019DAE8, 56, 7);
  *a1 = v3;
  return sub_10001A674(&v5, v3 + 16);
}

uint64_t sub_1000BCDE0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  _UNKNOWN **v9;

  v2 = type metadata accessor for SystemInfo();
  v3 = swift_allocObject(v2, 40, 7);
  if (qword_1001AD060 != -1)
    swift_once(&qword_1001AD060, sub_10007CD38);
  v4 = qword_1001B4D60;
  *(_OWORD *)(v3 + 16) = xmmword_1001B4D50;
  *(_QWORD *)(v3 + 32) = v4;
  v8 = v2;
  v9 = &off_10019F8A0;
  *(_QWORD *)&v7 = v3;
  a1[3] = sub_100003A2C(&qword_1001AF6C8);
  v5 = swift_allocObject(&unk_10019DB10, 56, 7);
  *a1 = v5;
  return sub_10001A674(&v7, v5 + 16);
}

uint64_t sub_1000BCEB4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  _UNKNOWN **v6;

  v5 = type metadata accessor for DefaultTimeKeeper();
  v6 = &off_10019AC08;
  *(_QWORD *)&v4 = swift_allocObject(v5, 16, 7);
  a1[3] = sub_100003A2C(&qword_1001B1C90);
  v2 = swift_allocObject(&unk_10019DBB0, 56, 7);
  *a1 = v2;
  return sub_10001A674(&v4, v2 + 16);
}

uint64_t sub_1000BCF44@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  _UNKNOWN **v6;

  v5 = type metadata accessor for MPOCOfflineMonitorBackend();
  v6 = &off_1001A0470;
  *(_QWORD *)&v4 = swift_allocObject(v5, 16, 7);
  a1[3] = sub_100003A2C(&qword_1001B1C60);
  v2 = swift_allocObject(&unk_10019D980, 56, 7);
  *a1 = v2;
  return sub_10001A674(&v4, v2 + 16);
}

uint64_t sub_1000BCFD4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  uint64_t v6;
  _UNKNOWN **v7;

  v2 = type metadata accessor for OfflineConfiguratorBackend();
  swift_allocObject(v2, 24, 7);
  v6 = v2;
  v7 = &off_10019B070;
  *(_QWORD *)&v5 = sub_10003A794();
  a1[3] = sub_100003A2C(&qword_1001B07C8);
  v3 = swift_allocObject(&unk_10019D958, 56, 7);
  *a1 = v3;
  return sub_10001A674(&v5, v3 + 16);
}

uint64_t sub_1000BD06C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;
  _UNKNOWN **v8;

  v2 = type metadata accessor for MPOCVolatileMonitorLogger();
  v3 = swift_allocObject(v2, 24, 7);
  *(_QWORD *)(v3 + 16) = _swiftEmptyArrayStorage;
  v7 = v2;
  v8 = &off_10019A328;
  *(_QWORD *)&v6 = v3;
  a1[3] = sub_100003A2C(&qword_1001B1C50);
  v4 = swift_allocObject(&unk_10019D908, 56, 7);
  *a1 = v4;
  return sub_10001A674(&v6, v4 + 16);
}

uint64_t sub_1000BD108@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  _UNKNOWN **v6;

  v5 = type metadata accessor for VolatilePersistenceFactory();
  v6 = &off_10019F908;
  *(_QWORD *)&v4 = swift_allocObject(v5, 16, 7);
  a1[3] = sub_100003A2C(&qword_1001B1C58);
  v2 = swift_allocObject(&unk_10019D930, 56, 7);
  *a1 = v2;
  return sub_10001A674(&v4, v2 + 16);
}

_QWORD *sub_1000BD198@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v4;
  _QWORD *result;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _UNKNOWN **v10;

  v4 = (_QWORD *)swift_retain(a1);
  result = sub_100135050(v4);
  if (!v2)
  {
    v6 = result;
    v9 = type metadata accessor for StoreAndForwardSelector();
    v10 = &off_1001A07D8;
    *(_QWORD *)&v8 = v6;
    a2[3] = sub_100003A2C(&qword_1001B07D8);
    v7 = swift_allocObject(&unk_10019D9A8, 56, 7);
    *a2 = v7;
    return (_QWORD *)sub_10001A674(&v8, v7 + 16);
  }
  return result;
}

uint64_t sub_1000BD228@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000BD9F4(a1, (uint64_t (*)(uint64_t))sub_1000B45B8, (uint64_t (*)(_QWORD))type metadata accessor for PayAppletProfileCache, a2);
}

void sub_1000BD24C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  sub_1000BCB7C(a1, &v4);
  if (!v2)
  {
    a2[3] = type metadata accessor for SecureService();
    *a2 = v4;
  }
}

uint64_t sub_1000BD298@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _UNKNOWN **v10;

  v4 = swift_retain(a1);
  result = sub_1000F8B8C(v4);
  if (!v2)
  {
    v6 = result;
    v9 = type metadata accessor for MPOCDefaultMonitorManager();
    v10 = &off_10019F1B0;
    *(_QWORD *)&v8 = v6;
    a2[3] = sub_100003A2C(&qword_1001AF6C0);
    v7 = swift_allocObject(&unk_10019D9D0, 56, 7);
    *a2 = v7;
    return sub_10001A674(&v8, v7 + 16);
  }
  return result;
}

_QWORD *sub_1000BD328@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _UNKNOWN **v10;

  v4 = swift_retain(a1);
  result = sub_10011424C(v4);
  if (!v2)
  {
    v6 = result;
    v9 = type metadata accessor for ComponentAuditorFactory();
    v10 = &off_10019F850;
    *(_QWORD *)&v8 = v6;
    a2[3] = sub_100003A2C(&qword_1001B1C68);
    v7 = swift_allocObject(&unk_10019D9F8, 56, 7);
    *a2 = v7;
    return (_QWORD *)sub_10001A674(&v8, v7 + 16);
  }
  return result;
}

uint64_t sub_1000BD3B8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _UNKNOWN **v10;

  v4 = swift_retain(a1);
  result = sub_1000BBC40(v4);
  if (!v2)
  {
    v6 = result;
    v9 = type metadata accessor for MPOCDefaultAttestationManager();
    v10 = &off_10019D8B8;
    *(_QWORD *)&v8 = v6;
    a2[3] = sub_100003A2C(&qword_1001B07D0);
    v7 = swift_allocObject(&unk_10019DA20, 56, 7);
    *a2 = v7;
    return sub_10001A674(&v8, v7 + 16);
  }
  return result;
}

id sub_1000BD448@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  id result;
  id v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _UNKNOWN **v10;

  v4 = swift_retain(a1);
  result = sub_1000B98E4(v4);
  if (!v2)
  {
    v6 = result;
    v9 = type metadata accessor for MPOCDefaultAttestationOfflineVerifier();
    v10 = &off_10019D898;
    *(_QWORD *)&v8 = v6;
    a2[3] = sub_100003A2C(&qword_1001B1C70);
    v7 = swift_allocObject(&unk_10019DA48, 56, 7);
    *a2 = v7;
    return (id)sub_10001A674(&v8, v7 + 16);
  }
  return result;
}

uint64_t sub_1000BD4D8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _UNKNOWN **v11;

  v5 = (_QWORD *)swift_retain(a1);
  v6 = sub_100072274(v5);
  result = swift_release(a1);
  if (!v2)
  {
    v10 = type metadata accessor for MPOCDefaultAttestationData();
    v11 = &off_10019C838;
    *(_QWORD *)&v9 = v6;
    a2[3] = sub_100003A2C(&qword_1001B1C78);
    v8 = swift_allocObject(&unk_10019DA70, 56, 7);
    *a2 = v8;
    return sub_10001A674(&v9, v8 + 16);
  }
  return result;
}

uint64_t sub_1000BD574@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[5];

  swift_retain(a1);
  sub_1000DEDE4();
  if (v2)
    return swift_release(a1);
  v6 = type metadata accessor for CoreDataManager();
  swift_allocObject(v6, 64, 7);
  v7 = sub_100117DCC(v8);
  result = swift_release(a1);
  a2[3] = v6;
  *a2 = v7;
  return result;
}

char *sub_1000BD618@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  char *result;
  uint64_t v6;
  __int128 v7[2];

  type metadata accessor for Environment(0);
  result = sub_10007AAFC(a1, (char **)v7);
  if (!v2)
  {
    a2[3] = sub_100003A2C(&qword_1001B1C80);
    v6 = swift_allocObject(&unk_10019DAC0, 56, 7);
    *a2 = v6;
    return (char *)sub_10001A674(v7, v6 + 16);
  }
  return result;
}

uint64_t sub_1000BD6AC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _UNKNOWN **v10;

  v4 = swift_retain(a1);
  result = sub_10003F9FC(v4);
  if (!v2)
  {
    v6 = result;
    v9 = type metadata accessor for SecureChannelFactory();
    v10 = &off_10019B508;
    *(_QWORD *)&v8 = v6;
    a2[3] = sub_100003A2C(&qword_1001B1C88);
    v7 = swift_allocObject(&unk_10019DB38, 56, 7);
    *a2 = v7;
    return sub_10001A674(&v8, v7 + 16);
  }
  return result;
}

_QWORD *sub_1000BD73C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _UNKNOWN **v10;

  v4 = swift_retain(a1);
  result = sub_10011DD50(v4);
  if (!v2)
  {
    v6 = result;
    v9 = type metadata accessor for SignerFactory();
    v10 = &off_10019FF20;
    *(_QWORD *)&v8 = v6;
    a2[3] = sub_100003A2C(&qword_1001B07E0);
    v7 = swift_allocObject(&unk_10019DB60, 56, 7);
    *a2 = v7;
    return (_QWORD *)sub_10001A674(&v8, v7 + 16);
  }
  return result;
}

uint64_t sub_1000BD7CC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _UNKNOWN **v10;

  v4 = swift_retain(a1);
  result = sub_100054AA0(v4);
  if (!v2)
  {
    v6 = result;
    v9 = type metadata accessor for DefaultSecureTimeKeeper();
    v10 = &off_10019C0A0;
    *(_QWORD *)&v8 = v6;
    a2[3] = sub_100003A2C(&qword_1001AF2C8);
    v7 = swift_allocObject(&unk_10019DB88, 56, 7);
    *a2 = v7;
    return sub_10001A674(&v8, v7 + 16);
  }
  return result;
}

uint64_t sub_1000BD85C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _UNKNOWN **v11;

  v5 = swift_retain(a1);
  v6 = sub_1000317B0(v5);
  result = swift_release(a1);
  if (!v2)
  {
    v10 = type metadata accessor for CertificateVerifierFactory();
    v11 = &off_10019AB80;
    *(_QWORD *)&v9 = v6;
    a2[3] = sub_100003A2C(&qword_1001B1C98);
    v8 = swift_allocObject(&unk_10019DBD8, 56, 7);
    *a2 = v8;
    return sub_10001A674(&v9, v8 + 16);
  }
  return result;
}

uint64_t sub_1000BD8F8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _UNKNOWN **v10;

  v4 = swift_retain(a1);
  result = sub_100019C44(v4);
  if (!v2)
  {
    v6 = result;
    v9 = type metadata accessor for CertificateManager();
    v10 = &off_100199940;
    *(_QWORD *)&v8 = v6;
    a2[3] = sub_100003A2C(&qword_1001AF6A0);
    v7 = swift_allocObject(&unk_10019DC00, 56, 7);
    *a2 = v7;
    return sub_10001A674(&v8, v7 + 16);
  }
  return result;
}

uint64_t sub_1000BD988@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000BDA90(a1, sub_100025824, type metadata accessor for ProvisionAnalytics, a2);
}

uint64_t sub_1000BD9AC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000BDA90(a1, sub_100056010, type metadata accessor for SecurityAnalytics, a2);
}

uint64_t sub_1000BD9D0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000BD9F4(a1, sub_10004D934, type metadata accessor for ReaderAnalytics, a2);
}

uint64_t sub_1000BD9F4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v8 = swift_retain(a1);
  result = a2(v8);
  if (!v4)
  {
    v10 = result;
    result = a3(0);
    a4[3] = result;
    *a4 = v10;
  }
  return result;
}

uint64_t sub_1000BDA48@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000BDA90(a1, sub_10003E830, type metadata accessor for MonitorAnalytics, a2);
}

uint64_t sub_1000BDA6C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000BDA90(a1, sub_10003CBC0, type metadata accessor for ConfiguratorAnalytics, a2);
}

uint64_t sub_1000BDA90@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v9 = swift_retain(a1);
  v10 = a2(v9);
  result = swift_release(a1);
  if (!v4)
  {
    result = a3(0);
    a4[3] = result;
    *a4 = v10;
  }
  return result;
}

uint64_t sub_1000BDAF8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _UNKNOWN **v11;

  v5 = swift_retain(a1);
  v6 = sub_100039D18(v5);
  result = swift_release(a1);
  if (!v2)
  {
    v10 = type metadata accessor for CALogger();
    v11 = &off_10019AEF0;
    *(_QWORD *)&v9 = v6;
    a2[3] = sub_100003A2C(&qword_1001B1CA0);
    v8 = swift_allocObject(&unk_10019DC28, 56, 7);
    *a2 = v8;
    return sub_10001A674(&v9, v8 + 16);
  }
  return result;
}

uint64_t sub_1000BDB94@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _UNKNOWN **v10;

  v4 = swift_retain(a1);
  result = sub_1000D0FE8(v4);
  if (!v2)
  {
    v6 = result;
    v9 = type metadata accessor for MPOCDefaultMonitorBackend(0);
    v10 = &off_10019E6F8;
    *(_QWORD *)&v8 = v6;
    a2[3] = sub_100003A2C(&qword_1001B1C60);
    v7 = swift_allocObject(&unk_10019D980, 56, 7);
    *a2 = v7;
    return sub_10001A674(&v8, v7 + 16);
  }
  return result;
}

uint64_t sub_1000BDC24@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _UNKNOWN **v10;

  v4 = swift_retain(a1);
  result = sub_100094980(v4);
  if (!v2)
  {
    v6 = result;
    v9 = type metadata accessor for ConfiguratorBackend(0);
    v10 = &off_10019CCE0;
    *(_QWORD *)&v8 = v6;
    a2[3] = sub_100003A2C(&qword_1001B07C8);
    v7 = swift_allocObject(&unk_10019D958, 56, 7);
    *a2 = v7;
    return sub_10001A674(&v8, v7 + 16);
  }
  return result;
}

_QWORD *sub_1000BDCB4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _UNKNOWN **v10;

  v4 = swift_retain(a1);
  result = sub_10005DB2C(v4);
  if (!v2)
  {
    v6 = result;
    v9 = type metadata accessor for MPOCDefaultMonitorLogger();
    v10 = &off_10019C4D8;
    *(_QWORD *)&v8 = v6;
    a2[3] = sub_100003A2C(&qword_1001B1C50);
    v7 = swift_allocObject(&unk_10019D908, 56, 7);
    *a2 = v7;
    return (_QWORD *)sub_10001A674(&v8, v7 + 16);
  }
  return result;
}

uint64_t sub_1000BDD44@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _UNKNOWN **v10;

  v4 = swift_retain(a1);
  result = sub_10012B504(v4);
  if (!v2)
  {
    v6 = result;
    v9 = type metadata accessor for PersistenceFactory();
    v10 = &off_1001A05C8;
    *(_QWORD *)&v8 = v6;
    a2[3] = sub_100003A2C(&qword_1001B1C58);
    v7 = swift_allocObject(&unk_10019D930, 56, 7);
    *a2 = v7;
    return sub_10001A674(&v8, v7 + 16);
  }
  return result;
}

uint64_t sub_1000BDDD4()
{
  uint64_t v0;
  SEL v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;

  sub_100070F10(v0 + OBJC_IVAR____TtC9SPREngine5Depot_settings, type metadata accessor for Settings);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components), v1, v2, v3, v4, v5, v6, v7);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000BDE1C()
{
  return type metadata accessor for Depot(0);
}

uint64_t type metadata accessor for Depot(uint64_t a1)
{
  uint64_t result;

  result = qword_1001B1B30;
  if (!qword_1001B1B30)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Depot);
  return result;
}

uint64_t sub_1000BDE60(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for Settings(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[2] = "\b";
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

unint64_t sub_1000BDEE4()
{
  return sub_1000BC2EC();
}

uint64_t sub_1000BDF04(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for Depot.Element(a2, a1);
  return a2;
}

uint64_t sub_1000BDF38()
{
  uint64_t v0;

  sub_100005D3C((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t destroy for Depot.Element(uint64_t result)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(result + 32);
  if (v1 >= 3)
    v1 = *(_DWORD *)result + 3;
  if (v1 == 2 || v1 == 1)
    return swift_release(*(_QWORD *)(result + 8));
  if (!v1)
    return sub_100005D3C((_QWORD *)result);
  return result;
}

uint64_t initializeWithCopy for Depot.Element(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v7;

  v3 = *(unsigned __int8 *)(a2 + 32);
  if (v3 >= 3)
    v3 = *(_DWORD *)a2 + 3;
  if (v3 == 2)
  {
    v5 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v5;
    v6 = 2;
LABEL_9:
    *(_BYTE *)(a1 + 32) = v6;
    swift_retain(v5);
    return a1;
  }
  if (v3 == 1)
  {
    v5 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v5;
    v6 = 1;
    goto LABEL_9;
  }
  if (v3)
  {
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(_BYTE *)(a1 + 32) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for Depot.Element(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 32);
    if (v4 >= 3)
      v4 = *(_DWORD *)a1 + 3;
    if (v4 == 2 || v4 == 1)
    {
      swift_release(*(_QWORD *)(a1 + 8));
    }
    else if (!v4)
    {
      sub_100005D3C((_QWORD *)a1);
    }
    v5 = *((unsigned __int8 *)a2 + 32);
    if (v5 >= 3)
      v5 = *(_DWORD *)a2 + 3;
    if (v5 == 2)
    {
      v7 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v7;
      v8 = 2;
    }
    else
    {
      if (v5 != 1)
      {
        if (v5)
        {
          v10 = *a2;
          v11 = a2[1];
          *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
          *(_OWORD *)a1 = v10;
          *(_OWORD *)(a1 + 16) = v11;
        }
        else
        {
          v6 = *((_QWORD *)a2 + 3);
          *(_QWORD *)(a1 + 24) = v6;
          (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1, a2);
          *(_BYTE *)(a1 + 32) = 0;
        }
        return a1;
      }
      v9 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v9;
      v8 = 1;
    }
    *(_BYTE *)(a1 + 32) = v8;
    swift_retain();
  }
  return a1;
}

uint64_t assignWithTake for Depot.Element(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 32);
    if (v4 >= 3)
      v4 = *(_DWORD *)a1 + 3;
    if (v4 == 2 || v4 == 1)
    {
      swift_release(*(_QWORD *)(a1 + 8));
    }
    else if (!v4)
    {
      sub_100005D3C((_QWORD *)a1);
    }
    v5 = *(unsigned __int8 *)(a2 + 32);
    if (v5 >= 3)
      v5 = *(_DWORD *)a2 + 3;
    if (v5 == 2 || v5 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    else
    {
      if (!v5)
      {
        v6 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v6;
        *(_BYTE *)(a1 + 32) = 0;
        return a1;
      }
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      LOBYTE(v5) = *(_BYTE *)(a2 + 32);
    }
    *(_BYTE *)(a1 + 32) = v5;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for Depot.Element(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 >= 4)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Depot.Element(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000BE274(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 32);
  if (result >= 3)
    return (*(_DWORD *)a1 + 3);
  return result;
}

uint64_t sub_1000BE290(uint64_t result, unsigned int a2)
{
  if (a2 > 2)
  {
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Depot.Element()
{
  return &type metadata for Depot.Element;
}

void sub_1000BE314()
{
  sub_1000257E0();
  UnsignedInteger.clearBit(_:)(0);
  byte_1001B4D88 = 2;
}

void sub_1000BE364()
{
  sub_1000257E0();
  UnsignedInteger.clearBit(_:)(0);
  byte_1001B4D89 = 4;
}

void sub_1000BE3B4()
{
  sub_1000257E0();
  UnsignedInteger.clearBit(_:)(0);
  byte_1001B4D8A = 8;
}

void sub_1000BE404()
{
  sub_1000257E0();
  UnsignedInteger.clearBit(_:)(0);
  byte_1001B4D8B = 16;
}

void sub_1000BE454()
{
  sub_1000257E0();
  UnsignedInteger.clearBit(_:)(0);
  byte_1001B4D8C = 64;
}

void sub_1000BE4A4()
{
  sub_1000257E0();
  UnsignedInteger.clearBit(_:)(0);
  byte_1001B4D8D = 0x80;
}

void sub_1000BE4F4()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  char v5;

  if (qword_1001AD0E0 != -1)
    swift_once(&qword_1001AD0E0, sub_1000BE314);
  v0 = byte_1001B4D88;
  if (qword_1001AD0E8 != -1)
    swift_once(&qword_1001AD0E8, sub_1000BE364);
  v1 = byte_1001B4D89;
  if (qword_1001AD0F0 != -1)
    swift_once(&qword_1001AD0F0, sub_1000BE3B4);
  v2 = byte_1001B4D8A;
  if (qword_1001AD100 != -1)
    swift_once(&qword_1001AD100, sub_1000BE454);
  v3 = byte_1001B4D8C;
  if (qword_1001AD108 != -1)
    swift_once(&qword_1001AD108, sub_1000BE4A4);
  v4 = byte_1001B4D8D;
  sub_1000257E0();
  UnsignedInteger.clearBit(_:)(0);
  v5 = 0;
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if (v0)
  {
    UnsignedInteger.clearBit(_:)(0);
    v5 = v0;
  }
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if ((v5 & v1) != v1)
  {
    UnsignedInteger.clearBit(_:)(0);
    v5 |= v1;
  }
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if ((v5 & v2) != v2)
  {
    UnsignedInteger.clearBit(_:)(0);
    v5 |= v2;
  }
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if ((v5 & v3) != v3)
  {
    UnsignedInteger.clearBit(_:)(0);
    v5 |= v3;
  }
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if ((v5 & v4) != v4)
  {
    UnsignedInteger.clearBit(_:)(0);
    v5 |= v4;
  }
  byte_1001B4D8E = v5;
}

void sub_1000BE860()
{
  sub_1000257E0();
  UnsignedInteger.clearBit(_:)(0);
  byte_1001B4D8F = 0;
}

void sub_1000BE8AC()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  char v6;

  if (qword_1001AD0E0 != -1)
    swift_once(&qword_1001AD0E0, sub_1000BE314);
  v0 = byte_1001B4D88;
  if (qword_1001AD0E8 != -1)
    swift_once(&qword_1001AD0E8, sub_1000BE364);
  v1 = byte_1001B4D89;
  if (qword_1001AD0F0 != -1)
    swift_once(&qword_1001AD0F0, sub_1000BE3B4);
  v2 = byte_1001B4D8A;
  if (qword_1001AD0F8 != -1)
    swift_once(&qword_1001AD0F8, sub_1000BE404);
  v3 = byte_1001B4D8B;
  if (qword_1001AD100 != -1)
    swift_once(&qword_1001AD100, sub_1000BE454);
  v4 = byte_1001B4D8C;
  if (qword_1001AD108 != -1)
    swift_once(&qword_1001AD108, sub_1000BE4A4);
  v5 = byte_1001B4D8D;
  sub_1000257E0();
  UnsignedInteger.clearBit(_:)(0);
  v6 = 0;
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if (v0)
  {
    UnsignedInteger.clearBit(_:)(0);
    v6 = v0;
  }
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if ((v6 & v1) != v1)
  {
    UnsignedInteger.clearBit(_:)(0);
    v6 |= v1;
  }
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if ((v6 & v2) != v2)
  {
    UnsignedInteger.clearBit(_:)(0);
    v6 |= v2;
  }
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if ((v6 & v3) != v3)
  {
    UnsignedInteger.clearBit(_:)(0);
    v6 |= v3;
  }
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if ((v6 & v4) != v4)
  {
    UnsignedInteger.clearBit(_:)(0);
    v6 |= v4;
  }
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if ((v6 & v5) != v5)
  {
    UnsignedInteger.clearBit(_:)(0);
    v6 |= v5;
  }
  byte_1001B4D90 = v6;
}

void sub_1000BECB0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }
}

uint64_t sub_1000BECF8(unsigned __int8 a1, uint64_t a2)
{
  unsigned __int8 v2;

  if ((a2 & 0xFF000000000000) != 0)
    v2 = a1;
  else
    v2 = 0;
  return v2 | (((a2 & 0xFF000000000000) == 0) << 8);
}

uint64_t sub_1000BEDF8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 0;
  v5 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v5 = 11;
  v6 = String.index(before:)(v5 | (v2 << 16), a1, a2);
  return String.subscript.getter(v6, a1, a2);
}

id sub_1000BEE70(uint64_t a1, uint64_t a2, Class isa, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  _TtC14softposreaderd12RemoteReader *object;
  NSString v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  id result;
  _QWORD v24[4];

  v24[2] = a4;
  v24[1] = a2;
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  object = (_TtC14softposreaderd12RemoteReader *)URL.path(percentEncoded:)(0)._object;
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object, v15, v16, v17, v18, v19, v20, v21);
  if (isa)
  {
    type metadata accessor for FileAttributeKey(0);
    sub_100005F1C(&qword_1001ADC60, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_10015DC2C);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  objc_msgSend(v12, "createFileAtPath:contents:attributes:", v14, 0, isa);

  sub_1000C22F8();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  v22 = v24[3];
  result = sub_1000C2EE8((uint64_t)v11);
  if (!v22)
    __asm { BR              X11 }
  return result;
}

uint64_t sub_1000BF1C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B1CA8);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B1CA8);
  if (qword_1001AD140 != -1)
    swift_once(&qword_1001AD140, sub_1000CC2E4);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4DB0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1000BF258(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  char v22;

  v19 = a4;
  v20 = a5;
  v9 = sub_100003A2C(&qword_1001B1E40);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_100005EF8(a1, v14);
  v15 = sub_1000C6E4C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for KCSOTAResponseParser.JSONObject.CodingKeys, &type metadata for KCSOTAResponseParser.JSONObject.CodingKeys, v15, v14, v13);
  LOBYTE(v21[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, v21, v9);
  if (!v5)
  {
    v21[0] = v19;
    v21[1] = v20;
    v22 = 1;
    v16 = sub_100003A2C(&qword_1001B1E20);
    v17 = sub_1000C804C(&qword_1001B1E50, &qword_1001B1E20, (uint64_t)&protocol witness table for Int, (uint64_t)&protocol conformance descriptor for <> Range<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v22, v9, v16, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_1000BF3C8()
{
  _BYTE *v0;

  if (*v0)
    return 0x65676E6172;
  else
    return 0x654B676E69646F63;
}

uint64_t sub_1000BF404@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000C6E90(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000BF428(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C6E4C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000BF450(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C6E4C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000BF478@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_1000C6F84(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1000BF4A4(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1000BF258(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1000BF4C0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000BF4F8 + 4 * byte_100160A70[a1]))(0xD000000000000012, 0x800000010016E290);
}

uint64_t sub_1000BF52C(_QWORD *a1)
{
  _OWORD *v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[32];
  _BYTE v21[32];

  v3 = v1;
  v5 = sub_100003A2C(&qword_1001B1EA0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100005EF8(a1, v9);
  v11 = sub_1000C7FB4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for KCSOTAResponseParser.InternalKCSOTAResponse.CodingKeys, &type metadata for KCSOTAResponseParser.InternalKCSOTAResponse.CodingKeys, v11, v9, v10);
  sub_100024374((uint64_t)v3, (uint64_t)v21, &qword_1001B1EA8);
  sub_100024374((uint64_t)v21, (uint64_t)&v18, &qword_1001B1EA8);
  v17 = 0;
  v12 = sub_1000C5334();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v18, &v17, v5, &type metadata for KCSOTAResponseParser.JSONObject, v12);
  if (!v2)
  {
    v13 = v3[3];
    v18 = v3[2];
    v19 = v13;
    v17 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v17, v5, &type metadata for KCSOTAResponseParser.JSONObject, v12);
    v14 = v3[5];
    v18 = v3[4];
    v19 = v14;
    v17 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v17, v5, &type metadata for KCSOTAResponseParser.JSONObject, v12);
    sub_100024374((uint64_t)(v3 + 6), (uint64_t)v20, &qword_1001B1EA8);
    sub_100024374((uint64_t)v20, (uint64_t)&v18, &qword_1001B1EA8);
    v17 = 3;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v18, &v17, v5, &type metadata for KCSOTAResponseParser.JSONObject, v12);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000BF728()
{
  unsigned __int8 *v0;

  return sub_1000BF4C0(*v0);
}

uint64_t sub_1000BF730@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000C7168(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000BF754(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1000BF760(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C7FB4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000BF788(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C7FB4();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1000BF7B0@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[2];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  sub_1000C72FC(a1, v9);
  if (!v2)
  {
    v5 = v13;
    a2[4] = v12;
    a2[5] = v5;
    v6 = v15;
    a2[6] = v14;
    a2[7] = v6;
    v7 = v9[1];
    *a2 = v9[0];
    a2[1] = v7;
    result = *(double *)&v10;
    v8 = v11;
    a2[2] = v10;
    a2[3] = v8;
  }
  return result;
}

uint64_t sub_1000BF800(_QWORD *a1)
{
  return sub_1000BF52C(a1);
}

uint64_t sub_1000BF848()
{
  _BYTE *v0;

  if (*v0)
    return 0x666E6F4374736F68;
  else
    return 0xD000000000000013;
}

uint64_t sub_1000BF88C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000C7714(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000BF8B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C780C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000BF8D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C780C();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1000BF900@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1000BFBBC(a1, &qword_1001B1E58, (uint64_t (*)(void))sub_1000C780C, (uint64_t)&type metadata for KCSOTAResponseParser.InternalProfile.CodingKeys, a2);
}

uint64_t sub_1000BF92C(_QWORD *a1)
{
  return sub_1000BF97C(a1, &qword_1001B1EC0, (uint64_t (*)(void))sub_1000C780C, (uint64_t)&type metadata for KCSOTAResponseParser.InternalProfile.CodingKeys);
}

uint64_t sub_1000BF97C(_QWORD *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v8;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[2];
  _BYTE v22[32];
  char v23;

  v8 = v4;
  v10 = sub_100003A2C(a2);
  v20 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  sub_100005EF8(a1, v13);
  v15 = a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)(a4, a4, v15, v13, v14);
  v16 = v8[1];
  v21[0] = *v8;
  v21[1] = v16;
  v23 = 0;
  v17 = sub_1000C5334();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v23, v10, &type metadata for KCSOTAResponseParser.JSONObject, v17);
  if (!v5)
  {
    sub_100024374((uint64_t)(v8 + 2), (uint64_t)v22, &qword_1001B1EA8);
    sub_100024374((uint64_t)v22, (uint64_t)v21, &qword_1001B1EA8);
    v23 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, &v23, v10, &type metadata for KCSOTAResponseParser.JSONObject, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v12, v10);
}

uint64_t sub_1000BFAF0()
{
  _BYTE *v0;

  if (*v0)
    return 0x747069726373;
  else
    return 25705;
}

uint64_t sub_1000BFB1C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000C7894(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000BFB40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C7F70();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000BFB68(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C7F70();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1000BFB90@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1000BFBBC(a1, &qword_1001B1E80, (uint64_t (*)(void))sub_1000C7F70, (uint64_t)&type metadata for KCSOTAResponseParser.InternalKernelConfig.CodingKeys, a2);
}

double sub_1000BFBBC@<D0>(_QWORD *a1@<X0>, uint64_t *a2@<X3>, uint64_t (*a3)(void)@<X4>, uint64_t a4@<X5>, _OWORD *a5@<X8>)
{
  uint64_t v5;
  double result;
  __int128 v8;
  __int128 v9;
  _OWORD v10[2];
  __int128 v11;
  __int128 v12;

  sub_1000C7964(a1, a2, a3, a4, v10);
  if (!v5)
  {
    v8 = v10[1];
    *a5 = v10[0];
    a5[1] = v8;
    result = *(double *)&v11;
    v9 = v12;
    a5[2] = v11;
    a5[3] = v9;
  }
  return result;
}

uint64_t sub_1000BFC08(_QWORD *a1)
{
  return sub_1000BF97C(a1, &qword_1001B1EB0, (uint64_t (*)(void))sub_1000C7F70, (uint64_t)&type metadata for KCSOTAResponseParser.InternalKernelConfig.CodingKeys);
}

void sub_1000BFC58(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = v2;
  v12 = sub_100003A2C(&qword_1001B1E18);
  __chkstk_darwin(v12);
  if (qword_1001AD128 != -1)
    swift_once(&qword_1001AD128, sub_1000BF1C8);
  v6 = type metadata accessor for Logger(0);
  sub_100003A14(v6, (uint64_t)qword_1001B1CA8);
  v7 = swift_bridgeObjectRetain_n(a2, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v15 = v11;
    *(_DWORD *)v10 = 136315138;
    swift_bridgeObjectRetain();
    v13 = sub_1000056EC(a1, a2, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "parsing %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  __asm { BR              X11 }
}

void sub_1000C08F4()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  v2 = v0[1];
  if ((v2 & 0x2000000000000000) == 0)
  {
    v3 = v1 & 0xFFFFFFFFFFFFLL;
    if ((v1 & 0xFFFFFFFFFFFFLL) != 0)
      goto LABEL_5;
    __break(1u);
  }
  v3 = HIBYTE(v2) & 0xF;
  if (!v3)
  {
    __break(1u);
    return;
  }
LABEL_5:
  v4 = 7;
  if (((v2 >> 60) & ((v1 & 0x800000000000000) == 0)) != 0)
    v4 = 11;
  v5 = String.index(before:)(v4 | (v3 << 16), v1, v2);
  String.remove(at:)(v5);
}

void sub_1000C0948()
{
  __asm { BR              X12 }
}

void sub_1000C0994()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _TtC14softposreaderd12RemoteReader *v4;
  SEL v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _OWORD v49[2];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _QWORD v56[37];

  sub_1000BFC58(0x6C6576654C706F74, 0xEC0000004E4F534ALL);
  if (!v0)
  {
    v4 = (_TtC14softposreaderd12RemoteReader *)v3;
    sub_1000C0EC4(v3, (uint64_t)v49);
    swift_bridgeObjectRelease(v4, v5, v6, v7, v8, v9, v10, v11);
    v43 = v50;
    v44 = v51;
    v45 = v52;
    v46 = v53;
    v47 = v54;
    v48 = v55;
    v41 = v49[0];
    v42 = v49[1];
    v12 = sub_1000C1194(v50, *((unint64_t *)&v50 + 1));
    v14 = v13;
    v16 = v15;
    v18 = v17;
    v40 = sub_1000C14A4(v41, *((unint64_t *)&v41 + 1), v42, *((uint64_t *)&v42 + 1));
    *(_QWORD *)(v2 - 72) = v19;
    v39 = v12;
    swift_bridgeObjectRetain();
    sub_1000C1DD4(v45, *((unint64_t *)&v45 + 1), v46, *((uint64_t *)&v46 + 1), v56);
    swift_bridgeObjectRelease(*((_TtC14softposreaderd12RemoteReader **)&v45 + 1), v20, v21, v22, v23, v24, v25, v26);
    sub_1000C1DD4(v47, *((unint64_t *)&v47 + 1), v48, *((uint64_t *)&v48 + 1), (_QWORD *)(v2 - 216));
    v27 = *(_QWORD *)(v2 - 216);
    v28 = *(_QWORD *)(v2 - 208);
    v29 = *(_QWORD *)(v2 - 200);
    v30 = *(_QWORD *)(v2 - 192);
    v37 = *(_QWORD *)(v2 - 176);
    v38 = *(_QWORD *)(v2 - 184);
    v35 = *(_QWORD *)(v2 - 160);
    v36 = *(_QWORD *)(v2 - 168);
    sub_1000C5444(&v41);
    sub_100024374((uint64_t)v56, v2 - 152, &qword_1001B0E18);
    v31 = *(_QWORD *)(v2 - 144);
    if (!v31)
    {
      __break(1u);
      JUMPOUT(0x1000C0BE8);
    }
    v32 = *(_QWORD *)(v2 - 152);
    v33 = *(_QWORD *)(v2 - 72);
    *(_QWORD *)v1 = v40;
    *(_QWORD *)(v1 + 8) = v33;
    *(_QWORD *)(v1 + 16) = v39;
    *(_QWORD *)(v1 + 24) = v14;
    *(_QWORD *)(v1 + 32) = v16;
    *(_QWORD *)(v1 + 40) = v18;
    *(_QWORD *)(v1 + 48) = v32;
    *(_QWORD *)(v1 + 56) = v31;
    v34 = *(_OWORD *)(v2 - 120);
    *(_OWORD *)(v1 + 64) = *(_OWORD *)(v2 - 136);
    *(_OWORD *)(v1 + 80) = v34;
    *(_OWORD *)(v1 + 96) = *(_OWORD *)(v2 - 104);
    *(_QWORD *)(v1 + 112) = v27;
    *(_QWORD *)(v1 + 120) = v28;
    *(_QWORD *)(v1 + 128) = v29;
    *(_QWORD *)(v1 + 136) = v30;
    *(_QWORD *)(v1 + 144) = v38;
    *(_QWORD *)(v1 + 152) = v37;
    *(_QWORD *)(v1 + 160) = v36;
    *(_QWORD *)(v1 + 168) = v35;
  }
}

uint64_t sub_1000C0BF8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  _TtC14softposreaderd12RemoteReader *v13;
  uint64_t *v14;
  objc_class *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _TtC14softposreaderd12RemoteReader *v21;
  uint64_t v22;
  _TtC14softposreaderd12RemoteReader *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  const char *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  _TtC14softposreaderd12RemoteReader *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _TtC14softposreaderd12RemoteReader *v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  uint64_t result;
  uint64_t v55;
  uint64_t (*v56)(void);
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _TtC14softposreaderd12RemoteReader *v63;

  v7 = v4;
  v10 = type metadata accessor for JSONEncoder.OutputFormatting(0);
  v60 = *(_QWORD *)(v10 - 8);
  v61 = v10;
  __chkstk_darwin(v10);
  v12 = *(_QWORD *)(a1 + 16);
  v58 = a4;
  v59 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v12)
  {
    v55 = v4;
    v56 = a2;
    v57 = a3;
    v63 = &_swiftEmptyArrayStorage;
    sub_100091CF0(0, v12, 0);
    v13 = v63;
    v14 = (uint64_t *)(a1 + 56);
    do
    {
      v15 = (objc_class *)*(v14 - 3);
      v16 = *(v14 - 2);
      v17 = *(v14 - 1);
      v62 = *v14;
      v63 = v13;
      v19 = *(_QWORD *)&v13->instance[8];
      v18 = *(_QWORD *)&v13->instance[16];
      v20 = v19 + 1;
      swift_bridgeObjectRetain_n(v16, 2);
      if (v19 >= v18 >> 1)
      {
        sub_100091CF0(v18 > 1, v19 + 1, 1);
        v13 = v63;
      }
      v14 += 4;
      *(_QWORD *)&v13->instance[8] = v20;
      v21 = &v13[v19];
      *(_QWORD *)&v21->instance[24] = v15;
      *(_QWORD *)&v21->instance[32] = v16;
      v21[1].super.isa = v15;
      *(_QWORD *)v21[1].instance = v16;
      v22 = v62;
      *(_QWORD *)&v21[1].instance[8] = v17;
      *(_QWORD *)&v21[1].instance[16] = v22;
      --v12;
    }
    while (v12);
    a2 = v56;
    a3 = v57;
    v7 = v55;
    goto LABEL_8;
  }
  v13 = &_swiftEmptyArrayStorage;
  v20 = *(_QWORD *)&_swiftEmptyArrayStorage.instance[8];
  if (v20)
  {
LABEL_8:
    sub_100003A2C(&qword_1001B1DD8);
    v23 = (_TtC14softposreaderd12RemoteReader *)static _DictionaryStorage.allocate(capacity:)(v20);
    goto LABEL_9;
  }
  v23 = (_TtC14softposreaderd12RemoteReader *)&_swiftEmptyDictionarySingleton;
LABEL_9:
  v63 = v23;
  v24 = swift_bridgeObjectRetain();
  sub_1000C38C8(v24, (const char *)1, &v63, v25, v26, v27, v28, v29);
  if (v7)
  {
    result = swift_unexpectedError(v7, "Swift/Dictionary.swift", 22, 1, 489);
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease(v13, v30, v31, v32, v33, v34, v35, v36);
    v37 = v63;
    type metadata accessor for JSONEncoder(0);
    v63 = v37;
    v38 = sub_100003A2C(&qword_1001B1DE0);
    v39 = sub_1000C52C8();
    v40 = (uint64_t)v59;
    default argument 1 of static JSONEncoder.encodeClean<A>(_:outputFormatting:)();
    static JSONEncoder.encodeClean<A>(_:outputFormatting:)((uint64_t)&v63, v40, v38, v39);
    v42 = v41;
    v44 = v43;
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v40, v61);
    swift_release(v37);
    type metadata accessor for JSONDecoder(0);
    v45 = a2();
    v46 = (_TtC14softposreaderd12RemoteReader *)default argument 2 of static JSONDecoder.decodeClean<A>(_:from:userInfo:)();
    static JSONDecoder.decodeClean<A>(_:from:userInfo:)(a3, v42, v44, (uint64_t)v46, a3, v45);
    swift_bridgeObjectRelease(v46, v47, v48, v49, v50, v51, v52, v53);
    return sub_100005DE0(v42, v44);
  }
  return result;
}

uint64_t sub_1000C0EC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  _TtC14softposreaderd12RemoteReader *v11;
  uint64_t *v12;
  objc_class *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _TtC14softposreaderd12RemoteReader *v18;
  uint64_t v19;
  unint64_t v20;
  _TtC14softposreaderd12RemoteReader *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  const char *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  _TtC14softposreaderd12RemoteReader *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _TtC14softposreaderd12RemoteReader *v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  uint64_t result;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _TtC14softposreaderd12RemoteReader *v58;

  v3 = v2;
  v6 = type metadata accessor for JSONEncoder.OutputFormatting(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    v52 = v2;
    v53 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    v54 = v7;
    v55 = v6;
    v56 = a2;
    v58 = &_swiftEmptyArrayStorage;
    sub_100091CF0(0, v10, 0);
    v11 = v58;
    v12 = (uint64_t *)(a1 + 56);
    do
    {
      v13 = (objc_class *)*(v12 - 3);
      v14 = *(v12 - 2);
      v15 = *(v12 - 1);
      v57 = *v12;
      v58 = v11;
      v17 = *(_QWORD *)&v11->instance[8];
      v16 = *(_QWORD *)&v11->instance[16];
      swift_bridgeObjectRetain_n(v14, 2);
      if (v17 >= v16 >> 1)
      {
        sub_100091CF0(v16 > 1, v17 + 1, 1);
        v11 = v58;
      }
      v12 += 4;
      *(_QWORD *)&v11->instance[8] = v17 + 1;
      v18 = &v11[v17];
      *(_QWORD *)&v18->instance[24] = v13;
      *(_QWORD *)&v18->instance[32] = v14;
      v18[1].super.isa = v13;
      *(_QWORD *)v18[1].instance = v14;
      v19 = v57;
      *(_QWORD *)&v18[1].instance[8] = v15;
      *(_QWORD *)&v18[1].instance[16] = v19;
      --v10;
    }
    while (v10);
    v20 = v17 + 1;
    v6 = v55;
    v9 = v53;
    v7 = v54;
    v3 = v52;
    goto LABEL_8;
  }
  v11 = &_swiftEmptyArrayStorage;
  v20 = *(_QWORD *)&_swiftEmptyArrayStorage.instance[8];
  if (v20)
  {
LABEL_8:
    sub_100003A2C(&qword_1001B1DD8);
    v21 = (_TtC14softposreaderd12RemoteReader *)static _DictionaryStorage.allocate(capacity:)(v20);
    goto LABEL_9;
  }
  v21 = (_TtC14softposreaderd12RemoteReader *)&_swiftEmptyDictionarySingleton;
LABEL_9:
  v58 = v21;
  v22 = swift_bridgeObjectRetain();
  sub_1000C38C8(v22, (const char *)1, &v58, v23, v24, v25, v26, v27);
  if (v3)
  {
    result = swift_unexpectedError(v3, "Swift/Dictionary.swift", 22, 1, 489);
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease(v11, v28, v29, v30, v31, v32, v33, v34);
    v35 = v58;
    type metadata accessor for JSONEncoder(0);
    v58 = v35;
    v36 = sub_100003A2C(&qword_1001B1DE0);
    v37 = sub_1000C52C8();
    default argument 1 of static JSONEncoder.encodeClean<A>(_:outputFormatting:)();
    static JSONEncoder.encodeClean<A>(_:outputFormatting:)((uint64_t)&v58, (uint64_t)v9, v36, v37);
    v39 = v38;
    v41 = v40;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    swift_release(v35);
    type metadata accessor for JSONDecoder(0);
    v42 = sub_1000C54D0();
    v43 = (_TtC14softposreaderd12RemoteReader *)default argument 2 of static JSONDecoder.decodeClean<A>(_:from:userInfo:)();
    static JSONDecoder.decodeClean<A>(_:from:userInfo:)((uint64_t)&type metadata for KCSOTAResponseParser.InternalKCSOTAResponse, v39, v41, (uint64_t)v43, (uint64_t)&type metadata for KCSOTAResponseParser.InternalKCSOTAResponse, v42);
    swift_bridgeObjectRelease(v43, v44, v45, v46, v47, v48, v49, v50);
    return sub_100005DE0(v39, v41);
  }
  return result;
}

uint64_t sub_1000C1194(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  _TtC14softposreaderd12RemoteReader *v8;
  SEL v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  SEL v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  _TtC14softposreaderd12RemoteReader *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _TtC14softposreaderd12RemoteReader *v48;
  uint64_t v49[8];
  uint64_t v50;
  uint64_t v51;

  sub_1000BFC58(a1, a2);
  if (!v3)
  {
    v8 = (_TtC14softposreaderd12RemoteReader *)v7;
    sub_1000C0BF8(v7, (uint64_t (*)(void))sub_1000C5400, (uint64_t)&type metadata for KCSOTAResponseParser.InternalKernelConfig, (uint64_t)v49);
    swift_bridgeObjectRelease(v8, v9, v10, v11, v12, v13, v14, v15);
    v16 = v49[1];
    v47 = v49[4];
    v48 = (_TtC14softposreaderd12RemoteReader *)v49[5];
    v45 = v49[7];
    v46 = v49[6];
    v17 = Data.subdata(in:)(v49[2], v49[3], *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
    v19 = v18;
    sub_1000C42FC(v17, v18);
    v4 = v20;
    v22 = v21;
    sub_100005DE0(v17, v19);
    v44 = (_TtC14softposreaderd12RemoteReader *)v16;
    if (qword_1001AD128 != -1)
      swift_once(&qword_1001AD128, sub_1000BF1C8);
    v23 = type metadata accessor for Logger(0);
    sub_100003A14(v23, (uint64_t)qword_1001B1CA8);
    swift_bridgeObjectRetain_n(a2, 2);
    v24 = swift_bridgeObjectRetain_n(v22, 2);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc(22, -1);
      v43 = swift_slowAlloc(64, -1);
      v49[0] = v43;
      *(_DWORD *)v27 = 136315394;
      swift_bridgeObjectRetain();
      v50 = sub_1000056EC(a1, a2, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v27 + 4, v27 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      *(_WORD *)(v27 + 12) = 2080;
      swift_bridgeObjectRetain();
      v50 = sub_1000056EC(v4, v22, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v27 + 14, v27 + 22);
      swift_bridgeObjectRelease_n(v22, 3);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "decoding %s: %s", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy(v43, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v27, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v22, 2);
      swift_bridgeObjectRelease_n(a2, 2);
    }
    sub_1000C14A4(v47, (unint64_t)v48, v46, v45);
    swift_bridgeObjectRelease(v44, v29, v30, v31, v32, v33, v34, v35);
    swift_bridgeObjectRelease(v48, v36, v37, v38, v39, v40, v41, v42);
  }
  return v4;
}

uint64_t sub_1000C14A4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = v5;
  if (!a2)
    return 0;
  v7 = v4;
  if (qword_1001AD128 != -1)
    swift_once(&qword_1001AD128, sub_1000BF1C8);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_100003A14(v12, (uint64_t)qword_1001B1CA8);
  v14 = swift_bridgeObjectRetain_n(a2, 2);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v27 = a3;
    v18 = swift_slowAlloc(32, -1);
    v29 = v18;
    *(_DWORD *)v17 = 136315138;
    v13 = (uint64_t)(v17 + 12);
    swift_bridgeObjectRetain();
    v28 = sub_1000056EC(a1, a2, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "decoding %s", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    v19 = v18;
    a3 = v27;
    swift_slowDealloc(v19, -1, -1);
    v20 = v17;
    v6 = v5;
    swift_slowDealloc(v20, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v21 = Data._Representation.subscript.getter(a3, a4, *(_QWORD *)(v7 + 32), *(_QWORD *)(v7 + 40));
  v23 = v22;
  sub_1000C4C50(v21, v22);
  if (!v6)
  {
    if (v25 < v24)
    {
      __break(1u);
    }
    else if (!__OFSUB__(v25, v24))
    {
      __asm { BR              X11 }
    }
    __break(1u);
    JUMPOUT(0x1000C1924);
  }
  sub_100005DE0(v21, v23);
  return v13;
}

uint64_t sub_1000C1944(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v26[4];
  uint64_t v27;
  uint64_t v28;

  v6 = v5;
  if (!a2)
    return 1;
  if (qword_1001AD128 != -1)
    swift_once(&qword_1001AD128, sub_1000BF1C8);
  v10 = type metadata accessor for Logger(0);
  sub_100003A14(v10, (uint64_t)qword_1001B1CA8);
  v11 = swift_bridgeObjectRetain_n(a2, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v24 = a4;
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v26[0] = v15;
    *(_DWORD *)v14 = 136315138;
    swift_bridgeObjectRetain();
    v27 = sub_1000056EC(a1, a2, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "decoding %s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    v16 = v15;
    v6 = v5;
    swift_slowDealloc(v16, -1, -1);
    v17 = v14;
    a4 = v24;
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v18 = Data._Representation.subscript.getter(a3, a4, *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40));
  v20 = v19;
  sub_1000C4C50(v18, v19);
  if (!v6)
  {
    if (v22 < v21)
    {
      __break(1u);
    }
    else if (!__OFSUB__(v22, v21))
    {
      __asm { BR              X11 }
    }
    __break(1u);
    JUMPOUT(0x1000C1DBCLL);
  }
  return sub_100005DE0(v18, v20);
}

uint64_t sub_1000C1DD4@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27[8];
  uint64_t v28;
  uint64_t v29;

  v7 = v6;
  if (a2)
  {
    v9 = v5;
    v25 = result;
    if (qword_1001AD128 != -1)
      swift_once(&qword_1001AD128, sub_1000BF1C8);
    v11 = type metadata accessor for Logger(0);
    sub_100003A14(v11, (uint64_t)qword_1001B1CA8);
    v12 = swift_bridgeObjectRetain_n(a2, 2);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = a4;
      v16 = swift_slowAlloc(32, -1);
      v27[0] = v16;
      *(_DWORD *)v15 = 136315138;
      swift_bridgeObjectRetain();
      v28 = sub_1000056EC(v25, a2, v27);
      v7 = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v15 + 4, v15 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "decoding %s", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      v17 = v16;
      a4 = v24;
      swift_slowDealloc(v17, -1, -1);
      v18 = v15;
      v9 = v5;
      swift_slowDealloc(v18, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    v19 = Data._Representation.subscript.getter(a3, a4, *(_QWORD *)(v9 + 32), *(_QWORD *)(v9 + 40));
    v21 = v20;
    sub_1000C4C50(v19, v20);
    if (!v7)
    {
      if (v23 < v22)
      {
        __break(1u);
      }
      else if (!__OFSUB__(v23, v22))
      {
        __asm { BR              X11 }
      }
      __break(1u);
      JUMPOUT(0x1000C2294);
    }
    return sub_100005DE0(v19, v21);
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    a5[3] = 0;
    a5[4] = 0;
    a5[5] = 0;
    a5[6] = 0;
    a5[7] = 0;
  }
  return result;
}

uint64_t sub_1000C22AC()
{
  uint64_t v0;

  sub_100005DE0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_100005DE0(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for KCSOTAResponseParser()
{
  return objc_opt_self(_TtC9SPREngine20KCSOTAResponseParser);
}

unint64_t sub_1000C22F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001B1DB8;
  if (!qword_1001B1DB8)
  {
    v1 = objc_opt_self(NSFileHandle);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001B1DB8);
  }
  return result;
}

uint64_t sub_1000C2334(uint64_t a1, _TtC14softposreaderd12RemoteReader *a2, uint64_t a3, unint64_t a4)
{
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  _TtC14softposreaderd12RemoteReader *v15;
  Swift::String v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  Swift::String v24;
  uint64_t v25;
  _TtC14softposreaderd12RemoteReader *v26;
  _TtC14softposreaderd12RemoteReader *v27;
  SEL v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;

  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)0xE000000000000000, v8, v9, v10, v11, v12, v13, v14);
  v15 = (_TtC14softposreaderd12RemoteReader *)0xE400000000000000;
  swift_bridgeObjectRetain();
  v16._countAndFlagsBits = a1;
  v16._object = a2;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(a2, v17, v18, v19, v20, v21, v22, v23);
  v24._countAndFlagsBits = 0x747069726373202CLL;
  v24._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v24);
  if (a4 >> 60 == 15)
  {
    v25 = 1819047278;
  }
  else
  {
    sub_1000C2420(a3, a4);
    v15 = v26;
  }
  v27 = v15;
  String.append(_:)(*(Swift::String *)&v25);
  swift_bridgeObjectRelease(v15, v28, v29, v30, v31, v32, v33, v34);
  return 540697705;
}

void sub_1000C2420(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1000C245C()
{
  Swift::String v0;
  void *object;
  Swift::String v2;
  uint64_t v4;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 0x3E736574796220;
  v2._object = (void *)0xE700000000000000;
  String.append(_:)(v2);
  return v4;
}

uint64_t sub_1000C24FC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  Swift::String v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::String v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Swift::String v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;

  _StringGuts.grow(_:)(59);
  v8._countAndFlagsBits = 0x5F7373617079627BLL;
  v8._object = (void *)0xED0000203A646961;
  String.append(_:)(v8);
  if (a1)
  {
    v9 = Array.description.getter(a1, &type metadata for String);
    v11 = v10;
  }
  else
  {
    v11 = 0xE400000000000000;
    v9 = 1819047278;
  }
  v12 = v11;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease(v11);
  v13._object = (void *)0x800000010016E250;
  v13._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v13);
  if (a2)
  {
    v14 = Array.description.getter(a2, &type metadata for String);
    v16 = v15;
  }
  else
  {
    v14 = 1819047278;
    v16 = 0xE400000000000000;
  }
  v17 = v16;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease(v16);
  v18._countAndFlagsBits = 0x72746E756F63202CLL;
  v18._object = (void *)0xEF203A65646F4379;
  String.append(_:)(v18);
  if (a4)
  {
    v19 = a4;
  }
  else
  {
    a3 = 1819047278;
    v19 = (void *)0xE400000000000000;
  }
  swift_bridgeObjectRetain(a4);
  v20._countAndFlagsBits = a3;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(v19);
  v21._countAndFlagsBits = 125;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  return 0;
}

uint64_t sub_1000C268C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  v22 = a5;
  v23 = a3;
  v9 = sub_100003A2C(&qword_1001B1EB8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_100005EF8(a1, v14);
  v15 = sub_1000C7F2C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for KCSOTAResponse.HostConfiguration.CodingKeys, &type metadata for KCSOTAResponse.HostConfiguration.CodingKeys, v15, v14, v13);
  v25 = a2;
  v24 = 0;
  v16 = sub_100003A2C((uint64_t *)&unk_1001AE460);
  v17 = sub_1000C804C(&qword_1001ADA10, (uint64_t *)&unk_1001AE460, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v25, &v24, v9, v16, v17);
  if (!v5)
  {
    v18 = a4;
    v19 = v22;
    v25 = v23;
    v24 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v25, &v24, v9, v16, v17);
    LOBYTE(v25) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v25, v9);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_1000C2834()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x4374726F70707573;
  if (*v0 != 1)
    v1 = 0x437972746E756F63;
  if (*v0)
    return v1;
  else
    return 0x6941737361707962;
}

uint64_t sub_1000C28A8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000C7B6C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000C28CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C7F2C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000C28F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C7F2C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000C291C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_1000C7D08(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1000C2948(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1000C268C(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1000C2964()
{
  uint64_t v0;

  return sub_1000C24FC(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

BOOL sub_1000C2970(uint64_t a1, uint64_t a2)
{
  return sub_1000C3C98(*(_QWORD **)a1, *(_QWORD **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD **)a2, *(_QWORD **)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

unint64_t sub_1000C298C()
{
  uint64_t v0;
  SEL v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  _TtC14softposreaderd12RemoteReader *v8;
  uint64_t v9;
  _TtC14softposreaderd12RemoteReader *v10;
  _TtC14softposreaderd12RemoteReader *v11;
  SEL v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  Swift::String v19;
  Swift::String v20;
  _TtC14softposreaderd12RemoteReader *object;
  SEL v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  _BYTE v30[32];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;

  v31 = 0;
  v32 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)0xE000000000000000, v1, v2, v3, v4, v5, v6, v7);
  sub_100024374(v0 + 32, (uint64_t)v30, &qword_1001B1E30);
  sub_100024374((uint64_t)v30, (uint64_t)&v31, &qword_1001B1E30);
  if (v31 == 1)
  {
    v8 = (_TtC14softposreaderd12RemoteReader *)0xE400000000000000;
    v9 = 1819047278;
  }
  else
  {
    v9 = sub_1000C24FC(v31, v32, v33, v34);
    v8 = v10;
  }
  v11 = v8;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease(v8, v12, v13, v14, v15, v16, v17, v18);
  v19._countAndFlagsBits = 0xD000000000000017;
  v19._object = (void *)0x800000010016E230;
  String.append(_:)(v19);
  v20._countAndFlagsBits = sub_1000C2334(*(_QWORD *)v0, *(_TtC14softposreaderd12RemoteReader **)(v0 + 8), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  object = (_TtC14softposreaderd12RemoteReader *)v20._object;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(object, v22, v23, v24, v25, v26, v27, v28);
  return 0xD000000000000013;
}

unint64_t sub_1000C2A98()
{
  return sub_1000C298C();
}

BOOL sub_1000C2AD0(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  _OWORD v8[4];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = a1[3];
  v7[2] = a1[2];
  v7[3] = v3;
  v4 = a2[1];
  v8[0] = *a2;
  v8[1] = v4;
  v5 = a2[3];
  v8[2] = a2[2];
  v8[3] = v5;
  return sub_1000C3D58((uint64_t *)v7, v8);
}

uint64_t sub_1000C2B18()
{
  uint64_t v0;
  unint64_t v1;
  Swift::String v2;
  Swift::String v3;
  SEL v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  Swift::String v11;
  Swift::String v12;
  _TtC14softposreaderd12RemoteReader *object;
  SEL v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  Swift::String v21;
  __int128 v22;
  __int128 v23;
  Swift::String v24;
  _TtC14softposreaderd12RemoteReader *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  Swift::String v33;
  _TtC14softposreaderd12RemoteReader *v34;
  _TtC14softposreaderd12RemoteReader *v35;
  Swift::String v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  _BYTE v45[64];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[16];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _OWORD v56[4];
  __int128 v57;
  _BYTE v58[16];
  _QWORD v59[2];

  v1 = 1819047278;
  *(_QWORD *)&v56[0] = 0;
  *((_QWORD *)&v56[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(95);
  v2._object = (void *)0x800000010016E190;
  v2._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v2);
  sub_100024374(v0, (uint64_t)v50, &qword_1001B0E20);
  sub_100024374((uint64_t)v50, (uint64_t)&v55, &qword_1001B0E20);
  if (*((_QWORD *)&v55 + 1) >> 60 != 15)
  {
    v57 = v55;
    *(_QWORD *)&v56[0] = 60;
    *((_QWORD *)&v56[0] + 1) = 0xE100000000000000;
    sub_1000C5554((uint64_t)&v57, (uint64_t)v58);
    sub_1000C5554((uint64_t)v58, (uint64_t)v59);
    __asm { BR              X12 }
  }
  v3._countAndFlagsBits = 1819047278;
  v3._object = (void *)0xE400000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)0xE400000000000000, v4, v5, v6, v7, v8, v9, v10);
  v11._countAndFlagsBits = 0xD000000000000016;
  v11._object = (void *)0x800000010016E1B0;
  String.append(_:)(v11);
  v12._countAndFlagsBits = sub_1000C2334(*(_QWORD *)(v0 + 16), *(_TtC14softposreaderd12RemoteReader **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  object = (_TtC14softposreaderd12RemoteReader *)v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(object, v14, v15, v16, v17, v18, v19, v20);
  v21._countAndFlagsBits = 0xD000000000000018;
  v21._object = (void *)0x800000010016E1D0;
  String.append(_:)(v21);
  v22 = *(_OWORD *)(v0 + 64);
  v46 = *(_OWORD *)(v0 + 48);
  v47 = v22;
  v23 = *(_OWORD *)(v0 + 96);
  v48 = *(_OWORD *)(v0 + 80);
  v49 = v23;
  v24._countAndFlagsBits = sub_1000C298C();
  v25 = (_TtC14softposreaderd12RemoteReader *)v24._object;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
  v33._countAndFlagsBits = 0xD000000000000015;
  v33._object = (void *)0x800000010016E1F0;
  String.append(_:)(v33);
  sub_100024374(v0 + 112, (uint64_t)v45, &qword_1001B0E18);
  sub_100024374((uint64_t)v45, (uint64_t)v56, &qword_1001B0E18);
  if (*((_QWORD *)&v56[0] + 1))
  {
    v51 = v56[0];
    v52 = v56[1];
    v53 = v56[2];
    v54 = v56[3];
    v1 = sub_1000C298C();
    v35 = v34;
  }
  else
  {
    v35 = (_TtC14softposreaderd12RemoteReader *)0xE400000000000000;
  }
  v36._countAndFlagsBits = v1;
  v36._object = v35;
  String.append(_:)(v36);
  swift_bridgeObjectRelease(v35, v37, v38, v39, v40, v41, v42, v43);
  return 0;
}

uint64_t sub_1000C2E00()
{
  return sub_1000C2B18();
}

BOOL sub_1000C2E58(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[11];
  _OWORD v14[11];

  v2 = a1[9];
  v13[8] = a1[8];
  v13[9] = v2;
  v13[10] = a1[10];
  v3 = a1[5];
  v13[4] = a1[4];
  v13[5] = v3;
  v4 = a1[7];
  v13[6] = a1[6];
  v13[7] = v4;
  v5 = a1[1];
  v13[0] = *a1;
  v13[1] = v5;
  v6 = a1[3];
  v13[2] = a1[2];
  v13[3] = v6;
  v7 = a2[9];
  v14[8] = a2[8];
  v14[9] = v7;
  v14[10] = a2[10];
  v8 = a2[5];
  v14[4] = a2[4];
  v14[5] = v8;
  v9 = a2[7];
  v14[6] = a2[6];
  v14[7] = v9;
  v10 = a2[1];
  v14[0] = *a2;
  v14[1] = v10;
  v11 = a2[3];
  v14[2] = a2[2];
  v14[3] = v11;
  return sub_1000C3FAC((uint64_t)v13, (uint64_t)v14);
}

id sub_1000C2EE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  id v10;
  id v11;
  uint64_t v12;
  id v14;

  v2 = v1;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  v5 = v4;
  v14 = 0;
  v6 = objc_msgSend((id)swift_getObjCClassFromMetadata(v2), "fileHandleForWritingToURL:error:", v4, &v14);

  v7 = v14;
  if (v6)
  {
    v8 = type metadata accessor for URL(0);
    v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
    v10 = v7;
    v9(a1, v8);
  }
  else
  {
    v11 = v14;
    _convertNSErrorToError(_:)(v7);

    swift_willThrow();
    v12 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
  }
  return v6;
}

id sub_1000C2FFC(void *a1)
{
  id v2;
  uint64_t v3;
  id v4;
  id v5;

  v5 = 0;
  if (objc_msgSend(a1, "closeAndReturnError:", &v5))
    return v5;
  v4 = v5;
  v2 = v5;
  v3 = _convertNSErrorToError(_:)(v4);

  swift_willThrow();
  return (id)swift_errorRelease(v3);
}

void sub_1000C30C8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _TtC14softposreaderd12RemoteReader *v22;
  _TtC14softposreaderd12RemoteReader *v23;
  unint64_t v24;
  uint64_t v25;
  const char *v26;
  _TtC14softposreaderd12RemoteReader *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  const char *v35;
  _TtC14softposreaderd12RemoteReader *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  const char *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  char v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  _TtC14softposreaderd12RemoteReader *v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  BOOL v65;
  _TtC14softposreaderd12RemoteReader *v66;
  uint64_t v67;
  char v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  uint64_t v76;
  SEL v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  unint64_t v84;
  unint64_t v85;
  const char *v86;
  const char *v87;
  void *v88;
  _TtC14softposreaderd12RemoteReader *v89;
  _TtC14softposreaderd12RemoteReader *v90;
  id v91;
  id v92;
  id v93;
  id v94;
  unint64_t v95;
  uint64_t v96;
  SEL v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  uint64_t v104;
  SEL v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  unint64_t v112;
  uint64_t v113;
  const char *v114;
  unint64_t v115;
  id v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  NSObject *v124;
  os_log_type_t v125;
  uint8_t *v126;
  unint64_t v127;
  uint64_t v128;
  _BYTE *v129;
  unint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  _TtC14softposreaderd12RemoteReader *v138;
  _QWORD v139[2];
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  _TtC14softposreaderd12RemoteReader *v143;
  unint64_t v144;

  v8 = v7;
  v15 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v131 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *a4;
  if (__OFSUB__(a3, *a4))
  {
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (a3 - *a4 < a1)
    a1 = a3 - *a4;
  v19 = v18 + a1;
  if (__OFADD__(v18, a1))
    goto LABEL_30;
  if (v19 < v18)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v144 = a7;
  v132 = a4;
  a6 = Data.subdata(in:)(v18, v19, a5, a6);
  a7 = v20;
  static String.Encoding.utf8.getter(a6);
  v21 = String.init(data:encoding:)(a6, a7, v17);
  if (!v22)
  {
LABEL_37:
    __break(1u);
    return;
  }
  v23 = v22;
  v135 = v21;
  v136 = (unint64_t)v22;
  v140 = 12124;
  v141 = 0xE200000000000000;
  v139[0] = 47;
  v139[1] = 0xE100000000000000;
  v24 = sub_1000095D0();
  v25 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v140, v139, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v24, v24, v24);
  v27 = (_TtC14softposreaderd12RemoteReader *)v26;
  swift_bridgeObjectRelease(v23, v26, v28, v29, v30, v31, v32, v33);
  v142 = v25;
  v143 = v27;
  swift_bridgeObjectRetain();
  v34 = sub_1000BEDF8(v25, (unint64_t)v27);
  v36 = (_TtC14softposreaderd12RemoteReader *)v35;
  swift_bridgeObjectRelease(v27, v35, v37, v38, v39, v40, v41, v42);
  if (v36)
  {
    if (v34 == 92 && v36 == (_TtC14softposreaderd12RemoteReader *)0xE100000000000000)
    {
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)0xE100000000000000, v43, v44, v45, v46, v47, v48, v49);
    }
    else
    {
      v50 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v36, 92, 0xE100000000000000, 0);
      swift_bridgeObjectRelease(v36, v51, v52, v53, v54, v55, v56, v57);
      if ((v50 & 1) == 0)
        goto LABEL_13;
    }
    sub_1000C08F4();
    swift_bridgeObjectRelease(v58, (SEL)v58, v59, v60, v61, v62, v63, v64);
    v65 = __OFSUB__(a1--, 1);
    if (v65)
    {
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
  }
LABEL_13:
  v67 = v142;
  v66 = v143;
  swift_bridgeObjectRetain();
  v68 = String.count.getter(v67, v66);
  swift_bridgeObjectRelease(v66, v69, v70, v71, v72, v73, v74, v75);
  if ((v68 & 3) == 0)
    goto LABEL_20;
  v133 = a6;
  v134 = v7;
  a6 = a7;
  swift_bridgeObjectRetain();
  v76 = String.count.getter(v67, v66);
  swift_bridgeObjectRelease(v66, v77, v78, v79, v80, v81, v82, v83);
  if (v76 <= 0)
    v84 = -(-v76 & 3);
  else
    v84 = v76 & 3;
  swift_bridgeObjectRetain();
  v85 = sub_1000C5198(v84, v67, (unint64_t)v66);
  v87 = v86;
  a7 = (unint64_t)v88;
  v90 = v89;
  swift_bridgeObjectRelease(v66, v86, v88, v89, v91, v92, v93, v94);
  sub_1000C3724(v84);
  v135 = v85;
  v136 = (unint64_t)v87;
  v137 = a7;
  v138 = v90;
  v140 = 47;
  v141 = 0xE100000000000000;
  v95 = sub_1000C5240();
  v96 = StringProtocol.components<A>(separatedBy:)(&v140, &type metadata for Substring, &type metadata for String, v95, v24);
  swift_bridgeObjectRelease(v90, v97, v98, v99, v100, v101, v102, v103);
  v104 = *(_QWORD *)(v96 + 16);
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v96, v105, v106, v107, v108, v109, v110, v111);
  v112 = v84 + v104 - 1;
  if (__OFADD__(v84, v104 - 1))
    goto LABEL_32;
  v65 = __OFSUB__(a1, v112);
  a1 -= v112;
  v8 = v134;
  if (v65)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  a7 = a6;
  v67 = v142;
  v66 = v143;
  a6 = v133;
LABEL_20:
  v113 = Data.init(base64Encoded:options:)(v67);
  v115 = (unint64_t)v114;
  swift_bridgeObjectRelease(v66, v114, v116, v117, v118, v119, v120, v121);
  if (v115 >> 60 != 15)
  {
    v135 = v113;
    v136 = v115;
    v130 = sub_1000C5284();
    NSFileHandle.write<A>(contentsOf:)(&v135, &type metadata for Data, v130);
    sub_100005DE0(a6, a7);
    sub_10000A9B0(v113, v115);
    if (v8)
      return;
    if (!__OFADD__(*v132, a1))
    {
      *v132 += a1;
      return;
    }
    goto LABEL_36;
  }
  if (qword_1001AD128 != -1)
LABEL_34:
    swift_once(&qword_1001AD128, sub_1000BF1C8);
  v122 = type metadata accessor for Logger(0);
  v123 = sub_100003A14(v122, (uint64_t)qword_1001B1CA8);
  v124 = Logger.logObject.getter(v123);
  v125 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v124, v125))
  {
    v126 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v126 = 0;
    _os_log_impl((void *)&_mh_execute_header, v124, v125, "non base64 string", v126, 2u);
    swift_slowDealloc(v126, -1, -1);
  }

  v127 = sub_1000C3560();
  v128 = swift_allocError(&type metadata for KCSOTAResponseParser.DecodingError, v127, 0, 0);
  *v129 = 2;
  swift_willThrow(v128);
  sub_100005DE0(a6, a7);
}

unint64_t sub_1000C3560()
{
  unint64_t result;

  result = qword_1001B1DC0;
  if (!qword_1001B1DC0)
  {
    result = swift_getWitnessTable(&unk_100160EAC, &type metadata for KCSOTAResponseParser.DecodingError);
    atomic_store(result, (unint64_t *)&qword_1001B1DC0);
  }
  return result;
}

void sub_1000C35A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x1000C36F0);
}

unint64_t sub_1000C3724(unint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  if (result)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v2 = v1[1];
      if ((v2 & 0x2000000000000000) != 0)
        v3 = HIBYTE(v2) & 0xF;
      else
        v3 = *v1 & 0xFFFFFFFFFFFFLL;
      v4 = 7;
      if (((v2 >> 60) & ((*v1 & 0x800000000000000) == 0)) != 0)
        v4 = 11;
      result = String.index(_:offsetBy:limitedBy:)(v4 | (v3 << 16), -(uint64_t)result, 15);
      if ((v5 & 1) != 0)
        goto LABEL_14;
      if (4 * v3 >= result >> 14)
        return String.removeSubrange(_:)();
    }
    __break(1u);
LABEL_14:
    __break(1u);
  }
  return result;
}

void sub_1000C37C0()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;

  v1 = *(_QWORD *)(v0 + 8);
  v2._countAndFlagsBits = 60;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  __asm { BR              X11 }
}

uint64_t sub_1000C3810()
{
  Swift::String v0;
  void *object;
  Swift::String v2;
  uint64_t v4;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 0x3E736574796220;
  v2._object = (void *)0xE700000000000000;
  String.append(_:)(v2);
  return v4;
}

void sub_1000C38B4(uint64_t *a1)
{
  sub_1001288E0(*a1, a1[1]);
}

void sub_1000C38C8(uint64_t a1, const char *a2, _QWORD *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v8;
  char v10;
  _QWORD *v11;
  _TtC14softposreaderd12RemoteReader *v12;
  uint64_t v13;
  _TtC14softposreaderd12RemoteReader *v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  SEL v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t *v43;
  _QWORD *v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  _TtC14softposreaderd12RemoteReader *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  _BOOL8 v59;
  uint64_t v60;
  char v61;
  char v62;
  _QWORD *v63;
  uint64_t *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  Swift::String v68;
  Swift::String v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t *v73;
  _TtC14softposreaderd12RemoteReader *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _TtC14softposreaderd12RemoteReader *v78;
  uint64_t v79;

  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  v10 = (char)a2;
  v11 = (_QWORD *)swift_bridgeObjectRetain();
  v12 = (_TtC14softposreaderd12RemoteReader *)v11[5];
  v15 = v11[6];
  v14 = (_TtC14softposreaderd12RemoteReader *)v11[7];
  v71 = v11[8];
  v72 = v11;
  v70 = v11[9];
  v77 = v11[4];
  v13 = v77;
  v78 = v12;
  v73 = a3;
  v16 = (_QWORD *)*a3;
  swift_bridgeObjectRetain();
  v74 = v14;
  swift_bridgeObjectRetain();
  v18 = sub_10000ADC4(v77, (uint64_t)v12);
  v19 = v16[2];
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
    goto LABEL_23;
  v22 = v17;
  if (v16[3] >= v21)
  {
    if ((v10 & 1) != 0)
    {
      if ((v17 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_1000ED2C4();
      if ((v22 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v41 = a3;
    v42 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v18 >> 6) + 64) |= 1 << v18;
    v43 = (uint64_t *)(v42[6] + 16 * v18);
    *v43 = v13;
    v43[1] = (uint64_t)v12;
    v44 = (_QWORD *)(v42[7] + 32 * v18);
    *v44 = v15;
    v44[1] = v14;
    v44[2] = v71;
    v44[3] = v70;
    v45 = v42[2];
    v46 = __OFADD__(v45, 1);
    v47 = v45 + 1;
    if (v46)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v42[2] = v47;
    v48 = v8 - 1;
    if (v8 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n(v72, 2);
      return;
    }
    v49 = v72 + 15;
    while (1)
    {
      v12 = (_TtC14softposreaderd12RemoteReader *)*(v49 - 4);
      v52 = *(v49 - 3);
      v51 = (_TtC14softposreaderd12RemoteReader *)*(v49 - 2);
      v53 = *(v49 - 1);
      v54 = *v49;
      v77 = *(v49 - 5);
      v50 = v77;
      v78 = v12;
      v55 = *v41;
      swift_bridgeObjectRetain();
      v74 = v51;
      swift_bridgeObjectRetain();
      v56 = sub_10000ADC4(v77, (uint64_t)v12);
      v58 = *(_QWORD *)(v55 + 16);
      v59 = (v57 & 1) == 0;
      v46 = __OFADD__(v58, v59);
      v60 = v58 + v59;
      if (v46)
        break;
      v61 = v57;
      if (*(_QWORD *)(v55 + 24) < v60)
      {
        sub_1000EAB68(v60, 1);
        v56 = sub_10000ADC4(v77, (uint64_t)v12);
        if ((v61 & 1) != (v62 & 1))
          goto LABEL_25;
      }
      if ((v61 & 1) != 0)
        goto LABEL_10;
      v41 = v73;
      v63 = (_QWORD *)*v73;
      *(_QWORD *)(*v73 + 8 * (v56 >> 6) + 64) |= 1 << v56;
      v64 = (uint64_t *)(v63[6] + 16 * v56);
      *v64 = v50;
      v64[1] = (uint64_t)v12;
      v65 = (_QWORD *)(v63[7] + 32 * v56);
      *v65 = v52;
      v65[1] = v51;
      v65[2] = v53;
      v65[3] = v54;
      v66 = v63[2];
      v46 = __OFADD__(v66, 1);
      v67 = v66 + 1;
      if (v46)
        goto LABEL_24;
      v63[2] = v67;
      v49 += 6;
      if (!--v48)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1000EAB68(v21, v10 & 1);
  v23 = sub_10000ADC4(v77, (uint64_t)v12);
  if ((v22 & 1) == (v24 & 1))
  {
    v18 = v23;
    if ((v22 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v25 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v25);
    v79 = v25;
    swift_errorRetain();
    v26 = sub_100003A2C((uint64_t *)&unk_1001B1280);
    if ((swift_dynamicCast(v26, &v79, v26, &type metadata for _MergeError, 0) & 1) == 0)
    {
      swift_bridgeObjectRelease(v12, v27, v28, v29, v30, v31, v32, v33);
      swift_bridgeObjectRelease(v74, v34, v35, v36, v37, v38, v39, v40);
      swift_bridgeObjectRelease_n(v72, 2);
      swift_errorRelease();
      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
LABEL_26:
  v75 = 0;
  v76 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v68._object = (void *)0x800000010016C6C0;
  v68._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v68);
  _print_unlocked<A, B>(_:_:)(&v77, &v75, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v69._countAndFlagsBits = 39;
  v69._object = (void *)0xE100000000000000;
  String.append(_:)(v69);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v75, v76, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
}

BOOL sub_1000C3C98(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (!a5 || (sub_100127830(a1, a5) & 1) == 0)
      return 0;
  }
  else if (a5)
  {
    return 0;
  }
  if (a2)
  {
    if (!a6 || (sub_100127830(a2, a6) & 1) == 0)
      return 0;
  }
  else if (a6)
  {
    return 0;
  }
  if (a4)
    return a8 && (a3 == a7 && a4 == a8 || (_stringCompareWithSmolCheck(_:_:expecting:)(a3, a4, a7, a8, 0) & 1) != 0);
  return !a8;
}

BOOL sub_1000C3D58(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  _BOOL8 result;
  char v14;
  char v15;
  _TtC14softposreaderd12RemoteReader *v16;
  _TtC14softposreaderd12RemoteReader *v17;
  uint64_t v18;
  _TtC14softposreaderd12RemoteReader *v19;
  _TtC14softposreaderd12RemoteReader *v20;
  _TtC14softposreaderd12RemoteReader *v21;
  _TtC14softposreaderd12RemoteReader *v22;
  uint64_t v23;
  BOOL v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  SEL v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  SEL v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a2[1];
  v10 = a2[2];
  v9 = a2[3];
  v11 = v4 == *a2 && v5 == v8;
  if (v11 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v8, 0), result = 0, (v12 & 1) != 0))
  {
    if (v7 >> 60 == 15)
    {
      if (v9 >> 60 == 15)
      {
LABEL_12:
        v16 = (_TtC14softposreaderd12RemoteReader *)a1[4];
        v17 = (_TtC14softposreaderd12RemoteReader *)a1[5];
        v18 = a1[6];
        v19 = (_TtC14softposreaderd12RemoteReader *)a1[7];
        v21 = (_TtC14softposreaderd12RemoteReader *)a2[4];
        v20 = (_TtC14softposreaderd12RemoteReader *)a2[5];
        v23 = a2[6];
        v22 = (_TtC14softposreaderd12RemoteReader *)a2[7];
        if (v16 == (_TtC14softposreaderd12RemoteReader *)1)
        {
          if (v21 == (_TtC14softposreaderd12RemoteReader *)1)
            return 1;
        }
        else if (v21 != (_TtC14softposreaderd12RemoteReader *)1)
        {
          v24 = sub_1000C3C98(v16, v17, v18, (uint64_t)v19, v21, v20, v23, (uint64_t)v22);
          sub_100093E80((uint64_t)v16, (uint64_t)v17, v18, (uint64_t)v19);
          sub_100093E80((uint64_t)v16, (uint64_t)v17, v18, (uint64_t)v19);
          sub_100093E80((uint64_t)v21, (uint64_t)v20, v23, (uint64_t)v22);
          swift_bridgeObjectRelease(v21, v25, v26, v27, v28, v29, v30, v31);
          swift_bridgeObjectRelease(v20, v32, v33, v34, v35, v36, v37, v38);
          swift_bridgeObjectRelease(v22, v39, v40, v41, v42, v43, v44, v45);
          swift_bridgeObjectRelease(v16, v46, v47, v48, v49, v50, v51, v52);
          swift_bridgeObjectRelease(v17, v53, v54, v55, v56, v57, v58, v59);
          swift_bridgeObjectRelease(v19, v60, v61, v62, v63, v64, v65, v66);
          sub_100094080((uint64_t)v16, (uint64_t)v17, v18, (uint64_t)v19);
          return v24;
        }
        sub_100093E80((uint64_t)v16, (uint64_t)v17, v18, (uint64_t)v19);
        sub_100093E80((uint64_t)v21, (uint64_t)v20, v23, (uint64_t)v22);
        sub_100094080((uint64_t)v16, (uint64_t)v17, v18, (uint64_t)v19);
        sub_100094080((uint64_t)v21, (uint64_t)v20, v23, (uint64_t)v22);
        return 0;
      }
    }
    else if (v9 >> 60 != 15)
    {
      sub_1000306C8(v6, v7);
      sub_1000306C8(v10, v9);
      sub_1001288E0(v6, v7);
      v15 = v14;
      sub_10000A9B0(v10, v9);
      sub_10000A9B0(v6, v7);
      if ((v15 & 1) == 0)
        return 0;
      goto LABEL_12;
    }
    sub_1000306C8(v6, v7);
    sub_1000306C8(v10, v9);
    sub_10000A9B0(v6, v7);
    sub_10000A9B0(v10, v9);
    return 0;
  }
  return result;
}

BOOL sub_1000C3FAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  _BOOL8 result;
  char v20;
  char v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _TtC14softposreaderd12RemoteReader *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _TtC14softposreaderd12RemoteReader *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  BOOL v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  _TtC14softposreaderd12RemoteReader *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _TtC14softposreaderd12RemoteReader *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  _OWORD v65[4];
  _OWORD v66[4];
  uint64_t v67[9];

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (v5 >> 60 == 15)
  {
    if (v7 >> 60 == 15)
      goto LABEL_7;
LABEL_5:
    sub_1000306C8(*(_QWORD *)a1, v5);
    sub_1000306C8(v6, v7);
    sub_10000A9B0(v4, v5);
    sub_10000A9B0(v6, v7);
    return 0;
  }
  if (v7 >> 60 == 15)
    goto LABEL_5;
  sub_1000306C8(*(_QWORD *)a1, v5);
  sub_1000306C8(v6, v7);
  sub_1001288E0(v4, v5);
  v9 = v8;
  sub_10000A9B0(v6, v7);
  sub_10000A9B0(v4, v5);
  if ((v9 & 1) == 0)
    return 0;
LABEL_7:
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a2 + 16);
  v15 = *(_QWORD *)(a2 + 24);
  v17 = *(_QWORD *)(a2 + 32);
  v16 = *(_QWORD *)(a2 + 40);
  if (v10 == v14 && v11 == v15
    || (v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v14, v15, 0), result = 0, (v18 & 1) != 0))
  {
    if (v12 >> 60 == 15)
    {
      if (v16 >> 60 == 15)
      {
LABEL_16:
        v22 = *(_OWORD *)(a1 + 64);
        v66[0] = *(_OWORD *)(a1 + 48);
        v66[1] = v22;
        v23 = *(_OWORD *)(a1 + 96);
        v66[2] = *(_OWORD *)(a1 + 80);
        v66[3] = v23;
        v24 = *(_OWORD *)(a2 + 64);
        v65[0] = *(_OWORD *)(a2 + 48);
        v65[1] = v24;
        v25 = *(_OWORD *)(a2 + 96);
        v65[2] = *(_OWORD *)(a2 + 80);
        v65[3] = v25;
        if (sub_1000C3D58((uint64_t *)v66, v65))
        {
          v27 = *(_QWORD *)(a1 + 112);
          v26 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 120);
          v28 = *(_QWORD *)(a1 + 128);
          v29 = *(_QWORD *)(a1 + 136);
          v30 = *(_QWORD *)(a1 + 144);
          v31 = *(_QWORD *)(a1 + 152);
          v32 = *(_QWORD *)(a1 + 160);
          v33 = *(_QWORD *)(a1 + 168);
          v35 = *(_QWORD *)(a2 + 112);
          v34 = *(_TtC14softposreaderd12RemoteReader **)(a2 + 120);
          v37 = *(void **)(a2 + 128);
          v36 = *(void **)(a2 + 136);
          v39 = *(void **)(a2 + 144);
          v38 = *(void **)(a2 + 152);
          v41 = *(void **)(a2 + 160);
          v40 = *(void **)(a2 + 168);
          if (v26)
          {
            if (v34)
            {
              v67[0] = v27;
              v67[1] = (uint64_t)v26;
              v67[2] = v28;
              v67[3] = v29;
              v67[4] = v30;
              v67[5] = v31;
              v67[6] = v32;
              v67[7] = v33;
              v49 = v35;
              v50 = v34;
              v51 = (uint64_t)v37;
              v52 = (unint64_t)v36;
              v53 = (uint64_t)v39;
              v54 = (uint64_t)v38;
              v55 = (uint64_t)v41;
              v56 = (uint64_t)v40;
              v44 = (void *)v28;
              v45 = (void *)v29;
              v46 = (void *)v30;
              v47 = (void *)v31;
              v48 = (void *)v32;
              v43 = (void *)v33;
              sub_100093EC0(v27, (uint64_t)v26, v28, v29, v30, v31, v32, v33);
              sub_100093EC0(v35, (uint64_t)v34, (uint64_t)v37, (unint64_t)v36, (uint64_t)v39, (uint64_t)v38, (uint64_t)v41, (uint64_t)v40);
              v42 = sub_1000C3D58(v67, &v49);
              sub_1000940BC(v35, v34, v37, v36, v39, v38, v41, v40);
              sub_1000940BC(v27, v26, v44, v45, v46, v47, v48, v43);
              return v42;
            }
          }
          else if (!v34)
          {
            return 1;
          }
          v49 = v27;
          v50 = v26;
          v51 = v28;
          v52 = v29;
          v53 = v30;
          v54 = v31;
          v55 = v32;
          v56 = v33;
          v57 = v35;
          v58 = v34;
          v59 = v37;
          v60 = v36;
          v61 = v39;
          v62 = v38;
          v63 = v41;
          v64 = v40;
          sub_100093EC0(v27, (uint64_t)v26, v28, v29, v30, v31, v32, v33);
          sub_100093EC0(v35, (uint64_t)v34, (uint64_t)v37, (unint64_t)v36, (uint64_t)v39, (uint64_t)v38, (uint64_t)v41, (uint64_t)v40);
          sub_1000C80A8((uint64_t)&v49);
        }
        return 0;
      }
    }
    else if (v16 >> 60 != 15)
    {
      sub_1000306C8(v13, v12);
      sub_1000306C8(v17, v16);
      sub_1001288E0(v13, v12);
      v21 = v20;
      sub_10000A9B0(v17, v16);
      sub_10000A9B0(v13, v12);
      if ((v21 & 1) == 0)
        return 0;
      goto LABEL_16;
    }
    sub_1000306C8(v13, v12);
    sub_1000306C8(v17, v16);
    sub_10000A9B0(v13, v12);
    sub_10000A9B0(v17, v16);
    return 0;
  }
  return result;
}

void sub_1000C42FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _TtC14softposreaderd12RemoteReader *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  unint64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  _TtC14softposreaderd12RemoteReader *v31;
  _TtC14softposreaderd12RemoteReader *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _BOOL4 v36;
  char v38;
  BOOL v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _TtC14softposreaderd12RemoteReader *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  SEL v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  char v57;
  _BOOL4 v59;
  uint64_t v60;
  uint64_t v61;
  _TtC14softposreaderd12RemoteReader *v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  unint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  const char *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  _TtC14softposreaderd12RemoteReader *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _TtC14softposreaderd12RemoteReader *v82;
  uint64_t v83;
  _BOOL4 v84;
  char v85;
  BOOL v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  char v103;
  _BOOL4 v105;
  SEL v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  const char *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  SEL v121;
  id v122;
  id v123;
  id v124;
  id v125;
  id v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  NSObject *v130;
  os_log_type_t v131;
  uint8_t *v132;
  unint64_t v133;
  uint64_t v134;
  _BYTE *v135;
  SEL v136;
  id v137;
  id v138;
  id v139;
  id v140;
  id v141;
  id v142;
  char v143;
  SEL v144;
  id v145;
  id v146;
  id v147;
  id v148;
  id v149;
  id v150;
  char v152;
  SEL v153;
  id v154;
  id v155;
  id v156;
  id v157;
  id v158;
  id v159;
  const char *v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  SEL v167;
  id v168;
  id v169;
  id v170;
  id v171;
  id v172;
  id v173;
  _TtC14softposreaderd12RemoteReader *v174;
  uint64_t v175;
  uint64_t v176;
  NSObject *v177;
  os_log_type_t v178;
  uint8_t *v179;
  unint64_t v180;
  uint64_t v181;
  _BYTE *v182;
  SEL v183;
  id v184;
  id v185;
  id v186;
  id v187;
  id v188;
  id v189;
  _QWORD v190[2];
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;

  v5 = type metadata accessor for String.Encoding(0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)v190 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter(v6);
  v9 = String.init(data:encoding:)(a1, a2, v8);
  if (!v10)
  {
LABEL_9:
    if (qword_1001AD128 == -1)
    {
LABEL_10:
      v20 = type metadata accessor for Logger(0);
      v21 = sub_100003A14(v20, (uint64_t)qword_1001B1CA8);
      v22 = Logger.logObject.getter(v21);
      v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v24 = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "invalid JSON string with non utf8 encoding", v24, 2u);
        swift_slowDealloc(v24, -1, -1);
      }

      v25 = sub_1000C3560();
      v26 = swift_allocError(&type metadata for KCSOTAResponseParser.DecodingError, v25, 0, 0);
      *v27 = 0;
      swift_willThrow(v26);
      return;
    }
LABEL_149:
    swift_once(&qword_1001AD128, sub_1000BF1C8);
    goto LABEL_10;
  }
  v17 = (_TtC14softposreaderd12RemoteReader *)v9;
  v18 = v10;
  v191 = v9;
  v192 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    v19 = HIBYTE(v10) & 0xF;
  else
    v19 = v9 & 0xFFFFFFFFFFFFLL;
  v193 = v19;
  if (!v19)
    goto LABEL_68;
  v190[1] = v2;
  if ((v10 & 0x2000000000000000) == 0)
  {
    if ((v9 & 0xFFFFFFFFFFFFLL) == 0)
    {
LABEL_8:
      __break(1u);
      goto LABEL_9;
    }
    goto LABEL_15;
  }
  if ((v10 & 0xF00000000000000) != 0)
  {
LABEL_15:
    v28 = v10 >> 60;
    v29 = (v9 & 0x800000000000000) == 0;
    v30 = String.subscript.getter(15, v9, v10);
    v32 = v31;
    v33 = 7;
    if ((v28 & v29) != 0)
      v33 = 11;
    v34 = String.index(_:offsetBy:limitedBy:)(15, 1, v33 | (v193 << 16));
    if ((v35 & 1) != 0)
    {
LABEL_150:
      __break(1u);
      goto LABEL_151;
    }
    String.removeSubrange(_:)(15, v34);
    v17 = (_TtC14softposreaderd12RemoteReader *)0xE100000000000000;
    v36 = v32 == (_TtC14softposreaderd12RemoteReader *)0xE100000000000000;
    if (v30 != 32 || v32 != (_TtC14softposreaderd12RemoteReader *)0xE100000000000000)
    {
      v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v32, 32, 0xE100000000000000, 0);
      v40 = v30 == 10 && v32 == (_TtC14softposreaderd12RemoteReader *)0xE100000000000000;
      if ((v38 & 1) != 0 || v40)
      {
        v17 = v32;
      }
      else
      {
        v17 = v32;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(v30, v32, 10, 0xE100000000000000, 0) & 1) == 0)
        {
LABEL_61:
          v60 = v191;
          v18 = v192;
          v61 = HIBYTE(v192) & 0xF;
          v17 = (_TtC14softposreaderd12RemoteReader *)(v191 & 0xFFFFFFFFFFFFLL);
          if ((v192 & 0x2000000000000000) != 0)
            v62 = (_TtC14softposreaderd12RemoteReader *)(HIBYTE(v192) & 0xF);
          else
            v62 = (_TtC14softposreaderd12RemoteReader *)(v191 & 0xFFFFFFFFFFFFLL);
          swift_bridgeObjectRetain();
          v193 = (uint64_t)v62;
          if (v62)
          {
            if ((v18 & 0x2000000000000000) != 0)
            {
              if (!v61)
              {
LABEL_148:
                __break(1u);
                goto LABEL_149;
              }
            }
            else
            {
              v61 = v60 & 0xFFFFFFFFFFFFLL;
              if (!v17)
              {
LABEL_67:
                __break(1u);
                goto LABEL_68;
              }
            }
            v79 = 7;
            if (((v18 >> 60) & ((v60 & 0x800000000000000) == 0)) != 0)
              v79 = 11;
            v80 = String.index(before:)(v79 | (v61 << 16), v60, v18);
            v81 = String.remove(at:)(v80);
            v83 = v81;
            v17 = v82;
            v62 = (_TtC14softposreaderd12RemoteReader *)0xE100000000000000;
            v84 = v82 == (_TtC14softposreaderd12RemoteReader *)0xE100000000000000;
            if (v81 != 32 || v82 != (_TtC14softposreaderd12RemoteReader *)0xE100000000000000)
            {
              v85 = _stringCompareWithSmolCheck(_:_:expecting:)(v81, v82, 32, 0xE100000000000000, 0);
              v87 = v83 == 10 && v17 == (_TtC14softposreaderd12RemoteReader *)0xE100000000000000;
              if ((v85 & 1) != 0 || v87)
              {
                v62 = v17;
              }
              else
              {
                v62 = v17;
                if ((_stringCompareWithSmolCheck(_:_:expecting:)(v83, v17, 10, 0xE100000000000000, 0) & 1) == 0)
                {
LABEL_121:
                  if (v30 == 34 && v36)
                  {
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRelease(v32, v107, v108, v109, v110, v111, v112, v113);
                  }
                  else
                  {
                    v143 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v32, 34, 0xE100000000000000, 0);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRelease(v32, v144, v145, v146, v147, v148, v149, v150);
                    if ((v143 & 1) == 0)
                    {
                      v174 = (_TtC14softposreaderd12RemoteReader *)v192;
                      swift_bridgeObjectRelease(v17, v114, v115, v116, v117, v118, v119, v120);
                      goto LABEL_142;
                    }
                  }
                  if (v83 == 34 && v84)
                  {
                    swift_bridgeObjectRelease(v32, v114, v115, v116, v117, v118, v119, v120);
                    swift_bridgeObjectRelease_n(v17, 2);
                    return;
                  }
                  v152 = _stringCompareWithSmolCheck(_:_:expecting:)(v83, v17, 34, 0xE100000000000000, 0);
                  swift_bridgeObjectRelease(v17, v153, v154, v155, v156, v157, v158, v159);
                  if ((v152 & 1) != 0)
                  {
                    swift_bridgeObjectRelease(v32, v160, v161, v162, v163, v164, v165, v166);
                    swift_bridgeObjectRelease(v17, v167, v168, v169, v170, v171, v172, v173);
                    return;
                  }
                  v174 = (_TtC14softposreaderd12RemoteReader *)v192;
LABEL_142:
                  swift_bridgeObjectRelease(v174, v160, v161, v162, v163, v164, v165, v166);
                  if (qword_1001AD128 == -1)
                  {
LABEL_143:
                    v175 = type metadata accessor for Logger(0);
                    v176 = sub_100003A14(v175, (uint64_t)qword_1001B1CA8);
                    v177 = Logger.logObject.getter(v176);
                    v178 = static os_log_type_t.error.getter();
                    if (os_log_type_enabled(v177, v178))
                    {
                      v179 = (uint8_t *)swift_slowAlloc(2, -1);
                      *(_WORD *)v179 = 0;
                      _os_log_impl((void *)&_mh_execute_header, v177, v178, "Badly formed object", v179, 2u);
                      swift_slowDealloc(v179, -1, -1);
                    }

                    v180 = sub_1000C3560();
                    v181 = swift_allocError(&type metadata for KCSOTAResponseParser.DecodingError, v180, 0, 0);
                    *v182 = 2;
                    swift_willThrow(v181);
                    swift_bridgeObjectRelease(v32, v183, v184, v185, v186, v187, v188, v189);
                    goto LABEL_72;
                  }
LABEL_151:
                  swift_once(&qword_1001AD128, sub_1000BF1C8);
                  goto LABEL_143;
                }
              }
            }
            v10 = v191;
            v18 = v192;
            v88 = (v192 & 0x2000000000000000) == 0;
            v89 = HIBYTE(v192) & 0xF;
            v90 = v191 & 0xFFFFFFFFFFFFLL;
            if ((v192 & 0x2000000000000000) != 0)
              v91 = HIBYTE(v192) & 0xF;
            else
              v91 = v191 & 0xFFFFFFFFFFFFLL;
            if (v91)
            {
              do
              {
                if (v88)
                {
                  if (!v90)
                    goto LABEL_67;
                }
                else
                {
                  v90 = v89;
                  if (!v89)
                    goto LABEL_148;
                }
                v93 = 7;
                if (((v18 >> 60) & ((v10 & 0x800000000000000) == 0)) != 0)
                  v93 = 11;
                v94 = String.index(before:)(v93 | (v90 << 16), v10, v18);
                v83 = String.remove(at:)(v94);
                v17 = (_TtC14softposreaderd12RemoteReader *)v95;
                swift_bridgeObjectRelease(v62, v95, v96, v97, v98, v99, v100, v101);
                v62 = (_TtC14softposreaderd12RemoteReader *)0xE100000000000000;
                v84 = v17 == (_TtC14softposreaderd12RemoteReader *)0xE100000000000000;
                if (v83 != 32 || v17 != (_TtC14softposreaderd12RemoteReader *)0xE100000000000000)
                {
                  v103 = _stringCompareWithSmolCheck(_:_:expecting:)(v83, v17, 32, 0xE100000000000000, 0);
                  v105 = v83 == 10 && v17 == (_TtC14softposreaderd12RemoteReader *)0xE100000000000000;
                  if ((v103 & 1) == 0
                    && !v105
                    && (_stringCompareWithSmolCheck(_:_:expecting:)(v83, v17, 10, 0xE100000000000000, 0) & 1) == 0)
                  {
                    goto LABEL_121;
                  }
                  v62 = v17;
                }
                v10 = v191;
                v18 = v192;
                v88 = (v192 & 0x2000000000000000) == 0;
                v89 = HIBYTE(v192) & 0xF;
                v90 = v191 & 0xFFFFFFFFFFFFLL;
                if ((v192 & 0x2000000000000000) != 0)
                  v92 = HIBYTE(v192) & 0xF;
                else
                  v92 = v191 & 0xFFFFFFFFFFFFLL;
              }
              while (v92);
            }
          }
          swift_bridgeObjectRelease(v32, (SEL)v10, v11, v12, v13, v14, v15, v16);
          swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v18, v121, v122, v123, v124, v125, v126, v127);
          if (qword_1001AD128 != -1)
            swift_once(&qword_1001AD128, sub_1000BF1C8);
          v128 = type metadata accessor for Logger(0);
          v129 = sub_100003A14(v128, (uint64_t)qword_1001B1CA8);
          v130 = Logger.logObject.getter(v129);
          v131 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v130, v131))
          {
            v132 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v132 = 0;
            _os_log_impl((void *)&_mh_execute_header, v130, v131, "Unescaped control character.\nmissing ending \" in string", v132, 2u);
            swift_slowDealloc(v132, -1, -1);
          }

          v133 = sub_1000C3560();
          v134 = swift_allocError(&type metadata for KCSOTAResponseParser.DecodingError, v133, 0, 0);
          *v135 = 0;
          swift_willThrow(v134);
          swift_bridgeObjectRelease(v32, v136, v137, v138, v139, v140, v141, v142);
          if (v193)
          {
            v78 = v62;
            goto LABEL_73;
          }
          return;
        }
      }
    }
    v41 = v191;
    v18 = v192;
    v42 = (v192 & 0x2000000000000000) == 0;
    v43 = HIBYTE(v192) & 0xF;
    v44 = v191 & 0xFFFFFFFFFFFFLL;
    if ((v192 & 0x2000000000000000) != 0)
      v45 = HIBYTE(v192) & 0xF;
    else
      v45 = v191 & 0xFFFFFFFFFFFFLL;
    while (v45)
    {
      if (v42)
      {
        if (!v44)
          goto LABEL_8;
      }
      else if (!v43)
      {
        goto LABEL_146;
      }
      v30 = String.subscript.getter(15, v41, v18);
      v32 = v46;
      v47 = 7;
      if (((v18 >> 60) & ((v41 & 0x800000000000000) == 0)) != 0)
        v47 = 11;
      v48 = String.index(_:offsetBy:limitedBy:)(15, 1, v47 | (v45 << 16));
      if ((v49 & 1) != 0)
        goto LABEL_150;
      String.removeSubrange(_:)(15, v48);
      swift_bridgeObjectRelease(v17, v50, v51, v52, v53, v54, v55, v56);
      v17 = (_TtC14softposreaderd12RemoteReader *)0xE100000000000000;
      v36 = v32 == (_TtC14softposreaderd12RemoteReader *)0xE100000000000000;
      if (v30 != 32 || v32 != (_TtC14softposreaderd12RemoteReader *)0xE100000000000000)
      {
        v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v32, 32, 0xE100000000000000, 0);
        v59 = v30 == 10 && v32 == (_TtC14softposreaderd12RemoteReader *)0xE100000000000000;
        if ((v57 & 1) == 0
          && !v59
          && (_stringCompareWithSmolCheck(_:_:expecting:)(v30, v32, 10, 0xE100000000000000, 0) & 1) == 0)
        {
          goto LABEL_61;
        }
        v17 = v32;
      }
      v41 = v191;
      v18 = v192;
      v42 = (v192 & 0x2000000000000000) == 0;
      v43 = HIBYTE(v192) & 0xF;
      v44 = v191 & 0xFFFFFFFFFFFFLL;
      if ((v192 & 0x2000000000000000) != 0)
        v45 = HIBYTE(v192) & 0xF;
      else
        v45 = v191 & 0xFFFFFFFFFFFFLL;
    }
LABEL_68:
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v18, (SEL)v10, v11, v12, v13, v14, v15, v16);
    if (qword_1001AD128 == -1)
      goto LABEL_69;
    goto LABEL_147;
  }
LABEL_146:
  __break(1u);
LABEL_147:
  swift_once(&qword_1001AD128, sub_1000BF1C8);
LABEL_69:
  v63 = type metadata accessor for Logger(0);
  v64 = sub_100003A14(v63, (uint64_t)qword_1001B1CA8);
  v65 = Logger.logObject.getter(v64);
  v66 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v65, v66))
  {
    v67 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v67 = 0;
    _os_log_impl((void *)&_mh_execute_header, v65, v66, "Unescaped control character.\nmissing startng \" in string", v67, 2u);
    swift_slowDealloc(v67, -1, -1);
  }

  v68 = sub_1000C3560();
  v69 = swift_allocError(&type metadata for KCSOTAResponseParser.DecodingError, v68, 0, 0);
  *v70 = 0;
  swift_willThrow(v69);
  if (v193)
  {
LABEL_72:
    v78 = v17;
LABEL_73:
    swift_bridgeObjectRelease(v78, v71, v72, v73, v74, v75, v76, v77);
  }
}

void sub_1000C4C50(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_1000C4CA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v32;

  if (!BYTE6(v0))
  {
LABEL_45:
    if (qword_1001AD128 != -1)
      goto LABEL_59;
    goto LABEL_46;
  }
  v5 = 0;
  v32 = v1 >> 32;
  while (1)
  {
    if (!v3)
    {
      if (v5 >= BYTE6(v0))
        goto LABEL_53;
      *(_QWORD *)(v4 - 102) = v1;
      *(_WORD *)(v4 - 94) = v0;
      *(_BYTE *)(v4 - 92) = BYTE2(v0);
      *(_BYTE *)(v4 - 91) = BYTE3(v0);
      *(_BYTE *)(v4 - 90) = BYTE4(v0);
      *(_BYTE *)(v4 - 89) = BYTE5(v0);
      v2 = *(unsigned __int8 *)(v4 - 102 + v5);
      goto LABEL_19;
    }
    if (v3 != 1)
    {
      if (v5 < *(_QWORD *)(v1 + 16))
        goto LABEL_54;
      if (v5 >= *(_QWORD *)(v1 + 24))
        goto LABEL_56;
      v9 = __DataStorage._bytes.getter();
      if (!v9)
        goto LABEL_68;
      v2 = v9;
      v10 = __DataStorage._offset.getter();
      v8 = v5 - v10;
      if (__OFSUB__(v5, v10))
        goto LABEL_57;
      goto LABEL_18;
    }
    if (v5 < (int)v1 || v5 >= v32)
      break;
    v6 = __DataStorage._bytes.getter();
    if (!v6)
    {
      __break(1u);
LABEL_68:
      __break(1u);
      __break(1u);
    }
    v2 = v6;
    v7 = __DataStorage._offset.getter();
    v8 = v5 - v7;
    if (__OFSUB__(v5, v7))
      goto LABEL_55;
LABEL_18:
    v2 = *(unsigned __int8 *)(v2 + v8);
LABEL_19:
    if ((_DWORD)v2 != 32 && (_DWORD)v2 != 10)
    {
      if (BYTE6(v0) <= v5 + 1)
      {
LABEL_42:
        if (qword_1001AD128 != -1)
          goto LABEL_66;
        goto LABEL_43;
      }
      v11 = BYTE6(v0) - 1;
      while (1)
      {
        if (v3)
        {
          if (v3 == 1)
          {
            if (v11 < (int)v1 || v11 >= v32)
            {
              __break(1u);
LABEL_61:
              __break(1u);
LABEL_62:
              __break(1u);
LABEL_63:
              __break(1u);
LABEL_64:
              __break(1u);
LABEL_65:
              __break(1u);
LABEL_66:
              swift_once(&qword_1001AD128, sub_1000BF1C8);
LABEL_43:
              v20 = type metadata accessor for Logger(0);
              v21 = sub_100003A14(v20, (uint64_t)qword_1001B1CA8);
              v22 = Logger.logObject.getter(v21);
              v23 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v22, v23))
              {
                v24 = (uint8_t *)swift_slowAlloc(2, -1);
                *(_WORD *)v24 = 0;
                v25 = "Unescaped control character. Missing ending \" in string";
                goto LABEL_48;
              }
              goto LABEL_49;
            }
            v12 = __DataStorage._bytes.getter();
            if (!v12)
            {
              __break(1u);
LABEL_70:
              __break(1u);
              JUMPOUT(0x1000C5188);
            }
            v13 = v12;
            v14 = __DataStorage._offset.getter();
            v15 = v11 - v14;
            if (__OFSUB__(v11, v14))
              goto LABEL_63;
          }
          else
          {
            if (v11 < *(_QWORD *)(v1 + 16))
              goto LABEL_62;
            if (v11 >= *(_QWORD *)(v1 + 24))
              goto LABEL_64;
            v17 = __DataStorage._bytes.getter();
            if (!v17)
              goto LABEL_70;
            v13 = v17;
            v18 = __DataStorage._offset.getter();
            v15 = v11 - v18;
            if (__OFSUB__(v11, v18))
              goto LABEL_65;
          }
          v16 = *(unsigned __int8 *)(v13 + v15);
        }
        else
        {
          if (v11 >= BYTE6(v0))
            goto LABEL_61;
          *(_QWORD *)(v4 - 102) = v1;
          *(_WORD *)(v4 - 94) = v0;
          *(_BYTE *)(v4 - 92) = BYTE2(v0);
          *(_BYTE *)(v4 - 91) = BYTE3(v0);
          *(_BYTE *)(v4 - 90) = BYTE4(v0);
          *(_BYTE *)(v4 - 89) = BYTE5(v0);
          v16 = *(unsigned __int8 *)(v4 - 102 + v11);
        }
        if (v16 != 32 && v16 != 10)
          return v2;
        if (__OFSUB__(v11--, 1))
          goto LABEL_58;
        if (v11 <= v5)
          goto LABEL_42;
      }
    }
    if (++v5 >= BYTE6(v0))
      goto LABEL_45;
  }
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  swift_once(&qword_1001AD128, sub_1000BF1C8);
LABEL_46:
  v26 = type metadata accessor for Logger(0);
  v27 = sub_100003A14(v26, (uint64_t)qword_1001B1CA8);
  v22 = Logger.logObject.getter(v27);
  v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v24 = 0;
    v25 = "Unescaped control character. Missing starting \" in base64";
LABEL_48:
    _os_log_impl((void *)&_mh_execute_header, v22, v23, v25, v24, 2u);
    swift_slowDealloc(v24, -1, -1);
  }
LABEL_49:

  v28 = sub_1000C3560();
  v29 = swift_allocError(&type metadata for KCSOTAResponseParser.DecodingError, v28, 0, 0);
  *v30 = 0;
  swift_willThrow(v29);
  return v2;
}

unint64_t sub_1000C5198(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    result = String.index(_:offsetBy:limitedBy:)(v4 | (v3 << 16), -(uint64_t)result, 15);
    if ((v5 & 1) != 0)
      result = 15;
    if (4 * v3 >= result >> 14)
      return String.subscript.getter();
  }
  __break(1u);
  return result;
}

unint64_t sub_1000C5240()
{
  unint64_t result;

  result = qword_1001B1DC8;
  if (!qword_1001B1DC8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_1001B1DC8);
  }
  return result;
}

unint64_t sub_1000C5284()
{
  unint64_t result;

  result = qword_1001B1DD0;
  if (!qword_1001B1DD0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1001B1DD0);
  }
  return result;
}

unint64_t sub_1000C52C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001B1DE8;
  if (!qword_1001B1DE8)
  {
    v1 = sub_100003A6C(&qword_1001B1DE0);
    sub_1000C5334();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1001B1DE8);
  }
  return result;
}

unint64_t sub_1000C5334()
{
  unint64_t result;

  result = qword_1001B1DF0;
  if (!qword_1001B1DF0)
  {
    result = swift_getWitnessTable(&unk_100160E84, &type metadata for KCSOTAResponseParser.JSONObject);
    atomic_store(result, (unint64_t *)&qword_1001B1DF0);
  }
  return result;
}

unint64_t sub_1000C5378()
{
  unint64_t result;

  result = qword_1001B1DF8;
  if (!qword_1001B1DF8)
  {
    result = swift_getWitnessTable(&unk_100160E5C, &type metadata for KCSOTAResponseParser.InternalProfile);
    atomic_store(result, (unint64_t *)&qword_1001B1DF8);
  }
  return result;
}

unint64_t sub_1000C53BC()
{
  unint64_t result;

  result = qword_1001B1E00;
  if (!qword_1001B1E00)
  {
    result = swift_getWitnessTable(&unk_100160E34, &type metadata for KCSOTAResponse.HostConfiguration);
    atomic_store(result, (unint64_t *)&qword_1001B1E00);
  }
  return result;
}

unint64_t sub_1000C5400()
{
  unint64_t result;

  result = qword_1001B1E08;
  if (!qword_1001B1E08)
  {
    result = swift_getWitnessTable(&unk_100160E0C, &type metadata for KCSOTAResponseParser.InternalKernelConfig);
    atomic_store(result, (unint64_t *)&qword_1001B1E08);
  }
  return result;
}

_QWORD *sub_1000C5444(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = a1[5];
  v4 = a1[13];
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_1000C5498(uint64_t a1)
{
  sub_1000940BC(*(_QWORD *)a1, *(_TtC14softposreaderd12RemoteReader **)(a1 + 8), *(void **)(a1 + 16), *(void **)(a1 + 24), *(void **)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48), *(void **)(a1 + 56));
  return a1;
}

unint64_t sub_1000C54D0()
{
  unint64_t result;

  result = qword_1001B1E10;
  if (!qword_1001B1E10)
  {
    result = swift_getWitnessTable(&unk_100160DE4, &type metadata for KCSOTAResponseParser.InternalKCSOTAResponse);
    atomic_store(result, (unint64_t *)&qword_1001B1E10);
  }
  return result;
}

uint64_t sub_1000C5514(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003A2C(&qword_1001B1E18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000C5554(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for Data._Representation - 1) + 32))(a2, a1);
  return a2;
}

uint64_t destroy for KCSOTAResponseParser.InternalKCSOTAResponse(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[9]);
  return swift_bridgeObjectRelease(a1[13]);
}

uint64_t initializeWithCopy for KCSOTAResponseParser.InternalKCSOTAResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  v6 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v6;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

_QWORD *assignWithCopy for KCSOTAResponseParser.InternalKCSOTAResponse(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  v6 = a2[5];
  v7 = a1[5];
  a1[5] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  v8 = a2[9];
  v9 = a1[9];
  a1[9] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[10] = a2[10];
  a1[11] = a2[11];
  a1[12] = a2[12];
  v10 = a2[13];
  v11 = a1[13];
  a1[13] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[14] = a2[14];
  a1[15] = a2[15];
  return a1;
}

__n128 initializeWithTake for KCSOTAResponseParser.InternalKCSOTAResponse(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for KCSOTAResponseParser.InternalKCSOTAResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease(v7);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 72);
  v9 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  swift_bridgeObjectRelease(v9);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  v10 = *(_QWORD *)(a2 + 104);
  v11 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v10;
  swift_bridgeObjectRelease(v11);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for KCSOTAResponseParser.InternalKCSOTAResponse(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 128))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KCSOTAResponseParser.InternalKCSOTAResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 128) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for KCSOTAResponseParser.InternalKCSOTAResponse()
{
  return &type metadata for KCSOTAResponseParser.InternalKCSOTAResponse;
}

__n128 initializeWithTake for KCSOTAResponseParser.InternalKernelConfig(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for KCSOTAResponseParser.InternalKernelConfig()
{
  return &type metadata for KCSOTAResponseParser.InternalKernelConfig;
}

uint64_t destroy for KCSOTAResponse.HostConfiguration(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  return swift_bridgeObjectRelease(a1[3]);
}

uint64_t *initializeWithCopy for KCSOTAResponse.HostConfiguration(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for KCSOTAResponse.HostConfiguration(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  v6 = a1[1];
  v7 = a2[1];
  a1[1] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

_QWORD *assignWithTake for KCSOTAResponse.HostConfiguration(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = a1[3];
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for KCSOTAResponse.HostConfiguration(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for KCSOTAResponse.HostConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for KCSOTAResponse.HostConfiguration()
{
  return &type metadata for KCSOTAResponse.HostConfiguration;
}

uint64_t _s9SPREngine20KCSOTAResponseParserC20InternalKernelConfigVwxx_0(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
}

uint64_t _s9SPREngine20KCSOTAResponseParserC20InternalKernelConfigVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *_s9SPREngine20KCSOTAResponseParserC20InternalKernelConfigVwca_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  v6 = a2[5];
  v7 = a1[5];
  a1[5] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

uint64_t _s9SPREngine20KCSOTAResponseParserC20InternalKernelConfigVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease(v7);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

ValueMetadata *type metadata accessor for KCSOTAResponseParser.InternalProfile()
{
  return &type metadata for KCSOTAResponseParser.InternalProfile;
}

uint64_t initializeWithCopy for KCSOTAResponseParser.JSONObject(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *assignWithCopy for KCSOTAResponseParser.JSONObject(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for KCSOTAResponseParser.JSONObject(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for KCSOTAResponseParser.JSONObject()
{
  return &type metadata for KCSOTAResponseParser.JSONObject;
}

ValueMetadata *type metadata accessor for KCSOTAResponseParser.DecodingError()
{
  return &type metadata for KCSOTAResponseParser.DecodingError;
}

uint64_t *initializeBufferWithCopyOfBuffer for LazyBase64Data(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  sub_100005D9C(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for LazyBase64Data(uint64_t a1)
{
  return sub_100005DE0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *assignWithCopy for LazyBase64Data(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  sub_100005D9C(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_100005DE0(v5, v6);
  return a1;
}

uint64_t *assignWithTake for LazyBase64Data(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100005DE0(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for LazyBase64Data(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for LazyBase64Data(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LazyBase64Data()
{
  return &type metadata for LazyBase64Data;
}

void destroy for KCSOTAResponse.Profile(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  unint64_t v15;
  _TtC14softposreaderd12RemoteReader *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;

  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 8), a2, a3, a4, a5, a6, a7, a8);
  v15 = *(_QWORD *)(a1 + 24);
  if (v15 >> 60 != 15)
    sub_100005DE0(*(_QWORD *)(a1 + 16), v15);
  v16 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 32);
  if (v16 != (_TtC14softposreaderd12RemoteReader *)1)
  {
    swift_bridgeObjectRelease(v16, (SEL)v15, v9, v10, v11, v12, v13, v14);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 40), v17, v18, v19, v20, v21, v22, v23);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 56), v24, v25, v26, v27, v28, v29, v30);
  }
}

uint64_t initializeWithCopy for KCSOTAResponse.Profile(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = (_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *v5;
  }
  else
  {
    v7 = *(_QWORD *)v5;
    sub_100005D9C(v7, v6);
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v6;
  }
  v8 = *(_QWORD *)(a2 + 32);
  if (v8 == 1)
  {
    v9 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v9;
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 40);
    v10 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = v11;
    v12 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v10;
    *(_QWORD *)(a1 + 56) = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for KCSOTAResponse.Profile(uint64_t a1, uint64_t a2)
{
  _TtC14softposreaderd12RemoteReader *v4;
  SEL v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _OWORD *v18;
  _TtC14softposreaderd12RemoteReader *v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  _TtC14softposreaderd12RemoteReader *v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  _TtC14softposreaderd12RemoteReader *v40;
  SEL v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4, v5, v6, v7, v8, v9, v10, v11);
  v12 = (uint64_t *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24) >> 60 == 15)
  {
    if (v13 >> 60 != 15)
    {
      v14 = *v12;
      sub_100005D9C(*v12, *(_QWORD *)(a2 + 24));
      *(_QWORD *)(a1 + 16) = v14;
      *(_QWORD *)(a1 + 24) = v13;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v13 >> 60 == 15)
  {
    sub_1000C6150(a1 + 16);
LABEL_6:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v12;
    goto LABEL_8;
  }
  v15 = *v12;
  sub_100005D9C(*v12, *(_QWORD *)(a2 + 24));
  v16 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(a1 + 24) = v13;
  sub_100005DE0(v16, v17);
LABEL_8:
  v18 = (_OWORD *)(a1 + 32);
  v19 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 32);
  v21 = (_OWORD *)(a2 + 32);
  v20 = *(_QWORD *)(a2 + 32);
  if (v19 == (_TtC14softposreaderd12RemoteReader *)1)
  {
    if (v20 == 1)
    {
      v22 = *(_OWORD *)(a2 + 48);
      *v18 = *v21;
      *(_OWORD *)(a1 + 48) = v22;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v20;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v20 == 1)
  {
    sub_100098FEC((_QWORD *)(a1 + 32));
    v23 = *(_OWORD *)(a2 + 48);
    *v18 = *v21;
    *(_OWORD *)(a1 + 48) = v23;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease(v19, v24, v25, v26, v27, v28, v29, v30);
    v31 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease(v31, v32, v33, v34, v35, v36, v37, v38);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    v39 = *(_QWORD *)(a2 + 56);
    v40 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v39;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease(v40, v41, v42, v43, v44, v45, v46, v47);
  }
  return a1;
}

uint64_t sub_1000C6150(uint64_t a1)
{
  sub_100005DE0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t assignWithTake for KCSOTAResponse.Profile(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v10;
  _TtC14softposreaderd12RemoteReader *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _OWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _TtC14softposreaderd12RemoteReader *v22;
  uint64_t v23;
  __int128 v24;
  _TtC14softposreaderd12RemoteReader *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  _TtC14softposreaderd12RemoteReader *v34;
  SEL v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;

  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v10;
  swift_bridgeObjectRelease(v11, (SEL)a2, a3, a4, a5, a6, a7, a8);
  v18 = (_OWORD *)(a2 + 16);
  v19 = *(_QWORD *)(a1 + 24);
  if (v19 >> 60 == 15)
    goto LABEL_4;
  v20 = *(_QWORD *)(a2 + 24);
  if (v20 >> 60 == 15)
  {
    sub_1000C6150(a1 + 16);
LABEL_4:
    *(_OWORD *)(a1 + 16) = *v18;
    goto LABEL_6;
  }
  v21 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)v18;
  *(_QWORD *)(a1 + 24) = v20;
  sub_100005DE0(v21, v19);
LABEL_6:
  v22 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 32);
  v23 = *(_QWORD *)(a2 + 32);
  if (v22 != (_TtC14softposreaderd12RemoteReader *)1)
  {
    if (v23 != 1)
    {
      *(_QWORD *)(a1 + 32) = v23;
      swift_bridgeObjectRelease(v22, (SEL)v19, v12, v13, v14, v15, v16, v17);
      v25 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
      v33 = *(_QWORD *)(a2 + 56);
      v34 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 56);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v33;
      swift_bridgeObjectRelease(v34, v35, v36, v37, v38, v39, v40, v41);
      return a1;
    }
    sub_100098FEC((_QWORD *)(a1 + 32));
  }
  v24 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v24;
  return a1;
}

uint64_t _s9SPREngine20KCSOTAResponseParserC20InternalKernelConfigVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1000C62A8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for KCSOTAResponse.Profile()
{
  return &type metadata for KCSOTAResponse.Profile;
}

void destroy for KCSOTAResponse(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  unint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  unint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  unint64_t v23;
  _TtC14softposreaderd12RemoteReader *v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  _TtC14softposreaderd12RemoteReader *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  unint64_t v46;
  _TtC14softposreaderd12RemoteReader *v47;
  SEL v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  SEL v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;

  v9 = *(_QWORD *)(a1 + 8);
  if (v9 >> 60 != 15)
    sub_100005DE0(*(_QWORD *)a1, v9);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 24), (SEL)v9, a3, a4, a5, a6, a7, a8);
  v16 = *(_QWORD *)(a1 + 40);
  if (v16 >> 60 != 15)
    sub_100005DE0(*(_QWORD *)(a1 + 32), v16);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 56), (SEL)v16, v10, v11, v12, v13, v14, v15);
  v23 = *(_QWORD *)(a1 + 72);
  if (v23 >> 60 != 15)
    sub_100005DE0(*(_QWORD *)(a1 + 64), v23);
  v24 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 80);
  if (v24 != (_TtC14softposreaderd12RemoteReader *)1)
  {
    swift_bridgeObjectRelease(v24, (SEL)v23, v17, v18, v19, v20, v21, v22);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 88), v25, v26, v27, v28, v29, v30, v31);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 104), v32, v33, v34, v35, v36, v37, v38);
  }
  v39 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 120);
  if (v39)
  {
    swift_bridgeObjectRelease(v39, (SEL)v23, v17, v18, v19, v20, v21, v22);
    v46 = *(_QWORD *)(a1 + 136);
    if (v46 >> 60 != 15)
      sub_100005DE0(*(_QWORD *)(a1 + 128), v46);
    v47 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 144);
    if (v47 != (_TtC14softposreaderd12RemoteReader *)1)
    {
      swift_bridgeObjectRelease(v47, (SEL)v46, v40, v41, v42, v43, v44, v45);
      swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 152), v48, v49, v50, v51, v52, v53, v54);
      swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 168), v55, v56, v57, v58, v59, v60, v61);
    }
  }
}

uint64_t initializeWithCopy for KCSOTAResponse(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = a2[1];
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v5 = *a2;
    sub_100005D9C(*a2, a2[1]);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
  }
  v6 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v6;
  v7 = a2 + 4;
  v8 = a2[5];
  swift_bridgeObjectRetain();
  if (v8 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 32) = *v7;
  }
  else
  {
    v9 = *(_QWORD *)v7;
    sub_100005D9C(v9, v8);
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v8;
  }
  v10 = a2[7];
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_QWORD *)(a1 + 56) = v10;
  v11 = a2 + 8;
  v12 = a2[9];
  swift_bridgeObjectRetain();
  if (v12 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 64) = *v11;
  }
  else
  {
    v13 = *(_QWORD *)v11;
    sub_100005D9C(v13, v12);
    *(_QWORD *)(a1 + 64) = v13;
    *(_QWORD *)(a1 + 72) = v12;
  }
  v14 = a2[10];
  if (v14 != 1)
  {
    v20 = a2[11];
    v19 = a2[12];
    *(_QWORD *)(a1 + 80) = v14;
    *(_QWORD *)(a1 + 88) = v20;
    v21 = a2[13];
    *(_QWORD *)(a1 + 96) = v19;
    *(_QWORD *)(a1 + 104) = v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = a2[15];
    if (v16)
      goto LABEL_12;
LABEL_15:
    v22 = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
    *(_OWORD *)(a1 + 128) = v22;
    v23 = *((_OWORD *)a2 + 10);
    *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
    *(_OWORD *)(a1 + 160) = v23;
    return a1;
  }
  v15 = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a1 + 96) = v15;
  v16 = a2[15];
  if (!v16)
    goto LABEL_15;
LABEL_12:
  *(_QWORD *)(a1 + 112) = a2[14];
  *(_QWORD *)(a1 + 120) = v16;
  v17 = a2 + 16;
  v18 = a2[17];
  swift_bridgeObjectRetain();
  if (v18 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 128) = *v17;
  }
  else
  {
    v24 = *(_QWORD *)v17;
    sub_100005D9C(v24, v18);
    *(_QWORD *)(a1 + 128) = v24;
    *(_QWORD *)(a1 + 136) = v18;
  }
  v25 = a2[18];
  if (v25 == 1)
  {
    v26 = *((_OWORD *)a2 + 10);
    *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
    *(_OWORD *)(a1 + 160) = v26;
  }
  else
  {
    v28 = a2[19];
    v27 = a2[20];
    *(_QWORD *)(a1 + 144) = v25;
    *(_QWORD *)(a1 + 152) = v28;
    v29 = a2[21];
    *(_QWORD *)(a1 + 160) = v27;
    *(_QWORD *)(a1 + 168) = v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for KCSOTAResponse(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _TtC14softposreaderd12RemoteReader *v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _TtC14softposreaderd12RemoteReader *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _OWORD *v44;
  _TtC14softposreaderd12RemoteReader *v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 v48;
  __int128 v49;
  SEL v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  _TtC14softposreaderd12RemoteReader *v57;
  SEL v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  _TtC14softposreaderd12RemoteReader *v65;
  SEL v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  __int128 *v73;
  __int128 *v74;
  _TtC14softposreaderd12RemoteReader *v75;
  uint64_t v76;
  SEL v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  uint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  _OWORD *v87;
  unint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _TtC14softposreaderd12RemoteReader *v101;
  __int128 *v102;
  __int128 v103;
  SEL v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  _TtC14softposreaderd12RemoteReader *v111;
  SEL v112;
  id v113;
  id v114;
  id v115;
  id v116;
  id v117;
  id v118;
  uint64_t v119;
  _TtC14softposreaderd12RemoteReader *v120;
  SEL v121;
  id v122;
  id v123;
  id v124;
  id v125;
  id v126;
  id v127;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8) >> 60 == 15)
  {
    if (v4 >> 60 != 15)
    {
      v5 = *(_QWORD *)a2;
      sub_100005D9C(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      *(_QWORD *)a1 = v5;
      *(_QWORD *)(a1 + 8) = v4;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
    sub_1000C6150(a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  v6 = *(_QWORD *)a2;
  sub_100005D9C(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v4;
  sub_100005DE0(v7, v8);
LABEL_8:
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v9 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v9, v10, v11, v12, v13, v14, v15, v16);
  v17 = (uint64_t *)(a2 + 32);
  v18 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40) >> 60 == 15)
  {
    if (v18 >> 60 != 15)
    {
      v19 = *v17;
      sub_100005D9C(*v17, *(_QWORD *)(a2 + 40));
      *(_QWORD *)(a1 + 32) = v19;
      *(_QWORD *)(a1 + 40) = v18;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v18 >> 60 == 15)
  {
    sub_1000C6150(a1 + 32);
LABEL_13:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v17;
    goto LABEL_15;
  }
  v20 = *v17;
  sub_100005D9C(*v17, *(_QWORD *)(a2 + 40));
  v21 = *(_QWORD *)(a1 + 32);
  v22 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v20;
  *(_QWORD *)(a1 + 40) = v18;
  sub_100005DE0(v21, v22);
LABEL_15:
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v23 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
  v38 = (uint64_t *)(a2 + 64);
  v39 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a1 + 72) >> 60 == 15)
  {
    if (v39 >> 60 != 15)
    {
      v40 = *v38;
      sub_100005D9C(*v38, *(_QWORD *)(a2 + 72));
      *(_QWORD *)(a1 + 64) = v40;
      *(_QWORD *)(a1 + 72) = v39;
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v39 >> 60 == 15)
  {
    sub_1000C6150(a1 + 64);
LABEL_20:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)v38;
    goto LABEL_22;
  }
  v41 = *v38;
  sub_100005D9C(*v38, *(_QWORD *)(a2 + 72));
  v42 = *(_QWORD *)(a1 + 64);
  v43 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v41;
  *(_QWORD *)(a1 + 72) = v39;
  sub_100005DE0(v42, v43);
LABEL_22:
  v44 = (_OWORD *)(a1 + 80);
  v45 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 80);
  v47 = (_OWORD *)(a2 + 80);
  v46 = *(_QWORD *)(a2 + 80);
  if (v45 == (_TtC14softposreaderd12RemoteReader *)1)
  {
    if (v46 == 1)
    {
      v48 = *(_OWORD *)(a2 + 96);
      *v44 = *v47;
      *(_OWORD *)(a1 + 96) = v48;
    }
    else
    {
      *(_QWORD *)(a1 + 80) = v46;
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v46 == 1)
  {
    sub_100098FEC((_QWORD *)(a1 + 80));
    v49 = *(_OWORD *)(a2 + 96);
    *v44 = *v47;
    *(_OWORD *)(a1 + 96) = v49;
  }
  else
  {
    *(_QWORD *)(a1 + 80) = v46;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease(v45, v50, v51, v52, v53, v54, v55, v56);
    v57 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease(v57, v58, v59, v60, v61, v62, v63, v64);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    v65 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 104);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease(v65, v66, v67, v68, v69, v70, v71, v72);
  }
  v73 = (__int128 *)(a1 + 112);
  v74 = (__int128 *)(a2 + 112);
  v75 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 120);
  v76 = *(_QWORD *)(a2 + 120);
  if (v75)
  {
    if (!v76)
    {
      sub_1000C6A74(a1 + 112, v31, v32, v33, v34, v35, v36, v37);
      v89 = *(_OWORD *)(a2 + 160);
      v91 = *v74;
      v90 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 160) = v89;
      *v73 = v91;
      *(_OWORD *)(a1 + 128) = v90;
      return a1;
    }
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease(v75, v77, v78, v79, v80, v81, v82, v83);
    v84 = (uint64_t *)(a2 + 128);
    v85 = *(_QWORD *)(a2 + 136);
    if (*(_QWORD *)(a1 + 136) >> 60 == 15)
    {
      if (v85 >> 60 != 15)
      {
        v86 = *v84;
        sub_100005D9C(*v84, *(_QWORD *)(a2 + 136));
        *(_QWORD *)(a1 + 128) = v86;
        *(_QWORD *)(a1 + 136) = v85;
LABEL_46:
        v73 = (__int128 *)(a1 + 144);
        v101 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 144);
        v102 = (__int128 *)(a2 + 144);
        v96 = *(_QWORD *)(a2 + 144);
        if (v101 == (_TtC14softposreaderd12RemoteReader *)1)
        {
          if (v96 == 1)
          {
            v92 = *v102;
            v93 = *(_OWORD *)(a2 + 160);
            goto LABEL_49;
          }
          goto LABEL_50;
        }
        if (v96 == 1)
        {
          sub_100098FEC((_QWORD *)(a1 + 144));
          v103 = *(_OWORD *)(a2 + 160);
          *v73 = *v102;
          *(_OWORD *)(a1 + 160) = v103;
        }
        else
        {
          *(_QWORD *)(a1 + 144) = v96;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease(v101, v104, v105, v106, v107, v108, v109, v110);
          v111 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 152);
          *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease(v111, v112, v113, v114, v115, v116, v117, v118);
          *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
          v119 = *(_QWORD *)(a2 + 168);
          v120 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 168);
          *(_QWORD *)(a1 + 168) = v119;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease(v120, v121, v122, v123, v124, v125, v126, v127);
        }
        return a1;
      }
    }
    else
    {
      if (v85 >> 60 != 15)
      {
        v98 = *v84;
        sub_100005D9C(*v84, *(_QWORD *)(a2 + 136));
        v99 = *(_QWORD *)(a1 + 128);
        v100 = *(_QWORD *)(a1 + 136);
        *(_QWORD *)(a1 + 128) = v98;
        *(_QWORD *)(a1 + 136) = v85;
        sub_100005DE0(v99, v100);
        goto LABEL_46;
      }
      sub_1000C6150(a1 + 128);
    }
    *(_OWORD *)(a1 + 128) = *(_OWORD *)v84;
    goto LABEL_46;
  }
  if (!v76)
  {
    v92 = *v74;
    v93 = *(_OWORD *)(a2 + 128);
    v94 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v94;
LABEL_49:
    *v73 = v92;
    v73[1] = v93;
    return a1;
  }
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v87 = (_OWORD *)(a2 + 128);
  v88 = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  if (v88 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 128) = *v87;
  }
  else
  {
    v95 = *(_QWORD *)v87;
    sub_100005D9C(v95, v88);
    *(_QWORD *)(a1 + 128) = v95;
    *(_QWORD *)(a1 + 136) = v88;
  }
  v96 = *(_QWORD *)(a2 + 144);
  if (v96 != 1)
  {
LABEL_50:
    *(_QWORD *)(a1 + 144) = v96;
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return a1;
  }
  v97 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v97;
  return a1;
}

uint64_t sub_1000C6A74(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  destroy for KCSOTAResponse.Profile(a1, (const char *)&type metadata for KCSOTAResponse.Profile, a3, a4, a5, a6, a7, a8);
  return a1;
}

__n128 initializeWithTake for KCSOTAResponse(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v8;
  return result;
}

uint64_t assignWithTake for KCSOTAResponse(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _TtC14softposreaderd12RemoteReader *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  _OWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _TtC14softposreaderd12RemoteReader *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  _OWORD *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _TtC14softposreaderd12RemoteReader *v37;
  uint64_t v38;
  __int128 v39;
  _TtC14softposreaderd12RemoteReader *v40;
  SEL v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  _TtC14softposreaderd12RemoteReader *v49;
  SEL v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  _TtC14softposreaderd12RemoteReader *v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  _TtC14softposreaderd12RemoteReader *v71;
  uint64_t v72;
  __int128 v73;
  _TtC14softposreaderd12RemoteReader *v74;
  SEL v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  uint64_t v82;
  _TtC14softposreaderd12RemoteReader *v83;
  SEL v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;

  v10 = *(_QWORD *)(a1 + 8);
  if (v10 >> 60 == 15)
    goto LABEL_4;
  v11 = *(_QWORD *)(a2 + 8);
  if (v11 >> 60 == 15)
  {
    sub_1000C6150(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  v12 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v11;
  sub_100005DE0(v12, v10);
LABEL_6:
  v13 = *(_QWORD *)(a2 + 24);
  v14 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v13;
  swift_bridgeObjectRelease(v14, (SEL)v10, a3, a4, a5, a6, a7, a8);
  v21 = (_OWORD *)(a2 + 32);
  v22 = *(_QWORD *)(a1 + 40);
  if (v22 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 32) = *v21;
    goto LABEL_11;
  }
  v23 = *(_QWORD *)(a2 + 40);
  if (v23 >> 60 == 15)
  {
    sub_1000C6150(a1 + 32);
    goto LABEL_9;
  }
  v24 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)v21;
  *(_QWORD *)(a1 + 40) = v23;
  sub_100005DE0(v24, v22);
LABEL_11:
  v25 = *(_QWORD *)(a2 + 56);
  v26 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v25;
  swift_bridgeObjectRelease(v26, (SEL)v22, v15, v16, v17, v18, v19, v20);
  v33 = (_OWORD *)(a2 + 64);
  v34 = *(_QWORD *)(a1 + 72);
  if (v34 >> 60 == 15)
  {
LABEL_14:
    *(_OWORD *)(a1 + 64) = *v33;
    goto LABEL_16;
  }
  v35 = *(_QWORD *)(a2 + 72);
  if (v35 >> 60 == 15)
  {
    sub_1000C6150(a1 + 64);
    goto LABEL_14;
  }
  v36 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)v33;
  *(_QWORD *)(a1 + 72) = v35;
  sub_100005DE0(v36, v34);
LABEL_16:
  v37 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 80);
  v38 = *(_QWORD *)(a2 + 80);
  if (v37 == (_TtC14softposreaderd12RemoteReader *)1)
  {
LABEL_19:
    v39 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v39;
    goto LABEL_21;
  }
  if (v38 == 1)
  {
    sub_100098FEC((_QWORD *)(a1 + 80));
    goto LABEL_19;
  }
  *(_QWORD *)(a1 + 80) = v38;
  swift_bridgeObjectRelease(v37, (SEL)v34, v27, v28, v29, v30, v31, v32);
  v40 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease(v40, v41, v42, v43, v44, v45, v46, v47);
  v48 = *(_QWORD *)(a2 + 104);
  v49 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v48;
  swift_bridgeObjectRelease(v49, v50, v51, v52, v53, v54, v55, v56);
LABEL_21:
  v57 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 120);
  if (!v57)
  {
LABEL_28:
    v68 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v68;
    v69 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v69;
    return a1;
  }
  v58 = *(_QWORD *)(a2 + 120);
  if (!v58)
  {
    sub_1000C6A74(a1 + 112, v34, v27, v28, v29, v30, v31, v32);
    goto LABEL_28;
  }
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v58;
  swift_bridgeObjectRelease(v57, (SEL)v34, v27, v28, v29, v30, v31, v32);
  v65 = (_QWORD *)(a2 + 128);
  v66 = *(_QWORD *)(a1 + 136);
  if (v66 >> 60 != 15)
  {
    v67 = *(_QWORD *)(a2 + 136);
    if (v67 >> 60 != 15)
    {
      v70 = *(_QWORD *)(a1 + 128);
      *(_QWORD *)(a1 + 128) = *v65;
      *(_QWORD *)(a1 + 136) = v67;
      sub_100005DE0(v70, v66);
      goto LABEL_30;
    }
    sub_1000C6150(a1 + 128);
  }
  *(_OWORD *)(a1 + 128) = *(_OWORD *)v65;
LABEL_30:
  v71 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 144);
  v72 = *(_QWORD *)(a2 + 144);
  if (v71 != (_TtC14softposreaderd12RemoteReader *)1)
  {
    if (v72 != 1)
    {
      *(_QWORD *)(a1 + 144) = v72;
      swift_bridgeObjectRelease(v71, (SEL)v66, v59, v60, v61, v62, v63, v64);
      v74 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 152);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      swift_bridgeObjectRelease(v74, v75, v76, v77, v78, v79, v80, v81);
      v82 = *(_QWORD *)(a2 + 168);
      v83 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 168);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = v82;
      swift_bridgeObjectRelease(v83, v84, v85, v86, v87, v88, v89, v90);
      return a1;
    }
    sub_100098FEC((_QWORD *)(a1 + 144));
  }
  v73 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v73;
  return a1;
}

uint64_t getEnumTagSinglePayload for KCSOTAResponse(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 176))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KCSOTAResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 176) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 176) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for KCSOTAResponse()
{
  return &type metadata for KCSOTAResponse;
}

unint64_t sub_1000C6E08()
{
  unint64_t result;

  result = qword_1001B1E38;
  if (!qword_1001B1E38)
  {
    result = swift_getWitnessTable(&unk_100160CA4, &type metadata for KCSOTAResponseParser.DecodingError);
    atomic_store(result, (unint64_t *)&qword_1001B1E38);
  }
  return result;
}

unint64_t sub_1000C6E4C()
{
  unint64_t result;

  result = qword_1001B1E48;
  if (!qword_1001B1E48)
  {
    result = swift_getWitnessTable(&unk_1001613D0, &type metadata for KCSOTAResponseParser.JSONObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B1E48);
  }
  return result;
}

uint64_t sub_1000C6E90(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x654B676E69646F63 && a2 == 0xE900000000000079)
  {
    v5 = 0xE900000000000079;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x654B676E69646F63, 0xE900000000000079, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x65676E6172 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65676E6172, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1000C6F84(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _TtC14softposreaderd12RemoteReader *v11;
  _TtC14softposreaderd12RemoteReader *v12;
  uint64_t v13;
  uint64_t v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  char v23;

  v3 = sub_100003A2C(&qword_1001B1EC8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_100005EF8(a1, v7);
  v9 = sub_1000C6E4C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for KCSOTAResponseParser.JSONObject.CodingKeys, &type metadata for KCSOTAResponseParser.JSONObject.CodingKeys, v9, v7, v8);
  if (v1)
  {
    sub_100005D3C(a1);
  }
  else
  {
    LOBYTE(v22) = 0;
    v8 = KeyedDecodingContainer.decode(_:forKey:)(&v22, v3);
    v12 = v11;
    v13 = sub_100003A2C(&qword_1001B1E20);
    v23 = 1;
    v14 = sub_1000C804C(&qword_1001B1ED0, &qword_1001B1E20, (uint64_t)&protocol witness table for Int, (uint64_t)&protocol conformance descriptor for <> Range<A>);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v13, &v23, v3, v13, v14);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100005D3C(a1);
    swift_bridgeObjectRelease(v12, v15, v16, v17, v18, v19, v20, v21);
  }
  return v8;
}

uint64_t sub_1000C7168(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  char v8;

  if (a1 == 0xD000000000000012)
  {
    v4 = 0x800000010016E290;
    if (a2 == 0x800000010016E290)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x800000010016E290, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000012)
  {
    v6 = 0x800000010016E2B0;
    if (a2 == 0x800000010016E2B0)
      goto LABEL_10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x800000010016E2B0, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
LABEL_10:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x800000010016E2D0)
  {
    v7 = 0x800000010016E2D0;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x800000010016E2D0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_16;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x800000010016E2F0)
  {
    swift_bridgeObjectRelease(0x800000010016E2F0);
    return 3;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000010016E2F0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

void sub_1000C72FC(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  _TtC14softposreaderd12RemoteReader *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _TtC14softposreaderd12RemoteReader *v31;
  _TtC14softposreaderd12RemoteReader *v32;
  uint64_t v33;
  _TtC14softposreaderd12RemoteReader *v34;
  uint64_t v35;
  uint64_t v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  _TtC14softposreaderd12RemoteReader *v46;
  uint64_t v47;
  SEL v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  SEL v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  SEL v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  __int128 v76;
  _OWORD *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _TtC14softposreaderd12RemoteReader *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _OWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  _TtC14softposreaderd12RemoteReader *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _TtC14softposreaderd12RemoteReader *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _TtC14softposreaderd12RemoteReader *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _TtC14softposreaderd12RemoteReader *v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD v120[5];
  char v121;

  v5 = sub_100003A2C(&qword_1001B1E90);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  v95 = a1;
  sub_100005EF8(a1, v9);
  v11 = sub_1000C7FB4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for KCSOTAResponseParser.InternalKCSOTAResponse.CodingKeys, &type metadata for KCSOTAResponseParser.InternalKCSOTAResponse.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_100005D3C(v95);
    swift_bridgeObjectRelease(0, v13, v14, v15, v16, v17, v18, v19);
    swift_bridgeObjectRelease(0, v20, v21, v22, v23, v24, v25, v26);
  }
  else
  {
    v93 = a2;
    v94 = v6;
    LOBYTE(v96) = 0;
    v12 = sub_1000C7850();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v104, &type metadata for KCSOTAResponseParser.JSONObject, &v96, v5, &type metadata for KCSOTAResponseParser.JSONObject, v12);
    v27 = v105;
    v92 = v104;
    v28 = v106;
    v29 = v107;
    LOBYTE(v96) = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for KCSOTAResponseParser.JSONObject, &v96, v5, &type metadata for KCSOTAResponseParser.JSONObject, v12);
    v90 = v29;
    v91 = v28;
    v30 = v107;
    v88 = v104;
    v89 = v106;
    LOBYTE(v96) = 2;
    v31 = v105;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for KCSOTAResponseParser.JSONObject, &v96, v5, &type metadata for KCSOTAResponseParser.JSONObject, v12);
    v86 = v30;
    v87 = v31;
    v33 = v104;
    v32 = v105;
    v84 = v107;
    v85 = v106;
    v121 = 3;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v120, &type metadata for KCSOTAResponseParser.JSONObject, &v121, v5, &type metadata for KCSOTAResponseParser.JSONObject, v12);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v8, v5);
    v35 = v120[0];
    v34 = (_TtC14softposreaderd12RemoteReader *)v120[1];
    v94 = v120[0];
    v36 = v120[3];
    v82 = v120[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease(0, v37, v38, v39, v40, v41, v42, v43);
    v44 = v33;
    v83 = v33;
    v45 = v92;
    *(_QWORD *)&v96 = v92;
    *((_QWORD *)&v96 + 1) = v27;
    *(_QWORD *)&v97 = v91;
    *((_QWORD *)&v97 + 1) = v90;
    v46 = v87;
    *(_QWORD *)&v98 = v88;
    *((_QWORD *)&v98 + 1) = v87;
    *(_QWORD *)&v99 = v89;
    *((_QWORD *)&v99 + 1) = v86;
    *(_QWORD *)&v100 = v44;
    *((_QWORD *)&v100 + 1) = v32;
    *(_QWORD *)&v101 = v85;
    *((_QWORD *)&v101 + 1) = v84;
    *(_QWORD *)&v102 = v35;
    *((_QWORD *)&v102 + 1) = v34;
    v47 = v82;
    *(_QWORD *)&v103 = v82;
    *((_QWORD *)&v103 + 1) = v36;
    sub_1000C7FF8(&v96);
    swift_bridgeObjectRelease(v27, v48, v49, v50, v51, v52, v53, v54);
    swift_bridgeObjectRelease(v46, v55, v56, v57, v58, v59, v60, v61);
    swift_bridgeObjectRelease(v32, v62, v63, v64, v65, v66, v67, v68);
    swift_bridgeObjectRelease(v34, v69, v70, v71, v72, v73, v74, v75);
    sub_100005D3C(v95);
    v104 = v45;
    v105 = v27;
    v106 = v91;
    v107 = v90;
    v108 = v88;
    v109 = v46;
    v110 = v89;
    v111 = v86;
    v112 = v83;
    v113 = v32;
    v114 = v85;
    v115 = v84;
    v116 = v94;
    v117 = v34;
    v118 = v47;
    v119 = v36;
    sub_1000C5444(&v104);
    v76 = v101;
    v77 = v93;
    v93[4] = v100;
    v77[5] = v76;
    v78 = v103;
    v77[6] = v102;
    v77[7] = v78;
    v79 = v97;
    *v77 = v96;
    v77[1] = v79;
    v80 = v99;
    v77[2] = v98;
    v77[3] = v80;
  }
}

uint64_t sub_1000C7714(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000013)
  {
    v4 = 0x800000010016E270;
    if (a2 == 0x800000010016E270)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x800000010016E270, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x666E6F4374736F68 && a2 == 0xEA00000000006769)
  {
    swift_bridgeObjectRelease(0xEA00000000006769);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x666E6F4374736F68, 0xEA00000000006769, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_1000C780C()
{
  unint64_t result;

  result = qword_1001B1E60;
  if (!qword_1001B1E60)
  {
    result = swift_getWitnessTable(&unk_100161380, &type metadata for KCSOTAResponseParser.InternalProfile.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B1E60);
  }
  return result;
}

unint64_t sub_1000C7850()
{
  unint64_t result;

  result = qword_1001B1E68;
  if (!qword_1001B1E68)
  {
    result = swift_getWitnessTable(&unk_100160CCC, &type metadata for KCSOTAResponseParser.JSONObject);
    atomic_store(result, (unint64_t *)&qword_1001B1E68);
  }
  return result;
}

uint64_t sub_1000C7894(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x747069726373 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x747069726373, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void sub_1000C7964(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  _TtC14softposreaderd12RemoteReader *v26;
  _TtC14softposreaderd12RemoteReader *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  SEL v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _TtC14softposreaderd12RemoteReader *v60;
  uint64_t v61;
  uint64_t v62;
  char v63;

  v57 = a5;
  v58 = sub_100003A2C(a2);
  v9 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_100005EF8(a1, v12);
  v14 = a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)(a4, a4, v14, v12, v13);
  if (v5)
  {
    sub_100005D3C(a1);
    swift_bridgeObjectRelease(0, v19, v20, v21, v22, v23, v24, v25);
  }
  else
  {
    v15 = v9;
    v16 = v57;
    v63 = 0;
    v17 = sub_1000C7850();
    v18 = v58;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for KCSOTAResponseParser.JSONObject, &v63, v58, &type metadata for KCSOTAResponseParser.JSONObject, v17);
    v26 = v60;
    v55 = v61;
    v56 = v59;
    v54 = v62;
    v63 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v59, &type metadata for KCSOTAResponseParser.JSONObject, &v63, v18, &type metadata for KCSOTAResponseParser.JSONObject, v17);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v11, v18);
    v28 = v59;
    v27 = v60;
    v29 = v61;
    v30 = v62;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease(0, v31, v32, v33, v34, v35, v36, v37);
    sub_100005D3C(a1);
    swift_bridgeObjectRelease(v27, v38, v39, v40, v41, v42, v43, v44);
    swift_bridgeObjectRelease(v26, v45, v46, v47, v48, v49, v50, v51);
    *v16 = v56;
    v16[1] = v26;
    v52 = v54;
    v16[2] = v55;
    v16[3] = v52;
    v16[4] = v28;
    v16[5] = v27;
    v16[6] = v29;
    v16[7] = v30;
  }
}

uint64_t sub_1000C7B6C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6941737361707962 && a2 == 0xE900000000000064)
  {
    v5 = 0xE900000000000064;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6941737361707962, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x4374726F70707573 && a2 == 0xED0000787254706ELL)
  {
    v7 = 0xED0000787254706ELL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4374726F70707573, 0xED0000787254706ELL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x437972746E756F63 && a2 == 0xEB0000000065646FLL)
  {
    swift_bridgeObjectRelease(0xEB0000000065646FLL);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x437972746E756F63, 0xEB0000000065646FLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1000C7D08(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  SEL v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  v3 = sub_100003A2C(&qword_1001B1E70);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_100005EF8(a1, v7);
  v9 = sub_1000C7F2C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for KCSOTAResponse.HostConfiguration.CodingKeys, &type metadata for KCSOTAResponse.HostConfiguration.CodingKeys, v9, v7, v8);
  if (v1)
  {
    v27 = 0;
    sub_100005D3C(a1);
    swift_bridgeObjectRelease(0, v12, v13, v14, v15, v16, v17, v18);
    swift_bridgeObjectRelease(0, v19, v20, v21, v22, v23, v24, v25);
  }
  else
  {
    v10 = sub_100003A2C((uint64_t *)&unk_1001AE460);
    v29 = 0;
    v11 = sub_1000C804C(&qword_1001ADA08, (uint64_t *)&unk_1001AE460, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v30, v10, &v29, v3, v10, v11);
    v27 = v30;
    v29 = 1;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v30, v10, &v29, v3, v10, v11);
    LOBYTE(v30) = 2;
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v30, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100005D3C(a1);
  }
  return v27;
}

unint64_t sub_1000C7F2C()
{
  unint64_t result;

  result = qword_1001B1E78;
  if (!qword_1001B1E78)
  {
    result = swift_getWitnessTable(&unk_100161330, &type metadata for KCSOTAResponse.HostConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B1E78);
  }
  return result;
}

unint64_t sub_1000C7F70()
{
  unint64_t result;

  result = qword_1001B1E88;
  if (!qword_1001B1E88)
  {
    result = swift_getWitnessTable(&unk_1001612E0, &type metadata for KCSOTAResponseParser.InternalKernelConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B1E88);
  }
  return result;
}

unint64_t sub_1000C7FB4()
{
  unint64_t result;

  result = qword_1001B1E98;
  if (!qword_1001B1E98)
  {
    result = swift_getWitnessTable(&unk_100161290, &type metadata for KCSOTAResponseParser.InternalKCSOTAResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B1E98);
  }
  return result;
}

_QWORD *sub_1000C7FF8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = a1[5];
  v4 = a1[9];
  swift_bridgeObjectRetain(a1[13]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t sub_1000C804C(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_100003A6C(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000C80A8(uint64_t a1)
{
  uint64_t v2;
  _TtC14softposreaderd12RemoteReader *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 72);
  v4 = *(void **)(a1 + 80);
  v5 = *(void **)(a1 + 88);
  v6 = *(void **)(a1 + 96);
  v7 = *(void **)(a1 + 104);
  v8 = *(void **)(a1 + 112);
  v9 = *(void **)(a1 + 120);
  sub_1000940BC(*(_QWORD *)a1, *(_TtC14softposreaderd12RemoteReader **)(a1 + 8), *(void **)(a1 + 16), *(void **)(a1 + 24), *(void **)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48), *(void **)(a1 + 56));
  sub_1000940BC(v2, v3, v4, v5, v6, v7, v8, v9);
  return a1;
}

uint64_t _s9SPREngine20KCSOTAResponseParserC13DecodingErrorOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000C8180 + 4 * byte_100160A79[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000C81B4 + 4 * byte_100160A74[v4]))();
}

uint64_t sub_1000C81B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C81BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000C81C4);
  return result;
}

uint64_t sub_1000C81D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C81D8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000C81DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C81E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KCSOTAResponseParser.InternalKCSOTAResponse.CodingKeys()
{
  return &type metadata for KCSOTAResponseParser.InternalKCSOTAResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for KCSOTAResponseParser.InternalKernelConfig.CodingKeys()
{
  return &type metadata for KCSOTAResponseParser.InternalKernelConfig.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for KCSOTAResponse.HostConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000C8264 + 4 * byte_100160A83[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000C8298 + 4 * byte_100160A7E[v4]))();
}

uint64_t sub_1000C8298(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C82A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000C82A8);
  return result;
}

uint64_t sub_1000C82B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C82BCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000C82C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C82C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KCSOTAResponse.HostConfiguration.CodingKeys()
{
  return &type metadata for KCSOTAResponse.HostConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for KCSOTAResponseParser.InternalProfile.CodingKeys()
{
  return &type metadata for KCSOTAResponseParser.InternalProfile.CodingKeys;
}

uint64_t _s9SPREngine20KCSOTAResponseParserC20InternalKernelConfigV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000C8340 + 4 * byte_100160A8D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000C8374 + 4 * byte_100160A88[v4]))();
}

uint64_t sub_1000C8374(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C837C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000C8384);
  return result;
}

uint64_t sub_1000C8390(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C8398);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000C839C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C83A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KCSOTAResponseParser.JSONObject.CodingKeys()
{
  return &type metadata for KCSOTAResponseParser.JSONObject.CodingKeys;
}

unint64_t sub_1000C83C4()
{
  unint64_t result;

  result = qword_1001B1ED8;
  if (!qword_1001B1ED8)
  {
    result = swift_getWitnessTable(&unk_100160F88, &type metadata for KCSOTAResponseParser.JSONObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B1ED8);
  }
  return result;
}

unint64_t sub_1000C840C()
{
  unint64_t result;

  result = qword_1001B1EE0;
  if (!qword_1001B1EE0)
  {
    result = swift_getWitnessTable(&unk_100161040, &type metadata for KCSOTAResponseParser.InternalProfile.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B1EE0);
  }
  return result;
}

unint64_t sub_1000C8454()
{
  unint64_t result;

  result = qword_1001B1EE8;
  if (!qword_1001B1EE8)
  {
    result = swift_getWitnessTable(&unk_1001610F8, &type metadata for KCSOTAResponse.HostConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B1EE8);
  }
  return result;
}

unint64_t sub_1000C849C()
{
  unint64_t result;

  result = qword_1001B1EF0;
  if (!qword_1001B1EF0)
  {
    result = swift_getWitnessTable(&unk_1001611B0, &type metadata for KCSOTAResponseParser.InternalKernelConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B1EF0);
  }
  return result;
}

unint64_t sub_1000C84E4()
{
  unint64_t result;

  result = qword_1001B1EF8;
  if (!qword_1001B1EF8)
  {
    result = swift_getWitnessTable(&unk_100161268, &type metadata for KCSOTAResponseParser.InternalKCSOTAResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B1EF8);
  }
  return result;
}

unint64_t sub_1000C852C()
{
  unint64_t result;

  result = qword_1001B1F00;
  if (!qword_1001B1F00)
  {
    result = swift_getWitnessTable(&unk_1001611D8, &type metadata for KCSOTAResponseParser.InternalKCSOTAResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B1F00);
  }
  return result;
}

unint64_t sub_1000C8574()
{
  unint64_t result;

  result = qword_1001B1F08;
  if (!qword_1001B1F08)
  {
    result = swift_getWitnessTable(&unk_100161200, &type metadata for KCSOTAResponseParser.InternalKCSOTAResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B1F08);
  }
  return result;
}

unint64_t sub_1000C85BC()
{
  unint64_t result;

  result = qword_1001B1F10;
  if (!qword_1001B1F10)
  {
    result = swift_getWitnessTable(&unk_100161120, &type metadata for KCSOTAResponseParser.InternalKernelConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B1F10);
  }
  return result;
}

unint64_t sub_1000C8604()
{
  unint64_t result;

  result = qword_1001B1F18;
  if (!qword_1001B1F18)
  {
    result = swift_getWitnessTable(&unk_100161148, &type metadata for KCSOTAResponseParser.InternalKernelConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B1F18);
  }
  return result;
}

unint64_t sub_1000C864C()
{
  unint64_t result;

  result = qword_1001B1F20;
  if (!qword_1001B1F20)
  {
    result = swift_getWitnessTable(&unk_100161068, &type metadata for KCSOTAResponse.HostConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B1F20);
  }
  return result;
}

unint64_t sub_1000C8694()
{
  unint64_t result;

  result = qword_1001B1F28;
  if (!qword_1001B1F28)
  {
    result = swift_getWitnessTable(&unk_100161090, &type metadata for KCSOTAResponse.HostConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B1F28);
  }
  return result;
}

unint64_t sub_1000C86DC()
{
  unint64_t result;

  result = qword_1001B1F30;
  if (!qword_1001B1F30)
  {
    result = swift_getWitnessTable(&unk_100160FB0, &type metadata for KCSOTAResponseParser.InternalProfile.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B1F30);
  }
  return result;
}

unint64_t sub_1000C8724()
{
  unint64_t result;

  result = qword_1001B1F38;
  if (!qword_1001B1F38)
  {
    result = swift_getWitnessTable(&unk_100160FD8, &type metadata for KCSOTAResponseParser.InternalProfile.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B1F38);
  }
  return result;
}

unint64_t sub_1000C876C()
{
  unint64_t result;

  result = qword_1001B1F40;
  if (!qword_1001B1F40)
  {
    result = swift_getWitnessTable(&unk_100160EF8, &type metadata for KCSOTAResponseParser.JSONObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B1F40);
  }
  return result;
}

unint64_t sub_1000C87B4()
{
  unint64_t result;

  result = qword_1001B1F48;
  if (!qword_1001B1F48)
  {
    result = swift_getWitnessTable(&unk_100160F20, &type metadata for KCSOTAResponseParser.JSONObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B1F48);
  }
  return result;
}

void sub_1000C8804(uint64_t a1)
{
  id v1;
  void *v2;
  SecKeyRef v3;
  CFDataRef v4;
  CFDataRef v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  CFErrorRef v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  CFErrorRef *v14;
  _QWORD v15[2];
  CFErrorRef error;

  if ((a1 & 0xC000000000000001) != 0)
  {
    v1 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
      __break(1u);
    v1 = *(id *)(a1 + 32);
  }
  v2 = v1;
  v3 = SecCertificateRef.publicKey.getter();

  if (!v3)
    goto LABEL_9;
  if (!SecKeyIsAlgorithmSupported(v3, kSecKeyOperationTypeVerify, kSecKeyAlgorithmECDSASignatureDigestX962SHA256))
  {

LABEL_9:
    v7 = sub_1000C8990();
    v8 = swift_allocError(&type metadata for CryptoKitExtensionError, v7, 0, 0);
    swift_willThrow(v8);
    return;
  }
  error = 0;
  v4 = SecKeyCopyExternalRepresentation(v3, &error);
  if (v4)
  {
    v5 = v4;
    v15[0] = static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v15[1] = v6;
    P256.KeyAgreement.PublicKey.init<A>(x963Representation:)(v15, &type metadata for Data, &protocol witness table for Data);

  }
  else
  {
    v9 = error;
    if (error)
    {
      type metadata accessor for CFError(0);
      v11 = v10;
      v12 = sub_1000C89D4();
      v13 = swift_allocError(v11, v12, 0, 0);
      *v14 = v9;
      swift_willThrow(v13);

    }
    else
    {
      __break(1u);
    }
  }
}

unint64_t sub_1000C8990()
{
  unint64_t result;

  result = qword_1001B1F50;
  if (!qword_1001B1F50)
  {
    result = swift_getWitnessTable(&unk_1001614B0, &type metadata for CryptoKitExtensionError);
    atomic_store(result, (unint64_t *)&qword_1001B1F50);
  }
  return result;
}

unint64_t sub_1000C89D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001B1F58;
  if (!qword_1001B1F58)
  {
    type metadata accessor for CFError(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for CFErrorRef, v1);
    atomic_store(result, (unint64_t *)&qword_1001B1F58);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CryptoKitExtensionError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000C8A5C + 4 * byte_100161420[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000C8A7C + 4 * byte_100161425[v4]))();
}

_BYTE *sub_1000C8A5C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000C8A7C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000C8A84(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000C8A8C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000C8A94(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000C8A9C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CryptoKitExtensionError()
{
  return &type metadata for CryptoKitExtensionError;
}

unint64_t sub_1000C8ABC()
{
  unint64_t result;

  result = qword_1001B1F60;
  if (!qword_1001B1F60)
  {
    result = swift_getWitnessTable(&unk_100161488, &type metadata for CryptoKitExtensionError);
    atomic_store(result, (unint64_t *)&qword_1001B1F60);
  }
  return result;
}

void sub_1000C8B00(uint64_t a1, unint64_t a2)
{
  _TtC14softposreaderd12RemoteReader *v4;
  _TtC14softposreaderd12RemoteReader *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  const char *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  _TtC14softposreaderd12RemoteReader *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;

  type metadata accessor for TLV();
  static TLV.decode(from:)(a1, a2);
  v5 = v4;
  v6 = *(_QWORD *)TLVTag.fileControlInformationTemplate.unsafeMutableAddressor();
  v7 = sub_100003A2C((uint64_t *)&unk_1001B36D0);
  v8 = sub_1000CC1BC();
  v9 = Collection<>.filter(tag:)(v6, v7, v8);
  swift_bridgeObjectRelease(v5, v10, v11, v12, v13, v14, v15, v16);
  if (!((unint64_t)v9 >> 62))
  {
    v24 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v24)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v9, v17, v18, v19, v20, v21, v22, v23);
    return;
  }
  if (v9 < 0)
    v39 = v9;
  else
    v39 = v9 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v24 = _CocoaArrayWrapper.endIndex.getter(v39);
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v9, v40, v41, v42, v43, v44, v45, v46);
  if (!v24)
    goto LABEL_13;
LABEL_3:
  if (v24 >= 1)
  {
    v25 = 0;
    v26 = &_swiftEmptyArrayStorage;
    do
    {
      if ((v9 & 0xC000000000000001) != 0)
      {
        v27 = specialized _ArrayBuffer._getElementSlowPath(_:)(v25, v9);
        v28 = v27;
      }
      else
      {
        v28 = *(_QWORD *)(v9 + 8 * v25 + 32);
        v27 = swift_retain();
      }
      v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 144))(v27);
      v31 = v30;
      if ((swift_isUniquelyReferenced_nonNull_native(v26) & 1) == 0)
        v26 = sub_100091270(0, *(_QWORD *)&v26->instance[8] + 1, 1, (uint64_t)v26, v32, v33, v34, v35);
      v37 = *(_QWORD *)&v26->instance[8];
      v36 = *(_QWORD *)&v26->instance[16];
      if (v37 >= v36 >> 1)
        v26 = sub_100091270((_TtC14softposreaderd12RemoteReader *)(v36 > 1), v37 + 1, 1, (uint64_t)v26, v32, v33, v34, v35);
      ++v25;
      *(_QWORD *)&v26->instance[8] = v37 + 1;
      v38 = (char *)v26 + 16 * v37;
      *((_QWORD *)v38 + 4) = v29;
      *((_QWORD *)v38 + 5) = v31;
      swift_release(v28);
    }
    while (v24 != v25);
    goto LABEL_13;
  }
  __break(1u);
}

void sub_1000C8E64(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_1000C8EAC()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[14];

  v2 = BYTE6(v0);
  v3 = (uint64_t *)TLVTag.TAG_DF8129_LENGTH.unsafeMutableAddressor();
  v4 = *v3;
  if (BYTE6(v0) == *v3)
    __asm { BR              X10 }
  v5 = v3;
  if (qword_1001AD130 != -1)
    swift_once(&qword_1001AD130, sub_1000C91D0);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100003A14(v6, (uint64_t)qword_1001B1F68);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(32, -1);
    v14[0] = v11;
    *(_DWORD *)v10 = 136315394;
    v13 = sub_1000056EC(0xD000000000000017, 0x800000010016E340, v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, v14, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2048;
    v13 = *v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, v14, v10 + 14, v10 + 22);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s - OPS length is not %ld", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }

  return (v2 != v4) << 8;
}

uint64_t sub_1000C90FC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)(void))((char *)&loc_1000C910C + *((int *)qword_1000C9168 + (a4 >> 62))))();
}

uint64_t sub_1000C9120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (BYTE6(a4) <= a2)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (a2 + 1 < a1)
  {
LABEL_7:
    __break(1u);
    JUMPOUT(0x1000C9168);
  }
  return Data._Representation.subscript.getter();
}

void sub_1000C9178(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = v1[1];
  v3 = *(_QWORD *)(*v1 + 16);
  if (v2 == v3)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0xF000000000000000;
    return;
  }
  if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    v4 = *v1 + 16 * v2;
    v5 = *(_QWORD *)(v4 + 32);
    v6 = *(_QWORD *)(v4 + 40);
    v1[1] = v2 + 1;
    v7 = v1[2];
    if (!__OFADD__(v7, 1))
    {
      v1[2] = v7 + 1;
      *a1 = v7;
      a1[1] = v5;
      a1[2] = v6;
      sub_100005D9C(v5, v6);
      return;
    }
  }
  __break(1u);
}

uint64_t sub_1000C91D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B1F68);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B1F68);
  if (qword_1001AD138 != -1)
    swift_once(&qword_1001AD138, sub_1000CC224);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4D98);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t type metadata accessor for PayAppletResponse()
{
  return objc_opt_self(_TtC9SPREngine17PayAppletResponse);
}

void sub_1000C9280(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1000C92C4()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _TtC14softposreaderd12RemoteReader *v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  Swift::String v27;
  SEL v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36[13];

  if (BYTE6(v0) != 22
    || (sub_100005D9C(v1, v0), sub_1000BECB0(v1, v0), v3 = v2, sub_100005DE0(v1, v0), (v3 & 0x100) != 0))
  {
    if (qword_1001AD130 != -1)
      swift_once(&qword_1001AD130, sub_1000C91D0);
    v21 = type metadata accessor for Logger(0);
    sub_100003A14(v21, (uint64_t)qword_1001B1F68);
    sub_100005D9C(v1, v0);
    v22 = sub_100005D9C(v1, v0);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v36[0] = v26;
      *(_DWORD *)v25 = 136315138;
      v27 = Data.hexString()();
      v35 = sub_1000056EC(v27._countAndFlagsBits, (unint64_t)v27._object, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v27._object, v28, v29, v30, v31, v32, v33, v34);
      sub_100005DE0(v1, v0);
      sub_100005DE0(v1, v0);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Bad length or could not get messageId from UIRD: %s", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);

      return 0;
    }
    else
    {
      sub_100005DE0(v1, v0);
      sub_100005DE0(v1, v0);

      return 0;
    }
  }
  else
  {
    if (qword_1001AD130 != -1)
      swift_once(&qword_1001AD130, sub_1000C91D0);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_100003A14(v4, (uint64_t)qword_1001B1F68);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v36[0] = v9;
      *(_DWORD *)v8 = 136315138;
      v10 = ((uint64_t (*)(uint64_t))SPRTransactionMessage.description.getter)(v3);
      v12 = (_TtC14softposreaderd12RemoteReader *)v11;
      v35 = sub_1000056EC(v10, v11, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v8 + 4, v8 + 12);
      swift_bridgeObjectRelease(v12, v13, v14, v15, v16, v17, v18, v19);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "UIRD: %s", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);
    }

    result = 6;
    switch((char)v3)
    {
      case 6:
        result = 10;
        break;
      case 28:
        result = 7;
        break;
      case 32:
        result = 8;
        break;
      case 33:
        return result;
      default:
        return 0;
    }
  }
  return result;
}

_TtC14softposreaderd12RemoteReader *sub_1000C96EC(uint64_t a1, unint64_t a2)
{
  __int16 v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;

  sub_100005D9C(a1, a2);
  sub_1000BECB0(a1, a2);
  v5 = v4;
  sub_100005DE0(a1, a2);
  if ((v5 & 0x100) == 0 && (_BYTE)v5)
    __asm { BR              X10 }
  if (qword_1001AD130 != -1)
    swift_once(&qword_1001AD130, sub_1000C91D0);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100003A14(v6, (uint64_t)qword_1001B1F68);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "empty Track Error", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  return &_swiftEmptyArrayStorage;
}

uint64_t sub_1000C9AF4(_TtC14softposreaderd12RemoteReader *a1)
{
  const char *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  Swift::String v17;
  _TtC14softposreaderd12RemoteReader *object;
  SEL v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  Swift::String v26;
  _QWORD v28[2];
  unint64_t v29;
  _TtC14softposreaderd12RemoteReader *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v31 = 0;
  v32 = 0;
  v30 = a1;
  swift_bridgeObjectRetain();
  sub_1000C9178(v28);
  v8 = v29;
  if (v29 >> 60 != 15)
  {
    v9 = v28[0];
    v28[0] = 0;
    v28[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v28[1], v10, v11, v12, v13, v14, v15, v16);
    strcpy((char *)v28, "Track Error #");
    HIWORD(v28[1]) = -4864;
    if (!__OFADD__(v9, 1))
    {
      v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = (_TtC14softposreaderd12RemoteReader *)v17._object;
      String.append(_:)(v17);
      swift_bridgeObjectRelease(object, v19, v20, v21, v22, v23, v24, v25);
      v26._countAndFlagsBits = 8250;
      v26._object = (void *)0xE200000000000000;
      String.append(_:)(v26);
      v33 = v28[0];
      v34 = v28[1];
      __asm { BR              X9 }
    }
    __break(1u);
    JUMPOUT(0x1000CA2A8);
  }
  swift_bridgeObjectRelease(v30, v1, v2, v3, v4, v5, v6, v7);
  return 0;
}

uint64_t sub_1000CA2FC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  _TtC14softposreaderd12RemoteReader *v7;
  char v8;
  _TtC14softposreaderd12RemoteReader *v9;
  _TtC14softposreaderd12RemoteReader *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _TtC14softposreaderd12RemoteReader *v18;
  _TtC14softposreaderd12RemoteReader *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _TtC14softposreaderd12RemoteReader *v28;
  _TtC14softposreaderd12RemoteReader *v29;
  uint64_t v30;
  const char *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  _TtC14softposreaderd12RemoteReader *v38;
  uint64_t v39;
  _TtC14softposreaderd12RemoteReader *v40;
  unint64_t v41;
  _TtC14softposreaderd12RemoteReader **instance;
  uint64_t v43;
  uint64_t v44;
  _TtC14softposreaderd12RemoteReader *v45;
  const char *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  SEL v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  const char *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  SEL v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  uint8_t *v79;
  SEL v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  _BOOL4 v91;
  uint8_t *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  uint8_t *v99;
  uint8_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  int v110;
  int v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  int v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  NSObject *v130;
  os_log_type_t v131;
  uint8_t *v132;
  uint8_t *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  __int16 v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  NSObject *v164;
  NSObject *v165;
  unint64_t v166;
  _TtC14softposreaderd12RemoteReader *v167;
  uint64_t *v168;
  uint64_t v169;
  SEL v170;
  id v171;
  id v172;
  id v173;
  id v174;
  id v175;
  id v176;
  __int16 v177;
  char v178;
  _TtC14softposreaderd12RemoteReader *v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  char v197;
  void *v198;
  uint64_t v199;
  _TtC14softposreaderd12RemoteReader *v200;
  unint64_t v201;
  void *v202;
  _QWORD *v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  void *v211;
  void *v212;
  void *v213;
  void *v214;
  uint64_t v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  void *v226;
  void *v227;
  _TtC14softposreaderd12RemoteReader *v228;
  os_unfair_lock_s *v229;
  uint64_t v230;
  os_unfair_lock_s *v231;
  SEL v232;
  id v233;
  id v234;
  id v235;
  id v236;
  id v237;
  id v238;
  uint64_t v240;
  int v241;
  uint64_t v242;
  unint64_t v243;
  int v244;
  unsigned int v245;
  uint64_t v246;
  uint64_t v247;
  _TtC14softposreaderd12RemoteReader *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  int v255;
  int v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  int v265;
  uint64_t v266;
  _TtC14softposreaderd12RemoteReader *v267;
  os_log_type_t type[8];
  unint64_t v269;
  os_log_t log;
  uint64_t v271;
  char v272[24];
  char v273[32];
  char v274[24];
  char v275[24];
  _QWORD v276[3];
  __int128 v277;
  __int128 v278;
  __int16 v279;
  char v280;
  uint64_t v281;
  uint64_t v282;

  v281 = 0;
  v282 = 0;
  v280 = 1;
  v279 = 0;
  type metadata accessor for TLV();
  static TLV.decode(from:)(a1, a2);
  v260 = a4;
  v10 = v9;
  v259 = 0;
  *(_QWORD *)&v277 = v9;
  v11 = *(_QWORD *)TLVTag.applicationLabel.unsafeMutableAddressor();
  v12 = sub_100003A2C((uint64_t *)&unk_1001B36D0);
  v13 = sub_1000CC1BC();
  v14 = v11;
  v15 = v13;
  v16 = Collection<>.first(tag:)(v14, v12, v13);
  if (v16)
  {
    v17 = v16;
    v247 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 296))(v16);
    v19 = v18;
    swift_release(v17);
  }
  else
  {
    v247 = 0;
    v19 = 0;
  }
  *(_QWORD *)&v277 = v10;
  v20 = (uint64_t *)TLVTag.applicationPreferredName.unsafeMutableAddressor();
  v21 = Collection<>.first(tag:)(*v20, v12, v15);
  if (v21)
  {
    v22 = v21;
    v246 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 296))(v21);
    v24 = v23;
    swift_release(v22);
  }
  else
  {
    v246 = 0;
    v24 = 0;
  }
  *(_QWORD *)&v277 = v10;
  v25 = (uint64_t *)TLVTag.applicationIdentifier.unsafeMutableAddressor();
  v26 = Collection<>.first(tag:)(*v25, v12, v15);
  v248 = v10;
  v249 = v12;
  v266 = v15;
  v242 = v24;
  if (v26)
  {
    v27 = v26;
    v271 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 152))(v26);
    v29 = v28;
    swift_release(v27);
    v267 = v29;
    if (!v19 && v29)
    {
      v30 = qword_1001AD230;
      swift_bridgeObjectRetain();
      if (v30 != -1)
        swift_once(&qword_1001AD230, sub_100116240);
      v38 = (_TtC14softposreaderd12RemoteReader *)qword_1001B4F38;
      v39 = *(_QWORD *)(qword_1001B4F38 + 16);
      v40 = v29;
      if (v39)
      {
        log = (os_log_t)&v240;
        swift_bridgeObjectRetain_n(qword_1001B4F38, 2);
        v41 = sub_1000095D0();
        instance = (_TtC14softposreaderd12RemoteReader **)v38[1].instance;
        while (1)
        {
          v43 = (uint64_t)*(instance - 1);
          v19 = *instance;
          v44 = (uint64_t)*(instance - 3);
          v45 = *(instance - 2);
          *(_QWORD *)&v277 = v271;
          *((_QWORD *)&v277 + 1) = v267;
          v276[0] = v44;
          v276[1] = v45;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((StringProtocol.contains<A>(_:)(v276, &type metadata for String, &type metadata for String, v41, v41) & 1) != 0)
            break;
          instance += 4;
          swift_bridgeObjectRelease(v19, v46, v47, v48, v49, v50, v51, v52);
          swift_bridgeObjectRelease(v45, v53, v54, v55, v56, v57, v58, v59);
          if (!--v39)
          {
            swift_bridgeObjectRelease(v267, v60, v61, v62, v63, v64, v65, v66);
            swift_bridgeObjectRelease(v38, v67, v68, v69, v70, v71, v72, v73);
            v40 = v38;
            v24 = v242;
            v10 = v248;
            goto LABEL_19;
          }
        }
        swift_bridgeObjectRelease(v267, v46, v47, v48, v49, v50, v51, v52);
        swift_bridgeObjectRelease(v45, v80, v81, v82, v83, v84, v85, v86);
        swift_bridgeObjectRelease_n(v38, 2);
        if (qword_1001AD130 != -1)
          swift_once(&qword_1001AD130, sub_1000C91D0);
        v87 = type metadata accessor for Logger(0);
        v88 = sub_100003A14(v87, (uint64_t)qword_1001B1F68);
        v89 = Logger.logObject.getter(v88);
        v90 = static os_log_type_t.default.getter();
        v91 = os_log_type_enabled(v89, v90);
        v24 = v242;
        v12 = v249;
        if (v91)
        {
          v92 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v92 = 0;
          _os_log_impl((void *)&_mh_execute_header, v89, v90, "readResult network set from AID", v92, 2u);
          swift_slowDealloc(v92, -1, -1);
        }

        v247 = v43;
        v10 = v248;
      }
      else
      {
LABEL_19:
        swift_bridgeObjectRelease(v40, v31, v32, v33, v34, v35, v36, v37);
        if (qword_1001AD130 != -1)
          swift_once(&qword_1001AD130, sub_1000C91D0);
        v74 = type metadata accessor for Logger(0);
        v75 = sub_100003A14(v74, (uint64_t)qword_1001B1F68);
        v76 = Logger.logObject.getter(v75);
        v77 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v76, v77))
        {
          v78 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v78 = 0;
          _os_log_impl((void *)&_mh_execute_header, v76, v77, "appLabel nil and AID unrecognized", v78, 2u);
          v79 = v78;
          v10 = v248;
          swift_slowDealloc(v79, -1, -1);
        }

        v19 = 0;
        v12 = v249;
      }
      v15 = v266;
    }
  }
  else
  {
    v267 = 0;
    v271 = 0;
  }
  *(_QWORD *)&v277 = v10;
  v93 = (uint64_t *)TLVTag.thirdPartyData.unsafeMutableAddressor();
  v94 = Collection<>.first(tag:)(*v93, v12, v15);
  if (v94)
    goto LABEL_37;
  if (qword_1001AD130 != -1)
    swift_once(&qword_1001AD130, sub_1000C91D0);
  v95 = type metadata accessor for Logger(0);
  v96 = sub_100003A14(v95, (uint64_t)qword_1001B1F68);
  v97 = Logger.logObject.getter(v96);
  v98 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v97, v98))
  {
    v99 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v99 = 0;
    _os_log_impl((void *)&_mh_execute_header, v97, v98, "thirdPartyData absent so formFactor from cardInterfaceCapabilities", v99, 2u);
    v100 = v99;
    v10 = v248;
    swift_slowDealloc(v100, -1, -1);
  }

  *(_QWORD *)&v277 = v10;
  v101 = (uint64_t *)TLVTag.cardInterfaceCapabilities.unsafeMutableAddressor();
  v15 = v266;
  v94 = Collection<>.first(tag:)(*v101, v12, v266);
  if (v94)
  {
LABEL_37:
    v102 = (*(uint64_t (**)(void))(*(_QWORD *)v94 + 152))();
    v257 = v103;
    v258 = v102;
    swift_release(v94);
  }
  else
  {
    v257 = 0;
    v258 = 0;
  }
  *(_QWORD *)&v277 = v10;
  v104 = (uint64_t *)TLVTag.outcomeParameterSet.unsafeMutableAddressor();
  v105 = Collection<>.first(tag:)(*v104, v12, v15);
  if (v105)
  {
    v106 = v105;
    v107 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v105 + 144))(v105);
    v109 = v108;
    swift_release(v106);
    sub_100005D9C(v107, v109);
    sub_1000C8E64(v107, v109);
    if ((v110 & 0x100) != 0)
      v111 = 0;
    else
      v111 = v110;
    v265 = v111;
    __asm { BR              X9 }
  }
  v241 = 0;
  v265 = 0;
  *(_QWORD *)&v277 = v10;
  v112 = (uint64_t *)TLVTag.terminalCountryCode.unsafeMutableAddressor();
  v113 = Collection<>.first(tag:)(*v112, v12, v266);
  if (v113)
  {
    v114 = v113;
    v115 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v113 + 224))(v113);
    swift_release(v114);
    v245 = v115;
    v116 = HIWORD(v115) & 1;
  }
  else
  {
    v245 = 0;
    v116 = 1;
  }
  v256 = v116;
  *(_QWORD *)&v277 = v10;
  v117 = (uint64_t *)TLVTag.terminalVerificationResults.unsafeMutableAddressor();
  v118 = Collection<>.first(tag:)(*v117, v12, v266);
  v243 = 0xF000000000000000;
  if (v118)
  {
    v119 = v118;
    (*(void (**)(uint64_t))(*(_QWORD *)v118 + 144))(v118);
    v121 = v120;
    swift_release(v119);
    __asm { BR              X9 }
  }
  v255 = 255;
  *(_QWORD *)&v277 = v10;
  v122 = (uint64_t *)TLVTag.errorIndication.unsafeMutableAddressor();
  v123 = v266;
  v124 = Collection<>.first(tag:)(*v122, v12, v266);
  if (v124)
  {
    v125 = v124;
    (*(void (**)(uint64_t))(*(_QWORD *)v124 + 144))(v124);
    v127 = v126;
    swift_release(v125);
    __asm { BR              X10 }
  }
  v244 = 0;
  v254 = 0;
  LODWORD(v263) = 1;
  swift_beginAccess(&v279, v273, 0, 0);
  if ((v279 & 1) != 0 || (swift_beginAccess(&v280, v272, 0, 0), v280 == 1))
  {
    if (qword_1001AD130 != -1)
      swift_once(&qword_1001AD130, sub_1000C91D0);
    v128 = type metadata accessor for Logger(0);
    v129 = sub_100003A14(v128, (uint64_t)qword_1001B1F68);
    v130 = Logger.logObject.getter(v129);
    v131 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v130, v131))
    {
      v132 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v132 = 0;
      _os_log_impl((void *)&_mh_execute_header, v130, v131, "switchInterfaceOrNoCVMSuccess: true", v132, 2u);
      v133 = v132;
      v10 = v248;
      swift_slowDealloc(v133, -1, -1);
    }

    *((_QWORD *)&v278 + 1) = &type metadata for Bool;
    LOBYTE(v277) = 1;
    sub_1000E91C4((uint64_t)&v277, 0xD00000000000001DLL, (_TtC14softposreaderd12RemoteReader *)0x8000000100168910);
    v123 = v266;
  }
  *(_QWORD *)&v277 = v10;
  v134 = (uint64_t *)TLVTag.merchantCategoryCode.unsafeMutableAddressor();
  v135 = Collection<>.first(tag:)(*v134, v12, v123);
  if (v135)
  {
    v136 = v135;
    v262 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 144))(v135);
    v264 = v137;
    swift_release(v136);
  }
  else
  {
    v262 = 0;
    v264 = 0xF000000000000000;
  }
  *(_QWORD *)&v277 = v10;
  v138 = (uint64_t *)TLVTag.languagePreference.unsafeMutableAddressor();
  v139 = Collection<>.first(tag:)(*v138, v12, v123);
  if (v139)
  {
    v140 = v139;
    v261 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v139 + 144))(v139);
    v269 = v141;
    swift_release(v140);
  }
  else
  {
    v261 = 0;
    v269 = 0xF000000000000000;
  }
  *(_QWORD *)&v277 = v10;
  v142 = (uint64_t *)TLVTag.applicationInterchangeProfile.unsafeMutableAddressor();
  v143 = Collection<>.first(tag:)(*v142, v12, v123);
  if (v143)
  {
    v144 = v143;
    v145 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v143 + 152))(v143);
    v252 = v146;
    v253 = v145;
    swift_release(v144);
  }
  else
  {
    v252 = 0;
    v253 = 0;
  }
  *(_QWORD *)&v277 = v10;
  v147 = (uint64_t *)TLVTag.cardProcessingRequirement.unsafeMutableAddressor();
  v148 = Collection<>.first(tag:)(*v147, v12, v123);
  if (v148)
  {
    v149 = v148;
    v150 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v148 + 152))(v148);
    v250 = v151;
    v251 = v150;
    swift_release(v149);
  }
  else
  {
    v250 = 0;
    v251 = 0;
  }
  *(_QWORD *)&v277 = v10;
  v152 = (uint64_t *)TLVTag.interacCardTransactionInformation.unsafeMutableAddressor();
  v153 = Collection<>.first(tag:)(*v152, v12, v123);
  if (v153)
  {
    v154 = v153;
    (*(void (**)(uint64_t))(*(_QWORD *)v153 + 144))(v153);
    v156 = v155;
    swift_release(v154);
    __asm { BR              X10 }
  }
  *(_QWORD *)&v277 = v10;
  v157 = (uint64_t *)TLVTag.aidOverridePerformed.unsafeMutableAddressor();
  v158 = Collection<>.first(tag:)(*v157, v12, v123);
  if (v158)
  {
    v159 = v158;
    v160 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v158 + 216))(v158);
    swift_release(v159);
    if ((v160 & 0x100) == 0)
      *(_BYTE *)(v260 + 129) = v160 != 0;
  }
  *(_QWORD *)&v277 = v10;
  v161 = (uint64_t *)TLVTag.cvmResults.unsafeMutableAddressor();
  v162 = Collection<>.first(tag:)(*v161, v12, v266);
  if (v162)
  {
    v163 = v162;
    (*(void (**)(uint64_t))(*(_QWORD *)v162 + 144))(v162);
    v165 = v164;
    swift_release(v163);
    log = v165;
    __asm { BR              X9 }
  }
  log = (os_log_t)0xF000000000000000;
  v166 = v243;
  v167 = v248;
  *(_QWORD *)&v277 = v248;
  v168 = (uint64_t *)TLVTag.cardState.unsafeMutableAddressor();
  v169 = Collection<>.first(tag:)(*v168, v249, v266);
  swift_bridgeObjectRelease(v167, v170, v171, v172, v173, v174, v175, v176);
  if (!v169 || (v177 = (*(uint64_t (**)(void))(*(_QWORD *)v169 + 216))(), swift_release(v169), (v177 & 0x100) != 0))
  {
    LODWORD(v249) = 0;
    LODWORD(v248) = 0;
  }
  else
  {
    LODWORD(v248) = (*(_BYTE *)TLVTag.CARD_STATE_EXPIRATION_MASK.unsafeMutableAddressor() & v177);
    LODWORD(v249) = (*(_BYTE *)TLVTag.CARD_STATE_EFFECTIVE_MASK.unsafeMutableAddressor() & v177);
  }
  v178 = v241;
  v266 = 0;
  *(_QWORD *)type = 0xF000000000000000;
  if (v19)
  {
    v7 = v19;
    v8 = 0;
    *((_QWORD *)&v278 + 1) = &type metadata for String;
    *(_QWORD *)&v277 = v247;
    *((_QWORD *)&v277 + 1) = v7;
  }
  else
  {
    v7 = 0;
    v277 = 0u;
    v278 = 0u;
    v8 = 1;
  }
  v179 = v7;
  swift_bridgeObjectRetain();
  sub_1000E91C4((uint64_t)&v277, 0x6B726F7774656ELL, (_TtC14softposreaderd12RemoteReader *)0xE700000000000000);
  if (v24)
  {
    *((_QWORD *)&v278 + 1) = &type metadata for String;
    *(_QWORD *)&v277 = v246;
    *((_QWORD *)&v277 + 1) = v24;
  }
  else
  {
    v277 = 0u;
    v278 = 0u;
  }
  v180 = (unint64_t)log;
  sub_1000E91C4((uint64_t)&v277, 0x656D614E707061, (_TtC14softposreaderd12RemoteReader *)0xE700000000000000);
  if (v166 >> 60 == 15)
  {
    v277 = 0u;
    v278 = 0u;
  }
  else
  {
    *((_QWORD *)&v278 + 1) = &type metadata for Data;
    *(_QWORD *)&v277 = 0;
    *((_QWORD *)&v277 + 1) = v166;
  }
  sub_1000306C8(0, v166);
  sub_1000E91C4((uint64_t)&v277, 0xD000000000000013, (_TtC14softposreaderd12RemoteReader *)0x8000000100167800);
  type metadata accessor for SPRTransactionOutcomeStatus(0);
  *((_QWORD *)&v278 + 1) = v181;
  LOBYTE(v277) = v265;
  sub_1000E91C4((uint64_t)&v277, 0x53656D6F6374756FLL, (_TtC14softposreaderd12RemoteReader *)0xED00007375746174);
  type metadata accessor for SPRTransactionCVMType(0);
  *((_QWORD *)&v278 + 1) = v182;
  LOBYTE(v277) = v255;
  sub_1000E91C4((uint64_t)&v277, 0x657079546D7663, (_TtC14softposreaderd12RemoteReader *)0xE700000000000000);
  if (v180 >> 60 == 15)
  {
    v277 = 0u;
    v278 = 0u;
    v183 = v266;
  }
  else
  {
    *((_QWORD *)&v278 + 1) = &type metadata for Data;
    v183 = v266;
    *(_QWORD *)&v277 = v266;
    *((_QWORD *)&v277 + 1) = v180;
  }
  sub_1000306C8(v183, v180);
  sub_1000E91C4((uint64_t)&v277, 0x6C757365526D7663, (_TtC14softposreaderd12RemoteReader *)0xE900000000000074);
  *((_QWORD *)&v278 + 1) = &type metadata for Bool;
  LOBYTE(v277) = v178;
  sub_1000E91C4((uint64_t)&v277, 0x69757165526E6970, (_TtC14softposreaderd12RemoteReader *)0xEB00000000646572);
  if (v264 >> 60 == 15)
  {
    v277 = 0u;
    v278 = 0u;
    v184 = v262;
  }
  else
  {
    *((_QWORD *)&v278 + 1) = &type metadata for Data;
    v184 = v262;
    *(_QWORD *)&v277 = v262;
    *((_QWORD *)&v277 + 1) = v264;
  }
  v185 = v261;
  sub_1000306C8(v184, v264);
  sub_1000E91C4((uint64_t)&v277, 0xD000000000000014, (_TtC14softposreaderd12RemoteReader *)0x8000000100168850);
  if (v269 >> 60 == 15)
  {
    v277 = 0u;
    v278 = 0u;
  }
  else
  {
    *((_QWORD *)&v278 + 1) = &type metadata for Data;
    *(_QWORD *)&v277 = v185;
    *((_QWORD *)&v277 + 1) = v269;
  }
  sub_1000306C8(v185, v269);
  sub_1000E91C4((uint64_t)&v277, 0xD000000000000012, (_TtC14softposreaderd12RemoteReader *)0x8000000100168890);
  if ((v263 & 1) != 0)
  {
    v277 = 0u;
    v278 = 0u;
  }
  else
  {
    *((_QWORD *)&v278 + 1) = &type metadata for UInt16;
    LOWORD(v277) = v244;
  }
  sub_1000E91C4((uint64_t)&v277, 0xD000000000000019, (_TtC14softposreaderd12RemoteReader *)0x8000000100168810);
  swift_beginAccess((char *)&v279 + 1, v276, 0, 0);
  v186 = HIBYTE(v279);
  type metadata accessor for SPRTransactionMessage(0);
  *((_QWORD *)&v278 + 1) = v187;
  LOBYTE(v277) = v186;
  sub_1000E91C4((uint64_t)&v277, 0xD000000000000019, (_TtC14softposreaderd12RemoteReader *)0x8000000100168830);
  type metadata accessor for SPRCardExpirationState(0);
  *((_QWORD *)&v278 + 1) = v188;
  LOBYTE(v277) = (_BYTE)v248;
  sub_1000E91C4((uint64_t)&v277, 0xD000000000000013, (_TtC14softposreaderd12RemoteReader *)0x8000000100168930);
  type metadata accessor for SPRCardEffectiveState(0);
  *((_QWORD *)&v278 + 1) = v189;
  LOBYTE(v277) = v249;
  sub_1000E91C4((uint64_t)&v277, 0xD000000000000012, (_TtC14softposreaderd12RemoteReader *)0x8000000100168950);
  v190 = sub_100003A2C((uint64_t *)&unk_1001B1290);
  v191 = swift_allocObject(v190, 392, 7);
  v192 = v191;
  *(_OWORD *)(v191 + 16) = xmmword_1001614F0;
  *(_BYTE *)(v191 + 32) = 10;
  if ((v8 & 1) != 0)
  {
    v193 = 0;
    v179 = 0;
    v194 = 0;
    *(_QWORD *)(v191 + 56) = 0;
  }
  else
  {
    v194 = &type metadata for String;
    v193 = v247;
  }
  v196 = v257;
  v195 = v258;
  v197 = v256;
  *(_QWORD *)(v191 + 40) = v193;
  *(_QWORD *)(v191 + 48) = v179;
  *(_QWORD *)(v191 + 64) = v194;
  *(_BYTE *)(v191 + 72) = 11;
  if (v267)
  {
    v198 = &type metadata for String;
    v199 = v271;
    v200 = v267;
  }
  else
  {
    v199 = 0;
    v200 = 0;
    v198 = 0;
    *(_QWORD *)(v191 + 96) = 0;
  }
  v201 = *(_QWORD *)type;
  *(_QWORD *)(v191 + 80) = v199;
  *(_QWORD *)(v191 + 88) = v200;
  *(_QWORD *)(v191 + 104) = v198;
  *(_BYTE *)(v191 + 112) = 12;
  if (v196)
  {
    v202 = &type metadata for String;
  }
  else
  {
    v195 = 0;
    v202 = 0;
    *(_QWORD *)(v191 + 136) = 0;
  }
  *(_QWORD *)(v191 + 120) = v195;
  *(_QWORD *)(v191 + 128) = v196;
  *(_QWORD *)(v191 + 144) = v202;
  v203 = (_QWORD *)(v191 + 160);
  *(_BYTE *)(v191 + 152) = 13;
  if ((v197 & 1) != 0)
  {
    v204 = 0;
    *v203 = 0;
    *(_QWORD *)(v191 + 168) = 0;
    *(_QWORD *)(v191 + 176) = 0;
  }
  else
  {
    *(_WORD *)v203 = v245;
    v204 = &type metadata for UInt16;
  }
  *(_QWORD *)(v191 + 184) = v204;
  *(_BYTE *)(v191 + 192) = 14;
  swift_beginAccess(&v281, &v277, 0, 0);
  v205 = v282;
  if (v282)
  {
    v206 = v281;
    v207 = &type metadata for String;
  }
  else
  {
    v206 = 0;
    v207 = 0;
    *(_QWORD *)(v192 + 216) = 0;
  }
  *(_QWORD *)(v192 + 200) = v206;
  *(_QWORD *)(v192 + 208) = v205;
  *(_QWORD *)(v192 + 224) = v207;
  *(_BYTE *)(v192 + 232) = 15;
  if (v201 >> 60 == 15)
  {
    *(_QWORD *)(v192 + 248) = 0;
    *(_QWORD *)(v192 + 256) = 0;
    swift_bridgeObjectRetain();
    v215 = 0;
    v216 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_1000306C8(0, v201);
    Data.toUInt64(endianness:)(1, 0, v201);
    v215 = v217;
    sub_10000A9B0(0, v201);
    v216 = &type metadata for UInt64;
  }
  *(_QWORD *)(v192 + 240) = v215;
  *(_QWORD *)(v192 + 264) = v216;
  *(_BYTE *)(v192 + 272) = 16;
  if (v166 >> 60 == 15)
  {
    v218 = 0;
    v219 = 0;
    *(_QWORD *)(v192 + 288) = 0;
    *(_QWORD *)(v192 + 296) = 0;
  }
  else
  {
    sub_100005D9C(0, v166);
    Data.toUInt64(endianness:)(1, 0, v166);
    v218 = v220;
    sub_10000A9B0(0, v166);
    v219 = &type metadata for UInt64;
  }
  v222 = v252;
  v221 = v253;
  v224 = v250;
  v223 = v251;
  *(_QWORD *)(v192 + 280) = v218;
  *(_QWORD *)(v192 + 304) = v219;
  *(_BYTE *)(v192 + 312) = 21;
  v225 = v266;
  if (v222)
  {
    v226 = &type metadata for String;
  }
  else
  {
    v221 = 0;
    v226 = 0;
    *(_QWORD *)(v192 + 336) = 0;
  }
  *(_QWORD *)(v192 + 320) = v221;
  *(_QWORD *)(v192 + 328) = v222;
  *(_QWORD *)(v192 + 344) = v226;
  *(_BYTE *)(v192 + 352) = 22;
  if (v224)
  {
    v227 = &type metadata for String;
  }
  else
  {
    v223 = 0;
    v227 = 0;
    *(_QWORD *)(v192 + 376) = 0;
  }
  *(_QWORD *)(v192 + 360) = v223;
  *(_QWORD *)(v192 + 368) = v224;
  *(_QWORD *)(v192 + 384) = v227;
  v228 = (_TtC14softposreaderd12RemoteReader *)sub_1000E8C74(v192, v208, v209, v210, v211, v212, v213, v214);
  v229 = *(os_unfair_lock_s **)(v260 + 56);
  v230 = (uint64_t)&v229[4];
  v231 = v229 + 8;
  os_unfair_lock_lock(v229 + 8);
  sub_100060510(v230, (uint64_t)v228);
  os_unfair_lock_unlock(v231);
  sub_10000A9B0(v261, v269);
  sub_10000A9B0(v262, v264);
  sub_10000A9B0(v225, (unint64_t)log);
  swift_bridgeObjectRelease(v228, v232, v233, v234, v235, v236, v237, v238);
  swift_beginAccess(&v279, v275, 0, 0);
  swift_beginAccess(&v280, v274, 0, 0);
  sub_10000A9B0(0, *(unint64_t *)type);
  sub_10000A9B0(0, v166);
  return (v254 << 8) | ((_DWORD)v263 << 16) | v265;
}

unint64_t sub_1000CC1BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001AE440;
  if (!qword_1001AE440)
  {
    v1 = sub_100003A6C((uint64_t *)&unk_1001B36D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001AE440);
  }
  return result;
}

uint64_t sub_1000CC208(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a3 >> 60 != 15)
    return sub_100005DE0(a2, a3);
  return result;
}

uint64_t sub_1000CC224()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B4D98);
  sub_100003A14(v0, (uint64_t)qword_1001B4D98);
  v1 = objc_msgSend((id)objc_opt_self(SPRMeta), "current");
  v2 = objc_msgSend(v1, "bundleIdentifier");

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  return Logger.init(subsystem:category:)(v3, v5, 0x726564616572, 0xE600000000000000);
}

uint64_t sub_1000CC2E4()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B4DB0);
  sub_100003A14(v0, (uint64_t)qword_1001B4DB0);
  v1 = objc_msgSend((id)objc_opt_self(SPRMeta), "current");
  v2 = objc_msgSend(v1, "bundleIdentifier");

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  return Logger.init(subsystem:category:)(v3, v5, 0x72756769666E6F63, 0xEC000000726F7461);
}

uint64_t sub_1000CC3B0()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B4DC8);
  sub_100003A14(v0, (uint64_t)qword_1001B4DC8);
  v1 = objc_msgSend((id)objc_opt_self(SPRMeta), "current");
  v2 = objc_msgSend(v1, "bundleIdentifier");

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  return Logger.init(subsystem:category:)(v3, v5, 0x7461747365747461, 0xEB000000006E6F69);
}

uint64_t sub_1000CC47C()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B4DE0);
  sub_100003A14(v0, (uint64_t)qword_1001B4DE0);
  v1 = objc_msgSend((id)objc_opt_self(SPRMeta), "current");
  v2 = objc_msgSend(v1, "bundleIdentifier");

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  return Logger.init(subsystem:category:)(v3, v5, 0x726F74696E6F6DLL, 0xE700000000000000);
}

uint64_t sub_1000CC540()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B4DF8);
  sub_100003A14(v0, (uint64_t)qword_1001B4DF8);
  v1 = objc_msgSend((id)objc_opt_self(SPRMeta), "current");
  v2 = objc_msgSend(v1, "bundleIdentifier");

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  return Logger.init(subsystem:category:)(v3, v5, 0x6E6F6D6D6F63, 0xE600000000000000);
}

uint64_t sub_1000CC600()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B4E10);
  sub_100003A14(v0, (uint64_t)qword_1001B4E10);
  v1 = objc_msgSend((id)objc_opt_self(SPRMeta), "current");
  v2 = objc_msgSend(v1, "bundleIdentifier");

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  return Logger.init(subsystem:category:)(v3, v5, 0x616E615F65726F63, 0xEE0073636974796CLL);
}

uint64_t sub_1000CC6D0()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B4E28);
  sub_100003A14(v0, (uint64_t)qword_1001B4E28);
  v1 = objc_msgSend((id)objc_opt_self(SPRMeta), "current");
  v2 = objc_msgSend(v1, "bundleIdentifier");

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  return Logger.init(subsystem:category:)(v3, v5, 0x7974697275636573, 0xE800000000000000);
}

uint64_t sub_1000CC794()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B4E40);
  sub_100003A14(v0, (uint64_t)qword_1001B4E40);
  v1 = objc_msgSend((id)objc_opt_self(SPRMeta), "current");
  v2 = objc_msgSend(v1, "bundleIdentifier");

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  return Logger.init(subsystem:category:)(v3, v5, 0x746E6F635F6E6970, 0xEE0072656C6C6F72);
}

uint64_t sub_1000CC864()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B4E58);
  sub_100003A14(v0, (uint64_t)qword_1001B4E58);
  v1 = objc_msgSend((id)objc_opt_self(SPRMeta), "current");
  v2 = objc_msgSend(v1, "bundleIdentifier");

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  return Logger.init(subsystem:category:)(v3, v5, 0xD000000000000010, 0x800000010016E420);
}

uint64_t sub_1000CC92C()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B4E70);
  sub_100003A14(v0, (uint64_t)qword_1001B4E70);
  v1 = objc_msgSend((id)objc_opt_self(SPRMeta), "current");
  v2 = objc_msgSend(v1, "bundleIdentifier");

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  return Logger.init(subsystem:category:)(v3, v5, 0x655F657275636573, 0xEE00746E656D656CLL);
}

uint64_t sub_1000CC9FC()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, static SPRLogger.xpcServer);
  sub_100003A14(v0, (uint64_t)static SPRLogger.xpcServer);
  v1 = objc_msgSend((id)objc_opt_self(SPRMeta), "current");
  v2 = objc_msgSend(v1, "bundleIdentifier");

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  return Logger.init(subsystem:category:)(v3, v5, 0x767265735F637078, 0xEA00000000007265);
}

uint64_t SPRLogger.xpcServer.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1001AD188 != -1)
    swift_once(&qword_1001AD188, sub_1000CC9FC);
  v0 = type metadata accessor for Logger(0);
  return sub_100003A14(v0, (uint64_t)static SPRLogger.xpcServer);
}

uint64_t static SPRLogger.xpcServer.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1001AD188 != -1)
    swift_once(&qword_1001AD188, sub_1000CC9FC);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100003A14(v2, (uint64_t)static SPRLogger.xpcServer);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

ValueMetadata *type metadata accessor for SPRLogger()
{
  return &type metadata for SPRLogger;
}

uint64_t sub_1000CCB8C()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B4EA0);
  sub_100003A14(v0, (uint64_t)qword_1001B4EA0);
  v1 = objc_msgSend((id)objc_opt_self(SPRMeta), "current");
  v2 = objc_msgSend(v1, "bundleIdentifier");

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  return Logger.init(subsystem:category:)(v3, v5, 0x6F697369766F7270, 0xE90000000000006ELL);
}

unint64_t sub_1000CCC54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t result;
  unint64_t v4;

  v1 = type metadata accessor for CocoaError.Code(0);
  __chkstk_darwin(v1);
  v2 = type metadata accessor for CocoaError(0);
  __chkstk_darwin(v2);
  result = NSFileHandle.read(upToCount:)(4);
  if (!v0)
  {
    if (v4 >> 60 != 15)
      __asm { BR              X10 }
    return (unint64_t)(v4 >> 60 == 15) << 32;
  }
  return result;
}

uint64_t sub_1000CCF08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  unint64_t v4;

  v1 = type metadata accessor for CocoaError.Code(0);
  __chkstk_darwin(v1);
  v2 = type metadata accessor for CocoaError(0);
  __chkstk_darwin(v2);
  result = NSFileHandle.read(upToCount:)(8);
  if (!v0)
  {
    if (v4 >> 60 != 15)
      __asm { BR              X10 }
    return 0;
  }
  return result;
}

void sub_1000CD1AC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;

  v3 = type metadata accessor for Date(0, a2);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v2[11];
  v8 = v2[12];
  sub_100005EF8(v2 + 8, v7);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
  v10 = Date.timeIntervalSince1970.getter(v9);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v12 = v2[11];
  v11 = v2[12];
  sub_100005EF8(v2 + 8, v12);
  v13 = (v10 - (*(double (**)(uint64_t, uint64_t))(v11 + 24))(v12, v11)) * 1000000.0;
  if ((~*(_QWORD *)&v13 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v13 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v13 >= 1.84467441e19)
LABEL_7:
    __break(1u);
}

uint64_t sub_1000CD2E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B2040);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B2040);
  if (qword_1001AD150 != -1)
    swift_once(&qword_1001AD150, sub_1000CC47C);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4DE0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1000CD370(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  id v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  const char *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _TtC14softposreaderd12RemoteReader *v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  _BOOL4 v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v78 = a3;
  v7 = type metadata accessor for CocoaError.Code(0);
  v73 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = v3;
  v13 = v3 + OBJC_IVAR____TtC9SPREngine16MPOCMonitorStore_fileUrl;
  v75 = v14;
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  v77 = a1;
  v15(v13, a1, v10);
  sub_1000C22F8();
  v74 = v13;
  v76 = v10;
  v15((uint64_t)v12, v13, v10);
  v16 = sub_1000CDB98((uint64_t)v12);
  if (v4)
  {
    v17 = swift_errorRetain();
    static CocoaError.fileNoSuchFile.getter(v17);
    v18 = sub_100005F1C(&qword_1001B0C70, (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError.Code, (uint64_t)&protocol conformance descriptor for CocoaError.Code);
    v19 = static _ErrorCodeProtocol.~= infix(_:_:)(v9, v4, v7, v18);
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v73 + 8))(v9, v7);
    if ((v19 & 1) != 0)
    {
      swift_errorRelease();
      v21 = v77;
      v20 = v78;
      v22 = v75;
      v23 = v76;
      if (qword_1001AD198 != -1)
        swift_once(&qword_1001AD198, sub_1000CD2E0);
      v24 = type metadata accessor for Logger(0);
      v25 = sub_100003A14(v24, (uint64_t)qword_1001B2040);
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "No existing Monitor Store file", v28, 2u);
        swift_slowDealloc(v28, -1, -1);
      }

    }
    else
    {
      if (qword_1001AD198 != -1)
        swift_once(&qword_1001AD198, sub_1000CD2E0);
      v29 = type metadata accessor for Logger(0);
      sub_100003A14(v29, (uint64_t)qword_1001B2040);
      swift_errorRetain();
      v30 = swift_errorRetain();
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v31, v32))
      {
        v33 = (uint8_t *)swift_slowAlloc(12, -1);
        v34 = (uint64_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v33 = 138412290;
        swift_errorRetain();
        v35 = _swift_stdlib_bridgeErrorToNSError(v4);
        v82 = v35;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v33 + 4, v33 + 12);
        *v34 = v35;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Error reading existing Monitor Store: %@", v33, 0xCu);
        v36 = sub_100003A2C((uint64_t *)&unk_1001AE430);
        swift_arrayDestroy(v34, 1, v36);
        swift_slowDealloc(v34, -1, -1);
        swift_slowDealloc(v33, -1, -1);

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();

      }
      v21 = v77;
      v20 = v78;
      v22 = v75;
      v23 = v76;
    }
    goto LABEL_28;
  }
  v37 = v16;
  if ((a2 & 1) == 0 || (v38 = sub_1000CCC54(), v39 = v38, (v38 & 0x100000000) != 0))
  {
    v22 = v75;
    v23 = v76;
    v21 = v77;
    v20 = v78;
    if (qword_1001AD198 != -1)
      swift_once(&qword_1001AD198, sub_1000CD2E0);
    v47 = type metadata accessor for Logger(0);
    v48 = sub_100003A14(v47, (uint64_t)qword_1001B2040);
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v49, v50))
      goto LABEL_27;
    v51 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v51 = 0;
    v52 = "Missing Monitor Store version";
  }
  else
  {
    if ((_DWORD)v38 != 2)
    {
      if (qword_1001AD198 != -1)
        swift_once(&qword_1001AD198, sub_1000CD2E0);
      v65 = type metadata accessor for Logger(0);
      v66 = sub_100003A14(v65, (uint64_t)qword_1001B2040);
      v67 = Logger.logObject.getter(v66);
      v68 = static os_log_type_t.default.getter();
      v69 = os_log_type_enabled(v67, v68);
      v21 = v77;
      v20 = v78;
      v23 = v76;
      if (v69)
      {
        v70 = (uint8_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v70 = 67109120;
        v80 = v39;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v70 + 4, v70 + 8);
        _os_log_impl((void *)&_mh_execute_header, v67, v68, "Unsupported Monitor Store version: %u", v70, 8u);
        swift_slowDealloc(v70, -1, -1);
      }

      v22 = v75;
      goto LABEL_28;
    }
    v40 = sub_1000CCF08();
    if ((v41 & 1) != 0 || (v42 = v40, v43 = sub_1000CCF08(), (v44 & 1) != 0))
    {
      v21 = v77;
      v20 = v78;
      v22 = v75;
      v23 = v76;
    }
    else
    {
      v45 = v43;
      v21 = v77;
      v20 = v78;
      v22 = v75;
      v23 = v76;
      if (v43 >= 0x14)
      {
        (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v77, v76);
        v46 = v79;
        *(_QWORD *)(v79 + OBJC_IVAR____TtC9SPREngine16MPOCMonitorStore_timeBase) = v42;
        *(_QWORD *)(v46 + OBJC_IVAR____TtC9SPREngine16MPOCMonitorStore_fileSize) = v45;
        *(_QWORD *)(v46 + 16) = v37;
        goto LABEL_33;
      }
    }
    if (qword_1001AD198 != -1)
      swift_once(&qword_1001AD198, sub_1000CD2E0);
    v71 = type metadata accessor for Logger(0);
    v72 = sub_100003A14(v71, (uint64_t)qword_1001B2040);
    v49 = Logger.logObject.getter(v72);
    v50 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v49, v50))
      goto LABEL_27;
    v51 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v51 = 0;
    v52 = "Invalid or missing Monitor Store header";
  }
  _os_log_impl((void *)&_mh_execute_header, v49, v50, v52, v51, 2u);
  swift_slowDealloc(v51, -1, -1);
LABEL_27:

LABEL_28:
  v53 = v74;
  v54 = sub_100005EF8(v20, v20[3]);
  sub_1000CD1AC((uint64_t)v54, v55);
  v56 = v79;
  *(_QWORD *)(v79 + OBJC_IVAR____TtC9SPREngine16MPOCMonitorStore_timeBase) = v57;
  *(_QWORD *)(v56 + OBJC_IVAR____TtC9SPREngine16MPOCMonitorStore_fileSize) = 20;
  v58 = sub_1000CEF2C(v53, v57, 0x14uLL);
  *(_QWORD *)(v79 + 16) = v58;
  if (qword_1001AD198 != -1)
    swift_once(&qword_1001AD198, sub_1000CD2E0);
  v59 = type metadata accessor for Logger(0);
  v60 = sub_100003A14(v59, (uint64_t)qword_1001B2040);
  v61 = Logger.logObject.getter(v60);
  v62 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v61, v62))
  {
    v63 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v63 = 0;
    _os_log_impl((void *)&_mh_execute_header, v61, v62, "Created empty Monitor Store V2", v63, 2u);
    swift_slowDealloc(v63, -1, -1);
  }

  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
LABEL_33:
  sub_100005D3C(v20);
  return v79;
}

id sub_1000CDB98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  id v10;
  id v11;
  uint64_t v12;
  id v14;

  v2 = v1;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  v5 = v4;
  v14 = 0;
  v6 = objc_msgSend((id)swift_getObjCClassFromMetadata(v2), "fileHandleForUpdatingURL:error:", v4, &v14);

  v7 = v14;
  if (v6)
  {
    v8 = type metadata accessor for URL(0);
    v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
    v10 = v7;
    v9(a1, v8);
  }
  else
  {
    v11 = v14;
    _convertNSErrorToError(_:)(v7);

    swift_willThrow();
    v12 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
  }
  return v6;
}

void sub_1000CDCAC(unint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t *v10;
  void *v11;
  unint64_t v12;
  unint64_t *v13;
  id v14;
  unint64_t *v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  unint64_t *v19;
  id *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  Swift::UInt64 v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  unsigned int v29;
  unint64_t *v30;
  void *v31;
  unint64_t v32;
  unint64_t *v33;
  id v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  id *v38;

  v3 = v2;
  v4 = v1;
  if (((*(uint64_t (**)(unint64_t *))(*a1 + 136))(a1) & 0x8000000000000000) == 0)
  {
    v6 = *(void **)(v4 + 16);
    v7 = OBJC_IVAR____TtC9SPREngine16MPOCMonitorStore_fileSize;
    v8 = *(_QWORD *)(v4 + OBJC_IVAR____TtC9SPREngine16MPOCMonitorStore_fileSize);
    v37 = 0;
    v9 = objc_msgSend(v6, "seekToOffset:error:", v8, &v37);
    v10 = v37;
    if (v9)
    {
      v11 = *(void **)(v4 + 16);
      v12 = sub_1000C22F8();
      v13 = v10;
      v14 = v11;
      DERWriter.writeDER(tlv:)(a1, v12, (uint64_t)&protocol witness table for NSFileHandle);
      if (v2)
      {

LABEL_7:
        v37 = 0;
        v38 = (id *)0xE000000000000000;
        _StringGuts.grow(_:)(24);
        v17._object = (void *)0x800000010016E4F0;
        v17._countAndFlagsBits = 0xD000000000000016;
        String.append(_:)(v17);
        v36 = v3;
        v18 = sub_100003A2C((uint64_t *)&unk_1001B1280);
        _print_unlocked<A, B>(_:_:)(&v36, &v37, v18, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v19 = v37;
        v20 = v38;
        v21 = sub_10005D624();
        v22 = swift_allocError(&type metadata for MPOCMonitorStoreError, v21, 0, 0);
        *(_QWORD *)v23 = v19;
        *(_QWORD *)(v23 + 8) = v20;
        *(_BYTE *)(v23 + 16) = 1;
        swift_willThrow(v22);
        swift_errorRelease();
        return;
      }

      v24 = *(id *)(v4 + 16);
      v25 = NSFileHandle.offset()();
      v3 = v26;
      if (v26)
      {

        goto LABEL_7;
      }
      v27 = v25;

      v28 = *(void **)(v4 + 16);
      v37 = 0;
      v29 = objc_msgSend(v28, "seekToOffset:error:", 12, &v37);
      v30 = v37;
      if (v29)
      {
        v31 = *(void **)(v4 + 16);
        v36 = bswap64(v27);
        v37 = &v36;
        v38 = (id *)&v37;
        v32 = sub_1000CEC18();
        v33 = v30;
        v34 = v31;
        NSFileHandle.write<A>(contentsOf:)(&v37, &type metadata for UnsafeRawBufferPointer, v32);

        *(_QWORD *)(v4 + v7) = v27;
        return;
      }
      v35 = v37;
      v3 = _convertNSErrorToError(_:)(v30);

    }
    else
    {
      v15 = v37;
      v3 = _convertNSErrorToError(_:)(v10);

    }
    swift_willThrow(v16);
    goto LABEL_7;
  }
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
}

uint64_t sub_1000CDF8C(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  Swift::UInt64 v5;
  void *v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v23;
  id v24;
  uint64_t v25;
  unint64_t v26;

  v2 = v1;
  v4 = *(id *)(v1 + 16);
  v5 = NSFileHandle.offset()();
  if (v6)
  {

    v25 = 0;
    v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(26);
    v15._object = (void *)0x800000010016E4D0;
    v15._countAndFlagsBits = 0xD000000000000018;
    String.append(_:)(v15);
    v24 = v6;
    v16 = sub_100003A2C((uint64_t *)&unk_1001B1280);
    _print_unlocked<A, B>(_:_:)(&v24, &v25, v16, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v17 = v25;
    v18 = v26;
    v19 = sub_10005D624();
    v20 = swift_allocError(&type metadata for MPOCMonitorStoreError, v19, 0, 0);
    *(_QWORD *)v21 = v17;
    *(_QWORD *)(v21 + 8) = v18;
    *(_BYTE *)(v21 + 16) = 1;
    swift_willThrow(v20);
    swift_errorRelease();
  }
  else
  {
    v7 = v5;

    if ((a1 & 0x8000000000000000) != 0)
    {
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
      __break(1u);
      JUMPOUT(0x1000CE3C0);
    }
    v8 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9SPREngine16MPOCMonitorStore_fileSize);
    v9 = v8 >= v7;
    v10 = v8 - v7;
    if (!v9)
    {
      __break(1u);
      JUMPOUT(0x1000CE364);
    }
    if (v10 >= a1)
      v11 = a1;
    else
      v11 = v10;
    v25 = sub_1000CF274(v11);
    v26 = v12;
    v24 = *(id *)(v2 + 16);
    v13 = sub_1000C22F8();
    v14 = v24;
    v23 = DERReader.readDERTLV()(v13, (uint64_t)&protocol witness table for NSFileHandle);

    if (v23)
    {
      (*(void (**)(void))(*(_QWORD *)v23 + 168))();
      __asm { BR              X10 }
    }
    return v25;
  }
  return v18;
}

void sub_1000CE3E0(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v12;
  unsigned int v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  unint64_t *v18;
  unsigned int v19;
  unint64_t *v20;
  void *v21;
  unint64_t v22;
  unint64_t *v23;
  id v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  unint64_t *v29;
  id *v30;
  id *v31;
  void *v32;
  unint64_t v33;
  id v34;
  unint64_t *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  id *v41;

  if ((a1 & 0x8000000000000000) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
    JUMPOUT(0x1000CE768);
  }
  v4 = v2;
  v6 = a1 + 20;
  v7 = OBJC_IVAR____TtC9SPREngine16MPOCMonitorStore_fileSize;
  if (*(_QWORD *)(v4 + OBJC_IVAR____TtC9SPREngine16MPOCMonitorStore_fileSize) < a1 + 20)
  {
    v8 = sub_10005D624();
    v9 = swift_allocError(&type metadata for MPOCMonitorStoreError, v8, 0, 0);
    *(_OWORD *)v10 = xmmword_100161530;
    *(_BYTE *)(v10 + 16) = 0;
LABEL_18:
    swift_willThrow(v9);
    return;
  }
  v12 = *(void **)(v4 + 16);
  v40 = 0;
  v13 = objc_msgSend(v12, "seekToOffset:error:", v6, &v40);
  v14 = v40;
  if (!v13)
  {
    v35 = v40;
    v36 = v14;
LABEL_17:
    _convertNSErrorToError(_:)(v36);

    goto LABEL_18;
  }
  v15 = *(_QWORD *)(v4 + v7);
  v16 = v15 - a1;
  if (v15 < a1)
  {
    __break(1u);
    JUMPOUT(0x1000CE70CLL);
  }
  v17 = *(void **)(a2 + 16);
  v40 = 0;
  v18 = v14;
  v19 = objc_msgSend(v17, "seekToOffset:error:", 12, &v40);
  v20 = v40;
  if (!v19)
  {
    v35 = v40;
    v36 = v20;
    goto LABEL_17;
  }
  v21 = *(void **)(a2 + 16);
  v39 = bswap64(v16);
  v40 = &v39;
  v41 = (id *)&v40;
  v22 = sub_1000CEC18();
  v23 = v20;
  v24 = v21;
  NSFileHandle.write<A>(contentsOf:)(&v40, &type metadata for UnsafeRawBufferPointer, v22);

  if (!v3)
  {
    v25 = *(_QWORD *)(v4 + v7);
    v26 = v25 - v6;
    if (v25 < v6)
      __break(1u);
    if (v26)
    {
      if (v26 >= 0x400)
        v27 = 1024;
      else
        v27 = v25 - v6;
      v28 = *(id *)(v4 + 16);
      v29 = (unint64_t *)NSFileHandle.read(upToCount:)(v27);
      v31 = v30;

      if ((unint64_t)v31 >> 60 != 15)
      {
        v32 = *(void **)(a2 + 16);
        v40 = v29;
        v41 = v31;
        v33 = sub_1000C5284();
        v34 = v32;
        NSFileHandle.write<A>(contentsOf:)(&v40, &type metadata for Data, v33);

        __asm { BR              X9 }
      }
      v37 = sub_10005D624();
      v9 = swift_allocError(&type metadata for MPOCMonitorStoreError, v37, 0, 0);
      *(_OWORD *)v38 = xmmword_100161520;
      *(_BYTE *)(v38 + 16) = 1;
      goto LABEL_18;
    }
  }
}

unint64_t *sub_1000CE778()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned int v6;
  unint64_t *v7;
  void *v8;
  unint64_t v9;
  unint64_t *v10;
  id v11;
  void *v12;
  unsigned __int8 v13;
  unint64_t *v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  unint64_t *v19;
  id *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  id *v26;

  v2 = v1;
  v3 = v0;
  v4 = OBJC_IVAR____TtC9SPREngine16MPOCMonitorStore_fileSize;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC9SPREngine16MPOCMonitorStore_fileSize) = 20;
  v5 = *(void **)(v0 + 16);
  v25 = 0;
  v6 = objc_msgSend(v5, "seekToOffset:error:", 12, &v25);
  v7 = v25;
  if (!v6)
  {
LABEL_6:
    v15 = v7;
    v2 = _convertNSErrorToError(_:)(v7);

    swift_willThrow(v16);
    goto LABEL_7;
  }
  v8 = *(void **)(v3 + 16);
  v24 = bswap64(*(_QWORD *)(v3 + v4));
  v25 = &v24;
  v26 = (id *)&v25;
  v9 = sub_1000CEC18();
  v10 = v7;
  v11 = v8;
  NSFileHandle.write<A>(contentsOf:)(&v25, &type metadata for UnsafeRawBufferPointer, v9);
  if (!v1)
  {

    v12 = *(void **)(v3 + 16);
    v25 = 0;
    v13 = objc_msgSend(v12, "truncateAtOffset:error:", 20, &v25);
    v7 = v25;
    if ((v13 & 1) != 0)
      return v25;
    goto LABEL_6;
  }

LABEL_7:
  v25 = 0;
  v26 = (id *)0xE000000000000000;
  _StringGuts.grow(_:)(28);
  v17._object = (void *)0x800000010016E4B0;
  v17._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v17);
  v24 = v2;
  v18 = sub_100003A2C((uint64_t *)&unk_1001B1280);
  _print_unlocked<A, B>(_:_:)(&v24, &v25, v18, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v19 = v25;
  v20 = v26;
  v21 = sub_10005D624();
  v22 = swift_allocError(&type metadata for MPOCMonitorStoreError, v21, 0, 0);
  *(_QWORD *)v23 = v19;
  *(_QWORD *)(v23 + 8) = v20;
  *(_BYTE *)(v23 + 16) = 1;
  swift_willThrow(v22);
  return (unint64_t *)swift_errorRelease();
}

id sub_1000CE984()
{
  uint64_t v0;
  void *v1;
  unsigned int v2;
  id v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  unint64_t v17;

  v1 = *(void **)(v0 + 16);
  v16 = 0;
  v2 = objc_msgSend(v1, "closeAndReturnError:", &v16);
  v3 = v16;
  if (v2)
    return v16;
  v5 = v16;
  v6 = _convertNSErrorToError(_:)(v3);

  swift_willThrow(v7);
  v16 = 0;
  v17 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  v8._object = (void *)0x800000010016E490;
  v8._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v8);
  v15 = v6;
  v9 = sub_100003A2C((uint64_t *)&unk_1001B1280);
  _print_unlocked<A, B>(_:_:)(&v15, &v16, v9, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v10 = v16;
  v11 = v17;
  v12 = sub_10005D624();
  v13 = swift_allocError(&type metadata for MPOCMonitorStoreError, v12, 0, 0);
  *(_QWORD *)v14 = v10;
  *(_QWORD *)(v14 + 8) = v11;
  *(_BYTE *)(v14 + 16) = 1;
  swift_willThrow(v13);
  return (id)swift_errorRelease();
}

uint64_t sub_1000CEAF0()
{
  id *v0;
  char *v1;
  uint64_t v2;

  v1 = (char *)v0 + OBJC_IVAR____TtC9SPREngine16MPOCMonitorStore_fileUrl;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *((unsigned int *)*v0 + 12), *((unsigned __int16 *)*v0 + 26));
}

uint64_t sub_1000CEB48()
{
  return type metadata accessor for MPOCMonitorStore(0);
}

uint64_t type metadata accessor for MPOCMonitorStore(uint64_t a1)
{
  uint64_t result;

  result = qword_1001B2080;
  if (!qword_1001B2080)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MPOCMonitorStore);
  return result;
}

uint64_t sub_1000CEB8C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

unint64_t sub_1000CEC18()
{
  unint64_t result;

  result = qword_1001B2190;
  if (!qword_1001B2190)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UnsafeRawBufferPointer, &type metadata for UnsafeRawBufferPointer);
    atomic_store(result, (unint64_t *)&qword_1001B2190);
  }
  return result;
}

unint64_t sub_1000CEC5C(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;

  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
    v11 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003A2C(&qword_1001AC668);
  v10 = static _DictionaryStorage.allocate(capacity:)(v9);
  v11 = (_QWORD *)v10;
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, a2, a3, a4, a5, a6, a7, a8);
    return (unint64_t)v11;
  }
  v13 = v10 + 64;
  v14 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000CF308(v14, (uint64_t)&v23);
    v15 = v23;
    v16 = v24;
    result = sub_1000CED84(v23, v24);
    if ((v18 & 1) != 0)
      break;
    *(_QWORD *)(v13 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v19 = (uint64_t *)(v11[6] + 16 * result);
    *v19 = v15;
    v19[1] = v16;
    result = (unint64_t)sub_100005D2C(&v25, (_OWORD *)(v11[7] + 32 * result));
    v20 = v11[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_11;
    v11[2] = v22;
    v14 += 48;
    if (!--v12)
    {
      swift_release(v11);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000CED84(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  String.hash(into:)(v6, a1, a2);
  v4 = Hasher._finalize()();
  return sub_1000CEDE8(a1, a2, v4);
}

unint64_t sub_1000CEDE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    v11 = v10[1];
    if ((*v10 != a1 || v11 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      i = (i + 1) & v13;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v14 = (_QWORD *)(v9 + 16 * i);
        v15 = v14[1];
        if ((*v14 != a1 || v15 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0)
        {
          for (i = (i + 1) & v13; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v13)
          {
            v17 = (_QWORD *)(v9 + 16 * i);
            v18 = v17[1];
            if (*v17 == a1 && v18 == a2)
              break;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

_TtC14softposreaderd12RemoteReader *sub_1000CEF2C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  _TtC14softposreaderd12RemoteReader *object;
  NSString v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  _TtC14softposreaderd12RemoteReader *v20;
  _TtC14softposreaderd12RemoteReader *v21;
  unint64_t v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  Swift::String v30;
  _TtC14softposreaderd12RemoteReader *v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  SEL v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  Swift::String v50;
  _TtC14softposreaderd12RemoteReader *v51;
  SEL v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  _TtC14softposreaderd12RemoteReader *v68;

  v65 = a3;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  object = (_TtC14softposreaderd12RemoteReader *)URL.path(percentEncoded:)(0)._object;
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object, v13, v14, v15, v16, v17, v18, v19);
  LODWORD(object) = objc_msgSend(v10, "createFileAtPath:contents:attributes:", v12, 0, 0);

  if ((_DWORD)object)
  {
    sub_1000C22F8();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
    v20 = (_TtC14softposreaderd12RemoteReader *)sub_1000CDB98((uint64_t)v9);
    if (v3)
    {
      v67 = 0;
      v68 = (_TtC14softposreaderd12RemoteReader *)0xE000000000000000;
      _StringGuts.grow(_:)(47);
      swift_bridgeObjectRelease(v68, v23, v24, v25, v26, v27, v28, v29);
      v67 = (unint64_t *)0xD00000000000002DLL;
      v68 = (_TtC14softposreaderd12RemoteReader *)0x800000010016E530;
      v30 = URL.path(percentEncoded:)(0);
      v31 = (_TtC14softposreaderd12RemoteReader *)v30._object;
      String.append(_:)(v30);
      swift_bridgeObjectRelease(v31, v32, v33, v34, v35, v36, v37, v38);
      v39 = v67;
      v21 = v68;
      v40 = sub_10005D624();
      v41 = swift_allocError(&type metadata for MPOCMonitorStoreError, v40, 0, 0);
      *(_QWORD *)v42 = v39;
      *(_QWORD *)(v42 + 8) = v21;
      *(_BYTE *)(v42 + 16) = 1;
      swift_willThrow(v41);
      swift_errorRelease();
    }
    else
    {
      v21 = v20;
      LODWORD(v66) = 0x2000000;
      v67 = &v66;
      v68 = (_TtC14softposreaderd12RemoteReader *)((char *)&v66 + 4);
      v22 = sub_1000CEC18();
      NSFileHandle.write<A>(contentsOf:)(&v67, &type metadata for UnsafeRawBufferPointer, v22);
      v66 = bswap64(a2);
      v67 = &v66;
      v68 = (_TtC14softposreaderd12RemoteReader *)&v67;
      NSFileHandle.write<A>(contentsOf:)(&v67, &type metadata for UnsafeRawBufferPointer, v22);
      v66 = bswap64(v65);
      v67 = &v66;
      v68 = (_TtC14softposreaderd12RemoteReader *)&v67;
      NSFileHandle.write<A>(contentsOf:)(&v67, &type metadata for UnsafeRawBufferPointer, v22);
    }
  }
  else
  {
    v67 = 0;
    v68 = (_TtC14softposreaderd12RemoteReader *)0xE000000000000000;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease(v68, v43, v44, v45, v46, v47, v48, v49);
    v67 = (unint64_t *)0xD00000000000001ALL;
    v68 = (_TtC14softposreaderd12RemoteReader *)0x800000010016E510;
    v50 = URL.path(percentEncoded:)(0);
    v51 = (_TtC14softposreaderd12RemoteReader *)v50._object;
    String.append(_:)(v50);
    swift_bridgeObjectRelease(v51, v52, v53, v54, v55, v56, v57, v58);
    v59 = v67;
    v21 = v68;
    v60 = sub_10005D624();
    v61 = swift_allocError(&type metadata for MPOCMonitorStoreError, v60, 0, 0);
    *(_QWORD *)v62 = v59;
    *(_QWORD *)(v62 + 8) = v21;
    *(_BYTE *)(v62 + 16) = 1;
    swift_willThrow(v61);
  }
  return v21;
}

uint64_t sub_1000CF274(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    v1 = result;
    if (result < 15)
    {
      return 0;
    }
    else
    {
      v2 = type metadata accessor for __DataStorage(0);
      swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
      __DataStorage.init(capacity:)(v1);
      if (v1 >= 0x7FFFFFFF)
      {
        v3 = type metadata accessor for Data.RangeReference(0);
        result = swift_allocObject(v3, 32, 7);
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1000CF308(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003A2C(&qword_1001AC670);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000CF354(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t destroy for MPOCMonitorStoreError(uint64_t *a1)
{
  return sub_1000CF36C(*a1, a1[1]);
}

uint64_t sub_1000CF36C(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a2);
}

uint64_t _s9SPREngine21MPOCMonitorStoreErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000CF354(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for MPOCMonitorStoreError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000CF354(*(_QWORD *)a2, v4);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_1000CF36C(v6, v7);
  return a1;
}

__n128 initializeWithTake for MPOCMonitorStoreError(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for MPOCMonitorStoreError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_1000CF36C(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for MPOCMonitorStoreError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MPOCMonitorStoreError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000CF4F4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1000CF4FC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for MPOCMonitorStoreError()
{
  return &type metadata for MPOCMonitorStoreError;
}

uint64_t sub_1000CF518()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B21A0);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B21A0);
  if (qword_1001AD150 != -1)
    swift_once(&qword_1001AD150, sub_1000CC47C);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4DE0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1000CF5A8(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;

  v4 = v3;
  *(_QWORD *)(v3 + 16) = 0xD000000000000011;
  *(_QWORD *)(v3 + 24) = 0x800000010016E5D0;
  if (qword_1001AD1A0 != -1)
    swift_once(&qword_1001AD1A0, sub_1000CF518);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100003A14(v8, (uint64_t)qword_1001B21A0);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v19 = a2;
    v12 = a3;
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v21 = v14;
    *(_DWORD *)v13 = 136315138;
    v20 = sub_1000056EC(0xD000000000000029, 0x800000010016E5F0, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v13 + 4, v13 + 12);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    v15 = v13;
    a3 = v12;
    a2 = v19;
    swift_slowDealloc(v15, -1, -1);
  }

  v16 = v4 + OBJC_IVAR____TtC9SPREngine25MPOCDefaultMonitorBackend_url;
  v17 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v16, a1, v17);
  sub_10001A674(a2, v4 + OBJC_IVAR____TtC9SPREngine25MPOCDefaultMonitorBackend_secureChannel);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC9SPREngine25MPOCDefaultMonitorBackend_monitorAnalytics) = a3;
  return v4;
}

void *sub_1000CF7A8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (**v23)(_QWORD, _QWORD, _QWORD);
  unint64_t v24;
  char *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  NSObject *v42;
  os_log_type_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _TtC14softposreaderd12RemoteReader *v49;
  SEL v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  uint64_t v57;
  _TtC14softposreaderd12RemoteReader *v58;
  _TtC14softposreaderd12RemoteReader *v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  uint64_t v67;
  _TtC14softposreaderd12RemoteReader *v68;
  uint64_t v69;
  const char *v70;
  unint64_t v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  uint64_t v78;
  _TtC14softposreaderd12RemoteReader *v79;
  SEL v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  void (**v87)(_QWORD, _QWORD, _QWORD);
  uint64_t v88;
  unint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  uint8_t *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  NSObject *v98;
  os_log_type_t v99;
  uint8_t *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  os_log_type_t v104;
  uint8_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _TtC14softposreaderd12RemoteReader *v109;
  uint64_t v110;
  _TtC14softposreaderd12RemoteReader *v111;
  uint64_t v112;
  SEL v113;
  id v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  const char *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  char *v127;
  unint64_t v128;
  unint64_t v129;
  _TtC14softposreaderd12RemoteReader *v130;
  void *v131;
  unint64_t v132;
  const char *v133;
  void *v134;
  _TtC14softposreaderd12RemoteReader *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  _TtC14softposreaderd12RemoteReader *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v152;
  SEL v153;
  id v154;
  id v155;
  id v156;
  id v157;
  id v158;
  id v159;
  SEL v160;
  id v161;
  id v162;
  id v163;
  id v164;
  id v165;
  id v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  SEL v170;
  id v171;
  id v172;
  id v173;
  id v174;
  id v175;
  id v176;
  uint64_t v177;
  const char *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  uint64_t v185;
  char v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  SEL v190;
  id v191;
  id v192;
  id v193;
  id v194;
  id v195;
  id v196;
  SEL v197;
  id v198;
  id v199;
  id v200;
  id v201;
  id v202;
  id v203;
  void (**v204)(_QWORD, _QWORD, _QWORD);
  NSObject *v205;
  os_log_type_t v206;
  uint8_t *v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  _TtC14softposreaderd12RemoteReader *v211;
  SEL v212;
  id v213;
  id v214;
  id v215;
  id v216;
  id v217;
  id v218;
  uint8_t *v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  id v251;
  uint64_t v252;
  _TtC14softposreaderd12RemoteReader *v253;
  _TtC14softposreaderd12RemoteReader *v254;
  uint64_t v255;
  uint64_t v256;
  const char *v257;
  uint64_t v258;
  void *v259;
  void *v260;
  void *v261;
  void *v262;
  void *v263;
  uint64_t v264;
  uint64_t v265;
  char v266;
  SEL v267;
  id v268;
  id v269;
  id v270;
  id v271;
  id v272;
  id v273;
  double v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unsigned __int8 *v283;
  int v284;
  SEL v285;
  id v286;
  id v287;
  id v288;
  id v289;
  id v290;
  id v291;
  uint64_t *v292;
  const char *v293;
  void *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  char *v298;
  void (**v299)(_QWORD, _QWORD, _QWORD);
  uint64_t v300;
  _QWORD *v301;
  char *v302;
  uint8_t *v303;
  char v304;
  uint64_t v305;
  uint64_t v306;
  double v307;
  __int128 v308;
  _BYTE v309[304];

  v3 = v2;
  v294 = a2;
  v5 = type metadata accessor for URL.DirectoryHint(0);
  v299 = *(void (***)(_QWORD, _QWORD, _QWORD))(v5 - 8);
  v300 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v294 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  __chkstk_darwin(v8);
  v298 = (char *)&v294 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URLRequest(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v294 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001AD1A0 != -1)
    swift_once(&qword_1001AD1A0, sub_1000CF518);
  v14 = type metadata accessor for Logger(0);
  v303 = (uint8_t *)sub_100003A14(v14, (uint64_t)qword_1001B21A0);
  v15 = Logger.logObject.getter(v303);
  v16 = static os_log_type_t.info.getter();
  v17 = os_log_type_enabled(v15, v16);
  v296 = v11;
  v297 = v10;
  v302 = v13;
  if (v17)
  {
    v295 = a1;
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v308 = v19;
    *(_DWORD *)v18 = 136315138;
    v305 = sub_1000056EC(0x293A5F28646E6573, 0xE800000000000000, (uint64_t *)&v308);
    a1 = v295;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v305, &v306, v18 + 4, v18 + 12);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s", v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    v20 = v19;
    v13 = v302;
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v18, -1, -1);
  }

  v21 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)&v308 = *(_QWORD *)(v3 + 16);
  *((_QWORD *)&v308 + 1) = v21;
  v23 = v299;
  v22 = v300;
  ((void (**)(char *, _QWORD, uint64_t))v299)[13](v7, enum case for URL.DirectoryHint.inferFromPath(_:), v300);
  v24 = sub_1000095D0();
  swift_bridgeObjectRetain();
  v25 = v298;
  URL.appending<A>(path:directoryHint:)(&v308, v7, &type metadata for String, v24);
  ((void (*)(char *, uint64_t))v23[1])(v7, v22);
  swift_bridgeObjectRelease(*((_TtC14softposreaderd12RemoteReader **)&v308 + 1), v26, v27, v28, v29, v30, v31, v32);
  URLRequest.init(url:cachePolicy:timeoutInterval:)(v25, 0, 60.0);
  v33 = URLRequest.httpMethod.setter(1414745936, 0xE400000000000000);
  v34 = (*(uint64_t (**)(__n128))(*(_QWORD *)a1 + 168))(v33);
  URLRequest.httpBody.setter(v34, v35);
  v308 = xmmword_10015E900;
  v36 = *(_QWORD *)(v3 + OBJC_IVAR____TtC9SPREngine25MPOCDefaultMonitorBackend_monitorAnalytics);
  swift_retain();
  v37 = (uint64_t)v301;
  sub_10004DEB0(v36, (uint64_t *)&v308, v3, (uint64_t)v13);
  if (!v37)
  {
    v88 = swift_release(v3);
    v89 = *((_QWORD *)&v308 + 1);
    if (*((_QWORD *)&v308 + 1) >> 60 != 15)
    {
      v107 = v308;
      sub_1000306C8(v308, *((unint64_t *)&v308 + 1));
      sub_10011A2BC(v107, v89, v309);
      v149 = sub_10000A9B0(v107, v89);
      v150 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(v149);
      sub_10003E318(v150, 0);
      sub_10000A9B0(v107, v89);
      (*(void (**)(char *, uint64_t))(v296 + 8))(v13, v297);
      return memcpy(v294, v309, 0x128uLL);
    }
    v90 = Logger.logObject.getter(v88);
    v91 = static os_log_type_t.error.getter(v90);
    if (os_log_type_enabled(v90, v91))
    {
      v92 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v92 = 0;
      _os_log_impl((void *)&_mh_execute_header, v90, v91, "Empty MPOC monitor backend returned response", v92, 2u);
      swift_slowDealloc(v92, -1, -1);
    }

    v93 = sub_1000D0F18();
    v94 = swift_allocError(&type metadata for MPOCMonitorBackendError, v93, 0, 0);
    *(_QWORD *)v95 = 15;
    *(_BYTE *)(v95 + 8) = 1;
    v96 = swift_willThrow(v94);
    goto LABEL_58;
  }
  swift_release(v3);
  v305 = v37;
  swift_errorRetain();
  v38 = sub_100003A2C((uint64_t *)&unk_1001B1280);
  type metadata accessor for SPRHTTPError(0);
  v40 = v39;
  if ((swift_dynamicCast(&v307, &v305, v38, v39, 6) & 1) == 0)
  {
    swift_errorRetain();
    v97 = swift_errorRetain();
    v98 = Logger.logObject.getter(v97);
    v99 = static os_log_type_t.error.getter(v98);
    if (os_log_type_enabled(v98, v99))
    {
      v100 = (uint8_t *)swift_slowAlloc(12, -1);
      v301 = (_QWORD *)swift_slowAlloc(8, -1);
      v303 = v100;
      *(_DWORD *)v100 = 138412290;
      swift_errorRetain();
      v101 = a1;
      v102 = _swift_stdlib_bridgeErrorToNSError(v37);
      v305 = v102;
      v13 = v302;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v305, &v306, v100 + 4, v100 + 12);
      v103 = v301;
      *v301 = v102;
      a1 = v101;
      swift_errorRelease();
      swift_errorRelease();
      v104 = v99;
      v105 = v303;
      _os_log_impl((void *)&_mh_execute_header, v98, v104, "MPOC monitor backend returned error: %@", v303, 0xCu);
      v106 = sub_100003A2C((uint64_t *)&unk_1001AE430);
      swift_arrayDestroy(v103, 1, v106);
      swift_slowDealloc(v103, -1, -1);
      swift_slowDealloc(v105, -1, -1);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    v141 = sub_1000D0F18();
    v142 = swift_allocError(&type metadata for MPOCMonitorBackendError, v141, 0, 0);
    *(_QWORD *)v143 = 14;
    *(_BYTE *)(v143 + 8) = 1;
    swift_willThrow(v142);
    goto LABEL_57;
  }
  v301 = (_QWORD *)v37;
  v41 = *(id *)&v307;
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.error.getter(v42);
  v44 = v43;
  if (os_log_type_enabled(v42, v43))
  {
    v45 = swift_slowAlloc(32, -1);
    v299 = (void (**)(_QWORD, _QWORD, _QWORD))swift_slowAlloc(96, -1);
    v305 = (uint64_t)v299;
    *(_DWORD *)v45 = 136315650;
    v300 = v36;
    v307 = *(double *)&v41;
    v46 = sub_1000D0FA8(&qword_1001ADB58, (uint64_t)&unk_10015DB98);
    LODWORD(v298) = v44;
    v47 = Error.localizedDescription.getter(v40, v46);
    v49 = (_TtC14softposreaderd12RemoteReader *)v48;
    v307 = COERCE_DOUBLE(sub_1000056EC(v47, v48, &v305));
    v295 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308, v45 + 4, v45 + 12);

    swift_bridgeObjectRelease(v49, v50, v51, v52, v53, v54, v55, v56);
    *(_WORD *)(v45 + 12) = 2080;
    v57 = related decl 'e' for SPRHTTPErrorCode.serverCode.getter(v41);
    if (v58)
    {
      v59 = v58;
    }
    else
    {
      v57 = 0;
      v59 = (_TtC14softposreaderd12RemoteReader *)0xE000000000000000;
    }
    v307 = COERCE_DOUBLE(sub_1000056EC(v57, (unint64_t)v59, &v305));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308, v45 + 14, v45 + 22);

    swift_bridgeObjectRelease(v59, v60, v61, v62, v63, v64, v65, v66);
    *(_WORD *)(v45 + 22) = 2080;
    v307 = *(double *)&v41;
    v67 = sub_1000D0FA8(&qword_1001ADBE0, (uint64_t)&unk_10015DC70);
    v68 = (_TtC14softposreaderd12RemoteReader *)_BridgedStoredNSError.userInfo.getter(v40, v67);
    v69 = Dictionary.description.getter(v68, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    v71 = (unint64_t)v70;
    swift_bridgeObjectRelease(v68, v70, v72, v73, v74, v75, v76, v77);
    v78 = v69;
    v36 = v300;
    v307 = COERCE_DOUBLE(sub_1000056EC(v78, v71, &v305));
    a1 = v295;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308, v45 + 24, v45 + 32);

    v79 = (_TtC14softposreaderd12RemoteReader *)v71;
    v13 = v302;
    swift_bridgeObjectRelease(v79, v80, v81, v82, v83, v84, v85, v86);
    _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v298, "MPOC monitor backend returned http error: %s, server code: %s, user info: %s", (uint8_t *)v45, 0x20u);
    v87 = v299;
    swift_arrayDestroy(v299, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v87, -1, -1);
    swift_slowDealloc(v45, -1, -1);

  }
  else
  {

  }
  if ((related decl 'e' for SPRHTTPErrorCode.isClientError.getter(v41) & 1) == 0)
  {
    v144 = related decl 'e' for SPRHTTPErrorCode.isServerError.getter(v41);
    v145 = sub_1000D0F18();
    v146 = swift_allocError(&type metadata for MPOCMonitorBackendError, v145, 0, 0);
    if ((v144 & 1) != 0)
      v148 = 12;
    else
      v148 = 13;
    *(_QWORD *)v147 = v148;
    *(_BYTE *)(v147 + 8) = 1;
    swift_willThrow(v146);

LABEL_57:
    v96 = swift_errorRelease();
LABEL_58:
    v185 = 0;
    goto LABEL_59;
  }
  v299 = (void (**)(_QWORD, _QWORD, _QWORD))v41;
  v108 = related decl 'e' for SPRHTTPErrorCode.serverCode.getter(v41);
  if (!v109)
  {
LABEL_50:
    v204 = v299;
    v205 = Logger.logObject.getter(v204);
    v206 = static os_log_type_t.error.getter(v205);
    if (os_log_type_enabled(v205, v206))
    {
      v295 = a1;
      v207 = (uint8_t *)swift_slowAlloc(12, -1);
      v303 = (uint8_t *)swift_slowAlloc(32, -1);
      v305 = (uint64_t)v303;
      *(_DWORD *)v207 = 136315138;
      v208 = related decl 'e' for SPRHTTPErrorCode.serverCode.getter(v204);
      if (v209)
      {
        v210 = v209;
      }
      else
      {
        v208 = 7104878;
        v210 = 0xE300000000000000;
      }
      v307 = COERCE_DOUBLE(sub_1000056EC(v208, v210, &v305));
      v13 = v302;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308, v207 + 4, v207 + 12);

      v211 = (_TtC14softposreaderd12RemoteReader *)v210;
      a1 = v295;
      swift_bridgeObjectRelease(v211, v212, v213, v214, v215, v216, v217, v218);
      _os_log_impl((void *)&_mh_execute_header, v205, v206, "Invalid server code format: %s", v207, 0xCu);
      v219 = v303;
      swift_arrayDestroy(v303, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v219, -1, -1);
      swift_slowDealloc(v207, -1, -1);

    }
    else
    {

    }
    v220 = sub_1000D0F18();
    v221 = swift_allocError(&type metadata for MPOCMonitorBackendError, v220, 0, 0);
    *(_QWORD *)v222 = 0;
    *(_BYTE *)(v222 + 8) = 1;
    swift_willThrow(v221);

    goto LABEL_57;
  }
  v110 = v108;
  v111 = v109;
  v305 = 45;
  v306 = 0xE100000000000000;
  __chkstk_darwin(v108);
  v292 = &v305;
  swift_bridgeObjectRetain();
  v112 = sub_10007CE10(0x7FFFFFFFFFFFFFFFLL, 1, sub_1000D0F5C, (uint64_t)(&v294 - 4), v110, (unint64_t)v111);
  swift_bridgeObjectRelease(v111, v113, v114, v115, v116, v117, v118, v119);
  if (*(_QWORD *)(v112 + 16) != 2)
  {
LABEL_49:
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v112, v120, v121, v122, v123, v124, v125, v126);
    goto LABEL_50;
  }
  v300 = v36;
  v127 = v13;
  v295 = a1;
  v128 = *(_QWORD *)(v112 + 32);
  v129 = *(_QWORD *)(v112 + 40);
  v131 = *(void **)(v112 + 48);
  v130 = *(_TtC14softposreaderd12RemoteReader **)(v112 + 56);
  swift_bridgeObjectRetain();
  v132 = Substring.init(_:)(5132109, 0xE300000000000000);
  v140 = v135;
  if (!v130)
  {
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v112, v133, v134, v135, v136, v137, v138, v139);
    swift_bridgeObjectRelease(v140, v190, v191, v192, v193, v194, v195, v196);
    swift_bridgeObjectRelease(0, v197, v198, v199, v200, v201, v202, v203);
    a1 = v295;
    v13 = v127;
    goto LABEL_50;
  }
  if (v131 == v134 && v130 == v135 && v128 >> 16 == v132 >> 16 && v129 >> 16 == (unint64_t)v133 >> 16)
  {
    swift_bridgeObjectRelease_n(v130, 2);
    v13 = v127;
    goto LABEL_37;
  }
  LOBYTE(v292) = 0;
  v152 = _stringCompareInternal(_:_:_:_:expecting:)(v131);
  swift_bridgeObjectRelease(v130, v153, v154, v155, v156, v157, v158, v159);
  swift_bridgeObjectRelease(v140, v160, v161, v162, v163, v164, v165, v166);
  a1 = v295;
  v13 = v127;
  if ((v152 & 1) == 0)
    goto LABEL_49;
LABEL_37:
  if (*(_QWORD *)(v112 + 16) < 2uLL)
  {
    __break(1u);
    goto LABEL_95;
  }
  v167 = *(_QWORD *)(v112 + 64);
  v168 = *(_QWORD *)(v112 + 72);
  v169 = *(_QWORD *)(v112 + 80);
  v130 = *(_TtC14softposreaderd12RemoteReader **)(v112 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v112, v170, v171, v172, v173, v174, v175, v176);
  if (!((v168 ^ v167) >> 14))
  {
LABEL_95:
    swift_bridgeObjectRelease(v130, v120, v121, v122, v123, v124, v125, v126);
    a1 = v295;
    goto LABEL_50;
  }
  v177 = sub_1000D0E48(v167, v168, v169, (unint64_t)v130, 10);
  if (((unsigned __int16)v178 & 0x100) != 0)
    v177 = (uint64_t)sub_10007DA78(v167, v168, v169, (uint64_t)v130, 10);
  v185 = v177;
  v186 = (char)v178;
  swift_bridgeObjectRelease(v130, v178, v179, v180, v181, v182, v183, v184);
  a1 = v295;
  if ((v186 & 1) != 0)
    goto LABEL_50;
  if (v185 > 4599)
  {
    switch(v185)
    {
      case 4600:
        v224 = sub_1000D0F18();
        v225 = swift_allocError(&type metadata for MPOCMonitorBackendError, v224, 0, 0);
        *(_QWORD *)v226 = 5;
        *(_BYTE *)(v226 + 8) = 1;
        swift_willThrow(v225);

        v96 = swift_errorRelease();
        v185 = 4600;
        break;
      case 4601:
        v239 = sub_1000D0F18();
        v240 = swift_allocError(&type metadata for MPOCMonitorBackendError, v239, 0, 0);
        *(_QWORD *)v241 = 6;
        *(_BYTE *)(v241 + 8) = 1;
        swift_willThrow(v240);

        v96 = swift_errorRelease();
        v185 = 4601;
        break;
      case 4602:
        v242 = sub_1000D0F18();
        v243 = swift_allocError(&type metadata for MPOCMonitorBackendError, v242, 0, 0);
        *(_QWORD *)v244 = 7;
        *(_BYTE *)(v244 + 8) = 1;
        swift_willThrow(v243);

        v96 = swift_errorRelease();
        v185 = 4602;
        break;
      case 4603:
        v245 = sub_1000D0F18();
        v246 = swift_allocError(&type metadata for MPOCMonitorBackendError, v245, 0, 0);
        *(_QWORD *)v247 = 8;
        *(_BYTE *)(v247 + 8) = 1;
        swift_willThrow(v246);

        v96 = swift_errorRelease();
        v185 = 4603;
        break;
      default:
        if (v185 == 4700)
        {
          v248 = sub_1000D0F18();
          v249 = swift_allocError(&type metadata for MPOCMonitorBackendError, v248, 0, 0);
          *(_QWORD *)v250 = 9;
          *(_BYTE *)(v250 + 8) = 1;
          swift_willThrow(v249);

          v96 = swift_errorRelease();
          v185 = 4700;
        }
        else
        {
          if (v185 != 4701)
            goto LABEL_83;
          v230 = sub_1000D0F18();
          v231 = swift_allocError(&type metadata for MPOCMonitorBackendError, v230, 0, 0);
          *(_QWORD *)v232 = 10;
          *(_BYTE *)(v232 + 8) = 1;
          swift_willThrow(v231);

          v96 = swift_errorRelease();
          v185 = 4701;
        }
        break;
    }
    goto LABEL_59;
  }
  if (v185 <= 4129)
  {
    if ((unint64_t)(v185 - 4000) < 3)
    {
      v227 = sub_1000D0F18();
      v228 = swift_allocError(&type metadata for MPOCMonitorBackendError, v227, 0, 0);
      *(_QWORD *)v229 = 1;
      *(_BYTE *)(v229 + 8) = 1;
LABEL_84:
      swift_willThrow(v228);

      v96 = swift_errorRelease();
      goto LABEL_59;
    }
LABEL_83:
    v278 = sub_1000D0F18();
    v228 = swift_allocError(&type metadata for MPOCMonitorBackendError, v278, 0, 0);
    *(_QWORD *)v279 = 11;
    *(_BYTE *)(v279 + 8) = 1;
    goto LABEL_84;
  }
  if (v185 > 4499)
  {
    if (v185 != 4500)
    {
      if (v185 == 4550)
      {
        v233 = sub_1000D0F18();
        v234 = swift_allocError(&type metadata for MPOCMonitorBackendError, v233, 0, 0);
        *(_QWORD *)v235 = 4;
        *(_BYTE *)(v235 + 8) = 1;
        swift_willThrow(v234);

        v96 = swift_errorRelease();
        v185 = 4550;
        goto LABEL_59;
      }
      goto LABEL_83;
    }
    v251 = v299;
    v252 = related decl 'e' for SPRHTTPErrorCode.atsBanExpirationTime.getter(v299);
    if (!v253)
      goto LABEL_89;
    v254 = v253;
    v307 = 0.0;
    v255 = __chkstk_darwin(v252);
    v292 = (uint64_t *)&v307;
    if (((unint64_t)v254 & 0x1000000000000000) != 0
      || !((unint64_t)v254 & 0x2000000000000000 | v256 & 0x1000000000000000))
    {
      _StringGuts._slowWithCString<A>(_:)(&v304, sub_1000D0F78, &v294 - 4, v256, v254, &type metadata for Bool);
      swift_bridgeObjectRelease(v254, v285, v286, v287, v288, v289, v290, v291);
      if ((v304 & 1) != 0)
      {
LABEL_82:
        v274 = v307 / 1000.0;
        v275 = sub_1000D0F18();
        v276 = swift_allocError(&type metadata for MPOCMonitorBackendError, v275, 0, 0);
        *(double *)v277 = v274;
        *(_BYTE *)(v277 + 8) = 0;
        swift_willThrow(v276);

LABEL_90:
        v96 = swift_errorRelease();
        v185 = 4500;
        goto LABEL_59;
      }
    }
    else
    {
      __chkstk_darwin(v255);
      v292 = (uint64_t *)sub_1000D0F78;
      v293 = v257;
      if (((unint64_t)v254 & 0x2000000000000000) == 0)
      {
        if ((v258 & 0x1000000000000000) != 0)
        {
          v264 = ((unint64_t)v254 & 0xFFFFFFFFFFFFFFFLL) + 32;
          v265 = v258 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v264 = _StringObject.sharedUTF8.getter(v258, v254);
        }
        v266 = sub_1000242E4(v264, v265, (void (*)(uint64_t *__return_ptr))sub_1000D0F90);
        swift_bridgeObjectRelease(v254, v267, v268, v269, v270, v271, v272, v273);
        if ((v266 & 1) != 0)
          goto LABEL_82;
        goto LABEL_88;
      }
      v305 = v258;
      v306 = (unint64_t)v254 & 0xFFFFFFFFFFFFFFLL;
      if (v258 <= 0x20u && ((1 << v258) & 0x100003E01) != 0
        || (v283 = (unsigned __int8 *)_swift_stdlib_strtod_clocale(&v305, &v307)) == 0)
      {
        swift_bridgeObjectRelease(v254, v257, (id)v258, v259, v260, v261, v262, v263);
      }
      else
      {
        v284 = *v283;
        swift_bridgeObjectRelease(v254, v257, (id)v258, v259, v260, v261, v262, v263);
        if (!v284)
          goto LABEL_82;
      }
    }
LABEL_88:
    v251 = v299;
LABEL_89:
    v280 = sub_1000D0F18();
    v281 = swift_allocError(&type metadata for MPOCMonitorBackendError, v280, 0, 0);
    *(_QWORD *)v282 = 0x4014000000000000;
    *(_BYTE *)(v282 + 8) = 0;
    swift_willThrow(v281);

    goto LABEL_90;
  }
  if (v185 == 4130)
  {
    v236 = sub_1000D0F18();
    v237 = swift_allocError(&type metadata for MPOCMonitorBackendError, v236, 0, 0);
    *(_QWORD *)v238 = 2;
    *(_BYTE *)(v238 + 8) = 1;
    swift_willThrow(v237);

    v96 = swift_errorRelease();
    v185 = 4130;
    goto LABEL_59;
  }
  if (v185 != 4444)
    goto LABEL_83;
  v187 = sub_1000D0F18();
  v188 = swift_allocError(&type metadata for MPOCMonitorBackendError, v187, 0, 0);
  *(_QWORD *)v189 = 3;
  *(_BYTE *)(v189 + 8) = 1;
  swift_willThrow(v188);

  v96 = swift_errorRelease();
  v185 = 4444;
LABEL_59:
  v223 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(v96);
  sub_10003E318(v223, v185);
  sub_10000A9B0(v308, *((unint64_t *)&v308 + 1));
  return (void *)(*(uint64_t (**)(char *, uint64_t))(v296 + 8))(v13, v297);
}

uint64_t sub_1000D0CA8(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  _TtC14softposreaderd12RemoteReader **v8;
  char *v9;
  uint64_t v10;

  swift_bridgeObjectRelease(v8[3], a2, a3, a4, a5, a6, a7, a8);
  v9 = (char *)v8 + OBJC_IVAR____TtC9SPREngine25MPOCDefaultMonitorBackend_url;
  v10 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  sub_100005D3C((_TtC14softposreaderd12RemoteReader **)((char *)v8
                                                      + OBJC_IVAR____TtC9SPREngine25MPOCDefaultMonitorBackend_secureChannel));
  swift_release(*(_TtC14softposreaderd12RemoteReader **)((char *)v8
                                                       + OBJC_IVAR____TtC9SPREngine25MPOCDefaultMonitorBackend_monitorAnalytics));
  return swift_deallocClassInstance(v8, LODWORD((*v8)[1].super.isa), WORD2((*v8)[1].super.isa));
}

uint64_t sub_1000D0D20()
{
  return type metadata accessor for MPOCDefaultMonitorBackend(0);
}

uint64_t type metadata accessor for MPOCDefaultMonitorBackend(uint64_t a1)
{
  uint64_t result;

  result = qword_1001B21E0;
  if (!qword_1001B21E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MPOCDefaultMonitorBackend);
  return result;
}

uint64_t sub_1000D0D64(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_100161600;
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_100161618;
    v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void *sub_1000D0DF4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  void *result;
  _BYTE __src[296];

  result = sub_1000CF7A8(a1, __src);
  if (!v2)
    return memcpy(a2, __src, 0x128uLL);
  return result;
}

uint64_t sub_1000D0E48(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t result;
  char v13;
  _QWORD v14[2];
  char v15;

  if ((a4 & 0x1000000000000000) != 0)
  {
    result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v11 = v14;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v11 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v11 = (_QWORD *)_StringObject.sharedUTF8.getter(a3, a4);
  }
  result = sub_10007E2F4((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

unint64_t sub_1000D0F18()
{
  unint64_t result;

  result = qword_1001B22A0;
  if (!qword_1001B22A0)
  {
    result = swift_getWitnessTable(&unk_1001629B0, &type metadata for MPOCMonitorBackendError);
    atomic_store(result, (unint64_t *)&qword_1001B22A0);
  }
  return result;
}

uint64_t sub_1000D0F5C(uint64_t *a1)
{
  uint64_t v1;

  return sub_10007E2A0(a1, *(_QWORD **)(v1 + 16)) & 1;
}

_BYTE *sub_1000D0F78@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_10002427C(a1, a2);
}

_QWORD *sub_1000D0F90@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_100024338(*(_QWORD *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_1000D0FA8(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for SPRHTTPError(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000D0FE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int128 v25[2];
  _QWORD v26[5];
  _QWORD v27[5];
  uint64_t v28;
  uint64_t v29;

  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1;
  sub_1000DEDE4();
  if (v1)
  {
    swift_release(a1);
  }
  else
  {
    sub_1000E273C();
    if (qword_1001AD1A0 != -1)
      swift_once(&qword_1001AD1A0, sub_1000CF518);
    v8 = type metadata accessor for Logger(0);
    sub_100003A14(v8, (uint64_t)qword_1001B21A0);
    v9 = swift_retain_n(a1, 2);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.debug.getter();
    v12 = v11;
    if (os_log_type_enabled(v10, v11))
    {
      v13 = swift_slowAlloc(22, -1);
      v24 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v25[0] = v24;
      *(_DWORD *)v13 = 136315394;
      v23 = v12;
      v28 = sub_1000056EC(0x7065642874696E69, 0xEC000000293A746FLL, (uint64_t *)v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v13 + 4, v13 + 12);
      *(_WORD *)(v13 + 12) = 2080;
      v22 = v13 + 14;
      type metadata accessor for Settings(0);
      sub_100116B10();
      v15 = v14;
      v28 = sub_1000056EC(v16, v14, (uint64_t *)v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v22, v13 + 22);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease(v15);
      _os_log_impl((void *)&_mh_execute_header, v10, (os_log_type_t)v23, "MPOCDefaultMonitorBackend.%s, BackendSetting: %s", (uint8_t *)v13, 0x16u);
      v17 = v24;
      swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v13, -1, -1);

    }
    else
    {

      swift_release_n(a1, 2);
    }
    v18 = sub_100005EF8(v27, v27[3]);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, *v18 + OBJC_IVAR____TtC9SPREngine11Environment_mpocMonitoringBackendURL, v3);
    sub_100005EF8(v26, v26[3]);
    sub_10003EB24(v25);
    v20 = sub_1000E370C();
    v21 = type metadata accessor for MPOCDefaultMonitorBackend(0);
    v7 = swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    sub_1000CF5A8((uint64_t)v6, v25, v20);
    swift_release(a1);
    sub_100005D3C(v26);
    sub_100005D3C(v27);
  }
  return v7;
}

uint64_t sub_1000D1354@<X0>(uint64_t a1@<X8>)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  char *v40;
  uint64_t (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _TtC14softposreaderd12RemoteReader *v52;
  SEL v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _TtC14softposreaderd12RemoteReader *v63;
  SEL v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  os_log_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  os_log_t v75;
  char *v76;
  char *v77;
  void (*v78)(char *, char *, uint64_t);
  char *v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  int v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _TtC14softposreaderd12RemoteReader *v90;
  _TtC14softposreaderd12RemoteReader *v91;
  void (*v92)(char *, uint64_t);
  SEL v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  void (*v100)(char *, uint64_t);
  uint64_t (*v101)(char *, uint64_t);
  uint64_t v102;
  char *v103;
  uint64_t v104;
  _TtC14softposreaderd12RemoteReader *v105;
  _TtC14softposreaderd12RemoteReader *v106;
  SEL v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  os_log_t v114;
  uint64_t v115;
  void (*v116)(char *, uint64_t);
  uint64_t v118;
  uint64_t v119;
  os_log_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  char *v124;
  os_log_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  void (*v132)(char *, uint64_t);
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _BYTE v139[16];
  uint64_t v140;
  uint64_t v141;
  uint64_t v142[3];
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  _OWORD v147[8];
  _BYTE v148[16];
  unint64_t v149;
  char v150;

  v128 = a1;
  v2 = type metadata accessor for DateInterval(0);
  v136 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v130 = (char *)&v118 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v126 = (char *)&v118 - v6;
  __chkstk_darwin(v5);
  v135 = (char *)&v118 - v7;
  v131 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v131 - 8);
  __chkstk_darwin(v131);
  v124 = (char *)&v118 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0, v10);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v125 = (os_log_t)((char *)&v118 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v118 - v16;
  v18 = __chkstk_darwin(v15);
  v133 = (char *)&v118 - v19;
  v20 = __chkstk_darwin(v18);
  v134 = (char *)&v118 - v21;
  __chkstk_darwin(v20);
  v23 = (char *)&v118 - v22;
  v24 = v1[11];
  v25 = v1[13];
  v26 = v1[14];
  v147[5] = v1[12];
  v147[6] = v25;
  v147[7] = v26;
  v27 = v1[7];
  v28 = v1[9];
  v29 = v1[10];
  v147[1] = v1[8];
  v147[2] = v28;
  v147[3] = v29;
  v147[4] = v24;
  v30 = v1[4];
  v143 = v1[3];
  v144 = v30;
  v31 = v1[6];
  v145 = v1[5];
  v146 = v31;
  v147[0] = v27;
  sub_1000D1B44((uint64_t)v147, (uint64_t)v148);
  v32 = sub_1000D1B44((uint64_t)v148, (uint64_t)&v149);
  if ((v150 & 1) != 0)
    static Date.distantPast.getter(v32);
  else
    Date.init(timeIntervalSince1970:)((double)v149);
  v33 = v23;
  v34 = v133;
  Date.init(timeIntervalSince1970:)((double)*((unint64_t *)&v146 + 1));
  v35 = v134;
  static Date.- infix(_:_:)(v34, 1.0);
  v132 = *(void (**)(char *, uint64_t))(v12 + 8);
  v132(v34, v11);
  v36 = static Date.< infix(_:_:)(v35, v23);
  v129 = v23;
  if ((v36 & 1) != 0)
  {
    if (qword_1001AD158 != -1)
      swift_once(&qword_1001AD158, sub_1000CC540);
    v37 = v131;
    v38 = sub_100003A14(v131, (uint64_t)qword_1001B4DF8);
    v123 = v8;
    v39 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    v40 = v124;
    v39(v124, v38, v37);
    v41 = *(uint64_t (**)(char *, char *, uint64_t))(v12 + 16);
    v42 = v41(v17, v33, v11);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.default.getter();
    v122 = v44;
    if (os_log_type_enabled(v43, v44))
    {
      v45 = swift_slowAlloc(22, -1);
      v121 = swift_slowAlloc(64, -1);
      v142[0] = v121;
      *(_DWORD *)v45 = 136315394;
      v119 = v45 + 4;
      v46 = swift_beginAccess(v134, &v137, 0, 0);
      v48 = sub_1000D26BC(v46, v47);
      v127 = v2;
      v49 = v48;
      v120 = v43;
      v50 = dispatch thunk of CustomStringConvertible.description.getter(v11, v48);
      v52 = (_TtC14softposreaderd12RemoteReader *)v51;
      v138 = sub_1000056EC(v50, v51, v142);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, v139, v119, v45 + 12);
      swift_bridgeObjectRelease(v52, v53, v54, v55, v56, v57, v58, v59);
      *(_WORD *)(v45 + 12) = 2080;
      v60 = v49;
      v2 = v127;
      v61 = dispatch thunk of CustomStringConvertible.description.getter(v11, v60);
      v63 = (_TtC14softposreaderd12RemoteReader *)v62;
      v138 = sub_1000056EC(v61, v62, v142);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, v139, v45 + 14, v45 + 22);
      swift_bridgeObjectRelease(v63, v64, v65, v66, v67, v68, v69, v70);
      v132(v17, v11);
      v71 = v120;
      _os_log_impl((void *)&_mh_execute_header, v120, (os_log_type_t)v122, "Invalid JWT: exp %s is before nbf %s, replacing exp with nbf.", (uint8_t *)v45, 0x16u);
      v72 = v121;
      swift_arrayDestroy(v121, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v72, -1, -1);
      v73 = v45;
      v35 = v134;
      swift_slowDealloc(v73, -1, -1);

      (*(void (**)(char *, uint64_t))(v123 + 8))(v124, v131);
    }
    else
    {
      v132(v17, v11);

      (*(void (**)(char *, uint64_t))(v123 + 8))(v40, v37);
    }
    swift_beginAccess(v35, &v138, 1, 0);
    v33 = v129;
    (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v35, v129, v11);
  }
  else
  {
    v41 = *(uint64_t (**)(char *, char *, uint64_t))(v12 + 16);
  }
  v74 = v133;
  v41(v133, v33, v11);
  swift_beginAccess(v35, v142, 0, 0);
  v75 = v125;
  v41((char *)v125, v35, v11);
  DateInterval.init(start:end:)(v74, v75);
  v76 = v130;
  if (qword_1001AD158 != -1)
    swift_once(&qword_1001AD158, sub_1000CC540);
  sub_100003A14(v131, (uint64_t)qword_1001B4DF8);
  v77 = v135;
  v78 = *(void (**)(char *, char *, uint64_t))(v136 + 16);
  v79 = v126;
  v78(v126, v135, v2);
  v80 = ((uint64_t (*)(char *, char *, uint64_t))v78)(v76, v77, v2);
  v81 = Logger.logObject.getter(v80);
  v82 = static os_log_type_t.default.getter();
  v83 = v82;
  if (os_log_type_enabled(v81, v82))
  {
    v84 = swift_slowAlloc(22, -1);
    v131 = swift_slowAlloc(64, -1);
    v141 = v131;
    *(_DWORD *)v84 = 136315394;
    v123 = v84 + 4;
    v85 = v133;
    v125 = v81;
    v86 = DateInterval.start.getter();
    v88 = sub_1000D26BC(v86, v87);
    v89 = dispatch thunk of CustomStringConvertible.description.getter(v11, v88);
    v91 = v90;
    LODWORD(v124) = v83;
    v92 = v132;
    v132(v85, v11);
    v140 = sub_1000056EC(v89, (unint64_t)v91, &v141);
    v127 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v123, v84 + 12);
    swift_bridgeObjectRelease(v91, v93, v94, v95, v96, v97, v98, v99);
    v100 = v92;
    v101 = *(uint64_t (**)(char *, uint64_t))(v136 + 8);
    v102 = v101(v79, v127);
    *(_WORD *)(v84 + 12) = 2080;
    v126 = (char *)(v84 + 14);
    v103 = v130;
    DateInterval.end.getter(v102);
    v104 = dispatch thunk of CustomStringConvertible.description.getter(v11, v88);
    v106 = v105;
    v100(v85, v11);
    v140 = sub_1000056EC(v104, (unint64_t)v106, &v141);
    v2 = v127;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v126, v84 + 22);
    swift_bridgeObjectRelease(v106, v107, v108, v109, v110, v111, v112, v113);
    v101(v103, v2);
    v114 = v125;
    _os_log_impl((void *)&_mh_execute_header, v125, (os_log_type_t)v124, "Validity period: %s...%s", (uint8_t *)v84, 0x16u);
    v115 = v131;
    swift_arrayDestroy(v131, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v115, -1, -1);
    swift_slowDealloc(v84, -1, -1);

    v100(v129, v11);
  }
  else
  {

    v116 = *(void (**)(char *, uint64_t))(v136 + 8);
    v116(v76, v2);
    v116(v79, v2);
    v132(v129, v11);
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v136 + 32))(v128, v135, v2);
  return ((uint64_t (*)(char *, uint64_t))v132)(v134, v11);
}

uint64_t sub_1000D1B44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003A2C(&qword_1001B22A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D1B8C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  char v21;
  char v22;

  v3 = v1;
  v5 = sub_100003A2C(&qword_1001B22E8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100005EF8(a1, v9);
  v11 = sub_1000D41FC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for JWTHeader.CodingKeys, &type metadata for JWTHeader.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v22 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v22, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v21 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v21, v5);
    v16 = v3[4];
    v17 = v3[5];
    v20 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v20, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000D1CC8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000D1CF4 + 4 * byte_100161650[a1]))(7566185, 0xE300000000000000);
}

uint64_t sub_1000D1CF4()
{
  return 6583649;
}

uint64_t sub_1000D1D04()
{
  return 6911082;
}

uint64_t sub_1000D1D10()
{
  return 7627113;
}

uint64_t sub_1000D1D1C()
{
  return 7370853;
}

uint64_t sub_1000D1D28()
{
  return 6709870;
}

uint64_t sub_1000D1D34()
{
  return 6452595;
}

uint64_t sub_1000D1D40()
{
  return 1684628851;
}

uint64_t sub_1000D1D50()
{
  return 6580592;
}

uint64_t sub_1000D1D5C()
{
  return 1684631668;
}

uint64_t sub_1000D1D70()
{
  return 0x64697074666173;
}

uint64_t sub_1000D1D88()
{
  return 1953853539;
}

uint64_t sub_1000D1D98()
{
  return 1802531681;
}

uint64_t sub_1000D1DA8(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;

  v3 = v1;
  v5 = sub_100003A2C(&qword_1001B22E0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100005EF8(a1, v9);
  v11 = sub_1000D4F7C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for JWTClaims.CodingKeys, &type metadata for JWTClaims.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v45 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v45, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v44 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v44, v5);
    v16 = v3[4];
    v17 = v3[5];
    v43 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v43, v5);
    v18 = v3[6];
    v42 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v18, &v42, v5);
    v19 = v3[7];
    v41 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v19, &v41, v5);
    v20 = v3[8];
    v21 = *((unsigned __int8 *)v3 + 72);
    v40 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, &v40, v5);
    v22 = v3[10];
    v23 = v3[11];
    v39 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v39, v5);
    v24 = v3[12];
    v25 = v3[13];
    v38 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, &v38, v5);
    v26 = v3[14];
    v27 = v3[15];
    HIBYTE(v37) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26, v27, (char *)&v37 + 7, v5);
    v28 = v3[16];
    v29 = v3[17];
    BYTE6(v37) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v28, v29, (char *)&v37 + 6, v5);
    v30 = v3[18];
    v31 = v3[19];
    BYTE5(v37) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v30, v31, (char *)&v37 + 5, v5);
    v32 = v3[20];
    v33 = v3[21];
    BYTE4(v37) = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v32, v33, (char *)&v37 + 4, v5);
    v34 = v3[22];
    v35 = v3[23];
    BYTE3(v37) = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v34, v35, (char *)&v37 + 3, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000D2078()
{
  char *v0;

  return qword_100161B30[*v0];
}

uint64_t sub_1000D2090@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000D3EA4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000D20B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000D41FC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D20DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000D41FC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D2104(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[3];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = *a2;
  v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return sub_1000D2B4C((uint64_t *)v7, v8) & 1;
}

double sub_1000D2148@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_1000D3FC8(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_1000D2188(_QWORD *a1)
{
  return sub_1000D1B8C(a1);
}

uint64_t sub_1000D219C()
{
  unsigned __int8 *v0;

  return sub_1000D1CC8(*v0);
}

uint64_t sub_1000D21A4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000D4240(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000D21C8(_BYTE *a1@<X8>)
{
  *a1 = 13;
}

uint64_t sub_1000D21D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000D4F7C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D21FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000D4F7C();
  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_1000D2224(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v15[12];
  _OWORD v16[12];

  v2 = a1[9];
  v15[8] = a1[8];
  v15[9] = v2;
  v3 = a1[11];
  v15[10] = a1[10];
  v15[11] = v3;
  v4 = a1[5];
  v15[4] = a1[4];
  v15[5] = v4;
  v5 = a1[7];
  v15[6] = a1[6];
  v15[7] = v5;
  v6 = a1[1];
  v15[0] = *a1;
  v15[1] = v6;
  v7 = a1[3];
  v15[2] = a1[2];
  v15[3] = v7;
  v8 = a2[9];
  v16[8] = a2[8];
  v16[9] = v8;
  v9 = a2[11];
  v16[10] = a2[10];
  v16[11] = v9;
  v10 = a2[5];
  v16[4] = a2[4];
  v16[5] = v10;
  v11 = a2[7];
  v16[6] = a2[6];
  v16[7] = v11;
  v12 = a2[1];
  v16[0] = *a2;
  v16[1] = v12;
  v13 = a2[3];
  v16[2] = a2[2];
  v16[3] = v13;
  return sub_1000D2704((uint64_t *)v15, (uint64_t)v16);
}

double sub_1000D22B4@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  sub_1000D46AC(a1, v11);
  if (!v2)
  {
    v5 = v19;
    a2[8] = v18;
    a2[9] = v5;
    v6 = v21;
    a2[10] = v20;
    a2[11] = v6;
    v7 = v15;
    a2[4] = v14;
    a2[5] = v7;
    v8 = v17;
    a2[6] = v16;
    a2[7] = v8;
    v9 = v11[1];
    *a2 = v11[0];
    a2[1] = v9;
    result = *(double *)&v12;
    v10 = v13;
    a2[2] = v12;
    a2[3] = v10;
  }
  return result;
}

uint64_t sub_1000D2314(_QWORD *a1)
{
  return sub_1000D1DA8(a1);
}

uint64_t sub_1000D2328(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39;

  v3 = v1;
  v5 = sub_100003A2C(&qword_1001B2308);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100005EF8(a1, v9);
  v11 = sub_1000D57FC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for JSONWebToken.CodingKeys, &type metadata for JSONWebToken.CodingKeys, v11, v9, v10);
  v12 = v3[1];
  v27 = *v3;
  v13 = v3[2];
  v28 = v12;
  v29 = v13;
  v39 = 0;
  v14 = sub_1000D5884();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v27, &v39, v5, &type metadata for JWTHeader, v14);
  if (!v2)
  {
    v15 = v3[12];
    v35 = v3[11];
    v36 = v15;
    v16 = v3[14];
    v37 = v3[13];
    v38 = v16;
    v17 = v3[8];
    v31 = v3[7];
    v32 = v17;
    v18 = v3[10];
    v33 = v3[9];
    v34 = v18;
    v19 = v3[4];
    v27 = v3[3];
    v20 = v3[5];
    v21 = v3[6];
    v28 = v19;
    v29 = v20;
    v30 = v21;
    v39 = 1;
    v22 = sub_1000D58C8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v27, &v39, v5, &type metadata for JWTClaims, v22);
    v27 = v3[15];
    v39 = 2;
    v23 = sub_1000D590C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v27, &v39, v5, &type metadata for Data, v23);
    v24 = *((_QWORD *)v3 + 32);
    v25 = *((_QWORD *)v3 + 33);
    LOBYTE(v27) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v24, v25, &v27, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000D2520()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000D254C + 4 * byte_10016165D[*v0]))(0x726564616568, 0xE600000000000000);
}

uint64_t sub_1000D254C()
{
  return 0x736D69616C63;
}

uint64_t sub_1000D255C()
{
  return 0x727574616E676973;
}

uint64_t sub_1000D2578()
{
  return 0x65756C6156776172;
}

uint64_t sub_1000D2590@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000D5128(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000D25B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000D57FC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D25DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000D57FC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D2604(void *__src, const void *a2)
{
  char v3;
  uint64_t v5[34];
  _BYTE __dst[272];

  memcpy(v5, __src, sizeof(v5));
  memcpy(__dst, a2, sizeof(__dst));
  sub_1000D29C8(v5, (uint64_t)__dst);
  return v3 & 1;
}

void sub_1000D2658(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  _BYTE v4[272];

  sub_1000D52DC(a1, v4);
  if (!v2)
    memcpy(a2, v4, 0x110uLL);
}

uint64_t sub_1000D26A8(_QWORD *a1)
{
  return sub_1000D2328(a1);
}

unint64_t sub_1000D26BC(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t v3;

  result = qword_1001ADA00;
  if (!qword_1001ADA00)
  {
    v3 = type metadata accessor for Date(255, a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for Date, v3);
    atomic_store(result, (unint64_t *)&qword_1001ADA00);
  }
  return result;
}

BOOL sub_1000D2704(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  _BOOL8 result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v4 = *a1;
  v5 = a1[1];
  v6 = *(_QWORD *)(a2 + 8);
  v7 = v4 == *(_QWORD *)a2 && v5 == v6;
  if (v7
    || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v6, 0), result = 0, (v8 & 1) != 0))
  {
    v10 = a1[2];
    v11 = a1[3];
    v12 = *(_QWORD *)(a2 + 16);
    v13 = *(_QWORD *)(a2 + 24);
    v14 = v10 == v12 && v11 == v13;
    if (v14
      || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v12, v13, 0), result = 0, (v15 & 1) != 0))
    {
      if ((v16 = a1[4], v17 = a1[5], v18 = *(_QWORD *)(a2 + 32), v19 = *(_QWORD *)(a2 + 40), v16 == v18) && v17 == v19
        || (v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v18, v19, 0), result = 0, (v20 & 1) != 0))
      {
        if (a1[6] != *(_QWORD *)(a2 + 48) || a1[7] != *(_QWORD *)(a2 + 56))
          return 0;
        v21 = *(_BYTE *)(a2 + 72);
        if ((a1[9] & 1) != 0)
        {
          if (!*(_BYTE *)(a2 + 72))
            return 0;
        }
        else
        {
          if (a1[8] != *(_QWORD *)(a2 + 64))
            v21 = 1;
          if ((v21 & 1) != 0)
            return 0;
        }
        v22 = a1[11];
        v23 = *(_QWORD *)(a2 + 88);
        if (v22)
        {
          if (!v23)
            return 0;
          v24 = a1[10];
          v25 = *(_QWORD *)(a2 + 80);
          if (v24 != v25 || v22 != v23)
          {
            v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v22, v25, v23, 0);
            result = 0;
            if ((v26 & 1) == 0)
              return result;
          }
        }
        else if (v23)
        {
          return 0;
        }
        v27 = a1[13];
        v28 = *(_QWORD *)(a2 + 104);
        if (v27)
        {
          if (!v28)
            return 0;
          v29 = a1[12];
          v30 = *(_QWORD *)(a2 + 96);
          if (v29 != v30 || v27 != v28)
          {
            v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v27, v30, v28, 0);
            result = 0;
            if ((v31 & 1) == 0)
              return result;
          }
        }
        else if (v28)
        {
          return 0;
        }
        v32 = a1[15];
        v33 = *(_QWORD *)(a2 + 120);
        if (v32)
        {
          if (!v33)
            return 0;
          v34 = a1[14];
          v35 = *(_QWORD *)(a2 + 112);
          if (v34 != v35 || v32 != v33)
          {
            v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v32, v35, v33, 0);
            result = 0;
            if ((v36 & 1) == 0)
              return result;
          }
        }
        else if (v33)
        {
          return 0;
        }
        v37 = a1[17];
        v38 = *(_QWORD *)(a2 + 136);
        if (v37)
        {
          if (!v38)
            return 0;
          v39 = a1[16];
          v40 = *(_QWORD *)(a2 + 128);
          if (v39 != v40 || v37 != v38)
          {
            v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v39, v37, v40, v38, 0);
            result = 0;
            if ((v41 & 1) == 0)
              return result;
          }
        }
        else if (v38)
        {
          return 0;
        }
        v42 = a1[19];
        v43 = *(_QWORD *)(a2 + 152);
        if (v42)
        {
          if (!v43)
            return 0;
          v44 = a1[18];
          v45 = *(_QWORD *)(a2 + 144);
          if (v44 != v45 || v42 != v43)
          {
            v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v44, v42, v45, v43, 0);
            result = 0;
            if ((v46 & 1) == 0)
              return result;
          }
        }
        else if (v43)
        {
          return 0;
        }
        v47 = a1[21];
        v48 = *(_QWORD *)(a2 + 168);
        if (v47)
        {
          if (!v48)
            return 0;
          v49 = a1[20];
          v50 = *(_QWORD *)(a2 + 160);
          if (v49 != v50 || v47 != v48)
          {
            v51 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v47, v50, v48, 0);
            result = 0;
            if ((v51 & 1) == 0)
              return result;
          }
        }
        else if (v48)
        {
          return 0;
        }
        v52 = a1[23];
        v53 = *(_QWORD *)(a2 + 184);
        if (v52)
        {
          if (!v53)
            return 0;
          v54 = a1[22];
          v55 = *(_QWORD *)(a2 + 176);
          return v54 == v55 && v52 == v53
              || (_stringCompareWithSmolCheck(_:_:expecting:)(v54, v52, v55, v53, 0) & 1) != 0;
        }
        return !v53;
      }
    }
  }
  return result;
}

void sub_1000D29C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[12];
  _OWORD v28[13];

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v8 = a1[3];
  v7 = a1[4];
  v9 = a1[5];
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 24);
  v14 = *(_QWORD *)(a2 + 32);
  v13 = *(_QWORD *)(a2 + 40);
  if ((v4 == *(_QWORD *)a2 && v5 == v10
     || (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v10, 0) & 1) != 0)
    && (v6 == v11 && v8 == v12 || (_stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v11, v12, 0) & 1) != 0))
  {
    if (v9)
    {
      if (!v13
        || (v7 != v14 || v9 != v13) && (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v14, v13, 0) & 1) == 0)
      {
        return;
      }
    }
    else if (v13)
    {
      return;
    }
    v15 = *((_OWORD *)a1 + 12);
    v28[8] = *((_OWORD *)a1 + 11);
    v28[9] = v15;
    v16 = *((_OWORD *)a1 + 14);
    v28[10] = *((_OWORD *)a1 + 13);
    v28[11] = v16;
    v17 = *((_OWORD *)a1 + 8);
    v28[4] = *((_OWORD *)a1 + 7);
    v28[5] = v17;
    v18 = *((_OWORD *)a1 + 10);
    v28[6] = *((_OWORD *)a1 + 9);
    v28[7] = v18;
    v19 = *((_OWORD *)a1 + 4);
    v28[0] = *((_OWORD *)a1 + 3);
    v28[1] = v19;
    v20 = *((_OWORD *)a1 + 6);
    v28[2] = *((_OWORD *)a1 + 5);
    v28[3] = v20;
    v21 = *(_OWORD *)(a2 + 192);
    v27[8] = *(_OWORD *)(a2 + 176);
    v27[9] = v21;
    v22 = *(_OWORD *)(a2 + 224);
    v27[10] = *(_OWORD *)(a2 + 208);
    v27[11] = v22;
    v23 = *(_OWORD *)(a2 + 128);
    v27[4] = *(_OWORD *)(a2 + 112);
    v27[5] = v23;
    v24 = *(_OWORD *)(a2 + 160);
    v27[6] = *(_OWORD *)(a2 + 144);
    v27[7] = v24;
    v25 = *(_OWORD *)(a2 + 64);
    v27[0] = *(_OWORD *)(a2 + 48);
    v27[1] = v25;
    v26 = *(_OWORD *)(a2 + 96);
    v27[2] = *(_OWORD *)(a2 + 80);
    v27[3] = v26;
    if (sub_1000D2704((uint64_t *)v28, (uint64_t)v27))
      sub_1001288E0(a1[30], a1[31]);
  }
}

uint64_t sub_1000D2B4C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  v7 = v4 == *a2 && v5 == v6;
  if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0), result = 0, (v8 & 1) != 0))
  {
    v10 = a1[2];
    v11 = a1[3];
    v12 = a2[2];
    v13 = a2[3];
    v14 = v10 == v12 && v11 == v13;
    if (v14
      || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v12, v13, 0), result = 0, (v15 & 1) != 0))
    {
      v16 = a1[5];
      v17 = a2[5];
      if (v16)
      {
        if (v17)
        {
          v18 = a1[4];
          v19 = a2[4];
          if (v18 == v19 && v16 == v17)
            return 1;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(v18, v16, v19, v17, 0) & 1) != 0)
            return 1;
        }
      }
      else if (!v17)
      {
        return 1;
      }
      return 0;
    }
  }
  return result;
}

void *sub_1000D2C04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *result;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *context;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD __src[17];
  _OWORD v42[12];
  unint64_t v43;

  v4 = v3;
  *(_QWORD *)&__src[0] = a1;
  *((_QWORD *)&__src[0] + 1) = a2;
  *(_QWORD *)&v42[0] = 46;
  *((_QWORD *)&v42[0] + 1) = 0xE100000000000000;
  v8 = sub_1000095D0();
  v9 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(v42, &type metadata for String, &type metadata for String, v8, v8);
  v10 = v9;
  if (v9[2] != 3)
  {
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(a2);
    v15 = 0xD000000000000014;
    v16 = (void *)0x800000010016E620;
LABEL_13:
    v26 = sub_10002460C(10005, v15, v16, 0);
    return (void *)swift_willThrow(v26);
  }
  v11 = v9[4];
  v12 = v9[5];
  swift_bridgeObjectRetain(v12);
  result = (void *)Data.init(base64urlEncoded:)(v11, v12);
  if (v14 >> 60 == 15)
  {
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(a2);
LABEL_12:
    v16 = (void *)0x800000010016E640;
    v15 = 0xD000000000000010;
    goto LABEL_13;
  }
  if (v10[2] < 2uLL)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  v17 = (uint64_t)result;
  v18 = v14;
  v19 = v10[6];
  v20 = v10[7];
  swift_bridgeObjectRetain(v20);
  result = (void *)Data.init(base64urlEncoded:)(v19, v20);
  if (v21 >> 60 == 15)
  {
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(a2);
LABEL_11:
    sub_10000A9B0(v17, v18);
    goto LABEL_12;
  }
  v40 = (uint64_t)result;
  v43 = v21;
  if (v10[2] < 3uLL)
    goto LABEL_18;
  v22 = v10[8];
  v23 = v10[9];
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v10);
  v24 = Data.init(base64urlEncoded:)(v22, v23);
  if (v25 >> 60 == 15)
  {
    swift_bridgeObjectRelease(a2);
    sub_10000A9B0(v40, v43);
    goto LABEL_11;
  }
  v27 = v25;
  v39 = v24;
  v28 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  v29 = JSONDecoder.init()();
  v30 = objc_autoreleasePoolPush();
  v31 = sub_1000D310C();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for JWTHeader, v17, v18, &type metadata for JWTHeader, v31);
  objc_autoreleasePoolPop(v30);
  if (v4)
  {
    swift_release(v29);
    swift_bridgeObjectRelease(a2);
    swift_errorRetain(v4);
    sub_10002460C(10005, 0x636564204E4F534ALL, (void *)0xED0000676E69646FLL, v4);
    v34 = swift_errorRelease(v4);
    swift_willThrow(v34);
    sub_10000A9B0(v17, v18);
    sub_10000A9B0(v40, v43);
    sub_10000A9B0(v39, v27);
    return (void *)swift_errorRelease(v4);
  }
  else
  {
    v36 = *((_QWORD *)&__src[2] + 1);
    swift_bridgeObjectRetain(*((_QWORD *)&__src[2] + 1));
    v38 = *((_QWORD *)&__src[0] + 1);
    swift_bridgeObjectRetain(*((_QWORD *)&__src[0] + 1));
    v37 = *((_QWORD *)&__src[1] + 1);
    swift_bridgeObjectRetain(*((_QWORD *)&__src[1] + 1));
    context = objc_autoreleasePoolPush();
    v32 = sub_1000D3150();
    v33 = v43;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for JWTClaims, v40, v43, &type metadata for JWTClaims, v32);
    objc_autoreleasePoolPop(context);
    sub_10000A9B0(v17, v18);
    swift_release(v29);
    sub_10000A9B0(v40, v33);
    __src[11] = v42[8];
    __src[12] = v42[9];
    __src[13] = v42[10];
    __src[14] = v42[11];
    __src[7] = v42[4];
    __src[8] = v42[5];
    __src[9] = v42[6];
    __src[10] = v42[7];
    __src[3] = v42[0];
    __src[4] = v42[1];
    __src[5] = v42[2];
    __src[6] = v42[3];
    *(_QWORD *)&__src[15] = v39;
    *((_QWORD *)&__src[15] + 1) = v27;
    *(_QWORD *)&__src[16] = a1;
    *((_QWORD *)&__src[16] + 1) = a2;
    swift_bridgeObjectRetain(a2);
    sub_10005BAFC(__src);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(v37);
    swift_bridgeObjectRelease(v38);
    sub_100054898(__src);
    return memcpy(a3, __src, 0x110uLL);
  }
}

unint64_t sub_1000D310C()
{
  unint64_t result;

  result = qword_1001B22B0;
  if (!qword_1001B22B0)
  {
    result = swift_getWitnessTable(&unk_1001617E4, &type metadata for JWTHeader);
    atomic_store(result, (unint64_t *)&qword_1001B22B0);
  }
  return result;
}

unint64_t sub_1000D3150()
{
  unint64_t result;

  result = qword_1001B22B8;
  if (!qword_1001B22B8)
  {
    result = swift_getWitnessTable(&unk_1001617BC, &type metadata for JWTClaims);
    atomic_store(result, (unint64_t *)&qword_1001B22B8);
  }
  return result;
}

uint64_t destroy for JWTClaims(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(a1[15]);
  swift_bridgeObjectRelease(a1[17]);
  swift_bridgeObjectRelease(a1[19]);
  swift_bridgeObjectRelease(a1[21]);
  return swift_bridgeObjectRelease(a1[23]);
}

uint64_t initializeWithCopy for JWTClaims(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v6 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v6;
  v7 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v7;
  v8 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v8;
  v9 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v9;
  v10 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v10;
  v11 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v11;
  v12 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v12;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  return a1;
}

uint64_t assignWithCopy for JWTClaims(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v11 = *(_QWORD *)(a2 + 88);
  v12 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v13 = *(_QWORD *)(a2 + 104);
  v14 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v15 = *(_QWORD *)(a2 + 120);
  v16 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v17 = *(_QWORD *)(a2 + 136);
  v18 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v19 = *(_QWORD *)(a2 + 152);
  v20 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v21 = *(_QWORD *)(a2 + 168);
  v22 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  v23 = *(_QWORD *)(a2 + 184);
  v24 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  return a1;
}

__n128 initializeWithTake for JWTClaims(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t assignWithTake for JWTClaims(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v10 = *(_QWORD *)(a2 + 88);
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 104);
  v13 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 120);
  v15 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a2 + 136);
  v17 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v16;
  swift_bridgeObjectRelease(v17);
  v18 = *(_QWORD *)(a2 + 152);
  v19 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v18;
  swift_bridgeObjectRelease(v19);
  v20 = *(_QWORD *)(a2 + 168);
  v21 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v20;
  swift_bridgeObjectRelease(v21);
  v22 = *(_QWORD *)(a2 + 184);
  v23 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v22;
  swift_bridgeObjectRelease(v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for JWTClaims(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 192))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for JWTClaims(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 192) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 192) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for JWTClaims()
{
  return &type metadata for JWTClaims;
}

uint64_t destroy for JWTHeader(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[5]);
}

_QWORD *initializeWithCopy for JWTHeader(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for JWTHeader(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for JWTHeader(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for JWTHeader(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for JWTHeader(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for JWTHeader(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for JWTHeader()
{
  return &type metadata for JWTHeader;
}

void destroy for JSONWebToken(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  SEL v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  SEL v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  SEL v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  SEL v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  SEL v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  SEL v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  SEL v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  SEL v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;

  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 8), a2, a3, a4, a5, a6, a7, a8);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 24), v9, v10, v11, v12, v13, v14, v15);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 40), v16, v17, v18, v19, v20, v21, v22);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 56), v23, v24, v25, v26, v27, v28, v29);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 72), v30, v31, v32, v33, v34, v35, v36);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 88), v37, v38, v39, v40, v41, v42, v43);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 136), v44, v45, v46, v47, v48, v49, v50);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 152), v51, v52, v53, v54, v55, v56, v57);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 168), v58, v59, v60, v61, v62, v63, v64);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 184), v65, v66, v67, v68, v69, v70, v71);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 200), v72, v73, v74, v75, v76, v77, v78);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 216), v79, v80, v81, v82, v83, v84, v85);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 232), v86, v87, v88, v89, v90, v91, v92);
  sub_100005DE0(*(_QWORD *)(a1 + 240), *(_QWORD *)(a1 + 248));
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 264), v93, v94, v95, v96, v97, v98, v99);
}

uint64_t initializeWithCopy for JSONWebToken(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v9;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v10 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v10;
  v11 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v11;
  v12 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v12;
  v13 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v13;
  v14 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v14;
  v15 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v15;
  v16 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v16;
  v17 = *(_QWORD *)(a2 + 248);
  v20 = *(_QWORD *)(a2 + 240);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100005D9C(v20, v17);
  *(_QWORD *)(a1 + 240) = v20;
  *(_QWORD *)(a1 + 248) = v17;
  v18 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v18;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for JSONWebToken(uint64_t a1, uint64_t a2)
{
  _TtC14softposreaderd12RemoteReader *v4;
  SEL v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  _TtC14softposreaderd12RemoteReader *v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  _TtC14softposreaderd12RemoteReader *v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  _TtC14softposreaderd12RemoteReader *v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  _TtC14softposreaderd12RemoteReader *v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  _TtC14softposreaderd12RemoteReader *v44;
  SEL v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  uint64_t v52;
  _TtC14softposreaderd12RemoteReader *v53;
  SEL v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  _TtC14softposreaderd12RemoteReader *v61;
  SEL v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  _TtC14softposreaderd12RemoteReader *v69;
  SEL v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  _TtC14softposreaderd12RemoteReader *v77;
  SEL v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  _TtC14softposreaderd12RemoteReader *v85;
  SEL v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  _TtC14softposreaderd12RemoteReader *v93;
  SEL v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  _TtC14softposreaderd12RemoteReader *v101;
  SEL v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  _TtC14softposreaderd12RemoteReader *v114;
  SEL v115;
  id v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4, v5, v6, v7, v8, v9, v10, v11);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v12 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v12, v13, v14, v15, v16, v17, v18, v19);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v20 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v20, v21, v22, v23, v24, v25, v26, v27);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v28 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v28, v29, v30, v31, v32, v33, v34, v35);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v36 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v36, v37, v38, v39, v40, v41, v42, v43);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v44 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v44, v45, v46, v47, v48, v49, v50, v51);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v52 = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v52;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v53 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v53, v54, v55, v56, v57, v58, v59, v60);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v61 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v61, v62, v63, v64, v65, v66, v67, v68);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v69 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v69, v70, v71, v72, v73, v74, v75, v76);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  v77 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v77, v78, v79, v80, v81, v82, v83, v84);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  v85 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v85, v86, v87, v88, v89, v90, v91, v92);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  v93 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v93, v94, v95, v96, v97, v98, v99, v100);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  v101 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v101, v102, v103, v104, v105, v106, v107, v108);
  v109 = *(_QWORD *)(a2 + 240);
  v110 = *(_QWORD *)(a2 + 248);
  sub_100005D9C(v109, v110);
  v111 = *(_QWORD *)(a1 + 240);
  v112 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 240) = v109;
  *(_QWORD *)(a1 + 248) = v110;
  sub_100005DE0(v111, v112);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  v113 = *(_QWORD *)(a2 + 264);
  v114 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 264);
  *(_QWORD *)(a1 + 264) = v113;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v114, v115, v116, v117, v118, v119, v120, v121);
  return a1;
}

void *initializeWithTake for JSONWebToken(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x110uLL);
}

uint64_t assignWithTake for JSONWebToken(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v10;
  _TtC14softposreaderd12RemoteReader *v11;
  uint64_t v12;
  _TtC14softposreaderd12RemoteReader *v13;
  SEL v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  _TtC14softposreaderd12RemoteReader *v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  _TtC14softposreaderd12RemoteReader *v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  _TtC14softposreaderd12RemoteReader *v40;
  SEL v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  _TtC14softposreaderd12RemoteReader *v49;
  SEL v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  uint64_t v57;
  _TtC14softposreaderd12RemoteReader *v58;
  SEL v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  uint64_t v66;
  _TtC14softposreaderd12RemoteReader *v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  uint64_t v75;
  _TtC14softposreaderd12RemoteReader *v76;
  SEL v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  uint64_t v84;
  _TtC14softposreaderd12RemoteReader *v85;
  SEL v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  uint64_t v93;
  _TtC14softposreaderd12RemoteReader *v94;
  SEL v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  uint64_t v102;
  _TtC14softposreaderd12RemoteReader *v103;
  SEL v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  uint64_t v111;
  _TtC14softposreaderd12RemoteReader *v112;
  SEL v113;
  id v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  _TtC14softposreaderd12RemoteReader *v123;
  SEL v124;
  id v125;
  id v126;
  id v127;
  id v128;
  id v129;
  id v130;

  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v10;
  swift_bridgeObjectRelease(v11, (SEL)a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(a2 + 24);
  v13 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v12;
  swift_bridgeObjectRelease(v13, v14, v15, v16, v17, v18, v19, v20);
  v21 = *(_QWORD *)(a2 + 40);
  v22 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v21;
  swift_bridgeObjectRelease(v22, v23, v24, v25, v26, v27, v28, v29);
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v30;
  swift_bridgeObjectRelease(v31, v32, v33, v34, v35, v36, v37, v38);
  v39 = *(_QWORD *)(a2 + 72);
  v40 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v39;
  swift_bridgeObjectRelease(v40, v41, v42, v43, v44, v45, v46, v47);
  v48 = *(_QWORD *)(a2 + 88);
  v49 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v48;
  swift_bridgeObjectRelease(v49, v50, v51, v52, v53, v54, v55, v56);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v57 = *(_QWORD *)(a2 + 136);
  v58 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v57;
  swift_bridgeObjectRelease(v58, v59, v60, v61, v62, v63, v64, v65);
  v66 = *(_QWORD *)(a2 + 152);
  v67 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v66;
  swift_bridgeObjectRelease(v67, v68, v69, v70, v71, v72, v73, v74);
  v75 = *(_QWORD *)(a2 + 168);
  v76 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v75;
  swift_bridgeObjectRelease(v76, v77, v78, v79, v80, v81, v82, v83);
  v84 = *(_QWORD *)(a2 + 184);
  v85 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v84;
  swift_bridgeObjectRelease(v85, v86, v87, v88, v89, v90, v91, v92);
  v93 = *(_QWORD *)(a2 + 200);
  v94 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v93;
  swift_bridgeObjectRelease(v94, v95, v96, v97, v98, v99, v100, v101);
  v102 = *(_QWORD *)(a2 + 216);
  v103 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v102;
  swift_bridgeObjectRelease(v103, v104, v105, v106, v107, v108, v109, v110);
  v111 = *(_QWORD *)(a2 + 232);
  v112 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v111;
  swift_bridgeObjectRelease(v112, v113, v114, v115, v116, v117, v118, v119);
  v120 = *(_QWORD *)(a1 + 240);
  v121 = *(_QWORD *)(a1 + 248);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  sub_100005DE0(v120, v121);
  v122 = *(_QWORD *)(a2 + 264);
  v123 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v122;
  swift_bridgeObjectRelease(v123, v124, v125, v126, v127, v128, v129, v130);
  return a1;
}

uint64_t getEnumTagSinglePayload for JSONWebToken(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 272))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for JSONWebToken(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 264) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 272) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 272) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for JSONWebToken()
{
  return &type metadata for JSONWebToken;
}

uint64_t sub_1000D3EA4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 7371124 && a2 == 0xE300000000000000)
  {
    v5 = 0xE300000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7371124, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 6777953 && a2 == 0xE300000000000000)
  {
    v7 = 0xE300000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(6777953, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 6580587 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease(0xE300000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(6580587, 0xE300000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

void sub_1000D3FC8(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _TtC14softposreaderd12RemoteReader *v13;
  _TtC14softposreaderd12RemoteReader *v14;
  uint64_t v15;
  _TtC14softposreaderd12RemoteReader *v16;
  _TtC14softposreaderd12RemoteReader *v17;
  uint64_t v18;
  _TtC14softposreaderd12RemoteReader *v19;
  _TtC14softposreaderd12RemoteReader *v20;
  uint64_t v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  _TtC14softposreaderd12RemoteReader *v29;
  SEL v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  _TtC14softposreaderd12RemoteReader *v46;
  uint64_t v47;
  char v48;
  char v49;
  char v50;

  v5 = sub_100003A2C(&qword_1001B22C0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100005EF8(a1, v9);
  v11 = sub_1000D41FC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for JWTHeader.CodingKeys, &type metadata for JWTHeader.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_100005D3C(a1);
  }
  else
  {
    v50 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v50, v5);
    v14 = v13;
    v47 = v12;
    v49 = 1;
    swift_bridgeObjectRetain();
    v15 = KeyedDecodingContainer.decode(_:forKey:)(&v49, v5);
    v17 = v16;
    v45 = v15;
    v48 = 2;
    swift_bridgeObjectRetain();
    v46 = v17;
    v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v48, v5);
    v20 = v19;
    v21 = v18;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRetain();
    sub_100005D3C(a1);
    swift_bridgeObjectRelease(v20, v22, v23, v24, v25, v26, v27, v28);
    v29 = v46;
    swift_bridgeObjectRelease(v46, v30, v31, v32, v33, v34, v35, v36);
    swift_bridgeObjectRelease(v14, v37, v38, v39, v40, v41, v42, v43);
    *a2 = v47;
    a2[1] = (uint64_t)v14;
    a2[2] = v45;
    a2[3] = (uint64_t)v29;
    a2[4] = v21;
    a2[5] = (uint64_t)v20;
  }
}

unint64_t sub_1000D41FC()
{
  unint64_t result;

  result = qword_1001B22C8;
  if (!qword_1001B22C8)
  {
    result = swift_getWitnessTable(&unk_100161AE0, &type metadata for JWTHeader.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B22C8);
  }
  return result;
}

uint64_t sub_1000D4240(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;

  if (a1 == 7566185 && a2 == 0xE300000000000000)
  {
    v5 = 0xE300000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7566185, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 6583649 && a2 == 0xE300000000000000)
  {
    v7 = 0xE300000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(6583649, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 6911082 && a2 == 0xE300000000000000)
  {
    v8 = 0xE300000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(6911082, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 7627113 && a2 == 0xE300000000000000)
  {
    v9 = 0xE300000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7627113, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 7370853 && a2 == 0xE300000000000000)
  {
    v10 = 0xE300000000000000;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7370853, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 6709870 && a2 == 0xE300000000000000)
  {
    v11 = 0xE300000000000000;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(6709870, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 6452595 && a2 == 0xE300000000000000)
  {
    v12 = 0xE300000000000000;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(6452595, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_44;
  }
  if (a1 == 1684628851 && a2 == 0xE400000000000000)
  {
    v13 = 0xE400000000000000;
LABEL_50:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684628851, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_50;
  }
  if (a1 == 6580592 && a2 == 0xE300000000000000)
  {
    v14 = 0xE300000000000000;
LABEL_56:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(6580592, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_56;
  }
  if (a1 == 1684631668 && a2 == 0xE400000000000000)
  {
    v15 = 0xE400000000000000;
LABEL_62:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684631668, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_62;
  }
  if (a1 == 0x64697074666173 && a2 == 0xE700000000000000)
  {
    v16 = 0xE700000000000000;
LABEL_68:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64697074666173, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_68;
  }
  if (a1 == 1953853539 && a2 == 0xE400000000000000)
  {
    v17 = 0xE400000000000000;
LABEL_74:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1953853539, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_74;
  }
  if (a1 == 1802531681 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 12;
  }
  else
  {
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(1802531681, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v18 & 1) != 0)
      return 12;
    else
      return 13;
  }
}

void sub_1000D46AC(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _TtC14softposreaderd12RemoteReader *v13;
  _TtC14softposreaderd12RemoteReader *v14;
  _TtC14softposreaderd12RemoteReader *v15;
  _TtC14softposreaderd12RemoteReader *v16;
  uint64_t v17;
  _TtC14softposreaderd12RemoteReader *v18;
  _TtC14softposreaderd12RemoteReader *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _TtC14softposreaderd12RemoteReader *v23;
  _TtC14softposreaderd12RemoteReader *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _TtC14softposreaderd12RemoteReader *v28;
  _TtC14softposreaderd12RemoteReader *v29;
  uint64_t v30;
  _TtC14softposreaderd12RemoteReader *v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  SEL v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  SEL v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  SEL v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  SEL v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  _TtC14softposreaderd12RemoteReader *v81;
  _TtC14softposreaderd12RemoteReader *v82;
  uint64_t v83;
  unint64_t v84;
  SEL v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  SEL v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  SEL v99;
  id v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  SEL v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  SEL v113;
  id v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  SEL v120;
  id v121;
  id v122;
  id v123;
  id v124;
  id v125;
  id v126;
  const char *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  uint64_t v134;
  _TtC14softposreaderd12RemoteReader *v135;
  _TtC14softposreaderd12RemoteReader *v136;
  _TtC14softposreaderd12RemoteReader *v137;
  SEL v138;
  id v139;
  id v140;
  id v141;
  id v142;
  id v143;
  id v144;
  SEL v145;
  id v146;
  id v147;
  id v148;
  id v149;
  id v150;
  id v151;
  SEL v152;
  id v153;
  id v154;
  id v155;
  id v156;
  id v157;
  id v158;
  SEL v159;
  id v160;
  id v161;
  id v162;
  id v163;
  id v164;
  id v165;
  SEL v166;
  id v167;
  id v168;
  id v169;
  id v170;
  id v171;
  id v172;
  SEL v173;
  id v174;
  id v175;
  id v176;
  id v177;
  id v178;
  id v179;
  _TtC14softposreaderd12RemoteReader *v180;
  SEL v181;
  id v182;
  id v183;
  id v184;
  id v185;
  id v186;
  id v187;
  _TtC14softposreaderd12RemoteReader *v188;
  SEL v189;
  id v190;
  id v191;
  id v192;
  id v193;
  id v194;
  id v195;
  SEL v196;
  id v197;
  id v198;
  id v199;
  id v200;
  id v201;
  id v202;
  __int128 v203;
  unsigned __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _TtC14softposreaderd12RemoteReader *v214;
  _TtC14softposreaderd12RemoteReader *v215;
  uint64_t v216;
  __int128 v217;
  uint64_t v218;
  _TtC14softposreaderd12RemoteReader *v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  _TtC14softposreaderd12RemoteReader *v228;
  _TtC14softposreaderd12RemoteReader *v229;
  _TtC14softposreaderd12RemoteReader *v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  unsigned __int128 v242;
  _QWORD v243[9];
  char v244;
  _BYTE v245[7];
  uint64_t v246;
  _TtC14softposreaderd12RemoteReader *v247;
  uint64_t v248;
  _TtC14softposreaderd12RemoteReader *v249;
  uint64_t v250;
  _TtC14softposreaderd12RemoteReader *v251;
  uint64_t v252;
  _TtC14softposreaderd12RemoteReader *v253;
  uint64_t v254;
  _TtC14softposreaderd12RemoteReader *v255;
  uint64_t v256;
  _TtC14softposreaderd12RemoteReader *v257;
  uint64_t v258;
  unint64_t v259;
  char v260;
  _BYTE v261[7];
  char v262;
  _QWORD *v263;

  v5 = sub_100003A2C(&qword_1001B22D0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v209 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  v263 = a1;
  sub_100005EF8(a1, v9);
  v11 = sub_1000D4F7C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for JWTClaims.CodingKeys, &type metadata for JWTClaims.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_100005D3C(v263);
  }
  else
  {
    LOBYTE(v243[0]) = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(v243, v5);
    v14 = v13;
    LOBYTE(v243[0]) = 1;
    swift_bridgeObjectRetain();
    v226 = KeyedDecodingContainer.decode(_:forKey:)(v243, v5);
    v227 = v12;
    LOBYTE(v243[0]) = 2;
    v16 = v15;
    swift_bridgeObjectRetain();
    v17 = KeyedDecodingContainer.decode(_:forKey:)(v243, v5);
    v230 = v16;
    v225 = v17;
    LOBYTE(v243[0]) = 3;
    v19 = v18;
    swift_bridgeObjectRetain();
    v20 = KeyedDecodingContainer.decode(_:forKey:)(v243, v5);
    v229 = v19;
    v224 = v20;
    LOBYTE(v243[0]) = 4;
    v21 = KeyedDecodingContainer.decode(_:forKey:)(v243, v5);
    LOBYTE(v243[0]) = 5;
    v223 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v243, v5);
    v262 = v22 & 1;
    LOBYTE(v243[0]) = 6;
    v222 = v22;
    v220 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v243, v5);
    v221 = v21;
    LOBYTE(v243[0]) = 7;
    v24 = v23;
    swift_bridgeObjectRetain();
    v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v243, v5);
    v228 = v24;
    *(_QWORD *)&v217 = v25;
    LOBYTE(v243[0]) = 8;
    v27 = v26;
    swift_bridgeObjectRetain();
    v216 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v243, v5);
    *((_QWORD *)&v217 + 1) = v27;
    LOBYTE(v243[0]) = 9;
    v219 = v28;
    swift_bridgeObjectRetain();
    v213 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v243, v5);
    v215 = v29;
    v218 = 0;
    LOBYTE(v243[0]) = 10;
    swift_bridgeObjectRetain();
    v30 = v218;
    v212 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v243, v5);
    v214 = v31;
    if (v30)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_bridgeObjectRelease(v14, v32, v33, v34, v35, v36, v37, v38);
      swift_bridgeObjectRelease(v230, v39, v40, v41, v42, v43, v44, v45);
      swift_bridgeObjectRelease(v229, v46, v47, v48, v49, v50, v51, v52);
      swift_bridgeObjectRelease(v228, v53, v54, v55, v56, v57, v58, v59);
      swift_bridgeObjectRelease(*((_TtC14softposreaderd12RemoteReader **)&v217 + 1), v60, v61, v62, v63, v64, v65, v66);
      swift_bridgeObjectRelease(v219, v67, v68, v69, v70, v71, v72, v73);
      swift_bridgeObjectRelease(v215, v74, v75, v76, v77, v78, v79, v80);
      sub_100005D3C(v263);
      swift_bridgeObjectRelease(v219, v85, v86, v87, v88, v89, v90, v91);
      swift_bridgeObjectRelease(*((_TtC14softposreaderd12RemoteReader **)&v217 + 1), v92, v93, v94, v95, v96, v97, v98);
      swift_bridgeObjectRelease(v228, v99, v100, v101, v102, v103, v104, v105);
      swift_bridgeObjectRelease(v229, v106, v107, v108, v109, v110, v111, v112);
      swift_bridgeObjectRelease(v230, v113, v114, v115, v116, v117, v118, v119);
      swift_bridgeObjectRelease(v14, v120, v121, v122, v123, v124, v125, v126);
      if (!v218)
        swift_bridgeObjectRelease(v215, v127, v128, v129, v130, v131, v132, v133);
    }
    else
    {
      LOBYTE(v243[0]) = 11;
      swift_bridgeObjectRetain();
      v211 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v243, v5);
      v82 = v81;
      v260 = 12;
      swift_bridgeObjectRetain();
      v83 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v260, v5);
      v210 = v84;
      v134 = v83;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      *(_QWORD *)&v231 = v227;
      *((_QWORD *)&v231 + 1) = v14;
      v135 = v230;
      *(_QWORD *)&v232 = v226;
      *((_QWORD *)&v232 + 1) = v230;
      v136 = v228;
      *(_QWORD *)&v233 = v225;
      *((_QWORD *)&v233 + 1) = v229;
      *(_QWORD *)&v234 = v224;
      *((_QWORD *)&v234 + 1) = v221;
      *(_QWORD *)&v235 = v223;
      BYTE8(v235) = v222 & 1;
      *(_QWORD *)&v236 = v220;
      *((_QWORD *)&v236 + 1) = v228;
      v137 = (_TtC14softposreaderd12RemoteReader *)*((_QWORD *)&v217 + 1);
      v237 = v217;
      *(_QWORD *)&v238 = v216;
      *((_QWORD *)&v238 + 1) = v219;
      *(_QWORD *)&v239 = v213;
      *((_QWORD *)&v239 + 1) = v215;
      *(_QWORD *)&v240 = v212;
      *((_QWORD *)&v240 + 1) = v214;
      *(_QWORD *)&v241 = v211;
      *((_QWORD *)&v241 + 1) = v82;
      v209 = v134;
      v242 = __PAIR128__(v210, v134);
      sub_1000D4FC0(&v231);
      swift_bridgeObjectRelease(v14, v138, v139, v140, v141, v142, v143, v144);
      swift_bridgeObjectRelease(v135, v145, v146, v147, v148, v149, v150, v151);
      swift_bridgeObjectRelease(v229, v152, v153, v154, v155, v156, v157, v158);
      swift_bridgeObjectRelease(v136, v159, v160, v161, v162, v163, v164, v165);
      swift_bridgeObjectRelease(v137, v166, v167, v168, v169, v170, v171, v172);
      swift_bridgeObjectRelease(v219, v173, v174, v175, v176, v177, v178, v179);
      v180 = v215;
      swift_bridgeObjectRelease(v215, v181, v182, v183, v184, v185, v186, v187);
      v188 = v214;
      swift_bridgeObjectRelease(v214, v189, v190, v191, v192, v193, v194, v195);
      swift_bridgeObjectRelease(v82, v196, v197, v198, v199, v200, v201, v202);
      sub_100005D3C(v263);
      v243[0] = v227;
      v243[1] = v14;
      v243[2] = v226;
      v243[3] = v230;
      v243[4] = v225;
      v243[5] = v229;
      v243[6] = v224;
      v243[7] = v221;
      v243[8] = v223;
      v244 = v262;
      *(_DWORD *)v245 = *(_DWORD *)v261;
      *(_DWORD *)&v245[3] = *(_DWORD *)&v261[3];
      v246 = v220;
      v247 = v136;
      v248 = v217;
      v249 = v137;
      v250 = v216;
      v251 = v219;
      v252 = v213;
      v253 = v180;
      v254 = v212;
      v255 = v188;
      v256 = v211;
      v257 = v82;
      v258 = v209;
      v259 = v210;
      sub_1000D5074(v243);
      v203 = v240;
      a2[8] = v239;
      a2[9] = v203;
      v204 = v242;
      a2[10] = v241;
      a2[11] = v204;
      v205 = v236;
      a2[4] = v235;
      a2[5] = v205;
      v206 = v238;
      a2[6] = v237;
      a2[7] = v206;
      v207 = v232;
      *a2 = v231;
      a2[1] = v207;
      v208 = v234;
      a2[2] = v233;
      a2[3] = v208;
    }
  }
}

unint64_t sub_1000D4F7C()
{
  unint64_t result;

  result = qword_1001B22D8;
  if (!qword_1001B22D8)
  {
    result = swift_getWitnessTable(&unk_100161A90, &type metadata for JWTClaims.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B22D8);
  }
  return result;
}

_QWORD *sub_1000D4FC0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[11];
  v6 = a1[13];
  v7 = a1[15];
  v8 = a1[17];
  v9 = a1[19];
  v10 = a1[21];
  swift_bridgeObjectRetain(a1[23]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

_QWORD *sub_1000D5074(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[11];
  v5 = a1[13];
  v6 = a1[15];
  v7 = a1[17];
  v8 = a1[19];
  v9 = a1[21];
  v10 = a1[23];
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t sub_1000D5128(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x726564616568 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726564616568, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x736D69616C63 && a2 == 0xE600000000000000)
  {
    v7 = 0xE600000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736D69616C63, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x727574616E676973 && a2 == 0xE900000000000065)
  {
    v8 = 0xE900000000000065;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x727574616E676973, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x65756C6156776172 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65756C6156776172, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

void sub_1000D52DC(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _TtC14softposreaderd12RemoteReader *v15;
  uint64_t v16;
  _TtC14softposreaderd12RemoteReader *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  _TtC14softposreaderd12RemoteReader *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  SEL v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  SEL v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  _QWORD *v57;
  _OWORD v58[17];
  uint64_t v59;
  _TtC14softposreaderd12RemoteReader *v60;
  uint64_t v61;
  _TtC14softposreaderd12RemoteReader *v62;
  uint64_t v63;
  _TtC14softposreaderd12RemoteReader *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  char v117;
  char v118;

  v5 = sub_100003A2C(&qword_1001B22F0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  v57 = a1;
  sub_100005EF8(a1, v9);
  v11 = sub_1000D57FC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for JSONWebToken.CodingKeys, &type metadata for JSONWebToken.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_100005D3C(v57);
  }
  else
  {
    v55 = a2;
    v56 = v6;
    LOBYTE(v58[0]) = 0;
    v12 = sub_1000D310C();
    v13 = v5;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for JWTHeader, v58, v5, &type metadata for JWTHeader, v12);
    v14 = (unint64_t)v60;
    v15 = v62;
    v53 = v59;
    v54 = v61;
    v16 = v63;
    v17 = v64;
    v118 = 1;
    v18 = sub_1000D3150();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for JWTClaims, &v118, v13, &type metadata for JWTClaims, v18);
    v51 = v16;
    v89 = v101;
    v90 = v102;
    v91 = v103;
    v92 = v104;
    v85 = v97;
    v86 = v98;
    v87 = v99;
    v88 = v100;
    v81 = v93;
    v82 = v94;
    v83 = v95;
    v84 = v96;
    v113 = v101;
    v114 = v102;
    v115 = v103;
    v116 = v104;
    v109 = v97;
    v110 = v98;
    v111 = v99;
    v112 = v100;
    v105 = v93;
    v106 = v94;
    v107 = v95;
    v108 = v96;
    LOBYTE(v58[0]) = 2;
    sub_1000D4FC0(&v81);
    v19 = sub_1000D5840();
    v52 = 0;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for Data, v58, v13, &type metadata for Data, v19);
    v20 = v59;
    v117 = 3;
    v50 = (unint64_t)v60;
    sub_100005D9C(v59, (unint64_t)v60);
    v21 = KeyedDecodingContainer.decode(_:forKey:)(&v117, v13);
    v22 = *(void (**)(char *, uint64_t))(v56 + 8);
    v56 = v21;
    v24 = v23;
    v22(v8, v13);
    *(_QWORD *)&v58[0] = v53;
    *((_QWORD *)&v58[0] + 1) = v14;
    v25 = (_TtC14softposreaderd12RemoteReader *)v14;
    *(_QWORD *)&v58[1] = v54;
    *((_QWORD *)&v58[1] + 1) = v15;
    v26 = v51;
    *(_QWORD *)&v58[2] = v51;
    *((_QWORD *)&v58[2] + 1) = v17;
    v58[11] = v89;
    v58[12] = v90;
    v58[13] = v91;
    v58[14] = v92;
    v58[7] = v85;
    v58[8] = v86;
    v58[9] = v87;
    v58[10] = v88;
    v58[3] = v81;
    v58[4] = v82;
    v58[5] = v83;
    v58[6] = v84;
    v27 = v20;
    *(_QWORD *)&v58[15] = v20;
    v28 = v50;
    *((_QWORD *)&v58[15] + 1) = v50;
    *(_QWORD *)&v58[16] = v56;
    *((_QWORD *)&v58[16] + 1) = v24;
    sub_10005BAFC(v58);
    sub_100005DE0(v27, v28);
    sub_1000D5074(&v81);
    swift_bridgeObjectRelease(v17, v29, v30, v31, v32, v33, v34, v35);
    swift_bridgeObjectRelease(v15, v36, v37, v38, v39, v40, v41, v42);
    swift_bridgeObjectRelease(v25, v43, v44, v45, v46, v47, v48, v49);
    sub_100005D3C(v57);
    v59 = v53;
    v60 = v25;
    v61 = v54;
    v62 = v15;
    v63 = v26;
    v64 = v17;
    v73 = v113;
    v74 = v114;
    v75 = v115;
    v76 = v116;
    v69 = v109;
    v70 = v110;
    v71 = v111;
    v72 = v112;
    v65 = v105;
    v66 = v106;
    v67 = v107;
    v68 = v108;
    v77 = v27;
    v78 = v28;
    v79 = v56;
    v80 = v24;
    sub_100054898(&v59);
    memcpy(v55, v58, 0x110uLL);
  }
}

unint64_t sub_1000D57FC()
{
  unint64_t result;

  result = qword_1001B22F8;
  if (!qword_1001B22F8)
  {
    result = swift_getWitnessTable(&unk_100161A40, &type metadata for JSONWebToken.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B22F8);
  }
  return result;
}

unint64_t sub_1000D5840()
{
  unint64_t result;

  result = qword_1001B2300;
  if (!qword_1001B2300)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1001B2300);
  }
  return result;
}

unint64_t sub_1000D5884()
{
  unint64_t result;

  result = qword_1001B2310;
  if (!qword_1001B2310)
  {
    result = swift_getWitnessTable(&unk_10016171C, &type metadata for JWTHeader);
    atomic_store(result, (unint64_t *)&qword_1001B2310);
  }
  return result;
}

unint64_t sub_1000D58C8()
{
  unint64_t result;

  result = qword_1001B2318;
  if (!qword_1001B2318)
  {
    result = swift_getWitnessTable(&unk_10016176C, &type metadata for JWTClaims);
    atomic_store(result, (unint64_t *)&qword_1001B2318);
  }
  return result;
}

unint64_t sub_1000D590C()
{
  unint64_t result;

  result = qword_1001B2320;
  if (!qword_1001B2320)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1001B2320);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for JSONWebToken.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000D599C + 4 * byte_100161666[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000D59D0 + 4 * byte_100161661[v4]))();
}

uint64_t sub_1000D59D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D59D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000D59E0);
  return result;
}

uint64_t sub_1000D59EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000D59F4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000D59F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D5A00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for JSONWebToken.CodingKeys()
{
  return &type metadata for JSONWebToken.CodingKeys;
}

uint64_t getEnumTagSinglePayload for JWTClaims.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF4)
    goto LABEL_17;
  if (a2 + 12 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 12) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 12;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 12;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 12;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xD;
  v8 = v6 - 13;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for JWTClaims.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_1000D5AF8 + 4 * byte_100161670[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_1000D5B2C + 4 * byte_10016166B[v4]))();
}

uint64_t sub_1000D5B2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D5B34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000D5B3CLL);
  return result;
}

uint64_t sub_1000D5B48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000D5B50);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_1000D5B54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D5B5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for JWTClaims.CodingKeys()
{
  return &type metadata for JWTClaims.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for JWTHeader.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000D5BC4 + 4 * byte_10016167A[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000D5BF8 + 4 * byte_100161675[v4]))();
}

uint64_t sub_1000D5BF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D5C00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000D5C08);
  return result;
}

uint64_t sub_1000D5C14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000D5C1CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000D5C20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D5C28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for JWTHeader.CodingKeys()
{
  return &type metadata for JWTHeader.CodingKeys;
}

unint64_t sub_1000D5C48()
{
  unint64_t result;

  result = qword_1001B2328;
  if (!qword_1001B2328)
  {
    result = swift_getWitnessTable(&unk_1001618A8, &type metadata for JWTHeader.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B2328);
  }
  return result;
}

unint64_t sub_1000D5C90()
{
  unint64_t result;

  result = qword_1001B2330;
  if (!qword_1001B2330)
  {
    result = swift_getWitnessTable(&unk_100161960, &type metadata for JWTClaims.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B2330);
  }
  return result;
}

unint64_t sub_1000D5CD8()
{
  unint64_t result;

  result = qword_1001B2338;
  if (!qword_1001B2338)
  {
    result = swift_getWitnessTable(&unk_100161A18, &type metadata for JSONWebToken.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B2338);
  }
  return result;
}

unint64_t sub_1000D5D20()
{
  unint64_t result;

  result = qword_1001B2340;
  if (!qword_1001B2340)
  {
    result = swift_getWitnessTable(&unk_100161988, &type metadata for JSONWebToken.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B2340);
  }
  return result;
}

unint64_t sub_1000D5D68()
{
  unint64_t result;

  result = qword_1001B2348;
  if (!qword_1001B2348)
  {
    result = swift_getWitnessTable(&unk_1001619B0, &type metadata for JSONWebToken.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B2348);
  }
  return result;
}

unint64_t sub_1000D5DB0()
{
  unint64_t result;

  result = qword_1001B2350;
  if (!qword_1001B2350)
  {
    result = swift_getWitnessTable(&unk_1001618D0, &type metadata for JWTClaims.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B2350);
  }
  return result;
}

unint64_t sub_1000D5DF8()
{
  unint64_t result;

  result = qword_1001B2358;
  if (!qword_1001B2358)
  {
    result = swift_getWitnessTable(&unk_1001618F8, &type metadata for JWTClaims.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B2358);
  }
  return result;
}

unint64_t sub_1000D5E40()
{
  unint64_t result;

  result = qword_1001B2360;
  if (!qword_1001B2360)
  {
    result = swift_getWitnessTable(&unk_100161818, &type metadata for JWTHeader.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B2360);
  }
  return result;
}

unint64_t sub_1000D5E88()
{
  unint64_t result;

  result = qword_1001B2368;
  if (!qword_1001B2368)
  {
    result = swift_getWitnessTable(&unk_100161840, &type metadata for JWTHeader.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B2368);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MPOCMonitorManagerError(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for MPOCMonitorManagerError(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MPOCMonitorManagerError(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_1000D5F30(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1000D5F4C(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for MPOCMonitorManagerError()
{
  return &type metadata for MPOCMonitorManagerError;
}

uint64_t sub_1000D5F7C(uint64_t a1, uint64_t a2)
{
  return sub_1000D5F98(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

uint64_t sub_1000D5F98(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if ((a2 & 1) != 0)
    return ((uint64_t (*)(void))((char *)&loc_1000D5FD0 + 4 * byte_100161B50[a1]))();
  if ((a4 & 1) != 0)
    return 0;
  return *(double *)&a1 == *(double *)&a3;
}

uint64_t SecureChannelProtocol.securingRequest(_:contentType:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;

  v18 = a1;
  v6 = a2 & 1;
  v7 = type metadata accessor for DispatchTime(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = ((uint64_t (*)(void))__chkstk_darwin)();
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v17 - v13;
  static DispatchTime.now()(v12);
  (*(void (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  + infix(_:_:)(v11);
  v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v11, v7);
  (*(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t))(a4 + 16))(v18, v6, v14, a3, a4);
  return ((uint64_t (*)(char *, uint64_t))v15)(v14, v7);
}

unint64_t HTTPContentType.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000018;
  else
    return 0xD000000000000010;
}

uint64_t sub_1000D6218(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v19;

  v7 = a2 & 1;
  v8 = type metadata accessor for DispatchTime(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v19 - v14;
  static DispatchTime.now()(v13);
  (*(void (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  + infix(_:_:)(v12);
  v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v12, v8);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t))(a4 + 24))(a1, v7, v15, a3, a4);
  v16(v15, v8);
  return v17;
}

uint64_t HTTPContentType.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  unsigned int v4;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100199178, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t sub_1000D6384(char *a1, char *a2)
{
  return sub_10003D71C(*a1, *a2);
}

unint64_t sub_1000D6394()
{
  unint64_t result;

  result = qword_1001B2370;
  if (!qword_1001B2370)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HTTPContentType, &type metadata for HTTPContentType);
    atomic_store(result, (unint64_t *)&qword_1001B2370);
  }
  return result;
}

Swift::Int sub_1000D63D8()
{
  char *v0;

  return sub_10003D99C(*v0);
}

uint64_t sub_1000D63E0(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000018;
  else
    v2 = 0xD000000000000010;
  if (*v1)
    v3 = 0x8000000100168410;
  else
    v3 = 0x80000001001683F0;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1000D6440(uint64_t a1)
{
  char *v1;

  return sub_10003DF20(a1, *v1);
}

uint64_t sub_1000D6448@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100199178, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_1000D64A4(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000018;
  else
    v2 = 0xD000000000000010;
  v3 = 0x80000001001683F0;
  if (*v1)
    v3 = 0x8000000100168410;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t storeEnumTagSinglePayload for HTTPContentType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000D6534 + 4 * byte_100161C35[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000D6568 + 4 * byte_100161C30[v4]))();
}

uint64_t sub_1000D6568(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D6570(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000D6578);
  return result;
}

uint64_t sub_1000D6584(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000D658CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000D6590(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D6598(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HTTPContentType()
{
  return &type metadata for HTTPContentType;
}

unint64_t sub_1000D65B4()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  void *object;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  void *v9;
  Swift::String v10;
  uint64_t v11;
  Swift::String v12;
  void *v13;
  Swift::String v14;
  uint64_t v16;
  _QWORD v17[34];
  unint64_t v18;
  unint64_t v19;
  _BYTE v20[8];
  _QWORD v21[34];
  uint64_t v22;

  v21[0] = 0;
  v21[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(49);
  swift_bridgeObjectRelease(0xE000000000000000);
  v18 = 0xD00000000000001CLL;
  v19 = 0x800000010016E660;
  sub_100024374(v0, (uint64_t)v21, &qword_1001AE028);
  sub_100024374((uint64_t)v21, (uint64_t)v17, &qword_1001AE028);
  v1 = sub_100003A2C(&qword_1001AE028);
  v2._countAndFlagsBits = Optional.debugDescription.getter(v1);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._object = (void *)0x800000010016E680;
  v4._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v4);
  sub_100024374(v0 + 272, (uint64_t)v20, &qword_1001B2378);
  sub_100024374((uint64_t)v20, (uint64_t)&v22, &qword_1001B2378);
  v5 = v22;
  if (v22)
    v5 = Array.debugDescription.getter(v22, &type metadata for MPOCDeprecationWarning);
  else
    v6 = 0;
  v17[0] = v5;
  v17[1] = v6;
  v7 = sub_100003A2C(&qword_1001AE030);
  v8._countAndFlagsBits = String.init<A>(describing:)(v17, v7);
  v9 = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v9);
  v10._countAndFlagsBits = 0x3A726F727265202CLL;
  v10._object = (void *)0xE900000000000020;
  String.append(_:)(v10);
  sub_100024374(v0 + 280, (uint64_t)v17, &qword_1001B2380);
  sub_100024374((uint64_t)v17, (uint64_t)&v16, &qword_1001B2380);
  v11 = sub_100003A2C(&qword_1001B2380);
  v12._countAndFlagsBits = Optional.debugDescription.getter(v11);
  v13 = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v13);
  v14._countAndFlagsBits = 41;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  return v18;
}

unint64_t sub_1000D677C()
{
  const void *v0;
  _BYTE __dst[290];

  memcpy(__dst, v0, sizeof(__dst));
  return sub_1000D65B4();
}

void destroy for MPOCAttestationState(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  _TtC14softposreaderd12RemoteReader *v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  SEL v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  SEL v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  SEL v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  SEL v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  SEL v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  SEL v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  SEL v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  SEL v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;

  v9 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 8);
  if (v9)
  {
    swift_bridgeObjectRelease(v9, a2, a3, a4, a5, a6, a7, a8);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 24), v10, v11, v12, v13, v14, v15, v16);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 40), v17, v18, v19, v20, v21, v22, v23);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 56), v24, v25, v26, v27, v28, v29, v30);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 72), v31, v32, v33, v34, v35, v36, v37);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 88), v38, v39, v40, v41, v42, v43, v44);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 136), v45, v46, v47, v48, v49, v50, v51);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 152), v52, v53, v54, v55, v56, v57, v58);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 168), v59, v60, v61, v62, v63, v64, v65);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 184), v66, v67, v68, v69, v70, v71, v72);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 200), v73, v74, v75, v76, v77, v78, v79);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 216), v80, v81, v82, v83, v84, v85, v86);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 232), v87, v88, v89, v90, v91, v92, v93);
    sub_100005DE0(*(_QWORD *)(a1 + 240), *(_QWORD *)(a1 + 248));
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 264), v94, v95, v96, v97, v98, v99, v100);
  }
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 272), a2, a3, a4, a5, a6, a7, a8);
}

_QWORD *initializeWithCopy for MPOCAttestationState(_QWORD *__dst, _QWORD *__src)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v4 = __src[1];
  if (v4)
  {
    *__dst = *__src;
    __dst[1] = v4;
    v5 = __src[3];
    __dst[2] = __src[2];
    __dst[3] = v5;
    v6 = __src[5];
    __dst[4] = __src[4];
    __dst[5] = v6;
    v7 = __src[7];
    __dst[6] = __src[6];
    __dst[7] = v7;
    v8 = __src[9];
    __dst[8] = __src[8];
    __dst[9] = v8;
    v9 = __src[11];
    __dst[10] = __src[10];
    __dst[11] = v9;
    *((_OWORD *)__dst + 6) = *((_OWORD *)__src + 6);
    *((_BYTE *)__dst + 120) = *((_BYTE *)__src + 120);
    __dst[14] = __src[14];
    v10 = __src[17];
    __dst[16] = __src[16];
    __dst[17] = v10;
    v11 = __src[19];
    __dst[18] = __src[18];
    __dst[19] = v11;
    v12 = __src[21];
    __dst[20] = __src[20];
    __dst[21] = v12;
    v13 = __src[23];
    __dst[22] = __src[22];
    __dst[23] = v13;
    v14 = __src[25];
    __dst[24] = __src[24];
    __dst[25] = v14;
    v15 = __src[27];
    __dst[26] = __src[26];
    __dst[27] = v15;
    v16 = __src[29];
    __dst[28] = __src[28];
    __dst[29] = v16;
    v17 = __src[31];
    v21 = __src[30];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100005D9C(v21, v17);
    __dst[30] = v21;
    __dst[31] = v17;
    v18 = __src[33];
    __dst[32] = __src[32];
    __dst[33] = v18;
    swift_bridgeObjectRetain();
  }
  else
  {
    memcpy(__dst, __src, 0x110uLL);
  }
  v19 = __src[35];
  __dst[34] = __src[34];
  __dst[35] = v19;
  *((_WORD *)__dst + 144) = *((_WORD *)__src + 144);
  swift_bridgeObjectRetain();
  return __dst;
}

_QWORD *assignWithCopy for MPOCAttestationState(_QWORD *__dst, _QWORD *__src, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  _TtC14softposreaderd12RemoteReader *v10;
  uint64_t v11;
  SEL v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  _TtC14softposreaderd12RemoteReader *v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  _TtC14softposreaderd12RemoteReader *v27;
  SEL v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  _TtC14softposreaderd12RemoteReader *v35;
  SEL v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  _TtC14softposreaderd12RemoteReader *v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  _TtC14softposreaderd12RemoteReader *v51;
  SEL v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  uint64_t v59;
  _TtC14softposreaderd12RemoteReader *v60;
  SEL v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  _TtC14softposreaderd12RemoteReader *v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  _TtC14softposreaderd12RemoteReader *v76;
  SEL v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  _TtC14softposreaderd12RemoteReader *v84;
  SEL v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  _TtC14softposreaderd12RemoteReader *v92;
  SEL v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  _TtC14softposreaderd12RemoteReader *v100;
  SEL v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  _TtC14softposreaderd12RemoteReader *v108;
  SEL v109;
  id v110;
  id v111;
  id v112;
  id v113;
  id v114;
  id v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  _TtC14softposreaderd12RemoteReader *v120;
  SEL v121;
  id v122;
  id v123;
  id v124;
  id v125;
  id v126;
  id v127;
  uint64_t v128;
  unint64_t v129;
  _TtC14softposreaderd12RemoteReader *v130;
  SEL v131;
  id v132;
  id v133;
  id v134;
  id v135;
  id v136;
  id v137;
  uint64_t v138;
  uint64_t v140;

  v10 = (_TtC14softposreaderd12RemoteReader *)__dst[1];
  v11 = __src[1];
  if (!v10)
  {
    if (v11)
    {
      *__dst = *__src;
      __dst[1] = __src[1];
      __dst[2] = __src[2];
      __dst[3] = __src[3];
      __dst[4] = __src[4];
      __dst[5] = __src[5];
      __dst[6] = __src[6];
      __dst[7] = __src[7];
      __dst[8] = __src[8];
      __dst[9] = __src[9];
      __dst[10] = __src[10];
      __dst[11] = __src[11];
      __dst[12] = __src[12];
      __dst[13] = __src[13];
      v128 = __src[14];
      *((_BYTE *)__dst + 120) = *((_BYTE *)__src + 120);
      __dst[14] = v128;
      __dst[16] = __src[16];
      __dst[17] = __src[17];
      __dst[18] = __src[18];
      __dst[19] = __src[19];
      __dst[20] = __src[20];
      __dst[21] = __src[21];
      __dst[22] = __src[22];
      __dst[23] = __src[23];
      __dst[24] = __src[24];
      __dst[25] = __src[25];
      __dst[26] = __src[26];
      __dst[27] = __src[27];
      __dst[28] = __src[28];
      __dst[29] = __src[29];
      v129 = __src[31];
      v140 = __src[30];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100005D9C(v140, v129);
      __dst[30] = v140;
      __dst[31] = v129;
      __dst[32] = __src[32];
      __dst[33] = __src[33];
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
LABEL_7:
    memcpy(__dst, __src, 0x110uLL);
    goto LABEL_8;
  }
  if (!v11)
  {
    sub_1000D6E24((uint64_t)__dst, (uint64_t)__src, a3, a4, a5, a6, a7, a8);
    goto LABEL_7;
  }
  *__dst = *__src;
  __dst[1] = __src[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v10, v12, v13, v14, v15, v16, v17, v18);
  __dst[2] = __src[2];
  v19 = (_TtC14softposreaderd12RemoteReader *)__dst[3];
  __dst[3] = __src[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v19, v20, v21, v22, v23, v24, v25, v26);
  __dst[4] = __src[4];
  v27 = (_TtC14softposreaderd12RemoteReader *)__dst[5];
  __dst[5] = __src[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v27, v28, v29, v30, v31, v32, v33, v34);
  __dst[6] = __src[6];
  v35 = (_TtC14softposreaderd12RemoteReader *)__dst[7];
  __dst[7] = __src[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v35, v36, v37, v38, v39, v40, v41, v42);
  __dst[8] = __src[8];
  v43 = (_TtC14softposreaderd12RemoteReader *)__dst[9];
  __dst[9] = __src[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v43, v44, v45, v46, v47, v48, v49, v50);
  __dst[10] = __src[10];
  v51 = (_TtC14softposreaderd12RemoteReader *)__dst[11];
  __dst[11] = __src[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v51, v52, v53, v54, v55, v56, v57, v58);
  __dst[12] = __src[12];
  __dst[13] = __src[13];
  v59 = __src[14];
  *((_BYTE *)__dst + 120) = *((_BYTE *)__src + 120);
  __dst[14] = v59;
  __dst[16] = __src[16];
  v60 = (_TtC14softposreaderd12RemoteReader *)__dst[17];
  __dst[17] = __src[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v60, v61, v62, v63, v64, v65, v66, v67);
  __dst[18] = __src[18];
  v68 = (_TtC14softposreaderd12RemoteReader *)__dst[19];
  __dst[19] = __src[19];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v68, v69, v70, v71, v72, v73, v74, v75);
  __dst[20] = __src[20];
  v76 = (_TtC14softposreaderd12RemoteReader *)__dst[21];
  __dst[21] = __src[21];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v76, v77, v78, v79, v80, v81, v82, v83);
  __dst[22] = __src[22];
  v84 = (_TtC14softposreaderd12RemoteReader *)__dst[23];
  __dst[23] = __src[23];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v84, v85, v86, v87, v88, v89, v90, v91);
  __dst[24] = __src[24];
  v92 = (_TtC14softposreaderd12RemoteReader *)__dst[25];
  __dst[25] = __src[25];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v92, v93, v94, v95, v96, v97, v98, v99);
  __dst[26] = __src[26];
  v100 = (_TtC14softposreaderd12RemoteReader *)__dst[27];
  __dst[27] = __src[27];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v100, v101, v102, v103, v104, v105, v106, v107);
  __dst[28] = __src[28];
  v108 = (_TtC14softposreaderd12RemoteReader *)__dst[29];
  __dst[29] = __src[29];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v108, v109, v110, v111, v112, v113, v114, v115);
  v116 = __src[30];
  v117 = __src[31];
  sub_100005D9C(v116, v117);
  v118 = __dst[30];
  v119 = __dst[31];
  __dst[30] = v116;
  __dst[31] = v117;
  sub_100005DE0(v118, v119);
  __dst[32] = __src[32];
  v120 = (_TtC14softposreaderd12RemoteReader *)__dst[33];
  __dst[33] = __src[33];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v120, v121, v122, v123, v124, v125, v126, v127);
LABEL_8:
  v130 = (_TtC14softposreaderd12RemoteReader *)__dst[34];
  __dst[34] = __src[34];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v130, v131, v132, v133, v134, v135, v136, v137);
  v138 = __src[35];
  *((_WORD *)__dst + 144) = *((_WORD *)__src + 144);
  __dst[35] = v138;
  return __dst;
}

uint64_t sub_1000D6E24(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  destroy for JSONWebToken(a1, (const char *)&type metadata for JSONWebToken, a3, a4, a5, a6, a7, a8);
  return a1;
}

void *initializeWithTake for MPOCAttestationState(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x122uLL);
}

_QWORD *assignWithTake for MPOCAttestationState(_QWORD *__dst, _QWORD *__src, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  _TtC14softposreaderd12RemoteReader *v10;
  uint64_t v11;
  uint64_t v12;
  _TtC14softposreaderd12RemoteReader *v13;
  SEL v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  _TtC14softposreaderd12RemoteReader *v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  _TtC14softposreaderd12RemoteReader *v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  _TtC14softposreaderd12RemoteReader *v40;
  SEL v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  _TtC14softposreaderd12RemoteReader *v49;
  SEL v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  uint64_t v57;
  _TtC14softposreaderd12RemoteReader *v58;
  SEL v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  uint64_t v66;
  _TtC14softposreaderd12RemoteReader *v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  uint64_t v75;
  _TtC14softposreaderd12RemoteReader *v76;
  SEL v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  uint64_t v84;
  _TtC14softposreaderd12RemoteReader *v85;
  SEL v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  uint64_t v93;
  _TtC14softposreaderd12RemoteReader *v94;
  SEL v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  uint64_t v102;
  _TtC14softposreaderd12RemoteReader *v103;
  SEL v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  uint64_t v111;
  _TtC14softposreaderd12RemoteReader *v112;
  SEL v113;
  id v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  _TtC14softposreaderd12RemoteReader *v123;
  SEL v124;
  id v125;
  id v126;
  id v127;
  id v128;
  id v129;
  id v130;
  const char *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  _TtC14softposreaderd12RemoteReader *v138;

  v10 = (_TtC14softposreaderd12RemoteReader *)__dst[1];
  if (!v10)
    goto LABEL_5;
  v11 = __src[1];
  if (!v11)
  {
    sub_1000D6E24((uint64_t)__dst, (uint64_t)__src, a3, a4, a5, a6, a7, a8);
LABEL_5:
    memcpy(__dst, __src, 0x110uLL);
    goto LABEL_6;
  }
  *__dst = *__src;
  __dst[1] = v11;
  swift_bridgeObjectRelease(v10, (SEL)__src, a3, a4, a5, a6, a7, a8);
  v12 = __src[3];
  v13 = (_TtC14softposreaderd12RemoteReader *)__dst[3];
  __dst[2] = __src[2];
  __dst[3] = v12;
  swift_bridgeObjectRelease(v13, v14, v15, v16, v17, v18, v19, v20);
  v21 = __src[5];
  v22 = (_TtC14softposreaderd12RemoteReader *)__dst[5];
  __dst[4] = __src[4];
  __dst[5] = v21;
  swift_bridgeObjectRelease(v22, v23, v24, v25, v26, v27, v28, v29);
  v30 = __src[7];
  v31 = (_TtC14softposreaderd12RemoteReader *)__dst[7];
  __dst[6] = __src[6];
  __dst[7] = v30;
  swift_bridgeObjectRelease(v31, v32, v33, v34, v35, v36, v37, v38);
  v39 = __src[9];
  v40 = (_TtC14softposreaderd12RemoteReader *)__dst[9];
  __dst[8] = __src[8];
  __dst[9] = v39;
  swift_bridgeObjectRelease(v40, v41, v42, v43, v44, v45, v46, v47);
  v48 = __src[11];
  v49 = (_TtC14softposreaderd12RemoteReader *)__dst[11];
  __dst[10] = __src[10];
  __dst[11] = v48;
  swift_bridgeObjectRelease(v49, v50, v51, v52, v53, v54, v55, v56);
  *((_OWORD *)__dst + 6) = *((_OWORD *)__src + 6);
  __dst[14] = __src[14];
  *((_BYTE *)__dst + 120) = *((_BYTE *)__src + 120);
  v57 = __src[17];
  v58 = (_TtC14softposreaderd12RemoteReader *)__dst[17];
  __dst[16] = __src[16];
  __dst[17] = v57;
  swift_bridgeObjectRelease(v58, v59, v60, v61, v62, v63, v64, v65);
  v66 = __src[19];
  v67 = (_TtC14softposreaderd12RemoteReader *)__dst[19];
  __dst[18] = __src[18];
  __dst[19] = v66;
  swift_bridgeObjectRelease(v67, v68, v69, v70, v71, v72, v73, v74);
  v75 = __src[21];
  v76 = (_TtC14softposreaderd12RemoteReader *)__dst[21];
  __dst[20] = __src[20];
  __dst[21] = v75;
  swift_bridgeObjectRelease(v76, v77, v78, v79, v80, v81, v82, v83);
  v84 = __src[23];
  v85 = (_TtC14softposreaderd12RemoteReader *)__dst[23];
  __dst[22] = __src[22];
  __dst[23] = v84;
  swift_bridgeObjectRelease(v85, v86, v87, v88, v89, v90, v91, v92);
  v93 = __src[25];
  v94 = (_TtC14softposreaderd12RemoteReader *)__dst[25];
  __dst[24] = __src[24];
  __dst[25] = v93;
  swift_bridgeObjectRelease(v94, v95, v96, v97, v98, v99, v100, v101);
  v102 = __src[27];
  v103 = (_TtC14softposreaderd12RemoteReader *)__dst[27];
  __dst[26] = __src[26];
  __dst[27] = v102;
  swift_bridgeObjectRelease(v103, v104, v105, v106, v107, v108, v109, v110);
  v111 = __src[29];
  v112 = (_TtC14softposreaderd12RemoteReader *)__dst[29];
  __dst[28] = __src[28];
  __dst[29] = v111;
  swift_bridgeObjectRelease(v112, v113, v114, v115, v116, v117, v118, v119);
  v120 = __dst[30];
  v121 = __dst[31];
  *((_OWORD *)__dst + 15) = *((_OWORD *)__src + 15);
  sub_100005DE0(v120, v121);
  v122 = __src[33];
  v123 = (_TtC14softposreaderd12RemoteReader *)__dst[33];
  __dst[32] = __src[32];
  __dst[33] = v122;
  swift_bridgeObjectRelease(v123, v124, v125, v126, v127, v128, v129, v130);
LABEL_6:
  v138 = (_TtC14softposreaderd12RemoteReader *)__dst[34];
  __dst[34] = __src[34];
  swift_bridgeObjectRelease(v138, v131, v132, v133, v134, v135, v136, v137);
  __dst[35] = __src[35];
  *((_WORD *)__dst + 144) = *((_WORD *)__src + 144);
  return __dst;
}

uint64_t getEnumTagSinglePayload for MPOCAttestationState(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 290))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MPOCAttestationState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 280) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_WORD *)(result + 288) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 290) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 290) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MPOCAttestationState()
{
  return &type metadata for MPOCAttestationState;
}

BOOL sub_1000D70E4(void *__src, const void *a2)
{
  _BYTE v4[296];
  _BYTE __dst[296];

  memcpy(v4, __src, 0x122uLL);
  memcpy(__dst, a2, 0x122uLL);
  return sub_1000D7138((uint64_t)v4, (uint64_t)__dst);
}

BOOL sub_1000D7138(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[272];
  uint64_t v58;
  _OWORD v59[12];
  _OWORD v60[12];
  _BYTE v61[272];
  _BYTE v62[272];
  _BYTE v63[280];

  sub_100024374(a1, (uint64_t)v61, &qword_1001AE028);
  sub_100024374(a2, (uint64_t)v62, &qword_1001AE028);
  sub_100024374((uint64_t)v61, (uint64_t)v63, &qword_1001AE028);
  if (sub_1000240E0((uint64_t)v63) == 1)
  {
    sub_100024374((uint64_t)v62, (uint64_t)v57, &qword_1001AE028);
    if (sub_1000240E0((uint64_t)v57) == 1)
      goto LABEL_3;
LABEL_8:
    sub_100024374((uint64_t)v61, (uint64_t)v57, &qword_1001AE028);
    sub_100024374((uint64_t)v62, (uint64_t)&v58, &qword_1001AE028);
    sub_1000D76F0((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100070FD0);
    sub_1000D76F0((uint64_t)v62, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100070FD0);
    sub_1000D7568((uint64_t)v57);
    return 0;
  }
  sub_100024374((uint64_t)v62, (uint64_t)v57, &qword_1001AE028);
  if (sub_1000240E0((uint64_t)v57) == 1)
    goto LABEL_8;
  sub_100024374((uint64_t)v61, (uint64_t)&v19, &qword_1001AE028);
  sub_100024374((uint64_t)v62, (uint64_t)&v39, &qword_1001AE028);
  v7 = v21;
  v8 = v22;
  v10 = v23;
  v9 = v24;
  v11 = v41;
  v12 = v42;
  v14 = v43;
  v13 = v44;
  if ((v19 != v39 || v20 != v40) && (_stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, v39, v40, 0) & 1) == 0
    || (v7 != v11 || v8 != v12) && (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v11, v12, 0) & 1) == 0)
  {
    return 0;
  }
  if (v9)
  {
    if (!v13
      || (v10 != v14 || v9 != v13) && (_stringCompareWithSmolCheck(_:_:expecting:)(v10, v9, v14, v13, 0) & 1) == 0)
    {
      return 0;
    }
  }
  else if (v13)
  {
    return 0;
  }
  v59[8] = v33;
  v59[9] = v34;
  v59[10] = v35;
  v59[11] = v36;
  v59[4] = v29;
  v59[5] = v30;
  v59[6] = v31;
  v59[7] = v32;
  v59[0] = v25;
  v59[1] = v26;
  v59[2] = v27;
  v59[3] = v28;
  v60[8] = v53;
  v60[9] = v54;
  v60[10] = v55;
  v60[11] = v56;
  v60[4] = v49;
  v60[5] = v50;
  v60[6] = v51;
  v60[7] = v52;
  v60[0] = v45;
  v60[1] = v46;
  v60[2] = v47;
  v60[3] = v48;
  if (!sub_1000D2704((uint64_t *)v59, (uint64_t)v60))
    return 0;
  v15 = v37;
  v16 = v38;
  sub_1000D76F0((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100070FD0);
  sub_1000D76F0((uint64_t)v62, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100070FD0);
  sub_1001288E0(v15, v16);
  LOBYTE(v15) = v17;
  sub_1000D76F0((uint64_t)v62, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100024170);
  sub_1000D76F0((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100024170);
  if ((v15 & 1) == 0)
    return 0;
LABEL_3:
  v4 = *(_QWORD *)(a1 + 272);
  v5 = *(_QWORD *)(a2 + 272);
  if (v4)
  {
    if (!v5 || (sub_1001278F4(v4, v5) & 1) == 0)
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 289) & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 289) & 1) == 0)
    {
      v18 = *(double *)(a1 + 280);
      if ((*(_BYTE *)(a1 + 288) & 1) != 0)
        __asm { BR              X12 }
      if ((*(_BYTE *)(a2 + 288) & 1) == 0 && v18 == *(double *)(a2 + 280))
        return 1;
    }
    return 0;
  }
  return (*(_BYTE *)(a2 + 289) & 1) != 0;
}

void sub_1000D74AC(uint64_t a1@<X8>)
{
  char v1;

  if ((v1 & 1) != 0 && !a1)
    JUMPOUT(0x1000D734CLL);
  JUMPOUT(0x1000D7254);
}

uint64_t sub_1000D7568(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v2 = *(_QWORD *)(a1 + 280);
  v26 = *(_QWORD *)(a1 + 272);
  v3 = *(_QWORD *)(a1 + 288);
  v4 = *(_QWORD *)(a1 + 296);
  v5 = *(_QWORD *)(a1 + 304);
  v6 = *(_QWORD *)(a1 + 312);
  v7 = *(_QWORD *)(a1 + 320);
  v8 = *(_QWORD *)(a1 + 328);
  v24 = *(_OWORD *)(a1 + 352);
  v25 = *(_OWORD *)(a1 + 336);
  v22 = *(_OWORD *)(a1 + 384);
  v23 = *(_OWORD *)(a1 + 368);
  v20 = *(_OWORD *)(a1 + 416);
  v21 = *(_OWORD *)(a1 + 400);
  v18 = *(_OWORD *)(a1 + 448);
  v19 = *(_OWORD *)(a1 + 432);
  v17 = *(_OWORD *)(a1 + 464);
  v15 = *(_OWORD *)(a1 + 496);
  v16 = *(_OWORD *)(a1 + 480);
  v14 = *(_OWORD *)(a1 + 512);
  v9 = *(_QWORD *)(a1 + 528);
  v10 = *(_QWORD *)(a1 + 536);
  v12 = *(_OWORD *)(a1 + 224);
  v13 = *(_OWORD *)(a1 + 240);
  sub_100024170(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((unint64_t *)&v13 + 1),
    *(_QWORD *)(a1 + 256),
    *(_QWORD *)(a1 + 264));
  sub_100024170(v26, v2, v3, v4, v5, v6, v7, v8, v25, *((uint64_t *)&v25 + 1), v24, *((uint64_t *)&v24 + 1), v23, *((uint64_t *)&v23 + 1), v22, *((uint64_t *)&v22 + 1), v21, *((uint64_t *)&v21 + 1), v20,
    *((uint64_t *)&v20 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v14,
    *((unint64_t *)&v14 + 1),
    v9,
    v10);
  return a1;
}

uint64_t sub_1000D76F0(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a1 + 224);
  v5 = *(_OWORD *)(a1 + 240);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v4,
    *((_QWORD *)&v4 + 1),
    v5,
    *((_QWORD *)&v5 + 1),
    *(_QWORD *)(a1 + 256),
    *(_QWORD *)(a1 + 264));
  return a1;
}

uint64_t sub_1000D776C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = sub_1000ED9FC(&off_100196748);
  v1 = sub_100003A2C(&qword_1001B2388);
  result = swift_arrayDestroy(&unk_100196768, 20, v1);
  qword_1001B4EE8 = v0;
  return result;
}

uint64_t sub_1000D77C0(uint64_t *a1)
{
  return _sSC20SPRSecurityErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(*a1);
}

uint64_t _sSC20SPRSecurityErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t *v5;
  uint64_t v6;
  Swift::String v7;
  void *object;
  _QWORD v10[2];

  if (qword_1001AD1A8 != -1)
    swift_once(&qword_1001AD1A8, sub_1000D776C);
  v2 = qword_1001B4EE8;
  if (*(_QWORD *)(qword_1001B4EE8 + 16) && (v3 = sub_10013A38C(a1), (v4 & 1) != 0))
  {
    v5 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 16 * v3);
    v6 = *v5;
    swift_bridgeObjectRetain(v5[1]);
  }
  else
  {
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease(0xE000000000000000);
    strcpy((char *)v10, "SecurityError#");
    HIBYTE(v10[1]) = -18;
    v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v7._object;
    String.append(_:)(v7);
    swift_bridgeObjectRelease(object);
    return v10[0];
  }
  return v6;
}

unint64_t sub_1000D78C4(uint64_t a1)
{
  unint64_t result;

  result = sub_1000D78E8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000D78E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001AC6E8;
  if (!qword_1001AC6E8)
  {
    type metadata accessor for SecurityError(255);
    result = swift_getWitnessTable(&unk_10015BE48, v1);
    atomic_store(result, (unint64_t *)&qword_1001AC6E8);
  }
  return result;
}

uint64_t sub_1000D7930(OSStatus a1, uint64_t a2)
{
  uint64_t v3;
  CFStringRef v4;
  __CFString *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;

  switch(a1)
  {
    case -67843:
      goto LABEL_5;
    case -67842:
    case -67841:
    case -67840:
    case -67839:
    case -67838:
    case -67837:
    case -67836:
    case -67835:
    case -67834:
    case -67833:
    case -67832:
    case -67831:
    case -67830:
    case -67829:
    case -67828:
    case -67827:
    case -67826:
    case -67825:
    case -67824:
    case -67823:
    case -67822:
    case -67821:
      goto LABEL_6;
    case -67820:
      v3 = 10013;
      goto LABEL_10;
    case -67819:
      v3 = 10011;
      goto LABEL_10;
    case -67818:
      v3 = 10012;
      goto LABEL_10;
    default:
      if (a1 == -67880 || a1 == -25318)
      {
LABEL_5:
        v3 = 10010;
LABEL_10:
        v9 = 0;
        v10 = 0;
      }
      else
      {
LABEL_6:
        v4 = SecCopyErrorMessageString(a1, 0);
        if (v4)
        {
          v5 = (__CFString *)v4;
          v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
          v8 = v7;

        }
        else
        {
          v6 = 0;
          v8 = 0;
        }
        v3 = 10997;
        v9 = v6;
        v10 = v8;
      }
      return sub_10002460C(v3, v9, v10, a2);
  }
}

void sub_1000D79FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x1000D7B4CLL);
}

void NFSecureElementManagerSession.select(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (qword_1001AD1B0 != -1)
    swift_once(&qword_1001AD1B0, sub_1000DB084);
  v4 = type metadata accessor for Logger(0);
  sub_100003A14(v4, (uint64_t)qword_1001B2390);
  sub_100005D9C(a1, a2);
  v5 = sub_100005D9C(a1, a2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v13 = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = Data.hexString()();
    v11 = sub_1000056EC(v10._countAndFlagsBits, (unint64_t)v10._object, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v10._object);
    sub_100005DE0(a1, a2);
    sub_100005DE0(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "selectApplet(%s)", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    sub_100005DE0(a1, a2);
    sub_100005DE0(a1, a2);
  }

  __asm { BR              X10 }
}

uint64_t sub_1000D8634()
{
  void *v0;
  void *v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  unsigned int v15;
  id v16;
  id v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  id v24;
  uint64_t v25;
  id v26;

  v1 = v0;
  v2 = objc_msgSend(v0, "validateSEPairings:", 0);
  if (v2 != 27)
  {
    v3 = v2;
    if (v2)
    {
      if (qword_1001AD1B0 != -1)
        swift_once(&qword_1001AD1B0, sub_1000DB084);
      v19 = type metadata accessor for Logger(0);
      v20 = sub_100003A14(v19, (uint64_t)qword_1001B2390);
      v6 = Logger.logObject.getter(v20);
      v21 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v6, v21))
        goto LABEL_18;
      v22 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v22 = 67109120;
      LODWORD(v26) = v3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, (char *)&v26 + 4, v22 + 4, v22 + 8);
      _os_log_impl((void *)&_mh_execute_header, v6, v21, "Failed to determine SE-SEP pairings: %u", v22, 8u);
      v9 = v22;
    }
    else
    {
      if (qword_1001AD1B0 != -1)
        swift_once(&qword_1001AD1B0, sub_1000DB084);
      v4 = type metadata accessor for Logger(0);
      v5 = sub_100003A14(v4, (uint64_t)qword_1001B2390);
      v6 = Logger.logObject.getter(v5);
      v7 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v6, v7))
        goto LABEL_18;
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "valid SE-SEP pairing found.", v8, 2u);
      v9 = v8;
    }
    swift_slowDealloc(v9, -1, -1);
LABEL_18:

    v18 = 1;
    return v18 & 1;
  }
  if (qword_1001AD1B0 != -1)
    swift_once(&qword_1001AD1B0, sub_1000DB084);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_100003A14(v10, (uint64_t)qword_1001B2390);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "SE-SEP is not paired, deleteAllApplets", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  v26 = 0;
  v15 = objc_msgSend(v1, "deleteAllApplets:error:", 0, &v26);
  v16 = v26;
  if (v15)
  {
    v17 = v26;
    v18 = 0;
  }
  else
  {
    v24 = v26;
    _convertNSErrorToError(_:)(v16);

    swift_willThrow(v25);
  }
  return v18 & 1;
}

BOOL NFSecureElementManagerSession.isAppletInSEStateInfo(aid:seState:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  _TtC14softposreaderd12RemoteReader *v11;
  SEL v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  _TtC14softposreaderd12RemoteReader *v25;
  _TtC14softposreaderd12RemoteReader *v26;
  const char *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  SEL v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v42;
  uint64_t v43;

  v4 = Data.hexString()();
  if (qword_1001AD1B0 != -1)
    swift_once(&qword_1001AD1B0, sub_1000DB084);
  v5 = type metadata accessor for Logger(0);
  sub_100003A14(v5, (uint64_t)qword_1001B2390);
  v6 = swift_bridgeObjectRetain_n(v4._object, 2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v43 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain();
    v42 = sub_1000056EC(v4._countAndFlagsBits, (unint64_t)v4._object, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(v4._object, 3);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "checking if applet %s is in SE State Info", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v4._object, 2);
  }
  v11 = (_TtC14softposreaderd12RemoteReader *)sub_1000D8C84(v4._countAndFlagsBits, (uint64_t)v4._object, a3);
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v4._object, v12, v13, v14, v15, v16, v17, v18);
  v19 = swift_bridgeObjectRetain_n(v11, 2);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v20, v21))
  {

    swift_bridgeObjectRelease_n(v11, 2);
    if (!v11)
      return v11 != 0;
    goto LABEL_13;
  }
  v22 = (uint8_t *)swift_slowAlloc(12, -1);
  v23 = swift_slowAlloc(32, -1);
  v43 = v23;
  *(_DWORD *)v22 = 136315138;
  if (v11)
  {
    v24 = Dictionary.description.getter(v11, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    v26 = v25;
  }
  else
  {
    v26 = (_TtC14softposreaderd12RemoteReader *)0xE700000000000000;
    v24 = 0x676E6968746F6ELL;
  }
  v42 = sub_1000056EC(v24, (unint64_t)v26, &v43);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v22 + 4, v22 + 12);
  swift_bridgeObjectRelease_n(v11, 2);
  swift_bridgeObjectRelease(v26, v34, v35, v36, v37, v38, v39, v40);
  _os_log_impl((void *)&_mh_execute_header, v20, v21, "found %s", v22, 0xCu);
  swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v23, -1, -1);
  swift_slowDealloc(v22, -1, -1);

  if (v11)
LABEL_13:
    swift_bridgeObjectRelease(v11, v27, v28, v29, v30, v31, v32, v33);
  return v11 != 0;
}

uint64_t sub_1000D8C84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD v32[2];
  __int128 v33;
  __int128 v34;

  v28 = a2;
  v29 = a1;
  v5 = type metadata accessor for NSFastEnumerationIterator(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    v9 = a3;
    goto LABEL_3;
  }
  v12 = objc_msgSend(v3, "stateInformation");
  if (!v12)
  {
    v33 = 0u;
    v34 = 0u;
    goto LABEL_31;
  }
  v13 = v12;
  v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, (char *)&type metadata for Any + 8);

  if (!*(_QWORD *)(v14 + 16))
  {
    v33 = 0u;
    v34 = 0u;
    swift_bridgeObjectRelease(v14);
    goto LABEL_31;
  }
  sub_100005D5C(v14 + 32, (uint64_t)&v33);
  swift_bridgeObjectRelease(v14);
  if (!*((_QWORD *)&v34 + 1))
  {
LABEL_31:
    sub_100007B30((uint64_t)&v33);
    return 0;
  }
  v15 = sub_100003A2C(&qword_1001AEAC8);
  if ((swift_dynamicCast(v32, &v33, (char *)&type metadata for Any + 8, v15, 6) & 1) == 0)
    return 0;
  v9 = *(_QWORD *)&v32[0];
  if (!*(_QWORD *)&v32[0])
    return 0;
LABEL_3:
  if (*(_QWORD *)(v9 + 16))
  {
    swift_bridgeObjectRetain(a3);
    v10 = sub_10000ADC4(0x656E6961746E6F63, 0xEA00000000007372);
    if ((v11 & 1) != 0)
    {
      sub_100005D5C(*(_QWORD *)(v9 + 56) + 32 * v10, (uint64_t)&v33);
    }
    else
    {
      v33 = 0u;
      v34 = 0u;
    }
  }
  else
  {
    v33 = 0u;
    v34 = 0u;
    swift_bridgeObjectRetain(a3);
  }
  swift_bridgeObjectRelease(v9);
  if (!*((_QWORD *)&v34 + 1))
    goto LABEL_31;
  v16 = sub_100005E24(0, &qword_1001AF6D8, NSArray_ptr);
  if ((swift_dynamicCast(v32, &v33, (char *)&type metadata for Any + 8, v16, 6) & 1) == 0)
    return 0;
  v27 = *(id *)&v32[0];
  v17 = NSArray.makeIterator()();
  NSFastEnumerationIterator.next()(&v33, v17);
  if (!*((_QWORD *)&v34 + 1))
  {
LABEL_28:
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);

    return 0;
  }
  v26 = v5;
  while (1)
  {
    sub_100005D2C(&v33, v32);
    v19 = sub_100003A2C(&qword_1001AEAC8);
    v18 = swift_dynamicCast(&v30, v32, (char *)&type metadata for Any + 8, v19, 6);
    if ((v18 & 1) == 0)
      goto LABEL_19;
    v20 = v30;
    if (!*(_QWORD *)(v30 + 16)
      || (v21 = sub_10000ADC4(0x694174656C707061, 0xE900000000000064), (v22 & 1) == 0)
      || (sub_100005D5C(*(_QWORD *)(v20 + 56) + 32 * v21, (uint64_t)v32),
          (swift_dynamicCast(&v30, v32, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0))
    {
      v18 = swift_bridgeObjectRelease(v20);
      goto LABEL_19;
    }
    v23 = v31;
    if (v30 == v29 && v31 == v28)
      break;
    v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, v29, v28, 0);
    swift_bridgeObjectRelease(v23);
    if ((v24 & 1) != 0)
      goto LABEL_35;
    v18 = swift_bridgeObjectRelease(v20);
    v5 = v26;
LABEL_19:
    NSFastEnumerationIterator.next()(&v33, v18);
    if (!*((_QWORD *)&v34 + 1))
      goto LABEL_28;
  }
  swift_bridgeObjectRelease(v28);
LABEL_35:
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v26);

  return v20;
}

uint64_t sub_1000D8FF0@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W4>, uint64_t a5@<X8>)
{
  void *v5;
  void *v6;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint8_t *v31;
  Class isa;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  __int128 v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  Swift::String v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  Swift::String v54;
  SEL v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _WORD *v71;
  void *v72;
  Swift::String v73;
  SEL v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  __int128 v81;
  uint64_t v82;
  unint64_t v83;
  Swift::String v84;
  SEL v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _TtC14softposreaderd12RemoteReader *v95;
  SEL v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  uint64_t v103;
  uint64_t result;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char v113;
  uint64_t v114;
  _QWORD *v115;
  os_log_type_t v116;
  uint64_t v118;
  os_log_type_t type;
  uint64_t typea;
  void *v121;
  uint64_t v122;
  char v123;
  id v124;
  _QWORD v125[2];
  uint64_t v126;
  __int128 v127;
  _BYTE v128[24];
  __int128 v129;
  __int128 v130;
  uint64_t v131;

  v6 = v5;
  v10 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a4 & 1) != 0)
    sub_10005E420(v10);
  else
    sub_10005E7B4(v10, a2, a3);
  v13 = v11;
  v14 = v12;
  v15 = sub_1000DB71C();
  v17 = v16;
  sub_100005D9C((uint64_t)v15, v16);
  v110 = (uint64_t)v15;
  v111 = v17;
  sub_10005EB64((uint64_t)v15, v17);
  v127 = v129;
  *(_OWORD *)v128 = v130;
  *(_QWORD *)&v128[16] = v131;
  if ((unsigned __int16)v130 != 25360)
  {
    if ((unsigned __int16)v130 == 36864)
    {
      sub_100005DE0((uint64_t)v15, v17);
      v18 = v13;
      v19 = v14;
    }
    else
    {
      if (qword_1001AD0B8 != -1)
        swift_once(&qword_1001AD0B8, sub_1000B85F4);
      v37 = type metadata accessor for Logger(0);
      sub_100003A14(v37, (uint64_t)qword_1001B1850);
      sub_100005D9C(v13, v14);
      v38 = sub_100005D9C(v13, v14);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v39, v40))
      {
        sub_100005DE0((uint64_t)v15, v111);
        sub_100005DE0(v13, v14);
        sub_100005DE0(v13, v14);
        sub_100005DE0(v13, v14);

LABEL_22:
        result = swift_beginAccess(&v127, &v124, 0, 0);
        v105 = v127;
        v106 = *(unsigned __int16 *)v128;
        v107 = *(_OWORD *)&v128[8];
        goto LABEL_25;
      }
      type = v40;
      v41 = swift_slowAlloc(22, -1);
      v121 = (void *)swift_slowAlloc(64, -1);
      v124 = v121;
      *(_DWORD *)v41 = 136315394;
      swift_beginAccess(&v127, &v126, 0, 0);
      v42 = v127;
      v43 = v14;
      v44 = *(_QWORD *)&v128[8];
      v45 = *(_QWORD *)&v128[16];
      sub_100005D9C(v127, *((unint64_t *)&v127 + 1));
      sub_100005D9C(v44, v45);
      v46 = Data.hexString()();
      sub_100005DE0(v42, *((unint64_t *)&v42 + 1));
      sub_100005DE0(v44, v45);
      v122 = sub_1000056EC(v46._countAndFlagsBits, (unint64_t)v46._object, (uint64_t *)&v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v41 + 4, v41 + 12);
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v46._object, v47, v48, v49, v50, v51, v52, v53);
      *(_WORD *)(v41 + 12) = 2080;
      v54 = Data.hexString()();
      v122 = sub_1000056EC(v54._countAndFlagsBits, (unint64_t)v54._object, (uint64_t *)&v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v41 + 14, v41 + 22);
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v54._object, v55, v56, v57, v58, v59, v60, v61);
      sub_100005DE0(v13, v43);
      sub_100005DE0(v13, v43);
      _os_log_impl((void *)&_mh_execute_header, v39, type, "Status Word Not 9000 (!) RAPDU: %s to CAPDU: %s", (uint8_t *)v41, 0x16u);
      swift_arrayDestroy(v121, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v121, -1, -1);
      swift_slowDealloc(v41, -1, -1);
      sub_100005DE0((uint64_t)v15, v111);

      v18 = v13;
      v19 = v43;
    }
    sub_100005DE0(v18, v19);
    goto LABEL_22;
  }
  v20 = a1;
  v118 = v13;
  v22 = *((_QWORD *)&v129 + 1);
  v21 = v129;
  sub_100005D9C(v129, *((unint64_t *)&v129 + 1));
  v112 = v20 >> 8;
  v113 = v20;
  if (qword_1001AD0B8 != -1)
    swift_once(&qword_1001AD0B8, sub_1000B85F4);
  v23 = type metadata accessor for Logger(0);
  sub_100003A14(v23, (uint64_t)qword_1001B1850);
  v24 = sub_100005D9C(a2, a3);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = swift_slowAlloc(8, -1);
    v28 = a2;
    v29 = v129;
    v30 = (uint8_t *)v27;
    *(_DWORD *)v27 = 16777728;
    *(_BYTE *)(v27 + 4) = v113;
    *(_WORD *)(v27 + 5) = 256;
    *(_BYTE *)(v27 + 7) = v112;
    sub_100005DE0(v28, a3);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "More data available: CLA=%hhu, INS=%hhu", v30, 8u);
    v31 = v30;
    v21 = v29;
    swift_slowDealloc(v31, -1, -1);
  }
  else
  {
    sub_100005DE0(a2, a3);
  }

  isa = Data._bridgeToObjectiveC()().super.isa;
  v124 = 0;
  v33 = objc_msgSend(v6, "transceive:error:", isa, &v124);

  v34 = v124;
  if (v33)
  {
    static Data._unconditionallyBridgeFromObjectiveC(_:)(v33);
    v36 = v35;

    __asm { BR              X9 }
  }
  v62 = v34;
  v63 = _convertNSErrorToError(_:)(v34);

  swift_willThrow(v64);
  sub_100005D9C(v118, v14);
  swift_errorRetain();
  sub_100005D9C(v118, v14);
  v65 = swift_errorRetain();
  v66 = Logger.logObject.getter(v65);
  v67 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v66, v67))
  {
    v116 = v67;
    v68 = swift_slowAlloc(42, -1);
    v115 = (_QWORD *)swift_slowAlloc(8, -1);
    typea = swift_slowAlloc(96, -1);
    v126 = typea;
    *(_DWORD *)v68 = 138413058;
    v69 = sub_100030724();
    v70 = swift_allocError(&type metadata for APDUSW, v69, 0, 0);
    *v71 = 25360;
    v72 = (void *)_swift_stdlib_bridgeErrorToNSError(v70);
    v124 = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, v125, v68 + 4, v68 + 12);
    *v115 = v72;
    *(_WORD *)(v68 + 12) = 2080;
    v73 = Data.hexString()();
    v124 = (id)sub_1000056EC(v73._countAndFlagsBits, (unint64_t)v73._object, &v126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, v125, v68 + 14, v68 + 22);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v73._object, v74, v75, v76, v77, v78, v79, v80);
    sub_100005DE0(v118, v14);
    sub_100005DE0(v118, v14);
    *(_WORD *)(v68 + 22) = 2080;
    swift_beginAccess(&v127, &v124, 0, 0);
    v81 = v127;
    v114 = v21;
    v82 = *(_QWORD *)&v128[8];
    v83 = *(_QWORD *)&v128[16];
    sub_100005D9C(v127, *((unint64_t *)&v127 + 1));
    sub_100005D9C(v82, v83);
    v84 = Data.hexString()();
    sub_100005DE0(v81, *((unint64_t *)&v81 + 1));
    sub_100005DE0(v82, v83);
    v122 = sub_1000056EC(v84._countAndFlagsBits, (unint64_t)v84._object, &v126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v68 + 24, v68 + 32);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v84._object, v85, v86, v87, v88, v89, v90, v91);
    *(_WORD *)(v68 + 32) = 2080;
    v122 = v63;
    swift_errorRetain();
    v92 = sub_100003A2C((uint64_t *)&unk_1001B1280);
    v93 = String.init<A>(describing:)(&v122, v92);
    v95 = (_TtC14softposreaderd12RemoteReader *)v94;
    v122 = sub_1000056EC(v93, v94, &v126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v68 + 34, v68 + 42);
    swift_bridgeObjectRelease(v95, v96, v97, v98, v99, v100, v101, v102);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v66, v116, "getting %@, but subsequent apdu failed. C-APDU: %s\nR-APDU: %s\nerror: %s", (uint8_t *)v68, 0x2Au);
    v103 = sub_100003A2C((uint64_t *)&unk_1001AE430);
    swift_arrayDestroy(v115, 1, v103);
    swift_slowDealloc(v115, -1, -1);
    swift_arrayDestroy(typea, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(typea, -1, -1);
    swift_slowDealloc(v68, -1, -1);
    sub_100005DE0(v110, v111);

    swift_errorRelease();
    sub_100005DE0(v118, v14);
    sub_100005DE0(v114, v22);
  }
  else
  {
    sub_100005DE0(v110, v111);
    sub_100005DE0(v118, v14);
    sub_100005DE0(v21, v22);
    swift_errorRelease();
    sub_100005DE0(v118, v14);
    sub_100005DE0(v118, v14);
    swift_errorRelease();
    swift_errorRelease();

  }
  v108 = *(_QWORD *)&v128[8];
  v109 = *(_QWORD *)&v128[16];
  sub_100005DE0(v127, *((unint64_t *)&v127 + 1));
  result = sub_100005DE0(v108, v109);
  v106 = 0;
  v105 = xmmword_10015E900;
  v107 = 0uLL;
LABEL_25:
  *(_OWORD *)a5 = v105;
  *(_QWORD *)(a5 + 16) = v106;
  *(_OWORD *)(a5 + 24) = v107;
  return result;
}

uint64_t sub_1000DA1E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W4>, uint64_t a5@<X8>)
{
  unint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint8_t *v12;
  uint8_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  Swift::String v34;
  unint64_t v35;
  Swift::String v36;
  uint64_t result;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int16 v41;
  NSObject *log;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[3];
  uint64_t v46;
  __int128 v47;
  _BYTE v48[24];
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v41 = a1;
  v8 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a4 & 1) != 0)
    sub_10005E420(v8);
  else
    sub_10005E7B4(v8, a2, a3);
  v11 = v9;
  v12 = v10;
  v13 = NFSecureElementManagerSession.transceive(_:)(v9, v10);
  v15 = v14;
  v16 = (uint64_t)v13;
  sub_100005D9C((uint64_t)v13, v14);
  v40 = v16;
  sub_10005EB64(v16, v15);
  v47 = v49;
  *(_OWORD *)v48 = v50;
  *(_QWORD *)&v48[16] = v51;
  if ((unsigned __int16)v50 == 25360)
  {
    sub_100005D9C(v49, *((unint64_t *)&v49 + 1));
    if (qword_1001AD0B8 != -1)
      swift_once(&qword_1001AD0B8, sub_1000B85F4);
    v19 = type metadata accessor for Logger(0);
    sub_100003A14(v19, (uint64_t)qword_1001B1850);
    v20 = sub_100005D9C(a2, a3);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc(8, -1);
      *(_DWORD *)v23 = 16777728;
      *(_BYTE *)(v23 + 4) = v41;
      *(_WORD *)(v23 + 5) = 256;
      *(_BYTE *)(v23 + 7) = HIBYTE(v41);
      sub_100005DE0(a2, a3);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "More data available: CLA=%hhu, INS=%hhu", (uint8_t *)v23, 8u);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      sub_100005DE0(a2, a3);
    }

    NFSecureElementManagerSession.transceive(_:)(v11, v12);
    __asm { BR              X9 }
  }
  if ((unsigned __int16)v50 == 36864)
  {
    sub_100005DE0(v16, v15);
    v17 = v11;
    v18 = (unint64_t)v12;
  }
  else
  {
    if (qword_1001AD0B8 != -1)
      swift_once(&qword_1001AD0B8, sub_1000B85F4);
    v25 = type metadata accessor for Logger(0);
    sub_100003A14(v25, (uint64_t)qword_1001B1850);
    sub_100005D9C(v11, (unint64_t)v12);
    v26 = sub_100005D9C(v11, (unint64_t)v12);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v27, v28))
    {
      sub_100005DE0(v40, v15);
      sub_100005DE0(v11, (unint64_t)v12);
      sub_100005DE0(v11, (unint64_t)v12);
      sub_100005DE0(v11, (unint64_t)v12);

      goto LABEL_19;
    }
    log = v27;
    v29 = swift_slowAlloc(22, -1);
    v43 = swift_slowAlloc(64, -1);
    v46 = v43;
    *(_DWORD *)v29 = 136315394;
    swift_beginAccess(&v47, v45, 0, 0);
    v30 = v47;
    v31 = a5;
    v32 = *(_QWORD *)&v48[8];
    v33 = *(_QWORD *)&v48[16];
    sub_100005D9C(v47, *((unint64_t *)&v47 + 1));
    sub_100005D9C(v32, v33);
    v34 = Data.hexString()();
    sub_100005DE0(v30, *((unint64_t *)&v30 + 1));
    v35 = v33;
    a5 = v31;
    sub_100005DE0(v32, v35);
    v44 = sub_1000056EC(v34._countAndFlagsBits, (unint64_t)v34._object, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, v45, v29 + 4, v29 + 12);
    swift_bridgeObjectRelease(v34._object);
    *(_WORD *)(v29 + 12) = 2080;
    v36 = Data.hexString()();
    v44 = sub_1000056EC(v36._countAndFlagsBits, (unint64_t)v36._object, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, v45, v29 + 14, v29 + 22);
    swift_bridgeObjectRelease(v36._object);
    sub_100005DE0(v11, (unint64_t)v12);
    sub_100005DE0(v11, (unint64_t)v12);
    _os_log_impl((void *)&_mh_execute_header, log, v28, "Status Word Not 9000 (!) RAPDU: %s to CAPDU: %s", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy(v43, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v29, -1, -1);
    sub_100005DE0(v40, v15);

    v17 = v11;
    v18 = (unint64_t)v12;
  }
  sub_100005DE0(v17, v18);
LABEL_19:
  result = swift_beginAccess(&v47, &v46, 0, 0);
  v38 = *(unsigned __int16 *)v48;
  v39 = *(_OWORD *)&v48[8];
  *(_OWORD *)a5 = v47;
  *(_QWORD *)(a5 + 16) = v38;
  *(_OWORD *)(a5 + 24) = v39;
  return result;
}

uint64_t sub_1000DB084()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B2390);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B2390);
  if (qword_1001AD180 != -1)
    swift_once(&qword_1001AD180, sub_1000CC92C);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4E70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint8_t *NFSecureElementManagerSession.transceive(_:)(uint64_t a1, uint8_t *a2)
{
  void *v2;
  id v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  Class isa;
  id v10;
  uint8_t *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  unint64_t v18;
  _WORD *v19;
  id v21;

  v21 = 0;
  v4 = objc_msgSend((id)objc_opt_self(NFSecureElement), "embeddedSecureElementWithError:", &v21);
  v5 = v21;
  if (!v4)
  {
    v12 = v21;
    _convertNSErrorToError(_:)(v5);

LABEL_12:
    swift_willThrow(v13);
    return a2;
  }
  v6 = v4;
  v7 = v21;
  v8 = objc_msgSend(v6, "serialNumber");

  if (!v8)
  {
    if (qword_1001AD1B0 != -1)
      swift_once(&qword_1001AD1B0, sub_1000DB084);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_100003A14(v14, (uint64_t)qword_1001B2390);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      a2 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)a2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "no seid", a2, 2u);
      swift_slowDealloc(a2, -1, -1);
    }

    v18 = sub_100030724();
    v13 = swift_allocError(&type metadata for APDUSW, v18, 0, 0);
    *v19 = 0;
    goto LABEL_12;
  }
  isa = Data._bridgeToObjectiveC()().super.isa;
  v21 = 0;
  v10 = objc_msgSend(v2, "transceive:forSEID:error:", isa, v8, &v21);

  v11 = (uint8_t *)v21;
  if (!v10)
  {
    a2 = v11;
    _convertNSErrorToError(_:)(v11);

    goto LABEL_12;
  }
  a2 = (uint8_t *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);

  return a2;
}

Swift::Void __swiftcall NFSecureElementManagerSession.performCleanupScript()()
{
  void *v0;
  uint64_t v1;
  _QWORD *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12[11];
  _OWORD v13[5];
  uint64_t v14;
  _OWORD v15[5];
  uint64_t v16;

  sub_100051B90(v12);
  sub_100024374((uint64_t)v12, (uint64_t)v13, &qword_1001B0DE0);
  if (v14)
  {
    v15[2] = v13[2];
    v15[3] = v13[3];
    v15[4] = v13[4];
    v16 = v14;
    v15[0] = v13[0];
    v15[1] = v13[1];
    v10 = sub_100005E24(0, (unint64_t *)&qword_1001B36C0, NFSecureElementManagerSession_ptr);
    v11 = sub_1000DB9D0((unint64_t *)&qword_1001AC680, (unint64_t *)&qword_1001B36C0, NFSecureElementManagerSession_ptr, (uint64_t)&protocol conformance descriptor for NFSecureElementManagerSession);
    *(_QWORD *)&v9 = v0;
    v1 = type metadata accessor for SLAMSwift();
    v2 = (_QWORD *)swift_allocObject(v1, 96, 7);
    v2[11] = sub_1000EDBBC((uint64_t)_swiftEmptyArrayStorage);
    sub_10001A674(&v9, (uint64_t)(v2 + 2));
    v2[7] = BitString.init(data:unusedBits:);
    v2[8] = 0;
    v2[9] = 0;
    v2[10] = 1;
    v3 = v0;
    sub_10004FD48((uint64_t)v15);
    swift_release(v2);
    sub_1000DB93C(v12);
  }
  else
  {
    if (qword_1001AD1B0 != -1)
      swift_once(&qword_1001AD1B0, sub_1000DB084);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_100003A14(v4, (uint64_t)qword_1001B2390);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Could not perform cleanup script", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

  }
}

uint8_t *sub_1000DB6DC(uint64_t a1, uint8_t *a2)
{
  return NFSecureElementManagerSession.transceive(_:)(a1, a2);
}

void *sub_1000DB6FC()
{
  return sub_1000DB71C();
}

void *sub_1000DB71C()
{
  void *v0;
  Class isa;
  id v2;
  id v3;
  void *v4;
  id v6;

  isa = Data._bridgeToObjectiveC()().super.isa;
  v6 = 0;
  v2 = objc_msgSend(v0, "transceive:error:", isa, &v6);

  v3 = v6;
  if (v2)
  {
    v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);

  }
  else
  {
    v4 = v3;
    _convertNSErrorToError(_:)(v3);

    swift_willThrow();
  }
  return v4;
}

uint64_t sub_1000DB7F0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4;
  uint64_t v5;

  v4 = __OFADD__(a1, a2);
  v5 = a1 + a2;
  if (v4)
  {
    __break(1u);
    JUMPOUT(0x1000DB850);
  }
  return ((uint64_t (*)(uint64_t))((char *)&loc_1000DB808 + dword_1000DB854[a4 >> 62]))(v5);
}

uint64_t sub_1000DB864(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)(void))((char *)&loc_1000DB874 + dword_1000DB91C[a4 >> 62]))();
}

uint64_t sub_1000DB888@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, int a3@<W8>)
{
  if (BYTE6(a2) < a1 || a1 < 0)
  {
    __break(1u);
    JUMPOUT(0x1000DB914);
  }
  return ((uint64_t (*)(void))((char *)&loc_1000DB8C4 + dword_1000DB92C[a3]))();
}

uint64_t *sub_1000DB93C(uint64_t *a1)
{
  sub_10009799C(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10]);
  return a1;
}

uint64_t sub_1000DB98C(uint64_t a1)
{
  uint64_t result;

  result = sub_1000DB9D0(&qword_1001B23A8, (unint64_t *)&qword_1001B36C0, NFSecureElementManagerSession_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000DB9D0(unint64_t *a1, unint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_100005E24(255, a2, a3);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000DBA10(uint64_t a1)
{
  uint64_t result;

  result = sub_1000DB9D0(&qword_1001B23B0, &qword_1001B23B8, NFSecureElementReaderSession_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000DBA54()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  unsigned __int8 v13;
  _BYTE v14[32];

  v1 = v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock, &v8, 33, 0);
  os_unfair_recursive_lock_lock_with_options(v1, 0x10000);
  swift_endAccess(&v8);
  v2 = (_QWORD *)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components, v14, 0, 0);
  v3 = *v2;
  if (*(_QWORD *)(*v2 + 16))
  {
    swift_bridgeObjectRetain(*v2);
    v4 = sub_10000ADC4(0xD00000000000001ALL, 0x800000010016DE10);
    if ((v5 & 1) != 0)
    {
      sub_1000BDF04(*(_QWORD *)(v3 + 56) + 40 * v4, (uint64_t)&v11);
    }
    else
    {
      v11 = 0u;
      v12 = 0u;
      v13 = -1;
    }
    swift_bridgeObjectRelease(v3);
    if (v13 != 255)
    {
      sub_1000E7EF4((uint64_t)&v11, (uint64_t)&v9);
      __asm { BR              X10 }
    }
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
    v13 = -1;
  }
  v6 = sub_1000243DC(7002, 0xD00000000000001ALL, (void *)0x800000010016DE10, 0);
  swift_willThrow(v6);
  sub_10005218C((uint64_t)&v11, &qword_1001B2500);
  swift_beginAccess(v1, &v8, 33, 0);
  os_unfair_recursive_lock_unlock(v1);
  return swift_endAccess(&v8);
}

uint64_t sub_1000DBF84()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  unsigned __int8 v13;
  _BYTE v14[32];

  v1 = v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock, &v8, 33, 0);
  os_unfair_recursive_lock_lock_with_options(v1, 0x10000);
  swift_endAccess(&v8);
  v2 = (_QWORD *)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components, v14, 0, 0);
  v3 = *v2;
  if (*(_QWORD *)(*v2 + 16))
  {
    swift_bridgeObjectRetain(*v2);
    v4 = sub_10000ADC4(0xD000000000000022, 0x800000010016DF50);
    if ((v5 & 1) != 0)
    {
      sub_1000BDF04(*(_QWORD *)(v3 + 56) + 40 * v4, (uint64_t)&v11);
    }
    else
    {
      v11 = 0u;
      v12 = 0u;
      v13 = -1;
    }
    swift_bridgeObjectRelease(v3);
    if (v13 != 255)
    {
      sub_1000E7EF4((uint64_t)&v11, (uint64_t)&v9);
      __asm { BR              X10 }
    }
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
    v13 = -1;
  }
  v6 = sub_1000243DC(7002, 0xD000000000000022, (void *)0x800000010016DF50, 0);
  swift_willThrow(v6);
  sub_10005218C((uint64_t)&v11, &qword_1001B2500);
  swift_beginAccess(v1, &v8, 33, 0);
  os_unfair_recursive_lock_unlock(v1);
  return swift_endAccess(&v8);
}

uint64_t sub_1000DC4B4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  unsigned __int8 v13;
  _BYTE v14[32];

  v1 = v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock, &v8, 33, 0);
  os_unfair_recursive_lock_lock_with_options(v1, 0x10000);
  swift_endAccess(&v8);
  v2 = (_QWORD *)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components, v14, 0, 0);
  v3 = *v2;
  if (*(_QWORD *)(*v2 + 16))
  {
    swift_bridgeObjectRetain(*v2);
    v4 = sub_10000ADC4(0xD000000000000010, 0x800000010016DF80);
    if ((v5 & 1) != 0)
    {
      sub_1000BDF04(*(_QWORD *)(v3 + 56) + 40 * v4, (uint64_t)&v11);
    }
    else
    {
      v11 = 0u;
      v12 = 0u;
      v13 = -1;
    }
    swift_bridgeObjectRelease(v3);
    if (v13 != 255)
    {
      sub_1000E7EF4((uint64_t)&v11, (uint64_t)&v9);
      __asm { BR              X10 }
    }
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
    v13 = -1;
  }
  v6 = sub_1000243DC(7002, 0xD000000000000010, (void *)0x800000010016DF80, 0);
  swift_willThrow(v6);
  sub_10005218C((uint64_t)&v11, &qword_1001B2500);
  swift_beginAccess(v1, &v8, 33, 0);
  os_unfair_recursive_lock_unlock(v1);
  return swift_endAccess(&v8);
}

uint64_t sub_1000DC9E4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  unsigned __int8 v13;
  _BYTE v14[32];

  v1 = v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock, &v8, 33, 0);
  os_unfair_recursive_lock_lock_with_options(v1, 0x10000);
  swift_endAccess(&v8);
  v2 = (_QWORD *)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components, v14, 0, 0);
  v3 = *v2;
  if (*(_QWORD *)(*v2 + 16))
  {
    swift_bridgeObjectRetain(*v2);
    v4 = sub_10000ADC4(0xD00000000000001FLL, 0x800000010016E0D0);
    if ((v5 & 1) != 0)
    {
      sub_1000BDF04(*(_QWORD *)(v3 + 56) + 40 * v4, (uint64_t)&v11);
    }
    else
    {
      v11 = 0u;
      v12 = 0u;
      v13 = -1;
    }
    swift_bridgeObjectRelease(v3);
    if (v13 != 255)
    {
      sub_1000E7EF4((uint64_t)&v11, (uint64_t)&v9);
      __asm { BR              X10 }
    }
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
    v13 = -1;
  }
  v6 = sub_1000243DC(7002, 0xD00000000000001FLL, (void *)0x800000010016E0D0, 0);
  swift_willThrow(v6);
  sub_10005218C((uint64_t)&v11, &qword_1001B2500);
  swift_beginAccess(v1, &v8, 33, 0);
  os_unfair_recursive_lock_unlock(v1);
  return swift_endAccess(&v8);
}

uint64_t sub_1000DCF14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  __int128 v9;
  __int128 v11;
  __int128 v12;
  unsigned __int8 v13;
  _BYTE v14[40];

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock, &v11, 33, 0);
  os_unfair_recursive_lock_lock_with_options(v2, 0x10000);
  swift_endAccess(&v11);
  v3 = (_QWORD *)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components, v14, 0, 0);
  v4 = *v3;
  if (*(_QWORD *)(*v3 + 16))
  {
    swift_bridgeObjectRetain(*v3);
    v5 = sub_10000ADC4(0xD000000000000015, 0x800000010016DEB0);
    if ((v6 & 1) != 0)
    {
      sub_1000BDF04(*(_QWORD *)(v4 + 56) + 40 * v5, (uint64_t)&v11);
    }
    else
    {
      v12 = 0u;
      v11 = 0u;
      v13 = -1;
    }
    swift_bridgeObjectRelease(v4);
    if (v13 != 255)
    {
      sub_1000E7EF4((uint64_t)&v11, (uint64_t)&v9);
      __asm { BR              X10 }
    }
  }
  else
  {
    v12 = 0u;
    v11 = 0u;
    v13 = -1;
  }
  v7 = sub_1000243DC(7002, 0xD000000000000015, (void *)0x800000010016DEB0, 0);
  swift_willThrow(v7);
  sub_10005218C((uint64_t)&v11, &qword_1001B2500);
  swift_beginAccess(v2, &v11, 33, 0);
  os_unfair_recursive_lock_unlock(v2);
  swift_endAccess(&v11);
  return v1;
}

void sub_1000DD114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, __int128 a14, char a15, uint64_t a16, void (*a17)(__int128 *__return_ptr, uint64_t), uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(__int128 *__return_ptr, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v24 = a17;
  v23 = a18;
  a13 = 0u;
  a14 = 0u;
  a15 = 3;
  swift_beginAccess(v19, &a10, 33, 0);
  sub_1000E9298((uint64_t)&a13, 0xD000000000000015, v21 | 0x8000000000000000);
  swift_endAccess(&a10);
  v24(&a13, v20);
  if (!v18)
  {
    v25 = type metadata accessor for ConfiguratorAnalytics(0);
    if ((swift_dynamicCast(&a10, &a13, (char *)&type metadata for Any + 8, v25, 6) & 1) != 0)
    {
      *((_QWORD *)&a14 + 1) = v25;
      *(_QWORD *)&a13 = a10;
      a15 = 0;
      swift_beginAccess(v19, &a10, 33, 0);
      swift_retain();
      sub_1000E9298((uint64_t)&a13, 0xD000000000000015, v21 | 0x8000000000000000);
      swift_endAccess(&a10);
      swift_release(v23);
      JUMPOUT(0x1000DD340);
    }
    v26 = sub_1000243DC(7004, v22 + 11, (void *)0x800000010016ED90, 0);
    swift_willThrow(v26);
  }
  *(_QWORD *)&a13 = v24;
  *((_QWORD *)&a13 + 1) = v23;
  a15 = 2;
  swift_beginAccess(v19, &a10, 33, 0);
  swift_retain();
  sub_1000E9298((uint64_t)&a13, 0xD000000000000015, v21 | 0x8000000000000000);
  v27 = swift_endAccess(&a10);
  swift_willThrow(v27);
  swift_release(v23);
  JUMPOUT(0x1000DD0B8);
}

uint64_t sub_1000DD41C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  unsigned __int8 v13;
  _BYTE v14[32];

  v1 = v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock, &v8, 33, 0);
  os_unfair_recursive_lock_lock_with_options(v1, 0x10000);
  swift_endAccess(&v8);
  v2 = (_QWORD *)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components, v14, 0, 0);
  v3 = *v2;
  if (*(_QWORD *)(*v2 + 16))
  {
    swift_bridgeObjectRetain(*v2);
    v4 = sub_10000ADC4(0xD00000000000001BLL, 0x800000010016DE50);
    if ((v5 & 1) != 0)
    {
      sub_1000BDF04(*(_QWORD *)(v3 + 56) + 40 * v4, (uint64_t)&v11);
    }
    else
    {
      v11 = 0u;
      v12 = 0u;
      v13 = -1;
    }
    swift_bridgeObjectRelease(v3);
    if (v13 != 255)
    {
      sub_1000E7EF4((uint64_t)&v11, (uint64_t)&v9);
      __asm { BR              X10 }
    }
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
    v13 = -1;
  }
  v6 = sub_1000243DC(7002, 0xD00000000000001BLL, (void *)0x800000010016DE50, 0);
  swift_willThrow(v6);
  sub_10005218C((uint64_t)&v11, &qword_1001B2500);
  swift_beginAccess(v1, &v8, 33, 0);
  os_unfair_recursive_lock_unlock(v1);
  return swift_endAccess(&v8);
}

uint64_t sub_1000DD94C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  unsigned __int8 v13;
  _BYTE v14[32];

  v1 = v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock, &v8, 33, 0);
  os_unfair_recursive_lock_lock_with_options(v1, 0x10000);
  swift_endAccess(&v8);
  v2 = (_QWORD *)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components, v14, 0, 0);
  v3 = *v2;
  if (*(_QWORD *)(*v2 + 16))
  {
    swift_bridgeObjectRetain(*v2);
    v4 = sub_10000ADC4(0xD000000000000010, 0x800000010016DE90);
    if ((v5 & 1) != 0)
    {
      sub_1000BDF04(*(_QWORD *)(v3 + 56) + 40 * v4, (uint64_t)&v11);
    }
    else
    {
      v11 = 0u;
      v12 = 0u;
      v13 = -1;
    }
    swift_bridgeObjectRelease(v3);
    if (v13 != 255)
    {
      sub_1000E7EF4((uint64_t)&v11, (uint64_t)&v9);
      __asm { BR              X10 }
    }
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
    v13 = -1;
  }
  v6 = sub_1000243DC(7002, 0xD000000000000010, (void *)0x800000010016DE90, 0);
  swift_willThrow(v6);
  sub_10005218C((uint64_t)&v11, &qword_1001B2500);
  swift_beginAccess(v1, &v8, 33, 0);
  os_unfair_recursive_lock_unlock(v1);
  return swift_endAccess(&v8);
}

uint64_t sub_1000DDE7C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  unsigned __int8 v13;
  _BYTE v14[32];

  v1 = v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock, &v8, 33, 0);
  os_unfair_recursive_lock_lock_with_options(v1, 0x10000);
  swift_endAccess(&v8);
  v2 = (_QWORD *)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components, v14, 0, 0);
  v3 = *v2;
  if (*(_QWORD *)(*v2 + 16))
  {
    swift_bridgeObjectRetain(*v2);
    v4 = sub_10000ADC4(0xD000000000000015, 0x800000010016E040);
    if ((v5 & 1) != 0)
    {
      sub_1000BDF04(*(_QWORD *)(v3 + 56) + 40 * v4, (uint64_t)&v11);
    }
    else
    {
      v11 = 0u;
      v12 = 0u;
      v13 = -1;
    }
    swift_bridgeObjectRelease(v3);
    if (v13 != 255)
    {
      sub_1000E7EF4((uint64_t)&v11, (uint64_t)&v9);
      __asm { BR              X10 }
    }
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
    v13 = -1;
  }
  v6 = sub_1000243DC(7002, 0xD000000000000015, (void *)0x800000010016E040, 0);
  swift_willThrow(v6);
  sub_10005218C((uint64_t)&v11, &qword_1001B2500);
  swift_beginAccess(v1, &v8, 33, 0);
  os_unfair_recursive_lock_unlock(v1);
  return swift_endAccess(&v8);
}

uint64_t sub_1000DE3AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  const char *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  unsigned __int8 v19;
  _BYTE v20[32];

  v1 = v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock, &v14, 33, 0);
  os_unfair_recursive_lock_lock_with_options(v1, 0x10000);
  swift_endAccess(&v14);
  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components, v20, 0, 0);
  v3 = *v2;
  if (*(_QWORD *)(*v2 + 16))
  {
    swift_bridgeObjectRetain();
    v4 = sub_10000ADC4(0xD000000000000019, 0x800000010016E000);
    if ((v5 & 1) != 0)
    {
      sub_1000BDF04(*(_QWORD *)(v3 + 56) + 40 * v4, (uint64_t)&v17);
    }
    else
    {
      v17 = 0u;
      v18 = 0u;
      v19 = -1;
    }
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v3, v5, v6, v7, v8, v9, v10, v11);
    if (v19 != 255)
    {
      sub_1000E7EF4((uint64_t)&v17, (uint64_t)&v15);
      __asm { BR              X10 }
    }
  }
  else
  {
    v17 = 0u;
    v18 = 0u;
    v19 = -1;
  }
  v12 = sub_1000243DC(7002, 0xD000000000000019, (void *)0x800000010016E000, 0);
  swift_willThrow(v12);
  sub_10005218C((uint64_t)&v17, &qword_1001B2500);
  swift_beginAccess(v1, &v14, 33, 0);
  os_unfair_recursive_lock_unlock(v1);
  return swift_endAccess(&v14);
}

uint64_t sub_1000DE8DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  const char *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  __int128 v15;
  __int128 v17;
  __int128 v18;
  unsigned __int8 v19;
  _BYTE v20[40];

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock, &v17, 33, 0);
  os_unfair_recursive_lock_lock_with_options(v2, 0x10000);
  swift_endAccess(&v17);
  v3 = (uint64_t *)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components, v20, 0, 0);
  v4 = *v3;
  if (*(_QWORD *)(*v3 + 16))
  {
    swift_bridgeObjectRetain();
    v5 = sub_10000ADC4(0xD000000000000012, 0x800000010016DF10);
    if ((v6 & 1) != 0)
    {
      sub_1000BDF04(*(_QWORD *)(v4 + 56) + 40 * v5, (uint64_t)&v17);
    }
    else
    {
      v18 = 0u;
      v17 = 0u;
      v19 = -1;
    }
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v4, v6, v7, v8, v9, v10, v11, v12);
    if (v19 != 255)
    {
      sub_1000E7EF4((uint64_t)&v17, (uint64_t)&v15);
      __asm { BR              X10 }
    }
  }
  else
  {
    v18 = 0u;
    v17 = 0u;
    v19 = -1;
  }
  v13 = sub_1000243DC(7002, 0xD000000000000012, (void *)0x800000010016DF10, 0);
  swift_willThrow(v13);
  sub_10005218C((uint64_t)&v17, &qword_1001B2500);
  swift_beginAccess(v2, &v17, 33, 0);
  os_unfair_recursive_lock_unlock(v2);
  swift_endAccess(&v17);
  return v1;
}

void sub_1000DEADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, __int128 a14, char a15, uint64_t a16, void (*a17)(__int128 *__return_ptr, uint64_t), uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(__int128 *__return_ptr, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v24 = a17;
  v23 = a18;
  a13 = 0u;
  a14 = 0u;
  a15 = 3;
  swift_beginAccess(v19, &a10, 33, 0);
  sub_1000E9298((uint64_t)&a13, 0xD000000000000012, v21 | 0x8000000000000000);
  swift_endAccess(&a10);
  v24(&a13, v20);
  if (!v18)
  {
    v25 = type metadata accessor for ProvisionAnalytics(0);
    if ((swift_dynamicCast(&a10, &a13, (char *)&type metadata for Any + 8, v25, 6) & 1) != 0)
    {
      *((_QWORD *)&a14 + 1) = v25;
      *(_QWORD *)&a13 = a10;
      a15 = 0;
      swift_beginAccess(v19, &a10, 33, 0);
      swift_retain();
      sub_1000E9298((uint64_t)&a13, 0xD000000000000012, v21 | 0x8000000000000000);
      swift_endAccess(&a10);
      swift_release(v23);
      JUMPOUT(0x1000DED08);
    }
    v26 = sub_1000243DC(7004, v22 + 11, (void *)0x800000010016E8F0, 0);
    swift_willThrow(v26);
  }
  *(_QWORD *)&a13 = v24;
  *((_QWORD *)&a13 + 1) = v23;
  a15 = 2;
  swift_beginAccess(v19, &a10, 33, 0);
  swift_retain();
  sub_1000E9298((uint64_t)&a13, 0xD000000000000012, v21 | 0x8000000000000000);
  v27 = swift_endAccess(&a10);
  swift_willThrow(v27);
  swift_release(v23);
  JUMPOUT(0x1000DEA80);
}

uint64_t sub_1000DEDE4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  unsigned __int8 v13;
  _BYTE v14[32];

  v1 = v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock, &v8, 33, 0);
  os_unfair_recursive_lock_lock_with_options(v1, 0x10000);
  swift_endAccess(&v8);
  v2 = (_QWORD *)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components, v14, 0, 0);
  v3 = *v2;
  if (*(_QWORD *)(*v2 + 16))
  {
    swift_bridgeObjectRetain(*v2);
    v4 = sub_10000ADC4(0xD000000000000013, 0x800000010016E020);
    if ((v5 & 1) != 0)
    {
      sub_1000BDF04(*(_QWORD *)(v3 + 56) + 40 * v4, (uint64_t)&v11);
    }
    else
    {
      v11 = 0u;
      v12 = 0u;
      v13 = -1;
    }
    swift_bridgeObjectRelease(v3);
    if (v13 != 255)
    {
      sub_1000E7EF4((uint64_t)&v11, (uint64_t)&v9);
      __asm { BR              X10 }
    }
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
    v13 = -1;
  }
  v6 = sub_1000243DC(7002, 0xD000000000000013, (void *)0x800000010016E020, 0);
  swift_willThrow(v6);
  sub_10005218C((uint64_t)&v11, &qword_1001B2500);
  swift_beginAccess(v1, &v8, 33, 0);
  os_unfair_recursive_lock_unlock(v1);
  return swift_endAccess(&v8);
}

uint64_t sub_1000DF314()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  unsigned __int8 v13;
  _BYTE v14[32];

  v1 = v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock, &v8, 33, 0);
  os_unfair_recursive_lock_lock_with_options(v1, 0x10000);
  swift_endAccess(&v8);
  v2 = (_QWORD *)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components, v14, 0, 0);
  v3 = *v2;
  if (*(_QWORD *)(*v2 + 16))
  {
    swift_bridgeObjectRetain(*v2);
    v4 = sub_10000ADC4(0xD000000000000012, 0x800000010016DFE0);
    if ((v5 & 1) != 0)
    {
      sub_1000BDF04(*(_QWORD *)(v3 + 56) + 40 * v4, (uint64_t)&v11);
    }
    else
    {
      v11 = 0u;
      v12 = 0u;
      v13 = -1;
    }
    swift_bridgeObjectRelease(v3);
    if (v13 != 255)
    {
      sub_1000E7EF4((uint64_t)&v11, (uint64_t)&v9);
      __asm { BR              X10 }
    }
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
    v13 = -1;
  }
  v6 = sub_1000243DC(7002, 0xD000000000000012, (void *)0x800000010016DFE0, 0);
  swift_willThrow(v6);
  sub_10005218C((uint64_t)&v11, &qword_1001B2500);
  swift_beginAccess(v1, &v8, 33, 0);
  os_unfair_recursive_lock_unlock(v1);
  return swift_endAccess(&v8);
}

uint64_t sub_1000DF844()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  unsigned __int8 v13;
  _BYTE v14[32];

  v1 = v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock, &v8, 33, 0);
  os_unfair_recursive_lock_lock_with_options(v1, 0x10000);
  swift_endAccess(&v8);
  v2 = (_QWORD *)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components, v14, 0, 0);
  v3 = *v2;
  if (*(_QWORD *)(*v2 + 16))
  {
    swift_bridgeObjectRetain(*v2);
    v4 = sub_10000ADC4(0xD000000000000015, 0x800000010016DFA0);
    if ((v5 & 1) != 0)
    {
      sub_1000BDF04(*(_QWORD *)(v3 + 56) + 40 * v4, (uint64_t)&v11);
    }
    else
    {
      v11 = 0u;
      v12 = 0u;
      v13 = -1;
    }
    swift_bridgeObjectRelease(v3);
    if (v13 != 255)
    {
      sub_1000E7EF4((uint64_t)&v11, (uint64_t)&v9);
      __asm { BR              X10 }
    }
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
    v13 = -1;
  }
  v6 = sub_1000243DC(7002, 0xD000000000000015, (void *)0x800000010016DFA0, 0);
  swift_willThrow(v6);
  sub_10005218C((uint64_t)&v11, &qword_1001B2500);
  swift_beginAccess(v1, &v8, 33, 0);
  os_unfair_recursive_lock_unlock(v1);
  return swift_endAccess(&v8);
}

uint64_t sub_1000DFD74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  const char *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  unsigned __int8 v19;
  _BYTE v20[32];

  v1 = v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock, &v14, 33, 0);
  os_unfair_recursive_lock_lock_with_options(v1, 0x10000);
  swift_endAccess(&v14);
  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components, v20, 0, 0);
  v3 = *v2;
  if (*(_QWORD *)(*v2 + 16))
  {
    swift_bridgeObjectRetain();
    v4 = sub_10000ADC4(0xD00000000000001ALL, 0x800000010016E0F0);
    if ((v5 & 1) != 0)
    {
      sub_1000BDF04(*(_QWORD *)(v3 + 56) + 40 * v4, (uint64_t)&v17);
    }
    else
    {
      v17 = 0u;
      v18 = 0u;
      v19 = -1;
    }
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v3, v5, v6, v7, v8, v9, v10, v11);
    if (v19 != 255)
    {
      sub_1000E7EF4((uint64_t)&v17, (uint64_t)&v15);
      __asm { BR              X10 }
    }
  }
  else
  {
    v17 = 0u;
    v18 = 0u;
    v19 = -1;
  }
  v12 = sub_1000243DC(7002, 0xD00000000000001ALL, (void *)0x800000010016E0F0, 0);
  swift_willThrow(v12);
  sub_10005218C((uint64_t)&v17, &qword_1001B2500);
  swift_beginAccess(v1, &v14, 33, 0);
  os_unfair_recursive_lock_unlock(v1);
  return swift_endAccess(&v14);
}

uint64_t sub_1000E02A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  const char *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  unsigned __int8 v19;
  _BYTE v20[32];

  v1 = v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock, &v14, 33, 0);
  os_unfair_recursive_lock_lock_with_options(v1, 0x10000);
  swift_endAccess(&v14);
  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components, v20, 0, 0);
  v3 = *v2;
  if (*(_QWORD *)(*v2 + 16))
  {
    swift_bridgeObjectRetain();
    v4 = sub_10000ADC4(0xD00000000000001ALL, 0x800000010016DF30);
    if ((v5 & 1) != 0)
    {
      sub_1000BDF04(*(_QWORD *)(v3 + 56) + 40 * v4, (uint64_t)&v17);
    }
    else
    {
      v17 = 0u;
      v18 = 0u;
      v19 = -1;
    }
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v3, v5, v6, v7, v8, v9, v10, v11);
    if (v19 != 255)
    {
      sub_1000E7EF4((uint64_t)&v17, (uint64_t)&v15);
      __asm { BR              X10 }
    }
  }
  else
  {
    v17 = 0u;
    v18 = 0u;
    v19 = -1;
  }
  v12 = sub_1000243DC(7002, 0xD00000000000001ALL, (void *)0x800000010016DF30, 0);
  swift_willThrow(v12);
  sub_10005218C((uint64_t)&v17, &qword_1001B2500);
  swift_beginAccess(v1, &v14, 33, 0);
  os_unfair_recursive_lock_unlock(v1);
  return swift_endAccess(&v14);
}

uint64_t sub_1000E07D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  const char *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  __int128 v15;
  __int128 v17;
  __int128 v18;
  unsigned __int8 v19;
  _BYTE v20[24];

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock, &v17, 33, 0);
  os_unfair_recursive_lock_lock_with_options(v2, 0x10000);
  swift_endAccess(&v17);
  v3 = (uint64_t *)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components, v20, 0, 0);
  v4 = *v3;
  if (*(_QWORD *)(*v3 + 16))
  {
    swift_bridgeObjectRetain();
    v5 = sub_10000ADC4(0x6E41726564616552, 0xEF73636974796C61);
    if ((v6 & 1) != 0)
    {
      sub_1000BDF04(*(_QWORD *)(v4 + 56) + 40 * v5, (uint64_t)&v17);
    }
    else
    {
      v18 = 0u;
      v17 = 0u;
      v19 = -1;
    }
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v4, v6, v7, v8, v9, v10, v11, v12);
    if (v19 != 255)
    {
      sub_1000E7EF4((uint64_t)&v17, (uint64_t)&v15);
      __asm { BR              X10 }
    }
  }
  else
  {
    v18 = 0u;
    v17 = 0u;
    v19 = -1;
  }
  v13 = sub_1000243DC(7002, 0x6E41726564616552, (void *)0xEF73636974796C61, 0);
  swift_willThrow(v13);
  sub_10005218C((uint64_t)&v17, &qword_1001B2500);
  swift_beginAccess(v2, &v17, 33, 0);
  os_unfair_recursive_lock_unlock(v2);
  swift_endAccess(&v17);
  return v1;
}

void sub_1000E09DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, __int128 a14, char a15, uint64_t a16, void (*a17)(__int128 *__return_ptr, uint64_t), uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(__int128 *__return_ptr, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v22 = a17;
  v21 = a18;
  a13 = 0u;
  a14 = 0u;
  a15 = 3;
  swift_beginAccess(v19, &a10, 33, 0);
  sub_1000E9298((uint64_t)&a13, 0x6E41726564616552, 0xEF73636974796C61);
  swift_endAccess(&a10);
  v22(&a13, v20);
  if (!v18)
  {
    v23 = type metadata accessor for ReaderAnalytics(0);
    if ((swift_dynamicCast(&a10, &a13, (char *)&type metadata for Any + 8, v23, 6) & 1) != 0)
    {
      *((_QWORD *)&a14 + 1) = v23;
      *(_QWORD *)&a13 = a10;
      a15 = 0;
      swift_beginAccess(v19, &a10, 33, 0);
      swift_retain();
      sub_1000E9298((uint64_t)&a13, 0x6E41726564616552, 0xEF73636974796C61);
      swift_endAccess(&a10);
      swift_release(v21);
      JUMPOUT(0x1000E0C60);
    }
    v24 = sub_1000243DC(7004, 0xD00000000000001ALL, (void *)0x800000010016EA50, 0);
    swift_willThrow(v24);
  }
  *(_QWORD *)&a13 = v22;
  *((_QWORD *)&a13 + 1) = v21;
  a15 = 2;
  swift_beginAccess(v19, &a10, 33, 0);
  swift_retain();
  sub_1000E9298((uint64_t)&a13, 0x6E41726564616552, 0xEF73636974796C61);
  v25 = swift_endAccess(&a10);
  swift_willThrow(v25);
  swift_release(v21);
  JUMPOUT(0x1000E0984);
}

uint64_t sub_1000E0D44()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  unsigned __int8 v13;
  _BYTE v14[24];

  v1 = v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock, &v8, 33, 0);
  os_unfair_recursive_lock_lock_with_options(v1, 0x10000);
  swift_endAccess(&v8);
  v2 = (_QWORD *)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components, v14, 0, 0);
  v3 = *v2;
  if (*(_QWORD *)(*v2 + 16))
  {
    swift_bridgeObjectRetain(*v2);
    v4 = sub_10000ADC4(0x7065654B656D6954, 0xEA00000000007265);
    if ((v5 & 1) != 0)
    {
      sub_1000BDF04(*(_QWORD *)(v3 + 56) + 40 * v4, (uint64_t)&v11);
    }
    else
    {
      v11 = 0u;
      v12 = 0u;
      v13 = -1;
    }
    swift_bridgeObjectRelease(v3);
    if (v13 != 255)
    {
      sub_1000E7EF4((uint64_t)&v11, (uint64_t)&v9);
      __asm { BR              X10 }
    }
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
    v13 = -1;
  }
  v6 = sub_1000243DC(7002, 0x7065654B656D6954, (void *)0xEA00000000007265, 0);
  swift_willThrow(v6);
  sub_10005218C((uint64_t)&v11, &qword_1001B2500);
  swift_beginAccess(v1, &v8, 33, 0);
  os_unfair_recursive_lock_unlock(v1);
  return swift_endAccess(&v8);
}

uint64_t sub_1000E12A4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  unsigned __int8 v13;
  _BYTE v14[32];

  v1 = v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock, &v8, 33, 0);
  os_unfair_recursive_lock_lock_with_options(v1, 0x10000);
  swift_endAccess(&v8);
  v2 = (_QWORD *)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components, v14, 0, 0);
  v3 = *v2;
  if (*(_QWORD *)(*v2 + 16))
  {
    swift_bridgeObjectRetain(*v2);
    v4 = sub_10000ADC4(0xD00000000000001BLL, 0x800000010016E060);
    if ((v5 & 1) != 0)
    {
      sub_1000BDF04(*(_QWORD *)(v3 + 56) + 40 * v4, (uint64_t)&v11);
    }
    else
    {
      v11 = 0u;
      v12 = 0u;
      v13 = -1;
    }
    swift_bridgeObjectRelease(v3);
    if (v13 != 255)
    {
      sub_1000E7EF4((uint64_t)&v11, (uint64_t)&v9);
      __asm { BR              X10 }
    }
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
    v13 = -1;
  }
  v6 = sub_1000243DC(7002, 0xD00000000000001BLL, (void *)0x800000010016E060, 0);
  swift_willThrow(v6);
  sub_10005218C((uint64_t)&v11, &qword_1001B2500);
  swift_beginAccess(v1, &v8, 33, 0);
  os_unfair_recursive_lock_unlock(v1);
  return swift_endAccess(&v8);
}

uint64_t sub_1000E17D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  const char *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  __int128 v15;
  __int128 v17;
  __int128 v18;
  unsigned __int8 v19;
  _BYTE v20[40];

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock, &v17, 33, 0);
  os_unfair_recursive_lock_lock_with_options(v2, 0x10000);
  swift_endAccess(&v17);
  v3 = (uint64_t *)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components, v20, 0, 0);
  v4 = *v3;
  if (*(_QWORD *)(*v3 + 16))
  {
    swift_bridgeObjectRetain();
    v5 = sub_10000ADC4(0xD000000000000015, 0x800000010016E110);
    if ((v6 & 1) != 0)
    {
      sub_1000BDF04(*(_QWORD *)(v4 + 56) + 40 * v5, (uint64_t)&v17);
    }
    else
    {
      v18 = 0u;
      v17 = 0u;
      v19 = -1;
    }
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v4, v6, v7, v8, v9, v10, v11, v12);
    if (v19 != 255)
    {
      sub_1000E7EF4((uint64_t)&v17, (uint64_t)&v15);
      __asm { BR              X10 }
    }
  }
  else
  {
    v18 = 0u;
    v17 = 0u;
    v19 = -1;
  }
  v13 = sub_1000243DC(7002, 0xD000000000000015, (void *)0x800000010016E110, 0);
  swift_willThrow(v13);
  sub_10005218C((uint64_t)&v17, &qword_1001B2500);
  swift_beginAccess(v2, &v17, 33, 0);
  os_unfair_recursive_lock_unlock(v2);
  swift_endAccess(&v17);
  return v1;
}

void sub_1000E19D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, __int128 a14, char a15, uint64_t a16, void (*a17)(__int128 *__return_ptr, uint64_t), uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(__int128 *__return_ptr, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v24 = a17;
  v23 = a18;
  a13 = 0u;
  a14 = 0u;
  a15 = 3;
  swift_beginAccess(v19, &a10, 33, 0);
  sub_1000E9298((uint64_t)&a13, 0xD000000000000015, v21 | 0x8000000000000000);
  swift_endAccess(&a10);
  v24(&a13, v20);
  if (!v18)
  {
    v25 = type metadata accessor for PayAppletProfileCache();
    if ((swift_dynamicCast(&a10, &a13, (char *)&type metadata for Any + 8, v25, 6) & 1) != 0)
    {
      *((_QWORD *)&a14 + 1) = v25;
      *(_QWORD *)&a13 = a10;
      a15 = 0;
      swift_beginAccess(v19, &a10, 33, 0);
      swift_retain();
      sub_1000E9298((uint64_t)&a13, 0xD000000000000015, v21 | 0x8000000000000000);
      swift_endAccess(&a10);
      swift_release(v23);
      JUMPOUT(0x1000E1C00);
    }
    v26 = sub_1000243DC(7004, v22 + 11, (void *)0x800000010016EF80, 0);
    swift_willThrow(v26);
  }
  *(_QWORD *)&a13 = v24;
  *((_QWORD *)&a13 + 1) = v23;
  a15 = 2;
  swift_beginAccess(v19, &a10, 33, 0);
  swift_retain();
  sub_1000E9298((uint64_t)&a13, 0xD000000000000015, v21 | 0x8000000000000000);
  v27 = swift_endAccess(&a10);
  swift_willThrow(v27);
  swift_release(v23);
  JUMPOUT(0x1000E1978);
}

uint64_t sub_1000E1CDC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  unsigned __int8 v13;
  _BYTE v14[32];

  v1 = v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock, &v8, 33, 0);
  os_unfair_recursive_lock_lock_with_options(v1, 0x10000);
  swift_endAccess(&v8);
  v2 = (_QWORD *)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components, v14, 0, 0);
  v3 = *v2;
  if (*(_QWORD *)(*v2 + 16))
  {
    swift_bridgeObjectRetain(*v2);
    v4 = sub_10000ADC4(0xD00000000000001ELL, 0x800000010016E0B0);
    if ((v5 & 1) != 0)
    {
      sub_1000BDF04(*(_QWORD *)(v3 + 56) + 40 * v4, (uint64_t)&v11);
    }
    else
    {
      v11 = 0u;
      v12 = 0u;
      v13 = -1;
    }
    swift_bridgeObjectRelease(v3);
    if (v13 != 255)
    {
      sub_1000E7EF4((uint64_t)&v11, (uint64_t)&v9);
      __asm { BR              X10 }
    }
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
    v13 = -1;
  }
  v6 = sub_1000243DC(7002, 0xD00000000000001ELL, (void *)0x800000010016E0B0, 0);
  swift_willThrow(v6);
  sub_10005218C((uint64_t)&v11, &qword_1001B2500);
  swift_beginAccess(v1, &v8, 33, 0);
  os_unfair_recursive_lock_unlock(v1);
  return swift_endAccess(&v8);
}

uint64_t sub_1000E220C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  unsigned __int8 v13;
  _BYTE v14[32];

  v1 = v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock, &v8, 33, 0);
  os_unfair_recursive_lock_lock_with_options(v1, 0x10000);
  swift_endAccess(&v8);
  v2 = (_QWORD *)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components, v14, 0, 0);
  v3 = *v2;
  if (*(_QWORD *)(*v2 + 16))
  {
    swift_bridgeObjectRetain(*v2);
    v4 = sub_10000ADC4(0xD00000000000001FLL, 0x800000010016E130);
    if ((v5 & 1) != 0)
    {
      sub_1000BDF04(*(_QWORD *)(v3 + 56) + 40 * v4, (uint64_t)&v11);
    }
    else
    {
      v11 = 0u;
      v12 = 0u;
      v13 = -1;
    }
    swift_bridgeObjectRelease(v3);
    if (v13 != 255)
    {
      sub_1000E7EF4((uint64_t)&v11, (uint64_t)&v9);
      __asm { BR              X10 }
    }
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
    v13 = -1;
  }
  v6 = sub_1000243DC(7002, 0xD00000000000001FLL, (void *)0x800000010016E130, 0);
  swift_willThrow(v6);
  sub_10005218C((uint64_t)&v11, &qword_1001B2500);
  swift_beginAccess(v1, &v8, 33, 0);
  os_unfair_recursive_lock_unlock(v1);
  return swift_endAccess(&v8);
}

uint64_t sub_1000E273C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  unsigned __int8 v13;
  _BYTE v14[32];

  v1 = v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock, &v8, 33, 0);
  os_unfair_recursive_lock_lock_with_options(v1, 0x10000);
  swift_endAccess(&v8);
  v2 = (_QWORD *)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components, v14, 0, 0);
  v3 = *v2;
  if (*(_QWORD *)(*v2 + 16))
  {
    swift_bridgeObjectRetain(*v2);
    v4 = sub_10000ADC4(0xD00000000000001CLL, 0x800000010016DFC0);
    if ((v5 & 1) != 0)
    {
      sub_1000BDF04(*(_QWORD *)(v3 + 56) + 40 * v4, (uint64_t)&v11);
    }
    else
    {
      v11 = 0u;
      v12 = 0u;
      v13 = -1;
    }
    swift_bridgeObjectRelease(v3);
    if (v13 != 255)
    {
      sub_1000E7EF4((uint64_t)&v11, (uint64_t)&v9);
      __asm { BR              X10 }
    }
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
    v13 = -1;
  }
  v6 = sub_1000243DC(7002, 0xD00000000000001CLL, (void *)0x800000010016DFC0, 0);
  swift_willThrow(v6);
  sub_10005218C((uint64_t)&v11, &qword_1001B2500);
  swift_beginAccess(v1, &v8, 33, 0);
  os_unfair_recursive_lock_unlock(v1);
  return swift_endAccess(&v8);
}

uint64_t sub_1000E2C6C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  unsigned __int8 v13;
  _BYTE v14[32];

  v1 = v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock, &v8, 33, 0);
  os_unfair_recursive_lock_lock_with_options(v1, 0x10000);
  swift_endAccess(&v8);
  v2 = (_QWORD *)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components, v14, 0, 0);
  v3 = *v2;
  if (*(_QWORD *)(*v2 + 16))
  {
    swift_bridgeObjectRetain(*v2);
    v4 = sub_10000ADC4(0xD000000000000026, 0x800000010016E080);
    if ((v5 & 1) != 0)
    {
      sub_1000BDF04(*(_QWORD *)(v3 + 56) + 40 * v4, (uint64_t)&v11);
    }
    else
    {
      v11 = 0u;
      v12 = 0u;
      v13 = -1;
    }
    swift_bridgeObjectRelease(v3);
    if (v13 != 255)
    {
      sub_1000E7EF4((uint64_t)&v11, (uint64_t)&v9);
      __asm { BR              X10 }
    }
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
    v13 = -1;
  }
  v6 = sub_1000243DC(7002, 0xD000000000000026, (void *)0x800000010016E080, 0);
  swift_willThrow(v6);
  sub_10005218C((uint64_t)&v11, &qword_1001B2500);
  swift_beginAccess(v1, &v8, 33, 0);
  os_unfair_recursive_lock_unlock(v1);
  return swift_endAccess(&v8);
}

uint64_t sub_1000E319C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  __int128 v9;
  __int128 v11;
  __int128 v12;
  unsigned __int8 v13;
  _BYTE v14[24];

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock, &v11, 33, 0);
  os_unfair_recursive_lock_lock_with_options(v2, 0x10000);
  swift_endAccess(&v11);
  v3 = (_QWORD *)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components, v14, 0, 0);
  v4 = *v3;
  if (*(_QWORD *)(*v3 + 16))
  {
    swift_bridgeObjectRetain(*v3);
    v5 = sub_10000ADC4(0x6174614465726F43, 0xEF726567616E614DLL);
    if ((v6 & 1) != 0)
    {
      sub_1000BDF04(*(_QWORD *)(v4 + 56) + 40 * v5, (uint64_t)&v11);
    }
    else
    {
      v12 = 0u;
      v11 = 0u;
      v13 = -1;
    }
    swift_bridgeObjectRelease(v4);
    if (v13 != 255)
    {
      sub_1000E7EF4((uint64_t)&v11, (uint64_t)&v9);
      __asm { BR              X10 }
    }
  }
  else
  {
    v12 = 0u;
    v11 = 0u;
    v13 = -1;
  }
  v7 = sub_1000243DC(7002, 0x6174614465726F43, (void *)0xEF726567616E614DLL, 0);
  swift_willThrow(v7);
  sub_10005218C((uint64_t)&v11, &qword_1001B2500);
  swift_beginAccess(v2, &v11, 33, 0);
  os_unfair_recursive_lock_unlock(v2);
  swift_endAccess(&v11);
  return v1;
}

void sub_1000E33A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, __int128 a14, char a15, uint64_t a16, void (*a17)(__int128 *__return_ptr, uint64_t), uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(__int128 *__return_ptr, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v22 = a17;
  v21 = a18;
  a13 = 0u;
  a14 = 0u;
  a15 = 3;
  swift_beginAccess(v19, &a10, 33, 0);
  sub_1000E9298((uint64_t)&a13, 0x6174614465726F43, 0xEF726567616E614DLL);
  swift_endAccess(&a10);
  v22(&a13, v20);
  if (!v18)
  {
    v23 = type metadata accessor for CoreDataManager();
    if ((swift_dynamicCast(&a10, &a13, (char *)&type metadata for Any + 8, v23, 6) & 1) != 0)
    {
      *((_QWORD *)&a14 + 1) = v23;
      *(_QWORD *)&a13 = a10;
      a15 = 0;
      swift_beginAccess(v19, &a10, 33, 0);
      swift_retain();
      sub_1000E9298((uint64_t)&a13, 0x6174614465726F43, 0xEF726567616E614DLL);
      swift_endAccess(&a10);
      swift_release(v21);
      JUMPOUT(0x1000E3628);
    }
    v24 = sub_1000243DC(7004, 0xD00000000000001ALL, (void *)0x800000010016F540, 0);
    swift_willThrow(v24);
  }
  *(_QWORD *)&a13 = v22;
  *((_QWORD *)&a13 + 1) = v21;
  a15 = 2;
  swift_beginAccess(v19, &a10, 33, 0);
  swift_retain();
  sub_1000E9298((uint64_t)&a13, 0x6174614465726F43, 0xEF726567616E614DLL);
  v25 = swift_endAccess(&a10);
  swift_willThrow(v25);
  swift_release(v21);
  JUMPOUT(0x1000E334CLL);
}

uint64_t sub_1000E370C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  __int128 v9;
  __int128 v11;
  __int128 v12;
  unsigned __int8 v13;
  _BYTE v14[40];

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock, &v11, 33, 0);
  os_unfair_recursive_lock_lock_with_options(v2, 0x10000);
  swift_endAccess(&v11);
  v3 = (_QWORD *)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components, v14, 0, 0);
  v4 = *v3;
  if (*(_QWORD *)(*v3 + 16))
  {
    swift_bridgeObjectRetain(*v3);
    v5 = sub_10000ADC4(0xD000000000000010, 0x800000010016DED0);
    if ((v6 & 1) != 0)
    {
      sub_1000BDF04(*(_QWORD *)(v4 + 56) + 40 * v5, (uint64_t)&v11);
    }
    else
    {
      v12 = 0u;
      v11 = 0u;
      v13 = -1;
    }
    swift_bridgeObjectRelease(v4);
    if (v13 != 255)
    {
      sub_1000E7EF4((uint64_t)&v11, (uint64_t)&v9);
      __asm { BR              X10 }
    }
  }
  else
  {
    v12 = 0u;
    v11 = 0u;
    v13 = -1;
  }
  v7 = sub_1000243DC(7002, 0xD000000000000010, (void *)0x800000010016DED0, 0);
  swift_willThrow(v7);
  sub_10005218C((uint64_t)&v11, &qword_1001B2500);
  swift_beginAccess(v2, &v11, 33, 0);
  os_unfair_recursive_lock_unlock(v2);
  swift_endAccess(&v11);
  return v1;
}

void sub_1000E390C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, __int128 a14, char a15, uint64_t a16, void (*a17)(__int128 *__return_ptr, uint64_t), uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(__int128 *__return_ptr, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v24 = a17;
  v23 = a18;
  a13 = 0u;
  a14 = 0u;
  a15 = 3;
  swift_beginAccess(v19, &a10, 33, 0);
  sub_1000E9298((uint64_t)&a13, 0xD000000000000010, v21 | 0x8000000000000000);
  swift_endAccess(&a10);
  v24(&a13, v20);
  if (!v18)
  {
    v25 = type metadata accessor for MonitorAnalytics(0);
    if ((swift_dynamicCast(&a10, &a13, (char *)&type metadata for Any + 8, v25, 6) & 1) != 0)
    {
      *((_QWORD *)&a14 + 1) = v25;
      *(_QWORD *)&a13 = a10;
      a15 = 0;
      swift_beginAccess(v19, &a10, 33, 0);
      swift_retain();
      sub_1000E9298((uint64_t)&a13, 0xD000000000000010, v21 | 0x8000000000000000);
      swift_endAccess(&a10);
      swift_release(v23);
      JUMPOUT(0x1000E3B38);
    }
    v26 = sub_1000243DC(7004, v22 + 11, (void *)0x800000010016EC20, 0);
    swift_willThrow(v26);
  }
  *(_QWORD *)&a13 = v24;
  *((_QWORD *)&a13 + 1) = v23;
  a15 = 2;
  swift_beginAccess(v19, &a10, 33, 0);
  swift_retain();
  sub_1000E9298((uint64_t)&a13, 0xD000000000000010, v21 | 0x8000000000000000);
  v27 = swift_endAccess(&a10);
  swift_willThrow(v27);
  swift_release(v23);
  JUMPOUT(0x1000E38B0);
}

uint64_t sub_1000E3C14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  __int128 v9;
  __int128 v11;
  __int128 v12;
  unsigned __int8 v13;
  _BYTE v14[40];

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock, &v11, 33, 0);
  os_unfair_recursive_lock_lock_with_options(v2, 0x10000);
  swift_endAccess(&v11);
  v3 = (_QWORD *)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components, v14, 0, 0);
  v4 = *v3;
  if (*(_QWORD *)(*v3 + 16))
  {
    swift_bridgeObjectRetain(*v3);
    v5 = sub_10000ADC4(0xD000000000000011, 0x800000010016DEF0);
    if ((v6 & 1) != 0)
    {
      sub_1000BDF04(*(_QWORD *)(v4 + 56) + 40 * v5, (uint64_t)&v11);
    }
    else
    {
      v12 = 0u;
      v11 = 0u;
      v13 = -1;
    }
    swift_bridgeObjectRelease(v4);
    if (v13 != 255)
    {
      sub_1000E7EF4((uint64_t)&v11, (uint64_t)&v9);
      __asm { BR              X10 }
    }
  }
  else
  {
    v12 = 0u;
    v11 = 0u;
    v13 = -1;
  }
  v7 = sub_1000243DC(7002, 0xD000000000000011, (void *)0x800000010016DEF0, 0);
  swift_willThrow(v7);
  sub_10005218C((uint64_t)&v11, &qword_1001B2500);
  swift_beginAccess(v2, &v11, 33, 0);
  os_unfair_recursive_lock_unlock(v2);
  swift_endAccess(&v11);
  return v1;
}

void sub_1000E3E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, __int128 a14, char a15, uint64_t a16, void (*a17)(__int128 *__return_ptr, uint64_t), uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(__int128 *__return_ptr, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v24 = a17;
  v23 = a18;
  a13 = 0u;
  a14 = 0u;
  a15 = 3;
  swift_beginAccess(v19, &a10, 33, 0);
  sub_1000E9298((uint64_t)&a13, 0xD000000000000011, v21 | 0x8000000000000000);
  swift_endAccess(&a10);
  v24(&a13, v20);
  if (!v18)
  {
    v25 = type metadata accessor for SecurityAnalytics(0);
    if ((swift_dynamicCast(&a10, &a13, (char *)&type metadata for Any + 8, v25, 6) & 1) != 0)
    {
      *((_QWORD *)&a14 + 1) = v25;
      *(_QWORD *)&a13 = a10;
      a15 = 0;
      swift_beginAccess(v19, &a10, 33, 0);
      swift_retain();
      sub_1000E9298((uint64_t)&a13, 0xD000000000000011, v21 | 0x8000000000000000);
      swift_endAccess(&a10);
      swift_release(v23);
      JUMPOUT(0x1000E4040);
    }
    v26 = sub_1000243DC(7004, v22 + 11, (void *)0x800000010016F3B0, 0);
    swift_willThrow(v26);
  }
  *(_QWORD *)&a13 = v24;
  *((_QWORD *)&a13 + 1) = v23;
  a15 = 2;
  swift_beginAccess(v19, &a10, 33, 0);
  swift_retain();
  sub_1000E9298((uint64_t)&a13, 0xD000000000000011, v21 | 0x8000000000000000);
  v27 = swift_endAccess(&a10);
  swift_willThrow(v27);
  swift_release(v23);
  JUMPOUT(0x1000E3DB8);
}

uint64_t sub_1000E411C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  unsigned __int8 v13;
  _BYTE v14[32];

  v1 = v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock, &v8, 33, 0);
  os_unfair_recursive_lock_lock_with_options(v1, 0x10000);
  swift_endAccess(&v8);
  v2 = (_QWORD *)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components, v14, 0, 0);
  v3 = *v2;
  if (*(_QWORD *)(*v2 + 16))
  {
    swift_bridgeObjectRetain(*v2);
    v4 = sub_10000ADC4(0xD000000000000019, 0x800000010016DE30);
    if ((v5 & 1) != 0)
    {
      sub_1000BDF04(*(_QWORD *)(v3 + 56) + 40 * v4, (uint64_t)&v11);
    }
    else
    {
      v11 = 0u;
      v12 = 0u;
      v13 = -1;
    }
    swift_bridgeObjectRelease(v3);
    if (v13 != 255)
    {
      sub_1000E7EF4((uint64_t)&v11, (uint64_t)&v9);
      __asm { BR              X10 }
    }
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
    v13 = -1;
  }
  v6 = sub_1000243DC(7002, 0xD000000000000019, (void *)0x800000010016DE30, 0);
  swift_willThrow(v6);
  sub_10005218C((uint64_t)&v11, &qword_1001B2500);
  swift_beginAccess(v1, &v8, 33, 0);
  os_unfair_recursive_lock_unlock(v1);
  return swift_endAccess(&v8);
}

uint64_t sub_1000E464C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  unsigned __int8 v13;
  _BYTE v14[32];

  v1 = v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock, &v8, 33, 0);
  os_unfair_recursive_lock_lock_with_options(v1, 0x10000);
  swift_endAccess(&v8);
  v2 = (_QWORD *)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components, v14, 0, 0);
  v3 = *v2;
  if (*(_QWORD *)(*v2 + 16))
  {
    swift_bridgeObjectRetain(*v2);
    v4 = sub_10000ADC4(0xD00000000000001ALL, 0x800000010016DE70);
    if ((v5 & 1) != 0)
    {
      sub_1000BDF04(*(_QWORD *)(v3 + 56) + 40 * v4, (uint64_t)&v11);
    }
    else
    {
      v11 = 0u;
      v12 = 0u;
      v13 = -1;
    }
    swift_bridgeObjectRelease(v3);
    if (v13 != 255)
    {
      sub_1000E7EF4((uint64_t)&v11, (uint64_t)&v9);
      __asm { BR              X10 }
    }
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
    v13 = -1;
  }
  v6 = sub_1000243DC(7002, 0xD00000000000001ALL, (void *)0x800000010016DE70, 0);
  swift_willThrow(v6);
  sub_10005218C((uint64_t)&v11, &qword_1001B2500);
  swift_beginAccess(v1, &v8, 33, 0);
  os_unfair_recursive_lock_unlock(v1);
  return swift_endAccess(&v8);
}

uint64_t sub_1000E4B7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B23C0);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B23C0);
  if (qword_1001AD158 != -1)
    swift_once(&qword_1001AD158, sub_1000CC540);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4DF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1000E4C0C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v0 = type metadata accessor for Settings(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Settings.default.getter((uint64_t)v2);
  v3 = type metadata accessor for Depot(0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v4 = sub_1000BC380((uint64_t)v2);
  v5 = type metadata accessor for Primer();
  v6 = swift_allocObject(v5, 48, 7);
  v7 = sub_100003A2C(&qword_1001AD3A0);
  v8 = swift_allocObject(v7, 28, 7);
  *(_DWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v6 + 40) = v8;
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = v4;
  v9 = type metadata accessor for Provider();
  v10 = swift_allocObject(v9, 24, 7);
  *(_QWORD *)(v10 + 16) = v4;
  *(_QWORD *)(v6 + 32) = v10;
  static Primer.shared = v6;
  return swift_retain(v4);
}

uint64_t *Primer.shared.unsafeMutableAddressor()
{
  if (qword_1001AD1C0 != -1)
    swift_once(&qword_1001AD1C0, sub_1000E4C0C);
  return &static Primer.shared;
}

uint64_t static Primer.shared.getter()
{
  if (qword_1001AD1C0 != -1)
    swift_once(&qword_1001AD1C0, sub_1000E4C0C);
  return swift_retain();
}

uint64_t Primer.description.getter()
{
  Swift::String v0;
  void *object;
  Swift::String v2;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 93;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0x5B72656D697250;
}

uint64_t Primer.storageSetting.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[5];

  v1 = *(_QWORD *)(v0 + 24);
  swift_retain();
  sub_1000DEDE4();
  swift_release(v1);
  v2 = *sub_100005EF8(v5, v5[3]) + OBJC_IVAR____TtC9SPREngine11Environment_storageSetting;
  v3 = *(_QWORD *)v2;
  sub_1000E4ED8(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_BYTE *)(v2 + 16));
  sub_100005D3C(v5);
  return v3;
}

uint64_t sub_1000E4ED8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t Primer.__allocating_init(settings:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _TtC14softposreaderd12RemoteReader *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36[3];

  v2 = type metadata accessor for Settings(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v36[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v36[-1] - v6;
  if (qword_1001AD1B8 != -1)
    swift_once(&qword_1001AD1B8, sub_1000E4B7C);
  v8 = type metadata accessor for Logger(0);
  sub_100003A14(v8, (uint64_t)qword_1001B23C0);
  v9 = sub_100039EC8(a1, (uint64_t)v7);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v36[0] = v13;
    *(_DWORD *)v12 = 136315138;
    v14 = Settings.description.getter();
    v16 = (_TtC14softposreaderd12RemoteReader *)v15;
    v35 = sub_1000056EC(v14, v15, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
    sub_100039F0C((uint64_t)v7);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Primer.init with Settings: %s", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    sub_100039F0C((uint64_t)v7);
  }

  sub_100039EC8(a1, (uint64_t)v5);
  v24 = type metadata accessor for Depot(0);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  v25 = sub_1000BC380((uint64_t)v5);
  swift_beginAccess(&unk_1001B4EF8, v36, 33, 0);
  do
  {
    v26 = __ldxr((unsigned int *)&unk_1001B4EF8);
    v27 = v26 + 1;
  }
  while (__stxr(v26 + 1, (unsigned int *)&unk_1001B4EF8));
  swift_endAccess(v36);
  v28 = type metadata accessor for Primer();
  v29 = swift_allocObject(v28, 48, 7);
  v30 = sub_100003A2C(&qword_1001AD3A0);
  v31 = swift_allocObject(v30, 28, 7);
  *(_DWORD *)(v31 + 24) = 0;
  *(_QWORD *)(v31 + 16) = 0;
  *(_QWORD *)(v29 + 40) = v31;
  *(_DWORD *)(v29 + 16) = v27;
  *(_QWORD *)(v29 + 24) = v25;
  v32 = type metadata accessor for Provider();
  v33 = swift_allocObject(v32, 24, 7);
  *(_QWORD *)(v33 + 16) = v25;
  *(_QWORD *)(v29 + 32) = v33;
  swift_retain();
  sub_100039F0C(a1);
  return v29;
}

uint64_t type metadata accessor for Primer()
{
  return objc_opt_self(_TtC9SPREngine6Primer);
}

uint64_t Primer.configuration.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  void (*v14)(_QWORD *, uint64_t, uint64_t);
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char v27;
  SEL v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  char v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  _TtC14softposreaderd12RemoteReader *v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  _TtC14softposreaderd12RemoteReader *v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  SEL v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  _OWORD v71[2];
  __int128 v72;
  uint64_t v73;
  uint64_t v74[3];
  uint64_t v75;
  _BYTE v76[608];
  _QWORD v77[2];

  v1 = sub_100003A2C(&qword_1001AE038);
  inited = swift_initStackObject(v1, v76);
  *(_OWORD *)(inited + 16) = xmmword_100161E70;
  *(_QWORD *)(inited + 32) = 0xD00000000000001ALL;
  *(_QWORD *)(inited + 40) = 0x800000010016E6A0;
  v3 = OBJC_IVAR____TtC9SPREngine5Depot_settings;
  v4 = *(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC9SPREngine5Depot_settings;
  v5 = (int *)type metadata accessor for Settings(0);
  *(_BYTE *)(inited + 48) = *(_BYTE *)(v4 + v5[7]);
  *(_QWORD *)(inited + 72) = &type metadata for Bool;
  *(_QWORD *)(inited + 80) = 0xD000000000000020;
  *(_QWORD *)(inited + 88) = 0x800000010016E6C0;
  *(_QWORD *)(inited + 96) = *(_QWORD *)(*(_QWORD *)(v0 + 24) + v3 + v5[8]);
  *(_QWORD *)(inited + 120) = &type metadata for Double;
  *(_QWORD *)(inited + 128) = 0xD00000000000001BLL;
  *(_QWORD *)(inited + 136) = 0x800000010016E6F0;
  *(_QWORD *)(inited + 144) = *(_QWORD *)(*(_QWORD *)(v0 + 24) + v3 + v5[9]);
  *(_QWORD *)(inited + 168) = &type metadata for Int;
  *(_QWORD *)(inited + 176) = 0xD000000000000018;
  *(_QWORD *)(inited + 184) = 0x800000010016E710;
  *(_QWORD *)(inited + 192) = *(_QWORD *)(*(_QWORD *)(v0 + 24) + v3 + v5[10]);
  *(_QWORD *)(inited + 216) = &type metadata for Int;
  *(_QWORD *)(inited + 224) = 0xD000000000000029;
  *(_QWORD *)(inited + 232) = 0x800000010016E730;
  *(_QWORD *)(inited + 240) = *(_QWORD *)(*(_QWORD *)(v0 + 24) + v3 + v5[11]);
  *(_QWORD *)(inited + 264) = &type metadata for Double;
  *(_QWORD *)(inited + 272) = 0xD000000000000025;
  *(_QWORD *)(inited + 280) = 0x800000010016E760;
  *(_QWORD *)(inited + 288) = *(_QWORD *)(*(_QWORD *)(v0 + 24) + v3 + v5[12]);
  *(_QWORD *)(inited + 312) = &type metadata for Double;
  *(_QWORD *)(inited + 320) = 0xD000000000000027;
  *(_QWORD *)(inited + 328) = 0x800000010016E790;
  v6 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + v3 + v5[13]);
  v7 = sub_100003A2C((uint64_t *)&unk_1001AE460);
  *(_QWORD *)(inited + 336) = v6;
  *(_QWORD *)(inited + 360) = v7;
  *(_QWORD *)(inited + 368) = 0xD000000000000025;
  *(_QWORD *)(inited + 376) = 0x800000010016E7C0;
  *(_QWORD *)(inited + 384) = *(_QWORD *)(*(_QWORD *)(v0 + 24) + v3 + v5[14]);
  *(_QWORD *)(inited + 408) = v7;
  *(_QWORD *)(inited + 416) = 0xD00000000000001ALL;
  *(_QWORD *)(inited + 424) = 0x800000010016E7F0;
  *(_BYTE *)(inited + 432) = *(_BYTE *)(*(_QWORD *)(v0 + 24) + v3 + v5[15]);
  *(_QWORD *)(inited + 456) = &type metadata for Bool;
  *(_QWORD *)(inited + 464) = 0xD000000000000013;
  *(_QWORD *)(inited + 472) = 0x800000010016E810;
  *(_BYTE *)(inited + 480) = *(_BYTE *)(*(_QWORD *)(v0 + 24) + v3 + v5[16]);
  *(_QWORD *)(inited + 504) = &type metadata for Bool;
  *(_QWORD *)(inited + 512) = 0x2E726F74696E6F4DLL;
  *(_QWORD *)(inited + 520) = 0xEF64656C62616E45;
  v8 = *(_BYTE *)(*(_QWORD *)(v0 + 24) + v3 + v5[17]);
  *(_QWORD *)(inited + 552) = &type metadata for Bool;
  *(_BYTE *)(inited + 528) = v8;
  *(_QWORD *)(inited + 560) = 0xD00000000000002ELL;
  *(_QWORD *)(inited + 568) = 0x800000010016E830;
  v9 = *(_BYTE *)(*(_QWORD *)(v0 + 24) + v3 + v5[18]);
  *(_QWORD *)(inited + 600) = &type metadata for Bool;
  *(_BYTE *)(inited + 576) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v77[0] = sub_1000047FC(inited);
  v10 = *(_QWORD *)(v0 + 24);
  swift_retain();
  sub_1000DEDE4();
  swift_release(v10);
  v11 = sub_100005EF8(v74, v75);
  v12 = type metadata accessor for URL(0);
  v73 = v12;
  v13 = sub_1000778C8(&v72);
  v14 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  v14(v13, *v11 + OBJC_IVAR____TtC9SPREngine11Environment_configuratorBackendURL, v12);
  sub_100005D2C(&v72, v71);
  v15 = v77[0];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v77[0]);
  sub_10000B760(v71, 0xD000000000000017, 0x800000010016E860, isUniquelyReferenced_nonNull_native);
  v77[0] = v15;
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)0x8000000000000000, v17, v18, v19, v20, v21, v22, v23);
  v24 = sub_100005EF8(v74, v75);
  v73 = v12;
  v25 = sub_1000778C8(&v72);
  v14(v25, *v24 + OBJC_IVAR____TtC9SPREngine11Environment_mpocMonitoringBackendURL, v12);
  sub_100005D2C(&v72, v71);
  v26 = v77[0];
  v27 = swift_isUniquelyReferenced_nonNull_native(v77[0]);
  sub_10000B760(v71, 0xD00000000000001ALL, 0x800000010016E880, v27);
  v77[0] = v26;
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)0x8000000000000000, v28, v29, v30, v31, v32, v33, v34);
  v35 = sub_100005EF8(v74, v75);
  v73 = v12;
  v36 = sub_1000778C8(&v72);
  v14(v36, *v35 + OBJC_IVAR____TtC9SPREngine11Environment_storageURL, v12);
  sub_100005D2C(&v72, v71);
  v37 = v77[0];
  v38 = swift_isUniquelyReferenced_nonNull_native(v77[0]);
  sub_10000B760(v71, 0xD000000000000015, 0x80000001001652D0, v38);
  v77[0] = v37;
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)0x8000000000000000, v39, v40, v41, v42, v43, v44, v45);
  sub_100005D3C(v74);
  if (qword_1001AD1B8 != -1)
    swift_once(&qword_1001AD1B8, sub_1000E4B7C);
  v46 = type metadata accessor for Logger(0);
  v47 = sub_100003A14(v46, (uint64_t)qword_1001B23C0);
  v48 = Logger.logObject.getter(v47);
  v49 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v48, v49))
  {
    v50 = (uint8_t *)swift_slowAlloc(12, -1);
    v51 = swift_slowAlloc(32, -1);
    v74[0] = v51;
    *(_DWORD *)v50 = 136315138;
    swift_beginAccess(v77, &v72, 0, 0);
    v52 = (_TtC14softposreaderd12RemoteReader *)v77[0];
    v53 = swift_bridgeObjectRetain();
    v54 = Dictionary.description.getter(v53, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    v56 = (_TtC14softposreaderd12RemoteReader *)v55;
    swift_bridgeObjectRelease(v52, v55, v57, v58, v59, v60, v61, v62);
    *(_QWORD *)&v71[0] = sub_1000056EC(v54, (unint64_t)v56, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v71, (char *)v71 + 8, v50 + 4, v50 + 12);
    swift_bridgeObjectRelease(v56, v63, v64, v65, v66, v67, v68, v69);
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "Primer.configuration: %s", v50, 0xCu);
    swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v50, -1, -1);
  }

  swift_beginAccess(v77, v74, 0, 0);
  return v77[0];
}

uint64_t Primer.getProvider()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 32);
  a1[3] = type metadata accessor for Provider();
  a1[4] = &off_10019F868;
  *a1 = v3;
  return swift_retain();
}

uint64_t Primer.makeSecureChannel(owner:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  _QWORD v11[5];

  v8 = *(_QWORD *)(v3 + 24);
  swift_retain();
  sub_1000E273C();
  result = swift_release(v8);
  if (!v4)
  {
    v10 = sub_100005EF8(v11, v11[3]);
    sub_10003EC1C(a1, a2, (_QWORD *)(*v10 + 136), a3);
    return sub_100005D3C(v11);
  }
  return result;
}

uint64_t Primer.getMPOCMonitorManagerPublic()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(v1 + 24);
  swift_retain();
  sub_1000DFD74();
  result = swift_release(v4);
  if (!v2)
  {
    v6 = v11;
    v7 = v12;
    v8 = sub_100005EF8(v10, v11);
    a1[3] = v6;
    a1[4] = *(_QWORD *)(v7 + 8);
    v9 = sub_1000778C8(a1);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v9, v8, v6);
    return sub_100005D3C(v10);
  }
  return result;
}

Swift::Void __swiftcall Primer.attach(isPOS:)(Swift::Bool isPOS)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t *v11;
  os_unfair_lock_s *v12;
  int v13;
  uint64_t v14;

  v2 = v1;
  if (qword_1001AD1B8 != -1)
    swift_once(&qword_1001AD1B8, sub_1000E4B7C);
  v4 = type metadata accessor for Logger(0);
  sub_100003A14(v4, (uint64_t)qword_1001B23C0);
  v5 = swift_retain();
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc(14, -1);
    *(_DWORD *)v8 = 67109376;
    v13 = isPOS;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v8 + 4, v8 + 8);
    *(_WORD *)(v8 + 8) = 1024;
    v9 = *(_QWORD *)(v2 + 24) + OBJC_IVAR____TtC9SPREngine5Depot_settings;
    v13 = *(unsigned __int8 *)(v9 + *(int *)(type metadata accessor for Settings(0) + 68));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v8 + 10, v8 + 14);
    swift_release(v2);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Primer.attach() isPOS: %{BOOL}d, depot.settings.monitorEnabled: %{BOOL}d", (uint8_t *)v8, 0xEu);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_release(v2);
  }
  v10 = *(os_unfair_lock_s **)(v2 + 40);
  v11 = (uint64_t *)&v10[4];
  v12 = v10 + 6;
  os_unfair_lock_lock(v10 + 6);
  sub_1000E5CF8(v11, isPOS, v2);
  os_unfair_lock_unlock(v12);
}

void sub_1000E5CF8(uint64_t *a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  _TtC14softposreaderd12RemoteReader *v13;
  _TtC14softposreaderd12RemoteReader *v14;
  _TtC14softposreaderd12RemoteReader *v15;
  uint64_t v16;
  _TtC14softposreaderd12RemoteReader *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t *v25;
  _TtC14softposreaderd12RemoteReader *v26;
  _TtC14softposreaderd12RemoteReader *v27;
  SEL v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  Swift::String v35;
  SEL v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  char v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  unint64_t v58;
  uint64_t v59;
  NSObject *v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  NSObject *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  uint64_t v83;
  Swift::String v84;
  _TtC14softposreaderd12RemoteReader *object;
  SEL v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  Swift::String v93;
  _TtC14softposreaderd12RemoteReader *v94;
  SEL v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  os_log_type_t v105;
  uint8_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  NSObject *v123;
  os_log_type_t v124;
  uint64_t v125;
  uint64_t v126;
  Swift::String v127;
  _TtC14softposreaderd12RemoteReader *v128;
  SEL v129;
  id v130;
  id v131;
  id v132;
  id v133;
  id v134;
  id v135;
  Swift::String v136;
  _TtC14softposreaderd12RemoteReader *v137;
  SEL v138;
  id v139;
  id v140;
  id v141;
  id v142;
  id v143;
  id v144;
  NSObject **v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149[2];
  uint64_t v150;
  uint64_t v151;
  id v152;
  uint64_t v153;

  v5 = a1;
  v6 = &qword_1001AD000;
  if (!*a1 && (a2 & 1) != 0)
  {
    v7 = *(_QWORD *)(a3 + 24) + OBJC_IVAR____TtC9SPREngine5Depot_settings;
    if (*(_BYTE *)(v7 + *(int *)(type metadata accessor for Settings(0) + 68)) == 1)
    {
      sub_10009B408();
      v146 = v5;
      if (!v3)
        goto LABEL_32;
      v153 = v3;
      swift_errorRetain();
      v8 = sub_100003A2C((uint64_t *)&unk_1001B1280);
      v9 = sub_1000339B4();
      if ((swift_dynamicCast(&v152, &v153, v8, v9, 0) & 1) == 0)
        goto LABEL_24;
      v10 = v152;
      v11 = objc_msgSend(v152, "domain");
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v14 = v13;

      v16 = String.init(cString:)("nfcd");
      v17 = v15;
      if (v12 == v16 && v14 == v15)
      {
        swift_bridgeObjectRelease_n(v14, 2);
      }
      else
      {
        v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, v16, v15, 0);
        swift_bridgeObjectRelease(v14, v44, v45, v46, v47, v48, v49, v50);
        swift_bridgeObjectRelease(v17, v51, v52, v53, v54, v55, v56, v57);
        if ((v43 & 1) == 0)
        {
LABEL_23:

LABEL_24:
          swift_errorRelease();
          if (qword_1001AD1B8 != -1)
            swift_once(&qword_1001AD1B8, sub_1000E4B7C);
          v66 = type metadata accessor for Logger(0);
          sub_100003A14(v66, (uint64_t)qword_1001B23C0);
          swift_errorRetain();
          v67 = swift_errorRetain();
          v68 = Logger.logObject.getter(v67);
          v69 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v68, v69))
          {
            swift_errorRelease();
            swift_errorRelease();
            swift_errorRelease();

LABEL_32:
            v77 = *(_QWORD *)(a3 + 24);
            swift_retain(v77);
            sub_1000DFD74();
            swift_release(v77);
            sub_100005EF8(&v148, v150);
            sub_1000F2D90();
            sub_100005D3C(&v148);
            if (v6[55] != -1)
              swift_once(&qword_1001AD1B8, sub_1000E4B7C);
            v78 = type metadata accessor for Logger(0);
            sub_100003A14(v78, (uint64_t)qword_1001B23C0);
            v79 = swift_retain_n(a3, 2);
            v80 = Logger.logObject.getter(v79);
            v81 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v80, v81))
            {
              v82 = (uint8_t *)swift_slowAlloc(12, -1);
              v83 = swift_slowAlloc(32, -1);
              v153 = v83;
              *(_DWORD *)v82 = 136315138;
              v147 = (uint64_t)(v82 + 4);
              v148 = 0x5B72656D697250;
              v149[0] = 0xE700000000000000;
              LODWORD(v152) = *(_DWORD *)(a3 + 16);
              swift_retain(a3);
              v84._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
              object = (_TtC14softposreaderd12RemoteReader *)v84._object;
              String.append(_:)(v84);
              swift_bridgeObjectRelease(object, v86, v87, v88, v89, v90, v91, v92);
              v93._countAndFlagsBits = 93;
              v93._object = (void *)0xE100000000000000;
              String.append(_:)(v93);
              swift_release(a3);
              v94 = (_TtC14softposreaderd12RemoteReader *)v149[0];
              v148 = sub_1000056EC(v148, v149[0], &v153);
              v6 = &qword_1001AD000;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, v149, v82 + 4, v82 + 12);
              swift_release_n(a3, 2);
              swift_bridgeObjectRelease(v94, v95, v96, v97, v98, v99, v100, v101);
              _os_log_impl((void *)&_mh_execute_header, v80, v81, "%s: Background MPOC monitoring started", v82, 0xCu);
              swift_arrayDestroy(v83, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v83, -1, -1);
              swift_slowDealloc(v82, -1, -1);

            }
            else
            {

              swift_release_n(a3, 2);
            }
            if (v6[55] != -1)
              swift_once(&qword_1001AD1B8, sub_1000E4B7C);
            v102 = type metadata accessor for Logger(0);
            v103 = sub_100003A14(v102, (uint64_t)qword_1001B23C0);
            v104 = Logger.logObject.getter(v103);
            v105 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v104, v105))
            {
              v106 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v106 = 0;
              _os_log_impl((void *)&_mh_execute_header, v104, v105, "start certificate background renewal", v106, 2u);
              swift_slowDealloc(v106, -1, -1);
            }

            v107 = *(_QWORD *)(a3 + 24);
            swift_retain(v107);
            sub_1000E02A4();
            swift_release(v107);
            sub_100005EF8(&v148, v150);
            sub_10000E18C();
            sub_100005D3C(&v148);
            v5 = v146;
            goto LABEL_42;
          }
          v70 = (uint8_t *)swift_slowAlloc(12, -1);
          v147 = 0;
          v71 = (uint64_t *)swift_slowAlloc(8, -1);
          *(_DWORD *)v70 = 138412290;
          swift_errorRetain();
          v72 = _swift_stdlib_bridgeErrorToNSError(v3);
          v148 = v72;
          v6 = &qword_1001AD000;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, v149, v70 + 4, v70 + 12);
          *v71 = v72;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v68, v69, "failed to restore pairing %@", v70, 0xCu);
          v73 = sub_100003A2C((uint64_t *)&unk_1001AE430);
          swift_arrayDestroy(v71, 1, v73);
          swift_slowDealloc(v71, -1, -1);
          swift_slowDealloc(v70, -1, -1);

LABEL_31:
          swift_errorRelease();
          goto LABEL_32;
        }
      }
      v58 = (unint64_t)objc_msgSend(v10, "code");
      if ((v58 & 0x8000000000000000) != 0)
      {
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
      }
      else
      {
        if (!HIDWORD(v58))
        {
          if (v58 == 8)
          {
            swift_errorRelease();
            if (qword_1001AD1B8 != -1)
              swift_once(&qword_1001AD1B8, sub_1000E4B7C);
            v59 = type metadata accessor for Logger(0);
            sub_100003A14(v59, (uint64_t)qword_1001B23C0);
            v60 = v10;
            v61 = Logger.logObject.getter(v60);
            v62 = static os_log_type_t.fault.getter();
            if (os_log_type_enabled(v61, v62))
            {
              v63 = (uint8_t *)swift_slowAlloc(12, -1);
              v145 = (NSObject **)swift_slowAlloc(8, -1);
              *(_DWORD *)v63 = 138412290;
              v148 = (uint64_t)v60;
              v147 = 0;
              v64 = v60;
              v6 = &qword_1001AD000;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, v149, v63 + 4, v63 + 12);
              *v145 = v60;

              _os_log_impl((void *)&_mh_execute_header, v61, v62, "security violation %@", v63, 0xCu);
              v65 = sub_100003A2C((uint64_t *)&unk_1001AE430);
              swift_arrayDestroy(v145, 1, v65);
              swift_slowDealloc(v145, -1, -1);
              swift_slowDealloc(v63, -1, -1);
            }
            else
            {

              v61 = v60;
            }

            v74 = *(_QWORD *)(a3 + 24);
            swift_retain(v74);
            sub_1000DDE7C();
            swift_release(v74);
            v75 = v150;
            v76 = v151;
            sub_10001A64C((uint64_t)&v148, v150);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 88))(1, v75, v76);

            sub_100005D3C(&v148);
            goto LABEL_31;
          }
          goto LABEL_23;
        }
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
      }
      __break(1u);
      return;
    }
  }
  if (qword_1001AD1B8 != -1)
    swift_once(&qword_1001AD1B8, sub_1000E4B7C);
  v18 = type metadata accessor for Logger(0);
  sub_100003A14(v18, (uint64_t)qword_1001B23C0);
  v19 = swift_retain_n(a3, 2);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v147 = v3;
    v23 = swift_slowAlloc(32, -1);
    v153 = v23;
    *(_DWORD *)v22 = 136315138;
    v148 = 0x5B72656D697250;
    v149[0] = 0xE700000000000000;
    LODWORD(v152) = *(_DWORD *)(a3 + 16);
    swift_retain(a3);
    v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
    v25 = v5;
    v26 = (_TtC14softposreaderd12RemoteReader *)v24._object;
    String.append(_:)(v24);
    v27 = v26;
    v5 = v25;
    swift_bridgeObjectRelease(v27, v28, v29, v30, v31, v32, v33, v34);
    v35._countAndFlagsBits = 93;
    v35._object = (void *)0xE100000000000000;
    String.append(_:)(v35);
    swift_release(a3);
    v148 = sub_1000056EC(0x5B72656D697250, 0xE700000000000000, &v153);
    v6 = &qword_1001AD000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, v149, v22 + 4, v22 + 12);
    swift_release_n(a3, 2);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)0xE700000000000000, v36, v37, v38, v39, v40, v41, v42);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s: Background MPOC monitoring is disabled", v22, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);

  }
  else
  {

    swift_release_n(a3, 2);
  }
LABEL_42:
  v108 = *v5 + 1;
  if (*v5 == -1)
  {
    __break(1u);
    goto LABEL_64;
  }
  *v5 = v108;
  if (qword_1001AD308 != -1)
LABEL_64:
    swift_once(&qword_1001AD308, sub_10013E994);
  v109 = static GlobalState.shared;
  objc_msgSend(*(id *)(static GlobalState.shared + 72), "lock");
  while (*(uint64_t *)(v109 + 96) > 0 || *(_BYTE *)(v109 + 80) == 1)
    objc_msgSend(*(id *)(v109 + 72), "wait");
  v110 = *(_QWORD *)(v109 + 88);
  v111 = __OFADD__(v110, 1);
  v112 = v110 + 1;
  if (v111)
  {
    __break(1u);
    goto LABEL_66;
  }
  *(_QWORD *)(v109 + 88) = v112;
  objc_msgSend(*(id *)(v109 + 72), "unlock");
  v113 = *(_QWORD *)(v109 + 64);
  objc_msgSend(*(id *)(v109 + 72), "lock");
  v114 = *(_QWORD *)(v109 + 88);
  v111 = __OFSUB__(v114, 1);
  v115 = v114 - 1;
  if (v111)
  {
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  v147 = v108;
  *(_QWORD *)(v109 + 88) = v115;
  if (!v115)
    objc_msgSend(*(id *)(v109 + 72), "broadcast");
  objc_msgSend(*(id *)(v109 + 72), "unlock");
  v111 = __OFADD__(v113, 1);
  v116 = v113 + 1;
  if (v111)
    goto LABEL_67;
  objc_msgSend(*(id *)(v109 + 72), "lock");
  v117 = *(_QWORD *)(v109 + 96);
  v111 = __OFADD__(v117, 1);
  v118 = v117 + 1;
  if (v111)
  {
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  *(_QWORD *)(v109 + 96) = v118;
  while (*(uint64_t *)(v109 + 88) > 0 || *(_BYTE *)(v109 + 80) == 1)
    objc_msgSend(*(id *)(v109 + 72), "wait");
  v119 = *(_QWORD *)(v109 + 96);
  v111 = __OFSUB__(v119, 1);
  v120 = v119 - 1;
  if (!v111)
  {
    *(_QWORD *)(v109 + 96) = v120;
    *(_BYTE *)(v109 + 80) = 1;
    objc_msgSend(*(id *)(v109 + 72), "unlock");
    *(_QWORD *)(v109 + 64) = v116;
    objc_msgSend(*(id *)(v109 + 72), "lock");
    *(_BYTE *)(v109 + 80) = 0;
    objc_msgSend(*(id *)(v109 + 72), "broadcast");
    objc_msgSend(*(id *)(v109 + 72), "unlock");
    if (v6[55] == -1)
      goto LABEL_60;
    goto LABEL_70;
  }
LABEL_69:
  __break(1u);
LABEL_70:
  swift_once(&qword_1001AD1B8, sub_1000E4B7C);
LABEL_60:
  v121 = type metadata accessor for Logger(0);
  sub_100003A14(v121, (uint64_t)qword_1001B23C0);
  v122 = swift_retain_n(a3, 2);
  v123 = Logger.logObject.getter(v122);
  v124 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v123, v124))
  {
    v125 = swift_slowAlloc(22, -1);
    v126 = swift_slowAlloc(32, -1);
    v153 = v126;
    *(_DWORD *)v125 = 136315394;
    v148 = 0x5B72656D697250;
    v149[0] = 0xE700000000000000;
    LODWORD(v152) = *(_DWORD *)(a3 + 16);
    swift_retain(a3);
    v127._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
    v128 = (_TtC14softposreaderd12RemoteReader *)v127._object;
    String.append(_:)(v127);
    swift_bridgeObjectRelease(v128, v129, v130, v131, v132, v133, v134, v135);
    v136._countAndFlagsBits = 93;
    v136._object = (void *)0xE100000000000000;
    String.append(_:)(v136);
    swift_release(a3);
    v137 = (_TtC14softposreaderd12RemoteReader *)v149[0];
    v148 = sub_1000056EC(v148, v149[0], &v153);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, v149, v125 + 4, v125 + 12);
    swift_release_n(a3, 2);
    swift_bridgeObjectRelease(v137, v138, v139, v140, v141, v142, v143, v144);
    *(_WORD *)(v125 + 12) = 2048;
    v148 = v147;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, v149, v125 + 14, v125 + 22);
    _os_log_impl((void *)&_mh_execute_header, v123, v124, "%s: Client attached. currentAttachCount: (%lu)", (uint8_t *)v125, 0x16u);
    swift_arrayDestroy(v126, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v126, -1, -1);
    swift_slowDealloc(v125, -1, -1);

  }
  else
  {

    swift_release_n(a3, 2);
  }
}

Swift::Void __swiftcall Primer.detach(isPOS:)(Swift::Bool isPOS)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t *v4;
  os_unfair_lock_s *v5;

  v3 = *(os_unfair_lock_s **)(v1 + 40);
  v4 = (uint64_t *)&v3[4];
  v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1000E70B0(v4, v1, isPOS);
  os_unfair_lock_unlock(v5);
}

void sub_1000E70B0(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  _TtC14softposreaderd12RemoteReader *object;
  SEL v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  Swift::String v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  Swift::String v49;
  _TtC14softposreaderd12RemoteReader *v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  Swift::String v58;
  _TtC14softposreaderd12RemoteReader *v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  Swift::String v72;
  _TtC14softposreaderd12RemoteReader *v73;
  SEL v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  Swift::String v81;
  _TtC14softposreaderd12RemoteReader *v82;
  SEL v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  uint8_t *v93;
  uint64_t v94;
  Swift::String v95;
  _TtC14softposreaderd12RemoteReader *v96;
  SEL v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  Swift::String v104;
  _TtC14softposreaderd12RemoteReader *v105;
  SEL v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120[2];
  uint64_t v121;
  int v122;
  uint64_t v123;

  v5 = *a1;
  if (qword_1001AD1B8 != -1)
    swift_once(&qword_1001AD1B8, sub_1000E4B7C);
  v6 = type metadata accessor for Logger(0);
  sub_100003A14(v6, (uint64_t)qword_1001B23C0);
  v7 = swift_retain_n(a2, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(32, -1);
    v123 = v11;
    *(_DWORD *)v10 = 136315394;
    v116 = v5;
    v119 = 0x5B72656D697250;
    v120[0] = 0xE700000000000000;
    v122 = *(_DWORD *)(a2 + 16);
    swift_retain();
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
    object = (_TtC14softposreaderd12RemoteReader *)v12._object;
    String.append(_:)(v12);
    swift_bridgeObjectRelease(object, v14, v15, v16, v17, v18, v19, v20);
    v21._countAndFlagsBits = 93;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    swift_release(a2);
    v119 = sub_1000056EC(0x5B72656D697250, 0xE700000000000000, &v123);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120, v10 + 4, v10 + 12);
    swift_release_n(a2, 2);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)0xE700000000000000, v22, v23, v24, v25, v26, v27, v28);
    *(_WORD *)(v10 + 12) = 2048;
    v119 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120, v10 + 14, v10 + 22);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s: Detaching client. currentAttachCount: (%lu)", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_release_n(a2, 2);
  }
  v29 = *a1 - 1;
  if (!*a1)
  {
    __break(1u);
    goto LABEL_38;
  }
  *a1 = v29;
  if (qword_1001AD308 != -1)
LABEL_38:
    swift_once(&qword_1001AD308, sub_10013E994);
  v30 = static GlobalState.shared;
  objc_msgSend(*(id *)(static GlobalState.shared + 72), "lock", v116);
  while (*(uint64_t *)(v30 + 96) > 0 || *(_BYTE *)(v30 + 80) == 1)
    objc_msgSend(*(id *)(v30 + 72), "wait");
  v31 = *(_QWORD *)(v30 + 88);
  v32 = __OFADD__(v31, 1);
  v33 = v31 + 1;
  if (v32)
  {
    __break(1u);
    goto LABEL_40;
  }
  *(_QWORD *)(v30 + 88) = v33;
  objc_msgSend(*(id *)(v30 + 72), "unlock");
  v34 = *(_QWORD *)(v30 + 64);
  objc_msgSend(*(id *)(v30 + 72), "lock");
  v35 = *(_QWORD *)(v30 + 88);
  v32 = __OFSUB__(v35, 1);
  v36 = v35 - 1;
  if (v32)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  *(_QWORD *)(v30 + 88) = v36;
  if (!v36)
    objc_msgSend(*(id *)(v30 + 72), "broadcast");
  objc_msgSend(*(id *)(v30 + 72), "unlock");
  v32 = __OFSUB__(v34, 1);
  v37 = v34 - 1;
  if (v32)
    goto LABEL_41;
  objc_msgSend(*(id *)(v30 + 72), "lock");
  v38 = *(_QWORD *)(v30 + 96);
  v32 = __OFADD__(v38, 1);
  v39 = v38 + 1;
  if (v32)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    return;
  }
  *(_QWORD *)(v30 + 96) = v39;
  while (*(uint64_t *)(v30 + 88) > 0 || *(_BYTE *)(v30 + 80) == 1)
    objc_msgSend(*(id *)(v30 + 72), "wait");
  v40 = *(_QWORD *)(v30 + 96);
  v32 = __OFSUB__(v40, 1);
  v41 = v40 - 1;
  if (v32)
    goto LABEL_43;
  *(_QWORD *)(v30 + 96) = v41;
  *(_BYTE *)(v30 + 80) = 1;
  objc_msgSend(*(id *)(v30 + 72), "unlock");
  *(_QWORD *)(v30 + 64) = v37;
  objc_msgSend(*(id *)(v30 + 72), "lock");
  *(_BYTE *)(v30 + 80) = 0;
  objc_msgSend(*(id *)(v30 + 72), "broadcast");
  objc_msgSend(*(id *)(v30 + 72), "unlock");
  if (!v29
    && (a3 & 1) != 0
    && (v42 = *(_QWORD *)(a2 + 24),
        v43 = v42 + OBJC_IVAR____TtC9SPREngine5Depot_settings,
        *(_BYTE *)(v43 + *(int *)(type metadata accessor for Settings(0) + 68)) == 1))
  {
    swift_retain();
    sub_1000DFD74();
    if (v118)
    {
      swift_release(v42);
      v44 = swift_retain_n(a2, 2);
      v45 = Logger.logObject.getter(v44);
      v46 = static os_log_type_t.error.getter(v45);
      if (os_log_type_enabled(v45, v46))
      {
        v47 = (uint8_t *)swift_slowAlloc(12, -1);
        v48 = swift_slowAlloc(32, -1);
        v123 = v48;
        *(_DWORD *)v47 = 136315138;
        v119 = 0x5B72656D697250;
        v120[0] = 0xE700000000000000;
        v122 = *(_DWORD *)(a2 + 16);
        swift_retain();
        v49._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
        v50 = (_TtC14softposreaderd12RemoteReader *)v49._object;
        String.append(_:)(v49);
        swift_bridgeObjectRelease(v50, v51, v52, v53, v54, v55, v56, v57);
        v58._countAndFlagsBits = 93;
        v58._object = (void *)0xE100000000000000;
        String.append(_:)(v58);
        swift_release(a2);
        v59 = (_TtC14softposreaderd12RemoteReader *)v120[0];
        v119 = sub_1000056EC(v119, v120[0], &v123);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120, v47 + 4, v47 + 12);
        swift_release_n(a2, 2);
        swift_bridgeObjectRelease(v59, v60, v61, v62, v63, v64, v65, v66);
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "%s: Missing MPOCMonitorManager instance", v47, 0xCu);
        swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v48, -1, -1);
        swift_slowDealloc(v47, -1, -1);
        swift_errorRelease();

      }
      else
      {
        swift_errorRelease();

        swift_release_n(a2, 2);
      }
    }
    else
    {
      swift_release(v42);
      sub_100005EF8(&v119, v121);
      sub_1000F37E8();
      sub_100005D3C(&v119);
      v90 = swift_retain_n(a2, 2);
      v91 = Logger.logObject.getter(v90);
      v92 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v91, v92))
      {
        v93 = (uint8_t *)swift_slowAlloc(12, -1);
        v94 = swift_slowAlloc(32, -1);
        v123 = v94;
        *(_DWORD *)v93 = 136315138;
        v119 = 0x5B72656D697250;
        v120[0] = 0xE700000000000000;
        v122 = *(_DWORD *)(a2 + 16);
        swift_retain();
        v95._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
        v96 = (_TtC14softposreaderd12RemoteReader *)v95._object;
        String.append(_:)(v95);
        swift_bridgeObjectRelease(v96, v97, v98, v99, v100, v101, v102, v103);
        v104._countAndFlagsBits = 93;
        v104._object = (void *)0xE100000000000000;
        String.append(_:)(v104);
        swift_release(a2);
        v105 = (_TtC14softposreaderd12RemoteReader *)v120[0];
        v119 = sub_1000056EC(v119, v120[0], &v123);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120, v93 + 4, v93 + 12);
        swift_release_n(a2, 2);
        swift_bridgeObjectRelease(v105, v106, v107, v108, v109, v110, v111, v112);
        _os_log_impl((void *)&_mh_execute_header, v91, v92, "%s: Background MPOC monitoring stopped", v93, 0xCu);
        swift_arrayDestroy(v94, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v94, -1, -1);
        swift_slowDealloc(v93, -1, -1);

      }
      else
      {

        swift_release_n(a2, 2);
      }
    }
    v113 = *(_QWORD *)(a2 + 24);
    swift_retain();
    sub_1000E02A4();
    swift_release(v113);
    v114 = *(_QWORD *)(*sub_100005EF8(&v119, v121) + 192);
    v115 = swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()(v115);
    swift_release(v114);
    sub_100005D3C(&v119);
  }
  else
  {
    v67 = swift_retain_n(a2, 2);
    v68 = Logger.logObject.getter(v67);
    v69 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v68, v69))
    {
      v70 = (uint8_t *)swift_slowAlloc(12, -1);
      v71 = swift_slowAlloc(32, -1);
      v123 = v71;
      *(_DWORD *)v70 = 136315138;
      v119 = 0x5B72656D697250;
      v120[0] = 0xE700000000000000;
      v122 = *(_DWORD *)(a2 + 16);
      swift_retain();
      v72._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
      v73 = (_TtC14softposreaderd12RemoteReader *)v72._object;
      String.append(_:)(v72);
      swift_bridgeObjectRelease(v73, v74, v75, v76, v77, v78, v79, v80);
      v81._countAndFlagsBits = 93;
      v81._object = (void *)0xE100000000000000;
      String.append(_:)(v81);
      swift_release(a2);
      v82 = (_TtC14softposreaderd12RemoteReader *)v120[0];
      v119 = sub_1000056EC(v119, v120[0], &v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120, v70 + 4, v70 + 12);
      swift_release_n(a2, 2);
      swift_bridgeObjectRelease(v82, v83, v84, v85, v86, v87, v88, v89);
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "%s: Background MPOC monitoring is disabled", v70, 0xCu);
      swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v70, -1, -1);

    }
    else
    {

      swift_release_n(a2, 2);
    }
  }
}

_QWORD *Primer.deinit()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return v0;
}

uint64_t Primer.__deallocating_deinit()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t sub_1000E7C3C()
{
  return Primer.configuration.getter();
}

uint64_t sub_1000E7C5C()
{
  return Primer.storageSetting.getter();
}

void sub_1000E7C7C(Swift::Bool a1)
{
  Primer.attach(isPOS:)(a1);
}

void sub_1000E7C9C()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t *v2;
  os_unfair_lock_s *v3;

  v1 = *(os_unfair_lock_s **)(*(_QWORD *)v0 + 40);
  v2 = (uint64_t *)&v1[4];
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1000E7F94(v2);
  os_unfair_lock_unlock(v3);
}

uint64_t sub_1000E7CF8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  a1[3] = type metadata accessor for Provider();
  a1[4] = &off_10019F868;
  *a1 = v3;
  return swift_retain();
}

uint64_t sub_1000E7D38@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  _QWORD v11[5];

  v8 = *(_QWORD *)(*(_QWORD *)v3 + 24);
  swift_retain();
  sub_1000E273C();
  result = swift_release(v8);
  if (!v4)
  {
    v10 = sub_100005EF8(v11, v11[3]);
    sub_10003EC1C(a1, a2, (_QWORD *)(*v10 + 136), a3);
    return sub_100005D3C(v11);
  }
  return result;
}

uint64_t sub_1000E7DCC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  swift_retain();
  sub_1000DFD74();
  result = swift_release(v4);
  if (!v2)
  {
    v6 = v11;
    v7 = v12;
    v8 = sub_100005EF8(v10, v11);
    a1[3] = v6;
    a1[4] = *(_QWORD *)(v7 + 8);
    v9 = sub_1000778C8(a1);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v9, v8, v6);
    return sub_100005D3C(v10);
  }
  return result;
}

uint64_t sub_1000E7E70()
{
  Swift::String v0;
  void *object;
  Swift::String v2;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 93;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0x5B72656D697250;
}

uint64_t sub_1000E7EF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003A2C(&qword_1001B2500);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E7F3C(uint64_t a1)
{
  destroy for Depot.Element(a1);
  return a1;
}

uint64_t sub_1000E7F70()
{
  uint64_t v0;

  sub_100005D3C((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

void sub_1000E7F94(uint64_t *a1)
{
  uint64_t v1;

  sub_1000E70B0(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

unint64_t sub_1000E8000(int a1)
{
  SEL v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  _TtC14softposreaderd12RemoteReader *object;
  SEL v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  Swift::String v20;

  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)0xE000000000000000, v2, v3, v4, v5, v6, v7, v8);
  v9 = sub_100003A2C((uint64_t *)&unk_1001B1300);
  v10 = swift_allocObject(v9, 72, 7);
  *(_OWORD *)(v10 + 16) = xmmword_10015A5F0;
  *(_QWORD *)(v10 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v10 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v10 + 32) = a1;
  v11._countAndFlagsBits = String.init(format:_:)(0x786C3830257830, 0xE700000000000000, v10);
  object = (_TtC14softposreaderd12RemoteReader *)v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(object, v13, v14, v15, v16, v17, v18, v19);
  v20._countAndFlagsBits = 41;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  return 0xD000000000000017;
}

uint64_t sub_1000E80DC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a1 == 0x5441545345545441 && a2 == 0xEB000000004E4F49
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x5441545345545441, 0xEB000000004E4F49, a1, a2, 0) & 1) != 0)
  {
    return 1;
  }
  if (a1 == 0x52554749464E4F43 && a2 == 0xED00004E4F495441
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x52554749464E4F43, 0xED00004E4F495441, a1, a2, 0) & 1) != 0)
  {
    return 2;
  }
  if (a1 == 0x49524F54494E4F4DLL && a2 == 0xEA0000000000474ELL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x49524F54494E4F4DLL, 0xEA0000000000474ELL, a1, a2, 0) & 1) != 0)
  {
    return 3;
  }
  if (a1 == 0x544E4F435F4E4950 && a2 == 0xEE0052454C4C4F52
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x544E4F435F4E4950, 0xEE0052454C4C4F52, a1, a2, 0) & 1) != 0)
  {
    return 4;
  }
  if (a1 == 0x524544414552 && a2 == 0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x524544414552, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    return 5;
  }
  if (a1 == 0x435F455255434553 && a2 == 0xEE004C454E4E4148
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x435F455255434553, 0xEE004C454E4E4148, a1, a2, 0) & 1) != 0)
  {
    return 6;
  }
  result = 7;
  if (a1 != 0xD000000000000011 || a2 != 0x800000010016F630)
  {
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000010016F630, a1, a2, 0) & 1) != 0)
      return 7;
    else
      return 0;
  }
  return result;
}

unint64_t sub_1000E83A8(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t result;
  char v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
    v10 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003A2C(&qword_1001B25E0);
  v10 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v9);
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
  {
LABEL_9:
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, a2, a3, a4, a5, a6, a7, a8);
    return (unint64_t)v10;
  }
  swift_retain();
  v12 = (unint64_t *)(a1 + 56);
  while (1)
  {
    v13 = *(v12 - 3);
    v14 = *(v12 - 2);
    v15 = *(v12 - 1);
    v16 = *v12;
    sub_100005D9C(v13, v14);
    sub_100005D9C(v15, v16);
    result = sub_10013A3F4(v13, v14);
    if ((v18 & 1) != 0)
      break;
    *(_QWORD *)((char *)v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v19 = (uint64_t *)(v10[6] + 16 * result);
    *v19 = v13;
    v19[1] = v14;
    v20 = (uint64_t *)(v10[7] + 16 * result);
    *v20 = v15;
    v20[1] = v16;
    v21 = v10[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_11;
    v12 += 4;
    v10[2] = v23;
    if (!--v11)
    {
      swift_release(v10);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000E84D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  return sub_1000E8648(a1, &qword_1001B2638, &unk_1001B2640, sub_10013A480, a5, a6, a7, a8);
}

unint64_t sub_1000E84EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v16 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v16);
    return (unint64_t)v4;
  }
  sub_100003A2C(&qword_1001ADA20);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    goto LABEL_9;
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100005EB4(v7, (uint64_t)&v17, &qword_1001ADA28);
    v8 = v17;
    v9 = v18;
    result = sub_10000ADC4(v17, v18);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = sub_10001A674(&v19, v4[7] + 40 * result);
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_12;
    v4[2] = v15;
    v7 += 56;
    if (!--v5)
    {
      swift_release(v4);
      v16 = a1;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1000E862C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  return sub_1000E8648(a1, &qword_1001B25D0, &unk_1001B25D8, sub_10013A590, a5, a6, a7, a8);
}

unint64_t sub_1000E8648(uint64_t a1, uint64_t *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v9;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t result;
  char v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _BYTE v23[8];
  uint64_t v24;

  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
    v13 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003A2C(a2);
  v12 = static _DictionaryStorage.allocate(capacity:)(v9);
  v13 = (_QWORD *)v12;
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
  {
LABEL_9:
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, (SEL)a2, a3, a4, a5, a6, a7, a8);
    return (unint64_t)v13;
  }
  v15 = v12 + 64;
  v16 = a1 + 32;
  swift_retain(v12);
  while (1)
  {
    sub_100005EB4(v16, (uint64_t)v23, (uint64_t *)a3);
    v17 = v23[0];
    result = ((uint64_t (*)(_QWORD))a4)(v23[0]);
    if ((v19 & 1) != 0)
      break;
    *(_QWORD *)(v15 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_BYTE *)(v13[6] + result) = v17;
    result = sub_100007AE8((uint64_t)&v24, v13[7] + 32 * result);
    v20 = v13[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_11;
    v13[2] = v22;
    v16 += 40;
    if (!--v14)
    {
      swift_release(v13);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000E8770(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003A2C(&qword_1001B25F0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 2);
    v8 = *((_QWORD *)v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_10000ADC4(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_BYTE *)(v4[7] + result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 24;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000E8880(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003A2C(&qword_1001B25C8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (void **)(a1 + 48);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 2);
    v8 = (uint64_t)*(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    v10 = v9;
    result = sub_10000ADC4(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v10;
    v14 = v4[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v4[2] = v16;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000E8998(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = sub_100003A2C(&qword_1001B2688);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v26 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v26);
    return (unint64_t)v8;
  }
  sub_100003A2C(&qword_1001B25C0);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = (uint64_t)v5 + *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v28 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100005EB4(v13, (uint64_t)v5, &qword_1001B2688);
    v15 = *v5;
    v16 = v5[1];
    result = sub_10000ADC4(*v5, v16);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v20 = (uint64_t *)(v8[6] + 16 * result);
    *v20 = v15;
    v20[1] = v16;
    v21 = v8[7];
    v22 = type metadata accessor for StopWatch(0);
    result = sub_10004E2A4(v10, v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v19);
    v23 = v8[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_12;
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v26 = v28;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1000E8B30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  return sub_1000E8648(a1, &qword_1001B2648, &unk_1001B2650, sub_10013A5A4, a5, a6, a7, a8);
}

unint64_t sub_1000E8B4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003A2C(&qword_1001B2678);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_OWORD *)(a1 + 48);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 2);
    v8 = *((_QWORD *)v6 - 1);
    v15 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_unknownObjectRetain(v15);
    result = sub_10000ADC4(v7, v8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v4[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    *(_OWORD *)(v4[7] + 16 * result) = v15;
    v12 = v4[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4[2] = v14;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000E8C74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  return sub_1000E8648(a1, &qword_1001B2610, &unk_1001B2618, sub_10013A5B8, a5, a6, a7, a8);
}

unint64_t sub_1000E8C90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  return sub_1000E8CC8(a1, &qword_1001B2620, &unk_1001B2628, sub_10013A67C, a5, a6, a7, a8);
}

unint64_t sub_1000E8CAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  return sub_1000E8CC8(a1, &qword_1001B25B0, &unk_1001B25B8, sub_10013A67C, a5, a6, a7, a8);
}

unint64_t sub_1000E8CC8(uint64_t a1, uint64_t *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v9;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t result;
  char v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;

  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
    v13 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003A2C(a2);
  v12 = static _DictionaryStorage.allocate(capacity:)(v9);
  v13 = (_QWORD *)v12;
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
  {
LABEL_9:
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, (SEL)a2, a3, a4, a5, a6, a7, a8);
    return (unint64_t)v13;
  }
  v15 = v12 + 64;
  v16 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100005EB4(v16, (uint64_t)&v23, (uint64_t *)a3);
    v17 = v23;
    result = ((uint64_t (*)(uint64_t))a4)(v23);
    if ((v19 & 1) != 0)
      break;
    *(_QWORD *)(v15 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v13[6] + 8 * result) = v17;
    result = (unint64_t)sub_100005D2C(&v24, (_OWORD *)(v13[7] + 32 * result));
    v20 = v13[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_11;
    v13[2] = v22;
    v16 += 40;
    if (!--v14)
    {
      swift_release(v13);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000E8DF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v16 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v16);
    return (unint64_t)v4;
  }
  sub_100003A2C(&qword_1001B25F8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    goto LABEL_9;
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100005EB4(v7, (uint64_t)&v17, &qword_1001B2690);
    v8 = v17;
    v9 = v18;
    result = sub_10000ADC4(v17, v18);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = sub_100059104((uint64_t)&v19, v4[7] + 40 * result);
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_12;
    v4[2] = v15;
    v7 += 56;
    if (!--v5)
    {
      swift_release(v4);
      v16 = a1;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t NamedError.init(_:reason:error:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  Swift::String v18;
  void *object;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  NSString v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  _OWORD v36[2];
  Swift::String v37;
  uint64_t v38;
  _BYTE v39[80];
  uint64_t v40;
  uint64_t v41;

  v33 = a7;
  v34 = *(_QWORD *)(a6 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v34, a5, &protocol requirements base descriptor for _BridgedStoredNSError);
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v16 = (char *)&v32 - v15;
  v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a6 + 16))(a1, a5, a6);
  v41 = v17;
  if (a3)
  {
    v37._countAndFlagsBits = 8250;
    v37._object = (void *)0xE200000000000000;
    v18._countAndFlagsBits = a2;
    v18._object = a3;
    String.append(_:)(v18);
    swift_bridgeObjectRelease(a3);
    object = v37._object;
    String.append(_:)(v37);
    swift_bridgeObjectRelease(object);
    v20 = v41;
  }
  else
  {
    v20 = v17;
  }
  v21 = sub_100003A2C(&qword_1001AE038);
  inited = swift_initStackObject(v21, v39);
  *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(_QWORD *)(inited + 40) = v23;
  v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v20);
  *(_QWORD *)(inited + 72) = sub_100005E24(0, &qword_1001AE040, NSString_ptr);
  *(_QWORD *)(inited + 48) = v24;
  v25 = sub_1000047FC(inited);
  if (a4)
  {
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
    v28 = v27;
    swift_errorRetain(a4);
    v29 = _convertErrorToNSError(_:)(a4);
    v38 = sub_100005E24(0, (unint64_t *)&qword_1001AE420, NSError_ptr);
    v37._countAndFlagsBits = v29;
    sub_100005D2C(&v37, v36);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v25);
    v35 = v25;
    sub_10000B760(v36, v26, v28, isUniquelyReferenced_nonNull_native);
    v25 = v35;
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(0x8000000000000000);
    swift_errorRelease(a4);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, AssociatedTypeWitness);
  _BridgedStoredNSError.init(_:userInfo:)(v33, v16, v25, a5, v34);
  swift_errorRelease(a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, AssociatedTypeWitness);
}

void sub_1000E91C4(uint64_t a1, uint64_t a2, _TtC14softposreaderd12RemoteReader *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  _TtC14softposreaderd12RemoteReader *v8;
  SEL v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  _OWORD v31[2];

  v4 = v3;
  if (*(_QWORD *)(a1 + 24))
  {
    sub_100005D2C((_OWORD *)a1, v31);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v30 = *v3;
    *v3 = 0x8000000000000000;
    sub_10000B760(v31, a2, (uint64_t)a3, isUniquelyReferenced_nonNull_native);
    v8 = (_TtC14softposreaderd12RemoteReader *)*v3;
    *v4 = v30;
    swift_bridgeObjectRelease(a3, v9, v10, v11, v12, v13, v14, v15);
    swift_bridgeObjectRelease(v8, v16, v17, v18, v19, v20, v21, v22);
  }
  else
  {
    sub_10005218C(a1, &qword_1001B12E0);
    sub_100057BC0(a2, (uint64_t)a3, v31);
    swift_bridgeObjectRelease(a3, v23, v24, v25, v26, v27, v28, v29);
    sub_10005218C((uint64_t)v31, &qword_1001B12E0);
  }
}

uint64_t sub_1000E9298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v10;
  _BYTE v11[40];

  v4 = v3;
  if (*(unsigned __int8 *)(a1 + 32) == 255)
  {
    sub_10005218C(a1, &qword_1001B2500);
    sub_100057D94(a2, a3, (uint64_t)v11);
    swift_bridgeObjectRelease(a3);
    return sub_10005218C((uint64_t)v11, &qword_1001B2500);
  }
  else
  {
    sub_100059104(a1, (uint64_t)v11);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    *v3 = 0x8000000000000000;
    sub_1000EB8C4((uint64_t)v11, a2, a3, isUniquelyReferenced_nonNull_native);
    v8 = *v3;
    *v4 = v10;
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(v8);
  }
}

void sub_1000E9370(uint64_t a1, uint64_t a2, _TtC14softposreaderd12RemoteReader *a3)
{
  _TtC14softposreaderd12RemoteReader **v3;
  _TtC14softposreaderd12RemoteReader **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  char isUniquelyReferenced_nonNull_native;
  _TtC14softposreaderd12RemoteReader *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  _TtC14softposreaderd12RemoteReader *v39;

  v4 = v3;
  v8 = sub_100003A2C(&qword_1001B0E30);
  __chkstk_darwin(v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for StopWatch(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1) == 1)
  {
    sub_10005218C(a1, &qword_1001B0E30);
    sub_100057F64(a2, (uint64_t)a3, (uint64_t)v10);
    swift_bridgeObjectRelease(a3, v15, v16, v17, v18, v19, v20, v21);
    sub_10005218C((uint64_t)v10, &qword_1001B0E30);
  }
  else
  {
    sub_10004E2A4(a1, (uint64_t)v13);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v39 = *v4;
    *v4 = (_TtC14softposreaderd12RemoteReader *)0x8000000000000000;
    sub_1000EBB48((uint64_t)v13, a2, (uint64_t)a3, isUniquelyReferenced_nonNull_native);
    v23 = *v4;
    *v4 = v39;
    swift_bridgeObjectRelease(a3, v24, v25, v26, v27, v28, v29, v30);
    swift_bridgeObjectRelease(v23, v31, v32, v33, v34, v35, v36, v37);
  }
}

void sub_1000E94D0(uint64_t a1, char a2)
{
  _TtC14softposreaderd12RemoteReader **v2;
  _TtC14softposreaderd12RemoteReader **v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  _TtC14softposreaderd12RemoteReader *v6;
  SEL v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  _TtC14softposreaderd12RemoteReader *v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  _TtC14softposreaderd12RemoteReader *v27;
  _TtC14softposreaderd12RemoteReader *v28;
  _OWORD v29[2];

  v3 = v2;
  v4 = a2 & 1;
  if (*(_QWORD *)(a1 + 24))
  {
    sub_100005D2C((_OWORD *)a1, v29);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v27 = *v2;
    *v2 = (_TtC14softposreaderd12RemoteReader *)0x8000000000000000;
    sub_1000EC16C(v29, v4, isUniquelyReferenced_nonNull_native);
    v6 = *v2;
    *v2 = v27;
    swift_bridgeObjectRelease(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  else
  {
    sub_10005218C(a1, &qword_1001B12E0);
    v14 = sub_10013A70C(v4);
    if ((v15 & 1) != 0)
    {
      v16 = v14;
      v17 = swift_isUniquelyReferenced_nonNull_native(*v2);
      v18 = (uint64_t)*v2;
      v28 = *v3;
      *v3 = (_TtC14softposreaderd12RemoteReader *)0x8000000000000000;
      if ((v17 & 1) == 0)
      {
        sub_1000ED628();
        v18 = (uint64_t)v28;
      }
      sub_100005D2C((_OWORD *)(*(_QWORD *)(v18 + 56) + 32 * v16), v29);
      sub_100058F2C(v16, v18);
      v19 = *v3;
      *v3 = (_TtC14softposreaderd12RemoteReader *)v18;
      swift_bridgeObjectRelease(v19, v20, v21, v22, v23, v24, v25, v26);
    }
    else
    {
      memset(v29, 0, sizeof(v29));
    }
    sub_10005218C((uint64_t)v29, &qword_1001B12E0);
  }
}

uint64_t sub_1000E95E0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  __int128 v37;
  __int128 v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003A2C(&qword_1001B25E0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v10 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v11 = ~(-1 << v9);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v9 + 63) >> 6;
    v14 = v7 + 64;
    result = swift_retain();
    v16 = 0;
    while (1)
    {
      if (v12)
      {
        v23 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v24 = v23 | (v16 << 6);
      }
      else
      {
        v25 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        if (v25 >= v13)
          goto LABEL_36;
        v26 = v10[v25];
        ++v16;
        if (!v26)
        {
          v16 = v25 + 1;
          if (v25 + 1 >= v13)
            goto LABEL_36;
          v26 = v10[v16];
          if (!v26)
          {
            v27 = v25 + 2;
            if (v27 >= v13)
            {
LABEL_36:
              swift_release(v5);
              if ((a2 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v36;
                goto LABEL_43;
              }
              v35 = 1 << *(_BYTE *)(v5 + 32);
              if (v35 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v10 = -1 << v35;
              v3 = v36;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v26 = v10[v27];
            if (!v26)
            {
              while (1)
              {
                v16 = v27 + 1;
                if (__OFADD__(v27, 1))
                  goto LABEL_45;
                if (v16 >= v13)
                  goto LABEL_36;
                v26 = v10[v16];
                ++v27;
                if (v26)
                  goto LABEL_33;
              }
            }
            v16 = v27;
          }
        }
LABEL_33:
        v12 = (v26 - 1) & v26;
        v24 = __clz(__rbit64(v26)) + (v16 << 6);
      }
      v32 = 16 * v24;
      v33 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + v32);
      v37 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v32);
      v38 = v33;
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v32 + 8);
      if ((a2 & 1) == 0)
      {
        sub_100005D9C(v33, *((unint64_t *)&v33 + 1));
        sub_100005D9C(v37, *((unint64_t *)&v37 + 1));
      }
      Hasher.init(_seed:)(v39);
      Data.hash(into:)(v39, v38, v34);
      result = Hasher._finalize()();
      v17 = -1 << *(_BYTE *)(v8 + 32);
      v18 = result & ~v17;
      v19 = v18 >> 6;
      if (((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6))) != 0)
      {
        v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
        v21 = v38;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v17) >> 6;
        v21 = v38;
        do
        {
          if (++v19 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v30 = v19 == v29;
          if (v19 == v29)
            v19 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v19);
        }
        while (v31 == -1);
        v20 = __clz(__rbit64(~v31)) + (v19 << 6);
      }
      *(_QWORD *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      v22 = 16 * v20;
      *(_OWORD *)(*(_QWORD *)(v8 + 48) + v22) = v21;
      *(_OWORD *)(*(_QWORD *)(v8 + 56) + v22) = v37;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_43:
  *v3 = v8;
  return result;
}

Swift::Int sub_1000E98F4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  unint64_t v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];
  _BYTE v40[40];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003A2C(&qword_1001B25F8);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v18 = v17 | (v14 << 6);
      goto LABEL_25;
    }
    v19 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v19 >= v36)
      break;
    v20 = (_QWORD *)(v5 + 64);
    v21 = *(_QWORD *)(v37 + 8 * v19);
    ++v14;
    if (!v21)
    {
      v14 = v19 + 1;
      if (v19 + 1 >= v36)
        goto LABEL_37;
      v21 = *(_QWORD *)(v37 + 8 * v14);
      if (!v21)
      {
        v22 = v19 + 2;
        if (v22 >= v36)
        {
LABEL_37:
          swift_release(v5);
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v21 = *(_QWORD *)(v37 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            v14 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_46;
            if (v14 >= v36)
              goto LABEL_37;
            v21 = *(_QWORD *)(v37 + 8 * v14);
            ++v22;
            if (v21)
              goto LABEL_24;
          }
        }
        v14 = v22;
      }
    }
LABEL_24:
    v11 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v14 << 6);
LABEL_25:
    v23 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
    v25 = *v23;
    v24 = v23[1];
    v26 = *(_QWORD *)(v5 + 56) + 40 * v18;
    if ((v38 & 1) != 0)
    {
      sub_100059104(v26, (uint64_t)v40);
    }
    else
    {
      sub_1000BDF04(v26, (uint64_t)v40);
      swift_bridgeObjectRetain(v24);
    }
    Hasher.init(_seed:)(v39);
    String.hash(into:)(v39, v25, v24);
    result = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(v8 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v12 + 8 * v29);
      }
      while (v33 == -1);
      v15 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
    *v16 = v25;
    v16[1] = v24;
    result = sub_100059104((uint64_t)v40, *(_QWORD *)(v8 + 56) + 40 * v15);
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v20 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v20, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v20 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1000E9C18(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003A2C(&qword_1001B25C8);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_36;
      v24 = *(_QWORD *)(v38 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v37)
              goto LABEL_36;
            v24 = *(_QWORD *)(v38 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      v34 = v33;
    }
    Hasher.init(_seed:)(v40);
    String.hash(into:)(v40, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1000E9F24(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  Swift::Int result;
  int64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  _QWORD v45[9];

  v3 = v2;
  v6 = type metadata accessor for StopWatch(0);
  v43 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_100003A2C(&qword_1001B25C0);
  v44 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_43;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v42 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v40 = v3;
  v41 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain(v9);
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v22 = v21 | (v18 << 6);
      goto LABEL_24;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v41)
      break;
    v24 = v42;
    v25 = v42[v23];
    ++v18;
    if (!v25)
    {
      v18 = v23 + 1;
      if (v23 + 1 >= v41)
        goto LABEL_36;
      v25 = v42[v18];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v41)
        {
LABEL_36:
          swift_release(v9);
          v3 = v40;
          if ((v44 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v42[v26];
        if (!v25)
        {
          while (1)
          {
            v18 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v18 >= v41)
              goto LABEL_36;
            v25 = v42[v18];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v18 = v26;
      }
    }
LABEL_23:
    v15 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_24:
    v27 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * v22);
    v29 = *v27;
    v28 = v27[1];
    v30 = *(_QWORD *)(v43 + 72);
    v31 = *(_QWORD *)(v9 + 56) + v30 * v22;
    if ((v44 & 1) != 0)
    {
      sub_10004E2A4(v31, (uint64_t)v8);
    }
    else
    {
      sub_1000ECD6C(v31, (uint64_t)v8);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)(v45);
    String.hash(into:)(v45, v29, v28);
    result = Hasher._finalize()();
    v32 = -1 << *(_BYTE *)(v11 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v16 + 8 * (v33 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v16 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v16 + 8 * v34);
      }
      while (v38 == -1);
      v19 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v11 + 48) + 16 * v19);
    *v20 = v29;
    v20[1] = v28;
    result = sub_10004E2A4((uint64_t)v8, *(_QWORD *)(v11 + 56) + v30 * v19);
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release(v9);
  v3 = v40;
  v24 = v42;
  if ((v44 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v9 + 32);
  if (v39 >= 64)
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v39;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_43:
  result = swift_release(v9);
  *v3 = v11;
  return result;
}

Swift::Int sub_1000EA28C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  __int128 v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003A2C(&qword_1001B2678);
  v7 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v9 = v8;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = v3;
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v10 + 63) >> 6;
    v13 = v8 + 64;
    result = swift_retain(v5);
    v15 = 0;
    while (1)
    {
      if (v12)
      {
        v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v23 = v22 | (v15 << 6);
      }
      else
      {
        v24 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v24 >= v37)
          goto LABEL_36;
        v25 = v38[v24];
        ++v15;
        if (!v25)
        {
          v15 = v24 + 1;
          if (v24 + 1 >= v37)
            goto LABEL_36;
          v25 = v38[v15];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v37)
            {
LABEL_36:
              swift_release(v5);
              v3 = v36;
              if ((v7 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v5 + 32);
                if (v35 >= 64)
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v35;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v25 = v38[v26];
            if (!v25)
            {
              while (1)
              {
                v15 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_43;
                if (v15 >= v37)
                  goto LABEL_36;
                v25 = v38[v15];
                ++v26;
                if (v25)
                  goto LABEL_33;
              }
            }
            v15 = v26;
          }
        }
LABEL_33:
        v12 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }
      v31 = 16 * v23;
      v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
      v34 = *v32;
      v33 = v32[1];
      v39 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v31);
      if ((v7 & 1) == 0)
      {
        swift_bridgeObjectRetain(v33);
        swift_unknownObjectRetain(v39);
      }
      Hasher.init(_seed:)(v40);
      String.hash(into:)(v40, v34, v33);
      result = Hasher._finalize()();
      v16 = -1 << *(_BYTE *)(v9 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v18 == v28;
          if (v18 == v28)
            v18 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 16 * v19;
      v21 = (_QWORD *)(*(_QWORD *)(v9 + 48) + v20);
      *v21 = v34;
      v21[1] = v33;
      *(_OWORD *)(*(_QWORD *)(v9 + 56) + v20) = v39;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v9;
  return result;
}

uint64_t sub_1000EA594(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char v34;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003A2C(&qword_1001B2630);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = a2;
    v33 = v3;
    v9 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v31 = -1 << v11;
    v32 = v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        v17 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v18 = v17 | (v9 << 6);
      }
      else
      {
        v19 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v19 >= v14)
          goto LABEL_34;
        v20 = v10[v19];
        ++v9;
        if (!v20)
        {
          v9 = v19 + 1;
          if (v19 + 1 >= v14)
            goto LABEL_34;
          v20 = v10[v9];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v14)
            {
LABEL_34:
              if ((v34 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v33;
                goto LABEL_41;
              }
              if (v32 >= 64)
                bzero((void *)(v5 + 64), 8 * v14);
              else
                *v10 = v31;
              v3 = v33;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v10[v21];
            if (!v20)
            {
              while (1)
              {
                v9 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_43;
                if (v9 >= v14)
                  goto LABEL_34;
                v20 = v10[v9];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v9 = v21;
          }
        }
LABEL_24:
        v13 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v9 << 6);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v18);
      v23 = *(_WORD *)(*(_QWORD *)(v5 + 56) + 2 * v18);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v22);
      v24 = -1 << *(_BYTE *)(v8 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v15 + 8 * (v25 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v15 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v15 + 8 * v26);
        }
        while (v30 == -1);
        v16 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v16) = v22;
      *(_WORD *)(*(_QWORD *)(v8 + 56) + 2 * v16) = v23;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_41:
  *v3 = v8;
  return result;
}

void sub_1000EA830(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  void *v21;
  _OWORD *v22;
  id v23;
  uint64_t v24;
  _TtC14softposreaderd12RemoteReader *v25;
  _TtC14softposreaderd12RemoteReader *v26;
  Swift::Int v27;
  SEL v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  char v45;
  _QWORD v46[9];
  _OWORD v47[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003A2C(&qword_1001B2620);
  v45 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v44 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v43 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain();
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_25;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return;
    }
    if (v17 >= v43)
      break;
    v18 = (_QWORD *)(v5 + 64);
    v19 = *(_QWORD *)(v44 + 8 * v17);
    ++v13;
    if (!v19)
    {
      v13 = v17 + 1;
      if (v17 + 1 >= v43)
        goto LABEL_37;
      v19 = *(_QWORD *)(v44 + 8 * v13);
      if (!v19)
      {
        v20 = v17 + 2;
        if (v20 >= v43)
        {
LABEL_37:
          swift_release(v5);
          if ((v45 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v19 = *(_QWORD *)(v44 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            v13 = v20 + 1;
            if (__OFADD__(v20, 1))
              goto LABEL_46;
            if (v13 >= v43)
              goto LABEL_37;
            v19 = *(_QWORD *)(v44 + 8 * v13);
            ++v20;
            if (v19)
              goto LABEL_24;
          }
        }
        v13 = v20;
      }
    }
LABEL_24:
    v11 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_25:
    v21 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v16);
    v22 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v16);
    if ((v45 & 1) != 0)
    {
      sub_100005D2C(v22, v47);
    }
    else
    {
      sub_100005D5C((uint64_t)v22, (uint64_t)v47);
      v23 = v21;
    }
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v26 = v25;
    Hasher.init(_seed:)(v46);
    String.hash(into:)(v46, v24, v26);
    v27 = Hasher._finalize()();
    swift_bridgeObjectRelease(v26, v28, v29, v30, v31, v32, v33, v34);
    v35 = -1 << *(_BYTE *)(v8 + 32);
    v36 = v27 & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v12 + 8 * (v36 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v12 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v40 = v37 == v39;
        if (v37 == v39)
          v37 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v12 + 8 * v37);
      }
      while (v41 == -1);
      v14 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v14) = v21;
    sub_100005D2C(v47, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v14));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v18 = (_QWORD *)(v5 + 64);
  if ((v45 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v42 = 1 << *(_BYTE *)(v5 + 32);
  if (v42 >= 64)
    bzero(v18, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v18 = -1 << v42;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  swift_release(v5);
  *v3 = v8;
}

uint64_t sub_1000EAB68(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  _QWORD v43[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003A2C(&qword_1001B1DD8);
  v41 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v40 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v38 = v3;
  v39 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v39)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v40 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v39)
        goto LABEL_36;
      v25 = *(_QWORD *)(v40 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v39)
        {
LABEL_36:
          swift_release(v5);
          v3 = v38;
          if ((v41 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v40 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v39)
              goto LABEL_36;
            v25 = *(_QWORD *)(v40 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(_QWORD *)(v5 + 56) + 32 * v22;
    v35 = *(_QWORD *)v34;
    v36 = *(_QWORD *)(v34 + 8);
    v42 = *(_OWORD *)(v34 + 16);
    if ((v41 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)(v43);
    String.hash(into:)(v43, v33, v32);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v17 == v28;
        if (v17 == v28)
          v17 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v30 == -1);
      v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v33;
    v19[1] = v32;
    v20 = *(_QWORD *)(v8 + 56) + 32 * v18;
    *(_QWORD *)v20 = v35;
    *(_QWORD *)(v20 + 8) = v36;
    *(_OWORD *)(v20 + 16) = v42;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v38;
  v24 = (_QWORD *)(v5 + 64);
  if ((v41 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v37 = 1 << *(_BYTE *)(v5 + 32);
  if (v37 >= 64)
    bzero(v24, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v37;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1000EAE94(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int result;
  Swift::Int v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  Swift::UInt v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int *v30;
  int64_t v31;
  _QWORD *v32;
  uint64_t v33[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003A2C(&qword_1001B2600);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v30 = v3;
    v9 = 0;
    v32 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v31 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v19 = v18 | (v9 << 6);
      }
      else
      {
        v20 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v31)
          goto LABEL_36;
        v21 = v32[v20];
        ++v9;
        if (!v21)
        {
          v9 = v20 + 1;
          if (v20 + 1 >= v31)
            goto LABEL_36;
          v21 = v32[v9];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v31)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v30;
                goto LABEL_43;
              }
              v29 = 1 << *(_BYTE *)(v5 + 32);
              if (v29 >= 64)
                bzero(v32, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v32 = -1 << v29;
              v3 = v30;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v32[v22];
            if (!v21)
            {
              while (1)
              {
                v9 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_45;
                if (v9 >= v31)
                  goto LABEL_36;
                v21 = v32[v9];
                ++v22;
                if (v21)
                  goto LABEL_33;
              }
            }
            v9 = v22;
          }
        }
LABEL_33:
        v12 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }
      v27 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v19);
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      if ((a2 & 1) == 0)
        swift_retain();
      Hasher.init(_seed:)(v33);
      Hasher._combine(_:)(v27);
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v25 = v16 == v24;
          if (v16 == v24)
            v16 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v17) = v27;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v17) = v28;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_43:
  *v3 = v8;
  return result;
}

uint64_t sub_1000EB164(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::UInt v21;
  _OWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33[9];
  _OWORD v34[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003A2C(&qword_1001B2608);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v31 = v3;
    v32 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v9 << 6);
      }
      else
      {
        v18 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v18 >= v13)
          goto LABEL_37;
        v19 = v32[v18];
        ++v9;
        if (!v19)
        {
          v9 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_37;
          v19 = v32[v9];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_37:
              if ((a2 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v31;
                goto LABEL_44;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v32 = -1 << v30;
              v3 = v31;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v32[v20];
            if (!v19)
            {
              while (1)
              {
                v9 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_46;
                if (v9 >= v13)
                  goto LABEL_37;
                v19 = v32[v9];
                ++v20;
                if (v19)
                  goto LABEL_24;
              }
            }
            v9 = v20;
          }
        }
LABEL_24:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v9 << 6);
      }
      v21 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v17);
      v22 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
        sub_100005D2C(v22, v34);
      else
        sub_100005D5C((uint64_t)v22, (uint64_t)v34);
      Hasher.init(_seed:)(v33);
      Hasher._combine(_:)(v21);
      result = Hasher._finalize()();
      v23 = -1 << *(_BYTE *)(v8 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v15) = v21;
      result = (uint64_t)sub_100005D2C(v34, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_44:
  *v3 = v8;
  return result;
}

uint64_t sub_1000EB438(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003A2C(&qword_1001B25E8);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)(v38);
    String.hash(into:)(v38, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_1000EB74C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  char v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v6 = v5;
  v12 = *v5;
  v14 = sub_10013A3F4(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1000EC5A0();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7] + 16 * v14;
      result = sub_100005DE0(*(_QWORD *)v21, *(_QWORD *)(v21 + 8));
      *(_QWORD *)v21 = a1;
      *(_QWORD *)(v21 + 8) = a2;
      return result;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v25 = (uint64_t *)(v20[6] + 16 * v14);
    *v25 = a3;
    v25[1] = a4;
    v26 = (_QWORD *)(v20[7] + 16 * v14);
    *v26 = a1;
    v26[1] = a2;
    v27 = v20[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      v20[2] = v29;
      return sub_100005D9C(a3, a4);
    }
    goto LABEL_14;
  }
  sub_1000E95E0(v17, a5 & 1);
  v23 = sub_10013A3F4(a3, a4);
  if ((v18 & 1) == (v24 & 1))
  {
    v14 = v23;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
  __break(1u);
  return result;
}

uint64_t sub_1000EB8C4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_10000ADC4(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
        return sub_1000ED998(a1, v18[7] + 40 * v12);
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1000EC764();
      goto LABEL_7;
    }
    sub_1000E98F4(v15, a4 & 1);
    v20 = sub_10000ADC4(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        return sub_1000ED998(a1, v18[7] + 40 * v12);
LABEL_11:
      sub_1000EC3E0(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain(a3);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_1000EB9EC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_10000ADC4(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1000EC94C();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];

      *(_QWORD *)(v19 + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_1000E9C18(v15, a4 & 1);
  v20 = sub_10000ADC4(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_1000EBB48(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  char v23;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_10000ADC4(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        v20 = v19 + *(_QWORD *)(*(_QWORD *)(type metadata accessor for StopWatch(0) - 8) + 72) * v12;
        return sub_1000ECD28(a1, v20);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1000ECAFC();
      goto LABEL_7;
    }
    sub_1000E9F24(v15, a4 & 1);
    v22 = sub_10000ADC4(a2, a3);
    if ((v16 & 1) == (v23 & 1))
    {
      v12 = v22;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1000EC44C(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1000EBC7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v6 = v5;
  v12 = *v5;
  v14 = sub_10000ADC4(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1000ECDB0();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = (_QWORD *)(v20[7] + 16 * v14);
      result = swift_unknownObjectRelease(*v21);
      *v21 = a1;
      v21[1] = a2;
      return result;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v25 = (uint64_t *)(v20[6] + 16 * v14);
    *v25 = a3;
    v25[1] = a4;
    v26 = (_QWORD *)(v20[7] + 16 * v14);
    *v26 = a1;
    v26[1] = a2;
    v27 = v20[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      v20[2] = v29;
      return swift_bridgeObjectRetain(a4);
    }
    goto LABEL_14;
  }
  sub_1000EA28C(v17, a5 & 1);
  v23 = sub_10000ADC4(a3, a4);
  if ((v18 & 1) == (v24 & 1))
  {
    v14 = v23;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1000EBDF0(__int16 a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v4 = v3;
  v8 = *v3;
  v10 = sub_10013A64C(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_1000ECF70();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(_WORD *)(v16[7] + 2 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_QWORD *)(v16[6] + 8 * v10) = a2;
    *(_WORD *)(v16[7] + 2 * v10) = a1;
    v18 = v16[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (!v19)
    {
      v16[2] = v20;
      return result;
    }
    goto LABEL_14;
  }
  sub_1000EA594(result, a3 & 1);
  result = sub_10013A64C(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
  __break(1u);
  return result;
}

_OWORD *sub_1000EBF18(_OWORD *a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _OWORD *result;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = sub_10013A67C(a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = (_QWORD *)(v15[7] + 32 * v9);
        sub_100005D3C(v16);
        return sub_100005D2C(a1, v16);
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_1000ED100();
      goto LABEL_7;
    }
    sub_1000EA830(v12, a3 & 1);
    v18 = sub_10013A67C(a2);
    if ((v13 & 1) == (v19 & 1))
    {
      v9 = v18;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1000EC4D4(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }
  type metadata accessor for SPRConfigurationStatusKey(0);
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
  __break(1u);
  return result;
}

uint64_t sub_1000EC038(uint64_t a1, char a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  char v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v4 = v3;
  v7 = a2 & 1;
  v8 = *v3;
  v10 = sub_10013A70C(a2 & 1);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_1000ED488();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = swift_release(*(_QWORD *)(v17 + 8 * v10));
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_BYTE *)(v16[6] + v10) = v7;
    *(_QWORD *)(v16[7] + 8 * v10) = a1;
    v19 = v16[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_1000EAE94(result, a3 & 1);
  result = sub_10013A70C(v7);
  if ((v14 & 1) == (v18 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ManagedDictionaryKey);
  __break(1u);
  return result;
}

_OWORD *sub_1000EC16C(_OWORD *a1, char a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  char v7;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v7 = a2 & 1;
  v8 = (_QWORD *)*v3;
  v10 = sub_10013A70C(a2 & 1);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_QWORD *)(v16[7] + 32 * v10);
        sub_100005D3C(v17);
        return sub_100005D2C(a1, v17);
      }
      return sub_1000EC538(v10, v7, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1000ED628();
      goto LABEL_7;
    }
    sub_1000EB164(v13, a3 & 1);
    v19 = sub_10013A70C(v7);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_1000EC538(v10, v7, a1, v16);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ManagedDictionaryKey);
  __break(1u);
  return result;
}

uint64_t sub_1000EC284(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_10000ADC4(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1000ED7E4();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_release(*(_QWORD *)(v19 + 8 * v12));
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_1000EB438(v15, a4 & 1);
  v21 = sub_10000ADC4(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1000EC3E0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_100059104(a4, a5[7] + 40 * a1);
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t sub_1000EC44C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = type metadata accessor for StopWatch(0);
  result = sub_10004E2A4(a4, v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

_OWORD *sub_1000EC4D4(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_100005D2C(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

_OWORD *sub_1000EC538(unint64_t a1, char a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_BYTE *)(a4[6] + a1) = a2 & 1;
  result = sub_100005D2C(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

void *sub_1000EC5A0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  __int128 v21;

  v1 = v0;
  sub_100003A2C(&qword_1001B25E0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v21 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v21;
    sub_100005D9C(v17, *((unint64_t *)&v17 + 1));
    result = (void *)sub_100005D9C(v21, *((unint64_t *)&v21 + 1));
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000EC764()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _BYTE v26[40];

  v1 = v0;
  sub_100003A2C(&qword_1001B25F8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release(v2);
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 40 * v15;
    sub_1000BDF04(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_100059104((uint64_t)v26, *(_QWORD *)(v4 + 56) + v20);
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_1000EC94C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100003A2C(&qword_1001B25C8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000ECAFC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;

  v1 = v0;
  v2 = type metadata accessor for StopWatch(0);
  v30 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100003A2C(&qword_1001B25C0);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release(v5);
LABEL_28:
    *v1 = v7;
    return result;
  }
  v28 = v1;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v29 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v24 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v15)
      goto LABEL_26;
    v25 = *(_QWORD *)(v29 + 8 * v24);
    ++v11;
    if (!v25)
    {
      v11 = v24 + 1;
      if (v24 + 1 >= v15)
        goto LABEL_26;
      v25 = *(_QWORD *)(v29 + 8 * v11);
      if (!v25)
        break;
    }
LABEL_25:
    v14 = (v25 - 1) & v25;
    v17 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_12:
    v18 = 16 * v17;
    v19 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
    v21 = *v19;
    v20 = v19[1];
    v22 = *(_QWORD *)(v30 + 72) * v17;
    sub_1000ECD6C(*(_QWORD *)(v5 + 56) + v22, (uint64_t)v4);
    v23 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v23 = v21;
    v23[1] = v20;
    sub_10004E2A4((uint64_t)v4, *(_QWORD *)(v7 + 56) + v22);
    result = (void *)swift_bridgeObjectRetain();
  }
  v26 = v24 + 2;
  if (v26 >= v15)
  {
LABEL_26:
    result = (void *)swift_release(v5);
    v1 = v28;
    goto LABEL_28;
  }
  v25 = *(_QWORD *)(v29 + 8 * v26);
  if (v25)
  {
    v11 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v11 >= v15)
      goto LABEL_26;
    v25 = *(_QWORD *)(v29 + 8 * v11);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1000ECD28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StopWatch(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000ECD6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StopWatch(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *sub_1000ECDB0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  __int128 v24;

  v1 = v0;
  sub_100003A2C(&qword_1001B2678);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v24 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain(v18);
    result = (void *)swift_unknownObjectRetain(v24);
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000ECF70()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;

  v1 = v0;
  sub_100003A2C(&qword_1001B2630);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v23 = __clz(__rbit64(v21));
    v12 = (v21 - 1) & v21;
    v15 = v23 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 2 * v15;
    v19 = *(_WORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_WORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1000ED100()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _OWORD v22[2];

  v1 = v0;
  sub_100003A2C(&qword_1001B2620);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    sub_100005D5C(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    sub_100005D2C(v22, (_OWORD *)(*(_QWORD *)(v4 + 56) + v18));
    result = v17;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000ED2C4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  __int128 v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  v1 = v0;
  sub_100003A2C(&qword_1001B1DD8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      v9 = v27 + 1;
      if (v27 + 1 >= v13)
        goto LABEL_26;
      v28 = *(_QWORD *)(v6 + 8 * v9);
      if (!v28)
        break;
    }
LABEL_25:
    v12 = (v28 - 1) & v28;
    v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)v21;
    v23 = *(_QWORD *)(v21 + 8);
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v25 = *(_OWORD *)(v21 + 16);
    *v24 = v19;
    v24[1] = v18;
    v26 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v26 = v22;
    *(_QWORD *)(v26 + 8) = v23;
    *(_OWORD *)(v26 + 16) = v25;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v29 = v27 + 2;
  if (v29 >= v13)
    goto LABEL_26;
  v28 = *(_QWORD *)(v6 + 8 * v29);
  if (v28)
  {
    v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v9);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000ED488()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v1 = v0;
  sub_100003A2C(&qword_1001B2600);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    result = (void *)swift_retain();
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000ED628()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _OWORD v20[2];

  v1 = v0;
  sub_100003A2C(&qword_1001B2608);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    sub_100005D5C(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v20);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = v16;
    result = sub_100005D2C(v20, (_OWORD *)(*(_QWORD *)(v4 + 56) + 32 * v15));
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000ED7E4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100003A2C(&qword_1001B25E8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1000ED998(uint64_t a1, uint64_t a2)
{
  assignWithTake for Depot.Element(a2, a1);
  return a2;
}

unint64_t sub_1000ED9D4(_QWORD *a1)
{
  return sub_1000EDAB0(a1, &qword_1001B26A0, sub_10013A38C);
}

unint64_t sub_1000ED9E8(_QWORD *a1)
{
  return sub_1000EDAB0(a1, &qword_1001B2658, sub_10013A38C);
}

unint64_t sub_1000ED9FC(_QWORD *a1)
{
  return sub_1000EDAB0(a1, &qword_1001B2698, sub_10013A38C);
}

unint64_t sub_1000EDA10(_QWORD *a1)
{
  return sub_1000EDAB0(a1, &qword_1001B26B0, sub_10013A38C);
}

unint64_t sub_1000EDA24(_QWORD *a1)
{
  return sub_1000EDAB0(a1, &qword_1001B2660, sub_10013A38C);
}

unint64_t sub_1000EDA38(_QWORD *a1)
{
  return sub_1000EDAB0(a1, &qword_1001B2668, (uint64_t (*)(uint64_t))sub_10013A38C);
}

unint64_t sub_1000EDA4C(_QWORD *a1)
{
  return sub_1000EDAB0(a1, &qword_1001B26B8, sub_10013A38C);
}

unint64_t sub_1000EDA60(_QWORD *a1)
{
  return sub_1000EDAB0(a1, &qword_1001B2670, sub_10013A38C);
}

unint64_t sub_1000EDA74(_QWORD *a1)
{
  return sub_1000EDAB0(a1, &qword_1001B26C0, sub_10013A38C);
}

unint64_t sub_1000EDA88(_QWORD *a1)
{
  return sub_1000EDAB0(a1, &qword_1001B26A8, sub_10013A38C);
}

unint64_t sub_1000EDA9C(_QWORD *a1)
{
  return sub_1000EDAB0(a1, &qword_1001B26C8, sub_10013A38C);
}

unint64_t sub_1000EDAB0(_QWORD *a1, uint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;

  v3 = a1[2];
  if (!v3)
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  sub_100003A2C(a2);
  v6 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v3);
  v7 = a1[4];
  v8 = a1[5];
  v9 = a1[6];
  result = a3(v7);
  if ((v11 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain(v9);
    return (unint64_t)v6;
  }
  v12 = a1 + 9;
  while (1)
  {
    *(_QWORD *)((char *)v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v6[6] + 8 * result) = v7;
    v13 = (_QWORD *)(v6[7] + 16 * result);
    *v13 = v8;
    v13[1] = v9;
    v14 = v6[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      break;
    v6[2] = v16;
    if (!--v3)
      goto LABEL_8;
    v17 = v12 + 3;
    v7 = *(v12 - 2);
    v8 = *(v12 - 1);
    v18 = *v12;
    swift_bridgeObjectRetain(v9);
    result = a3(v7);
    v12 = v17;
    v9 = v18;
    if ((v19 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_1000EDBBC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _WORD *i;
  uint64_t v5;
  __int16 v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100003A2C(&qword_1001B2630);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (i = (_WORD *)(a1 + 40); ; i += 8)
    {
      v5 = *((_QWORD *)i - 1);
      v6 = *i;
      result = sub_10013A64C(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      *(_WORD *)(v3[7] + 2 * result) = v6;
      v9 = v3[2];
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (v10)
        goto LABEL_10;
      v3[2] = v11;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_1000EDC90(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t i;
  char v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  char v11[8];
  __int128 v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100003A2C(&qword_1001B2608);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (i = a1 + 32; ; i += 40)
    {
      sub_100005EB4(i, (uint64_t)v11, &qword_1001B2680);
      v5 = v11[0];
      result = sub_10013A70C(v11[0]);
      if ((v7 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_BYTE *)(v3[6] + result) = v5;
      result = (unint64_t)sub_100005D2C(&v12, (_OWORD *)(v3[7] + 32 * result));
      v8 = v3[2];
      v9 = __OFADD__(v8, 1);
      v10 = v8 + 1;
      if (v9)
        goto LABEL_10;
      v3[2] = v10;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_1000EDD90(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  char v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  sub_100003A2C(&qword_1001B2600);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  result = sub_10013A70C(v4);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain(v5);
    return (unint64_t)v3;
  }
  v8 = (_QWORD *)(a1 + 56);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v4;
    *(_QWORD *)(v3[7] + 8 * result) = v5;
    v9 = v3[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      break;
    v3[2] = v11;
    if (!--v1)
      goto LABEL_8;
    v12 = v8 + 2;
    v4 = *((_BYTE *)v8 - 8);
    v13 = *v8;
    swift_retain(v5);
    result = sub_10013A70C(v4);
    v8 = v12;
    v5 = v13;
    if ((v14 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000EDE94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = enum case for DispatchTimeInterval.never(_:);
  v3 = type metadata accessor for DispatchTimeInterval(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t sub_1000EDED8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = 0;
  v2 = enum case for DispatchTimeInterval.nanoseconds(_:);
  v3 = type metadata accessor for DispatchTimeInterval(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t sub_1000EDF20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B26D0);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B26D0);
  if (qword_1001AD150 != -1)
    swift_once(&qword_1001AD150, sub_1000CC47C);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4DE0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1000EDFB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for OSSignposter(0);
  sub_1000039D4(v0, qword_1001B26E8);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B26E8);
  if (qword_1001ACF18 != -1)
    swift_once(&qword_1001ACF18, sub_10003BA04);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4B40);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1000EE040(uint64_t a1)
{
  return sub_100052DC8(a1, 0xD00000000000001ELL, 0x800000010016F770, &qword_1001B4F00, (unint64_t *)algn_1001B4F08);
}

uint64_t sub_1000EE068(uint64_t a1)
{
  return sub_100052DC8(a1, 0x6975752D746F6F62, 0xE900000000000064, &qword_1001B4F10, (unint64_t *)algn_1001B4F18);
}

uint64_t sub_1000EE090()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  void *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t aBlock[6];

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v22 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001AD1C8 != -1)
    swift_once(&qword_1001AD1C8, sub_1000EDF20);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_100003A14(v9, (uint64_t)qword_1001B26D0);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v20 = v2;
    v21 = v3;
    v15 = v14;
    aBlock[0] = v14;
    *(_DWORD *)v13 = 136315138;
    v23 = sub_1000056EC(0x74696E696564, 0xE600000000000000, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, aBlock, v13 + 4, v13 + 12);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s", v13, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    v16 = v15;
    v2 = v20;
    v3 = v21;
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }

  ObjectType = swift_getObjectType(*(_QWORD *)(v1 + 32));
  aBlock[4] = (uint64_t)BitString.init(data:unusedBits:);
  aBlock[5] = 0;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000043B8;
  aBlock[3] = (uint64_t)&unk_10019F2B8;
  v18 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v18);
  sub_1000043E4();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v8, v5, v18, ObjectType);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v6);
  swift_getObjectType(*(_QWORD *)(v1 + 32));
  OS_dispatch_source.cancel()();
  if ((*(_BYTE *)(v1 + 16) & 1) == 0)
    OS_dispatch_source.resume()();

  swift_unknownObjectRelease(*(_QWORD *)(v1 + 32));
  sub_100005D3C((_QWORD *)(v1 + 64));
  sub_100005D3C((_QWORD *)(v1 + 104));
  sub_100005D3C((_QWORD *)(v1 + 144));
  swift_unknownObjectRelease(*(_QWORD *)(v1 + 184));
  sub_100005D3C((_QWORD *)(v1 + 200));
  sub_100005D3C((_QWORD *)(v1 + 240));
  sub_100005D3C((_QWORD *)(v1 + 280));
  swift_release(*(_QWORD *)(v1 + 320));
  sub_100005D3C((_QWORD *)(v1 + 328));
  return v1;
}

uint64_t sub_1000EE3B0()
{
  uint64_t v0;

  sub_1000EE090();
  return swift_deallocClassInstance(v0, 368, 7);
}

uint64_t type metadata accessor for MPOCDefaultMonitorManager()
{
  return objc_opt_self(_TtC9SPREngine25MPOCDefaultMonitorManager);
}

_QWORD *sub_1000EE3F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v1 = v0;
  if (qword_1001AD1C8 != -1)
    swift_once(&qword_1001AD1C8, sub_1000EDF20);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100003A14(v2, (uint64_t)qword_1001B26D0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v10 = v7;
    *(_DWORD *)v6 = 136315138;
    v9 = sub_1000056EC(0x63746142646E6573, 0xEB00000000292868, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v6 + 4, v6 + 12);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }

  return OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_1000F8B74, v1, &type metadata for () + 1);
}

uint64_t sub_1000EE590(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _TtC14softposreaderd12RemoteReader *v21;
  _QWORD aBlock[5];
  _QWORD *v23;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(v2 + 24);
  v13 = (_QWORD *)swift_allocObject(&unk_10019F278, 40, 7);
  v13[2] = v2;
  v13[3] = a1;
  v13[4] = a2;
  aBlock[4] = sub_1000F8B24;
  v23 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000043B8;
  aBlock[3] = &unk_10019F290;
  v14 = _Block_copy(aBlock);
  swift_retain();
  v15 = swift_retain();
  static DispatchQoS.unspecified.getter(v15);
  v21 = &_swiftEmptyArrayStorage;
  v16 = sub_100005F1C((unint64_t *)&qword_1001B1260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_100003A2C((uint64_t *)&unk_1001AE400);
  v18 = sub_100005F5C((unint64_t *)&qword_1001B1270, (uint64_t *)&unk_1001AE400);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v17, v18, v5, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release(v23);
}

void sub_1000EE788(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, _QWORD, uint64_t);
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t ObjectType;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;

  v3 = v2;
  v4 = v1;
  v6 = type metadata accessor for DispatchTimeInterval(0);
  v7 = *(_QWORD *)(v6 - 8);
  v43 = v6;
  v44 = v7;
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&ObjectType - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&ObjectType - v11;
  v13 = type metadata accessor for DispatchTime(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&ObjectType - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&ObjectType - v18;
  if ((*(_BYTE *)(v4 + 40) & 1) != 0)
  {
    if (qword_1001AD1C8 != -1)
      swift_once(&qword_1001AD1C8, sub_1000EDF20);
    v20 = type metadata accessor for Logger(0);
    v21 = sub_100003A14(v20, (uint64_t)qword_1001B26D0);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Cannot send logs when device is not online.", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    v25 = sub_1000F8478();
    v26 = swift_allocError(&type metadata for MPOCMonitorManagerError, v25, 0, 0);
    *(_QWORD *)v27 = 0;
    *(_BYTE *)(v27 + 8) = 1;
    swift_willThrow(v26);
  }
  else
  {
    sub_1000EEB58(a1 & 1);
    if (!v2)
    {
      if (*(_BYTE *)(v4 + 16) == 1)
      {
        v29 = *(_QWORD *)(v4 + 32);
        v42 = v28;
        ObjectType = swift_getObjectType(v29);
        static DispatchTime.now()(ObjectType);
        + infix(_:_:)(v17);
        v41 = *(void (**)(char *, uint64_t))(v14 + 8);
        v41(v17, v13);
        v30 = v43;
        v31 = *(void (**)(char *, _QWORD, uint64_t))(v44 + 104);
        v31(v12, enum case for DispatchTimeInterval.never(_:), v43);
        *(_QWORD *)v10 = 0;
        v31(v10, enum case for DispatchTimeInterval.nanoseconds(_:), v30);
        OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v19, v12, v10, ObjectType);
        v32 = *(void (**)(char *, uint64_t))(v44 + 8);
        v32(v10, v30);
        v32(v12, v30);
        v41(v19, v13);
        v28 = v42;
      }
      if (!v28)
      {
        sub_100005EF8((_QWORD *)(*(_QWORD *)(v4 + 320) + 16), *(_QWORD *)(*(_QWORD *)(v4 + 320) + 40));
        sub_10003964C((uint64_t)&off_100199230);
        return;
      }
      v3 = v28;
      sub_100005EF8((_QWORD *)(*(_QWORD *)(v4 + 320) + 16), *(_QWORD *)(*(_QWORD *)(v4 + 320) + 40));
      swift_errorRetain();
      sub_10003964C((uint64_t)&off_100199208);
      swift_willThrow(v33);
      swift_errorRelease();
    }
    v47 = v3;
    swift_errorRetain();
    v34 = sub_100003A2C((uint64_t *)&unk_1001B1280);
    if (swift_dynamicCast(&v45, &v47, v34, &type metadata for MPOCMonitorBackendError, 0))
    {
      swift_errorRelease();
      v35 = v45;
      v36 = v46;
      if (v46 == 1)
        v35 = qword_100162038[v45];
      v37 = sub_1000F8478();
      v38 = swift_allocError(&type metadata for MPOCMonitorManagerError, v37, 0, 0);
      *(_QWORD *)v39 = v35;
      *(_BYTE *)(v39 + 8) = v36;
      swift_willThrow(v38);
    }
    swift_errorRelease();
  }
}

double sub_1000EEB58(int a1)
{
  uint64_t *v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint8_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  char *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 v52;
  _TtC14softposreaderd12RemoteReader *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  __int128 v66;
  char *v67;
  uint64_t v68;
  NSObject *v69;
  os_signpost_type_t v70;
  char v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  char *v74;
  uint64_t v75;
  uint8_t *v76;
  os_signpost_id_t v77;
  uint8_t *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  void (*v86)(char *, uint64_t);
  const void *v87;
  unint64_t v88;
  uint64_t v89;
  void *v90;
  void *v91;
  NSObject *v92;
  char *v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t (*v99)(char *, uint64_t);
  uint64_t v100;
  int v101;
  const char *v102;
  char *v103;
  uint64_t v104;
  uint8_t *v105;
  os_signpost_id_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  NSObject *v113;
  os_log_type_t v114;
  uint8_t *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _TtC14softposreaderd12RemoteReader *v119;
  SEL v120;
  id v121;
  id v122;
  id v123;
  id v124;
  id v125;
  id v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  _BOOL4 v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  void (*v151)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  char *v159;
  _QWORD *v160;
  uint64_t *v161;
  char *v162;
  char *v163;
  char *v164;
  _QWORD *v165;
  int v166;
  _QWORD *v167;
  _BYTE *v168;
  uint64_t v169;
  uint64_t v170;
  void **p_assignWithTake;
  unsigned __int8 v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t (*v175)(void);
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  Swift::String v179;
  _TtC14softposreaderd12RemoteReader *v180;
  uint64_t *v181;
  _QWORD *v182;
  id v183;
  uint64_t v184;
  uint64_t v185;
  const char *v186;
  void *v187;
  void *v188;
  void *v189;
  void *v190;
  void *v191;
  void *v192;
  unsigned __int8 v193;
  _TtC14softposreaderd12RemoteReader *v194;
  id v195;
  uint64_t v196;
  uint64_t v197;
  SEL v198;
  id v199;
  id v200;
  id v201;
  id v202;
  id v203;
  id v204;
  uint64_t v205;
  uint64_t v206;
  NSObject *v207;
  os_log_type_t v208;
  uint8_t *v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  unsigned __int8 v213;
  _TtC14softposreaderd12RemoteReader *v214;
  id v215;
  uint64_t v216;
  uint64_t v217;
  const char *v218;
  void *v219;
  void *v220;
  void *v221;
  void *v222;
  void *v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  NSObject *v227;
  os_log_type_t v228;
  uint64_t v229;
  uint64_t *v230;
  uint64_t v231;
  uint64_t v232;
  char v233;
  char v234;
  char v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  NSObject *v241;
  os_log_type_t v242;
  uint8_t *v243;
  double v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  NSObject *v250;
  os_log_type_t v251;
  uint8_t *v252;
  char *v253;
  uint64_t v254;
  double v255;
  double v256;
  double v257;
  char *v258;
  uint64_t v259;
  double v260;
  double v261;
  uint64_t v262;
  uint64_t v263;
  SEL v264;
  id v265;
  id v266;
  id v267;
  id v268;
  id v269;
  id v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  NSObject *v278;
  os_log_type_t v279;
  _BOOL4 v280;
  uint64_t v281;
  uint64_t *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  void (*v288)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  NSObject *v293;
  os_log_type_t v294;
  uint8_t *v295;
  uint64_t v296;
  uint64_t *v297;
  uint64_t v298;
  uint64_t *v299;
  uint64_t v300;
  uint64_t v301;
  unsigned __int8 v302;
  _TtC14softposreaderd12RemoteReader *v303;
  uint64_t *v304;
  id v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  const char *v309;
  void *v310;
  void *v311;
  void *v312;
  void *v313;
  void *v314;
  void *v315;
  uint64_t v316;
  uint64_t v317;
  NSObject *v318;
  os_log_type_t v319;
  uint8_t *v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  _QWORD *v324;
  _QWORD *v325;
  _QWORD *v326;
  char *v327;
  __int128 v328;
  int v329;
  uint64_t v330;
  uint64_t v331;
  __int128 v332;
  uint64_t *v333;
  _BYTE *v334;
  _BYTE *v335;
  __int128 v336;
  _BYTE *v337;
  _QWORD *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  _QWORD *v342;
  _QWORD *v343;
  char *v344;
  int v345;
  char *v346;
  char *v347;
  uint64_t v348;
  _QWORD *v349;
  uint64_t v350;
  uint64_t v351;
  char *v352;
  uint64_t v353;
  char *v354;
  uint64_t v355;
  char *v356;
  int v357;
  char *v358;
  _QWORD *v359;
  char *v360;
  char *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  char *v371;
  char *v372;
  char *v373;
  uint64_t *v374;
  _BYTE v375[321];
  _QWORD v376[41];
  _OWORD v377[17];
  _QWORD v378[37];
  _BYTE v379[296];
  _BYTE v380[296];
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  _QWORD v384[41];
  _QWORD v385[41];
  uint64_t v386;
  uint64_t v387;
  _BYTE v388[296];
  _BYTE v389[296];
  _BYTE v390[328];
  _BYTE v391[328];
  _BYTE v392[296];
  _BYTE v393[272];
  _BYTE v394[296];

  v357 = a1;
  v3 = sub_100003A2C(&qword_1001AD9E0);
  v4 = __chkstk_darwin(v3);
  v355 = (uint64_t)&v326 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v348 = (uint64_t)&v326 - v6;
  v8 = type metadata accessor for Date(0, v7);
  v365 = *(_QWORD *)(v8 - 8);
  v366 = v8;
  v9 = __chkstk_darwin(v8);
  v352 = (char *)&v326 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v347 = (char *)&v326 - v12;
  __chkstk_darwin(v11);
  v356 = (char *)&v326 - v13;
  v14 = type metadata accessor for DateInterval(0);
  v350 = *(_QWORD *)(v14 - 8);
  v351 = v14;
  __chkstk_darwin(v14);
  v360 = (char *)&v326 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v353 = type metadata accessor for OSSignpostError(0);
  v362 = *(_QWORD *)(v353 - 8);
  __chkstk_darwin(v353);
  v361 = (char *)&v326 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v370 = type metadata accessor for OSSignpostID(0);
  v368 = *(_QWORD *)(v370 - 8);
  v17 = __chkstk_darwin(v370);
  v19 = (char *)&v326 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v326 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v326 - v23;
  v25 = v1[28];
  v26 = v1[29];
  sub_100005EF8(v1 + 25, v25);
  v27 = v373;
  v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 16))(v25, v26);
  v373 = (char *)(v1 + 25);
  v374 = v1;
  if (v27)
  {
    v30 = (char *)(v1 + 25);
    if (qword_1001AD1C8 != -1)
      swift_once(&qword_1001AD1C8, sub_1000EDF20);
    v31 = type metadata accessor for Logger(0);
    v32 = sub_100003A14(v31, (uint64_t)qword_1001B26D0);
    swift_errorRetain();
    v33 = swift_errorRetain();
    v372 = (char *)v32;
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.info.getter();
    v36 = os_log_type_enabled(v34, v35);
    v371 = v27;
    if (v36)
    {
      v37 = (uint8_t *)swift_slowAlloc(12, -1);
      v38 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v37 = 138412290;
      swift_errorRetain();
      v39 = _swift_stdlib_bridgeErrorToNSError(v27);
      v386 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v386, &v387, v37 + 4, v37 + 12);
      *v38 = v39;
      v30 = v373;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Could not collect batch: %@.", v37, 0xCu);
      v40 = sub_100003A2C((uint64_t *)&unk_1001AE430);
      swift_arrayDestroy(v38, 1, v40);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v37, -1, -1);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    v45 = v374;
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Attempting to remove the stored files.", v49, 2u);
      swift_slowDealloc(v49, -1, -1);
    }

    v50 = v45[28];
    v51 = v45[29];
    sub_100005EF8(v30, v50);
    (*(void (**)(uint64_t, uint64_t))(v51 + 32))(v50, v51);
    if (qword_1001AD110 != -1)
      swift_once(&qword_1001AD110, sub_1000BE4F4);
    v52 = byte_1001B4D8E;
    v53 = (_TtC14softposreaderd12RemoteReader *)sub_1000046DC((uint64_t)&_swiftEmptyArrayStorage);
    sub_100005EF8(v45 + 35, v45[38]);
    v54 = sub_1000BB2E8(v52);
    v55 = v45[28];
    v56 = v45[29];
    sub_100005EF8(v30, v55);
    (*(void (**)(uint64_t, id, _TtC14softposreaderd12RemoteReader *, uint64_t, uint64_t))(v56 + 8))(4326145, v54, v53, v55, v56);
    swift_bridgeObjectRelease(v53, v264, v265, v266, v267, v268, v269, v270);
    v271 = sub_1000F8478();
    v272 = swift_allocError(&type metadata for MPOCMonitorManagerError, v271, 0, 0);
    *(_QWORD *)v273 = 11;
    *(_BYTE *)(v273 + 8) = 1;
    swift_willThrow(v272);
    swift_errorRelease();
    return v2;
  }
  v372 = v24;
  v358 = v22;
  v344 = v19;
  if (!v28)
  {
    if (qword_1001AD1C8 != -1)
      swift_once(&qword_1001AD1C8, sub_1000EDF20);
    v57 = type metadata accessor for Logger(0);
    v58 = sub_100003A14(v57, (uint64_t)qword_1001B26D0);
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v59, v60))
    {
      v61 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v61 = 0;
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "No monitoring events to send.", v61, 2u);
      swift_slowDealloc(v61, -1, -1);
    }

    v62 = sub_1000F8478();
    v63 = swift_allocError(&type metadata for MPOCMonitorManagerError, v62, 0, 0);
    *(_QWORD *)v64 = 1;
    *(_BYTE *)(v64 + 8) = 1;
    swift_willThrow(v63);
    return v2;
  }
  v367 = v29;
  v41 = (_QWORD *)swift_retain(v28);
  v42 = v374;
  v43 = sub_1000F1BA8(v41);
  v44 = 0;
  v338 = v41;
  v371 = v43;
  v65 = *((double *)v42 + 6);
  sub_1000F82B8((uint64_t)v389);
  sub_100024374((uint64_t)v389, (uint64_t)v388, &qword_1001B28F8);
  if (qword_1001AD1D0 != -1)
    swift_once(&qword_1001AD1D0, sub_1000EDFB0);
  v354 = (char *)&v376[38] + 2;
  v342 = v42 + 35;
  v343 = v42 + 13;
  v341 = type metadata accessor for OSSignposter(0);
  v369 = 0;
  v364 = 0;
  v329 = enum case for OSSignpostError.doubleEnd(_:);
  v337 = (char *)&v378[36] + 1;
  v330 = *(_QWORD *)&v65 & 0xFFFFFFFFFFFFFLL;
  v331 = *(_QWORD *)&v65 & 0x7FF0000000000000;
  v335 = &v375[16];
  v333 = &v382;
  v334 = &v375[320];
  v349 = &v376[2];
  v326 = &v378[34];
  *((_QWORD *)&v66 + 1) = 2;
  v336 = xmmword_10015A5F0;
  *(_QWORD *)&v66 = 138412290;
  v332 = v66;
  *(_QWORD *)&v66 = 136315138;
  v328 = v66;
  v327 = (char *)&type metadata for Any + 8;
  v2 = v65;
  v345 = 1;
  v67 = v372;
  while (1)
  {
    sub_100003A14(v341, (uint64_t)qword_1001B26E8);
    v68 = static OSSignpostID.exclusive.getter();
    v69 = OSSignposter.logHandle.getter(v68);
    v70 = static os_signpost_type_t.begin.getter();
    v71 = OS_os_log.signpostsEnabled.getter();
    v363 = v44;
    v359 = v41;
    if ((v71 & 1) != 0)
    {
      v72 = v368;
      v73 = *(void (**)(char *, char *, uint64_t))(v368 + 16);
      v74 = v358;
      v75 = v370;
      v73(v358, v372, v370);
      v76 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v76 = 0;
      v77 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v69, v70, v77, "monitor-send-logs", "begin send monitoring logs", v76, 2u);
      v78 = v76;
      v79 = v74;
      swift_slowDealloc(v78, -1, -1);

      v80 = v75;
      v81 = v72;
      v67 = v372;
      (*(void (**)(char *, uint64_t))(v81 + 8))(v74, v80);
    }
    else
    {

      v81 = v368;
      v73 = *(void (**)(char *, char *, uint64_t))(v368 + 16);
      v80 = v370;
      v79 = v358;
    }
    v73(v79, v67, v80);
    v82 = type metadata accessor for OSSignpostIntervalState(0);
    swift_allocObject(v82, *(unsigned int *)(v82 + 48), *(unsigned __int16 *)(v82 + 52));
    v83 = OSSignpostIntervalState.init(id:isOpen:)(v79, 1);
    v84 = v67;
    v85 = v83;
    v86 = *(void (**)(char *, uint64_t))(v81 + 8);
    v86(v84, v80);
    sub_1000F1740((uint64_t)v371, (uint64_t)v390);
    sub_100024374((uint64_t)v390, (uint64_t)&v386, &qword_1001B2910);
    sub_100024374((uint64_t)v390, (uint64_t)v391, &qword_1001B2910);
    if (sub_1000F84D0((uint64_t)v391) == 1)
    {
      sub_100024374((uint64_t)&v386, (uint64_t)v384, &qword_1001B2910);
      v87 = (const void *)BitString.init(data:unusedBits:)(v384);
      memcpy(v385, v87, 0x141uLL);
      v88 = sub_1000F84D8();
      swift_willThrowTypedImpl(v385, &type metadata for MPOCMonitorInstruction, v88);
      v89 = swift_allocError(&type metadata for MPOCMonitorInstruction, v88, 0, 0);
      memcpy(v90, v87, 0x141uLL);
      swift_release(v85);
      v44 = v363;
      v67 = v372;
      goto LABEL_47;
    }
    sub_100024374((uint64_t)&v386, (uint64_t)v384, &qword_1001B2910);
    v346 = (char *)BitString.init(data:unusedBits:)(v384);
    v91 = memcpy(v394, v346, sizeof(v394));
    v92 = OSSignposter.logHandle.getter(v91);
    v93 = v344;
    v94 = OSSignpostIntervalState.signpostID.getter();
    LODWORD(v339) = static os_signpost_type_t.end.getter(v94);
    v95 = OS_os_log.signpostsEnabled.getter();
    v97 = v361;
    v96 = v362;
    v340 = v85;
    if ((v95 & 1) != 0)
    {
      v98 = swift_retain(v85);
      checkForErrorAndConsumeState(state:)(v98);
      swift_release(v85);
      v99 = *(uint64_t (**)(char *, uint64_t))(v96 + 88);
      v100 = v353;
      v101 = v99(v97, v353);
      v102 = "[Error] Interval already ended";
      if (v101 != v329)
      {
        (*(void (**)(char *, uint64_t))(v362 + 8))(v361, v100);
        v102 = "end send monitoring logs";
      }
      v103 = v79;
      v104 = v370;
      v73(v103, v93, v370);
      v105 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v105 = 0;
      v106 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v92, (os_signpost_type_t)v339, v106, "monitor-send-logs", v102, v105, 2u);
      swift_slowDealloc(v105, -1, -1);

      v86(v344, v104);
      v107 = v358;
    }
    else
    {

      v107 = v93;
      v104 = v370;
    }
    v86(v107, v104);
    v108 = v346;
    if (qword_1001AD1C8 != -1)
      swift_once(&qword_1001AD1C8, sub_1000EDF20);
    v109 = type metadata accessor for Logger(0);
    v110 = sub_100003A14(v109, (uint64_t)qword_1001B26D0);
    sub_100024374((uint64_t)&v386, (uint64_t)v376, &qword_1001B2910);
    v111 = BitString.init(data:unusedBits:)(v376);
    sub_1000F87CC(v111);
    v112 = sub_1000F87CC((uint64_t)v108);
    v339 = v110;
    v113 = Logger.logObject.getter(v112);
    v114 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v113, v114))
    {
      v115 = (uint8_t *)swift_slowAlloc(12, -1);
      v116 = swift_slowAlloc(32, -1);
      *(_QWORD *)v375 = v116;
      *(_DWORD *)v115 = v328;
      v117 = sub_10011909C();
      v119 = (_TtC14softposreaderd12RemoteReader *)v118;
      v381 = sub_1000056EC(v117, v118, (uint64_t *)v375);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v381, v333, v115 + 4, v115 + 12);
      swift_bridgeObjectRelease(v119, v120, v121, v122, v123, v124, v125, v126);
      sub_1000F8850((uint64_t)v390);
      sub_1000F8850((uint64_t)v390);
      _os_log_impl((void *)&_mh_execute_header, v113, v114, "A&M Backend Response: %s", v115, 0xCu);
      swift_arrayDestroy(v116, 1, v327);
      v127 = v116;
      v108 = v346;
      swift_slowDealloc(v127, -1, -1);
      swift_slowDealloc(v115, -1, -1);
    }
    else
    {
      sub_1000F8850((uint64_t)v390);
      sub_1000F8850((uint64_t)v390);
    }

    v128 = v356;
    v129 = (uint64_t)v360;
    sub_100024374((uint64_t)v388, (uint64_t)v380, &qword_1001B28F8);
    sub_100024374((uint64_t)v380, (uint64_t)&v381, &qword_1001B28F8);
    v130 = sub_1000F83CC((uint64_t)&v381);
    v67 = v372;
    if (v130 == 1)
      goto LABEL_40;
    sub_100024374((uint64_t)v388, (uint64_t)v379, &qword_1001AE028);
    sub_100024374((uint64_t)v379, (uint64_t)v375, &qword_1001AE028);
    if (sub_1000240E0((uint64_t)v375) == 1)
      goto LABEL_40;
    sub_100024374((uint64_t)v379, (uint64_t)v378, &qword_1001AE028);
    memcpy(v393, v378, sizeof(v393));
    sub_10005BAFC(v378);
    sub_1000D1354(v129);
    sub_1000D76F0((uint64_t)v379, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100024170);
    v132 = v374[16];
    v131 = v374[17];
    sub_100005EF8(v343, v132);
    v133 = v132;
    v134 = v360;
    (*(void (**)(uint64_t))(*(_QWORD *)(v131 + 8) + 8))(v133);
    LOBYTE(v131) = DateInterval.contains(_:)(v128);
    (*(void (**)(char *, uint64_t))(v365 + 8))(v128, v366);
    (*(void (**)(char *, uint64_t))(v350 + 8))(v134, v351);
    if ((v131 & 1) == 0)
    {
LABEL_40:
      v135 = *((_QWORD *)v108 + 36);
      sub_100024374((uint64_t)v108, (uint64_t)v378, &qword_1001AE028);
      v378[34] = v135;
      v378[35] = 0;
      LOBYTE(v378[36]) = 0;
      *v337 = 1;
      memcpy(v379, v378, 0x122uLL);
      BitString.init(data:unusedBits:)(v379);
      sub_100024374((uint64_t)v388, (uint64_t)v375, &qword_1001B28F8);
      sub_1000D76F0((uint64_t)v108, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100070FD0);
      swift_bridgeObjectRetain();
      sub_1000F851C((uint64_t)v375, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_1000F82F0);
      sub_100024374((uint64_t)v379, (uint64_t)v388, &qword_1001B28F8);
    }
    if ((v357 & 1) != 0)
    {
      sub_100024374((uint64_t)v388, (uint64_t)v379, &qword_1001B28F8);
      *(_QWORD *)v375 = 0;
      *(_WORD *)&v375[8] = 1;
      sub_100024374((uint64_t)v379, (uint64_t)v335, &qword_1001B28F8);
      *(_WORD *)&v375[306] = 0;
      v375[308] = 0;
      *(_QWORD *)&v375[312] = 0;
      *v334 = 1;
LABEL_46:
      v139 = sub_1000F84D8();
      v89 = swift_allocError(&type metadata for MPOCMonitorInstruction, v139, 0, 0);
      memcpy(v140, v375, 0x141uLL);
      v141 = sub_1000F851C((uint64_t)v379, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_1000F85A8);
      swift_willThrow(v141);
      sub_1000F8850((uint64_t)v390);
      swift_release(v340);
      v44 = 0;
      goto LABEL_47;
    }
    sub_100024374((uint64_t)v108, (uint64_t)v378, &qword_1001AE028);
    if (sub_1000240E0((uint64_t)v378) == 1 || (v108[280] & 1) != 0)
    {
      v136 = sub_1000F8478();
      v137 = swift_allocError(&type metadata for MPOCMonitorManagerError, v136, 0, 0);
      *(_QWORD *)v138 = 7;
      *(_BYTE *)(v138 + 8) = 1;
      sub_100024374((uint64_t)v388, (uint64_t)v379, &qword_1001B28F8);
      *(_QWORD *)v375 = v137;
      *(_WORD *)&v375[8] = 1;
      sub_100024374((uint64_t)v379, (uint64_t)v335, &qword_1001B28F8);
      *(_WORD *)&v375[306] = 0;
      v375[308] = 0;
      *(_QWORD *)&v375[312] = 0;
      *v334 = 1;
      goto LABEL_46;
    }
    v236 = *((_QWORD *)v108 + 34);
    sub_100005EF8(v343, v374[16]);
    v237 = v348;
    sub_10001E61C(v348);
    v239 = v365;
    v238 = v366;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v365 + 48))(v237, 1, v366) == 1)
    {
      v240 = sub_10005218C(v237, &qword_1001AD9E0);
      v241 = Logger.logObject.getter(v240);
      v242 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v241, v242))
      {
        v243 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v243 = 0;
        _os_log_impl((void *)&_mh_execute_header, v241, v242, "Could not calculate secure now, using default send rate", v243, 2u);
        swift_slowDealloc(v243, -1, -1);
      }

      v2 = v65;
    }
    else
    {
      v258 = v347;
      v259 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v239 + 32))(v347, v237, v238);
      v260 = (double)v236 - Date.timeIntervalSince1970.getter(v259) + -300.0;
      if (v260 <= 0.0)
        v260 = v65;
      if (v330)
        v261 = v260;
      else
        v261 = v65;
      if (v331 != 0x7FF0000000000000)
        v261 = v65;
      if (v260 <= v65)
        v2 = v260;
      else
        v2 = v261;
      (*(void (**)(char *, uint64_t))(v239 + 8))(v258, v238);
    }
    v262 = v340;
    v263 = v363;
    sub_1000F6540();
    v89 = v263;
    if (!v263)
    {
      sub_1000F8850((uint64_t)v390);
      swift_release(v262);
      v44 = 0;
      v41 = v359;
      v275 = v371;
      v163 = v373;
      if ((v345 & 1) == 0)
        goto LABEL_165;
      goto LABEL_156;
    }
    sub_1000F8850((uint64_t)v390);
    swift_release(v262);
    v44 = 0;
LABEL_47:
    v383 = v89;
    swift_errorRetain();
    v142 = sub_100003A2C((uint64_t *)&unk_1001B1280);
    if (!swift_dynamicCast(v384, &v383, v142, &type metadata for MPOCMonitorInstruction, 0))
      break;
    swift_errorRelease();
    swift_errorRelease();
    memcpy(v376, v384, 0x141uLL);
    v143 = v369 < 1;
    v144 = v376[0];
    sub_100024374((uint64_t)v388, (uint64_t)v385, &qword_1001B28F8);
    v364 = v144;
    swift_errorRetain();
    v145 = v349;
    sub_1000F851C((uint64_t)v349, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_1000F85A8);
    sub_1000F851C((uint64_t)v385, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_1000F82F0);
    sub_100024374((uint64_t)v145, (uint64_t)v388, &qword_1001B28F8);
    v146 = v374;
    if (BYTE1(v376[1]) == 1)
    {
      sub_100005EF8(v343, v374[16]);
      sub_100053C28();
    }
    if (LOBYTE(v376[1]) != 1)
    {
      v164 = v354;
      if (*v354 != 1)
      {
        v345 &= v143;
        v41 = v359;
        if ((v354[1] & 1) != 0)
        {
          v147 = v44;
          LODWORD(v363) = 0;
          v346 = v371;
          v163 = v373;
          v161 = v374;
          goto LABEL_81;
        }
        v163 = v373;
        if ((v354[2] & 1) == 0)
        {
          LODWORD(v363) = 0;
          if ((v354[14] & 1) == 0)
            goto LABEL_106;
          goto LABEL_129;
        }
        v169 = v367;
        v158 = v359;
        v159 = v371;
        goto LABEL_125;
      }
      sub_100024374((uint64_t)v349, (uint64_t)v375, &qword_1001B28F8);
      LODWORD(v363) = 0;
      v158 = v359;
      v346 = v371;
LABEL_68:
      v170 = v44;
      p_assignWithTake = &value witness table for Settings.assignWithTake;
      if (qword_1001AD118 != -1)
      {
        swift_once(&qword_1001AD118, sub_1000BE860);
        p_assignWithTake = (void **)(&value witness table for Settings + 40);
      }
      v172 = *((_BYTE *)p_assignWithTake + 3471);
      v173 = sub_100003A2C(&qword_1001AC920);
      v174 = swift_allocObject(v173, 64, 7);
      *(_OWORD *)(v174 + 16) = v336;
      *(_QWORD *)(v174 + 32) = 1635017060;
      *(_QWORD *)(v174 + 40) = 0xE400000000000000;
      v175 = *(uint64_t (**)(void))(*v158 + 168);
      v359 = v158;
      v176 = v175();
      v178 = v177;
      v179 = Data.hexString()();
      sub_100005DE0(v176, v178);
      *(Swift::String *)(v174 + 48) = v179;
      v180 = (_TtC14softposreaderd12RemoteReader *)sub_1000046DC(v174);
      v181 = v374;
      v182 = v342;
      sub_100005EF8(v342, v374[38]);
      v183 = sub_1000BB2E8(v172);
      v184 = v181[28];
      v185 = v181[29];
      v163 = v373;
      sub_100005EF8(v373, v184);
      (*(void (**)(uint64_t, id, _TtC14softposreaderd12RemoteReader *, uint64_t, uint64_t))(v185 + 8))(2753281, v183, v180, v184, v185);
      v44 = v170;
      if (v170)
      {
        swift_bridgeObjectRelease(v180, v186, v187, v188, v189, v190, v191, v192);
        v193 = byte_1001B4D8F;
        v194 = (_TtC14softposreaderd12RemoteReader *)sub_1000046DC((uint64_t)&off_1001991C8);
        sub_100005EF8(v182, v181[38]);
        v195 = sub_1000BB2E8(v193);
        v196 = v181[28];
        v197 = v181[29];
        sub_100005EF8(v163, v196);
        (*(void (**)(uint64_t, id, _TtC14softposreaderd12RemoteReader *, uint64_t, uint64_t))(v197 + 8))(2753281, v195, v194, v196, v197);
        v147 = 0;
        swift_bridgeObjectRelease(v194, v198, v199, v200, v201, v202, v203, v204);
        if (qword_1001AD1C8 != -1)
          swift_once(&qword_1001AD1C8, sub_1000EDF20);
        v205 = type metadata accessor for Logger(0);
        sub_100003A14(v205, (uint64_t)qword_1001B26D0);
        swift_errorRetain();
        v206 = swift_errorRetain();
        v207 = Logger.logObject.getter(v206);
        v208 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v207, v208))
        {
          v209 = (uint8_t *)swift_slowAlloc(12, -1);
          v210 = (uint64_t *)swift_slowAlloc(8, -1);
          *(_DWORD *)v209 = v332;
          v371 = (char *)(v209 + 4);
          swift_errorRetain();
          v211 = _swift_stdlib_bridgeErrorToNSError(v170);
          v381 = v211;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v381, v333, v371, v209 + 12);
          *v210 = v211;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v207, v208, "Failed to store rewrap logs in log flush event: %@", v209, 0xCu);
          v212 = sub_100003A2C((uint64_t *)&unk_1001AE430);
          swift_arrayDestroy(v210, 1, v212);
          swift_slowDealloc(v210, -1, -1);
          swift_slowDealloc(v209, -1, -1);

          swift_errorRelease();
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();

        }
        v158 = v359;
        v164 = v354;
        v163 = v373;
        if ((v354[1] & 1) == 0)
        {
          v233 = v354[2];
          v345 = 1;
          v44 = 0;
          v169 = v367;
          v159 = v346;
          if ((v233 & 1) == 0)
          {
            v41 = v359;
            v371 = v346;
            v44 = 0;
            goto LABEL_128;
          }
          goto LABEL_125;
        }
      }
      else
      {
        swift_bridgeObjectRelease(v180, v186, v187, v188, v189, v190, v191, v192);
        v164 = v354;
        if ((v354[1] & 1) == 0)
        {
          v234 = v354[2];
          v345 = 1;
          v158 = v359;
          v169 = v367;
          v159 = v346;
          if ((v234 & 1) == 0)
            goto LABEL_127;
          goto LABEL_125;
        }
        v147 = 0;
      }
      v345 = 1;
LABEL_80:
      v161 = v374;
LABEL_81:
      if (qword_1001AD120 != -1)
        swift_once(&qword_1001AD120, sub_1000BE8AC);
      v213 = byte_1001B4D90;
      v214 = (_TtC14softposreaderd12RemoteReader *)sub_1000046DC((uint64_t)&_swiftEmptyArrayStorage);
      sub_100005EF8(v342, v161[38]);
      v215 = sub_1000BB2E8(v213);
      v216 = v161[28];
      v217 = v161[29];
      sub_100005EF8(v163, v216);
      (*(void (**)(uint64_t, id, _TtC14softposreaderd12RemoteReader *, uint64_t, uint64_t))(v217 + 8))(3736321, v215, v214, v216, v217);
      v44 = v147;
      if (v147)
      {
        swift_bridgeObjectRelease(v214, v218, v219, v220, v221, v222, v223, v224);
        v158 = v359;
        if (qword_1001AD1C8 != -1)
          swift_once(&qword_1001AD1C8, sub_1000EDF20);
        v225 = type metadata accessor for Logger(0);
        sub_100003A14(v225, (uint64_t)qword_1001B26D0);
        swift_errorRetain();
        v226 = swift_errorRetain();
        v227 = Logger.logObject.getter(v226);
        v228 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v227, v228))
        {
          v229 = swift_slowAlloc(12, -1);
          v230 = (uint64_t *)swift_slowAlloc(8, -1);
          *(_DWORD *)v229 = v332;
          swift_errorRetain();
          v231 = _swift_stdlib_bridgeErrorToNSError(v147);
          *(_QWORD *)(v229 + 4) = v231;
          *v230 = v231;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v227, v228, "Failed to store complete attestation event: %@", (uint8_t *)v229, 0xCu);
          v232 = sub_100003A2C((uint64_t *)&unk_1001AE430);
          swift_arrayDestroy(v230, 1, v232);
          swift_slowDealloc(v230, -1, -1);
          swift_slowDealloc(v229, -1, -1);

          swift_errorRelease();
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();

        }
        v44 = 0;
        v163 = v373;
      }
      else
      {
        swift_bridgeObjectRelease(v214, v218, v219, v220, v221, v222, v223, v224);
        v158 = v359;
      }
      v164 = v354;
      v169 = v367;
      v159 = v346;
      if (v354[2] != 1)
      {
LABEL_127:
        v367 = v169;
        v41 = v158;
        v371 = v159;
        goto LABEL_128;
      }
LABEL_125:
      ++v369;
      goto LABEL_126;
    }
    v147 = v44;
    v148 = v146[28];
    v149 = v146[29];
    v150 = v373;
    sub_100005EF8(v373, v148);
    v151 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v149 + 24);
    v152 = v359;
    v153 = swift_retain(v359);
    v151(v153, v367, v148, v149);
    if (v147)
    {
      swift_errorRelease();
      swift_release(v338);
      swift_release_n(v152, 2);
      swift_release(v371);
      sub_1000F8684((uint64_t)v376);
      swift_errorRelease();
      sub_1000F851C((uint64_t)v349, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_1000F82F0);
      return v2;
    }
    swift_release(v152);
    v154 = v146[28];
    v155 = v146[29];
    sub_100005EF8(v150, v154);
    v156 = (*(uint64_t (**)(uint64_t, uint64_t))(v155 + 16))(v154, v155);
    v44 = 0;
    v41 = v152;
    v158 = (_QWORD *)v156;
    v159 = v371;
    if (v156)
    {
      v367 = v157;
      swift_release(v152);
      v160 = (_QWORD *)swift_retain_n(v158, 2);
      v161 = v374;
      v162 = sub_1000F1BA8(v160);
      v163 = v373;
      v346 = v162;
      swift_release_n(v158, 2);
      swift_release(v159);
      v164 = v354;
      if ((*v354 & 1) != 0)
      {
        sub_100024374((uint64_t)v349, (uint64_t)v375, &qword_1001B28F8);
        LODWORD(v363) = 1;
        goto LABEL_68;
      }
      if ((v354[1] & 1) != 0)
      {
        v359 = v158;
        v345 = 1;
        LODWORD(v363) = 1;
        goto LABEL_81;
      }
      v235 = v354[2];
      v345 = 1;
      v169 = v367;
      v159 = v346;
      if ((v235 & 1) == 0)
      {
LABEL_126:
        LODWORD(v363) = 1;
        goto LABEL_127;
      }
      goto LABEL_125;
    }
    v165 = v349;
    sub_100024374((uint64_t)v349, (uint64_t)&v381, &qword_1001B28F8);
    v166 = sub_1000F83CC((uint64_t)&v381);
    v163 = v373;
    if (v166 == 1)
    {
      sub_1000549E8(v377);
      sub_100024374((uint64_t)v377, (uint64_t)v378, &qword_1001AE028);
      v167 = v326;
      *v326 = 0;
      v167[1] = 0;
      *((_BYTE *)v167 + 16) = 0;
      *v337 = 1;
      memcpy(v379, v378, 0x122uLL);
      BitString.init(data:unusedBits:)(v379);
      sub_100024374((uint64_t)v379, (uint64_t)v388, &qword_1001B28F8);
      v168 = v379;
    }
    else
    {
      v168 = v165;
    }
    sub_100024374((uint64_t)v168, (uint64_t)v380, &qword_1001B28F8);
    v164 = v354;
    if (*v354 == 1)
    {
      sub_100024374((uint64_t)v380, (uint64_t)v375, &qword_1001B28F8);
      LODWORD(v363) = 0;
      v158 = v41;
      v346 = v159;
      goto LABEL_68;
    }
    if ((v354[1] & 1) != 0)
    {
      v345 = 0;
      LODWORD(v363) = 0;
      v359 = v41;
      v346 = v159;
      goto LABEL_80;
    }
    v345 = 0;
    v169 = v367;
    v158 = v41;
    if ((v354[2] & 1) != 0)
      goto LABEL_125;
    LODWORD(v363) = v345;
LABEL_128:
    v67 = v372;
    if ((v164[14] & 1) == 0)
    {
LABEL_106:
      v244 = *(double *)&v376[39];
      sub_100005EF8(v343, v374[16]);
      v245 = v355;
      sub_10001E61C(v355);
      v247 = v365;
      v246 = v366;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v365 + 48))(v245, 1, v366) == 1)
      {
        sub_10005218C(v245, &qword_1001AD9E0);
        if (qword_1001AD1C8 != -1)
          swift_once(&qword_1001AD1C8, sub_1000EDF20);
        v248 = type metadata accessor for Logger(0);
        v249 = sub_100003A14(v248, (uint64_t)qword_1001B26D0);
        v250 = Logger.logObject.getter(v249);
        v251 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v250, v251))
        {
          v252 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v252 = 0;
          _os_log_impl((void *)&_mh_execute_header, v250, v251, "Could not calculate secure now, using default send rate for ban expiration", v252, 2u);
          swift_slowDealloc(v252, -1, -1);

          sub_1000F8684((uint64_t)v376);
        }
        else
        {
          sub_1000F8684((uint64_t)v376);

        }
        v2 = v65;
      }
      else
      {
        v253 = v352;
        v254 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v247 + 32))(v352, v245, v246);
        v255 = Date.timeIntervalSince1970.getter(v254);
        sub_1000F8684((uint64_t)v376);
        v256 = v244 - v255;
        if (v244 - v255 <= 0.0)
          v256 = v65;
        if (v330)
          v257 = v256;
        else
          v257 = v65;
        if (v331 != 0x7FF0000000000000)
          v257 = v65;
        if (v256 <= v65)
          v2 = v256;
        else
          v2 = v257;
        (*(void (**)(char *, uint64_t))(v247 + 8))(v253, v246);
      }
      goto LABEL_130;
    }
LABEL_129:
    sub_1000F8684((uint64_t)v376);
LABEL_130:
    swift_errorRelease();
    if ((v363 & 1) == 0 || v369 > 1)
    {
      v275 = v371;
      if ((v345 & 1) == 0)
        goto LABEL_165;
      goto LABEL_156;
    }
  }
  swift_errorRelease();
  if (qword_1001AD1C8 != -1)
    swift_once(&qword_1001AD1C8, sub_1000EDF20);
  v276 = type metadata accessor for Logger(0);
  sub_100003A14(v276, (uint64_t)qword_1001B26D0);
  swift_errorRetain();
  v277 = swift_errorRetain();
  v278 = Logger.logObject.getter(v277);
  v279 = static os_log_type_t.error.getter();
  v280 = os_log_type_enabled(v278, v279);
  v275 = v371;
  v163 = v373;
  if (v280)
  {
    v281 = swift_slowAlloc(12, -1);
    v282 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v281 = v332;
    swift_errorRetain();
    v283 = _swift_stdlib_bridgeErrorToNSError(v89);
    *(_QWORD *)(v281 + 4) = v283;
    *v282 = v283;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v278, v279, "Unexpected error during unpacking A&M backend response: %@", (uint8_t *)v281, 0xCu);
    v284 = sub_100003A2C((uint64_t *)&unk_1001AE430);
    swift_arrayDestroy(v282, 1, v284);
    swift_slowDealloc(v282, -1, -1);
    swift_slowDealloc(v281, -1, -1);

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

  }
  v41 = v359;
  if ((v345 & 1) != 0)
  {
LABEL_156:
    v285 = v44;
    v286 = v374[28];
    v287 = v374[29];
    sub_100005EF8(v163, v286);
    v288 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v287 + 24);
    v289 = swift_retain(v41);
    v290 = v285;
    v288(v289, v367, v286, v287);
    v44 = v285;
    if (v285)
    {
      swift_release(v41);
      if (qword_1001AD1C8 != -1)
        swift_once(&qword_1001AD1C8, sub_1000EDF20);
      v291 = type metadata accessor for Logger(0);
      sub_100003A14(v291, (uint64_t)qword_1001B26D0);
      swift_errorRetain();
      v292 = swift_errorRetain();
      v293 = Logger.logObject.getter(v292);
      v294 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v293, v294))
      {
        v359 = v41;
        v295 = (uint8_t *)swift_slowAlloc(12, -1);
        v296 = swift_slowAlloc(8, -1);
        v371 = v275;
        v297 = (uint64_t *)v296;
        *(_DWORD *)v295 = v332;
        swift_errorRetain();
        v298 = _swift_stdlib_bridgeErrorToNSError(v290);
        v384[0] = v298;
        v41 = v359;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v384, &v384[1], v295 + 4, v295 + 12);
        v299 = v297;
        v275 = v371;
        *v299 = v298;
        v163 = v373;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v293, v294, "Could not remove batch: %@", v295, 0xCu);
        v300 = sub_100003A2C((uint64_t *)&unk_1001AE430);
        swift_arrayDestroy(v299, 1, v300);
        swift_slowDealloc(v299, -1, -1);
        swift_slowDealloc(v295, -1, -1);

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();

      }
      v44 = 0;
    }
    else
    {
      swift_release(v41);
    }
  }
LABEL_165:
  v301 = v44;
  v371 = v275;
  if (qword_1001AD120 != -1)
    swift_once(&qword_1001AD120, sub_1000BE8AC);
  v302 = byte_1001B4D90;
  v303 = (_TtC14softposreaderd12RemoteReader *)sub_1000046DC((uint64_t)&_swiftEmptyArrayStorage);
  v304 = v374;
  sub_100005EF8(v342, v374[38]);
  v305 = sub_1000BB2E8(v302);
  v306 = v304[28];
  v307 = v304[29];
  sub_100005EF8(v163, v306);
  v308 = v301;
  (*(void (**)(uint64_t, id, _TtC14softposreaderd12RemoteReader *, uint64_t, uint64_t))(v307 + 8))(3736321, v305, v303, v306, v307);
  if (v301)
  {
    swift_bridgeObjectRelease(v303, v309, v310, v311, v312, v313, v314, v315);
    if (qword_1001AD1C8 != -1)
      swift_once(&qword_1001AD1C8, sub_1000EDF20);
    v316 = type metadata accessor for Logger(0);
    sub_100003A14(v316, (uint64_t)qword_1001B26D0);
    swift_errorRetain();
    v317 = swift_errorRetain();
    v318 = Logger.logObject.getter(v317);
    v319 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v318, v319))
    {
      v359 = v41;
      v320 = (uint8_t *)swift_slowAlloc(12, -1);
      v321 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v320 = v332;
      swift_errorRetain();
      v322 = _swift_stdlib_bridgeErrorToNSError(v308);
      v384[0] = v322;
      v41 = v359;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v384, &v384[1], v320 + 4, v320 + 12);
      *v321 = v322;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v318, v319, "Could not store complete attestation event: %@", v320, 0xCu);
      v323 = sub_100003A2C((uint64_t *)&unk_1001AE430);
      swift_arrayDestroy(v321, 1, v323);
      swift_slowDealloc(v321, -1, -1);
      swift_slowDealloc(v320, -1, -1);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    v324 = v338;
    v325 = v342;

    swift_errorRelease();
    sub_1000549E8(v375);
    sub_100024374((uint64_t)v375, (uint64_t)v385, &qword_1001AE028);
    v385[35] = 0;
    v385[34] = 0;
    LOWORD(v385[36]) = 256;
    memcpy(v376, v385, 0x122uLL);
    BitString.init(data:unusedBits:)(v376);
    sub_100024374((uint64_t)v388, (uint64_t)v384, &qword_1001B28F8);
    sub_1000F851C((uint64_t)v384, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_1000F82F0);
    sub_100024374((uint64_t)v376, (uint64_t)v388, &qword_1001B28F8);
  }
  else
  {
    swift_bridgeObjectRelease(v303, v309, v310, v311, v312, v313, v314, v315);
    v324 = v338;
    v325 = v342;
  }
  sub_100024374((uint64_t)v388, (uint64_t)v376, &qword_1001B28F8);
  sub_100024374((uint64_t)v376, (uint64_t)v384, &qword_1001B28F8);
  if (sub_1000F83CC((uint64_t)v384) == 1)
  {
    swift_release(v324);
    swift_release(v41);
    swift_release(v371);
  }
  else
  {
    memcpy(v392, v384, 0x122uLL);
    sub_100005EF8(v325, v374[38]);
    sub_100024374((uint64_t)v376, (uint64_t)v385, &qword_1001B28F8);
    sub_100070F4C((uint64_t)v385);
    sub_1000BB134(v392);
    swift_release(v324);
    swift_release(v41);
    swift_release(v371);
    sub_1000F851C((uint64_t)v376, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_1000F82F0);
    sub_1000F851C((uint64_t)v376, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_1000F82F0);
  }
  return v2;
}

uint64_t sub_1000F1740@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD __src[41];
  _QWORD v9[37];
  _BYTE __dst[328];

  v5 = v2[33];
  v6 = v2[34];
  sub_100005EF8(v2 + 30, v5);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t))(v6 + 8))(v9, a1, v5, v6);
  memcpy(__src, v9, 0x128uLL);
  sub_1000F84C8((uint64_t)__src);
  sub_100024374((uint64_t)__src, (uint64_t)__dst, &qword_1001B2910);
  return sub_100024374((uint64_t)__dst, a2, &qword_1001B2910);
}

void sub_1000F1A78()
{
  swift_errorRelease();
  sub_1000F82B8((uint64_t)&STACK[0x518]);
  sub_100024374((uint64_t)&STACK[0x518], (uint64_t)&STACK[0x2C0], &qword_1001B28F8);
  JUMPOUT(0x1000F1920);
}

void sub_1000F1AB4()
{
  swift_errorRelease();
  sub_1000F82B8((uint64_t)&STACK[0x518]);
  JUMPOUT(0x1000F1AC4);
}

void sub_1000F1AF4()
{
  sub_1000F82B8((uint64_t)&STACK[0x518]);
  swift_errorRelease();
  sub_100024374((uint64_t)&STACK[0x518], (uint64_t)&STACK[0x2C0], &qword_1001B28F8);
  JUMPOUT(0x1000F1920);
}

void sub_1000F1B30()
{
  sub_1000F82B8((uint64_t)&STACK[0x518]);
  swift_errorRelease();
  sub_100024374((uint64_t)&STACK[0x518], (uint64_t)&STACK[0x2C0], &qword_1001B28F8);
  JUMPOUT(0x1000F191CLL);
}

void sub_1000F1B68()
{
  sub_1000F82B8((uint64_t)&STACK[0x518]);
  swift_errorRelease();
  sub_100024374((uint64_t)&STACK[0x518], (uint64_t)&STACK[0x2C0], &qword_1001B28F8);
  JUMPOUT(0x1000F1924);
}

char *sub_1000F1BA8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_signpost_type_t v23;
  char v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  uint8_t *v27;
  os_signpost_id_t v28;
  uint8_t *v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  char *v32;
  void (*v33)(char *, uint64_t);
  char *result;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  char *v51;
  uint64_t v52;
  int v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  Class isa;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  _TtC14softposreaderd12RemoteReader *v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t ObjectType;
  uint64_t (*v75)(void);
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t AssociatedTypeWitness;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  NSObject *v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  objc_class *v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  const char *v97;
  uint64_t v98;
  uint64_t AssociatedConformanceWitness;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t (*v105)(uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  Class v110;
  uint64_t v111;
  const char *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  _TtC14softposreaderd12RemoteReader *v119;
  uint64_t v120;
  unint64_t *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  const char *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  _TtC14softposreaderd12RemoteReader *v136;
  const char *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint8_t *v141;
  os_signpost_id_t v142;
  void (*v143)(char *, uint64_t);
  unint64_t v144;
  uint8_t *v145;
  os_signpost_id_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  NSObject *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  int v156;
  char v157;
  char *v158;
  void (*v159)(char *, uint64_t);
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  const char *v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint8_t *v168;
  os_signpost_id_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _TtC14softposreaderd12RemoteReader *v174;
  uint64_t v175;
  unint64_t v176;
  char *v177;
  objc_class *v178;
  char *v179;
  Class v180;
  char *v181;
  void (*v182)(char *, char *, uint64_t);
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  void (*v186)(char *, uint64_t);
  char *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193[5];
  _BYTE v194[296];
  _BYTE v195[272];
  _QWORD v196[35];
  uint64_t v197;

  v184 = a1;
  v183 = type metadata accessor for OSSignpostError(0);
  v188 = *(_QWORD *)(v183 - 8);
  v1 = __chkstk_darwin(v183);
  v178 = (objc_class *)((char *)&v170 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = __chkstk_darwin(v1);
  v180 = (Class)((char *)&v170 - v4);
  __chkstk_darwin(v3);
  v6 = (char *)&v170 - v5;
  v7 = type metadata accessor for OSSignpostID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v181 = (char *)&v170 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v187 = (char *)&v170 - v12;
  v13 = __chkstk_darwin(v11);
  v179 = (char *)&v170 - v14;
  v15 = __chkstk_darwin(v13);
  v190 = (char *)&v170 - v16;
  __chkstk_darwin(v15);
  v18 = (char *)&v170 - v17;
  if (qword_1001AD1D0 != -1)
    swift_once(&qword_1001AD1D0, sub_1000EDFB0);
  v19 = type metadata accessor for OSSignposter(0);
  v20 = sub_100003A14(v19, (uint64_t)qword_1001B26E8);
  v21 = static OSSignpostID.exclusive.getter();
  v22 = OSSignposter.logHandle.getter(v21);
  v23 = static os_signpost_type_t.begin.getter();
  v24 = OS_os_log.signpostsEnabled.getter();
  v191 = v7;
  v189 = v20;
  v177 = v6;
  if ((v24 & 1) != 0)
  {
    v25 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v26 = v190;
    v25(v190, v18, v7);
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v27 = 0;
    v28 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v22, v23, v28, "monitor-sign-logs", "begin signing monitoring logs", v27, 2u);
    v29 = v27;
    v7 = v191;
    swift_slowDealloc(v29, -1, -1);

    (*(void (**)(char *, uint64_t))(v8 + 8))(v26, v7);
    v30 = v25;
  }
  else
  {

    v30 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v26 = v190;
  }
  v182 = v30;
  v30(v26, v18, v7);
  v31 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
  v32 = (char *)OSSignpostIntervalState.init(id:isOpen:)(v26, 1);
  v33 = *(void (**)(char *, uint64_t))(v8 + 8);
  v33(v18, v7);
  result = (char *)objc_msgSend(*(id *)(*sub_100005EF8(v192 + 18, v192[21]) + 16), "serialNumber");
  if (result)
  {
    v35 = result;
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v38 = v37;

    v39 = Data.init(hexString:)(v36, v38);
    if (v40 >> 60 == 15)
    {
      if (qword_1001AD1C8 != -1)
        swift_once(&qword_1001AD1C8, sub_1000EDF20);
      v41 = type metadata accessor for Logger(0);
      v42 = sub_100003A14(v41, (uint64_t)qword_1001B26D0);
      v43 = Logger.logObject.getter(v42);
      v44 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v43, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v45 = 0;
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "Could not get secure element serial number", v45, 2u);
        swift_slowDealloc(v45, -1, -1);
      }

      v46 = sub_1000F8478();
      v47 = swift_allocError(&type metadata for MPOCMonitorManagerError, v46, 0, 0);
      *(_QWORD *)v48 = 2;
      *(_BYTE *)(v48 + 8) = 1;
      v49 = swift_willThrow(v47);
      v50 = OSSignposter.logHandle.getter(v49);
      v51 = v187;
      v52 = OSSignpostIntervalState.signpostID.getter();
      v53 = static os_signpost_type_t.end.getter(v52);
      v54 = OS_os_log.signpostsEnabled.getter();
      v55 = v188;
      if ((v54 & 1) != 0)
      {
        v56 = swift_retain(v32);
        v57 = (uint64_t)v180;
        checkForErrorAndConsumeState(state:)(v56);
        swift_release(v32);
        v58 = v183;
        v59 = (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 88))(v57, v183);
        v186 = v33;
        v192 = (_QWORD *)v47;
        LODWORD(v189) = v53;
        if (v59 == enum case for OSSignpostError.doubleEnd(_:))
        {
          v137 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v57, v58);
          v137 = "end signing monitoring logs";
        }
        v138 = v187;
        v139 = v190;
        v140 = v191;
        v182(v190, v187, v191);
        v141 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v141 = 0;
        v142 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v50, (os_signpost_type_t)v189, v142, "monitor-sign-logs", v137, v141, 2u);
        swift_slowDealloc(v141, -1, -1);

        v143 = v186;
        v186(v138, v140);
        v143(v139, v140);
        goto LABEL_33;
      }

      v70 = v191;
    }
    else
    {
      v60 = v39;
      v61 = v40;
      v187 = v32;
      type metadata accessor for TLV();
      v174 = (_TtC14softposreaderd12RemoteReader *)TLVTag.asn1Sequence.unsafeMutableAddressor();
      isa = v174->super.isa;
      v173 = sub_100003A2C((uint64_t *)&unk_1001AE490);
      v63 = swift_allocObject(v173, 56, 7);
      *(_OWORD *)(v63 + 16) = xmmword_10015E4F0;
      sub_100005D9C(v60, v61);
      v64 = default argument 0 of IteratorProtocol<>.nextOctetString(tag:)();
      *(_QWORD *)(v63 + 32) = TLV.__allocating_init(tag:value:)(v64, v60, v61);
      v65 = v184;
      *(_QWORD *)(v63 + 40) = v184;
      swift_retain(v65);
      v66 = *(_QWORD *)TLVTag.asn1IA5String.unsafeMutableAddressor();
      sub_100005EF8(v192 + 35, v192[38]);
      sub_1000BB930(v194);
      sub_100024374((uint64_t)v194, (uint64_t)v195, &qword_1001AE028);
      sub_100024374((uint64_t)v195, (uint64_t)v196, &qword_1001AE028);
      v67 = sub_1000240E0((uint64_t)v196);
      v186 = v33;
      v175 = v60;
      v176 = v61;
      if (v67 == 1)
      {
        v68 = 0;
        v69 = (_TtC14softposreaderd12RemoteReader *)0xE000000000000000;
      }
      else
      {
        v68 = v196[32];
        v69 = (_TtC14softposreaderd12RemoteReader *)v196[33];
        swift_bridgeObjectRetain();
      }
      v71 = TLV.__allocating_init(tag:string:)(v66, v68, v69);
      *(_QWORD *)(v63 + 48) = v71;
      v193[0] = v63;
      specialized Array._endMutation()(v71);
      v72 = TLV.__allocating_init(tag:children:)((uint64_t)isa, v193[0]);
      v73 = v192[24];
      ObjectType = swift_getObjectType(v192[23]);
      v75 = *(uint64_t (**)(void))(*v72 + 168);
      v184 = v72;
      v76 = v75();
      v78 = v77;
      AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v73, ObjectType, &unk_1001857B4);
      v180 = (Class)&v170;
      v171 = *(_QWORD *)(AssociatedTypeWitness - 8);
      v172 = AssociatedTypeWitness;
      __chkstk_darwin(AssociatedTypeWitness);
      v81 = (char *)&v170 - v80;
      v82 = v185;
      v83 = sub_100113558((uint64_t)&v170 - v80, v76, v78, 1, ObjectType, v73);
      v192 = (_QWORD *)v82;
      if (!v82)
      {
        v181 = (char *)v84;
        v185 = v83;
        sub_100005DE0(v76, v78);
        v98 = v172;
        v193[3] = v172;
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v73, ObjectType, v172, &unk_1001857B4, &unk_1001857BC);
        v193[4] = AssociatedConformanceWitness;
        v178 = (objc_class *)sub_1000778C8(v193);
        (*(void (**)(objc_class *, char *, uint64_t))(v171 + 32))(v178, v81, v98);
        v180 = v174->super.isa;
        v100 = swift_allocObject(v173, 72, 7);
        *(_OWORD *)(v100 + 16) = xmmword_10015E3D0;
        v197 = 1;
        v101 = sub_100006140();
        sub_10001CA44();
        v102 = default argument 0 of IteratorProtocol<>.nextInteger(tag:)();
        v103 = TLV.__allocating_init<A>(tag:integer:)(v102, (uint64_t)&v197, (uint64_t)&type metadata for Int, v101);
        v104 = v184;
        *(_QWORD *)(v100 + 32) = v103;
        *(_QWORD *)(v100 + 40) = v104;
        v105 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
        swift_retain(v104);
        v106 = v105(v98, AssociatedConformanceWitness);
        v108 = v107;
        v109 = default argument 0 of IteratorProtocol<>.nextOctetString(tag:)();
        *(_QWORD *)(v100 + 48) = TLV.__allocating_init(tag:value:)(v109, v106, v108);
        v110 = v174->super.isa;
        v111 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(v98, AssociatedConformanceWitness);
        v119 = (_TtC14softposreaderd12RemoteReader *)v111;
        v120 = *(_QWORD *)(v111 + 16);
        if (v120)
        {
          v178 = v110;
          v197 = (uint64_t)&_swiftEmptyArrayStorage;
          specialized ContiguousArray.reserveCapacity(_:)(v120);
          v174 = v119;
          v121 = (unint64_t *)&v119->instance[32];
          do
          {
            v122 = *(v121 - 1);
            v123 = *v121;
            sub_100005D9C(v122, *v121);
            sub_100005D9C(v122, v123);
            v124 = default argument 0 of IteratorProtocol<>.nextOctetString(tag:)();
            v125 = TLV.__allocating_init(tag:value:)(v124, v122, v123);
            v126 = sub_100005DE0(v122, v123);
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v126);
            v127 = *(_QWORD *)(v197 + 16);
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v127);
            v128 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v127, v125);
            specialized ContiguousArray._endMutation()(v128);
            v121 += 2;
            --v120;
          }
          while (v120);
          v136 = (_TtC14softposreaderd12RemoteReader *)v197;
          swift_bridgeObjectRelease(v174, v129, v130, v131, v132, v133, v134, v135);
          v104 = v184;
          v110 = v178;
        }
        else
        {
          swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v111, v112, v113, v114, v115, v116, v117, v118);
          v136 = &_swiftEmptyArrayStorage;
        }
        *(_QWORD *)(v100 + 56) = TLV.__allocating_init(tag:children:)((uint64_t)v110, (uint64_t)v136);
        v147 = v185;
        v148 = (unint64_t)v181;
        sub_100005D9C(v185, (unint64_t)v181);
        v149 = default argument 0 of IteratorProtocol<>.nextOctetString(tag:)();
        v150 = TLV.__allocating_init(tag:value:)(v149, v147, v148);
        *(_QWORD *)(v100 + 64) = v150;
        v197 = v100;
        specialized Array._endMutation()(v150);
        v32 = (char *)TLV.__allocating_init(tag:children:)((uint64_t)v180, v197);
        sub_10000A9B0(v175, v176);
        swift_release(v104);
        sub_100005DE0(v147, v148);
        v151 = sub_100005D3C(v193);
        v152 = OSSignposter.logHandle.getter(v151);
        v153 = v179;
        v154 = v187;
        v155 = OSSignpostIntervalState.signpostID.getter();
        v156 = static os_signpost_type_t.end.getter(v155);
        v157 = OS_os_log.signpostsEnabled.getter();
        v158 = v190;
        v159 = v186;
        if ((v157 & 1) != 0)
        {
          LODWORD(v189) = v156;
          v160 = swift_retain(v154);
          v161 = v177;
          checkForErrorAndConsumeState(state:)(v160);
          swift_release(v154);
          v162 = v188;
          v163 = v183;
          if ((*(unsigned int (**)(char *, uint64_t))(v188 + 88))(v161, v183) == enum case for OSSignpostError.doubleEnd(_:))
          {
            v164 = "[Error] Interval already ended";
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v162 + 8))(v161, v163);
            v164 = "end signing monitoring logs";
          }
          v166 = v153;
          v167 = v153;
          v165 = v191;
          v182(v158, v166, v191);
          v168 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v168 = 0;
          v169 = OSSignpostID.rawValue.getter();
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v152, (os_signpost_type_t)v189, v169, "monitor-sign-logs", v164, v168, 2u);
          swift_slowDealloc(v168, -1, -1);

          v159 = v186;
          v186(v167, v165);
        }
        else
        {

          v158 = v153;
          v165 = v191;
        }
        v159(v158, v165);
        swift_release(v187);
        return v32;
      }
      sub_10000A9B0(v175, v176);
      swift_release(v184);
      v85 = sub_100005DE0(v76, v78);
      v86 = OSSignposter.logHandle.getter(v85);
      v87 = (unint64_t)v181;
      v88 = v187;
      v89 = OSSignpostIntervalState.signpostID.getter();
      v90 = static os_signpost_type_t.end.getter(v89);
      if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
      {

        v32 = v88;
        v186((char *)v87, v191);
LABEL_33:
        swift_release(v32);
        return v32;
      }
      LODWORD(v189) = v90;
      v91 = swift_retain(v88);
      v92 = v178;
      checkForErrorAndConsumeState(state:)(v91);
      swift_release(v88);
      v93 = v188;
      v94 = v183;
      v95 = (*(uint64_t (**)(objc_class *, uint64_t))(v188 + 88))(v92, v183);
      v96 = v191;
      v33 = v186;
      if (v95 == enum case for OSSignpostError.doubleEnd(_:))
      {
        v97 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(objc_class *, uint64_t))(v93 + 8))(v92, v94);
        v97 = "end signing monitoring logs";
      }
      v51 = v190;
      v144 = (unint64_t)v181;
      v182(v190, v181, v96);
      v145 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v145 = 0;
      v146 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v86, (os_signpost_type_t)v189, v146, "monitor-sign-logs", v97, v145, 2u);
      v70 = v191;
      swift_slowDealloc(v145, -1, -1);

      v33((char *)v144, v70);
      v32 = v187;
    }
    v33(v51, v70);
    goto LABEL_33;
  }
  __break(1u);
  return result;
}

void sub_1000F2880(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _TtC14softposreaderd12RemoteReader *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  _TtC14softposreaderd12RemoteReader *v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  unint64_t v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t inited;
  unint64_t v53;
  uint64_t v54;
  _TtC14softposreaderd12RemoteReader *v55;
  unsigned __int8 v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  char v67;
  uint64_t v68;
  _BYTE v69[64];
  uint64_t v70;

  v3 = v1;
  if (qword_1001AD1C8 != -1)
    swift_once(&qword_1001AD1C8, sub_1000EDF20);
  v5 = a1 & 1;
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100003A14(v6, (uint64_t)qword_1001B26D0);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(64, -1);
    v70 = v11;
    *(_DWORD *)v10 = 136315394;
    v68 = sub_1000056EC(0x6F4D686374697773, 0xEF293A6F74286564, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, v69, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2080;
    if ((a1 & 1) != 0)
      v12 = 0x656E696C66666FLL;
    else
      v12 = 0x656E696C6E6FLL;
    if ((a1 & 1) != 0)
      v13 = 0xE700000000000000;
    else
      v13 = 0xE600000000000000;
    v68 = sub_1000056EC(v12, v13, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, v69, v10 + 14, v10 + 22);
    v14 = (_TtC14softposreaderd12RemoteReader *)v13;
    v5 = a1 & 1;
    swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s(mode: %s)", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }

  if ((((v5 == 0) ^ *(unsigned __int8 *)(v3 + 40)) & 1) != 0)
  {
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      *(_DWORD *)v25 = 136315138;
      v70 = v26;
      if (v5)
        v27 = 0x656E696C66666FLL;
      else
        v27 = 0x656E696C6E6FLL;
      if (v5)
        v28 = (_TtC14softposreaderd12RemoteReader *)0xE700000000000000;
      else
        v28 = (_TtC14softposreaderd12RemoteReader *)0xE600000000000000;
      v68 = sub_1000056EC(v27, (unint64_t)v28, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, v69, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease(v28, v29, v30, v31, v32, v33, v34, v35);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Already in %s mode.", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }

  }
  else
  {
    *(_BYTE *)(v3 + 40) = v5;
    v36 = *(_QWORD *)(v3 + 88);
    v37 = *(_QWORD *)(v3 + 96);
    sub_100005EF8((_QWORD *)(v3 + 64), v36);
    if (qword_1001AD1D8 != -1)
      swift_once(&qword_1001AD1D8, sub_1000EE040);
    v38 = qword_1001B4F00;
    v39 = *(_QWORD *)algn_1001B4F08;
    v40 = sub_100003A2C(&qword_1001AC678);
    v41 = swift_allocObject(v40, 33, 7);
    *(_OWORD *)(v41 + 16) = xmmword_10015A5F0;
    v67 = v5;
    *(_BYTE *)(v41 + 32) = v5;
    v42 = sub_10010DD5C(v41);
    v44 = (unint64_t)v43;
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v41, v43, v45, v46, v47, v48, v49, v50);
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v37 + 40))(v38, v39, v42, v44, v36, v37);
    sub_100005DE0(v42, v44);
    if (!v2)
    {
      v51 = sub_100003A2C(&qword_1001AC920);
      inited = swift_initStackObject(v51, v69);
      *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
      *(_QWORD *)(inited + 32) = 1701080941;
      *(_QWORD *)(inited + 40) = 0xE400000000000000;
      LOBYTE(v70) = *(_BYTE *)(v3 + 40);
      v53 = sub_1000F8434();
      *(_QWORD *)(inited + 48) = BinaryInteger.description.getter(&type metadata for UInt8, v53);
      *(_QWORD *)(inited + 56) = v54;
      v55 = (_TtC14softposreaderd12RemoteReader *)sub_1000046DC(inited);
      if (qword_1001AD110 != -1)
        swift_once(&qword_1001AD110, sub_1000BE4F4);
      v56 = byte_1001B4D8E;
      sub_100005EF8((_QWORD *)(v3 + 280), *(_QWORD *)(v3 + 304));
      v57 = sub_1000BB2E8(v56);
      v58 = *(_QWORD *)(v3 + 224);
      v59 = *(_QWORD *)(v3 + 232);
      sub_100005EF8((_QWORD *)(v3 + 200), v58);
      (*(void (**)(uint64_t, id, _TtC14softposreaderd12RemoteReader *, uint64_t, uint64_t))(v59 + 8))(3801857, v57, v55, v58, v59);
      swift_bridgeObjectRelease(v55, v60, v61, v62, v63, v64, v65, v66);
      *(_BYTE *)(*(_QWORD *)(v3 + 320) + 64) = v67;
    }
  }
}

void sub_1000F2D90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  _TtC14softposreaderd12RemoteReader *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  void (*v33)(_QWORD, _QWORD);
  uint8_t *v34;
  uint64_t v35;
  char *v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_signpost_type_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint8_t *v46;
  os_signpost_id_t v47;
  uint8_t *v48;
  uint64_t v49;
  unsigned __int8 v50;
  _TtC14softposreaderd12RemoteReader *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  SEL v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t ObjectType;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint64_t v75;
  NSObject *v76;
  uint64_t v77;
  uint64_t v78;
  os_signpost_type_t v79;
  char v80;
  void (*v81)(_QWORD, char *, uint64_t);
  uint64_t v82;
  char *v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  char *v87;
  uint8_t *v88;
  os_signpost_id_t v89;
  void (*v90)(uint64_t, uint64_t);
  _QWORD v91[2];
  void (*v92)(_QWORD, _QWORD);
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t aBlock[5];
  uint64_t v109;

  v1 = v0;
  v97 = type metadata accessor for OSSignpostError(0);
  v2 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v95 = (char *)v91 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v103 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v102 = (char *)v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v100 = *(_QWORD *)(v6 - 8);
  v101 = v6;
  __chkstk_darwin(v6);
  v99 = (char *)v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OSSignpostID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v105 = (char *)v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)v91 - v13;
  __chkstk_darwin(v12);
  v106 = (char *)v91 - v15;
  if (qword_1001AD1C8 != -1)
    swift_once(&qword_1001AD1C8, sub_1000EDF20);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_100003A14(v16, (uint64_t)qword_1001B26D0);
  v18 = swift_retain_n(v0, 2);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  v21 = os_log_type_enabled(v19, v20);
  v96 = v2;
  v98 = v4;
  if (v21)
  {
    v22 = swift_slowAlloc(12, -1);
    v93 = v9;
    v23 = (uint8_t *)v22;
    v92 = (void (*)(_QWORD, _QWORD))swift_slowAlloc(32, -1);
    aBlock[0] = (uint64_t)v92;
    *(_DWORD *)v23 = 136315138;
    if (*(_BYTE *)(v1 + 40))
      v24 = 0x656E696C66666FLL;
    else
      v24 = 0x656E696C6E6FLL;
    if (*(_BYTE *)(v1 + 40))
      v25 = (_TtC14softposreaderd12RemoteReader *)0xE700000000000000;
    else
      v25 = (_TtC14softposreaderd12RemoteReader *)0xE600000000000000;
    v104 = v1;
    v107 = sub_1000056EC(v24, (unint64_t)v25, aBlock);
    v1 = v104;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, aBlock, v23 + 4, v23 + 12);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "MPOCDefaultMonitorManager.start(), current MPOCOperationMode: %s", v23, 0xCu);
    v33 = v92;
    swift_arrayDestroy(v92, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    v34 = v23;
    v9 = v93;
    swift_slowDealloc(v34, -1, -1);

  }
  else
  {

    v35 = swift_release_n(v1, 2);
  }
  v36 = v106;
  if ((*(_BYTE *)(v1 + 16) & 1) != 0)
  {
    v37 = Logger.logObject.getter(v35);
    v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Background process already started", v39, 2u);
      swift_slowDealloc(v39, -1, -1);
    }

  }
  else
  {
    *(_BYTE *)(v1 + 16) = 1;
    if (qword_1001AD1D0 != -1)
      swift_once(&qword_1001AD1D0, sub_1000EDFB0);
    v40 = type metadata accessor for OSSignposter(0);
    v41 = sub_100003A14(v40, (uint64_t)qword_1001B26E8);
    v42 = static OSSignpostID.exclusive.getter();
    v91[1] = v41;
    v43 = OSSignposter.logHandle.getter(v42);
    v44 = static os_signpost_type_t.begin.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v45 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
      v45(v14, v36, v8);
      v46 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v46 = 0;
      v47 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v43, v44, v47, "start-monitoring", "begin start monitoring", v46, 2u);
      v48 = v46;
      v36 = v106;
      swift_slowDealloc(v48, -1, -1);

      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    }
    else
    {

      v45 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    }
    v45(v14, v36, v8);
    v49 = type metadata accessor for OSSignpostIntervalState(0);
    swift_allocObject(v49, *(unsigned int *)(v49 + 48), *(unsigned __int16 *)(v49 + 52));
    v91[0] = v14;
    v93 = OSSignpostIntervalState.init(id:isOpen:)(v14, 1);
    v92 = *(void (**)(_QWORD, _QWORD))(v9 + 8);
    v92(v36, v8);
    if (qword_1001AD120 != -1)
      swift_once(&qword_1001AD120, sub_1000BE8AC);
    v50 = byte_1001B4D90;
    v51 = (_TtC14softposreaderd12RemoteReader *)sub_1000046DC((uint64_t)&_swiftEmptyArrayStorage);
    sub_100005EF8((_QWORD *)(v1 + 280), *(_QWORD *)(v1 + 304));
    v52 = sub_1000BB2E8(v50);
    v53 = *(_QWORD *)(v1 + 224);
    v54 = *(_QWORD *)(v1 + 232);
    sub_100005EF8((_QWORD *)(v1 + 200), v53);
    (*(void (**)(uint64_t, id, _TtC14softposreaderd12RemoteReader *, uint64_t, uint64_t))(v54 + 8))(3736321, v52, v51, v53, v54);
    v94 = v17;
    v106 = (char *)v45;
    swift_bridgeObjectRelease(v51, v55, v56, v57, v58, v59, v60, v61);
    v62 = v98;
    ObjectType = swift_getObjectType(*(_QWORD *)(v1 + 32));
    v64 = v1;
    v65 = swift_allocObject(&unk_10019F228, 24, 7);
    swift_weakInit(v65 + 16, v64);
    aBlock[4] = (uint64_t)sub_1000F842C;
    v109 = v65;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000043B8;
    aBlock[3] = (uint64_t)&unk_10019F240;
    v66 = _Block_copy(aBlock);
    v67 = swift_retain(v65);
    v68 = v99;
    static DispatchQoS.unspecified.getter(v67);
    v69 = v102;
    sub_1000043E4();
    OS_dispatch_source.setEventHandler(qos:flags:handler:)(v68, v69, v66, ObjectType);
    _Block_release(v66);
    (*(void (**)(char *, uint64_t))(v103 + 8))(v69, v62);
    (*(void (**)(char *, uint64_t))(v100 + 8))(v68, v101);
    v70 = v109;
    swift_release(v65);
    swift_release(v70);
    sub_1000F4070();
    v72 = Logger.logObject.getter(v71);
    v73 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v72, v73))
    {
      v74 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v74 = 0;
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "Background process started", v74, 2u);
      swift_slowDealloc(v74, -1, -1);
    }

    OS_dispatch_source.resume()();
    v76 = OSSignposter.logHandle.getter(v75);
    v77 = v93;
    v78 = OSSignpostIntervalState.signpostID.getter();
    v79 = static os_signpost_type_t.end.getter(v78);
    v80 = OS_os_log.signpostsEnabled.getter();
    v81 = (void (*)(_QWORD, char *, uint64_t))v106;
    if ((v80 & 1) != 0)
    {
      v82 = swift_retain(v77);
      v83 = v95;
      checkForErrorAndConsumeState(state:)(v82);
      swift_release(v77);
      v84 = v96;
      if ((*(unsigned int (**)(char *, uint64_t))(v96 + 88))(v83, v97) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v85 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v84 + 8))(v83, v97);
        v85 = "end start monitoring";
      }
      v86 = v91[0];
      v87 = v105;
      v81(v91[0], v105, v8);
      v88 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v88 = 0;
      v89 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v76, v79, v89, "start-monitoring", v85, v88, 2u);
      swift_slowDealloc(v88, -1, -1);

      v90 = v92;
      v92(v87, v8);
      v90(v86, v8);
    }
    else
    {

      v92(v105, v8);
    }
    swift_release(v77);
  }
}

uint64_t sub_1000F3794(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    sub_1000F4070();
    return swift_release(v3);
  }
  return result;
}

void sub_1000F37E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_signpost_type_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint8_t *v33;
  os_signpost_id_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t ObjectType;
  void *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  os_signpost_type_t v52;
  void (*v53)(char *);
  uint64_t v54;
  char *v55;
  uint64_t v56;
  const char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint8_t *v64;
  os_signpost_id_t v65;
  _QWORD v66[2];
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t aBlock[7];

  v1 = v0;
  v70 = type metadata accessor for OSSignpostError(0);
  v2 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v68 = (char *)v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v75 = *(_QWORD *)(v4 - 8);
  v76 = v4;
  __chkstk_darwin(v4);
  v74 = (char *)v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v72 = *(_QWORD *)(v6 - 8);
  v73 = v6;
  __chkstk_darwin(v6);
  v71 = (char *)v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OSSignpostID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v77 = (char *)v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)v66 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)v66 - v15;
  if (qword_1001AD1C8 != -1)
    swift_once(&qword_1001AD1C8, sub_1000EDF20);
  v17 = type metadata accessor for Logger(0);
  v78 = sub_100003A14(v17, (uint64_t)qword_1001B26D0);
  v18 = Logger.logObject.getter(v78);
  v19 = static os_log_type_t.info.getter();
  v20 = os_log_type_enabled(v18, v19);
  v69 = v2;
  if (v20)
  {
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v67 = v1;
    v23 = v8;
    v24 = v22;
    aBlock[0] = v22;
    *(_DWORD *)v21 = 136315138;
    v79 = sub_1000056EC(0x2928706F7473, 0xE600000000000000, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, aBlock, v21 + 4, v21 + 12);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%s", v21, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    v25 = v24;
    v8 = v23;
    v1 = v67;
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v21, -1, -1);
  }

  if (*(_BYTE *)(v1 + 16) == 1)
  {
    *(_BYTE *)(v1 + 16) = 0;
    if (qword_1001AD1D0 != -1)
      swift_once(&qword_1001AD1D0, sub_1000EDFB0);
    v27 = type metadata accessor for OSSignposter(0);
    v28 = sub_100003A14(v27, (uint64_t)qword_1001B26E8);
    v29 = static OSSignpostID.exclusive.getter();
    v66[1] = v28;
    v30 = OSSignposter.logHandle.getter(v29);
    v31 = static os_signpost_type_t.begin.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v32 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
      v32(v14, v16, v8);
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      v34 = OSSignpostID.rawValue.getter(v33);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v30, v31, v34, "stop-monitoring", "begin stop monitoring", v33, 2u);
      swift_slowDealloc(v33, -1, -1);

      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    }
    else
    {

      v32 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    }
    v32(v14, v16, v8);
    v38 = type metadata accessor for OSSignpostIntervalState(0);
    swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
    v39 = OSSignpostIntervalState.init(id:isOpen:)(v14, 1);
    v40 = *(void (**)(char *, uint64_t))(v9 + 8);
    v67 = v8;
    v40(v16, v8);
    ObjectType = swift_getObjectType(*(_QWORD *)(v1 + 32));
    aBlock[4] = (uint64_t)BitString.init(data:unusedBits:);
    aBlock[5] = 0;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000043B8;
    aBlock[3] = (uint64_t)&unk_10019F1F0;
    v42 = _Block_copy(aBlock);
    v43 = v71;
    static DispatchQoS.unspecified.getter(v42);
    v44 = v74;
    sub_1000043E4();
    OS_dispatch_source.setEventHandler(qos:flags:handler:)(v43, v44, v42, ObjectType);
    _Block_release(v42);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v44, v76);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v43, v73);
    OS_dispatch_source.suspend()();
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Background process stopped", v48, 2u);
      swift_slowDealloc(v48, -1, -1);
    }

    v50 = OSSignposter.logHandle.getter(v49);
    v51 = OSSignpostIntervalState.signpostID.getter();
    v52 = static os_signpost_type_t.end.getter(v51);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v53 = (void (*)(char *))v32;
      v54 = swift_retain();
      v55 = v68;
      checkForErrorAndConsumeState(state:)(v54);
      swift_release(v39);
      v56 = v69;
      if ((*(unsigned int (**)(char *, uint64_t))(v69 + 88))(v55, v70) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v57 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v56 + 8))(v55, v70);
        v57 = "end stop monitoring";
      }
      v60 = v14;
      v61 = v14;
      v62 = v77;
      v63 = v67;
      v53(v60);
      v64 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v64 = 0;
      v65 = OSSignpostID.rawValue.getter(v64);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v50, v52, v65, "stop-monitoring", v57, v64, 2u);
      swift_slowDealloc(v64, -1, -1);

      v40(v62, v63);
      v58 = v61;
      v59 = v63;
    }
    else
    {

      v58 = v77;
      v59 = v67;
    }
    v40(v58, v59);
    swift_release(v39);
  }
  else
  {
    v35 = Logger.logObject.getter(v26);
    v36 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Background process already stopped", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }

  }
}

uint64_t sub_1000F3ED0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v1 = v0;
  if (qword_1001AD1C8 != -1)
    swift_once(&qword_1001AD1C8, sub_1000EDF20);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100003A14(v2, (uint64_t)qword_1001B26D0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136315138;
    v12 = sub_1000056EC(0xD000000000000010, 0x800000010016F720, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v6 + 4, v6 + 12);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }

  v8 = v1 + 25;
  v10 = v1[28];
  v9 = v1[29];
  sub_100005EF8(v8, v10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 40))(v10, v9);
}

void sub_1000F4070()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 v2;
  _TtC14softposreaderd12RemoteReader *v3;
  _QWORD *v4;
  id v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  SEL v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  unsigned __int8 v16;
  _TtC14softposreaderd12RemoteReader *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;

  v1 = v0;
  if (qword_1001AD110 != -1)
    swift_once(&qword_1001AD110, sub_1000BE4F4);
  v2 = byte_1001B4D8E;
  v3 = (_TtC14softposreaderd12RemoteReader *)sub_1000046DC((uint64_t)&_swiftEmptyArrayStorage);
  v4 = (_QWORD *)(v0 + 280);
  sub_100005EF8((_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 304));
  v5 = sub_1000BB2E8(v2);
  v6 = (_QWORD *)(v1 + 200);
  v7 = *(_QWORD *)(v1 + 224);
  v8 = *(_QWORD *)(v1 + 232);
  sub_100005EF8((_QWORD *)(v1 + 200), v7);
  (*(void (**)(uint64_t, id, _TtC14softposreaderd12RemoteReader *, uint64_t, uint64_t))(v8 + 8))(1311489, v5, v3, v7, v8);
  swift_bridgeObjectRelease(v3, v9, v10, v11, v12, v13, v14, v15);
  if (*(_BYTE *)(v1 + 40) != 1)
  {
    if ((sub_1000F4458() & 1) == 0)
      return;
    goto LABEL_7;
  }
  if ((sub_1000F4910() & 1) != 0)
  {
LABEL_7:
    v16 = byte_1001B4D8E;
    v17 = (_TtC14softposreaderd12RemoteReader *)sub_1000046DC((uint64_t)&_swiftEmptyArrayStorage);
    sub_100005EF8(v4, *(_QWORD *)(v1 + 304));
    v18 = sub_1000BB2E8(v16);
    v20 = *(_QWORD *)(v1 + 224);
    v19 = *(_QWORD *)(v1 + 232);
    sub_100005EF8(v6, v20);
    (*(void (**)(uint64_t, id, _TtC14softposreaderd12RemoteReader *, uint64_t, uint64_t))(v19 + 8))(1377025, v18, v17, v20, v19);
    swift_bridgeObjectRelease(v17, v21, v22, v23, v24, v25, v26, v27);
  }
}

uint64_t sub_1000F4458()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  unsigned __int8 v16;
  _TtC14softposreaderd12RemoteReader *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t ObjectType;
  char *v30;
  char *v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  void (*v35)(char *, _QWORD, uint64_t);
  char *v36;
  void (*v37)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;

  v1 = v0;
  v2 = type metadata accessor for DispatchTimeInterval(0);
  v45 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v43 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v39 - v5;
  v41 = type metadata accessor for DispatchTime(0);
  v7 = *(_QWORD *)(v41 - 8);
  v8 = __chkstk_darwin(v41);
  v42 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v44 = (char *)&v39 - v10;
  if (qword_1001AD1C8 != -1)
    swift_once(&qword_1001AD1C8, sub_1000EDF20);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_100003A14(v11, (uint64_t)qword_1001B26D0);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "performOnlineAttestation()", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  if (qword_1001AD120 != -1)
    swift_once(&qword_1001AD120, sub_1000BE8AC);
  v16 = byte_1001B4D90;
  v17 = (_TtC14softposreaderd12RemoteReader *)sub_1000046DC((uint64_t)&_swiftEmptyArrayStorage);
  sub_100005EF8(v1 + 35, v1[38]);
  v18 = sub_1000BB2E8(v16);
  v19 = v1[28];
  v20 = v1[29];
  sub_100005EF8(v1 + 25, v19);
  (*(void (**)(uint64_t, id, _TtC14softposreaderd12RemoteReader *, uint64_t, uint64_t))(v20 + 8))(3736321, v18, v17, v19, v20);
  v46 = v6;
  swift_bridgeObjectRelease(v17, v21, v22, v23, v24, v25, v26, v27);
  sub_1000EEB58(0);
  swift_errorRelease();
  LODWORD(v40) = 1;
  v28 = v41;
  ObjectType = swift_getObjectType(v1[4]);
  v30 = v42;
  static DispatchTime.now()(ObjectType);
  v31 = v44;
  + infix(_:_:)(v30);
  v32 = *(void (**)(char *, uint64_t))(v7 + 8);
  v32(v30, v28);
  v34 = v45;
  v33 = v46;
  v35 = *(void (**)(char *, _QWORD, uint64_t))(v45 + 104);
  v35(v46, enum case for DispatchTimeInterval.never(_:), v2);
  v36 = v43;
  *(_QWORD *)v43 = 0;
  v35(v36, enum case for DispatchTimeInterval.nanoseconds(_:), v2);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v31, v33, v36, ObjectType);
  v37 = *(void (**)(char *, uint64_t))(v34 + 8);
  v37(v36, v2);
  v37(v33, v2);
  v32(v31, v28);
  return v40;
}

uint64_t sub_1000F4910()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  _TtC14softposreaderd12RemoteReader *v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  _BYTE *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  char *v34;
  char *v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void (*v40)(char *, _QWORD, uint64_t);
  uint64_t v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  uint64_t ObjectType;
  unsigned int v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[290];
  _BYTE v56[296];
  _BYTE v57[272];
  _QWORD v58[38];
  _BYTE v59[296];
  _BYTE v60[296];
  _QWORD v61[38];

  v1 = v0;
  v2 = type metadata accessor for DispatchTimeInterval(0);
  v53 = *(_QWORD *)(v2 - 8);
  v54 = v2;
  v3 = __chkstk_darwin(v2);
  v50 = (char *)&ObjectType - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v52 = (char *)&ObjectType - v5;
  v51 = type metadata accessor for DispatchTime(0);
  v49 = *(_QWORD *)(v51 - 8);
  v6 = __chkstk_darwin(v51);
  v48 = (char *)&ObjectType - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v47 = (char *)&ObjectType - v8;
  if (qword_1001AD1C8 != -1)
    swift_once(&qword_1001AD1C8, sub_1000EDF20);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_100003A14(v9, (uint64_t)qword_1001B26D0);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "performOfflineAttestation()", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  sub_1000F82B8((uint64_t)v60);
  sub_100005EF8(v1 + 35, v1[38]);
  if (qword_1001AD120 != -1)
    swift_once(&qword_1001AD120, sub_1000BE8AC);
  v14 = sub_1000BB2E8(byte_1001B4D90);
  v16 = v1[28];
  v15 = v1[29];
  sub_100005EF8(v1 + 25, v16);
  v17 = (_TtC14softposreaderd12RemoteReader *)sub_1000046DC((uint64_t)&_swiftEmptyArrayStorage);
  (*(void (**)(uint64_t, id, _TtC14softposreaderd12RemoteReader *, uint64_t, uint64_t))(v15 + 8))(3736321, v14, v17, v16, v15);
  swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
  sub_100024374((uint64_t)v60, (uint64_t)v59, &qword_1001B28F8);
  sub_100005EF8(v1 + 35, v1[38]);
  v25 = sub_1000BA7A0((uint64_t)v14, v1[7]);
  if ((v25 & 1) == 0)
  {
    v27 = Logger.logObject.getter(v25);
    v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Offline attestation failed to validate complete attestation data, clearing attestation token", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

    sub_1000F851C((uint64_t)v59, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_1000F82F0);
    sub_1000549E8(v55);
    sub_100024374((uint64_t)v55, (uint64_t)v58, &qword_1001AE028);
    v58[35] = 0;
    v58[34] = 0;
    LOWORD(v58[36]) = 256;
    memcpy(v61, v58, 0x122uLL);
    BitString.init(data:unusedBits:)(v61);
    sub_100024374((uint64_t)v61, (uint64_t)v56, &qword_1001B28F8);
    sub_100024374((uint64_t)v55, (uint64_t)v57, &qword_1001AE028);
    v46 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 1;
    goto LABEL_14;
  }
  v46 = 1;
  sub_100024374((uint64_t)v59, (uint64_t)v61, &qword_1001B28F8);
  if (sub_1000F83CC((uint64_t)v61) != 1)
  {
    v32 = v61[36];
    v33 = BYTE1(v61[36]);
    v31 = v61[35];
    v30 = v61[34];
    sub_100024374((uint64_t)v59, (uint64_t)v58, &qword_1001B28F8);
    sub_100070F4C((uint64_t)v58);
    sub_100024374((uint64_t)v59, (uint64_t)v56, &qword_1001B28F8);
    sub_100024374((uint64_t)v61, (uint64_t)v57, &qword_1001AE028);
LABEL_14:
    sub_100024374((uint64_t)v57, (uint64_t)v55, &qword_1001AE028);
    *(_QWORD *)&v55[272] = v30;
    *(_QWORD *)&v55[280] = v31;
    v55[288] = v32;
    v55[289] = v33;
    memcpy(v61, v55, 0x122uLL);
    sub_100005EF8(v1 + 35, v1[38]);
    sub_1000BB134(v61);
    sub_1000710DC((uint64_t)v55);
    v26 = v56;
    goto LABEL_15;
  }
  v26 = v59;
LABEL_15:
  sub_100024374((uint64_t)v26, (uint64_t)v58, &qword_1001B28F8);
  ObjectType = swift_getObjectType(v1[4]);
  v34 = v48;
  static DispatchTime.now()(ObjectType);
  v35 = v47;
  + infix(_:_:)(v34);
  v36 = *(void (**)(char *, uint64_t))(v49 + 8);
  v37 = v51;
  v36(v34, v51);
  v39 = v52;
  v38 = v53;
  v40 = *(void (**)(char *, _QWORD, uint64_t))(v53 + 104);
  v41 = v54;
  v40(v52, enum case for DispatchTimeInterval.never(_:), v54);
  v42 = v50;
  *(_QWORD *)v50 = 0;
  v40(v42, enum case for DispatchTimeInterval.nanoseconds(_:), v41);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v35, v39, v42, ObjectType);
  sub_1000F851C((uint64_t)v58, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_1000F82F0);
  v43 = *(void (**)(char *, uint64_t))(v38 + 8);
  v43(v42, v41);
  v43(v39, v41);
  v36(v35, v37);
  return v46;
}

uint64_t sub_1000F4F54(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  _TtC14softposreaderd12RemoteReader *v11;
  SEL v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  char v19;
  id v20;
  uint64_t v21;
  char v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;

  v2 = v1;
  if (qword_1001AD1C8 != -1)
    swift_once(&qword_1001AD1C8, sub_1000EDF20);
  v4 = type metadata accessor for Logger(0);
  sub_100003A14(v4, (uint64_t)qword_1001B26D0);
  v5 = swift_retain_n(v1, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v30 = v9;
    *(_DWORD *)v8 = 136315138;
    if (*(_BYTE *)(v2 + 40))
      v10 = 0x656E696C66666FLL;
    else
      v10 = 0x656E696C6E6FLL;
    if (*(_BYTE *)(v2 + 40))
      v11 = (_TtC14softposreaderd12RemoteReader *)0xE700000000000000;
    else
      v11 = (_TtC14softposreaderd12RemoteReader *)0xE600000000000000;
    v29 = sub_1000056EC(v10, (unint64_t)v11, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v8 + 4, v8 + 12);
    swift_release_n(v2, 2);
    swift_bridgeObjectRelease(v11, v12, v13, v14, v15, v16, v17, v18);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "checkAttestationState() MPOCOperationMode: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_release_n(v2, 2);
  }
  v19 = *(_BYTE *)(v2 + 40);
  sub_100005EF8((_QWORD *)(v2 + 280), *(_QWORD *)(v2 + 304));
  if ((v19 & 1) != 0)
  {
    if (qword_1001AD120 != -1)
      swift_once(&qword_1001AD120, sub_1000BE8AC);
    v20 = sub_1000BB2E8(byte_1001B4D90);
    sub_100005EF8((_QWORD *)(v2 + 280), *(_QWORD *)(v2 + 304));
    v21 = sub_1000BA7A0((uint64_t)v20, *(_QWORD *)(v2 + 56));
    v22 = v21;
    v23 = Logger.logObject.getter(v21);
    v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v25 = 67109120;
      LODWORD(v30) = v22 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, (char *)&v30 + 4, v25 + 4, v25 + 8);
      v26 = "isOfflineAttested(): %{BOOL}d";
LABEL_19:
      _os_log_impl((void *)&_mh_execute_header, v23, v24, v26, v25, 8u);
      swift_slowDealloc(v25, -1, -1);
    }
  }
  else
  {
    v27 = sub_1000BA138(a1);
    v22 = v27;
    v23 = Logger.logObject.getter(v27);
    v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v25 = 67109120;
      LODWORD(v30) = v22 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, (char *)&v30 + 4, v25 + 4, v25 + 8);
      v26 = "isOnlineAttested(): %{BOOL}d";
      goto LABEL_19;
    }
  }

  return v22 & 1;
}

uint64_t sub_1000F52D4(uint64_t a1, double a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_signpost_type_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  uint64_t v37;
  uint8_t *v38;
  os_signpost_id_t v39;
  uint8_t *v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  uint64_t *v43;
  char v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  _BOOL4 v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  uint8_t *v54;
  uint64_t v55;
  NSObject *v56;
  char *v57;
  uint64_t v58;
  os_signpost_type_t v59;
  char v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  _BOOL4 v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t);
  uint8_t *v78;
  uint64_t v79;
  NSObject *v80;
  char *v81;
  uint64_t v82;
  os_signpost_type_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  const char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  int v94;
  uint64_t v95;
  NSObject *v96;
  os_log_type_t v97;
  uint8_t *v98;
  uint8_t *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint8_t *v105;
  os_signpost_id_t v106;
  void (*v107)(char *, uint64_t);
  char *v109;
  uint64_t v110;
  uint64_t v111;
  NSObject *v112;
  os_log_type_t v113;
  _BOOL4 v114;
  uint64_t v115;
  uint8_t *v116;
  uint8_t *v117;
  uint64_t v118;
  NSObject *v119;
  char *v120;
  uint64_t v121;
  os_signpost_type_t v122;
  uint64_t v123;
  uint64_t v124;
  const char *v125;
  char *v126;
  char *v127;
  uint8_t *v128;
  os_signpost_id_t v129;
  char *v130;
  uint8_t *v131;
  os_signpost_id_t v132;
  void *v133;
  NSObject *v134;
  uint64_t v135;
  uint8_t *v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  char v140;
  uint64_t v141;
  NSObject *v142;
  os_log_type_t v143;
  _BOOL4 v144;
  uint8_t *v145;
  uint64_t v146;
  NSObject *v147;
  char *v148;
  uint64_t v149;
  os_signpost_type_t v150;
  char v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  const char *v156;
  char *v157;
  uint8_t *v158;
  os_signpost_id_t v159;
  char *v160;
  char *v161;
  char *v162;
  char *v163;
  char *v164;
  char *v165;
  void (*v166)(char *, char *, uint64_t);
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  char *v177;
  void (*v178)(char *, uint64_t);
  _BYTE v179[296];
  _QWORD v180[37];
  _BYTE v181[272];
  _QWORD v182[37];
  _BYTE v183[272];
  _BYTE v184[272];
  uint64_t v185;
  uint64_t v186;
  __int16 v187;
  _QWORD v188[34];
  _BYTE v189[272];
  _BYTE v190[296];
  _BYTE v191[280];

  v168 = a1;
  v3 = sub_100003A2C((uint64_t *)&unk_1001B36F0);
  __chkstk_darwin(v3);
  v169 = (uint64_t)&v160 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v173 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v172 = (uint64_t)&v160 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = type metadata accessor for OSSignpostError(0);
  v174 = *(_QWORD *)(v167 - 8);
  v7 = __chkstk_darwin(v167);
  v163 = (char *)&v160 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v177 = (char *)&v160 - v10;
  v11 = __chkstk_darwin(v9);
  v161 = (char *)&v160 - v12;
  __chkstk_darwin(v11);
  v170 = (char *)&v160 - v13;
  v14 = type metadata accessor for OSSignpostID(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v165 = (char *)&v160 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v164 = (char *)&v160 - v19;
  v20 = __chkstk_darwin(v18);
  v162 = (char *)&v160 - v21;
  v22 = __chkstk_darwin(v20);
  v171 = (char *)&v160 - v23;
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v160 - v25;
  __chkstk_darwin(v24);
  v28 = (char *)&v160 - v27;
  if (qword_1001AD1D0 != -1)
    swift_once(&qword_1001AD1D0, sub_1000EDFB0);
  v29 = type metadata accessor for OSSignposter(0);
  v30 = sub_100003A14(v29, (uint64_t)qword_1001B26E8);
  v31 = static OSSignpostID.exclusive.getter();
  v32 = OSSignposter.logHandle.getter(v31);
  v33 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v178 = (void (*)(char *, uint64_t))v5;
    v34 = v30;
    v35 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
    v35(v26, v28, v14);
    v36 = v26;
    v37 = v14;
    v38 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v38 = 0;
    v39 = OSSignpostID.rawValue.getter(v38);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v32, v33, v39, "attestation-checkpoint", "begin attestation checkpoint", v38, 2u);
    v40 = v38;
    v14 = v37;
    v26 = v36;
    swift_slowDealloc(v40, -1, -1);

    (*(void (**)(char *, uint64_t))(v15 + 8))(v36, v14);
    v41 = v35;
    v30 = v34;
    v5 = (uint64_t)v178;
  }
  else
  {

    v41 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  }
  v166 = v41;
  v41(v26, v28, v14);
  v42 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
  v175 = OSSignpostIntervalState.init(id:isOpen:)(v26, 1);
  v178 = *(void (**)(char *, uint64_t))(v15 + 8);
  v178(v28, v14);
  v43 = v176;
  v44 = sub_1000F4F54(a2);
  v45 = v177;
  if ((v44 & 1) != 0)
  {
    if (qword_1001AD1C8 != -1)
      swift_once(&qword_1001AD1C8, sub_1000EDF20);
    v46 = v14;
    v47 = type metadata accessor for Logger(0);
    v48 = sub_100003A14(v47, (uint64_t)qword_1001B26D0);
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.info.getter();
    v51 = os_log_type_enabled(v49, v50);
    v52 = v175;
    v53 = v178;
    if (v51)
    {
      v54 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "checkAttestationState true", v54, 2u);
      swift_slowDealloc(v54, -1, -1);
    }

    v56 = OSSignposter.logHandle.getter(v55);
    v57 = v171;
    v58 = OSSignpostIntervalState.signpostID.getter();
    v59 = static os_signpost_type_t.end.getter(v58);
    v60 = OS_os_log.signpostsEnabled.getter();
    v61 = v170;
    if ((v60 & 1) != 0)
    {
      v62 = swift_retain();
      checkForErrorAndConsumeState(state:)(v62);
      swift_release(v52);
      v63 = v61;
      v64 = v174;
      v65 = v61;
      v66 = v167;
      if ((*(unsigned int (**)(char *, uint64_t))(v174 + 88))(v65, v167) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v67 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v64 + 8))(v63, v66);
        v67 = "end attestation checkpoint";
      }
      v102 = v26;
      v103 = v26;
      v104 = v46;
      v166(v102, v57, v46);
      v105 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v105 = 0;
      v106 = OSSignpostID.rawValue.getter(v105);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v56, v59, v106, "attestation-checkpoint", v67, v105, 2u);
      swift_slowDealloc(v105, -1, -1);

      v107 = v178;
      v178(v57, v104);
      v107(v103, v104);
      goto LABEL_35;
    }

    v90 = v57;
    v91 = v46;
LABEL_23:
    v53(v90, v91);
LABEL_35:
    swift_release(v52);
    return 1;
  }
  v68 = v169;
  sub_10005BC4C(v168, v169);
  v69 = v173;
  v70 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v173 + 48))(v68, 1, v5);
  v160 = v26;
  if (v70 == 1)
  {
    sub_10005218C(v68, (uint64_t *)&unk_1001B36F0);
    if (qword_1001AD1C8 != -1)
      swift_once(&qword_1001AD1C8, sub_1000EDF20);
    v71 = type metadata accessor for Logger(0);
    v72 = sub_100003A14(v71, (uint64_t)qword_1001B26D0);
    v73 = Logger.logObject.getter(v72);
    v74 = static os_log_type_t.info.getter();
    v75 = os_log_type_enabled(v73, v74);
    v76 = v175;
    v77 = v178;
    if (v75)
    {
      v78 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v78 = 0;
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "checkAttestationState false", v78, 2u);
      swift_slowDealloc(v78, -1, -1);
    }

    v80 = OSSignposter.logHandle.getter(v79);
    v81 = v165;
    v82 = OSSignpostIntervalState.signpostID.getter();
    v83 = static os_signpost_type_t.end.getter(v82);
    v84 = OS_os_log.signpostsEnabled.getter();
    v85 = v174;
    if ((v84 & 1) != 0)
    {
      v86 = swift_retain();
      v87 = v163;
      checkForErrorAndConsumeState(state:)(v86);
      swift_release(v76);
      v88 = v167;
      if ((*(unsigned int (**)(char *, uint64_t))(v85 + 88))(v87, v167) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v89 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v85 + 8))(v87, v88);
        v89 = "end attestation checkpoint";
      }
      v126 = v160;
      v166(v160, v81, v14);
      v127 = v81;
      v128 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v128 = 0;
      v129 = OSSignpostID.rawValue.getter(v128);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v80, v83, v129, "attestation-checkpoint", v89, v128, 2u);
      swift_slowDealloc(v128, -1, -1);

      v130 = v127;
LABEL_50:
      v77(v130, v14);
      v109 = v126;
      goto LABEL_51;
    }

    v109 = v81;
  }
  else
  {
    v171 = (char *)v30;
    v92 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 32))(v172, v68, v5);
    v93 = v43 + 35;
    sub_100005EF8(v43 + 35, v43[38]);
    sub_1000BB930(v184);
    if (*((_BYTE *)v43 + 40) == 1)
    {
      sub_100024374((uint64_t)v184, (uint64_t)v189, &qword_1001AE028);
      sub_100024374((uint64_t)v189, (uint64_t)v191, &qword_1001AE028);
      v94 = sub_1000240E0((uint64_t)v191);
      sub_100070F4C((uint64_t)v184);
      v76 = v175;
      v77 = v178;
      if (v94 == 1 && (sub_1000F61AC() & 1) == 0)
      {
        if (qword_1001AD1C8 != -1)
          swift_once(&qword_1001AD1C8, sub_1000EDF20);
        v95 = type metadata accessor for Logger(0);
        v170 = (char *)sub_100003A14(v95, (uint64_t)qword_1001B26D0);
        v96 = Logger.logObject.getter(v170);
        v97 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v96, v97))
        {
          v98 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v98 = 0;
          _os_log_impl((void *)&_mh_execute_header, v96, v97, "monitoring offline and attestation token absent and no reboot.attempt recovery...", v98, 2u);
          v99 = v98;
          v45 = v177;
          swift_slowDealloc(v99, -1, -1);
        }

        sub_100005EF8(v176 + 41, v176[44]);
        v100 = sub_100134B68(v172);
        if (v101)
        {
          sub_1000D2C04(v100, v101, v188);
          v133 = memcpy(v183, v188, sizeof(v183));
          v134 = Logger.logObject.getter(v133);
          v135 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v134, (os_log_type_t)v135))
          {
            v136 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v136 = 0;
            _os_log_impl((void *)&_mh_execute_header, v134, (os_log_type_t)v135, "found persisted attestation token", v136, 2u);
            swift_slowDealloc(v136, -1, -1);
          }

          v137 = v185;
          v138 = v186;
          v139 = v187;
          v140 = HIBYTE(v187);
          v180[34] = v185;
          v180[35] = v186;
          LOWORD(v180[36]) = v187;
          memcpy(v181, v183, sizeof(v181));
          BitString.init(data:unusedBits:)(v181);
          sub_100024374((uint64_t)v181, (uint64_t)v180, &qword_1001AE028);
          sub_100005EF8(v93, v176[38]);
          sub_100024374((uint64_t)v181, (uint64_t)v182, &qword_1001AE028);
          v182[34] = v137;
          v182[35] = v138;
          LOBYTE(v182[36]) = v139;
          BYTE1(v182[36]) = v140;
          memcpy(v190, v182, 0x122uLL);
          sub_100070F4C((uint64_t)v184);
          sub_10005BAFC(v188);
          sub_100070F4C((uint64_t)v182);
          sub_1000BB134(v190);
          sub_1000710DC((uint64_t)v182);
          v141 = sub_1000F4F54(a2);
          if ((v141 & 1) != 0)
          {
            v142 = Logger.logObject.getter(v141);
            v143 = static os_log_type_t.default.getter();
            v144 = os_log_type_enabled(v142, v143);
            v52 = v175;
            v53 = v178;
            if (v144)
            {
              v145 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v145 = 0;
              _os_log_impl((void *)&_mh_execute_header, v142, v143, "persisted attestation token is valid", v145, 2u);
              swift_slowDealloc(v145, -1, -1);
            }

            sub_100054898(v188);
            sub_1000710DC((uint64_t)v184);
            (*(void (**)(uint64_t, uint64_t))(v173 + 8))(v172, v92);
            memcpy(v179, v180, 0x122uLL);
            v146 = sub_1000710DC((uint64_t)v179);
            v147 = OSSignposter.logHandle.getter(v146);
            v148 = v162;
            v149 = OSSignpostIntervalState.signpostID.getter();
            v150 = static os_signpost_type_t.end.getter(v149);
            v151 = OS_os_log.signpostsEnabled.getter();
            v152 = v174;
            v153 = v161;
            if ((v151 & 1) != 0)
            {
              v154 = swift_retain();
              checkForErrorAndConsumeState(state:)(v154);
              swift_release(v52);
              v155 = v167;
              if ((*(unsigned int (**)(char *, uint64_t))(v152 + 88))(v153, v167) == enum case for OSSignpostError.doubleEnd(_:))
              {
                v156 = "[Error] Interval already ended";
              }
              else
              {
                (*(void (**)(char *, uint64_t))(v152 + 8))(v153, v155);
                v156 = "end attestation checkpoint";
              }
              v157 = v160;
              v166(v160, v148, v14);
              v158 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v158 = 0;
              v159 = OSSignpostID.rawValue.getter(v158);
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v147, v150, v159, "attestation-checkpoint", v156, v158, 2u);
              swift_slowDealloc(v158, -1, -1);

              v53(v148, v14);
            }
            else
            {

              v157 = v148;
            }
            v90 = v157;
            v91 = v14;
            goto LABEL_23;
          }
          sub_100054898(v188);
          sub_1000710DC((uint64_t)v182);
          v76 = v175;
          v45 = v177;
          v77 = v178;
        }
      }
    }
    else
    {
      sub_100070F4C((uint64_t)v184);
      v76 = v175;
      v77 = v178;
    }
    if (qword_1001AD1C8 != -1)
      swift_once(&qword_1001AD1C8, sub_1000EDF20);
    v110 = type metadata accessor for Logger(0);
    v111 = sub_100003A14(v110, (uint64_t)qword_1001B26D0);
    v112 = Logger.logObject.getter(v111);
    v113 = static os_log_type_t.info.getter();
    v114 = os_log_type_enabled(v112, v113);
    v115 = v174;
    if (v114)
    {
      v116 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v116 = 0;
      _os_log_impl((void *)&_mh_execute_header, v112, v113, "not attested", v116, 2u);
      v117 = v116;
      v45 = v177;
      swift_slowDealloc(v117, -1, -1);
    }

    sub_1000710DC((uint64_t)v184);
    v118 = (*(uint64_t (**)(uint64_t, uint64_t))(v173 + 8))(v172, v92);
    v119 = OSSignposter.logHandle.getter(v118);
    v120 = v164;
    v121 = OSSignpostIntervalState.signpostID.getter();
    v122 = static os_signpost_type_t.end.getter(v121);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v123 = swift_retain();
      checkForErrorAndConsumeState(state:)(v123);
      swift_release(v76);
      v124 = v167;
      if ((*(unsigned int (**)(char *, uint64_t))(v115 + 88))(v45, v167) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v125 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v115 + 8))(v45, v124);
        v125 = "end attestation checkpoint";
      }
      v126 = v160;
      v166(v160, v120, v14);
      v131 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v131 = 0;
      v132 = OSSignpostID.rawValue.getter(v131);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v119, v122, v132, "attestation-checkpoint", v125, v131, 2u);
      swift_slowDealloc(v131, -1, -1);

      v130 = v120;
      goto LABEL_50;
    }

    v109 = v120;
  }
LABEL_51:
  v77(v109, v14);
  swift_release(v76);
  return 0;
}

uint64_t sub_1000F61AC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  unint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;

  v1 = v0;
  if (qword_1001AD1C8 != -1)
    swift_once(&qword_1001AD1C8, sub_1000EDF20);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100003A14(v2, (uint64_t)qword_1001B26D0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "isRebootedSinceLastOnline()", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = sub_1000F7FC4();
  if (v8 >> 60 == 15)
  {
    v9 = Logger.logObject.getter(v7);
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Need boot UUID", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }
LABEL_17:
    v23 = 1;
    goto LABEL_18;
  }
  v12 = v7;
  v13 = v8;
  v14 = v1[11];
  v15 = v1[12];
  sub_100005EF8(v1 + 8, v14);
  if (qword_1001AD1E0 != -1)
    swift_once(&qword_1001AD1E0, sub_1000EE068);
  v16 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 32))(qword_1001B4F10, *(_QWORD *)algn_1001B4F18, v14, v15);
  v18 = v17;
  sub_1001288E0(v12, v13);
  if ((v19 & 1) == 0)
  {
    v9 = Logger.logObject.getter(v19);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v24, "Device reboot detected", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }
    sub_100005DE0(v16, v18);
    sub_10000A9B0(v12, v13);
    goto LABEL_17;
  }
  v20 = sub_100005DE0(v16, v18);
  v9 = Logger.logObject.getter(v20);
  v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v21, "Got previousBootUUID, no reboot detected", v22, 2u);
    swift_slowDealloc(v22, -1, -1);
  }
  sub_10000A9B0(v12, v13);
  v23 = 0;
LABEL_18:

  return v23;
}

uint64_t sub_1000F6540()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  unint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (qword_1001AD1C8 != -1)
    swift_once(&qword_1001AD1C8, sub_1000EDF20);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100003A14(v1, (uint64_t)qword_1001B26D0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "storeBootUUID()", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = sub_1000F7FC4();
  if (v7 >> 60 == 15)
  {
    v8 = Logger.logObject.getter(v6);
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Could not getBootUUID to storeBootUUID", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    v11 = sub_1000247AC(2035, 0x6F6F62206465654ELL, (void *)0xEE00444955552074, 0);
    return swift_willThrow(v11);
  }
  else
  {
    v13 = v6;
    v14 = v7;
    v16 = v0[11];
    v15 = v0[12];
    sub_100005EF8(v0 + 8, v16);
    if (qword_1001AD1E0 != -1)
      swift_once(&qword_1001AD1E0, sub_1000EE068);
    (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t))(v15 + 40))(qword_1001B4F10, *(_QWORD *)algn_1001B4F18, v13, v14, v16, v15);
    return sub_10000A9B0(v13, v14);
  }
}

_QWORD *sub_1000F6754()
{
  return sub_1000EE3F0();
}

uint64_t sub_1000F6774(uint64_t a1, uint64_t a2)
{
  return sub_1000EE590(a1, a2);
}

uint64_t sub_1000F6794()
{
  return sub_1000F3ED0();
}

uint64_t sub_1000F67B4(char a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, double a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v62;
  uint64_t v63;
  int v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD v81[5];
  _QWORD v82[5];
  _QWORD v83[5];
  _QWORD v84[5];

  v76 = a8;
  v74 = a6;
  v77 = a3;
  v75 = a10;
  v19 = a1 & 1;
  v66 = type metadata accessor for OS_dispatch_source.TimerFlags(0);
  v72 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v71 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v69 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v22 = (char *)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v67);
  v68 = (char *)&v62 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v24);
  v65 = (char *)&v62 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84[3] = type metadata accessor for DefaultSecureTimeKeeper();
  v84[4] = &off_10019C0A0;
  v84[0] = a4;
  v83[3] = type metadata accessor for SecureElement();
  v83[4] = &off_1001A11A8;
  v83[0] = a5;
  v82[3] = type metadata accessor for MPOCDefaultAttestationManager();
  v82[4] = &off_10019D8B8;
  v82[0] = a11;
  v81[3] = type metadata accessor for StoreAndForwardSelector();
  v81[4] = &off_1001A07D8;
  v81[0] = a13;
  *(_BYTE *)(a14 + 16) = 0;
  if (qword_1001AD1C8 != -1)
    swift_once(&qword_1001AD1C8, sub_1000EDF20);
  v73 = a12;
  v26 = type metadata accessor for Logger(0);
  v63 = sub_100003A14(v26, (uint64_t)qword_1001B26D0);
  v27 = Logger.logObject.getter(v63);
  v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    v30 = (_QWORD *)swift_slowAlloc(32, -1);
    v62 = v22;
    v31 = a7;
    v32 = v19;
    v33 = v30;
    v80 = v30;
    *(_DWORD *)v29 = 136315138;
    v78 = sub_1000056EC(0xD0000000000000AFLL, 0x800000010016F800, (uint64_t *)&v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v29 + 4, v29 + 12);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "%s", v29, 0xCu);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    v34 = v33;
    v19 = v32;
    a7 = v31;
    v22 = v62;
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v29, -1, -1);
  }

  v64 = v19;
  *(_BYTE *)(a14 + 40) = v19;
  *(double *)(a14 + 48) = a9;
  *(_QWORD *)(a14 + 56) = a2;
  v35 = v77;
  sub_100008390((uint64_t)v77, a14 + 64);
  sub_100008390((uint64_t)v84, a14 + 104);
  sub_100008390((uint64_t)v83, a14 + 144);
  v36 = v74;
  *(_QWORD *)(a14 + 184) = v74;
  *(_QWORD *)(a14 + 192) = a7;
  sub_100008390((uint64_t)v76, a14 + 200);
  sub_100008390((uint64_t)v75, a14 + 240);
  sub_100008390((uint64_t)v82, a14 + 280);
  v37 = v73;
  *(_QWORD *)(a14 + 320) = v73;
  sub_100008390((uint64_t)v81, a14 + 328);
  sub_100005E24(0, (unint64_t *)&qword_1001B1240, OS_dispatch_queue_ptr);
  swift_unknownObjectRetain(v36);
  v38 = swift_retain(v37);
  v39 = v65;
  static DispatchQoS.background.getter(v38);
  v80 = _swiftEmptyArrayStorage;
  v40 = sub_100005F1C((unint64_t *)&qword_1001AE3E0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v41 = sub_100003A2C((uint64_t *)&unk_1001B1250);
  v42 = sub_100005F5C((unint64_t *)&qword_1001AE3F0, (uint64_t *)&unk_1001B1250);
  v43 = v68;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v80, v41, v42, v67, v40);
  (*(void (**)(char *, _QWORD, uint64_t))(v69 + 104))(v22, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v70);
  v44 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000027, 0x800000010016F7D0, v39, v43, v22, 0);
  *(_QWORD *)(a14 + 24) = v44;
  sub_100005E24(0, &qword_1001AC658, OS_dispatch_source_ptr);
  v80 = _swiftEmptyArrayStorage;
  v45 = sub_100005F1C(&qword_1001AF680, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  v46 = sub_100003A2C(&qword_1001AF688);
  v47 = sub_100005F5C(&qword_1001AF690, &qword_1001AF688);
  v48 = v71;
  v49 = v46;
  v50 = v66;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v80, v49, v47, v66, v45);
  v51 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v48, v44);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v48, v50);
  *(_QWORD *)(a14 + 32) = v51;
  v52 = v35[3];
  v53 = v35[4];
  sub_100005EF8(v35, v52);
  if (qword_1001AD1D8 != -1)
    swift_once(&qword_1001AD1D8, sub_1000EE040);
  v54 = qword_1001B4F00;
  v55 = *(_QWORD *)algn_1001B4F08;
  v56 = sub_100003A2C(&qword_1001AC678);
  v57 = swift_allocObject(v56, 33, 7);
  *(_OWORD *)(v57 + 16) = xmmword_10015A5F0;
  *(_BYTE *)(v57 + 32) = v64;
  v58 = sub_10010DD5C(v57);
  v60 = v59;
  swift_bridgeObjectRelease(v57);
  (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v53 + 40))(v54, v55, v58, v60, v52, v53);
  sub_100005DE0(v58, v60);
  swift_unknownObjectRelease(v74);
  swift_release(v73);
  sub_100005D3C(v81);
  sub_100005D3C(v82);
  sub_100005D3C(v75);
  sub_100005D3C(v76);
  sub_100005D3C(v83);
  sub_100005D3C(v84);
  sub_100005D3C(v77);
  return a14;
}

uint64_t sub_1000F6F44(char a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, double a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD v43[3];
  uint64_t v44;
  _UNKNOWN **v45;
  _QWORD v46[3];
  uint64_t v47;
  _UNKNOWN **v48;
  _QWORD v49[3];
  uint64_t v50;
  _UNKNOWN **v51;
  _QWORD v52[3];
  uint64_t v53;
  _UNKNOWN **v54;

  v42 = a8;
  v41 = a7;
  v40 = a6;
  v39 = a3;
  v17 = a1 & 1;
  v53 = type metadata accessor for DefaultSecureTimeKeeper();
  v54 = &off_10019C0A0;
  v52[0] = a4;
  v50 = type metadata accessor for SecureElement();
  v51 = &off_1001A11A8;
  v49[0] = a5;
  v47 = type metadata accessor for MPOCDefaultAttestationManager();
  v48 = &off_10019D8B8;
  v46[0] = a11;
  v44 = type metadata accessor for StoreAndForwardSelector();
  v45 = &off_1001A07D8;
  v43[0] = a13;
  v18 = type metadata accessor for MPOCDefaultMonitorManager();
  v19 = swift_allocObject(v18, 368, 7);
  v20 = sub_10001A64C((uint64_t)v52, v53);
  __chkstk_darwin(v20);
  v22 = (uint64_t *)((char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v23 + 16))(v22);
  v24 = sub_10001A64C((uint64_t)v49, v50);
  __chkstk_darwin(v24);
  v26 = (uint64_t *)((char *)&v38 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v27 + 16))(v26);
  v28 = sub_10001A64C((uint64_t)v46, v47);
  __chkstk_darwin(v28);
  v30 = (uint64_t *)((char *)&v38 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v31 + 16))(v30);
  v32 = sub_10001A64C((uint64_t)v43, v44);
  __chkstk_darwin(v32);
  v34 = (uint64_t *)((char *)&v38 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v35 + 16))(v34);
  v36 = sub_1000F67B4(v17, a2, v39, *v22, *v26, v40, v41, v42, a9, a10, *v30, a12, *v34, v19);
  sub_100005D3C(v43);
  sub_100005D3C(v46);
  sub_100005D3C(v49);
  sub_100005D3C(v52);
  return v36;
}

_QWORD *sub_1000F71FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[5];
  _QWORD v52[5];
  _BYTE v53[40];
  _QWORD v54[6];

  v50 = a6;
  v48 = a4;
  v47 = a3;
  v45 = a1;
  v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008390((uint64_t)(a7 + 2), (uint64_t)v54);
  sub_100005EF8(a7 + 12, a7[15]);
  v46 = a2;
  swift_bridgeObjectRetain(a2);
  v49 = a5;
  swift_bridgeObjectRetain(a5);
  sub_10003146C((uint64_t)v53);
  v20 = a7[17];
  sub_100008390((uint64_t)(a7 + 18), (uint64_t)v52);
  sub_100008390((uint64_t)(a7 + 25), (uint64_t)v51);
  v21 = a7[23];
  v22 = a7[24];
  v44 = v21;
  sub_100005E24(0, (unint64_t *)&qword_1001B1240, OS_dispatch_queue_ptr);
  swift_retain(v20);
  v23 = swift_bridgeObjectRetain(v22);
  v24 = static DispatchQoS.background.getter(v23);
  static OS_dispatch_queue.Attributes.concurrent.getter(v24);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v10);
  v25 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0x656E676953414142, 0xE900000000000072, v19, v16, v13, 0);
  if (qword_1001AD320 != -1)
    swift_once(&qword_1001AD320, sub_100141628);
  v26 = qword_1001AD318;
  v27 = (id)qword_1001B5010;
  if (v26 != -1)
    swift_once(&qword_1001AD318, sub_10014157C);
  v28 = qword_1001B5008;
  v29 = sub_10001A64C((uint64_t)v52, v52[3]);
  __chkstk_darwin(v29);
  v31 = (uint64_t *)((char *)&v44 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v32 + 16))(v31);
  v33 = sub_10001A64C((uint64_t)v51, v51[3]);
  __chkstk_darwin(v33);
  v35 = (uint64_t *)((char *)&v44 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v36 + 16))(v35);
  v37 = *v31;
  v38 = *v35;
  v39 = v50;
  swift_retain(v50);
  swift_bridgeObjectRetain(v28);
  *((_QWORD *)&v43 + 1) = v27;
  *((_QWORD *)&v42 + 1) = v22;
  *(_QWORD *)&v43 = v25;
  *(_QWORD *)&v42 = v44;
  v40 = sub_1000F75BC(v45, v46, v47, v48, v49, v54, v39, (uint64_t)v53, v20, v37, v38, v42, v43, v28);
  sub_100005D3C(v51);
  sub_100005D3C(v52);
  sub_100005F1C(&qword_1001B2920, (uint64_t (*)(uint64_t))type metadata accessor for BAASigner, (uint64_t)&unk_10016326C);
  return v40;
}

_QWORD *sub_1000F75BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, __int128 a13, uint64_t a14)
{
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[3];
  uint64_t v37;
  _UNKNOWN **v38;
  _QWORD v39[3];
  uint64_t v40;
  _UNKNOWN **v41;

  v34 = a7;
  v35 = a8;
  v32 = a5;
  v33 = a6;
  v30 = a13;
  v31 = a12;
  v40 = type metadata accessor for SystemInfo();
  v41 = &off_10019F8A0;
  v39[0] = a10;
  v37 = type metadata accessor for DefaultSecureTimeKeeper();
  v38 = &off_10019C0A0;
  v36[0] = a11;
  v18 = type metadata accessor for BAASigner();
  v19 = (_QWORD *)swift_allocObject(v18, 368, 7);
  v20 = sub_10001A64C((uint64_t)v39, v40);
  __chkstk_darwin(v20);
  v22 = (uint64_t *)((char *)&v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v23 + 16))(v22);
  v24 = sub_10001A64C((uint64_t)v36, v37);
  __chkstk_darwin(v24);
  v26 = (uint64_t *)((char *)&v30 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v27 + 16))(v26);
  v28 = sub_1000F7774(a1, a2, a3, a4, v32, v33, v34, v35, a9, *v22, *v26, v31, *((void **)&v31 + 1), (void *)v30, *((void **)&v30 + 1), a14, v19);
  sub_100005D3C(v36);
  sub_100005D3C(v39);
  return v28;
}

_QWORD *sub_1000F7774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, _QWORD *a17)
{
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD aBlock[6];
  _QWORD v61[5];
  _QWORD v62[5];
  _QWORD v63[5];
  _QWORD v64[5];

  v58 = a6;
  v53 = a5;
  v52 = a4;
  v51 = a3;
  v50 = a2;
  v49 = a1;
  v56 = a16;
  v54 = a15;
  v57 = a13;
  v55 = a12;
  v19 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64[3] = type metadata accessor for NullAuditor();
  v64[4] = &off_10019AB58;
  v64[0] = a7;
  v63[3] = &type metadata for SystemRandomNumberGenerator;
  v63[4] = &protocol witness table for SystemRandomNumberGenerator;
  v62[3] = type metadata accessor for SystemInfo();
  v62[4] = &off_10019F8A0;
  v62[0] = a10;
  v61[3] = type metadata accessor for DefaultSecureTimeKeeper();
  v61[4] = &off_10019C0A0;
  aBlock[5] = 0;
  v61[0] = a11;
  a17[7] = 0;
  aBlock[4] = BitString.init(data:unusedBits:);
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000043B8;
  aBlock[3] = &unk_10019F2E0;
  v22 = _Block_copy(aBlock);
  v59 = _swiftEmptyArrayStorage;
  v23 = sub_100005F1C((unint64_t *)&qword_1001B1260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_100003A2C((uint64_t *)&unk_1001AE400);
  v25 = sub_100005F5C((unint64_t *)&qword_1001B1270, (uint64_t *)&unk_1001AE400);
  v26 = v24;
  v27 = (_QWORD *)a8;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v59, v26, v25, v19, v23);
  v28 = type metadata accessor for DispatchWorkItem(0);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  v29 = v22;
  v30 = v58;
  a17[44] = DispatchWorkItem.init(flags:block:)(v21, v29);
  a17[45] = 600000;
  v31 = v50;
  a17[2] = v49;
  a17[3] = v31;
  v32 = v52;
  a17[4] = v51;
  a17[5] = v32;
  a17[6] = v53;
  sub_100008390((uint64_t)v30, (uint64_t)(a17 + 8));
  sub_100008390((uint64_t)v64, (uint64_t)(a17 + 13));
  sub_100008390(a8, (uint64_t)(a17 + 33));
  a17[38] = a9;
  sub_100008390((uint64_t)v62, (uint64_t)(a17 + 39));
  sub_100008390((uint64_t)v61, (uint64_t)(a17 + 28));
  v33 = v54;
  a17[18] = a14;
  a17[19] = v33;
  v34 = v55;
  a17[20] = v56;
  a17[21] = v34;
  a17[22] = v57;
  sub_100008390((uint64_t)v63, (uint64_t)(a17 + 23));
  swift_retain(a9);
  v35 = a14;
  v36 = v33;
  v37 = sub_10012CF58();
  if (!v37)
    goto LABEL_5;
  v38 = v37;
  v39 = *(_QWORD *)(v37 + 24);
  v40 = *(_QWORD *)(v37 + 32);
  sub_100005D9C(v39, v40);
  v41 = sub_10012F6DC();
  sub_100005DE0(v39, v40);
  if ((v41 & 1) == 0)
  {
    sub_10012DD18();
    swift_release(v38);
LABEL_5:
    v57 = v35;
    sub_10012C888();
    v45 = v44;
    sub_10012D6F4(v44);
    sub_10012E180(v45, v46);
    swift_release(a9);

    swift_release(v45);
    goto LABEL_6;
  }
  v42 = a17[7];
  a17[7] = v38;
  swift_retain(v38);
  swift_release(v42);
  sub_10012E180(v38, v43);
  swift_release(v38);
  swift_release(a9);

LABEL_6:
  sub_100005D3C(v63);
  sub_100005D3C(v61);
  sub_100005D3C(v62);
  sub_100005D3C(v27);
  sub_100005D3C(v64);
  sub_100005D3C(v30);
  return a17;
}

uint64_t sub_1000F7FC4()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t countAndFlagsBits;
  void *object;
  unint64_t v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _TtC14softposreaderd12RemoteReader *v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  size_t v28;
  uint64_t v29;
  void *v30;
  _BYTE v31[24];
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;

  if (qword_1001AD1C8 != -1)
    swift_once(&qword_1001AD1C8, sub_1000EDF20);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B26D0);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "getBootUUID()", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  v28 = 37;
  v5 = (void *)swift_slowAlloc(37, -1);
  if (sysctlbyname("kern.bootsessionuuid", v5, &v28, 0, 0))
  {
    v6 = 0;
  }
  else
  {
    if (__OFSUB__(v28, 1))
      __break(1u);
    v6 = sub_1000FAA88((uint64_t)v5, (uint64_t)v5 + v28 - 1);
    v33 = v6;
    v34 = v7;
    v8 = Logger.logObject.getter(v6);
    v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v32 = v11;
      *(_DWORD *)v10 = 136315138;
      swift_beginAccess(&v33, v31, 0, 0);
      countAndFlagsBits = 0;
      object = 0;
      v6 = v33;
      v14 = v34;
      if (v34 >> 60 != 15)
      {
        sub_100005D9C(v33, v34);
        v15 = Data.hexString()();
        countAndFlagsBits = v15._countAndFlagsBits;
        object = v15._object;
        sub_10000A9B0(v6, v14);
      }
      v29 = countAndFlagsBits;
      v30 = object;
      v16 = sub_100003A2C(&qword_1001AE030);
      v17 = String.init<A>(describing:)(&v29, v16);
      v19 = (_TtC14softposreaderd12RemoteReader *)v18;
      v29 = sub_1000056EC(v17, v18, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease(v19, v20, v21, v22, v23, v24, v25, v26);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "bootUUID data: %s", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }

  }
  swift_slowDealloc(v5, -1, -1);
  return v6;
}

double sub_1000F82B8(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = xmmword_10015E620;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_WORD *)(a1 + 288) = 0;
  return result;
}

void sub_1000F82F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,unint64_t a32,uint64_t a33,uint64_t a34,_TtC14softposreaderd12RemoteReader *a35)
{
  SEL v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;

  if (a2 != 1)
  {
    sub_100024170(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
      a20,
      a21,
      a22,
      a23,
      a24,
      a25,
      a26,
      a27,
      a28,
      a29,
      a30,
      a31,
      a32,
      a33,
      a34);
    swift_bridgeObjectRelease(a35, v35, v36, v37, v38, v39, v40, v41);
  }
}

uint64_t sub_1000F83CC(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

uint64_t sub_1000F83F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000F8400(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000F8408()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000F842C()
{
  uint64_t v0;

  return sub_1000F3794(v0);
}

unint64_t sub_1000F8434()
{
  unint64_t result;

  result = qword_1001B2900;
  if (!qword_1001B2900)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt8, &type metadata for UInt8);
    atomic_store(result, (unint64_t *)&qword_1001B2900);
  }
  return result;
}

unint64_t sub_1000F8478()
{
  unint64_t result;

  result = qword_1001B2908;
  if (!qword_1001B2908)
  {
    result = swift_getWitnessTable(&unk_100161BF0, &type metadata for MPOCMonitorManagerError);
    atomic_store(result, (unint64_t *)&qword_1001B2908);
  }
  return result;
}

uint64_t sub_1000F84BC(uint64_t result)
{
  *(_BYTE *)(result + 321) = 1;
  return result;
}

uint64_t sub_1000F84C8(uint64_t result)
{
  *(_BYTE *)(result + 321) = 0;
  return result;
}

uint64_t sub_1000F84D0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 321);
}

unint64_t sub_1000F84D8()
{
  unint64_t result;

  result = qword_1001B2918;
  if (!qword_1001B2918)
  {
    result = swift_getWitnessTable(&unk_100161FF8, &type metadata for MPOCMonitorInstruction);
    atomic_store(result, (unint64_t *)&qword_1001B2918);
  }
  return result;
}

uint64_t sub_1000F851C(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int16 v7;

  v7 = *(_WORD *)(a1 + 288);
  v5 = *(_OWORD *)(a1 + 240);
  v6 = *(_OWORD *)(a1 + 256);
  v4 = *(_OWORD *)(a1 + 208);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    v4,
    *((_QWORD *)&v4 + 1),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v5,
    *((_QWORD *)&v5 + 1),
    v6,
    *((_QWORD *)&v6 + 1),
    *(_QWORD *)(a1 + 272),
    *(_QWORD *)(a1 + 280),
    v7);
  return a1;
}

uint64_t sub_1000F85A8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,unint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a2 != 1)
  {
    sub_100070FD0(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
      a20,
      a21,
      a22,
      a23,
      a24,
      a25,
      a26,
      a27,
      a28,
      a29,
      a30,
      a31,
      a32,
      a33,
      a34);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000F8684(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _TtC14softposreaderd12RemoteReader *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *(_QWORD *)(a1 + 32);
  v23 = *(_QWORD *)(a1 + 24);
  v24 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v21 = *(_OWORD *)(a1 + 96);
  v22 = *(_OWORD *)(a1 + 80);
  v19 = *(_OWORD *)(a1 + 128);
  v20 = *(_OWORD *)(a1 + 112);
  v17 = *(_OWORD *)(a1 + 160);
  v18 = *(_OWORD *)(a1 + 144);
  v15 = *(_OWORD *)(a1 + 192);
  v16 = *(_OWORD *)(a1 + 176);
  v14 = *(_OWORD *)(a1 + 208);
  v12 = *(_OWORD *)(a1 + 240);
  v13 = *(_OWORD *)(a1 + 224);
  v10 = *(_OWORD *)(a1 + 272);
  v11 = *(_OWORD *)(a1 + 256);
  v8 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 288);
  swift_errorRelease();
  sub_1000F82F0(v24, v23, v2, v3, v4, v5, v6, v7, v22, *((uint64_t *)&v22 + 1), v21, *((uint64_t *)&v21 + 1), v20, *((uint64_t *)&v20 + 1), v19, *((uint64_t *)&v19 + 1), v18, *((uint64_t *)&v18 + 1), v17,
    *((uint64_t *)&v17 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v11,
    *((unint64_t *)&v11 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v8);
  return a1;
}

uint64_t sub_1000F87CC(uint64_t a1)
{
  __int128 v3;
  __int128 v4;

  v3 = *(_OWORD *)(a1 + 224);
  v4 = *(_OWORD *)(a1 + 240);
  sub_100070FD0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((unint64_t *)&v4 + 1),
    *(_QWORD *)(a1 + 256),
    *(_QWORD *)(a1 + 264));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000F8850(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v6 = *(_OWORD *)(a1 + 272);
  v7 = *(_OWORD *)(a1 + 288);
  v4 = *(_OWORD *)(a1 + 240);
  v5 = *(_OWORD *)(a1 + 256);
  v3 = *(_OWORD *)(a1 + 208);
  sub_1000F88E8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    v3,
    *((uint64_t *)&v3 + 1),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v4,
    *((unint64_t *)&v4 + 1),
    v5,
    *((unint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    (_TtC14softposreaderd12RemoteReader *)v7,
    *((uint64_t *)&v7 + 1),
    *(_QWORD *)(a1 + 304),
    *(_QWORD *)(a1 + 312),
    *(_BYTE *)(a1 + 320),
    *(_BYTE *)(a1 + 321));
  return a1;
}

void sub_1000F88E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,unint64_t a32,uint64_t a33,unint64_t a34,uint64_t a35,uint64_t a36,_TtC14softposreaderd12RemoteReader *a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,char a42)
{
  SEL v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;

  if ((a42 & 1) != 0)
  {
    swift_errorRelease();
    sub_1000F82F0(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21,
      a22,
      a23,
      a24,
      a25,
      a26,
      a27,
      a28,
      a29,
      a30,
      a31,
      a32,
      a33,
      a34,
      a35,
      a36,
      a37);
  }
  else
  {
    sub_100024170(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
      a20,
      a21,
      a22,
      a23,
      a24,
      a25,
      a26,
      a27,
      a28,
      a29,
      a30,
      a31,
      a32,
      a33,
      a34);
    swift_bridgeObjectRelease(a37, v42, v43, v44, v45, v46, v47, v48);
  }
}

uint64_t sub_1000F8AF8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000F8B24()
{
  uint64_t v0;
  void (*v1)(_QWORD);

  v1 = *(void (**)(_QWORD))(v0 + 24);
  sub_1000EE788(1);
  v1(0);
  return swift_errorRelease();
}

void sub_1000F8B74()
{
  sub_1000EE788(0);
}

uint64_t sub_1000F8B8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[3];

  if (qword_1001AD1C8 != -1)
    swift_once(&qword_1001AD1C8, sub_1000EDF20);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_100003A14(v3, (uint64_t)qword_1001B26D0);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = a1;
    v9 = swift_slowAlloc(32, -1);
    v24[0] = v9;
    *(_DWORD *)v7 = 136315138;
    v20 = sub_1000056EC(0x7065642874696E69, 0xEC000000293A746FLL, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v7 + 4, v7 + 12);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s", v7, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    v10 = v9;
    a1 = v8;
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }

  sub_1000DF844();
  if (!v1)
  {
    sub_1000DBA54();
    v11 = v22;
    v12 = v23;
    sub_100005EF8(&v20, v22);
    sub_10001CA88(v11, v12);
    v13 = v18;
    v14 = v19;
    sub_100005EF8(v17, v18);
    if (qword_1001AD1D8 != -1)
      swift_once(&qword_1001AD1D8, sub_1000EE040);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 32))(qword_1001B4F00, *(_QWORD *)algn_1001B4F08, v13, v14);
    __asm { BR              X10 }
  }
  swift_release(a1);
  return a1;
}

void destroy for MPOCMonitorInstruction(uint64_t a1)
{
  const char *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _TtC14softposreaderd12RemoteReader *v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  SEL v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  SEL v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  SEL v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  SEL v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  SEL v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  SEL v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  SEL v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  SEL v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;

  swift_errorRelease();
  v9 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 24);
  if (v9)
  {
    if (v9 == (_TtC14softposreaderd12RemoteReader *)1)
      return;
    swift_bridgeObjectRelease(v9, v2, v3, v4, v5, v6, v7, v8);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 40), v10, v11, v12, v13, v14, v15, v16);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 56), v17, v18, v19, v20, v21, v22, v23);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 72), v24, v25, v26, v27, v28, v29, v30);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 88), v31, v32, v33, v34, v35, v36, v37);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 104), v38, v39, v40, v41, v42, v43, v44);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 152), v45, v46, v47, v48, v49, v50, v51);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 168), v52, v53, v54, v55, v56, v57, v58);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 184), v59, v60, v61, v62, v63, v64, v65);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 200), v66, v67, v68, v69, v70, v71, v72);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 216), v73, v74, v75, v76, v77, v78, v79);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 232), v80, v81, v82, v83, v84, v85, v86);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 248), v87, v88, v89, v90, v91, v92, v93);
    sub_100005DE0(*(_QWORD *)(a1 + 256), *(_QWORD *)(a1 + 264));
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 280), v94, v95, v96, v97, v98, v99, v100);
  }
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 288), v2, v3, v4, v5, v6, v7, v8);
}

uint64_t initializeWithCopy for MPOCMonitorInstruction(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = *a2;
  swift_errorRetain();
  *(_QWORD *)a1 = v4;
  *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  v5 = a2 + 2;
  v6 = a2[3];
  if (!v6)
  {
    memcpy((void *)(a1 + 16), v5, 0x110uLL);
LABEL_6:
    v21 = a2[37];
    *(_QWORD *)(a1 + 288) = a2[36];
    *(_QWORD *)(a1 + 296) = v21;
    *(_WORD *)(a1 + 304) = *((_WORD *)a2 + 152);
    swift_bridgeObjectRetain();
    goto LABEL_7;
  }
  if (v6 != 1)
  {
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v6;
    v7 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v7;
    v8 = a2[7];
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v8;
    v9 = a2[9];
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v9;
    v10 = a2[11];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v10;
    v11 = a2[13];
    *(_QWORD *)(a1 + 96) = a2[12];
    *(_QWORD *)(a1 + 104) = v11;
    *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
    *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
    *(_QWORD *)(a1 + 128) = a2[16];
    v12 = a2[19];
    *(_QWORD *)(a1 + 144) = a2[18];
    *(_QWORD *)(a1 + 152) = v12;
    v13 = a2[21];
    *(_QWORD *)(a1 + 160) = a2[20];
    *(_QWORD *)(a1 + 168) = v13;
    v14 = a2[23];
    *(_QWORD *)(a1 + 176) = a2[22];
    *(_QWORD *)(a1 + 184) = v14;
    v15 = a2[25];
    *(_QWORD *)(a1 + 192) = a2[24];
    *(_QWORD *)(a1 + 200) = v15;
    v16 = a2[27];
    *(_QWORD *)(a1 + 208) = a2[26];
    *(_QWORD *)(a1 + 216) = v16;
    v17 = a2[29];
    *(_QWORD *)(a1 + 224) = a2[28];
    *(_QWORD *)(a1 + 232) = v17;
    v18 = a2[31];
    *(_QWORD *)(a1 + 240) = a2[30];
    *(_QWORD *)(a1 + 248) = v18;
    v19 = a2[33];
    v23 = a2[32];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100005D9C(v23, v19);
    *(_QWORD *)(a1 + 256) = v23;
    *(_QWORD *)(a1 + 264) = v19;
    v20 = a2[35];
    *(_QWORD *)(a1 + 272) = a2[34];
    *(_QWORD *)(a1 + 280) = v20;
    swift_bridgeObjectRetain();
    goto LABEL_6;
  }
  memcpy((void *)(a1 + 16), v5, 0x122uLL);
LABEL_7:
  *(_BYTE *)(a1 + 306) = *((_BYTE *)a2 + 306);
  *(_WORD *)(a1 + 307) = *(_WORD *)((char *)a2 + 307);
  *(_QWORD *)(a1 + 312) = a2[39];
  *(_BYTE *)(a1 + 320) = *((_BYTE *)a2 + 320);
  return a1;
}

uint64_t assignWithCopy for MPOCMonitorInstruction(uint64_t a1, uint64_t *a2)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _TtC14softposreaderd12RemoteReader *v13;
  uint64_t v14;
  uint64_t v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  _TtC14softposreaderd12RemoteReader *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  _TtC14softposreaderd12RemoteReader *v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  _TtC14softposreaderd12RemoteReader *v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  _TtC14softposreaderd12RemoteReader *v47;
  SEL v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  _TtC14softposreaderd12RemoteReader *v55;
  SEL v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  uint64_t v63;
  _TtC14softposreaderd12RemoteReader *v64;
  SEL v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  _TtC14softposreaderd12RemoteReader *v72;
  SEL v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  _TtC14softposreaderd12RemoteReader *v80;
  SEL v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  _TtC14softposreaderd12RemoteReader *v88;
  SEL v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  _TtC14softposreaderd12RemoteReader *v96;
  SEL v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  _TtC14softposreaderd12RemoteReader *v104;
  SEL v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  _TtC14softposreaderd12RemoteReader *v112;
  SEL v113;
  id v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  _TtC14softposreaderd12RemoteReader *v124;
  SEL v125;
  id v126;
  id v127;
  id v128;
  id v129;
  id v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  _TtC14softposreaderd12RemoteReader *v134;
  SEL v135;
  id v136;
  id v137;
  id v138;
  id v139;
  id v140;
  id v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;

  v4 = (char *)a2 + 306;
  v5 = *a2;
  swift_errorRetain();
  *(_QWORD *)a1 = v5;
  swift_errorRelease();
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_BYTE *)(a1 + 9) = *((_BYTE *)a2 + 9);
  v13 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 24);
  v14 = a2[3];
  if (v13 != (_TtC14softposreaderd12RemoteReader *)1)
  {
    if (v14 == 1)
    {
      sub_1000F9D44(a1 + 16, v6, v7, v8, v9, v10, v11, v12);
      goto LABEL_7;
    }
    if (v13)
    {
      if (v14)
      {
        *(_QWORD *)(a1 + 16) = a2[2];
        *(_QWORD *)(a1 + 24) = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease(v13, v16, v17, v18, v19, v20, v21, v22);
        *(_QWORD *)(a1 + 32) = a2[4];
        v23 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 40);
        *(_QWORD *)(a1 + 40) = a2[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
        *(_QWORD *)(a1 + 48) = a2[6];
        v31 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 56);
        *(_QWORD *)(a1 + 56) = a2[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease(v31, v32, v33, v34, v35, v36, v37, v38);
        *(_QWORD *)(a1 + 64) = a2[8];
        v39 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 72);
        *(_QWORD *)(a1 + 72) = a2[9];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease(v39, v40, v41, v42, v43, v44, v45, v46);
        *(_QWORD *)(a1 + 80) = a2[10];
        v47 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 88);
        *(_QWORD *)(a1 + 88) = a2[11];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease(v47, v48, v49, v50, v51, v52, v53, v54);
        *(_QWORD *)(a1 + 96) = a2[12];
        v55 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 104);
        *(_QWORD *)(a1 + 104) = a2[13];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease(v55, v56, v57, v58, v59, v60, v61, v62);
        *(_QWORD *)(a1 + 112) = a2[14];
        *(_QWORD *)(a1 + 120) = a2[15];
        v63 = a2[16];
        *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
        *(_QWORD *)(a1 + 128) = v63;
        *(_QWORD *)(a1 + 144) = a2[18];
        v64 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 152);
        *(_QWORD *)(a1 + 152) = a2[19];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease(v64, v65, v66, v67, v68, v69, v70, v71);
        *(_QWORD *)(a1 + 160) = a2[20];
        v72 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 168);
        *(_QWORD *)(a1 + 168) = a2[21];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease(v72, v73, v74, v75, v76, v77, v78, v79);
        *(_QWORD *)(a1 + 176) = a2[22];
        v80 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 184);
        *(_QWORD *)(a1 + 184) = a2[23];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease(v80, v81, v82, v83, v84, v85, v86, v87);
        *(_QWORD *)(a1 + 192) = a2[24];
        v88 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 200);
        *(_QWORD *)(a1 + 200) = a2[25];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease(v88, v89, v90, v91, v92, v93, v94, v95);
        *(_QWORD *)(a1 + 208) = a2[26];
        v96 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 216);
        *(_QWORD *)(a1 + 216) = a2[27];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease(v96, v97, v98, v99, v100, v101, v102, v103);
        *(_QWORD *)(a1 + 224) = a2[28];
        v104 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 232);
        *(_QWORD *)(a1 + 232) = a2[29];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease(v104, v105, v106, v107, v108, v109, v110, v111);
        *(_QWORD *)(a1 + 240) = a2[30];
        v112 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 248);
        *(_QWORD *)(a1 + 248) = a2[31];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease(v112, v113, v114, v115, v116, v117, v118, v119);
        v120 = a2[32];
        v121 = a2[33];
        sub_100005D9C(v120, v121);
        v122 = *(_QWORD *)(a1 + 256);
        v123 = *(_QWORD *)(a1 + 264);
        *(_QWORD *)(a1 + 256) = v120;
        *(_QWORD *)(a1 + 264) = v121;
        sub_100005DE0(v122, v123);
        *(_QWORD *)(a1 + 272) = a2[34];
        v124 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 280);
        *(_QWORD *)(a1 + 280) = a2[35];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease(v124, v125, v126, v127, v128, v129, v130, v131);
LABEL_17:
        v134 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 288);
        *(_QWORD *)(a1 + 288) = a2[36];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease(v134, v135, v136, v137, v138, v139, v140, v141);
        v142 = a2[37];
        *(_WORD *)(a1 + 304) = *((_WORD *)a2 + 152);
        *(_QWORD *)(a1 + 296) = v142;
        goto LABEL_18;
      }
      sub_1000D6E24(a1 + 16, v6, v7, v8, v9, v10, v11, v12);
    }
    else if (v14)
    {
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_QWORD *)(a1 + 24) = a2[3];
      *(_QWORD *)(a1 + 32) = a2[4];
      *(_QWORD *)(a1 + 40) = a2[5];
      *(_QWORD *)(a1 + 48) = a2[6];
      *(_QWORD *)(a1 + 56) = a2[7];
      *(_QWORD *)(a1 + 64) = a2[8];
      *(_QWORD *)(a1 + 72) = a2[9];
      *(_QWORD *)(a1 + 80) = a2[10];
      *(_QWORD *)(a1 + 88) = a2[11];
      *(_QWORD *)(a1 + 96) = a2[12];
      *(_QWORD *)(a1 + 104) = a2[13];
      *(_QWORD *)(a1 + 112) = a2[14];
      *(_QWORD *)(a1 + 120) = a2[15];
      v133 = a2[16];
      *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
      *(_QWORD *)(a1 + 128) = v133;
      *(_QWORD *)(a1 + 144) = a2[18];
      *(_QWORD *)(a1 + 152) = a2[19];
      *(_QWORD *)(a1 + 160) = a2[20];
      *(_QWORD *)(a1 + 168) = a2[21];
      *(_QWORD *)(a1 + 176) = a2[22];
      *(_QWORD *)(a1 + 184) = a2[23];
      *(_QWORD *)(a1 + 192) = a2[24];
      *(_QWORD *)(a1 + 200) = a2[25];
      *(_QWORD *)(a1 + 208) = a2[26];
      *(_QWORD *)(a1 + 216) = a2[27];
      *(_QWORD *)(a1 + 224) = a2[28];
      *(_QWORD *)(a1 + 232) = a2[29];
      *(_QWORD *)(a1 + 240) = a2[30];
      *(_QWORD *)(a1 + 248) = a2[31];
      v146 = a2[33];
      v148 = a2[32];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100005D9C(v148, v146);
      *(_QWORD *)(a1 + 256) = v148;
      *(_QWORD *)(a1 + 264) = v146;
      *(_QWORD *)(a1 + 272) = a2[34];
      *(_QWORD *)(a1 + 280) = a2[35];
      swift_bridgeObjectRetain();
      goto LABEL_17;
    }
    memcpy((void *)(a1 + 16), a2 + 2, 0x110uLL);
    goto LABEL_17;
  }
  if (!v14)
  {
    memcpy((void *)(a1 + 16), a2 + 2, 0x110uLL);
    goto LABEL_12;
  }
  if (v14 != 1)
  {
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = a2[9];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = a2[11];
    *(_QWORD *)(a1 + 96) = a2[12];
    *(_QWORD *)(a1 + 104) = a2[13];
    *(_QWORD *)(a1 + 112) = a2[14];
    *(_QWORD *)(a1 + 120) = a2[15];
    v15 = a2[16];
    *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
    *(_QWORD *)(a1 + 128) = v15;
    *(_QWORD *)(a1 + 144) = a2[18];
    *(_QWORD *)(a1 + 152) = a2[19];
    *(_QWORD *)(a1 + 160) = a2[20];
    *(_QWORD *)(a1 + 168) = a2[21];
    *(_QWORD *)(a1 + 176) = a2[22];
    *(_QWORD *)(a1 + 184) = a2[23];
    *(_QWORD *)(a1 + 192) = a2[24];
    *(_QWORD *)(a1 + 200) = a2[25];
    *(_QWORD *)(a1 + 208) = a2[26];
    *(_QWORD *)(a1 + 216) = a2[27];
    *(_QWORD *)(a1 + 224) = a2[28];
    *(_QWORD *)(a1 + 232) = a2[29];
    *(_QWORD *)(a1 + 240) = a2[30];
    *(_QWORD *)(a1 + 248) = a2[31];
    v145 = a2[33];
    v147 = a2[32];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100005D9C(v147, v145);
    *(_QWORD *)(a1 + 256) = v147;
    *(_QWORD *)(a1 + 264) = v145;
    *(_QWORD *)(a1 + 272) = a2[34];
    *(_QWORD *)(a1 + 280) = a2[35];
    swift_bridgeObjectRetain();
LABEL_12:
    *(_QWORD *)(a1 + 288) = a2[36];
    v132 = a2[37];
    *(_WORD *)(a1 + 304) = *((_WORD *)a2 + 152);
    *(_QWORD *)(a1 + 296) = v132;
    swift_bridgeObjectRetain();
    goto LABEL_18;
  }
LABEL_7:
  memcpy((void *)(a1 + 16), a2 + 2, 0x122uLL);
LABEL_18:
  *(_BYTE *)(a1 + 306) = *v4;
  *(_BYTE *)(a1 + 307) = v4[1];
  *(_BYTE *)(a1 + 308) = v4[2];
  v143 = a2[39];
  *(_BYTE *)(a1 + 320) = *((_BYTE *)a2 + 320);
  *(_QWORD *)(a1 + 312) = v143;
  return a1;
}

uint64_t sub_1000F9D44(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  destroy for MPOCAttestationState(a1, (const char *)&type metadata for MPOCAttestationState, a3, a4, a5, a6, a7, a8);
  return a1;
}

void *initializeWithTake for MPOCMonitorInstruction(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x141uLL);
}

uint64_t assignWithTake for MPOCMonitorInstruction(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  const char *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _TtC14softposreaderd12RemoteReader *v12;
  uint64_t v13;
  uint64_t v14;
  _TtC14softposreaderd12RemoteReader *v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  _TtC14softposreaderd12RemoteReader *v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  _TtC14softposreaderd12RemoteReader *v33;
  SEL v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  _TtC14softposreaderd12RemoteReader *v42;
  SEL v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  _TtC14softposreaderd12RemoteReader *v51;
  SEL v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  uint64_t v59;
  _TtC14softposreaderd12RemoteReader *v60;
  SEL v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  uint64_t v68;
  _TtC14softposreaderd12RemoteReader *v69;
  SEL v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  uint64_t v77;
  _TtC14softposreaderd12RemoteReader *v78;
  SEL v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  uint64_t v86;
  _TtC14softposreaderd12RemoteReader *v87;
  SEL v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  uint64_t v95;
  _TtC14softposreaderd12RemoteReader *v96;
  SEL v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  uint64_t v104;
  _TtC14softposreaderd12RemoteReader *v105;
  SEL v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  uint64_t v113;
  _TtC14softposreaderd12RemoteReader *v114;
  SEL v115;
  id v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  _TtC14softposreaderd12RemoteReader *v125;
  SEL v126;
  id v127;
  id v128;
  id v129;
  id v130;
  id v131;
  id v132;
  const char *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  _TtC14softposreaderd12RemoteReader *v140;

  v4 = (_BYTE *)(a2 + 306);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_errorRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  v12 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 24);
  if (v12 == (_TtC14softposreaderd12RemoteReader *)1)
    goto LABEL_4;
  v13 = *(_QWORD *)(a2 + 24);
  if (v13 != 1)
  {
    if (v12)
    {
      if (v13)
      {
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = v13;
        swift_bridgeObjectRelease(v12, v5, v6, v7, v8, v9, v10, v11);
        v14 = *(_QWORD *)(a2 + 40);
        v15 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 40);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a1 + 40) = v14;
        swift_bridgeObjectRelease(v15, v16, v17, v18, v19, v20, v21, v22);
        v23 = *(_QWORD *)(a2 + 56);
        v24 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 56);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        *(_QWORD *)(a1 + 56) = v23;
        swift_bridgeObjectRelease(v24, v25, v26, v27, v28, v29, v30, v31);
        v32 = *(_QWORD *)(a2 + 72);
        v33 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 72);
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
        *(_QWORD *)(a1 + 72) = v32;
        swift_bridgeObjectRelease(v33, v34, v35, v36, v37, v38, v39, v40);
        v41 = *(_QWORD *)(a2 + 88);
        v42 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 88);
        *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
        *(_QWORD *)(a1 + 88) = v41;
        swift_bridgeObjectRelease(v42, v43, v44, v45, v46, v47, v48, v49);
        v50 = *(_QWORD *)(a2 + 104);
        v51 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 104);
        *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
        *(_QWORD *)(a1 + 104) = v50;
        swift_bridgeObjectRelease(v51, v52, v53, v54, v55, v56, v57, v58);
        *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
        *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
        *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
        v59 = *(_QWORD *)(a2 + 152);
        v60 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 152);
        *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
        *(_QWORD *)(a1 + 152) = v59;
        swift_bridgeObjectRelease(v60, v61, v62, v63, v64, v65, v66, v67);
        v68 = *(_QWORD *)(a2 + 168);
        v69 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 168);
        *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
        *(_QWORD *)(a1 + 168) = v68;
        swift_bridgeObjectRelease(v69, v70, v71, v72, v73, v74, v75, v76);
        v77 = *(_QWORD *)(a2 + 184);
        v78 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 184);
        *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
        *(_QWORD *)(a1 + 184) = v77;
        swift_bridgeObjectRelease(v78, v79, v80, v81, v82, v83, v84, v85);
        v86 = *(_QWORD *)(a2 + 200);
        v87 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 200);
        *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
        *(_QWORD *)(a1 + 200) = v86;
        swift_bridgeObjectRelease(v87, v88, v89, v90, v91, v92, v93, v94);
        v95 = *(_QWORD *)(a2 + 216);
        v96 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 216);
        *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
        *(_QWORD *)(a1 + 216) = v95;
        swift_bridgeObjectRelease(v96, v97, v98, v99, v100, v101, v102, v103);
        v104 = *(_QWORD *)(a2 + 232);
        v105 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 232);
        *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
        *(_QWORD *)(a1 + 232) = v104;
        swift_bridgeObjectRelease(v105, v106, v107, v108, v109, v110, v111, v112);
        v113 = *(_QWORD *)(a2 + 248);
        v114 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 248);
        *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
        *(_QWORD *)(a1 + 248) = v113;
        swift_bridgeObjectRelease(v114, v115, v116, v117, v118, v119, v120, v121);
        v122 = *(_QWORD *)(a1 + 256);
        v123 = *(_QWORD *)(a1 + 264);
        *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
        sub_100005DE0(v122, v123);
        v124 = *(_QWORD *)(a2 + 280);
        v125 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 280);
        *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
        *(_QWORD *)(a1 + 280) = v124;
        swift_bridgeObjectRelease(v125, v126, v127, v128, v129, v130, v131, v132);
LABEL_10:
        v140 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 288);
        *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
        swift_bridgeObjectRelease(v140, v133, v134, v135, v136, v137, v138, v139);
        *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
        *(_WORD *)(a1 + 304) = *(_WORD *)(a2 + 304);
        goto LABEL_11;
      }
      sub_1000D6E24(a1 + 16, (uint64_t)v5, v6, v7, v8, v9, v10, v11);
    }
    memcpy((void *)(a1 + 16), (const void *)(a2 + 16), 0x110uLL);
    goto LABEL_10;
  }
  sub_1000F9D44(a1 + 16, (uint64_t)v5, v6, v7, v8, v9, v10, v11);
LABEL_4:
  memcpy((void *)(a1 + 16), (const void *)(a2 + 16), 0x122uLL);
LABEL_11:
  *(_BYTE *)(a1 + 306) = *v4;
  *(_BYTE *)(a1 + 307) = v4[1];
  *(_BYTE *)(a1 + 308) = v4[2];
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  return a1;
}

uint64_t getEnumTagSinglePayload for MPOCMonitorInstruction(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 321))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MPOCMonitorInstruction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 312) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_BYTE *)(result + 320) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 321) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 321) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MPOCMonitorInstruction()
{
  return &type metadata for MPOCMonitorInstruction;
}

_TtC14softposreaderd12RemoteReader *sub_1000FA0BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _TtC14softposreaderd12RemoteReader *result;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  SEL v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21[2];
  _TtC14softposreaderd12RemoteReader *v22;

  v2 = v1;
  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = &_swiftEmptyArrayStorage;
    if (!v4)
      break;
    v22 = &_swiftEmptyArrayStorage;
    result = (_TtC14softposreaderd12RemoteReader *)specialized ContiguousArray.reserveCapacity(_:)(v4);
    if (v4 < 0)
    {
      __break(1u);
      return result;
    }
    v6 = 0;
    while (v4 != v6)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
      else
        v7 = *(id *)(a1 + 8 * v6 + 32);
      v8 = v7;
      v21[0] = v7;
      sub_1001030FC(v21);

      if (v2)
        return (_TtC14softposreaderd12RemoteReader *)swift_release(v22);
      ++v6;
      v10 = v21[1];
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v9);
      v11 = *(_QWORD *)&v22->instance[8];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
      v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v10);
      specialized ContiguousArray._endMutation()(v12);
      if (v4 == v6)
        return v22;
    }
    __break(1u);
LABEL_16:
    if (a1 < 0)
      v13 = a1;
    else
      v13 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, v14, v15, v16, v17, v18, v19, v20);
  }
  return result;
}

uint64_t sub_1000FA224(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  __int128 v17[2];
  uint64_t v18;
  __int128 v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)&v19 = a1;
  *((_QWORD *)&v19 + 1) = a2;
  swift_bridgeObjectRetain(a2);
  v2 = sub_100003A2C(&qword_1001B2B38);
  if (!swift_dynamicCast(v17, &v19, &type metadata for String.UTF8View, v2, 6))
  {
    v18 = 0;
    memset(v17, 0, sizeof(v17));
    sub_10005218C((uint64_t)v17, &qword_1001B2B40);
    if ((a2 & 0x1000000000000000) != 0)
      goto LABEL_20;
    if ((a2 & 0x2000000000000000) != 0)
    {
      v20[0] = a1;
      v20[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v7 = (char *)v20 + (HIBYTE(a2) & 0xF);
      v8 = v20;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        v5 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v6 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v5 = _StringObject.sharedUTF8.getter(a1, a2);
      }
      if (v5)
        v7 = (_BYTE *)(v5 + v6);
      else
        v7 = 0;
      v8 = (_BYTE *)v5;
    }
    v9 = sub_10010DC5C(v8, v7);
    v11 = v10;
    if (v10 >> 60 != 15)
    {
      swift_bridgeObjectRelease(a2);
      *(_QWORD *)&v17[0] = v9;
      *((_QWORD *)&v17[0] + 1) = v11;
      return *(_QWORD *)&v17[0];
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
LABEL_20:
      v12 = String.UTF8View._foreignCount()();
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v12 = HIBYTE(a2) & 0xF;
    }
    else
    {
      v12 = a1 & 0xFFFFFFFFFFFFLL;
    }
    *(_QWORD *)&v17[0] = sub_10010DCC0(v12);
    *((_QWORD *)&v17[0] + 1) = v13;
    __chkstk_darwin(*(_QWORD *)&v17[0]);
    sub_10010C540();
    __asm { BR              X12 }
  }
  sub_10001A674(v17, (uint64_t)v20);
  v3 = v21;
  v4 = v22;
  sub_100005EF8(v20, v21);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)(&v19, sub_10010C830, 0, &type metadata for Data._Representation, v3, v4);
  swift_bridgeObjectRelease(a2);
  v17[0] = v19;
  sub_100005D3C(v20);
  return *(_QWORD *)&v17[0];
}

uint64_t sub_1000FA728(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];

  v8[3] = &type metadata for UnsafeRawBufferPointer;
  v8[4] = &protocol witness table for UnsafeRawBufferPointer;
  v8[0] = a1;
  v8[1] = a2;
  v2 = sub_100005EF8(v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  v3 = (_BYTE *)*v2;
  if (*v2 && (v4 = (_BYTE *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      v6 = sub_10010DAA4(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      v6 = sub_10010DB64((uint64_t)v3, (uint64_t)v4);
    }
    else
    {
      v6 = sub_10010DBDC((uint64_t)v3, (uint64_t)v4);
    }
  }
  else
  {
    v6 = 0;
  }
  sub_100005D3C(v8);
  return v6;
}

void sub_1000FA7E0(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[5];

  v3[3] = &type metadata for Data;
  v3[4] = &protocol witness table for Data;
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_1000FA844
     + *((int *)qword_1000FAA78 + (sub_100005EF8(v3, (uint64_t)&type metadata for Data)[1] >> 62));
  __asm { BR              X10 }
}

uint64_t sub_1000FA854()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v6 = v2;
  v7 = v3;
  v8 = BYTE2(v3);
  v9 = BYTE3(v3);
  v10 = BYTE4(v3);
  v11 = BYTE5(v3);
  sub_100005D9C(v1, v0);
  sub_10010C830(&v6, (_BYTE *)&v6 + BYTE6(v3), &v12);
  sub_100005DE0(v1, v0);
  v4 = v12;
  sub_100005D3C(&v13);
  return v4;
}

uint64_t sub_1000FAA88(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[5];

  v9[3] = &type metadata for UnsafeMutableRawBufferPointer;
  v9[4] = &protocol witness table for UnsafeMutableRawBufferPointer;
  v9[0] = a1;
  v9[1] = a2;
  v2 = sub_100005EF8(v9, (uint64_t)&type metadata for UnsafeMutableRawBufferPointer);
  v3 = *v2;
  if (*v2)
  {
    v4 = (_BYTE *)v2[1];
    v5 = (uint64_t)&v4[-v3];
    if (v4 == (_BYTE *)v3)
    {
      v3 = 0;
    }
    else if (v5 <= 14)
    {
      v3 = sub_10010DAA4((_BYTE *)*v2, v4);
    }
    else
    {
      v7 = type metadata accessor for __DataStorage(0);
      swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
      __DataStorage.init(bytes:length:)(v3, v5);
      if ((unint64_t)v5 >= 0x7FFFFFFF)
      {
        v8 = type metadata accessor for Data.RangeReference(0);
        v3 = swift_allocObject(v8, 32, 7);
        *(_QWORD *)(v3 + 16) = 0;
        *(_QWORD *)(v3 + 24) = v5;
      }
      else
      {
        v3 = v5 << 32;
      }
    }
  }
  sub_100005D3C(v9);
  return v3;
}

uint64_t sub_1000FAB88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B2928);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B2928);
  if (qword_1001AD138 != -1)
    swift_once(&qword_1001AD138, sub_1000CC224);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4D98);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1000FAC18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for OSSignposter(0);
  sub_1000039D4(v0, qword_1001B2940);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B2940);
  if (qword_1001ACF00 != -1)
    swift_once(&qword_1001ACF00, sub_10003B998);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4AF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1000FACA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[16];
  _QWORD v21[4];

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v20[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1001AD1E8 != -1)
    swift_once(&qword_1001AD1E8, sub_1000FAB88);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100003A14(v6, (uint64_t)qword_1001B2928);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "deinit", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = (uint64_t)objc_msgSend(*(id *)(v0 + 96), "operationCount");
  if (v11 >= 1)
  {
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "reader deinit and readCard in progress, client must have crashed", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

    v15 = sub_100005EF8((_QWORD *)(v1 + 280), *(_QWORD *)(v1 + 304));
    type metadata accessor for ReadError(0);
    v21[3] = v16;
    v21[0] = sub_100024764(4013, 0, 0, 0);
    v17 = *v15;
    v18 = static DispatchWorkItemFlags.barrier.getter(v21[0]);
    __chkstk_darwin(v18);
    *(_QWORD *)&v20[-48] = v17;
    v20[-40] = 1;
    *(_QWORD *)&v20[-32] = v21;
    *(_QWORD *)&v20[-24] = 0;
    *(_QWORD *)&v20[-16] = 0;
    *(_QWORD *)&v20[-8] = 0;
    OS_dispatch_queue.sync<A>(flags:execute:)(&type metadata for (), v5, sub_100037FB0, &v20[-64], &type metadata for () + 1);
    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
    sub_100005D3C(v21);
    sub_10010B8F8();
    objc_msgSend(*(id *)(v1 + 96), "cancelAllOperations");
  }
  sub_100005D3C((_QWORD *)(v1 + 16));
  sub_100005D3C((_QWORD *)(v1 + 56));

  sub_100005D3C((_QWORD *)(v1 + 104));
  swift_release(*(_QWORD *)(v1 + 144));
  sub_100005D3C((_QWORD *)(v1 + 152));
  sub_100005D3C((_QWORD *)(v1 + 192));
  sub_100005D3C((_QWORD *)(v1 + 232));
  swift_release(*(_QWORD *)(v1 + 272));
  sub_100005D3C((_QWORD *)(v1 + 280));
  sub_100005D3C((_QWORD *)(v1 + 320));
  sub_100005D3C((_QWORD *)(v1 + 360));
  sub_100005D3C((_QWORD *)(v1 + 408));
  swift_release(*(_QWORD *)(v1 + 448));
  return v1;
}

uint64_t sub_1000FAF90()
{
  uint64_t v0;

  sub_1000FACA8();
  return swift_deallocClassInstance(v0, 456, 7);
}

uint64_t type metadata accessor for Reader()
{
  return objc_opt_self(_TtC9SPREngine6Reader);
}

id sub_1000FAFD0(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  void *v13;
  id v14;
  id result;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = v1;
  v5 = sub_100003A2C((uint64_t *)&unk_1001B36F0);
  __chkstk_darwin(v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001AD1E8 != -1)
    swift_once(&qword_1001AD1E8, sub_1000FAB88);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100003A14(v8, (uint64_t)qword_1001B2928);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "validate(readParameters:)", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  v13 = *(void **)(*sub_100005EF8(v3 + 51, v3[54]) + 16);
  v14 = a1;
  result = objc_msgSend(v13, "serialNumber");
  if (result)
  {
    v16 = result;
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v19 = v18;

    v20 = type metadata accessor for ReaderConfiguration(0);
    swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
    result = (id)sub_1000594B8(v14, v17, v19);
    if (!v2)
    {
      v21 = v3[56];
      v3[56] = result;
      swift_release(v21);
      v22 = v3[56];
      if (v22)
      {
        sub_10005BC4C(v22 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_safTPID, (uint64_t)v7);
      }
      else
      {
        v23 = type metadata accessor for UUID(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v7, 1, 1, v23);
      }
      sub_10010A748((uint64_t)v7);
      return (id)sub_10005218C((uint64_t)v7, (uint64_t *)&unk_1001B36F0);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000FB1FC(void *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint8_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _TtC14softposreaderd12RemoteReader *v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t DelegateRelay;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  _TtC14softposreaderd12RemoteReader *v58;
  SEL v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  _TtC14softposreaderd12RemoteReader *v66;
  SEL v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  uint64_t v74;
  uint64_t inited;
  uint64_t v76;
  id v77;
  void *v78;
  unsigned __int16 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  _TtC14softposreaderd12RemoteReader *v87;
  uint8_t *v88;
  os_unfair_lock_s *v89;
  os_unfair_lock_s *v90;
  os_unfair_lock_s *v91;
  uint64_t v92;
  char *v93;
  SEL v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  uint64_t *v111;
  NSObject *v112;
  os_log_type_t v113;
  id v114;
  void *v115;
  id v116;
  id v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  NSObject *v123;
  uint64_t v124;
  uint8_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  id v132;
  char *v133;
  uint64_t v134;
  NSObject *v135;
  os_signpost_type_t v136;
  char *v137;
  uint64_t v138;
  void (*v139)(char *, char *, uint64_t);
  char *v140;
  void *v141;
  uint8_t *v142;
  os_signpost_id_t v143;
  os_signpost_type_t v144;
  char *v145;
  uint64_t v146;
  char *v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  id v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  id v158;
  void *v159;
  id v160;
  uint64_t v161;
  uint64_t v162;
  id v163;
  NSObject *v164;
  os_log_type_t v165;
  uint8_t *v166;
  uint64_t v167;
  id v168;
  id v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  _TtC14softposreaderd12RemoteReader *v173;
  SEL v174;
  id v175;
  id v176;
  id v177;
  id v178;
  id v179;
  id v180;
  uint64_t v181;
  uint64_t v182;
  NSObject *v183;
  os_log_type_t v184;
  _BOOL4 v185;
  uint8_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t result;
  id v194;
  _QWORD *v195;
  uint64_t v196;
  NSObject *v197;
  os_log_type_t v198;
  int v199;
  uint64_t v201;
  uint8_t *v202;
  uint8_t *v203;
  uint64_t v204;
  _TtC14softposreaderd12RemoteReader *v205;
  _TtC14softposreaderd12RemoteReader *v206;
  SEL v207;
  id v208;
  id v209;
  id v210;
  id v211;
  id v212;
  id v213;
  os_log_t v214;
  uint8_t *v215;
  uint64_t *v216;
  uint64_t *v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  NSObject *v229;
  os_log_type_t v230;
  uint8_t *v231;
  _BYTE *v232;
  void *v233;
  void *v234;
  id *v235;
  id v236;
  uint64_t v237;
  NSObject *v238;
  uint64_t v239;
  int v240;
  char v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  const char *v248;
  NSObject *v249;
  os_log_type_t v250;
  uint8_t *v251;
  void *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  id v256;
  _QWORD *v257;
  uint64_t v258;
  char *v259;
  char *v260;
  uint8_t *v261;
  os_signpost_id_t v262;
  uint8_t *v263;
  uint64_t v264;
  char *v265;
  uint64_t v266;
  NSObject *v267;
  int v268;
  char *v269;
  void (*v270)(char *, char *, uint64_t);
  uint8_t *v271;
  os_signpost_id_t v272;
  uint8_t *v273;
  uint64_t v274;
  _QWORD *v275;
  os_unfair_lock_s *v276;
  uint64_t v277;
  os_unfair_lock_s *v278;
  os_log_t v279;
  uint8_t *v280;
  void *v281;
  id v282;
  uint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  char *v286;
  void *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  char v292;
  uint64_t v293;
  uint64_t v294;
  void *v295;
  uint64_t v296;
  _QWORD *v297;
  _BYTE *v298;
  uint64_t v299;
  _QWORD *v300;
  char *v301;
  id v302;
  void *v303;
  void *v304;
  id v305;
  id v306;
  id v307;
  id v308;
  uint64_t v309;
  id v310;
  uint64_t v311;
  NSString v312;
  uint32_t *p_align;
  NSObject *v314;
  os_log_type_t v315;
  uint8_t *v316;
  id v317;
  void *v318;
  uint64_t v319;
  _TtC14softposreaderd12RemoteReader *v320;
  _TtC14softposreaderd12RemoteReader *v321;
  SEL v322;
  id v323;
  id v324;
  id v325;
  id v326;
  id v327;
  id v328;
  uint64_t v329;
  id v330;
  NSString v331;
  NSObject *v332;
  os_log_type_t v333;
  id v334;
  void *v335;
  uint64_t v336;
  _TtC14softposreaderd12RemoteReader *v337;
  _TtC14softposreaderd12RemoteReader *v338;
  SEL v339;
  id v340;
  id v341;
  id v342;
  id v343;
  id v344;
  id v345;
  NSString v346;
  NSObject *v347;
  os_log_type_t v348;
  uint8_t *v349;
  id v350;
  void *v351;
  uint64_t v352;
  _TtC14softposreaderd12RemoteReader *v353;
  _TtC14softposreaderd12RemoteReader *v354;
  SEL v355;
  id v356;
  id v357;
  id v358;
  id v359;
  id v360;
  id v361;
  id v362;
  NSString v363;
  uint32_t *v364;
  NSObject *v365;
  os_log_type_t v366;
  uint8_t *v367;
  id v368;
  void *v369;
  uint64_t v370;
  _TtC14softposreaderd12RemoteReader *v371;
  _TtC14softposreaderd12RemoteReader *v372;
  SEL v373;
  id v374;
  id v375;
  id v376;
  id v377;
  id v378;
  id v379;
  uint64_t v380;
  void *v381;
  char v382;
  uint64_t v383;
  void *v384;
  char v385;
  NSObject *v386;
  os_log_type_t v387;
  uint8_t *v388;
  id v389;
  _QWORD *v390;
  uint64_t v391;
  _QWORD *v392;
  id v393;
  uint64_t *v394;
  void *v395;
  void *v396;
  id v397;
  char *v398;
  id v399;
  NSString v400;
  uint64_t v401;
  _QWORD *v402;
  void *v403;
  void *v404;
  char *v405;
  id v406;
  void *v407;
  void *v408;
  uint64_t v409;
  uint64_t v410;
  _TtC14softposreaderd12RemoteReader *v411;
  char *v412;
  Class isa;
  SEL v414;
  id v415;
  id v416;
  id v417;
  id v418;
  id v419;
  id v420;
  uint64_t v421;
  uint64_t v422;
  id v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint8_t *v427;
  uint8_t *v428;
  int v429;
  uint64_t *v430;
  os_log_t v431;
  uint64_t v432;
  uint64_t v433;
  char *v434;
  char *v435;
  char *v436;
  char *v437;
  char *v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  char *v443;
  _BYTE *v444;
  id *v445;
  uint64_t v446;
  char *v447;
  _QWORD *v448;
  char *v449;
  uint64_t v450;
  char *v451;
  uint64_t v452;
  char *v453;
  id v454;
  uint64_t *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  _QWORD *v459;
  uint8_t *v460;
  uint64_t v461;
  __int128 v462;
  uint64_t (*v463)(uint64_t);
  void *v464;
  void *v465;
  _QWORD *v466;
  _QWORD v467[5];
  uint64_t v468;
  _BYTE v469[32];
  uint64_t v470[5];
  uint64_t v471;
  uint64_t v472;
  _BYTE v473[24];
  uint64_t v474;
  char v475[24];
  char v476[24];
  _QWORD v477[5];
  uint64_t v478;
  _BYTE v479[16];
  uint64_t v480;

  v458 = a4;
  v459 = a3;
  v454 = a1;
  v6 = type metadata accessor for Logger(0);
  v442 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v437 = (char *)&v426 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v436 = (char *)&v426 - v10;
  v11 = __chkstk_darwin(v9);
  v435 = (char *)&v426 - v12;
  __chkstk_darwin(v11);
  v434 = (char *)&v426 - v13;
  v14 = type metadata accessor for OSSignpostError(0);
  v439 = *(_QWORD *)(v14 - 8);
  v440 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v426 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v448 = (_QWORD *)type metadata accessor for DispatchWorkItemFlags(0);
  v446 = *(v448 - 1);
  __chkstk_darwin(v448);
  v447 = (char *)&v426 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v452 = type metadata accessor for OSSignpostID(0);
  v450 = *(_QWORD *)(v452 - 8);
  v18 = __chkstk_darwin(v452);
  v20 = (char *)&v426 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v426 - v22;
  v24 = __chkstk_darwin(v21);
  v26 = (char *)&v426 - v25;
  __chkstk_darwin(v24);
  v453 = (char *)&v426 - v27;
  if (qword_1001AD1E8 != -1)
    swift_once(&qword_1001AD1E8, sub_1000FAB88);
  v460 = v4;
  v441 = v6;
  v28 = sub_100003A14(v6, (uint64_t)qword_1001B2928);
  v29 = swift_unknownObjectRetain_n(a2, 2);
  v456 = v28;
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter();
  v32 = os_log_type_enabled(v30, v31);
  v451 = v26;
  v449 = v23;
  v443 = v20;
  v438 = v16;
  if (v32)
  {
    v33 = swift_slowAlloc(22, -1);
    v34 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v462 = v34;
    *(_DWORD *)v33 = 136315394;
    v478 = sub_1000056EC(0xD000000000000028, 0x8000000100170350, (uint64_t *)&v462);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v478, v479, v33 + 4, v33 + 12);
    *(_WORD *)(v33 + 12) = 2080;
    v478 = a2;
    swift_unknownObjectRetain(a2);
    v35 = sub_100003A2C(&qword_1001B2B20);
    v36 = String.init<A>(describing:)(&v478, v35);
    v38 = (_TtC14softposreaderd12RemoteReader *)v37;
    v478 = sub_1000056EC(v36, v37, (uint64_t *)&v462);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v478, v479, v33 + 14, v33 + 22);
    swift_unknownObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease(v38, v39, v40, v41, v42, v43, v44, v45);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "%s, delegate: %s", (uint8_t *)v33, 0x16u);
    swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v33, -1, -1);

  }
  else
  {

    swift_unknownObjectRelease_n(a2, 2);
  }
  v46 = swift_allocObject(&unk_10019F460, 24, 7);
  *(_QWORD *)(v46 + 16) = 0;
  v445 = (id *)(v46 + 16);
  v47 = swift_allocObject(&unk_10019F488, 24, 7);
  *(_QWORD *)(v47 + 16) = 0;
  v455 = (uint64_t *)(v47 + 16);
  v48 = swift_allocObject(&unk_10019F4B0, 17, 7);
  *(_BYTE *)(v48 + 16) = 0;
  v444 = (_BYTE *)(v48 + 16);
  v49 = v460;
  sub_100008390((uint64_t)(v460 + 280), (uint64_t)&v478);
  sub_100008390((uint64_t)(v49 + 232), (uint64_t)v477);
  v50 = *((_QWORD *)v49 + 34);
  v51 = swift_allocObject(&unk_10019F4D8, 24, 7);
  swift_weakInit(v51 + 16, v49);
  sub_100008390((uint64_t)v477, (uint64_t)&v462);
  v52 = (_QWORD *)swift_allocObject(&unk_10019F500, 120, 7);
  v53 = v458;
  v52[2] = v459;
  v52[3] = v53;
  v52[4] = v50;
  v52[5] = v46;
  v52[6] = v51;
  v52[7] = v48;
  v52[8] = v47;
  sub_10001A674(&v462, (uint64_t)(v52 + 9));
  v52[14] = a2;
  DelegateRelay = type metadata accessor for ReadDelegateRelay();
  v55 = (_QWORD *)swift_allocObject(DelegateRelay, 40, 7);
  v55[2] = a2;
  v55[3] = sub_100111C20;
  v459 = v55;
  v55[4] = v52;
  swift_unknownObjectRetain_n(a2, 2);
  v56 = (_QWORD *)v50;
  swift_retain();
  swift_retain();
  v57 = v46;
  swift_retain();
  v458 = v48;
  swift_retain();
  v457 = v47;
  swift_retain();
  sub_10004C904();
  *(_BYTE *)(v50 + 120) = 4;
  *(_QWORD *)(v50 + 121) = 0x202020202020202;
  *(_QWORD *)(v50 + 127) = 0x202020202020202;
  *(_OWORD *)(v50 + 136) = 0u;
  *(_OWORD *)(v50 + 152) = 0u;
  *(_QWORD *)(v50 + 166) = 0;
  swift_beginAccess(v50 + 176, v476, 1, 0);
  v58 = *(_TtC14softposreaderd12RemoteReader **)(v50 + 176);
  *(_QWORD *)(v50 + 176) = 0;
  swift_bridgeObjectRelease(v58, v59, v60, v61, v62, v63, v64, v65);
  swift_beginAccess(v50 + 112, v475, 1, 0);
  v66 = *(_TtC14softposreaderd12RemoteReader **)(v50 + 112);
  *(_QWORD *)(v50 + 112) = &_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v66, v67, v68, v69, v70, v71, v72, v73);
  v74 = sub_100003A2C((uint64_t *)&unk_1001B1290);
  inited = swift_initStackObject(v74, &v474);
  *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
  *(_BYTE *)(inited + 32) = 0;
  v76 = (uint64_t)(v49 + 408);
  v77 = objc_msgSend(*(id *)(*sub_100005EF8((_QWORD *)v49 + 51, *((_QWORD *)v49 + 54))+ 24), "sequenceCounter");
  if (!v77)
    __break(1u);
  v78 = v77;
  v79 = (unsigned __int16)objc_msgSend(v77, "unsignedShortValue");

  *(_QWORD *)(inited + 64) = &type metadata for UInt16;
  *(_WORD *)(inited + 40) = v79;
  v87 = (_TtC14softposreaderd12RemoteReader *)sub_1000E8C74(inited, v80, v81, v82, v83, v84, v85, v86);
  v88 = (uint8_t *)&v426;
  v89 = *(os_unfair_lock_s **)(v50 + 56);
  v90 = v89 + 4;
  v91 = v89 + 8;
  os_unfair_lock_lock(v89 + 8);
  v92 = (uint64_t)v90;
  v93 = 0;
  sub_100060510(v92, (uint64_t)v87);
  os_unfair_lock_unlock(v91);
  swift_bridgeObjectRelease(v87, v94, v95, v96, v97, v98, v99, v100);
  if (MKBGetDeviceLockState(0) - 1 < 2)
  {
    v101 = 4056;
LABEL_9:
    v102 = (void *)sub_100024764(v101, 0, 0, 0);
    *(_QWORD *)&v462 = v102;
    type metadata accessor for ReadError(0);
    v104 = v103;
    v105 = sub_100005F1C((unint64_t *)&qword_1001B12D0, (uint64_t (*)(uint64_t))type metadata accessor for ReadError, (uint64_t)&unk_10015C348);
    v56[18] = _BridgedStoredNSError.errorCode.getter(v104, v105);
    v106 = v102;
    v107 = v459;
    sub_1000B013C((uint64_t)v106);
    swift_release(v107);

    sub_100005D3C(v477);
    v108 = v457;
    v109 = v57;
    goto LABEL_44;
  }
  sub_100005EF8((_QWORD *)v49 + 51, *((_QWORD *)v49 + 54));
  v110 = sub_1001457B8();
  v111 = v455;
  if ((v110 & 1) == 0)
  {
    v112 = Logger.logObject.getter(v110);
    v113 = static os_log_type_t.error.getter(v112);
    if (os_log_type_enabled(v112, v113))
    {
      v88 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v88 = 0;
      _os_log_impl((void *)&_mh_execute_header, v112, v113, "Incorrect JCOP version", v88, 2u);
      swift_slowDealloc(v88, -1, -1);
    }

    if (v49[400] == 1)
    {
      v101 = 4043;
      goto LABEL_9;
    }
  }
  v114 = v454;
  v433 = v57;
  if (v454)
  {
    v115 = *(void **)(*sub_100005EF8((_QWORD *)v49 + 51, *((_QWORD *)v49 + 54)) + 16);
    v116 = v114;
    v117 = objc_msgSend(v115, "serialNumber");
    if (!v117)
    {
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:

      __break(1u);
      goto LABEL_108;
    }
    v118 = v117;
    v119 = static String._unconditionallyBridgeFromObjectiveC(_:)(v117);
    v121 = v120;

    v122 = type metadata accessor for ReaderConfiguration(0);
    swift_allocObject(v122, *(unsigned int *)(v122 + 48), *(unsigned __int16 *)(v122 + 52));
    v127 = sub_1000594B8(v116, v119, v121);

    swift_beginAccess(v111, v473, 1, 0);
    v128 = *v111;
    *v111 = v127;
    v109 = v433;
  }
  else
  {
    v123 = Logger.logObject.getter(v110);
    v124 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v123, (os_log_type_t)v124))
    {
      v125 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v125 = 0;
      _os_log_impl((void *)&_mh_execute_header, v123, (os_log_type_t)v124, "SPRReadParameters nil, use ReaderConfiguration from Reader instance", v125, 2u);
      swift_slowDealloc(v125, -1, -1);
    }

    v126 = *((_QWORD *)v49 + 56);
    swift_beginAccess(v111, v473, 1, 0);
    v128 = *v111;
    *v111 = v126;
    swift_retain();
    v109 = v57;
  }
  swift_release(v128);
  swift_beginAccess(v111, &v472, 0, 0);
  v129 = (uint64_t *)*v111;
  if (!*v111)
  {
    v148 = (void *)sub_100024764(4000, 0xD00000000000001BLL, (void *)0x80000001001702B0, 0);
    *(_QWORD *)&v462 = v148;
    type metadata accessor for ReadError(0);
    v150 = v149;
    v151 = sub_100005F1C((unint64_t *)&qword_1001B12D0, (uint64_t (*)(uint64_t))type metadata accessor for ReadError, (uint64_t)&unk_10015C348);
    v56[18] = _BridgedStoredNSError.errorCode.getter(v150, v151);
    v152 = v148;
    v153 = v459;
    sub_1000B013C((uint64_t)v152);
    swift_release(v153);

    sub_100005D3C(v477);
    v108 = v457;
    goto LABEL_44;
  }
  v130 = *((_QWORD *)v460 + 56);
  *((_QWORD *)v460 + 56) = 0;
  v455 = v129;
  swift_retain();
  swift_release(v130);
  if (qword_1001AD1F0 != -1)
    swift_once(&qword_1001AD1F0, sub_1000FAC18);
  v131 = type metadata accessor for OSSignposter(0);
  v132 = (id)sub_100003A14(v131, (uint64_t)qword_1001B2940);
  v133 = v453;
  v134 = ((uint64_t (*)(void))static OSSignpostID.exclusive.getter)();
  v135 = OSSignposter.logHandle.getter(v134);
  v136 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v454 = v132;
    v138 = v450;
    v137 = v451;
    v432 = v76;
    v139 = *(void (**)(char *, char *, uint64_t))(v450 + 16);
    v140 = v133;
    v141 = (void *)v452;
    v139(v451, v140, v452);
    v142 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v142 = 0;
    v143 = OSSignpostID.rawValue.getter(v142);
    v144 = v136;
    v145 = v137;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v135, v144, v143, "reader-session_start", "begin PreReadVerification and setup", v142, 2u);
    swift_slowDealloc(v142, -1, -1);

    v116 = v141;
    v146 = v138;
    v133 = v453;
    v132 = v454;
    (*(void (**)(char *, id))(v146 + 8))(v137, v116);
    v147 = (char *)v139;
    v76 = v432;
  }
  else
  {

    v146 = v450;
    v145 = v451;
    v147 = *(char **)(v450 + 16);
    v116 = (id)v452;
  }
  v453 = v147;
  ((void (*)(char *, char *, id))v147)(v145, v133, v116);
  v154 = type metadata accessor for OSSignpostIntervalState(0);
  v155 = *(unsigned int *)(v154 + 48);
  v156 = *(unsigned __int16 *)(v154 + 52);
  v450 = v154;
  swift_allocObject(v154, v155, v156);
  v157 = OSSignpostIntervalState.init(id:isOpen:)(v145, 1);
  v88 = *(uint8_t **)(v146 + 8);
  ((void (*)(char *, id))v88)(v133, v116);
  *(_QWORD *)&v462 = 0;
  v158 = objc_msgSend((id)objc_opt_self(NFHardwareManager), "sharedHardwareManager");
  if (!v158)
    goto LABEL_106;
  v159 = v158;
  v160 = objc_msgSend(v158, "getRadioEnabledState:", &v462);

  v162 = (uint64_t)v455;
  if (v160)
  {
    v163 = v160;
    v164 = Logger.logObject.getter(v163);
    v165 = static os_log_type_t.error.getter(v164);
    if (os_log_type_enabled(v164, v165))
    {
      v166 = (uint8_t *)swift_slowAlloc(12, -1);
      v167 = swift_slowAlloc(32, -1);
      v470[0] = v167;
      *(_DWORD *)v166 = 136315138;
      v460 = v166 + 4;
      v468 = (uint64_t)v163;
      v168 = v163;
      v432 = v157;
      v169 = v168;
      v170 = sub_100003A2C((uint64_t *)&unk_1001B1280);
      v171 = String.init<A>(describing:)(&v468, v170);
      v173 = (_TtC14softposreaderd12RemoteReader *)v172;
      v468 = sub_1000056EC(v171, v172, v470);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v468, v469, v460, v166 + 12);

      v157 = v432;
      swift_bridgeObjectRelease(v173, v174, v175, v176, v177, v178, v179, v180);
      _os_log_impl((void *)&_mh_execute_header, v164, v165, "getRadioEnabledState failed: %s", v166, 0xCu);
      swift_arrayDestroy(v167, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v167, -1, -1);
      swift_slowDealloc(v166, -1, -1);

    }
    else
    {

    }
    v109 = v433;
    v108 = v457;
    v182 = sub_100024764(4025, 0, 0, 0);
    swift_willThrow(v182);

LABEL_39:
    *(_QWORD *)&v462 = v182;
    swift_errorRetain();
    v187 = sub_100003A2C((uint64_t *)&unk_1001B1280);
    type metadata accessor for ReadError(0);
    v189 = v188;
    if (swift_dynamicCast(v470, &v462, v187, v188, 0))
    {
      v190 = (void *)v470[0];
      v468 = v470[0];
      v191 = sub_100005F1C((unint64_t *)&qword_1001B12D0, (uint64_t (*)(uint64_t))type metadata accessor for ReadError, (uint64_t)&unk_10015C348);
      if (_BridgedStoredNSError.errorCode.getter(v189, v191) >= 4000)
      {
        v468 = (uint64_t)v190;
        if (_BridgedStoredNSError.errorCode.getter(v189, v191) <= 4999)
        {
          swift_errorRelease();
          v468 = (uint64_t)v190;
          v56[18] = _BridgedStoredNSError.errorCode.getter(v189, v191);
          v194 = v190;
          v195 = v459;
          sub_1000B013C((uint64_t)v194);
          swift_release(v455);
          swift_release(v195);
          swift_release(v157);

          sub_100005D3C(v477);
          swift_errorRelease();
          goto LABEL_44;
        }
      }

    }
    swift_errorRelease();
    v192 = v459;
    sub_1000B013C(v182);
    swift_errorRelease();
    swift_release(v455);
    swift_release(v192);
    swift_release(v157);
    sub_100005D3C(v477);
LABEL_44:
    sub_100005D3C(&v478);
    swift_release(v109);
    swift_release(v108);
    return swift_release(v458);
  }
  if ((_QWORD)v462 != 1)
  {
    v183 = Logger.logObject.getter(v161);
    v184 = static os_log_type_t.error.getter(v183);
    v185 = os_log_type_enabled(v183, v184);
    v109 = v433;
    v108 = v457;
    if (v185)
    {
      v186 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v186 = 0;
      _os_log_impl((void *)&_mh_execute_header, v183, v184, "NFRadioState .disabled", v186, 2u);
      swift_slowDealloc(v186, -1, -1);
    }

    v182 = sub_100024764(4025, 0, 0, 0);
    swift_willThrow(v182);
    goto LABEL_39;
  }
  sub_10010A748((uint64_t)v455 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_safTPID);
  sub_10010AA24(v162, v181);
  v432 = v157;
  v196 = swift_retain_n(v162, 2);
  v197 = Logger.logObject.getter(v196);
  v198 = static os_log_type_t.default.getter();
  v199 = v198;
  if (os_log_type_enabled(v197, v198))
  {
    v431 = v197;
    v201 = swift_slowAlloc(12, -1);
    v429 = v199;
    v202 = (uint8_t *)v201;
    v430 = (uint64_t *)swift_slowAlloc(32, -1);
    v470[0] = (uint64_t)v430;
    *(_DWORD *)v202 = 136315138;
    v203 = v202 + 12;
    v427 = v202 + 4;
    v428 = v202;
    swift_retain();
    v204 = sub_10005B20C();
    v206 = v205;
    swift_release(v162);
    v468 = sub_1000056EC(v204, (unint64_t)v206, v470);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v468, v469, v427, v203);
    swift_release_n(v162, 2);
    swift_bridgeObjectRelease(v206, v207, v208, v209, v210, v211, v212, v213);
    v214 = v431;
    v215 = v428;
    _os_log_impl((void *)&_mh_execute_header, v431, (os_log_type_t)v429, "ReaderConfiguration: %s", v428, 0xCu);
    v216 = v430;
    swift_arrayDestroy(v430, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v216, -1, -1);
    swift_slowDealloc(v215, -1, -1);

  }
  else
  {

    swift_release_n(v162, 2);
  }
  sub_10010B3AC(v162);
  v217 = sub_100005EF8(&v478, v480);
  v218 = *v217;
  v219 = v447;
  v220 = static DispatchWorkItemFlags.barrier.getter(v217);
  v430 = &v426;
  __chkstk_darwin(v220);
  LOBYTE(v424) = 1;
  v425 = v218;
  v431 = (os_log_t)sub_100003A2C(&qword_1001B12E0);
  OS_dispatch_queue.sync<A>(flags:execute:)(&v462, v219, sub_100037FC4, &v426 - 4, v431);
  v446 = *(_QWORD *)(v446 + 8);
  v221 = v448;
  ((void (*)(char *, _QWORD *))v446)(v219, v448);
  sub_10005218C((uint64_t)&v462, &qword_1001B12E0);
  v222 = sub_100005EF8(&v478, v480);
  v223 = *v222;
  v224 = static DispatchWorkItemFlags.barrier.getter(v222);
  v430 = &v426;
  __chkstk_darwin(v224);
  LOBYTE(v424) = 0;
  v425 = v223;
  OS_dispatch_queue.sync<A>(flags:execute:)(&v462, v219, sub_100112AF0, &v426 - 4, v431);
  v431 = 0;
  ((void (*)(char *, _QWORD *))v446)(v219, v221);
  v225 = v464;
  v226 = sub_10005218C((uint64_t)&v462, &qword_1001B12E0);
  v227 = v432;
  v228 = v449;
  if (v225)
  {
    v229 = Logger.logObject.getter(v226);
    v230 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v229, v230))
    {
      v231 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v231 = 0;
      _os_log_impl((void *)&_mh_execute_header, v229, v230, "PAN from previous transaction not cleared yet", v231, 2u);
      swift_slowDealloc(v231, -1, -1);
    }

    v232 = v444;
    swift_beginAccess(v444, &v461, 1, 0);
    *v232 = 1;
  }
  sub_10010E61C();
  v234 = v233;
  v235 = v445;
  swift_beginAccess(v445, &v471, 1, 0);
  v236 = *v235;
  *v235 = v234;

  if (!*v235)
  {
    v249 = Logger.logObject.getter(v237);
    v250 = static os_log_type_t.error.getter(v249);
    if (os_log_type_enabled(v249, v250))
    {
      v251 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v251 = 0;
      _os_log_impl((void *)&_mh_execute_header, v249, v250, "startReaderSession failed", v251, 2u);
      swift_slowDealloc(v251, -1, -1);
    }

    v252 = (void *)sub_100024764(4040, 0, 0, 0);
    *(_QWORD *)&v462 = v252;
    type metadata accessor for ReadError(0);
    v254 = v253;
    v255 = sub_100005F1C((unint64_t *)&qword_1001B12D0, (uint64_t (*)(uint64_t))type metadata accessor for ReadError, (uint64_t)&unk_10015C348);
    v56[18] = _BridgedStoredNSError.errorCode.getter(v254, v255);
    v256 = v252;
    v257 = v459;
    sub_1000B013C((uint64_t)v256);
    swift_release(v455);
    swift_release(v257);
    swift_release(v227);

    sub_100005D3C(v477);
    v109 = v433;
    v108 = v457;
    goto LABEL_44;
  }
  v448 = *v235;
  v238 = OSSignposter.logHandle.getter(v448);
  v239 = OSSignpostIntervalState.signpostID.getter();
  v240 = static os_signpost_type_t.end.getter(v239);
  v241 = OS_os_log.signpostsEnabled.getter();
  v454 = v132;
  if ((v241 & 1) != 0)
  {
    LODWORD(v447) = v240;
    v242 = swift_retain();
    v243 = v438;
    checkForErrorAndConsumeState(state:)(v242);
    swift_release(v227);
    v245 = v439;
    v244 = v440;
    v246 = (*(uint64_t (**)(char *, uint64_t))(v439 + 88))(v243, v440);
    v247 = v452;
    if (v246 == enum case for OSSignpostError.doubleEnd(_:))
    {
      v248 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v245 + 8))(v243, v244);
      v248 = "end PreReadVerification and setup";
    }
    v259 = v451;
    v260 = v449;
    ((void (*)(char *, char *, uint64_t))v453)(v451, v449, v247);
    v261 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v261 = 0;
    v262 = OSSignpostID.rawValue.getter(v261);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v238, (os_signpost_type_t)v447, v262, "reader-session_start", v248, v261, 2u);
    v263 = v261;
    v258 = v452;
    swift_slowDealloc(v263, -1, -1);

    ((void (*)(char *, uint64_t))v88)(v260, v258);
    v228 = v259;
  }
  else
  {

    v258 = v452;
  }
  v264 = ((uint64_t (*)(char *, uint64_t))v88)(v228, v258);
  v265 = v443;
  v266 = static OSSignpostID.exclusive.getter(v264);
  v267 = OSSignposter.logHandle.getter(v266);
  v268 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v269 = v451;
    LODWORD(v449) = v268;
    v270 = (void (*)(char *, char *, uint64_t))v453;
    ((void (*)(char *, char *, uint64_t))v453)(v451, v265, v258);
    v271 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v271 = 0;
    v272 = OSSignpostID.rawValue.getter(v271);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v267, (os_signpost_type_t)v449, v272, "reader-total_transaction", "begin total transaction", v271, 2u);
    v273 = v271;
    v258 = v452;
    swift_slowDealloc(v273, -1, -1);

    ((void (*)(char *, uint64_t))v88)(v269, v258);
  }
  else
  {

    v269 = v451;
    v270 = (void (*)(char *, char *, uint64_t))v453;
  }
  v274 = v450;
  v270(v269, v265, v258);
  swift_allocObject(v274, *(unsigned int *)(v274 + 48), *(unsigned __int16 *)(v274 + 52));
  v453 = (char *)OSSignpostIntervalState.init(id:isOpen:)(v269, 1);
  ((void (*)(char *, uint64_t))v88)(v265, v258);
  v275 = v448;
  sub_10003AD24("reader-preprocessing", 20, 2, (uint64_t)v275, 0xD000000000000013, 0x80000001001702F0);

  v276 = (os_unfair_lock_s *)v56[7];
  v277 = (uint64_t)&v276[4];
  v278 = v276 + 8;
  os_unfair_lock_lock(v276 + 8);
  v279 = v431;
  sub_10007FE5C(v277, 3);
  os_unfair_lock_unlock(v278);
  sub_100008390((uint64_t)v477, (uint64_t)&v462);
  v280 = v460;
  v281 = (void *)*((_QWORD *)v460 + 12);
  sub_100008390((uint64_t)&v478, (uint64_t)v470);
  sub_100008390(v76, (uint64_t)&v468);
  sub_100008390((uint64_t)(v280 + 192), (uint64_t)v467);
  v282 = objc_allocWithZone((Class)type metadata accessor for ReadOperation());
  swift_retain();
  v283 = (uint64_t)v455;
  swift_retain();
  v284 = v275;
  v285 = (uint64_t)v459;
  swift_retain();
  v286 = v281;
  v454 = v284;
  sub_10009F26C(v284, v283, v285, &v462, (uint64_t)v56, v286, v470, &v468, v467);
  if (v279)
  {
    v288 = (uint64_t)v279;
    *(_QWORD *)&v462 = v279;
    swift_errorRetain();
    v289 = sub_100003A2C((uint64_t *)&unk_1001B1280);
    type metadata accessor for ReadError(0);
    v291 = v290;
    v292 = swift_dynamicCast(v470, &v462, v289, v290, 0);
    v293 = v432;
    v294 = v433;
    if ((v292 & 1) != 0)
    {
      v295 = (void *)v470[0];
      v468 = v470[0];
      v296 = sub_100005F1C((unint64_t *)&qword_1001B12D0, (uint64_t (*)(uint64_t))type metadata accessor for ReadError, (uint64_t)&unk_10015C348);
      if (_BridgedStoredNSError.errorCode.getter(v291, v296) >= 4000)
      {
        v468 = (uint64_t)v295;
        if (_BridgedStoredNSError.errorCode.getter(v291, v296) <= 4999)
        {
          swift_errorRelease();
          v468 = (uint64_t)v295;
          v56[18] = _BridgedStoredNSError.errorCode.getter(v291, v296);
          v468 = (uint64_t)v295;
          v381 = (void *)sub_100024764(4037, 0, 0, 0);
          v467[0] = v381;
          v382 = static _BridgedStoredNSError.== infix(_:_:)(&v468, v467, v291, v296);

          if ((v382 & 1) != 0
            || (v468 = (uint64_t)v295,
                v384 = (void *)sub_100024764(4036, 0, 0, 0),
                v467[0] = v384,
                v385 = static _BridgedStoredNSError.== infix(_:_:)(&v468, v467, v291, v296),
                v384,
                (v385 & 1) != 0))
          {
            v386 = Logger.logObject.getter(v383);
            v387 = static os_log_type_t.error.getter(v386);
            if (os_log_type_enabled(v386, v387))
            {
              v388 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v388 = 0;
              _os_log_impl((void *)&_mh_execute_header, v386, v387, "Pay applet cannot be selected: Prohibit timer or not installed", v388, 2u);
              swift_slowDealloc(v388, -1, -1);
            }

            sub_100005EF8(v56 + 2, v56[5]);
            sub_10003964C((uint64_t)&off_1001992A8);
          }
          v389 = v295;
          v390 = v459;
          sub_1000B013C((uint64_t)v389);
          swift_release(v455);

          swift_release(v390);
          swift_release(v453);
          swift_release(v293);

          sub_100005D3C(v477);
          swift_errorRelease();
          v108 = v457;
          v109 = v294;
          goto LABEL_44;
        }
      }

    }
    v108 = v457;
    swift_errorRelease();
    v297 = v459;
    sub_1000B013C(v288);
    swift_errorRelease();
    swift_release(v455);

    swift_release(v297);
    swift_release(v453);
    swift_release(v293);
    goto LABEL_103;
  }
  v116 = v287;
  v451 = v286;
  v298 = v444;
  swift_beginAccess(v444, v470, 1, 0);
  *v298 = 0;
  v93 = *(char **)(v283 + 16);
  v452 = (uint64_t)v116;
  if ((unint64_t)(v93 - 2) < 2)
  {
    v299 = swift_allocObject(&unk_10019F4D8, 24, 7);
    swift_weakInit(v299 + 16, v460);
    v300 = (_QWORD *)swift_allocObject(&unk_10019F528, 72, 7);
    v300[2] = v299;
    v300[3] = v116;
    v300[4] = v283;
    v300[5] = v285;
    v301 = v453;
    v302 = v454;
    v300[6] = v453;
    v300[7] = v302;
    v300[8] = v458;
    v465 = sub_100111CB0;
    v466 = v300;
    *(_QWORD *)&v462 = _NSConcreteStackBlock;
    *((_QWORD *)&v462 + 1) = 1107296256;
    v463 = sub_1000043B8;
    v464 = &unk_10019F540;
    v303 = _Block_copy(&v462);
    v304 = (void *)objc_opt_self(NSBlockOperation);
    v305 = v116;
    swift_retain();
    swift_retain();
    v306 = v302;
    swift_retain();
    v307 = v305;
    swift_retain();
    v308 = objc_msgSend(v304, "blockOperationWithBlock:", v303);
    _Block_release(v303);
    swift_release(v466);
    v309 = *(_QWORD *)(v283 + 16);
    v310 = v307;
    v93 = (char *)v308;
    v311 = v441;
    if (v309 != 2)
    {
      v346 = String._bridgeToObjectiveC()();
      p_align = &stru_1001A9FE8.align;
      objc_msgSend(v310, "setName:", v346);

      (*(void (**)(char *, uint64_t, uint64_t))(v442 + 16))(v437, v456, v311);
      v88 = (uint8_t *)v310;
      v347 = Logger.logObject.getter(v88);
      v348 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v347, v348))
      {

        (*(void (**)(char *, uint64_t))(v442 + 8))(v437, v311);
        goto LABEL_98;
      }
      v349 = (uint8_t *)swift_slowAlloc(12, -1);
      v116 = (id)swift_slowAlloc(32, -1);
      *(_QWORD *)&v462 = v116;
      *(_DWORD *)v349 = 136315138;
      v350 = -[uint8_t name](v88, "name");
      if (v350)
      {
        v351 = v350;
        v460 = v349 + 4;
        v352 = static String._unconditionallyBridgeFromObjectiveC(_:)(v350);
        v354 = v353;

        v468 = sub_1000056EC(v352, (unint64_t)v354, (uint64_t *)&v462);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v468, v469, v460, v349 + 12);

        swift_bridgeObjectRelease(v354, v355, v356, v357, v358, v359, v360, v361);
        _os_log_impl((void *)&_mh_execute_header, v347, v348, "%s", v349, 0xCu);
        swift_arrayDestroy(v116, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v116, -1, -1);
        swift_slowDealloc(v349, -1, -1);

        (*(void (**)(char *, uint64_t))(v442 + 8))(v437, v441);
        v301 = v453;
        p_align = (_DWORD *)(&stru_1001A9FE8 + 24);
        goto LABEL_98;
      }
      goto LABEL_109;
    }
    v312 = String._bridgeToObjectiveC()();
    p_align = &stru_1001A9FE8.align;
    objc_msgSend(v310, "setName:", v312);

    (*(void (**)(char *, uint64_t, uint64_t))(v442 + 16))(v436, v456, v311);
    v88 = (uint8_t *)v310;
    v314 = Logger.logObject.getter(v88);
    v315 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v314, v315))
    {

      (*(void (**)(char *, uint64_t))(v442 + 8))(v436, v311);
      goto LABEL_98;
    }
    v316 = (uint8_t *)swift_slowAlloc(12, -1);
    v116 = (id)swift_slowAlloc(32, -1);
    *(_QWORD *)&v462 = v116;
    *(_DWORD *)v316 = 136315138;
    v317 = -[uint8_t name](v88, "name");
    if (v317)
    {
      v318 = v317;
      v460 = v316 + 4;
      v319 = static String._unconditionallyBridgeFromObjectiveC(_:)(v317);
      v321 = v320;

      v468 = sub_1000056EC(v319, (unint64_t)v321, (uint64_t *)&v462);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v468, v469, v460, v316 + 12);

      swift_bridgeObjectRelease(v321, v322, v323, v324, v325, v326, v327, v328);
      _os_log_impl((void *)&_mh_execute_header, v314, v315, "%s", v316, 0xCu);
      swift_arrayDestroy(v116, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v116, -1, -1);
      swift_slowDealloc(v316, -1, -1);

      (*(void (**)(char *, uint64_t))(v442 + 8))(v436, v441);
      v301 = v453;
      p_align = (_DWORD *)(&stru_1001A9FE8 + 24);
LABEL_98:
      v400 = String._bridgeToObjectiveC()();
      objc_msgSend(v93, *((SEL *)p_align + 292), v400);
      v294 = v433;
      v108 = v457;
      v380 = (uint64_t)v459;
LABEL_102:
      v407 = v451;

      v408 = (void *)v452;
      objc_msgSend(v93, "addDependency:", v452);
      v409 = sub_100003A2C((uint64_t *)&unk_1001AE490);
      v410 = swift_allocObject(v409, 48, 7);
      *(_OWORD *)(v410 + 16) = xmmword_10015DF20;
      *(_QWORD *)(v410 + 32) = v408;
      *(_QWORD *)(v410 + 40) = v93;
      *(_QWORD *)&v462 = v410;
      specialized Array._endMutation()(v410);
      v411 = (_TtC14softposreaderd12RemoteReader *)v462;
      sub_100005E24(0, &qword_1001AEBE8, NSOperation_ptr);
      v412 = v93;
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v411, v414, v415, v416, v417, v418, v419, v420);
      objc_msgSend(v407, "addOperations:waitUntilFinished:", isa, 0);

      swift_release(v455);
      swift_release(v380);
      swift_release(v301);
      swift_release(v432);

LABEL_103:
      sub_100005D3C(v477);
      v109 = v294;
      goto LABEL_44;
    }
    goto LABEL_107;
  }
  v329 = v441;
  if (!v93)
  {
    v330 = v116;
    v331 = String._bridgeToObjectiveC()();
    objc_msgSend(v330, "setName:", v331);

    (*(void (**)(char *, uint64_t, uint64_t))(v442 + 16))(v434, v456, v329);
    v93 = (char *)v330;
    v332 = Logger.logObject.getter(v93);
    v333 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v332, v333))
    {
      v88 = (uint8_t *)swift_slowAlloc(12, -1);
      v116 = (id)swift_slowAlloc(32, -1);
      *(_QWORD *)&v462 = v116;
      *(_DWORD *)v88 = 136315138;
      v334 = objc_msgSend(v93, "name");
      if (!v334)
      {
LABEL_108:

        __break(1u);
LABEL_109:

        __break(1u);
        goto LABEL_110;
      }
      v335 = v334;
      v336 = static String._unconditionallyBridgeFromObjectiveC(_:)(v334);
      v338 = v337;

      v468 = sub_1000056EC(v336, (unint64_t)v338, (uint64_t *)&v462);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v468, v469, v88 + 4, v88 + 12);

      swift_bridgeObjectRelease(v338, v339, v340, v341, v342, v343, v344, v345);
      _os_log_impl((void *)&_mh_execute_header, v332, v333, "%s", v88, 0xCu);
      swift_arrayDestroy(v116, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v116, -1, -1);
      swift_slowDealloc(v88, -1, -1);

      (*(void (**)(char *, uint64_t))(v442 + 8))(v434, v441);
      v285 = (uint64_t)v459;
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v442 + 8))(v434, v329);
    }
    v391 = swift_allocObject(&unk_10019F4D8, 24, 7);
    swift_weakInit(v391 + 16, v460);
    v392 = (_QWORD *)swift_allocObject(&unk_10019F5C8, 72, 7);
    v301 = v453;
    v393 = v454;
    v392[2] = v391;
    v392[3] = v393;
    v392[4] = v301;
    v392[5] = v93;
    v394 = v455;
    v392[6] = v285;
    v392[7] = v394;
    v392[8] = v458;
    v465 = sub_100111D70;
    v466 = v392;
    *(_QWORD *)&v462 = _NSConcreteStackBlock;
    *((_QWORD *)&v462 + 1) = 1107296256;
    v463 = sub_1000043B8;
    v464 = &unk_10019F5E0;
    v395 = _Block_copy(&v462);
    v396 = (void *)objc_opt_self(NSBlockOperation);
    swift_retain();
    swift_retain();
    v397 = v393;
    swift_retain();
    v398 = v93;
    swift_retain();
    v399 = objc_msgSend(v396, "blockOperationWithBlock:", v395);
    _Block_release(v395);
    swift_release(v466);
    v93 = (char *)v399;
    v400 = String._bridgeToObjectiveC()();
    objc_msgSend(v93, "setName:", v400);
    v380 = v285;
LABEL_101:
    v294 = v433;
    v108 = v457;
    goto LABEL_102;
  }
  if (v93 == (char *)1)
  {
    v362 = v116;
    v363 = String._bridgeToObjectiveC()();
    v364 = &stru_1001A9FE8.align;
    objc_msgSend(v362, "setName:", v363);

    (*(void (**)(char *, uint64_t, uint64_t))(v442 + 16))(v435, v456, v329);
    v93 = (char *)v362;
    v365 = Logger.logObject.getter(v93);
    v366 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v365, v366))
    {
      v367 = (uint8_t *)swift_slowAlloc(12, -1);
      v116 = (id)swift_slowAlloc(32, -1);
      *(_QWORD *)&v462 = v116;
      *(_DWORD *)v367 = 136315138;
      v368 = objc_msgSend(v93, "name");
      if (!v368)
      {
LABEL_110:

        __break(1u);
        goto LABEL_111;
      }
      v369 = v368;
      v370 = static String._unconditionallyBridgeFromObjectiveC(_:)(v368);
      v372 = v371;

      v468 = sub_1000056EC(v370, (unint64_t)v372, (uint64_t *)&v462);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v468, v469, v367 + 4, v367 + 12);

      swift_bridgeObjectRelease(v372, v373, v374, v375, v376, v377, v378, v379);
      _os_log_impl((void *)&_mh_execute_header, v365, v366, "%s", v367, 0xCu);
      swift_arrayDestroy(v116, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v116, -1, -1);
      swift_slowDealloc(v367, -1, -1);

      (*(void (**)(char *, uint64_t))(v442 + 8))(v435, v441);
      v380 = (uint64_t)v459;
      v364 = (_DWORD *)(&stru_1001A9FE8 + 24);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v442 + 8))(v435, v329);
      v380 = v285;
    }
    v401 = swift_allocObject(&unk_10019F4D8, 24, 7);
    swift_weakInit(v401 + 16, v460);
    v402 = (_QWORD *)swift_allocObject(&unk_10019F578, 48, 7);
    v402[2] = v401;
    v402[3] = v93;
    v301 = v453;
    v402[4] = v453;
    v402[5] = v380;
    v465 = sub_100111D10;
    v466 = v402;
    *(_QWORD *)&v462 = _NSConcreteStackBlock;
    *((_QWORD *)&v462 + 1) = 1107296256;
    v463 = sub_1000043B8;
    v464 = &unk_10019F590;
    v403 = _Block_copy(&v462);
    v404 = (void *)objc_opt_self(NSBlockOperation);
    swift_retain();
    v405 = v93;
    swift_retain();
    v406 = objc_msgSend(v404, "blockOperationWithBlock:", v403);
    _Block_release(v403);
    swift_release(v466);
    v93 = (char *)v406;
    v400 = String._bridgeToObjectiveC()();
    objc_msgSend(v93, *((SEL *)v364 + 292), v400);
    goto LABEL_101;
  }
LABEL_111:
  type metadata accessor for SPRReaderMode(0);
  v422 = v421;
  *(_QWORD *)&v462 = v93;
  v423 = v116;
  result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v422, &v462, v422, &type metadata for Int);
  __break(1u);
  return result;
}

void sub_1000FDAA4(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  id *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t Strong;
  uint64_t v24;
  void *v25;
  uint64_t (*v26)();
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Class isa;
  SEL v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  unsigned int v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  int v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _TtC14softposreaderd12RemoteReader *v58;
  SEL v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  uint8_t *v66;
  _QWORD *v67;
  void *v68;
  _QWORD *v69;
  void *v70;
  id aBlock[3];
  void *v72;
  uint64_t (*v73)();
  _QWORD *v74;
  __int128 v75[2];
  char v76[24];
  char v77[24];

  v15 = (id *)(a6 + 16);
  a3();
  if (!a1 && a2)
    sub_10004C650();
  swift_beginAccess(v15, v77, 0, 0);
  if (!*v15)
    goto LABEL_7;
  v16 = *v15;
  if ((objc_msgSend(v16, "didEnd") & 1) != 0)
  {

LABEL_7:
    v17 = a7 + 16;
    if (qword_1001AD1E8 != -1)
      swift_once(&qword_1001AD1E8, sub_1000FAB88);
    v18 = type metadata accessor for Logger(0);
    v19 = sub_100003A14(v18, (uint64_t)qword_1001B2928);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "validation error, no session to end or clear PAN", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    swift_beginAccess(v17, v75, 0, 0);
    Strong = swift_weakLoadStrong(v17);
    if (Strong)
    {
      v24 = Strong;
      sub_100008390(Strong + 16, (uint64_t)aBlock);
      swift_release(v24);
      v25 = v72;
      v26 = v73;
      sub_100005EF8(aBlock, (uint64_t)v72);
      (*(void (**)(void (*)(uint64_t), _QWORD, void *))(*((_QWORD *)v26 + 1) + 16))(sub_1000FE07C, 0, v25);
      sub_100005D3C(aBlock);
    }
    return;
  }
  if (qword_1001AD1E8 != -1)
    swift_once(&qword_1001AD1E8, sub_1000FAB88);
  v27 = a10;
  v28 = (_BYTE *)(a8 + 16);
  v29 = type metadata accessor for Logger(0);
  v30 = sub_100003A14(v29, (uint64_t)qword_1001B2928);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "completion block after readCard", v33, 2u);
    swift_slowDealloc(v33, -1, -1);
  }

  swift_beginAccess(v28, v76, 0, 0);
  if (*v28 == 1)
  {
    v34 = sub_100003A2C((uint64_t *)&unk_1001AE410);
    v35 = swift_allocObject(v34, 48, 7);
    *(_OWORD *)(v35 + 16) = xmmword_10015A5F0;
    if (qword_1001AD250 != -1)
      swift_once(&qword_1001AD250, sub_1001162F8);
    v36 = *((_QWORD *)&xmmword_1001B4F70 + 1);
    *(_QWORD *)(v35 + 32) = xmmword_1001B4F70;
    *(_QWORD *)(v35 + 40) = v36;
    swift_bridgeObjectRetain();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v35, v38, v39, v40, v41, v42, v43, v44);
    aBlock[0] = 0;
    v45 = objc_msgSend(v16, "selectApplets:error:", isa, aBlock);

    v46 = aBlock[0];
    if (v45)
    {
      v47 = aBlock[0];
      sub_1001201A0();
    }
    else
    {
      v48 = aBlock[0];
      v49 = _convertNSErrorToError(_:)(v46);

      swift_willThrow(v50);
      swift_errorRetain();
      v51 = swift_errorRetain();
      v52 = Logger.logObject.getter(v51);
      v53 = static os_log_type_t.error.getter(v52);
      if (os_log_type_enabled(v52, (os_log_type_t)v53))
      {
        v54 = (uint8_t *)swift_slowAlloc(12, -1);
        v70 = (void *)swift_slowAlloc(32, -1);
        aBlock[0] = v70;
        *(_DWORD *)v54 = 136315138;
        *(_QWORD *)&v75[0] = v49;
        swift_errorRetain();
        v55 = sub_100003A2C((uint64_t *)&unk_1001B1280);
        v56 = String.init<A>(describing:)(v75, v55);
        v58 = (_TtC14softposreaderd12RemoteReader *)v57;
        *(_QWORD *)&v75[0] = sub_1000056EC(v56, v57, (uint64_t *)aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v75, (char *)v75 + 8, v54 + 4, v54 + 12);
        swift_bridgeObjectRelease(v58, v59, v60, v61, v62, v63, v64, v65);
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v52, (os_log_type_t)v53, "failed to clear PAN in NVM %s", v54, 0xCu);
        swift_arrayDestroy(v70, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v70, -1, -1);
        v66 = v54;
        v27 = a10;
        swift_slowDealloc(v66, -1, -1);

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();

      }
    }
  }
  sub_100008390(v27, (uint64_t)v75);
  v67 = (_QWORD *)swift_allocObject(&unk_10019F668, 80, 7);
  v67[2] = a9;
  sub_10001A674(v75, (uint64_t)(v67 + 3));
  v67[8] = a11;
  v67[9] = a7;
  v73 = sub_100111E7C;
  v74 = v67;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_1000043B8;
  v72 = &unk_10019F680;
  v68 = _Block_copy(aBlock);
  v69 = v74;
  swift_unknownObjectRetain(a11);
  swift_retain();
  swift_retain();
  swift_release(v69);
  objc_msgSend(v16, "endSessionWithCompletion:", v68);
  _Block_release(v68);

}

uint64_t sub_1000FE080(uint64_t a1, _QWORD *a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  _TtC14softposreaderd12RemoteReader *v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _TtC14softposreaderd12RemoteReader *v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55[3];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE v60[32];

  if (qword_1001AD1E8 != -1)
    swift_once(&qword_1001AD1E8, sub_1000FAB88);
  v8 = a4 + 16;
  v9 = (_QWORD *)(a1 + 16);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_100003A14(v10, (uint64_t)qword_1001B2928);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "NF SE Reader Session ended in completion block of ReadDelegateRelay", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  v15 = swift_beginAccess(v9, v60, 0, 0);
  v16 = (_QWORD *)*v9;
  if (v16)
  {
    v17 = a2[3];
    v18 = a2[4];
    sub_100005EF8(a2, v17);
    v19 = qword_1001AD0E0;
    swift_retain();
    if (v19 != -1)
      swift_once(&qword_1001AD0E0, sub_1000BE314);
    v20 = byte_1001B4D88;
    v21 = sub_100003A2C(&qword_1001AC920);
    inited = swift_initStackObject(v21, &v54);
    *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
    strcpy((char *)(inited + 32), "transactionId");
    *(_WORD *)(inited + 46) = -4864;
    v23 = v16[17];
    *(_QWORD *)(inited + 48) = v16[16];
    *(_QWORD *)(inited + 56) = v23;
    swift_bridgeObjectRetain();
    v24 = (_TtC14softposreaderd12RemoteReader *)sub_1000046DC(inited);
    (*(void (**)(uint64_t, uint64_t, _TtC14softposreaderd12RemoteReader *, uint64_t, uint64_t))(v18 + 8))(13, v20, v24, v17, v18);
    swift_bridgeObjectRelease(v24, v25, v26, v27, v28, v29, v30, v31);
    v32 = swift_retain_n(v16, 2);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = swift_slowAlloc(32, -1);
      v55[0] = v36;
      *(_DWORD *)v35 = 136315138;
      v37 = SPRReaderMode.description.getter(v16[2]);
      v39 = (_TtC14softposreaderd12RemoteReader *)v38;
      v58 = sub_1000056EC(v37, v38, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v35 + 4, v35 + 12);
      swift_release_n(v16, 2);
      swift_bridgeObjectRelease(v39, v40, v41, v42, v43, v44, v45, v46);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "onUpdate(event: .closed, mode: .%s)", v35, 0xCu);
      swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);

      if (!a3)
        goto LABEL_16;
    }
    else
    {

      swift_release_n(v16, 2);
      if (!a3)
      {
LABEL_16:
        swift_release(v16);
        goto LABEL_17;
      }
    }
    objc_msgSend(a3, "onUpdateWithEvent:mode:", 3, v16[2]);
    goto LABEL_16;
  }
  v47 = Logger.logObject.getter(v15);
  v48 = static os_log_type_t.error.getter(v47);
  if (os_log_type_enabled(v47, v48))
  {
    v49 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v49 = 0;
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "readerConfig was nil in callback completion", v49, 2u);
    swift_slowDealloc(v49, -1, -1);
  }

LABEL_17:
  swift_beginAccess(v8, &v58, 0, 0);
  result = swift_weakLoadStrong(v8);
  if (result)
  {
    v51 = result;
    sub_100008390(result + 16, (uint64_t)v55);
    swift_release(v51);
    v52 = v56;
    v53 = v57;
    sub_100005EF8(v55, v56);
    (*(void (**)(void (*)(uint64_t), _QWORD, uint64_t))(*(_QWORD *)(v53 + 8) + 16))(sub_1000FE07C, 0, v52);
    return sub_100005D3C(v55);
  }
  return result;
}

void sub_1000FE4A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _TtC14softposreaderd12RemoteReader *v10;
  SEL v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  NSObject *oslog;
  uint64_t v23;
  uint64_t v24;

  if (a1)
  {
    swift_errorRetain();
    if (qword_1001AD1E8 != -1)
      swift_once(&qword_1001AD1E8, sub_1000FAB88);
    v2 = type metadata accessor for Logger(0);
    sub_100003A14(v2, (uint64_t)qword_1001B2928);
    swift_errorRetain();
    v3 = swift_errorRetain();
    oslog = Logger.logObject.getter(v3);
    v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(12, -1);
      v6 = swift_slowAlloc(32, -1);
      v23 = a1;
      v24 = v6;
      *(_DWORD *)v5 = 136315138;
      swift_errorRetain();
      v7 = sub_100003A2C((uint64_t *)&unk_1001B1280);
      v8 = String.init<A>(describing:)(&v23, v7);
      v10 = (_TtC14softposreaderd12RemoteReader *)v9;
      v23 = sub_1000056EC(v8, v9, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v5 + 4, v5 + 12);
      swift_bridgeObjectRelease(v10, v11, v12, v13, v14, v15, v16, v17);
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Failed to send MPOC logs after readCard: %s", v5, 0xCu);
      swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v6, -1, -1);
      swift_slowDealloc(v5, -1, -1);

      swift_errorRelease();
      return;
    }
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    if (qword_1001AD1E8 != -1)
      swift_once(&qword_1001AD1E8, sub_1000FAB88);
    v18 = type metadata accessor for Logger(0);
    v19 = sub_100003A14(v18, (uint64_t)qword_1001B2928);
    oslog = Logger.logObject.getter(v19);
    v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v20, "MPOC logs sent after readCard", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }
  }

}

void sub_1000FE744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t Strong;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  const char *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  void *v37;
  id v38;
  uint64_t v39;
  void *v40;
  id v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  NSObject *v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint8_t *v58;
  id v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  void *v67;
  id v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  uint64_t v73;
  os_log_type_t type;
  uint64_t v75;
  NSObject **v76;
  void *v77;
  int v78;
  NSObject *v79;
  char v80[9];
  char v81[24];
  __int128 v82;
  __int128 v83;
  char v84[32];

  v13 = a1 + 16;
  swift_beginAccess(a1 + 16, v84, 0, 0);
  Strong = swift_weakLoadStrong(v13);
  if (Strong)
  {
    v15 = Strong;
    v16 = (uint64_t *)(a4 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readResult);
    swift_beginAccess(a4 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readResult, v81, 0, 0);
    v17 = *v16;
    v18 = &qword_1001AD000;
    if (*(_QWORD *)(*v16 + 16))
    {
      swift_bridgeObjectRetain();
      v19 = sub_10000ADC4(0xD000000000000014, 0x80000001001688B0);
      if ((v20 & 1) != 0)
      {
        sub_100005D5C(*(_QWORD *)(v17 + 56) + 32 * v19, (uint64_t)&v82);
      }
      else
      {
        v82 = 0u;
        v83 = 0u;
      }
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v17, v20, v21, v22, v23, v24, v25, v26);
      if (*((_QWORD *)&v83 + 1))
      {
        type metadata accessor for SPRPayAppletStatus(0);
        if ((swift_dynamicCast(v80, &v82, (char *)&type metadata for Any + 8, v32, 6) & 1) != 0)
        {
          v77 = a5;
          v78 = v80[0];
          if (qword_1001AD1E8 != -1)
            swift_once(&qword_1001AD1E8, sub_1000FAB88);
          v33 = type metadata accessor for Logger(0);
          v75 = sub_100003A14(v33, (uint64_t)qword_1001B2928);
          v34 = Logger.logObject.getter(v75);
          v35 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v34, v35))
          {
            v36 = (uint8_t *)swift_slowAlloc(8, -1);
            *(_DWORD *)v36 = 67109120;
            LODWORD(v82) = v78 == 6;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, (char *)&v82 + 4, v36 + 4, v36 + 8);
            _os_log_impl((void *)&_mh_execute_header, v34, v35, "payReadComplete: %{BOOL}d", v36, 8u);
            swift_slowDealloc(v36, -1, -1);
          }

          *(_BYTE *)(*(_QWORD *)(v15 + 272) + 121) = v78 == 6;
          v37 = v77;
          if (qword_1001AD210 != -1)
            swift_once(&qword_1001AD210, sub_100115468);
          v38 = objc_msgSend((id)qword_1001B4F20, "canEvaluatePolicy:error:", 2, 0);
          if ((_DWORD)v38)
          {
            sub_100005E24(0, &qword_1001B2B48, SPRTransactionData_ptr);
            v39 = *v16;
            v40 = *(void **)(a4 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError);
            swift_bridgeObjectRetain();
            v41 = v40;
            v47 = sub_10001CD38(&_swiftEmptyArrayStorage, v39, v41, v42, v43, v44, v45, v46);
            v48 = Logger.logObject.getter(v47);
            v49 = static os_log_type_t.default.getter();
            v79 = v47;
            if (os_log_type_enabled(v48, v49))
            {
              type = v49;
              v50 = (uint8_t *)swift_slowAlloc(12, -1);
              v76 = (NSObject **)swift_slowAlloc(8, -1);
              *(_DWORD *)v50 = 138412290;
              *(_QWORD *)&v82 = v47;
              v51 = v47;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, (char *)&v82 + 8, v50 + 4, v50 + 12);
              *v76 = v47;

              v37 = v77;
              _os_log_impl((void *)&_mh_execute_header, v48, type, "SPRTransactionData: %@", v50, 0xCu);
              v52 = sub_100003A2C((uint64_t *)&unk_1001AE430);
              swift_arrayDestroy(v76, 1, v52);
              swift_slowDealloc(v76, -1, -1);
              swift_slowDealloc(v50, -1, -1);
            }
            else
            {

              v48 = v47;
            }

            v73 = *(_QWORD *)(v15 + 272);
            sub_100005EF8((_QWORD *)(v73 + 16), *(_QWORD *)(v73 + 40));
            swift_retain();
            sub_10003964C((uint64_t)&off_100199320);
            swift_release(v73);
            sub_10010B9D8(v37, v79, *(_QWORD *)(a6 + 152), *(_QWORD *)(a6 + 160));

            sub_1000FEF74(a2, a3, v15);
            swift_release(v15);
            return;
          }
          v70 = Logger.logObject.getter(v38);
          v71 = static os_log_type_t.error.getter(v70);
          if (os_log_type_enabled(v70, v71))
          {
            v72 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v72 = 0;
            _os_log_impl((void *)&_mh_execute_header, v70, v71, "no passcode after tap: attestationFailed", v72, 2u);
            swift_slowDealloc(v72, -1, -1);
          }

          v59 = (id)sub_100024764(4023, 0, 0, 0);
          swift_willThrow(v59);
          v18 = &qword_1001AD000;
          goto LABEL_29;
        }
LABEL_24:
        if (qword_1001AD1E8 != -1)
          swift_once(&qword_1001AD1E8, sub_1000FAB88);
        v53 = type metadata accessor for Logger(0);
        v54 = sub_100003A14(v53, (uint64_t)qword_1001B2928);
        v55 = Logger.logObject.getter(v54);
        v56 = static os_log_type_t.error.getter(v55);
        if (os_log_type_enabled(v55, v56))
        {
          v57 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v57 = 0;
          _os_log_impl((void *)&_mh_execute_header, v55, v56, "ReadOperation completed but payAppletFinalStatus not found in readResult", v57, 2u);
          v58 = v57;
          v18 = &qword_1001AD000;
          swift_slowDealloc(v58, -1, -1);
        }

        v59 = *(id *)(a4 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError);
        swift_willThrow(v59);
LABEL_29:
        sub_1000FEF74(a2, a3, v15);
        if (v18[61] != -1)
          swift_once(&qword_1001AD1E8, sub_1000FAB88);
        v60 = (_BYTE *)(a7 + 16);
        v61 = type metadata accessor for Logger(0);
        v62 = sub_100003A14(v61, (uint64_t)qword_1001B2928);
        v63 = Logger.logObject.getter(v62);
        v64 = static os_log_type_t.error.getter(v63);
        if (os_log_type_enabled(v63, v64))
        {
          v65 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v65 = 0;
          _os_log_impl((void *)&_mh_execute_header, v63, v64, "Could not init SPRTransactionData or InternalTransactionData", v65, 2u);
          swift_slowDealloc(v65, -1, -1);
        }

        swift_beginAccess(v60, &v82, 1, 0);
        *v60 = 1;
        v66 = *(_QWORD *)(v15 + 272);
        swift_retain();
        v67 = (void *)_convertErrorToNSError(_:)(v59);
        v68 = objc_msgSend(v67, "code");

        *(_QWORD *)(v66 + 144) = v68;
        swift_release(v66);
        v69 = *(_QWORD *)(v15 + 272);
        sub_100005EF8((_QWORD *)(v69 + 16), *(_QWORD *)(v69 + 40));
        swift_retain();
        sub_10003964C((uint64_t)&off_100199348);
        swift_release(v69);
        sub_1000B013C((uint64_t)v59);
        swift_release(v15);
        swift_errorRelease();
        return;
      }
    }
    else
    {
      v82 = 0u;
      v83 = 0u;
    }
    sub_10005218C((uint64_t)&v82, &qword_1001B12E0);
    goto LABEL_24;
  }
  if (qword_1001AD1E8 != -1)
    swift_once(&qword_1001AD1E8, sub_1000FAB88);
  v27 = type metadata accessor for Logger(0);
  v28 = sub_100003A14(v27, (uint64_t)qword_1001B2928);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.error.getter(v29);
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "reader deinit during after-read operation", v31, 2u);
    swift_slowDealloc(v31, -1, -1);
  }

}

void sub_1000FEF74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint8_t *v23;
  os_signpost_id_t v24;
  void (*v25)(_BYTE *, uint64_t);
  uint64_t v26;
  os_unfair_lock_s *v27;
  os_unfair_lock_s *v28;
  _TtC14softposreaderd12RemoteReader **v29;
  uint64_t v30;
  os_unfair_lock_s *v31;
  os_unfair_lock_s *v32;
  uint64_t v33;
  char *v34;
  int v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;

  v38 = a3;
  v5 = type metadata accessor for OSSignpostError(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v36[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for OSSignpostID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = &v36[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  v15 = &v36[-v14];
  if (qword_1001AD1F0 != -1)
    swift_once(&qword_1001AD1F0, sub_1000FAC18);
  v16 = type metadata accessor for OSSignposter(0);
  sub_100003A14(v16, (uint64_t)qword_1001B2940);
  v17 = sub_10003AFE8("reader-postProcessing", 21, 2, a1, 0xD000000000000013, 0x8000000100170380);
  v18 = OSSignposter.logHandle.getter(v17);
  v19 = OSSignpostIntervalState.signpostID.getter();
  v37 = static os_signpost_type_t.end.getter(v19);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v20 = swift_retain();
    checkForErrorAndConsumeState(state:)(v20);
    swift_release(a2);
    if ((*(unsigned int (**)(_BYTE *, uint64_t))(v6 + 88))(v8, v5) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v21 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
      v21 = "end total transaction";
    }
    v22 = v38;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v13, v15, v9);
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    v24 = OSSignpostID.rawValue.getter(v23);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, (os_signpost_type_t)v37, v24, "reader-total_transaction", v21, v23, 2u);
    swift_slowDealloc(v23, -1, -1);

    v25 = *(void (**)(_BYTE *, uint64_t))(v10 + 8);
    v25(v15, v9);
    v25(v13, v9);
  }
  else
  {

    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v15, v9);
    v22 = v38;
  }
  v26 = *(_QWORD *)(v22 + 272);
  v27 = *(os_unfair_lock_s **)(v26 + 56);
  v28 = v27 + 8;
  v29 = (_TtC14softposreaderd12RemoteReader **)&v27[4];
  os_unfair_lock_lock(v27 + 8);
  sub_100080B88(v29, 7);
  os_unfair_lock_unlock(v28);
  os_unfair_lock_lock(v28);
  sub_100080B88(v29, 3);
  os_unfair_lock_unlock(v28);
  v30 = 2;
  v31 = *(os_unfair_lock_s **)(v26 + 56);
  v32 = v31 + 8;
  v33 = (uint64_t)&v31[4];
  v34 = &byte_1001992F0;
  do
  {
    v35 = *v34++;
    os_unfair_lock_lock(v32);
    sub_10007FE5C(v33, v35);
    os_unfair_lock_unlock(v32);
    --v30;
  }
  while (v30);
}

void sub_1000FF2C4(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t Strong;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  _DWORD *v32;
  NSObject *v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  os_signpost_type_t v42;
  uint64_t v43;
  char *v44;
  const char *v45;
  uint64_t v46;
  char *v47;
  uint8_t *v48;
  os_signpost_id_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  os_unfair_lock_s *v53;
  _TtC14softposreaderd12RemoteReader **v54;
  uint64_t v55;
  os_unfair_lock_s *v56;
  os_unfair_lock_s *v57;
  uint64_t v58;
  char *v59;
  int v60;
  NSObject *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  _TtC14softposreaderd12RemoteReader *v69;
  void *v70;
  id v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  _QWORD *v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  NSObject *v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  unint64_t v89;
  _TtC14softposreaderd12RemoteReader *v90;
  SEL v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  NSObject *v113;
  int v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120[24];

  v116 = a4;
  v7 = type metadata accessor for OSSignpostError(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v115 = (char *)&v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OSSignpostID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v105 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v105 - v15;
  a1 += 16;
  swift_beginAccess(a1, v120, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v18 = Strong;
    v109 = a3;
    v110 = v8;
    v111 = v7;
    v107 = v14;
    v19 = OBJC_IVAR____TtC9SPREngine13ReadOperation_vasDataFound;
    if ((a2[OBJC_IVAR____TtC9SPREngine13ReadOperation_vasDataFound] & 1) != 0)
      v20 = 1;
    else
      v20 = a2[OBJC_IVAR____TtC9SPREngine13ReadOperation_vasURLOK];
    v112 = v11;
    *(_BYTE *)(*(_QWORD *)(Strong + 272) + 122) = v20;
    if (qword_1001AD1E8 != -1)
      swift_once(&qword_1001AD1E8, sub_1000FAB88);
    v26 = type metadata accessor for Logger(0);
    v27 = sub_100003A14(v26, (uint64_t)qword_1001B2928);
    v28 = a2;
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.default.getter();
    v31 = os_log_type_enabled(v29, v30);
    v108 = v27;
    v114 = v20;
    v113 = v28;
    if (v31)
    {
      v32 = (_DWORD *)swift_slowAlloc(20, -1);
      v106 = v10;
      v33 = v28;
      v34 = v32;
      *v32 = 67109632;
      LODWORD(v118) = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, (char *)&v118 + 4, v32 + 1, v32 + 2);
      *((_WORD *)v34 + 4) = 1024;
      LODWORD(v118) = a2[v19];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, (char *)&v118 + 4, (char *)v34 + 10, (char *)v34 + 14);
      *((_WORD *)v34 + 7) = 1024;
      LODWORD(v118) = *((unsigned __int8 *)&v33->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_vasURLOK);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, (char *)&v118 + 4, v34 + 4, v34 + 5);

      v10 = v106;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "vasReadSuccess: %{BOOL}d, vasDataFound: %{BOOL}d, vasURLOK: %{BOOL}d", (uint8_t *)v34, 0x14u);
      swift_slowDealloc(v34, -1, -1);
    }
    else
    {

      v29 = v28;
    }
    v36 = v110;
    v35 = v111;
    v37 = v109;

    if (qword_1001AD1F0 != -1)
      swift_once(&qword_1001AD1F0, sub_1000FAC18);
    v38 = type metadata accessor for OSSignposter(0);
    v39 = sub_100003A14(v38, (uint64_t)qword_1001B2940);
    v40 = OSSignposter.logHandle.getter(v39);
    v41 = OSSignpostIntervalState.signpostID.getter();
    v42 = static os_signpost_type_t.end.getter(v41);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v43 = swift_retain();
      v44 = v115;
      checkForErrorAndConsumeState(state:)(v43);
      swift_release(v37);
      if ((*(unsigned int (**)(char *, uint64_t))(v36 + 88))(v44, v35) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v45 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v36 + 8))(v44, v35);
        v45 = "end total transaction";
      }
      v46 = v112;
      v47 = v107;
      (*(void (**)(char *, char *, uint64_t))(v112 + 16))(v107, v16, v10);
      v48 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v48 = 0;
      v49 = OSSignpostID.rawValue.getter(v48);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v40, v42, v49, "reader-total_transaction", v45, v48, 2u);
      swift_slowDealloc(v48, -1, -1);

      v50 = *(void (**)(char *, uint64_t))(v46 + 8);
      v50(v16, v10);
      v50(v47, v10);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v112 + 8))(v16, v10);
    }
    v51 = *(_QWORD *)(v18 + 272);
    v52 = *(_QWORD *)(v51 + 56);
    v53 = (os_unfair_lock_s *)(v52 + 32);
    v54 = (_TtC14softposreaderd12RemoteReader **)(v52 + 16);
    swift_retain();
    os_unfair_lock_lock(v53);
    sub_100080B88(v54, 6);
    os_unfair_lock_unlock(v53);
    os_unfair_lock_lock(v53);
    sub_100080B88(v54, 3);
    os_unfair_lock_unlock(v53);
    v55 = 1;
    v56 = *(os_unfair_lock_s **)(v51 + 56);
    v57 = v56 + 8;
    v58 = (uint64_t)&v56[4];
    v59 = &byte_100199390;
    do
    {
      v60 = *v59++;
      os_unfair_lock_lock(v57);
      sub_10007FE5C(v58, v60);
      os_unfair_lock_unlock(v57);
      --v55;
    }
    while (v55);
    swift_release(v51);
    v61 = v113;
    if ((*((_BYTE *)&v113->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_skipLoyalty) & 1) != 0)
    {
      v62 = (void *)sub_100024764(4027, 0, 0, 0);
      v63 = *(_QWORD *)(v18 + 272);
      v118 = (uint64_t)v62;
      type metadata accessor for ReadError(0);
      v65 = v64;
      v66 = sub_100005F1C((unint64_t *)&qword_1001B12D0, (uint64_t (*)(uint64_t))type metadata accessor for ReadError, (uint64_t)&unk_10015C348);
      swift_retain();
      *(_QWORD *)(v63 + 136) = _BridgedStoredNSError.errorCode.getter(v65, v66);
      swift_release(v63);
      v67 = *(_QWORD *)(v18 + 272);
      sub_100005EF8((_QWORD *)(v67 + 16), *(_QWORD *)(v67 + 40));
      swift_retain();
      sub_10003964C((uint64_t)&off_1001993C0);
      swift_release(v67);
      v68 = v62;
      sub_1000B013C((uint64_t)v68);
      swift_release(v18);

    }
    else
    {
      if ((v114 & 1) != 0)
      {
        sub_100005E24(0, &qword_1001B2B48, SPRTransactionData_ptr);
        v69 = *(_TtC14softposreaderd12RemoteReader **)((char *)&v61->isa
                                                     + OBJC_IVAR____TtC9SPREngine13ReadOperation_vasResponse);
        v70 = *(Class *)((char *)&v61->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError);
        swift_bridgeObjectRetain();
        v71 = sub_10001E2AC(v69, v70);
        v72 = Logger.logObject.getter(v71);
        v73 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v72, v73))
        {
          v74 = (uint8_t *)swift_slowAlloc(12, -1);
          v75 = (_QWORD *)swift_slowAlloc(8, -1);
          *(_DWORD *)v74 = 138412290;
          v118 = (uint64_t)v71;
          v76 = v18;
          v77 = v71;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v74 + 4, v74 + 12);
          *v75 = v71;

          v18 = v76;
          _os_log_impl((void *)&_mh_execute_header, v72, v73, "SPRTransactionData: %@", v74, 0xCu);
          v78 = sub_100003A2C((uint64_t *)&unk_1001AE430);
          swift_arrayDestroy(v75, 1, v78);
          swift_slowDealloc(v75, -1, -1);
          swift_slowDealloc(v74, -1, -1);

        }
        else
        {

        }
        v98 = *(_QWORD *)(v18 + 272);
        sub_100005EF8((_QWORD *)(v98 + 16), *(_QWORD *)(v98 + 40));
        swift_retain();
        sub_10003964C((uint64_t)&off_100199410);
        swift_release(v98);
        (*(void (**)(id, _QWORD))(v116 + 24))(v71, 0);
      }
      else
      {
        v79 = v113;
        v80 = Logger.logObject.getter(v79);
        v81 = static os_log_type_t.error.getter(v80);
        if (os_log_type_enabled(v80, v81))
        {
          v82 = (uint8_t *)swift_slowAlloc(12, -1);
          v83 = swift_slowAlloc(32, -1);
          *(_DWORD *)v82 = 136315138;
          v118 = v83;
          v115 = (char *)(v82 + 4);
          v117 = *(uint64_t *)((char *)&v79->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError);
          v84 = (void *)v117;
          type metadata accessor for ReadError(0);
          v86 = v85;
          v87 = v84;
          v88 = String.init<A>(describing:)(&v117, v86);
          v90 = (_TtC14softposreaderd12RemoteReader *)v89;
          v117 = sub_1000056EC(v88, v89, &v118);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118, v115, v82 + 12);

          swift_bridgeObjectRelease(v90, v91, v92, v93, v94, v95, v96, v97);
          _os_log_impl((void *)&_mh_execute_header, v80, v81, "readOp.readError: %s", v82, 0xCu);
          swift_arrayDestroy(v83, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v83, -1, -1);
          swift_slowDealloc(v82, -1, -1);

        }
        else
        {

        }
        v99 = *(_QWORD *)(v18 + 272);
        v100 = OBJC_IVAR____TtC9SPREngine13ReadOperation_readError;
        v118 = *(uint64_t *)((char *)&v79->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError);
        type metadata accessor for ReadError(0);
        v102 = v101;
        v103 = sub_100005F1C((unint64_t *)&qword_1001B12D0, (uint64_t (*)(uint64_t))type metadata accessor for ReadError, (uint64_t)&unk_10015C348);
        swift_retain();
        *(_QWORD *)(v99 + 136) = _BridgedStoredNSError.errorCode.getter(v102, v103);
        swift_release(v99);
        v104 = *(_QWORD *)(v18 + 272);
        sub_100005EF8((_QWORD *)(v104 + 16), *(_QWORD *)(v104 + 40));
        swift_retain();
        sub_10003964C((uint64_t)&off_1001993E8);
        swift_release(v104);
        v71 = *(id *)((char *)&v79->isa + v100);
        sub_1000B013C((uint64_t)v71);
      }

      swift_release(v18);
    }
  }
  else
  {
    if (qword_1001AD1E8 != -1)
      swift_once(&qword_1001AD1E8, sub_1000FAB88);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_100003A14(v21, (uint64_t)qword_1001B2928);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "reader deinit during after-read operation", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

  }
}

void sub_1000FFD14(uint64_t a1, _BYTE *a2, _QWORD *a3, void (**a4)(_QWORD, _QWORD), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  NSObject *v35;
  NSObject *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  uint64_t v39;
  _TtC14softposreaderd12RemoteReader *v40;
  void *v41;
  NSObject *v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  NSObject *v46;
  NSObject *v47;
  NSObject **v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  char *v54;
  uint64_t v55;
  os_signpost_type_t v56;
  char v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  NSObject **v67;
  uint64_t v68;
  os_signpost_type_t v69;
  char v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  id v77;
  uint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  const char *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  NSObject *v96;
  os_log_type_t v97;
  uint8_t *v98;
  _TtC14softposreaderd12RemoteReader *v99;
  uint64_t v100;
  void *v101;
  id v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  NSObject *v108;
  NSObject *v109;
  os_log_type_t v110;
  uint8_t *v111;
  NSObject *v112;
  NSObject **v113;
  uint64_t v114;
  NSObject *v115;
  os_log_type_t v116;
  uint8_t *v117;
  _BYTE *v118;
  uint64_t v119;
  NSObject *v120;
  os_log_type_t v121;
  uint8_t *v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint8_t *v131;
  os_signpost_id_t v132;
  void (*v133)(char *, uint64_t);
  uint64_t v134;
  uint64_t v135;
  os_unfair_lock_s *v136;
  _TtC14softposreaderd12RemoteReader **v137;
  uint64_t v138;
  os_unfair_lock_s *v139;
  os_unfair_lock_s *v140;
  uint64_t v141;
  char *v142;
  int v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint8_t *v147;
  os_signpost_id_t v148;
  void (*v149)(NSObject **, uint64_t);
  uint64_t v150;
  os_unfair_lock_s *v151;
  _TtC14softposreaderd12RemoteReader **v152;
  uint64_t v153;
  os_unfair_lock_s *v154;
  os_unfair_lock_s *v155;
  uint64_t v156;
  char *v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  NSObject *v161;
  char *v162;
  uint64_t v163;
  os_signpost_type_t v164;
  char v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint8_t *v177;
  os_signpost_id_t v178;
  void (*v179)(char *, uint64_t);
  uint64_t v180;
  os_unfair_lock_s *v181;
  _TtC14softposreaderd12RemoteReader **v182;
  uint64_t v183;
  os_unfair_lock_s *v184;
  os_unfair_lock_s *v185;
  uint64_t v186;
  char *v187;
  int v188;
  NSObject **v189;
  NSObject *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  _BYTE *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  char *v200;
  char *v201;
  NSObject **v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void (**v206)(_QWORD, _QWORD);
  uint64_t v207;
  uint64_t Strong;
  unsigned __int8 v209;
  char v210[24];
  __int128 v211;
  __int128 v212;
  char v213[16];

  v204 = a7;
  v205 = a6;
  v206 = a4;
  v207 = a5;
  v10 = type metadata accessor for OSSignpostError(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v198 = (char *)&v189 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v200 = (char *)&v189 - v15;
  __chkstk_darwin(v14);
  v199 = (char *)&v189 - v16;
  v17 = type metadata accessor for OSSignpostID(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v189 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v202 = (NSObject **)((char *)&v189 - v23);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v189 - v25;
  __chkstk_darwin(v24);
  v201 = (char *)&v189 - v27;
  a1 += 16;
  swift_beginAccess(a1, v213, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v194 = v26;
    v203 = OBJC_IVAR____TtC9SPREngine13ReadOperation_vasDataFound;
    if ((a2[OBJC_IVAR____TtC9SPREngine13ReadOperation_vasDataFound] & 1) != 0)
      v28 = 1;
    else
      v28 = a2[OBJC_IVAR____TtC9SPREngine13ReadOperation_vasURLOK];
    v191 = v21;
    v192 = v11;
    v193 = v10;
    v196 = v18;
    if (qword_1001AD1E8 != -1)
      swift_once(&qword_1001AD1E8, sub_1000FAB88);
    v34 = type metadata accessor for Logger(0);
    sub_100003A14(v34, (uint64_t)qword_1001B2928);
    v35 = a2;
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.default.getter();
    v38 = os_log_type_enabled(v36, v37);
    v197 = v17;
    v195 = a2;
    if (v38)
    {
      v39 = swift_slowAlloc(20, -1);
      *(_DWORD *)v39 = 67109632;
      LODWORD(v211) = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, (char *)&v211 + 4, v39 + 4, v39 + 8);
      *(_WORD *)(v39 + 8) = 1024;
      LODWORD(v211) = a2[v203];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, (char *)&v211 + 4, v39 + 10, v39 + 14);
      *(_WORD *)(v39 + 14) = 1024;
      LODWORD(v211) = *((unsigned __int8 *)&v35->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_vasURLOK);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, (char *)&v211 + 4, v39 + 16, v39 + 20);

      _os_log_impl((void *)&_mh_execute_header, v36, v37, "vasReadSuccess: %{BOOL}d, vasDataFound: %{BOOL}d, vasURLOK: %{BOOL}d", (uint8_t *)v39, 0x14u);
      swift_slowDealloc(v39, -1, -1);
    }
    else
    {

      v36 = v35;
    }

    *(_BYTE *)(*(_QWORD *)(Strong + 272) + 122) = v28;
    if (v28)
    {
      sub_100005E24(0, &qword_1001B2B48, SPRTransactionData_ptr);
      v40 = *(_TtC14softposreaderd12RemoteReader **)((char *)&v35->isa
                                                   + OBJC_IVAR____TtC9SPREngine13ReadOperation_vasResponse);
      v41 = *(Class *)((char *)&v35->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError);
      swift_bridgeObjectRetain();
      v42 = sub_10001E2AC(v40, v41);
      v43 = Logger.logObject.getter(v42);
      v44 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v43, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc(12, -1);
        v189 = (NSObject **)swift_slowAlloc(8, -1);
        *(_DWORD *)v45 = 138412290;
        *(_QWORD *)&v211 = v42;
        v46 = v42;
        v190 = v35;
        v47 = v46;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, (char *)&v211 + 8, v45 + 4, v45 + 12);
        v48 = v189;
        *v189 = v42;

        v35 = v190;
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "SPRTransactionData: %@", v45, 0xCu);
        v49 = sub_100003A2C((uint64_t *)&unk_1001AE430);
        swift_arrayDestroy(v48, 1, v49);
        swift_slowDealloc(v48, -1, -1);
        swift_slowDealloc(v45, -1, -1);
      }
      else
      {

        v43 = v42;
      }

      if (a3[2] == 2)
      {
        if ((*((_BYTE *)&v35->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_paymentDataForthcoming) & 1) == 0)
        {
          v50 = v42;
          ((void (**)(NSObject *, _QWORD))v206)[3](v42, 0);
          if (qword_1001AD1F0 != -1)
            swift_once(&qword_1001AD1F0, sub_1000FAC18);
          v51 = type metadata accessor for OSSignposter(0);
          v52 = sub_100003A14(v51, (uint64_t)qword_1001B2940);
          v53 = OSSignposter.logHandle.getter(v52);
          v54 = v201;
          v55 = OSSignpostIntervalState.signpostID.getter();
          v56 = static os_signpost_type_t.end.getter(v55);
          v57 = OS_os_log.signpostsEnabled.getter();
          v58 = v199;
          if ((v57 & 1) != 0)
          {
            v59 = v207;
            v60 = swift_retain();
            checkForErrorAndConsumeState(state:)(v60);
            swift_release(v59);
            v61 = v192;
            v62 = v193;
            if ((*(unsigned int (**)(char *, uint64_t))(v192 + 88))(v58, v193) == enum case for OSSignpostError.doubleEnd(_:))
            {
              v63 = "[Error] Interval already ended";
            }
            else
            {
              (*(void (**)(char *, uint64_t))(v61 + 8))(v58, v62);
              v63 = "end total transaction";
            }
            v128 = v196;
            v129 = v194;
            v130 = v197;
            (*(void (**)(char *, char *, uint64_t))(v196 + 16))(v194, v54, v197);
            v131 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v131 = 0;
            v132 = OSSignpostID.rawValue.getter(v131);
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v53, v56, v132, "reader-total_transaction", v63, v131, 2u);
            swift_slowDealloc(v131, -1, -1);

            v133 = *(void (**)(char *, uint64_t))(v128 + 8);
            v133(v54, v130);
            v133(v129, v130);
          }
          else
          {

            (*(void (**)(char *, uint64_t))(v196 + 8))(v54, v197);
          }
          v134 = *(_QWORD *)(Strong + 272);
          v135 = *(_QWORD *)(v134 + 56);
          v136 = (os_unfair_lock_s *)(v135 + 32);
          v137 = (_TtC14softposreaderd12RemoteReader **)(v135 + 16);
          swift_retain();
          os_unfair_lock_lock(v136);
          sub_100080B88(v137, 3);
          os_unfair_lock_unlock(v136);
          v138 = 1;
          v139 = *(os_unfair_lock_s **)(v134 + 56);
          v140 = v139 + 8;
          v141 = (uint64_t)&v139[4];
          v142 = &byte_1001994A8;
          do
          {
            v143 = *v142++;
            os_unfair_lock_lock(v140);
            sub_10007FE5C(v141, v143);
            os_unfair_lock_unlock(v140);
            --v138;
          }
          while (v138);
LABEL_70:
          swift_release(v134);
          swift_release(Strong);

          return;
        }
      }
      else
      {
        if (v195[v203] == 1)
        {
          v50 = v42;
          ((void (**)(NSObject *, _QWORD))v206)[3](v42, 0);
          if (qword_1001AD1F0 != -1)
            swift_once(&qword_1001AD1F0, sub_1000FAC18);
          v64 = type metadata accessor for OSSignposter(0);
          v65 = sub_100003A14(v64, (uint64_t)qword_1001B2940);
          v66 = OSSignposter.logHandle.getter(v65);
          v67 = v202;
          v68 = OSSignpostIntervalState.signpostID.getter();
          v69 = static os_signpost_type_t.end.getter(v68);
          v70 = OS_os_log.signpostsEnabled.getter();
          v71 = v200;
          if ((v70 & 1) != 0)
          {
            v72 = v207;
            v73 = swift_retain();
            checkForErrorAndConsumeState(state:)(v73);
            swift_release(v72);
            v74 = v192;
            v75 = v193;
            if ((*(unsigned int (**)(char *, uint64_t))(v192 + 88))(v71, v193) == enum case for OSSignpostError.doubleEnd(_:))
            {
              v76 = "[Error] Interval already ended";
            }
            else
            {
              (*(void (**)(char *, uint64_t))(v74 + 8))(v71, v75);
              v76 = "end total transaction";
            }
            v144 = v196;
            v145 = v194;
            v146 = v197;
            (*(void (**)(char *, NSObject **, uint64_t))(v196 + 16))(v194, v67, v197);
            v147 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v147 = 0;
            v148 = OSSignpostID.rawValue.getter(v147);
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v66, v69, v148, "reader-total_transaction", v76, v147, 2u);
            swift_slowDealloc(v147, -1, -1);

            v149 = *(void (**)(NSObject **, uint64_t))(v144 + 8);
            v149(v67, v146);
            v149((NSObject **)v145, v146);
          }
          else
          {

            (*(void (**)(NSObject **, uint64_t))(v196 + 8))(v67, v197);
          }
          v134 = *(_QWORD *)(Strong + 272);
          v150 = *(_QWORD *)(v134 + 56);
          v151 = (os_unfair_lock_s *)(v150 + 32);
          v152 = (_TtC14softposreaderd12RemoteReader **)(v150 + 16);
          swift_retain();
          os_unfair_lock_lock(v151);
          sub_100080B88(v152, 3);
          os_unfair_lock_unlock(v151);
          v153 = 1;
          v154 = *(os_unfair_lock_s **)(v134 + 56);
          v155 = v154 + 8;
          v156 = (uint64_t)&v154[4];
          v157 = &byte_1001994F8;
          do
          {
            v158 = *v157++;
            os_unfair_lock_lock(v155);
            sub_10007FE5C(v156, v158);
            os_unfair_lock_unlock(v155);
            --v153;
          }
          while (v153);
          goto LABEL_70;
        }
        if (*((_BYTE *)&v35->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_vasURLOK) == 1
          && (*((_BYTE *)&v35->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_paymentDataForthcoming) & 1) == 0)
        {
          ((void (**)(NSObject *, _QWORD))v206)[3](v42, 0);
          if (qword_1001AD1F0 != -1)
            swift_once(&qword_1001AD1F0, sub_1000FAC18);
          v159 = type metadata accessor for OSSignposter(0);
          v160 = sub_100003A14(v159, (uint64_t)qword_1001B2940);
          v161 = OSSignposter.logHandle.getter(v160);
          v162 = v191;
          v163 = OSSignpostIntervalState.signpostID.getter();
          v164 = static os_signpost_type_t.end.getter(v163);
          v165 = OS_os_log.signpostsEnabled.getter();
          v166 = v198;
          v50 = v42;
          if ((v165 & 1) != 0)
          {
            v167 = v207;
            v168 = swift_retain();
            checkForErrorAndConsumeState(state:)(v168);
            swift_release(v167);
            v169 = v192;
            v170 = v193;
            if ((*(unsigned int (**)(char *, uint64_t))(v192 + 88))(v166, v193) == enum case for OSSignpostError.doubleEnd(_:))
            {
              v171 = "[Error] Interval already ended";
            }
            else
            {
              (*(void (**)(char *, uint64_t))(v169 + 8))(v166, v170);
              v171 = "end total transaction";
            }
            v174 = v196;
            v175 = v194;
            v176 = v197;
            (*(void (**)(char *, char *, uint64_t))(v196 + 16))(v194, v162, v197);
            v177 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v177 = 0;
            v178 = OSSignpostID.rawValue.getter(v177);
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v161, v164, v178, "reader-total_transaction", v171, v177, 2u);
            swift_slowDealloc(v177, -1, -1);

            v179 = *(void (**)(char *, uint64_t))(v174 + 8);
            v179(v162, v176);
            v179(v175, v176);
          }
          else
          {

            (*(void (**)(char *, uint64_t))(v196 + 8))(v162, v197);
          }
          v134 = *(_QWORD *)(Strong + 272);
          v180 = *(_QWORD *)(v134 + 56);
          v181 = (os_unfair_lock_s *)(v180 + 32);
          v182 = (_TtC14softposreaderd12RemoteReader **)(v180 + 16);
          swift_retain();
          os_unfair_lock_lock(v181);
          sub_100080B88(v182, 3);
          os_unfair_lock_unlock(v181);
          v183 = 1;
          v184 = *(os_unfair_lock_s **)(v134 + 56);
          v185 = v184 + 8;
          v186 = (uint64_t)&v184[4];
          v187 = &byte_100199548;
          do
          {
            v188 = *v187++;
            os_unfair_lock_lock(v185);
            sub_10007FE5C(v186, v188);
            os_unfair_lock_unlock(v185);
            --v183;
          }
          while (v183);
          goto LABEL_70;
        }
      }

    }
    if (qword_1001AD210 != -1)
      swift_once(&qword_1001AD210, sub_100115468);
    v77 = objc_msgSend((id)qword_1001B4F20, "canEvaluatePolicy:error:", 2, 0);
    if (!(_DWORD)v77)
    {
      v88 = Logger.logObject.getter(v77);
      v89 = static os_log_type_t.error.getter(v88);
      if (os_log_type_enabled(v88, v89))
      {
        v90 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v90 = 0;
        _os_log_impl((void *)&_mh_execute_header, v88, v89, "no passcode after tap: attestationFailed", v90, 2u);
        swift_slowDealloc(v90, -1, -1);
      }

      v91 = (id)sub_100024764(4023, 0, 0, 0);
      v92 = (uint64_t)v91;
      goto LABEL_56;
    }
    v78 = (uint64_t *)((char *)v35 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readResult);
    swift_beginAccess((char *)v35 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readResult, v210, 0, 0);
    v79 = *v78;
    if (*(_QWORD *)(*v78 + 16))
    {
      swift_bridgeObjectRetain();
      v80 = sub_10000ADC4(0xD000000000000014, 0x80000001001688B0);
      if ((v81 & 1) != 0)
      {
        sub_100005D5C(*(_QWORD *)(v79 + 56) + 32 * v80, (uint64_t)&v211);
      }
      else
      {
        v211 = 0u;
        v212 = 0u;
      }
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v79, v81, v82, v83, v84, v85, v86, v87);
      if (*((_QWORD *)&v212 + 1))
      {
        type metadata accessor for SPRPayAppletStatus(0);
        v94 = swift_dynamicCast(&v209, &v211, (char *)&type metadata for Any + 8, v93, 6);
        if ((v94 & 1) != 0)
        {
          v95 = v209;
          v96 = Logger.logObject.getter(v94);
          v97 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v96, v97))
          {
            v98 = (uint8_t *)swift_slowAlloc(8, -1);
            *(_DWORD *)v98 = 67109120;
            LODWORD(v211) = v95 == 6;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, (char *)&v211 + 4, v98 + 4, v98 + 8);
            _os_log_impl((void *)&_mh_execute_header, v96, v97, "payReadComplete: %{BOOL}d", v98, 8u);
            swift_slowDealloc(v98, -1, -1);
          }

          *(_BYTE *)(*(_QWORD *)(Strong + 272) + 121) = v95 == 6;
          sub_100005E24(0, &qword_1001B2B48, SPRTransactionData_ptr);
          v99 = *(_TtC14softposreaderd12RemoteReader **)((char *)&v35->isa
                                                       + OBJC_IVAR____TtC9SPREngine13ReadOperation_vasResponse);
          v100 = *v78;
          v101 = *(Class *)((char *)&v35->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v102 = v101;
          v108 = sub_10001CD38(v99, v100, v102, v103, v104, v105, v106, v107);
          v109 = Logger.logObject.getter(v108);
          v110 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v109, v110))
          {
            v203 = (uint64_t)a3;
            v111 = (uint8_t *)swift_slowAlloc(12, -1);
            v202 = (NSObject **)swift_slowAlloc(8, -1);
            *(_DWORD *)v111 = 138412290;
            *(_QWORD *)&v211 = v108;
            v112 = v108;
            a3 = (_QWORD *)v203;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, (char *)&v211 + 8, v111 + 4, v111 + 12);
            v113 = v202;
            *v202 = v108;

            _os_log_impl((void *)&_mh_execute_header, v109, v110, "SPRTransactionData: %@", v111, 0xCu);
            v114 = sub_100003A2C((uint64_t *)&unk_1001AE430);
            swift_arrayDestroy(v113, 1, v114);
            swift_slowDealloc(v113, -1, -1);
            swift_slowDealloc(v111, -1, -1);
          }
          else
          {

            v109 = v108;
          }

          v172 = *(_QWORD *)(Strong + 272);
          sub_100005EF8((_QWORD *)(v172 + 16), *(_QWORD *)(v172 + 40));
          swift_retain();
          sub_10003964C((uint64_t)&off_100199578);
          swift_release(v172);
          sub_10010B9D8(v206, v108, a3[19], a3[20]);

          v173 = Strong;
          sub_100101070(v205, v207, Strong);
          swift_release(v173);
          return;
        }
        goto LABEL_53;
      }
    }
    else
    {
      v211 = 0u;
      v212 = 0u;
    }
    v94 = sub_10005218C((uint64_t)&v211, &qword_1001B12E0);
LABEL_53:
    v115 = Logger.logObject.getter(v94);
    v116 = static os_log_type_t.error.getter(v115);
    if (os_log_type_enabled(v115, v116))
    {
      v117 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v117 = 0;
      _os_log_impl((void *)&_mh_execute_header, v115, v116, "ReadOperation completed but payAppletFinalStatus not found in readResult", v117, 2u);
      swift_slowDealloc(v117, -1, -1);
    }

    v91 = *(id *)((char *)&v35->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError);
    v92 = (uint64_t)v91;
LABEL_56:
    swift_willThrow(v91);
    v118 = (_BYTE *)(v204 + 16);
    sub_100101070(v205, v207, Strong);
    v120 = Logger.logObject.getter(v119);
    v121 = static os_log_type_t.error.getter(v120);
    if (os_log_type_enabled(v120, v121))
    {
      v122 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v122 = 0;
      _os_log_impl((void *)&_mh_execute_header, v120, v121, "Could not init SPRTransactionData or InternalTransactionData", v122, 2u);
      swift_slowDealloc(v122, -1, -1);
    }

    swift_beginAccess(v118, &v211, 1, 0);
    *v118 = 1;
    v123 = Strong;
    v124 = *(_QWORD *)(Strong + 272);
    swift_retain();
    v125 = (void *)_convertErrorToNSError(_:)(v92);
    v126 = objc_msgSend(v125, "code");

    *(_QWORD *)(v124 + 144) = v126;
    swift_release(v124);
    v127 = *(_QWORD *)(v123 + 272);
    sub_100005EF8((_QWORD *)(v127 + 16), *(_QWORD *)(v127 + 40));
    swift_retain();
    sub_10003964C((uint64_t)&off_1001995A0);
    swift_release(v127);
    sub_1000B013C(v92);
    swift_release(v123);
    swift_errorRelease();
    return;
  }
  if (qword_1001AD1E8 != -1)
    swift_once(&qword_1001AD1E8, sub_1000FAB88);
  v29 = type metadata accessor for Logger(0);
  v30 = sub_100003A14(v29, (uint64_t)qword_1001B2928);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.error.getter(v31);
  if (os_log_type_enabled(v31, v32))
  {
    v33 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "reader deinit during after-read operation", v33, 2u);
    swift_slowDealloc(v33, -1, -1);
  }

}

void sub_100101070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint8_t *v23;
  os_signpost_id_t v24;
  void (*v25)(_BYTE *, uint64_t);
  uint64_t v26;
  os_unfair_lock_s *v27;
  os_unfair_lock_s *v28;
  _TtC14softposreaderd12RemoteReader **v29;
  uint64_t v30;
  os_unfair_lock_s *v31;
  os_unfair_lock_s *v32;
  uint64_t v33;
  char *v34;
  int v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;

  v38 = a3;
  v5 = type metadata accessor for OSSignpostError(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v36[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for OSSignpostID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = &v36[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  v15 = &v36[-v14];
  if (qword_1001AD1F0 != -1)
    swift_once(&qword_1001AD1F0, sub_1000FAC18);
  v16 = type metadata accessor for OSSignposter(0);
  sub_100003A14(v16, (uint64_t)qword_1001B2940);
  v17 = sub_10003AFE8("reader-postProcessing", 21, 2, a1, 0xD000000000000013, 0x8000000100170380);
  v18 = OSSignposter.logHandle.getter(v17);
  v19 = OSSignpostIntervalState.signpostID.getter();
  v37 = static os_signpost_type_t.end.getter(v19);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v20 = swift_retain();
    checkForErrorAndConsumeState(state:)(v20);
    swift_release(a2);
    if ((*(unsigned int (**)(_BYTE *, uint64_t))(v6 + 88))(v8, v5) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v21 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
      v21 = "end total transaction";
    }
    v22 = v38;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v13, v15, v9);
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    v24 = OSSignpostID.rawValue.getter(v23);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, (os_signpost_type_t)v37, v24, "reader-total_transaction", v21, v23, 2u);
    swift_slowDealloc(v23, -1, -1);

    v25 = *(void (**)(_BYTE *, uint64_t))(v10 + 8);
    v25(v15, v9);
    v25(v13, v9);
  }
  else
  {

    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v15, v9);
    v22 = v38;
  }
  v26 = *(_QWORD *)(v22 + 272);
  v27 = *(os_unfair_lock_s **)(v26 + 56);
  v28 = v27 + 8;
  v29 = (_TtC14softposreaderd12RemoteReader **)&v27[4];
  os_unfair_lock_lock(v27 + 8);
  sub_100080B88(v29, 7);
  os_unfair_lock_unlock(v28);
  os_unfair_lock_lock(v28);
  sub_100080B88(v29, 3);
  os_unfair_lock_unlock(v28);
  v30 = 2;
  v31 = *(os_unfair_lock_s **)(v26 + 56);
  v32 = v31 + 8;
  v33 = (uint64_t)&v31[4];
  v34 = &byte_100199458;
  do
  {
    v35 = *v34++;
    os_unfair_lock_lock(v32);
    sub_10007FE5C(v33, v35);
    os_unfair_lock_unlock(v32);
    --v30;
  }
  while (v30);
}

void sub_1001013C0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint8_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint8_t *v22;
  uint8_t *v23;
  _QWORD v24[4];
  uint64_t v25;

  v1 = v0;
  v25 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v4 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001AD1E8 != -1)
    swift_once(&qword_1001AD1E8, sub_1000FAB88);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_100003A14(v5, (uint64_t)qword_1001B2928);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Reader.cancelRead()", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  v10 = (void *)v1[12];
  v11 = (uint64_t)objc_msgSend(v10, "operationCount");
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  v14 = os_log_type_enabled(v12, v13);
  if (v11 < 1)
  {
    if (v14)
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "No Reader Operation to cancel", v23, 2u);
      v22 = v23;
      goto LABEL_12;
    }
  }
  else
  {
    if (v14)
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Setting readCancelReason: ReadError(.cancelled)", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    v16 = sub_100005EF8(v1 + 35, v1[38]);
    type metadata accessor for ReadError(0);
    v24[3] = v17;
    v24[0] = sub_100024764(4013, 0, 0, 0);
    v18 = *v16;
    v19 = static DispatchWorkItemFlags.barrier.getter(v24[0]);
    __chkstk_darwin(v19);
    v24[-6] = v18;
    LOBYTE(v24[-5]) = 1;
    v24[-4] = v24;
    v24[-3] = 0;
    v24[-2] = 0;
    v24[-1] = 0;
    OS_dispatch_queue.sync<A>(flags:execute:)(&type metadata for (), v4, sub_100037FB0, &v24[-8], &type metadata for () + 1);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v25);
    sub_100005D3C(v24);
    sub_10010B8F8();
    objc_msgSend(v10, "cancelAllOperations");
    v12 = Logger.logObject.getter(objc_msgSend(v10, "waitUntilAllOperationsAreFinished"));
    v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v20, "All Reader Operations cancelled", v21, 2u);
      v22 = v21;
LABEL_12:
      swift_slowDealloc(v22, -1, -1);
    }
  }

}

uint64_t sub_10010171C(_TtC14softposreaderd12RemoteReader *a1, uint64_t a2, _TtC14softposreaderd12RemoteReader *a3, uint64_t a4, unint64_t a5, uint64_t a6, _TtC14softposreaderd12RemoteReader *a7, uint64_t a8, _TtC14softposreaderd12RemoteReader *a9, uint64_t a10, _TtC14softposreaderd12RemoteReader *a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _TtC14softposreaderd12RemoteReader *v38;
  _TtC14softposreaderd12RemoteReader *v39;
  uint8_t *v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v68;
  _TtC14softposreaderd12RemoteReader *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _TtC14softposreaderd12RemoteReader *v84;
  uint64_t v85;
  unint64_t v86;
  _TtC14softposreaderd12RemoteReader *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _TtC14softposreaderd12RemoteReader *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  _TtC14softposreaderd12RemoteReader *v96;
  uint64_t v97;
  unint64_t v98;
  _TtC14softposreaderd12RemoteReader *v99;
  _TtC14softposreaderd12RemoteReader *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  _TtC14softposreaderd12RemoteReader *v104;
  unint64_t v105;
  __int128 v106;
  uint64_t v107;
  _TtC14softposreaderd12RemoteReader *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t ObjectType;
  uint64_t AssociatedTypeWitness;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t AssociatedConformanceWitness;
  uint64_t v122;
  uint64_t v123;
  _TtC14softposreaderd12RemoteReader *v124;
  uint64_t (*v125)(uint64_t, uint64_t);
  uint64_t v126;
  _TtC14softposreaderd12RemoteReader *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  _TtC14softposreaderd12RemoteReader *v132;
  unint64_t v133;
  unint64_t v134;
  _TtC14softposreaderd12RemoteReader *v135;
  uint64_t v136;
  uint64_t v137;
  const char *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _TtC14softposreaderd12RemoteReader *v148;
  uint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t v152;
  _TtC14softposreaderd12RemoteReader *v153;
  _TtC14softposreaderd12RemoteReader *v154;
  const char *v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  SEL v165;
  id v166;
  id v167;
  id v168;
  id v169;
  id v170;
  id v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  _TtC14softposreaderd12RemoteReader *v178;
  uint64_t v179;
  _TtC14softposreaderd12RemoteReader *v180;
  uint64_t v181;
  _TtC14softposreaderd12RemoteReader *v182;
  uint64_t v183;
  _TtC14softposreaderd12RemoteReader *v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  char v190;
  uint64_t v191;
  _QWORD *v192;
  _QWORD *v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  SEL v198;
  id v199;
  id v200;
  id v201;
  id v202;
  id v203;
  id v204;
  char *v205;
  uint64_t v206;
  SEL v207;
  id v208;
  id v209;
  id v210;
  id v211;
  id v212;
  id v213;
  uint64_t v214;
  unint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t v219;
  _TtC14softposreaderd12RemoteReader *v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  void (*v225)(char *, uint64_t);
  _QWORD *v226;
  unint64_t v227;
  __int128 v228;
  uint64_t v229;
  _TtC14softposreaderd12RemoteReader *v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  _TtC14softposreaderd12RemoteReader *v235;
  uint64_t v236;
  unint64_t v237;
  _TtC14softposreaderd12RemoteReader *v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  _TtC14softposreaderd12RemoteReader *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  uint64_t v266;
  unint64_t v267;
  _TtC14softposreaderd12RemoteReader *v268;
  unint64_t v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  _TtC14softposreaderd12RemoteReader *v276;
  uint64_t v277;
  uint64_t v278;
  _TtC14softposreaderd12RemoteReader *v279;
  _TtC14softposreaderd12RemoteReader *v280;
  __int128 v281;

  v272 = a4;
  v273 = a5;
  v268 = a1;
  v16 = type metadata accessor for HPKE.Sender(0);
  v245 = *(_QWORD *)(v16 - 8);
  v246 = v16;
  __chkstk_darwin(v16);
  v259 = (char *)&v214 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v257 = type metadata accessor for HPKE.AEAD(0);
  v255 = *(_QWORD *)(v257 - 8);
  __chkstk_darwin(v257);
  v256 = (char *)&v214 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for HPKE.KDF(0);
  v251 = *(_QWORD *)(v19 - 8);
  v252 = v19;
  __chkstk_darwin(v19);
  v254 = (char *)&v214 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for HPKE.KEM(0);
  v247 = *(_QWORD *)(v21 - 8);
  v248 = v21;
  __chkstk_darwin(v21);
  v250 = (char *)&v214 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for HPKE.Ciphersuite(0);
  v261 = *(_QWORD *)(v23 - 8);
  v262 = v23;
  v24 = __chkstk_darwin(v23);
  v253 = (char *)&v214 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v260 = (char *)&v214 - v26;
  v27 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  v263 = *(_QWORD *)(v27 - 8);
  v264 = v27;
  v28 = __chkstk_darwin(v27);
  v249 = (char *)&v214 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v265 = (char *)&v214 - v30;
  v271 = type metadata accessor for String.Encoding(0);
  v269 = *(_QWORD *)(v271 - 8);
  __chkstk_darwin(v271);
  v270 = (char *)&v214 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001AD1E8 != -1)
    swift_once(&qword_1001AD1E8, sub_1000FAB88);
  v32 = type metadata accessor for Logger(0);
  v258 = sub_100003A14(v32, (uint64_t)qword_1001B2928);
  v33 = Logger.logObject.getter(v258);
  v34 = static os_log_type_t.info.getter();
  if (os_log_type_enabled((os_log_t)v33, v34))
  {
    v35 = a2;
    v36 = a6;
    v37 = a8;
    v38 = a3;
    v39 = a7;
    v40 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v40 = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v33, v34, "getStoreAndForwardResultsBlob(trxHashes:sessionId:activationId:mid:partnerId:virtualTerminalId:)", v40, 2u);
    v41 = v40;
    a7 = v39;
    a3 = v38;
    a8 = v37;
    a6 = v36;
    a2 = v35;
    swift_slowDealloc(v41, -1, -1);
  }

  v43 = ((unint64_t)a3 >> 56) & 0xF;
  if (((unint64_t)a3 & 0x2000000000000000) == 0)
    v43 = a2 & 0xFFFFFFFFFFFFLL;
  if (!v43)
    goto LABEL_29;
  v44 = HIBYTE(v273) & 0xF;
  if ((v273 & 0x2000000000000000) == 0)
    v44 = v272 & 0xFFFFFFFFFFFFLL;
  if (!v44)
    goto LABEL_29;
  v45 = ((unint64_t)a7 >> 56) & 0xF;
  if (((unint64_t)a7 & 0x2000000000000000) == 0)
    v45 = a6 & 0xFFFFFFFFFFFFLL;
  if (!v45)
    goto LABEL_29;
  v46 = ((unint64_t)a9 >> 56) & 0xF;
  if (((unint64_t)a9 & 0x2000000000000000) == 0)
    v46 = a8 & 0xFFFFFFFFFFFFLL;
  if (!v46)
    goto LABEL_29;
  v47 = ((unint64_t)a11 >> 56) & 0xF;
  v243 = a10;
  v244 = a11;
  if (((unint64_t)a11 & 0x2000000000000000) == 0)
    v47 = a10 & 0xFFFFFFFFFFFFLL;
  if (!v47)
    goto LABEL_29;
  v33 = (uint64_t)v270;
  static String.Encoding.utf8.getter(v42);
  v48 = String.data(using:allowLossyConversion:)(v33, 0, a2, a3);
  v241 = a8;
  v242 = v48;
  v50 = v49;
  v51 = *(uint64_t (**)(uint64_t, uint64_t))(v269 + 8);
  v52 = v51(v33, v271);
  v269 = v50;
  if (v50 >> 60 == 15)
    goto LABEL_29;
  v238 = a9;
  v33 = (uint64_t)v270;
  static String.Encoding.utf8.getter(v52);
  v240 = String.data(using:allowLossyConversion:)(v33, 0, v272, v273);
  v54 = v53;
  v55 = v51;
  v56 = v271;
  v57 = v55(v33, v271);
  v239 = v54;
  if (v54 >> 60 == 15)
  {
LABEL_28:
    sub_10000A9B0(v242, v269);
LABEL_29:
    v66 = sub_100024764(4000, 0xD000000000000028, (void *)0x8000000100170170, 0);
    swift_willThrow(v66);
    return v33;
  }
  static String.Encoding.utf8.getter(v57);
  v235 = a7;
  v236 = String.data(using:allowLossyConversion:)(v33, 0, a6, a7);
  v59 = v58;
  v60 = v55(v33, v56);
  v237 = v59;
  if (v59 >> 60 == 15)
  {
LABEL_27:
    sub_10000A9B0(v240, v239);
    goto LABEL_28;
  }
  static String.Encoding.utf8.getter(v60);
  v234 = String.data(using:allowLossyConversion:)(v33, 0, v241, v238);
  v62 = v61;
  v63 = v55(v33, v56);
  if (v62 >> 60 == 15)
  {
LABEL_26:
    sub_10000A9B0(v236, v237);
    goto LABEL_27;
  }
  static String.Encoding.utf8.getter(v63);
  v233 = String.data(using:allowLossyConversion:)(v33, 0, v243, v244);
  v65 = v64;
  v55(v33, v56);
  if (v65 >> 60 == 15)
  {
    sub_10000A9B0(v234, v62);
    goto LABEL_26;
  }
  v229 = a2;
  v228 = xmmword_10015DF40;
  v281 = xmmword_10015DF40;
  v68 = v267;
  v69 = sub_1000FA0BC((uint64_t)v268);
  if (v68)
  {
    sub_10000A9B0(v242, v269);
    sub_10000A9B0(v240, v239);
    sub_10000A9B0(v236, v237);
    sub_10000A9B0(v234, v62);
    sub_10000A9B0(v233, v65);
  }
  else
  {
    v70 = (uint64_t)v69;
    v225 = (void (*)(char *, uint64_t))v55;
    v71 = type metadata accessor for TLV();
    v218 = (uint64_t *)TLVTag.asn1Sequence.unsafeMutableAddressor();
    v72 = *v218;
    v221 = v71;
    v73 = (uint64_t)v268;
    v74 = TLV.__allocating_init(tag:children:)(v72, v70);
    v226 = v74;
    v217 = a6;
    if ((unint64_t)v73 >> 62)
    {
      if (v73 < 0)
        v206 = v73;
      else
        v206 = v73 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v75 = _CocoaArrayWrapper.endIndex.getter(v206);
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v73, v207, v208, v209, v210, v211, v212, v213);
    }
    else
    {
      v75 = *(_QWORD *)((v73 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v77 = v270;
    v76 = v271;
    v227 = v75;
    v232 = v62;
    v267 = v65;
    static String.Encoding.utf8.getter(v74);
    v78 = String.data(using:allowLossyConversion:)(v77, 0, 50, 0xE100000000000000);
    v80 = v79;
    v225(v77, v76);
    v81 = v242;
    if (v80 >> 60 == 15)
    {
      __break(1u);
      JUMPOUT(0x1001030D4);
    }
    v275 = v78;
    v276 = (_TtC14softposreaderd12RemoteReader *)v80;
    sub_1000306C8(v78, v80);
    v82 = v269;
    sub_1000306C8(v81, v269);
    sub_10012465C(v81, v82);
    sub_10000A9B0(v81, v82);
    sub_10000A9B0(v78, v80);
    v83 = v275;
    v84 = v276;
    v279 = (_TtC14softposreaderd12RemoteReader *)v275;
    v280 = v276;
    sub_100005D9C(v275, (unint64_t)v276);
    v86 = v239;
    v85 = v240;
    sub_1000306C8(v240, v239);
    sub_10012465C(v85, v86);
    sub_10000A9B0(v85, v86);
    sub_100005DE0(v83, (unint64_t)v84);
    v87 = v279;
    v88 = (unint64_t)v280;
    v275 = (unint64_t)v279;
    v276 = v280;
    sub_100005D9C((uint64_t)v279, (unint64_t)v280);
    v90 = v236;
    v89 = v237;
    sub_1000306C8(v236, v237);
    sub_10012465C(v90, v89);
    sub_10000A9B0(v90, v89);
    sub_100005DE0((uint64_t)v87, v88);
    v91 = v275;
    v92 = v276;
    v279 = (_TtC14softposreaderd12RemoteReader *)v275;
    v280 = v276;
    sub_100005D9C(v275, (unint64_t)v276);
    v93 = v234;
    v94 = v232;
    sub_1000306C8(v234, v232);
    sub_10012465C(v93, v94);
    sub_10000A9B0(v93, v94);
    sub_100005DE0(v91, (unint64_t)v92);
    v96 = v279;
    v95 = (unint64_t)v280;
    v275 = (unint64_t)v279;
    v276 = v280;
    sub_100005D9C((uint64_t)v279, (unint64_t)v280);
    v97 = v233;
    v98 = v267;
    sub_1000306C8(v233, v267);
    sub_10012465C(v97, v98);
    sub_10000A9B0(v97, v98);
    sub_100005DE0((uint64_t)v96, v95);
    v99 = (_TtC14softposreaderd12RemoteReader *)v275;
    v100 = v276;
    v279 = (_TtC14softposreaderd12RemoteReader *)bswap64(v227);
    v101 = sub_1000FA728((uint64_t)&v279, (uint64_t)&v280);
    v103 = v102;
    v279 = v99;
    v280 = v100;
    sub_100005D9C((uint64_t)v99, (unint64_t)v100);
    sub_10012465C(v101, v103);
    sub_100005DE0(v101, v103);
    sub_100005DE0((uint64_t)v99, (unint64_t)v100);
    v104 = v279;
    v105 = (unint64_t)v280;
    v106 = v281;
    v275 = (unint64_t)v279;
    v276 = v280;
    sub_100005D9C(v281, *((unint64_t *)&v281 + 1));
    sub_100005D9C((uint64_t)v104, v105);
    sub_10012465C(v106, *((uint64_t *)&v106 + 1));
    sub_100005DE0(v106, *((unint64_t *)&v106 + 1));
    sub_100005DE0((uint64_t)v104, v105);
    v107 = v275;
    v108 = v276;
    Data.sha256Digest.getter(v275, (uint64_t)v276);
    v110 = v109;
    v231 = v111;
    sub_100005DE0(v107, (unint64_t)v108);
    sub_100005EF8((_QWORD *)(v266 + 152), *(_QWORD *)(v266 + 176));
    v112 = sub_10011C0CC(202, 0xD000000000000010, 0x800000010016C720, 4);
    v114 = v113;
    ObjectType = swift_getObjectType(v112);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v114, ObjectType, &unk_1001857B4);
    v268 = (_TtC14softposreaderd12RemoteReader *)&v214;
    v219 = *(_QWORD *)(AssociatedTypeWitness - 8);
    __chkstk_darwin(AssociatedTypeWitness);
    v224 = v110;
    v220 = (_TtC14softposreaderd12RemoteReader *)ObjectType;
    v230 = (_TtC14softposreaderd12RemoteReader *)v114;
    v222 = sub_10011367C((uint64_t)&v214 - v117, v110, v231, 1, ObjectType, v114);
    v223 = v118;
    v119 = v222;
    v120 = v118;
    v216 = v112;
    v277 = AssociatedTypeWitness;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v230, v220, AssociatedTypeWitness, &unk_1001857B4, &unk_1001857BC);
    v220 = 0;
    v122 = v119;
    v123 = AssociatedConformanceWitness;
    v278 = AssociatedConformanceWitness;
    sub_1000778C8(&v275);
    (*(void (**)(void))(v219 + 32))();
    v219 = sub_100003A2C((uint64_t *)&unk_1001AE490);
    v124 = (_TtC14softposreaderd12RemoteReader *)swift_allocObject(v219, 40, 7);
    *(_OWORD *)&v124->instance[8] = xmmword_10015E4E0;
    v125 = *(uint64_t (**)(uint64_t, uint64_t))(v123 + 48);
    sub_100005D9C(v122, v120);
    v126 = v123;
    v127 = v220;
    v128 = v125(AssociatedTypeWitness, v126);
    TLV.__allocating_init(dataRepresentation:)(v128, v129);
    v268 = v127;
    if (v127)
    {
      sub_100005DE0(v122, v120);
      *(_QWORD *)&v124->instance[8] = 0;
      swift_unknownObjectRelease(v216);
      swift_release(v124);
      sub_100005D3C(&v275);
      v33 = 0;
      v131 = v267;
      v132 = v268;
      v133 = v239;
      v134 = v231;
      v135 = v127;
      v136 = v224;
    }
    else
    {
      *(_QWORD *)&v124->instance[24] = v130;
      v279 = v124;
      specialized Array._endMutation()(v130);
      v145 = v278;
      v274 = (uint64_t)v279;
      v146 = v277;
      sub_100005EF8(&v275, v277);
      v147 = (*(uint64_t (**)(uint64_t, uint64_t))(v145 + 56))(v146, v145);
      v148 = (_TtC14softposreaderd12RemoteReader *)v147;
      v149 = *(_QWORD *)(v147 + 16);
      if (!v149)
      {
LABEL_49:
        swift_unknownObjectRelease(v216);
        swift_bridgeObjectRelease(v148, v165, v166, v167, v168, v169, v170, v171);
        sub_100005D3C(&v275);
        v172 = v218;
        v173 = *v218;
        v174 = swift_allocObject(v219, 112, 7);
        *(_OWORD *)(v174 + 16) = xmmword_1001620C0;
        v175 = (uint64_t *)TLVTag.asn1IA5String.unsafeMutableAddressor();
        *(_QWORD *)(v174 + 32) = TLV.__allocating_init(tag:string:)(*v175, 50, (_TtC14softposreaderd12RemoteReader *)0xE100000000000000);
        v176 = *v175;
        swift_bridgeObjectRetain();
        v230 = a3;
        *(_QWORD *)(v174 + 40) = TLV.__allocating_init(tag:string:)(v176, v229, a3);
        v177 = *v175;
        v178 = (_TtC14softposreaderd12RemoteReader *)v273;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v174 + 48) = TLV.__allocating_init(tag:string:)(v177, v272, v178);
        v179 = *v175;
        v180 = v235;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v174 + 56) = TLV.__allocating_init(tag:string:)(v179, v217, v180);
        v181 = *v175;
        v182 = v238;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v174 + 64) = TLV.__allocating_init(tag:string:)(v181, v241, v182);
        v272 = (uint64_t)v175;
        v183 = *v175;
        v184 = v244;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v174 + 72) = TLV.__allocating_init(tag:string:)(v183, v243, v184);
        v275 = v227;
        v185 = sub_100006140();
        sub_10001CA44();
        v186 = default argument 0 of IteratorProtocol<>.nextInteger(tag:)();
        *(_QWORD *)(v174 + 80) = TLV.__allocating_init<A>(tag:integer:)(v186, (uint64_t)&v275, (uint64_t)&type metadata for Int, v185);
        *(_QWORD *)(v174 + 88) = v226;
        swift_retain();
        variable initialization expression of PrimaryAccountWatcher.isSandboxAccount();
        v187 = BitString.init(data:unusedBits:)(v222);
        v189 = v188;
        LOBYTE(v175) = v190;
        v191 = default argument 0 of IteratorProtocol<>.nextBitString(tag:)();
        *(_QWORD *)(v174 + 96) = TLV.__allocating_init(tag:bitString:)(v191, v187, v189, (char)v175);
        v192 = TLV.__allocating_init(tag:children:)(*v172, v274);
        *(_QWORD *)(v174 + 104) = v192;
        v275 = v174;
        specialized Array._endMutation()(v192);
        v193 = TLV.__allocating_init(tag:children:)(v173, v275);
        v194 = (*(uint64_t (**)(void))(*v193 + 168))();
        v196 = v195;
        v197 = sub_100003A2C(&qword_1001B2B30);
        *(_OWORD *)(swift_allocObject(v197, 64, 7) + 16) = xmmword_10015A5F0;
        v275 = 0;
        v276 = (_TtC14softposreaderd12RemoteReader *)0xE000000000000000;
        _StringGuts.grow(_:)(21);
        swift_bridgeObjectRelease(v276, v198, v199, v200, v201, v202, v203, v204);
        v275 = 0x6F6C796150666173;
        v276 = (_TtC14softposreaderd12RemoteReader *)0xEF5B617461446461;
        v205 = (char *)&loc_100102624 + dword_1001030DC[v196 >> 62];
        v273 = v194;
        __asm { BR              X11 }
      }
      v150 = (unint64_t *)(v147 + 40);
      while (1)
      {
        v152 = *(v150 - 1);
        v151 = *v150;
        sub_100005D9C(v152, *v150);
        sub_100005D9C(v152, v151);
        v153 = v268;
        TLV.__allocating_init(dataRepresentation:)(v152, v151);
        v230 = v154;
        v268 = v153;
        if (v153)
          break;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v154);
        v162 = *(_QWORD *)((v274 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v163 = *(_QWORD *)((v274 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v162 >= v163 >> 1)
        {
          v215 = *(_QWORD *)((v274 & 0xFFFFFFFFFFFFFF8) + 0x10);
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v163 > 1, v162 + 1, 1);
          v162 = v215;
        }
        v150 += 2;
        v164 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v162, v230);
        specialized Array._endMutation()(v164);
        sub_100005DE0(v152, v151);
        if (!--v149)
          goto LABEL_49;
      }
      swift_bridgeObjectRelease(v148, v155, v156, v157, v158, v159, v160, v161);
      sub_100005DE0(v152, v151);
      swift_unknownObjectRelease(v216);
      sub_100005DE0(v222, v223);
      sub_100005D3C(&v275);
      v33 = 1;
      v131 = v267;
      v132 = v268;
      v133 = v239;
      v134 = v231;
      v136 = v224;
      v135 = v220;
    }
    swift_errorRetain();
    sub_100024764(4048, 0xD00000000000003ELL, (void *)0x80000001001701A0, (uint64_t)v132);
    v137 = swift_errorRelease();
    swift_willThrow(v137);
    sub_10000A9B0(v242, v269);
    sub_10000A9B0(v240, v133);
    sub_10000A9B0(v236, v237);
    sub_10000A9B0(v234, v232);
    swift_release(v226);
    sub_100005DE0(v136, v134);
    sub_10000A9B0(v233, v131);
    swift_errorRelease();
    if (!v135)
      sub_100005DE0(v222, v223);
    if ((_DWORD)v33)
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v274, v138, v139, v140, v141, v142, v143, v144);
  }
  sub_100005DE0(v281, *((unint64_t *)&v281 + 1));
  return v33;
}

void sub_1001030FC(id *a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;

  v2 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v2);
  v3 = objc_msgSend(*a1, "transactionDataDigest");
  static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v5 = v4;

  __asm { BR              X10 }
}

uint64_t sub_1001031B0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  _TtC14softposreaderd12RemoteReader *v10;
  _TtC14softposreaderd12RemoteReader *v11;
  SEL v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  _TtC14softposreaderd12RemoteReader *v22;
  _TtC14softposreaderd12RemoteReader *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  unint64_t v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  uint64_t v43;
  _TtC14softposreaderd12RemoteReader *v44;
  _TtC14softposreaderd12RemoteReader *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  _QWORD *v59;

  *(_QWORD *)(v7 - 104) = v1;
  sub_100005DE0(v3, v4);
  if ((v4 & 0xFF000000000000) == 0)
  {
    v34 = (void *)0x8000000100170280;
    v35 = 0xD00000000000002CLL;
LABEL_8:
    v36 = sub_100024764(4000, v35, v34, 0);
    result = swift_willThrow(v36);
    **(_QWORD **)(v7 - 88) = v36;
    return result;
  }
  v8 = objc_msgSend(v2, "transactionId");
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  swift_bridgeObjectRelease(v11, v12, v13, v14, v15, v16, v17, v18);
  v19 = ((unint64_t)v11 >> 56) & 0xF;
  if (((unint64_t)v11 & 0x2000000000000000) == 0)
    v19 = v9 & 0xFFFFFFFFFFFFLL;
  if (!v19)
    goto LABEL_7;
  v20 = objc_msgSend(v2, "transactionId");
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  static String.Encoding.utf8.getter(v24);
  v25 = String.data(using:allowLossyConversion:)(v6, 0, v21, v23);
  v27 = (unint64_t)v26;
  swift_bridgeObjectRelease(v23, v26, v28, v29, v30, v31, v32, v33);
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v6, v5);
  if (v27 >> 60 == 15)
  {
LABEL_7:
    v35 = 0xD00000000000002DLL;
    v34 = (void *)0x8000000100170250;
    goto LABEL_8;
  }
  v38 = sub_100003A2C((uint64_t *)&unk_1001AE490);
  v39 = swift_allocObject(v38, 48, 7);
  *(_OWORD *)(v39 + 16) = xmmword_10015DF20;
  type metadata accessor for TLV();
  v40 = *(_QWORD *)TLVTag.asn1IA5String.unsafeMutableAddressor();
  v41 = objc_msgSend(v2, "transactionId");
  *(_QWORD *)(v7 - 88) = v25;
  v42 = v41;
  v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
  v45 = v44;

  *(_QWORD *)(v39 + 32) = TLV.__allocating_init(tag:string:)(v40, v43, v45);
  v46 = objc_msgSend(v2, "transactionDataDigest");
  v47 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v46);
  v49 = v48;

  v50 = default argument 0 of IteratorProtocol<>.nextOctetString(tag:)();
  v51 = TLV.__allocating_init(tag:value:)(v50, v47, v49);
  *(_QWORD *)(v39 + 40) = v51;
  *(_QWORD *)(v7 - 72) = v39;
  specialized Array._endMutation()(v51);
  v52 = *(_QWORD *)(v7 - 72);
  v53 = *(_QWORD *)(v7 - 88);
  Data.append(_:)(v53, v27);
  v54 = objc_msgSend(v2, "transactionDataDigest");
  v55 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v54);
  v57 = v56;

  Data.append(_:)(v55, v57);
  sub_100005DE0(v55, v57);
  v58 = (uint64_t *)TLVTag.asn1Sequence.unsafeMutableAddressor();
  v59 = TLV.__allocating_init(tag:children:)(*v58, v52);
  result = sub_10000A9B0(v53, v27);
  **(_QWORD **)(v7 - 104) = v59;
  return result;
}

void sub_1001034C0(uint64_t a1, unint64_t a2, uint64_t a3, _TtC14softposreaderd12RemoteReader *a4, uint64_t a5, _TtC14softposreaderd12RemoteReader *a6, unint64_t a7)
{
  _QWORD *v7;
  _TtC14softposreaderd12RemoteReader *v8;
  _TtC14softposreaderd12RemoteReader *v9;
  _QWORD *v10;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  _TtC14softposreaderd12RemoteReader *v21;
  _TtC14softposreaderd12RemoteReader *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint8_t *v27;
  uint8_t *v28;
  _QWORD *v29;
  SEL v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  Swift::String v37;
  _TtC14softposreaderd12RemoteReader *object;
  SEL v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  Swift::String v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  unint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  void (*v62)(uint64_t, uint64_t);
  Swift::String v63;
  void (*v64)(uint64_t, uint64_t);
  const char *v65;
  unint64_t v66;
  unint64_t v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t inited;
  uint64_t v83;
  uint64_t v84;
  _TtC14softposreaderd12RemoteReader *v85;
  SEL v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  _TtC14softposreaderd12RemoteReader *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  id v102;
  void *v103;
  _TtC14softposreaderd12RemoteReader *v104;
  _TtC14softposreaderd12RemoteReader *v105;
  Swift::String v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  unint64_t v117;
  id v118;
  id v119;
  id v120;
  id v121;
  id v122;
  id v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  _TtC14softposreaderd12RemoteReader *v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  _TtC14softposreaderd12RemoteReader *v136;
  _TtC14softposreaderd12RemoteReader *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  NSObject *v141;
  uint64_t v142;
  id v143;
  void *v144;
  _TtC14softposreaderd12RemoteReader *v145;
  _TtC14softposreaderd12RemoteReader *v146;
  Swift::String v147;
  id v148;
  id v149;
  id v150;
  id v151;
  id v152;
  id v153;
  SEL v154;
  id v155;
  id v156;
  id v157;
  id v158;
  id v159;
  id v160;
  _TtC14softposreaderd12RemoteReader *v161;
  Swift::String v162;
  SEL v163;
  id v164;
  id v165;
  id v166;
  id v167;
  id v168;
  id v169;
  _TtC14softposreaderd12RemoteReader *v170;
  Swift::String v171;
  SEL v172;
  id v173;
  id v174;
  id v175;
  id v176;
  id v177;
  id v178;
  uint64_t v179;
  unint64_t v180;
  Swift::String v181;
  SEL v182;
  id v183;
  id v184;
  id v185;
  id v186;
  id v187;
  id v188;
  uint64_t v189;
  unint64_t v190;
  Swift::String v191;
  SEL v192;
  id v193;
  id v194;
  id v195;
  id v196;
  id v197;
  id v198;
  uint64_t v199;
  unint64_t v200;
  Swift::String v201;
  SEL v202;
  id v203;
  id v204;
  id v205;
  id v206;
  id v207;
  id v208;
  uint64_t v209;
  unint64_t v210;
  Swift::String v211;
  SEL v212;
  id v213;
  id v214;
  id v215;
  id v216;
  id v217;
  id v218;
  uint64_t v219;
  unint64_t v220;
  Swift::String v221;
  SEL v222;
  id v223;
  id v224;
  id v225;
  id v226;
  id v227;
  id v228;
  uint64_t v229;
  unint64_t v230;
  Swift::String v231;
  SEL v232;
  id v233;
  id v234;
  id v235;
  id v236;
  id v237;
  id v238;
  os_log_t v239;
  _TtC14softposreaderd12RemoteReader *v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  uint64_t v255;
  SEL v256;
  id v257;
  id v258;
  id v259;
  id v260;
  id v261;
  id v262;
  SEL v263;
  id v264;
  id v265;
  id v266;
  id v267;
  id v268;
  id v269;
  uint64_t v270;
  _TtC14softposreaderd12RemoteReader *v271;
  os_log_t v272;
  uint64_t v273;
  uint64_t v274;
  _QWORD *v275;
  _TtC14softposreaderd12RemoteReader *v276;
  _TtC14softposreaderd12RemoteReader *v277;
  uint64_t v278;
  _TtC14softposreaderd12RemoteReader *v279;
  void (*v280)(uint64_t, unint64_t);
  _TtC14softposreaderd12RemoteReader *v281;
  uint64_t v282;
  _TtC14softposreaderd12RemoteReader *v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  _TtC14softposreaderd12RemoteReader *v287;
  uint64_t v288;
  uint64_t v289;
  char *v290;
  unint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  char v297[8];
  uint64_t v298;
  uint64_t v299;
  char v300[8];
  _QWORD v301[3];
  char v302[8];
  _TtC14softposreaderd12RemoteReader *v303;
  _TtC14softposreaderd12RemoteReader *v304;
  char v305[8];
  _TtC14softposreaderd12RemoteReader *v306;
  _TtC14softposreaderd12RemoteReader *v307;

  v9 = v8;
  v10 = v7;
  v291 = a7;
  v295 = a5;
  v296 = a3;
  v15 = type metadata accessor for Logger(0);
  v289 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v290 = (char *)&v270 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v294 = type metadata accessor for String.Encoding(0);
  v292 = *(_QWORD *)(v294 - 8);
  __chkstk_darwin(v294);
  v293 = (uint64_t)&v270 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001AD1E8 != -1)
    swift_once(&qword_1001AD1E8, sub_1000FAB88);
  v288 = sub_100003A14(v15, (uint64_t)qword_1001B2928);
  v18 = Logger.logObject.getter(v288);
  v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    v287 = v8;
    v21 = a4;
    v22 = a6;
    v23 = v15;
    v24 = a1;
    v25 = v10;
    v26 = a2;
    v27 = v20;
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "validateStoreAndForwardResultsToken(_:sessionId:activationId:trxCount:)", v20, 2u);
    v28 = v27;
    a2 = v26;
    v10 = v25;
    a1 = v24;
    v15 = v23;
    a6 = v22;
    a4 = v21;
    v9 = v287;
    swift_slowDealloc(v28, -1, -1);
  }

  v29 = sub_100005EF8(v10 + 13, v10[16]);
  OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_100070E44, *v29, &type metadata for () + 1);
  if (v9)
  {
    v306 = 0;
    v307 = (_TtC14softposreaderd12RemoteReader *)0xE000000000000000;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease(v307, v30, v31, v32, v33, v34, v35, v36);
    v306 = (_TtC14softposreaderd12RemoteReader *)0xD000000000000020;
    v307 = (_TtC14softposreaderd12RemoteReader *)0x80000001001700D0;
    swift_getErrorValue(v9, v302, v301);
    v37._countAndFlagsBits = Error.localizedDescription.getter(v301[1], v301[2]);
    object = (_TtC14softposreaderd12RemoteReader *)v37._object;
    String.append(_:)(v37);
    swift_bridgeObjectRelease(object, v39, v40, v41, v42, v43, v44, v45);
    v46 = sub_100024764(4055, (uint64_t)v306, v307, 0);
    swift_willThrow(v46);
    swift_errorRelease();
    return;
  }
  v47 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v47 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v47)
    goto LABEL_20;
  v48 = ((unint64_t)a4 >> 56) & 0xF;
  if (((unint64_t)a4 & 0x2000000000000000) == 0)
    v48 = v296 & 0xFFFFFFFFFFFFLL;
  if (!v48)
    goto LABEL_20;
  v49 = ((unint64_t)a6 >> 56) & 0xF;
  if (((unint64_t)a6 & 0x2000000000000000) == 0)
    v49 = v295 & 0xFFFFFFFFFFFFLL;
  if (!v49)
  {
LABEL_20:
    v75 = 0xD00000000000001CLL;
    v76 = "An input parameter was empty";
    goto LABEL_21;
  }
  v287 = a6;
  v282 = a2;
  v283 = a4;
  v50 = String.uppercased()();
  v51 = v293;
  static String.Encoding.utf8.getter(v50._countAndFlagsBits);
  v52 = String.data(using:allowLossyConversion:)(v51, 0, v50._countAndFlagsBits, v50._object);
  v54 = (unint64_t)v53;
  v55 = v51;
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v50._object, v53, v56, v57, v58, v59, v60, v61);
  v62 = *(void (**)(uint64_t, uint64_t))(v292 + 8);
  v62(v55, v294);
  if (v54 >> 60 == 15)
  {
LABEL_19:
    v75 = 0xD000000000000025;
    v76 = "sessionId or activationId is not utf8";
LABEL_21:
    v77 = sub_100024764(4000, v75, (void *)((unint64_t)(v76 - 32) | 0x8000000000000000), 0);
    swift_willThrow(v77);
LABEL_22:
    v78 = v10 + 29;
    v80 = v10[32];
    v79 = v10[33];
    sub_100005EF8(v78, v80);
    v81 = sub_100003A2C(&qword_1001ADA18);
    inited = swift_initStackObject(v81, v305);
    *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
    *(_QWORD *)(inited + 32) = 0xD000000000000010;
    *(_QWORD *)(inited + 40) = 0x800000010016B450;
    swift_getErrorValue(v77, v300, v297);
    v83 = Error.localizedDescription.getter(v298, v299);
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 80) = &protocol witness table for String;
    *(_QWORD *)(inited + 48) = v83;
    *(_QWORD *)(inited + 56) = v84;
    v85 = (_TtC14softposreaderd12RemoteReader *)sub_1000E84EC(inited);
    sub_100115684(40, (uint64_t)v85, v80, v79);
    swift_bridgeObjectRelease(v85, v86, v87, v88, v89, v90, v91, v92);
    swift_willThrow(v93);
    return;
  }
  v285 = v54;
  v286 = v52;
  v63 = String.uppercased()();
  v64 = v62;
  static String.Encoding.utf8.getter(v63._countAndFlagsBits);
  v284 = String.data(using:allowLossyConversion:)(v55, 0, v63._countAndFlagsBits, v63._object);
  v66 = (unint64_t)v65;
  v67 = v294;
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v63._object, v65, v68, v69, v70, v71, v72, v73);
  v280 = (void (*)(uint64_t, unint64_t))v64;
  v74 = ((uint64_t (*)(uint64_t, unint64_t))v64)(v55, v67);
  v292 = v66;
  if (v66 >> 60 == 15)
  {
    sub_10000A9B0(v286, v285);
    goto LABEL_19;
  }
  v94 = v285;
  if ((v291 & 0x8000000000000000) != 0)
  {
    v77 = sub_100024764(4000, 0xD00000000000001BLL, (void *)0x8000000100170130, 0);
    swift_willThrow(v77);
    sub_10000A9B0(v286, v94);
    sub_10000A9B0(v284, v292);
    goto LABEL_22;
  }
  v95 = v293;
  static String.Encoding.utf8.getter(v74);
  v96 = String.data(using:allowLossyConversion:)(v95, 0, 0x4E454B4F54464153, 0xE800000000000000);
  v97 = v67;
  v98 = (_TtC14softposreaderd12RemoteReader *)v96;
  v100 = v99;
  v280(v95, v97);
  if (v100 >> 60 == 15)
  {
    __break(1u);
    goto LABEL_34;
  }
  v279 = v98;
  v281 = (_TtC14softposreaderd12RemoteReader *)v100;
  v101 = v10[54];
  v275 = v10 + 51;
  v102 = objc_msgSend(*(id *)(*sub_100005EF8(v10 + 51, v101) + 16), "serialNumber");
  if (!v102)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v103 = v102;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v102);
  v105 = v104;

  v106 = String.uppercased()();
  swift_bridgeObjectRelease(v105, (SEL)v106._object, v107, v108, v109, v110, v111, v112);
  v113 = v293;
  static String.Encoding.utf8.getter(v114);
  v115 = String.data(using:allowLossyConversion:)(v113, 0, v106._countAndFlagsBits, v106._object);
  v117 = (unint64_t)v116;
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v106._object, v116, v118, v119, v120, v121, v122, v123);
  v280(v113, v294);
  if (v117 >> 60 == 15)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v306 = (_TtC14softposreaderd12RemoteReader *)bswap64(v291);
  v293 = sub_1000FA728((uint64_t)&v306, (uint64_t)&v307);
  v294 = v124;
  v303 = v279;
  v304 = v281;
  sub_1000306C8((uint64_t)v279, (unint64_t)v281);
  sub_1000306C8(v115, v117);
  sub_10012465C(v115, v117);
  sub_10000A9B0(v115, v117);
  v280 = (void (*)(uint64_t, unint64_t))v117;
  v277 = v303;
  v278 = v115;
  v125 = (unint64_t)v304;
  v306 = v303;
  v307 = v304;
  sub_100005D9C((uint64_t)v303, (unint64_t)v304);
  v126 = v286;
  v127 = v285;
  sub_1000306C8(v286, v285);
  sub_10012465C(v126, v127);
  sub_10000A9B0(v126, v127);
  sub_100005DE0((uint64_t)v277, v125);
  v128 = v307;
  v277 = v306;
  v303 = v306;
  v304 = v307;
  sub_100005D9C((uint64_t)v306, (unint64_t)v307);
  v129 = v284;
  v130 = v292;
  sub_1000306C8(v284, v292);
  sub_10012465C(v129, v130);
  sub_10000A9B0(v129, v130);
  sub_100005DE0((uint64_t)v277, (unint64_t)v128);
  v131 = (unint64_t)v304;
  v277 = v303;
  v306 = v303;
  v307 = v304;
  sub_100005D9C((uint64_t)v303, (unint64_t)v304);
  v132 = v293;
  v133 = v294;
  sub_100005D9C(v293, v294);
  sub_10012465C(v132, v133);
  sub_100005DE0(v132, v133);
  v134 = v285;
  sub_100005DE0((uint64_t)v277, v131);
  v276 = v306;
  v277 = v307;
  (*(void (**)(char *, uint64_t, uint64_t))(v289 + 16))(v290, v288, v15);
  v135 = (uint64_t)v279;
  sub_1000306C8((uint64_t)v279, (unint64_t)v281);
  sub_1000306C8(v278, (unint64_t)v280);
  sub_1000306C8(v286, v134);
  sub_1000306C8(v284, v292);
  sub_100005D9C(v293, v294);
  swift_retain();
  v136 = v283;
  swift_bridgeObjectRetain();
  v137 = v287;
  swift_bridgeObjectRetain();
  sub_100005D9C((uint64_t)v276, (unint64_t)v277);
  v138 = v135;
  v139 = v134;
  sub_1000306C8(v138, (unint64_t)v281);
  sub_1000306C8(v278, (unint64_t)v280);
  sub_1000306C8(v286, v134);
  sub_1000306C8(v284, v292);
  sub_100005D9C(v293, v294);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v140 = sub_100005D9C((uint64_t)v276, (unint64_t)v277);
  v141 = Logger.logObject.getter(v140);
  LODWORD(v288) = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v141, (os_log_type_t)v288))
  {
    swift_bridgeObjectRelease_n(v137, 2);
    swift_bridgeObjectRelease_n(v136, 2);
    swift_release_n(v10, 2);
    v241 = (uint64_t)v279;
    v242 = (unint64_t)v281;
    sub_10000A9B0((uint64_t)v279, (unint64_t)v281);
    sub_10000A9B0(v241, v242);
    v243 = v278;
    v244 = (unint64_t)v280;
    sub_10000A9B0(v278, (unint64_t)v280);
    sub_10000A9B0(v243, v244);
    v245 = v286;
    sub_10000A9B0(v286, v139);
    sub_10000A9B0(v245, v139);
    v246 = v284;
    v247 = v292;
    sub_10000A9B0(v284, v292);
    sub_10000A9B0(v246, v247);
    v248 = v293;
    v249 = v294;
    sub_100005DE0(v293, v294);
    sub_100005DE0(v248, v249);
    v250 = (uint64_t)v276;
    v230 = (unint64_t)v277;
    sub_100005DE0((uint64_t)v276, (unint64_t)v277);
    sub_100005DE0(v250, v230);

    (*(void (**)(char *, uint64_t))(v289 + 8))(v290, v15);
    v229 = v250;
    goto LABEL_32;
  }
  v272 = v141;
  v273 = v15;
  v274 = a1;
  v142 = swift_slowAlloc(102, -1);
  v271 = (_TtC14softposreaderd12RemoteReader *)swift_slowAlloc(288, -1);
  v306 = v271;
  *(_DWORD *)v142 = 136317442;
  v143 = objc_msgSend(*(id *)(*sub_100005EF8(v275, v10[54]) + 16), "serialNumber");
  if (v143)
  {
    v144 = v143;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v143);
    v146 = v145;

    v147 = String.uppercased()();
    swift_bridgeObjectRelease(v146, (SEL)v147._object, v148, v149, v150, v151, v152, v153);
    v303 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(v147._countAndFlagsBits, (unint64_t)v147._object, (uint64_t *)&v306);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v303, &v304, v142 + 4, v142 + 12);
    swift_release_n(v10, 2);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v147._object, v154, v155, v156, v157, v158, v159, v160);
    *(_WORD *)(v142 + 12) = 2080;
    v161 = v283;
    v162 = String.uppercased()();
    v303 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(v162._countAndFlagsBits, (unint64_t)v162._object, (uint64_t *)&v306);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v303, &v304, v142 + 14, v142 + 22);
    swift_bridgeObjectRelease_n(v161, 2);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v162._object, v163, v164, v165, v166, v167, v168, v169);
    *(_WORD *)(v142 + 22) = 2080;
    v170 = v287;
    v171 = String.uppercased()();
    v303 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(v171._countAndFlagsBits, (unint64_t)v171._object, (uint64_t *)&v306);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v303, &v304, v142 + 24, v142 + 32);
    swift_bridgeObjectRelease_n(v170, 2);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v171._object, v172, v173, v174, v175, v176, v177, v178);
    *(_WORD *)(v142 + 32) = 2048;
    v303 = (_TtC14softposreaderd12RemoteReader *)v291;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v303, &v304, v142 + 34, v142 + 42);
    *(_WORD *)(v142 + 42) = 2080;
    v179 = (uint64_t)v279;
    v180 = (unint64_t)v281;
    v181 = Data.hexString()();
    v303 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(v181._countAndFlagsBits, (unint64_t)v181._object, (uint64_t *)&v306);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v303, &v304, v142 + 44, v142 + 52);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v181._object, v182, v183, v184, v185, v186, v187, v188);
    sub_10000A9B0(v179, v180);
    sub_10000A9B0(v179, v180);
    *(_WORD *)(v142 + 52) = 2080;
    v189 = v278;
    v190 = (unint64_t)v280;
    v191 = Data.hexString()();
    v303 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(v191._countAndFlagsBits, (unint64_t)v191._object, (uint64_t *)&v306);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v303, &v304, v142 + 54, v142 + 62);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v191._object, v192, v193, v194, v195, v196, v197, v198);
    sub_10000A9B0(v189, v190);
    sub_10000A9B0(v189, v190);
    *(_WORD *)(v142 + 62) = 2080;
    v199 = v286;
    v200 = v285;
    v201 = Data.hexString()();
    v303 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(v201._countAndFlagsBits, (unint64_t)v201._object, (uint64_t *)&v306);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v303, &v304, v142 + 64, v142 + 72);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v201._object, v202, v203, v204, v205, v206, v207, v208);
    sub_10000A9B0(v199, v200);
    sub_10000A9B0(v199, v200);
    *(_WORD *)(v142 + 72) = 2080;
    v209 = v284;
    v210 = v292;
    v211 = Data.hexString()();
    v303 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(v211._countAndFlagsBits, (unint64_t)v211._object, (uint64_t *)&v306);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v303, &v304, v142 + 74, v142 + 82);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v211._object, v212, v213, v214, v215, v216, v217, v218);
    sub_10000A9B0(v209, v210);
    sub_10000A9B0(v209, v210);
    *(_WORD *)(v142 + 82) = 2080;
    v219 = v293;
    v220 = v294;
    v221 = Data.hexString()();
    v303 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(v221._countAndFlagsBits, (unint64_t)v221._object, (uint64_t *)&v306);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v303, &v304, v142 + 84, v142 + 92);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v221._object, v222, v223, v224, v225, v226, v227, v228);
    sub_100005DE0(v219, v220);
    sub_100005DE0(v219, v220);
    *(_WORD *)(v142 + 92) = 2080;
    v229 = (uint64_t)v276;
    v230 = (unint64_t)v277;
    v231 = Data.hexString()();
    v303 = (_TtC14softposreaderd12RemoteReader *)sub_1000056EC(v231._countAndFlagsBits, (unint64_t)v231._object, (uint64_t *)&v306);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v303, &v304, v142 + 94, v142 + 102);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v231._object, v232, v233, v234, v235, v236, v237, v238);
    sub_100005DE0(v229, v230);
    sub_100005DE0(v229, v230);
    v239 = v272;
    _os_log_impl((void *)&_mh_execute_header, v272, (os_log_type_t)v288, "seid: %s, sessionId: %s, activationId: %s, trxCount: %ld\nprefixData: %s, seidData: %s, sessionIdData: %s, activationIdData: %s, trxCountData: %s\nsignedData: %s", (uint8_t *)v142, 0x66u);
    v240 = v271;
    swift_arrayDestroy(v271, 9, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v240, -1, -1);
    swift_slowDealloc(v142, -1, -1);

    (*(void (**)(char *, uint64_t))(v289 + 8))(v290, v273);
    a1 = v274;
LABEL_32:
    v251 = sub_100005EF8(v10 + 13, v10[16]);
    __chkstk_darwin(v251);
    *((_OWORD *)&v270 - 4) = xmmword_1001620D0;
    *(&v270 - 6) = 0xEE006E6F69746164;
    *(&v270 - 5) = a1;
    *(&v270 - 4) = v282;
    *(&v270 - 3) = v229;
    *(&v270 - 2) = v230;
    *(&v270 - 1) = v252;
    OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_10004B580, &v270 - 10, &type metadata for () + 1);
    v253 = v10 + 29;
    v255 = v10[32];
    v254 = v10[33];
    sub_100005EF8(v253, v255);
    sub_10011571C(39, v255, v254);
    sub_100005DE0(v229, v230);
    sub_100005DE0(v293, v294);
    sub_10000A9B0(v278, (unint64_t)v280);
    sub_10000A9B0((uint64_t)v279, (unint64_t)v281);
    sub_10000A9B0(v284, v292);
    sub_10000A9B0(v286, v285);
    return;
  }
LABEL_36:
  sub_100005DE0((uint64_t)v276, (unint64_t)v277);
  sub_100005DE0(v293, v294);
  sub_10000A9B0(v284, v292);
  sub_10000A9B0(v286, v285);
  sub_10000A9B0(v278, (unint64_t)v280);
  sub_10000A9B0((uint64_t)v279, (unint64_t)v281);
  swift_release(v10);
  swift_bridgeObjectRelease(v283, v256, v257, v258, v259, v260, v261, v262);
  swift_bridgeObjectRelease(v287, v263, v264, v265, v266, v267, v268, v269);
  __break(1u);
}

uint64_t sub_100104798(_QWORD *a1, _TtC14softposreaderd12RemoteReader *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_signpost_type_t v43;
  char v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  uint64_t v48;
  uint8_t *v49;
  os_signpost_id_t v50;
  uint64_t v51;
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  os_unfair_lock_s *v56;
  os_unfair_lock_s *v57;
  _TtC14softposreaderd12RemoteReader **v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  os_unfair_lock_s *v62;
  os_unfair_lock_s *v63;
  uint64_t v64;
  char *v65;
  int v66;
  _TtC14softposreaderd12RemoteReader *v67;
  unint64_t v68;
  _TtC14softposreaderd12RemoteReader *v69;
  void *v70;
  _TtC14softposreaderd12RemoteReader *v71;
  unint64_t v72;
  uint64_t v73;
  _TtC14softposreaderd12RemoteReader *v74;
  uint64_t v75;
  _TtC14softposreaderd12RemoteReader *v76;
  _TtC14softposreaderd12RemoteReader *v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  SEL v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  _TtC14softposreaderd12RemoteReader *v92;
  _TtC14softposreaderd12RemoteReader *v93;
  _TtC14softposreaderd12RemoteReader *v94;
  SEL v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  SEL v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  SEL v109;
  id v110;
  id v111;
  id v112;
  id v113;
  id v114;
  id v115;
  SEL v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  id v122;
  SEL v123;
  id v124;
  id v125;
  id v126;
  id v127;
  id v128;
  id v129;
  uint64_t v130;
  const char *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  uint64_t v138;
  unint64_t v139;
  _TtC14softposreaderd12RemoteReader *v140;
  _QWORD *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _TtC14softposreaderd12RemoteReader *v147;
  uint64_t v148;
  _QWORD *v149;
  _TtC14softposreaderd12RemoteReader *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  objc_class *v154;
  _QWORD *v155;
  int v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  _TtC14softposreaderd12RemoteReader *v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  _TtC14softposreaderd12RemoteReader *v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  objc_class *v181;
  _QWORD *v182;
  uint64_t v183;
  _TtC14softposreaderd12RemoteReader *v184;
  _TtC14softposreaderd12RemoteReader *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  __int128 v189;
  SEL v190;
  id v191;
  id v192;
  id v193;
  id v194;
  id v195;
  id v196;
  uint64_t v197;
  _TtC14softposreaderd12RemoteReader *v198;
  SEL v199;
  id v200;
  id v201;
  id v202;
  id v203;
  id v204;
  id v205;
  __int128 v206;
  _TtC14softposreaderd12RemoteReader *v207;
  uint64_t v208;
  uint64_t v209;
  _TtC14softposreaderd12RemoteReader *v210;
  uint64_t v211;
  uint64_t *v212;
  _QWORD *v213;
  uint64_t v214;
  unint64_t v215;
  _TtC14softposreaderd12RemoteReader *v216;
  char v217;
  _TtC14softposreaderd12RemoteReader *v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _TtC14softposreaderd12RemoteReader *v224;
  _QWORD *v225;
  _QWORD *v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  _TtC14softposreaderd12RemoteReader *v231;
  uint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t v235;
  _TtC14softposreaderd12RemoteReader *v236;
  _TtC14softposreaderd12RemoteReader *v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  _TtC14softposreaderd12RemoteReader *v247;
  os_unfair_lock_s *v248;
  char *v249;
  _TtC14softposreaderd12RemoteReader *v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  _TtC14softposreaderd12RemoteReader *v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  _TtC14softposreaderd12RemoteReader *v262;
  _TtC14softposreaderd12RemoteReader *v263;
  _QWORD *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t ObjectType;
  uint64_t AssociatedTypeWitness;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  uint64_t v272;
  _TtC14softposreaderd12RemoteReader *v273;
  unint64_t v274;
  SEL v275;
  id v276;
  id v277;
  id v278;
  id v279;
  id v280;
  id v281;
  SEL v282;
  id v283;
  id v284;
  id v285;
  id v286;
  id v287;
  id v288;
  SEL v289;
  id v290;
  id v291;
  id v292;
  id v293;
  id v294;
  id v295;
  uint64_t v296;
  const char *v297;
  void *v298;
  void *v299;
  void *v300;
  void *v301;
  void *v302;
  void *v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v307;
  uint64_t (*v308)(uint64_t, uint64_t);
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  char *v315;
  _TtC14softposreaderd12RemoteReader *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  const char *v321;
  void *v322;
  void *v323;
  void *v324;
  void *v325;
  void *v326;
  void *v327;
  uint64_t v328;
  unint64_t *v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  unint64_t v341;
  unint64_t v342;
  char v343;
  char v344;
  uint64_t v345;
  _QWORD *v346;
  _QWORD *v347;
  _TtC14softposreaderd12RemoteReader *v348;
  unint64_t v349;
  unint64_t v350;
  uint64_t v351;
  SEL v352;
  id v353;
  id v354;
  id v355;
  id v356;
  id v357;
  id v358;
  char v359;
  char v360;
  const char *v361;
  void *v362;
  void *v363;
  void *v364;
  void *v365;
  void *v366;
  void *v367;
  unint64_t v368;
  uint64_t v369;
  _TtC14softposreaderd12RemoteReader *v370;
  _TtC14softposreaderd12RemoteReader *v371;
  SEL v372;
  id v373;
  id v374;
  id v375;
  id v376;
  id v377;
  id v378;
  _TtC14softposreaderd12RemoteReader *v379;
  _TtC14softposreaderd12RemoteReader *v380;
  unint64_t v381;
  SEL v382;
  id v383;
  id v384;
  id v385;
  id v386;
  id v387;
  id v388;
  SEL v389;
  id v390;
  id v391;
  id v392;
  id v393;
  id v394;
  id v395;
  SEL v396;
  id v397;
  id v398;
  id v399;
  id v400;
  id v401;
  id v402;
  uint64_t v403;
  const char *v404;
  void *v405;
  uint64_t v406;
  const char *v407;
  void *v408;
  void *v409;
  void *v410;
  void *v411;
  void *v412;
  void *v413;
  const char *v414;
  void *v415;
  void *v416;
  void *v417;
  void *v418;
  void *v419;
  void *v420;
  char v421;
  SEL v422;
  id v423;
  id v424;
  id v425;
  id v426;
  id v427;
  id v428;
  const char *v429;
  void *v430;
  void *v431;
  void *v432;
  void *v433;
  void *v434;
  void *v435;
  _QWORD *v436;
  id v437;
  unint64_t v438;
  id v439;
  uint64_t v440;
  id v441;
  id v442;
  id v443;
  id v444;
  unint64_t v445;
  char v446;
  const char *v447;
  void *v448;
  void *v449;
  void *v450;
  void *v451;
  void *v452;
  void *v453;
  unint64_t v454;
  const char *v455;
  void *v456;
  void *v457;
  void *v458;
  void *v459;
  void *v460;
  void *v461;
  unint64_t v462;
  SEL v463;
  id v464;
  id v465;
  id v466;
  id v467;
  id v468;
  id v469;
  _TtC14softposreaderd12RemoteReader *v470;
  SEL v471;
  id v472;
  id v473;
  id v474;
  id v475;
  id v476;
  id v477;
  SEL v478;
  id v479;
  id v480;
  id v481;
  id v482;
  id v483;
  id v484;
  SEL v485;
  id v486;
  id v487;
  id v488;
  id v489;
  id v490;
  id v491;
  _TtC14softposreaderd12RemoteReader *v492;
  SEL v493;
  id v494;
  id v495;
  id v496;
  id v497;
  id v498;
  id v499;
  SEL v500;
  id v501;
  id v502;
  id v503;
  id v504;
  id v505;
  id v506;
  SEL v507;
  id v508;
  id v509;
  id v510;
  id v511;
  id v512;
  id v513;
  _TtC14softposreaderd12RemoteReader *v514;
  SEL v515;
  id v516;
  id v517;
  id v518;
  id v519;
  id v520;
  id v521;
  SEL v522;
  id v523;
  id v524;
  id v525;
  id v526;
  id v527;
  id v528;
  uint64_t v529;
  const char *v530;
  void *v531;
  void *v532;
  void *v533;
  void *v534;
  void *v535;
  void *v536;
  const char *v537;
  void *v538;
  void *v539;
  void *v540;
  void *v541;
  void *v542;
  void *v543;
  SEL v544;
  id v545;
  id v546;
  id v547;
  id v548;
  id v549;
  id v550;
  unint64_t v551;
  unint64_t v552;
  uint64_t v553;
  __int128 v554;
  unint64_t v555;
  __int128 v556;
  __int128 v557;
  id v558;
  __int128 *v559;
  uint64_t v560;
  uint64_t v561;
  _TtC14softposreaderd12RemoteReader *v562;
  __int128 *v563;
  __int128 *v564;
  uint64_t *v565;
  uint64_t v566;
  _TtC14softposreaderd12RemoteReader *v567;
  id v568;
  uint64_t v569;
  _TtC14softposreaderd12RemoteReader *v570;
  _TtC14softposreaderd12RemoteReader *v571;
  uint64_t v572;
  _QWORD *v573;
  _QWORD *v574;
  _TtC14softposreaderd12RemoteReader *v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  char *v581;
  char *v582;
  uint64_t v583;
  uint64_t v584;
  char *v585;
  char *v586;
  uint64_t v587;
  char *v588;
  uint64_t v589;
  char *v590;
  char *v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  char *v596;
  _QWORD *v597;
  _TtC14softposreaderd12RemoteReader *v598;
  os_unfair_lock_s *v599;
  uint64_t v600;
  char *v601;
  __int128 v602;
  uint64_t v603;
  unint64_t v604;
  _QWORD *v605;
  _TtC14softposreaderd12RemoteReader *v606;
  unint64_t v607;
  char *v608;
  uint64_t v609;
  uint64_t v610;
  _QWORD *v611;
  _TtC14softposreaderd12RemoteReader *v612;
  __int128 v613;
  __int128 v614;
  _OWORD v615[3];
  __int128 v616;
  __int128 v617;
  _TtC14softposreaderd12RemoteReader *v618;
  unint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623[2];
  _OWORD v624[23];
  _BYTE v625[368];
  _BYTE v626[272];
  uint64_t v627;
  uint64_t v628;
  void *v629;
  _TtC14softposreaderd12RemoteReader *v630;
  _TtC14softposreaderd12RemoteReader *v631;
  unint64_t v632;
  uint64_t v633;
  unint64_t v634;
  _QWORD *v635;
  unint64_t v636;
  uint64_t v637;
  _TtC14softposreaderd12RemoteReader *v638;
  _QWORD *v639;
  _TtC14softposreaderd12RemoteReader *v640;
  char v641;
  _BYTE v642[24];
  id v643[46];
  _BYTE v644[392];
  _BYTE v645[272];
  _OWORD v646[17];
  _OWORD v647[12];
  _BYTE v648[16];
  _OWORD v649[17];
  _OWORD v650[5];
  __int128 v651;
  __int128 v652;
  __int128 v653;
  __int128 v654;
  __int128 v655;
  __int128 v656;
  __int128 v657;
  _BYTE v658[16];
  _BYTE v659[16];
  _BYTE v660[16];
  _BYTE v661[16];
  _BYTE v662[16];
  _BYTE v663[16];
  _BYTE v664[16];
  uint64_t v665;
  _TtC14softposreaderd12RemoteReader *v666;
  _QWORD v667[34];

  v605 = a1;
  v5 = v4;
  v606 = a2;
  v607 = a4;
  *(_QWORD *)&v602 = a3;
  v6 = type metadata accessor for HPKE.Sender(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v553 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v589 = type metadata accessor for HPKE.AEAD(0);
  v587 = *(_QWORD *)(v589 - 8);
  __chkstk_darwin(v589);
  v588 = (char *)&v553 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for HPKE.KDF(0);
  v583 = *(_QWORD *)(v11 - 8);
  v584 = v11;
  __chkstk_darwin(v11);
  v586 = (char *)&v553 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for HPKE.KEM(0);
  v579 = *(_QWORD *)(v13 - 8);
  v580 = v13;
  __chkstk_darwin(v13);
  v582 = (char *)&v553 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for HPKE.Ciphersuite(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v585 = (char *)&v553 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v591 = (char *)&v553 - v19;
  v20 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  v21 = *(_QWORD *)(v20 - 8);
  v594 = v20;
  v595 = v21;
  v22 = __chkstk_darwin(v20);
  v581 = (char *)&v553 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v596 = (char *)&v553 - v24;
  v25 = type metadata accessor for String.Encoding(0);
  v599 = *(os_unfair_lock_s **)(v25 - 8);
  v600 = v25;
  __chkstk_darwin(v25);
  v601 = (char *)&v553 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for OSSignpostID(0);
  v28 = *(_QWORD *)(v27 - 8);
  v609 = v27;
  v610 = v28;
  v29 = __chkstk_darwin(v27);
  v31 = (char *)&v553 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v33 = (char *)&v553 - v32;
  if (qword_1001AD1E8 != -1)
    swift_once(&qword_1001AD1E8, sub_1000FAB88);
  v592 = v16;
  v593 = v15;
  v590 = v9;
  v34 = type metadata accessor for Logger(0);
  v578 = sub_100003A14(v34, (uint64_t)qword_1001B2928);
  v35 = Logger.logObject.getter(v578);
  v36 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "generateSecureReaderBlob(trxBlob:pinBlob:)", v37, 2u);
    swift_slowDealloc(v37, -1, -1);
  }

  if (qword_1001AD1F0 != -1)
    swift_once(&qword_1001AD1F0, sub_1000FAC18);
  v38 = type metadata accessor for OSSignposter(0);
  v39 = sub_100003A14(v38, (uint64_t)qword_1001B2940);
  v40 = OSSignposter.logHandle.getter(v39);
  v41 = OSSignpostID.init(log:)(v40);
  v42 = OSSignposter.logHandle.getter(v41);
  v43 = static os_signpost_type_t.begin.getter();
  v44 = OS_os_log.signpostsEnabled.getter();
  v611 = v5;
  v608 = v33;
  v576 = v7;
  v577 = v6;
  if ((v44 & 1) != 0)
  {
    v45 = v609;
    v46 = *(void (**)(char *, char *, uint64_t))(v610 + 16);
    v47 = v33;
    v48 = v610;
    v46(v31, v47, v609);
    v49 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v49 = 0;
    v50 = OSSignpostID.rawValue.getter(v49);
    v51 = v45;
    v52 = v48;
    v33 = v608;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v42, v43, v50, "reader-getSecureBlob", "begin generateSecureReaderBlob", v49, 2u);
    v53 = v49;
    v5 = v611;
    swift_slowDealloc(v53, -1, -1);

    (*(void (**)(char *, uint64_t))(v52 + 8))(v31, v51);
  }
  else
  {

    v51 = v609;
    v46 = *(void (**)(char *, char *, uint64_t))(v610 + 16);
  }
  v46(v31, v33, v51);
  v54 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v54, *(unsigned int *)(v54 + 48), *(unsigned __int16 *)(v54 + 52));
  v603 = OSSignpostIntervalState.init(id:isOpen:)(v31, 1);
  v55 = v5[34];
  v56 = *(os_unfair_lock_s **)(v55 + 56);
  v57 = v56 + 8;
  v58 = (_TtC14softposreaderd12RemoteReader **)&v56[4];
  os_unfair_lock_lock(v56 + 8);
  v59 = v604;
  sub_100080B88(v58, 12);
  if (v59)
  {
    os_unfair_lock_unlock(v57);
    __break(1u);
    JUMPOUT(0x100107CF8);
  }
  os_unfair_lock_unlock(v57);
  v60 = 1;
  v61 = v55;
  v62 = *(os_unfair_lock_s **)(v55 + 56);
  v63 = v62 + 8;
  v64 = (uint64_t)&v62[4];
  v65 = &byte_100199610;
  do
  {
    v66 = *v65++;
    os_unfair_lock_lock(v63);
    sub_10007FE5C(v64, v66);
    os_unfair_lock_unlock(v63);
    --v60;
  }
  while (v60);
  v67 = v606;
  v68 = v607 >> 60;
  *(_BYTE *)(v61 + 130) = v607 >> 60 != 15;
  sub_10010E914((uint64_t)v605, (uint64_t)v67);
  v569 = v61;
  v572 = 0;
  memcpy(v649, v626, sizeof(v649));
  v69 = (_TtC14softposreaderd12RemoteReader *)*((_QWORD *)&v649[16] + 1);
  v565 = *(uint64_t **)&v649[16];
  v70 = v629;
  v71 = v630;
  v72 = v632;
  LODWORD(v566) = v642[16];
  v574 = v635;
  v575 = v631;
  v573 = (_QWORD *)v636;
  v597 = (_QWORD *)v633;
  v598 = v640;
  v604 = v634;
  v605 = v639;
  sub_100024374((uint64_t)v642, (uint64_t)v648, &qword_1001AE030);
  v73 = v628;
  v606 = v71;
  v568 = v70;
  v570 = v638;
  v571 = v69;
  v560 = v637;
  v561 = v627;
  if (v68 >= 0xF)
  {
    sub_100111178(v624);
    swift_bridgeObjectRetain_n(v71, 4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v140 = v575;
    v563 = (__int128 *)v72;
    sub_100005D9C((uint64_t)v575, v72);
    swift_bridgeObjectRetain();
    v142 = (uint64_t)v573;
    v141 = v574;
    sub_100005D9C((uint64_t)v574, (unint64_t)v573);
    sub_100005D9C((uint64_t)v605, (unint64_t)v598);
    sub_100005D9C((uint64_t)v597, v604);
    sub_10002469C((uint64_t)v648);
    swift_bridgeObjectRetain();
    sub_100024374((uint64_t)v624, (uint64_t)v625, &qword_1001B2B28);
    v143 = v611;
    v564 = (__int128 *)v73;
    goto LABEL_18;
  }
  v615[1] = v649[0];
  v615[2] = v649[1];
  v567 = (_TtC14softposreaderd12RemoteReader *)*((_QWORD *)&v649[2] + 1);
  v558 = *(id *)&v649[2];
  v616 = v649[1];
  v617 = v649[0];
  v650[3] = v649[6];
  v650[2] = v649[5];
  v650[1] = v649[4];
  v650[0] = v649[3];
  v653 = v649[10];
  v652 = v649[9];
  v651 = v649[8];
  v650[4] = v649[7];
  v657 = v649[14];
  v656 = v649[13];
  v655 = v649[12];
  v654 = v649[11];
  v563 = &v656;
  v564 = &v657;
  v562 = (_TtC14softposreaderd12RemoteReader *)&v655;
  v559 = &v654;
  v74 = v575;
  v614 = v649[4];
  v615[0] = v649[3];
  v613 = v649[5];
  v75 = v628;
  sub_100024374((uint64_t)&v651, (uint64_t)v664, &qword_1001AE030);
  v76 = v606;
  sub_100024374((uint64_t)&v652, (uint64_t)v663, &qword_1001AE030);
  sub_100024374((uint64_t)&v653, (uint64_t)v662, &qword_1001AE030);
  sub_100024374((uint64_t)v559, (uint64_t)v661, &qword_1001AE030);
  sub_100024374((uint64_t)v562, (uint64_t)v660, &qword_1001AE030);
  v77 = v570;
  sub_100024374((uint64_t)v563, (uint64_t)v659, &qword_1001AE030);
  sub_100024374((uint64_t)v564, (uint64_t)v658, &qword_1001AE030);
  v78 = v649[15];
  swift_bridgeObjectRetain_n(v76, 4);
  swift_bridgeObjectRetain();
  sub_100005D9C((uint64_t)v74, v72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v79 = v75;
  swift_bridgeObjectRetain();
  v80 = (uint64_t)v74;
  v81 = v72;
  sub_100005D9C(v80, v72);
  swift_bridgeObjectRetain();
  sub_10002469C((uint64_t)&v617);
  sub_10002469C((uint64_t)&v616);
  swift_bridgeObjectRetain();
  sub_10002469C((uint64_t)v615);
  sub_10002469C((uint64_t)&v614);
  sub_10002469C((uint64_t)&v613);
  sub_10002469C((uint64_t)v664);
  sub_10002469C((uint64_t)v663);
  sub_10002469C((uint64_t)v662);
  sub_10002469C((uint64_t)v661);
  sub_10002469C((uint64_t)v660);
  sub_10002469C((uint64_t)v659);
  sub_10002469C((uint64_t)v658);
  v562 = (_TtC14softposreaderd12RemoteReader *)*((_QWORD *)&v78 + 1);
  v559 = (__int128 *)v78;
  sub_100005D9C(v78, *((unint64_t *)&v78 + 1));
  sub_100005D9C((uint64_t)v574, (unint64_t)v573);
  sub_100005D9C((uint64_t)v605, (unint64_t)v598);
  sub_100005D9C((uint64_t)v597, v604);
  sub_10002469C((uint64_t)v648);
  swift_bridgeObjectRetain();
  v82 = v602;
  v83 = v607;
  sub_1000306C8(v602, v607);
  v84 = v572;
  sub_10010FBF8(v82, v83);
  if (!v84)
  {
    v563 = (__int128 *)v72;
    v564 = (__int128 *)v79;
    v572 = 0;
    memcpy(v624, v643, sizeof(v624));
    v189 = v617;
    BitString.init(data:unusedBits:)(v624);
    sub_1001115A8(v643);
    sub_10005BAFC(v649);
    swift_bridgeObjectRelease(v571, v190, v191, v192, v193, v194, v195, v196);
    v197 = (uint64_t)v559;
    v198 = v562;
    sub_100005DE0((uint64_t)v559, (unint64_t)v562);
    sub_1000246C4((uint64_t)v658);
    sub_1000246C4((uint64_t)v659);
    sub_1000246C4((uint64_t)v660);
    sub_1000246C4((uint64_t)v661);
    sub_1000246C4((uint64_t)v662);
    sub_1000246C4((uint64_t)v663);
    sub_1000246C4((uint64_t)v664);
    sub_1000246C4((uint64_t)&v613);
    sub_1000246C4((uint64_t)&v614);
    sub_1000246C4((uint64_t)v615);
    swift_bridgeObjectRelease(v567, v199, v200, v201, v202, v203, v204, v205);
    sub_1000246C4((uint64_t)&v616);
    sub_1000246C4((uint64_t)&v617);
    memcpy(v646, v643, sizeof(v646));
    v206 = v646[1];
    v207 = (_TtC14softposreaderd12RemoteReader *)*((_QWORD *)&v646[2] + 1);
    *(_QWORD *)&v557 = *(_QWORD *)&v646[2];
    if (v189 != v646[0]
      && (_stringCompareWithSmolCheck(_:_:expecting:)(v189, *((_QWORD *)&v189 + 1), *(_QWORD *)&v646[0], *((_QWORD *)&v646[0] + 1), 0) & 1) == 0|| v616 != v206&& (_stringCompareWithSmolCheck(_:_:expecting:)(v616, *((_QWORD *)&v616 + 1), v206, *((_QWORD *)&v206 + 1), 0) & 1) == 0)
    {
      goto LABEL_71;
    }
    if (v567)
    {
      if (!v207
        || (v558 != (id)v557 || v567 != v207)
        && (_stringCompareWithSmolCheck(_:_:expecting:)(v558, v567, v557, v207, 0) & 1) == 0)
      {
        goto LABEL_71;
      }
    }
    else if (v207)
    {
      goto LABEL_71;
    }
    v647[8] = v646[11];
    v647[9] = v646[12];
    v647[10] = v646[13];
    v647[11] = v646[14];
    v647[4] = v646[7];
    v647[5] = v646[8];
    v647[6] = v646[9];
    v647[7] = v646[10];
    v647[0] = v646[3];
    v647[1] = v646[4];
    v647[2] = v646[5];
    v647[3] = v646[6];
    if (sub_1000D2704((uint64_t *)v650, (uint64_t)v647))
    {
      sub_10005BAFC(v646);
      sub_1001288E0(v197, (uint64_t)v198);
      v360 = v359;
      sub_100054898(v646);
      sub_100054898(v649);
      v314 = v610;
      v315 = v608;
      if ((v360 & 1) == 0)
      {
LABEL_72:
        sub_1001119C4((uint64_t)v643, v361, v362, v363, v364, v365, v366, v367);
        swift_bridgeObjectRelease_n(v564, 2);
        swift_bridgeObjectRelease(v570, v372, v373, v374, v375, v376, v377, v378);
        v379 = v606;
        swift_bridgeObjectRelease_n(v606, 3);
        v380 = v575;
        v381 = (unint64_t)v563;
        sub_100005DE0((uint64_t)v575, (unint64_t)v563);
        swift_bridgeObjectRelease(v571, v382, v383, v384, v385, v386, v387, v388);
        swift_bridgeObjectRelease(v379, v389, v390, v391, v392, v393, v394, v395);
        sub_1000246C4((uint64_t)v648);
        sub_100005DE0((uint64_t)v597, v604);
        sub_100005DE0((uint64_t)v605, (unint64_t)v598);
        sub_100005DE0((uint64_t)v574, (unint64_t)v573);
        sub_100005DE0((uint64_t)v380, v381);
        swift_bridgeObjectRelease(v379, v396, v397, v398, v399, v400, v401, v402);
        *(_QWORD *)(v569 + 160) = 4000;
        v403 = 0xD000000000000032;
        v404 = "sessionToken from trxBlob and pinBlob not the same";
LABEL_73:
        v405 = (void *)((unint64_t)(v404 - 32) | 0x8000000000000000);
LABEL_74:
        v406 = sub_100024764(4000, v403, v405, 0);
        swift_willThrow(v406);
        sub_1001119C4((uint64_t)v643, v407, v408, v409, v410, v411, v412, v413);
        sub_1001113BC((uint64_t)v626, v414, v415, v416, v417, v418, v419, v420);
        sub_10000A9B0(v602, v607);
        v312 = v603;
        sub_100107DF8(v603, (uint64_t)v611);
        swift_release(v312);
        v313 = v609;
        goto LABEL_58;
      }
      v368 = (unint64_t)v563;
      v369 = (uint64_t)v564;
      v370 = v606;
      v141 = v574;
      v371 = v575;
      if (v568 == v643[34] && v606 == v643[35])
      {
        swift_bridgeObjectRelease(v606, v361, v643[34], v643[35], v364, v365, v366, v367);
      }
      else
      {
        v421 = _stringCompareWithSmolCheck(_:_:expecting:)(v568, v606, v643[34], v643[35], 0);
        swift_bridgeObjectRelease(v370, v422, v423, v424, v425, v426, v427, v428);
        if ((v421 & 1) == 0)
        {
          sub_1001119C4((uint64_t)v643, v429, v430, v431, v432, v433, v434, v435);
          swift_bridgeObjectRelease_n(v369, 2);
          swift_bridgeObjectRelease(v570, v485, v486, v487, v488, v489, v490, v491);
          v492 = v606;
          swift_bridgeObjectRelease_n(v606, 3);
          sub_100005DE0((uint64_t)v371, v368);
          swift_bridgeObjectRelease(v571, v493, v494, v495, v496, v497, v498, v499);
          swift_bridgeObjectRelease(v492, v500, v501, v502, v503, v504, v505, v506);
          sub_1000246C4((uint64_t)v648);
          sub_100005DE0((uint64_t)v597, v604);
          sub_100005DE0((uint64_t)v605, (unint64_t)v598);
          sub_100005DE0((uint64_t)v141, (unint64_t)v573);
          sub_100005DE0((uint64_t)v371, v368);
          *(_QWORD *)(v569 + 160) = 4000;
          v405 = (void *)0x800000010016FD20;
          v403 = 0xD000000000000033;
          goto LABEL_74;
        }
      }
      v436 = v605;
      if (v643[43])
      {
        v437 = v643[36];
        v438 = v368;
        v439 = v643[37];
        v440 = (uint64_t)v643[38];
        v441 = v643[39];
        v442 = v643[40];
        v567 = (_TtC14softposreaderd12RemoteReader *)v643[43];
        v562 = (_TtC14softposreaderd12RemoteReader *)v643[41];
        *((id *)&v556 + 1) = v643[42];
        v443 = v643[44];
        v444 = v643[45];
        sub_100005D9C((uint64_t)v643[36], (unint64_t)v643[37]);
        v558 = v441;
        v559 = (__int128 *)v440;
        sub_100005D9C(v440, (unint64_t)v441);
        *(_QWORD *)&v557 = v442;
        sub_100005D9C((uint64_t)v442, (unint64_t)v562);
        swift_bridgeObjectRetain();
        *(_QWORD *)&v556 = v444;
        v445 = (unint64_t)v444;
        v140 = v575;
        sub_100005D9C((uint64_t)v443, v445);
        sub_1001288E0((uint64_t)v140, v438);
        LOBYTE(v440) = v446;
        sub_100005DE0((uint64_t)v140, v438);
        sub_1001119C4((uint64_t)v643, v447, v448, v449, v450, v451, v452, v453);
        v454 = v604;
        if ((v440 & 1) == 0)
        {
          swift_bridgeObjectRelease_n(v564, 2);
          swift_bridgeObjectRelease(v570, v507, v508, v509, v510, v511, v512, v513);
          v514 = v606;
          swift_bridgeObjectRelease_n(v606, 3);
          sub_100005DE0((uint64_t)v140, v438);
          swift_bridgeObjectRelease(v571, v515, v516, v517, v518, v519, v520, v521);
          swift_bridgeObjectRelease(v514, v522, v523, v524, v525, v526, v527, v528);
          sub_1000246C4((uint64_t)v648);
          sub_100005DE0((uint64_t)v597, v454);
          sub_100005DE0((uint64_t)v605, (unint64_t)v598);
          sub_100005DE0((uint64_t)v574, (unint64_t)v573);
          *(_QWORD *)(v569 + 160) = 4000;
          v529 = sub_100024764(4000, 0xD000000000000035, (void *)0x800000010016FDA0, 0);
          swift_willThrow(v529);
          sub_1001119C4((uint64_t)v643, v530, v531, v532, v533, v534, v535, v536);
          sub_1001113BC((uint64_t)v626, v537, v538, v539, v540, v541, v542, v543);
          sub_100111340((uint64_t)v437, (unint64_t)v439, (uint64_t)v559, (unint64_t)v558, v557, (unint64_t)v562, *((uint64_t *)&v556 + 1), v567, (uint64_t)v443, v556);
          v138 = v602;
          v139 = v607;
          goto LABEL_16;
        }
        sub_100111340((uint64_t)v437, (unint64_t)v439, (uint64_t)v559, (unint64_t)v558, v557, (unint64_t)v562, *((uint64_t *)&v556 + 1), v567, (uint64_t)v443, v556);
        sub_10000A9B0(v602, v607);
        sub_100024374((uint64_t)v624, (uint64_t)v625, &qword_1001B2B28);
        v143 = v611;
        v142 = (uint64_t)v573;
        v141 = v574;
      }
      else
      {
        sub_100005DE0((uint64_t)v371, v368);
        sub_1001119C4((uint64_t)v643, v455, v456, v457, v458, v459, v460, v461);
        v462 = v604;
        if ((v566 & 1) == 0)
        {
          swift_bridgeObjectRelease_n(v564, 2);
          swift_bridgeObjectRelease(v570, v463, v464, v465, v466, v467, v468, v469);
          v470 = v606;
          swift_bridgeObjectRelease_n(v606, 3);
          sub_100005DE0((uint64_t)v371, v368);
          swift_bridgeObjectRelease(v571, v471, v472, v473, v474, v475, v476, v477);
          swift_bridgeObjectRelease(v470, v478, v479, v480, v481, v482, v483, v484);
          sub_1000246C4((uint64_t)v648);
          sub_100005DE0((uint64_t)v597, v462);
          sub_100005DE0((uint64_t)v436, (unint64_t)v598);
          sub_100005DE0((uint64_t)v141, (unint64_t)v573);
          v403 = 0xD00000000000003FLL;
          v404 = "trxBlob: isPINBypassEnabled false but pinBlob: isPinBypass true";
          goto LABEL_73;
        }
        sub_10000A9B0(v602, v607);
        sub_100024374((uint64_t)v624, (uint64_t)v625, &qword_1001B2B28);
        v143 = v611;
        v142 = (uint64_t)v573;
        v140 = v371;
      }
LABEL_18:
      v145 = v143[27];
      v144 = v143[28];
      sub_100005EF8(v143 + 24, v145);
      v146 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v144 + 8) + 24))(v145);
      v567 = (_TtC14softposreaderd12RemoteReader *)Double.description.getter(v146);
      v562 = v147;
      v148 = type metadata accessor for TLV();
      v574 = TLVTag.asn1Sequence.unsafeMutableAddressor();
      v149 = (_QWORD *)*v574;
      v607 = sub_100003A2C((uint64_t *)&unk_1001AE490);
      v150 = (_TtC14softposreaderd12RemoteReader *)swift_allocObject(v607, 56, 7);
      v602 = xmmword_10015E4F0;
      *(_OWORD *)&v150->instance[8] = xmmword_10015E4F0;
      v151 = default argument 0 of IteratorProtocol<>.nextOctetString(tag:)();
      *(_QWORD *)&v150->instance[24] = TLV.__allocating_init(tag:value:)(v151, (uint64_t)v141, v142);
      v152 = default argument 0 of IteratorProtocol<>.nextOctetString(tag:)();
      *(_QWORD *)&v150->instance[32] = TLV.__allocating_init(tag:value:)(v152, (uint64_t)v605, (uint64_t)v598);
      v153 = default argument 0 of IteratorProtocol<>.nextOctetString(tag:)();
      v154 = (objc_class *)TLV.__allocating_init(tag:value:)(v153, (uint64_t)v597, v604);
      v150[1].super.isa = v154;
      v618 = v150;
      specialized Array._endMutation()(v154);
      v155 = TLV.__allocating_init(tag:children:)((uint64_t)v149, (uint64_t)v618);
      sub_100024374((uint64_t)v625, (uint64_t)v624, &qword_1001B2B28);
      v156 = sub_1000240E0((uint64_t)v624);
      v157 = 0;
      v604 = v148;
      v605 = 0;
      v158 = 0;
      v598 = 0;
      v573 = v155;
      v159 = (uint64_t)v568;
      if (v156 != 1)
      {
        v160 = (_TtC14softposreaderd12RemoteReader *)*((_QWORD *)&v624[21] + 1);
        if (*((_QWORD *)&v624[21] + 1))
        {
          v161 = *((_QWORD *)&v624[22] + 1);
          v597 = *(_QWORD **)&v624[22];
          v162 = *(_QWORD *)&v624[21];
          v163 = *((_QWORD *)&v624[20] + 1);
          v164 = *(_QWORD *)&v624[20];
          v555 = *((_QWORD *)&v624[22] + 1);
          v556 = v624[20];
          v554 = v624[19];
          v165 = *((_QWORD *)&v624[18] + 1);
          v558 = (id)*((_QWORD *)&v624[18] + 1);
          v559 = *(__int128 **)&v624[21];
          v166 = *(_QWORD *)&v624[18];
          *(_QWORD *)&v557 = *(_QWORD *)&v624[18];
          v605 = (_QWORD *)*v574;
          v167 = (_TtC14softposreaderd12RemoteReader *)swift_allocObject(v607, 56, 7);
          *(_OWORD *)&v167->instance[8] = v602;
          sub_1001117A0((uint64_t)v625, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100111834);
          v551 = v161;
          v168 = (uint64_t)v597;
          v169 = v166;
          v170 = v165;
          v171 = *((_QWORD *)&v554 + 1);
          v172 = v554;
          sub_100111724(v169, v170, v554, *((unint64_t *)&v554 + 1), v164, v163, v162, (uint64_t)v160, (uint64_t)v597, v551);
          swift_bridgeObjectRetain();
          sub_100005D9C(v164, v163);
          v173 = default argument 0 of IteratorProtocol<>.nextOctetString(tag:)();
          v598 = v160;
          *(_QWORD *)&v167->instance[24] = TLV.__allocating_init(tag:value:)(v173, v164, v163);
          v174 = v555;
          sub_100005D9C(v168, v555);
          v175 = default argument 0 of IteratorProtocol<>.nextOctetString(tag:)();
          v176 = v174;
          *(_QWORD *)&v167->instance[32] = TLV.__allocating_init(tag:value:)(v175, v168, v174);
          v177 = v172;
          v178 = v172;
          v179 = v171;
          sub_100005D9C(v178, v171);
          v180 = default argument 0 of IteratorProtocol<>.nextOctetString(tag:)();
          v181 = (objc_class *)TLV.__allocating_init(tag:value:)(v180, v177, v171);
          v167[1].super.isa = v181;
          v618 = v167;
          specialized Array._endMutation()(v181);
          v182 = TLV.__allocating_init(tag:children:)((uint64_t)v605, (uint64_t)v618);
          v183 = TLVTag.init(contextSpecific:isConstructed:)(1uLL, 1);
          v184 = (_TtC14softposreaderd12RemoteReader *)swift_allocObject(v607, 40, 7);
          *(_OWORD *)&v184->instance[8] = xmmword_10015E4E0;
          *(_QWORD *)&v184->instance[24] = v182;
          v618 = v184;
          specialized Array._endMutation()(v184);
          v185 = v618;
          swift_retain();
          v186 = v183;
          v155 = v573;
          v605 = TLV.__allocating_init(tag:children:)(v186, (uint64_t)v185);
          v187 = default argument 0 of IteratorProtocol<>.nextBoolean(tag:)();
          v157 = TLV.__allocating_init(tag:BOOLean:)(v187, 0);
          swift_release(v182);
          v552 = v176;
          v140 = v575;
          v159 = (uint64_t)v568;
          v188 = v177;
          v158 = (uint64_t)v559;
          sub_100111340(v557, (unint64_t)v558, v188, v179, v556, *((unint64_t *)&v556 + 1), (uint64_t)v559, v598, (uint64_t)v597, v552);
          sub_1001117A0((uint64_t)v625, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001111B0);
        }
        else
        {
          sub_100024374((uint64_t)v625, (uint64_t)&v618, &qword_1001B2B28);
          sub_1001115A8(&v618);
          v208 = default argument 0 of IteratorProtocol<>.nextBoolean(tag:)();
          v157 = TLV.__allocating_init(tag:BOOLean:)(v208, 1);
          sub_1001117A0((uint64_t)v625, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001111B0);
          v605 = 0;
          v158 = 0;
          v598 = 0;
        }
      }
      v209 = (uint64_t)v140;
      v559 = (__int128 *)v158;
      v597 = v157;
      sub_100024374((uint64_t)v648, (uint64_t)&v665, &qword_1001AE030);
      v210 = v666;
      if (v666)
      {
        v211 = v665;
        v212 = (uint64_t *)TLVTag.asn1IA5String.unsafeMutableAddressor();
        v213 = TLV.__allocating_init(tag:string:)(*v212, v211, v210);
        v214 = TLVTag.init(contextSpecific:isConstructed:)(3uLL, 1);
        v215 = v607;
        v216 = (_TtC14softposreaderd12RemoteReader *)swift_allocObject(v607, 40, 7);
        *(_OWORD *)&v216->instance[8] = xmmword_10015E4E0;
        *(_QWORD *)&v216->instance[24] = v213;
        v618 = v216;
        specialized Array._endMutation()(v216);
        *(_QWORD *)&v602 = TLV.__allocating_init(tag:children:)(v214, (uint64_t)v618);
      }
      else
      {
        *(_QWORD *)&v602 = 0;
        v215 = v607;
      }
      v217 = v641;
      v218 = (_TtC14softposreaderd12RemoteReader *)swift_allocObject(v215, 88, 7);
      *(_OWORD *)&v218->instance[8] = xmmword_1001620E0;
      v219 = (uint64_t *)TLVTag.asn1IA5String.unsafeMutableAddressor();
      *(_QWORD *)&v218->instance[24] = TLV.__allocating_init(tag:string:)(*v219, (uint64_t)v567, v562);
      *(_QWORD *)&v218->instance[32] = TLV.__allocating_init(tag:string:)(*v219, (uint64_t)v565, v571);
      v218[1].super.isa = (Class)TLV.__allocating_init(tag:string:)(*v219, v159, v606);
      v220 = default argument 0 of IteratorProtocol<>.nextBoolean(tag:)();
      *(_QWORD *)v218[1].instance = TLV.__allocating_init(tag:BOOLean:)(v220, v217);
      v221 = default argument 0 of IteratorProtocol<>.nextOctetString(tag:)();
      *(_QWORD *)&v218[1].instance[8] = TLV.__allocating_init(tag:value:)(v221, v209, (uint64_t)v563);
      *(_QWORD *)&v218[1].instance[16] = v155;
      v565 = v219;
      v222 = *v219;
      sub_100005EF8(v611 + 7, v611[10]);
      swift_retain();
      sub_1000BB930(v644);
      sub_100024374((uint64_t)v644, (uint64_t)v645, &qword_1001AE028);
      sub_100024374((uint64_t)v645, (uint64_t)v667, &qword_1001AE028);
      if (sub_1000240E0((uint64_t)v667) == 1)
      {
        v223 = 0;
        v224 = (_TtC14softposreaderd12RemoteReader *)0xE000000000000000;
      }
      else
      {
        v223 = v667[32];
        v224 = (_TtC14softposreaderd12RemoteReader *)v667[33];
        swift_bridgeObjectRetain();
      }
      v225 = v605;
      v226 = TLV.__allocating_init(tag:string:)(v222, v223, v224);
      *(_QWORD *)&v218[1].instance[24] = v226;
      v618 = v218;
      specialized Array._endMutation()(v226);
      v612 = v618;
      if (v225)
      {
        v227 = swift_retain();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v227);
        v229 = *(_QWORD *)(((unint64_t)v612 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v228 = *(_QWORD *)(((unint64_t)v612 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v229 >= v228 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v228 > 1, v229 + 1, 1);
        v230 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v229, v225);
        specialized Array._endMutation()(v230);
      }
      if ((v566 & 1) != 0)
      {
        v233 = v597;
        v232 = v602;
        if (!v597)
        {
          v234 = default argument 0 of IteratorProtocol<>.nextBoolean(tag:)();
          v233 = TLV.__allocating_init(tag:BOOLean:)(v234, 0);
        }
        swift_retain();
        v235 = TLVTag.init(contextSpecific:isConstructed:)(2uLL, 1);
        v236 = (_TtC14softposreaderd12RemoteReader *)swift_allocObject(v607, 40, 7);
        *(_OWORD *)&v236->instance[8] = xmmword_10015E4E0;
        *(_QWORD *)&v236->instance[24] = v233;
        v618 = v236;
        specialized Array._endMutation()(v236);
        v237 = v618;
        swift_retain();
        v231 = (_TtC14softposreaderd12RemoteReader *)TLV.__allocating_init(tag:children:)(v235, (uint64_t)v237);
        v238 = swift_retain();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v238);
        v240 = *(_QWORD *)(((unint64_t)v612 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v239 = *(_QWORD *)(((unint64_t)v612 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v240 >= v239 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v239 > 1, v240 + 1, 1);
        v241 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v240, v231);
        specialized Array._endMutation()(v241);
        swift_release(v233);
        if (!v232)
          goto LABEL_53;
      }
      else
      {
        v231 = 0;
        v232 = v602;
        if (!(_QWORD)v602)
        {
LABEL_53:
          v571 = v231;
          v246 = *v574;
          v247 = v612;
          swift_bridgeObjectRetain();
          v248 = (os_unfair_lock_s *)TLV.__allocating_init(tag:children:)(v246, (uint64_t)v247);
          v249 = v601;
          static String.Encoding.utf8.getter(v248);
          v250 = (_TtC14softposreaderd12RemoteReader *)String.data(using:allowLossyConversion:)(v249, 0, 50, 0xE100000000000000);
          v252 = v251;
          v563 = *(__int128 **)&v599[2]._os_unfair_lock_opaque;
          v253 = ((uint64_t (*)(char *, uint64_t))v563)(v249, v600);
          if (v252 >> 60 == 15)
          {
            swift_release(v571);
            swift_release(v602);
            swift_bridgeObjectRelease(v598, v544, v545, v546, v547, v548, v549, v550);
            swift_release(v605);
            swift_release(v597);
            sub_1001117A0((uint64_t)v625, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001111B0);
            __break(1u);
            os_unfair_lock_unlock(v248);
            __break(1u);
            JUMPOUT(0x100107CE4);
          }
          v254 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)&v248->_os_unfair_lock_opaque + 168))(v253);
          v599 = v248;
          v255 = v254;
          v257 = v256;
          v618 = v250;
          v619 = v252;
          sub_100005D9C((uint64_t)v250, v252);
          sub_10012465C(v255, v257);
          sub_100005DE0(v255, v257);
          sub_10000A9B0((uint64_t)v250, v252);
          v258 = v618;
          v259 = v619;
          Data.sha256Digest.getter((uint64_t)v618, v619);
          v261 = v260;
          v263 = v262;
          sub_100005DE0((uint64_t)v258, v259);
          sub_100005EF8(v611 + 19, v611[22]);
          v264 = sub_10011C4EC(201, 0x726564616572, (_QWORD *)0xE600000000000000, 4);
          v266 = v265;
          ObjectType = swift_getObjectType(v264);
          AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v266, ObjectType, &unk_1001857B4);
          v575 = (_TtC14softposreaderd12RemoteReader *)&v553;
          v269 = *(_QWORD *)(AssociatedTypeWitness - 8);
          __chkstk_darwin(AssociatedTypeWitness);
          v271 = (char *)&v553 - v270;
          v566 = v261;
          v567 = v263;
          v272 = v572;
          v273 = (_TtC14softposreaderd12RemoteReader *)sub_10011367C((uint64_t)&v553 - v270, v261, (uint64_t)v263, 1, ObjectType, v266);
          if (!v272)
          {
            v620 = AssociatedTypeWitness;
            v562 = v273;
            v304 = v266;
            v305 = v274;
            AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v304, ObjectType, AssociatedTypeWitness, &unk_1001857B4, &unk_1001857BC);
            v621 = AssociatedConformanceWitness;
            v307 = sub_1000778C8(&v618);
            (*(void (**)(_QWORD *, char *, uint64_t))(v269 + 32))(v307, v271, AssociatedTypeWitness);
            swift_unknownObjectRelease(v264);
            v575 = (_TtC14softposreaderd12RemoteReader *)swift_allocObject(v607, 40, 7);
            *(_OWORD *)&v575->instance[8] = xmmword_10015E4E0;
            v308 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
            sub_100005D9C((uint64_t)v562, v305);
            v309 = v308(AssociatedTypeWitness, AssociatedConformanceWitness);
            TLV.__allocating_init(dataRepresentation:)(v309, v310);
            v558 = (id)v305;
            v317 = v575;
            *(_QWORD *)&v575->instance[24] = v311;
            v623[0] = (uint64_t)v317;
            specialized Array._endMutation()(v311);
            v622 = v623[0];
            v318 = v620;
            v319 = v621;
            sub_100005EF8(&v618, v620);
            v320 = (*(uint64_t (**)(uint64_t, uint64_t))(v319 + 56))(v318, v319);
            v328 = *(_QWORD *)(v320 + 16);
            v575 = (_TtC14softposreaderd12RemoteReader *)v320;
            if (v328)
            {
              v329 = (unint64_t *)(v320 + 40);
              do
              {
                v330 = *(v329 - 1);
                v331 = *v329;
                sub_100005D9C(v330, *v329);
                sub_100005D9C(v330, v331);
                TLV.__allocating_init(dataRepresentation:)(v330, v331);
                v333 = v332;
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v332);
                v335 = *(_QWORD *)((v622 & 0xFFFFFFFFFFFFFF8) + 0x10);
                v334 = *(_QWORD *)((v622 & 0xFFFFFFFFFFFFFF8) + 0x18);
                if (v335 >= v334 >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v334 > 1, v335 + 1, 1);
                v329 += 2;
                v336 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v335, v333);
                specialized Array._endMutation()(v336);
                sub_100005DE0(v330, v331);
                --v328;
              }
              while (v328);
            }
            swift_bridgeObjectRelease(v575, v321, v322, v323, v324, v325, v326, v327);
            v337 = v574;
            v338 = *v574;
            v339 = swift_allocObject(v607, 64, 7);
            *(_OWORD *)(v339 + 16) = xmmword_10015DF30;
            *(_QWORD *)(v339 + 32) = TLV.__allocating_init(tag:string:)(*v565, 50, (_TtC14softposreaderd12RemoteReader *)0xE100000000000000);
            *(_QWORD *)(v339 + 40) = v599;
            swift_retain();
            variable initialization expression of PrimaryAccountWatcher.isSandboxAccount();
            v340 = BitString.init(data:unusedBits:)(v562);
            v342 = v341;
            v344 = v343;
            v345 = default argument 0 of IteratorProtocol<>.nextBitString(tag:)();
            *(_QWORD *)(v339 + 48) = TLV.__allocating_init(tag:bitString:)(v345, v340, v342, v344);
            v346 = TLV.__allocating_init(tag:children:)(*v337, v622);
            *(_QWORD *)(v339 + 56) = v346;
            v623[0] = v339;
            specialized Array._endMutation()(v346);
            v347 = TLV.__allocating_init(tag:children:)(v338, v623[0]);
            v348 = (_TtC14softposreaderd12RemoteReader *)(*(uint64_t (**)(void))(*v347 + 168))();
            v350 = v349;
            *((_QWORD *)&v556 + 1) = sub_100003A2C(&qword_1001B2B30);
            v351 = swift_allocObject(*((_QWORD *)&v556 + 1), 64, 7);
            v557 = xmmword_10015A5F0;
            *(_OWORD *)(v351 + 16) = xmmword_10015A5F0;
            v623[0] = 0;
            v623[1] = 0xE000000000000000;
            v575 = v348;
            sub_100005D9C((uint64_t)v348, v350);
            _StringGuts.grow(_:)(18);
            swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v623[1], v352, v353, v354, v355, v356, v357, v358);
            strcpy((char *)v623, "payloadData[");
            BYTE5(v623[1]) = 0;
            HIWORD(v623[1]) = -5120;
            __asm { BR              X10 }
          }
          swift_unknownObjectRelease(v264);
          swift_bridgeObjectRelease(v570, v275, v276, v277, v278, v279, v280, v281);
          swift_bridgeObjectRelease_n(v606, 3);
          swift_bridgeObjectRelease_n(v564, 2);
          swift_bridgeObjectRelease(v598, v282, v283, v284, v285, v286, v287, v288);
          swift_bridgeObjectRelease(v612, v289, v290, v291, v292, v293, v294, v295);
          *(_QWORD *)(v569 + 160) = 4048;
          swift_errorRetain();
          sub_100024764(4048, 0xD00000000000001ALL, (void *)0x800000010016FBA0, v272);
          v296 = swift_errorRelease();
          swift_willThrow(v296);
          swift_release(v571);
          swift_release(v605);
          swift_release(v597);
          sub_1001117A0((uint64_t)v625, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001111B0);
          swift_release(v602);
          sub_1001113BC((uint64_t)v626, v297, v298, v299, v300, v301, v302, v303);
          swift_release(v599);
          swift_release(v573);
          sub_100005DE0(v566, (unint64_t)v567);
          swift_errorRelease();
          goto LABEL_57;
        }
      }
      v242 = swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v242);
      v244 = *(_QWORD *)(((unint64_t)v612 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v243 = *(_QWORD *)(((unint64_t)v612 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v244 >= v243 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v243 > 1, v244 + 1, 1);
      v245 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v244, v232);
      specialized Array._endMutation()(v245);
      goto LABEL_53;
    }
LABEL_71:
    sub_100054898(v649);
    v314 = v610;
    v315 = v608;
    goto LABEL_72;
  }
  swift_bridgeObjectRelease_n(v79, 2);
  swift_bridgeObjectRelease(v77, v85, v86, v87, v88, v89, v90, v91);
  v92 = v606;
  swift_bridgeObjectRelease_n(v606, 3);
  v93 = v575;
  sub_100005DE0((uint64_t)v575, v81);
  v94 = v571;
  swift_bridgeObjectRelease(v571, v95, v96, v97, v98, v99, v100, v101);
  swift_bridgeObjectRelease(v92, v102, v103, v104, v105, v106, v107, v108);
  sub_1000246C4((uint64_t)v648);
  sub_100005DE0((uint64_t)v597, v604);
  sub_100005DE0((uint64_t)v605, (unint64_t)v598);
  sub_100005DE0((uint64_t)v574, (unint64_t)v573);
  sub_100005DE0((uint64_t)v93, v81);
  swift_bridgeObjectRelease(v94, v109, v110, v111, v112, v113, v114, v115);
  swift_bridgeObjectRelease(v92, v116, v117, v118, v119, v120, v121, v122);
  sub_100005DE0((uint64_t)v559, (unint64_t)v562);
  sub_1000246C4((uint64_t)v658);
  sub_1000246C4((uint64_t)v659);
  sub_1000246C4((uint64_t)v660);
  sub_1000246C4((uint64_t)v661);
  sub_1000246C4((uint64_t)v662);
  sub_1000246C4((uint64_t)v663);
  sub_1000246C4((uint64_t)v664);
  sub_1000246C4((uint64_t)&v613);
  sub_1000246C4((uint64_t)&v614);
  sub_1000246C4((uint64_t)v615);
  swift_bridgeObjectRelease(v567, v123, v124, v125, v126, v127, v128, v129);
  sub_1000246C4((uint64_t)&v616);
  v130 = sub_1000246C4((uint64_t)&v617);
  *(_QWORD *)(v569 + 160) = 4032;
  swift_willThrow(v130);
  sub_1001113BC((uint64_t)v626, v131, v132, v133, v134, v135, v136, v137);
  v138 = v82;
  v139 = v83;
LABEL_16:
  sub_10000A9B0(v138, v139);
LABEL_57:
  v312 = v603;
  sub_100107DF8(v603, (uint64_t)v611);
  swift_release(v312);
  v313 = v609;
  v314 = v610;
  v315 = v608;
LABEL_58:
  (*(void (**)(char *, uint64_t))(v314 + 8))(v315, v313);
  return v312;
}

void sub_100107DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint8_t *v20;
  os_signpost_id_t v21;
  void (*v22)(_BYTE *, uint64_t);
  _QWORD *v23;
  os_unfair_lock_s *v24;
  _TtC14softposreaderd12RemoteReader **v25;
  os_unfair_lock_s *v26;
  _BYTE v27[12];
  int v28;
  uint64_t v29;

  v29 = a2;
  v3 = type metadata accessor for OSSignpostError(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v27[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for OSSignpostID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v27[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v13 = &v27[-v12];
  if (qword_1001AD1F0 != -1)
    swift_once(&qword_1001AD1F0, sub_1000FAC18);
  v14 = type metadata accessor for OSSignposter(0);
  v15 = sub_100003A14(v14, (uint64_t)qword_1001B2940);
  v16 = OSSignposter.logHandle.getter(v15);
  v17 = OSSignpostIntervalState.signpostID.getter();
  v28 = static os_signpost_type_t.end.getter(v17);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v18 = swift_retain();
    checkForErrorAndConsumeState(state:)(v18);
    swift_release(a1);
    if ((*(unsigned int (**)(_BYTE *, uint64_t))(v4 + 88))(v6, v3) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v19 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
      v19 = "end generateSecureReaderBlob";
    }
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v11, v13, v7);
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    v21 = OSSignpostID.rawValue.getter(v20);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, (os_signpost_type_t)v28, v21, "reader-getSecureBlob", v19, v20, 2u);
    swift_slowDealloc(v20, -1, -1);

    v22 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
    v22(v13, v7);
    v22(v11, v7);
  }
  else
  {

    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v13, v7);
  }
  v23 = *(_QWORD **)(v29 + 272);
  v24 = (os_unfair_lock_s *)v23[7];
  v25 = (_TtC14softposreaderd12RemoteReader **)&v24[4];
  v26 = v24 + 8;
  os_unfair_lock_lock(v24 + 8);
  sub_100080B88(v25, 11);
  os_unfair_lock_unlock(v26);
  sub_10004C650();
  sub_100005EF8(v23 + 2, v23[5]);
  sub_10003964C((uint64_t)&off_1001995C8);
}

void sub_100108098(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a1)
  {
    v13 = a1;
    swift_unknownObjectRetain(a1);
    v1 = sub_100003A2C(&qword_1001B2B20);
    v2 = String.init<A>(describing:)(&v13, v1);
    v4 = v3;
  }
  else
  {
    v4 = 0xE400000000000000;
    v2 = 1701736302;
  }
  if (qword_1001AD1E8 != -1)
    swift_once(&qword_1001AD1E8, sub_1000FAB88);
  v5 = type metadata accessor for Logger(0);
  sub_100003A14(v5, (uint64_t)qword_1001B2928);
  v6 = swift_bridgeObjectRetain();
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v13 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain();
    v11 = sub_1000056EC(v2, v4, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(v4, 3);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "deprecated Reader.cancelRead(callback: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v4, 2);
  }
  sub_1001013C0();
}

NSObject *sub_100108290(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  _TtC14softposreaderd12RemoteReader *v6;
  NSObject *v8;
  SEL v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  _TtC14softposreaderd12RemoteReader *v16;

  v5 = sub_100005EF8((_QWORD *)(v2 + 104), *(_QWORD *)(v2 + 128));
  OS_dispatch_queue.sync<A>(execute:)(&v16, sub_100111160, *v5, &type metadata for SPRCertificate);
  v6 = v16;
  v8 = sub_1001084E4(a1, a2, (uint64_t)v16);
  swift_bridgeObjectRelease(v6, v9, v10, v11, v12, v13, v14, v15);
  return v8;
}

NSObject *sub_1001084E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  SecKeyRef v36;
  CFDataRef v37;
  CFDataRef v38;
  const __CFData *v39;
  uint64_t v40;
  NSObject *v41;
  NSObject *v42;
  CFErrorRef v43;
  uint64_t v44;
  __CFError *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __CFError *v51;
  uint64_t v52;
  unint64_t v53;
  _TtC14softposreaderd12RemoteReader *v54;
  SEL v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _TtC14softposreaderd12RemoteReader *v66;
  _TtC14softposreaderd12RemoteReader *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t (*v72)(char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  const char *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  _QWORD v95[19];
  _TtC14softposreaderd12RemoteReader *v96;
  uint64_t v97;
  NSObject *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  NSObject *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  _QWORD *v131;
  char *v132;
  SecKeyRef v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136[5];
  uint64_t v137;
  unint64_t v138;
  CFErrorRef v139;

  v128 = a1;
  v6 = type metadata accessor for HPKE.Sender(0);
  v104 = *(_QWORD *)(v6 - 8);
  v105 = v6;
  __chkstk_darwin(v6);
  v118 = (char *)v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for HPKE.AEAD(0);
  v114 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v115 = (char *)v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for HPKE.KDF(0);
  v110 = *(_QWORD *)(v10 - 8);
  v111 = v10;
  __chkstk_darwin(v10);
  v113 = (char *)v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for HPKE.KEM(0);
  v107 = *(_QWORD *)(v12 - 8);
  v108 = v12;
  __chkstk_darwin(v12);
  v109 = (char *)v95 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for HPKE.Ciphersuite(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v112 = (char *)v95 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v119 = (char *)v95 - v18;
  v19 = type metadata accessor for SHA256(0);
  v121 = *(_QWORD *)(v19 - 8);
  v20 = __chkstk_darwin(v19);
  v117 = (char *)v95 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v124 = (char *)v95 - v22;
  v125 = type metadata accessor for SHA256Digest(0);
  v123 = *(_QWORD *)(v125 - 8);
  v23 = __chkstk_darwin(v125);
  v116 = (char *)v95 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v122 = (char *)v95 - v25;
  v130 = type metadata accessor for String.Encoding(0);
  v26 = *(_QWORD *)(v130 - 8);
  __chkstk_darwin(v130);
  v129 = (char *)v95 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  v29 = __chkstk_darwin(v28);
  v30 = __chkstk_darwin(v29);
  v132 = (char *)v95 - v31;
  v126 = v30;
  v127 = v32;
  v120 = v15;
  v106 = v33;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a3);
  }
  else
  {
    if (!*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      JUMPOUT(0x100109570);
    }
    v34 = *(id *)(a3 + 32);
  }
  v35 = v34;
  v36 = SecCertificateRef.publicKey.getter();

  v139 = 0;
  if (!v36)
    __break(1u);
  v133 = v36;
  v37 = SecKeyCopyExternalRepresentation(v36, &v139);
  if (v37)
  {
    v38 = v37;
    v103 = v14;
    v39 = v37;
    v40 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v38);
    v42 = v41;

    v136[0] = v40;
    v136[1] = (uint64_t)v42;
    sub_100005D9C(v40, (unint64_t)v42);
    P256.KeyAgreement.PublicKey.init<A>(x963Representation:)(v136, &type metadata for Data, &protocol witness table for Data);
    if (v3)
    {

      sub_100005DE0(v40, (unint64_t)v42);
      return v42;
    }
    v101 = a2;
    v102 = v39;
    v99 = 0;
    v100 = v19;
    v95[17] = v8;
    v97 = v40;
    v98 = v42;
    v63 = v131[27];
    v62 = v131[28];
    sub_100005EF8(v131 + 24, v63);
    v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v62 + 8) + 24))(v63);
    v65 = Double.description.getter(v64);
    v67 = v66;
    v68 = v129;
    static String.Encoding.utf8.getter(v65);
    v69 = String.data(using:allowLossyConversion:)(v68, 0, 0x7043656369766564, 0xED0000656D695475);
    v71 = v70;
    v72 = *(uint64_t (**)(char *, uint64_t))(v26 + 8);
    v73 = v130;
    v74 = v72(v68, v130);
    if (v71 >> 60 != 15)
    {
      v137 = v69;
      v138 = v71;
      static String.Encoding.utf8.getter(v74);
      v95[16] = v65;
      v96 = v67;
      v75 = String.data(using:allowLossyConversion:)(v68, 0, v65, v67);
      v77 = v76;
      v72(v68, v73);
      if (v77 >> 60 != 15)
      {
        Data.append(_:)(v75, v77);
        v78 = sub_10000A9B0(v75, v77);
        static String.Encoding.utf8.getter(v78);
        v79 = String.data(using:allowLossyConversion:)(v68, 0, v128, v101);
        v81 = v80;
        v72(v68, v73);
        v42 = v102;
        if (v81 >> 60 != 15)
        {
          v95[18] = v79;
          v95[15] = v81;
          Data.append(_:)(v79, v81);
          v92 = v138;
          sub_100005D9C(v137, v138);
          v93 = sub_100005F1C(&qword_1001B0C80, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
          dispatch thunk of HashFunction.init()(v100, v93);
          v94 = (char *)&loc_100108CB4 + *((int *)qword_10010A3D0 + (v92 >> 62));
          v95[14] = v72;
          __asm { BR              X9 }
        }
        swift_bridgeObjectRelease(v96, v82, v83, v84, v85, v86, v87, v88);
        v89 = sub_100024764(4000, 0xD00000000000002ELL, (void *)0x800000010016F9F0, 0);
        swift_willThrow(v89);
        sub_100005DE0(v97, (unint64_t)v98);

        sub_100005DE0(v137, v138);
        (*(void (**)(char *, uint64_t))(v127 + 8))(v132, v126);
        return v42;
      }
LABEL_26:
      __break(1u);
      JUMPOUT(0x10010A39CLL);
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v43 = v139;
  if (!v139)
  {
    __break(1u);
    goto LABEL_25;
  }
  if (qword_1001AD1E8 != -1)
    swift_once(&qword_1001AD1E8, sub_1000FAB88);
  v44 = type metadata accessor for Logger(0);
  sub_100003A14(v44, (uint64_t)qword_1001B2928);
  v45 = v43;
  v42 = Logger.logObject.getter(v45);
  v46 = static os_log_type_t.error.getter(v42);
  if (os_log_type_enabled(v42, v46))
  {
    v47 = (uint8_t *)swift_slowAlloc(12, -1);
    v48 = swift_slowAlloc(32, -1);
    v136[0] = v48;
    *(_DWORD *)v47 = 136315138;
    v132 = (char *)(v47 + 4);
    v134 = (uint64_t)v45;
    type metadata accessor for CFError(0);
    v50 = v49;
    v51 = v45;
    v52 = String.init<A>(describing:)(&v134, v50);
    v54 = (_TtC14softposreaderd12RemoteReader *)v53;
    v134 = sub_1000056EC(v52, v53, v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v132, v47 + 12);

    swift_bridgeObjectRelease(v54, v55, v56, v57, v58, v59, v60, v61);
    _os_log_impl((void *)&_mh_execute_header, v42, v46, "Error on SecKeyCopyExternalRepresentation: %s", v47, 0xCu);
    swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v47, -1, -1);

  }
  else
  {

  }
  v90 = sub_100024764(4000, 0xD000000000000029, (void *)0x800000010016F9C0, 0);
  swift_willThrow(v90);

  return v42;
}

uint64_t sub_10010A3F0(void *a1, id a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _TtC14softposreaderd12RemoteReader *v27;
  SEL v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  _QWORD v35[2];
  uint64_t v36[3];
  uint64_t v37;
  uint64_t v38;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 == 0) == (a2 == 0))
  {
    __break(1u);
LABEL_15:
    swift_once(&qword_1001AD1E8, sub_1000FAB88);
LABEL_4:
    v13 = sub_100003A14(v8, (uint64_t)qword_1001B2928);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "NFSecureElementReaderSession started", v16, 2u);
      swift_slowDealloc(v16, -1, -1);

    }
    else
    {

    }
    return OS_dispatch_semaphore.signal()();
  }
  if (a1)
  {
    swift_beginAccess(a3 + 16, v36, 1, 0);
    v12 = *(void **)(a3 + 16);
    *(_QWORD *)(a3 + 16) = a1;
    a2 = a1;

    if (qword_1001AD1E8 == -1)
      goto LABEL_4;
    goto LABEL_15;
  }
  if (qword_1001AD1E8 != -1)
    swift_once(&qword_1001AD1E8, sub_1000FAB88);
  v17 = sub_100003A14(v8, (uint64_t)qword_1001B2928);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v17, v8);
  swift_errorRetain();
  v18 = swift_errorRetain();
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.error.getter(v19);
  if (!os_log_type_enabled(v19, v20))
  {
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return OS_dispatch_semaphore.signal()();
  }
  v35[1] = a4;
  v21 = (uint8_t *)swift_slowAlloc(12, -1);
  result = swift_slowAlloc(32, -1);
  v36[0] = result;
  *(_DWORD *)v21 = 136315138;
  if (a2)
  {
    v23 = result;
    v37 = (uint64_t)a2;
    swift_errorRetain();
    v24 = sub_100003A2C((uint64_t *)&unk_1001B1280);
    v25 = String.init<A>(describing:)(&v37, v24);
    v27 = (_TtC14softposreaderd12RemoteReader *)v26;
    v37 = sub_1000056EC(v25, v26, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease(v27, v28, v29, v30, v31, v32, v33, v34);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Error from startSecureElementReaderSession: %s", v21, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v21, -1, -1);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return OS_dispatch_semaphore.signal()();
  }
  __break(1u);
  return result;
}

uint64_t sub_10010A748(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _BYTE v20[280];
  uint64_t v21;
  _BYTE v22[16];
  uint64_t v23;
  char v24;
  char v25;
  id v26;
  uint64_t v27;

  v2 = v1;
  v4 = (void *)v1[12];
  if (objc_msgSend(v4, "operationCount"))
  {
    if (qword_1001AD1E8 != -1)
      swift_once(&qword_1001AD1E8, sub_1000FAB88);
    v5 = type metadata accessor for Logger(0);
    sub_100003A14(v5, (uint64_t)qword_1001B2928);
    v6 = swift_retain();
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v9 = 134217984;
      v26 = objc_msgSend(v4, "operationCount");
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v9 + 4, v9 + 12);
      swift_release(v2);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%ld operations in Reader OperationQueue", v9, 0xCu);
      swift_slowDealloc(v9, -1, -1);

    }
    else
    {

      swift_release(v2);
    }
    v18 = (void *)0x800000010016F9A0;
    v16 = 4019;
    v17 = 0xD00000000000001FLL;
  }
  else
  {
    sub_100005EF8(v1 + 2, v1[5]);
    result = sub_1000F52D4(a1, 120.0);
    if ((result & 1) != 0)
      return result;
    if (qword_1001AD1E8 != -1)
      swift_once(&qword_1001AD1E8, sub_1000FAB88);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_100003A14(v11, (uint64_t)qword_1001B2928);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Not attested", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    sub_100005EF8(v2 + 7, v2[10]);
    sub_1000BB930(v20);
    sub_100024374((uint64_t)&v21, (uint64_t)v22, &qword_1001B2380);
    sub_100024374((uint64_t)v22, (uint64_t)&v23, &qword_1001B2380);
    if ((v25 & 1) == 0)
    {
      v19 = sub_10003D07C(v23, v24);
      return swift_willThrow(v19);
    }
    v16 = 4023;
    v17 = 0;
    v18 = 0;
  }
  v19 = sub_100024764(v16, v17, v18, 0);
  return swift_willThrow(v19);
}

_QWORD *sub_10010AA24(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _TtC14softposreaderd12RemoteReader *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  _TtC14softposreaderd12RemoteReader *v34;
  _TtC14softposreaderd12RemoteReader *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _TtC14softposreaderd12RemoteReader *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  _TtC14softposreaderd12RemoteReader *v45;
  SEL v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  _TtC14softposreaderd12RemoteReader *v53;
  SEL v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  SEL v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  uint64_t v75;
  _TtC14softposreaderd12RemoteReader *v76;
  SEL v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  _TtC14softposreaderd12RemoteReader *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  _BOOL4 v90;
  uint64_t v91;
  uint8_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t, uint64_t);
  uint64_t v97;
  _QWORD *result;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  const char *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  char v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  _TtC14softposreaderd12RemoteReader *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  _TtC14softposreaderd12RemoteReader *v119;
  NSObject *v120;
  os_log_type_t v121;
  _BOOL4 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint8_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(uint64_t, uint64_t);
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  _TtC14softposreaderd12RemoteReader *v136;
  void (*v137)(char *, uint64_t);
  uint64_t v138;
  _TtC14softposreaderd12RemoteReader *v139;
  SEL v140;
  id v141;
  id v142;
  id v143;
  id v144;
  id v145;
  id v146;
  uint64_t v147;
  _TtC14softposreaderd12RemoteReader *v148;
  SEL v149;
  id v150;
  id v151;
  id v152;
  id v153;
  id v154;
  id v155;
  SEL v156;
  id v157;
  id v158;
  id v159;
  id v160;
  id v161;
  id v162;
  SEL v163;
  id v164;
  id v165;
  id v166;
  id v167;
  id v168;
  id v169;
  _TtC14softposreaderd12RemoteReader *v170;
  SEL v171;
  id v172;
  id v173;
  id v174;
  id v175;
  id v176;
  id v177;
  uint64_t v178;
  NSObject *v179;
  os_log_type_t v180;
  uint8_t *v181;
  Swift::String v182;
  uint64_t v183;
  _TtC14softposreaderd12RemoteReader *v184;
  _TtC14softposreaderd12RemoteReader *v185;
  SEL v186;
  id v187;
  id v188;
  id v189;
  id v190;
  id v191;
  id v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  char *v199;
  int v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _TtC14softposreaderd12RemoteReader *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _TtC14softposreaderd12RemoteReader *v214;
  _TtC14softposreaderd12RemoteReader *v215;
  uint64_t v216;
  _QWORD *v217;
  _QWORD v218[36];
  _QWORD v219[37];
  uint64_t v220;
  uint64_t v221;

  v210 = a1;
  v4 = type metadata accessor for Date(0, a2);
  v202 = *(_QWORD *)(v4 - 8);
  v203 = v4;
  v5 = __chkstk_darwin(v4);
  v201 = (char *)&v194 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v199 = (char *)&v194 - v7;
  v211 = type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate(0);
  v198 = *(_QWORD *)(v211 - 8);
  __chkstk_darwin(v211);
  v9 = (char *)&v194 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003A2C((uint64_t *)&unk_1001B36F0);
  __chkstk_darwin(v10);
  v205 = (_TtC14softposreaderd12RemoteReader *)((char *)&v194 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v197 = (char *)&v194 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v212 = (uint64_t)&v194 - v16;
  v209 = v2;
  v17 = *(unsigned __int8 *)(*sub_100005EF8(v2 + 2, v2[5]) + 40);
  if (qword_1001AD1E8 != -1)
    swift_once(&qword_1001AD1E8, sub_1000FAB88);
  v18 = type metadata accessor for Logger(0);
  v204 = sub_100003A14(v18, (uint64_t)qword_1001B2928);
  v19 = Logger.logObject.getter(v204);
  v20 = static os_log_type_t.debug.getter();
  v21 = os_log_type_enabled(v19, v20);
  v206 = v13;
  v207 = v12;
  v208 = v3;
  v200 = v17;
  if (v21)
  {
    v22 = swift_slowAlloc(22, -1);
    v23 = swift_slowAlloc(64, -1);
    v213 = v23;
    *(_DWORD *)v22 = 136315394;
    v220 = sub_1000056EC(0xD00000000000001BLL, 0x800000010016F980, &v213);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, &v221, v22 + 4, v22 + 12);
    *(_WORD *)(v22 + 12) = 2080;
    if (v17)
      v24 = 0x656E696C66666FLL;
    else
      v24 = 0x656E696C6E6FLL;
    if (v17)
      v25 = (_TtC14softposreaderd12RemoteReader *)0xE700000000000000;
    else
      v25 = (_TtC14softposreaderd12RemoteReader *)0xE600000000000000;
    v220 = sub_1000056EC(v24, (unint64_t)v25, &v213);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, &v221, v22 + 14, v22 + 22);
    swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "%s, MPOCOperationMode: %s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }

  v196 = v209[18];
  v33 = sub_1000B11D4(v210 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_tpid, &v213);
  v34 = v214;
  v35 = v215;
  v36 = v216;
  v37 = v217;
  if (v214)
  {
    v38 = v213;
    v39 = v214;
  }
  else
  {
    v40 = UUID.uuidString.getter(v33);
    v41 = v208;
    v38 = sub_100081EE4(v40, v42);
    v208 = v41;
  }
  v43 = v210;
  v44 = (uint64_t *)(v210 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_profileID);
  v45 = *(_TtC14softposreaderd12RemoteReader **)(v210 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_profileID + 8);
  *v44 = v38;
  v44[1] = (uint64_t)v39;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v45, v46, v47, v48, v49, v50, v51, v52);
  v53 = *(_TtC14softposreaderd12RemoteReader **)(v43
                                               + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_pinBypassPrefixAIDs);
  v195 = OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_pinBypassPrefixAIDs;
  *(_QWORD *)(v43 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_pinBypassPrefixAIDs) = v36;
  swift_bridgeObjectRelease(v34, v54, v55, v56, v57, v58, v59, v60);
  swift_bridgeObjectRelease(v53, v61, v62, v63, v64, v65, v66, v67);
  swift_bridgeObjectRelease(v35, v68, v69, v70, v71, v72, v73, v74);
  v75 = OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_pinFallbackEnabledPrefixAIDs;
  v76 = *(_TtC14softposreaderd12RemoteReader **)(v43
                                               + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_pinFallbackEnabledPrefixAIDs);
  *(_QWORD *)(v43 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_pinFallbackEnabledPrefixAIDs) = v37;
  swift_bridgeObjectRelease(v76, v77, v78, v79, v80, v81, v82, v83);
  v84 = v205;
  sub_10005BC4C(v43 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_safTPID, (uint64_t)v205);
  v86 = v206;
  v85 = v207;
  if ((*(unsigned int (**)(_TtC14softposreaderd12RemoteReader *, uint64_t, uint64_t))(v206 + 48))(v84, 1, v207) == 1)
  {
    v87 = sub_10005218C((uint64_t)v84, (uint64_t *)&unk_1001B36F0);
    v88 = Logger.logObject.getter(v87);
    v89 = static os_log_type_t.default.getter();
    v90 = os_log_type_enabled(v88, v89);
    v91 = v208;
    if (v90)
    {
      v92 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v92 = 0;
      _os_log_impl((void *)&_mh_execute_header, v88, v89, "saftpid not present. Using tpid as profileID", v92, 2u);
      swift_slowDealloc(v92, -1, -1);
    }

    memcpy(v219, (const void *)(v210 + 168), 0x120uLL);
    v93 = v209[27];
    v94 = v209[28];
    sub_100005EF8(v209 + 24, v93);
    v95 = *(_QWORD *)(v94 + 8);
    v96 = *(void (**)(uint64_t, uint64_t))(v95 + 8);
    sub_10005BAFC(v219);
    v97 = (uint64_t)v201;
    v96(v93, v95);
    sub_100124D14(v97);
    if (v91)
    {
      (*(void (**)(uint64_t, uint64_t))(v202 + 8))(v97, v203);
      return sub_100054898(v219);
    }
    (*(void (**)(uint64_t, uint64_t))(v202 + 8))(v97, v203);
    result = sub_100054898(v219);
    if ((v200 & 1) == 0)
      return result;
LABEL_35:
    v133 = 0;
    goto LABEL_41;
  }
  (*(void (**)(uint64_t, _TtC14softposreaderd12RemoteReader *, uint64_t))(v86 + 32))(v212, v84, v85);
  v99 = sub_100005EF8(v209 + 45, v209[48]);
  v100 = *(_QWORD *)(*v99 + 72);
  v101 = *(_QWORD *)(v100 + 16);
  if (v101)
  {
    v102 = v100 + ((*(unsigned __int8 *)(v198 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v198 + 80));
    v103 = *(_QWORD *)(v198 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      v111 = static UUID.== infix(_:_:)(v102, v212);
      sub_10010E59C(v102, (uint64_t)v9);
      if ((v111 & 1) != 0)
      {
        v112 = v9[*(int *)(v211 + 20)];
        sub_10010E5E0((uint64_t)v9);
        if ((v112 & 1) != 0)
        {
          swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v100, v104, v105, v106, v107, v108, v109, v110);
          *(_BYTE *)(v210 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_isSAF) = 1;
          v113 = v212;
          sub_1000B11D4(v212, &v213);
          v114 = v213;
          v115 = v214;
          v205 = v215;
          v203 = v216;
          v209 = v217;
          v116 = v206;
          v117 = v197;
          v118 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v206 + 16))(v197, v113, v207);
          if (v115)
          {
            v119 = v115;
          }
          else
          {
            v134 = UUID.uuidString.getter(v118);
            v114 = sub_100081EE4(v134, v135);
            v119 = v136;
          }
          v137 = *(void (**)(char *, uint64_t))(v116 + 8);
          swift_bridgeObjectRetain();
          v138 = v207;
          v211 = (uint64_t)v137;
          v137(v117, v207);
          v139 = (_TtC14softposreaderd12RemoteReader *)v44[1];
          *v44 = v114;
          v44[1] = (uint64_t)v119;
          swift_bridgeObjectRelease(v139, v140, v141, v142, v143, v144, v145, v146);
          v147 = v210;
          v148 = *(_TtC14softposreaderd12RemoteReader **)(v210 + v195);
          *(_QWORD *)(v210 + v195) = v203;
          swift_bridgeObjectRelease(v115, v149, v150, v151, v152, v153, v154, v155);
          swift_bridgeObjectRelease(v148, v156, v157, v158, v159, v160, v161, v162);
          swift_bridgeObjectRelease(v205, v163, v164, v165, v166, v167, v168, v169);
          v170 = *(_TtC14softposreaderd12RemoteReader **)(v147 + v75);
          *(_QWORD *)(v147 + v75) = v209;
          swift_bridgeObjectRelease(v170, v171, v172, v173, v174, v175, v176, v177);
          v179 = Logger.logObject.getter(v178);
          v180 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v179, v180))
          {
            v181 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v181 = 0;
            _os_log_impl((void *)&_mh_execute_header, v179, v180, "saftpid present and isInSAFMode. Using saftpid as profileID", v181, 2u);
            swift_slowDealloc(v181, -1, -1);
          }

          result = (_QWORD *)((uint64_t (*)(uint64_t, uint64_t))v211)(v212, v138);
          if ((v200 & 1) == 0)
          {
            v133 = 1;
LABEL_41:
            v213 = 0;
            v214 = (_TtC14softposreaderd12RemoteReader *)0xE000000000000000;
            _StringGuts.grow(_:)(60);
            v182._countAndFlagsBits = 0xD00000000000003ALL;
            v182._object = (void *)0x800000010016F940;
            String.append(_:)(v182);
            if (v133)
              v183 = 0x656E696C66666FLL;
            else
              v183 = 0x656E696C6E6FLL;
            if (v133)
              v184 = (_TtC14softposreaderd12RemoteReader *)0xE700000000000000;
            else
              v184 = (_TtC14softposreaderd12RemoteReader *)0xE600000000000000;
            v185 = v184;
            String.append(_:)(*(Swift::String *)&v183);
            swift_bridgeObjectRelease(v184, v186, v187, v188, v189, v190, v191, v192);
            v193 = sub_100024764(4000, v213, v214, 0);
            return (_QWORD *)swift_willThrow(v193);
          }
          return result;
        }
      }
      else
      {
        sub_10010E5E0((uint64_t)v9);
      }
      v102 += v103;
      if (!--v101)
      {
        swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v100, v104, v105, v106, v107, v108, v109, v110);
        break;
      }
    }
  }
  v120 = Logger.logObject.getter(v99);
  v121 = static os_log_type_t.default.getter();
  v122 = os_log_type_enabled(v120, v121);
  v124 = v207;
  v123 = v208;
  v125 = v206;
  if (v122)
  {
    v126 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v126 = 0;
    _os_log_impl((void *)&_mh_execute_header, v120, v121, "saftpid present but NOT isInSAFMode. Using tpid as profileID", v126, 2u);
    swift_slowDealloc(v126, -1, -1);
  }

  memcpy(v218, (const void *)(v210 + 168), sizeof(v218));
  v127 = v209[27];
  v128 = v209[28];
  sub_100005EF8(v209 + 24, v127);
  v129 = *(_QWORD *)(v128 + 8);
  v130 = *(void (**)(uint64_t, uint64_t))(v129 + 8);
  sub_10005BAFC(v218);
  v131 = v127;
  v132 = (uint64_t)v199;
  v130(v131, v129);
  sub_100124D14(v132);
  if (v123)
  {
    sub_100054898(v218);
    (*(void (**)(uint64_t, uint64_t))(v202 + 8))(v132, v203);
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v125 + 8))(v212, v124);
  }
  sub_100054898(v218);
  (*(void (**)(uint64_t, uint64_t))(v202 + 8))(v132, v203);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v125 + 8))(v212, v124);
  if ((v200 & 1) != 0)
    goto LABEL_35;
  return result;
}

void sub_10010B3AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int16 v7;
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  Swift::String v29;
  const char *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  const char *v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  _TtC14softposreaderd12RemoteReader *v50;
  os_unfair_lock_s *v51;
  uint64_t v52;
  os_unfair_lock_s *v53;
  SEL v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  char v65;
  uint64_t v66;
  void *v67;
  void *v68;
  void *v69;
  _TtC14softposreaderd12RemoteReader *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  int64_t v78;
  char v79;
  unint64_t v80;
  unint64_t v81;
  SEL v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  uint64_t v89;
  SEL v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  _BYTE v100[240];

  v3 = *(_QWORD *)(v1 + 272);
  v4 = OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_isSAF;
  *(_BYTE *)(v3 + 134) = *(_BYTE *)(a1 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_isSAF);
  v5 = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(v3 + 168) = v5;
  v6 = *(unsigned __int8 *)(a1 + 72);
  *(_BYTE *)(v3 + 169) = v6;
  Data.toUInt16(endianness:)(1, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  *(_WORD *)(v3 + 170) = v7;
  v8 = sub_100003A2C((uint64_t *)&unk_1001B1290);
  inited = swift_initStackObject(v8, v100);
  *(_OWORD *)(inited + 16) = xmmword_10015E3E0;
  *(_BYTE *)(inited + 32) = 7;
  v10 = UUID.uuidString.getter(inited);
  v12 = sub_100081EE4(v10, v11);
  *(_QWORD *)(inited + 64) = &type metadata for String;
  *(_QWORD *)(inited + 40) = v12;
  *(_QWORD *)(inited + 48) = v13;
  *(_BYTE *)(inited + 72) = 8;
  v20 = *(_QWORD *)(a1 + 24);
  if ((unint64_t)v20 >> 62)
  {
    if (v20 < 0)
      v89 = *(_QWORD *)(a1 + 24);
    else
      v89 = v20 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v21 = _CocoaArrayWrapper.endIndex.getter(v89);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v20, v90, v91, v92, v93, v94, v95, v96);
  }
  else
  {
    v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *(_QWORD *)(inited + 104) = &type metadata for Int;
  *(_QWORD *)(inited + 80) = v21;
  *(_BYTE *)(inited + 112) = 17;
  v22 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(inited + 144) = &type metadata for Int;
  *(_QWORD *)(inited + 120) = v22;
  *(_BYTE *)(inited + 152) = 18;
  v23 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(inited + 184) = &type metadata for Int;
  *(_QWORD *)(inited + 160) = v23;
  *(_BYTE *)(inited + 192) = 23;
  v24 = *(_QWORD *)(a1 + 144);
  if (v24)
  {
    v98 = v5;
    v99 = v6;
    v25 = *(_QWORD *)(v24 + 16);
    if (v25)
    {
      v97 = v4;
      swift_bridgeObjectRetain();
      sub_100091C44(0, v25, 0);
      v26 = (unint64_t *)(v24 + 40);
      do
      {
        v27 = *(v26 - 1);
        v28 = *v26;
        sub_100005D9C(v27, *v26);
        v29 = Data.hexString()();
        sub_100005DE0(v27, v28);
        v38 = *(_QWORD *)&_swiftEmptyArrayStorage.instance[8];
        v37 = *(_QWORD *)&_swiftEmptyArrayStorage.instance[16];
        if (v38 >= v37 >> 1)
          sub_100091C44(v37 > 1, v38 + 1, 1);
        v26 += 2;
        *(_QWORD *)&_swiftEmptyArrayStorage.instance[8] = v38 + 1;
        *(Swift::String *)&_swiftEmptyArrayStorage.instance[16 * v38 + 24] = v29;
        --v25;
      }
      while (v25);
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v24, v30, v31, v32, v33, v34, v35, v36);
      v4 = v97;
    }
    v39 = sub_100003A2C((uint64_t *)&unk_1001AE460);
    v40 = sub_100030828((unint64_t *)&qword_1001B12B0, (uint64_t *)&unk_1001AE460, (uint64_t)&protocol conformance descriptor for [A]);
    v41 = BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v39, v40);
    v43 = v42;
    swift_bridgeObjectRelease(&_swiftEmptyArrayStorage, v42, v44, v45, v46, v47, v48, v49);
    *(_QWORD *)(inited + 224) = &type metadata for String;
    *(_QWORD *)(inited + 200) = v41;
    *(_QWORD *)(inited + 208) = v43;
    v6 = v99;
    v5 = v98;
  }
  else
  {
    *(_OWORD *)(inited + 200) = 0u;
    *(_OWORD *)(inited + 216) = 0u;
  }
  v50 = (_TtC14softposreaderd12RemoteReader *)sub_1000E8C74(inited, v13, v14, v15, v16, v17, v18, v19);
  v51 = *(os_unfair_lock_s **)(v3 + 56);
  v52 = (uint64_t)&v51[4];
  v53 = v51 + 8;
  os_unfair_lock_lock(v51 + 8);
  sub_100060510(v52, (uint64_t)v50);
  os_unfair_lock_unlock(v53);
  swift_bridgeObjectRelease(v50, v54, v55, v56, v57, v58, v59, v60);
  if ((unint64_t)(v5 - 2) < 2)
  {
    v70 = sub_100091C38(0, 1, 1, (uint64_t)&_swiftEmptyArrayStorage, v61, v62, v63, v64);
    v72 = *(_QWORD *)&v70->instance[8];
    v74 = *(_QWORD *)&v70->instance[16];
    v73 = v72 + 1;
    if (v72 >= v74 >> 1)
      v70 = sub_100091C38((_TtC14softposreaderd12RemoteReader *)(v74 > 1), v72 + 1, 1, (uint64_t)v70, v66, v67, v68, v69);
    v65 = 3;
  }
  else if (v5 == 1)
  {
    v70 = sub_100091C38(0, 1, 1, (uint64_t)&_swiftEmptyArrayStorage, v61, v62, v63, v64);
    v72 = *(_QWORD *)&v70->instance[8];
    v75 = *(_QWORD *)&v70->instance[16];
    v73 = v72 + 1;
    if (v72 >= v75 >> 1)
      v70 = sub_100091C38((_TtC14softposreaderd12RemoteReader *)(v75 > 1), v72 + 1, 1, (uint64_t)v70, v66, v67, v68, v69);
    v65 = 2;
  }
  else if (v5)
  {
    v70 = sub_100091C38(0, 1, 1, (uint64_t)&_swiftEmptyArrayStorage, v61, v62, v63, v64);
    v72 = *(_QWORD *)&v70->instance[8];
    v76 = *(_QWORD *)&v70->instance[16];
    v73 = v72 + 1;
    if (v72 >= v76 >> 1)
      v70 = sub_100091C38((_TtC14softposreaderd12RemoteReader *)(v76 > 1), v72 + 1, 1, (uint64_t)v70, v66, v67, v68, v69);
    v65 = 4;
  }
  else
  {
    v65 = 1;
    v70 = sub_100091C38(0, 1, 1, (uint64_t)&_swiftEmptyArrayStorage, v61, v62, v63, v64);
    v72 = *(_QWORD *)&v70->instance[8];
    v71 = *(_QWORD *)&v70->instance[16];
    v73 = v72 + 1;
    if (v72 >= v71 >> 1)
    {
      v65 = 1;
      v70 = sub_100091C38((_TtC14softposreaderd12RemoteReader *)(v71 > 1), v72 + 1, 1, (uint64_t)v70, v66, v67, v68, v69);
    }
  }
  *(_QWORD *)&v70->instance[8] = v73;
  v70->instance[v72 + 24] = v65;
  if (v6 == 32)
  {
    v77 = *(_QWORD *)&v70->instance[16];
    v78 = v73 + 1;
    v79 = 6;
  }
  else
  {
    v77 = *(_QWORD *)&v70->instance[16];
    v78 = v73 + 1;
    if (v6)
      v79 = 7;
    else
      v79 = 5;
  }
  if (v73 >= v77 >> 1)
    v70 = sub_100091C38((_TtC14softposreaderd12RemoteReader *)(v77 > 1), v78, 1, (uint64_t)v70, v66, v67, v68, v69);
  *(_QWORD *)&v70->instance[8] = v78;
  v70->instance[v73 + 24] = v79;
  if (*(_BYTE *)(a1 + v4) == 1)
  {
    v81 = *(_QWORD *)&v70->instance[8];
    v80 = *(_QWORD *)&v70->instance[16];
    if (v81 >= v80 >> 1)
      v70 = sub_100091C38((_TtC14softposreaderd12RemoteReader *)(v80 > 1), v81 + 1, 1, (uint64_t)v70, v66, v67, v68, v69);
    *(_QWORD *)&v70->instance[8] = v81 + 1;
    v70->instance[v81 + 24] = 39;
  }
  sub_100005EF8((_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 40));
  sub_10003964C((uint64_t)v70);
  swift_bridgeObjectRelease(v70, v82, v83, v84, v85, v86, v87, v88);
}

void sub_10010B8F8()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  _TtC14softposreaderd12RemoteReader **v4;

  v1 = *(_QWORD *)(v0 + 272);
  *(_QWORD *)(v1 + 144) = 4013;
  *(_WORD *)(v1 + 121) = 0;
  *(_BYTE *)(v1 + 127) = 1;
  v2 = *(os_unfair_lock_s **)(v1 + 56);
  v3 = v2 + 8;
  v4 = (_TtC14softposreaderd12RemoteReader **)&v2[4];
  os_unfair_lock_lock(v2 + 8);
  sub_100080B88(v4, 0);
  os_unfair_lock_unlock(v3);
  os_unfair_lock_lock(v3);
  sub_100080B88(v4, 1);
  os_unfair_lock_unlock(v3);
  sub_100005EF8((_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 40));
  sub_10003964C((uint64_t)&off_100199280);
}

id sub_10010B9D8(void *a1, void *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  int v11;
  uint32_t *p_align;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  _TtC14softposreaderd12RemoteReader *v17;
  _TtC14softposreaderd12RemoteReader *v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  unsigned int v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  Swift::String v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  _TtC14softposreaderd12RemoteReader *v41;
  _TtC14softposreaderd12RemoteReader *v42;
  SEL v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  _TtC14softposreaderd12RemoteReader *v52;
  SEL v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  _TtC14softposreaderd12RemoteReader *v60;
  id v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  id v66;
  _TtC14softposreaderd12RemoteReader *v67;
  _TtC14softposreaderd12RemoteReader *v68;
  uint64_t v69;
  unint64_t v70;
  id v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  void *v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  id result;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  SEL v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  SEL v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  unsigned int v111;
  uint64_t v112;
  _TtC14softposreaderd12RemoteReader *v113;
  _QWORD *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120[4];
  uint64_t v121;
  uint64_t v122;

  v118 = a3;
  v119 = a4;
  v109 = a1;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v116 = *(_QWORD *)(v5 - 8);
  v117 = v5;
  __chkstk_darwin(v5);
  v115 = (char *)&v109 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001AD1E8 != -1)
    swift_once(&qword_1001AD1E8, sub_1000FAB88);
  v7 = type metadata accessor for Logger(0);
  sub_100003A14(v7, (uint64_t)qword_1001B2928);
  v8 = a2;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  v11 = v10;
  p_align = &stru_1001A9FE8.align;
  if (os_log_type_enabled(v9, v10))
  {
    v13 = swift_slowAlloc(38, -1);
    LODWORD(v112) = v11;
    v14 = v13;
    v113 = (_TtC14softposreaderd12RemoteReader *)swift_slowAlloc(96, -1);
    v120[0] = (uint64_t)v113;
    *(_DWORD *)v14 = 136315906;
    v15 = objc_msgSend(v8, "transactionId");
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v18 = v17;

    v121 = sub_1000056EC(v16, (unint64_t)v18, v120);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122, v14 + 4, v14 + 12);

    swift_bridgeObjectRelease(v18, v19, v20, v21, v22, v23, v24, v25);
    *(_WORD *)(v14 + 12) = 1024;
    v26 = objc_msgSend(v8, "isPINBypassAllowed");

    LODWORD(v121) = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, (char *)&v121 + 4, v14 + 14, v14 + 18);

    *(_WORD *)(v14 + 18) = 2080;
    v27 = objc_msgSend(v8, "fingerprint");
    v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v27);
    v30 = v29;

    v31 = Data.hexString()();
    sub_100005DE0(v28, v30);
    p_align = (_DWORD *)(&stru_1001A9FE8 + 24);
    v121 = sub_1000056EC(v31._countAndFlagsBits, (unint64_t)v31._object, v120);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122, v14 + 20, v14 + 28);

    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v31._object, v32, v33, v34, v35, v36, v37, v38);
    *(_WORD *)(v14 + 28) = 2080;
    v39 = objc_msgSend(v8, "pinKekId");
    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
    v42 = v41;

    swift_bridgeObjectRelease(v42, v43, v44, v45, v46, v47, v48, v49);
    v50 = ((unint64_t)v42 >> 56) & 0xF;
    if (((unint64_t)v42 & 0x2000000000000000) == 0)
      v50 = v40 & 0xFFFFFFFFFFFFLL;
    if (v50)
      v51 = 0x746E6573657270;
    else
      v51 = 0x7974706D65;
    if (v50)
      v52 = (_TtC14softposreaderd12RemoteReader *)0xE700000000000000;
    else
      v52 = (_TtC14softposreaderd12RemoteReader *)0xE500000000000000;
    v121 = sub_1000056EC(v51, (unint64_t)v52, v120);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122, v14 + 30, v14 + 38);

    swift_bridgeObjectRelease(v52, v53, v54, v55, v56, v57, v58, v59);
    _os_log_impl((void *)&_mh_execute_header, v9, (os_log_type_t)v112, "onSuccessWithInternalTransactionData, transactionId: %s, isPINBypassAllowed: %{BOOL}d, fingerprint: %s, pinKekId: %s", (uint8_t *)v14, 0x26u);
    v60 = v113;
    swift_arrayDestroy(v113, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v60, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

  }
  v61 = objc_msgSend(v8, "pinKekId", v109);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v61);

  v62 = Data.init(hexString:)();
  if (v63 >> 60 == 15)
    v64 = 0;
  else
    v64 = v62;
  if (v63 >> 60 == 15)
    v65 = 0xC000000000000000;
  else
    v65 = v63;
  LODWORD(v113) = objc_msgSend(v8, "pinRequired");
  v66 = objc_msgSend(v8, *((SEL *)p_align + 272));
  v112 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
  v68 = v67;

  v69 = v118;
  v70 = v119;
  sub_100005D9C(v118, v119);
  sub_100005D9C(v64, v65);
  v111 = objc_msgSend(v8, "isPINBypassAllowed");
  v110 = v8;
  v71 = objc_msgSend(v8, "fingerprint");
  v72 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v71);
  v74 = v73;

  v75 = (void *)v114[34];
  v76 = sub_100005EF8(v114 + 35, v114[38]);
  v120[3] = (uint64_t)&type metadata for InternalTransactionData;
  v77 = swift_allocObject(&unk_10019F438, 96, 7);
  v120[0] = v77;
  *(_BYTE *)(v77 + 16) = (_BYTE)v113;
  *(_QWORD *)(v77 + 24) = v112;
  *(_QWORD *)(v77 + 32) = v68;
  *(_QWORD *)(v77 + 40) = v69;
  *(_QWORD *)(v77 + 48) = v70;
  *(_QWORD *)(v77 + 56) = v64;
  *(_QWORD *)(v77 + 64) = v65;
  *(_BYTE *)(v77 + 72) = v111;
  *(_QWORD *)(v77 + 80) = v72;
  *(_QWORD *)(v77 + 88) = v74;
  v78 = (_QWORD *)*v76;
  v79 = (_QWORD *)v78[3];
  v113 = v68;
  v114 = v79;
  swift_bridgeObjectRetain();
  v80 = v70;
  v81 = v65;
  v82 = v64;
  sub_100005D9C(v69, v80);
  sub_100005D9C(v64, v81);
  v112 = v72;
  sub_100005D9C(v72, v74);
  v83 = swift_retain();
  v84 = v115;
  v85 = static DispatchWorkItemFlags.barrier.getter(v83);
  __chkstk_darwin(v85);
  *(&v109 - 6) = v78;
  *((_BYTE *)&v109 - 40) = 0;
  *(&v109 - 4) = v120;
  *(&v109 - 3) = (id)0x404E000000000000;
  *(&v109 - 2) = sub_10010E594;
  *(&v109 - 1) = v75;
  OS_dispatch_queue.sync<A>(flags:execute:)(&type metadata for (), v84, sub_100037FB0, &v109 - 8, &type metadata for () + 1);
  (*(void (**)(char *, uint64_t))(v116 + 8))(v84, v117);
  swift_release(v75);
  sub_100005D3C(v120);
  if (qword_1001AD308 != -1)
    swift_once(&qword_1001AD308, sub_10013E994);
  v86 = static GlobalState.shared;
  result = objc_msgSend(*(id *)(static GlobalState.shared + 72), "lock");
  v88 = *(_QWORD *)(v86 + 96);
  v89 = __OFADD__(v88, 1);
  v90 = v88 + 1;
  if (v89)
  {
    __break(1u);
LABEL_32:
    __break(1u);
    return result;
  }
  *(_QWORD *)(v86 + 96) = v90;
  v91 = v110;
  while (*(uint64_t *)(v86 + 88) > 0 || *(_BYTE *)(v86 + 80) == 1)
    result = objc_msgSend(*(id *)(v86 + 72), "wait");
  v92 = *(_QWORD *)(v86 + 96);
  v89 = __OFSUB__(v92, 1);
  v93 = v92 - 1;
  if (v89)
    goto LABEL_32;
  *(_QWORD *)(v86 + 96) = v93;
  *(_BYTE *)(v86 + 80) = 1;
  objc_msgSend(*(id *)(v86 + 72), "unlock");
  *(_BYTE *)(v86 + 33) = 1;
  sub_10013E340();
  objc_msgSend(*(id *)(v86 + 72), "lock");
  *(_BYTE *)(v86 + 80) = 0;
  objc_msgSend(*(id *)(v86 + 72), "broadcast");
  objc_msgSend(*(id *)(v86 + 72), "unlock");
  v94 = v109;
  if ((objc_msgSend(v109, "respondsToSelector:", "onSuccessWithTransactionData:") & 1) != 0)
  {
    objc_msgSend((id)swift_unknownObjectRetain(v94), "onSuccessWithTransactionData:", v91);
    sub_100005DE0(v82, v81);
    swift_bridgeObjectRelease(v113, v95, v96, v97, v98, v99, v100, v101);
    sub_100005DE0(v118, v119);
    sub_100005DE0(v82, v81);
    sub_100005DE0(v112, v74);
    return (id)swift_unknownObjectRelease(v94);
  }
  else
  {
    sub_100005DE0(v82, v81);
    swift_bridgeObjectRelease(v113, v102, v103, v104, v105, v106, v107, v108);
    sub_100005DE0(v118, v119);
    sub_100005DE0(v82, v81);
    return (id)sub_100005DE0(v112, v74);
  }
}

void sub_10010C160()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  void (*v8)(_BYTE *, uint64_t);
  char v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  _BYTE v15[16];

  v0 = type metadata accessor for DispatchTime(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = __chkstk_darwin(v2);
  v7 = &v15[-v6];
  static DispatchTime.now()(v5);
  + infix(_:_:)(v4);
  v8 = *(void (**)(_BYTE *, uint64_t))(v1 + 8);
  v8(v4, v0);
  sub_1000411FC((uint64_t)v7);
  LOBYTE(v1) = v9;
  v8(v7, v0);
  if ((v1 & 1) == 0)
  {
    if (qword_1001AD1E8 != -1)
      swift_once(&qword_1001AD1E8, sub_1000FAB88);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_100003A14(v10, (uint64_t)qword_1001B2928);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "failed to obtain session to clear PAN after a readCard", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

  }
  sub_10004C904();
}

void sub_10010C2F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  if (qword_1001AD248 != -1)
    swift_once(&qword_1001AD248, sub_1001162D0);
  NFSecureElementManagerSession.select(_:)(AID_PIN_APPLET, *(unint64_t *)algn_1001B4F68);
  if (v0)
  {
    if (qword_1001AD1E8 != -1)
      swift_once(&qword_1001AD1E8, sub_1000FAB88);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_100003A14(v1, (uint64_t)qword_1001B2928);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.error.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "failed to select PIN applet to clear PAN in NVM", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }
    swift_errorRelease();

  }
  else
  {
    sub_100120194();
  }
}

id sub_10010C428(void *a1)
{
  return sub_1000FAFD0(a1);
}

uint64_t sub_10010C448(void *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  return sub_1000FB1FC(a1, a2, a3, a4);
}

void sub_10010C468()
{
  sub_1001013C0();
}

uint64_t sub_10010C488(_QWORD *a1, _TtC14softposreaderd12RemoteReader *a2, uint64_t a3, unint64_t a4)
{
  return sub_100104798(a1, a2, a3, a4);
}

uint64_t sub_10010C4A8(_TtC14softposreaderd12RemoteReader *a1, uint64_t a2, _TtC14softposreaderd12RemoteReader *a3, uint64_t a4, unint64_t a5, uint64_t a6, _TtC14softposreaderd12RemoteReader *a7, uint64_t a8, _TtC14softposreaderd12RemoteReader *a9, uint64_t a10, _TtC14softposreaderd12RemoteReader *a11)
{
  return sub_10010171C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

void sub_10010C4E0(uint64_t a1, unint64_t a2, uint64_t a3, _TtC14softposreaderd12RemoteReader *a4, uint64_t a5, _TtC14softposreaderd12RemoteReader *a6, unint64_t a7)
{
  sub_1001034C0(a1, a2, a3, a4, a5, a6, a7);
}

NSObject *sub_10010C500(uint64_t a1, uint64_t a2)
{
  return sub_100108290(a1, a2);
}

void sub_10010C520(uint64_t a1)
{
  sub_100108098(a1);
}

void sub_10010C540()
{
  __asm { BR              X11 }
}

_QWORD *sub_10010C5A0@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *(*v3)(_QWORD **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;

  v8 = v4;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  v10 = BYTE4(a1);
  v11 = BYTE5(a1);
  v12 = BYTE6(a1);
  result = v3(&v7, &v8, (char *)&v8 + BYTE6(a1));
  if (!v2)
    result = v7;
  v6 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  *v1 = v8;
  v1[1] = v6;
  return result;
}

_BYTE *sub_10010C830@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)sub_10010DAA4(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)sub_10010DB64((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)sub_10010DBDC((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

_QWORD *sub_10010C8A4(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (a3)
  {
    result = a1(&v6, a3, a4 - a3);
    if (v4)
      return result;
    return (_QWORD *)v6;
  }
  result = a1(&v6, 0, 0);
  if (!v4)
    return (_QWORD *)v6;
  return result;
}

char *sub_10010C908(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (char *)__DataStorage._bytes.getter();
  if (!result)
    goto LABEL_12;
  v8 = result;
  result = (char *)__DataStorage._offset.getter();
  v9 = a1 - (_QWORD)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = __DataStorage._length.getter();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3)
    return (char *)v14;
  return result;
}

uint64_t sub_10010C9B4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = __DataStorage._bytes.getter();
  v5 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v5 += a1 - result;
  }
  v6 = __OFSUB__(a2, a1);
  v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }
  v8 = __DataStorage._length.getter();
  if (v8 >= v7)
    v9 = v7;
  else
    v9 = v8;
  v10 = v5 + v9;
  if (v5)
    v11 = v10;
  else
    v11 = 0;
  v12 = type metadata accessor for SHA256(0);
  v13 = sub_100005F1C(&qword_1001B0C80, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
  return dispatch thunk of HashFunction.update(bufferPointer:)(v5, v11, v12, v13);
}

_OWORD *sub_10010CA78@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, _OWORD *a5@<X8>)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _OWORD *result;
  unint64_t v22;
  char v23;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = sub_10000ADC4(a2, a3);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a4 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        sub_100005D2C((_OWORD *)(v20[7] + 32 * v14), a5);
        return sub_100005D2C(a1, (_OWORD *)(v20[7] + 32 * v14));
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a4 & 1) == 0)
    {
      sub_10000BAB0();
      goto LABEL_7;
    }
    sub_10000B2F0(v17, a4 & 1);
    v22 = sub_10000ADC4(a2, a3);
    if ((v18 & 1) == (v23 & 1))
    {
      v14 = v22;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10000B890(v14, a2, a3, a1, v20);
      *a5 = 0u;
      a5[1] = 0u;
      return (_OWORD *)swift_bridgeObjectRetain();
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10010CBCC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  if (result)
  {
    v5 = result;
    v8 = *a3;
    v7 = a3[1];
    swift_bridgeObjectRetain(v7);
    result = _StringGuts.copyUTF8(into:)(v5, a2, v8, v7);
    if ((v9 & 1) == 0)
    {
      v10 = result;
      result = swift_bridgeObjectRelease(v7);
      *a4 = 0;
      a4[1] = 0xE000000000000000;
      a4[2] = 15;
      a4[3] = v10;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10010CC54(_TtC14softposreaderd12RemoteReader **a1, unsigned __int8 *a2)
{
  return sub_100080B88(a1, *a2);
}

uint64_t sub_10010CC6C(uint64_t a1, unsigned __int8 *a2)
{
  return sub_10007FE5C(a1, *a2);
}

uint64_t sub_10010CC84(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15)
{
  char v20;
  uint64_t v21;
  __int128 *v22;
  id v23;
  uint64_t v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _TtC14softposreaderd12RemoteReader *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _TtC14softposreaderd12RemoteReader *v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  uint64_t v52;
  _TtC14softposreaderd12RemoteReader *v53;
  _TtC14softposreaderd12RemoteReader *v54;
  uint64_t v55;
  SEL v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _TtC14softposreaderd12RemoteReader *v66;
  SEL v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _TtC14softposreaderd12RemoteReader *v77;
  SEL v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _TtC14softposreaderd12RemoteReader *v88;
  SEL v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  _TtC14softposreaderd12RemoteReader *v99;
  SEL v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  _TtC14softposreaderd12RemoteReader *v110;
  SEL v111;
  id v112;
  id v113;
  id v114;
  id v115;
  id v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  _TtC14softposreaderd12RemoteReader *v121;
  SEL v122;
  id v123;
  id v124;
  id v125;
  id v126;
  id v127;
  id v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  _TtC14softposreaderd12RemoteReader *v132;
  SEL v133;
  id v134;
  id v135;
  id v136;
  id v137;
  id v138;
  id v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  _TtC14softposreaderd12RemoteReader *v143;
  SEL v144;
  id v145;
  id v146;
  id v147;
  id v148;
  id v149;
  id v150;
  uint64_t v151;
  _TtC14softposreaderd12RemoteReader *v152;
  SEL v153;
  id v154;
  id v155;
  id v156;
  id v157;
  id v158;
  id v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  _TtC14softposreaderd12RemoteReader *v163;
  SEL v164;
  id v165;
  id v166;
  id v167;
  id v168;
  id v169;
  id v170;
  os_log_type_t type;
  uint64_t v173;
  uint64_t v177;
  _BYTE v178[32];
  uint64_t v179;
  _QWORD v180[5];
  _QWORD v181[5];
  _QWORD v182[5];
  _QWORD v183[5];
  _QWORD v184[5];
  _QWORD v185[5];
  _QWORD v186[5];
  _QWORD v187[5];
  _QWORD v188[5];
  _QWORD v189[5];
  __int128 v190;
  uint64_t v191;
  _UNKNOWN **v192;
  __int128 v193;
  uint64_t v194;
  _UNKNOWN **v195;
  __int128 v196;
  uint64_t v197;
  _UNKNOWN **v198;
  __int128 v199;
  uint64_t v200;
  _UNKNOWN **v201;
  __int128 v202;
  uint64_t v203;
  _UNKNOWN **v204;
  __int128 v205;
  uint64_t v206;
  _UNKNOWN **v207;
  __int128 v208;
  uint64_t v209;
  _UNKNOWN **v210;
  __int128 v211;
  uint64_t v212;
  _UNKNOWN **v213;
  __int128 v214;
  uint64_t v215;
  _UNKNOWN **v216;

  v215 = type metadata accessor for MPOCDefaultMonitorManager();
  v216 = &off_10019F1B0;
  *(_QWORD *)&v214 = a1;
  v212 = type metadata accessor for MPOCDefaultAttestationManager();
  v213 = &off_10019D8B8;
  *(_QWORD *)&v211 = a2;
  v209 = type metadata accessor for CertificateManager();
  v210 = &off_100199940;
  *(_QWORD *)&v208 = a4;
  v206 = type metadata accessor for SignerFactory();
  v207 = &off_10019FF20;
  *(_QWORD *)&v205 = a6;
  v204 = &off_10019C0A0;
  v203 = type metadata accessor for DefaultSecureTimeKeeper();
  *(_QWORD *)&v202 = a7;
  v201 = &off_10019D700;
  v200 = type metadata accessor for DefaultManagedDictionary();
  *(_QWORD *)&v199 = a10;
  v198 = &off_10019F8A0;
  v197 = type metadata accessor for SystemInfo();
  *(_QWORD *)&v196 = a11;
  v195 = &off_1001A11A8;
  v194 = type metadata accessor for SecureElement();
  *(_QWORD *)&v193 = a12;
  v192 = &off_1001A07D8;
  v191 = type metadata accessor for StoreAndForwardSelector();
  *(_QWORD *)&v190 = a14;
  *(_QWORD *)(a15 + 448) = 0;
  if (qword_1001AD1E8 != -1)
    swift_once(&qword_1001AD1E8, sub_1000FAB88);
  v20 = a13;
  v21 = type metadata accessor for Logger(0);
  sub_100003A14(v21, (uint64_t)qword_1001B2928);
  sub_100008390((uint64_t)&v214, (uint64_t)v189);
  sub_100008390((uint64_t)&v211, (uint64_t)v188);
  sub_100008390((uint64_t)&v208, (uint64_t)v187);
  sub_100008390((uint64_t)&v205, (uint64_t)v186);
  sub_100008390((uint64_t)&v202, (uint64_t)v185);
  v22 = (__int128 *)a8;
  sub_100008390(a8, (uint64_t)v184);
  sub_100008390((uint64_t)&v199, (uint64_t)v183);
  sub_100008390((uint64_t)&v196, (uint64_t)v182);
  sub_100008390((uint64_t)&v193, (uint64_t)v181);
  sub_100008390((uint64_t)&v190, (uint64_t)v180);
  v23 = a3;
  v24 = a9;
  swift_retain_n(a9, 2);
  v25 = v23;
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = swift_slowAlloc(132, -1);
    v173 = swift_slowAlloc(416, -1);
    v179 = v173;
    *(_DWORD *)v28 = 136318210;
    sub_100008390((uint64_t)v189, (uint64_t)&v177);
    v29 = sub_100003A2C(&qword_1001AF6C0);
    v30 = String.init<A>(describing:)(&v177, v29);
    type = v27;
    v32 = (_TtC14softposreaderd12RemoteReader *)v31;
    v177 = sub_1000056EC(v30, v31, &v179);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178, v28 + 4, v28 + 12);
    swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
    sub_100005D3C(v189);
    *(_WORD *)(v28 + 12) = 2080;
    sub_100008390((uint64_t)v188, (uint64_t)&v177);
    v40 = sub_100003A2C(&qword_1001B07D0);
    v41 = String.init<A>(describing:)(&v177, v40);
    v43 = (_TtC14softposreaderd12RemoteReader *)v42;
    v177 = sub_1000056EC(v41, v42, &v179);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178, v28 + 14, v28 + 22);
    swift_bridgeObjectRelease(v43, v44, v45, v46, v47, v48, v49, v50);
    sub_100005D3C(v188);
    *(_WORD *)(v28 + 22) = 2080;
    v51 = objc_msgSend(v25, "description");
    v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
    v54 = v53;

    v55 = v52;
    v24 = a9;
    v177 = sub_1000056EC(v55, (unint64_t)v54, &v179);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178, v28 + 24, v28 + 32);

    swift_bridgeObjectRelease(v54, v56, v57, v58, v59, v60, v61, v62);
    *(_WORD *)(v28 + 32) = 2080;
    sub_100008390((uint64_t)v187, (uint64_t)&v177);
    v63 = sub_100003A2C(&qword_1001AF6A0);
    v64 = String.init<A>(describing:)(&v177, v63);
    v66 = (_TtC14softposreaderd12RemoteReader *)v65;
    v177 = sub_1000056EC(v64, v65, &v179);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178, v28 + 34, v28 + 42);
    swift_bridgeObjectRelease(v66, v67, v68, v69, v70, v71, v72, v73);
    sub_100005D3C(v187);
    *(_WORD *)(v28 + 42) = 2080;
    sub_100008390((uint64_t)v186, (uint64_t)&v177);
    v74 = sub_100003A2C(&qword_1001B07E0);
    v75 = String.init<A>(describing:)(&v177, v74);
    v77 = (_TtC14softposreaderd12RemoteReader *)v76;
    v177 = sub_1000056EC(v75, v76, &v179);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178, v28 + 44, v28 + 52);
    swift_bridgeObjectRelease(v77, v78, v79, v80, v81, v82, v83, v84);
    sub_100005D3C(v186);
    *(_WORD *)(v28 + 52) = 2080;
    sub_100008390((uint64_t)v185, (uint64_t)&v177);
    v85 = sub_100003A2C(&qword_1001AF2C8);
    v86 = String.init<A>(describing:)(&v177, v85);
    v88 = (_TtC14softposreaderd12RemoteReader *)v87;
    v177 = sub_1000056EC(v86, v87, &v179);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178, v28 + 54, v28 + 62);
    swift_bridgeObjectRelease(v88, v89, v90, v91, v92, v93, v94, v95);
    sub_100005D3C(v185);
    *(_WORD *)(v28 + 62) = 2080;
    sub_100008390((uint64_t)v184, (uint64_t)&v177);
    v96 = sub_100003A2C(&qword_1001AF6A8);
    v97 = String.init<A>(describing:)(&v177, v96);
    v99 = (_TtC14softposreaderd12RemoteReader *)v98;
    v177 = sub_1000056EC(v97, v98, &v179);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178, v28 + 64, v28 + 72);
    swift_bridgeObjectRelease(v99, v100, v101, v102, v103, v104, v105, v106);
    sub_100005D3C(v184);
    *(_WORD *)(v28 + 72) = 2080;
    v177 = a9;
    v107 = type metadata accessor for ReaderAnalytics(0);
    swift_retain();
    v108 = String.init<A>(describing:)(&v177, v107);
    v110 = (_TtC14softposreaderd12RemoteReader *)v109;
    v177 = sub_1000056EC(v108, v109, &v179);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178, v28 + 74, v28 + 82);
    swift_release_n(a9, 2);
    swift_bridgeObjectRelease(v110, v111, v112, v113, v114, v115, v116, v117);
    *(_WORD *)(v28 + 82) = 2080;
    sub_100008390((uint64_t)v183, (uint64_t)&v177);
    v118 = sub_100003A2C(&qword_1001AF6B0);
    v119 = String.init<A>(describing:)(&v177, v118);
    v121 = (_TtC14softposreaderd12RemoteReader *)v120;
    v177 = sub_1000056EC(v119, v120, &v179);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178, v28 + 84, v28 + 92);
    swift_bridgeObjectRelease(v121, v122, v123, v124, v125, v126, v127, v128);
    sub_100005D3C(v183);
    *(_WORD *)(v28 + 92) = 2080;
    sub_100008390((uint64_t)v182, (uint64_t)&v177);
    v129 = sub_100003A2C(&qword_1001AF6C8);
    v130 = String.init<A>(describing:)(&v177, v129);
    v132 = (_TtC14softposreaderd12RemoteReader *)v131;
    v177 = sub_1000056EC(v130, v131, &v179);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178, v28 + 94, v28 + 102);
    swift_bridgeObjectRelease(v132, v133, v134, v135, v136, v137, v138, v139);
    sub_100005D3C(v182);
    *(_WORD *)(v28 + 102) = 2080;
    sub_100008390((uint64_t)v181, (uint64_t)&v177);
    v140 = sub_100003A2C(&qword_1001AF6B8);
    v141 = String.init<A>(describing:)(&v177, v140);
    v143 = (_TtC14softposreaderd12RemoteReader *)v142;
    v177 = sub_1000056EC(v141, v142, &v179);
    v20 = a13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178, v28 + 104, v28 + 112);
    swift_bridgeObjectRelease(v143, v144, v145, v146, v147, v148, v149, v150);
    sub_100005D3C(v181);
    *(_WORD *)(v28 + 112) = 2080;
    if ((a13 & 1) != 0)
      v151 = 1702195828;
    else
      v151 = 0x65736C6166;
    if ((a13 & 1) != 0)
      v152 = (_TtC14softposreaderd12RemoteReader *)0xE400000000000000;
    else
      v152 = (_TtC14softposreaderd12RemoteReader *)0xE500000000000000;
    v177 = sub_1000056EC(v151, (unint64_t)v152, &v179);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178, v28 + 114, v28 + 122);
    swift_bridgeObjectRelease(v152, v153, v154, v155, v156, v157, v158, v159);
    *(_WORD *)(v28 + 122) = 2080;
    sub_100008390((uint64_t)v180, (uint64_t)&v177);
    v160 = sub_100003A2C(&qword_1001B07D8);
    v161 = String.init<A>(describing:)(&v177, v160);
    v163 = (_TtC14softposreaderd12RemoteReader *)v162;
    v177 = sub_1000056EC(v161, v162, &v179);
    v22 = (__int128 *)a8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178, v28 + 124, v28 + 132);
    swift_bridgeObjectRelease(v163, v164, v165, v166, v167, v168, v169, v170);
    sub_100005D3C(v180);
    _os_log_impl((void *)&_mh_execute_header, v26, type, "Reader.init(mpocMonitorManager: %s, mpocAttestationManager: %s, queue: %s, certificateManager: %s, signerFactory: %s, secureTimeKeeper: %s, auditor: %s, analytics: %s, managedData: %s, systemInfo: %s, secureElement: %s, enforceJCOPVersion: %s, safSelector: %s)", (uint8_t *)v28, 0x84u);
    swift_arrayDestroy(v173, 13, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v173, -1, -1);
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {
    sub_100005D3C(v189);
    sub_100005D3C(v188);

    sub_100005D3C(v187);
    sub_100005D3C(v186);
    sub_100005D3C(v185);
    sub_100005D3C(v184);
    swift_release_n(a9, 2);
    sub_100005D3C(v183);
    sub_100005D3C(v182);
    sub_100005D3C(v181);
    sub_100005D3C(v180);
  }

  sub_10001A674(&v214, a15 + 16);
  sub_10001A674(&v211, a15 + 56);
  *(_QWORD *)(a15 + 96) = v25;
  sub_10001A674(&v208, a15 + 104);
  *(_QWORD *)(a15 + 144) = a5;
  sub_10001A674(&v205, a15 + 152);
  sub_10001A674(&v202, a15 + 192);
  sub_10001A674(v22, a15 + 232);
  *(_QWORD *)(a15 + 272) = v24;
  sub_10001A674(&v199, a15 + 280);
  sub_10001A674(&v196, a15 + 320);
  sub_10001A674(&v193, a15 + 408);
  *(_BYTE *)(a15 + 400) = v20 & 1;
  sub_10001A674(&v190, a15 + 360);
  return a15;
}

uint64_t sub_10010D5BC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13, uint64_t a14)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[3];
  uint64_t v66;
  _UNKNOWN **v67;
  _QWORD v68[3];
  uint64_t v69;
  _UNKNOWN **v70;
  _QWORD v71[3];
  uint64_t v72;
  _UNKNOWN **v73;
  _QWORD v74[3];
  uint64_t v75;
  _UNKNOWN **v76;
  _QWORD v77[3];
  uint64_t v78;
  _UNKNOWN **v79;
  _QWORD v80[3];
  uint64_t v81;
  _UNKNOWN **v82;
  _QWORD v83[3];
  uint64_t v84;
  _UNKNOWN **v85;
  _QWORD v86[3];
  uint64_t v87;
  _UNKNOWN **v88;
  _QWORD v89[3];
  uint64_t v90;
  _UNKNOWN **v91;

  v63 = a5;
  v64 = a8;
  v62 = a3;
  v60 = a13;
  v61 = a9;
  v90 = type metadata accessor for MPOCDefaultMonitorManager();
  v91 = &off_10019F1B0;
  v89[0] = a1;
  v87 = type metadata accessor for MPOCDefaultAttestationManager();
  v88 = &off_10019D8B8;
  v86[0] = a2;
  v84 = type metadata accessor for CertificateManager();
  v85 = &off_100199940;
  v83[0] = a4;
  v81 = type metadata accessor for SignerFactory();
  v82 = &off_10019FF20;
  v80[0] = a6;
  v78 = type metadata accessor for DefaultSecureTimeKeeper();
  v79 = &off_10019C0A0;
  v77[0] = a7;
  v75 = type metadata accessor for DefaultManagedDictionary();
  v76 = &off_10019D700;
  v74[0] = a10;
  v72 = type metadata accessor for SystemInfo();
  v73 = &off_10019F8A0;
  v71[0] = a11;
  v69 = type metadata accessor for SecureElement();
  v70 = &off_1001A11A8;
  v68[0] = a12;
  v66 = type metadata accessor for StoreAndForwardSelector();
  v67 = &off_1001A07D8;
  v65[0] = a14;
  v19 = type metadata accessor for Reader();
  v59 = swift_allocObject(v19, 456, 7);
  v20 = sub_10001A64C((uint64_t)v89, v90);
  __chkstk_darwin(v20);
  v58 = (uint64_t *)((char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(void))(v22 + 16))();
  v23 = sub_10001A64C((uint64_t)v86, v87);
  __chkstk_darwin(v23);
  v25 = (uint64_t *)((char *)&v57 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v26 + 16))(v25);
  v27 = sub_10001A64C((uint64_t)v83, v84);
  __chkstk_darwin(v27);
  v29 = (uint64_t *)((char *)&v57 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v30 + 16))(v29);
  v31 = sub_10001A64C((uint64_t)v80, v81);
  __chkstk_darwin(v31);
  v33 = (uint64_t *)((char *)&v57 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v34 + 16))(v33);
  v35 = sub_10001A64C((uint64_t)v77, v78);
  __chkstk_darwin(v35);
  v37 = (uint64_t *)((char *)&v57 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v38 + 16))(v37);
  v39 = sub_10001A64C((uint64_t)v74, v75);
  __chkstk_darwin(v39);
  v41 = (uint64_t *)((char *)&v57 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v42 + 16))(v41);
  v43 = sub_10001A64C((uint64_t)v71, v72);
  __chkstk_darwin(v43);
  v45 = (uint64_t *)((char *)&v57 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v46 + 16))(v45);
  v47 = sub_10001A64C((uint64_t)v68, v69);
  __chkstk_darwin(v47);
  v49 = (uint64_t *)((char *)&v57 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v50 + 16))(v49);
  v51 = sub_10001A64C((uint64_t)v65, v66);
  __chkstk_darwin(v51);
  v53 = (uint64_t *)((char *)&v57 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v54 + 16))(v53);
  v55 = sub_10010CC84(*v58, *v25, v62, *v29, v63, *v33, *v37, v64, v61, *v41, *v45, *v49, v60, *v53, v59);
  sub_100005D3C(v65);
  sub_100005D3C(v68);
  sub_100005D3C(v71);
  sub_100005D3C(v74);
  sub_100005D3C(v77);
  sub_100005D3C(v80);
  sub_100005D3C(v83);
  sub_100005D3C(v86);
  sub_100005D3C(v89);
  return v55;
}

uint64_t sub_10010DAA4(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;

  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_10010DB64(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (a1)
    v3 = a2 - a1;
  else
    v3 = 0;
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = type metadata accessor for Data.RangeReference(0);
    result = swift_allocObject(v6, 32, 7);
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v3;
  }
  return result;
}

uint64_t sub_10010DBDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (a1)
    v3 = a2 - a1;
  else
    v3 = 0;
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v3 & 0x80000000) == 0)
    return v3 << 32;
LABEL_10:
  __break(1u);
  return result;
}

_BYTE *sub_10010DC5C(_BYTE *result, _BYTE *a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (_BYTE *)sub_10010DAA4(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (_BYTE *)sub_10010DB64((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (_BYTE *)sub_10010DBDC((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t sub_10010DCC0(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      if (result < 0)
        __break(1u);
      else
        return 0;
    }
    else
    {
      v2 = type metadata accessor for __DataStorage(0);
      swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
      __DataStorage.init(length:)(v1);
      if (v1 >= 0x7FFFFFFF)
      {
        v3 = type metadata accessor for Data.RangeReference(0);
        result = swift_allocObject(v3, 32, 7);
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t sub_10010DD5C(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v9 = sub_100003A2C(&qword_1001AFF98);
  v10 = sub_100030828((unint64_t *)&qword_1001AFFA0, &qword_1001AFF98, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v8[0] = a1;
  v2 = sub_100005EF8(v8, v9);
  v3 = (_BYTE *)(*v2 + 32);
  v4 = &v3[*(_QWORD *)(*v2 + 16)];
  swift_bridgeObjectRetain(a1);
  sub_10010C830(v3, v4, &v7);
  v5 = v7;
  sub_100005D3C(v8);
  return v5;
}

uint64_t sub_10010DE0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t *v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t *v48;
  _QWORD *v49;
  id v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD v53[5];
  _QWORD v54[5];
  _QWORD v55[5];
  _QWORD v56[5];
  uint64_t v57;
  _QWORD v58[5];
  _QWORD v59[5];
  _QWORD v60[5];
  _QWORD v61[5];
  _QWORD v62[5];
  _QWORD v63[4];
  int v64;

  v3 = a1;
  sub_1000DC9E4();
  if (v1)
  {
    swift_release(a1);
  }
  else
  {
    sub_1000DFD74();
    sub_1000E1CDC();
    sub_1000E02A4();
    v4 = sub_1000E17D4();
    sub_1000DF844();
    sub_1000DC4B4();
    sub_100005EF8(v63, v63[3]);
    sub_100113BC0(4);
    v6 = sub_1000E07D4();
    sub_1000DE3AC();
    sub_1000DF314();
    sub_1000DDE7C();
    v7 = a1 + OBJC_IVAR____TtC9SPREngine5Depot_settings;
    v64 = *(unsigned __int8 *)(v7 + *(int *)(type metadata accessor for Settings(0) + 60));
    sub_1000E220C();
    v50 = objc_msgSend(objc_allocWithZone((Class)NSOperationQueue), "init");
    objc_msgSend(v50, "setMaxConcurrentOperationCount:", 1);
    objc_msgSend(v50, "setQualityOfService:", 33);
    v8 = sub_10001A64C((uint64_t)v62, v62[3]);
    v52 = v38;
    __chkstk_darwin(v8);
    v48 = (_QWORD *)((char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(void))(v10 + 16))();
    v11 = sub_10001A64C((uint64_t)v61, v61[3]);
    v51 = v38;
    __chkstk_darwin(v11);
    v46 = (_QWORD *)((char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(void))(v13 + 16))();
    v14 = sub_10001A64C((uint64_t)v60, v60[3]);
    v49 = v38;
    __chkstk_darwin(v14);
    v44 = (_QWORD *)((char *)v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(void))(v16 + 16))();
    v17 = sub_10001A64C((uint64_t)v59, v59[3]);
    v47 = v38;
    __chkstk_darwin(v17);
    v42 = (_QWORD *)((char *)v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(void))(v19 + 16))();
    v20 = sub_10001A64C((uint64_t)v58, v58[3]);
    v45 = v38;
    __chkstk_darwin(v20);
    v40 = (_QWORD *)((char *)v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(void))(v22 + 16))();
    v23 = sub_10001A64C((uint64_t)v56, v56[3]);
    v43 = v38;
    __chkstk_darwin(v23);
    v39 = (_QWORD *)((char *)v38 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(void))(v25 + 16))();
    v26 = sub_10001A64C((uint64_t)v55, v55[3]);
    v41 = v38;
    __chkstk_darwin(v26);
    v28 = (_QWORD *)((char *)v38 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v29 + 16))(v28);
    v30 = sub_10001A64C((uint64_t)v54, v54[3]);
    v38[1] = v38;
    __chkstk_darwin(v30);
    v32 = (_QWORD *)((char *)v38 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v33 + 16))(v32);
    v34 = sub_10001A64C((uint64_t)v53, v53[3]);
    v38[0] = v38;
    __chkstk_darwin(v34);
    v36 = (_QWORD *)((char *)v38 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v37 + 16))(v36);
    v3 = sub_10010D5BC(*v48, *v46, v50, *v44, v4, *v42, *v40, (uint64_t)&v57, v6, *v39, *v28, *v32, v64, *v36);
    sub_100005D3C(v53);
    sub_100005D3C(v54);
    sub_100005D3C(v55);
    sub_100005D3C(v56);
    sub_100005D3C(v58);
    sub_100005D3C(v59);
    sub_100005D3C(v60);
    sub_100005D3C(v61);
    sub_100005D3C(v62);
    swift_release(a1);
    sub_100005D3C(v63);
  }
  return v3;
}

uint64_t sub_10010E558(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v8;

  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(v8 + 32), a2, a3, a4, a5, a6, a7, a8);
  sub_100005DE0(*(_QWORD *)(v8 + 40), *(_QWORD *)(v8 + 48));
  sub_100005DE0(*(_QWORD *)(v8 + 56), *(_QWORD *)(v8 + 64));
  sub_100005DE0(*(_QWORD *)(v8 + 80), *(_QWORD *)(v8 + 88));
  return swift_deallocObject(v8, 96, 7);
}

void sub_10010E594()
{
  sub_10010C160();
}

uint64_t sub_10010E59C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10010E5E0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10010E61C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  dispatch_semaphore_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  id v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  id v24;
  _QWORD aBlock[5];
  uint64_t v26;

  v0 = type metadata accessor for DispatchTime(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)aBlock - v5;
  v7 = dispatch_semaphore_create(0);
  v8 = swift_allocObject(&unk_10019F460, 24, 7);
  *(_QWORD *)(v8 + 16) = 0;
  v9 = objc_msgSend((id)objc_opt_self(NFHardwareManager), "sharedHardwareManager");
  if (!v9)
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = v9;
  v11 = swift_allocObject(&unk_10019F618, 32, 7);
  *(_QWORD *)(v11 + 16) = v8;
  *(_QWORD *)(v11 + 24) = v7;
  aBlock[4] = sub_100111E38;
  v26 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100004C68;
  aBlock[3] = &unk_10019F630;
  v12 = _Block_copy(aBlock);
  v13 = v26;
  swift_retain();
  v14 = v7;
  swift_release(v13);
  v15 = objc_msgSend(v10, "startSecureElementReaderSession:", v12);
  _Block_release(v12);

  if (!v15)
  {
LABEL_11:
    __break(1u);
    return;
  }
  static DispatchTime.now()(v16);
  + infix(_:_:)(v4);
  v17 = *(void (**)(char *, uint64_t))(v1 + 8);
  v17(v4, v0);
  v18 = OS_dispatch_semaphore.wait(timeout:)(v6) & 1;
  v17(v6, v0);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v18, 1) & 1) != 0)
  {
    if (qword_1001AD1E8 != -1)
      swift_once(&qword_1001AD1E8, sub_1000FAB88);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_100003A14(v19, (uint64_t)qword_1001B2928);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "startReaderSession(): start timed out", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    objc_msgSend(v15, "endSession");
    swift_release(v8);
    swift_unknownObjectRelease(v15);
  }
  else
  {
    swift_unknownObjectRelease(v15);

    swift_beginAccess(v8 + 16, aBlock, 0, 0);
    v24 = *(id *)(v8 + 16);
    swift_release(v8);
  }
}

void sub_10010E914(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for Logger(0);
  v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  __asm { BR              X10 }
}

void sub_10010FBF8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_1001108E8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  type metadata accessor for TLV();
  sub_100005D9C(a1, a2);
  TLV.__allocating_init(dataRepresentation:)(a1, a2);
  if (!v2)
  {
    v6 = v5;
    v7 = TLVTag.blobInformation.unsafeMutableAddressor();
    v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v6 + 200))(*v7);
    if (v8)
    {
      v9 = v8;
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 144))(v8);
      v11 = v10;
      swift_release(v9);
      __asm { BR              X10 }
    }
    v12 = sub_100024764(4047, 0xD00000000000002FLL, (void *)0x800000010016FF30, 0);
    swift_willThrow(v12);
    swift_release(v6);
  }
}

uint64_t sub_100110CF8(uint64_t a1)
{
  unint64_t v2;
  char v3;
  const char *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  const char *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  const char *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  const char *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _TtC14softposreaderd12RemoteReader *v64;
  _BYTE v65[32];

  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_26;
  v2 = sub_10000ADC4(0x64496B656BLL, 0xE500000000000000);
  if ((v3 & 1) == 0)
    goto LABEL_26;
  sub_100005D5C(*(_QWORD *)(a1 + 56) + 32 * v2, (uint64_t)v65);
  if ((swift_dynamicCast(&v63, v65, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    goto LABEL_26;
  v12 = v63;
  v11 = (unint64_t)v64;
  swift_bridgeObjectRelease(v64, v4, v5, v6, v7, v8, v9, v10);
  v13 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000) == 0)
    v13 = v12 & 0xFFFFFFFFFFFFLL;
  if (!v13)
  {
LABEL_26:
    if (qword_1001AD1E8 != -1)
      swift_once(&qword_1001AD1E8, sub_1000FAB88);
    v51 = type metadata accessor for Logger(0);
    v52 = sub_100003A14(v51, (uint64_t)qword_1001B2928);
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.error.getter(v53);
    if (!os_log_type_enabled(v53, v54))
      goto LABEL_31;
    v55 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v55 = 0;
    v56 = "Error obtaining kekId from txnBlobJson";
    goto LABEL_30;
  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_32;
  v14 = sub_10000ADC4(0xD000000000000013, 0x800000010016FB60);
  if ((v15 & 1) == 0)
    goto LABEL_32;
  sub_100005D5C(*(_QWORD *)(a1 + 56) + 32 * v14, (uint64_t)v65);
  if ((swift_dynamicCast(&v63, v65, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    goto LABEL_32;
  v24 = v63;
  v23 = (unint64_t)v64;
  swift_bridgeObjectRelease(v64, v16, v17, v18, v19, v20, v21, v22);
  v25 = HIBYTE(v23) & 0xF;
  if ((v23 & 0x2000000000000000) == 0)
    v25 = v24 & 0xFFFFFFFFFFFFLL;
  if (!v25)
  {
LABEL_32:
    if (qword_1001AD1E8 != -1)
      swift_once(&qword_1001AD1E8, sub_1000FAB88);
    v57 = type metadata accessor for Logger(0);
    v58 = sub_100003A14(v57, (uint64_t)qword_1001B2928);
    v53 = Logger.logObject.getter(v58);
    v54 = static os_log_type_t.error.getter(v53);
    if (!os_log_type_enabled(v53, v54))
      goto LABEL_31;
    v55 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v55 = 0;
    v56 = "Error obtaining transactionDataBlob from txnBlobJson";
    goto LABEL_30;
  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_36;
  v26 = sub_10000ADC4(0xD000000000000011, 0x800000010016FB80);
  if ((v27 & 1) == 0)
    goto LABEL_36;
  sub_100005D5C(*(_QWORD *)(a1 + 56) + 32 * v26, (uint64_t)v65);
  if ((swift_dynamicCast(&v63, v65, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    goto LABEL_36;
  v36 = v63;
  v35 = (unint64_t)v64;
  swift_bridgeObjectRelease(v64, v28, v29, v30, v31, v32, v33, v34);
  v37 = HIBYTE(v35) & 0xF;
  if ((v35 & 0x2000000000000000) == 0)
    v37 = v36 & 0xFFFFFFFFFFFFLL;
  if (!v37)
  {
LABEL_36:
    if (qword_1001AD1E8 != -1)
      swift_once(&qword_1001AD1E8, sub_1000FAB88);
    v59 = type metadata accessor for Logger(0);
    v60 = sub_100003A14(v59, (uint64_t)qword_1001B2928);
    v53 = Logger.logObject.getter(v60);
    v54 = static os_log_type_t.error.getter(v53);
    if (!os_log_type_enabled(v53, v54))
      goto LABEL_31;
    v55 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v55 = 0;
    v56 = "Error obtaining seAttestationBlob from txnBlobJson";
    goto LABEL_30;
  }
  if (*(_QWORD *)(a1 + 16))
  {
    v38 = sub_10000ADC4(0x7472654364736163, 0xEF65746163696669);
    if ((v39 & 1) != 0)
    {
      sub_100005D5C(*(_QWORD *)(a1 + 56) + 32 * v38, (uint64_t)v65);
      if ((swift_dynamicCast(&v63, v65, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
      {
        v48 = v63;
        v47 = (unint64_t)v64;
        swift_bridgeObjectRelease(v64, v40, v41, v42, v43, v44, v45, v46);
        v49 = HIBYTE(v47) & 0xF;
        if ((v47 & 0x2000000000000000) == 0)
          v49 = v48 & 0xFFFFFFFFFFFFLL;
        if (v49)
          return 1;
      }
    }
  }
  if (qword_1001AD1E8 != -1)
    swift_once(&qword_1001AD1E8, sub_1000FAB88);
  v61 = type metadata accessor for Logger(0);
  v62 = sub_100003A14(v61, (uint64_t)qword_1001B2928);
  v53 = Logger.logObject.getter(v62);
  v54 = static os_log_type_t.error.getter(v53);
  if (os_log_type_enabled(v53, v54))
  {
    v55 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v55 = 0;
    v56 = "Error obtaining casdCertificate from txnBlobJson";
LABEL_30:
    _os_log_impl((void *)&_mh_execute_header, v53, v54, v56, v55, 2u);
    swift_slowDealloc(v55, -1, -1);
  }
LABEL_31:

  return 0;
}

void sub_100111160(_QWORD *a1@<X8>)
{
  sub_10000E13C(a1);
}

double sub_100111178(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[21] = 0u;
  a1[22] = 0u;
  a1[19] = 0u;
  a1[20] = 0u;
  a1[17] = 0u;
  a1[18] = 0u;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_1001111B0(uint64_t a1, _TtC14softposreaderd12RemoteReader *a2, void *a3, _TtC14softposreaderd12RemoteReader *a4, void *a5, _TtC14softposreaderd12RemoteReader *a6, void *a7, _TtC14softposreaderd12RemoteReader *a8, uint64_t a9, _TtC14softposreaderd12RemoteReader *a10, uint64_t a11, _TtC14softposreaderd12RemoteReader *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _TtC14softposreaderd12RemoteReader *a18, uint64_t a19, _TtC14softposreaderd12RemoteReader *a20,uint64_t a21,_TtC14softposreaderd12RemoteReader *a22,uint64_t a23,_TtC14softposreaderd12RemoteReader *a24,uint64_t a25,_TtC14softposreaderd12RemoteReader *a26,uint64_t a27,_TtC14softposreaderd12RemoteReader *a28,uint64_t a29,_TtC14softposreaderd12RemoteReader *a30,uint64_t a31,unint64_t a32,uint64_t a33,_TtC14softposreaderd12RemoteReader *a34,uint64_t a35,_TtC14softposreaderd12RemoteReader *a36,uint64_t a37,unint64_t a38,uint64_t a39,unint64_t a40,uint64_t a41,unint64_t a42,uint64_t a43,_TtC14softposreaderd12RemoteReader *a44,uint64_t a45,unint64_t a46)
{
  SEL v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  SEL v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  SEL v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  SEL v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  SEL v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  SEL v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  SEL v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  SEL v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  id v104;
  SEL v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  SEL v112;
  id v113;
  id v114;
  id v115;
  id v116;
  id v117;
  id v118;
  SEL v119;
  id v120;
  id v121;
  id v122;
  id v123;
  id v124;
  id v125;
  SEL v126;
  id v127;
  id v128;
  id v129;
  id v130;
  id v131;
  id v132;
  SEL v133;
  id v134;
  id v135;
  id v136;
  id v137;
  id v138;
  id v139;
  SEL v140;
  id v141;
  id v142;
  id v143;
  id v144;
  id v145;
  id v146;
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2, (SEL)a2, a3, a4, a5, a6, a7, a8);
    swift_bridgeObjectRelease(a4, v49, v50, v51, v52, v53, v54, v55);
    swift_bridgeObjectRelease(a8, v56, v57, v58, v59, v60, v61, v62);
    swift_bridgeObjectRelease(a10, v63, v64, v65, v66, v67, v68, v69);
    swift_bridgeObjectRelease(a12, v70, v71, v72, v73, v74, v75, v76);
    swift_bridgeObjectRelease(a6, v77, v78, v79, v80, v81, v82, v83);
    swift_bridgeObjectRelease(a18, v84, v85, v86, v87, v88, v89, v90);
    swift_bridgeObjectRelease(a20, v91, v92, v93, v94, v95, v96, v97);
    swift_bridgeObjectRelease(a22, v98, v99, v100, v101, v102, v103, v104);
    swift_bridgeObjectRelease(a24, v105, v106, v107, v108, v109, v110, v111);
    swift_bridgeObjectRelease(a26, v112, v113, v114, v115, v116, v117, v118);
    swift_bridgeObjectRelease(a28, v119, v120, v121, v122, v123, v124, v125);
    swift_bridgeObjectRelease(a30, v126, v127, v128, v129, v130, v131, v132);
    sub_100005DE0(a31, a32);
    swift_bridgeObjectRelease(a36, v133, v134, v135, v136, v137, v138, v139);
    swift_bridgeObjectRelease(a34, v140, v141, v142, v143, v144, v145, v146);
    return sub_100111340(a37, a38, a39, a40, a41, a42, a43, a44, a45, a46);
  }
  return result;
}

uint64_t sub_100111340(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, _TtC14softposreaderd12RemoteReader *a8, uint64_t a9, unint64_t a10)
{
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;

  if (a8)
  {
    sub_100005DE0(result, a2);
    sub_100005DE0(a3, a4);
    sub_100005DE0(a5, a6);
    swift_bridgeObjectRelease(a8, v15, v16, v17, v18, v19, v20, v21);
    return sub_100005DE0(a9, a10);
  }
  return result;
}

uint64_t sub_1001113BC(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  _TtC14softposreaderd12RemoteReader *v9;
  _TtC14softposreaderd12RemoteReader *v10;
  _TtC14softposreaderd12RemoteReader *v11;
  _TtC14softposreaderd12RemoteReader *v12;
  _TtC14softposreaderd12RemoteReader *v13;
  _TtC14softposreaderd12RemoteReader *v14;
  _TtC14softposreaderd12RemoteReader *v15;
  _TtC14softposreaderd12RemoteReader *v16;
  _TtC14softposreaderd12RemoteReader *v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  SEL v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  SEL v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  SEL v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  SEL v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  SEL v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  SEL v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  SEL v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  SEL v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  SEL v109;
  id v110;
  id v111;
  id v112;
  id v113;
  id v114;
  id v115;
  SEL v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  id v122;
  SEL v123;
  id v124;
  id v125;
  id v126;
  id v127;
  id v128;
  id v129;
  SEL v130;
  id v131;
  id v132;
  id v133;
  id v134;
  id v135;
  id v136;
  _TtC14softposreaderd12RemoteReader *v138;
  _TtC14softposreaderd12RemoteReader *v139;
  _TtC14softposreaderd12RemoteReader *v140;
  unint64_t v141;
  uint64_t v142;
  _TtC14softposreaderd12RemoteReader *v143;
  _TtC14softposreaderd12RemoteReader *v144;
  _TtC14softposreaderd12RemoteReader *v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  _TtC14softposreaderd12RemoteReader *v152;
  unint64_t v153;
  uint64_t v154;
  _TtC14softposreaderd12RemoteReader *v155;

  v9 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 8);
  v10 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 24);
  v11 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 40);
  v12 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 56);
  v13 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 72);
  v14 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 136);
  v15 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 152);
  v16 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 168);
  v17 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 184);
  v138 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 200);
  v139 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 216);
  v140 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 232);
  v141 = *(_QWORD *)(a1 + 248);
  v144 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 280);
  v145 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 264);
  v142 = *(_QWORD *)(a1 + 240);
  v143 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 296);
  v146 = *(_QWORD *)(a1 + 312);
  v147 = *(_QWORD *)(a1 + 304);
  v148 = *(_QWORD *)(a1 + 328);
  v149 = *(_QWORD *)(a1 + 320);
  v150 = *(_QWORD *)(a1 + 344);
  v151 = *(_QWORD *)(a1 + 336);
  v152 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 360);
  v153 = *(_QWORD *)(a1 + 376);
  v154 = *(_QWORD *)(a1 + 368);
  v155 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 400);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 88), a2, a3, a4, a5, a6, a7, a8);
  swift_bridgeObjectRelease(v13, v18, v19, v20, v21, v22, v23, v24);
  swift_bridgeObjectRelease(v12, v25, v26, v27, v28, v29, v30, v31);
  swift_bridgeObjectRelease(v10, v32, v33, v34, v35, v36, v37, v38);
  swift_bridgeObjectRelease(v9, v39, v40, v41, v42, v43, v44, v45);
  swift_bridgeObjectRelease(v11, v46, v47, v48, v49, v50, v51, v52);
  swift_bridgeObjectRelease(v14, v53, v54, v55, v56, v57, v58, v59);
  swift_bridgeObjectRelease(v15, v60, v61, v62, v63, v64, v65, v66);
  swift_bridgeObjectRelease(v16, v67, v68, v69, v70, v71, v72, v73);
  swift_bridgeObjectRelease(v17, v74, v75, v76, v77, v78, v79, v80);
  swift_bridgeObjectRelease(v138, v81, v82, v83, v84, v85, v86, v87);
  swift_bridgeObjectRelease(v139, v88, v89, v90, v91, v92, v93, v94);
  swift_bridgeObjectRelease(v140, v95, v96, v97, v98, v99, v100, v101);
  sub_100005DE0(v142, v141);
  swift_bridgeObjectRelease(v143, v102, v103, v104, v105, v106, v107, v108);
  swift_bridgeObjectRelease(v144, v109, v110, v111, v112, v113, v114, v115);
  swift_bridgeObjectRelease(v145, v116, v117, v118, v119, v120, v121, v122);
  sub_100005DE0(v147, v146);
  sub_100005DE0(v149, v148);
  sub_100005DE0(v151, v150);
  swift_bridgeObjectRelease(v152, v123, v124, v125, v126, v127, v128, v129);
  sub_100005DE0(v154, v153);
  swift_bridgeObjectRelease(v155, v130, v131, v132, v133, v134, v135, v136);
  return a1;
}

uint64_t sub_100111550(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 8), a2, a3, a4, a5, a6, a7, a8);
  sub_100005DE0(v9, v10);
  sub_100005DE0(v11, v12);
  return a1;
}

_QWORD *sub_1001115A8(_QWORD *a1)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v4 = a1[30];
  v3 = a1[31];
  v13 = a1[37];
  v14 = a1[36];
  v12 = a1[38];
  v10 = a1[40];
  v11 = a1[39];
  v8 = a1[42];
  v9 = a1[41];
  v7 = a1[43];
  v5 = a1[45];
  v6 = a1[44];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100005D9C(v4, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100111724(v14, v13, v12, v11, v10, v9, v8, v7, v6, v5);
  return a1;
}

uint64_t sub_100111724(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  if (a8)
  {
    sub_100005D9C(result, a2);
    sub_100005D9C(a3, a4);
    sub_100005D9C(a5, a6);
    swift_bridgeObjectRetain();
    return sub_100005D9C(a9, a10);
  }
  return result;
}

uint64_t sub_1001117A0(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v10 = *(_OWORD *)(a1 + 320);
  v11 = *(_OWORD *)(a1 + 336);
  v8 = *(_OWORD *)(a1 + 288);
  v9 = *(_OWORD *)(a1 + 304);
  v6 = *(_OWORD *)(a1 + 256);
  v7 = *(_OWORD *)(a1 + 272);
  v4 = *(_OWORD *)(a1 + 224);
  v5 = *(_OWORD *)(a1 + 240);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v4,
    *((_QWORD *)&v4 + 1),
    v5,
    *((_QWORD *)&v5 + 1),
    v6,
    *((_QWORD *)&v6 + 1),
    v7,
    *((_QWORD *)&v7 + 1),
    v8,
    *((_QWORD *)&v8 + 1),
    v9,
    *((_QWORD *)&v9 + 1),
    v10,
    *((_QWORD *)&v10 + 1),
    v11,
    *((_QWORD *)&v11 + 1),
    *(_QWORD *)(a1 + 352),
    *(_QWORD *)(a1 + 360));
  return a1;
}

uint64_t sub_100111834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,unint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,unint64_t a38,uint64_t a39,unint64_t a40,uint64_t a41,unint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,unint64_t a46)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100005D9C(a31, a32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return sub_100111724(a37, a38, a39, a40, a41, a42, a43, a44, a45, a46);
  }
  return result;
}

uint64_t sub_1001119C4(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  _TtC14softposreaderd12RemoteReader *v9;
  _TtC14softposreaderd12RemoteReader *v10;
  _TtC14softposreaderd12RemoteReader *v11;
  _TtC14softposreaderd12RemoteReader *v12;
  _TtC14softposreaderd12RemoteReader *v13;
  _TtC14softposreaderd12RemoteReader *v14;
  _TtC14softposreaderd12RemoteReader *v15;
  _TtC14softposreaderd12RemoteReader *v16;
  _TtC14softposreaderd12RemoteReader *v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  SEL v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  SEL v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  SEL v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  SEL v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  SEL v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  SEL v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  SEL v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  SEL v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  SEL v109;
  id v110;
  id v111;
  id v112;
  id v113;
  id v114;
  id v115;
  _TtC14softposreaderd12RemoteReader *v117;
  _TtC14softposreaderd12RemoteReader *v118;
  _TtC14softposreaderd12RemoteReader *v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  _TtC14softposreaderd12RemoteReader *v123;
  uint64_t v124;
  _TtC14softposreaderd12RemoteReader *v125;
  _TtC14softposreaderd12RemoteReader *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;

  v9 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 8);
  v10 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 24);
  v11 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 40);
  v12 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 56);
  v13 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 72);
  v14 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 136);
  v15 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 152);
  v16 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 168);
  v17 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 184);
  v117 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 200);
  v118 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 216);
  v121 = *(_QWORD *)(a1 + 240);
  v119 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 232);
  v120 = *(_QWORD *)(a1 + 248);
  v125 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 264);
  v123 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 280);
  v132 = *(_QWORD *)(a1 + 296);
  v133 = *(_QWORD *)(a1 + 288);
  v131 = *(_QWORD *)(a1 + 304);
  v129 = *(_QWORD *)(a1 + 320);
  v130 = *(_QWORD *)(a1 + 312);
  v127 = *(_QWORD *)(a1 + 336);
  v128 = *(_QWORD *)(a1 + 328);
  v126 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 344);
  v124 = *(_QWORD *)(a1 + 352);
  v122 = *(_QWORD *)(a1 + 360);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 88), a2, a3, a4, a5, a6, a7, a8);
  swift_bridgeObjectRelease(v13, v18, v19, v20, v21, v22, v23, v24);
  swift_bridgeObjectRelease(v12, v25, v26, v27, v28, v29, v30, v31);
  swift_bridgeObjectRelease(v10, v32, v33, v34, v35, v36, v37, v38);
  swift_bridgeObjectRelease(v9, v39, v40, v41, v42, v43, v44, v45);
  swift_bridgeObjectRelease(v11, v46, v47, v48, v49, v50, v51, v52);
  swift_bridgeObjectRelease(v14, v53, v54, v55, v56, v57, v58, v59);
  swift_bridgeObjectRelease(v15, v60, v61, v62, v63, v64, v65, v66);
  swift_bridgeObjectRelease(v16, v67, v68, v69, v70, v71, v72, v73);
  swift_bridgeObjectRelease(v17, v74, v75, v76, v77, v78, v79, v80);
  swift_bridgeObjectRelease(v117, v81, v82, v83, v84, v85, v86, v87);
  swift_bridgeObjectRelease(v118, v88, v89, v90, v91, v92, v93, v94);
  swift_bridgeObjectRelease(v119, v95, v96, v97, v98, v99, v100, v101);
  sub_100005DE0(v121, v120);
  swift_bridgeObjectRelease(v123, v102, v103, v104, v105, v106, v107, v108);
  swift_bridgeObjectRelease(v125, v109, v110, v111, v112, v113, v114, v115);
  sub_100111340(v133, v132, v131, v130, v129, v128, v127, v126, v124, v122);
  return a1;
}

uint64_t sub_100111B48()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100111B6C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100111B90()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100111BA0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100111BC4()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  swift_release(v0[8]);
  sub_100005D3C(v0 + 9);
  swift_unknownObjectRelease(v0[14]);
  return swift_deallocObject(v0, 120, 7);
}

void sub_100111C20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000FDAA4(a1, a2, *(void (**)(void))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), v2 + 72, *(_QWORD *)(v2 + 112));
}

uint64_t sub_100111C5C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));

  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100111CB0()
{
  return sub_100111D7C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000FFD14);
}

uint64_t sub_100111CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100111CCC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100111CD4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_100111D10()
{
  uint64_t v0;

  sub_1000FF2C4(*(_QWORD *)(v0 + 16), *(_BYTE **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_100111D1C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100111D70()
{
  return sub_100111D7C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000FE744);
}

uint64_t sub_100111D7C(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8]);
}

_QWORD *sub_100111D94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  _QWORD v13[2];

  v5 = *(uint64_t **)(v3 + 16);
  v7 = *v5;
  v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  result = sub_10010C8A4((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_100111DF0, (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t sub_100111DF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  return sub_10010CBCC(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

uint64_t sub_100111E0C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100111E38(void *a1, void *a2)
{
  uint64_t v2;

  return sub_10010A3F0(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_100111E40()
{
  _QWORD *v0;

  swift_release(v0[2]);
  sub_100005D3C(v0 + 3);
  swift_unknownObjectRelease(v0[8]);
  swift_release(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100111E7C()
{
  uint64_t v0;

  return sub_1000FE080(*(_QWORD *)(v0 + 16), (_QWORD *)(v0 + 24), *(void **)(v0 + 64), *(_QWORD *)(v0 + 72));
}

void destroy for Reader.PINBlobExtract(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  SEL v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  SEL v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  SEL v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  SEL v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  SEL v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  SEL v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  SEL v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  SEL v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  SEL v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  _TtC14softposreaderd12RemoteReader *v107;
  SEL v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  id v114;

  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 8), a2, a3, a4, a5, a6, a7, a8);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 24), v9, v10, v11, v12, v13, v14, v15);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 40), v16, v17, v18, v19, v20, v21, v22);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 56), v23, v24, v25, v26, v27, v28, v29);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 72), v30, v31, v32, v33, v34, v35, v36);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 88), v37, v38, v39, v40, v41, v42, v43);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 136), v44, v45, v46, v47, v48, v49, v50);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 152), v51, v52, v53, v54, v55, v56, v57);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 168), v58, v59, v60, v61, v62, v63, v64);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 184), v65, v66, v67, v68, v69, v70, v71);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 200), v72, v73, v74, v75, v76, v77, v78);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 216), v79, v80, v81, v82, v83, v84, v85);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 232), v86, v87, v88, v89, v90, v91, v92);
  sub_100005DE0(*(_QWORD *)(a1 + 240), *(_QWORD *)(a1 + 248));
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 264), v93, v94, v95, v96, v97, v98, v99);
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 280), v100, v101, v102, v103, v104, v105, v106);
  v107 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 344);
  if (v107)
  {
    sub_100005DE0(*(_QWORD *)(a1 + 288), *(_QWORD *)(a1 + 296));
    sub_100005DE0(*(_QWORD *)(a1 + 304), *(_QWORD *)(a1 + 312));
    sub_100005DE0(*(_QWORD *)(a1 + 320), *(_QWORD *)(a1 + 328));
    swift_bridgeObjectRelease(v107, v108, v109, v110, v111, v112, v113, v114);
    sub_100005DE0(*(_QWORD *)(a1 + 352), *(_QWORD *)(a1 + 360));
  }
}

uint64_t initializeWithCopy for Reader.PINBlobExtract(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v32;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v9;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v10 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v10;
  v11 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v11;
  v12 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v12;
  v13 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v13;
  v14 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v14;
  v15 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v15;
  v16 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v16;
  v17 = *(_QWORD *)(a2 + 248);
  v32 = *(_QWORD *)(a2 + 240);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100005D9C(v32, v17);
  *(_QWORD *)(a1 + 240) = v32;
  *(_QWORD *)(a1 + 248) = v17;
  v18 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v18;
  v19 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = v19;
  v20 = *(_QWORD *)(a2 + 344);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v20)
  {
    v21 = *(_QWORD *)(a2 + 288);
    v22 = *(_QWORD *)(a2 + 296);
    sub_100005D9C(v21, v22);
    *(_QWORD *)(a1 + 288) = v21;
    *(_QWORD *)(a1 + 296) = v22;
    v23 = *(_QWORD *)(a2 + 304);
    v24 = *(_QWORD *)(a2 + 312);
    sub_100005D9C(v23, v24);
    *(_QWORD *)(a1 + 304) = v23;
    *(_QWORD *)(a1 + 312) = v24;
    v25 = *(_QWORD *)(a2 + 320);
    v26 = *(_QWORD *)(a2 + 328);
    sub_100005D9C(v25, v26);
    *(_QWORD *)(a1 + 320) = v25;
    *(_QWORD *)(a1 + 328) = v26;
    *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
    *(_QWORD *)(a1 + 344) = v20;
    v28 = *(_QWORD *)(a2 + 352);
    v27 = *(_QWORD *)(a2 + 360);
    swift_bridgeObjectRetain();
    sub_100005D9C(v28, v27);
    *(_QWORD *)(a1 + 352) = v28;
    *(_QWORD *)(a1 + 360) = v27;
  }
  else
  {
    v29 = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 336) = v29;
    *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
    v30 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 304) = v30;
  }
  return a1;
}

uint64_t assignWithCopy for Reader.PINBlobExtract(uint64_t a1, uint64_t a2)
{
  _TtC14softposreaderd12RemoteReader *v4;
  SEL v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  _TtC14softposreaderd12RemoteReader *v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  _TtC14softposreaderd12RemoteReader *v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  _TtC14softposreaderd12RemoteReader *v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  _TtC14softposreaderd12RemoteReader *v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  _TtC14softposreaderd12RemoteReader *v44;
  SEL v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  uint64_t v52;
  _TtC14softposreaderd12RemoteReader *v53;
  SEL v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  _TtC14softposreaderd12RemoteReader *v61;
  SEL v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  _TtC14softposreaderd12RemoteReader *v69;
  SEL v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  _TtC14softposreaderd12RemoteReader *v77;
  SEL v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  _TtC14softposreaderd12RemoteReader *v85;
  SEL v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  _TtC14softposreaderd12RemoteReader *v93;
  SEL v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  _TtC14softposreaderd12RemoteReader *v101;
  SEL v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  _TtC14softposreaderd12RemoteReader *v113;
  SEL v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  id v120;
  _TtC14softposreaderd12RemoteReader *v121;
  SEL v122;
  id v123;
  id v124;
  id v125;
  id v126;
  id v127;
  id v128;
  _OWORD *v129;
  _OWORD *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  _TtC14softposreaderd12RemoteReader *v144;
  SEL v145;
  id v146;
  id v147;
  id v148;
  id v149;
  id v150;
  id v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4, v5, v6, v7, v8, v9, v10, v11);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v12 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v12, v13, v14, v15, v16, v17, v18, v19);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v20 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v20, v21, v22, v23, v24, v25, v26, v27);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v28 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v28, v29, v30, v31, v32, v33, v34, v35);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v36 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v36, v37, v38, v39, v40, v41, v42, v43);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v44 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v44, v45, v46, v47, v48, v49, v50, v51);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v52 = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v52;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v53 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v53, v54, v55, v56, v57, v58, v59, v60);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v61 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v61, v62, v63, v64, v65, v66, v67, v68);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v69 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v69, v70, v71, v72, v73, v74, v75, v76);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  v77 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v77, v78, v79, v80, v81, v82, v83, v84);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  v85 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v85, v86, v87, v88, v89, v90, v91, v92);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  v93 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v93, v94, v95, v96, v97, v98, v99, v100);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  v101 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v101, v102, v103, v104, v105, v106, v107, v108);
  v109 = *(_QWORD *)(a2 + 240);
  v110 = *(_QWORD *)(a2 + 248);
  sub_100005D9C(v109, v110);
  v111 = *(_QWORD *)(a1 + 240);
  v112 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 240) = v109;
  *(_QWORD *)(a1 + 248) = v110;
  sub_100005DE0(v111, v112);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  v113 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 264);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v113, v114, v115, v116, v117, v118, v119, v120);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  v121 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 280);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v121, v122, v123, v124, v125, v126, v127, v128);
  v129 = (_OWORD *)(a1 + 288);
  v130 = (_OWORD *)(a2 + 288);
  v131 = *(_QWORD *)(a2 + 344);
  if (*(_QWORD *)(a1 + 344))
  {
    if (v131)
    {
      v132 = *(_QWORD *)(a2 + 288);
      v133 = *(_QWORD *)(a2 + 296);
      sub_100005D9C(v132, v133);
      v134 = *(_QWORD *)(a1 + 288);
      v135 = *(_QWORD *)(a1 + 296);
      *(_QWORD *)(a1 + 288) = v132;
      *(_QWORD *)(a1 + 296) = v133;
      sub_100005DE0(v134, v135);
      v136 = *(_QWORD *)(a2 + 304);
      v137 = *(_QWORD *)(a2 + 312);
      sub_100005D9C(v136, v137);
      v138 = *(_QWORD *)(a1 + 304);
      v139 = *(_QWORD *)(a1 + 312);
      *(_QWORD *)(a1 + 304) = v136;
      *(_QWORD *)(a1 + 312) = v137;
      sub_100005DE0(v138, v139);
      v140 = *(_QWORD *)(a2 + 320);
      v141 = *(_QWORD *)(a2 + 328);
      sub_100005D9C(v140, v141);
      v142 = *(_QWORD *)(a1 + 320);
      v143 = *(_QWORD *)(a1 + 328);
      *(_QWORD *)(a1 + 320) = v140;
      *(_QWORD *)(a1 + 328) = v141;
      sub_100005DE0(v142, v143);
      *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
      v144 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 344);
      *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease(v144, v145, v146, v147, v148, v149, v150, v151);
      v153 = *(_QWORD *)(a2 + 352);
      v152 = *(_QWORD *)(a2 + 360);
      sub_100005D9C(v153, v152);
      v154 = *(_QWORD *)(a1 + 352);
      v155 = *(_QWORD *)(a1 + 360);
      *(_QWORD *)(a1 + 352) = v153;
      *(_QWORD *)(a1 + 360) = v152;
      sub_100005DE0(v154, v155);
    }
    else
    {
      sub_100112504(a1 + 288);
      *v129 = *v130;
      v164 = *(_OWORD *)(a2 + 352);
      v166 = *(_OWORD *)(a2 + 304);
      v165 = *(_OWORD *)(a2 + 320);
      *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
      *(_OWORD *)(a1 + 352) = v164;
      *(_OWORD *)(a1 + 304) = v166;
      *(_OWORD *)(a1 + 320) = v165;
    }
  }
  else if (v131)
  {
    v156 = *(_QWORD *)(a2 + 288);
    v157 = *(_QWORD *)(a2 + 296);
    sub_100005D9C(v156, v157);
    *(_QWORD *)(a1 + 288) = v156;
    *(_QWORD *)(a1 + 296) = v157;
    v158 = *(_QWORD *)(a2 + 304);
    v159 = *(_QWORD *)(a2 + 312);
    sub_100005D9C(v158, v159);
    *(_QWORD *)(a1 + 304) = v158;
    *(_QWORD *)(a1 + 312) = v159;
    v160 = *(_QWORD *)(a2 + 320);
    v161 = *(_QWORD *)(a2 + 328);
    sub_100005D9C(v160, v161);
    *(_QWORD *)(a1 + 320) = v160;
    *(_QWORD *)(a1 + 328) = v161;
    *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
    *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
    v163 = *(_QWORD *)(a2 + 352);
    v162 = *(_QWORD *)(a2 + 360);
    swift_bridgeObjectRetain();
    sub_100005D9C(v163, v162);
    *(_QWORD *)(a1 + 352) = v163;
    *(_QWORD *)(a1 + 360) = v162;
  }
  else
  {
    *v129 = *v130;
    v167 = *(_OWORD *)(a2 + 304);
    v168 = *(_OWORD *)(a2 + 320);
    v169 = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 352) = v169;
    *(_OWORD *)(a1 + 304) = v167;
    *(_OWORD *)(a1 + 320) = v168;
  }
  return a1;
}

uint64_t sub_100112504(uint64_t a1)
{
  destroy for Reader.PINBlobExtract.PINDetails(a1);
  return a1;
}

void *initializeWithTake for Reader.PINBlobExtract(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x170uLL);
}

uint64_t assignWithTake for Reader.PINBlobExtract(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v10;
  _TtC14softposreaderd12RemoteReader *v11;
  uint64_t v12;
  _TtC14softposreaderd12RemoteReader *v13;
  SEL v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  _TtC14softposreaderd12RemoteReader *v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  _TtC14softposreaderd12RemoteReader *v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  _TtC14softposreaderd12RemoteReader *v40;
  SEL v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  _TtC14softposreaderd12RemoteReader *v49;
  SEL v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  uint64_t v57;
  _TtC14softposreaderd12RemoteReader *v58;
  SEL v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  uint64_t v66;
  _TtC14softposreaderd12RemoteReader *v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  uint64_t v75;
  _TtC14softposreaderd12RemoteReader *v76;
  SEL v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  uint64_t v84;
  _TtC14softposreaderd12RemoteReader *v85;
  SEL v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  uint64_t v93;
  _TtC14softposreaderd12RemoteReader *v94;
  SEL v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  uint64_t v102;
  _TtC14softposreaderd12RemoteReader *v103;
  SEL v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  uint64_t v111;
  _TtC14softposreaderd12RemoteReader *v112;
  SEL v113;
  id v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  _TtC14softposreaderd12RemoteReader *v123;
  SEL v124;
  id v125;
  id v126;
  id v127;
  id v128;
  id v129;
  id v130;
  uint64_t v131;
  _TtC14softposreaderd12RemoteReader *v132;
  SEL v133;
  id v134;
  id v135;
  id v136;
  id v137;
  id v138;
  id v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  _TtC14softposreaderd12RemoteReader *v147;
  SEL v148;
  id v149;
  id v150;
  id v151;
  id v152;
  id v153;
  id v154;
  uint64_t v155;
  unint64_t v156;
  __int128 v157;
  __int128 v158;

  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v10;
  swift_bridgeObjectRelease(v11, (SEL)a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(a2 + 24);
  v13 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v12;
  swift_bridgeObjectRelease(v13, v14, v15, v16, v17, v18, v19, v20);
  v21 = *(_QWORD *)(a2 + 40);
  v22 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v21;
  swift_bridgeObjectRelease(v22, v23, v24, v25, v26, v27, v28, v29);
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v30;
  swift_bridgeObjectRelease(v31, v32, v33, v34, v35, v36, v37, v38);
  v39 = *(_QWORD *)(a2 + 72);
  v40 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v39;
  swift_bridgeObjectRelease(v40, v41, v42, v43, v44, v45, v46, v47);
  v48 = *(_QWORD *)(a2 + 88);
  v49 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v48;
  swift_bridgeObjectRelease(v49, v50, v51, v52, v53, v54, v55, v56);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v57 = *(_QWORD *)(a2 + 136);
  v58 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v57;
  swift_bridgeObjectRelease(v58, v59, v60, v61, v62, v63, v64, v65);
  v66 = *(_QWORD *)(a2 + 152);
  v67 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v66;
  swift_bridgeObjectRelease(v67, v68, v69, v70, v71, v72, v73, v74);
  v75 = *(_QWORD *)(a2 + 168);
  v76 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v75;
  swift_bridgeObjectRelease(v76, v77, v78, v79, v80, v81, v82, v83);
  v84 = *(_QWORD *)(a2 + 184);
  v85 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v84;
  swift_bridgeObjectRelease(v85, v86, v87, v88, v89, v90, v91, v92);
  v93 = *(_QWORD *)(a2 + 200);
  v94 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v93;
  swift_bridgeObjectRelease(v94, v95, v96, v97, v98, v99, v100, v101);
  v102 = *(_QWORD *)(a2 + 216);
  v103 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v102;
  swift_bridgeObjectRelease(v103, v104, v105, v106, v107, v108, v109, v110);
  v111 = *(_QWORD *)(a2 + 232);
  v112 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v111;
  swift_bridgeObjectRelease(v112, v113, v114, v115, v116, v117, v118, v119);
  v120 = *(_QWORD *)(a1 + 240);
  v121 = *(_QWORD *)(a1 + 248);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  sub_100005DE0(v120, v121);
  v122 = *(_QWORD *)(a2 + 264);
  v123 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v122;
  swift_bridgeObjectRelease(v123, v124, v125, v126, v127, v128, v129, v130);
  v131 = *(_QWORD *)(a2 + 280);
  v132 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = v131;
  swift_bridgeObjectRelease(v132, v133, v134, v135, v136, v137, v138, v139);
  if (!*(_QWORD *)(a1 + 344))
    goto LABEL_5;
  v140 = *(_QWORD *)(a2 + 344);
  if (!v140)
  {
    sub_100112504(a1 + 288);
LABEL_5:
    v157 = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 336) = v157;
    *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
    v158 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 304) = v158;
    return a1;
  }
  v141 = *(_QWORD *)(a1 + 288);
  v142 = *(_QWORD *)(a1 + 296);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  sub_100005DE0(v141, v142);
  v143 = *(_QWORD *)(a1 + 304);
  v144 = *(_QWORD *)(a1 + 312);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  sub_100005DE0(v143, v144);
  v145 = *(_QWORD *)(a1 + 320);
  v146 = *(_QWORD *)(a1 + 328);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  sub_100005DE0(v145, v146);
  v147 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 344);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = v140;
  swift_bridgeObjectRelease(v147, v148, v149, v150, v151, v152, v153, v154);
  v155 = *(_QWORD *)(a1 + 352);
  v156 = *(_QWORD *)(a1 + 360);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  sub_100005DE0(v155, v156);
  return a1;
}

uint64_t getEnumTagSinglePayload for Reader.PINBlobExtract(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 368))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Reader.PINBlobExtract(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 360) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 368) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 368) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Reader.PINBlobExtract()
{
  return &type metadata for Reader.PINBlobExtract;
}

uint64_t destroy for Reader.PINBlobExtract.PINDetails(uint64_t a1)
{
  SEL v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;

  sub_100005DE0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_100005DE0(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  sub_100005DE0(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 56), v2, v3, v4, v5, v6, v7, v8);
  return sub_100005DE0(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
}

uint64_t *initializeWithCopy for Reader.PINBlobExtract.PINDetails(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v5 = a2[1];
  sub_100005D9C(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  v6 = a2[2];
  v7 = a2[3];
  sub_100005D9C(v6, v7);
  a1[2] = v6;
  a1[3] = v7;
  v8 = a2[4];
  v9 = a2[5];
  sub_100005D9C(v8, v9);
  a1[4] = v8;
  a1[5] = v9;
  v10 = a2[7];
  a1[6] = a2[6];
  a1[7] = v10;
  v12 = a2[8];
  v11 = a2[9];
  swift_bridgeObjectRetain();
  sub_100005D9C(v12, v11);
  a1[8] = v12;
  a1[9] = v11;
  return a1;
}

uint64_t *assignWithCopy for Reader.PINBlobExtract.PINDetails(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _TtC14softposreaderd12RemoteReader *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v4 = *a2;
  v5 = a2[1];
  sub_100005D9C(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_100005DE0(v6, v7);
  v8 = a2[2];
  v9 = a2[3];
  sub_100005D9C(v8, v9);
  v10 = a1[2];
  v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_100005DE0(v10, v11);
  v12 = a2[4];
  v13 = a2[5];
  sub_100005D9C(v12, v13);
  v14 = a1[4];
  v15 = a1[5];
  a1[4] = v12;
  a1[5] = v13;
  sub_100005DE0(v14, v15);
  a1[6] = a2[6];
  v16 = (_TtC14softposreaderd12RemoteReader *)a1[7];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
  v25 = a2[8];
  v24 = a2[9];
  sub_100005D9C(v25, v24);
  v26 = a1[8];
  v27 = a1[9];
  a1[8] = v25;
  a1[9] = v24;
  sub_100005DE0(v26, v27);
  return a1;
}

__n128 initializeWithTake for Reader.PINBlobExtract.PINDetails(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t *assignWithTake for Reader.PINBlobExtract.PINDetails(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _TtC14softposreaderd12RemoteReader *v11;
  SEL v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  unint64_t v20;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100005DE0(v4, v5);
  v6 = a1[2];
  v7 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_100005DE0(v6, v7);
  v8 = a1[4];
  v9 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  sub_100005DE0(v8, v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = (_TtC14softposreaderd12RemoteReader *)a1[7];
  a1[6] = *(_QWORD *)(a2 + 48);
  a1[7] = v10;
  swift_bridgeObjectRelease(v11, v12, v13, v14, v15, v16, v17, v18);
  v19 = a1[8];
  v20 = a1[9];
  *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 64);
  sub_100005DE0(v19, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for Reader.PINBlobExtract.PINDetails(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Reader.PINBlobExtract.PINDetails(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Reader.PINBlobExtract.PINDetails()
{
  return &type metadata for Reader.PINBlobExtract.PINDetails;
}

uint64_t sub_100112AF0@<X0>(_OWORD *a1@<X8>)
{
  return sub_100037FC4(a1);
}

uint64_t sub_100112B04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B2B50);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B2B50);
  if (qword_1001AD150 != -1)
    swift_once(&qword_1001AD150, sub_1000CC47C);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4DE0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

_QWORD *sub_100112B94()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v1 = v0;
  if (qword_1001AD1F8 != -1)
    swift_once(&qword_1001AD1F8, sub_100112B04);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100003A14(v2, (uint64_t)qword_1001B2B50);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v10 = v7;
    *(_DWORD *)v6 = 136315138;
    v9 = sub_1000056EC(0x74696E696564, 0xE600000000000000, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v6 + 4, v6 + 12);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }

  sub_100005D3C(v1 + 2);
  sub_100005D3C(v1 + 7);
  swift_release(v1[12]);
  return v1;
}

uint64_t sub_100112D1C()
{
  uint64_t v0;

  sub_100112B94();
  return swift_deallocClassInstance(v0, 152, 7);
}

uint64_t type metadata accessor for Monitor()
{
  return objc_opt_self(_TtC9SPREngine7Monitor);
}

void sub_100112D5C(int a1, unsigned __int8 a2, unsigned __int8 a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  Swift::String v31;
  _TtC14softposreaderd12RemoteReader *object;
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  Swift::String v40;
  uint64_t v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  SEL v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  Swift::String v56;
  _TtC14softposreaderd12RemoteReader *v57;
  SEL v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  Swift::String v65;
  Swift::String v66;
  _TtC14softposreaderd12RemoteReader *v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  uint64_t v75;
  Swift::String v76;
  uint64_t v77;
  uint64_t v78[2];
  uint64_t v79;

  v6 = v4;
  if (qword_1001AD1F8 != -1)
    swift_once(&qword_1001AD1F8, sub_100112B04);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_100003A14(v11, (uint64_t)qword_1001B2B50);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "signal(event:component:origin:details:)", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  if ((unsigned __int16)a1 < 0x3E9u)
  {
    BYTE5(v78[1]) = 0;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)0xE000000000000000, v24, v25, v26, v27, v28, v29, v30);
    strcpy((char *)v78, "Event value ");
    HIWORD(v78[1]) = -5120;
    LOWORD(v76._countAndFlagsBits) = a1;
    v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt16, &protocol witness table for UInt16);
    object = (_TtC14softposreaderd12RemoteReader *)v31._object;
    String.append(_:)(v31);
    swift_bridgeObjectRelease(object, v33, v34, v35, v36, v37, v38, v39);
    v40._object = (void *)0x8000000100170460;
    v40._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v40);
    v79 = 0;
    v41 = 1000;
LABEL_16:
    v76._object = (void *)0xE000000000000000;
    v77 = v41;
    v76._countAndFlagsBits = 0;
    _print_unlocked<A, B>(_:_:)(&v79, &v76, &type metadata for Int, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v66._countAndFlagsBits = 3026478;
    v66._object = (void *)0xE300000000000000;
    String.append(_:)(v66);
    _print_unlocked<A, B>(_:_:)(&v77, &v76, &type metadata for Int, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v67 = (_TtC14softposreaderd12RemoteReader *)v76._object;
    String.append(_:)(v76);
    swift_bridgeObjectRelease(v67, v68, v69, v70, v71, v72, v73, v74);
    v75 = sub_100024860(3200, v78[0], (void *)v78[1], 0);
    swift_willThrow(v75);
    return;
  }
  if (a2 < 0x33u)
  {
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)0xE000000000000000, v42, v43, v44, v45, v46, v47, v48);
    v78[0] = 0xD000000000000010;
    v78[1] = 0x8000000100170480;
    LOBYTE(v76._countAndFlagsBits) = a2;
LABEL_15:
    v56._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
    v57 = (_TtC14softposreaderd12RemoteReader *)v56._object;
    String.append(_:)(v56);
    swift_bridgeObjectRelease(v57, v58, v59, v60, v61, v62, v63, v64);
    v65._object = (void *)0x8000000100170460;
    v65._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v65);
    v79 = 0;
    v41 = 50;
    goto LABEL_16;
  }
  if (a3 < 0x33u)
  {
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)0xE000000000000000, v49, v50, v51, v52, v53, v54, v55);
    strcpy((char *)v78, "Origin value ");
    HIWORD(v78[1]) = -4864;
    LOBYTE(v76._countAndFlagsBits) = a3;
    goto LABEL_15;
  }
  v16 = (a1 << 16) | (a2 << 8) | a3;
  v17 = v6[5];
  v18 = v6[6];
  sub_100005EF8(v6 + 2, v17);
  sub_100005EF8(v6 + 7, v6[10]);
  if (qword_1001AD118 != -1)
    swift_once(&qword_1001AD118, sub_1000BE860);
  v19 = sub_1000BB2E8(byte_1001B4D8F);
  (*(void (**)(uint64_t, id, uint64_t, uint64_t, uint64_t))(v18 + 8))(v16, v19, a4, v17, v18);
  if (v5)
  {
    v78[0] = v5;
    swift_errorRetain();
    v20 = sub_100003A2C((uint64_t *)&unk_1001B1280);
    v21 = String.init<A>(describing:)(v78, v20);
    v23 = sub_100024860(3201, v21, v22, 0);
    swift_willThrow(v23);
    swift_errorRelease();
  }
  else
  {
    sub_10003E208(v16, 0, 0);
  }
}

void sub_10011319C(int a1, unsigned __int8 a2, unsigned __int8 a3, uint64_t a4)
{
  sub_100112D5C(a1, a2, a3, a4);
}

uint64_t sub_1001131BC(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _UNKNOWN **v19;

  v18 = type metadata accessor for MPOCDefaultAttestationManager();
  v19 = &off_10019D8B8;
  *(_QWORD *)&v17 = a2;
  *(_OWORD *)(a4 + 104) = xmmword_1001621D0;
  *(_OWORD *)(a4 + 120) = xmmword_1001621E0;
  *(_OWORD *)(a4 + 136) = xmmword_1001621E0;
  if (qword_1001AD1F8 != -1)
    swift_once(&qword_1001AD1F8, sub_100112B04);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100003A14(v8, (uint64_t)qword_1001B2B50);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v16 = v13;
    *(_DWORD *)v12 = 136315138;
    v15 = sub_1000056EC(0xD000000000000038, 0x8000000100170420, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4, v12 + 12);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  sub_10001A674(a1, a4 + 16);
  sub_10001A674(&v17, a4 + 56);
  *(_QWORD *)(a4 + 96) = a3;
  return a4;
}

uint64_t sub_100113398(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD v19[5];
  _QWORD v20[5];
  __int128 v21;

  sub_1000E411C();
  if (v1)
  {
    swift_release(a1);
  }
  else
  {
    sub_1000E1CDC();
    v5 = sub_1000E370C();
    v6 = sub_10001A64C((uint64_t)v20, v20[3]);
    __chkstk_darwin(v6);
    v8 = (_QWORD *)((char *)&v19[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v9 + 16))(v8);
    v10 = *v8;
    v11 = type metadata accessor for MPOCDefaultAttestationManager();
    v19[3] = v11;
    v19[4] = &off_10019D8B8;
    v19[0] = v10;
    v12 = type metadata accessor for Monitor();
    v13 = swift_allocObject(v12, 152, 7);
    v14 = sub_10001A64C((uint64_t)v19, v11);
    __chkstk_darwin(v14);
    v16 = (_QWORD *)((char *)&v19[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v17 + 16))(v16);
    v2 = sub_1001131BC(&v21, *v16, v5, v13);
    sub_100005D3C(v19);
    sub_100005D3C(v20);
    swift_release(a1);
  }
  return v2;
}

uint64_t sub_100113558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v23 = a5;
  v11 = type metadata accessor for DispatchTime(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v22 - v17;
  static DispatchTime.now()(v16);
  + infix(_:_:)(v15);
  v19 = *(void (**)(char *, uint64_t))(v12 + 8);
  v19(v15, v11);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(a6 + 32))(a1, a2, a3, a4, v18, v23, a6);
  v19(v18, v11);
  return v20;
}

uint64_t sub_10011367C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v23 = a5;
  v11 = type metadata accessor for DispatchTime(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v22 - v17;
  static DispatchTime.now()(v16);
  + infix(_:_:)(v15);
  v19 = *(void (**)(char *, uint64_t))(v12 + 8);
  v19(v15, v11);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(a6 + 40))(a1, a2, a3, a4, v18, v23, a6);
  v19(v18, v11);
  return v20;
}

uint64_t sub_1001137A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B2C38);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B2C38);
  if (qword_1001AD158 != -1)
    swift_once(&qword_1001AD158, sub_1000CC540);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4DF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100113830(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  _BYTE v25[24];

  swift_beginAccess(v2 + 32, v25, 0, 0);
  v6 = *(_QWORD *)(v2 + 32);
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_5;
  sub_100005D9C(a1, a2);
  swift_bridgeObjectRetain();
  v7 = sub_10013A3F4(a1, a2);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v6, v8, v9, v10, v11, v12, v13, v14);
    sub_100005DE0(a1, a2);
LABEL_5:
    v23 = sub_1000243B8(6000, 0xD00000000000002CLL, (void *)0x80000001001704E0, 0);
    swift_willThrow(v23);
    return v3;
  }
  v15 = *(_QWORD *)(v6 + 56) + 16 * v7;
  v3 = *(_QWORD *)v15;
  sub_100005D9C(*(_QWORD *)v15, *(_QWORD *)(v15 + 8));
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v6, v16, v17, v18, v19, v20, v21, v22);
  sub_100005DE0(a1, a2);
  return v3;
}

void sub_100113930(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _BYTE v11[24];
  __int128 v12;

  swift_beginAccess(v2 + 32, v11, 33, 0);
  sub_100057CB0(a1, a2, &v12);
  swift_endAccess(v11);
  v5 = *((_QWORD *)&v12 + 1);
  sub_10000A9B0(v12, *((unint64_t *)&v12 + 1));
  if (v5 >> 60 == 15)
  {
    if (qword_1001AD200 != -1)
      swift_once(&qword_1001AD200, sub_1001137A0);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_100003A14(v6, (uint64_t)qword_1001B2C38);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "VolatilePersisting.delete: key not present", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

  }
}

uint64_t sub_100113A5C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for VolatilePersisting()
{
  return objc_opt_self(_TtC9SPREngine18VolatilePersisting);
}

uint64_t sub_100113AA8(uint64_t a1, unint64_t a2)
{
  return sub_100113830(a1, a2);
}

uint64_t sub_100113AC8(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t *v4;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  _TtC14softposreaderd12RemoteReader *v11;
  SEL v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  _BYTE v20[24];
  uint64_t v21;

  v9 = *v4;
  swift_beginAccess(*v4 + 32, v20, 33, 0);
  sub_100005D9C(a1, a2);
  sub_100005D9C(a3, a4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v9 + 32));
  v21 = *(_QWORD *)(v9 + 32);
  *(_QWORD *)(v9 + 32) = 0x8000000000000000;
  sub_1000EB74C(a3, a4, a1, a2, isUniquelyReferenced_nonNull_native);
  v11 = *(_TtC14softposreaderd12RemoteReader **)(v9 + 32);
  *(_QWORD *)(v9 + 32) = v21;
  swift_bridgeObjectRelease(v11, v12, v13, v14, v15, v16, v17, v18);
  sub_100005DE0(a1, a2);
  return swift_endAccess(v20);
}

void sub_100113BA0(uint64_t a1, uint64_t a2)
{
  sub_100113930(a1, a2);
}

void sub_100113BC0(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_100113C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t, unint64_t))(a4 + 8))(0x52554749464E4F43, 0xED00004E4F495441);
  return swift_bridgeObjectRelease(0xED00004E4F495441);
}

uint64_t sub_100113D00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _TtC14softposreaderd12RemoteReader *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD *v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  SEL v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  char isUniquelyReferenced_nonNull_native;
  _TtC14softposreaderd12RemoteReader *v56;
  SEL v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  SEL v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  uint64_t result;
  _QWORD v72[2];
  _QWORD *v73;
  _QWORD v74[5];
  _QWORD v75[5];
  __int128 v76[2];
  _BYTE v77[32];
  uint64_t v78;

  v9 = a1 + 112;
  swift_beginAccess(a1 + 112, v77, 0, 0);
  v10 = *(_QWORD *)(a1 + 112);
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = sub_10000ADC4(a2, (uint64_t)a3);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease(a3, v12, v13, v14, v15, v16, v17, v18);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v10, v34, v35, v36, v37, v38, v39, v40);
LABEL_5:
    sub_100008390(a1 + 16, (uint64_t)v76);
    sub_100008390(a1 + 56, (uint64_t)v75);
    v41 = *(_QWORD *)(a1 + 96);
    v42 = sub_10001A64C((uint64_t)v75, v75[3]);
    v72[1] = v72;
    __chkstk_darwin(v42);
    v44 = (_QWORD *)((char *)v72 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v45 + 16))(v44);
    v78 = v4;
    v46 = *v44;
    v47 = type metadata accessor for MPOCDefaultAttestationManager();
    v74[3] = v47;
    v74[4] = &off_10019D8B8;
    v74[0] = v46;
    v48 = type metadata accessor for ComponentAuditor();
    v49 = (_QWORD *)swift_allocObject(v48, 120, 7);
    v50 = sub_10001A64C((uint64_t)v74, v47);
    v73 = a4;
    __chkstk_darwin(v50);
    v52 = (_QWORD *)((char *)v72 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v53 + 16))(v52);
    v54 = *v52;
    swift_bridgeObjectRetain();
    swift_retain();
    v19 = sub_100114114(a2, (uint64_t)a3, v76, v54, v41, v49);
    sub_100005D3C(v74);
    sub_100005D3C(v75);
    a4 = v73;
    swift_beginAccess(v9, v76, 33, 0);
    swift_bridgeObjectRetain();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a1 + 112));
    v75[0] = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = 0x8000000000000000;
    sub_1000EC284((uint64_t)v19, a2, (uint64_t)a3, isUniquelyReferenced_nonNull_native);
    v56 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v75[0];
    swift_bridgeObjectRelease(a3, v57, v58, v59, v60, v61, v62, v63);
    swift_bridgeObjectRelease(v56, v64, v65, v66, v67, v68, v69, v70);
    swift_endAccess(v76);
    goto LABEL_6;
  }
  v19 = *(_QWORD **)(*(_QWORD *)(v10 + 56) + 8 * v11);
  swift_retain();
  swift_bridgeObjectRelease(a3, v20, v21, v22, v23, v24, v25, v26);
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v10, v27, v28, v29, v30, v31, v32, v33);
LABEL_6:
  result = type metadata accessor for ComponentAuditor();
  a4[3] = result;
  a4[4] = &off_10019F8F8;
  *a4 = v19;
  return result;
}

uint64_t sub_100113FC4()
{
  uint64_t v0;
  SEL v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;

  sub_100005D3C((_QWORD *)(v0 + 16));
  sub_100005D3C((_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 96));

  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(v0 + 112), v1, v2, v3, v4, v5, v6, v7);
  return swift_deallocClassInstance(v0, 120, 7);
}

uint64_t type metadata accessor for ComponentAuditorFactory()
{
  return objc_opt_self(_TtC9SPREngine23ComponentAuditorFactory);
}

uint64_t sub_100114028@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v15[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = *v3;
  static DispatchWorkItemFlags.barrier.getter(v9);
  v16 = v12;
  v17 = a1;
  v18 = a2;
  v13 = sub_100003A2C(&qword_1001AF6A8);
  OS_dispatch_queue.sync<A>(flags:execute:)(a3, v11, sub_1001140F8, v15, v13);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1001140F8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_100113D00(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_TtC14softposreaderd12RemoteReader **)(v1 + 32), a1);
}

_QWORD *sub_100114114(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  __int128 v18;
  uint64_t v19;
  _UNKNOWN **v20;

  v19 = type metadata accessor for MPOCDefaultAttestationManager();
  v20 = &off_10019D8B8;
  *(_QWORD *)&v18 = a4;
  if (qword_1001AD220 != -1)
    swift_once(&qword_1001AD220, sub_1001157B0);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_100003A14(v12, (uint64_t)qword_1001B3038);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "init(componentName:monitorLogger:attestationManager:monitorAnalytics:)", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  a6[2] = a1;
  a6[3] = a2;
  sub_10001A674(a3, (uint64_t)(a6 + 4));
  sub_10001A674(&v18, (uint64_t)(a6 + 9));
  a6[14] = a5;
  return a6;
}

_QWORD *sub_10011424C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[5];
  _QWORD v26[5];
  _QWORD v27[5];
  _QWORD v28[8];

  v3 = (_QWORD *)type metadata accessor for DispatchQoS.QoSClass(0);
  v4 = *(v3 - 1);
  __chkstk_darwin(v3);
  v6 = (char *)&v25[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000E411C();
  if (!v1)
  {
    sub_1000E1CDC();
    v8 = sub_1000E370C();
    sub_10001A610();
    (*(void (**)(char *, _QWORD, _QWORD *))(v4 + 104))(v6, enum case for DispatchQoS.QoSClass.background(_:), v3);
    v9 = static OS_dispatch_queue.global(qos:)(v6);
    (*(void (**)(char *, _QWORD *))(v4 + 8))(v6, v3);
    v10 = sub_10001A64C((uint64_t)v27, v27[3]);
    v28[7] = &v24;
    __chkstk_darwin(v10);
    v12 = (_QWORD *)((char *)&v25[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v13 + 16))(v12);
    v14 = *v12;
    v15 = type metadata accessor for MPOCDefaultAttestationManager();
    v26[3] = v15;
    v26[4] = &off_10019D8B8;
    v26[0] = v14;
    v16 = type metadata accessor for ComponentAuditorFactory();
    v3 = (_QWORD *)swift_allocObject(v16, 120, 7);
    v17 = sub_10001A64C((uint64_t)v26, v15);
    __chkstk_darwin(v17);
    v19 = (_QWORD *)((char *)&v25[-1] - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v20 + 16))(v19);
    v21 = *v19;
    v25[3] = v15;
    v25[4] = &off_10019D8B8;
    v25[0] = v21;
    sub_100008390((uint64_t)v28, (uint64_t)(v3 + 2));
    sub_100008390((uint64_t)v25, (uint64_t)(v3 + 7));
    v3[12] = v8;
    v3[13] = v9;
    v22 = type metadata accessor for ComponentAuditor();
    v23 = Dictionary.init(minimumCapacity:)(5, &type metadata for String, v22, &protocol witness table for String);
    sub_100005D3C(v25);
    sub_100005D3C(v28);
    v3[14] = v23;
    sub_100005D3C(v26);
    sub_100005D3C(v27);
  }
  swift_release(a1);
  return v3;
}

uint64_t sub_1001144F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B2E60);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B2E60);
  if (qword_1001AD158 != -1)
    swift_once(&qword_1001AD158, sub_1000CC540);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4DF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100114588@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = v1;
  if (qword_1001AD208 != -1)
    swift_once(&qword_1001AD208, sub_1001144F8);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100003A14(v4, (uint64_t)qword_1001B2E60);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v19 = v9;
    *(_DWORD *)v8 = 136315138;
    v17 = sub_1000056EC(0x64616552656B616DLL, 0xEC00000029287265, &v19);
    v2 = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v8 + 4, v8 + 12);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Provider.%s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  v10 = swift_retain();
  result = sub_10010DE0C(v10);
  if (!v2)
  {
    v12 = result;
    v13 = Logger.logObject.getter(result);
    v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      v19 = v16;
      *(_DWORD *)v15 = 136315138;
      v17 = sub_1000056EC(0x64616552656B616DLL, 0xEC00000029287265, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v15 + 4, v15 + 12);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Provider.%s: done", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }

    result = type metadata accessor for Reader();
    a1[3] = result;
    a1[4] = (uint64_t)&off_10019F3E0;
    *a1 = v12;
  }
  return result;
}

uint64_t sub_100114854@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = v1;
  if (qword_1001AD208 != -1)
    swift_once(&qword_1001AD208, sub_1001144F8);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100003A14(v4, (uint64_t)qword_1001B2E60);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v19 = v9;
    *(_DWORD *)v8 = 136315138;
    v17 = sub_1000056EC(0xD000000000000012, 0x80000001001705C0, &v19);
    v2 = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v8 + 4, v8 + 12);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Provider.%s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  v10 = swift_retain();
  result = sub_10006E91C(v10);
  if (!v2)
  {
    v12 = result;
    v13 = Logger.logObject.getter(result);
    v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      v19 = v16;
      *(_DWORD *)v15 = 136315138;
      v17 = sub_1000056EC(0xD000000000000012, 0x80000001001705C0, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v15 + 4, v15 + 12);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Provider.%s: done", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }

    result = type metadata accessor for Configurator();
    a1[3] = result;
    a1[4] = (uint64_t)&off_10019C630;
    *a1 = v12;
  }
  return result;
}

uint64_t sub_100114B18@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = v1;
  if (qword_1001AD208 != -1)
    swift_once(&qword_1001AD208, sub_1001144F8);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100003A14(v4, (uint64_t)qword_1001B2E60);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v19 = v9;
    *(_DWORD *)v8 = 136315138;
    v17 = sub_1000056EC(0x696E6F4D656B616DLL, 0xED00002928726F74, &v19);
    v2 = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v8 + 4, v8 + 12);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Provider.%s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  v10 = swift_retain();
  result = sub_100113398(v10);
  if (!v2)
  {
    v12 = result;
    v13 = Logger.logObject.getter(result);
    v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      v19 = v16;
      *(_DWORD *)v15 = 136315138;
      v17 = sub_1000056EC(0x696E6F4D656B616DLL, 0xED00002928726F74, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v15 + 4, v15 + 12);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Provider.%s: done", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }

    result = type metadata accessor for Monitor();
    a1[3] = result;
    a1[4] = (uint64_t)&off_10019F7C8;
    *a1 = v12;
  }
  return result;
}

uint64_t sub_100114DEC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = v1;
  if (qword_1001AD208 != -1)
    swift_once(&qword_1001AD208, sub_1001144F8);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100003A14(v4, (uint64_t)qword_1001B2E60);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v19 = v9;
    *(_DWORD *)v8 = 136315138;
    v17 = sub_1000056EC(0xD000000000000013, 0x80000001001705A0, &v19);
    v2 = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v8 + 4, v8 + 12);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Provider.%s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  v10 = swift_retain();
  result = sub_10004AF48(v10);
  if (!v2)
  {
    v12 = result;
    v13 = Logger.logObject.getter(result);
    v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      v19 = v16;
      *(_DWORD *)v15 = 136315138;
      v17 = sub_1000056EC(0xD000000000000013, 0x80000001001705A0, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v15 + 4, v15 + 12);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Provider.%s: done", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }

    result = type metadata accessor for DefaultPINController();
    a1[3] = result;
    a1[4] = (uint64_t)&off_10019BA08;
    *a1 = v12;
  }
  return result;
}

uint64_t sub_1001150B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = v1;
  if (qword_1001AD208 != -1)
    swift_once(&qword_1001AD208, sub_1001144F8);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100003A14(v4, (uint64_t)qword_1001B2E60);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v19 = v9;
    *(_DWORD *)v8 = 136315138;
    v17 = sub_1000056EC(0x6552524F656B616DLL, 0xEE00292872656461, &v19);
    v2 = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v8 + 4, v8 + 12);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Provider.%s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  v10 = swift_retain();
  result = (uint64_t)sub_100037300(v10);
  if (!v2)
  {
    v12 = result;
    v13 = Logger.logObject.getter(result);
    v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      v19 = v16;
      *(_DWORD *)v15 = 136315138;
      v17 = sub_1000056EC(0x6552524F656B616DLL, 0xEE00292872656461, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v15 + 4, v15 + 12);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Provider.%s: done", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }

    result = type metadata accessor for ORReader();
    a1[3] = result;
    a1[4] = (uint64_t)&off_10019AD20;
    *a1 = v12;
  }
  return result;
}

uint64_t sub_100115384()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for Provider()
{
  return objc_opt_self(_TtC9SPREngine8Provider);
}

uint64_t sub_1001153C8@<X0>(uint64_t *a1@<X8>)
{
  return sub_100114854(a1);
}

uint64_t sub_1001153E8@<X0>(uint64_t *a1@<X8>)
{
  return sub_100114B18(a1);
}

uint64_t sub_100115408@<X0>(uint64_t *a1@<X8>)
{
  return sub_100114588(a1);
}

uint64_t sub_100115428@<X0>(uint64_t *a1@<X8>)
{
  return sub_100114DEC(a1);
}

uint64_t sub_100115448@<X0>(uint64_t *a1@<X8>)
{
  return sub_1001150B0(a1);
}

id sub_100115468()
{
  id v0;
  id result;

  v0 = objc_msgSend(objc_allocWithZone((Class)LAContext), "init");
  result = objc_msgSend(v0, "setInteractionNotAllowed:", 1);
  qword_1001B4F20 = (uint64_t)v0;
  return result;
}

uint64_t sub_1001154B4()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for SystemInfo()
{
  return objc_opt_self(_TtC9SPREngine10SystemInfo);
}

uint64_t sub_1001154E4()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = sub_1000EDA60(&off_100197678);
  v1 = sub_100003A2C(&qword_1001B3030);
  result = swift_arrayDestroy(&unk_100197698, 1, v1);
  qword_1001B4F28 = v0;
  return result;
}

uint64_t sub_100115538(uint64_t *a1)
{
  return _sSC16SPRJSONErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(*a1);
}

uint64_t _sSC16SPRJSONErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  Swift::String v6;
  _TtC14softposreaderd12RemoteReader *object;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;

  if (qword_1001AD218 != -1)
    swift_once(&qword_1001AD218, sub_1001154E4);
  v2 = qword_1001B4F28;
  if (*(_QWORD *)(qword_1001B4F28 + 16) && (v3 = sub_10013A38C(a1), (v4 & 1) != 0))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 16 * v3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = (_TtC14softposreaderd12RemoteReader *)v6._object;
    String.append(_:)(v6);
    swift_bridgeObjectRelease(object, v8, v9, v10, v11, v12, v13, v14);
    return 0x6F7272454E4F534ALL;
  }
  return v5;
}

unint64_t sub_100115618(uint64_t a1)
{
  unint64_t result;

  result = sub_10011563C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10011563C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001AD788;
  if (!qword_1001AD788)
  {
    type metadata accessor for JSONError(255);
    result = swift_getWitnessTable(&unk_10015BD38, v1);
    atomic_store(result, (unint64_t *)&qword_1001AD788);
  }
  return result;
}

uint64_t sub_100115684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = sub_100115C04(a2);
  if (qword_1001AD110 != -1)
    swift_once(&qword_1001AD110, sub_1000BE4F4);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(a4 + 8))(a1, byte_1001B4D8E, v7, a3, a4);
  return swift_release(v7);
}

uint64_t sub_10011571C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;

  if (qword_1001AD110 != -1)
    swift_once(&qword_1001AD110, sub_1000BE4F4);
  v6 = byte_1001B4D8E;
  v7 = sub_1000046DC((uint64_t)_swiftEmptyArrayStorage);
  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(a3 + 8))(a1, v6, v7, a2, a3);
  return swift_bridgeObjectRelease(v7);
}

uint64_t sub_1001157B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B3038);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B3038);
  if (qword_1001AD150 != -1)
    swift_once(&qword_1001AD150, sub_1000CC47C);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4DE0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_100115840(char a1, char a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;

  v4 = v3;
  v7 = dword_100162484[a1] | (sub_1000E80DC(v4[2], v4[3]) << 8) | 1u;
  sub_100005EF8(v4 + 9, v4[12]);
  v8 = sub_1000BB2E8(a2);
  v9 = v3[7];
  v10 = v3[8];
  sub_100005EF8(v4 + 4, v4[7]);
  (*(void (**)(uint64_t, id, uint64_t, uint64_t, uint64_t))(v10 + 8))(v7, v8, a3, v9, v10);
  sub_10003E208(v7, (uint64_t)v8, a2);
}

uint64_t sub_100115B88(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v8;

  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(v8 + 24), a2, a3, a4, a5, a6, a7, a8);
  sub_100005D3C((_QWORD *)(v8 + 32));
  sub_100005D3C((_QWORD *)(v8 + 72));
  swift_release(*(_QWORD *)(v8 + 112));
  return swift_deallocClassInstance(v8, 120, 7);
}

uint64_t type metadata accessor for ComponentAuditor()
{
  return objc_opt_self(_TtC9SPREngine16ComponentAuditor);
}

void sub_100115BE4(char a1, char a2, uint64_t a3)
{
  sub_100115840(a1, a2, a3);
}

uint64_t sub_100115C04(uint64_t a1)
{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD v34[3];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  sub_100003A2C((uint64_t *)&unk_1001ACD40);
  result = static _DictionaryStorage.copy(original:)(a1);
  v3 = 0;
  v37 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  v5 = a1 + 64;
  v4 = v6;
  v7 = 1 << *(_BYTE *)(v5 - 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v4;
  v30 = v5;
  v31 = (unint64_t)(v7 + 63) >> 6;
  v32 = (_QWORD *)result;
  v33 = result + 64;
  if ((v8 & v4) == 0)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v11 = v3;
  for (i = v10 | (v3 << 6); ; i = __clz(__rbit64(v14)) + (v15 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(v37 + 48) + 16 * i);
    v18 = *v17;
    v19 = v17[1];
    sub_100008390(*(_QWORD *)(v37 + 56) + 40 * i, (uint64_t)v34);
    v20 = v35;
    v21 = v36;
    sub_100005EF8(v34, v35);
    swift_bridgeObjectRetain(v19);
    v22 = dispatch thunk of CustomStringConvertible.description.getter(v20, v21);
    v24 = v23;
    sub_100005D3C(v34);
    result = (uint64_t)v32;
    *(_QWORD *)(v33 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v25 = (_QWORD *)(v32[6] + 16 * i);
    *v25 = v18;
    v25[1] = v19;
    v26 = (uint64_t *)(v32[7] + 16 * i);
    *v26 = v22;
    v26[1] = v24;
    v27 = v32[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (v28)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v32[2] = v29;
    v3 = v11;
    if (v9)
      goto LABEL_4;
LABEL_5:
    v13 = v3 + 1;
    if (__OFADD__(v3, 1))
      goto LABEL_24;
    if (v13 >= v31)
      return result;
    v14 = *(_QWORD *)(v30 + 8 * v13);
    v15 = v3 + 1;
    if (!v14)
    {
      v15 = v3 + 2;
      if (v3 + 2 >= v31)
        return result;
      v14 = *(_QWORD *)(v30 + 8 * v15);
      if (!v14)
      {
        v15 = v3 + 3;
        if (v3 + 3 >= v31)
          return result;
        v14 = *(_QWORD *)(v30 + 8 * v15);
        if (!v14)
          break;
      }
    }
LABEL_18:
    v9 = (v14 - 1) & v14;
    v11 = v15;
  }
  v16 = v3 + 4;
  if (v3 + 4 >= v31)
    return result;
  v14 = *(_QWORD *)(v30 + 8 * v16);
  if (v14)
  {
    v15 = v3 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v31)
      return result;
    v14 = *(_QWORD *)(v30 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for VolatilePersistenceFactory()
{
  return objc_opt_self(_TtC9SPREngine26VolatilePersistenceFactory);
}

_QWORD *sub_100115E60@<X0>(const char *a1@<X1>, void *a2@<X2>, void *a3@<X3>, void *a4@<X4>, void *a5@<X5>, void *a6@<X6>, void *a7@<X7>, _QWORD *a8@<X8>)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *result;

  v9 = sub_1000E83A8((uint64_t)&_swiftEmptyArrayStorage, a1, a2, a3, a4, a5, a6, a7);
  v10 = type metadata accessor for VolatilePersisting();
  result = (_QWORD *)swift_allocObject(v10, 40, 7);
  result[2] = 0x676E6967676F4CLL;
  result[3] = 0xE700000000000000;
  result[4] = v9;
  a8[3] = v10;
  a8[4] = &off_10019F7E8;
  *a8 = result;
  return result;
}

unint64_t sub_100115EE0()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_100115EFC()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = sub_1000EDA38(&off_100196EF0);
  v1 = sub_100003A2C(&qword_1001B31C8);
  result = swift_arrayDestroy(&unk_100196F10, 32, v1);
  qword_1001B4F30 = v0;
  return result;
}

unint64_t sub_100115F50(uint64_t *a1)
{
  return _sSC25SPRConfigurationErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(*a1);
}

unint64_t _sSC25SPRConfigurationErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t *v5;
  uint64_t v6;
  Swift::String v7;
  void *object;

  if (qword_1001AD228 != -1)
    swift_once(&qword_1001AD228, sub_100115EFC);
  v2 = qword_1001B4F30;
  if (*(_QWORD *)(qword_1001B4F30 + 16) && (v3 = sub_10013A38C(a1), (v4 & 1) != 0))
  {
    v5 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 16 * v3);
    v6 = *v5;
    swift_bridgeObjectRetain(v5[1]);
  }
  else
  {
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease(0xE000000000000000);
    v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v7._object;
    String.append(_:)(v7);
    swift_bridgeObjectRelease(object);
    return 0xD000000000000013;
  }
  return v6;
}

unint64_t sub_10011604C(uint64_t a1)
{
  unint64_t result;

  result = sub_100116070();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100116070()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001AD750;
  if (!qword_1001AD750)
  {
    type metadata accessor for ConfigurationError(255);
    result = swift_getWitnessTable(&unk_10015BC28, v1);
    atomic_store(result, (unint64_t *)&qword_1001AD750);
  }
  return result;
}

uint64_t sub_1001160B8(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((a2 & 1) != 0)
    __asm { BR              X9 }
  type metadata accessor for ConfigurationError(0);
  v4 = v3;
  v11 = 2018;
  v5 = sub_100003A2C(&qword_1001AE038);
  inited = swift_initStackObject(v5, &v10);
  *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
  *(_QWORD *)(inited + 32) = 0xD000000000000011;
  *(_QWORD *)(inited + 40) = 0x800000010016B110;
  *(_QWORD *)(inited + 72) = &type metadata for Double;
  *(_QWORD *)(inited + 48) = a1;
  v7 = sub_1000047FC(inited);
  v8 = sub_100116070();
  _BridgedStoredNSError.init(_:userInfo:)(&v12, &v11, v7, v4, v8);
  return v12;
}

uint64_t sub_100116180()
{
  return sub_1000247AC(2023, 0, 0, 0);
}

void sub_1001161A0()
{
  JUMPOUT(0x100116184);
}

void sub_1001161A8()
{
  JUMPOUT(0x100116184);
}

void sub_1001161B0()
{
  JUMPOUT(0x100116184);
}

void sub_1001161B8()
{
  JUMPOUT(0x100116184);
}

uint64_t *AID_PAY_APPLET.unsafeMutableAddressor()
{
  if (qword_1001AD238 != -1)
    swift_once(&qword_1001AD238, sub_100116254);
  return &AID_PAY_APPLET;
}

uint64_t *AID_PIN_APPLET.unsafeMutableAddressor()
{
  if (qword_1001AD248 != -1)
    swift_once(&qword_1001AD248, sub_1001162D0);
  return &AID_PIN_APPLET;
}

void sub_100116240()
{
  qword_1001B4F38 = (uint64_t)&off_100198F58;
}

uint64_t sub_100116254()
{
  uint64_t result;
  uint64_t v1;

  result = sub_10010DD5C((uint64_t)&off_100197BE8);
  AID_PAY_APPLET = result;
  *(_QWORD *)algn_1001B4F48 = v1;
  return result;
}

uint64_t sub_10011627C()
{
  uint64_t result;
  Swift::String v1;

  if (qword_1001AD238 != -1)
    swift_once(&qword_1001AD238, sub_100116254);
  v1 = Data.hexString()();
  result = v1._countAndFlagsBits;
  xmmword_1001B4F50 = (__int128)v1;
  return result;
}

uint64_t sub_1001162D0()
{
  uint64_t result;
  uint64_t v1;

  result = sub_10010DD5C((uint64_t)&off_100197C18);
  AID_PIN_APPLET = result;
  *(_QWORD *)algn_1001B4F68 = v1;
  return result;
}

uint64_t sub_1001162F8()
{
  uint64_t result;
  Swift::String v1;

  if (qword_1001AD248 != -1)
    swift_once(&qword_1001AD248, sub_1001162D0);
  v1 = Data.hexString()();
  result = v1._countAndFlagsBits;
  xmmword_1001B4F70 = (__int128)v1;
  return result;
}

uint64_t sub_10011634C()
{
  uint64_t result;
  uint64_t v1;

  result = sub_10010DD5C((uint64_t)&off_100197B18);
  qword_1001B4F80 = result;
  *(_QWORD *)algn_1001B4F88 = v1;
  return result;
}

uint64_t sub_100116374()
{
  uint64_t result;
  Swift::String v1;

  if (qword_1001AD258 != -1)
    swift_once(&qword_1001AD258, sub_10011634C);
  v1 = Data.hexString()();
  result = v1._countAndFlagsBits;
  xmmword_1001B4F90 = (__int128)v1;
  return result;
}

uint64_t sub_1001163C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;

  v0 = type metadata accessor for String.Encoding(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter(v2);
  v5 = String.data(using:allowLossyConversion:)(v4, 0, 0xD000000000000017, 0x800000010016B220);
  v7 = v6;
  result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  if (v7 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    qword_1001B4FA0 = v5;
    *(_QWORD *)algn_1001B4FA8 = v7;
  }
  return result;
}

uint64_t sub_10011648C()
{
  uint64_t result;
  unint64_t v1;

  result = Data.init(hexString:)(825241648, 0xE400000000000000);
  if (v1 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    qword_1001B4FB0 = result;
    *(_QWORD *)algn_1001B4FB8 = v1;
  }
  return result;
}

uint64_t sub_1001164C8()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for TaggedObject()
{
  return objc_opt_self(_TtC9SPREngine12TaggedObject);
}

uint64_t *sub_1001164F8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v9);
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 11, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 11, v7);
    }
  }
  return a1;
}

uint64_t sub_1001165C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 11, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

void *sub_100116628(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 11, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 11, v6);
  }
  return a1;
}

void *sub_1001166CC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 11, v6);
  v10 = v8(a2, 11, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 11, v6);
  return a1;
}

void *sub_1001167BC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 11, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 11, v6);
  }
  return a1;
}

void *sub_100116860(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 11, v6);
  v10 = v8(a2, 11, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 11, v6);
  return a1;
}

uint64_t sub_100116950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10011695C);
}

uint64_t sub_10011695C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = type metadata accessor for URL(0);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 0xC)
    return v5 - 11;
  else
    return 0;
}

uint64_t sub_1001169A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001169B4);
}

uint64_t sub_1001169B4(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 11);
  else
    v5 = 0;
  v6 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_100116A08(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 11, v2);
}

uint64_t sub_100116A40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 11, v4);
}

uint64_t type metadata accessor for BackendSetting(uint64_t a1)
{
  uint64_t result;

  result = qword_1001B32E0;
  if (!qword_1001B32E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BackendSetting);
  return result;
}

uint64_t sub_100116ABC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256, *(_QWORD *)(result - 8) + 64, 11);
    return 0;
  }
  return result;
}

void sub_100116B10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = type metadata accessor for BackendSetting(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100117BE8(v0, (uint64_t)v5);
  v6 = (char *)sub_100116BE4
     + 4 * byte_1001625F0[(*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v5, 11, v1)];
  __asm { BR              X10 }
}

uint64_t sub_100116BE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  Swift::String v6;
  void *object;
  Swift::String v8;
  uint64_t v9;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v0);
  *(_QWORD *)(v4 - 64) = 0x286C72752ELL;
  *(_QWORD *)(v4 - 56) = 0xE500000000000000;
  v5 = sub_100117CF4();
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v0, v5);
  object = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(object);
  v8._countAndFlagsBits = 41;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v9 = *(_QWORD *)(v4 - 64);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
  return v9;
}

uint64_t sub_100116D24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  Swift::String v30;
  void *object;
  uint64_t v32;

  v4 = URL.scheme.getter();
  if (v5)
  {
    v6 = v4;
    v7 = v5;
    if (v4 == 1886680168 && v5 == 0xE400000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)(1886680168, 0xE400000000000000, v4, v5, 0) & 1) != 0
      || v6 == 0x7370747468 && v7 == 0xE500000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x7370747468, 0xE500000000000000, v6, v7, 0) & 1) != 0)
    {
      swift_bridgeObjectRelease(v7);
      v8 = type metadata accessor for URL(0);
      v9 = *(_QWORD *)(v8 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(a2, a1, v8);
      v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      v11 = a2;
      v12 = 0;
LABEL_9:
      v13 = v8;
      return v10(v11, v12, 11, v13);
    }
    if (v6 == 0x746C7561666564 && v7 == 0xE700000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x746C7561666564, 0xE700000000000000, v6, v7, 0) & 1) != 0)
    {
      v15 = type metadata accessor for URL(0);
      v16 = *(_QWORD *)(v15 - 8);
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a1, v15);
      swift_bridgeObjectRelease(v7);
      v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
      v11 = a2;
      v12 = 1;
LABEL_15:
      v13 = v15;
      return v10(v11, v12, 11, v13);
    }
    if (v6 == 1685025392 && v7 == 0xE400000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)(1685025392, 0xE400000000000000, v6, v7, 0) & 1) != 0)
    {
      v15 = type metadata accessor for URL(0);
      v17 = *(_QWORD *)(v15 - 8);
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a1, v15);
      swift_bridgeObjectRelease(v7);
      v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
      v11 = a2;
      v12 = 2;
      goto LABEL_15;
    }
    if (v6 == 0x6567617473 && v7 == 0xE500000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6567617473, 0xE500000000000000, v6, v7, 0) & 1) != 0)
    {
      v15 = type metadata accessor for URL(0);
      v18 = *(_QWORD *)(v15 - 8);
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a1, v15);
      swift_bridgeObjectRelease(v7);
      v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
      v11 = a2;
      v12 = 3;
      goto LABEL_15;
    }
    if (v6 == 1953654115 && v7 == 0xE400000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)(1953654115, 0xE400000000000000, v6, v7, 0) & 1) != 0)
    {
      v15 = type metadata accessor for URL(0);
      v19 = *(_QWORD *)(v15 - 8);
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a1, v15);
      swift_bridgeObjectRelease(v7);
      v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56);
      v11 = a2;
      v12 = 4;
      goto LABEL_15;
    }
    if (v6 == 3236209 && v7 == 0xE300000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)(3236209, 0xE300000000000000, v6, v7, 0) & 1) != 0)
    {
      v15 = type metadata accessor for URL(0);
      v20 = *(_QWORD *)(v15 - 8);
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(a1, v15);
      swift_bridgeObjectRelease(v7);
      v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
      v11 = a2;
      v12 = 5;
      goto LABEL_15;
    }
    if (v6 == 3301745 && v7 == 0xE300000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)(3301745, 0xE300000000000000, v6, v7, 0) & 1) != 0)
    {
      v15 = type metadata accessor for URL(0);
      v21 = *(_QWORD *)(v15 - 8);
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(a1, v15);
      swift_bridgeObjectRelease(v7);
      v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56);
      v11 = a2;
      v12 = 6;
      goto LABEL_15;
    }
    if (v6 == 3367281 && v7 == 0xE300000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)(3367281, 0xE300000000000000, v6, v7, 0) & 1) != 0)
    {
      v15 = type metadata accessor for URL(0);
      v22 = *(_QWORD *)(v15 - 8);
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(a1, v15);
      swift_bridgeObjectRelease(v7);
      v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56);
      v11 = a2;
      v12 = 7;
      goto LABEL_15;
    }
    if (v6 == 3432817 && v7 == 0xE300000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)(3432817, 0xE300000000000000, v6, v7, 0) & 1) != 0)
    {
      v15 = type metadata accessor for URL(0);
      v23 = *(_QWORD *)(v15 - 8);
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(a1, v15);
      swift_bridgeObjectRelease(v7);
      v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56);
      v11 = a2;
      v12 = 8;
      goto LABEL_15;
    }
    if (v6 == 3498353 && v7 == 0xE300000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)(3498353, 0xE300000000000000, v6, v7, 0) & 1) != 0)
    {
      v15 = type metadata accessor for URL(0);
      v24 = *(_QWORD *)(v15 - 8);
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(a1, v15);
      swift_bridgeObjectRelease(v7);
      v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56);
      v11 = a2;
      v12 = 9;
      goto LABEL_15;
    }
    if (v6 == 3563889 && v7 == 0xE300000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)(3563889, 0xE300000000000000, v6, v7, 0) & 1) != 0)
    {
      v15 = type metadata accessor for URL(0);
      v25 = *(_QWORD *)(v15 - 8);
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(a1, v15);
      swift_bridgeObjectRelease(v7);
      v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56);
      v11 = a2;
      v12 = 10;
      goto LABEL_15;
    }
    if (v6 == 0x656E696C66666FLL && v7 == 0xE700000000000000)
    {
      swift_bridgeObjectRelease(0xE700000000000000);
LABEL_56:
      v8 = type metadata accessor for URL(0);
      v27 = *(_QWORD *)(v8 - 8);
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(a1, v8);
      v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56);
      v11 = a2;
      v12 = 11;
      goto LABEL_9;
    }
    v26 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656E696C66666FLL, 0xE700000000000000, v6, v7, 0);
    swift_bridgeObjectRelease(v7);
    if ((v26 & 1) != 0)
      goto LABEL_56;
  }
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease(0xE000000000000000);
  v28 = type metadata accessor for URL(0);
  v29 = sub_100117CF4();
  v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v28, v29);
  object = v30._object;
  String.append(_:)(v30);
  swift_bridgeObjectRelease(object);
  v32 = sub_1000243DC(7001, 0xD000000000000015, (void *)0x8000000100170710, 0);
  swift_willThrow(v32);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(a1, v28);
}

uint64_t sub_1001173E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  void *v30;
  uint64_t v31;
  Swift::String v32;
  uint64_t v33;
  void *v34;
  Swift::String v35;
  void *object;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v4 = type metadata accessor for BackendSetting(0);
  v5 = __chkstk_darwin(v4);
  v45 = (uint64_t)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v43 - v7;
  v9 = sub_100003A2C(&qword_1001B0438);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v43 - v13;
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v18 = __chkstk_darwin(v17);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v43 - v20;
  __chkstk_darwin(v19);
  v25 = (char *)&v43 - v24;
  if (!*(_QWORD *)(a1 + 24))
  {
    sub_10005218C(a1, &qword_1001B12E0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(a2, 1, 11, v15);
  }
  v43 = v23;
  v44 = v22;
  v46 = a1;
  sub_100117C68(a1, (uint64_t)&v49);
  if (!v51)
  {
    sub_10005218C((uint64_t)&v49, &qword_1001B12E0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v15);
LABEL_8:
    sub_10005218C((uint64_t)v14, &qword_1001B0438);
    v28 = v46;
    sub_100117C68(v46, (uint64_t)&v49);
    if (v51)
    {
      if ((swift_dynamicCast(&v47, &v49, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
      {
        v31 = v47;
        v30 = (void *)v48;
        URL.init(string:)(v47, v48);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v12, 1, v15) != 1)
        {
          swift_bridgeObjectRelease(v30);
          v39 = v44;
          (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v44, v12, v15);
          v40 = v43;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v43, v39, v15);
          v41 = v45;
          v42 = v52;
          sub_100116D24(v40, v45);
          if (v42)
          {
            (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v39, v15);
            return sub_10005218C(v28, &qword_1001B12E0);
          }
          (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v39, v15);
          sub_10005218C(v28, &qword_1001B12E0);
          v38 = v41;
          return sub_100117CB0(v38, a2);
        }
        sub_10005218C((uint64_t)v12, &qword_1001B0438);
        v49 = 0;
        v50 = 0xE000000000000000;
        _StringGuts.grow(_:)(27);
        swift_bridgeObjectRelease(v50);
        v49 = 0xD000000000000019;
        v50 = 0x80000001001706F0;
        v32._countAndFlagsBits = v31;
        v32._object = v30;
        String.append(_:)(v32);
        swift_bridgeObjectRelease(v30);
        v33 = v49;
        v34 = (void *)v50;
LABEL_15:
        v37 = sub_1000243DC(7001, v33, v34, 0);
        swift_willThrow(v37);
        return sub_10005218C(v28, &qword_1001B12E0);
      }
    }
    else
    {
      sub_10005218C((uint64_t)&v49, &qword_1001B12E0);
    }
    v49 = 0;
    v50 = 0xE000000000000000;
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease(v50);
    v47 = 0xD000000000000019;
    v48 = 0x80000001001706D0;
    result = sub_100117C68(v28, (uint64_t)&v49);
    if (!v51)
    {
      __break(1u);
      return result;
    }
    v35._countAndFlagsBits = String.init<A>(describing:)(&v49, (char *)&type metadata for Any + 8);
    object = v35._object;
    String.append(_:)(v35);
    swift_bridgeObjectRelease(object);
    v33 = v47;
    v34 = (void *)v48;
    goto LABEL_15;
  }
  v26 = swift_dynamicCast(v14, &v49, (char *)&type metadata for Any + 8, v15, 6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v14, v26 ^ 1u, 1, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
    goto LABEL_8;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v25, v14, v15);
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v21, v25, v15);
  v27 = v52;
  sub_100116D24((uint64_t)v21, (uint64_t)v8);
  if (!v27)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v25, v15);
    sub_10005218C(v46, &qword_1001B12E0);
    v38 = (uint64_t)v8;
    return sub_100117CB0(v38, a2);
  }
  (*(void (**)(char *, uint64_t))(v16 + 8))(v25, v15);
  v28 = v46;
  return sub_10005218C(v28, &qword_1001B12E0);
}

void sub_1001178E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = type metadata accessor for BackendSetting(0);
  __chkstk_darwin(v6);
  v7 = sub_100003A2C(&qword_1001B32F0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_100117BE8(a1, (uint64_t)v10);
  sub_100117BE8(a2, v11);
  v12 = (char *)sub_1001179F8
      + 4 * byte_1001625FC[(*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 11, v4)];
  __asm { BR              X10 }
}

uint64_t sub_1001179F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  char v7;
  void (*v9)(uint64_t, uint64_t);

  sub_100117BE8(v0, v3);
  if (v5(v4, 11, v1))
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3, v1);
    sub_10005218C(v0, &qword_1001B32F0);
    v7 = 0;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v2, v4, v1);
    v7 = static URL.== infix(_:_:)(v3, v2);
    v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v9(v2, v1);
    v9(v3, v1);
    sub_100117C2C(v0);
  }
  return v7 & 1;
}

uint64_t sub_100117BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BackendSetting(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100117C2C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BackendSetting(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100117C68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003A2C(&qword_1001B12E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100117CB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BackendSetting(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100117CF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001B1310;
  if (!qword_1001B1310)
  {
    v1 = type metadata accessor for URL(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for URL, v1);
    atomic_store(result, (unint64_t *)&qword_1001B1310);
  }
  return result;
}

uint64_t sub_100117D3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B32F8);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B32F8);
  if (qword_1001AD158 != -1)
    swift_once(&qword_1001AD158, sub_1000CC540);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4DF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100117DCC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  id v17;
  NSString v18;
  NSString v19;
  id v20;
  void (*v21)(char *, char *, uint64_t);
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  char *v23;
  id v24;
  NSURL *v25;
  void *v26;
  void *v27;
  id v28;
  _QWORD *v29;
  uint64_t v30;
  char v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  id v38;
  NSURL *v39;
  void *v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  NSString v45;
  id v46;
  id v47;
  NSString v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  Class isa;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  void (*v61)(char *, uint64_t);
  _QWORD *v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  id v70;
  uint64_t v71;
  _QWORD aBlock[5];
  uint64_t v73;
  _QWORD *v74;

  v74 = a1;
  v67 = type metadata accessor for URL.DirectoryHint(0);
  v65 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v66 = (char *)&v63 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100003A2C(&qword_1001B0438);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v63 - v6;
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v68 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v63 - v13;
  __chkstk_darwin(v12);
  v69 = (char *)&v63 - v15;
  v16 = objc_msgSend((id)objc_opt_self(SPRMeta), "current");
  v17 = objc_msgSend(v16, "bundle");

  v18 = String._bridgeToObjectiveC()();
  v19 = String._bridgeToObjectiveC()();
  v70 = v17;
  v20 = objc_msgSend(v17, "URLForResource:withExtension:", v18, v19);

  if (!v20)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
    goto LABEL_9;
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v20);

  v21 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v21(v7, v14, v8);
  v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  v22(v7, 0, 1, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
LABEL_9:
    sub_100077844((uint64_t)v7);
    v33 = sub_1000243B8(6998, 0xD000000000000026, (void *)0x8000000100170780, 0);
    swift_willThrow(v33);

    goto LABEL_10;
  }
  v23 = v69;
  v21(v69, v7, v8);
  v24 = objc_allocWithZone((Class)NSManagedObjectModel);
  URL._bridgeToObjectiveC()(v25);
  v27 = v26;
  v28 = objc_msgSend(v24, "initWithContentsOfURL:", v26);

  if (v28)
  {
    v29 = sub_100005EF8(v74, v74[3]);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, *v29 + OBJC_IVAR____TtC9SPREngine11Environment_storageURL, v8);
    if (qword_1001AD040 != -1)
      swift_once(&qword_1001AD040, sub_100077E90);
    v30 = sub_100003A14(v8, (uint64_t)qword_1001B4CC8);
    v31 = static URL.== infix(_:_:)(v14, v30);
    v64 = *(void (**)(char *, uint64_t))(v9 + 8);
    v64(v14, v8);
    if ((v31 & 1) != 0)
    {
      v22(v5, 1, 1, v8);
      v32 = v66;
      (*(void (**)(char *, _QWORD, uint64_t))(v65 + 104))(v66, enum case for URL.DirectoryHint.inferFromPath(_:), v67);
      URL.init(filePath:directoryHint:relativeTo:)(0x6C756E2F7665642FLL, 0xE90000000000006CLL, v32, v5);
    }
    else
    {
      sub_100005EF8(v74, v74[3]);
      URL.appendingPathComponent(_:)(0xD000000000000014, 0x80000001001707D0);
    }
    v38 = objc_allocWithZone((Class)NSPersistentStoreDescription);
    URL._bridgeToObjectiveC()(v39);
    v41 = v40;
    v42 = objc_msgSend(v38, "initWithURL:", v40);

    static String._unconditionallyBridgeFromObjectiveC(_:)(NSFileProtectionCompleteUntilFirstUserAuthentication);
    v44 = v43;
    v45 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v44);
    objc_msgSend(v42, "setOption:forKey:", v45, NSPersistentStoreFileProtectionKey);

    v46 = objc_allocWithZone((Class)NSPersistentContainer);
    v47 = v28;
    v48 = String._bridgeToObjectiveC()();
    v49 = objc_msgSend(v46, "initWithName:managedObjectModel:", v48, v47);

    v50 = sub_100003A2C((uint64_t *)&unk_1001AE490);
    v51 = swift_allocObject(v50, 40, 7);
    *(_OWORD *)(v51 + 16) = xmmword_10015E4E0;
    *(_QWORD *)(v51 + 32) = v42;
    aBlock[0] = v51;
    specialized Array._endMutation()(v51);
    v52 = aBlock[0];
    sub_100005E24(0, &qword_1001B33E0, NSPersistentStoreDescription_ptr);
    v53 = v42;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v52);
    objc_msgSend(v49, "setPersistentStoreDescriptions:", isa);

    v55 = swift_allocObject(&unk_10019F9C0, 24, 7);
    *(_QWORD *)(v55 + 16) = 0;
    aBlock[4] = sub_100118AC8;
    v73 = v55;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001185C4;
    aBlock[3] = &unk_10019F9D8;
    v56 = _Block_copy(aBlock);
    v57 = v73;
    swift_retain(v55);
    swift_release(v57);
    objc_msgSend(v49, "loadPersistentStoresWithCompletionHandler:", v56);
    _Block_release(v56);
    swift_beginAccess(v55 + 16, aBlock, 0, 0);
    v58 = *(_QWORD *)(v55 + 16);
    if (!v58)
    {

      v61 = v64;
      v64(v68, v8);
      v61(v69, v8);
      v35 = v71;
      v62 = v74;
      sub_100008390((uint64_t)v74, v71 + 16);
      *(_QWORD *)(v35 + 56) = v49;
      swift_release(v55);
      sub_100005D3C(v62);
      return v35;
    }
    swift_errorRetain(*(_QWORD *)(v55 + 16));
    v59 = sub_1000243B8(6004, 0, 0, v58);
    swift_willThrow(v59);

    swift_errorRelease(v58);
    v60 = v64;
    v64(v68, v8);
    v60(v69, v8);
    swift_release(v55);
  }
  else
  {
    v37 = sub_1000243B8(6998, 0xD000000000000015, (void *)0x80000001001707B0, 0);
    swift_willThrow(v37);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v23, v8);
  }
LABEL_10:
  v34 = type metadata accessor for CoreDataManager();
  v35 = v71;
  swift_deallocPartialClassInstance(v71, v34, 64, 7);
  sub_100005D3C(v74);
  return v35;
}

uint64_t sub_100118568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _BYTE v7[24];

  swift_beginAccess(a3 + 16, v7, 1, 0);
  v5 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = a2;
  swift_errorRetain(a2);
  return swift_errorRelease(v5);
}

void sub_1001185C4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(id, void *);
  id v7;
  id v8;

  v6 = *(void (**)(id, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(v8, a3);
  swift_release(v5);

}

uint64_t sub_100118638()
{
  uint64_t v0;
  uint64_t v1;
  uint32_t *p_align;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint32_t *v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  unsigned int v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint32_t *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _TtC14softposreaderd12RemoteReader *v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  SEL v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  uint64_t v61;
  uint64_t v62;
  NSObject *log;
  uint64_t *v64;
  void *v65;
  unint64_t v66;
  id v67;

  v1 = v0;
  p_align = &stru_1001A9FE8.align;
  v3 = objc_msgSend(*(id *)(v0 + 56), "persistentStoreCoordinator");
  v4 = objc_msgSend(v3, "persistentStores");

  v5 = sub_100005E24(0, &qword_1001B33D8, NSPersistentStore_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0)
      v52 = v6;
    else
      v52 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v14 = _CocoaArrayWrapper.endIndex.getter(v52);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v6, v53, v54, v55, v56, v57, v58, v59);
    if (!v14)
      goto LABEL_21;
  }
  else
  {
    v14 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v14)
      goto LABEL_21;
  }
  if (v14 < 1)
    __break(1u);
  v15 = 0;
  v16 = v6 & 0xC000000000000001;
  v17 = &stru_1001A9FE8.align;
  v61 = v14;
  v62 = v6;
  v66 = v6 & 0xC000000000000001;
  do
  {
    if (v16)
      v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v6);
    else
      v19 = *(id *)(v6 + 8 * v15 + 32);
    v20 = v19;
    v21 = objc_msgSend(*(id *)(v1 + 56), *((SEL *)p_align + 432));
    v67 = 0;
    v22 = objc_msgSend(v21, *((SEL *)v17 + 434), v20, &v67);

    v23 = v67;
    if (v22)
    {
      v18 = v67;

    }
    else
    {
      v24 = v67;
      v25 = _convertNSErrorToError(_:)(v23);

      swift_willThrow(v26);
      if (qword_1001AD278 != -1)
        swift_once(&qword_1001AD278, sub_100117D3C);
      v27 = type metadata accessor for Logger(0);
      sub_100003A14(v27, (uint64_t)qword_1001B32F8);
      v28 = v20;
      swift_errorRetain();
      v29 = v28;
      v30 = swift_errorRetain();
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v31, v32))
      {
        v33 = swift_slowAlloc(22, -1);
        v64 = (uint64_t *)swift_slowAlloc(8, -1);
        v65 = (void *)swift_slowAlloc(32, -1);
        v67 = v65;
        *(_DWORD *)v33 = 136315394;
        v34 = p_align;
        v35 = objc_msgSend(v29, "debugDescription");
        log = v31;
        v36 = v1;
        v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
        v39 = v38;

        p_align = v34;
        v40 = v37;
        v1 = v36;
        *(_QWORD *)(v33 + 4) = sub_1000056EC(v40, v39, (uint64_t *)&v67);

        v41 = (_TtC14softposreaderd12RemoteReader *)v39;
        v6 = v62;
        swift_bridgeObjectRelease(v41, v42, v43, v44, v45, v46, v47, v48);
        *(_WORD *)(v33 + 12) = 2112;
        v49 = _convertErrorToNSError(_:)(v25);
        *(_QWORD *)(v33 + 14) = v49;
        *v64 = v49;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, log, v32, "Failed to remove %s: %@", (uint8_t *)v33, 0x16u);
        v50 = sub_100003A2C((uint64_t *)&unk_1001AE430);
        swift_arrayDestroy(v64, 1, v50);
        swift_slowDealloc(v64, -1, -1);
        swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v65, -1, -1);
        v51 = v33;
        v14 = v61;
        swift_slowDealloc(v51, -1, -1);

        swift_errorRelease();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();

      }
      v16 = v66;
      v17 = (_DWORD *)(&stru_1001A9FE8 + 24);
    }
    ++v15;
  }
  while (v14 != v15);
LABEL_21:
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v6, v7, v8, v9, v10, v11, v12, v13);
  sub_100005D3C((_QWORD *)(v1 + 16));

  return v1;
}

uint64_t sub_100118A64()
{
  uint64_t v0;

  sub_100118638();
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for CoreDataManager()
{
  return objc_opt_self(_TtC9SPREngine15CoreDataManager);
}

uint64_t sub_100118AA4()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100118AC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100118568(a1, a2, v2);
}

uint64_t sub_100118AD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100118AE0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100118AE8()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = sub_1000EDA24(&off_100196E28);
  v1 = sub_100003A2C(&qword_1001B33E8);
  result = swift_arrayDestroy(&unk_100196E48, 7, v1);
  qword_1001B4FC8 = v0;
  return result;
}

unint64_t sub_100118B3C(uint64_t *a1)
{
  return _sSC25SPRSecureChannelErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(*a1);
}

unint64_t _sSC25SPRSecureChannelErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  SEL v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  Swift::String v13;
  _TtC14softposreaderd12RemoteReader *object;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;

  if (qword_1001AD280 != -1)
    swift_once(&qword_1001AD280, sub_100118AE8);
  v2 = qword_1001B4FC8;
  if (*(_QWORD *)(qword_1001B4FC8 + 16) && (v3 = sub_10013A38C(a1), (v4 & 1) != 0))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 16 * v3);
    swift_bridgeObjectRetain();
  }
  else
  {
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)0xE000000000000000, v6, v7, v8, v9, v10, v11, v12);
    v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = (_TtC14softposreaderd12RemoteReader *)v13._object;
    String.append(_:)(v13);
    swift_bridgeObjectRelease(object, v15, v16, v17, v18, v19, v20, v21);
    return 0xD000000000000013;
  }
  return v5;
}

unint64_t sub_100118C38(uint64_t a1)
{
  unint64_t result;

  result = sub_100118C5C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100118C5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001AD718;
  if (!qword_1001AD718)
  {
    type metadata accessor for SecureChannelError(255);
    result = swift_getWitnessTable(&unk_10015BB18, v1);
    atomic_store(result, (unint64_t *)&qword_1001AD718);
  }
  return result;
}

CFStringRef sub_100118CA4(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  CFStringRef result;
  uint64_t v11;
  const void *v12;
  CFStringRef v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id *v17;
  id v18;
  CFStringRef v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;

  if ((unint64_t)a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (v2)
  {
    while (1)
    {
      result = (CFStringRef)specialized ContiguousArray.reserveCapacity(_:)(v2);
      if (v2 < 0)
      {
        __break(1u);
        goto LABEL_21;
      }
      if ((a1 & 0xC000000000000001) == 0)
        break;
      v11 = 0;
      while (v2 != v11)
      {
        v12 = (const void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, a1);
        result = CFCopyDescription(v12);
        if (!result)
          goto LABEL_21;
        v13 = result;
        v14 = swift_unknownObjectRelease(v12);
        ++v11;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v14);
        v15 = *(_QWORD *)&_swiftEmptyArrayStorage.instance[8];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v15);
        v16 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v13);
        specialized ContiguousArray._endMutation()(v16);
        if (v2 == v11)
          goto LABEL_19;
      }
      __break(1u);
      __break(1u);
LABEL_15:
      if (a1 < 0)
        v22 = a1;
      else
        v22 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v2 = _CocoaArrayWrapper.endIndex.getter(v22);
      if (!v2)
        goto LABEL_19;
    }
    v17 = (id *)(a1 + 32);
    while (1)
    {
      v18 = *v17;
      result = CFCopyDescription(v18);
      if (!result)
        break;
      v19 = result;

      ((void (*)(void))specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique())();
      v20 = *(_QWORD *)&_swiftEmptyArrayStorage.instance[8];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v20);
      v21 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v19);
      specialized ContiguousArray._endMutation()(v21);
      ++v17;
      if (!--v2)
        goto LABEL_19;
    }
LABEL_21:
    __break(1u);
  }
  else
  {
LABEL_19:
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, v3, v4, v5, v6, v7, v8, v9);
    type metadata accessor for CFString(0);
    v24 = Array.description.getter(&_swiftEmptyArrayStorage, v23);
    swift_bridgeObjectRelease(&_swiftEmptyArrayStorage, v25, v26, v27, v28, v29, v30, v31);
    return (CFStringRef)v24;
  }
  return result;
}

uint64_t sub_100118E70(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  id v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;

  if (!((unint64_t)a1 >> 62))
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_19:
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)a1, v3, v4, v5, v6, v7, v8, v9);
    v28 = sub_100003A2C((uint64_t *)&unk_1001AE460);
    v29 = sub_1000248C8();
    v30 = BidirectionalCollection<>.joined(separator:)(10, 0xE100000000000000, v28, v29);
    swift_bridgeObjectRelease(&_swiftEmptyArrayStorage, v31, v32, v33, v34, v35, v36, v37);
    return v30;
  }
  if (a1 < 0)
    v27 = a1;
  else
    v27 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v2 = _CocoaArrayWrapper.endIndex.getter(v27);
  if (!v2)
    goto LABEL_19;
LABEL_3:
  result = sub_100091C44(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v11 = 0;
      do
      {
        v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(v11, a1);
        v13 = SecCertificateRef.pemRepresentation.getter();
        v15 = v14;
        swift_unknownObjectRelease(v12);
        v17 = *(_QWORD *)&_swiftEmptyArrayStorage.instance[8];
        v16 = *(_QWORD *)&_swiftEmptyArrayStorage.instance[16];
        if (v17 >= v16 >> 1)
          sub_100091C44(v16 > 1, v17 + 1, 1);
        ++v11;
        *(_QWORD *)&_swiftEmptyArrayStorage.instance[8] = v17 + 1;
        v18 = (char *)&_swiftEmptyArrayStorage + 16 * v17;
        *((_QWORD *)v18 + 4) = v13;
        *((_QWORD *)v18 + 5) = v15;
      }
      while (v2 != v11);
    }
    else
    {
      v19 = 0;
      do
      {
        v20 = *(id *)(a1 + 8 * v19 + 32);
        v21 = SecCertificateRef.pemRepresentation.getter();
        v23 = v22;

        v25 = *(_QWORD *)&_swiftEmptyArrayStorage.instance[8];
        v24 = *(_QWORD *)&_swiftEmptyArrayStorage.instance[16];
        if (v25 >= v24 >> 1)
          sub_100091C44(v24 > 1, v25 + 1, 1);
        ++v19;
        *(_QWORD *)&_swiftEmptyArrayStorage.instance[8] = v25 + 1;
        v26 = (char *)&_swiftEmptyArrayStorage + 16 * v25;
        *((_QWORD *)v26 + 4) = v21;
        *((_QWORD *)v26 + 5) = v23;
      }
      while (v2 != v19);
    }
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t sub_100119078(uint64_t *a1, uint64_t *a2)
{
  return sub_1001282F8(*a1, *a2);
}

CFStringRef sub_100119084()
{
  uint64_t *v0;

  return sub_100118CA4(*v0);
}

ValueMetadata *type metadata accessor for SPRCertificate()
{
  return &type metadata for SPRCertificate;
}

uint64_t sub_10011909C()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  _TtC14softposreaderd12RemoteReader *object;
  uint64_t countAndFlagsBits;
  Swift::String v6;
  _TtC14softposreaderd12RemoteReader *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  Swift::String v15;
  _TtC14softposreaderd12RemoteReader *v16;
  uint64_t v17;
  unint64_t v18;
  _TtC14softposreaderd12RemoteReader *v19;
  _TtC14softposreaderd12RemoteReader *v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  Swift::String v28;
  _TtC14softposreaderd12RemoteReader *v29;
  _TtC14softposreaderd12RemoteReader *v30;
  Swift::String v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  _BYTE v40[8];
  _BYTE v41[16];
  _BYTE v42[272];
  _QWORD v43[32];
  uint64_t v44;
  char v45;
  uint64_t v46;

  v1 = 7104878;
  v43[0] = 0;
  v43[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(69);
  v2._object = (void *)0x8000000100162760;
  v2._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v2);
  v3._object = (void *)0x8000000100170850;
  v3._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v3);
  sub_100024374(v0, (uint64_t)v42, &qword_1001AE028);
  sub_100024374((uint64_t)v42, (uint64_t)v43, &qword_1001AE028);
  if (sub_1000240E0((uint64_t)v43) == 1)
  {
    object = (_TtC14softposreaderd12RemoteReader *)0xE300000000000000;
    countAndFlagsBits = 7104878;
  }
  else
  {
    v6 = String.redactedToken()();
    countAndFlagsBits = v6._countAndFlagsBits;
    object = (_TtC14softposreaderd12RemoteReader *)v6._object;
  }
  v7 = object;
  String.append(_:)(*(Swift::String *)&countAndFlagsBits);
  swift_bridgeObjectRelease(object, v8, v9, v10, v11, v12, v13, v14);
  v15._object = (void *)0x8000000100170870;
  v15._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v15);
  sub_100024374(v0 + 272, (uint64_t)v41, &qword_1001B33F0);
  sub_100024374((uint64_t)v41, (uint64_t)&v44, &qword_1001B33F0);
  if ((v45 & 1) != 0)
  {
    v16 = (_TtC14softposreaderd12RemoteReader *)0xE300000000000000;
    v17 = 7104878;
  }
  else
  {
    v46 = v44;
    v18 = sub_1001192C4();
    v17 = BinaryInteger.description.getter(&type metadata for Int64, v18);
    v16 = v19;
  }
  v20 = v16;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease(v16, v21, v22, v23, v24, v25, v26, v27);
  v28._countAndFlagsBits = 0xD000000000000017;
  v28._object = (void *)0x800000010016E680;
  String.append(_:)(v28);
  sub_100024374(v0 + 288, (uint64_t)v40, &qword_1001B2378);
  sub_100024374((uint64_t)v40, (uint64_t)&v46, &qword_1001B2378);
  if (v46)
  {
    v1 = Array.description.getter(v46, &type metadata for MPOCDeprecationWarning);
    v30 = v29;
  }
  else
  {
    v30 = (_TtC14softposreaderd12RemoteReader *)0xE300000000000000;
  }
  v31._countAndFlagsBits = v1;
  v31._object = v30;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(v30, v32, v33, v34, v35, v36, v37, v38);
  return 0;
}

unint64_t sub_1001192C4()
{
  unint64_t result;

  result = qword_1001B33F8;
  if (!qword_1001B33F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int64, &type metadata for Int64);
    atomic_store(result, (unint64_t *)&qword_1001B33F8);
  }
  return result;
}

uint64_t sub_100119308(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _BYTE v19[272];
  _BYTE v20[280];
  _BYTE v21[8];

  v3 = v1;
  v5 = sub_100003A2C(&qword_1001B3468);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = a1[3];
  v10 = a1[4];
  sub_100005EF8(a1, v9);
  v11 = sub_10011B850();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for MPOCMonitorResponse.CodingKeys, &type metadata for MPOCMonitorResponse.CodingKeys, v11, v9, v10);
  sub_100024374(v3, (uint64_t)v20, &qword_1001AE028);
  sub_100024374((uint64_t)v20, (uint64_t)v19, &qword_1001AE028);
  HIBYTE(v18) = 0;
  v12 = sub_10011B95C();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v19, (char *)&v18 + 7, v5, &type metadata for JSONWebToken, v12);
  if (!v2)
  {
    v13 = *(_QWORD *)(v3 + 272);
    v14 = *(unsigned __int8 *)(v3 + 280);
    v19[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v13, v14, v19, v5);
    sub_100024374(v3 + 288, (uint64_t)v21, &qword_1001B2378);
    sub_100024374((uint64_t)v21, (uint64_t)v19, &qword_1001B2378);
    HIBYTE(v18) = 2;
    v15 = sub_100003A2C(&qword_1001B3418);
    v16 = sub_10011B7E8(&qword_1001B3448, (void (*)(void))sub_100071160, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v19, (char *)&v18 + 7, v5, v15, v16);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1001194EC()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x7078456E656B6F74;
  if (*v0 != 1)
    v1 = 0xD000000000000013;
  if (*v0)
    return v1;
  else
    return 0xD000000000000010;
}

uint64_t sub_100119558@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10011B3A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10011957C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10011B850();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001195A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10011B850();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001195CC()
{
  const void *v0;
  _BYTE __dst[296];

  memcpy(__dst, v0, sizeof(__dst));
  return sub_10011909C();
}

void *sub_100119604@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  void *result;
  _BYTE __src[296];

  result = sub_10011B08C(a1, __src);
  if (!v2)
    return memcpy(a2, __src, 0x128uLL);
  return result;
}

uint64_t sub_100119654(_QWORD *a1)
{
  const void *v1;
  _BYTE __dst[296];

  memcpy(__dst, v1, sizeof(__dst));
  return sub_100119308(a1);
}

BOOL sub_1001196A4(void *__src, const void *a2)
{
  _BYTE v4[296];
  _BYTE __dst[296];

  memcpy(v4, __src, sizeof(v4));
  memcpy(__dst, a2, sizeof(__dst));
  return sub_100119D80((uint64_t)v4, (uint64_t)__dst);
}

uint64_t sub_1001196F8(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  char v21[8];
  _BYTE v22[8];

  v3 = v1;
  v5 = sub_100003A2C(&qword_1001B3440);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100005EF8(a1, v9);
  v11 = sub_10011B71C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for MPOCBackendMonitorResponse.CodingKeys, &type metadata for MPOCBackendMonitorResponse.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v21[0] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, v21, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = *((unsigned __int8 *)v3 + 24);
    v21[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, v21, v5);
    sub_100024374((uint64_t)(v3 + 4), (uint64_t)v22, &qword_1001B2378);
    sub_100024374((uint64_t)v22, (uint64_t)v21, &qword_1001B2378);
    v20 = 2;
    v16 = sub_100003A2C(&qword_1001B3418);
    v17 = sub_10011B7E8(&qword_1001B3448, (void (*)(void))sub_100071160, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, &v20, v5, v16, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100119894(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10011B71C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001198BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10011B71C();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1001198E4@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_10011B518(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_100119928(_QWORD *a1)
{
  return sub_1001196F8(a1);
}

uint64_t sub_100119960()
{
  uint64_t *v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  void *object;

  _StringGuts.grow(_:)(54);
  v1._countAndFlagsBits = 0xD000000000000016;
  v1._object = (void *)0x80000001001627C0;
  String.append(_:)(v1);
  v2._object = (void *)0x8000000100170890;
  v2._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v2);
  v3 = *v0;
  v4 = (void *)v0[1];
  swift_bridgeObjectRetain(v4);
  v5._countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v4);
  v6._countAndFlagsBits = 0x3A65756C6176202CLL;
  v6._object = (void *)0xE900000000000020;
  String.append(_:)(v6);
  v7 = v0[2];
  v8 = (void *)v0[3];
  swift_bridgeObjectRetain(v8);
  v9._countAndFlagsBits = v7;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v8);
  v10._countAndFlagsBits = 0xD000000000000013;
  v10._object = (void *)0x80000001001708B0;
  String.append(_:)(v10);
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
  object = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(object);
  return 0;
}

uint64_t sub_100119AB0(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  char v20;
  char v21;

  v3 = v1;
  v5 = sub_100003A2C(&qword_1001B3430);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100005EF8(a1, v9);
  v11 = sub_10011B7A4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for MPOCDeprecationWarning.CodingKeys, &type metadata for MPOCDeprecationWarning.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v21, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v20 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v20, v5);
    v16 = v3[4];
    v19 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v19, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100119BEC()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x65756C6176;
  if (*v0 != 1)
    v1 = 0x7461636572706564;
  if (*v0)
    return v1;
  else
    return 0x7461636572706564;
}

uint64_t sub_100119C4C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10011B9A0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100119C70(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10011B7A4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100119C98(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10011B7A4();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100119CC4@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_10011BB2C(a1, (uint64_t *)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_100119D08(_QWORD *a1)
{
  return sub_100119AB0(a1);
}

BOOL sub_100119D1C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return sub_10011A0BC((uint64_t *)v5, v7);
}

uint64_t sub_100119D64(uint64_t a1, uint64_t a2)
{
  return sub_10011A140(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

BOOL sub_100119D80(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[272];
  uint64_t v58;
  _OWORD v59[12];
  _OWORD v60[12];
  _BYTE v61[272];
  _BYTE v62[272];
  _BYTE v63[280];

  sub_100024374(a1, (uint64_t)v61, &qword_1001AE028);
  sub_100024374(a2, (uint64_t)v62, &qword_1001AE028);
  sub_100024374((uint64_t)v61, (uint64_t)v63, &qword_1001AE028);
  if (sub_1000240E0((uint64_t)v63) == 1)
  {
    sub_100024374((uint64_t)v62, (uint64_t)v57, &qword_1001AE028);
    if (sub_1000240E0((uint64_t)v57) == 1)
      goto LABEL_3;
LABEL_7:
    sub_100024374((uint64_t)v61, (uint64_t)v57, &qword_1001AE028);
    sub_100024374((uint64_t)v62, (uint64_t)&v58, &qword_1001AE028);
    sub_1000D76F0((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100070FD0);
    sub_1000D76F0((uint64_t)v62, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100070FD0);
    sub_1000D7568((uint64_t)v57);
    return 0;
  }
  sub_100024374((uint64_t)v62, (uint64_t)v57, &qword_1001AE028);
  if (sub_1000240E0((uint64_t)v57) == 1)
    goto LABEL_7;
  sub_100024374((uint64_t)v61, (uint64_t)&v19, &qword_1001AE028);
  sub_100024374((uint64_t)v62, (uint64_t)&v39, &qword_1001AE028);
  v6 = v21;
  v7 = v22;
  v9 = v23;
  v8 = v24;
  v10 = v41;
  v11 = v42;
  v13 = v43;
  v12 = v44;
  if ((v19 != v39 || v20 != v40) && (_stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, v39, v40, 0) & 1) == 0
    || (v6 != v10 || v7 != v11) && (_stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v10, v11, 0) & 1) == 0)
  {
    return 0;
  }
  if (v8)
  {
    if (!v12
      || (v9 != v13 || v8 != v12) && (_stringCompareWithSmolCheck(_:_:expecting:)(v9, v8, v13, v12, 0) & 1) == 0)
    {
      return 0;
    }
  }
  else if (v12)
  {
    return 0;
  }
  v59[8] = v33;
  v59[9] = v34;
  v59[10] = v35;
  v59[11] = v36;
  v59[4] = v29;
  v59[5] = v30;
  v59[6] = v31;
  v59[7] = v32;
  v59[0] = v25;
  v59[1] = v26;
  v59[2] = v27;
  v59[3] = v28;
  v60[8] = v53;
  v60[9] = v54;
  v60[10] = v55;
  v60[11] = v56;
  v60[4] = v49;
  v60[5] = v50;
  v60[6] = v51;
  v60[7] = v52;
  v60[0] = v45;
  v60[1] = v46;
  v60[2] = v47;
  v60[3] = v48;
  if (!sub_1000D2704((uint64_t *)v59, (uint64_t)v60))
    return 0;
  v16 = v37;
  v17 = v38;
  sub_1000D76F0((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100070FD0);
  sub_1000D76F0((uint64_t)v62, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100070FD0);
  sub_1001288E0(v16, v17);
  LOBYTE(v16) = v18;
  sub_1000D76F0((uint64_t)v62, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100024170);
  sub_1000D76F0((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100024170);
  if ((v16 & 1) == 0)
    return 0;
LABEL_3:
  v4 = *(_BYTE *)(a2 + 280);
  if ((*(_BYTE *)(a1 + 280) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 280))
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 272) != *(_QWORD *)(a2 + 272))
      v4 = 1;
    if ((v4 & 1) != 0)
      return 0;
  }
  v14 = *(_QWORD *)(a1 + 288);
  v15 = *(_QWORD *)(a2 + 288);
  if (v14)
    return v15 && (sub_1001278F4(v14, v15) & 1) != 0;
  return !v15;
}

BOOL sub_10011A0BC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  _BOOL8 result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  v7 = v4 == *a2 && v5 == v6;
  if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0), result = 0, (v8 & 1) != 0))
  {
    v10 = a1[2];
    v11 = a1[3];
    v12 = a2[2];
    v13 = a2[3];
    if (v10 == v12 && v11 == v13)
      return a1[4] == a2[4];
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v12, v13, 0);
    result = 0;
    if ((v15 & 1) != 0)
      return a1[4] == a2[4];
  }
  return result;
}

uint64_t sub_10011A140(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if ((a2 & 1) != 0)
    return ((uint64_t (*)(void))((char *)&loc_10011A178 + 4 * byte_100162740[a1]))();
  if ((a4 & 1) != 0)
    return 0;
  return *(double *)&a1 == *(double *)&a3;
}

void sub_10011A2BC(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD v16[37];
  _BYTE v17[272];
  _OWORD v18[17];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _BYTE __src[272];

  v7 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  v8 = JSONDecoder.init()();
  v9 = sub_10011A420();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for MPOCBackendMonitorResponse, a1, a2, &type metadata for MPOCBackendMonitorResponse, v9);
  if (v3)
  {
    swift_release(v8);
  }
  else
  {
    swift_release(v8);
    v10 = v19;
    v11 = v20;
    v12 = v21;
    v13 = v22;
    v14 = v23;
    sub_1000549E8(v18);
    if (v11)
    {
      sub_1000D2C04(v10, v11, __src);
      memcpy(v16, __src, 0x110uLL);
      BitString.init(data:unusedBits:)(v16);
      v15 = v16;
    }
    else
    {
      v15 = v18;
    }
    sub_100024374((uint64_t)v15, (uint64_t)v17, &qword_1001AE028);
    sub_100024374((uint64_t)v17, (uint64_t)v16, &qword_1001AE028);
    v16[34] = v12;
    LOBYTE(v16[35]) = v13;
    v16[36] = v14;
    memcpy(a3, v16, 0x128uLL);
  }
}

unint64_t sub_10011A420()
{
  unint64_t result;

  result = qword_1001B3400;
  if (!qword_1001B3400)
  {
    result = swift_getWitnessTable(&unk_100162988, &type metadata for MPOCBackendMonitorResponse);
    atomic_store(result, (unint64_t *)&qword_1001B3400);
  }
  return result;
}

uint64_t destroy for MPOCBackendMonitorResponse(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for MPOCBackendMonitorResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for MPOCBackendMonitorResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t assignWithTake for MPOCBackendMonitorResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for MPOCBackendMonitorResponse(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MPOCBackendMonitorResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MPOCBackendMonitorResponse()
{
  return &type metadata for MPOCBackendMonitorResponse;
}

void destroy for MPOCMonitorResponse(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  _TtC14softposreaderd12RemoteReader *v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  SEL v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  SEL v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  SEL v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  SEL v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  SEL v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  SEL v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  SEL v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  SEL v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;

  v9 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 8);
  if (v9)
  {
    swift_bridgeObjectRelease(v9, a2, a3, a4, a5, a6, a7, a8);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 24), v10, v11, v12, v13, v14, v15, v16);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 40), v17, v18, v19, v20, v21, v22, v23);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 56), v24, v25, v26, v27, v28, v29, v30);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 72), v31, v32, v33, v34, v35, v36, v37);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 88), v38, v39, v40, v41, v42, v43, v44);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 136), v45, v46, v47, v48, v49, v50, v51);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 152), v52, v53, v54, v55, v56, v57, v58);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 168), v59, v60, v61, v62, v63, v64, v65);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 184), v66, v67, v68, v69, v70, v71, v72);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 200), v73, v74, v75, v76, v77, v78, v79);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 216), v80, v81, v82, v83, v84, v85, v86);
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 232), v87, v88, v89, v90, v91, v92, v93);
    sub_100005DE0(*(_QWORD *)(a1 + 240), *(_QWORD *)(a1 + 248));
    swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 264), v94, v95, v96, v97, v98, v99, v100);
  }
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(a1 + 288), a2, a3, a4, a5, a6, a7, a8);
}

_QWORD *initializeWithCopy for MPOCMonitorResponse(_QWORD *__dst, _QWORD *__src)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v4 = __src[1];
  if (v4)
  {
    *__dst = *__src;
    __dst[1] = v4;
    v5 = __src[3];
    __dst[2] = __src[2];
    __dst[3] = v5;
    v6 = __src[5];
    __dst[4] = __src[4];
    __dst[5] = v6;
    v7 = __src[7];
    __dst[6] = __src[6];
    __dst[7] = v7;
    v8 = __src[9];
    __dst[8] = __src[8];
    __dst[9] = v8;
    v9 = __src[11];
    __dst[10] = __src[10];
    __dst[11] = v9;
    *((_OWORD *)__dst + 6) = *((_OWORD *)__src + 6);
    *((_BYTE *)__dst + 120) = *((_BYTE *)__src + 120);
    __dst[14] = __src[14];
    v10 = __src[17];
    __dst[16] = __src[16];
    __dst[17] = v10;
    v11 = __src[19];
    __dst[18] = __src[18];
    __dst[19] = v11;
    v12 = __src[21];
    __dst[20] = __src[20];
    __dst[21] = v12;
    v13 = __src[23];
    __dst[22] = __src[22];
    __dst[23] = v13;
    v14 = __src[25];
    __dst[24] = __src[24];
    __dst[25] = v14;
    v15 = __src[27];
    __dst[26] = __src[26];
    __dst[27] = v15;
    v16 = __src[29];
    __dst[28] = __src[28];
    __dst[29] = v16;
    v17 = __src[31];
    v20 = __src[30];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100005D9C(v20, v17);
    __dst[30] = v20;
    __dst[31] = v17;
    v18 = __src[33];
    __dst[32] = __src[32];
    __dst[33] = v18;
    swift_bridgeObjectRetain();
  }
  else
  {
    memcpy(__dst, __src, 0x110uLL);
  }
  __dst[34] = __src[34];
  *((_BYTE *)__dst + 280) = *((_BYTE *)__src + 280);
  __dst[36] = __src[36];
  swift_bridgeObjectRetain();
  return __dst;
}

_QWORD *assignWithCopy for MPOCMonitorResponse(_QWORD *__dst, _QWORD *__src, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  _TtC14softposreaderd12RemoteReader *v10;
  uint64_t v11;
  SEL v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  _TtC14softposreaderd12RemoteReader *v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  _TtC14softposreaderd12RemoteReader *v27;
  SEL v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  _TtC14softposreaderd12RemoteReader *v35;
  SEL v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  _TtC14softposreaderd12RemoteReader *v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  _TtC14softposreaderd12RemoteReader *v51;
  SEL v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  uint64_t v59;
  _TtC14softposreaderd12RemoteReader *v60;
  SEL v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  _TtC14softposreaderd12RemoteReader *v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  _TtC14softposreaderd12RemoteReader *v76;
  SEL v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  _TtC14softposreaderd12RemoteReader *v84;
  SEL v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  _TtC14softposreaderd12RemoteReader *v92;
  SEL v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  _TtC14softposreaderd12RemoteReader *v100;
  SEL v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  _TtC14softposreaderd12RemoteReader *v108;
  SEL v109;
  id v110;
  id v111;
  id v112;
  id v113;
  id v114;
  id v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  _TtC14softposreaderd12RemoteReader *v120;
  SEL v121;
  id v122;
  id v123;
  id v124;
  id v125;
  id v126;
  id v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  _TtC14softposreaderd12RemoteReader *v131;
  SEL v132;
  id v133;
  id v134;
  id v135;
  id v136;
  id v137;
  id v138;
  uint64_t v140;

  v10 = (_TtC14softposreaderd12RemoteReader *)__dst[1];
  v11 = __src[1];
  if (!v10)
  {
    if (v11)
    {
      *__dst = *__src;
      __dst[1] = __src[1];
      __dst[2] = __src[2];
      __dst[3] = __src[3];
      __dst[4] = __src[4];
      __dst[5] = __src[5];
      __dst[6] = __src[6];
      __dst[7] = __src[7];
      __dst[8] = __src[8];
      __dst[9] = __src[9];
      __dst[10] = __src[10];
      __dst[11] = __src[11];
      __dst[12] = __src[12];
      __dst[13] = __src[13];
      v128 = __src[14];
      *((_BYTE *)__dst + 120) = *((_BYTE *)__src + 120);
      __dst[14] = v128;
      __dst[16] = __src[16];
      __dst[17] = __src[17];
      __dst[18] = __src[18];
      __dst[19] = __src[19];
      __dst[20] = __src[20];
      __dst[21] = __src[21];
      __dst[22] = __src[22];
      __dst[23] = __src[23];
      __dst[24] = __src[24];
      __dst[25] = __src[25];
      __dst[26] = __src[26];
      __dst[27] = __src[27];
      __dst[28] = __src[28];
      __dst[29] = __src[29];
      v129 = __src[31];
      v140 = __src[30];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100005D9C(v140, v129);
      __dst[30] = v140;
      __dst[31] = v129;
      __dst[32] = __src[32];
      __dst[33] = __src[33];
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
LABEL_7:
    memcpy(__dst, __src, 0x110uLL);
    goto LABEL_8;
  }
  if (!v11)
  {
    sub_1000D6E24((uint64_t)__dst, (uint64_t)__src, a3, a4, a5, a6, a7, a8);
    goto LABEL_7;
  }
  *__dst = *__src;
  __dst[1] = __src[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v10, v12, v13, v14, v15, v16, v17, v18);
  __dst[2] = __src[2];
  v19 = (_TtC14softposreaderd12RemoteReader *)__dst[3];
  __dst[3] = __src[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v19, v20, v21, v22, v23, v24, v25, v26);
  __dst[4] = __src[4];
  v27 = (_TtC14softposreaderd12RemoteReader *)__dst[5];
  __dst[5] = __src[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v27, v28, v29, v30, v31, v32, v33, v34);
  __dst[6] = __src[6];
  v35 = (_TtC14softposreaderd12RemoteReader *)__dst[7];
  __dst[7] = __src[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v35, v36, v37, v38, v39, v40, v41, v42);
  __dst[8] = __src[8];
  v43 = (_TtC14softposreaderd12RemoteReader *)__dst[9];
  __dst[9] = __src[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v43, v44, v45, v46, v47, v48, v49, v50);
  __dst[10] = __src[10];
  v51 = (_TtC14softposreaderd12RemoteReader *)__dst[11];
  __dst[11] = __src[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v51, v52, v53, v54, v55, v56, v57, v58);
  __dst[12] = __src[12];
  __dst[13] = __src[13];
  v59 = __src[14];
  *((_BYTE *)__dst + 120) = *((_BYTE *)__src + 120);
  __dst[14] = v59;
  __dst[16] = __src[16];
  v60 = (_TtC14softposreaderd12RemoteReader *)__dst[17];
  __dst[17] = __src[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v60, v61, v62, v63, v64, v65, v66, v67);
  __dst[18] = __src[18];
  v68 = (_TtC14softposreaderd12RemoteReader *)__dst[19];
  __dst[19] = __src[19];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v68, v69, v70, v71, v72, v73, v74, v75);
  __dst[20] = __src[20];
  v76 = (_TtC14softposreaderd12RemoteReader *)__dst[21];
  __dst[21] = __src[21];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v76, v77, v78, v79, v80, v81, v82, v83);
  __dst[22] = __src[22];
  v84 = (_TtC14softposreaderd12RemoteReader *)__dst[23];
  __dst[23] = __src[23];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v84, v85, v86, v87, v88, v89, v90, v91);
  __dst[24] = __src[24];
  v92 = (_TtC14softposreaderd12RemoteReader *)__dst[25];
  __dst[25] = __src[25];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v92, v93, v94, v95, v96, v97, v98, v99);
  __dst[26] = __src[26];
  v100 = (_TtC14softposreaderd12RemoteReader *)__dst[27];
  __dst[27] = __src[27];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v100, v101, v102, v103, v104, v105, v106, v107);
  __dst[28] = __src[28];
  v108 = (_TtC14softposreaderd12RemoteReader *)__dst[29];
  __dst[29] = __src[29];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v108, v109, v110, v111, v112, v113, v114, v115);
  v116 = __src[30];
  v117 = __src[31];
  sub_100005D9C(v116, v117);
  v118 = __dst[30];
  v119 = __dst[31];
  __dst[30] = v116;
  __dst[31] = v117;
  sub_100005DE0(v118, v119);
  __dst[32] = __src[32];
  v120 = (_TtC14softposreaderd12RemoteReader *)__dst[33];
  __dst[33] = __src[33];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v120, v121, v122, v123, v124, v125, v126, v127);
LABEL_8:
  v130 = __src[34];
  *((_BYTE *)__dst + 280) = *((_BYTE *)__src + 280);
  __dst[34] = v130;
  v131 = (_TtC14softposreaderd12RemoteReader *)__dst[36];
  __dst[36] = __src[36];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v131, v132, v133, v134, v135, v136, v137, v138);
  return __dst;
}

void *initializeWithTake for MPOCMonitorResponse(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x128uLL);
}

_QWORD *assignWithTake for MPOCMonitorResponse(_QWORD *__dst, _QWORD *__src, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  _TtC14softposreaderd12RemoteReader *v10;
  uint64_t v11;
  uint64_t v12;
  _TtC14softposreaderd12RemoteReader *v13;
  SEL v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  _TtC14softposreaderd12RemoteReader *v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  _TtC14softposreaderd12RemoteReader *v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  _TtC14softposreaderd12RemoteReader *v40;
  SEL v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  _TtC14softposreaderd12RemoteReader *v49;
  SEL v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  uint64_t v57;
  _TtC14softposreaderd12RemoteReader *v58;
  SEL v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  uint64_t v66;
  _TtC14softposreaderd12RemoteReader *v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  uint64_t v75;
  _TtC14softposreaderd12RemoteReader *v76;
  SEL v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  uint64_t v84;
  _TtC14softposreaderd12RemoteReader *v85;
  SEL v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  uint64_t v93;
  _TtC14softposreaderd12RemoteReader *v94;
  SEL v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  uint64_t v102;
  _TtC14softposreaderd12RemoteReader *v103;
  SEL v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  uint64_t v111;
  _TtC14softposreaderd12RemoteReader *v112;
  SEL v113;
  id v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  _TtC14softposreaderd12RemoteReader *v123;
  SEL v124;
  id v125;
  id v126;
  id v127;
  id v128;
  id v129;
  id v130;
  const char *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  _TtC14softposreaderd12RemoteReader *v138;

  v10 = (_TtC14softposreaderd12RemoteReader *)__dst[1];
  if (!v10)
    goto LABEL_5;
  v11 = __src[1];
  if (!v11)
  {
    sub_1000D6E24((uint64_t)__dst, (uint64_t)__src, a3, a4, a5, a6, a7, a8);
LABEL_5:
    memcpy(__dst, __src, 0x110uLL);
    goto LABEL_6;
  }
  *__dst = *__src;
  __dst[1] = v11;
  swift_bridgeObjectRelease(v10, (SEL)__src, a3, a4, a5, a6, a7, a8);
  v12 = __src[3];
  v13 = (_TtC14softposreaderd12RemoteReader *)__dst[3];
  __dst[2] = __src[2];
  __dst[3] = v12;
  swift_bridgeObjectRelease(v13, v14, v15, v16, v17, v18, v19, v20);
  v21 = __src[5];
  v22 = (_TtC14softposreaderd12RemoteReader *)__dst[5];
  __dst[4] = __src[4];
  __dst[5] = v21;
  swift_bridgeObjectRelease(v22, v23, v24, v25, v26, v27, v28, v29);
  v30 = __src[7];
  v31 = (_TtC14softposreaderd12RemoteReader *)__dst[7];
  __dst[6] = __src[6];
  __dst[7] = v30;
  swift_bridgeObjectRelease(v31, v32, v33, v34, v35, v36, v37, v38);
  v39 = __src[9];
  v40 = (_TtC14softposreaderd12RemoteReader *)__dst[9];
  __dst[8] = __src[8];
  __dst[9] = v39;
  swift_bridgeObjectRelease(v40, v41, v42, v43, v44, v45, v46, v47);
  v48 = __src[11];
  v49 = (_TtC14softposreaderd12RemoteReader *)__dst[11];
  __dst[10] = __src[10];
  __dst[11] = v48;
  swift_bridgeObjectRelease(v49, v50, v51, v52, v53, v54, v55, v56);
  *((_OWORD *)__dst + 6) = *((_OWORD *)__src + 6);
  __dst[14] = __src[14];
  *((_BYTE *)__dst + 120) = *((_BYTE *)__src + 120);
  v57 = __src[17];
  v58 = (_TtC14softposreaderd12RemoteReader *)__dst[17];
  __dst[16] = __src[16];
  __dst[17] = v57;
  swift_bridgeObjectRelease(v58, v59, v60, v61, v62, v63, v64, v65);
  v66 = __src[19];
  v67 = (_TtC14softposreaderd12RemoteReader *)__dst[19];
  __dst[18] = __src[18];
  __dst[19] = v66;
  swift_bridgeObjectRelease(v67, v68, v69, v70, v71, v72, v73, v74);
  v75 = __src[21];
  v76 = (_TtC14softposreaderd12RemoteReader *)__dst[21];
  __dst[20] = __src[20];
  __dst[21] = v75;
  swift_bridgeObjectRelease(v76, v77, v78, v79, v80, v81, v82, v83);
  v84 = __src[23];
  v85 = (_TtC14softposreaderd12RemoteReader *)__dst[23];
  __dst[22] = __src[22];
  __dst[23] = v84;
  swift_bridgeObjectRelease(v85, v86, v87, v88, v89, v90, v91, v92);
  v93 = __src[25];
  v94 = (_TtC14softposreaderd12RemoteReader *)__dst[25];
  __dst[24] = __src[24];
  __dst[25] = v93;
  swift_bridgeObjectRelease(v94, v95, v96, v97, v98, v99, v100, v101);
  v102 = __src[27];
  v103 = (_TtC14softposreaderd12RemoteReader *)__dst[27];
  __dst[26] = __src[26];
  __dst[27] = v102;
  swift_bridgeObjectRelease(v103, v104, v105, v106, v107, v108, v109, v110);
  v111 = __src[29];
  v112 = (_TtC14softposreaderd12RemoteReader *)__dst[29];
  __dst[28] = __src[28];
  __dst[29] = v111;
  swift_bridgeObjectRelease(v112, v113, v114, v115, v116, v117, v118, v119);
  v120 = __dst[30];
  v121 = __dst[31];
  *((_OWORD *)__dst + 15) = *((_OWORD *)__src + 15);
  sub_100005DE0(v120, v121);
  v122 = __src[33];
  v123 = (_TtC14softposreaderd12RemoteReader *)__dst[33];
  __dst[32] = __src[32];
  __dst[33] = v122;
  swift_bridgeObjectRelease(v123, v124, v125, v126, v127, v128, v129, v130);
LABEL_6:
  __dst[34] = __src[34];
  *((_BYTE *)__dst + 280) = *((_BYTE *)__src + 280);
  v138 = (_TtC14softposreaderd12RemoteReader *)__dst[36];
  __dst[36] = __src[36];
  swift_bridgeObjectRelease(v138, v131, v132, v133, v134, v135, v136, v137);
  return __dst;
}

uint64_t getEnumTagSinglePayload for MPOCMonitorResponse(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 296))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MPOCMonitorResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 296) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 296) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MPOCMonitorResponse()
{
  return &type metadata for MPOCMonitorResponse;
}

ValueMetadata *type metadata accessor for MPOCMonitorBackendError()
{
  return &type metadata for MPOCMonitorBackendError;
}

_QWORD *initializeWithCopy for MPOCDeprecationWarning(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for MPOCDeprecationWarning(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  return a1;
}

_QWORD *assignWithTake for MPOCDeprecationWarning(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  return a1;
}

ValueMetadata *type metadata accessor for MPOCDeprecationWarning()
{
  return &type metadata for MPOCDeprecationWarning;
}

void *sub_10011B08C@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _TtC14softposreaderd12RemoteReader *v18;
  _TtC14softposreaderd12RemoteReader *v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  _QWORD v38[37];
  _TtC14softposreaderd12RemoteReader *v39;
  _BYTE v40[272];
  _QWORD v41[34];
  _BYTE v42[296];
  _QWORD v43[37];
  _OWORD v44[17];
  char v45;
  char v46;

  v36 = a2;
  v37 = sub_100003A2C(&qword_1001B3450);
  v4 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000549E8(v44);
  sub_100024374((uint64_t)v44, (uint64_t)v43, &qword_1001AE028);
  LOBYTE(v43[35]) = 1;
  v43[34] = 0;
  v43[36] = 0;
  v7 = a1[3];
  v8 = a1[4];
  sub_100005EF8(a1, v7);
  v9 = sub_10011B850();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for MPOCMonitorResponse.CodingKeys, &type metadata for MPOCMonitorResponse.CodingKeys, v9, v7, v8);
  if (v2)
  {
    sub_100005D3C(a1);
    memcpy(v42, v43, sizeof(v42));
    return (void *)sub_10011B894((uint64_t)v42);
  }
  else
  {
    v10 = v4;
    v46 = 0;
    v11 = sub_10011B918();
    v12 = v37;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v41, &type metadata for JSONWebToken, &v46, v37, &type metadata for JSONWebToken, v11);
    sub_100024374((uint64_t)v41, (uint64_t)v40, &qword_1001AE028);
    sub_100024374((uint64_t)v40, (uint64_t)v43, &qword_1001AE028);
    v42[0] = 1;
    sub_1000D76F0((uint64_t)v40, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100070FD0);
    v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v42, v12);
    v43[34] = v13;
    LOBYTE(v43[35]) = v14 & 1;
    v15 = v14 & 1;
    v16 = sub_100003A2C(&qword_1001B3418);
    v45 = 2;
    v17 = sub_10011B7E8(&qword_1001B3420, (void (*)(void))sub_10011B760, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v39, v16, &v45, v12, v16, v17);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v6, v37);
    v18 = v39;
    v19 = (_TtC14softposreaderd12RemoteReader *)v43[36];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease(v19, v20, v21, v22, v23, v24, v25, v26);
    v43[36] = v18;
    sub_100024374((uint64_t)v40, (uint64_t)v38, &qword_1001AE028);
    v38[34] = v13;
    LOBYTE(v38[35]) = v15;
    v38[36] = v18;
    sub_1000F87CC((uint64_t)v38);
    swift_bridgeObjectRelease(v18, v27, v28, v29, v30, v31, v32, v33);
    sub_1000D76F0((uint64_t)v40, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100024170);
    sub_100005D3C(a1);
    memcpy(v42, v43, sizeof(v42));
    sub_10011B894((uint64_t)v42);
    return memcpy(v36, v38, 0x128uLL);
  }
}

uint64_t sub_10011B3A8(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  char v7;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x80000001001708D0;
    if (a2 == 0x80000001001708D0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001001708D0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x7078456E656B6F74 && a2 == 0xEF6E6F6974617269)
  {
    v6 = 0xEF6E6F6974617269;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7078456E656B6F74, 0xEF6E6F6974617269, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100164EF0)
  {
    swift_bridgeObjectRelease(0x8000000100164EF0);
    return 2;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100164EF0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

void sub_10011B518(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  char v31;
  char v32;

  v5 = sub_100003A2C(&qword_1001B3408);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100005EF8(a1, v9);
  v11 = sub_10011B71C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for MPOCBackendMonitorResponse.CodingKeys, &type metadata for MPOCBackendMonitorResponse.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_100005D3C(a1);
    swift_bridgeObjectRelease(0, v19, v20, v21, v22, v23, v24, v25);
  }
  else
  {
    v32 = 0;
    v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v32, v5);
    v14 = v13;
    v31 = 1;
    v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v31, v5);
    v29 = v16;
    v27 = v15;
    v17 = sub_100003A2C(&qword_1001B3418);
    v30 = 2;
    v18 = sub_10011B7E8(&qword_1001B3420, (void (*)(void))sub_10011B760, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v28, v17, &v30, v5, v17, v18);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v26 = v28;
    sub_100005D3C(a1);
    *(_QWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = v14;
    *(_QWORD *)(a2 + 16) = v27;
    *(_BYTE *)(a2 + 24) = v29 & 1;
    *(_QWORD *)(a2 + 32) = v26;
  }
}

unint64_t sub_10011B71C()
{
  unint64_t result;

  result = qword_1001B3410;
  if (!qword_1001B3410)
  {
    result = swift_getWitnessTable(&unk_100162CC4, &type metadata for MPOCBackendMonitorResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B3410);
  }
  return result;
}

unint64_t sub_10011B760()
{
  unint64_t result;

  result = qword_1001B3428;
  if (!qword_1001B3428)
  {
    result = swift_getWitnessTable(&unk_100162820, &type metadata for MPOCDeprecationWarning);
    atomic_store(result, (unint64_t *)&qword_1001B3428);
  }
  return result;
}

unint64_t sub_10011B7A4()
{
  unint64_t result;

  result = qword_1001B3438;
  if (!qword_1001B3438)
  {
    result = swift_getWitnessTable(&unk_100162C74, &type metadata for MPOCDeprecationWarning.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B3438);
  }
  return result;
}

uint64_t sub_10011B7E8(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_100003A6C(&qword_1001B3418);
    a2();
    result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10011B850()
{
  unint64_t result;

  result = qword_1001B3458;
  if (!qword_1001B3458)
  {
    result = swift_getWitnessTable(&unk_100162C24, &type metadata for MPOCMonitorResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B3458);
  }
  return result;
}

uint64_t sub_10011B894(uint64_t a1)
{
  _TtC14softposreaderd12RemoteReader *v2;
  SEL v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  __int128 v11;
  __int128 v12;

  v2 = *(_TtC14softposreaderd12RemoteReader **)(a1 + 288);
  v11 = *(_OWORD *)(a1 + 224);
  v12 = *(_OWORD *)(a1 + 240);
  sub_100024170(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v11,
    *((uint64_t *)&v11 + 1),
    v12,
    *((unint64_t *)&v12 + 1),
    *(_QWORD *)(a1 + 256),
    *(_QWORD *)(a1 + 264));
  swift_bridgeObjectRelease(v2, v3, v4, v5, v6, v7, v8, v9);
  return a1;
}

unint64_t sub_10011B918()
{
  unint64_t result;

  result = qword_1001B3460;
  if (!qword_1001B3460)
  {
    result = swift_getWitnessTable(&unk_1001616CC, &type metadata for JSONWebToken);
    atomic_store(result, (unint64_t *)&qword_1001B3460);
  }
  return result;
}

unint64_t sub_10011B95C()
{
  unint64_t result;

  result = qword_1001B3470;
  if (!qword_1001B3470)
  {
    result = swift_getWitnessTable(&unk_1001616A4, &type metadata for JSONWebToken);
    atomic_store(result, (unint64_t *)&qword_1001B3470);
  }
  return result;
}

uint64_t sub_10011B9A0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x7461636572706564 && a2 == 0xEF657079546E6F69)
  {
    v5 = 0xEF657079546E6F69;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461636572706564, 0xEF657079546E6F69, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    v7 = 0xE500000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65756C6176, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x7461636572706564 && a2 == 0xEF656D69546E6F69)
  {
    swift_bridgeObjectRelease(0xEF656D69546E6F69);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7461636572706564, 0xEF656D69546E6F69, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

void sub_10011BB2C(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _TtC14softposreaderd12RemoteReader *v13;
  _TtC14softposreaderd12RemoteReader *v14;
  uint64_t v15;
  _TtC14softposreaderd12RemoteReader *v16;
  _TtC14softposreaderd12RemoteReader *v17;
  uint64_t v18;
  _TtC14softposreaderd12RemoteReader *v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  _TtC14softposreaderd12RemoteReader *v36;
  uint64_t v37;
  char v38;
  char v39;
  char v40;

  v5 = sub_100003A2C(&qword_1001B3478);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100005EF8(a1, v9);
  v11 = sub_10011B7A4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for MPOCDeprecationWarning.CodingKeys, &type metadata for MPOCDeprecationWarning.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_100005D3C(a1);
  }
  else
  {
    v40 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v40, v5);
    v14 = v13;
    v37 = v12;
    v39 = 1;
    swift_bridgeObjectRetain();
    v15 = KeyedDecodingContainer.decode(_:forKey:)(&v39, v5);
    v17 = v16;
    v35 = v15;
    v38 = 2;
    swift_bridgeObjectRetain();
    v36 = v17;
    v18 = KeyedDecodingContainer.decode(_:forKey:)(&v38, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_100005D3C(a1);
    v19 = v36;
    swift_bridgeObjectRelease(v36, v20, v21, v22, v23, v24, v25, v26);
    swift_bridgeObjectRelease(v14, v27, v28, v29, v30, v31, v32, v33);
    *a2 = v37;
    a2[1] = (uint64_t)v14;
    a2[2] = v35;
    a2[3] = (uint64_t)v19;
    a2[4] = v18;
  }
}

ValueMetadata *type metadata accessor for MPOCMonitorResponse.CodingKeys()
{
  return &type metadata for MPOCMonitorResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for MPOCDeprecationWarning.CodingKeys()
{
  return &type metadata for MPOCDeprecationWarning.CodingKeys;
}

uint64_t _s9SPREngine19MPOCMonitorResponseV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10011BDBC + 4 * byte_100162755[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10011BDF0 + 4 * byte_100162750[v4]))();
}

uint64_t sub_10011BDF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10011BDF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10011BE00);
  return result;
}

uint64_t sub_10011BE0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10011BE14);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10011BE18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10011BE20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MPOCBackendMonitorResponse.CodingKeys()
{
  return &type metadata for MPOCBackendMonitorResponse.CodingKeys;
}

unint64_t sub_10011BE40()
{
  unint64_t result;

  result = qword_1001B3480;
  if (!qword_1001B3480)
  {
    result = swift_getWitnessTable(&unk_100162A8C, &type metadata for MPOCBackendMonitorResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B3480);
  }
  return result;
}

unint64_t sub_10011BE88()
{
  unint64_t result;

  result = qword_1001B3488;
  if (!qword_1001B3488)
  {
    result = swift_getWitnessTable(&unk_100162B44, &type metadata for MPOCDeprecationWarning.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B3488);
  }
  return result;
}

unint64_t sub_10011BED0()
{
  unint64_t result;

  result = qword_1001B3490;
  if (!qword_1001B3490)
  {
    result = swift_getWitnessTable(&unk_100162BFC, &type metadata for MPOCMonitorResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B3490);
  }
  return result;
}

unint64_t sub_10011BF18()
{
  unint64_t result;

  result = qword_1001B3498;
  if (!qword_1001B3498)
  {
    result = swift_getWitnessTable(&unk_100162B6C, &type metadata for MPOCMonitorResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B3498);
  }
  return result;
}

unint64_t sub_10011BF60()
{
  unint64_t result;

  result = qword_1001B34A0;
  if (!qword_1001B34A0)
  {
    result = swift_getWitnessTable(&unk_100162B94, &type metadata for MPOCMonitorResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B34A0);
  }
  return result;
}

unint64_t sub_10011BFA8()
{
  unint64_t result;

  result = qword_1001B34A8;
  if (!qword_1001B34A8)
  {
    result = swift_getWitnessTable(&unk_100162AB4, &type metadata for MPOCDeprecationWarning.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B34A8);
  }
  return result;
}

unint64_t sub_10011BFF0()
{
  unint64_t result;

  result = qword_1001B34B0;
  if (!qword_1001B34B0)
  {
    result = swift_getWitnessTable(&unk_100162ADC, &type metadata for MPOCDeprecationWarning.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B34B0);
  }
  return result;
}

unint64_t sub_10011C038()
{
  unint64_t result;

  result = qword_1001B34B8;
  if (!qword_1001B34B8)
  {
    result = swift_getWitnessTable(&unk_1001629FC, &type metadata for MPOCBackendMonitorResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B34B8);
  }
  return result;
}

unint64_t sub_10011C080()
{
  unint64_t result;

  result = qword_1001B34C0;
  if (!qword_1001B34C0)
  {
    result = swift_getWitnessTable(&unk_100162A24, &type metadata for MPOCBackendMonitorResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001B34C0);
  }
  return result;
}

_QWORD *sub_10011C0CC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[5];
  _QWORD v49[5];
  _QWORD v50[5];
  _QWORD v51[3];
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[4];

  LODWORD(v41) = a4;
  v45 = a2;
  v44 = a1;
  v47 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v6 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v4[36];
  v43 = v4[35];
  sub_100008390((uint64_t)(v4 + 2), (uint64_t)v54);
  sub_100005EF8(v4 + 7, v4[10]);
  v42 = v15;
  swift_bridgeObjectRetain();
  v46 = a3;
  swift_bridgeObjectRetain();
  sub_100113BC0(v41);
  sub_100005EF8(v4 + 12, v4[15]);
  sub_10003146C((uint64_t)v50);
  v16 = v4[17];
  sub_100008390((uint64_t)(v4 + 18), (uint64_t)v49);
  sub_100008390((uint64_t)(v4 + 25), (uint64_t)v48);
  v17 = v4[24];
  v40 = v4[23];
  sub_10001A610();
  v41 = v16;
  swift_retain();
  v18 = swift_bridgeObjectRetain();
  v19 = static DispatchQoS.background.getter(v18);
  static OS_dispatch_queue.Attributes.concurrent.getter(v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v47);
  v47 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0x656E676953414142, 0xE900000000000072, v14, v11, v8, 0);
  if (qword_1001AD320 != -1)
    swift_once(&qword_1001AD320, sub_100141628);
  v20 = qword_1001AD318;
  v21 = (id)qword_1001B5010;
  if (v20 != -1)
    swift_once(&qword_1001AD318, sub_10014157C);
  v22 = qword_1001B5008;
  v23 = sub_10001A64C((uint64_t)v49, v49[3]);
  __chkstk_darwin(v23);
  v25 = (uint64_t *)((char *)&v40 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v26 + 16))(v25);
  v27 = sub_10001A64C((uint64_t)v48, v48[3]);
  __chkstk_darwin(v27);
  v29 = (uint64_t *)((char *)&v40 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v30 + 16))(v29);
  v31 = *v25;
  v32 = *v29;
  v33 = v52;
  v34 = v53;
  v35 = sub_10001A64C((uint64_t)v51, v52);
  swift_bridgeObjectRetain();
  *((_QWORD *)&v39 + 1) = v21;
  *((_QWORD *)&v38 + 1) = v17;
  *(_QWORD *)&v39 = v47;
  *(_QWORD *)&v38 = v40;
  v36 = sub_1001320A8(v43, v42, v44, v45, v46, v54, v35, v50, v41, v31, v32, v38, v39, v22, v33, v34);
  sub_100005D3C(v51);
  sub_100005D3C(v48);
  sub_100005D3C(v49);
  sub_100005F1C(&qword_1001B2920, (uint64_t (*)(uint64_t))type metadata accessor for BAASigner, (uint64_t)&unk_10016326C);
  return v36;
}

_QWORD *sub_10011C4EC(uint64_t a1, uint64_t a2, _QWORD *a3, int a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD v46[5];
  _QWORD v47[5];
  _QWORD v48[5];
  _QWORD v49[5];
  _BYTE v50[40];

  LODWORD(v40) = a4;
  v44 = a2;
  v43 = a1;
  v39 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v6 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v4[36];
  v42 = v4[35];
  sub_100008390((uint64_t)(v4 + 2), (uint64_t)v50);
  sub_100005EF8(v4 + 7, v4[10]);
  v41 = v15;
  swift_bridgeObjectRetain();
  v45 = a3;
  swift_bridgeObjectRetain();
  sub_100113BC0(v40);
  sub_100005EF8(v4 + 12, v4[15]);
  sub_10003137C((uint64_t)v48);
  v16 = v4[17];
  sub_100008390((uint64_t)(v4 + 18), (uint64_t)v47);
  sub_100008390((uint64_t)(v4 + 25), (uint64_t)v46);
  v17 = v4[24];
  v40 = v4[23];
  sub_10001A610();
  swift_retain();
  v18 = swift_bridgeObjectRetain();
  v19 = static DispatchQoS.background.getter(v18);
  static OS_dispatch_queue.Attributes.concurrent.getter(v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v39);
  v20 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0x656E676953534553, 0xE900000000000072, v14, v11, v8, 0);
  if (qword_1001AD2A8 != -1)
    swift_once(&qword_1001AD2A8, sub_100127078);
  v21 = qword_1001AD2A0;
  v22 = (id)qword_1001B4FD8;
  if (v21 != -1)
    swift_once(&qword_1001AD2A0, sub_100126F7C);
  v23 = qword_1001B4FD0;
  v24 = sub_10001A64C((uint64_t)v47, v47[3]);
  __chkstk_darwin(v24);
  v26 = (uint64_t *)((char *)&v38 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v27 + 16))(v26);
  v28 = sub_10001A64C((uint64_t)v46, v46[3]);
  __chkstk_darwin(v28);
  v30 = (uint64_t *)((char *)&v38 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v31 + 16))(v30);
  v32 = *v26;
  v33 = *v30;
  swift_bridgeObjectRetain();
  *((_QWORD *)&v37 + 1) = v22;
  *((_QWORD *)&v36 + 1) = v17;
  *(_QWORD *)&v37 = v20;
  *(_QWORD *)&v36 = v40;
  v34 = sub_10011C968(v42, v41, v43, v44, v45, (uint64_t)v50, v49, v48, v16, v32, v33, v36, v37, v23);
  sub_100005D3C(v46);
  sub_100005D3C(v47);
  sub_100005F1C(&qword_1001B35D8, (uint64_t (*)(uint64_t))type metadata accessor for SESSigner, (uint64_t)&unk_10015E154);
  return v34;
}

uint64_t sub_10011C8CC()
{
  uint64_t v0;
  SEL v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;

  sub_100005D3C((_QWORD *)(v0 + 16));
  sub_100005D3C((_QWORD *)(v0 + 56));
  sub_100005D3C((_QWORD *)(v0 + 96));
  swift_release(*(_QWORD *)(v0 + 136));
  sub_100005D3C((_QWORD *)(v0 + 144));
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(v0 + 192), v1, v2, v3, v4, v5, v6, v7);
  sub_100005D3C((_QWORD *)(v0 + 200));
  sub_100005D3C((_QWORD *)(v0 + 240));
  swift_bridgeObjectRelease(*(_TtC14softposreaderd12RemoteReader **)(v0 + 288), v8, v9, v10, v11, v12, v13, v14);
  return v0;
}

uint64_t sub_10011C928()
{
  uint64_t v0;

  sub_10011C8CC();
  return swift_deallocClassInstance(v0, 296, 7);
}

uint64_t type metadata accessor for SignerFactory()
{
  return objc_opt_self(_TtC9SPREngine13SignerFactory);
}

_QWORD *sub_10011C968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, _QWORD *a7, _QWORD *a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, __int128 a13, uint64_t a14)
{
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  __int128 v30;
  __int128 v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD v36[3];
  uint64_t v37;
  _UNKNOWN **v38;
  _QWORD v39[3];
  uint64_t v40;
  _UNKNOWN **v41;

  v34 = a7;
  v35 = a8;
  v32 = a5;
  v33 = a6;
  v30 = a13;
  v31 = a12;
  v40 = type metadata accessor for SystemInfo();
  v41 = &off_10019F8A0;
  v39[0] = a10;
  v37 = type metadata accessor for DefaultSecureTimeKeeper();
  v38 = &off_10019C0A0;
  v36[0] = a11;
  v18 = type metadata accessor for SESSigner();
  v19 = (_QWORD *)swift_allocObject(v18, 368, 7);
  v20 = sub_10001A64C((uint64_t)v39, v40);
  __chkstk_darwin(v20);
  v22 = (uint64_t *)((char *)&v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v23 + 16))(v22);
  v24 = sub_10001A64C((uint64_t)v36, v37);
  __chkstk_darwin(v24);
  v26 = (uint64_t *)((char *)&v30 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v27 + 16))(v26);
  v28 = sub_10011CB20(a1, a2, a3, a4, v32, v33, v34, v35, a9, *v22, *v26, v31, *((uint64_t *)&v31 + 1), (void *)v30, *((void **)&v30 + 1), a14, v19);
  sub_100005D3C(v36);
  sub_100005D3C(v39);
  return v28;
}

_QWORD *sub_10011CB20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, _QWORD *a7, _QWORD *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, _QWORD *a17)
{
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _TtC14softposreaderd12RemoteReader *v57;
  _QWORD aBlock[6];
  _QWORD v59[5];
  _QWORD v60[5];
  _QWORD v61[5];

  v56 = a7;
  v51 = a5;
  v50 = a4;
  v49 = a3;
  v48 = a2;
  v47 = a1;
  v54 = a16;
  v52 = a15;
  v55 = a13;
  v53 = a12;
  v19 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61[3] = &type metadata for SystemRandomNumberGenerator;
  v61[4] = &protocol witness table for SystemRandomNumberGenerator;
  v60[3] = type metadata accessor for SystemInfo();
  v60[4] = &off_10019F8A0;
  v60[0] = a10;
  v59[3] = type metadata accessor for DefaultSecureTimeKeeper();
  v59[4] = &off_10019C0A0;
  aBlock[5] = 0;
  v59[0] = a11;
  a17[7] = 0;
  aBlock[4] = BitString.init(data:unusedBits:);
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000043B8;
  aBlock[3] = &unk_10019FF48;
  v22 = _Block_copy(aBlock);
  v57 = &_swiftEmptyArrayStorage;
  v23 = sub_100005F1C((unint64_t *)&qword_1001B1260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_100003A2C((uint64_t *)&unk_1001AE400);
  v25 = sub_1000B6D98();
  v26 = v23;
  v27 = (_QWORD *)a6;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v57, v24, v25, v19, v26);
  v28 = type metadata accessor for DispatchWorkItem(0);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  v29 = v22;
  v30 = v56;
  a17[44] = DispatchWorkItem.init(flags:block:)(v21, v29);
  a17[45] = 600000;
  v31 = v48;
  a17[2] = v47;
  a17[3] = v31;
  v32 = v50;
  a17[4] = v49;
  a17[5] = v32;
  a17[6] = v51;
  sub_100008390(a6, (uint64_t)(a17 + 8));
  sub_100008390((uint64_t)v30, (uint64_t)(a17 + 13));
  v51 = a8;
  sub_100008390((uint64_t)a8, (uint64_t)(a17 + 33));
  a17[38] = a9;
  sub_100008390((uint64_t)v60, (uint64_t)(a17 + 39));
  sub_100008390((uint64_t)v59, (uint64_t)(a17 + 28));
  v33 = v52;
  a17[18] = a14;
  a17[19] = v33;
  v34 = v53;
  a17[20] = v54;
  a17[21] = v34;
  a17[22] = v55;
  sub_100008390((uint64_t)v61, (uint64_t)(a17 + 23));
  v55 = a9;
  swift_retain();
  v35 = a14;
  v36 = v33;
  v37 = sub_1000203C4();
  if (!v37)
    goto LABEL_7;
  v38 = v37;
  if ((sub_100125FB0() & 1) == 0)
  {
LABEL_6:
    swift_release(v38);
LABEL_7:
    v44 = sub_10001FB18();
    sub_100020B60(v44);
    sub_1000215EC(v44, v45);
    swift_release(v55);

    swift_release(v44);
    goto LABEL_8;
  }
  v39 = *(_QWORD *)(v38 + 24);
  v40 = *(_QWORD *)(v38 + 32);
  sub_100005D9C(v39, v40);
  v41 = sub_100022B48();
  sub_100005DE0(v39, v40);
  if ((v41 & 1) == 0)
  {
    sub_100021184();
    goto LABEL_6;
  }
  v42 = a17[7];
  a17[7] = v38;
  swift_retain();
  swift_release(v42);
  sub_1000215EC(v38, v43);
  swift_release(v38);
  swift_release(v55);

LABEL_8:
  sub_100005D3C(v61);
  sub_100005D3C(v59);
  sub_100005D3C(v60);
  sub_100005D3C(v51);
  sub_100005D3C(v30);
  sub_100005D3C(v27);
  return a17;
}

uint64_t sub_10011D354(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10011D364(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

_QWORD *sub_10011D36C(__int128 *a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD v33[3];
  uint64_t v34;
  _UNKNOWN **v35;
  _QWORD v36[3];
  uint64_t v37;
  _UNKNOWN **v38;
  _QWORD v39[3];
  uint64_t v40;
  _UNKNOWN **v41;

  v40 = type metadata accessor for CertificateVerifierFactory();
  v41 = &off_10019AB80;
  v39[0] = a3;
  v37 = type metadata accessor for SystemInfo();
  v38 = &off_10019F8A0;
  v36[0] = a5;
  v34 = type metadata accessor for DefaultSecureTimeKeeper();
  v35 = &off_10019C0A0;
  v33[0] = a8;
  v16 = type metadata accessor for SignerFactory();
  v17 = (_QWORD *)swift_allocObject(v16, 296, 7);
  v18 = sub_10001A64C((uint64_t)v39, v40);
  __chkstk_darwin(v18);
  v20 = (_QWORD *)((char *)&v33[-1] - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  v22 = sub_10001A64C((uint64_t)v36, v37);
  __chkstk_darwin(v22);
  v24 = (_QWORD *)((char *)&v33[-1] - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v25 + 16))(v24);
  v26 = sub_10001A64C((uint64_t)v33, v34);
  __chkstk_darwin(v26);
  v28 = (_QWORD *)((char *)&v33[-1] - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v29 + 16))(v28);
  v30 = sub_10011D564(a1, a2, *v20, a4, *v24, a6, a7, *v28, v17);
  sub_100005D3C(v33);
  sub_100005D3C(v36);
  sub_100005D3C(v39);
  return v30;
}

_QWORD *sub_10011D564(__int128 *a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  a9[33] = &type metadata for SystemRandomNumberGenerator;
  a9[34] = &protocol witness table for SystemRandomNumberGenerator;
  a9[15] = type metadata accessor for CertificateVerifierFactory();
  a9[16] = &off_10019AB80;
  a9[12] = a3;
  a9[21] = type metadata accessor for SystemInfo();
  a9[22] = &off_10019F8A0;
  a9[18] = a5;
  a9[28] = type metadata accessor for DefaultSecureTimeKeeper();
  a9[29] = &off_10019C0A0;
  a9[25] = a8;
  a9[35] = 0xD000000000000017;
  a9[36] = 0x800000010016B220;
  sub_10001A674(a1, (uint64_t)(a9 + 2));
  sub_10001A674(a2, (uint64_t)(a9 + 7));
  a9[17] = a4;
  a9[23] = a6;
  a9[24] = a7;
  return a9;
}

_QWORD *sub_10011D65C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[5];
  _QWORD v55[5];
  _QWORD v56[5];
  _QWORD v57[6];

  v47 = a8;
  v53 = a6;
  v51 = a4;
  v50 = a3;
  v48 = a1;
  v12 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008390((uint64_t)(a7 + 2), (uint64_t)v57);
  sub_100005EF8(a7 + 12, a7[15]);
  v49 = a2;
  swift_bridgeObjectRetain(a2);
  v52 = a5;
  swift_bridgeObjectRetain(a5);
  sub_10003146C((uint64_t)v56);
  v22 = a7[17];
  sub_100008390((uint64_t)(a7 + 18), (uint64_t)v55);
  sub_100008390((uint64_t)(a7 + 25), (uint64_t)v54);
  v23 = a7[23];
  v24 = a7[24];
  v45 = v23;
  sub_10001A610();
  v46 = v22;
  swift_retain(v22);
  v25 = swift_bridgeObjectRetain(v24);
  v26 = static DispatchQoS.background.getter(v25);
  static OS_dispatch_queue.Attributes.concurrent.getter(v26);
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v12);
  v27 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0x656E676953414142, 0xE900000000000072, v21, v18, v15, 0);
  if (qword_1001AD320 != -1)
    swift_once(&qword_1001AD320, sub_100141628);
  v28 = qword_1001AD318;
  v29 = (id)qword_1001B5010;
  if (v28 != -1)
    swift_once(&qword_1001AD318, sub_10014157C);
  v30 = qword_1001B5008;
  v31 = sub_10001A64C((uint64_t)v55, v55[3]);
  __chkstk_darwin(v31);
  v33 = (uint64_t *)((char *)&v45 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v34 + 16))(v33);
  v35 = sub_10001A64C((uint64_t)v54, v54[3]);
  __chkstk_darwin(v35);
  v37 = (uint64_t *)((char *)&v45 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v38 + 16))(v37);
  v39 = *v33;
  v40 = *v37;
  swift_bridgeObjectRetain(v30);
  *(_QWORD *)&v44 = v27;
  *((_QWORD *)&v44 + 1) = v29;
  *((_QWORD *)&v43 + 1) = v24;
  *(_QWORD *)&v43 = v45;
  v41 = sub_1001320A8(v48, v49, v50, v51, v52, v57, v53, v56, v46, v39, v40, v43, v44, v30, v47, a9);
  sub_100005D3C(v54);
  sub_100005D3C(v55);
  sub_100005F1C(&qword_1001B2920, (uint64_t (*)(uint64_t))type metadata accessor for BAASigner, (uint64_t)&unk_10016326C);
  return v41;
}

_QWORD *sub_10011DA30(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  _QWORD *result;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD v37[5];
  _QWORD v38[5];
  _QWORD v39[5];
  __int128 v40[2];
  __int128 v41[2];
  _QWORD *v42;

  v36 = a6;
  v42 = a5;
  v13 = a1[3];
  v14 = a1[4];
  sub_100005EF8(a1, v13);
  (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t))(v14 + 8))(v41, 0, v13, v14);
  if (v7)
  {
    swift_release(a4);
    sub_100005D3C(a7);
    sub_100005D3C(v42);
    sub_100005D3C(a3);
    sub_100005D3C(a2);
    sub_100005D3C(v36);
    sub_100005D3C(a1);
    return a3;
  }
  v33 = a4;
  v35 = a2;
  sub_100008390((uint64_t)a2, (uint64_t)v40);
  v34 = a3;
  sub_100008390((uint64_t)a3, (uint64_t)v39);
  sub_100008390((uint64_t)v42, (uint64_t)v38);
  result = objc_msgSend(*(id *)(*sub_100005EF8(v36, v36[3]) + 16), "serialNumber");
  if (result)
  {
    v16 = result;
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v31 = v17;

    sub_100008390((uint64_t)a7, (uint64_t)v37);
    v18 = sub_10001A64C((uint64_t)v39, v39[3]);
    __chkstk_darwin(v18);
    v20 = (_QWORD *)((char *)v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v21 + 16))(v20);
    v22 = sub_10001A64C((uint64_t)v38, v38[3]);
    v30[1] = v30;
    __chkstk_darwin(v22);
    v24 = (_QWORD *)((char *)v30 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v25 + 16))(v24);
    v26 = sub_10001A64C((uint64_t)v37, v37[3]);
    __chkstk_darwin(v26);
    v28 = (_QWORD *)((char *)v30 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v29 + 16))(v28);
    a3 = sub_10011D36C(v41, v40, *v20, v33, *v24, v32, v31, *v28);
    sub_100005D3C(v37);
    sub_100005D3C(v38);
    sub_100005D3C(v39);
    sub_100005D3C(a7);
    sub_100005D3C(v42);
    sub_100005D3C(v34);
    sub_100005D3C(v35);
    sub_100005D3C(v36);
    sub_100005D3C(a1);
    return a3;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10011DD50(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  _QWORD v6[5];
  _QWORD v7[5];
  _QWORD v8[5];
  _QWORD v9[5];
  _QWORD v10[5];
  _QWORD v11[5];

  sub_1000DBA54();
  if (v1)
  {
    swift_release(a1);
  }
  else
  {
    sub_1000DC9E4();
    sub_1000DBF84();
    v4 = sub_1000E3C14();
    sub_1000DF314();
    sub_1000DDE7C();
    sub_1000DC4B4();
    v2 = sub_10011DA30(v11, v10, v9, v4, v8, v7, v6);
    swift_release(a1);
  }
  return v2;
}

void sub_10011DED8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

_QWORD *sub_10011DF24(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_log_type_t type, uint8_t *buf, uint64_t a15, uint64_t a16, uint64_t a17, os_log_t log, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,__int16 a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  uint8_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  Swift::String v56;
  uint64_t v57;
  SEL v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  uint64_t v73;
  int v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint8_t *v79;
  Swift::String v80;
  SEL v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  uint8_t *v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  uint8_t *v92;
  NSObject *v93;
  os_log_type_t v94;
  uint8_t *v95;
  uint8_t *v96;
  NSObject *v97;
  os_log_type_t v98;
  uint8_t *v99;
  uint64_t v100;
  uint64_t v101;
  os_log_type_t v102;
  uint8_t *v103;
  unint64_t v104;
  uint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  _WORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  os_log_type_t v115;
  uint64_t v116;
  NSObject *v117;
  uint64_t v118;
  _QWORD v119[5];
  _QWORD v120[2];
  unsigned __int16 v121;

  sub_100005DE0(v42, v43);
  if (qword_1001ACF70 != -1)
    swift_once(&qword_1001ACF70, sub_100052704);
  v45 = type metadata accessor for Logger(0);
  sub_100003A14(v45, (uint64_t)qword_1001AFDD8);
  sub_100005D9C(v42, v43);
  v46 = sub_100005D9C(v42, v43);
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.info.getter();
  v117 = v47;
  if (os_log_type_enabled(v47, v48))
  {
    v49 = v42;
    v50 = (uint8_t *)swift_slowAlloc(12, -1);
    v116 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v44 - 72) = v116;
    *(_DWORD *)v50 = 136315138;
    v115 = v48;
    v51 = ((unint64_t)BYTE6(v43) << 32) | 0xF580;
    sub_10005E420(v51);
    v53 = v52;
    v55 = v54;
    v56 = Data.hexString()();
    v57 = v53;
    v42 = v49;
    sub_100005DE0(v57, v55);
    v118 = sub_1000056EC(v56._countAndFlagsBits, (unint64_t)v56._object, (uint64_t *)(v44 - 72));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, v119, v50 + 4, v50 + 12);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v56._object, v58, v59, v60, v61, v62, v63, v64);
    sub_100005DE0(v49, v43);
    sub_100005DE0(v49, v43);
    _os_log_impl((void *)&_mh_execute_header, v117, v115, "C-APDU (INIT PIN): %s", v50, 0xCu);
    swift_arrayDestroy(v116, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v116, -1, -1);
    swift_slowDealloc(v50, -1, -1);

  }
  else
  {
    sub_100005DE0(v42, v43);
    sub_100005DE0(v42, v43);

    v51 = ((unint64_t)BYTE6(v43) << 32) | 0xF580;
  }
  sub_1000DA1E0(v51, v42, v43, 1, (uint64_t)v119);
  v66 = v119[0];
  v65 = v119[1];
  v67 = v119[3];
  v68 = v119[4];
  v69 = sub_1000306DC((uint64_t)v119, (uint64_t)v120);
  if (v120[1] >> 60 != 15)
  {
    v75 = v121;
    sub_100005D9C(v66, v65);
    sub_100005D9C(v67, v68);
    sub_100005D9C(v66, v65);
    v76 = sub_100005D9C(v67, v68);
    v77 = Logger.logObject.getter(v76);
    v78 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v77, v78))
    {
      v114 = v67;
      v79 = (uint8_t *)swift_slowAlloc(12, -1);
      v113 = swift_slowAlloc(32, -1);
      *(_QWORD *)(v44 - 72) = v113;
      *(_DWORD *)v79 = 136315138;
      v80 = Data.hexString()();
      v118 = sub_1000056EC(v80._countAndFlagsBits, (unint64_t)v80._object, (uint64_t *)(v44 - 72));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, v119, v79 + 4, v79 + 12);
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v80._object, v81, v82, v83, v84, v85, v86, v87);
      sub_1000AFB30(v119, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
      sub_1000AFB30(v119, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
      _os_log_impl((void *)&_mh_execute_header, v77, v78, "R-APDU: %s", v79, 0xCu);
      swift_arrayDestroy(v113, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v113, -1, -1);
      v88 = v79;
      v67 = v114;
      swift_slowDealloc(v88, -1, -1);
    }
    else
    {
      sub_1000AFB30(v119, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
      sub_1000AFB30(v119, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
    }

    switch(v75)
    {
      case 27012:
        v93 = Logger.logObject.getter(v89);
        v94 = static os_log_type_t.error.getter(v93);
        if (!os_log_type_enabled(v93, v94))
        {
LABEL_28:

          v100 = 12004;
LABEL_29:
          v112 = sub_100024818(v100, 0, 0, 0);
          swift_willThrow(v112);
          sub_100005DE0(v42, v43);
          return sub_1000AFB30(v119, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
        }
        v95 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v95 = 0;
        _os_log_impl((void *)&_mh_execute_header, v93, v94, "transaction id mismatch", v95, 2u);
        v96 = v95;
        break;
      case 27013:
        v97 = Logger.logObject.getter(v89);
        v98 = static os_log_type_t.error.getter(v97);
        if (os_log_type_enabled(v97, v98))
        {
          v99 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v99 = 0;
          _os_log_impl((void *)&_mh_execute_header, v97, v98, "missing reader config or PAN", v99, 2u);
          swift_slowDealloc(v99, -1, -1);
        }

        v100 = 12003;
        goto LABEL_29;
      case 36864:
        v90 = Logger.logObject.getter(v89);
        v91 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v90, v91))
        {
          v92 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v92 = 0;
          _os_log_impl((void *)&_mh_execute_header, v90, v91, "transaction id matched", v92, 2u);
          swift_slowDealloc(v92, -1, -1);

          sub_1000AFB30(v119, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
          return (_QWORD *)sub_100005DE0(v42, v43);
        }
        else
        {
          sub_100005DE0(v42, v43);

          return sub_1000AFB30(v119, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
        }
      default:
        sub_100005D9C(v66, v65);
        v101 = sub_100005D9C(v67, v68);
        v93 = Logger.logObject.getter(v101);
        v102 = static os_log_type_t.error.getter(v93);
        if (!os_log_type_enabled(v93, v102))
        {
          sub_1000AFB30(v119, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
          goto LABEL_28;
        }
        v103 = (uint8_t *)swift_slowAlloc(12, -1);
        v104 = v43;
        v105 = (uint64_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v103 = 138412290;
        v106 = sub_100030724();
        v107 = swift_allocError(&type metadata for APDUSW, v106, 0, 0);
        *v108 = v75;
        v109 = _swift_stdlib_bridgeErrorToNSError(v107);
        *(_QWORD *)(v44 - 72) = v109;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v44 - 72, v44 - 64, v103 + 4, v103 + 12);
        *v105 = v109;
        sub_1000AFB30(v119, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
        _os_log_impl((void *)&_mh_execute_header, v93, v102, "unexpected sw: %@", v103, 0xCu);
        v110 = sub_100003A2C((uint64_t *)&unk_1001AE430);
        swift_arrayDestroy(v105, 1, v110);
        v111 = v105;
        v43 = v104;
        swift_slowDealloc(v111, -1, -1);
        v96 = v103;
        break;
    }
    swift_slowDealloc(v96, -1, -1);
    goto LABEL_28;
  }
  v70 = Logger.logObject.getter(v69);
  v71 = static os_log_type_t.error.getter(v70);
  if (os_log_type_enabled(v70, v71))
  {
    v72 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v72 = 0;
    _os_log_impl((void *)&_mh_execute_header, v70, v71, "no response from INIT PIN", v72, 2u);
    swift_slowDealloc(v72, -1, -1);
  }

  v73 = sub_100024818(12004, 0, 0, 0);
  swift_willThrow(v73);
  return (_QWORD *)sub_100005DE0(v42, v43);
}

void sub_10011E784(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (qword_1001AD270 != -1)
    swift_once(&qword_1001AD270, sub_10011648C);
  v4 = qword_1001B4FB0;
  v5 = *(_QWORD *)algn_1001B4FB8;
  v6 = *(_QWORD *)algn_1001B4FB8;
  sub_100005D9C(qword_1001B4FB0, *(unint64_t *)algn_1001B4FB8);
  sub_100005D9C(v4, v5);
  sub_100005D9C(a1, a2);
  sub_10012465C(a1, a2);
  sub_100005DE0(a1, a2);
  sub_100005DE0(v4, v5);
  __asm { BR              X10 }
}

_QWORD *sub_10011F0B4()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  Swift::String v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  int v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  Swift::String v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint8_t *v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint8_t *v52;
  uint64_t v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  _WORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[5];
  _BYTE v68[8];
  unint64_t v69;
  unsigned __int16 v70;
  uint64_t v71;
  uint64_t v72;

  if (qword_1001ACF70 != -1)
    swift_once(&qword_1001ACF70, sub_100052704);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001AFDD8);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v65 = swift_slowAlloc(32, -1);
    v71 = v65;
    *(_DWORD *)v4 = 136315138;
    sub_10005E420(0xF280uLL);
    v6 = v5;
    v8 = v7;
    v9 = Data.hexString()();
    sub_100005DE0(v6, v8);
    v66 = sub_1000056EC(v9._countAndFlagsBits, (unint64_t)v9._object, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v4 + 4, v4 + 12);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v9._object, v10, v11, v12, v13, v14, v15, v16);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "C-APDU (REMOVE PIN DIGIT): %s", v4, 0xCu);
    swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v65, -1, -1);
    swift_slowDealloc(v4, -1, -1);
  }

  sub_1000DA1E0(62080, 0, 0xC000000000000000, 1, (uint64_t)v67);
  v17 = v67[0];
  v18 = v67[1];
  v19 = v67[3];
  v20 = v67[4];
  v21 = sub_1000306DC((uint64_t)v67, (uint64_t)v68);
  if (v69 >> 60 == 15)
  {
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "no response from applet", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    v25 = sub_100024818(12004, 0, 0, 0);
    return (_QWORD *)swift_willThrow(v25);
  }
  v27 = v70;
  sub_100005D9C(v17, v18);
  sub_100005D9C(v19, v20);
  sub_100005D9C(v17, v18);
  v28 = sub_100005D9C(v19, v20);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v64 = v27;
    v31 = (uint8_t *)swift_slowAlloc(12, -1);
    v63 = swift_slowAlloc(32, -1);
    v71 = v63;
    *(_DWORD *)v31 = 136315138;
    v32 = Data.hexString()();
    v66 = sub_1000056EC(v32._countAndFlagsBits, (unint64_t)v32._object, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v31 + 4, v31 + 12);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v32._object, v33, v34, v35, v36, v37, v38, v39);
    sub_1000AFB30(v67, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
    sub_1000AFB30(v67, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "R-APDU: %s", v31, 0xCu);
    swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v63, -1, -1);
    v40 = v31;
    v27 = v64;
    swift_slowDealloc(v40, -1, -1);
  }
  else
  {
    sub_1000AFB30(v67, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
    sub_1000AFB30(v67, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
  }

  if (v27 == 26368)
  {
    v45 = Logger.logObject.getter(v41);
    v46 = static os_log_type_t.error.getter(v45);
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Empty buffer", v47, 2u);
      swift_slowDealloc(v47, -1, -1);
    }

    v48 = 12007;
    goto LABEL_28;
  }
  if (v27 == 27013)
  {
    v49 = Logger.logObject.getter(v41);
    v50 = static os_log_type_t.error.getter(v49);
    if (!os_log_type_enabled(v49, v50))
    {
LABEL_27:

      v48 = 12004;
LABEL_28:
      v62 = sub_100024818(v48, 0, 0, 0);
      swift_willThrow(v62);
      return sub_1000AFB30(v67, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
    }
    v51 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v51 = 0;
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "PIN remove failed", v51, 2u);
    v52 = v51;
LABEL_25:
    swift_slowDealloc(v52, -1, -1);
    goto LABEL_27;
  }
  if (v27 != 36864)
  {
    sub_100005D9C(v17, v18);
    v53 = sub_100005D9C(v19, v20);
    v49 = Logger.logObject.getter(v53);
    v54 = static os_log_type_t.error.getter(v49);
    if (!os_log_type_enabled(v49, v54))
    {
      sub_1000AFB30(v67, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
      goto LABEL_27;
    }
    v55 = (uint8_t *)swift_slowAlloc(12, -1);
    v56 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v55 = 138412290;
    v57 = sub_100030724();
    v58 = swift_allocError(&type metadata for APDUSW, v57, 0, 0);
    *v59 = v27;
    v60 = _swift_stdlib_bridgeErrorToNSError(v58);
    v71 = v60;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v55 + 4, v55 + 12);
    *v56 = v60;
    sub_1000AFB30(v67, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
    _os_log_impl((void *)&_mh_execute_header, v49, v54, "Unexpected status word: %@", v55, 0xCu);
    v61 = sub_100003A2C((uint64_t *)&unk_1001AE430);
    swift_arrayDestroy(v56, 1, v61);
    swift_slowDealloc(v56, -1, -1);
    v52 = v55;
    goto LABEL_25;
  }
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "removed last digit", v44, 2u);
    swift_slowDealloc(v44, -1, -1);
  }

  return sub_1000AFB30(v67, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
}

uint8_t *sub_10011F7FC()
{
  uint8_t *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  Swift::String v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  _TtC14softposreaderd12RemoteReader *v37;
  _TtC14softposreaderd12RemoteReader *v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  uint8_t *v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  const char *v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint8_t *result;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint8_t *v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  const char *v70;
  uint64_t v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  _WORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint8_t *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD v89[5];
  uint8_t *v90;
  unint64_t v91;
  unsigned __int16 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  if (qword_1001ACF70 != -1)
    swift_once(&qword_1001ACF70, sub_100052704);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100003A14(v1, (uint64_t)qword_1001AFDD8);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v0 = (uint8_t *)swift_slowAlloc(12, -1);
    v86 = swift_slowAlloc(32, -1);
    v95 = v86;
    *(_DWORD *)v0 = 136315138;
    sub_10005E420(0xF380uLL);
    v6 = v5;
    v8 = v7;
    v9 = Data.hexString()();
    sub_100005DE0(v6, v8);
    v88 = sub_1000056EC(v9._countAndFlagsBits, (unint64_t)v9._object, &v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, v89, v0 + 4, v0 + 12);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v9._object, v10, v11, v12, v13, v14, v15, v16);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "C-APDU (GENERATE PIN BLOB): %s", v0, 0xCu);
    swift_arrayDestroy(v86, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v86, -1, -1);
    swift_slowDealloc(v0, -1, -1);
  }

  sub_1000DA1E0(62336, 0, 0xC000000000000000, 1, (uint64_t)v89);
  v18 = v89[0];
  v17 = v89[1];
  v19 = v89[3];
  v20 = v89[4];
  v21 = sub_1000306DC((uint64_t)v89, (uint64_t)&v90);
  v22 = v91;
  if (v91 >> 60 == 15)
  {
    v23 = Logger.logObject.getter(v21);
    v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "No response or error from GENERATE PIN BLOB command", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    v26 = sub_100024818(12004, 0, 0, 0);
    swift_willThrow(v26);
    return v0;
  }
  v0 = v90;
  v27 = v92;
  v84 = v94;
  v85 = v93;
  sub_100005D9C(v18, v17);
  sub_100005D9C(v19, v20);
  v87 = v17;
  sub_100005D9C(v18, v17);
  v28 = sub_100005D9C(v19, v20);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v82 = v0;
    v31 = (uint8_t *)swift_slowAlloc(12, -1);
    v83 = v22;
    v81 = swift_slowAlloc(32, -1);
    v95 = v81;
    *(_DWORD *)v31 = 136315138;
    v32 = Data.description.getter(v85, v84);
    v33 = v18;
    v34 = v20;
    v35 = v27;
    v37 = (_TtC14softposreaderd12RemoteReader *)v36;
    v88 = sub_1000056EC(v32, v36, &v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, v89, v31 + 4, v31 + 12);
    v38 = v37;
    v27 = v35;
    v20 = v34;
    v18 = v33;
    swift_bridgeObjectRelease(v38, v39, v40, v41, v42, v43, v44, v45);
    sub_1000AFB30(v89, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
    sub_1000AFB30(v89, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "R-APDU: %s", v31, 0xCu);
    swift_arrayDestroy(v81, 1, (char *)&type metadata for Any + 8);
    v22 = v83;
    swift_slowDealloc(v81, -1, -1);
    v46 = v31;
    v0 = v82;
    swift_slowDealloc(v46, -1, -1);
  }
  else
  {
    sub_1000AFB30(v89, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
    sub_1000AFB30(v89, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
  }

  if (v27 <= 27265)
  {
    switch(v27)
    {
      case 26368:
        v62 = Logger.logObject.getter(v47);
        v63 = static os_log_type_t.error.getter(v62);
        if (os_log_type_enabled(v62, v63))
        {
          v64 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v64 = 0;
          _os_log_impl((void *)&_mh_execute_header, v62, v63, "Empty Buffer", v64, 2u);
          swift_slowDealloc(v64, -1, -1);
        }

        v65 = 12007;
        goto LABEL_49;
      case 27010:
        v48 = Logger.logObject.getter(v47);
        v49 = static os_log_type_t.error.getter(v48);
        if (os_log_type_enabled(v48, v49))
        {
          v50 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v50 = 0;
          v51 = "Security condition not satisfied";
          goto LABEL_37;
        }
LABEL_48:

        v65 = 12004;
        goto LABEL_49;
      case 27013:
        v48 = Logger.logObject.getter(v47);
        v49 = static os_log_type_t.error.getter(v48);
        if (os_log_type_enabled(v48, v49))
        {
          v50 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v50 = 0;
          v51 = "Generation failed";
LABEL_37:
          _os_log_impl((void *)&_mh_execute_header, v48, v49, v51, v50, 2u);
          v66 = v50;
LABEL_46:
          swift_slowDealloc(v66, -1, -1);
          goto LABEL_48;
        }
        goto LABEL_48;
    }
LABEL_44:
    sub_100005D9C(v18, v87);
    v71 = sub_100005D9C(v19, v20);
    v48 = Logger.logObject.getter(v71);
    v72 = static os_log_type_t.error.getter(v48);
    if (!os_log_type_enabled(v48, v72))
    {
      sub_1000AFB30(v89, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
      goto LABEL_48;
    }
    v73 = (uint8_t *)swift_slowAlloc(12, -1);
    v74 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v73 = 138412290;
    v0 = v73 + 12;
    v75 = sub_100030724();
    v76 = swift_allocError(&type metadata for APDUSW, v75, 0, 0);
    *v77 = v27;
    v78 = _swift_stdlib_bridgeErrorToNSError(v76);
    v95 = v78;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v73 + 4, v73 + 12);
    *v74 = v78;
    sub_1000AFB30(v89, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
    _os_log_impl((void *)&_mh_execute_header, v48, v72, "Unexpected status word: %@", v73, 0xCu);
    v79 = sub_100003A2C((uint64_t *)&unk_1001AE430);
    swift_arrayDestroy(v74, 1, v79);
    swift_slowDealloc(v74, -1, -1);
    v66 = v73;
    goto LABEL_46;
  }
  if (v27 == 27266)
  {
    v67 = Logger.logObject.getter(v47);
    v68 = static os_log_type_t.error.getter(v67);
    if (os_log_type_enabled(v67, v68))
    {
      v69 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v69 = 0;
      v70 = "PIN KEK hash not found";
LABEL_42:
      _os_log_impl((void *)&_mh_execute_header, v67, v68, v70, v69, 2u);
      swift_slowDealloc(v69, -1, -1);
    }
LABEL_43:

    v65 = 12003;
LABEL_49:
    v80 = sub_100024818(v65, 0, 0, 0);
    swift_willThrow(v80);
    sub_1000AFB30(v89, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
    return v0;
  }
  if (v27 == 27272)
  {
    v67 = Logger.logObject.getter(v47);
    v68 = static os_log_type_t.error.getter(v67);
    if (os_log_type_enabled(v67, v68))
    {
      v69 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v69 = 0;
      v70 = "PAN not found";
      goto LABEL_42;
    }
    goto LABEL_43;
  }
  if (v27 != 36864)
    goto LABEL_44;
  v52 = Logger.logObject.getter(v47);
  v53 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v52, v53))
  {
    v54 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v54 = 0;
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "Received PIN Blobs from applet", v54, 2u);
    swift_slowDealloc(v54, -1, -1);
  }

  if (qword_1001AD308 != -1)
    swift_once(&qword_1001AD308, sub_10013E994);
  v55 = static GlobalState.shared;
  result = (uint8_t *)objc_msgSend(*(id *)(static GlobalState.shared + 72), "lock");
  v57 = *(_QWORD *)(v55 + 96);
  v58 = __OFADD__(v57, 1);
  v59 = v57 + 1;
  if (v58)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v55 + 96) = v59;
    while (*(uint64_t *)(v55 + 88) > 0 || *(_BYTE *)(v55 + 80) == 1)
      result = (uint8_t *)objc_msgSend(*(id *)(v55 + 72), "wait");
    v60 = *(_QWORD *)(v55 + 96);
    v58 = __OFSUB__(v60, 1);
    v61 = v60 - 1;
    if (!v58)
    {
      *(_QWORD *)(v55 + 96) = v61;
      *(_BYTE *)(v55 + 80) = 1;
      objc_msgSend(*(id *)(v55 + 72), "unlock");
      *(_BYTE *)(v55 + 33) = 0;
      sub_10013E340();
      objc_msgSend(*(id *)(v55 + 72), "lock");
      *(_BYTE *)(v55 + 80) = 0;
      objc_msgSend(*(id *)(v55 + 72), "broadcast");
      objc_msgSend(*(id *)(v55 + 72), "unlock");
      sub_100005D9C((uint64_t)v0, v22);
      sub_1000AFB30(v89, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
      return v0;
    }
  }
  __break(1u);
  return result;
}

void sub_100120194()
{
  sub_1001201AC((void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000DA1E0);
}

void sub_1001201A0()
{
  sub_1001201AC((void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000D8FF0);
}

void sub_1001201AC(void (*a1)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::String v11;
  unint64_t v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  Swift::String v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  void (*v52)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[4];
  uint64_t v57[2];
  unsigned __int16 v58;

  if (qword_1001ACF70 != -1)
    swift_once(&qword_1001ACF70, sub_100052704);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100003A14(v2, (uint64_t)qword_1001AFDD8);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v52 = a1;
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v51 = swift_slowAlloc(32, -1);
    v57[0] = v51;
    *(_DWORD *)v6 = 136315138;
    sub_10005E420(0xF480uLL);
    v8 = v7;
    v10 = v9;
    v11 = Data.hexString()();
    v12 = v10;
    a1 = v52;
    sub_100005DE0(v8, v12);
    v55 = sub_1000056EC(v11._countAndFlagsBits, (unint64_t)v11._object, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v11._object, v13, v14, v15, v16, v17, v18, v19);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "C-APDU (CANCEL): %s", v6, 0xCu);
    swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }

  a1(&v55, 62592, 0, 0xC000000000000000, 0, 1);
  v20 = v55;
  v21 = v56[0];
  v22 = v56[2];
  v23 = v56[3];
  sub_1000306DC((uint64_t)&v55, (uint64_t)v57);
  if ((unint64_t)v57[1] >> 60 != 15)
  {
    v24 = v58;
    sub_100005D9C(v20, v21);
    sub_100005D9C(v22, v23);
    sub_100005D9C(v20, v21);
    v25 = sub_100005D9C(v22, v23);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = swift_slowAlloc(32, -1);
      v54 = v29;
      *(_DWORD *)v28 = 136315138;
      v30 = Data.hexString()();
      v53 = sub_1000056EC(v30._countAndFlagsBits, (unint64_t)v30._object, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v28 + 4, v28 + 12);
      swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v30._object, v31, v32, v33, v34, v35, v36, v37);
      sub_1000AFB30(&v55, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
      sub_1000AFB30(&v55, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "R-APDU: %s", v28, 0xCu);
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);
    }
    else
    {
      sub_1000AFB30(&v55, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
      sub_1000AFB30(&v55, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
    }

    v39 = Logger.logObject.getter(v38);
    v40 = v39;
    if (v24 == 36864)
    {
      v41 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v40, v41))
      {
        v42 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "cleared persistent storage in SE", v42, 2u);
        swift_slowDealloc(v42, -1, -1);
      }

      if (qword_1001AD308 != -1)
        swift_once(&qword_1001AD308, sub_10013E994);
      v43 = static GlobalState.shared;
      objc_msgSend(*(id *)(static GlobalState.shared + 72), "lock");
      v44 = *(_QWORD *)(v43 + 96);
      v45 = __OFADD__(v44, 1);
      v46 = v44 + 1;
      if (v45)
      {
        __break(1u);
      }
      else
      {
        *(_QWORD *)(v43 + 96) = v46;
        while (*(uint64_t *)(v43 + 88) > 0 || *(_BYTE *)(v43 + 80) == 1)
          objc_msgSend(*(id *)(v43 + 72), "wait");
        v47 = *(_QWORD *)(v43 + 96);
        v45 = __OFSUB__(v47, 1);
        v48 = v47 - 1;
        if (!v45)
        {
          *(_QWORD *)(v43 + 96) = v48;
          *(_BYTE *)(v43 + 80) = 1;
          objc_msgSend(*(id *)(v43 + 72), "unlock");
          *(_BYTE *)(v43 + 33) = 0;
          sub_10013E340();
          objc_msgSend(*(id *)(v43 + 72), "lock");
          *(_BYTE *)(v43 + 80) = 0;
          objc_msgSend(*(id *)(v43 + 72), "broadcast");
          objc_msgSend(*(id *)(v43 + 72), "unlock");
LABEL_23:
          sub_1000AFB30(&v55, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);
          return;
        }
      }
      __break(1u);
    }
    else
    {
      v49 = static os_log_type_t.error.getter(v39);
      if (os_log_type_enabled(v40, v49))
      {
        v50 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v50 = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, v49, "failed to cleared persistent storage in SE", v50, 2u);
        swift_slowDealloc(v50, -1, -1);

        goto LABEL_23;
      }
      sub_1000AFB30(&v55, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030798);

    }
  }
}

void sub_10012071C(char a1, uint64_t a2, unint64_t a3)
{
  sub_10012076C(a1, a2, a3);
}

void sub_10012076C(char a1, uint64_t a2, unint64_t a3)
{
  void *v3;
  uint64_t v7;
  unint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  _TtC14softposreaderd12RemoteReader *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  Swift::String v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  _TtC14softposreaderd12RemoteReader *v34;
  _TtC14softposreaderd12RemoteReader *v35;
  uint64_t v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  os_log_type_t type;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  if (qword_1001ACF90 != -1)
    swift_once(&qword_1001ACF90, sub_100055C2C);
  v7 = type metadata accessor for Logger(0);
  sub_100003A14(v7, (uint64_t)qword_1001AFF80);
  v8 = a3 >> 62;
  v9 = v3;
  sub_100005D9C(a2, a3);
  v10 = v9;
  v11 = sub_100005D9C(a2, a3);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    type = v13;
    v14 = swift_slowAlloc(35, -1);
    v45 = swift_slowAlloc(96, -1);
    v47 = v45;
    *(_DWORD *)v14 = 136315906;
    if (a1)
      v15 = 5130576;
    else
      v15 = 0;
    if (a1)
      v16 = (_TtC14softposreaderd12RemoteReader *)0xE300000000000000;
    else
      v16 = (_TtC14softposreaderd12RemoteReader *)0xE000000000000000;
    v46 = sub_1000056EC(v15, (unint64_t)v16, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
    *(_WORD *)(v14 + 12) = 256;
    LOBYTE(v46) = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, (char *)&v46 + 1, v14 + 14, v14 + 15);
    *(_WORD *)(v14 + 15) = 2080;
    v24 = Data.hexString()();
    v46 = sub_1000056EC(v24._countAndFlagsBits, (unint64_t)v24._object, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v14 + 17, v14 + 25);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v24._object, v25, v26, v27, v28, v29, v30, v31);
    sub_100005DE0(a2, a3);
    sub_100005DE0(a2, a3);
    *(_WORD *)(v14 + 25) = 2080;
    v32 = objc_msgSend(v10, "description");
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v35 = v34;

    v36 = v33;
    v8 = a3 >> 62;
    v46 = sub_1000056EC(v36, (unint64_t)v35, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v14 + 27, v14 + 35);

    swift_bridgeObjectRelease(v35, v37, v38, v39, v40, v41, v42, v43);
    _os_log_impl((void *)&_mh_execute_header, v12, type, "get%sKeyAttestation(P1: %hhu, kernelIdentityKeyIdentifier: %s) session: %s", (uint8_t *)v14, 0x23u);
    swift_arrayDestroy(v45, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

    sub_100005DE0(a2, a3);
    sub_100005DE0(a2, a3);

  }
  __asm { BR              X10 }
}

uint64_t sub_1001218D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B35E0);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B35E0);
  if (qword_1001AD178 != -1)
    swift_once(&qword_1001AD178, sub_1000CC864);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4E58);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_100121968()
{
  char *v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void *v9;
  objc_class *v10;
  _QWORD v12[6];
  objc_super v13;

  v1 = v0;
  v2 = *(void **)&v0[OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_activeSession];
  if (v2)
  {
    v3 = v2;
    if (objc_msgSend(v3, "isActive"))
    {
      if (qword_1001AD288 != -1)
        swift_once(&qword_1001AD288, sub_1001218D8);
      v4 = type metadata accessor for Logger(0);
      v5 = sub_100003A14(v4, (uint64_t)qword_1001B35E0);
      v6 = Logger.logObject.getter(v5);
      v7 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v6, v7))
      {
        v8 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v8 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "Clear PAN in deinit (timeout/crash)", v8, 2u);
        swift_slowDealloc(v8, -1, -1);
      }

      sub_1001201AC((void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000DA1E0);
      v12[4] = sub_100121AFC;
      v12[5] = 0;
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 1107296256;
      v12[2] = sub_1000043B8;
      v12[3] = &unk_1001A01B8;
      v9 = _Block_copy(v12);
      objc_msgSend(v3, "endSessionWithCompletion:", v9);
      _Block_release(v9);
    }

  }
  v10 = (objc_class *)type metadata accessor for DefaultPINAppletProxy();
  v13.receiver = v1;
  v13.super_class = v10;
  return objc_msgSendSuper2(&v13, "dealloc");
}

void sub_100121AFC()
{
  sub_1001244DC((uint64_t (*)(void))&static os_log_type_t.default.getter, "Ended PINAppletProxy.activeSession");
}

void sub_100121B9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void **v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  dispatch_semaphore_t v34;
  uint64_t v35;
  void **v36;
  id v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  NSObject *v42;
  id v43;
  id v44;
  NSObject *v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  void (*isa)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  void ***v69;
  void **v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  _BOOL4 v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  void *v83;
  id v84;
  void *v85;
  id v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  NSObject *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void **aBlock;
  uint64_t v101;
  void *v102;
  void *v103;
  void *v104;
  uint64_t v105;

  v92 = a2;
  v3 = v2;
  v91 = a1;
  v4 = type metadata accessor for DispatchTime(0);
  v96 = *(NSObject **)(v4 - 8);
  v97 = v4;
  v5 = __chkstk_darwin(v4);
  v94 = (char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v95 = (char *)&v87 - v7;
  v8 = sub_100003A2C((uint64_t *)&unk_1001B36F0);
  __chkstk_darwin(v8);
  v10 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001AD288 != -1)
    swift_once(&qword_1001AD288, sub_1001218D8);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_100003A14(v11, (uint64_t)qword_1001B35E0);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = (void **)swift_slowAlloc(32, -1);
    aBlock = v16;
    *(_DWORD *)v15 = 136315138;
    v98 = sub_1000056EC(0xD000000000000022, 0x8000000100170C30, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v15 + 4, v15 + 12);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }

  sub_100005EF8((_QWORD *)(v3 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_monitorManager), *(_QWORD *)(v3 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_monitorManager + 24));
  v17 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v10, 1, 1, v17);
  v18 = sub_1000F52D4((uint64_t)v10, 0.0);
  v19 = sub_100124874((uint64_t)v10);
  if ((v18 & 1) == 0)
  {
    v23 = Logger.logObject.getter(v19);
    v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Not attested", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    v26 = 0xD000000000000030;
    v27 = (void *)0x8000000100170B90;
    v28 = 12008;
    goto LABEL_15;
  }
  v20 = OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_activeSession;
  v21 = *(void **)(v3 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_activeSession);
  if (v21)
  {
    objc_msgSend(v21, "endSession");
    v22 = *(void **)(v3 + v20);
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)(v3 + v20) = 0;

  *(_QWORD *)(v3 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_pinLength) = 0;
  v29 = objc_msgSend(*(id *)(*sub_100005EF8((_QWORD *)(v3 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_secureElement), *(_QWORD *)(v3 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_secureElement + 24))+ 24), "ecdsaCertificate");
  if (!v29)
  {
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v30 = v29;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v29);

  v31 = Data.init(hexString:)();
  if (v32 >> 60 == 15)
  {
    v26 = 0xD000000000000016;
    v27 = (void *)0x8000000100170BD0;
    v28 = 12003;
LABEL_15:
    v33 = sub_100024818(v28, v26, v27, 0);
    swift_willThrow(v33);
    return;
  }
  v88 = v32;
  v89 = v31;
  v34 = dispatch_semaphore_create(0);
  v35 = swift_allocObject(&unk_1001A0128, 24, 7);
  *(_QWORD *)(v35 + 16) = 0;
  v36 = (void **)(v35 + 16);
  v37 = objc_msgSend((id)objc_opt_self(NFHardwareManager), "sharedHardwareManager");
  if (!v37)
    goto LABEL_47;
  v38 = v37;
  v39 = swift_allocObject(&unk_1001A0150, 32, 7);
  *(_QWORD *)(v39 + 16) = v34;
  *(_QWORD *)(v39 + 24) = v35;
  v104 = sub_100124904;
  v105 = v39;
  aBlock = _NSConcreteStackBlock;
  v101 = 1107296256;
  v102 = sub_100004C68;
  v103 = &unk_1001A0168;
  v40 = _Block_copy(&aBlock);
  v41 = v105;
  v42 = v34;
  v87 = v35;
  swift_retain();
  swift_release(v41);
  v43 = objc_msgSend(v38, "startSecureElementManagerSession:", v40);
  _Block_release(v40);

  if (!v43)
  {
LABEL_48:
    __break(1u);
    return;
  }
  v44 = objc_msgSend(v43, "isFirstInQueue");
  if ((v44 & 1) == 0)
  {
    v45 = v42;
    v46 = Logger.logObject.getter(v44);
    v47 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "waiting for eSE...", v48, 2u);
      swift_slowDealloc(v48, -1, -1);
    }

    v42 = v45;
  }
  v90 = v43;
  v49 = v94;
  static DispatchTime.now()(v44);
  v50 = v95;
  + infix(_:_:)(v49);
  v51 = v97;
  isa = (void (*)(char *, uint64_t))v96[1].isa;
  isa(v49, v97);
  v96 = v42;
  v53 = OS_dispatch_semaphore.wait(timeout:)(v50) & 1;
  isa(v50, v51);
  v54 = static DispatchTimeoutResult.== infix(_:_:)(v53, 1);
  if ((v54 & 1) != 0)
  {
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.error.getter(v55);
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "timeout when obtaining session", v57, 2u);
      swift_slowDealloc(v57, -1, -1);
    }

    v58 = sub_100024818(12001, 0xD00000000000001ELL, (void *)0x8000000100170C10, 0);
    swift_willThrow(v58);
    v59 = v90;
LABEL_41:
    v104 = sub_100122934;
    v105 = 0;
    aBlock = _NSConcreteStackBlock;
    v101 = 1107296256;
    v102 = sub_1000043B8;
    v103 = &unk_1001A0190;
    v81 = _Block_copy(&aBlock);
    objc_msgSend(v59, "endSessionWithCompletion:", v81);
    _Block_release(v81);
    swift_willThrow(v82);

    swift_release(v87);
    swift_unknownObjectRelease(v59);
    sub_10000A9B0(v89, v88);
    return;
  }
  v60 = swift_beginAccess(v36, &v98, 0, 0);
  v61 = *v36;
  if (!*v36)
  {
    v72 = Logger.logObject.getter(v60);
    v73 = static os_log_type_t.error.getter(v72);
    v74 = os_log_type_enabled(v72, v73);
    v59 = v90;
    if (v74)
    {
      v75 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v75 = 0;
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "no pending session", v75, 2u);
      swift_slowDealloc(v75, -1, -1);
    }

    v76 = sub_100024818(12001, 0xD000000000000012, (void *)0x8000000100170BF0, 0);
    swift_willThrow(v76);
    goto LABEL_41;
  }
  v62 = qword_1001AD248;
  v63 = v61;
  v59 = v90;
  if (v62 != -1)
    swift_once(&qword_1001AD248, sub_1001162D0);
  v64 = v93;
  NFSecureElementManagerSession.select(_:)(AID_PIN_APPLET, *(unint64_t *)algn_1001B4F68);
  if (v64)
  {
    swift_errorRetain();
    v65 = swift_errorRetain();
    v66 = Logger.logObject.getter(v65);
    v67 = static os_log_type_t.error.getter(v66);
    if (os_log_type_enabled(v66, v67))
    {
      v68 = (uint8_t *)swift_slowAlloc(12, -1);
      v69 = (void ***)swift_slowAlloc(8, -1);
      *(_DWORD *)v68 = 138412290;
      swift_errorRetain();
      v70 = (void **)_swift_stdlib_bridgeErrorToNSError(v64);
      aBlock = v70;
      v59 = v90;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v101, v68 + 4, v68 + 12);
      *v69 = v70;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "Failed to select PIN applet %@", v68, 0xCu);
      v71 = sub_100003A2C((uint64_t *)&unk_1001AE430);
      swift_arrayDestroy(v69, 1, v71);
      swift_slowDealloc(v69, -1, -1);
      swift_slowDealloc(v68, -1, -1);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    v77 = sub_100024818(12002, 0, 0, 0);
    swift_willThrow(v77);

    swift_errorRelease();
    goto LABEL_41;
  }
  sub_10011DED8(v91, v92);
  v78 = v63;
  if (qword_1001AD268 != -1)
    swift_once(&qword_1001AD268, sub_1001163C8);
  v79 = qword_1001B4FA0;
  v80 = *(_QWORD *)algn_1001B4FA8;
  sub_100005D9C(qword_1001B4FA0, *(unint64_t *)algn_1001B4FA8);
  sub_10012076C(1, v79, v80);
  sub_100005DE0(v79, v80);
  v83 = *(void **)(v3 + v20);
  *(_QWORD *)(v3 + v20) = v61;
  v84 = v78;

  v85 = *(void **)(v3 + v20);
  if (v85)
  {
    v86 = v85;
    objc_msgSend(v86, "setDelegate:", v3);
    swift_release(v87);

  }
  else
  {
    swift_release(v87);
  }
  swift_unknownObjectRelease(v90);

}

Swift::Int sub_100122664(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _TtC14softposreaderd12RemoteReader *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  void **v23;
  void *v24;
  id v25;
  uint64_t v27;
  uint64_t v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32[3];

  if (!a2)
  {
    if (a1)
    {
      v23 = (void **)(a4 + 16);
      swift_beginAccess(a4 + 16, v32, 1, 0);
      v24 = *v23;
      *v23 = a1;
      v25 = a1;

      return OS_dispatch_semaphore.signal()();
    }
    if (qword_1001AD288 != -1)
      swift_once(&qword_1001AD288, sub_1001218D8);
    v27 = type metadata accessor for Logger(0);
    v28 = sub_100003A14(v27, (uint64_t)qword_1001B35E0);
    v7 = Logger.logObject.getter(v28);
    v29 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v29, "nil session", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }
LABEL_9:

    return OS_dispatch_semaphore.signal()();
  }
  swift_errorRetain();
  if (qword_1001AD288 != -1)
    swift_once(&qword_1001AD288, sub_1001218D8);
  v5 = type metadata accessor for Logger(0);
  sub_100003A14(v5, (uint64_t)qword_1001B35E0);
  swift_errorRetain();
  v6 = swift_errorRetain();
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  if (!os_log_type_enabled(v7, v8))
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    goto LABEL_9;
  }
  v9 = (uint8_t *)swift_slowAlloc(12, -1);
  v10 = swift_slowAlloc(32, -1);
  v31 = a2;
  v32[0] = v10;
  *(_DWORD *)v9 = 136315138;
  swift_errorRetain();
  v11 = sub_100003A2C((uint64_t *)&unk_1001B1280);
  v12 = String.init<A>(describing:)(&v31, v11);
  v14 = (_TtC14softposreaderd12RemoteReader *)v13;
  v31 = sub_1000056EC(v12, v13, v32);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32, v9 + 4, v9 + 12);
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  swift_errorRelease();
  swift_errorRelease();
  _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s", v9, 0xCu);
  swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v10, -1, -1);
  swift_slowDealloc(v9, -1, -1);

  swift_errorRelease();
  return OS_dispatch_semaphore.signal()();
}

void sub_100122934()
{
  sub_1001244DC((uint64_t (*)(void))&static os_log_type_t.error.getter, "init pin capture failed, session ended");
}

void sub_100122948(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t aBlock[6];
  uint64_t v38;
  uint64_t v39;

  v4 = v3;
  v5 = v2;
  if (qword_1001AD288 != -1)
    swift_once(&qword_1001AD288, sub_1001218D8);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100003A14(v8, (uint64_t)qword_1001B35E0);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  v36 = a1;
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    aBlock[0] = v13;
    *(_DWORD *)v12 = 136315138;
    v38 = sub_1000056EC(0xD000000000000011, 0x8000000100170B70, aBlock);
    v4 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v12 + 4, v12 + 12);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  v15 = OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_pinLength;
  if (*(_QWORD *)(v5 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_pinLength) >= *(_QWORD *)(v5
                                                                                                  + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_maxPinLength))
  {
    v23 = 0xD000000000000013;
    v24 = (void *)0x8000000100170AF0;
    v25 = 12006;
LABEL_15:
    v29 = sub_100024818(v25, v23, v24, 0);
    swift_willThrow(v29);
    return;
  }
  v16 = OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_activeSession;
  v17 = *(void **)(v5 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_activeSession);
  if (!v17)
  {
    v26 = Logger.logObject.getter(v14);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "no session", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    v23 = 0xD000000000000025;
    v24 = (void *)0x8000000100170A60;
    v25 = 12010;
    goto LABEL_15;
  }
  v18 = v17;
  v19 = objc_msgSend(v18, "isActive");
  if (!(_DWORD)v19)
  {
    v30 = Logger.logObject.getter(v19);
    v31 = static os_log_type_t.error.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "session not active", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

    aBlock[4] = (uint64_t)sub_100122D44;
    aBlock[5] = 0;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000043B8;
    aBlock[3] = (uint64_t)&unk_1001A00F0;
    v33 = _Block_copy(aBlock);
    objc_msgSend(v18, "endSessionWithCompletion:", v33, v36);
    _Block_release(v33);
    v34 = *(void **)(v5 + v16);
    *(_QWORD *)(v5 + v16) = 0;

    v35 = sub_100024818(12010, 0xD000000000000028, (void *)0x8000000100170A90, 0);
    swift_willThrow(v35);
    goto LABEL_19;
  }
  sub_10011E784(v36, a2);
  if (v4)
  {
LABEL_19:

    return;
  }
  v20 = *(_QWORD *)(v5 + v15);
  v21 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  if (!v21)
  {
    *(_QWORD *)(v5 + v15) = v22;
    goto LABEL_19;
  }
  __break(1u);
}

void sub_100122D44()
{
  sub_1001244DC((uint64_t (*)(void))&static os_log_type_t.error.getter, "session not active, end session for PIN");
}

void sub_100122D58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27[6];
  uint64_t v28;
  uint64_t v29;

  v2 = v0;
  if (qword_1001AD288 != -1)
    swift_once(&qword_1001AD288, sub_1001218D8);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_100003A14(v3, (uint64_t)qword_1001B35E0);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v27[0] = v8;
    *(_DWORD *)v7 = 136315138;
    v28 = sub_1000056EC(0xD000000000000011, 0x8000000100170B50, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v7 + 4, v7 + 12);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }

  v10 = OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_activeSession;
  v11 = *(void **)(v0 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_activeSession);
  if (v11)
  {
    v12 = v11;
    v13 = objc_msgSend(v12, "isActive");
    if ((_DWORD)v13)
    {
      sub_10011F0B4();
      if (!v1)
      {
        v14 = *(_QWORD *)(v0 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_pinLength);
        v15 = v14 < 1;
        v16 = v14 - 1;
        if (!v15)
          *(_QWORD *)(v0 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_pinLength) = v16;
      }
    }
    else
    {
      v21 = Logger.logObject.getter(v13);
      v22 = static os_log_type_t.error.getter(v21);
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "session not active", v23, 2u);
        swift_slowDealloc(v23, -1, -1);
      }

      v27[4] = (uint64_t)sub_100122D44;
      v27[5] = 0;
      v27[0] = (uint64_t)_NSConcreteStackBlock;
      v27[1] = 1107296256;
      v27[2] = (uint64_t)sub_1000043B8;
      v27[3] = (uint64_t)&unk_1001A00C8;
      v24 = _Block_copy(v27);
      objc_msgSend(v12, "endSessionWithCompletion:", v24);
      _Block_release(v24);
      v25 = *(void **)(v2 + v10);
      *(_QWORD *)(v2 + v10) = 0;

      v26 = sub_100024818(12010, 0xD000000000000028, (void *)0x8000000100170A90, 0);
      swift_willThrow(v26);
    }

  }
  else
  {
    v17 = Logger.logObject.getter(v9);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "no session", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    v20 = sub_100024818(12010, 0xD000000000000025, (void *)0x8000000100170A60, 0);
    swift_willThrow(v20);
  }
}

void sub_1001230E8(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void **v10;
  id v11;
  void **v12;
  id v13;
  id v14;
  _QWORD *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  void *v37;
  id v38;
  void *v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  void *v43;
  void *v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  void **v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _TtC14softposreaderd12RemoteReader *v63;
  SEL v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  uint64_t v71;
  void *v72;
  void *v73;
  id v74;
  uint8_t *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void **v79;
  uint64_t v80;
  void *v81;
  _TtC14softposreaderd12RemoteReader *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  const char *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  SEL v99;
  id v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  NSObject *v113;
  os_log_type_t v114;
  uint8_t *v115;
  Swift::String v116;
  SEL v117;
  id v118;
  id v119;
  id v120;
  id v121;
  id v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  _QWORD *v142;
  void **v144;
  void **aBlock;
  uint64_t v146;
  uint64_t (*v147)(uint64_t);
  void *v148;
  void (*v149)();
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;

  v3 = v2;
  v4 = v1;
  if (qword_1001AD288 != -1)
    swift_once(&qword_1001AD288, sub_1001218D8);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_100003A14(v5, (uint64_t)qword_1001B35E0);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = (void **)swift_slowAlloc(32, -1);
    aBlock = v10;
    *(_DWORD *)v9 = 136315138;
    v151 = sub_1000056EC(0xD000000000000012, 0x8000000100170B30, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152, v9 + 4, v9 + 12);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }

  if (qword_1001AD210 != -1)
    swift_once(&qword_1001AD210, sub_100115468);
  v11 = objc_msgSend((id)qword_1001B4F20, "canEvaluatePolicy:error:", 2, 0);
  if (!(_DWORD)v11)
  {
    v23 = Logger.logObject.getter(v11);
    v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "no passcode when generating PIN block", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    v26 = sub_100024818(12008, 0xD00000000000001BLL, (void *)0x8000000100170A40, 0);
    swift_willThrow(v26);
    v12 = (void **)(v4 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_activeSession);
    v27 = *(void **)(v4 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_activeSession);
    if (!v27)
      goto LABEL_28;
    v149 = sub_1001244C8;
    v150 = 0;
    aBlock = _NSConcreteStackBlock;
    v146 = 1107296256;
    v28 = &unk_10019FFD8;
    goto LABEL_27;
  }
  v12 = (void **)(v4 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_activeSession);
  if (!*(_QWORD *)(v4 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_activeSession))
  {
    v29 = Logger.logObject.getter(v11);
    v30 = static os_log_type_t.error.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "no session", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
    }

    v32 = sub_100024818(12010, 0xD000000000000025, (void *)0x8000000100170A60, 0);
    swift_willThrow(v32);
    v27 = *v12;
    if (!*v12)
      goto LABEL_28;
    v149 = sub_1001244C8;
    v150 = 0;
    aBlock = _NSConcreteStackBlock;
    v146 = 1107296256;
    v28 = &unk_1001A0000;
    goto LABEL_27;
  }
  v13 = *(id *)(v4 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_activeSession);
  v14 = objc_msgSend(v13, "isActive");
  if (!(_DWORD)v14)
  {
    v33 = Logger.logObject.getter(v14);
    v34 = static os_log_type_t.error.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "session not active", v35, 2u);
      swift_slowDealloc(v35, -1, -1);
    }

    v36 = sub_100024818(12010, 0xD000000000000028, (void *)0x8000000100170A90, 0);
    swift_willThrow(v36);

    v27 = *v12;
    if (!*v12)
      goto LABEL_28;
    v149 = sub_1001244C8;
    v150 = 0;
    aBlock = _NSConcreteStackBlock;
    v146 = 1107296256;
    v28 = &unk_1001A0028;
LABEL_27:
    v147 = sub_1000043B8;
    v148 = v28;
    v37 = _Block_copy(&aBlock);
    v38 = v27;
    objc_msgSend(v38, "endSessionWithCompletion:", v37);
    _Block_release(v37);

LABEL_28:
    v15 = (_QWORD *)(v4 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_pinLength);
LABEL_29:
    *v15 = 0;
    v39 = *v12;
    *v12 = 0;

    return;
  }
  v15 = (_QWORD *)(v4 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_pinLength);
  v16 = *(_QWORD *)(v4 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_pinLength);
  if (v16)
  {
    if (v16 < *(_QWORD *)(v4 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_minPinLength))
    {
      v17 = Logger.logObject.getter(v14);
      v18 = static os_log_type_t.error.getter(v17);
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "not enough pin digits", v19, 2u);
        swift_slowDealloc(v19, -1, -1);
      }

      v20 = (void *)0x8000000100170B10;
      v21 = 12009;
      v22 = 0xD000000000000012;
LABEL_39:
      v3 = sub_100024818(v21, v22, v20, 0);
      swift_willThrow(v3);
LABEL_40:
      swift_errorRetain();
      v55 = swift_errorRetain();
      v56 = Logger.logObject.getter(v55);
      v57 = static os_log_type_t.error.getter(v56);
      if (os_log_type_enabled(v56, v57))
      {
        v58 = (uint8_t *)swift_slowAlloc(12, -1);
        v59 = (void **)swift_slowAlloc(32, -1);
        aBlock = v59;
        *(_DWORD *)v58 = 136315138;
        v151 = v3;
        swift_errorRetain();
        v60 = sub_100003A2C((uint64_t *)&unk_1001B1280);
        v61 = String.init<A>(describing:)(&v151, v60);
        v63 = (_TtC14softposreaderd12RemoteReader *)v62;
        v151 = sub_1000056EC(v61, v62, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152, v58 + 4, v58 + 12);
        swift_bridgeObjectRelease(v63, v64, v65, v66, v67, v68, v69, v70);
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "%s", v58, 0xCu);
        swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v59, -1, -1);
        swift_slowDealloc(v58, -1, -1);
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      swift_willThrow(v71);
      v72 = *v12;
      if (*v12)
      {
        v149 = sub_1001244C8;
        v150 = 0;
        aBlock = _NSConcreteStackBlock;
        v146 = 1107296256;
        v147 = sub_1000043B8;
        v148 = &unk_1001A0050;
        v73 = _Block_copy(&aBlock);
        v74 = v72;
        objc_msgSend(v74, "endSessionWithCompletion:", v73);
        _Block_release(v73);

      }
      goto LABEL_29;
    }
    if (*(_QWORD *)(v4 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_maxPinLength) < v16)
    {
      v52 = Logger.logObject.getter(v14);
      v53 = static os_log_type_t.error.getter(v52);
      if (os_log_type_enabled(v52, v53))
      {
        v54 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v54 = 0;
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "pin length exceeded", v54, 2u);
        swift_slowDealloc(v54, -1, -1);
      }

      v22 = 0xD000000000000013;
      v20 = (void *)0x8000000100170AF0;
      v21 = 12006;
      goto LABEL_39;
    }
    v75 = sub_10011F7FC();
    if (v2)
      goto LABEL_40;
    v77 = (uint64_t)v75;
    v78 = v76;
    type metadata accessor for TLV();
    static TLV.decode(from:)(v77, v78);
    v80 = v77;
    v82 = (_TtC14softposreaderd12RemoteReader *)v79;
    v133 = v78;
    v135 = v80;
    v140 = v13;
    v142 = v15;
    aBlock = v79;
    v83 = *(_QWORD *)TLVTag.cipherBlob.unsafeMutableAddressor();
    v84 = sub_100003A2C((uint64_t *)&unk_1001B36D0);
    v85 = sub_1000CC1BC();
    v86 = Collection<>.first(tag:)(v83, v84, v85);
    if (v86)
    {
      v94 = v86;
      v95 = TLVTag.blobDefinition.unsafeMutableAddressor();
      v96 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v94 + 200))(*v95);
      if (v96)
      {
        v131 = v96;
        v132 = v94;
        aBlock = (void **)&v82->super.isa;
        v97 = (uint64_t *)TLVTag.keyBlob.unsafeMutableAddressor();
        v98 = Collection<>.first(tag:)(*v97, v84, v85);
        swift_bridgeObjectRelease(v82, v99, v100, v101, v102, v103, v104, v105);
        if (v98)
        {
          v106 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v98 + 200))(*v95);
          if (v106)
          {
            v107 = v106;
            v130 = v98;
            if (qword_1001AD268 != -1)
              swift_once(&qword_1001AD268, sub_1001163C8);
            v108 = qword_1001B4FA0;
            v109 = *(_QWORD *)algn_1001B4FA8;
            sub_100005D9C(qword_1001B4FA0, *(unint64_t *)algn_1001B4FA8);
            sub_10012076C(2, v108, v109);
            v137 = v111;
            v138 = v110;
            v124 = sub_100005DE0(v108, v109);
            v125 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v131 + 168))(v124);
            v136 = v126;
            v127 = (*(uint64_t (**)(void))(*(_QWORD *)v107 + 168))();
            v50 = v128;
            swift_release(v107);
            swift_release(v130);
            swift_release(v131);
            swift_release(v132);

            sub_100005DE0(v135, v133);
            v129 = *v12;
            v141 = v16;
            if (!*v12)
            {
              v46 = v125;
              v47 = v137;
              v48 = v138;
              v51 = v127;
              v49 = v136;
              goto LABEL_48;
            }
            v134 = v50;
            v139 = v127;
            v46 = v125;
            v149 = sub_1001244C8;
            v150 = 0;
            aBlock = _NSConcreteStackBlock;
            v146 = 1107296256;
            v147 = sub_1000043B8;
            v148 = &unk_1001A0078;
            v44 = _Block_copy(&aBlock);
            v45 = v129;
            objc_msgSend(v45, "endSessionWithCompletion:", v44);
            goto LABEL_34;
          }
          swift_release(v132);
          swift_release(v131);
          swift_release(v98);
        }
        else
        {
          swift_release(v132);
          swift_release(v131);
        }
LABEL_58:
        sub_100005D9C(v135, v133);
        v112 = sub_100005D9C(v135, v133);
        v113 = Logger.logObject.getter(v112);
        v114 = static os_log_type_t.error.getter(v113);
        if (os_log_type_enabled(v113, v114))
        {
          v115 = (uint8_t *)swift_slowAlloc(12, -1);
          v144 = (void **)swift_slowAlloc(32, -1);
          aBlock = v144;
          *(_DWORD *)v115 = 136315138;
          v116 = Data.hexString()();
          v151 = sub_1000056EC(v116._countAndFlagsBits, (unint64_t)v116._object, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152, v115 + 4, v115 + 12);
          swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v116._object, v117, v118, v119, v120, v121, v122, v123);
          sub_100005DE0(v135, v133);
          sub_100005DE0(v135, v133);
          _os_log_impl((void *)&_mh_execute_header, v113, v114, "Error parsing PIN applet response: %s", v115, 0xCu);
          swift_arrayDestroy(v144, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v144, -1, -1);
          swift_slowDealloc(v115, -1, -1);
        }
        else
        {
          sub_100005DE0(v135, v133);
          sub_100005DE0(v135, v133);
        }

        v15 = v142;
        v13 = v140;
        v3 = sub_100024818(12003, 0xD000000000000021, (void *)0x8000000100170AC0, 0);
        swift_willThrow(v3);
        sub_100005DE0(v135, v133);
        goto LABEL_40;
      }
      swift_release(v94);
    }
    swift_bridgeObjectRelease(v82, v87, v88, v89, v90, v91, v92, v93);
    goto LABEL_58;
  }
  v40 = Logger.logObject.getter(v14);
  v41 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v42 = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "pin bypass", v42, 2u);
    swift_slowDealloc(v42, -1, -1);
  }
  v142 = v15;

  v43 = *v12;
  v141 = 0;
  if (!*v12)
  {
    v46 = 0;
    v51 = 0;
    v48 = 0;
    v49 = 0xC000000000000000;
    v50 = 0xC000000000000000;
    v47 = 0xC000000000000000;
    goto LABEL_48;
  }
  v149 = sub_1001244C8;
  v150 = 0;
  aBlock = _NSConcreteStackBlock;
  v146 = 1107296256;
  v147 = sub_1000043B8;
  v148 = &unk_1001A00A0;
  v44 = _Block_copy(&aBlock);
  v45 = v43;
  objc_msgSend(v45, "endSessionWithCompletion:", v44);
  v46 = 0;
  v138 = 0;
  v139 = 0;
  v134 = 0xC000000000000000;
  v136 = 0xC000000000000000;
  v137 = 0xC000000000000000;
LABEL_34:
  _Block_release(v44);

  v47 = v137;
  v48 = v138;
  v50 = v134;
  v49 = v136;
  v51 = v139;
LABEL_48:
  *v142 = 0;
  v81 = *v12;
  *v12 = 0;

  *(_QWORD *)a1 = v46;
  *(_QWORD *)(a1 + 8) = v49;
  *(_QWORD *)(a1 + 16) = v51;
  *(_QWORD *)(a1 + 24) = v50;
  *(_QWORD *)(a1 + 32) = v48;
  *(_QWORD *)(a1 + 40) = v47;
  *(_BYTE *)(a1 + 48) = v141 == 0;
}

void sub_100123F18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t aBlock[6];

  v1 = v0;
  if (qword_1001AD288 != -1)
    swift_once(&qword_1001AD288, sub_1001218D8);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100003A14(v2, (uint64_t)qword_1001B35E0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    aBlock[0] = v7;
    *(_DWORD *)v6 = 136315138;
    v14 = sub_1000056EC(0xD000000000000012, 0x8000000100170A20, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, aBlock, v6 + 4, v6 + 12);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }

  v8 = OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_activeSession;
  v9 = *(void **)(v1 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_activeSession);
  if (v9)
  {
    v10 = v9;
    sub_1001201AC((void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000DA1E0);

    v11 = *(void **)(v1 + v8);
    if (v11)
    {
      aBlock[4] = (uint64_t)sub_100124144;
      aBlock[5] = 0;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1000043B8;
      aBlock[3] = (uint64_t)&unk_10019FFB0;
      v12 = _Block_copy(aBlock);
      v13 = v11;
      objc_msgSend(v13, "endSessionWithCompletion:", v12);
      _Block_release(v12);

      v9 = *(void **)(v1 + v8);
    }
    else
    {
      v9 = 0;
    }
  }
  *(_QWORD *)(v1 + v8) = 0;

  *(_QWORD *)(v1 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_pinLength) = 0;
}

void sub_100124144()
{
  sub_1001244DC((uint64_t (*)(void))&static os_log_type_t.default.getter, "NF session ended in DefaultPINAppletProxy.cancelPINCapture()");
}

void sub_100124158(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t inited;
  _TtC14softposreaderd12RemoteReader *v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  _BYTE v27[88];

  v2 = v1;
  v3 = OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_activeSession;
  v4 = *(void **)(v1 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_activeSession);
  if (!v4)
  {
    __break(1u);
    return;
  }
  sub_100097850();
  v6 = a1;
  v7 = v4;
  LOBYTE(a1) = static NSObject.== infix(_:_:)(v6, v7);

  if ((a1 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (qword_1001AD288 != -1)
LABEL_8:
    swift_once(&qword_1001AD288, sub_1001218D8);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100003A14(v8, (uint64_t)qword_1001B35E0);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.error.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "secureElementManagerSessionDidEndUnexpectedly()", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  v13 = *(void **)(v2 + v3);
  *(_QWORD *)(v2 + v3) = 0;

  v14 = (_QWORD *)(v2 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_auditor);
  v15 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_auditor + 24);
  v16 = v14[4];
  sub_100005EF8(v14, v15);
  v17 = sub_100003A2C(&qword_1001ADA18);
  inited = swift_initStackObject(v17, v27);
  *(_OWORD *)(inited + 16) = xmmword_10015A5F0;
  *(_QWORD *)(inited + 32) = 0xD000000000000010;
  *(_QWORD *)(inited + 40) = 0x800000010016B450;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 80) = &protocol witness table for String;
  *(_QWORD *)(inited + 48) = 0xD00000000000002DLL;
  *(_QWORD *)(inited + 56) = 0x80000001001709F0;
  v19 = (_TtC14softposreaderd12RemoteReader *)sub_1000E84EC(inited);
  sub_100115684(27, (uint64_t)v19, v15, v16);
  swift_bridgeObjectRelease(v19, v20, v21, v22, v23, v24, v25, v26);
}

uint64_t type metadata accessor for DefaultPINAppletProxy()
{
  return objc_opt_self(_TtC9SPREngine21DefaultPINAppletProxy);
}

void sub_1001243E8(uint64_t a1, uint64_t a2)
{
  sub_100121B9C(a1, a2);
}

void sub_10012441C(uint64_t a1, unint64_t a2)
{
  sub_100122948(a1, a2);
}

void sub_10012443C()
{
  sub_100122D58();
}

double sub_10012445C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;
  __int128 v4;
  __int128 v5;
  char v6;
  _OWORD v7[3];
  char v8;

  sub_1001230E8((uint64_t)v7);
  if (!v1)
  {
    result = *(double *)v7;
    v4 = v7[1];
    v5 = v7[2];
    v6 = v8;
    *(_OWORD *)a1 = v7[0];
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = v5;
    *(_BYTE *)(a1 + 48) = v6;
  }
  return result;
}

void sub_1001244A8()
{
  sub_100123F18();
}

void sub_1001244C8()
{
  sub_1001244DC((uint64_t (*)(void))&static os_log_type_t.info.getter, "NF session ended in DefaultPINAppletProxy.generatePINBlobs()");
}

void sub_1001244DC(uint64_t (*a1)(void), const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  NSObject *oslog;

  if (qword_1001AD288 != -1)
    swift_once(&qword_1001AD288, sub_1001218D8);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100003A14(v4, (uint64_t)qword_1001B35E0);
  oslog = Logger.logObject.getter(v5);
  v6 = a1();
  if (os_log_type_enabled(oslog, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v6, a2, v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

}

uint64_t sub_1001245B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001245C4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1001245CC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = __DataStorage._bytes.getter();
  v5 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v5 += a1 - result;
  }
  v6 = __OFSUB__(a2, a1);
  v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }
  v8 = __DataStorage._length.getter();
  if (v8 >= v7)
    v9 = v7;
  else
    v9 = v8;
  v10 = v5 + v9;
  if (v5)
    v11 = v10;
  else
    v11 = 0;
  return Data._Representation.append(contentsOf:)(v5, v11);
}

void sub_10012465C(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[5];

  v3[3] = &type metadata for Data;
  v3[4] = &protocol witness table for Data;
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_1001246C0 + dword_100124864[sub_100005EF8(v3, (uint64_t)&type metadata for Data)[1] >> 62];
  __asm { BR              X10 }
}

uint64_t sub_1001246D0()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  __int16 v6;
  char v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;

  v5 = v2;
  v6 = v3;
  v7 = BYTE2(v3);
  v8 = BYTE3(v3);
  v9 = BYTE4(v3);
  v10 = BYTE5(v3);
  sub_100005D9C(v1, v0);
  Data._Representation.append(contentsOf:)(&v5, (char *)&v5 + BYTE6(v3));
  return sub_100005D3C(&v11);
}

uint64_t sub_100124874(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003A2C((uint64_t *)&unk_1001B36F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001248B4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001248D8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

Swift::Int sub_100124904(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100122664(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_100124964@<X0>(char *a1@<X8>)
{
  const void *v1;
  const void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _OWORD v14[25];
  _OWORD v15[4];
  _BYTE v16[16];
  _QWORD v17[2];

  v2 = v1;
  v4 = sub_100003A2C((uint64_t *)&unk_1001B36F0);
  __chkstk_darwin(v4);
  v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(v14, v2, 0x110uLL);
  v15[0] = v14[11];
  v15[1] = v14[12];
  v15[2] = v14[13];
  v15[3] = v14[14];
  v14[21] = v14[7];
  v14[22] = v14[8];
  v14[23] = v14[9];
  v14[24] = v14[10];
  v14[17] = v14[3];
  v14[18] = v14[4];
  v14[19] = v14[5];
  v14[20] = v14[6];
  sub_100124CCC((uint64_t)v15, (uint64_t)v16);
  sub_100124CCC((uint64_t)v16, (uint64_t)v17);
  if (!v17[1])
    goto LABEL_7;
  UUID.init(uuidString:)(v17[0]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_100124874((uint64_t)v6);
LABEL_7:
    v12 = 1;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(a1, v12, 1, v7);
  }
  v11 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v11(v10, v6, v7);
  if ((sub_100125404() & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    goto LABEL_7;
  }
  v11(a1, v10, v7);
  v12 = 0;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(a1, v12, 1, v7);
}

uint64_t sub_100124B10@<X0>(char *a1@<X8>)
{
  const void *v1;
  const void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v13)(char *, char *, uint64_t);
  char v14;
  _OWORD v15[26];
  _OWORD v16[3];
  _BYTE v17[16];
  _QWORD v18[2];

  v2 = v1;
  v4 = sub_100003A2C((uint64_t *)&unk_1001B36F0);
  __chkstk_darwin(v4);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(v15, v2, 0x110uLL);
  v15[25] = v15[11];
  v16[0] = v15[12];
  v16[1] = v15[13];
  v16[2] = v15[14];
  v15[21] = v15[7];
  v15[22] = v15[8];
  v15[23] = v15[9];
  v15[24] = v15[10];
  v15[17] = v15[3];
  v15[18] = v15[4];
  v15[19] = v15[5];
  v15[20] = v15[6];
  sub_100124CCC((uint64_t)v16, (uint64_t)v17);
  sub_100124CCC((uint64_t)v17, (uint64_t)v18);
  if (!v18[1])
    goto LABEL_4;
  UUID.init(uuidString:)(v18[0]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_100124874((uint64_t)v6);
LABEL_4:
    v11 = 1;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(a1, v11, 1, v7);
  }
  v13 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v13(v10, v6, v7);
  v14 = sub_100125404();
  if (v14 == 2 || (v14 & 1) != 0)
  {
    v13(a1, v10, v7);
    v11 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v11 = 1;
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(a1, v11, 1, v7);
}

uint64_t sub_100124CCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003A2C(&qword_1001AE030);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100124D14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _TtC14softposreaderd12RemoteReader *v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[280];
  uint64_t v45;

  v3 = type metadata accessor for DateInterval(0);
  v41 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v40 = (uint64_t)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0, v5);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001AD290 != -1)
    swift_once(&qword_1001AD290, sub_100125024);
  v10 = type metadata accessor for Logger(0);
  sub_100003A14(v10, (uint64_t)qword_1001B3700);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v42 = a1;
  v12 = v11(v9, a1, v6);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc(22, -1);
    v38 = v1;
    v16 = v15;
    v36 = swift_slowAlloc(64, -1);
    v45 = v36;
    *(_DWORD *)v16 = 136315394;
    v43 = sub_1000056EC(0x65746164696C6176, 0xED0000293A746128, &v45);
    v37 = v3;
    v17 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v16 + 4, v16 + 12);
    *(_WORD *)(v16 + 12) = 2080;
    v35 = v16 + 14;
    v19 = sub_1000D26BC(v17, v18);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v6, v19);
    v22 = (_TtC14softposreaderd12RemoteReader *)v21;
    v43 = sub_1000056EC(v20, v21, &v45);
    v3 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v35, v16 + 22);
    swift_bridgeObjectRelease(v22, v23, v24, v25, v26, v27, v28, v29);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "KernelToken.%s date: %s", (uint8_t *)v16, 0x16u);
    v30 = v36;
    swift_arrayDestroy(v36, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v16, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  memcpy(v44, v39, 0x110uLL);
  v31 = v40;
  sub_1000D1354(v40);
  v32 = DateInterval.contains(_:)(v42);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8))(v31, v3);
  if ((v32 & 1) == 0)
  {
    v34 = sub_1000247AC(2012, 0, 0, 0);
    return swift_willThrow(v34);
  }
  return result;
}

uint64_t sub_100125024()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B3700);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B3700);
  if (qword_1001AD140 != -1)
    swift_once(&qword_1001AD140, sub_1000CC2E4);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4DB0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

_QWORD *sub_1001250B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _TtC14softposreaderd12RemoteReader *a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v5;
  const char *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  _QWORD *result;
  const char *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  const char *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  _TtC14softposreaderd12RemoteReader *v36;
  _TtC14softposreaderd12RemoteReader *v37;
  uint64_t v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  const char *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  SEL v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint64_t v72;
  char v73;
  SEL v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  SEL v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  _QWORD v88[34];
  _BYTE __dst[272];
  _BYTE v90[272];
  _OWORD __src[23];
  __int128 v92;
  __int128 v93;
  _OWORD v94[4];
  _BYTE v95[16];
  uint64_t v96;
  uint64_t v97;

  sub_1000D2C04(a1, a2, __src);
  if (v5)
  {
    swift_bridgeObjectRelease(a4, v9, v10, v11, v12, v13, v14, v15);
    swift_errorRetain();
    sub_1000247AC(2015, 0, 0, v5);
    v16 = swift_errorRelease();
    swift_willThrow(v16);
    return (_QWORD *)swift_errorRelease();
  }
  memcpy(__dst, __src, sizeof(__dst));
  v94[0] = __src[11];
  v94[1] = __src[12];
  v94[2] = __src[13];
  v94[3] = __src[14];
  __src[21] = __src[7];
  __src[22] = __src[8];
  v92 = __src[9];
  v93 = __src[10];
  __src[17] = __src[3];
  __src[18] = __src[4];
  __src[19] = __src[5];
  __src[20] = __src[6];
  sub_100124CCC((uint64_t)v94, (uint64_t)v95);
  memcpy(v90, __src, sizeof(v90));
  sub_100124CCC((uint64_t)v95, (uint64_t)&v96);
  v25 = v97;
  if (!v97)
  {
    swift_bridgeObjectRelease(a4, v18, v19, v20, v21, v22, v23, v24);
    goto LABEL_13;
  }
  v26 = v96;
  v27 = v92;
  swift_bridgeObjectRetain();
  sub_10005BAFC(__src);
  sub_10002469C((uint64_t)v95);
  if (String.count.getter(v26, v25) != 36)
  {
    swift_bridgeObjectRelease(*((_TtC14softposreaderd12RemoteReader **)&v27 + 1), v28, v29, v30, v31, v32, v33, v34);
    swift_bridgeObjectRelease(a4, v60, v61, v62, v63, v64, v65, v66);
    sub_100054898(__src);
    sub_1000246C4((uint64_t)v95);
    goto LABEL_13;
  }
  v35 = sub_100081EE4(v26, v25);
  v37 = v36;
  v38 = String.count.getter(v35, v36);
  swift_bridgeObjectRelease(v37, v39, v40, v41, v42, v43, v44, v45);
  if (v38 != 32)
  {
    swift_bridgeObjectRelease(*((_TtC14softposreaderd12RemoteReader **)&v27 + 1), v46, v47, v48, v49, v50, v51, v52);
    goto LABEL_12;
  }
  if (!*((_QWORD *)&v27 + 1))
  {
LABEL_12:
    swift_bridgeObjectRelease(a4, v46, v47, v48, v49, v50, v51, v52);
    sub_100054898(__src);
    goto LABEL_13;
  }
  if (v27 == __PAIR128__((unint64_t)a4, a3))
  {
    swift_bridgeObjectRelease(*((_TtC14softposreaderd12RemoteReader **)&v27 + 1), v46, v47, v48, v49, v50, v51, v52);
    swift_bridgeObjectRelease(a4, v53, v54, v55, v56, v57, v58, v59);
    sub_100054898(__src);
LABEL_19:
    result = memcpy(a5, __dst, 0x110uLL);
    a5[17] = xmmword_100162DC0;
    return result;
  }
  v73 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, *((_QWORD *)&v27 + 1), a3, a4, 0);
  swift_bridgeObjectRelease(*((_TtC14softposreaderd12RemoteReader **)&v27 + 1), v74, v75, v76, v77, v78, v79, v80);
  swift_bridgeObjectRelease(a4, v81, v82, v83, v84, v85, v86, v87);
  sub_100054898(__src);
  if ((v73 & 1) != 0)
    goto LABEL_19;
LABEL_13:
  if (qword_1001AD290 != -1)
    swift_once(&qword_1001AD290, sub_100125024);
  v67 = type metadata accessor for Logger(0);
  v68 = sub_100003A14(v67, (uint64_t)qword_1001B3700);
  v69 = Logger.logObject.getter(v68);
  v70 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v69, v70))
  {
    v71 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v71 = 0;
    _os_log_impl((void *)&_mh_execute_header, v69, v70, "tpid bad format or supplied seid not matching jwt seid", v71, 2u);
    swift_slowDealloc(v71, -1, -1);
  }

  v72 = sub_1000247AC(2011, 0, 0, 0);
  swift_willThrow(v72);
  memcpy(v88, v90, sizeof(v88));
  return sub_100054898(v88);
}

uint64_t sub_100125404()
{
  unint64_t v0;
  int v1;
  unsigned int v2;
  unsigned int v3;

  v0 = UUID.uuid.getter();
  v1 = v0 >> 4;
  v2 = v1 - 1;
  if (v1 == 4)
    v3 = (v0 >> 31) & 1;
  else
    v3 = 2;
  if (v2 >= 3)
    return v3;
  else
    return 0;
}

uint64_t StorageSetting.description.getter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  if (!a3)
  {
    v3 = 0x7261726F706D6574;
    goto LABEL_5;
  }
  if (a3 == 1)
  {
    v3 = 0x6E6F697461636F6CLL;
LABEL_5:
    v6 = v3;
    String.append(_:)(*(Swift::String *)&a1);
    return v6;
  }
  if (a1 ^ 1 | a2)
    v5 = 0x656C6974616C6F76;
  else
    v5 = 0x7261726F706D6574;
  if (a1 | a2)
    return v5;
  else
    return 0x3A746C7561666564;
}

uint64_t sub_100125528(uint64_t a1, uint64_t a2)
{
  return _s9SPREngine14StorageSettingO21__derived_enum_equalsySbAC_ACtFZ_0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16));
}

uint64_t sub_100125544()
{
  uint64_t v0;

  return StorageSetting.description.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t _s9SPREngine14StorageSettingO21__derived_enum_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a3)
  {
    if (a3 == 1)
    {
      if (a6 == 1)
      {
        if (a1 == a4 && a2 == a5)
          return 1;
        return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a4, a5, 0);
      }
    }
    else if (a1 | a2)
    {
      if (a1 ^ 1 | a2)
      {
        if (a6 == 2 && a4 == 2 && !a5)
          return 1;
      }
      else if (a6 == 2 && a4 == 1 && !a5)
      {
        return 1;
      }
    }
    else if (a6 == 2 && !(a5 | a4))
    {
      return 1;
    }
  }
  else if (!a6)
  {
    if (a1 == a4 && a2 == a5)
      return 1;
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a4, a5, 0);
  }
  return 0;
}

uint64_t destroy for StorageSetting(uint64_t a1)
{
  return sub_10000CA58(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s9SPREngine14StorageSettingOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000E4ED8(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for StorageSetting(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000E4ED8(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_10000CA58(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for StorageSetting(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_10000CA58(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for StorageSetting(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for StorageSetting(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1001257AC(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_1001257C4(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for StorageSetting()
{
  return &type metadata for StorageSetting;
}

uint64_t sub_1001257EC(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;

  if ((a2 & 0x2000000000000000) != 0)
    v7 = HIBYTE(a2) & 0xF;
  else
    v7 = a1 & 0xFFFFFFFFFFFFLL;
  if (a1 == a5 && a2 == a6 && !(a3 >> 16) && v7 == a4 >> 16)
    return 1;
  else
    return _stringCompareInternal(_:_:_:_:expecting:)(a1) & 1;
}

unint64_t sub_100125854(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  Swift::String v45;
  void *object;
  uint64_t v47;
  _QWORD v48[4];
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;

  v4 = sub_10008EBAC(58, 0xE100000000000000, a1, a2);
  if ((v5 & 1) != 0)
  {
    v7 = Substring.init(_:)(0x6E6F697461636F6CLL, 0xE800000000000000);
    v9 = v15;
    v11 = v16;
    v13 = v17;
    result = 15;
  }
  else
  {
    v6 = v4;
    v7 = String.subscript.getter(15, v4, a1, a2);
    v9 = v8;
    v11 = v10;
    v13 = v12;
    result = String.index(after:)(v6, a1, a2);
  }
  v18 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v18 = a1 & 0xFFFFFFFFFFFFLL;
  if (4 * v18 >= result >> 14)
  {
    v19 = 7;
    if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
      v19 = 11;
    v20 = String.subscript.getter(result, v19 | (v18 << 16), a1, a2);
    v22 = v21;
    v24 = v23;
    v51 = v13;
    v25 = v11;
    v26 = v7;
    v28 = v27;
    v29 = swift_bridgeObjectRelease(a2);
    v49 = 47;
    v50 = 0xE100000000000000;
    __chkstk_darwin(v29);
    v48[2] = &v49;
    swift_bridgeObjectRetain(v28);
    v30 = (_QWORD *)sub_10007D2AC(0x7FFFFFFFFFFFFFFFLL, 1, sub_1000D0F5C, (uint64_t)v48, v20, v22, v24, v28);
    v31 = v28;
    v32 = v26;
    v33 = v25;
    v34 = v51;
    swift_bridgeObjectRelease(v31);
    if ((sub_1001257EC(0x746C7561666564, 0xE700000000000000, v32, v9, v33, v34) & 1) != 0)
    {
      swift_bridgeObjectRelease(v30);
      v35 = (_QWORD *)v34;
LABEL_11:
      swift_bridgeObjectRelease(v35);
      return 0;
    }
    if ((sub_1001257EC(0x7261726F706D6574, 0xE900000000000079, v32, v9, v33, v34) & 1) != 0)
    {
      swift_bridgeObjectRelease(v34);
      v36 = v30[2];
      if (v36 != 1)
      {
        if (!v36)
        {
          swift_bridgeObjectRelease(v30);
          return 1;
        }
        swift_bridgeObjectRelease(v30);
        v38 = 0xD000000000000016;
        v39 = "invalid temporary name";
LABEL_24:
        v44 = (void *)((unint64_t)(v39 - 32) | 0x8000000000000000);
LABEL_26:
        v47 = sub_1000243DC(7001, v38, v44, 0);
        swift_willThrow(v47);
        return v34;
      }
    }
    else
    {
      if ((sub_1001257EC(0x656C6974616C6F76, 0xE800000000000000, v32, v9, v33, v34) & 1) != 0)
      {
        swift_bridgeObjectRelease(v30);
        swift_bridgeObjectRelease(v34);
        return 2;
      }
      if ((sub_1001257EC(0x6E6F697461636F6CLL, 0xE800000000000000, v32, v9, v33, v34) & 1) == 0)
      {
        swift_bridgeObjectRelease(v30);
        v49 = 0;
        v50 = 0xE000000000000000;
        _StringGuts.grow(_:)(22);
        swift_bridgeObjectRelease(v50);
        v49 = 0xD000000000000014;
        v50 = 0x8000000100170CB0;
        v45._countAndFlagsBits = static String._fromSubstring(_:)(v32, v9, v33, v34);
        object = v45._object;
        String.append(_:)(v45);
        swift_bridgeObjectRelease(v34);
        swift_bridgeObjectRelease(object);
        v38 = v49;
        v44 = (void *)v50;
        goto LABEL_26;
      }
      swift_bridgeObjectRelease(v34);
      v37 = v30[2];
      if (v37 != 1)
      {
        v35 = v30;
        if (!v37)
          goto LABEL_11;
        swift_bridgeObjectRelease(v30);
        v38 = 0xD000000000000015;
        v39 = "invalid location name";
        goto LABEL_24;
      }
    }
    v40 = v30[4];
    v41 = v30[5];
    v42 = v30[6];
    v43 = v30[7];
    swift_bridgeObjectRetain(v43);
    swift_bridgeObjectRelease(v30);
    v34 = static String._fromSubstring(_:)(v40, v41, v42, v43);
    swift_bridgeObjectRelease(v43);
    return v34;
  }
  __break(1u);
  return result;
}

uint64_t sub_100125CB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::String v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;

  v3 = sub_100003A2C(&qword_1001B0438);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 24))
  {
    v5 = 0;
LABEL_16:
    sub_10005218C(a1, &qword_1001B12E0);
    return (uint64_t)v5;
  }
  sub_100117C68(a1, (uint64_t)&v21);
  if (v23)
  {
    v10 = swift_dynamicCast(v5, &v21, (char *)&type metadata for Any + 8, v6, 6);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, v10 ^ 1u, 1, v6);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
    {
      v11 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v7 + 32))(v9, v5, v6);
      v5 = (uint64_t *)v9;
      v12 = URL.absoluteString.getter(v11);
      v14 = sub_100125854(v12, v13);
      if (!v1)
        v5 = (uint64_t *)v14;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      goto LABEL_16;
    }
  }
  else
  {
    sub_10005218C((uint64_t)&v21, &qword_1001B12E0);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
  }
  sub_10005218C((uint64_t)v5, &qword_1001B0438);
  sub_100117C68(a1, (uint64_t)&v21);
  if (v23)
  {
    if (swift_dynamicCast(&v19, &v21, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    {
      v15 = sub_100125854(v19, (unint64_t)v20);
      if (!v1)
        v5 = (uint64_t *)v15;
      goto LABEL_16;
    }
  }
  else
  {
    sub_10005218C((uint64_t)&v21, &qword_1001B12E0);
  }
  v21 = 0;
  v22 = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(27);
  v19 = v21;
  v20 = v22;
  v16._object = (void *)0x8000000100170C90;
  v5 = &v19;
  v16._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v16);
  result = sub_100117C68(a1, (uint64_t)&v21);
  if (v23)
  {
    _print_unlocked<A, B>(_:_:)(&v21, &v19, (char *)&type metadata for Any + 8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    sub_100005D3C(&v21);
    v18 = sub_1000243DC(7001, v19, v20, 0);
    swift_willThrow(v18);
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t sub_100125FB0()
{
  uint64_t v0;
  double v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _TtC14softposreaderd12RemoteReader *v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  _TtC14softposreaderd12RemoteReader *v47;
  SEL v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;

  v3 = v0;
  if (qword_1001AD308 != -1)
    swift_once(&qword_1001AD308, sub_10013E994);
  v4 = static GlobalState.shared;
  objc_msgSend(*(id *)(static GlobalState.shared + 72), "lock");
  while (*(uint64_t *)(v4 + 96) > 0 || *(_BYTE *)(v4 + 80) == 1)
    objc_msgSend(*(id *)(v4 + 72), "wait");
  v5 = *(_QWORD *)(v4 + 88);
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
  {
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  *(_QWORD *)(v4 + 88) = v7;
  objc_msgSend(*(id *)(v4 + 72), "unlock");
  if ((*(_BYTE *)(v4 + 32) & 1) != 0)
  {
    v8 = 0;
    v1 = -INFINITY;
  }
  else
  {
    v1 = *(double *)(v4 + 24);
    v8 = *(_DWORD *)(v4 + 16);
  }
  objc_msgSend(*(id *)(v4 + 72), "lock");
  v9 = *(_QWORD *)(v4 + 88);
  v6 = __OFSUB__(v9, 1);
  v10 = v9 - 1;
  if (v6)
    goto LABEL_49;
  *(_QWORD *)(v4 + 88) = v10;
  if (!v10)
    objc_msgSend(*(id *)(v4 + 72), "broadcast");
  objc_msgSend(*(id *)(v4 + 72), "unlock");
  v11 = *(_DWORD *)(v3 + 48);
  if (v8 < v11)
    return 1;
  v2 = *(double *)(v3 + 56);
  if (v11 >= v8 && v1 < v2)
    return 1;
  objc_msgSend(*(id *)(v4 + 72), "lock");
  if (*(uint64_t *)(v4 + 96) > 0 || *(_BYTE *)(v4 + 80) == 1)
  {
    do
    {
      do
        objc_msgSend(*(id *)(v4 + 72), "wait");
      while (*(uint64_t *)(v4 + 96) > 0);
    }
    while ((*(_BYTE *)(v4 + 80) & 1) != 0);
  }
  v13 = *(_QWORD *)(v4 + 88);
  v6 = __OFADD__(v13, 1);
  v14 = v13 + 1;
  if (v6)
    goto LABEL_50;
  *(_QWORD *)(v4 + 88) = v14;
  objc_msgSend(*(id *)(v4 + 72), "unlock");
  if (*(_BYTE *)(v4 + 56))
    v15 = 0;
  else
    v15 = *(_DWORD *)(v4 + 52);
  objc_msgSend(*(id *)(v4 + 72), "lock");
  v16 = *(_QWORD *)(v4 + 88);
  v6 = __OFSUB__(v16, 1);
  v17 = v16 - 1;
  if (v6)
    goto LABEL_51;
  *(_QWORD *)(v4 + 88) = v17;
  if (!v17)
    objc_msgSend(*(id *)(v4 + 72), "broadcast");
  v18 = TMGetKernelMonotonicClock(objc_msgSend(*(id *)(v4 + 72), "unlock"));
  if (v15 < v8 || v8 >= v15 && v18 < v1)
  {
    if (qword_1001AD298 != -1)
      swift_once(&qword_1001AD298, sub_100126EEC);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_100003A14(v19, (uint64_t)qword_1001B3718);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "corrupt timestamp stored in device", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    v24 = static GlobalState.shared;
    result = (uint64_t)objc_msgSend(*(id *)(static GlobalState.shared + 72), "lock");
    v25 = *(_QWORD *)(v24 + 96);
    v6 = __OFADD__(v25, 1);
    v26 = v25 + 1;
    if (v6)
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v24 + 96) = v26;
      while (*(uint64_t *)(v24 + 88) > 0 || *(_BYTE *)(v24 + 80) == 1)
        result = (uint64_t)objc_msgSend(*(id *)(v24 + 72), "wait");
      v27 = *(_QWORD *)(v24 + 96);
      v6 = __OFSUB__(v27, 1);
      v28 = v27 - 1;
      if (!v6)
      {
        *(_QWORD *)(v24 + 96) = v28;
        *(_BYTE *)(v24 + 80) = 1;
        objc_msgSend(*(id *)(v24 + 72), "unlock");
        *(_QWORD *)(v24 + 16) = 0;
        *(_QWORD *)(v24 + 24) = 0;
        *(_BYTE *)(v24 + 32) = 1;
        sub_10013E340();
        objc_msgSend(*(id *)(v24 + 72), "lock");
        *(_BYTE *)(v24 + 80) = 0;
        objc_msgSend(*(id *)(v24 + 72), "broadcast");
        objc_msgSend(*(id *)(v24 + 72), "unlock");
        goto LABEL_43;
      }
    }
    __break(1u);
    return result;
  }
LABEL_43:
  if (qword_1001AD298 != -1)
LABEL_52:
    swift_once(&qword_1001AD298, sub_100126EEC);
  v29 = type metadata accessor for Logger(0);
  sub_100003A14(v29, (uint64_t)qword_1001B3718);
  v30 = swift_retain_n(v3, 2);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = swift_slowAlloc(22, -1);
    v34 = swift_slowAlloc(64, -1);
    v56 = v34;
    *(_DWORD *)v33 = 136315394;
    v35 = sub_10013D860(v2);
    v37 = (_TtC14softposreaderd12RemoteReader *)v36;
    v55 = sub_1000056EC(v35, v36, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v33 + 4, v33 + 12);
    swift_release_n(v3, 2);
    swift_bridgeObjectRelease(v37, v38, v39, v40, v41, v42, v43, v44);
    *(_WORD *)(v33 + 12) = 2080;
    v45 = sub_10013D860(v1);
    v47 = (_TtC14softposreaderd12RemoteReader *)v46;
    v55 = sub_1000056EC(v45, v46, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v33 + 14, v33 + 22);
    swift_bridgeObjectRelease(v47, v48, v49, v50, v51, v52, v53, v54);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "certificate timestamp(%s) is less than last MFD timestamp(%s)", (uint8_t *)v33, 0x16u);
    swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v33, -1, -1);

  }
  else
  {

    swift_release_n(v3, 2);
  }
  return 0;
}

void sub_1001264E8()
{
  uint64_t v0;
  uint64_t v1;
  Class isa;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  NSObject **v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;

  v1 = v0;
  isa = Data._bridgeToObjectiveC()().super.isa;
  v13 = 0;
  SESKeyDelete(isa, &v13);

  v3 = v13;
  if (v13)
  {
    v4 = qword_1001AD298;
    v5 = v13;
    if (v4 != -1)
      swift_once(&qword_1001AD298, sub_100126EEC);
    v6 = type metadata accessor for Logger(0);
    sub_100003A14(v6, (uint64_t)qword_1001B3718);
    v7 = v5;
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v10 = 138412290;
      v13 = v7;
      v7 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v10 + 4, v10 + 12);
      *v11 = v3;

      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to delete SES key (invalidate): %@", v10, 0xCu);
      v12 = sub_100003A2C((uint64_t *)&unk_1001AE430);
      swift_arrayDestroy(v11, 1, v12);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }
    else
    {

      v8 = v7;
    }

  }
  *(_BYTE *)(v1 + 88) = 1;

}

uint64_t sub_1001266E8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  id v9;
  _TtC14softposreaderd12RemoteReader *v10;
  Class isa;
  SEL v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  char v22;
  char v23;
  uint64_t result;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;

  if (qword_1001AD210 != -1)
    swift_once(&qword_1001AD210, sub_100115468);
  v8 = *(_QWORD *)(v3 + 80);
  v9 = (id)qword_1001B4F20;
  v10 = (_TtC14softposreaderd12RemoteReader *)sub_10000459C((uint64_t)&_swiftEmptyArrayStorage);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v10, v12, v13, v14, v15, v16, v17, v18);
  *(_QWORD *)&v30 = 0;
  v19 = objc_msgSend(v9, "evaluateAccessControl:operation:options:error:", v8, 3, isa, &v30);

  v20 = v30;
  if (!v19)
  {
    v25 = (id)v30;
    v26 = _convertNSErrorToError(_:)(v20);

    swift_willThrow(v27);
    swift_errorRetain();
    sub_10002460C(10003, 0x617461446E676973, (void *)0xE800000000000000, v26);
    v28 = swift_errorRelease();
    swift_willThrow(v28);
    return swift_errorRelease();
  }
  v21 = (id)v30;

  v30 = xmmword_10015E900;
  swift_retain();
  sub_100005D9C(a1, a2);
  sub_10003FF90(a3, v3, a1, a2, (uint64_t *)&v30);
  v23 = v22;
  sub_100005DE0(a1, a2);
  result = swift_release(v3);
  if (v4)
    return sub_10000A9B0(v30, *((unint64_t *)&v30 + 1));
  if ((v23 & 1) == 0)
  {
    v29 = sub_10002460C(10999, 0xD00000000000002BLL, (void *)0x8000000100170E20, 0);
    swift_willThrow(v29);
    return sub_10000A9B0(v30, *((unint64_t *)&v30 + 1));
  }
  if (*((_QWORD *)&v30 + 1) >> 60 != 15)
    return v30;
  __break(1u);
  return result;
}

uint64_t sub_100126944(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  id v9;
  _TtC14softposreaderd12RemoteReader *v10;
  Class isa;
  SEL v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  char v22;
  char v23;
  uint64_t result;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;

  if (qword_1001AD210 != -1)
    swift_once(&qword_1001AD210, sub_100115468);
  v8 = *(_QWORD *)(v3 + 80);
  v9 = (id)qword_1001B4F20;
  v10 = (_TtC14softposreaderd12RemoteReader *)sub_10000459C((uint64_t)&_swiftEmptyArrayStorage);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v10, v12, v13, v14, v15, v16, v17, v18);
  *(_QWORD *)&v30 = 0;
  v19 = objc_msgSend(v9, "evaluateAccessControl:operation:options:error:", v8, 3, isa, &v30);

  v20 = v30;
  if (!v19)
  {
    v25 = (id)v30;
    v26 = _convertNSErrorToError(_:)(v20);

    swift_willThrow(v27);
    swift_errorRetain();
    sub_10002460C(10003, 0x656769446E676973, (void *)0xEA00000000007473, v26);
    v28 = swift_errorRelease();
    swift_willThrow(v28);
    return swift_errorRelease();
  }
  v21 = (id)v30;

  v30 = xmmword_10015E900;
  swift_retain();
  sub_100005D9C(a1, a2);
  sub_100040BA0(a3, v3, a1, a2, (uint64_t *)&v30);
  v23 = v22;
  sub_100005DE0(a1, a2);
  result = swift_release(v3);
  if (v4)
    return sub_10000A9B0(v30, *((unint64_t *)&v30 + 1));
  if ((v23 & 1) == 0)
  {
    v29 = sub_10002460C(10999, 0xD000000000000038, (void *)0x8000000100170DA0, 0);
    swift_willThrow(v29);
    return sub_10000A9B0(v30, *((unint64_t *)&v30 + 1));
  }
  if (*((_QWORD *)&v30 + 1) >> 60 != 15)
    return v30;
  __break(1u);
  return result;
}

uint64_t sub_100126BA4()
{
  double *v0;
  double *v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  _TtC14softposreaderd12RemoteReader *object;
  SEL v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  Swift::String v13;
  Swift::String v14;
  _TtC14softposreaderd12RemoteReader *v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  Swift::String v23;
  uint64_t v24;
  Swift::String v25;
  Swift::String v26;
  _TtC14softposreaderd12RemoteReader *v27;
  SEL v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  Swift::String v35;
  uint64_t v36;
  unint64_t v37;
  Swift::String v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  Swift::String v46;
  uint64_t v47;
  int64_t v48;
  _TtC14softposreaderd12RemoteReader *v49;
  unint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  Swift::String v53;
  const char *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t countAndFlagsBits;
  void *v62;
  Swift::String v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  Swift::String v67;
  _TtC14softposreaderd12RemoteReader *v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  SEL v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  Swift::String v83;
  Swift::String v84;
  _TtC14softposreaderd12RemoteReader *v85;
  SEL v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  Swift::String v93;
  Swift::String v95;
  _TtC14softposreaderd12RemoteReader *v96;
  _QWORD v97[2];

  v1 = v0;
  v2 = *(_QWORD *)v0;
  v97[0] = 0;
  v97[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(90);
  v3._countAndFlagsBits = 32;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits = _typeName(_:qualified:)(v2, 0);
  object = (_TtC14softposreaderd12RemoteReader *)v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(object, v6, v7, v8, v9, v10, v11, v12);
  v13._countAndFlagsBits = 60;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  v95._countAndFlagsBits = (uint64_t)v0[2];
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
  v15 = (_TtC14softposreaderd12RemoteReader *)v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v15, v16, v17, v18, v19, v20, v21, v22);
  v23._countAndFlagsBits = 0xD000000000000014;
  v23._object = (void *)0x8000000100170E50;
  String.append(_:)(v23);
  v95._countAndFlagsBits = (uint64_t)v0[10];
  type metadata accessor for SecAccessControl(0);
  _print_unlocked<A, B>(_:_:)(&v95, v97, v24, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v25._countAndFlagsBits = 0x6F6C4279656B202CLL;
  v25._object = (void *)0xEB00000000203A62;
  String.append(_:)(v25);
  v26 = Data.hexString()();
  v27 = (_TtC14softposreaderd12RemoteReader *)v26._object;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(v27, v28, v29, v30, v31, v32, v33, v34);
  v35._countAndFlagsBits = 0x203A6661656C202CLL;
  v35._object = (void *)0xE800000000000000;
  String.append(_:)(v35);
  v36 = *((_QWORD *)v0 + 3);
  v37 = *((_QWORD *)v1 + 4);
  sub_100005D9C(*((_QWORD *)v1 + 3), v37);
  v38 = Data.base64EncodedString(options:)(0);
  sub_100005DE0(v36, v37);
  String.append(_:)(v38);
  swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v38._object, v39, v40, v41, v42, v43, v44, v45);
  v46._countAndFlagsBits = 0xD000000000000011;
  v46._object = (void *)0x8000000100170E70;
  String.append(_:)(v46);
  v47 = *((_QWORD *)v1 + 5);
  v48 = *(_QWORD *)(v47 + 16);
  v49 = &_swiftEmptyArrayStorage;
  if (v48)
  {
    v96 = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_100091C44(0, v48, 0);
    v49 = v96;
    v50 = (unint64_t *)(v47 + 40);
    do
    {
      v51 = *(v50 - 1);
      v52 = *v50;
      sub_100005D9C(v51, *v50);
      v95 = Data.base64EncodedString(options:)(0);
      v53._countAndFlagsBits = 44;
      v53._object = (void *)0xE100000000000000;
      String.append(_:)(v53);
      sub_100005DE0(v51, v52);
      v63 = v95;
      v62 = v63._object;
      countAndFlagsBits = v63._countAndFlagsBits;
      v96 = v49;
      v65 = *(_QWORD *)&v49->instance[8];
      v64 = *(_QWORD *)&v49->instance[16];
      if (v65 >= v64 >> 1)
      {
        sub_100091C44(v64 > 1, v65 + 1, 1);
        v49 = v96;
      }
      v50 += 2;
      *(_QWORD *)&v49->instance[8] = v65 + 1;
      v66 = (char *)v49 + 16 * v65;
      *((_QWORD *)v66 + 4) = countAndFlagsBits;
      *((_QWORD *)v66 + 5) = v62;
      --v48;
    }
    while (v48);
    swift_bridgeObjectRelease((_TtC14softposreaderd12RemoteReader *)v47, v54, v55, v56, v57, v58, v59, v60);
  }
  v67._countAndFlagsBits = Array.description.getter(v49, &type metadata for String);
  v68 = (_TtC14softposreaderd12RemoteReader *)v67._object;
  String.append(_:)(v67);
  swift_bridgeObjectRelease(v49, v69, v70, v71, v72, v73, v74, v75);
  swift_bridgeObjectRelease(v68, v76, v77, v78, v79, v80, v81, v82);
  v83._object = (void *)0x8000000100170E90;
  v83._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v83);
  v84._countAndFlagsBits = sub_10013D860(v1[7]);
  v85 = (_TtC14softposreaderd12RemoteReader *)v84._object;
  String.append(_:)(v84);
  swift_bridgeObjectRelease(v85, v86, v87, v88, v89, v90, v91, v92);
  v93._countAndFlagsBits = 32044;
  v93._object = (void *)0xE200000000000000;
  String.append(_:)(v93);
  return v97[0];
}

uint64_t sub_100126EEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000039D4(v0, qword_1001B3718);
  v1 = sub_100003A14(v0, (uint64_t)qword_1001B3718);
  if (qword_1001AD168 != -1)
    swift_once(&qword_1001AD168, sub_1000CC6D0);
  v2 = sub_100003A14(v0, (uint64_t)qword_1001B4E28);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100126F7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v0 = sub_100003A2C((uint64_t *)&unk_1001AE410);
  v1 = swift_allocObject(v0, 176, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1001614F0;
  *(_QWORD *)(v1 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSEKeyCertOIDSEID);
  *(_QWORD *)(v1 + 40) = v2;
  *(_QWORD *)(v1 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSEKeyCertOIDAppletVersion);
  *(_QWORD *)(v1 + 56) = v3;
  *(_QWORD *)(v1 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSEKeyCertOIDAccessControls);
  *(_QWORD *)(v1 + 72) = v4;
  *(_QWORD *)(v1 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSEKeyCertOIDNonce);
  *(_QWORD *)(v1 + 88) = v5;
  *(_QWORD *)(v1 + 96) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSEKeyCertOIDDeviceOSInformation);
  *(_QWORD *)(v1 + 104) = v6;
  *(_QWORD *)(v1 + 112) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSEKeyCertOIDUCRTDeviceIdentifiers);
  *(_QWORD *)(v1 + 120) = v7;
  *(_QWORD *)(v1 + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSEKeyCertOIDKeyUsageProperties);
  *(_QWORD *)(v1 + 136) = v8;
  *(_QWORD *)(v1 + 144) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSEKeyCertOIDDeviceIdentifiers);
  *(_QWORD *)(v1 + 152) = v9;
  result = static String._unconditionallyBridgeFromObjectiveC(_:)(kSEKeyCertOIDHardwareProperties);
  *(_QWORD *)(v1 + 160) = result;
  *(_QWORD *)(v1 + 168) = v11;
  qword_1001B4FD0 = v1;
  return result;
}

void sub_100127078()
{
  SecAccessControlRef v0;
  __SecAccessControl *v1;
  _TtC14softposreaderd12RemoteReader *v2;
  Class isa;
  SEL v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v0 = SecAccessControlCreateWithFlags(kCFAllocatorDefault, kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly, 0x40000001uLL, 0);
  if (v0)
  {
    v1 = v0;
    v2 = (_TtC14softposreaderd12RemoteReader *)sub_1000E8770((uint64_t)&off_100198B08);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v2, v4, v5, v6, v7, v8, v9, v10);
    SecAccessControlSetConstraints(v1, isa);

    qword_1001B4FD8 = (uint64_t)v1;
  }
  else
  {
    __break(1u);
  }
}

void sub_100127124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  sub_1001271FC(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, id, Class, Class, __CFString *, Class, id *))&SESKeySignDataWithSession, 0x695379654B534553, 0xEE00617461446E67);
}

void sub_100127194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  sub_1001271FC(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, id, Class, Class, __CFString *, Class, id *))&SESKeySignPrecomputedDigestWithSession, 0xD00000000000001BLL, 0x8000000100170E00);
}

void sub_1001271FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(uint64_t, id, Class, Class, __CFString *, Class, id *), uint64_t a7, uint64_t a8)
{
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  NSData v16;
  NSData v17;
  uint64_t v18;
  __CFString *v19;
  id v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  Class isa;
  id v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v43;

  v43 = 0;
  v11 = objc_msgSend((id)objc_opt_self(NFSecureElement), "embeddedSecureElementWithError:", &v43);
  v12 = v43;
  if (v11)
  {
    v13 = v11;
    v14 = v43;
    v15 = objc_msgSend(v13, "serialNumber");

    if (v15)
    {
      v16.super.isa = Data._bridgeToObjectiveC()().super.isa;
      v17.super.isa = Data._bridgeToObjectiveC()().super.isa;
      v18 = qword_1001AD210;
      v19 = (id)kSecKeyAlgorithmECDSASignatureMessageX962SHA256;
      if (v18 != -1)
        swift_once(&qword_1001AD210, sub_100115468);
      v20 = objc_msgSend((id)qword_1001B4F20, "externalizedContext", a7, a8);
      if (v20)
      {
        v21 = v20;
        v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
        v24 = v23;

        isa = Data._bridgeToObjectiveC()().super.isa;
        sub_100005DE0(v22, v24);
        v43 = 0;
        v26 = (id)a6(a1, v15, v16.super.isa, v17.super.isa, v19, isa, &v43);

        v27 = v43;
        v28 = v27;
        if (v26)
        {
          v29 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v26);
          v31 = v30;

          v32 = *a5;
          v33 = a5[1];
          *a5 = v29;
          a5[1] = v31;
          sub_10000A9B0(v32, v33);

        }
        else
        {
          v37 = v27;
          sub_10002460C(10004, v39, v40, (uint64_t)v28);

          swift_willThrow(v38);
        }
      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      v36 = sub_10002460C(10004, 0xD000000000000016, (void *)0x8000000100170DE0, 0);
      swift_willThrow(v36);
    }
  }
  else
  {
    v34 = v43;
    _convertNSErrorToError(_:)(v12);

    swift_willThrow(v35);
  }
}

